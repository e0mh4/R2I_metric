{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __usercall main@<rax>(char **a1@<rsi>, char **a2@<rdx>, int a3@<edi>, size_t a4@<r14>, const char *a5@<r15>)\n{\n  unsigned __int64 v5; // rbp\n  char **v6; // rbx\n  unsigned __int64 v7; // r12\n  __int64 i; // rax\n  unsigned __int64 v9; // r13\n  __int64 v10; // rax\n  char *v11; // rax\n  char *v12; // r8\n  const char *v13; // rdx\n  char v14; // al\n  const char *v15; // rcx\n  int v16; // ecx\n  char v17; // bp\n  int v18; // eax\n  __int64 (__fastcall *v19)(int, void *, size_t); // rax\n  int v20; // eax\n  char *v21; // rax\n  __int64 v22; // rdx\n  const __int32_t *v23; // rsi\n  char *v24; // rax\n  __int64 v25; // rdx\n  char *v26; // rax\n  __int64 v27; // rdx\n  __off_t v28; // rax\n  size_t v29; // rsi\n  __off_t v30; // rdi\n  __int64 v31; // rax\n  __int64 v32; // rbp\n  __int64 v33; // r12\n  size_t v34; // r15\n  __int64 v35; // r14\n  __int64 v36; // rbp\n  size_t v37; // r12\n  __off_t v38; // rbp\n  unsigned __int64 v39; // r12\n  __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  unsigned __int64 v42; // rbp\n  char v43; // si\n  void *v44; // r9\n  int v45; // esi\n  __int64 v46; // rax\n  bool v47; // zf\n  bool v48; // cf\n  unsigned __int64 v49; // r15\n  size_t v50; // rbp\n  size_t v51; // rdx\n  int v52; // esi\n  char *v53; // rdi\n  char *v54; // rbx\n  char *v55; // rdi\n  char v56; // r8\n  __int64 v57; // rax\n  const char *v58; // rax\n  char v59; // cl\n  const char *v60; // rdx\n  char v61; // al\n  const char *v62; // rax\n  char v63; // cl\n  const char *v64; // rdx\n  char v65; // al\n  const char *v66; // rax\n  char v67; // cl\n  const char *v68; // rdx\n  char v69; // al\n  const char *v70; // rax\n  char v71; // cl\n  const char *v72; // rdx\n  char v73; // al\n  size_t v74; // r14\n  const void *v75; // rsi\n  size_t v76; // rbp\n  size_t v77; // rdx\n  unsigned __int64 v78; // rbp\n  size_t v79; // rbp\n  __int64 v80; // rax\n  char *v81; // rax\n  __int64 v82; // rsi\n  char v83; // dl\n  __int64 v84; // rbx\n  char *v85; // rsi\n  char *v86; // rax\n  __int64 v87; // rdx\n  __int64 v88; // rax\n  __off_t v89; // rax\n  size_t v90; // rbx\n  __int64 v91; // rax\n  const char *v92; // rsi\n  char *v94; // rax\n  __int64 v95; // rdx\n  const __int32_t *v96; // rsi\n  char *v97; // rax\n  __int64 v98; // rdx\n  __off_t v99; // rdx\n  __off_t v100; // rdx\n  unsigned __int64 v101; // rbx\n  __off_t v102; // rdx\n  const char *v103; // rax\n  char v104; // cl\n  const char *v105; // rdx\n  char v106; // al\n  int v107; // eax\n  __off_t v108; // rax\n  unsigned __int64 v109; // rax\n  char *v110; // r8\n  const char *v111; // rdx\n  char v112; // si\n  const char *v113; // rcx\n  char v114; // dl\n  unsigned __int64 v115; // rdx\n  int v116; // esi\n  const char *v117; // rdx\n  char v118; // si\n  char *v119; // rcx\n  char v120; // dl\n  const char *v121; // rdx\n  char v122; // si\n  const char *v123; // rcx\n  char v124; // dl\n  const char *v125; // rdx\n  char v126; // si\n  const char *v127; // rcx\n  char v128; // dl\n  const char *v129; // rsi\n  const char *v130; // rdx\n  char v131; // si\n  char *v132; // rcx\n  char v133; // dl\n  const char *v134; // rdx\n  char v135; // si\n  const char *v136; // rcx\n  char v137; // dl\n  const char *v138; // rdi\n  const char *v139; // rdx\n  char v140; // si\n  const char *v141; // rcx\n  char v142; // dl\n  char v143; // [rsp+0h] [rbp-F8h]\n  unsigned __int64 v144; // [rsp+8h] [rbp-F0h]\n  char *v145; // [rsp+10h] [rbp-E8h]\n  int v146; // [rsp+1Ch] [rbp-DCh]\n  size_t n; // [rsp+20h] [rbp-D8h]\n  __m128i v148; // [rsp+28h] [rbp-D0h]\n  __m128i v149; // [rsp+38h] [rbp-C0h]\n  __m128i v150; // [rsp+48h] [rbp-B0h]\n  __m128i v151; // [rsp+58h] [rbp-A0h]\n  __m128i v152; // [rsp+68h] [rbp-90h]\n  __m128i v153; // [rsp+78h] [rbp-80h]\n  __m128i v154; // [rsp+88h] [rbp-70h]\n  __m128i v155; // [rsp+98h] [rbp-60h]\n  int v156; // [rsp+A8h] [rbp-50h]\n\n  LODWORD(v5) = a3;\n  v6 = a1;\n  v7 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\");\n  sigemptyset(&set);\n  if ( v7 )\n    goto LABEL_2;\n  while ( 1 )\n  {\n    sigaddset(&set, 10);\nLABEL_2:\n    sigaction(2, 0LL, (struct sigaction *)&n);\n    if ( n != 1 )\n      sigaddset(&set, 2);\n    v148 = _mm_load_si128((const __m128i *)&set);\n    v149 = _mm_load_si128((const __m128i *)&set.__val[2]);\n    v150 = _mm_load_si128((const __m128i *)&set.__val[4]);\n    v151 = _mm_load_si128((const __m128i *)&set.__val[6]);\n    v152 = _mm_load_si128((const __m128i *)&set.__val[8]);\n    v153 = _mm_load_si128((const __m128i *)&set.__val[10]);\n    v154 = _mm_load_si128((const __m128i *)&set.__val[12]);\n    v155 = _mm_load_si128((const __m128i *)&set.__val[14]);\n    if ( sigismember(&set, 10) )\n    {\n      n = (size_t)sub_403D40;\n      v156 = 0;\n      sigaction(10, (const struct sigaction *)&n, 0LL);\n    }\n    if ( sigismember(&set, 2) )\n    {\n      n = (size_t)sub_403D30;\n      v156 = -1073741824;\n      sigaction(2, (const struct sigaction *)&n, 0LL);\n    }\n    sub_406A10(*v6);\n    setlocale(6, \"\");\n    bindtextdomain(\n      \"coreutils\",\n      \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    sub_40DA80(sub_404720);\n    qword_614658 = getpagesize();\n    sub_406900(v5);\n    byte_6142B8 = 0;\n    if ( (unsigned int)sub_40A500((unsigned int)v5, v6, \"\", &unk_40F680, 0LL) != -1 )\n      goto LABEL_336;\n    for ( i = 0LL; i != 256; ++i )\n      byte_6143E0[i] = i;\n    if ( (int)v5 > dword_61433C )\n    {\n      v9 = 0LL;\n      a4 = 0LL;\n      v144 = 0LL;\n      v10 = (unsigned int)(v5 + ~dword_61433C);\n      v7 = (unsigned __int64)&v6[dword_61433C];\n      v5 = -1LL;\n      v6 += dword_61433C + v10 + 1;\nLABEL_13:\n      a5 = *(const char **)v7;\n      v11 = strchr(*(const char **)v7, 61);\n      if ( v11 )\n      {\n        v12 = v11 + 1;\n        v13 = a5;\n        v14 = 105;\n        v15 = \"if\";\n        do\n        {\n          ++v13;\n          ++v15;\n          if ( *(v13 - 1) != v14 )\n            goto LABEL_116;\n          v14 = *v15;\n        }\n        while ( *v15 );\n        if ( !*v13 || *v13 == 61 )\n        {\n          qword_614668 = v12;\n          goto LABEL_20;\n        }\nLABEL_116:\n        v58 = a5;\n        v59 = 111;\n        v60 = \"of\";\n        do\n        {\n          ++v58;\n          ++v60;\n          if ( *(v58 - 1) != v59 )\n            goto LABEL_122;\n          v59 = *v60;\n        }\n        while ( *v60 );\n        v61 = *v58;\n        if ( v61 == 61 || !v61 )\n        {\n          qword_614660 = v12;\n          goto LABEL_20;\n        }\nLABEL_122:\n        v62 = a5;\n        v63 = 99;\n        v64 = \"conv\";\n        do\n        {\n          ++v62;\n          ++v64;\n          if ( *(v62 - 1) != v63 )\n            goto LABEL_128;\n          v63 = *v64;\n        }\n        while ( *v64 );\n        v65 = *v62;\n        if ( !v65 || v65 == 61 )\n        {\n          dword_61460C |= sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_128:\n        v66 = a5;\n        v67 = 105;\n        v68 = \"iflag\";\n        do\n        {\n          ++v66;\n          ++v68;\n          if ( *(v66 - 1) != v67 )\n            goto LABEL_134;\n          v67 = *v68;\n        }\n        while ( *v68 );\n        v69 = *v66;\n        if ( !v69 || v69 == 61 )\n        {\n          oflag |= sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_134:\n        v70 = a5;\n        v71 = 111;\n        v72 = \"oflag\";\n        do\n        {\n          ++v70;\n          ++v72;\n          if ( *(v70 - 1) != v71 )\n            goto LABEL_264;\n          v71 = *v72;\n        }\n        while ( *v72 );\n        v73 = *v70;\n        if ( !v73 || v73 == 61 )\n        {\n          dword_614604 |= sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_264:\n        v103 = a5;\n        v104 = 115;\n        v105 = \"status\";\n        do\n        {\n          ++v103;\n          ++v105;\n          if ( *(v103 - 1) != v104 )\n            goto LABEL_295;\n          v104 = *v105;\n        }\n        while ( *v105 );\n        v106 = *v103;\n        if ( v106 == 61 || !v106 )\n        {\n          dword_6142BC = sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_295:\n        v145 = v12;\n        LODWORD(n) = 0;\n        v109 = sub_4042D0(v12, &n, v105);\n        v110 = v145;\n        v111 = a5;\n        v112 = 105;\n        v113 = \"ibs\";\n        do\n        {\n          ++v111;\n          ++v113;\n          if ( *(v111 - 1) != v112 )\n            goto LABEL_318;\n          v112 = *v113;\n        }\n        while ( *v113 );\n        v114 = *v111;\n        if ( v114 != 61 && v114 )\n        {\nLABEL_318:\n          v121 = a5;\n          v122 = 111;\n          v123 = \"obs\";\n          do\n          {\n            ++v121;\n            ++v123;\n            if ( *(v121 - 1) != v122 )\n              goto LABEL_337;\n            v122 = *v123;\n          }\n          while ( *v123 );\n          v124 = *v121;\n          if ( v124 != 61 && v124 )\n          {\nLABEL_337:\n            v130 = a5;\n            v131 = 98;\n            v132 = \"cbs\" + 1;\n            do\n            {\n              ++v130;\n              ++v132;\n              if ( *(v130 - 1) != v131 )\n                goto LABEL_326;\n              v131 = *v132;\n            }\n            while ( *v132 );\n            v133 = *v130;\n            if ( v133 != 61 && v133 )\n            {\nLABEL_326:\n              v125 = a5;\n              v126 = 99;\n              v127 = \"cbs\";\n              do\n              {\n                ++v125;\n                ++v127;\n                if ( *(v125 - 1) != v126 )\n                  goto LABEL_352;\n                v126 = *v127;\n              }\n              while ( *v127 );\n              v128 = *v125;\n              if ( v128 != 61 && v128 )\n                goto LABEL_352;\n              qword_614640 = v109;\n              if ( v109 )\n                goto LABEL_315;\n              goto LABEL_332;\n            }\n            a4 = v109;\n            v115 = -2 * (qword_614658 + 2);\n            if ( v115 > 0x7FFFFFFFFFFFFFFFLL )\n              v115 = 0x7FFFFFFFFFFFFFFFLL;\n          }\n          else\n          {\n            offset = v109;\n            v115 = -qword_614658;\n            if ( (unsigned __int64)-qword_614658 > 0x7FFFFFFFFFFFFFFFLL )\n              v115 = 0x7FFFFFFFFFFFFFFFLL;\n          }\n        }\n        else\n        {\n          qword_614650 = v109;\n          v115 = -2 * (qword_614658 + 2);\n          if ( v115 > 0x7FFFFFFFFFFFFFFFLL )\n            v115 = 0x7FFFFFFFFFFFFFFFLL;\n        }\n        if ( v109 )\n        {\n          if ( v109 <= v115 )\n            goto LABEL_315;\n          LODWORD(n) = 1;\nLABEL_305:\n          sub_408630(v110);\n          dcgettext(0LL, \"invalid number\", 5);\n          v116 = 75;\n          v30 = 1LL;\n          if ( (_DWORD)n != 1 )\n            v116 = 0;\n          sub_4041E0(1, v116, v143);\n          goto LABEL_308;\n        }\nLABEL_332:\n        LODWORD(n) = 4;\n        goto LABEL_305;\n      }\nLABEL_345:\n      sub_408630(a5);\n      dcgettext(0LL, \"unrecognized operand %s\", 5);\n      sub_4041E0(0, 0, v143);\nLABEL_336:\n      sub_405460(1);\n    }\n    v144 = 0LL;\n    v5 = -1LL;\n    v9 = 0LL;\nLABEL_140:\n    dword_61460C |= 0x800u;\n    if ( !qword_614650 )\n      qword_614650 = 512LL;\n    if ( !offset )\n      offset = 512LL;\n    while ( 1 )\n    {\n      if ( !qword_614640 )\n        dword_61460C &= 0xFFFFFFE7;\n      if ( oflag & 0x101000 )\n        oflag |= 0x101000u;\n      if ( dword_614604 & 1 )\n      {\n        sub_408630(\"fullblock\");\n        v129 = \"invalid output flag\";\n        goto LABEL_335;\n      }\n      v16 = oflag;\n      if ( oflag & 0x10 )\n        goto LABEL_360;\n      if ( dword_614604 & 0xC )\n      {\n        v138 = \"count_bytes\";\n        if ( !(dword_614604 & 4) )\n          v138 = \"skip_bytes\";\n        sub_408630(v138);\n        v129 = \"invalid output flag\";\nLABEL_335:\n        dcgettext(0LL, v129, 5);\n        sub_4041E0(0, 0, v143);\n        goto LABEL_336;\n      }\n      if ( oflag & 8 )\n      {\n        if ( v9 )\n        {\n          *((_QWORD *)&xmmword_614630 + 1) = v9 / qword_614650;\n          *(_QWORD *)&xmmword_614630 = v9 % qword_614650;\n        }\n      }\n      else if ( v9 )\n      {\n        *((_QWORD *)&xmmword_614630 + 1) = v9;\n      }\n      if ( oflag & 4 )\n      {\n        if ( v5 != -1LL )\n        {\n          qword_6142C0 = v5 / qword_614650;\n          qword_614610 = v5 % qword_614650;\n        }\n      }\n      else if ( v5 != -1LL )\n      {\n        qword_6142C0 = v5;\n      }\n      if ( dword_614604 & 0x10 )\n      {\n        if ( v144 )\n        {\n          *((_QWORD *)&xmmword_614620 + 1) = v144 / offset;\n          *(_QWORD *)&xmmword_614620 = v144 % offset;\n        }\n      }\n      else if ( v144 )\n      {\n        *((_QWORD *)&xmmword_614620 + 1) = v144;\n      }\n      v17 = dword_61460C;\n      v18 = oflag & 1;\n      if ( v18 | dword_61460C & 0x800 )\n      {\n        v47 = v18 == 0;\n        v19 = sub_404A10;\n        byte_6145A8 = 0;\n        if ( v47 )\n          v19 = sub_404900;\n      }\n      else if ( *((_QWORD *)&xmmword_614630 + 1)\n             || (unsigned __int64)(qword_6142C0 - 1) <= 0xFFFFFFFFFFFFFFFDLL\n             || (BYTE1(v16) | BYTE1(dword_614604)) & 0x40 )\n      {\n        byte_6145A8 = 1;\n        v19 = sub_404900;\n      }\n      else\n      {\n        byte_6145A8 = 0;\n        v19 = sub_404900;\n      }\n      qword_6144E0 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD))v19;\n      oflag &= 0xFFFFFFFE;\n      if ( dword_61460C & 7 & ((dword_61460C & 7) - 1) )\n      {\n        dcgettext(0LL, \"cannot combine any two of {ascii,ebcdic,ibm}\", 5);\n        sub_4041E0(1, 0, v143);\nLABEL_365:\n        dcgettext(0LL, \"cannot combine excl and nocreat\", 5);\n        sub_4041E0(1, 0, v143);\n        goto LABEL_366;\n      }\n      if ( dword_61460C & 0x18 & ((dword_61460C & 0x18) - 1) )\n      {\n        dcgettext(0LL, \"cannot combine block and unblock\", 5);\n        sub_4041E0(1, 0, v143);\nLABEL_359:\n        dcgettext(0LL, \"cannot combine lcase and ucase\", 5);\n        sub_4041E0(1, 0, v143);\nLABEL_360:\n        sub_408630(\"seek_bytes\");\n        v129 = \"invalid input flag\";\n        goto LABEL_335;\n      }\n      if ( dword_61460C & 0x60 & ((dword_61460C & 0x60) - 1) )\n        goto LABEL_359;\n      if ( dword_61460C & 0x3000 & ((dword_61460C & 0x3000) - 1) )\n        goto LABEL_365;\n      v20 = dword_614604 & 0x4002 & ((dword_614604 & 0x4002) - 1);\n      v6 = (char **)(v20 | v16 & 0x4002 & ((v16 & 0x4002u) - 1));\n      v146 = v20 | v16 & 0x4002 & ((v16 & 0x4002) - 1);\n      if ( !(v20 | v16 & 0x4002 & ((v16 & 0x4002) - 1)) )\n        break;\nLABEL_366:\n      dcgettext(0LL, \"cannot combine direct and nocache\", 5);\n      v109 = sub_4041E0(1, 0, v143);\nLABEL_367:\n      v139 = a5;\n      v140 = 99;\n      v141 = \"count\";\n      do\n      {\n        ++v139;\n        ++v141;\n        if ( *(v139 - 1) != v140 )\n          goto LABEL_345;\n        v140 = *v141;\n      }\n      while ( *v141 );\n      v142 = *v139;\n      if ( v142 != 61 && v142 )\n        goto LABEL_345;\n      v5 = v109;\nLABEL_315:\n      if ( (_DWORD)n )\n        goto LABEL_305;\nLABEL_20:\n      v7 += 8LL;\n      if ( v6 != (char **)v7 )\n        goto LABEL_13;\n      if ( !a4 )\n        goto LABEL_140;\n      offset = a4;\n      qword_614650 = a4;\n    }\n    if ( v16 & 2 )\n    {\n      byte_6144EB = 1;\n      byte_6144E9 = (qword_614610 | qword_6142C0) == 0;\n      oflag = v16 & 0xFFFFFFFC;\n    }\n    if ( dword_614604 & 2 )\n    {\n      byte_6144EA = 1;\n      byte_6144E8 = (qword_614610 | qword_6142C0) == 0;\n      dword_614604 &= 0xFFFFFFFD;\n    }\n    if ( dword_61460C & 1 )\n    {\n      v21 = byte_6143E0;\n      do\n      {\n        v22 = (unsigned __int8)*v21++;\n        *(v21 - 1) = byte_40F0E0[v22];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v21 );\n      byte_614600 = 1;\n    }\n    if ( v17 & 0x40 )\n    {\n      v23 = *__ctype_toupper_loc();\n      v24 = byte_6143E0;\n      do\n      {\n        v25 = (unsigned __int8)*v24++;\n        *(v24 - 1) = v23[v25];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v24 );\n      goto LABEL_58;\n    }\n    if ( v17 & 0x20 )\n    {\n      v96 = *__ctype_tolower_loc();\n      v97 = byte_6143E0;\n      do\n      {\n        v98 = (unsigned __int8)*v97++;\n        *(v97 - 1) = v96[v98];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v97 );\nLABEL_58:\n      byte_614600 = 1;\n    }\n    if ( v17 & 2 )\n    {\n      v26 = byte_6143E0;\n      do\n      {\n        v27 = (unsigned __int8)*v26++;\n        *(v26 - 1) = byte_40F2E0[v27];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v26 );\n      goto LABEL_62;\n    }\n    if ( v17 & 4 )\n    {\n      v94 = byte_6143E0;\n      do\n      {\n        v95 = (unsigned __int8)*v94++;\n        *(v94 - 1) = byte_40F1E0[v95];\n      }\n      while ( v94 != (char *)&qword_6144E0 );\nLABEL_62:\n      byte_614600 = 1;\n      byte_6142BA = 37;\n      byte_6142B9 = 64;\n    }\n    v5 = (unsigned __int64)qword_614668;\n    v7 = (unsigned int)oflag;\n    v144 = (unsigned __int64)__errno_location();\n    if ( v5 )\n    {\n      if ( (int)sub_4048B0(0, (char *)v5, v7) >= 0 )\n        goto LABEL_65;\n      sub_4083E0(4LL, qword_614668);\n      dcgettext(0LL, \"failed to open %s\", 5);\n      sub_4041E0(1, *(_DWORD *)v144, v143);\nLABEL_349:\n      sub_4083E0(4LL, qword_614660);\n      dcgettext(0LL, \"failed to open %s\", 5);\n      sub_4041E0(1, *(_DWORD *)v144, v143);\nLABEL_350:\n      dcgettext(0LL, \"offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks\", 5);\n      sub_4041E0(1, 0, v143);\nLABEL_351:\n      v6 = (char **)sub_4083E0(4LL, qword_614660);\n      dcgettext(0LL, \"cannot fstat %s\", 5);\n      v109 = sub_4041E0(1, *(_DWORD *)v144, v143);\nLABEL_352:\n      v134 = a5;\n      v135 = 115;\n      v136 = \"skip\";\n      do\n      {\n        ++v134;\n        ++v136;\n        if ( *(v134 - 1) != v135 )\n          goto LABEL_309;\n        v135 = *v136;\n      }\n      while ( *v136 );\n      v137 = *v134;\n      if ( v137 == 61 || !v137 )\n      {\n        v9 = v109;\n        goto LABEL_315;\n      }\nLABEL_309:\n      v117 = a5;\n      v118 = 115;\n      v119 = \"%s: cannot seek\" + 11;\n      do\n      {\n        ++v117;\n        ++v119;\n        if ( v118 != *(v117 - 1) )\n          goto LABEL_367;\n        v118 = *v119;\n      }\n      while ( *v119 );\n      v120 = *v117;\n      if ( v120 == 61 || !v120 )\n      {\n        v144 = v109;\n        goto LABEL_315;\n      }\n      goto LABEL_367;\n    }\n    qword_614668 = dcgettext(0LL, \"standard input\", 5);\n    sub_4043E0(0);\nLABEL_65:\n    v28 = lseek(0, 0LL, 1);\n    v29 = (size_t)qword_614660;\n    v7 = (unsigned int)dword_614604;\n    byte_6145BC = ~v28 < 0;\n    if ( v28 < 0 )\n      v28 = 0LL;\n    qword_6145B0 = v28;\n    dword_6145B8 = *(_DWORD *)v144;\n    if ( !qword_614660 )\n      break;\n    v5 = (((dword_61460C & 0x1000) == 0) << 6) | dword_614604 | (dword_61460C >> 6) & 0x80u;\n    if ( *((_QWORD *)&xmmword_614620 + 1) )\n    {\n      v30 = 1LL;\n      if ( (int)sub_4048B0(\n                  1,\n                  qword_614660,\n                  (((dword_61460C & 0x1000) == 0) << 6) | dword_614604 | (dword_61460C >> 6) & 0x80 | 2u) < 0 )\n        goto LABEL_70;\n    }\n    else\n    {\n      v5 = ((dword_61460C & 0x200u) < 1 ? 0x200 : 0) | (((dword_61460C & 0x1000) == 0) << 6) | dword_614604 | (dword_61460C >> 6) & 0x80u;\nLABEL_70:\n      v30 = 1LL;\n      v29 = (size_t)qword_614660;\n      if ( (int)sub_4048B0(1, qword_614660, (unsigned int)v5 | 1) < 0 )\n        goto LABEL_349;\n    }\n    v5 = *((_QWORD *)&xmmword_614620 + 1);\n    if ( !*((_QWORD *)&xmmword_614620 + 1) || dword_61460C & 0x200 )\n      goto LABEL_75;\n    a4 = offset;\n    v7 = xmmword_614620 + offset * *((_QWORD *)&xmmword_614620 + 1);\n    if ( *((_QWORD *)&xmmword_614620 + 1) > 0x7FFFFFFFFFFFFFFFLL / offset )\n      goto LABEL_350;\n    v30 = xmmword_614620 + offset * *((_QWORD *)&xmmword_614620 + 1);\n    if ( !(unsigned int)sub_404BF0(v30) )\n      goto LABEL_75;\n    v29 = 1LL;\n    v30 = 1LL;\n    v5 = *(unsigned int *)v144;\n    if ( __fxstat(1, 1, (struct stat *)&n) )\n      goto LABEL_351;\n    if ( ((v149.m128i_i16[0] & 0xF000) - 0x4000) & 0xFFFFB000 )\n      goto LABEL_75;\n    v6 = (char **)sub_4083E0(4LL, qword_614660);\n    dcgettext(0LL, \"failed to truncate to %lu bytes in output file %s\", 5);\n    sub_4041E0(1, v5, v143);\n  }\n  v29 = (unsigned int)dword_614604;\n  v30 = 1LL;\n  qword_614660 = dcgettext(0LL, \"standard output\", 5);\n  sub_4043E0(1);\nLABEL_75:\n  v31 = sub_405C40();\n  v32 = *((_QWORD *)&xmmword_614630 + 1);\n  v33 = xmmword_614630;\n  qword_6145D0 = v31;\n  qword_6145C8 = v31 + 1000000000;\n  if ( xmmword_614630 != 0 )\n  {\n    v34 = qword_614650;\n    v29 = (size_t)qword_614668;\n    v30 = 0LL;\n    v35 = qword_6145B0;\n    if ( (sub_405150(0LL, qword_614668, *((_QWORD *)&xmmword_614630 + 1), qword_614650, &xmmword_614630)\n       || v34 * v32 + v33 + v35 != qword_6145B0 && byte_6145A9 != 1)\n      && dword_6142BC != 1 )\n    {\n      sub_4084B0(0LL, 3LL, qword_614668);\n      dcgettext(0LL, \"%s: cannot skip to specified offset\", 5);\n      v29 = 0LL;\n      v30 = 0LL;\n      sub_4041E0(0, 0, v143);\n    }\n  }\n  if ( xmmword_614620 != 0 )\n  {\n    v30 = 1LL;\n    n = xmmword_614620;\n    v29 = (size_t)qword_614660;\n    v36 = sub_405150(1LL, qword_614660, *((_QWORD *)&xmmword_614620 + 1), offset, &n);\n    if ( v36 )\n    {\n      memset(s1, 0, offset);\n      do\n      {\n        v37 = offset;\n        v30 = (__off_t)s1;\n        v29 = offset;\n        if ( v37 != sub_404C30(s1, offset) )\n          goto LABEL_346;\n        --v36;\n      }\n      while ( v36 );\n      v38 = n;\n      if ( n )\n      {\nLABEL_85:\n        v30 = (__off_t)s1;\n        v29 = v38;\n        if ( sub_404C30(s1, v38) != v38 )\n        {\nLABEL_346:\n          sub_4083E0(4LL, qword_614660);\n          dcgettext(0LL, \"writing to %s\", 5);\n          sub_4041E0(0, *(_DWORD *)v144, v143);\n          sub_404E30();\n        }\n      }\n    }\n    else if ( n )\n    {\n      memset(s1, 0, n);\n      v38 = n;\n      goto LABEL_85;\n    }\n  }\n  if ( !(qword_614610 | qword_6142C0) )\n  {\n    LODWORD(v145) = 0;\n    goto LABEL_254;\n  }\n  if ( !src )\n    sub_404A80();\n  sub_404BA0();\n  LODWORD(v145) = 0;\n  v39 = 0LL;\nLABEL_90:\n  if ( dword_6142BC == 4 )\n    goto LABEL_114;\n  while ( 1 )\n  {\n    v40 = qword_614610;\n    v41 = qword_6142C0;\n    v42 = qword_6145E8 + qword_6145E0;\n    v43 = dword_61460C;\n    if ( qword_6145E8 + qword_6145E0 >= qword_6142C0 + (unsigned __int64)(qword_614610 != 0) )\n      break;\n    v44 = src;\n    if ( (dword_61460C & 0x500) == 1280 )\n    {\n      v45 = dword_61460C & 0x18;\n      if ( dword_61460C & 0x18 )\n        v45 = 32;\n      v44 = memset(src, v45, qword_614650);\n    }\n    if ( v42 < v41 )\n    {\n      v30 = 0LL;\n      v46 = qword_6144E0(0LL, v44, qword_614650);\n      v47 = v46 == 0;\n      if ( v46 > 0 )\n      {\nLABEL_98:\n        v48 = __CFADD__(qword_6145B0, v46);\n        v49 = v46;\n        qword_6145B0 += v46;\n        if ( v48 )\n          byte_6145A9 = 1;\n        if ( byte_6144EB )\n          sub_4045A0(0);\n        v50 = qword_614650;\n        if ( qword_614650 > v49 )\n          goto LABEL_103;\n        goto LABEL_165;\n      }\n    }\n    else\n    {\n      v30 = 0LL;\n      v46 = qword_6144E0(0LL, v44, v40);\n      v47 = v46 == 0;\n      if ( v46 > 0 )\n        goto LABEL_98;\n    }\n    v43 = dword_61460C;\n    if ( v47 )\n    {\n      byte_6144E9 |= byte_6144EB;\n      if ( byte_6144EA )\n        LOBYTE(v146) = (dword_61460C & 0x200) == 0;\n      byte_6144E8 = (byte_6144E8 | v146) & 1;\n      break;\n    }\n    if ( !(dword_61460C & 0x100) || dword_6142BC != 1 )\n    {\n      sub_4083E0(4LL, qword_614668);\n      dcgettext(0LL, \"error reading %s\", 5);\n      v30 = 0LL;\n      sub_4041E0(0, *(_DWORD *)v144, v143);\n      v43 = dword_61460C;\n      if ( !(dword_61460C & 0x100) )\n      {\n        LODWORD(v145) = 1;\n        break;\n      }\n    }\n    sub_4040B0();\n    v30 = 0LL;\n    v79 = qword_614650 - v39;\n    sub_4045A0(0);\n    if ( byte_6145BC )\n    {\n      v48 = __CFADD__(qword_6145B0, v79);\n      v84 = qword_6145B0 + v79;\n      qword_6145B0 += v79;\n      if ( v48 )\n      {\n        byte_6145A9 = 1;\nLABEL_176:\n        sub_4083E0(4LL, qword_614668);\n        dcgettext(0LL, \"offset overflow while reading file %s\", 5);\n        v30 = 0LL;\n        sub_4041E0(0, 0, v143);\n        goto LABEL_161;\n      }\n      byte_6145A9 |= v84 < 0;\n      if ( byte_6145A9 )\n        goto LABEL_176;\n      v30 = 0LL;\n      v89 = lseek(0, 0LL, 1);\n      if ( v89 < 0 )\n        goto LABEL_160;\n      if ( v89 != v84 )\n      {\n        v90 = v84 - v89;\n        if ( ((v90 & 0x8000000000000000LL) != 0LL || v79 < v90) && dword_6142BC != 1 )\n        {\n          dcgettext(0LL, \"warning: invalid file offset after failed read\", 5);\n          sub_4041E0(0, 0, v143);\n        }\n        v30 = (__off_t)qword_614668;\n        if ( sub_4044D0(qword_614668, 0LL, v90, 1LL) < 0 )\n        {\n          if ( !*(_DWORD *)v144 )\n          {\n            dcgettext(0LL, \"cannot work around kernel bug after all\", 5);\n            sub_4041E0(0, 0, v143);\n          }\nLABEL_160:\n          sub_4084B0(0LL, 3LL, qword_614668);\n          dcgettext(0LL, \"%s: cannot seek\", 5);\n          v30 = 0LL;\n          sub_4041E0(0, *(_DWORD *)v144, v143);\nLABEL_161:\n          byte_6145BC = 0;\n          dword_6145B8 = 29;\n          LODWORD(v145) = 1;\n          goto LABEL_162;\n        }\n      }\n    }\n    else if ( dword_6145B8 != 29 )\n    {\n      *(_DWORD *)v144 = dword_6145B8;\n      goto LABEL_160;\n    }\nLABEL_162:\n    if ( !(dword_61460C & 0x400) || v39 )\n      goto LABEL_90;\n    v50 = qword_614650;\n    v49 = 0LL;\n    if ( qword_614650 )\n    {\nLABEL_103:\n      ++qword_6145E8;\n      v39 = v49;\n      if ( dword_61460C & 0x400 )\n      {\n        if ( dword_61460C & 0x100 )\n        {\n          v49 = v50;\n        }\n        else\n        {\n          v51 = v50 - v49;\n          v52 = dword_61460C & 0x18;\n          if ( dword_61460C & 0x18 )\n            v52 = 32;\n          v39 = v49;\n          v53 = (char *)src + v49;\n          v49 = v50;\n          memset(v53, v52, v51);\n        }\n      }\n      goto LABEL_108;\n    }\nLABEL_165:\n    ++qword_6145E0;\n    v39 = 0LL;\nLABEL_108:\n    v54 = (char *)src;\n    v55 = (char *)s1;\n    if ( src == s1 )\n    {\n      v30 = (__off_t)src;\n      v88 = sub_404C30(src, v49);\n      qword_6145D8 += v88;\n      if ( v88 != v49 )\n        goto LABEL_201;\n      if ( qword_614650 == v49 )\n        ++qword_6145F0;\n      else\n        ++qword_6145F8;\n      goto LABEL_90;\n    }\n    if ( byte_614600 && v49 )\n    {\n      v85 = (char *)src + v49;\n      v86 = (char *)src;\n      do\n      {\n        v87 = (unsigned __int8)*v86++;\n        *(v86 - 1) = byte_6143E0[v87];\n      }\n      while ( v86 != v85 );\n    }\n    v56 = dword_61460C;\n    if ( (dword_61460C & 0x80u) != 0 )\n    {\n      if ( byte_6143C1 )\n      {\n        v80 = (__int64)(v54 - 1);\n        ++v49;\n        byte_6143C1 = 0;\n        *(v54 - 1) = byte_6143C0;\n      }\n      else\n      {\n        v80 = (__int64)v54++;\n      }\n      if ( v49 & 1 )\n      {\n        --v49;\n        byte_6143C1 = 1;\n        v81 = (char *)(v49 + v80);\n        byte_6143C0 = *v81;\n      }\n      else\n      {\n        v81 = (char *)(v49 + v80);\n      }\n      v82 = (__int64)&v81[-2 * (v49 >> 1)];\n      if ( v49 >> 1 )\n      {\n        do\n        {\n          v83 = *(v81 - 2);\n          v81 -= 2;\n          v81[2] = v83;\n        }\n        while ( v81 != (char *)v82 );\n      }\n    }\n    if ( v56 & 8 )\n    {\n      v30 = (__off_t)v54;\n      sub_404EF0(v54, v49);\n      goto LABEL_90;\n    }\n    if ( !(v56 & 0x10) )\n    {\n      while ( 1 )\n      {\n        v74 = offset;\n        v75 = v54;\n        v76 = offset - qword_614588;\n        if ( offset - qword_614588 > v49 )\n          v76 = v49;\n        v30 = (__off_t)&v55[qword_614588];\n        v77 = v76;\n        v49 -= v76;\n        v54 += v76;\n        v78 = qword_614588 + v76;\n        memcpy((void *)v30, v75, v77);\n        qword_614588 = v78;\n        if ( v74 <= v78 )\n          sub_404E50();\n        if ( !v49 )\n          break;\n        v55 = (char *)s1;\n      }\n      goto LABEL_90;\n    }\n    v30 = (__off_t)v54;\n    sub_405000(v54, v49);\n    if ( dword_6142BC == 4 )\n    {\nLABEL_114:\n      v57 = sub_405C40();\n      if ( v57 >= qword_6145C8 )\n      {\n        v30 = v57;\n        sub_403D50(v57);\n        qword_6145C8 += 1000000000LL;\n      }\n    }\n  }\n  if ( byte_6143C1 )\n  {\n    if ( v43 & 8 )\n    {\n      v30 = (__off_t)&byte_6143C0;\n      sub_404EF0(&byte_6143C0, 1LL);\n      v43 = dword_61460C;\n    }\n    else if ( v43 & 0x10 )\n    {\n      v30 = (__off_t)&byte_6143C0;\n      sub_405000(&byte_6143C0, 1LL);\n      v43 = dword_61460C;\n    }\n    else\n    {\n      v99 = qword_614588;\n      v48 = ++qword_614588 < offset;\n      *((_BYTE *)s1 + v99) = byte_6143C0;\n      if ( v48 )\n        goto LABEL_235;\n      sub_404E50();\n      v43 = dword_61460C;\n    }\n  }\n  if ( !(v43 & 8) )\n    goto LABEL_235;\n  v101 = qword_614580;\n  if ( qword_614580 )\n  {\n    if ( qword_614640 <= (unsigned __int64)qword_614580 )\n      goto LABEL_236;\n    do\n    {\n      v102 = qword_614588;\n      v48 = ++qword_614588 < offset;\n      *((_BYTE *)s1 + v102) = byte_6142B9;\n      if ( !v48 )\n        sub_404E50();\n      ++v101;\n    }\n    while ( v101 < qword_614640 );\nLABEL_235:\n    v43 = dword_61460C;\n    if ( qword_614580 )\n    {\nLABEL_236:\n      if ( !(v43 & 0x10) )\n        goto LABEL_238;\n      v100 = qword_614588;\n      v48 = ++qword_614588 < offset;\n      *((_BYTE *)s1 + v100) = byte_6142BA;\n      if ( v48 )\n        goto LABEL_238;\nLABEL_308:\n      sub_404E50();\n    }\n  }\nLABEL_238:\n  if ( qword_614588 )\n  {\n    v30 = (__off_t)s1;\n    v91 = sub_404C30(s1, qword_614588);\n    qword_6145D8 += v91;\n    if ( v91 )\n      ++qword_6145F8;\n    if ( v91 != qword_614588 )\n    {\nLABEL_201:\n      sub_4083E0(4LL, qword_614660);\n      v92 = \"error writing %s\";\n      goto LABEL_202;\n    }\n  }\n  if ( byte_614618 )\n  {\n    v30 = 1LL;\n    if ( __fxstat(1, 1, (struct stat *)&n) )\n    {\n      sub_4083E0(4LL, qword_614660);\n      v92 = \"cannot fstat %s\";\nLABEL_202:\n      dcgettext(0LL, v92, 5);\n      v30 = 0LL;\n      v29 = *(unsigned int *)v144;\n      sub_4041E0(0, v29, v143);\n    }\n    else\n    {\n      if ( (v149.m128i_i16[0] & 0xF000) != 0x8000 )\n        goto LABEL_240;\n      v30 = 1LL;\n      v108 = lseek(1, 0LL, 1);\n      if ( v108 < 0 )\n        goto LABEL_240;\n      if ( v108 <= v150.m128i_i64[1] )\n        goto LABEL_240;\n      v30 = v108;\n      if ( !(unsigned int)sub_404BF0(v108) )\n        goto LABEL_240;\n      sub_4083E0(4LL, qword_614660);\n      dcgettext(0LL, \"failed to truncate to %ld bytes in output file %s\", 5);\n      v30 = 0LL;\n      v29 = *(unsigned int *)v144;\n      sub_4041E0(0, v29, v143);\n    }\n    LODWORD(v145) = 1;\n  }\n  else\n  {\nLABEL_240:\n    LOWORD(v29) = dword_61460C;\n    if ( dword_61460C & 0x4000 && (v30 = 1LL, v107 = fdatasync(1), v29 = (unsigned int)dword_61460C, v107) )\n    {\n      if ( (*(_DWORD *)v144 - 22) & 0xFFFFFFEF )\n      {\n        sub_4083E0(4LL, qword_614660);\n        dcgettext(0LL, \"fdatasync failed for %s\", 5);\n        v29 = *(unsigned int *)v144;\n        sub_4041E0(0, v29, v143);\n        LODWORD(v145) = 1;\n      }\n      dword_61460C |= 0x8000u;\nLABEL_242:\n      while ( 1 )\n      {\n        v30 = 1LL;\n        if ( !fsync(1) )\n          break;\n        if ( *(_DWORD *)v144 != 4 )\n        {\n          sub_4083E0(4LL, qword_614660);\n          v92 = \"fsync failed for %s\";\n          goto LABEL_202;\n        }\n      }\n    }\n    else\n    {\n      v29 = (unsigned __int16)v29 & 0x8000;\n      if ( (_DWORD)v29 )\n        goto LABEL_242;\n    }\n  }\n  if ( qword_6142C0 || qword_614610 )\n  {\n    if ( byte_6144EB || byte_6144E9 )\n    {\n      v29 = 0LL;\n      v30 = 0LL;\n      sub_4045A0(0);\n    }\n    if ( byte_6144EA || byte_6144E8 )\n    {\n      v29 = 0LL;\n      v30 = 1LL;\n      sub_4045A0(1);\n    }\n  }\n  else\n  {\nLABEL_254:\n    if ( byte_6144EB )\n    {\n      v29 = 0LL;\n      v30 = 0LL;\n      if ( !(unsigned __int8)sub_4045A0(0) )\n      {\n        sub_4084B0(0LL, 3LL, qword_614668);\n        dcgettext(0LL, \"failed to discard cache for: %s\", 5);\n        v30 = 0LL;\n        v29 = *(unsigned int *)v144;\n        sub_4041E0(0, v29, v143);\n        LODWORD(v145) = 1;\n      }\n    }\n    if ( byte_6144EA )\n    {\n      v29 = 0LL;\n      v30 = 1LL;\n      if ( !(unsigned __int8)sub_4045A0(1) )\n      {\n        sub_4084B0(0LL, 3LL, qword_614660);\n        dcgettext(0LL, \"failed to discard cache for: %s\", 5);\n        v30 = 0LL;\n        v29 = *(unsigned int *)v144;\n        sub_4041E0(0, v29, v143);\n        LODWORD(v145) = 1;\n      }\n    }\n  }\n  sub_404760(v30, v29);\n  sub_4040B0();\n  sub_404810();\n  return (unsigned int)v145;\n}\n", 
            "funcStartAddr": "0x401fd0L", 
            "funcEndAddr": "0x403c41L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x403c50L", 
            "funcEndAddr": "0x403c7bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "void *sub_403C7B()\n{\n  void *result; // rax\n\n  result = &unk_614348;\n  if ( &unk_614348 != &unk_614348 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x403c7bL", 
            "funcEndAddr": "0x403c9aL", 
            "funcName": "sub_403C7B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403C9A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x403c9aL", 
            "funcEndAddr": "0x403cd1L", 
            "funcName": "sub_403C9A"
        }, 
        {
            "decompiledFuncCode": "void *sub_403CD1()\n{\n  void *result; // rax\n\n  if ( !byte_614388 )\n  {\n    while ( qword_614390 < (unsigned __int64)(&qword_613E48 - qword_613E40 - 1) )\n      ((void (*)(void))qword_613E40[++qword_614390])();\n    result = sub_403C7B();\n    byte_614388 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403cd1L", 
            "funcEndAddr": "0x403d28L", 
            "funcName": "sub_403CD1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403D28()\n{\n  return sub_403C9A();\n}\n", 
            "funcStartAddr": "0x403d28L", 
            "funcEndAddr": "0x403d2dL", 
            "funcName": "sub_403D28"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_403D30(int a1)\n{\n  sig = a1;\n}\n", 
            "funcStartAddr": "0x403d30L", 
            "funcEndAddr": "0x403d37L", 
            "funcName": "sub_403D30"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403D40()\n{\n  return (unsigned int)++dword_6144EC;\n}\n", 
            "funcStartAddr": "0x403d40L", 
            "funcEndAddr": "0x403d50L", 
            "funcName": "sub_403D40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_403D50(__int64 a1)\n{\n  __int64 v1; // rbx\n  const char *v2; // r12\n  const char *v3; // r13\n  unsigned __int64 v4; // rbx\n  double v5; // xmm0_8\n  const char *v6; // rbx\n  double v7; // xmm0_8\n  __int64 v8; // r9\n  const char *v9; // r8\n  char *v10; // rax\n  size_t v11; // rax\n  unsigned __int64 v12; // r14\n  char *v13; // rax\n  char *v14; // r9\n  int v15; // ebx\n  __int64 v16; // r9\n  char *v17; // rax\n  char *v18; // rax\n  unsigned __int64 v19; // r12\n  char *v20; // rax\n  char *v22; // [rsp-10h] [rbp-818h]\n  char v23; // [rsp+10h] [rbp-7F8h]\n  char v24; // [rsp+30h] [rbp-7D8h]\n  char v25; // [rsp+2BEh] [rbp-54Ah]\n  char v26; // [rsp+54Ch] [rbp-2BCh]\n\n  v1 = a1;\n  if ( !a1 )\n    v1 = sub_405C40();\n  v2 = (const char *)sub_405D70(qword_6145D8, &v24, 465LL, 1LL, 1LL);\n  v3 = (const char *)sub_405D70(qword_6145D8, &v25, 497LL, 1LL, 1LL);\n  if ( qword_6145D0 >= v1 )\n  {\n    v18 = dcgettext(0LL, \"Infinity\", 5);\n    v6 = &v26;\n    __snprintf_chk(&v26, 654LL, 1LL, 654LL, \"%s B/s\", v18);\n    v7 = 0.0;\n  }\n  else\n  {\n    v4 = v1 - qword_6145D0;\n    if ( (v4 & 0x8000000000000000LL) != 0LL )\n      v5 = (double)(int)(v4 & 1 | (v4 >> 1)) + (double)(int)(v4 & 1 | (v4 >> 1));\n    else\n      v5 = (double)(int)v4;\n    v6 = (const char *)sub_405D70(qword_6145D8, &v26, 465LL, 1000000000LL, v4);\n    v7 = v5 / 1000000000.0;\n    strcpy((char *)&v6[strlen(v6)], \"/s\");\n  }\n  v9 = \"%g s\";\n  if ( a1 )\n  {\n    v10 = stderr->_IO_write_ptr;\n    if ( v10 >= stderr->_IO_write_end )\n    {\n      __overflow(stderr, 13);\n      v9 = \"%.0f s\";\n    }\n    else\n    {\n      v9 = \"%.0f s\";\n      stderr->_IO_write_ptr = v10 + 1;\n      *v10 = 13;\n    }\n  }\n  __snprintf_chk(&v23, 24LL, 1LL, 24LL, v9, v8);\n  if ( v2[strlen(v2) - 2] == 32 )\n  {\n    v19 = qword_6145D8;\n    v20 = dcngettext(0LL, \"%lu byte copied, %s, %s\", \"%lu bytes copied, %s, %s\", qword_6145D8, 5);\n    LODWORD(v17) = __fprintf_chk(stderr, 1LL, v20, v19, &v23, v6, v7);\n    v15 = (int)v17;\n  }\n  else\n  {\n    v11 = strlen(v3);\n    v12 = qword_6145D8;\n    if ( v3[v11 - 2] == 32 )\n    {\n      v13 = dcgettext(0LL, \"%lu bytes (%s) copied, %s, %s\", 5);\n      LODWORD(v22) = (_DWORD)v6;\n      v14 = &v23;\n    }\n    else\n    {\n      v13 = dcgettext(0LL, \"%lu bytes (%s, %s) copied, %s, %s\", 5);\n      v14 = (char *)v3;\n      v22 = &v23;\n    }\n    v15 = __fprintf_chk(stderr, 1LL, v13, v12, v2, v14, v7);\n    LODWORD(v17) = (_DWORD)v22;\n  }\n  if ( a1 )\n  {\n    if ( v15 >= 0 && dword_6145C0 > v15 )\n      LODWORD(v17) = __fprintf_chk(stderr, 1LL, \"%*s\", (unsigned int)(dword_6145C0 - v15), \"\", v16, v7);\n    dword_6145C0 = v15;\n  }\n  else\n  {\n    v17 = stderr->_IO_write_ptr;\n    if ( v17 >= stderr->_IO_write_end )\n    {\n      LODWORD(v17) = __overflow(stderr, 10);\n    }\n    else\n    {\n      stderr->_IO_write_ptr = v17 + 1;\n      *v17 = 10;\n    }\n  }\n  return (int)v17;\n}\n", 
            "funcStartAddr": "0x403d50L", 
            "funcEndAddr": "0x4040a7L", 
            "funcName": "sub_403D50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4040B0(double a1)\n{\n  char *v1; // rax\n  __int64 v2; // rbx\n  __int64 v3; // r12\n  __int64 v4; // rbp\n  char *v5; // rax\n  unsigned __int64 v6; // rbx\n  char *v7; // rax\n  __int64 v8; // r8\n  __int64 v9; // r9\n\n  if ( dword_6142BC != 1 )\n  {\n    if ( dword_6145C0 > 0 )\n    {\n      v1 = stderr->_IO_write_ptr;\n      if ( v1 >= stderr->_IO_write_end )\n      {\n        __overflow(stderr, 10);\n      }\n      else\n      {\n        stderr->_IO_write_ptr = v1 + 1;\n        *v1 = 10;\n      }\n      dword_6145C0 = 0;\n    }\n    v2 = qword_6145E0;\n    v3 = qword_6145F0;\n    v4 = qword_6145E8;\n    v5 = dcgettext(0LL, \"%lu+%lu records in\\n%lu+%lu records out\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v5, v2, v4, v3, a1);\n    v6 = qword_6145A0;\n    if ( qword_6145A0 )\n    {\n      v7 = dcngettext(0LL, \"%lu truncated record\\n\", \"%lu truncated records\\n\", qword_6145A0, 5);\n      __fprintf_chk(stderr, 1LL, v7, v6, v8, v9, a1);\n    }\n    if ( dword_6142BC != 2 )\n      sub_403D50(0LL);\n  }\n}\n", 
            "funcStartAddr": "0x4040b0L", 
            "funcEndAddr": "0x4041d7L", 
            "funcName": "sub_4040B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4041E0@<rax>(int status@<edi>, int errnum@<esi>)\n{\n  char *v2; // rax\n\n  if ( dword_6145C0 > 0 )\n  {\n    v2 = stderr->_IO_write_ptr;\n    if ( v2 >= stderr->_IO_write_end )\n    {\n      __overflow(stderr, 10);\n    }\n    else\n    {\n      stderr->_IO_write_ptr = v2 + 1;\n      *v2 = 10;\n    }\n    dword_6145C0 = 0;\n  }\n  return sub_408710(status, errnum);\n}\n", 
            "funcStartAddr": "0x4041e0L", 
            "funcEndAddr": "0x4042c6L", 
            "funcName": "sub_4041E0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4042D0(char *a1, unsigned int *a2)\n{\n  unsigned int v2; // eax\n  unsigned int v3; // edx\n  unsigned __int64 result; // rax\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // [rsp+0h] [rbp-28h]\n  _BYTE *v9; // [rsp+8h] [rbp-20h]\n\n  v2 = sub_408F50(a1);\n  v3 = v2;\n  if ( v2 != 2 )\n  {\n    result = v8;\n    if ( !v3 )\n      return result;\nLABEL_5:\n    *a2 = v3;\n    return 0LL;\n  }\n  if ( *v9 != 120 )\n    goto LABEL_5;\n  v5 = sub_4042D0(v9 + 1, a2, v2);\n  v6 = v5;\n  if ( v5 )\n  {\n    v7 = v5 * v8 / v5;\n    if ( v8 != v7 )\n    {\n      *a2 = 1;\n      return 0LL;\n    }\n  }\n  else\n  {\n    v7 = v8;\n  }\n  if ( !v7 && !memcmp(a1, \"0x\", 2uLL) )\n  {\n    sub_408610(1LL, \"00x\");\n    sub_408610(0LL, 4250511LL);\n    dcgettext(0LL, \"warning: %s is a zero multiplier; use %s if that is intended\", 5);\n    sub_4041E0(0, 0);\n    v7 = v8;\n  }\n  return v6 * v7;\n}\n", 
            "funcStartAddr": "0x4042d0L", 
            "funcEndAddr": "0x4043e0L", 
            "funcName": "sub_4042D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4043E0(int fildes, int a2, __int64 a3)\n{\n  __int64 v3; // r13\n  int v4; // eax\n  int v5; // ebp\n  unsigned int v6; // ebx\n  int *v7; // rax\n  __int64 v8; // [rsp+0h] [rbp-B8h]\n  int v9; // [rsp+18h] [rbp-A0h]\n\n  if ( a2 & 0xFFFDFEFF )\n  {\n    v3 = a3;\n    v4 = sub_4095D0(fildes);\n    v5 = v4;\n    v6 = v4 | a2 & 0xFFFDFEFF;\n    if ( v4 < 0 )\n      goto LABEL_11;\n    if ( v4 != v6 )\n    {\n      if ( v6 & 0x10000 )\n      {\n        if ( !__fxstat(1, (unsigned __int8)fildes, (struct stat *)&v8) )\n        {\n          if ( (v9 & 0xF000) == 0x4000 )\n            goto LABEL_12;\n          *__errno_location() = 20;\n        }\n        goto LABEL_11;\n      }\n      while ( (unsigned int)sub_4095D0(fildes) == -1 )\n      {\nLABEL_11:\n        v5 = sub_4083E0(4LL, v3);\n        v6 = (unsigned __int64)dcgettext(0LL, \"setting flags for %s\", 5);\n        v7 = __errno_location();\n        sub_4041E0(1, *v7);\nLABEL_12:\n        if ( (v6 & 0xFFFEFFFF) == v5 )\n          return;\n      }\n    }\n  }\n}\n", 
            "funcStartAddr": "0x4043e0L", 
            "funcEndAddr": "0x4044c2L", 
            "funcName": "sub_4043E0"
        }, 
        {
            "decompiledFuncCode": "__off_t __fastcall sub_4044D0(__int64 a1, int a2, __off_t a3, int a4)\n{\n  int v4; // er12\n  __off_t v5; // rbp\n  int v6; // er13\n  __off_t v7; // rbp\n  __int64 v9; // [rsp+0h] [rbp-88h]\n  __int64 v10; // [rsp+8h] [rbp-80h]\n  __int64 v11; // [rsp+28h] [rbp-60h]\n  __int64 v12; // [rsp+30h] [rbp-58h]\n  __int64 v13; // [rsp+38h] [rbp-50h]\n  __int64 v14; // [rsp+58h] [rbp-30h]\n\n  v4 = a4;\n  v5 = a3;\n  v6 = ioctl(a2, 0x80306D02uLL, &v9);\n  v7 = lseek(a2, v5, v4);\n  if ( v7 >= 0 && !v6 && !ioctl(a2, 0x80306D02uLL, &v12) && v10 == v13 && v11 == v14 )\n  {\n    if ( dword_6142BC != 1 )\n    {\n      dcgettext(\n        0LL,\n        \"warning: working around lseek kernel bug for file (%s)\\n\"\n        \"  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types\",\n        5);\n      sub_4041E0(0, 0);\n    }\n    v7 = -1LL;\n    *__errno_location() = 0;\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x4044d0L", 
            "funcEndAddr": "0x40459eL", 
            "funcName": "sub_4044D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4045A0(int fd, __int64 a2)\n{\n  char v2; // r15\n  off_t *v3; // rax\n  off_t v4; // rbx\n  unsigned __int64 v5; // rbx\n  unsigned __int64 v6; // r14\n  unsigned int v7; // er12\n  __int64 v9; // rbp\n  int v10; // er13\n  __off_t v11; // rsi\n  unsigned __int64 v12; // rsi\n\n  if ( fd )\n  {\n    v2 = byte_6144E8;\n    v3 = (off_t *)&unk_6143A0;\n  }\n  else\n  {\n    v2 = byte_6144E9;\n    v3 = (off_t *)&unk_6143A8;\n  }\n  v4 = *v3;\n  if ( a2 )\n  {\n    v5 = a2 + v4;\n    v6 = v5 & 0x1FFFF;\n    *v3 = v6;\n    if ( v5 > v6 )\n    {\n      v4 = v5 - v6;\n      if ( v4 )\n      {\n        v9 = a2;\n        v10 = fd;\n        if ( fd )\n          goto LABEL_14;\nLABEL_10:\n        v7 = (unsigned __int8)byte_6145BC;\n        v11 = qword_6145B0;\n        if ( !byte_6145BC )\n        {\n          *__errno_location() = 29;\n          return v7;\n        }\n        goto LABEL_18;\n      }\n    }\n    return 1;\n  }\n  if ( !v4 && !v2 )\n    return 1;\n  v6 = 0LL;\n  v9 = 0LL;\n  v10 = fd;\n  if ( !fd )\n    goto LABEL_10;\nLABEL_14:\n  v11 = qword_6142B0;\n  v7 = 0;\n  if ( qword_6142B0 == -1 )\n    return v7;\n  if ( qword_6142B0 < 0 )\n  {\n    v11 = lseek(1, 0LL, 1);\n    qword_6142B0 = v11;\n  }\n  else\n  {\n    if ( !v9 )\n    {\nLABEL_19:\n      v12 = v11 - v4;\n      if ( v9 || !v4 )\n      {\n        v12 -= v6;\n        if ( v4 )\n          goto LABEL_23;\n      }\n      else if ( !v2 )\n      {\n        v12 -= v6;\nLABEL_23:\n        LOBYTE(v7) = posix_fadvise(v10, v12, v4, 4) != -1;\n        return v7;\n      }\n      v4 = 0LL;\n      v12 -= v12 % qword_614658;\n      goto LABEL_23;\n    }\n    v11 = v6 + v4 + qword_6142B0;\n    qword_6142B0 += v6 + v4;\n  }\nLABEL_18:\n  v7 = 0;\n  if ( v11 >= 0 )\n    goto LABEL_19;\n  return v7;\n}\n", 
            "funcStartAddr": "0x4045a0L", 
            "funcEndAddr": "0x404718L", 
            "funcName": "sub_4045A0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404720()\n{\n  __int64 result; // rax\n\n  if ( byte_6142B8 )\n    return sub_405B30();\n  result = sub_405AB0(stderr);\n  if ( (_DWORD)result )\n    _exit(1);\n  return result;\n}\n", 
            "funcStartAddr": "0x404720L", 
            "funcEndAddr": "0x404753L", 
            "funcName": "sub_404720"
        }, 
        {
            "decompiledFuncCode": "int sub_404760()\n{\n  int result; // eax\n  int *v1; // rax\n  int *v2; // rax\n\n  if ( close(0) < 0 )\n  {\n    sub_4083E0(4LL, qword_614668);\n    dcgettext(0LL, \"closing input file %s\", 5);\n    v1 = __errno_location();\n    sub_4041E0(1, *v1);\n    goto LABEL_5;\n  }\n  result = close(1);\n  if ( result < 0 )\n  {\nLABEL_5:\n    sub_4083E0(4LL, qword_614660);\n    dcgettext(0LL, \"closing output file %s\", 5);\n    v2 = __errno_location();\n    sub_4041E0(1, *v2);\n    result = sub_404810();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404760L", 
            "funcEndAddr": "0x404810L", 
            "funcName": "sub_404760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404810(double a1)\n{\n  __int64 result; // rax\n  int v2; // ebx\n  __int64 v3; // [rsp-88h] [rbp-88h]\n\n  while ( 1 )\n  {\n    if ( !sig )\n    {\n      result = (unsigned int)dword_6144EC;\n      if ( !dword_6144EC )\n        break;\n    }\n    sigprocmask(0, &set, (sigset_t *)&v3);\n    v2 = sig;\n    if ( dword_6144EC )\n      --dword_6144EC;\n    sigprocmask(2, (const sigset_t *)&v3, 0LL);\n    if ( v2 )\n    {\n      sub_404760();\n      sub_4040B0(a1);\n      raise(v2);\n    }\n    else\n    {\n      sub_4040B0(a1);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404810L", 
            "funcEndAddr": "0x4048a1L", 
            "funcName": "sub_404810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4048B0(int fd2, char *file, int oflag, double a4)\n{\n  int v4; // er12\n  unsigned int v5; // ebx\n\n  v4 = oflag;\n  do\n  {\n    sub_404810(a4);\n    v5 = sub_405BD0(fd2, file, v4);\n  }\n  while ( (v5 & 0x80000000) != 0 && *__errno_location() == 4 );\n  return v5;\n}\n", 
            "funcStartAddr": "0x4048b0L", 
            "funcEndAddr": "0x4048f8L", 
            "funcName": "sub_4048B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404900(int fd, void *buf, size_t nbytes, double a4)\n{\n  unsigned __int64 v4; // rbp\n  int v5; // edx\n  ssize_t v6; // rax\n  signed __int64 v7; // rbx\n  int *v8; // rax\n\n  v4 = nbytes;\n  do\n  {\n    sub_404810(a4);\n    v6 = read(fd, buf, v4);\n    v7 = v6;\n    if ( v6 == -1 )\n    {\n      v8 = __errno_location();\n      v5 = *v8;\n      if ( *v8 == 22 )\n      {\n        if ( (__int64)qword_6143B8 > 0 && qword_6143B8 < v4 && oflag & 0x4000 )\n        {\n          *v8 = 0;\n          v7 = 0LL;\n        }\n        goto LABEL_11;\n      }\n    }\n    else\n    {\n      if ( v6 >= 0 )\n        break;\n      v5 = *__errno_location();\n    }\n  }\n  while ( v5 == 4 );\n  if ( v7 <= 0 || v7 >= v4 )\n  {\n    if ( v7 <= 0 )\n      goto LABEL_11;\n  }\n  else\n  {\n    sub_404810(a4);\n  }\n  if ( byte_6145A8 && (__int64)qword_6143B8 > 0 && qword_6143B8 < v4 )\n  {\n    if ( dword_6142BC != 1 )\n    {\n      dcngettext(\n        0LL,\n        \"warning: partial read (%lu byte); suggest iflag=fullblock\",\n        \"warning: partial read (%lu bytes); suggest iflag=fullblock\",\n        qword_6143B8,\n        5);\n      sub_4041E0(0, 0);\n    }\n    byte_6145A8 = 0;\n  }\nLABEL_11:\n  qword_6143B8 = v7;\n  return v7;\n}\n", 
            "funcStartAddr": "0x404900L", 
            "funcEndAddr": "0x404a0aL", 
            "funcName": "sub_404900"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404A10(int fd, void *buf, size_t nbytes, double a4)\n{\n  __int64 v4; // r12\n  char *v5; // rbp\n  size_t v6; // rbx\n  __int64 result; // rax\n\n  if ( !nbytes )\n    return 0LL;\n  v4 = 0LL;\n  v5 = (char *)buf;\n  v6 = nbytes;\n  while ( 1 )\n  {\n    result = sub_404900(fd, v5, v6, a4);\n    if ( result < 0 )\n      break;\n    if ( result )\n    {\n      v4 += result;\n      v5 += result;\n      v6 -= result;\n      if ( v6 )\n        continue;\n    }\n    return v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404a10L", 
            "funcEndAddr": "0x404a71L", 
            "funcName": "sub_404A10"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404A80()\n{\n  unsigned __int64 v0; // rbx\n  size_t v1; // rbp\n  char *v2; // rax\n  unsigned __int64 v3; // rcx\n  __int64 result; // rax\n  unsigned __int64 v5; // rtt\n  __int64 v6; // [rsp+0h] [rbp-2A8h]\n\n  v0 = qword_614658;\n  v1 = qword_614650;\n  v2 = (char *)malloc(qword_614650 + 2 * qword_614658 + 3);\n  if ( v2 )\n  {\n    v3 = (unsigned __int64)&v2[v0 + 1];\n    v5 = (unsigned __int64)&v2[v0 + 1];\n    result = v3 / v0;\n    src = (void *)(v3 - v5 % v0);\n  }\n  else\n  {\n    sub_405D70(v1, &v6, 497LL, 1LL, 1LL);\n    dcgettext(0LL, \"memory exhausted by input buffer of size %lu bytes (%s)\", 5);\n    sub_4041E0(1, 0);\n    result = sub_404B10();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404a80L", 
            "funcEndAddr": "0x404b10L", 
            "funcName": "sub_404A80"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404B10()\n{\n  unsigned __int64 v0; // rbx\n  size_t v1; // rbp\n  char *v2; // rax\n  unsigned __int64 v3; // rcx\n  __int64 result; // rax\n  unsigned __int64 v5; // rtt\n  __int64 v6; // [rsp+0h] [rbp-2A8h]\n\n  v0 = qword_614658;\n  v1 = offset;\n  v2 = (char *)malloc(qword_614658 + offset - 1);\n  if ( v2 )\n  {\n    v3 = (unsigned __int64)&v2[v0 - 1];\n    v5 = (unsigned __int64)&v2[v0 - 1];\n    result = v3 / v0;\n    s1 = (void *)(v3 - v5 % v0);\n  }\n  else\n  {\n    sub_405D70(v1, &v6, 497LL, 1LL, 1LL);\n    dcgettext(0LL, \"memory exhausted by output buffer of size %lu bytes (%s)\", 5);\n    sub_4041E0(1, 0);\n    result = sub_404BA0();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404b10L", 
            "funcEndAddr": "0x404ba0L", 
            "funcName": "sub_404B10"
        }, 
        {
            "decompiledFuncCode": "void *sub_404BA0()\n{\n  void *result; // rax\n\n  if ( !s1 )\n  {\n    if ( dword_61460C & 0x800 )\n    {\n      result = (void *)sub_404B10();\n    }\n    else\n    {\n      if ( !src )\n        sub_404A80();\n      result = src;\n      s1 = src;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404ba0L", 
            "funcEndAddr": "0x404be8L", 
            "funcName": "sub_404BA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404BF0(__off_t length, double a2)\n{\n  int v2; // ebx\n\n  do\n  {\n    sub_404810(a2);\n    v2 = ftruncate(1, length);\n  }\n  while ( v2 < 0 && *__errno_location() == 4 );\n  return (unsigned int)v2;\n}\n", 
            "funcStartAddr": "0x404bf0L", 
            "funcEndAddr": "0x404c2bL", 
            "funcName": "sub_404BF0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404C30(void *s1, __off_t offset, double a3)\n{\n  __off_t v3; // rbp\n  unsigned __int64 v4; // rbx\n  int v5; // er13\n  _BYTE *v6; // rsi\n  size_t v7; // rdx\n  ssize_t v8; // rax\n  int *v10; // rax\n\n  v3 = offset;\n  if ( dword_614604 & 0x4000 && ::offset > offset )\n  {\n    sub_4095D0(1);\n    if ( (unsigned int)sub_4095D0(1) && dword_6142BC != 1 )\n    {\n      sub_4084B0(0LL, 3LL, qword_614660);\n      dcgettext(0LL, \"failed to turn off O_DIRECT: %s\", 5);\n      v10 = __errno_location();\n      sub_4041E0(0, *v10);\n    }\n    byte_6144E8 = 1;\n    sub_4045A0(1, 0LL);\n    dword_61460C |= 0x8000u;\n  }\n  v4 = 0LL;\n  if ( !offset )\n    return v4;\n  while ( 1 )\n  {\n    sub_404810(a3);\n    v5 = dword_61460C;\n    byte_614618 = 0;\n    if ( dword_61460C & 0x10000 )\n    {\n      v6 = s1;\n      v7 = v3;\n      while ( !*v6 )\n      {\n        ++v6;\n        if ( !--v7 )\n          goto LABEL_19;\n        if ( !(v7 & 0xF) )\n        {\n          if ( memcmp(s1, v6, v7) )\n            break;\nLABEL_19:\n          if ( lseek(1, v3, 1) < 0 )\n          {\n            dword_61460C = v5 & 0xFFFEFFFF;\n            break;\n          }\n          byte_614618 = 1;\n          v8 = v3;\n          if ( v3 >= 0 )\n            goto LABEL_6;\n          if ( *__errno_location() == 4 )\n            goto LABEL_7;\n          goto LABEL_16;\n        }\n      }\n    }\n    v8 = write(1, (char *)s1 + v4, v3 - v4);\n    if ( v8 >= 0 )\n      break;\n    if ( *__errno_location() != 4 )\n      goto LABEL_16;\nLABEL_7:\n    if ( v3 <= v4 )\n      goto LABEL_16;\n  }\n  if ( v8 )\n  {\nLABEL_6:\n    v4 += v8;\n    goto LABEL_7;\n  }\n  *__errno_location() = 28;\nLABEL_16:\n  if ( !byte_6144EA || !v4 )\n    return v4;\n  sub_4045A0(1, v4);\n  return v4;\n}\n", 
            "funcStartAddr": "0x404c30L", 
            "funcEndAddr": "0x404e28L", 
            "funcName": "sub_404C30"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_404E30(double a1)\n{\n  sub_404760();\n  sub_4040B0(a1);\n  sub_404810(a1);\n  exit(1);\n}\n", 
            "funcStartAddr": "0x404e30L", 
            "funcEndAddr": "0x404e4dL", 
            "funcName": "sub_404E30"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404E50(double a1)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v2; // rbx\n  int *v3; // rax\n\n  result = sub_404C30(s1, offset, a1);\n  qword_6145D8 += result;\n  if ( offset != result )\n  {\n    v2 = result;\n    sub_4083E0(4LL, qword_614660);\n    dcgettext(0LL, \"writing to %s\", 5);\n    v3 = __errno_location();\n    sub_4041E0(0, *v3);\n    if ( v2 )\n      ++qword_6145F8;\n    sub_404E30(a1);\n  }\n  qword_614588 = 0LL;\n  ++qword_6145F0;\n  return result;\n}\n", 
            "funcStartAddr": "0x404e50L", 
            "funcEndAddr": "0x404ee2L", 
            "funcName": "sub_404E50"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_404EF0(_BYTE *a1, __int64 a2, double a3)\n{\n  _BYTE *v3; // r12\n  _BYTE *v4; // rbp\n  __off_t v5; // rdx\n  bool v6; // cf\n  __off_t v7; // rdx\n  unsigned __int64 v8; // rbx\n\n  v3 = &a1[a2];\n  if ( a2 )\n  {\n    v4 = a1;\n    do\n    {\n      while ( 1 )\n      {\n        v8 = qword_614580;\n        if ( *v4 != byte_6142BA )\n          break;\n        if ( qword_614580 < (unsigned __int64)qword_614640 )\n        {\n          do\n          {\n            v7 = qword_614588;\n            v6 = ++qword_614588 < offset;\n            *((_BYTE *)s1 + v7) = byte_6142B9;\n            if ( !v6 )\n              sub_404E50(a3);\n            ++v8;\n          }\n          while ( qword_614640 > v8 );\n        }\n        qword_614580 = 0LL;\n        if ( v3 == ++v4 )\n          return;\n      }\n      if ( qword_614580 == qword_614640 )\n      {\n        ++qword_6145A0;\n      }\n      else if ( qword_614580 < (unsigned __int64)qword_614640 )\n      {\n        v5 = qword_614588 + 1;\n        v6 = qword_614588 + 1 < offset;\n        *((_BYTE *)s1 + qword_614588) = *v4;\n        qword_614588 = v5;\n        if ( !v6 )\n        {\n          sub_404E50(a3);\n          v8 = qword_614580;\n        }\n      }\n      ++v4;\n      qword_614580 = v8 + 1;\n    }\n    while ( v3 != v4 );\n  }\n}\n", 
            "funcStartAddr": "0x404ef0L", 
            "funcEndAddr": "0x404ff9L", 
            "funcName": "sub_404EF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405000(__int64 a1, unsigned __int64 a2, double a3)\n{\n  unsigned __int64 v3; // r12\n  __int64 v4; // rbp\n  unsigned __int64 v5; // rbx\n  __off_t v6; // rdx\n  bool v7; // cf\n  char v8; // r13\n  char v9; // cl\n  __int64 v10; // rdx\n  _BYTE *v11; // rdi\n  __off_t v12; // rax\n  unsigned __int64 v13; // rsi\n\n  if ( a2 )\n  {\n    v3 = 0LL;\n    v4 = a1;\n    v5 = a2;\n    do\n    {\n      while ( 1 )\n      {\n        v7 = qword_614580 < (unsigned __int64)qword_614640;\n        v8 = *(_BYTE *)(v4 + v3);\n        ++qword_614580;\n        if ( v7 )\n          break;\n        v6 = qword_614588;\n        qword_6143B0 = 0LL;\n        qword_614580 = 0LL;\n        v7 = ++qword_614588 < offset;\n        *((_BYTE *)s1 + v6) = byte_6142BA;\n        if ( !v7 )\n          goto LABEL_10;\nLABEL_4:\n        if ( v5 <= v3 )\n          return;\n      }\n      v9 = byte_6142B9;\n      ++v3;\n      if ( byte_6142B9 != v8 )\n      {\n        v11 = s1;\n        v12 = qword_614588;\n        v13 = offset;\n        if ( qword_6143B0 )\n        {\n          while ( 1 )\n          {\n            v10 = v12 + 1;\n            v11[v12] = v9;\n            qword_614588 = v12 + 1;\n            if ( v12 + 1 >= v13 )\n            {\n              sub_404E50(a3);\n              v11 = s1;\n              v10 = qword_614588;\n              v13 = offset;\n            }\n            if ( !--qword_6143B0 )\n              break;\n            v9 = byte_6142B9;\n            v12 = v10;\n          }\n        }\n        else\n        {\n          v10 = qword_614588;\n        }\n        v11[v10] = v8;\n        qword_614588 = v10 + 1;\n        if ( v10 + 1 < v13 )\n          goto LABEL_4;\nLABEL_10:\n        sub_404E50(a3);\n        goto LABEL_4;\n      }\n      ++qword_6143B0;\n    }\n    while ( v5 > v3 );\n  }\n}\n", 
            "funcStartAddr": "0x405000L", 
            "funcEndAddr": "0x40514cL", 
            "funcName": "sub_405000"
        }, 
        {
            "decompiledFuncCode": "__off_t __fastcall sub_405150(unsigned int a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 *a5, double a6)\n{\n  unsigned __int64 v6; // r14\n  unsigned __int64 v7; // r13\n  __int64 *v8; // rbp\n  __int64 v9; // r12\n  int *v10; // r15\n  __off_t v11; // r12\n  __off_t result; // rax\n  void *v13; // r12\n  __int64 (__fastcall *v14)(_QWORD, void *, unsigned __int64); // rax\n  unsigned __int64 v15; // rdx\n  __int64 v16; // rax\n  bool v17; // cf\n  __int64 v18; // rdx\n  const char *v19; // rsi\n  int errnum; // [rsp+Ch] [rbp-CCh]\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h]\n\n  v6 = a3;\n  v7 = a4;\n  v8 = a5;\n  v9 = *a5;\n  v10 = __errno_location();\n  *v10 = 0;\n  if ( 0x7FFFFFFFFFFFFFFFLL / v7 < v6 )\n  {\n    if ( sub_4044D0(a2, a1, 0LL, 2) >= 0 )\n      goto LABEL_45;\n    errnum = 0;\nLABEL_8:\n    if ( a1 )\n    {\n      sub_404BA0();\n      v13 = s1;\n    }\n    else\n    {\n      if ( !src )\n        sub_404A80();\n      v13 = src;\n    }\n    while ( 1 )\n    {\n      v14 = (__int64 (__fastcall *)(_QWORD, void *, unsigned __int64))qword_6144E0;\n      v15 = v7;\n      if ( !v6 )\n        break;\n      while ( 1 )\n      {\n        v16 = v14(a1, v13, v15);\n        if ( v16 < 0 )\n        {\n          if ( !a1 )\n          {\n            sub_4083E0(4LL, a2);\n            dcgettext(0LL, \"error reading %s\", 5);\n            sub_4041E0(0, *v10);\n            if ( dword_61460C & 0x100 )\n              sub_4040B0(a6);\nLABEL_39:\n            sub_404E30(a6);\n          }\n          v18 = a2;\nLABEL_41:\n          sub_4084B0(0LL, 3LL, v18);\n          v19 = \"%s: cannot seek\";\nLABEL_42:\n          dcgettext(0LL, v19, 5);\n          sub_4041E0(0, errnum);\n          goto LABEL_39;\n        }\n        if ( !v16 )\n          return v6;\n        if ( !a1 )\n        {\n          v17 = __CFADD__(qword_6145B0, v16);\n          qword_6145B0 += v16;\n          if ( v17 )\n            byte_6145A9 = 1;\n        }\n        if ( !v6 )\n          goto LABEL_4;\n        if ( --v6 )\n          break;\n        v15 = *v8;\n        if ( !*v8 )\n          goto LABEL_44;\n        v14 = (__int64 (__fastcall *)(_QWORD, void *, unsigned __int64))qword_6144E0;\nLABEL_22:\n        v6 = 0LL;\n      }\n    }\n    v15 = *v8;\n    goto LABEL_22;\n  }\n  v11 = v7 * v6 + v9;\n  if ( sub_4044D0(a2, a1, v11, 1) < 0 )\n  {\n    errnum = *v10;\n    if ( sub_4044D0(a2, a1, 0LL, 2) >= 0 )\n    {\n      if ( errnum )\n      {\nLABEL_25:\n        v18 = a2;\n        if ( a1 )\n          goto LABEL_41;\n        sub_4084B0(0LL, 3LL, a2);\n        v19 = (const char *)&unk_40DBF2;\n        goto LABEL_42;\n      }\nLABEL_45:\n      errnum = 75;\n      goto LABEL_25;\n    }\n    goto LABEL_8;\n  }\n  if ( a1 )\n  {\nLABEL_4:\n    *v8 = 0LL;\n    result = 0LL;\n  }\n  else if ( __fxstat(1, 0, &stat_buf) )\n  {\n    sub_4083E0(4LL, a2);\n    dcgettext(0LL, \"cannot fstat %s\", 5);\n    sub_4041E0(1, *v10);\nLABEL_44:\n    result = 0LL;\n  }\n  else\n  {\n    result = 0LL;\n    if ( (stat_buf.st_mode & 0xD000) == 0x8000 && stat_buf.st_size < (unsigned __int64)(v11 + qword_6145B0) )\n    {\n      result = (v11 - stat_buf.st_size) / v7;\n      v11 = stat_buf.st_size - qword_6145B0;\n    }\n    v17 = __CFADD__(qword_6145B0, v11);\n    qword_6145B0 += v11;\n    if ( v17 )\n      byte_6145A9 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405150L", 
            "funcEndAddr": "0x40545bL", 
            "funcName": "sub_405150"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_405460(int status, double a2)\n{\n  __int64 v2; // rbp\n  char *v3; // rax\n  __int64 v4; // r8\n  __int64 v5; // r9\n  char *v6; // rax\n  FILE *v7; // rbp\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  FILE *v19; // rbp\n  char *v20; // rax\n  FILE *v21; // rbp\n  char *v22; // rax\n  FILE *v23; // rbp\n  char *v24; // rax\n  FILE *v25; // rbp\n  char *v26; // rax\n  FILE *v27; // rbp\n  char *v28; // rax\n  FILE *v29; // rbp\n  char *v30; // rax\n  FILE *v31; // rbp\n  char *v32; // rax\n  FILE *v33; // rbp\n  char *v34; // rax\n  FILE *v35; // rbp\n  char *v36; // rax\n  FILE *v37; // rbp\n  char *v38; // rax\n  FILE *v39; // rbp\n  char *v40; // rax\n  FILE *v41; // rbp\n  char *v42; // rax\n  char *v43; // rax\n  __int64 v44; // rcx\n  FILE *v45; // rbp\n  char *v46; // rax\n  FILE *v47; // rbp\n  char *v48; // rax\n  const char **v49; // rax\n  char *v50; // rbp\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // r12\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rax\n  char *v58; // rax\n  char *v59; // rax\n  __int64 v60; // rcx\n  const char *v61; // [rsp+0h] [rbp-88h]\n  const char *v62; // [rsp+8h] [rbp-80h]\n  const char *v63; // [rsp+10h] [rbp-78h]\n  const char *v64; // [rsp+18h] [rbp-70h]\n  const char *v65; // [rsp+20h] [rbp-68h]\n  const char *v66; // [rsp+28h] [rbp-60h]\n  const char *v67; // [rsp+30h] [rbp-58h]\n  const char *v68; // [rsp+38h] [rbp-50h]\n  const char *v69; // [rsp+40h] [rbp-48h]\n  const char *v70; // [rsp+48h] [rbp-40h]\n  const char *v71; // [rsp+50h] [rbp-38h]\n  const char *v72; // [rsp+58h] [rbp-30h]\n  __int64 v73; // [rsp+60h] [rbp-28h]\n  __int64 v74; // [rsp+68h] [rbp-20h]\n\n  v2 = qword_614680;\n  if ( status )\n  {\n    v3 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v3, v2, v4, v5, a2);\n    goto LABEL_3;\n  }\n  v6 = dcgettext(0LL, \"Usage: %s [OPERAND]...\\n  or:  %s OPTION\\n\", 5);\n  __printf_chk(1LL, v6, v2, v2);\n  v7 = stdout;\n  v8 = dcgettext(\n         0LL,\n         \"Copy a file, converting and formatting according to the operands.\\n\"\n         \"\\n\"\n         \"  bs=BYTES        read and write up to BYTES bytes at a time (default: 512);\\n\"\n         \"                  overrides ibs and obs\\n\"\n         \"  cbs=BYTES       convert BYTES bytes at a time\\n\"\n         \"  conv=CONVS      convert the file as per the comma separated symbol list\\n\"\n         \"  count=N         copy only N input blocks\\n\"\n         \"  ibs=BYTES       read up to BYTES bytes at a time (default: 512)\\n\",\n         5);\n  fputs_unlocked(v8, v7);\n  v9 = stdout;\n  v10 = dcgettext(\n          0LL,\n          \"  if=FILE         read from FILE instead of stdin\\n\"\n          \"  iflag=FLAGS     read as per the comma separated symbol list\\n\"\n          \"  obs=BYTES       write BYTES bytes at a time (default: 512)\\n\"\n          \"  of=FILE         write to FILE instead of stdout\\n\"\n          \"  oflag=FLAGS     write as per the comma separated symbol list\\n\"\n          \"  seek=N          skip N obs-sized blocks at start of output\\n\"\n          \"  skip=N          skip N ibs-sized blocks at start of input\\n\"\n          \"  status=LEVEL    The LEVEL of information to print to stderr;\\n\"\n          \"                  'none' suppresses everything but error messages,\\n\"\n          \"                  'noxfer' suppresses the final transfer statistics,\\n\"\n          \"                  'progress' shows periodic transfer statistics\\n\",\n          5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"N and BYTES may be followed by the following multiplicative suffixes:\\n\"\n          \"c =1, w =2, b =512, kB =1000, K =1024, MB =1000*1000, M =1024*1024, xM =M,\\n\"\n          \"GB =1000*1000*1000, G =1024*1024*1024, and so on for T, P, E, Z, Y.\\n\"\n          \"\\n\"\n          \"Each CONV symbol may be:\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(\n          0LL,\n          \"  ascii     from EBCDIC to ASCII\\n\"\n          \"  ebcdic    from ASCII to EBCDIC\\n\"\n          \"  ibm       from ASCII to alternate EBCDIC\\n\"\n          \"  block     pad newline-terminated records with spaces to cbs-size\\n\"\n          \"  unblock   replace trailing spaces in cbs-size records with newline\\n\"\n          \"  lcase     change upper case to lower case\\n\"\n          \"  ucase     change lower case to upper case\\n\"\n          \"  sparse    try to seek rather than write the output for NUL input blocks\\n\"\n          \"  swab      swap every pair of input bytes\\n\"\n          \"  sync      pad every input block with NULs to ibs-size; when used\\n\"\n          \"            with block or unblock, pad with spaces rather than NULs\\n\",\n          5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(\n          0LL,\n          \"  excl      fail if the output file already exists\\n\"\n          \"  nocreat   do not create the output file\\n\"\n          \"  notrunc   do not truncate the output file\\n\"\n          \"  noerror   continue after read errors\\n\"\n          \"  fdatasync  physically write output file data before finishing\\n\"\n          \"  fsync     likewise, but also write metadata\\n\",\n          5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Each FLAG symbol may be:\\n\"\n          \"\\n\"\n          \"  append    append mode (makes sense only for output; conv=notrunc suggested)\\n\",\n          5);\n  fputs_unlocked(v18, v17);\n  v19 = stdout;\n  v20 = dcgettext(0LL, \"  direct    use direct I/O for data\\n\", 5);\n  fputs_unlocked(v20, v19);\n  v21 = stdout;\n  v22 = dcgettext(0LL, \"  directory  fail unless a directory\\n\", 5);\n  fputs_unlocked(v22, v21);\n  v23 = stdout;\n  v24 = dcgettext(0LL, \"  dsync     use synchronized I/O for data\\n\", 5);\n  fputs_unlocked(v24, v23);\n  v25 = stdout;\n  v26 = dcgettext(0LL, \"  sync      likewise, but also for metadata\\n\", 5);\n  fputs_unlocked(v26, v25);\n  v27 = stdout;\n  v28 = dcgettext(0LL, \"  fullblock  accumulate full blocks of input (iflag only)\\n\", 5);\n  fputs_unlocked(v28, v27);\n  v29 = stdout;\n  v30 = dcgettext(0LL, \"  nonblock  use non-blocking I/O\\n\", 5);\n  fputs_unlocked(v30, v29);\n  v31 = stdout;\n  v32 = dcgettext(0LL, \"  noatime   do not update access time\\n\", 5);\n  fputs_unlocked(v32, v31);\n  v33 = stdout;\n  v34 = dcgettext(0LL, \"  nocache   Request to drop cache.  See also oflag=sync\\n\", 5);\n  fputs_unlocked(v34, v33);\n  v35 = stdout;\n  v36 = dcgettext(0LL, \"  noctty    do not assign controlling terminal from file\\n\", 5);\n  fputs_unlocked(v36, v35);\n  v37 = stdout;\n  v38 = dcgettext(0LL, \"  count_bytes  treat 'count=N' as a byte count (iflag only)\\n\", 5);\n  fputs_unlocked(v38, v37);\n  v39 = stdout;\n  v40 = dcgettext(0LL, \"  skip_bytes  treat 'skip=N' as a byte count (iflag only)\\n\", 5);\n  fputs_unlocked(v40, v39);\n  v41 = stdout;\n  v42 = dcgettext(0LL, \"  seek_bytes  treat 'seek=N' as a byte count (oflag only)\\n\", 5);\n  fputs_unlocked(v42, v41);\n  v43 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Sending a %s signal to a running 'dd' process makes it\\n\"\n          \"print I/O statistics to standard error and then resume copying.\\n\"\n          \"\\n\"\n          \"Options are:\\n\"\n          \"\\n\",\n          5);\n  __printf_chk(1LL, v43, \"USR1\", v44);\n  v45 = stdout;\n  v46 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v46, v45);\n  v47 = stdout;\n  v48 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v48, v47);\n  v61 = \"[\";\n  v49 = &v61;\n  v62 = \"test invocation\";\n  v63 = \"coreutils\";\n  v64 = \"Multi-call invocation\";\n  v65 = \"sha224sum\";\n  v66 = \"sha2 utilities\";\n  v67 = \"sha256sum\";\n  v68 = \"sha2 utilities\";\n  v69 = \"sha384sum\";\n  v70 = \"sha2 utilities\";\n  v71 = \"sha512sum\";\n  v72 = \"sha2 utilities\";\n  v73 = 0LL;\n  v74 = 0LL;\n  do\n    v49 += 2;\n  while ( *v49 && strcmp(\"dd\", *v49) );\n  v50 = (char *)v49[1];\n  if ( v50 )\n  {\n    v51 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v51, &unk_40DCA1, \"https://www.gnu.org/software/coreutils/\");\n    v52 = setlocale(5, 0LL);\n    if ( !v52 || !strncmp(v52, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v56 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v56, &unk_40DCA1, \"https://www.gnu.org/software/coreutils/\");\n    v57 = setlocale(5, 0LL);\n    if ( !v57 || !strncmp(v57, \"en_\", 3uLL) )\n    {\n      v50 = \"dd\";\n      v58 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v53 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v58, \"https://www.gnu.org/software/coreutils/\", \"dd\");\nLABEL_12:\n      v55 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v55, v50, v53);\nLABEL_3:\n      exit(status);\n    }\n    v50 = \"dd\";\n  }\n  v59 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v59, \"dd\", v60);\nLABEL_10:\n  v53 = \"Multi-call invocation\" + 10;\n  v54 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v54, \"https://www.gnu.org/software/coreutils/\", \"dd\");\n  if ( v50 != \"dd\" )\n    v53 = \"\";\n  goto LABEL_12;\n}\n", 
            "funcStartAddr": "0x405460L", 
            "funcEndAddr": "0x4059cdL", 
            "funcName": "sub_405460"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4059D0(char *s, __int64 a2, char a3, const char *a4, double a5)\n{\n  char *v5; // r14\n  const char *v6; // r13\n  __int64 v7; // r12\n  char v8; // bp\n  unsigned int v9; // ebx\n  char *v10; // rax\n  __int64 v11; // rdi\n  __int64 v12; // rdx\n  char v13; // cl\n  char v14; // si\n  unsigned int v15; // edx\n  int v16; // ebx\n  size_t v18; // rax\n\n  v5 = s;\n  v6 = a4;\n  v7 = a2;\n  v8 = a3;\n  v9 = 0;\n  while ( 2 )\n  {\n    v10 = strchr(v5, 44);\n    v11 = v7;\nLABEL_3:\n    v12 = 0LL;\n    while ( 1 )\n    {\n      v13 = *(_BYTE *)(v11 + v12);\n      v14 = v5[v12];\n      if ( !v13 )\n        break;\n      ++v12;\n      if ( v13 != v14 )\n      {\nLABEL_9:\n        if ( !*(_BYTE *)v11 )\n        {\n          if ( v10 )\n            v18 = v10 - v5;\n          else\n            v18 = strlen(v5);\n          sub_408370(0LL, 8LL, v5, v18);\n          dcgettext(0LL, v6, 5);\n          sub_4041E0(0, 0);\n          sub_405460(1, a5);\n        }\n        v11 += 16LL;\n        goto LABEL_3;\n      }\n    }\n    if ( v14 != 44 && v14 )\n      goto LABEL_9;\n    v15 = *(_DWORD *)(v11 + 12);\n    if ( !v15 )\n      goto LABEL_9;\n    v16 = v15 | v9;\n    if ( !v8 )\n      v15 = v16;\n    if ( v10 )\n    {\n      v5 = v10 + 1;\n      v9 = v15;\n      continue;\n    }\n    return v15;\n  }\n}\n", 
            "funcStartAddr": "0x4059d0L", 
            "funcEndAddr": "0x405aa9L", 
            "funcName": "sub_4059D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405AB0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409550(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x405ab0L", 
            "funcEndAddr": "0x405b0dL", 
            "funcName": "sub_405AB0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405B30()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_405AB0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_614670 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_614678 )\n      {\n        v5 = sub_408480();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_405AB0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x405b30L", 
            "funcEndAddr": "0x405bceL", 
            "funcName": "sub_405B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405BD0(int fd2, char *file, int oflag, unsigned int a4)\n{\n  __int64 result; // rax\n  int v5; // ebx\n  unsigned int v6; // er12\n  int *v7; // rax\n  int v8; // er13\n  int *v9; // rbp\n\n  LODWORD(result) = open(file, oflag, a4);\n  v5 = result;\n  if ( fd2 == (_DWORD)result || (int)result < 0 )\n    return (unsigned int)result;\n  v6 = dup2(result, fd2);\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  close(v5);\n  result = v6;\n  *v9 = v8;\n  return result;\n}\n", 
            "funcStartAddr": "0x405bd0L", 
            "funcEndAddr": "0x405c3aL", 
            "funcName": "sub_405BD0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405C40()\n{\n  __int64 v1; // [rsp+0h] [rbp-18h]\n  __int64 v2; // [rsp+8h] [rbp-10h]\n\n  if ( clock_gettime(1, (struct timespec *)&v1) )\n    sub_405C70((struct timespec *)&v1);\n  return v2 + 1000000000 * v1;\n}\n", 
            "funcStartAddr": "0x405c40L", 
            "funcEndAddr": "0x405c6fL", 
            "funcName": "sub_405C40"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405C70(struct timespec *tp)\n{\n  int result; // eax\n  __time_t v2; // [rsp+0h] [rbp-18h]\n  __int64 v3; // [rsp+8h] [rbp-10h]\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday((struct timeval *)&v2, 0LL);\n    tp->tv_sec = v2;\n    result = 1000 * v3;\n    tp->tv_nsec = 1000 * v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405c70L", 
            "funcEndAddr": "0x405caaL", 
            "funcName": "sub_405C70"
        }, 
        {
            "decompiledFuncCode": "long double __fastcall sub_405CB0(int a1, long double a15)\n{\n  unsigned __int64 v7; // rax\n  long double v8; // fst6\n  long double result; // fst7\n\n  if ( a15 >= 9.223372e18 )\n    v7 = (__int64)(a15 - 9.223372e18) ^ 0x8000000000000000LL;\n  else\n    v7 = (__int64)a15;\n  v8 = (long double)v7;\n  if ( a1 )\n    return v8;\n  result = v8;\n  if ( a15 != v8 )\n  {\n    result = (long double)(__int64)(v7 + 1);\n    if ( (__int64)(v7 + 1) < 0 )\n      result = result + 1.8446744e19;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405cb0L", 
            "funcEndAddr": "0x405d67L", 
            "funcName": "sub_405CB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405D70(__int64 a1, char *a2, __int16 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  unsigned __int64 v5; // r14\n  unsigned __int64 v6; // rbp\n  struct lconv *v7; // rax\n  const char *v8; // r15\n  struct lconv *v9; // r12\n  size_t v10; // r8\n  char *v11; // rax\n  const char *v12; // r12\n  size_t v13; // rax\n  size_t v14; // r8\n  unsigned __int64 v15; // rax\n  unsigned __int64 v16; // rsi\n  long double v17; // fst7\n  long double v18; // fst6\n  long double v19; // fst7\n  long double v20; // fst6\n  long double v21; // fst7\n  long double v22; // fst6\n  int v23; // ebx\n  long double v24; // fst5\n  long double v25; // fst4\n  long double v26; // fst7\n  long double v27; // fst6\n  long double v28; // fst7\n  __int64 v29; // r14\n  long double v30; // fst7\n  unsigned __int64 v31; // r15\n  long double v32; // fst6\n  size_t v33; // rax\n  __int64 v34; // r8\n  long double v35; // fst7\n  size_t v36; // r14\n  __int64 v37; // r15\n  char *v38; // r14\n  int v39; // eax\n  unsigned __int64 v41; // rcx\n  unsigned __int64 v42; // rtt\n  unsigned __int64 v43; // rdx\n  int v44; // er9\n  int v45; // edi\n  int v46; // ecx\n  char *v47; // rbp\n  unsigned __int8 *v48; // r15\n  size_t v49; // rbx\n  size_t v50; // rbp\n  unsigned __int8 v51; // dl\n  size_t v52; // rax\n  size_t v53; // rbp\n  char *v54; // r14\n  unsigned __int64 v55; // rax\n  char *v56; // rdx\n  unsigned __int64 v57; // r11\n  int v58; // eax\n  unsigned int v59; // ett\n  unsigned int v60; // edx\n  unsigned int v61; // edi\n  bool v62; // dl\n  char v63; // al\n  unsigned __int64 v64; // r9\n  unsigned int v65; // edx\n  __int64 v66; // rdi\n  unsigned __int64 v67; // rcx\n  signed __int64 v68; // r15\n  unsigned int v69; // edx\n  __int64 v70; // rsi\n  size_t v71; // [rsp+0h] [rbp-B8h]\n  char *v72; // [rsp+10h] [rbp-A8h]\n  char *s; // [rsp+18h] [rbp-A0h]\n  __int16 v74; // [rsp+20h] [rbp-98h]\n  int v75; // [rsp+24h] [rbp-94h]\n  int v76; // [rsp+24h] [rbp-94h]\n  unsigned __int64 v77; // [rsp+28h] [rbp-90h]\n  size_t v78; // [rsp+30h] [rbp-88h]\n  size_t v79; // [rsp+30h] [rbp-88h]\n  long double v80; // [rsp+30h] [rbp-88h]\n  unsigned int v81; // [rsp+40h] [rbp-78h]\n  unsigned int v82; // [rsp+44h] [rbp-74h]\n  char *v83; // [rsp+48h] [rbp-70h]\n  char src[104]; // [rsp+50h] [rbp-68h]\n\n  v5 = a4;\n  v6 = a5;\n  v81 = a3 & 0x20;\n  s = a2;\n  v74 = a3;\n  v77 = a5;\n  v75 = a3 & 3;\n  v82 = v81 < 1 ? 1000 : 1024;\n  v7 = localeconv();\n  v8 = v7->decimal_point;\n  v9 = v7;\n  v10 = strlen(v7->decimal_point);\n  if ( v10 - 1 >= 0x10 )\n    v8 = \".\";\n  v11 = v9->grouping;\n  v12 = v9->thousands_sep;\n  if ( v10 - 1 >= 0x10 )\n    v10 = 1LL;\n  v78 = v10;\n  v83 = v11;\n  v13 = strlen(v12);\n  v14 = v78;\n  if ( v13 >= 0x11 )\n    v12 = \"\";\n  v72 = a2 + 647;\n  if ( v6 > v5 )\n  {\n    if ( !v5 || (v41 = v77 / v5, v77 % v5) )\n    {\nLABEL_10:\n      v17 = (long double)v5;\n      v18 = (long double)(__int64)v77;\n      if ( (v77 & 0x8000000000000000LL) != 0LL )\n      {\n        v19 = v17 / (v18 + 1.8446744e19);\n        v20 = (long double)a1;\n        if ( a1 >= 0 )\n        {\nLABEL_12:\n          v21 = v19 * v20;\n          if ( v74 & 0x10 )\n          {\nLABEL_13:\n            v22 = (long double)(int)v82;\n            v23 = 0;\n            v24 = v22;\n            while ( 1 )\n            {\n              ++v23;\n              v25 = v21;\n              v26 = v24 * v22;\n              if ( v25 < v26 )\n                break;\n              if ( v23 == 8 )\n              {\n                v27 = v25;\n                v28 = v24;\n                goto LABEL_19;\n              }\n              v24 = v26;\n              v21 = v25;\n            }\n            v27 = v25;\n            v28 = v24;\nLABEL_19:\n            v29 = v78 + 1;\n            v30 = v27 / v28;\n            v31 = v78 + 1 + (v81 == 0) + 1;\n            if ( v75 == 1 )\n            {\n              __sprintf_chk(s, 1LL, -1LL, \"%.1Lf\", v78);\n              v33 = strlen(s);\n              if ( v33 > v31 )\n                goto LABEL_26;\n            }\n            else\n            {\n              if ( v30 < 1.8446744073709551615e19 )\n              {\n                v80 = v30;\n                sub_405CB0(v75, v30);\n                v32 = v80;\n              }\n              else\n              {\n                v32 = v30;\n              }\n              __sprintf_chk(s, 1LL, -1LL, \"%.1Lf\", v14);\n              v33 = strlen(s);\n              v30 = v32;\n              if ( v33 > v31 )\n              {\n                v35 = v32 * 10.0;\nLABEL_24:\n                if ( v35 < 1.8446744073709551615e19 )\n                  sub_405CB0(v75, v35);\n                goto LABEL_26;\n              }\n            }\n            if ( !(v74 & 8) || s[v33 - 1] != 48 )\n            {\n              v36 = v33 - v29;\n              goto LABEL_31;\n            }\n            v35 = v30 * 10.0;\n            if ( v75 != 1 )\n              goto LABEL_24;\nLABEL_26:\n            __sprintf_chk(s, 1LL, -1LL, \"%.0Lf\", v34);\n            v33 = strlen(s);\n            v36 = v33;\nLABEL_31:\n            v37 = (__int64)&v72[-v33];\n            v38 = &v72[v36 - v33];\n            memmove(&v72[-v33], s, v33);\n            goto LABEL_32;\n          }\nLABEL_27:\n          if ( v75 != 1 && v21 < 1.8446744073709551615e19 )\n          {\n            sub_405CB0(v75, v21);\n            v14 = v71;\n          }\n          __sprintf_chk(s, 1LL, -1LL, \"%.0Lf\", v14);\n          v23 = -1;\n          v33 = strlen(s);\n          v36 = v33;\n          goto LABEL_31;\n        }\n      }\n      else\n      {\n        v19 = v17 / v18;\n        v20 = (long double)a1;\n        if ( a1 >= 0 )\n          goto LABEL_12;\n      }\n      v21 = v19 * (v20 + 1.8446744e19);\n      if ( v74 & 0x10 )\n        goto LABEL_13;\n      goto LABEL_27;\n    }\n    v16 = a1 / v41;\n    v42 = 10 * (a1 % v41);\n    v43 = 2 * (v42 % v41);\n    v44 = v42 / v41;\n    if ( v41 <= v43 )\n      v45 = (v41 < v43) + 2;\n    else\n      v45 = v43 != 0;\n    v46 = v74 & 0x10;\n    if ( !(v74 & 0x10) )\n      goto LABEL_85;\n  }\n  else\n  {\n    v15 = v5 / v6;\n    if ( v5 % v6 )\n      goto LABEL_10;\n    v16 = a1 * v15;\n    if ( a1 * v15 / (v5 / v6) != a1 )\n      goto LABEL_10;\n    v45 = 0;\n    v44 = 0;\n    v46 = v74 & 0x10;\n    if ( !(v74 & 0x10) )\n    {\nLABEL_85:\n      v23 = -1;\n      goto LABEL_47;\n    }\n  }\n  v23 = 0;\n  if ( v82 <= v16 )\n  {\n    while ( 1 )\n    {\n      v57 = v16 / v82;\n      v59 = v44 + 10 * (v16 % v82);\n      v58 = (v44 + 10 * (v16 % v82)) / v82;\n      v60 = (v45 >> 1) + 2 * (v59 % v82);\n      v44 = v59 / v82;\n      v16 /= v82;\n      v61 = v60 + v45;\n      v45 = v82 > v60 ? v61 != 0 : (v82 < v61) + 2;\n      ++v23;\n      if ( v82 > v57 )\n        break;\n      if ( v23 == 8 )\n        goto LABEL_47;\n    }\n    if ( v57 <= 9 )\n    {\n      if ( v75 == 1 )\n        v62 = v45 + (v58 & 1) > 2;\n      else\n        v62 = v45 > 0 && v75 == 0;\n      if ( v62 )\n      {\n        if ( ++v58 == 10 )\n        {\n          v16 = v57 + 1;\n          if ( v57 == 9 )\n          {\n            v38 = v72;\nLABEL_114:\n            v45 = 0;\n            goto LABEL_115;\n          }\n          v45 = 0;\n          goto LABEL_107;\n        }\n      }\n      else if ( !v58 )\n      {\nLABEL_107:\n        v38 = v72;\n        if ( v74 & 8 )\n        {\nLABEL_115:\n          if ( v75 == 1 )\n            goto LABEL_52;\n          v44 = 0;\n          goto LABEL_48;\n        }\n        v63 = 48;\n        goto LABEL_109;\n      }\n      v63 = v58 + 48;\nLABEL_109:\n      s[646] = v63;\n      v38 = &s[-v78 + 646];\n      if ( (unsigned int)v78 >= 8 )\n      {\n        v64 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n        *(_QWORD *)v38 = *(_QWORD *)v8;\n        *(_QWORD *)&v38[(unsigned int)v78 - 8] = *(_QWORD *)&v8[(unsigned int)v78 - 8];\n        if ( (((_DWORD)s + 646 - (_DWORD)v64) & 0xFFFFFFF8) >= 8 )\n        {\n          v65 = 0;\n          do\n          {\n            v66 = v65;\n            v65 += 8;\n            *(_QWORD *)(v64 + v66) = *(_QWORD *)(v8 - &v38[-v64] + v66);\n          }\n          while ( v65 < (((_DWORD)s + 646 - (_DWORD)v64) & 0xFFFFFFF8) );\n        }\n      }\n      else if ( v78 & 4 )\n      {\n        *(_DWORD *)v38 = *(_DWORD *)v8;\n        *(_DWORD *)&v38[(unsigned int)v78 - 4] = *(_DWORD *)&v8[(unsigned int)v78 - 4];\n      }\n      else if ( (_DWORD)v78 )\n      {\n        *v38 = *v8;\n        if ( v78 & 2 )\n          *(_WORD *)&v38[(unsigned int)v78 - 2] = *(_WORD *)&v8[(unsigned int)v78 - 2];\n      }\n      goto LABEL_114;\n    }\n  }\nLABEL_47:\n  v38 = v72;\n  if ( v75 == 1 )\n  {\n    if ( (v45 + (v16 & 1) != 0) + v44 <= 5 )\n      goto LABEL_52;\n    v38 = v72;\n    goto LABEL_50;\n  }\nLABEL_48:\n  if ( v75 || v44 + v45 <= 0 )\n  {\nLABEL_52:\n    v37 = (__int64)v38;\n    while ( 1 )\n    {\n      *(_BYTE *)--v37 = v16 % 0xA + 48;\n      if ( v16 <= 9 )\n        break;\n      v16 /= 0xAuLL;\n    }\n    if ( !(v74 & 4) )\n      goto LABEL_33;\n    goto LABEL_56;\n  }\nLABEL_50:\n  ++v16;\n  if ( !v46 || v82 != v16 || v23 == 8 )\n    goto LABEL_52;\n  ++v23;\n  if ( !(v74 & 8) )\n  {\n    *(v38 - 1) = 48;\n    v38 += ~v78;\n    if ( (unsigned int)v78 >= 8 )\n    {\n      v67 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n      *(_QWORD *)v38 = *(_QWORD *)v8;\n      *(_QWORD *)&v38[(unsigned int)v78 - 8] = *(_QWORD *)&v8[(unsigned int)v78 - 8];\n      v68 = v8 - &v38[-v67];\n      if ( (((_DWORD)v78 + (_DWORD)v38 - (_DWORD)v67) & 0xFFFFFFF8) >= 8 )\n      {\n        v69 = 0;\n        do\n        {\n          v70 = v69;\n          v69 += 8;\n          *(_QWORD *)(v67 + v70) = *(_QWORD *)(v68 + v70);\n        }\n        while ( v69 < (((_DWORD)v78 + (_DWORD)v38 - (_DWORD)v67) & 0xFFFFFFF8) );\n      }\n    }\n    else if ( v78 & 4 )\n    {\n      *(_DWORD *)v38 = *(_DWORD *)v8;\n      *(_DWORD *)&v38[(unsigned int)v78 - 4] = *(_DWORD *)&v8[(unsigned int)v78 - 4];\n    }\n    else if ( (_DWORD)v78 )\n    {\n      *v38 = *v8;\n      if ( v78 & 2 )\n        *(_WORD *)&v38[(unsigned int)v78 - 2] = *(_WORD *)&v8[(unsigned int)v78 - 2];\n    }\n  }\n  v37 = (__int64)(v38 - 1);\n  *(v38 - 1) = 49;\nLABEL_32:\n  if ( !(v74 & 4) )\n    goto LABEL_33;\nLABEL_56:\n  v47 = &v38[-v37];\n  v79 = strlen(v12);\n  __memcpy_chk(src, v37, &v38[-v37], 41LL);\n  v76 = v23;\n  v48 = (unsigned __int8 *)v83;\n  v49 = (size_t)v47;\n  v50 = -1LL;\n  while ( 1 )\n  {\n    v51 = *v48;\n    if ( *v48 )\n    {\n      v52 = v51;\n      if ( v51 >= 0x7Fu )\n        v52 = v49;\n      ++v48;\n      v50 = v52;\n    }\n    if ( v50 > v49 )\n    {\n      v53 = v49;\n      v23 = v76;\n      v37 = (__int64)&v38[-v53];\n      memcpy(&v38[-v53], src, v53);\n      goto LABEL_33;\n    }\n    v54 = &v38[-v50];\n    v49 -= v50;\n    memcpy(v54, &src[v49], v50);\n    if ( !v49 )\n      break;\n    v38 = &v54[-v79];\n    memcpy(v38, v12, v79);\n  }\n  v23 = v76;\n  v37 = (__int64)v54;\nLABEL_33:\n  if ( (v74 & 0x80u) != 0 )\n  {\n    if ( v23 == -1 )\n    {\n      if ( v77 > 1 )\n      {\n        v23 = 1;\n        v55 = 1LL;\n        do\n        {\n          v55 *= v82;\n          if ( v77 <= v55 )\n            break;\n          ++v23;\n        }\n        while ( v23 != 8 );\n        v39 = v74 & 0x100;\n        if ( !(v74 & 0x40) )\n          goto LABEL_72;\n        goto LABEL_70;\n      }\n      v23 = 0;\n    }\n    v39 = v74 & 0x100;\n    if ( !(v23 | v39) )\n      goto LABEL_36;\n    if ( !(v74 & 0x40) )\n    {\nLABEL_71:\n      if ( !v23 )\n      {\n        v56 = v72;\n        if ( !v39 )\n          goto LABEL_36;\n        goto LABEL_77;\n      }\nLABEL_72:\n      if ( v81 || v23 != 1 )\n      {\n        v56 = v72 + 1;\n        *v72 = byte_40F728[v23];\n        if ( v39 )\n        {\n          if ( v81 )\n          {\n            v56 = v72 + 2;\n            v72[1] = 105;\n          }\n          goto LABEL_77;\n        }\n      }\n      else\n      {\n        v56 = v72 + 1;\n        *v72 = 107;\n        if ( v39 )\n        {\nLABEL_77:\n          *v56 = 66;\n          v72 = v56 + 1;\n          goto LABEL_36;\n        }\n      }\n      v72 = v56;\n      goto LABEL_36;\n    }\nLABEL_70:\n    s[647] = 32;\n    v72 = s + 648;\n    goto LABEL_71;\n  }\nLABEL_36:\n  *v72 = 0;\n  return v37;\n}\n", 
            "funcStartAddr": "0x405d70L", 
            "funcEndAddr": "0x40673eL", 
            "funcName": "sub_405D70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406740(char *nptr, int *a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  char *v4; // rbx\n  int v5; // ebp\n  int v6; // eax\n  int v7; // ebp\n  __int64 result; // rax\n  __int64 v9; // rdx\n  char *v10; // [rsp+8h] [rbp-30h]\n\n  v3 = a3;\n  v4 = nptr;\n  if ( nptr || (v4 = getenv(\"BLOCK_SIZE\")) != 0LL || (v4 = getenv(\"BLOCKSIZE\")) != 0LL )\n  {\n    v5 = 0;\n    if ( *v4 == 39 )\n    {\n      ++v4;\n      v5 = 4;\n    }\n    v6 = sub_40A670(v4, off_40F710, dword_40F700, 4LL);\n    if ( v6 >= 0 )\n    {\n      *v3 = 1LL;\n      v7 = dword_40F700[v6] | v5;\n      result = 0LL;\n      *a2 = v7;\n      return result;\n    }\n    result = sub_408F50(v4);\n    if ( (_DWORD)result )\n    {\n      *a2 = 0;\n      v9 = *v3;\nLABEL_15:\n      if ( !v9 )\n      {\n        *v3 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\") < 1 ? 1024LL : 512LL;\n        result = 4LL;\n      }\n      return result;\n    }\n    if ( (unsigned __int8)(*v4 - 48) > 9u )\n    {\n      if ( v4 != v10 )\n      {\n        while ( (unsigned __int8)(*++v4 - 48) > 9u )\n        {\n          if ( v4 == v10 )\n            goto LABEL_22;\n        }\n        goto LABEL_13;\n      }\nLABEL_22:\n      if ( *(v10 - 1) == 66 )\n      {\n        v5 |= 0x180u;\n        if ( *(v10 - 2) != 105 )\n          goto LABEL_13;\n      }\n      else\n      {\n        LOBYTE(v5) = v5 | 0x80;\n      }\n      v5 |= 0x20u;\n    }\nLABEL_13:\n    v9 = *v3;\n    *a2 = v5;\n    goto LABEL_15;\n  }\n  result = (__int64)getenv(\"POSIXLY_CORRECT\");\n  if ( result )\n  {\n    *v3 = 512LL;\n    result = 0LL;\n  }\n  else\n  {\n    *v3 = 1024LL;\n  }\n  *a2 = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x406740L", 
            "funcEndAddr": "0x4068f7L", 
            "funcName": "sub_406740"
        }, 
        {
            "decompiledFuncCode": "void sub_406900(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, void (__fastcall *a6)(_QWORD), ...)\n{\n  int v6; // ebx\n  __int64 v7; // r13\n  __int64 v8; // r12\n  __int64 v9; // rbp\n  void (__fastcall *v10)(_QWORD); // r14\n  int v11; // eax\n  gcc_va_list va; // [rsp+8h] [rbp-F0h]\n\n  v6 = dword_614338;\n  dword_614338 = 0;\n  if ( (_DWORD)a1 == 2 )\n  {\n    v7 = a5;\n    v8 = a4;\n    v9 = a3;\n    v10 = a6;\n    v11 = sub_40A500(a1, a2, &unk_40F750, &off_40F760, 0LL);\n    if ( v11 != -1 )\n    {\n      if ( v11 == 104 )\n      {\n        v10(0LL);\n      }\n      else if ( v11 == 118 )\n      {\n        va_start(va, a6);\n        sub_408B20(stdout, v9, v8, v7, va);\n        exit(0);\n      }\n    }\n  }\n  dword_614338 = v6;\n  dword_61433C = 0;\n}\n", 
            "funcStartAddr": "0x406900L", 
            "funcEndAddr": "0x406a02L", 
            "funcName": "sub_406900"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406A10(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_614680 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x406a10L", 
            "funcEndAddr": "0x406aa9L", 
            "funcName": "sub_406A10"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406AB0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40AA50();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40F811;\n      if ( !v5 )\n        v2 = (char *)&unk_40F806;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40F80D;\n    if ( !v5 )\n      v2 = (char *)&unk_40F80A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x406ab0L", 
            "funcEndAddr": "0x406ba2L", 
            "funcName": "sub_406AB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406BB0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406BB0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406BB0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406BB0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406BB0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406BB0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406BB0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", v11);\n        v47 = sub_406AB0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_406BB0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406BB0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406BB0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406BB0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406BB0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406BB0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406BB0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", v11);\n        v47 = sub_406AB0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401fa0L", 
            "funcEndAddr": "0x401fa5L", 
            "funcName": "sub_406BB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406BB0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406BB0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406BB0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406BB0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406BB0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406BB0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406BB0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", v11);\n        v47 = sub_406AB0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_406BB0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406BB0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406BB0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406BB0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406BB0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406BB0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406BB0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406BB0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406BB0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", v11);\n        v47 = sub_406AB0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401fa0L", 
            "funcEndAddr": "0x401fa5L", 
            "funcName": "sub_406BB0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407DE0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_614318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v7 = (__int128 *)sub_408D20(0LL, v9);\n      off_614318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (__int128 *)sub_408D20(off_614318, v9);\n      v7 = off_614318;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407DE0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_614318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v7 = (__int128 *)sub_408D20(0LL, v9);\n      off_614318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (__int128 *)sub_408D20(off_614318, v9);\n      v7 = off_614318;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401fa5L", 
            "funcEndAddr": "0x401faaL", 
            "funcName": "sub_407DE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407DE0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_614318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v7 = (__int128 *)sub_408D20(0LL, v9);\n      off_614318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (__int128 *)sub_408D20(off_614318, v9);\n      v7 = off_614318;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407DE0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_614318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v7 = (__int128 *)sub_408D20(0LL, v9);\n      off_614318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (__int128 *)sub_408D20(off_614318, v9);\n      v7 = off_614318;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401fa5L", 
            "funcEndAddr": "0x401faaL", 
            "funcName": "sub_407DE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408300(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408300(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401faaL", 
            "funcEndAddr": "0x401fafL", 
            "funcName": "sub_408300"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408300(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_408300(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401faaL", 
            "funcEndAddr": "0x401fafL", 
            "funcName": "sub_408300"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408370(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408370(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401fafL", 
            "funcEndAddr": "0x401fb4L", 
            "funcName": "sub_408370"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408370(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_408370(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401fafL", 
            "funcEndAddr": "0x401fb4L", 
            "funcName": "sub_408370"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4083E0(int a1, char *a2)\n{\n  return sub_408300(0, a1, a2);\n}\n", 
            "funcStartAddr": "0x4083e0L", 
            "funcEndAddr": "0x4083ecL", 
            "funcName": "sub_4083E0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408400(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_6147D0;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6147A0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6147B0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_6147C0);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_407DE0(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x408400L", 
            "funcEndAddr": "0x408470L", 
            "funcName": "sub_408400"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408480(char *a1)\n{\n  return sub_408400(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x408480L", 
            "funcEndAddr": "0x408491L", 
            "funcName": "sub_408480"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4084B0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4084B0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fb4L", 
            "funcEndAddr": "0x401fb9L", 
            "funcName": "sub_4084B0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4084B0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4084B0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401fb4L", 
            "funcEndAddr": "0x401fb9L", 
            "funcName": "sub_4084B0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408520(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_6147A0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6147B0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6147C0);\n  v9 = qword_6147D0;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_407DE0(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x408520L", 
            "funcEndAddr": "0x40858cL", 
            "funcName": "sub_408520"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408610(int a1, char *a2)\n{\n  return sub_407DE0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6142E0);\n}\n", 
            "funcStartAddr": "0x408610L", 
            "funcEndAddr": "0x408621L", 
            "funcName": "sub_408610"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_408630(char *a1)\n{\n  return sub_407DE0(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6142E0);\n}\n", 
            "funcStartAddr": "0x408630L", 
            "funcEndAddr": "0x408646L", 
            "funcName": "sub_408630"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n", 
            "funcStartAddr": "0x4086b0L", 
            "funcEndAddr": "0x408701L", 
            "funcName": "sub_408710"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n", 
            "funcStartAddr": "0x4086b0L", 
            "funcEndAddr": "0x408701L", 
            "funcName": "sub_408710"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_408710(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_4094C0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n", 
            "funcStartAddr": "0x4086b0L", 
            "funcEndAddr": "0x408701L", 
            "funcName": "sub_408710"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408720(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, double a7)\n{\n  __int64 v7; // r12\n  __int64 *v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r9\n  char *v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // r8\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 result; // rax\n  const char *v17; // rsi\n  __int64 v18; // r8\n  __int64 v19; // rbx\n  char *v20; // rax\n  __int64 v21; // r8\n  __int64 v22; // r9\n  __int64 v23; // r12\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // r9\n  __int64 v27; // r13\n  __int64 v28; // r12\n  __int64 v29; // rbx\n  char *v30; // rax\n  __int64 v31; // r14\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r13\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // r9\n  __int64 v40; // r8\n  __int64 v41; // r8\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+0h] [rbp-58h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n  __int64 v45; // [rsp+8h] [rbp-50h]\n\n  v7 = a6;\n  v8 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4, a7);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6, a7);\n  v9 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v9, 2017LL, v10, a7);\n  v11 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v11, stream);\n  switch ( v7 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v19 = *v8;\n      v20 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v20, v19, v21, v22, a7);\n    case 2LL:\n      v23 = v8[1];\n      v24 = *v8;\n      v25 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v25, v24, v23, v26, a7);\n    case 3LL:\n      v27 = v8[2];\n      v28 = v8[1];\n      v29 = *v8;\n      v30 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29, v28, v27, a7);\n    case 4LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v35, v34, v33, v32, a7);\n      return v31;\n    case 6LL:\n      v43 = v8[1];\n      v36 = v8[2];\n      v37 = *v8;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v39 = v36;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 7LL:\n      v40 = v8[1];\n      v45 = v8[2];\n      v37 = *v8;\n      v43 = v40;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v39 = v45;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 8LL:\n      v12 = v8[2];\n      v13 = v8[1];\n      v14 = *v8;\n      v42 = v12;\n      v44 = v13;\n      v15 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n    case 9LL:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v18 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v18;\n      goto LABEL_8;\n    default:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v41 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v41;\nLABEL_8:\n      v15 = dcgettext(0LL, v17, 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n  }\n}\n\n__int64 __fastcall sub_408720(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, double a7)\n{\n  __int64 v7; // r12\n  __int64 *v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r9\n  char *v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // r8\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 result; // rax\n  const char *v17; // rsi\n  __int64 v18; // r8\n  __int64 v19; // rbx\n  char *v20; // rax\n  __int64 v21; // r8\n  __int64 v22; // r9\n  __int64 v23; // r12\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // r9\n  __int64 v27; // r13\n  __int64 v28; // r12\n  __int64 v29; // rbx\n  char *v30; // rax\n  __int64 v31; // r14\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r13\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // r9\n  __int64 v40; // r8\n  __int64 v41; // r8\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+0h] [rbp-58h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n  __int64 v45; // [rsp+8h] [rbp-50h]\n\n  v7 = a6;\n  v8 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4, a7);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6, a7);\n  v9 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v9, 2017LL, v10, a7);\n  v11 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v11, stream);\n  switch ( v7 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v19 = *v8;\n      v20 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v20, v19, v21, v22, a7);\n    case 2LL:\n      v23 = v8[1];\n      v24 = *v8;\n      v25 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v25, v24, v23, v26, a7);\n    case 3LL:\n      v27 = v8[2];\n      v28 = v8[1];\n      v29 = *v8;\n      v30 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29, v28, v27, a7);\n    case 4LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v35, v34, v33, v32, a7);\n      return v31;\n    case 6LL:\n      v43 = v8[1];\n      v36 = v8[2];\n      v37 = *v8;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v39 = v36;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 7LL:\n      v40 = v8[1];\n      v45 = v8[2];\n      v37 = *v8;\n      v43 = v40;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v39 = v45;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 8LL:\n      v12 = v8[2];\n      v13 = v8[1];\n      v14 = *v8;\n      v42 = v12;\n      v44 = v13;\n      v15 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n    case 9LL:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v18 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v18;\n      goto LABEL_8;\n    default:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v41 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v41;\nLABEL_8:\n      v15 = dcgettext(0LL, v17, 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n  }\n}\n", 
            "funcStartAddr": "0x401fb9L", 
            "funcEndAddr": "0x401fbeL", 
            "funcName": "sub_408720"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408720(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, double a7)\n{\n  __int64 v7; // r12\n  __int64 *v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r9\n  char *v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // r8\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 result; // rax\n  const char *v17; // rsi\n  __int64 v18; // r8\n  __int64 v19; // rbx\n  char *v20; // rax\n  __int64 v21; // r8\n  __int64 v22; // r9\n  __int64 v23; // r12\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // r9\n  __int64 v27; // r13\n  __int64 v28; // r12\n  __int64 v29; // rbx\n  char *v30; // rax\n  __int64 v31; // r14\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r13\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // r9\n  __int64 v40; // r8\n  __int64 v41; // r8\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+0h] [rbp-58h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n  __int64 v45; // [rsp+8h] [rbp-50h]\n\n  v7 = a6;\n  v8 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4, a7);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6, a7);\n  v9 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v9, 2017LL, v10, a7);\n  v11 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v11, stream);\n  switch ( v7 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v19 = *v8;\n      v20 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v20, v19, v21, v22, a7);\n    case 2LL:\n      v23 = v8[1];\n      v24 = *v8;\n      v25 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v25, v24, v23, v26, a7);\n    case 3LL:\n      v27 = v8[2];\n      v28 = v8[1];\n      v29 = *v8;\n      v30 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29, v28, v27, a7);\n    case 4LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v35, v34, v33, v32, a7);\n      return v31;\n    case 6LL:\n      v43 = v8[1];\n      v36 = v8[2];\n      v37 = *v8;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v39 = v36;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 7LL:\n      v40 = v8[1];\n      v45 = v8[2];\n      v37 = *v8;\n      v43 = v40;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v39 = v45;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 8LL:\n      v12 = v8[2];\n      v13 = v8[1];\n      v14 = *v8;\n      v42 = v12;\n      v44 = v13;\n      v15 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n    case 9LL:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v18 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v18;\n      goto LABEL_8;\n    default:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v41 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v41;\nLABEL_8:\n      v15 = dcgettext(0LL, v17, 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n  }\n}\n\n__int64 __fastcall sub_408720(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6, double a7)\n{\n  __int64 v7; // r12\n  __int64 *v8; // rbx\n  char *v9; // rax\n  __int64 v10; // r9\n  char *v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // r8\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 result; // rax\n  const char *v17; // rsi\n  __int64 v18; // r8\n  __int64 v19; // rbx\n  char *v20; // rax\n  __int64 v21; // r8\n  __int64 v22; // r9\n  __int64 v23; // r12\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // r9\n  __int64 v27; // r13\n  __int64 v28; // r12\n  __int64 v29; // rbx\n  char *v30; // rax\n  __int64 v31; // r14\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r13\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // r9\n  __int64 v40; // r8\n  __int64 v41; // r8\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+0h] [rbp-58h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n  __int64 v45; // [rsp+8h] [rbp-50h]\n\n  v7 = a6;\n  v8 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4, a7);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6, a7);\n  v9 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v9, 2017LL, v10, a7);\n  v11 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v11, stream);\n  switch ( v7 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v19 = *v8;\n      v20 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v20, v19, v21, v22, a7);\n    case 2LL:\n      v23 = v8[1];\n      v24 = *v8;\n      v25 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v25, v24, v23, v26, a7);\n    case 3LL:\n      v27 = v8[2];\n      v28 = v8[1];\n      v29 = *v8;\n      v30 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v30, v29, v28, v27, a7);\n    case 4LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v31 = v8[3];\n      v32 = v8[2];\n      v33 = v8[1];\n      v34 = *v8;\n      v35 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v35, v34, v33, v32, a7);\n      return v31;\n    case 6LL:\n      v43 = v8[1];\n      v36 = v8[2];\n      v37 = *v8;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v39 = v36;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 7LL:\n      v40 = v8[1];\n      v45 = v8[2];\n      v37 = *v8;\n      v43 = v40;\n      v38 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v39 = v45;\n      return __fprintf_chk(stream, 1LL, v38, v37, v43, v39, a7);\n    case 8LL:\n      v12 = v8[2];\n      v13 = v8[1];\n      v14 = *v8;\n      v42 = v12;\n      v44 = v13;\n      v15 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n    case 9LL:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v18 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v18;\n      goto LABEL_8;\n    default:\n      v17 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v41 = v8[1];\n      v42 = v8[2];\n      v14 = *v8;\n      v44 = v41;\nLABEL_8:\n      v15 = dcgettext(0LL, v17, 5);\n      return __fprintf_chk(stream, 1LL, v15, v14, v44, v42, a7);\n  }\n}\n", 
            "funcStartAddr": "0x401fb9L", 
            "funcEndAddr": "0x401fbeL", 
            "funcName": "sub_408720"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408B20(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5, double a6)\n{\n  __int64 i; // r9\n  __int64 *v7; // r10\n  __int64 v8; // rax\n  unsigned int v9; // eax\n  __int64 *v10; // r10\n  __int64 v11; // rax\n  __int64 v13[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v9 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v7 = (__int64 *)(*((_QWORD *)a5 + 2) + v9);\n      *a5 = v9 + 8;\n      v8 = *v7;\n      v13[i] = *v7;\n      if ( !v8 )\n        return sub_408720(a1, a2, a3, a4, v13, i, a6);\n      continue;\n    }\n    v10 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v10 + 1;\n    v11 = *v10;\n    v13[i] = *v10;\n    if ( !v11 )\n      break;\n  }\n  return sub_408720(a1, a2, a3, a4, v13, i, a6);\n}\n", 
            "funcStartAddr": "0x408b20L", 
            "funcEndAddr": "0x408b80L", 
            "funcName": "sub_408B20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408B80(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, double a7, char a8)\n{\n  char *v8; // r10\n  unsigned int v9; // er8\n  __int64 i; // r9\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 *v13; // rax\n  __int64 v14; // rax\n  __int64 v16[10]; // [rsp+20h] [rbp-88h]\n  char v17[32]; // [rsp+70h] [rbp-38h]\n  __int64 v18; // [rsp+90h] [rbp-18h]\n  __int64 v19; // [rsp+98h] [rbp-10h]\n\n  v18 = a5;\n  v8 = &a8;\n  v9 = 32;\n  v19 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v9 <= 0x2F )\n    {\n      v11 = v9;\n      v9 += 8;\n      v12 = *(_QWORD *)&v17[v11];\n      v16[i] = v12;\n      if ( !v12 )\n        return sub_408720(a1, a2, a3, a4, v16, i, a7);\n      continue;\n    }\n    v13 = (__int64 *)v8;\n    v8 += 8;\n    v14 = *v13;\n    v16[i] = v14;\n    if ( !v14 )\n      break;\n  }\n  return sub_408720(a1, a2, a3, a4, v16, i, a7);\n}\n", 
            "funcStartAddr": "0x408b80L", 
            "funcEndAddr": "0x408c3cL", 
            "funcName": "sub_408B80"
        }, 
        {
            "decompiledFuncCode": "int sub_408C40()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_40DCA1, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n", 
            "funcStartAddr": "0x408c40L", 
            "funcEndAddr": "0x408cb4L", 
            "funcName": "sub_408C40"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_408CC0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_408F10();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408cc0L", 
            "funcEndAddr": "0x408cdaL", 
            "funcName": "sub_408CC0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_408D20(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_408F10();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408d20L", 
            "funcEndAddr": "0x408d56L", 
            "funcName": "sub_408D20"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_408EC0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_408CC0(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x408ec0L", 
            "funcEndAddr": "0x408ee8L", 
            "funcName": "sub_408EC0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_408F10()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x408f10L", 
            "funcEndAddr": "0x408f41L", 
            "funcName": "sub_408F10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408F50(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // er12\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // er9\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  int base; // [rsp+0h] [rbp-58h]\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, v5, base, 0);\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(v7, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v15 = (unsigned __int8)**v5;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *v5;\n      v26 = strchr(v7, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_39:\n        *v6 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      v19 = 142129060940101LL;\n      if ( !_bittest64(&v19, (unsigned int)(v15 - 69)) || (v37 = v18, v20 = strchr(v7, 48), v18 = v37, !v20) )\n      {\nLABEL_26:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_27;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_27:\n          switch ( (_BYTE)v15 )\n          {\n            case 0x42:\n              if ( v13 >> 54 )\n                goto LABEL_37;\n              v13 <<= 10;\n              break;\n            case 0x45:\n              goto LABEL_70;\n            case 0x47:\n            case 0x67:\n              goto LABEL_76;\n            case 0x4B:\n            case 0x6B:\n              goto LABEL_36;\n            case 0x4D:\n            case 0x6D:\n              goto LABEL_29;\n            case 0x50:\n              goto LABEL_64;\n            case 0x54:\n            case 0x74:\n              goto LABEL_58;\n            case 0x59:\n              goto LABEL_52;\n            case 0x5A:\n              goto LABEL_46;\n            case 0x62:\n              goto LABEL_43;\n            case 0x63:\n              break;\n            case 0x77:\n              if ( (v13 & 0x8000000000000000LL) != 0LL )\n                goto LABEL_37;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_39;\n          }\nLABEL_32:\n          v24 = &v18[v22];\n          *v5 = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (_BYTE)v15 )\n          {\n            case 0x45:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_70:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_50;\n            case 0x46:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4C:\n            case 0x4E:\n            case 0x4F:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6C:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n              goto LABEL_39;\n            case 0x47:\n            case 0x67:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_76:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_32;\n            case 0x4B:\n            case 0x6B:\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_36:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_32;\n              goto LABEL_37;\n            case 0x4D:\n            case 0x6D:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_29:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_37;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 0x50:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_64:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_50;\n            case 0x54:\n            case 0x74:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_58:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_50;\n            case 0x59:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_52:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_50;\n            case 0x5A:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_46:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_50:\n              v14 |= v28;\n              break;\n            case 0x62:\n              v22 = 1;\nLABEL_43:\n              if ( v13 >> 55 )\n              {\nLABEL_37:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 0x63:\n              v22 = 1;\n              goto LABEL_32;\n            default:\n              goto LABEL_26;\n          }\n          goto LABEL_32;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_27;\n    }\n  }\nLABEL_13:\n  *v6 = v13;\n  return v14;\n}\n", 
            "funcStartAddr": "0x408f50L", 
            "funcEndAddr": "0x409384L", 
            "funcName": "sub_408F50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_409390(__int64 a1, __m128i *a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r13\n  __int64 v4; // rbp\n  unsigned __int64 v5; // rbx\n  const char **v6; // rdx\n  size_t v7; // rax\n  bool v8; // cf\n  unsigned __int32 v9; // eax\n  _BYTE *v10; // rbp\n  _BYTE *v11; // rbx\n  const char **v12; // rdx\n  const char *v13; // r15\n  size_t v14; // r14\n  unsigned int v15; // eax\n  __m128i v17; // [rsp+8h] [rbp-50h]\n\n  v17 = _mm_loadu_si128(a2);\n  v2 = a2[1].m128i_i64[0];\n  if ( a1 )\n  {\n    v3 = a1;\n    v4 = a1;\n    v5 = 0LL;\n    do\n    {\n      v9 = v17.m128i_i32[0];\n      if ( v17.m128i_i32[0] <= 0x2Fu )\n      {\n        v17.m128i_i32[0] += 8;\n        v6 = (const char **)(v2 + v9);\n      }\n      else\n      {\n        v6 = (const char **)v17.m128i_i64[1];\n        v17.m128i_i64[1] += 8LL;\n      }\n      v7 = strlen(*v6);\n      v8 = __CFADD__(v7, v5);\n      v5 += v7;\n      if ( v8 )\n        v5 = -1LL;\n      --v4;\n    }\n    while ( v4 );\n    if ( v5 > 0x7FFFFFFF )\n    {\n      v10 = 0LL;\n      *__errno_location() = 75;\n      return v10;\n    }\n    v10 = sub_408CC0(v5 + 1);\n    v11 = v10;\n    do\n    {\n      v15 = a2->m128i_i64[0];\n      if ( LODWORD(a2->m128i_i64[0]) <= 0x2F )\n      {\n        v12 = (const char **)(a2[1].m128i_i64[0] + v15);\n        LODWORD(a2->m128i_i64[0]) = v15 + 8;\n      }\n      else\n      {\n        v12 = (const char **)a2->m128i_i64[1];\n        a2->m128i_i64[1] = (__int64)(v12 + 1);\n      }\n      v13 = *v12;\n      v14 = strlen(*v12);\n      memcpy(v11, v13, v14);\n      v11 += v14;\n      --v3;\n    }\n    while ( v3 );\n  }\n  else\n  {\n    v11 = sub_408CC0(1uLL);\n    v10 = v11;\n  }\n  *v11 = 0;\n  return v10;\n}\n", 
            "funcStartAddr": "0x409390L", 
            "funcEndAddr": "0x4094b7L", 
            "funcName": "sub_409390"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4094C0(_BYTE *a1, __m128i *a2)\n{\n  __int64 v2; // rax\n  char v3; // cl\n  __int64 v5; // [rsp+8h] [rbp-10h]\n\n  if ( !*a1 )\n  {\n    v2 = 0LL;\n    return sub_409390(v2, a2);\n  }\n  if ( *a1 == 37 && a1[1] == 115 )\n  {\n    v2 = 0LL;\n    do\n    {\n      v3 = a1[2 * ++v2];\n      if ( !v3 )\n        return sub_409390(v2, a2);\n    }\n    while ( v3 == 37 && a1[2 * v2 + 1] == 115 );\n  }\n  if ( (int)sub_40A600(&v5, a1, a2) >= 0 )\n    return (_BYTE *)v5;\n  if ( *__errno_location() == 12 )\n    sub_408F10();\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4094c0L", 
            "funcEndAddr": "0x40954aL", 
            "funcName": "sub_4094C0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409550(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_409710(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409550L", 
            "funcEndAddr": "0x4095cbL", 
            "funcName": "sub_409550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4095D0(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_6147D8 < 0 )\n    {\n      v3 = sub_4095D0(a1);\n      if ( v3 >= 0 && dword_6147D8 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_6147D8 = 1;\n      }\n      else\n      {\n        v3 = sub_4095D0(a1);\n        if ( v3 >= 0 )\n        {\n          dword_6147D8 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x4095d0L", 
            "funcEndAddr": "0x409705L", 
            "funcName": "sub_4095D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409710(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_409750(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x409710L", 
            "funcEndAddr": "0x409750L", 
            "funcName": "sub_409710"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409750(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x409750L", 
            "funcEndAddr": "0x4097a7L", 
            "funcName": "sub_409750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4097B0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x4097b0L", 
            "funcEndAddr": "0x40988fL", 
            "funcName": "sub_4097B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409890(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, double a7, int *a8, int a9, __int64 a10)\n{\n  const char *v10; // r14\n  char *v11; // rbp\n  size_t v12; // r13\n  char **v13; // rbx\n  __int64 v14; // r12\n  const char *v15; // r15\n  const char *v16; // rdi\n  __int64 v17; // r15\n  char **v18; // rbp\n  char *v19; // rdx\n  __int64 result; // rax\n  int v21; // edx\n  int v22; // eax\n  int v23; // ecx\n  char *v24; // rdx\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  const char *v29; // r12\n  __int64 v30; // rbp\n  char *v31; // rax\n  __int64 v32; // rbx\n  __int64 v33; // rbp\n  char *v34; // rax\n  __int64 v35; // r9\n  FILE *v36; // rdi\n  char **v37; // rbx\n  _BYTE *v38; // rbp\n  __int64 v39; // r12\n  const char *v40; // r12\n  __int64 v41; // rbp\n  char *v42; // rax\n  char **v43; // [rsp+0h] [rbp-88h]\n  int v44; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v48; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v50; // [rsp+38h] [rbp-50h]\n  char v51; // [rsp+3Fh] [rbp-49h]\n  int v52; // [rsp+40h] [rbp-48h]\n  int v53; // [rsp+44h] [rbp-44h]\n  int v54; // [rsp+48h] [rbp-40h]\n\n  v52 = a1;\n  v10 = (const char *)*((_QWORD *)a8 + 4);\n  s = a3;\n  v43 = a4;\n  v48 = a5;\n  v11 = (char *)*((_QWORD *)a8 + 4);\n  v44 = a6;\n  v51 = *v10;\n  if ( *v10 != 61 && *v10 )\n  {\n    do\n      ++v11;\n    while ( *v11 && *v11 != 61 );\n    v12 = v11 - v10;\n  }\n  else\n  {\n    v12 = 0LL;\n  }\n  v13 = a4;\n  v14 = 0LL;\n  s1 = *a4;\n  v15 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v44 || *(_BYTE *)(a2[*a8] + 1) == 45 || (v19 = strchr(s, v51), result = 0xFFFFFFFFLL, !v19) )\n    {\n      if ( a9 )\n      {\n        v25 = *a2;\n        v26 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v26, v25, a10, v10, a7);\n      }\n      *((_QWORD *)a8 + 4) = 0LL;\n      ++*a8;\n      a8[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v15, v10, v12) && strlen(v15) == v12 )\n      goto LABEL_31;\n    v13 += 4;\n    v15 = *v13;\n    if ( !*v13 )\n      break;\n    v14 = (int)v14 + 1;\n  }\n  v13 = 0LL;\n  v53 = -1;\n  v16 = s1;\n  v17 = 0LL;\n  v50 = 0;\n  v54 = 0;\n  ptr = 0LL;\n  s1a = v11;\n  v18 = v43;\n  do\n  {\n    if ( strncmp(v16, v10, v12) )\n      goto LABEL_20;\n    if ( v13 )\n    {\n      if ( (v44\n         || *((_DWORD *)v13 + 2) != *((_DWORD *)v18 + 2)\n         || v13[2] != v18[2]\n         || *((_DWORD *)v13 + 6) != *((_DWORD *)v18 + 6))\n        && !v50 )\n      {\n        if ( a9 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v14 + 1, 1uLL);\n          if ( ptr )\n          {\n            v54 = 1;\n            ptr[v53] = 1;\nLABEL_19:\n            ptr[v17] = 1;\n            goto LABEL_20;\n          }\n          v50 = 1;\n        }\n        else\n        {\n          v50 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v53 = v17;\n      v13 = v18;\n    }\nLABEL_20:\n    v18 += 4;\n    v16 = *v18;\n    ++v17;\n  }\n  while ( *v18 );\n  v11 = s1a;\n  if ( ptr || v50 )\n  {\n    if ( a9 )\n    {\n      if ( v50 )\n      {\n        v27 = *a2;\n        v28 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v28, v27, a10, v10, a7);\n        v10 = (const char *)*((_QWORD *)a8 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v32 = *((_QWORD *)a8 + 4);\n        v33 = *a2;\n        v34 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v34, v33, a10, v32, a7);\n        v36 = stderr;\n        v37 = v43;\n        v38 = ptr;\n        v39 = (__int64)&ptr[v14 + 1];\n        do\n        {\n          if ( *v38 )\n          {\n            __fprintf_chk(v36, 1LL, \" '%s%s'\", a10, *v37, v35, a7);\n            v36 = stderr;\n          }\n          ++v38;\n          v37 += 4;\n        }\n        while ( (_BYTE *)v39 != v38 );\n        fputc(10, v36);\n        funlockfile(stderr);\n        v10 = (const char *)*((_QWORD *)a8 + 4);\n      }\n    }\n    if ( v54 )\n      free(ptr);\n    *((_QWORD *)a8 + 4) = &v10[strlen(v10)];\n    ++*a8;\n    a8[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v13 )\n      goto LABEL_24;\n    LODWORD(v14) = v53;\nLABEL_31:\n    v21 = *a8;\n    *((_QWORD *)a8 + 4) = 0LL;\n    v22 = v21 + 1;\n    *a8 = v21 + 1;\n    v23 = *((_DWORD *)v13 + 2);\n    if ( *v11 )\n    {\n      if ( v23 )\n      {\n        *((_QWORD *)a8 + 2) = v11 + 1;\n        goto LABEL_33;\n      }\n      if ( a9 )\n      {\n        v29 = *v13;\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30, a10, v29, a7);\n      }\n      a8[2] = *((_DWORD *)v13 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v23 != 1 )\n        goto LABEL_33;\n      if ( v22 >= v52 )\n      {\n        if ( a9 )\n        {\n          v40 = *v13;\n          v41 = *a2;\n          v42 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v42, v41, a10, v40, a7);\n        }\n        a8[2] = *((_DWORD *)v13 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a8 = v21 + 2;\n        *((_QWORD *)a8 + 2) = a2[v22];\nLABEL_33:\n        if ( v48 )\n          *v48 = v14;\n        v24 = v13[2];\n        result = *((unsigned int *)v13 + 6);\n        if ( v24 )\n        {\n          *(_DWORD *)v24 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409890L", 
            "funcEndAddr": "0x409eacL", 
            "funcName": "sub_409890"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409EB0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, double a7, int *a8, int a9)\n{\n  int v9; // er13\n  int v10; // eax\n  int v11; // ebp\n  __int64 *v12; // r12\n  char *v13; // r15\n  _BYTE *v14; // rdx\n  char v15; // al\n  char v16; // al\n  int v17; // eax\n  _BYTE *v18; // r14\n  int v19; // edx\n  int v20; // ecx\n  int v21; // eax\n  unsigned int v22; // er14\n  char *v23; // rax\n  __int64 v24; // r8\n  char v25; // cl\n  int v27; // edx\n  __int64 v28; // rax\n  _BYTE *v29; // rcx\n  int v30; // esi\n  char v31; // cl\n  char *v32; // rax\n  __int64 v33; // rax\n  char *v35; // rax\n  char v36; // dl\n  __int64 v37; // rax\n  int v38; // edx\n  __int64 v39; // rax\n  __int64 v40; // rbp\n  char *v41; // rax\n  __int64 v42; // r9\n  __int64 v43; // rbp\n  char *v44; // rax\n  __int64 v45; // r9\n  __int64 v46; // rbp\n  char *v47; // rax\n  __int64 v48; // r9\n  char **v49; // [rsp+8h] [rbp-60h]\n  _DWORD *v50; // [rsp+10h] [rbp-58h]\n  char v51; // [rsp+1Ch] [rbp-4Ch]\n  int v52; // [rsp+1Ch] [rbp-4Ch]\n  int v53; // [rsp+1Ch] [rbp-4Ch]\n  int v54; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v55; // [rsp+20h] [rbp-48h]\n  __int64 v56; // [rsp+28h] [rbp-40h]\n\n  v49 = a4;\n  v50 = a5;\n  v9 = a8[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v10 = *a8;\n  v11 = a1;\n  v12 = (__int64 *)a2;\n  v13 = a3;\n  *((_QWORD *)a8 + 2) = 0LL;\n  if ( !v10 )\n  {\n    *a8 = 1;\n    v10 = 1;\nLABEL_4:\n    a8[12] = v10;\n    a8[11] = v10;\n    *((_QWORD *)a8 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a8[10] = 2;\n      v13 = a3 + 1;\n      v14 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a8[10] = 0;\n      v13 = a3 + 1;\n      v14 = 0LL;\n    }\n    else\n    {\n      v14 = 0LL;\n      if ( !a9 )\n      {\n        v54 = a6;\n        v35 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v54;\n        if ( !v35 )\n        {\n          a8[10] = 1;\n          v14 = (_BYTE *)*((_QWORD *)a8 + 4);\n          goto LABEL_24;\n        }\n        v14 = (_BYTE *)*((_QWORD *)a8 + 4);\n      }\n      a8[10] = 0;\n    }\nLABEL_24:\n    a8[6] = 1;\n    v15 = *v13;\n    goto LABEL_25;\n  }\n  if ( !a8[6] )\n    goto LABEL_4;\n  v15 = *a3;\n  v14 = (_BYTE *)*((_QWORD *)a8 + 4);\n  if ( !((v15 - 43) & 0xFD) )\n  {\n    v16 = *++v13;\n    if ( v16 == 58 )\n      v9 = 0;\n    if ( !v14 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v15 == 58 )\n    v9 = 0;\n  if ( !v14 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v14 )\n  {\nLABEL_12:\n    v17 = *a8;\n    if ( a8[12] > *a8 )\n      a8[12] = v17;\n    if ( v17 < a8[11] )\n      a8[11] = v17;\n    if ( a8[10] == 1 )\n    {\n      v27 = a8[12];\n      if ( a8[11] == v27 )\n      {\n        if ( v17 != v27 )\n        {\n          a8[11] = v17;\n          v27 = v17;\n        }\n      }\n      else if ( v17 != v27 )\n      {\n        v52 = a6;\n        sub_4097B0(a2, a8);\n        v27 = *a8;\n        a6 = v52;\n      }\n      if ( a1 <= v27 )\n      {\nLABEL_79:\n        v17 = v27;\n      }\n      else\n      {\n        v28 = v27;\n        while ( 1 )\n        {\n          v29 = (_BYTE *)v12[v28];\n          v30 = v28;\n          v27 = v28;\n          if ( *v29 == 45 )\n          {\n            if ( v29[1] )\n              break;\n          }\n          v27 = ++v28;\n          *a8 = v30 + 1;\n          if ( a1 <= (int)v28 )\n            goto LABEL_79;\n        }\n        v17 = *a8;\n      }\n      a8[12] = v27;\n    }\n    if ( a1 == v17 )\n    {\n      v11 = a8[12];\n      v19 = a8[11];\nLABEL_41:\n      if ( v19 != v11 )\n        *a8 = v19;\n      return (unsigned int)-1;\n    }\n    v18 = (_BYTE *)v12[v17];\n    if ( !strcmp((const char *)v12[v17], \"--\") )\n    {\n      v19 = a8[11];\n      v20 = a8[12];\n      v21 = v17 + 1;\n      *a8 = v21;\n      if ( v19 == v20 )\n      {\n        a8[11] = v21;\n        v19 = v21;\n      }\n      else if ( v21 != v20 )\n      {\n        sub_4097B0((__int64)v12, a8);\n        v19 = a8[11];\n      }\n      a8[12] = a1;\n      *a8 = a1;\n      goto LABEL_41;\n    }\n    if ( *v18 == 45 )\n    {\n      v31 = v18[1];\n      if ( v31 )\n      {\n        if ( v49 )\n        {\n          if ( v31 == 45 )\n          {\n            *((_QWORD *)a8 + 4) = v18 + 2;\n            return (unsigned int)sub_409890(a1, v12, v13, v49, v50, a6, a7, a8, v9, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v18[2] || (v53 = a6, v32 = strchr(v13, v31), a6 = v53, !v32) )\n            {\n              *((_QWORD *)a8 + 4) = v18 + 1;\n              v22 = sub_409890(a1, v12, v13, v49, v50, a6, a7, a8, v9, 4263314LL);\n              if ( v22 != -1 )\n                return v22;\n              v18 = (_BYTE *)v12[*a8];\n            }\n          }\n        }\n        v14 = v18 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a8[10] )\n    {\n      *((_QWORD *)a8 + 2) = v18;\n      v22 = 1;\n      *a8 = v17 + 1;\n      return v22;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v55 = v14;\n  *((_QWORD *)a8 + 4) = v14 + 1;\n  v22 = (char)*v14;\n  v56 = (__int64)(v14 + 1);\n  v51 = *v14;\n  v23 = strchr(v13, v22);\n  v24 = v56;\n  if ( !v55[1] )\n    ++*a8;\n  if ( (unsigned __int8)(v51 - 58) > 1u && v23 )\n  {\n    v25 = v23[1];\n    if ( *v23 == 87 && v49 && v25 == 59 )\n    {\n      if ( v55[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a8 + 4) = v24;\n        *((_QWORD *)a8 + 2) = 0LL;\n        return (unsigned int)sub_409890(a1, v12, v13, v49, v50, 0, a7, a8, v9, (__int64)\"-W \");\n      }\n      v33 = *a8;\n      if ( (_DWORD)v33 != a1 )\n      {\n        v24 = v12[v33];\n        goto LABEL_68;\n      }\n      if ( v9 )\n      {\n        v46 = *v12;\n        v47 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v47, v46, v22, v48, a7);\n      }\n      a8[2] = v22;\n      v22 = 5 * (*v13 != 58) + 58;\n    }\n    else if ( v25 == 58 )\n    {\n      v36 = v55[1];\n      if ( v23[2] == 58 )\n      {\n        if ( v36 )\n        {\n          *((_QWORD *)a8 + 2) = v56;\n          ++*a8;\n        }\n        else\n        {\n          *((_QWORD *)a8 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v37 = *a8;\n        if ( v36 )\n        {\n          *((_QWORD *)a8 + 2) = v56;\n          *a8 = v37 + 1;\n        }\n        else if ( a1 == (_DWORD)v37 )\n        {\n          if ( v9 )\n          {\n            v43 = *v12;\n            v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v44, v43, v22, v45, a7);\n          }\n          a8[2] = v22;\n          v22 = 5 * (*v13 != 58) + 58;\n        }\n        else\n        {\n          v38 = v37 + 1;\n          v39 = v12[v37];\n          *a8 = v38;\n          *((_QWORD *)a8 + 2) = v39;\n        }\n      }\n      *((_QWORD *)a8 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v9 )\n    {\n      v40 = *v12;\n      v41 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v41, v40, v22, v42, a7);\n    }\n    a8[2] = v22;\n    v22 = 63;\n  }\n  return v22;\n}\n", 
            "funcStartAddr": "0x409eb0L", 
            "funcEndAddr": "0x40a476L", 
            "funcName": "sub_409EB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A480(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, double a7, int a8)\n{\n  __int64 result; // rax\n\n  dword_6147E0 = dword_61433C;\n  dword_6147E4 = dword_614338;\n  result = sub_409EB0(a1, a2, a3, a4, a5, a6, a7, &dword_6147E0, a8);\n  dword_61433C = dword_6147E0;\n  qword_614820 = qword_6147F0;\n  dword_614334 = dword_6147E8;\n  return result;\n}\n", 
            "funcStartAddr": "0x40a480L", 
            "funcEndAddr": "0x40a4d6L", 
            "funcName": "sub_40A480"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A4E0(int a1, __int64 a2, char *a3, double a4)\n{\n  return sub_40A480(a1, a2, a3, 0LL, 0LL, 0, a4, 1);\n}\n", 
            "funcStartAddr": "0x40a4e0L", 
            "funcEndAddr": "0x40a4f8L", 
            "funcName": "sub_40A4E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A500(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, double a6)\n{\n  return sub_40A480(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x40a500L", 
            "funcEndAddr": "0x40a513L", 
            "funcName": "sub_40A500"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A520(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6, double a7)\n{\n  return sub_409EB0(a1, a2, a3, a4, a5, 0, a7, a6, 0);\n}\n", 
            "funcStartAddr": "0x40a520L", 
            "funcEndAddr": "0x40a535L", 
            "funcName": "sub_40A520"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A540(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, double a6)\n{\n  return sub_40A480(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x40a540L", 
            "funcEndAddr": "0x40a556L", 
            "funcName": "sub_40A540"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A560(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6, double a7)\n{\n  return sub_409EB0(a1, a2, a3, a4, a5, 1, a7, a6, 0);\n}\n", 
            "funcStartAddr": "0x40a560L", 
            "funcEndAddr": "0x40a578L", 
            "funcName": "sub_40A560"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40A580(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40A9F0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40a580L", 
            "funcEndAddr": "0x40a5faL", 
            "funcName": "sub_40A580"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A600(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rax\n  unsigned int v4; // edx\n  __int64 result; // rax\n  unsigned __int64 v6; // [rsp+8h] [rbp-10h]\n\n  v3 = (void *)sub_40AFC0(0LL, &v6, a2, a3);\n  if ( !v3 )\n    return 0xFFFFFFFFLL;\n  v4 = v6;\n  if ( v6 > 0x7FFFFFFF )\n  {\n    free(v3);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    *a1 = v3;\n    result = v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a600L", 
            "funcEndAddr": "0x40a659L", 
            "funcName": "sub_40A600"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_40A660(double a1)\n{\n  sub_405460(1, a1);\n}\n", 
            "funcStartAddr": "0x40a660L", 
            "funcEndAddr": "0x40a66aL", 
            "funcName": "sub_40A660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A670(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x40a670L", 
            "funcEndAddr": "0x40a786L", 
            "funcName": "sub_40A670"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40A790(char *a1, char *a2, __int64 a3)\n{\n  char *v3; // rbx\n  _BYTE *v4; // rbp\n  _BYTE *v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_408610(1, a1);\n  v5 = sub_408300(0, 8, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x40a790L", 
            "funcEndAddr": "0x40a801L", 
            "funcName": "sub_40A790"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40A810(char **a1, char *a2, size_t a3, double a4)\n{\n  const void *v4; // r14\n  size_t v5; // r13\n  char *v6; // rbp\n  _IO_FILE *v7; // rbx\n  char *v8; // rax\n  FILE *v9; // rsi\n  __int64 v10; // rbx\n  char *i; // r12\n  _BYTE *v12; // rax\n  __int64 v13; // r8\n  __int64 v14; // r9\n  _BYTE *v15; // rax\n  __int64 v16; // r8\n  __int64 v17; // r9\n  char *v18; // rax\n\n  v4 = 0LL;\n  v5 = a3;\n  v6 = a2;\n  v7 = stderr;\n  v8 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v9 = v7;\n  v10 = 0LL;\n  fputs_unlocked(v8, v9);\n  for ( i = *a1; i; i = a1[v10] )\n  {\n    while ( !v10 || memcmp(v4, v6, v5) )\n    {\n      ++v10;\n      v4 = v6;\n      v6 += v5;\n      v12 = sub_408630(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v12, v13, v14, a4);\n      i = a1[v10];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v10;\n    v6 += v5;\n    v15 = sub_408630(i);\n    __fprintf_chk(stderr, 1LL, 4250442LL, v15, v16, v17, a4);\n  }\nLABEL_7:\n  v18 = stderr->_IO_write_ptr;\n  if ( v18 >= stderr->_IO_write_end )\n  {\n    LODWORD(v18) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v18 + 1;\n    *v18 = 10;\n  }\n  return (int)v18;\n}\n", 
            "funcStartAddr": "0x40a810L", 
            "funcEndAddr": "0x40a928L", 
            "funcName": "sub_40A810"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A930(char *a1, char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void), double a7)\n{\n  size_t v7; // r15\n  void (*v8)(void); // r13\n  char *v9; // rbp\n  char **v10; // rbx\n  __int64 result; // rax\n\n  v7 = a5;\n  v8 = a6;\n  v9 = a4;\n  v10 = (char **)a3;\n  result = sub_40A670(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_40A790(a1, a2, result);\n    sub_40A810(v10, v9, v7, a7);\n    v8();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a930L", 
            "funcEndAddr": "0x40a9a0L", 
            "funcName": "sub_40A930"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A9A0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40a9a0L", 
            "funcEndAddr": "0x40a9edL", 
            "funcName": "sub_40A9A0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40A9F0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a9f0L", 
            "funcEndAddr": "0x40aa4eL", 
            "funcName": "sub_40A9F0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_40AA50()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = qword_614818;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_614818 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          qword_614818 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_409550(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409550(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x40aa50L", 
            "funcEndAddr": "0x40afb2L", 
            "funcName": "sub_40AA50"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40AFC0(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_40CD00(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40AFC0(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_40CD00(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n", 
            "funcStartAddr": "0x401fbeL", 
            "funcEndAddr": "0x401fc3L", 
            "funcName": "sub_40AFC0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40AFC0(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_40CD00(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40AFC0(void *a1, size_t *a2, char *a3, __int64 a4)\n{\n  char *v4; // r15\n  __int64 v5; // rbx\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  _BYTE *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  char *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  char *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  _BYTE *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  char *result; // rax\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // er11\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  int *v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  __int64 v79; // r9\n  int v80; // ebx\n  char *v81; // rdi\n  unsigned __int64 v82; // rax\n  void *v83; // rax\n  char *v84; // rax\n  char *v85; // rcx\n  int v86; // er8\n  __int16 v87; // ax\n  unsigned __int64 v88; // r15\n  char *v89; // rax\n  char *v90; // rax\n  char *v91; // rax\n  char v92; // al\n  unsigned __int64 v93; // r9\n  size_t v94; // r8\n  unsigned __int64 v95; // r10\n  unsigned __int64 v96; // rdi\n  __int64 v97; // rax\n  unsigned __int64 v98; // r10\n  unsigned __int64 v99; // rax\n  char *v100; // rax\n  __int64 v101; // rsi\n  char v102; // al\n  size_t v103; // r15\n  size_t v104; // r14\n  bool v105; // r13\n  char *v106; // rax\n  char *v107; // rax\n  __int64 v108; // rax\n  unsigned __int64 v109; // r10\n  char *v110; // rax\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rsi\n  __int64 v114; // rdx\n  char v115; // al\n  __int64 v116; // rdx\n  unsigned __int64 v117; // rax\n  char *v118; // rax\n  __int64 v119; // rdx\n  char v120; // al\n  unsigned __int64 v121; // rax\n  __int64 v122; // rsi\n  __int64 v123; // r9\n  __int64 v124; // rdx\n  __int64 v125; // rax\n  char *v126; // rsi\n  char *v127; // rdi\n  __int64 v128; // rax\n  __int64 v129; // rsi\n  unsigned __int64 v130; // rax\n  char v131; // al\n  __int64 v132; // rsi\n  char v133; // al\n  char *v134; // rax\n  __int64 v135; // rdx\n  char v136; // al\n  __int64 v137; // rax\n  char *v138; // rax\n  char *v139; // rax\n  void *v140; // rdx\n  char v141; // al\n  char *v142; // rax\n  char *v143; // rax\n  char v144; // al\n  __int16 v145; // [rsp+24h] [rbp-6ECh]\n  __int16 v146; // [rsp+24h] [rbp-6ECh]\n  unsigned __int64 v147; // [rsp+28h] [rbp-6E8h]\n  char *v148; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v150; // [rsp+40h] [rbp-6D0h]\n  void *v151; // [rsp+48h] [rbp-6C8h]\n  char *v152; // [rsp+50h] [rbp-6C0h]\n  __int64 v153; // [rsp+58h] [rbp-6B8h]\n  char *v154; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v155; // [rsp+68h] [rbp-6A8h]\n  long double v156; // [rsp+70h] [rbp-6A0h]\n  void *v157; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v159; // [rsp+94h] [rbp-67Ch]\n  unsigned int v160; // [rsp+98h] [rbp-678h]\n  char v161; // [rsp+A0h] [rbp-670h]\n  void *v162; // [rsp+A8h] [rbp-668h]\n  __int64 v163; // [rsp+B0h] [rbp-660h]\n  __int64 v164; // [rsp+190h] [rbp-580h]\n  void *v165; // [rsp+198h] [rbp-578h]\n  __int64 v166; // [rsp+1A0h] [rbp-570h]\n  __int64 v167; // [rsp+1A8h] [rbp-568h]\n  __int64 v168; // [rsp+1B0h] [rbp-560h]\n  char v169; // [rsp+420h] [rbp-2F0h]\n\n  v4 = a3;\n  v5 = a4;\n  src = a1;\n  v150 = a2;\n  if ( (int)sub_40CD00(a3, &v164, &v161) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(v5, &v161) >= 0 )\n  {\n    v6 = v166 + 7;\n    if ( (unsigned __int64)(v166 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v167, v6);\n    v7 = v167 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v155 = (_BYTE *)(((unsigned __int64)&v147 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = malloc(v8);\n      v155 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v150;\n    v11 = (char *)v165;\n    v12 = v4;\n    v13 = (char *)src;\n    v153 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v165;\n    if ( *(char **)v165 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (char *)(v15 - v12);\n    v17 = (unsigned __int64)&v16[v14];\n    v18 = (size_t)&v16[v14];\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v154 = v12;\n          LOBYTE(v156) = v19;\n          v157 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = (char *)v157;\n          v12 = v154;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v156) )\n          {\n            *(_QWORD *)&v156 = v154;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = (char *)v157;\n            v12 = *(char **)&v156;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v156 = v12;\n          v157 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = (char *)v157;\n          v12 = *(char **)&v156;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)&v16[v14];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v164 != v153 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_198;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_234;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_234:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v156 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v157) = v13 == src;\n          v91 = (char *)malloc(v10);\n          if ( !v91 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v157 )\n            v13 = (char *)memcpy(v91, v13, v18);\n          else\n            v13 = v91;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_198;\n      v26 = (char *)v162;\n      v27 = (long double *)((char *)v162 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v157) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v157 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v157 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v122 = (__int64)(v65 + 1);\n                  v123 = -1LL;\n                  v124 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v123 = 10 * v49;\n                  v75 = __CFADD__(v123, v124);\n                  v49 = v123 + v124;\n                  v65 = (char *)v122;\n                  if ( v75 )\n                  {\n                    if ( v66 == (char *)v122 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v157;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v65 - 1) != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v162 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_198;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v125 = (__int64)(v50 + 1);\n                v54 = 0LL;\n                if ( v51 != (char *)v125 )\n                {\n                  v126 = (char *)v125;\n                  while ( 1 )\n                  {\n                    v127 = v126 + 1;\n                    v128 = *v126 - 48;\n                    v129 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v129 = 10 * v54;\n                    v75 = __CFADD__(v129, v128);\n                    v130 = v129 + v128;\n                    v126 = v127;\n                    v54 = v130;\n                    if ( v75 )\n                    {\n                      if ( v51 == v127 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v126 = v127 + 1;\n                        if ( *v127 == 48 )\n                          break;\n                        if ( v51 == v126 )\n                          goto LABEL_88;\n                        ++v127;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v126 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_370;\n              }\n              v53 = (char *)v162 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_198;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_188:\n                  v82 = v55;\n                  if ( v49 >= v55 )\n                    v82 = v49;\n                  v75 = __CFADD__(v82, 1LL);\n                  v83 = (void *)(v82 + 1);\n                  v157 = v83;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v83 <= 0x2BC )\n                  {\n                    v85 = &v169;\n                  }\n                  else\n                  {\n                    v151 = (void *)v49;\n                    v152 = (char *)v54;\n                    LODWORD(v154) = v67;\n                    v156 = _FST7;\n                    if ( v83 == (void *)-1LL )\n                      goto LABEL_88;\n                    v84 = (char *)malloc((size_t)v83);\n                    v67 = (int)v154;\n                    _FST7 = v156;\n                    v85 = v84;\n                    v54 = (unsigned __int64)v152;\n                    v49 = (unsigned __int64)v151;\n                    if ( !v84 )\n                      goto LABEL_88;\n                  }\n                  v86 = (unsigned __int16)v160;\n                  LOBYTE(v87) = v160;\n                  HIBYTE(v87) = BYTE1(v160) | 3;\n                  LOWORD(v160) = v87;\n                  __asm { fxam }\n                  if ( v61 & 2 )\n                  {\n                    *v85 = 45;\n                    _FST7 = -_FST7;\n                    v88 = (unsigned __int64)(v85 + 1);\n                  }\n                  else if ( v67 & 4 )\n                  {\n                    v88 = (unsigned __int64)(v85 + 1);\n                    *v85 = 43;\n                  }\n                  else\n                  {\n                    v88 = (unsigned __int64)v85;\n                    if ( v67 & 8 )\n                    {\n                      v88 = (unsigned __int64)(v85 + 1);\n                      *v85 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_198;\n                    v93 = v88 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v88 + 2) = 102;\n                      *(_WORD *)v88 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v88 + 2) = 70;\n                      *(_WORD *)v88 = 20041;\n                    }\n                    v88 = 0LL;\n                    goto LABEL_258;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_198;\n                  v92 = v11[72] & 0xDF;\n                  switch ( v92 )\n                  {\n                    case 70:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || v54 )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v118 = nl_langinfo(0x10000);\n                        v119 = (__int64)v152;\n                        v93 = *(_QWORD *)&v156;\n                        v120 = *v118;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v120 )\n                          v120 = 46;\n                        *(_BYTE *)(v88 + 1) = v120;\n                        if ( v119 )\n                        {\n                          v121 = v93;\n                          do\n                            *(_BYTE *)(++v121 - 1) = 48;\n                          while ( v121 != v88 + v119 + 2 );\n                          v93 += v119;\n                        }\n                        goto LABEL_258;\n                      }\n                      goto LABEL_257;\n                    case 69:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 || (v101 = v88 + 1, v54) )\n                      {\n                        LOWORD(v147) = v86;\n                        v148 = (char *)v49;\n                        v151 = v85;\n                        v152 = (char *)v54;\n                        LODWORD(v154) = v67;\n                        *(_QWORD *)&v156 = v88 + 2;\n                        v134 = nl_langinfo(0x10000);\n                        v135 = (__int64)v152;\n                        v101 = *(_QWORD *)&v156;\n                        v136 = *v134;\n                        LOBYTE(v67) = (_BYTE)v154;\n                        v85 = (char *)v151;\n                        v49 = (unsigned __int64)v148;\n                        LOWORD(v86) = v147;\n                        if ( !v136 )\n                          v136 = 46;\n                        *(_BYTE *)(v88 + 1) = v136;\n                        if ( v135 )\n                        {\n                          v137 = v101;\n                          do\n                            *(_BYTE *)(++v137 - 1) = 48;\n                          while ( v137 != v88 + v135 + 2 );\n                          v101 += v135;\n                        }\n                      }\n                      v102 = v11[72];\n                      v93 = v101 + 4;\n                      *(_BYTE *)(v101 + 3) = 48;\n                      *(_BYTE *)v101 = v102;\n                      *(_WORD *)(v101 + 1) = 12331;\n                      goto LABEL_258;\n                    case 71:\n                      *(_BYTE *)v88 = 48;\n                      if ( v67 & 0x10 )\n                      {\n                        if ( v54 )\n                        {\n                          v145 = v86;\n                          v147 = v49;\n                          v148 = (char *)(v88 + 2);\n                          v151 = v85;\n                          LODWORD(v152) = v67;\n                          v154 = (char *)v54;\n                          *(_QWORD *)&v156 = v54 - 1;\n                          v112 = nl_langinfo(0x10000);\n                          v113 = *(_QWORD *)&v156;\n                          v114 = (__int64)v154;\n                          v115 = *v112;\n                          LOBYTE(v67) = (_BYTE)v152;\n                          v85 = (char *)v151;\n                          v93 = (unsigned __int64)v148;\n                          v49 = v147;\n                          LOWORD(v86) = v145;\n                          if ( !v115 )\n                            v115 = 46;\n                          *(_BYTE *)(v88 + 1) = v115;\n                          if ( v113 )\n                          {\n                            v116 = v88 + v114 + 1;\n                            v117 = v93;\n                            do\n                              *(_BYTE *)(++v117 - 1) = 48;\n                            while ( v117 != v116 );\n                            v93 += v113;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v148) = v86;\n                          v151 = (void *)v49;\n                          v152 = (char *)(v88 + 2);\n                          v154 = v85;\n                          LODWORD(v156) = v67;\n                          v143 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v156);\n                          v85 = v154;\n                          v144 = *v143;\n                          v93 = (unsigned __int64)v152;\n                          v49 = (unsigned __int64)v151;\n                          LOWORD(v86) = (_WORD)v148;\n                          if ( !v144 )\n                            v144 = 46;\n                          *(_BYTE *)(v88 + 1) = v144;\n                        }\n                        goto LABEL_258;\n                      }\nLABEL_257:\n                      v93 = v88 + 1;\n                      goto LABEL_258;\n                  }\n                  if ( v92 != 65 )\n                    goto LABEL_198;\n                  *(_BYTE *)v88 = 48;\n                  *(_QWORD *)&v156 = v88 + 2;\n                  v131 = v11[72];\n                  *(_BYTE *)(v88 + 2) = 48;\n                  *(_BYTE *)(v88 + 1) = v131 + 23;\n                  if ( v67 & 0x10 || (v132 = v88 + 3, v54) )\n                  {\n                    v146 = v86;\n                    v147 = v49;\n                    v148 = v85;\n                    v151 = (void *)v54;\n                    LODWORD(v152) = v67;\n                    v154 = (char *)(v88 + 4);\n                    v139 = nl_langinfo(0x10000);\n                    v140 = v151;\n                    v132 = (__int64)v154;\n                    v141 = *v139;\n                    LOBYTE(v67) = (_BYTE)v152;\n                    v85 = v148;\n                    v49 = v147;\n                    LOWORD(v86) = v146;\n                    if ( !v141 )\n                      v141 = 46;\n                    *(_BYTE *)(v88 + 3) = v141;\n                    if ( v140 )\n                    {\n                      v142 = (char *)v132;\n                      do\n                        *(++v142 - 1) = 48;\n                      while ( v142 != (char *)v140 + v88 + 4 );\n                      v132 += (__int64)v140;\n                    }\n                  }\n                  v133 = v11[72];\n                  v93 = v132 + 3;\n                  *(_WORD *)(v132 + 1) = 12331;\n                  v88 = *(_QWORD *)&v156;\n                  *(_BYTE *)v132 = v133 + 15;\nLABEL_258:\n                  LOWORD(v160) = v86;\n                  v94 = v93 - (_QWORD)v85;\n                  if ( v49 > v93 - (unsigned __int64)v85 )\n                  {\n                    v95 = v49 - v94;\n                    v96 = v93 + v95;\n                    v94 = v93 + v95 - (_QWORD)v85;\n                    if ( v67 & 2 )\n                    {\n                      if ( v95 )\n                      {\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v96 != v93 );\n                      }\n                    }\n                    else if ( v67 & 0x20 && v88 )\n                    {\n                      if ( v88 >= v93 )\n                      {\n                        v88 = v93;\n                      }\n                      else\n                      {\n                        v97 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v96 + v97) = *(_BYTE *)(v93 + v97);\n                          --v97;\n                        }\n                        while ( v97 != v88 - 1 - v93 );\n                      }\n                      if ( v95 )\n                      {\n                        v98 = v88 + v95;\n                        do\n                          *(_BYTE *)(++v88 - 1) = 48;\n                        while ( v88 != v98 );\n                      }\n                    }\n                    else\n                    {\n                      v108 = -1LL;\n                      if ( (unsigned __int64)v85 < v93 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v96 + v108) = *(_BYTE *)(v93 + v108);\n                          --v108;\n                        }\n                        while ( &v85[-v93 - 1] != (char *)v108 );\n                        v93 = (unsigned __int64)v85;\n                      }\n                      if ( v95 )\n                      {\n                        v109 = v93 + v95;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 32;\n                        while ( v93 != v109 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v157 <= v94 )\n                    goto LABEL_198;\n                  v99 = v94 + v18;\n                  v14 = v94 + v18;\n                  if ( v10 - v18 <= v94 )\n                  {\n                    if ( __CFADD__(v94, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v99 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v99 )\n                          goto LABEL_368;\n                      }\n                      else\n                      {\n                        if ( v99 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_275;\n                        }\nLABEL_368:\n                        if ( v99 == -1LL )\n                          goto LABEL_88;\n                        v10 = v94 + v18;\n                      }\nLABEL_275:\n                      if ( v13 && v13 != src )\n                      {\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v100 = (char *)realloc(v13, v10);\n                        if ( !v100 )\n                          goto LABEL_88;\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        v13 = v100;\n                      }\n                      else\n                      {\n                        LOBYTE(v154) = v13 == src;\n                        *(_QWORD *)&v156 = v94;\n                        v157 = v85;\n                        v110 = (char *)malloc(v10);\n                        v85 = (char *)v157;\n                        v94 = *(_QWORD *)&v156;\n                        if ( !v110 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v154 )\n                        {\n                          v111 = (char *)memcpy(v110, v13, v18);\n                          v85 = (char *)v157;\n                          v94 = *(_QWORD *)&v156;\n                          v13 = v111;\n                        }\n                        else\n                        {\n                          v13 = v110;\n                        }\n                      }\n                    }\n                  }\n                  v157 = v85;\n                  memcpy(&v13[v18], v85, v94);\n                  if ( v157 != &v169 )\n                    free(v157);\n                  goto LABEL_110;\n                }\nLABEL_370:\n                v55 = 12LL;\n                goto LABEL_188;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_188;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v155 + 1;\n        *v155 = 37;\n        if ( v30 & 1 )\n        {\n          v32 = v155;\n          v155[1] = 39;\n          v31 = v32 + 2;\n        }\n        if ( v30 & 2 )\n          *v31++ = 45;\n        if ( v30 & 4 )\n          *v31++ = 43;\n        if ( v30 & 8 )\n          *v31++ = 32;\n        if ( v30 & 0x10 )\n          *v31++ = 35;\n        if ( v30 & 0x40 )\n          *v31++ = 73;\n        if ( v30 & 0x20 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v154 = v26;\n          *(_QWORD *)&v156 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v154;\n          v31 += *(_QWORD *)&v156;\n        }\n        if ( (unsigned int)v157 <= 0x10 )\n        {\n          v37 = 1LL << (char)v157;\n          if ( (1LL << (char)v157) & 0x14180 )\n            goto LABEL_125;\n          if ( v37 & 0x1000 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( !(v37 & 0x600) )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v154) = 1;\n            v160 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_198:\n          abort();\n        }\n        LODWORD(v154) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_198;\n          v43 = (int)v154;\n          *(&v160 + (unsigned int)v154) = *((_DWORD *)v42 + 4);\n          LODWORD(v154) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v156 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v165 != &v168 )\n                    free(v165);\n                  if ( v162 != &v163 )\n                    free(v162);\n                  v13 = 0LL;\n                  **(_DWORD **)&v156 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v156 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v156) = v13 == src;\n            v90 = (char *)malloc(v10);\n            v45 = v90;\n            if ( !v90 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v156) )\n              v45 = (char *)memcpy(v90, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v152 = v45;\n            v46 = __errno_location();\n            v47 = v152;\n            v152 = v31;\n            *(_QWORD *)&v156 = v46;\n            LODWORD(v148) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v159 = -1;\n              **(_DWORD **)&v156 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (_DWORD)v157 )\n              {\n                case 1:\n                  v79 = (unsigned int)*((char *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 2:\n                  v79 = *((unsigned __int8 *)v162 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_149;\n                case 3:\n                  v79 = (unsigned int)*((__int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 4:\n                  v79 = *((unsigned __int16 *)v162 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_149;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v79 = *((unsigned int *)v162 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_149:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_208;\n                  if ( (_DWORD)v154 != 2 )\n                    goto LABEL_151;\n                  goto LABEL_207;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v70 = &v47[v18];\n                  v71 = (int *)*((_QWORD *)v162 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                  {\nLABEL_208:\n                    v79 = v160;\nLABEL_151:\n                    v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v79);\n                    v73 = v159;\n                    v47 = (char *)v151;\n                    if ( v159 >= 0 )\n                      goto LABEL_132;\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v154 == 2 )\n                    {\nLABEL_207:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                      v47 = (char *)v151;\n                    }\n                    else\n                    {\nLABEL_130:\n                      v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v71);\n                      v47 = (char *)v151;\n                    }\nLABEL_131:\n                    v73 = v159;\n                    if ( v159 >= 0 )\n                    {\nLABEL_132:\n                      if ( v73 < v48 && v47[v73 + v18] )\n                        goto LABEL_198;\n                      if ( v73 >= v72 )\n                        goto LABEL_136;\n                      goto LABEL_135;\n                    }\n                  }\n                  if ( v152[1] )\n                  {\n                    v152[1] = 0;\n                    continue;\n                  }\n                  if ( v72 < 0 )\n                  {\n                    v80 = **(_DWORD **)&v156;\n                    if ( !**(_DWORD **)&v156 )\n                    {\n                      v80 = 84;\n                      if ( (v11[72] & 0xEF) != 99 )\n                        v80 = 22;\n                    }\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    **(_DWORD **)&v156 = v80;\n                    return 0LL;\n                  }\nLABEL_135:\n                  v159 = v72;\n                  v73 = v72;\nLABEL_136:\n                  if ( (unsigned int)(v73 + 1) < v48 )\n                  {\n                    v13 = v47;\n                    v14 = v18 + v73;\n                    **(_DWORD **)&v156 = (_DWORD)v148;\n                    goto LABEL_110;\n                  }\n                  if ( v10 - v18 > 0x7FFFFFFE )\n                  {\n                    if ( v47 != src && v47 )\n                      free(v47);\n                    if ( ptr )\n                      free(ptr);\n                    if ( v165 != &v168 )\n                      free(v165);\n                    if ( v162 != &v163 )\n                      free(v162);\n                    v13 = 0LL;\n                    **(_DWORD **)&v156 = 75;\n                    return v13;\n                  }\n                  v74 = (unsigned int)(v73 + 2);\n                  v75 = __CFADD__(v18, v74);\n                  v76 = v18 + v74;\n                  if ( (v10 & 0x8000000000000000LL) != 0LL )\n                  {\n                    if ( v10 != -1LL )\n                      goto LABEL_200;\n                  }\n                  else\n                  {\n                    if ( v75 )\n                      goto LABEL_200;\n                    if ( 2 * v10 >= v76 )\n                      v76 = 2 * v10;\n                    if ( v10 < v76 )\n                    {\n                      v10 *= 2LL;\n                      if ( v10 < v76 )\n                      {\n                        if ( v76 == -1LL )\n                        {\nLABEL_200:\n                          v56 = v47;\n                          goto LABEL_89;\n                        }\n                        v10 = v76;\n                      }\n                      v77 = v47 == src;\n                      if ( !v47 || v77 )\n                      {\n                        v151 = v47;\n                        v89 = (char *)malloc(v10);\n                        v47 = (char *)v151;\n                        if ( !v89 )\n                          goto LABEL_200;\n                        if ( v18 && v77 )\n                          v47 = (char *)memcpy(v89, v151, v18);\n                        else\n                          v47 = v89;\n                      }\n                      else\n                      {\n                        v151 = v47;\n                        v78 = (char *)realloc(v47, v10);\n                        v47 = (char *)v151;\n                        if ( !v78 )\n                          goto LABEL_200;\n                        v47 = v78;\n                      }\n                    }\n                  }\n                  continue;\n                case 0xB:\n                  v81 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 || (_DWORD)v154 == 2 )\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, v160);\n                    v47 = (char *)v151;\n                  }\n                  else\n                  {\n                    v72 = __snprintf_chk(v81, v48, 1LL, -1LL, v155, &v159);\n                    v47 = (char *)v151;\n                  }\n                  goto LABEL_131;\n                case 0xC:\n                  v70 = &v47[v18];\n                  v151 = v47;\n                  if ( (_DWORD)v154 == 1 )\n                    goto LABEL_207;\n                  if ( (_DWORD)v154 != 2 )\n                  {\n                    v71 = &v159;\n                    goto LABEL_130;\n                  }\n                  v72 = __snprintf_chk(v70, v48, 1LL, -1LL, v155, v160);\n                  v47 = (char *)v151;\n                  goto LABEL_131;\n                default:\n                  goto LABEL_403;\n              }\n            }\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_403:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v12 = (char *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v153;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v103 = v18;\n    v104 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v104 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v104 )\n        {\nLABEL_298:\n          v105 = v13 == src;\n          if ( !v13 || v105 )\n          {\n            v138 = (char *)malloc(v10);\n            if ( !v138 )\n              goto LABEL_88;\n            if ( v103 && v105 )\n              v13 = (char *)memcpy(v138, v13, v103);\n            else\n              v13 = v138;\n          }\n          else\n          {\n            v106 = (char *)realloc(v13, v10);\n            if ( !v106 )\n              goto LABEL_126;\n            v13 = v106;\n          }\n          goto LABEL_302;\n        }\n      }\n      else if ( v104 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_298;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_298;\n    }\nLABEL_302:\n    v13[v103] = 0;\n    if ( v10 > v104 && v13 != src )\n    {\n      v107 = (char *)realloc(v13, v104);\n      if ( v107 )\n        v13 = v107;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v165 != &v168 )\n      free(v165);\n    if ( v162 != &v163 )\n      free(v162);\n    *v150 = v103;\n    return v13;\n  }\n  if ( v165 != &v168 )\n    free(v165);\n  if ( v162 != &v163 )\n    free(v162);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n", 
            "funcStartAddr": "0x401fbeL", 
            "funcEndAddr": "0x401fc3L", 
            "funcName": "sub_40AFC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CAE0(int *a1, unsigned __int64 *a2)\n{\n  unsigned int *v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  unsigned int *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = (unsigned int *)a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( (unsigned __int64)*v2 )\n      {\n        case 1uLL:\n        case 2uLL:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *((_BYTE *)v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3uLL:\n        case 4uLL:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *((_WORD *)v2 + 8) = *v10;\n          goto LABEL_7;\n        case 5uLL:\n        case 6uLL:\n        case 0xDuLL:\n        case 0xEuLL:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (unsigned int *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (unsigned int *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          v2[4] = *v8;\n          goto LABEL_7;\n        case 7uLL:\n        case 8uLL:\n        case 9uLL:\n        case 0xAuLL:\n        case 0x11uLL:\n        case 0x12uLL:\n        case 0x13uLL:\n        case 0x14uLL:\n        case 0x15uLL:\n        case 0x16uLL:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *((_QWORD *)v2 + 2) = *v5;\n          goto LABEL_7;\n        case 0xBuLL:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *((_QWORD *)v2 + 2) = *v14;\n          goto LABEL_7;\n        case 0xCuLL:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *((long double *)v2 + 1) = *v15;\n          goto LABEL_7;\n        case 0xFuLL:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *((_QWORD *)v2 + 2) = v21;\n          goto LABEL_7;\n        case 0x10uLL:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_411020;\n          *((_QWORD *)v2 + 2) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 8;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40cae0L", 
            "funcEndAddr": "0x40ccf9L", 
            "funcName": "sub_40CAE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CD00(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 *v5; // r15\n  unsigned __int64 v6; // r9\n  unsigned __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  __int64 v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  void *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  void *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  __int64 v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  void *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  __int64 v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v94; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v95; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v96; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v97; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v5 = a3;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = (__int64)(a2 + 4);\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (__int64)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_QWORD *)(v12 + 24) = 0LL;\n  *(_QWORD *)(v12 + 32) = 0LL;\n  *(_QWORD *)(v12 + 40) = -1LL;\n  *(_QWORD *)(v12 + 48) = 0LL;\n  *(_QWORD *)(v12 + 56) = 0LL;\n  *(_QWORD *)(v12 + 64) = -1LL;\n  *(_QWORD *)(v12 + 80) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_17;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_17;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_131;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_131;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_17:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case 39:\n        *(_DWORD *)(v12 + 16) |= 1u;\n        goto LABEL_16;\n      case 45:\n        *(_DWORD *)(v12 + 16) |= 2u;\n        goto LABEL_16;\n      case 43:\n        *(_DWORD *)(v12 + 16) |= 4u;\n        goto LABEL_16;\n      case 32:\n        *(_DWORD *)(v12 + 16) |= 8u;\n        goto LABEL_16;\n      case 35:\n        *(_DWORD *)(v12 + 16) |= 0x10u;\n        goto LABEL_16;\n    }\n    if ( v13 != 48 )\n      break;\n    *(_DWORD *)(v12 + 16) |= 0x20u;\nLABEL_16:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *(_DWORD *)(v12 + 16) |= 0x40u;\n    goto LABEL_16;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *(_QWORD *)(v12 + 24) = v9;\n    *(_QWORD *)(v12 + 32) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_215;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 != 36 )\n    {\nLABEL_215:\n      v18 = *(_QWORD *)(v12 + 40);\n      if ( v18 == -1LL )\n      {\n        *(_QWORD *)(v12 + 40) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v18 = v81++;\n      }\n    }\n    else\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_131;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_131;\n      *(_QWORD *)(v12 + 40) = v18;\n      v14 = v47 + 2;\n    }\n    v19 = (_DWORD *)v5[1];\n    if ( v6 > v18 )\n    {\n      v20 = *v5;\nLABEL_43:\n      if ( v20 <= v18 )\n      {\n        do\n          v19[8 * ++v20 - 8] = 0;\n        while ( v20 <= v18 );\n        *v5 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_26;\n        }\n        goto LABEL_132;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_27;\nLABEL_48:\n      v22 = v9[1] == 42;\n      *(_QWORD *)(v12 + 48) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *(_QWORD *)(v12 + 56) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_27;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *(_QWORD *)(v12 + 56) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_216;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 != 36 )\n      {\nLABEL_216:\n        v26 = *(_QWORD *)(v12 + 64);\n        if ( v26 != -1LL )\n          goto LABEL_53;\n        *(_QWORD *)(v12 + 64) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_53;\n        }\n      }\n      else\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_131;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *(_QWORD *)(v12 + 64) = v26;\n          v24 = v72 + 2;\nLABEL_53:\n          v19 = (_DWORD *)v5[1];\n          if ( v6 > v26 )\n          {\n            v27 = *v5;\n            goto LABEL_55;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_163;\n              v27 = *v5;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)v5[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_161;\n              v27 = *v5;\n              if ( src != v40 )\n                goto LABEL_172;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *v5;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_172:\n            v5[1] = (unsigned __int64)v19;\nLABEL_55:\n            if ( v27 <= v26 )\n            {\n              do\n                v19[8 * ++v27 - 8] = 0;\n              while ( v27 <= v26 );\n              *v5 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_27;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_27;\n            }\n            goto LABEL_132;\n          }\nLABEL_160:\n          v40 = v19;\n          goto LABEL_161;\n        }\n      }\nLABEL_131:\n      v19 = (_DWORD *)v5[1];\nLABEL_132:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (void *)v4[1];\n      if ( (void *)v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_160;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_163;\n      v20 = *v5;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)v5[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_161;\n      v20 = *v5;\n      if ( src != v40 )\n        goto LABEL_94;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *v5;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_94:\n    v5[1] = (unsigned __int64)v19;\n    goto LABEL_43;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *(_QWORD *)(v12 + 24) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = (__int64)(i + 1);\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - (_QWORD)v9;\n      v9 = (char *)v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *(_QWORD *)(v12 + 32) = v9;\n    v13 = *v9;\n  }\nLABEL_26:\n  if ( v13 == 46 )\n    goto LABEL_48;\nLABEL_27:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_34;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_34;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_34:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case 37:\n      goto LABEL_71;\n    case 65:\n    case 69:\n    case 70:\n    case 71:\n    case 97:\n    case 101:\n    case 102:\n    case 103:\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_63;\n    case 67:\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_63;\n    case 83:\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_63;\n    case 88:\n    case 111:\n    case 117:\n    case 120:\n      v29 = 10;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 6 : 4;\n        }\n      }\n      goto LABEL_63;\n    case 99:\n      v29 = (v15 > 7) + 13;\n      goto LABEL_63;\n    case 100:\n    case 105:\n      v29 = 9;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 5 : 3;\n        }\n      }\n      goto LABEL_63;\n    case 110:\n      v29 = 22;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( !(v15 & 2) )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_63;\n    case 112:\n      v29 = 17;\n      goto LABEL_63;\n    case 115:\n      v29 = (v15 > 7) + 15;\nLABEL_63:\n      if ( v11 == -1LL )\n      {\n        *(_QWORD *)(v12 + 80) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v11 = v81++;\n      }\n      else\n      {\n        *(_QWORD *)(v12 + 80) = v11;\n      }\n      v19 = (_DWORD *)v5[1];\n      if ( v6 > v11 )\n        goto LABEL_66;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_160;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_163;\n        goto LABEL_159;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_211;\n      if ( src == (_DWORD *)v5[1] )\n      {\n        v19 = src;\nLABEL_159:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *v5);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      v5[1] = (unsigned __int64)v19;\nLABEL_66:\n      v30 = *v5;\n      if ( *v5 <= v11 )\n      {\n        do\n          v19[8 * ++v30 - 8] = 0;\n        while ( v30 <= v11 );\n        *v5 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_132;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_71:\n      *(_BYTE *)(v12 + 72) = v13;\n      v32 = *v4;\n      *(_QWORD *)(v12 + 8) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > v32 + 1 )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( (v7 & 0x8000000000000000LL) == 0LL )\n      {\n        v33 = 2 * v7;\n        if ( 2 * v7 <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (void *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( (void *)v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)v5[1];\n              if ( src != v40 )\n                goto LABEL_162;\n              goto LABEL_165;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_211;\n            v34 = (void *)v91[1];\n            v8 = *v91;\n            if ( (void *)v82 != v34 )\n              goto LABEL_78;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_78:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_211:\n      v40 = (_DWORD *)v5[1];\nLABEL_161:\n      if ( src != v40 )\n      {\nLABEL_162:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_163:\n      v58 = (void *)v4[1];\n      if ( (void *)v82 != v58 )\n        free(v58);\nLABEL_165:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_131;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cd00L", 
            "funcEndAddr": "0x40da09L", 
            "funcName": "sub_40CD00"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x40da10L", 
            "funcEndAddr": "0x40da6dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x40da70L", 
            "funcEndAddr": "0x40da71L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40DA80(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_6142A8 )\n    v1 = (void *)unk_6142A8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x40da80L", 
            "funcEndAddr": "0x40da98L", 
            "funcName": "sub_40DA80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40DA98(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_613E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x40da98L", 
            "funcEndAddr": "0x40dab8L", 
            "funcName": "sub_40DA98"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dd.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 106, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}