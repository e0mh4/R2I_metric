{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char *v3; // rbx\n  char *v4; // rax\n  int v5; // eax\n  char *v6; // rax\n  char *v7; // rax\n  __int64 v8; // r14\n  __int64 v9; // rax\n  __int64 v10; // rdx\n  char v11; // dl\n  __int64 v12; // r13\n  char *v13; // rax\n  bool v14; // zf\n  const char *v15; // r14\n  const char *v16; // r13\n  __int64 v17; // r15\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  _BOOL4 v20; // eax\n  int v21; // eax\n  __int64 v22; // rax\n  __int64 v23; // rax\n  int i; // ebx\n  char *v25; // rdi\n  char *v26; // rcx\n  __ssize_t v27; // rax\n  char *v29; // rax\n  char v30; // r15\n  const char *v31; // rcx\n  size_t v32; // rax\n  char v33; // dl\n  int *v34; // rax\n  __int64 v35; // rax\n  char *v36; // r8\n  __int64 v37; // r9\n  size_t v38; // rax\n  __int64 v39; // rax\n  char *v40; // r13\n  char v41; // dl\n  __int64 v42; // rcx\n  char *v43; // rax\n  char *v44; // rax\n  char *v45; // rax\n  char *v46; // rbp\n  int *v47; // rax\n  char *v48; // rax\n  const char *v49; // r15\n  __int64 v50; // rax\n  const unsigned __int16 **v51; // rax\n  __int64 v52; // rcx\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rax\n  char *v58; // rax\n  char *v59; // rax\n  __int64 v60; // rbx\n  char *v61; // rax\n  __int64 v62; // rbx\n  char *v63; // rax\n  char *v64; // rax\n  char *v65; // rax\n  char *nptr; // [rsp+0h] [rbp-58h]\n  char *nptra; // [rsp+0h] [rbp-58h]\n  char *nptrb; // [rsp+0h] [rbp-58h]\n  __int64 v69; // [rsp+8h] [rbp-50h]\n  int *v70; // [rsp+8h] [rbp-50h]\n  __int64 v71; // [rsp+8h] [rbp-50h]\n  char *s; // [rsp+10h] [rbp-48h]\n  size_t n; // [rsp+18h] [rbp-40h]\n\n  sub_405970(*a2);\n  v3 = setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  v4 = nl_langinfo(0x10000);\n  s2 = v4;\n  if ( !v4 || !*v4 )\n    s2 = \".\";\n  dword_61033C = strlen(s2);\n  sub_409FA0(sub_405490);\n  while ( 1 )\n  {\n    v5 = sub_4096E0((unsigned int)a1, a2, \"d:z\", &off_40BD80, 0LL);\n    if ( v5 == -1 )\n      break;\n    if ( v5 == 132 )\n      goto LABEL_51;\n    if ( v5 <= 132 )\n    {\n      if ( v5 == 122 )\n      {\n        byte_610250 = 0;\n      }\n      else if ( v5 <= 122 )\n      {\n        if ( v5 == -130 )\n          sub_404360(0);\n        if ( v5 != 100 )\n        {\n          if ( v5 == -131 )\n          {\n            sub_407A10((char)stdout);\n            exit(0);\n          }\nLABEL_40:\n          sub_404360(1);\n        }\n        if ( *::nptr && ::nptr[1] )\n          goto LABEL_172;\n        dword_610254 = *::nptr;\n      }\n      else if ( v5 == 129 )\n      {\n        qword_610270 = sub_4029B0(::nptr);\n      }\n      else if ( v5 <= 129 )\n      {\n        if ( v5 != 128 )\n          goto LABEL_40;\n        HIDWORD(qword_6103AC) = dword_40C0D0[sub_4053B0(\"--from\", ::nptr, off_40C100, dword_40C0D0, 4LL, off_610288)];\n      }\n      else if ( v5 == 130 )\n      {\n        LODWORD(qword_6103AC) = dword_40C090[sub_4053B0(\"--to\", ::nptr, off_40C0A0, dword_40C090, 4LL, off_610288)];\n      }\n      else\n      {\n        qword_610268 = sub_4029B0(::nptr);\n      }\n    }\n    else\n    {\n      if ( v5 == 137 )\n        goto LABEL_42;\n      if ( v5 > 137 )\n      {\n        if ( v5 == 139 )\n        {\n          if ( ::nptr )\n          {\n            if ( (unsigned int)sub_408550(::nptr) || !qword_610350 )\n            {\n              v3 = (char *)sub_407590(::nptr);\n              v6 = dcgettext(0LL, \"invalid header value %s\", 5);\n              error(1, 0, v6, v3);\nLABEL_51:\n              dword_610278 = dword_40C030[sub_4053B0(\"--round\", ::nptr, off_40C060, dword_40C030, 4LL, off_610288)];\n            }\n          }\n          else\n          {\n            qword_610350 = 1LL;\n          }\n        }\n        else if ( v5 < 139 )\n        {\n          byte_610338 = 1;\nLABEL_42:\n          byte_610348 = 1;\n        }\n        else if ( v5 == 140 )\n        {\n          qword_610370 = (__int64)::nptr;\n        }\n        else\n        {\n          if ( v5 != 141 )\n            goto LABEL_40;\n          dword_6103A8 = dword_40BFE0[sub_4053B0(\"--invalid\", ::nptr, off_40C000, dword_40BFE0, 4LL, off_610288)];\n        }\n      }\n      else if ( v5 == 134 )\n      {\n        dword_610398 = 1;\n      }\n      else if ( v5 < 134 )\n      {\n        s1 = ::nptr;\n      }\n      else if ( v5 == 135 )\n      {\n        if ( (unsigned int)sub_407E00(::nptr) || !qword_610380 )\n          goto LABEL_170;\n        if ( qword_610380 < 0 )\n        {\n          dword_610258 = 0;\n          qword_610380 = -qword_610380;\n        }\n      }\n      else\n      {\n        if ( nmemb )\n          goto LABEL_171;\n        sub_404B00(::nptr, 1LL);\n      }\n    }\n  }\n  if ( qword_610370 && dword_610398 )\n    goto LABEL_164;\n  if ( !v3 && byte_610348 )\n  {\n    v44 = dcgettext(0LL, \"failed to set locale\", 5);\n    error(0, 0, v44);\n  }\n  if ( !byte_610348 || qword_6103AC )\n    goto LABEL_66;\n  v3 = (char *)qword_610370;\n  if ( dword_610398 )\n  {\n    if ( qword_610370 )\n      goto LABEL_67;\nLABEL_111:\n    if ( byte_610348 && !*nl_langinfo(65537) )\n    {\n      v29 = dcgettext(0LL, \"grouping has no effect in this locale\", 5);\n      error(0, 0, v29);\n    }\n    goto LABEL_83;\n  }\n  if ( qword_610380 )\n  {\n    if ( !qword_610370 )\n      goto LABEL_83;\n  }\n  else if ( !qword_610370 )\n  {\n    v7 = dcgettext(0LL, \"no conversion option specified\", 5);\n    error(0, 0, v7);\nLABEL_66:\n    v3 = (char *)qword_610370;\n    if ( !qword_610370 )\n      goto LABEL_82;\n  }\nLABEL_67:\n  n = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  while ( 2 )\n  {\n    v11 = v3[v9];\n    if ( v11 != 37 )\n    {\n      if ( v11 )\n      {\n        v10 = 1LL;\nLABEL_70:\n        v9 += v10;\n        ++v8;\n        continue;\n      }\n      v3 = (char *)sub_407590(v3);\n      v53 = dcgettext(0LL, \"format %s has no %% directive\", 5);\n      error(1, 0, v53, v3);\n      goto LABEL_163;\n    }\n    break;\n  }\n  v12 = v9 + 1;\n  if ( v3[v9 + 1] == 37 )\n  {\n    v10 = 2LL;\n    goto LABEL_70;\n  }\n  v30 = 0;\n  v31 = &v3[v12];\n  do\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        v32 = strspn(v31, \" \");\n        v12 += v32;\n        v31 = &v3[v12];\n        v33 = v3[v12];\n        if ( v33 != 39 )\n          break;\n        dword_610398 = 1;\n        v31 = &v3[++v12];\n      }\n      if ( v33 != 48 )\n        break;\n      ++v12;\n      v30 = 1;\n      v31 = &v3[v12];\n    }\n  }\n  while ( v32 );\n  v34 = __errno_location();\n  *v34 = 0;\n  v70 = v34;\n  v35 = strtol(&v3[v12], (char **)&n, 10);\n  v36 = (char *)v70;\n  v37 = v35;\n  if ( *v70 == 34 )\n  {\nLABEL_163:\n    v3 = (char *)sub_407590(v3);\n    v54 = dcgettext(0LL, \"invalid format %s (width overflow)\", 5);\n    error(1, 0, v54, v3);\nLABEL_164:\n    v55 = dcgettext(0LL, \"--grouping cannot be combined with --format\", 5);\n    error(1, 0, v55);\nLABEL_165:\n    v56 = dcgettext(0LL, \"grouping cannot be combined with --to\", 5);\n    error(1, 0, v56);\nLABEL_166:\n    v3 = (char *)sub_407590(v3);\n    v57 = dcgettext(0LL, \"format %s has too many %% directives\", 5);\n    error(1, 0, v57, v3);\n    goto LABEL_167;\n  }\n  if ( (char *)n != &v3[v12] && v35 )\n  {\n    if ( byte_610348 && qword_610380 )\n    {\n      if ( v30 && v35 > 0 )\n      {\nLABEL_125:\n        qword_610378 = v37;\n        goto LABEL_126;\n      }\n      nptra = (char *)v70;\n      v71 = v35;\n      v48 = dcgettext(0LL, \"--format padding overriding --padding\", 5);\n      error(0, 0, v48);\n      v37 = v71;\n      v36 = nptra;\n    }\n    if ( v37 < 0 )\n    {\n      dword_610258 = 0;\n      qword_610380 = -v37;\n    }\n    else\n    {\n      if ( v30 )\n        goto LABEL_125;\n      qword_610380 = v37;\n    }\n  }\nLABEL_126:\n  v38 = n - (_QWORD)v3;\n  if ( !*(_BYTE *)n )\n    goto LABEL_168;\n  if ( *(_BYTE *)n != 46 )\n    goto LABEL_128;\n  *(_DWORD *)v36 = 0;\n  v49 = &v3[v38 + 1];\n  nptrb = v36;\n  v50 = strtol(v49, (char **)&n, 10);\n  qword_610260 = v50;\n  if ( *(_DWORD *)nptrb == 34 || v50 < 0 || (v51 = __ctype_b_loc(), v52 = *v49, (*v51)[v52] & 1) || (_BYTE)v52 == 43 )\n  {\nLABEL_169:\n    v60 = sub_407590(v3);\n    v61 = dcgettext(0LL, \"invalid precision in format %s\", 5);\n    error(1, 0, v61, v60);\nLABEL_170:\n    v62 = sub_407590(::nptr);\n    v63 = dcgettext(0LL, \"invalid padding value %s\", 5);\n    error(1, 0, v63, v62);\nLABEL_171:\n    v64 = dcgettext(0LL, \"multiple field specifications\", 5);\n    error(1, 0, v64);\nLABEL_172:\n    v65 = dcgettext(0LL, \"the delimiter must be a single character\", 5);\n    error(1, 0, v65);\n    start();\n  }\n  v38 = n - (_QWORD)v3;\nLABEL_128:\n  if ( v3[v38] != 102 )\n  {\nLABEL_167:\n    v3 = (char *)sub_407590(v3);\n    v58 = dcgettext(0LL, \"invalid format %s, directive must be %%[0]['][-][N][.][N]f\", 5);\n    error(1, 0, v58, v3);\nLABEL_168:\n    v3 = (char *)sub_407590(v3);\n    v59 = dcgettext(0LL, \"format %s ends in %%\", 5);\n    error(1, 0, v59, v3);\n    goto LABEL_169;\n  }\n  v39 = v38 + 1;\n  v40 = &v3[v39];\n  v41 = v3[v39];\n  if ( v41 )\n  {\n    do\n    {\n      v42 = v39 + 1;\n      if ( v41 == 37 )\n      {\n        if ( v3[v39 + 1] != 37 )\n          goto LABEL_166;\n        v42 = v39 + 2;\n        v41 = v3[v39 + 2];\n      }\n      else\n      {\n        v41 = v3[v39 + 1];\n      }\n      v39 = v42;\n    }\n    while ( v41 );\n    if ( v8 )\n    {\nLABEL_75:\n      v13 = (char *)sub_407DE0(v3, v8);\n      v14 = *v40 == 0;\n      qword_610368 = v13;\n      if ( v14 )\n        goto LABEL_76;\n    }\n    qword_610360 = (char *)sub_407D80(v40);\n    goto LABEL_76;\n  }\n  if ( v8 )\n    goto LABEL_75;\nLABEL_76:\n  if ( byte_610338 )\n  {\n    v69 = sub_407570(2LL);\n    v15 = \"Left\";\n    v16 = \"yes\";\n    v17 = sub_407570(1LL);\n    if ( dword_610258 )\n      v15 = \"Right\";\n    nptr = (char *)qword_610380;\n    if ( !dword_610398 )\n      v16 = \"no\";\n    v18 = sub_407570(0LL);\n    __fprintf_chk(\n      stderr,\n      1LL,\n      \"format String:\\n  input: %s\\n  grouping: %s\\n  padding width: %ld\\n  alignment: %s\\n  prefix: %s\\n  suffix: %s\\n\",\n      v18,\n      v16,\n      nptr,\n      v15,\n      v17,\n      v69,\n      v19);\n  }\nLABEL_82:\n  if ( dword_610398 )\n  {\n    if ( !(_DWORD)qword_6103AC )\n      goto LABEL_111;\n    goto LABEL_165;\n  }\nLABEL_83:\n  if ( qword_610380 >= (unsigned __int64)qword_610388 )\n    sub_402BD0();\n  v20 = 0;\n  if ( !qword_610380 )\n    v20 = dword_610254 == 128;\n  dword_610358 = v20;\n  if ( dword_6103A8 )\n    status = 0;\n  v21 = dword_6102FC;\n  if ( dword_6102FC < a1 )\n  {\n    if ( !byte_610348\n      || !qword_610350\n      || (v45 = dcgettext(0LL, \"--header ignored with command-line input\", 5),\n          error(0, 0, v45),\n          v21 = dword_6102FC,\n          a1 > dword_6102FC) )\n    {\n      i = 1;\n      do\n      {\n        i &= sub_4041A0(a2[v21]);\n        v21 = dword_6102FC + 1;\n        dword_6102FC = v21;\n      }\n      while ( v21 < a1 );\n      goto LABEL_101;\n    }\n    return 0LL;\n  }\n  v22 = qword_610350;\n  s = 0LL;\n  n = 0LL;\n  --qword_610350;\n  if ( v22 )\n  {\n    do\n    {\n      if ( getdelim(&s, &n, (unsigned __int8)byte_610250, stdin) <= 0 )\n        break;\n      fputs_unlocked(s, stdout);\n      v23 = qword_610350--;\n    }\n    while ( v23 );\n  }\n  for ( i = 1; ; i &= sub_4041A0(v25) )\n  {\n    v27 = getdelim(&s, &n, (unsigned __int8)byte_610250, stdin);\n    if ( v27 <= 0 )\n      break;\n    v25 = s;\n    v26 = &s[v27 - 1];\n    if ( *v26 == (unsigned __int8)byte_610250 )\n    {\n      *v26 = 0;\n      v25 = s;\n    }\n  }\n  if ( stdin->_flags & 0x20 )\n  {\n    v46 = dcgettext(0LL, \"error reading input\", 5);\n    v47 = __errno_location();\n    error(0, *v47, v46);\n  }\nLABEL_101:\n  if ( !byte_610348 )\n  {\n    if ( !i )\n      goto LABEL_139;\n    return 0LL;\n  }\n  if ( i )\n    return 0LL;\n  v43 = dcgettext(0LL, \"failed to convert some of the input numbers\", 5);\n  error(0, 0, v43);\nLABEL_139:\n  if ( (unsigned int)(dword_6103A8 - 2) <= 1 )\n    return 0LL;\n  return 2LL;\n}\n", 
            "funcStartAddr": "0x401b60L", 
            "funcEndAddr": "0x4028d0L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x4028d0L", 
            "funcEndAddr": "0x4028fbL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4028FB()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4028fbL", 
            "funcEndAddr": "0x40291aL", 
            "funcName": "sub_4028FB"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40291A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40291aL", 
            "funcEndAddr": "0x402951L", 
            "funcName": "sub_40291A"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402951()\n{\n  __int64 *result; // rax\n\n  if ( !byte_610328 )\n  {\n    while ( qword_610330 < (unsigned __int64)(&qword_60FE48 - qword_60FE40 - 1) )\n      ((void (*)(void))qword_60FE40[++qword_610330])();\n    result = sub_4028FB();\n    byte_610328 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402951L", 
            "funcEndAddr": "0x4029a8L", 
            "funcName": "sub_402951"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4029A8()\n{\n  return sub_40291A();\n}\n", 
            "funcStartAddr": "0x4029a8L", 
            "funcEndAddr": "0x4029adL", 
            "funcName": "sub_4029A8"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4029B0(char *nptr)\n{\n  size_t v1; // rax\n  size_t v2; // rbx\n  __int64 v3; // r12\n  char *v4; // r9\n  char *v5; // r12\n  __int64 result; // rax\n  char *v7; // rax\n  char *v8; // r12\n  __int64 v9; // rbx\n  char *v10; // rax\n  char *v11; // [rsp+0h] [rbp-28h]\n  __int64 v12; // [rsp+8h] [rbp-20h]\n\n  v1 = strlen(nptr);\n  v11 = 0LL;\n  if ( v1 && (v2 = v1, v3 = v1 - 1, (unsigned int)(nptr[v1 - 1] - 48) > 9) )\n  {\n    v7 = (char *)sub_407B50(v1 + 2);\n    v8 = &v7[v3];\n    v11 = v8;\n    v4 = (char *)memcpy(v7, nptr, v2);\n    if ( *v8 != 105 || v2 == 1 || (unsigned int)(*(v8 - 1) - 48) <= 9 )\n    {\n      v11 = v8 + 2;\n      *(_WORD *)(v8 + 1) = 66;\n      v5 = v4;\n    }\n    else\n    {\n      *v8 = 0;\n      v5 = v4;\n    }\n  }\n  else\n  {\n    v4 = nptr;\n    v5 = 0LL;\n  }\n  if ( (unsigned int)sub_408550(v4) || *v11 || !v12 )\n  {\n    free(v5);\n    v9 = sub_407590(nptr);\n    v10 = dcgettext(0LL, \"invalid unit size: %s\", 5);\n    error(1, 0, v10, v9);\n    result = sub_402AF0();\n  }\n  else\n  {\n    free(v5);\n    result = v12;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4029b0L", 
            "funcEndAddr": "0x402af0L", 
            "funcName": "sub_4029B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402AF0(const char **a1, long double *a2, _BYTE *a3)\n{\n  _BYTE *v3; // rbx\n  const char *v4; // rcx\n  unsigned int v5; // edx\n  const char *v6; // rcx\n  __int64 result; // rax\n  unsigned int v8; // er8\n  long double v9; // fst7\n  int v10; // edx\n  int v11; // edx\n\n  v3 = a3;\n  v4 = *a1;\n  if ( *a1 )\n  {\n    v5 = *v4 - 48;\n    if ( v5 <= 9 )\n    {\n      v6 = v4 + 1;\n      result = 0LL;\n      v8 = 0;\n      v9 = 0.0;\n      while ( 1 )\n      {\n        if ( 0.0 != v9 || v5 )\n          ++v8;\n        if ( v8 > 0x12 )\n        {\n          if ( v8 > 0x1B )\n            return 2LL;\n          result = 1LL;\n        }\n        *a1 = v6;\n        v9 = v9 * 10.0 + (long double)(int)v5;\n        if ( v6 )\n        {\n          v10 = *v6++;\n          v5 = v10 - 48;\n          if ( v5 <= 9 )\n            continue;\n        }\n        goto LABEL_14;\n      }\n    }\n  }\n  v11 = strncmp(*a1, s2, dword_61033C);\n  result = 3LL;\n  if ( !v11 )\n  {\n    result = 0LL;\n    v9 = 0.0;\nLABEL_14:\n    if ( *v3 )\n      v9 = -v9;\n    *a2 = v9;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402af0L", 
            "funcEndAddr": "0x402bc9L", 
            "funcName": "sub_402AF0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_402BD0(__int64 a1)\n{\n  char *result; // rax\n\n  qword_610388 = a1 + 1;\n  result = (char *)sub_407BB0(dest);\n  dest = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x402bd0L", 
            "funcEndAddr": "0x402bf7L", 
            "funcName": "sub_402BD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402C00(char *s, unsigned __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  char *v6; // r12\n  unsigned __int64 *v7; // rax\n  unsigned int v8; // ebx\n  const char *v10; // r13\n  size_t v11; // rbx\n  size_t v12; // rax\n  const char *v13; // rbx\n  int v14; // eax\n  char v15; // dl\n  __int64 v16; // rbx\n  char *v17; // r13\n  const unsigned __int16 *v18; // rax\n  int v19; // eax\n  unsigned int v20; // ebx\n  char v21; // dl\n  char *v22; // rax\n  __int128 *v23; // rbp\n  __int64 v24; // r8\n  __int64 v25; // r15\n  char *v26; // r14\n  int v27; // eax\n  __int64 v28; // r9\n  unsigned __int64 v29; // r14\n  char *v30; // r15\n  const unsigned __int16 **v31; // rax\n  char v32; // dl\n  const unsigned __int16 *v33; // rsi\n  char *v34; // rax\n  char *v35; // r15\n  char v36; // dl\n  int v37; // eax\n  __int64 v38; // r15\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r14\n  __int64 v42; // rax\n  char *v43; // r14\n  unsigned int v44; // eax\n  int v45; // eax\n  unsigned __int64 v46; // rax\n  __int64 v47; // rbx\n  char *v48; // rax\n  unsigned int v52; // eax\n  char *v53; // rax\n  unsigned int v54; // ebp\n  char *v55; // r12\n  int v56; // er13\n  __int64 v57; // r9\n  char v58; // cl\n  unsigned int v59; // er13\n  __int64 v60; // rax\n  int v61; // edi\n  int v62; // eax\n  int v63; // edx\n  __int16 v64; // dx\n  __int64 v65; // rcx\n  __int64 v66; // r9\n  const char *v67; // rbx\n  __int64 v68; // r13\n  char *v69; // rax\n  int v70; // eax\n  int v71; // edx\n  __int16 v72; // dx\n  __int64 v73; // rax\n  __int64 v74; // r8\n  __int64 v75; // r9\n  int v76; // ebx\n  char *v77; // rax\n  const char *v78; // rdx\n  char v79; // bl\n  char *v80; // rsi\n  __int128 *v81; // rdx\n  int v82; // ecx\n  unsigned int v83; // eax\n  __int64 v84; // rax\n  __int64 v85; // r8\n  __int64 v86; // r9\n  unsigned __int64 v87; // rcx\n  FILE *v88; // rsi\n  bool v89; // pf\n  __int64 v91; // r9\n  unsigned int v92; // eax\n  __int16 v93; // ax\n  __int64 v94; // rax\n  __int64 v95; // r8\n  __int64 v96; // r9\n  __int16 v97; // ax\n  __int64 v98; // rax\n  __int64 v99; // r8\n  __int64 v100; // r9\n  char *v101; // rax\n  char *v102; // rax\n  char *v103; // rax\n  long double v107; // [rsp+10h] [rbp-178h]\n  long double v111; // [rsp+10h] [rbp-178h]\n  int v118; // [rsp+20h] [rbp-168h]\n  int v119; // [rsp+20h] [rbp-168h]\n  __int64 v127; // [rsp+20h] [rbp-168h]\n  __int64 v128; // [rsp+20h] [rbp-168h]\n  __int64 v129; // [rsp+20h] [rbp-168h]\n  __int64 v130; // [rsp+20h] [rbp-168h]\n  int v138; // [rsp+30h] [rbp-158h]\n  unsigned int v139; // [rsp+30h] [rbp-158h]\n  __int64 v140; // [rsp+30h] [rbp-158h]\n  __int64 v141; // [rsp+30h] [rbp-158h]\n  __int64 v142; // [rsp+30h] [rbp-158h]\n  unsigned int v150; // [rsp+30h] [rbp-158h]\n  unsigned int v152; // [rsp+30h] [rbp-158h]\n  char v154; // [rsp+40h] [rbp-148h]\n  char v155; // [rsp+40h] [rbp-148h]\n  int v156; // [rsp+40h] [rbp-148h]\n  __int64 v158; // [rsp+40h] [rbp-148h]\n  __int64 v159; // [rsp+40h] [rbp-148h]\n  __int64 v160; // [rsp+40h] [rbp-148h]\n  __int64 v161; // [rsp+40h] [rbp-148h]\n  __int64 v172; // [rsp+60h] [rbp-128h]\n  __int64 v173; // [rsp+60h] [rbp-128h]\n  __int16 v174; // [rsp+6Ch] [rbp-11Ch]\n  __int16 v175; // [rsp+6Ch] [rbp-11Ch]\n  __int16 v176; // [rsp+6Eh] [rbp-11Ah]\n  unsigned __int16 v177; // [rsp+6Eh] [rbp-11Ah]\n  char v178; // [rsp+7Eh] [rbp-10Ah]\n  char v179; // [rsp+7Fh] [rbp-109h]\n  char *s1; // [rsp+80h] [rbp-108h]\n  char *v181; // [rsp+88h] [rbp-100h]\n  __int128 v182; // [rsp+90h] [rbp-F8h]\n  __int128 src; // [rsp+D0h] [rbp-B8h]\n\n  v6 = s;\n  v7 = (unsigned __int64 *)ptr;\n  if ( ptr )\n  {\n    while ( *v7 != -1LL )\n    {\n      if ( a2 >= *v7 && a2 <= v7[1] )\n        goto LABEL_10;\n      v7 += 2;\n    }\nLABEL_7:\n    v8 = 1;\n    fputs_unlocked(s, stdout);\n    return v8;\n  }\n  if ( a2 != 1 )\n    goto LABEL_7;\nLABEL_10:\n  v10 = ::s1;\n  if ( ::s1 )\n  {\n    v11 = strlen(s);\n    v12 = strlen(v10);\n    if ( v11 > v12 )\n    {\n      v13 = &s[v11 - v12];\n      v14 = strcmp(v10, v13);\n      v15 = byte_610338;\n      if ( v14 )\n      {\n        if ( byte_610338 )\n          fwrite(\"no valid suffix found\\n\", 1uLL, 0x16uLL, stderr);\n      }\n      else\n      {\n        *v13 = 0;\n        if ( v15 )\n        {\n          v73 = sub_407590(v10);\n          __fprintf_chk(stderr, 1LL, \"trimming suffix %s\\n\", v73, v74, v75);\n        }\n      }\n    }\n  }\n  v16 = (unsigned __int8)*s;\n  if ( (_BYTE)v16 )\n  {\n    v17 = s;\n    v18 = *__ctype_b_loc();\n    do\n    {\n      if ( !(v18[v16] & 1) )\n        break;\n      v16 = (unsigned __int8)*++v17;\n    }\n    while ( (_BYTE)v16 );\n    v19 = (_DWORD)s - (_DWORD)v17;\n  }\n  else\n  {\n    v17 = s;\n    v19 = 0;\n  }\n  if ( dword_610358 )\n  {\n    if ( v19 || (__int64)a2 > 1 )\n    {\n      v46 = strlen(s);\n      qword_610380 = v46;\n      if ( v46 >= qword_610388 )\n        sub_402BD0(v46);\n    }\n    else\n    {\n      qword_610380 = 0LL;\n    }\n    if ( !byte_610338 )\n    {\n      v118 = 0;\n      __asm { fld     dword ptr [rsp+168h+var_168] }\n      v138 = HIDWORD(qword_6103AC);\n      __asm { fstp    [rsp+168h+var_F8] }\n      v20 = (unsigned int)(HIDWORD(qword_6103AC) - 3) < 2 ? 1024 : 1000;\n      goto LABEL_26;\n    }\n    __fprintf_chk(stderr, 1LL, \"setting Auto-Padding to %ld characters\\n\", qword_610380, a5, a6);\n  }\n  s1 = 0LL;\n  v119 = 0;\n  __asm { fld     dword ptr [rsp+168h+var_168] }\n  v138 = HIDWORD(qword_6103AC);\n  __asm { fstp    [rsp+168h+var_F8] }\n  v20 = (unsigned int)(HIDWORD(qword_6103AC) - 3) < 2 ? 1024 : 1000;\n  if ( byte_610338 )\n  {\n    v41 = sub_407570(1LL);\n    v42 = sub_407570(0LL);\n    __fprintf_chk(\n      stderr,\n      1LL,\n      \"simple_strtod_human:\\n  input string: %s\\n  locale decimal-point: %s\\n  MAX_UNSCALED_DIGITS: %d\\n\",\n      v42,\n      v41,\n      18LL);\n  }\nLABEL_26:\n  v21 = 0;\n  v22 = v17;\n  if ( *v17 == 45 )\n  {\n    v22 = v17 + 1;\n    v21 = 1;\n  }\n  v178 = v21;\n  s1 = v22;\n  LODWORD(v23) = sub_402AF0((const char **)&s1, (long double *)&v182, &v178);\n  if ( (unsigned int)v23 > 1 )\n    goto LABEL_88;\n  v25 = dword_61033C;\n  v26 = s1;\n  v27 = strncmp(s1, s2, dword_61033C);\n  if ( v27 )\n  {\n    v29 = 0LL;\n    goto LABEL_31;\n  }\n  __asm { fld     dword ptr [rsp+168h+var_168] }\n  v43 = &v26[v25];\n  s1 = v43;\n  __asm { fstp    tbyte ptr [rsp+168h+src] }\n  if ( *v43 == 45 )\n  {\n    ++v43;\n    LOBYTE(v27) = 1;\n  }\n  v179 = v27;\n  v181 = v43;\n  v44 = sub_402AF0((const char **)&v181, (long double *)&src, &v179);\n  if ( v44 > 1 )\n  {\n    LODWORD(v23) = v44;\nLABEL_88:\n    switch ( (_DWORD)v23 )\n    {\n      case 2:\n        v29 = 0LL;\n        v67 = \"value too large to be converted: %s\";\n        break;\n      case 3:\n        goto LABEL_159;\n      case 4:\n        v29 = 0LL;\n        v67 = \"rejecting suffix in input: %s (consider using --from)\";\n        break;\n      case 5:\n        v29 = 0LL;\n        v67 = \"invalid suffix in input: %s\";\n        break;\n      case 6:\n        v29 = 0LL;\n        v67 = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n        break;\n      default:\n        v29 = 0LL;\n        v67 = 0LL;\n        break;\n    }\n    goto LABEL_137;\n  }\n  if ( v44 == 1 )\n    LODWORD(v23) = 1;\n  if ( v179 )\n  {\nLABEL_159:\n    v29 = 0LL;\n    LODWORD(v23) = 3;\n    v67 = \"invalid number: %s\";\n    goto LABEL_137;\n  }\n  __asm { fld     tbyte ptr [rsp+168h+src] }\n  v29 = v181 - s1;\n  if ( (_DWORD)v181 != (_DWORD)s1 )\n  {\n    v45 = v29 - 1;\n    if ( (_DWORD)v29 == 1 )\n    {\n      __asm { fdiv    cs:flt_40C130 }\n    }\n    else\n    {\n      __asm\n      {\n        fld     cs:flt_40C130\n        fld     st\n      }\n      do\n      {\n        __asm { fmul    st, st(1) }\n        --v45;\n      }\n      while ( v45 );\n      __asm\n      {\n        fstp    st(1)\n        fdivp   st(1), st\n      }\n    }\n  }\n  __asm { fld     [rsp+168h+var_F8] }\n  if ( v178 )\n    __asm { fsubrp  st(1), st }\n  else\n    __asm { faddp   st(1), st }\n  __asm { fstp    [rsp+168h+var_F8] }\n  s1 = v181;\nLABEL_31:\n  if ( byte_610338 )\n    __fprintf_chk(stderr, 1LL, \"  parsed numeric value: %Lf\\n  input precision = %d\\n\", (unsigned int)v29, v24, v28);\n  v30 = s1;\n  v154 = *s1;\n  if ( !*s1 )\n  {\n    if ( v138 != 4 )\n    {\n      v36 = byte_610338;\n      v24 = 0LL;\n      __asm { fld1 }\n      goto LABEL_48;\n    }\n    LODWORD(v23) = 6;\n    v67 = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n    goto LABEL_137;\n  }\n  v31 = __ctype_b_loc();\n  v32 = v154;\n  v33 = *v31;\n  v34 = v30;\n  while ( 1 )\n  {\n    v35 = v34++;\n    if ( !(v33[(unsigned __int8)v32] & 1) )\n      break;\n    s1 = v34;\n    v32 = v35[1];\n  }\n  v155 = v32;\n  if ( !strchr(\"KMGTPEZY\", v32) )\n  {\n    LODWORD(v23) = 5;\n    v67 = \"invalid suffix in input: %s\";\n    goto LABEL_137;\n  }\n  if ( !v138 )\n  {\n    LODWORD(v23) = 4;\n    v67 = \"rejecting suffix in input: %s (consider using --from)\";\n    goto LABEL_137;\n  }\n  v24 = 0LL;\n  if ( (unsigned __int8)(v155 - 69) <= 0x15u )\n    v24 = (unsigned int)dword_40BD20[(unsigned __int8)(v155 - 69)];\n  s1 = v35 + 1;\n  if ( v138 == 1 )\n  {\n    v36 = byte_610338;\n    if ( v35[1] == 105 )\n    {\n      s1 = v35 + 2;\n      if ( byte_610338 )\n      {\n        v152 = v24;\n        v20 = 1024;\n        __fprintf_chk(stderr, 1LL, \"  Auto-scaling, found 'i', switching to base %d\\n\", 1024LL, v24, v28);\n        v24 = v152;\n        v36 = byte_610338;\n        __asm { fld     cs:flt_40C134 }\n      }\n      else\n      {\n        __asm { fld     cs:flt_40C134 }\n        v20 = 1024;\n      }\n    }\n    else\n    {\n      v150 = v20;\n      __asm { fild    dword ptr [rsp+168h+var_158] }\n    }\n    goto LABEL_44;\n  }\n  if ( v138 == 4 )\n  {\n    if ( v35[1] == 105 )\n    {\n      s1 = v35 + 2;\n      goto LABEL_43;\n    }\n    v29 = 0LL;\n    LODWORD(v23) = 6;\n    v67 = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\nLABEL_137:\n    if ( dword_6103A8 != 3 )\n    {\n      v68 = sub_407590(v17);\n      v69 = dcgettext(0LL, v67, 5);\n      error(status, 0, v69, v68);\n    }\n    goto LABEL_55;\n  }\nLABEL_43:\n  v139 = v20;\n  __asm { fild    dword ptr [rsp+168h+var_158] }\n  v36 = byte_610338;\nLABEL_44:\n  if ( !(_DWORD)v24 )\n    goto LABEL_289;\n  __asm { fld     st }\n  v37 = v24 - 1;\n  if ( (_DWORD)v24 == 1 )\n  {\n    __asm { fstp    st(1) }\n    v29 = 0LL;\n    v24 = 1LL;\n  }\n  else\n  {\n    do\n    {\n      __asm { fmul    st, st(1) }\n      --v37;\n    }\n    while ( v37 );\n    __asm { fstp    st(1) }\n    v29 = 0LL;\n  }\n  while ( 1 )\n  {\nLABEL_48:\n    if ( v36 )\n    {\n      __asm\n      {\n        fld     st\n        fstp    tbyte ptr [rsp+178h+var_178]\n        fstp    tbyte ptr [rsp+178h+var_158]\n      }\n      __fprintf_chk(stderr, 1LL, \"  suffix power=%d^%d = %Lf\\n\", v20, v24, v28);\n      __asm\n      {\n        fld     [rsp+178h+var_F8]\n        fld     tbyte ptr [rsp+178h+var_158]\n        fmulp   st(1), st\n        fld     st\n        fstp    [rsp+178h+var_F8]\n      }\n      v66 = *(_QWORD *)&v107;\n      if ( byte_610338 )\n      {\n        __asm\n        {\n          fld     st\n          fstp    tbyte ptr [rsp+188h+var_178]\n          fstp    [rsp+188h+var_188]\n        }\n        __fprintf_chk(stderr, 1LL, \"  returning value: %Lf (%LG)\\n\", v65, v24, v66);\n      }\n      else\n      {\n        __asm { fstp    st }\n      }\n    }\n    else\n    {\n      __asm\n      {\n        fld     [rsp+168h+var_F8]\n        fmulp   st(1), st\n        fstp    [rsp+168h+var_F8]\n      }\n    }\n    if ( s1 && *s1 )\n    {\n      LODWORD(v23) = 5;\n      if ( dword_6103A8 != 3 )\n      {\n        v38 = sub_407570(1LL);\n        v39 = sub_407570(0LL);\n        v40 = dcgettext(0LL, \"invalid suffix in input %s: %s\", 5);\n        error(status, 0, v40, v39, v38);\n      }\n    }\n    else if ( (_DWORD)v23 == 1 && byte_610348 )\n    {\n      v47 = sub_407590(v17);\n      v48 = dcgettext(0LL, \"large input value %s: possible precision loss\", 5);\n      error(0, 0, v48, v47);\n    }\nLABEL_55:\n    __asm { fld     [rsp+168h+var_F8] }\n    if ( qword_610270 != 1 || qword_610268 != 1 )\n    {\n      v140 = qword_610270;\n      __asm { fild    [rsp+168h+var_158] }\n      if ( qword_610270 < 0 )\n        __asm { fadd    cs:flt_40C138 }\n      __asm { fmulp   st(1), st }\n      v141 = qword_610268;\n      __asm { fild    [rsp+168h+var_158] }\n      if ( qword_610268 < 0 )\n        __asm { fadd    cs:flt_40C138 }\n      __asm { fdivp   st(1), st }\n    }\n    if ( (unsigned int)v23 > 1 )\n    {\n      __asm { fstp    st }\nLABEL_64:\n      v8 = 0;\n      fputs_unlocked(v6, stdout);\n      return v8;\n    }\n    __asm\n    {\n      fld     cs:tbyte_40C150\n      fxch    st(1)\n    }\n    if ( qword_610260 != -1 )\n      v29 = qword_610260;\n    __asm\n    {\n      fcomi   st, st(1)\n      fstp    st(1)\n    }\n    if ( _CF )\n      goto LABEL_300;\n    __asm\n    {\n      fld     cs:tbyte_40C160\n      fcomip  st, st(1)\n    }\n    if ( _CF )\n    {\nLABEL_300:\n      v20 = qword_6103AC;\n      if ( !(_DWORD)qword_6103AC && v29 > 0x12 )\n      {\nLABEL_156:\n        if ( dword_6103A8 == 3 )\n        {\n          __asm { fstp    st }\n        }\n        else\n        {\n          v76 = status;\n          __asm { fstp    tbyte ptr [rsp+168h+var_168] }\n          if ( v29 )\n          {\n            v77 = dcgettext(0LL, \"value/precision too large to be printed: '%Lg/%lu' (consider using --to)\", 5);\n            __asm\n            {\n              fld     tbyte ptr [rsp+168h+var_168]\n              fstp    tbyte ptr [rsp+178h+var_178]\n            }\n            error(v76, 0, v77, v29);\n          }\n          else\n          {\n            v101 = dcgettext(0LL, \"value too large to be printed: '%Lg' (consider using --to)\", 5);\n            __asm\n            {\n              fld     tbyte ptr [rsp+168h+var_168]\n              fstp    tbyte ptr [rsp+178h+var_178]\n            }\n            error(v76, 0, v101);\n          }\n        }\n        goto LABEL_64;\n      }\n    }\n    else\n    {\n      __asm { fld     st }\n      v52 = 0;\n      __asm { fld     cs:flt_40C130 }\n      while ( 1 )\n      {\n        __asm\n        {\n          fldz\n          fld     st(2)\n          fchs\n          fxch    st(1)\n          fcomip  st, st(3)\n          fcmovbe st, st(2)\n          fld     st(1)\n          fxch    st(1)\n          fcomip  st, st(1)\n        }\n        if ( _CF )\n          break;\n        __asm { fdivp   st(2), st }\n        ++v52;\n      }\n      __asm\n      {\n        fstp    st\n        fstp    st\n        fstp    st\n      }\n      v20 = qword_6103AC;\n      if ( !(_DWORD)qword_6103AC && v29 + v52 > 0x12 )\n        goto LABEL_156;\n      if ( v52 > 0x1A )\n      {\n        __asm { fstp    tbyte ptr [rsp+168h+var_168] }\n        if ( dword_6103A8 != 3 )\n        {\n          v53 = dcgettext(0LL, \"value too large to be printed: '%Lg' (cannot handle values > 999Y)\", 5);\n          __asm\n          {\n            fld     tbyte ptr [rsp+168h+var_168]\n            fstp    tbyte ptr [rsp+178h+var_178]\n          }\n          error(status, 0, v53);\n        }\n        goto LABEL_64;\n      }\n    }\n    v54 = dword_610278;\n    LOBYTE(v182) = 37;\n    v55 = (char *)&v182 + 1;\n    v56 = dword_610398;\n    if ( dword_610398 )\n    {\n      BYTE1(v182) = 39;\n      v55 = (char *)&v182 + 2;\n    }\n    v57 = qword_610378;\n    if ( qword_610378 )\n    {\n      __asm\n      {\n        fstp    tbyte ptr [rsp+168h+var_158]\n        fld     tbyte ptr [rsp+168h+var_158]\n      }\n      v55 += (int)__snprintf_chk(v55, 62LL, 1LL, 63LL, \"0%ld\");\n    }\n    v58 = byte_610338;\n    if ( byte_610338 )\n    {\n      __asm { fstp    tbyte ptr [rsp+168h+var_158] }\n      fwrite(\"double_to_human:\\n\", 1uLL, 0x11uLL, stderr);\n      v58 = byte_610338;\n      __asm { fld     tbyte ptr [rsp+168h+var_158] }\n    }\n    if ( v20 )\n      break;\n    if ( (_DWORD)v29 )\n    {\n      v70 = v29 - 1;\n      if ( (_DWORD)v29 == 1 )\n      {\n        __asm\n        {\n          fnstcw  [rsp+168h+var_11A]\n          fld     cs:tbyte_40C170\n        }\n        v70 = v177;\n        __asm\n        {\n          fld     st(1)\n          fmul    cs:flt_40C130\n        }\n        BYTE1(v70) |= 0xCu;\n        v175 = v70;\n        __asm\n        {\n          fld     st\n          fdiv    st, st(2)\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_158]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_158]\n          fmulp   st(2), st\n          fsub    st, st(1)\n        }\n        if ( v54 > 4 )\n        {\n          __asm\n          {\n            fstp    st\n            fstp    st\n            fldz\n          }\n          goto LABEL_166;\n        }\n        __asm { fxch    st(1) }\n      }\n      else\n      {\n        __asm { fld     cs:flt_40C130 }\n        v71 = v29 - 1;\n        __asm { fld     st }\n        do\n        {\n          __asm { fmul    st, st(1) }\n          --v71;\n        }\n        while ( v71 );\n        __asm\n        {\n          fnstcw  [rsp+168h+var_11A]\n          fmul    st, st(2)\n          fld     cs:tbyte_40C170\n        }\n        LOBYTE(v72) = v177;\n        __asm { fld     st(1) }\n        HIBYTE(v72) = HIBYTE(v177) | 0xC;\n        __asm { fdiv    st, st(1) }\n        v175 = v72;\n        __asm\n        {\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_158]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_158]\n          fmulp   st(1), st\n          fsub    st(1), st\n          fstp    st(2)\n          fxch    st(1)\n        }\n      }\n    }\n    else\n    {\n      __asm\n      {\n        fnstcw  [rsp+168h+var_11A]\n        fld     cs:tbyte_40C170\n      }\n      v70 = v177;\n      __asm\n      {\n        fld     st(1)\n        fdiv    st, st(1)\n      }\n      BYTE1(v70) |= 0xCu;\n      v175 = v70;\n      __asm\n      {\n        fldcw   [rsp+168h+var_11C]\n        fistp   [rsp+168h+var_158]\n        fldcw   [rsp+168h+var_11A]\n        fild    [rsp+168h+var_158]\n        fmulp   st(1), st\n        fld     st(1)\n        fsub    st, st(1)\n      }\n      if ( v54 > 4 )\n      {\n        __asm\n        {\n          fstp    st\n          fstp    st\n          fldz\n        }\n        goto LABEL_166;\n      }\n      __asm { fxch    st(1) }\n    }\n    switch ( v54 )\n    {\n      case 0u:\n        __asm\n        {\n          fxch    st(1); jumptable 00000000004035CD case 0\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_168]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_168]\n          fxch    st(1)\n          fcomip  st, st(1)\n        }\n        if ( _CF | _ZF )\n          goto LABEL_161;\n        __asm { fstp    st }\n        goto LABEL_196;\n      case 1u:\n        __asm\n        {\n          fxch    st(1); jumptable 00000000004035CD case 1\n          fchs\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_128]\n          fldcw   [rsp+168h+var_11A]\n        }\n        goto LABEL_198;\n      case 2u:\n        __asm\n        {\n          fldz; jumptable 00000000004035CD case 2\n          fcomip  st, st(2)\n        }\n        if ( _CF | _ZF )\n        {\n          __asm\n          {\n            fxch    st(1)\n            fld     st\n            fldcw   [rsp+168h+var_11C]\n            fistp   [rsp+168h+var_168]\n            fldcw   [rsp+168h+var_11A]\n            fild    [rsp+168h+var_168]\n            fxch    st(1)\n            fcomip  st, st(1)\n          }\n          if ( !(_CF | _ZF) )\n          {\n            __asm { fstp    st }\nLABEL_196:\n            v128 = v127 + 1;\n            __asm { fild    [rsp+168h+var_168] }\n          }\n        }\n        else\n        {\n          __asm\n          {\n            fxch    st(1)\n            fchs\n            fld     st\n            fldcw   [rsp+168h+var_11C]\n            fistp   [rsp+168h+var_128]\n            fldcw   [rsp+168h+var_11A]\n          }\nLABEL_198:\n          v129 = v172;\n          __asm\n          {\n            fild    [rsp+168h+var_168]\n            fxch    st(1)\n            fcomip  st, st(1)\n            fstp    st\n          }\n          v130 = -(!(_CF | _ZF) + v172);\n          __asm { fild    [rsp+168h+var_168] }\n        }\nLABEL_161:\n        __asm { faddp   st(1), st }\n        if ( (_DWORD)v29 )\n        {\n          __asm { fld     cs:flt_40C130 }\n          v70 = v29 - 1;\n          if ( (_DWORD)v29 == 1 )\n          {\n            __asm { fdivp   st(1), st }\n          }\n          else\n          {\nLABEL_163:\n            __asm { fld     st }\n            do\n            {\n              __asm { fmul    st, st(1) }\n              --v70;\n            }\n            while ( v70 );\n            __asm\n            {\n              fstp    st(1)\n              fdivp   st(1), st\n            }\n          }\n        }\n        break;\n      case 3u:\n        __asm\n        {\n          fxch    st(1); jumptable 00000000004035CD case 3\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_168]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_168]\n        }\n        goto LABEL_161;\n      case 4u:\n        __asm\n        {\n          fldz; jumptable 00000000004035CD case 4\n          fcomip  st, st(2)\n        }\n        if ( _CF | _ZF )\n        {\n          __asm\n          {\n            fxch    st(1)\n            fadd    cs:flt_40C13C\n            fldcw   [rsp+168h+var_11C]\n            fistp   [rsp+168h+var_168]\n            fldcw   [rsp+168h+var_11A]\n            fild    [rsp+168h+var_168]\n          }\n        }\n        else\n        {\n          __asm\n          {\n            fxch    st(1)\n            fsub    cs:flt_40C13C\n            fldcw   [rsp+168h+var_11C]\n            fistp   [rsp+168h+var_168]\n            fldcw   [rsp+168h+var_11A]\n            fild    [rsp+168h+var_168]\n          }\n        }\n        goto LABEL_161;\n      default:\n        __asm\n        {\n          fstp    st; jumptable 00000000004035CD default case\n          fstp    st\n          fldz\n          fxch    st(1)\n        }\n        goto LABEL_163;\n    }\nLABEL_166:\n    if ( v58 )\n    {\n      __asm\n      {\n        fxch    st(1)\n        fstp    tbyte ptr [rsp+168h+var_158]\n      }\n      v78 = \"  no scaling, returning (grouped) value: %'.*Lf\\n\";\n      if ( !v56 )\n        v78 = \"  no scaling, returning value: %.*Lf\\n\";\n      __asm\n      {\n        fld     st\n        fstp    tbyte ptr [rsp+178h+var_178]\n        fstp    tbyte ptr [rsp+178h+var_168]\n      }\n      __fprintf_chk(stderr, 1LL, v78, (unsigned int)v29, v24, (unsigned int)v29);\n      __asm\n      {\n        fld     tbyte ptr [rsp+168h+var_168]\n        fld     tbyte ptr [rsp+168h+var_158]\n      }\n    }\n    else\n    {\n      __asm { fxch    st(1) }\n    }\n    __asm { fstp    tbyte ptr [rsp+168h+var_158] }\n    v23 = &src;\n    strcpy(v55, \".*Lf\");\n    __asm\n    {\n      fld     st\n      fstp    tbyte ptr [rsp+178h+var_178]\n      fstp    tbyte ptr [rsp+178h+var_168]\n    }\n    v17 = (char *)*((_QWORD *)&v111 + 1);\n    v6 = *(char **)&v111;\n    __asm { fld     tbyte ptr [rsp+168h+var_168] }\n    if ( (unsigned int)__snprintf_chk(&src, 128LL, 1LL, 128LL, &v182) <= 0x7F )\n    {\n      __asm\n      {\n        fstp    st\n        fld     tbyte ptr [rsp+168h+var_158]\n      }\n      v79 = byte_610338;\n      goto LABEL_173;\n    }\n    __asm { fstp    tbyte ptr [rsp+168h+var_168] }\n    v102 = dcgettext(0LL, \"failed to prepare value '%Lf' for printing\", 5);\n    __asm\n    {\n      fld     tbyte ptr [rsp+168h+var_168]\n      fstp    tbyte ptr [rsp+178h+var_178]\n    }\n    error(1, 0, v102);\nLABEL_289:\n    __asm { fstp    st }\n    v29 = 0LL;\n    __asm { fld1 }\n  }\n  if ( v20 - 3 <= 1 )\n  {\n    v156 = 1024;\n    v142 = 4652218415073722368LL;\n  }\n  else\n  {\n    v156 = 1000;\n    v142 = 4652007308841189376LL;\n  }\n  __asm\n  {\n    fld     cs:tbyte_40C150\n    fxch    st(1)\n    fcomi   st, st(1)\n    fstp    st(1)\n  }\n  if ( _CF )\n    goto LABEL_301;\n  __asm\n  {\n    fld     cs:tbyte_40C160\n    fcomip  st, st(1)\n  }\n  if ( _CF )\n  {\nLABEL_301:\n    __asm { fld     st }\n    v59 = 0;\n  }\n  else\n  {\n    __asm { fild    dword ptr [rsp+168h+var_148] }\n    v59 = 0;\n    __asm { fld     st(1) }\n    while ( 1 )\n    {\n      __asm\n      {\n        fldz\n        fld     st(1)\n        fchs\n        fxch    st(1)\n        fcomip  st, st(2)\n        fcmovbe st, st(1)\n        fcomip  st, st(2)\n      }\n      if ( _CF )\n        break;\n      __asm { fdiv    st, st(1) }\n      ++v59;\n    }\n    __asm { fstp    st(1) }\n  }\n  if ( v58 )\n  {\n    __asm\n    {\n      fxch    st(1)\n      fstp    [rsp+168h+var_138]\n      fld     st\n      fstp    tbyte ptr [rsp+178h+var_178]\n      fstp    tbyte ptr [rsp+178h+var_148]\n    }\n    __fprintf_chk(stderr, 1LL, \"  scaled value to %Lf * %0.f ^ %u\\n\", v59, v24, v57);\n    v58 = byte_610338;\n    __asm\n    {\n      fld     [rsp+168h+var_138]\n      fld     tbyte ptr [rsp+168h+var_148]\n    }\n  }\n  if ( qword_610260 == -1 )\n  {\n    __asm\n    {\n      fldz\n      fld     st(1)\n      fchs\n      fxch    st(1)\n      fcomip  st, st(2)\n      fcmovbe st, st(1)\n      fld     cs:flt_40C130\n      fld     st\n      fcomip  st, st(2)\n      fstp    st(1)\n    }\n    if ( !(_CF | _ZF) )\n      goto LABEL_273;\n    __asm { fstp    st }\n  }\n  else\n  {\n    v60 = 3 * v59;\n    if ( v60 > qword_610260 )\n      LODWORD(v60) = qword_610260;\n    v61 = v60;\n    if ( (_DWORD)v60 )\n    {\n      v62 = v60 - 1;\n      if ( v62 )\n      {\n        __asm { fld     cs:flt_40C130 }\n        v63 = v62;\n        __asm { fld     st }\n        do\n        {\n          __asm { fmul    st, st(1) }\n          --v63;\n        }\n        while ( v63 );\n        __asm\n        {\n          fnstcw  [rsp+168h+var_11A]\n          fmulp   st(2), st\n          fld     cs:tbyte_40C170\n        }\n        LOBYTE(v64) = v176;\n        __asm { fld     st(2) }\n        HIBYTE(v64) = HIBYTE(v176) | 0xC;\n        v174 = v64;\n        __asm\n        {\n          fdiv    st, st(1)\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_148]\n          fmulp   st(1), st\n          fsub    st(2), st\n          fld     [rsp+168h+var_158]\n        }\n        switch ( v54 )\n        {\n          case 0u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 0\n              fxch    st(1)\n              fxch    st(2)\n            }\n            goto LABEL_206;\n          case 1u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 1\n              fxch    st(1)\n              fxch    st(2)\n            }\n            goto LABEL_245;\n          case 2u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 2\n              fxch    st(1)\n            }\n            goto LABEL_236;\n          case 3u:\n            __asm\n            {\n              fxch    st(3); jumptable 00000000004033ED case 3\n              fldcw   [rsp+168h+var_11C]\n              fistp   [rsp+168h+var_148]\n              fldcw   [rsp+168h+var_11A]\n              fild    [rsp+168h+var_148]\n              faddp   st(1), st\n              fxch    st(1)\n            }\n            goto LABEL_210;\n          case 4u:\n            __asm\n            {\n              fstp    st(2); jumptable 00000000004033ED case 4\n              fxch    st(1)\n            }\n            goto LABEL_241;\n          default:\n            goto LABEL_293;\n        }\n      }\n      __asm { fld     cs:flt_40C130 }\nLABEL_273:\n      __asm\n      {\n        fnstcw  [rsp+168h+var_11A]\n        fmul    st(1), st\n        fld     cs:tbyte_40C170\n      }\n      LOBYTE(v97) = v176;\n      __asm { fld     st(2) }\n      HIBYTE(v97) = HIBYTE(v176) | 0xC;\n      v89 = __SETP__(HIBYTE(v176) | 0xC, 0);\n      __asm { fdiv    st, st(1) }\n      v174 = v97;\n      __asm\n      {\n        fldcw   [rsp+168h+var_11C]\n        fistp   [rsp+168h+var_148]\n        fldcw   [rsp+168h+var_11A]\n        fild    [rsp+168h+var_148]\n        fmulp   st(1), st\n        fsub    st(2), st\n        fld     [rsp+168h+var_158]\n      }\n      switch ( v54 )\n      {\n        case 0u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 0\n            fxch    st(1)\n            fxch    st(2)\n          }\n          v61 = 1;\n          goto LABEL_206;\n        case 1u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 1\n            fxch    st(1)\n            fxch    st(2)\n          }\n          v61 = 1;\n          goto LABEL_245;\n        case 2u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 2\n            fxch    st(1)\n          }\n          v61 = 1;\n          goto LABEL_236;\n        case 3u:\n          __asm\n          {\n            fxch    st(3); jumptable 0000000000403EBD case 3\n            fldcw   [rsp+168h+var_11C]\n            fistp   [rsp+168h+var_148]\n            fldcw   [rsp+168h+var_11A]\n            fild    [rsp+168h+var_148]\n            faddp   st(1), st\n            fxch    st(1)\n          }\n          goto LABEL_249;\n        case 4u:\n          __asm\n          {\n            fstp    st(2); jumptable 0000000000403EBD case 4\n            fxch    st(1)\n          }\n          v61 = 1;\n          goto LABEL_241;\n        default:\n          __asm\n          {\n            fstp    st(3); jumptable 0000000000403EBD default case\n            fstp    st\n            fstp    st\n          }\n          goto LABEL_296;\n      }\n    }\n  }\n  __asm\n  {\n    fnstcw  [rsp+168h+var_11A]\n    fld     cs:tbyte_40C170\n  }\n  LOBYTE(v93) = v176;\n  __asm\n  {\n    fld     st(1)\n    fdiv    st, st(1)\n  }\n  HIBYTE(v93) = HIBYTE(v176) | 0xC;\n  v89 = __SETP__(HIBYTE(v176) | 0xC, 0);\n  v174 = v93;\n  __asm\n  {\n    fldcw   [rsp+168h+var_11C]\n    fistp   [rsp+168h+var_148]\n    fldcw   [rsp+168h+var_11A]\n    fild    [rsp+168h+var_148]\n    fmulp   st(1), st\n    fsub    st(1), st\n    fld     [rsp+168h+var_158]\n  }\n  switch ( v54 )\n  {\n    case 0u:\n      __asm { fxch    st(2); jumptable 0000000000403D49 case 0 }\n      v61 = 0;\n      goto LABEL_206;\n    case 1u:\n      __asm { fxch    st(2); jumptable 0000000000403D49 case 1 }\n      v61 = 0;\nLABEL_245:\n      __asm\n      {\n        fchs\n        fld     st\n        fldcw   [rsp+168h+var_11C]\n        fistp   [rsp+168h+var_128]\n        fldcw   [rsp+168h+var_11A]\n      }\n      goto LABEL_238;\n    case 2u:\n      v61 = 0;\nLABEL_236:\n      __asm\n      {\n        fldz\n        fcomip  st, st(3)\n      }\n      if ( _CF | _ZF )\n      {\n        __asm { fxch    st(2) }\nLABEL_206:\n        __asm\n        {\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_148]\n          fxch    st(1)\n          fcomip  st, st(1)\n        }\n        if ( !(_CF | _ZF) )\n        {\n          __asm { fstp    st }\n          v159 = v158 + 1;\n          __asm { fild    [rsp+168h+var_148] }\n        }\n      }\n      else\n      {\n        __asm\n        {\n          fxch    st(2)\n          fchs\n          fld     st\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_128]\n          fldcw   [rsp+168h+var_11A]\n        }\nLABEL_238:\n        v160 = v173;\n        __asm\n        {\n          fild    [rsp+168h+var_148]\n          fxch    st(1)\n          fcomip  st, st(1)\n          fstp    st\n        }\n        v161 = -(!(_CF | _ZF) + v173);\n        __asm { fild    [rsp+168h+var_148] }\n      }\nLABEL_208:\n      __asm { faddp   st(1), st }\n      v89 = __SETP__(v61, 0);\n      if ( !v61 )\n        break;\n      __asm { fld     cs:flt_40C130 }\n      v89 = __SETP__(v61, 1);\n      v62 = v61 - 1;\n      if ( v61 != 1 )\n        goto LABEL_210;\nLABEL_249:\n      __asm { fdivp   st(1), st }\n      break;\n    case 3u:\n      __asm\n      {\n        fxch    st(2); jumptable 0000000000403D49 case 3\n        fldcw   [rsp+168h+var_11C]\n        fistp   [rsp+168h+var_148]\n        fldcw   [rsp+168h+var_11A]\n        fild    [rsp+168h+var_148]\n        faddp   st(1), st\n      }\n      break;\n    case 4u:\n      v61 = 0;\nLABEL_241:\n      __asm\n      {\n        fldz\n        fcomip  st, st(3)\n      }\n      if ( _CF | _ZF )\n      {\n        __asm\n        {\n          fxch    st(2)\n          fadd    cs:flt_40C13C\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_148]\n        }\n      }\n      else\n      {\n        __asm\n        {\n          fxch    st(2)\n          fsub    cs:flt_40C13C\n          fldcw   [rsp+168h+var_11C]\n          fistp   [rsp+168h+var_148]\n          fldcw   [rsp+168h+var_11A]\n          fild    [rsp+168h+var_148]\n        }\n      }\n      goto LABEL_208;\n    default:\n      __asm\n      {\n        fstp    st(2); jumptable 0000000000403D49 default case\n        fstp    st\n      }\nLABEL_296:\n      __asm { fldz }\n      goto LABEL_214;\n  }\n  while ( 2 )\n  {\n    __asm\n    {\n      fldz\n      fcomip  st, st(1)\n    }\n    if ( _CF | _ZF )\n    {\nLABEL_214:\n      __asm { fcomi   st, st(1) }\n      if ( _CF )\n      {\n        __asm { fstp    st(1) }\n      }\n      else\n      {\nLABEL_217:\n        v89 = __SETP__(++v59, 0);\n        __asm { fdivrp  st(1), st }\n      }\n      __asm\n      {\n        fldz\n        fxch    st(1)\n        fucomi  st, st(1)\n        fstp    st(1)\n      }\n      if ( !v89 && _ZF )\n      {\n        v91 = 0LL;\n        goto LABEL_222;\n      }\n      __asm\n      {\n        fldz\n        fcomip  st, st(1)\n      }\n      if ( _CF | _ZF )\n      {\n        __asm { fld     st }\n        goto LABEL_260;\n      }\n      __asm\n      {\n        fld     st\n        fchs\n      }\n    }\n    else\n    {\n      __asm\n      {\n        fld     st\n        fchs\n        fcomi   st, st(2)\n      }\n      if ( !_CF )\n      {\n        __asm { fstp    st }\n        goto LABEL_217;\n      }\n      __asm\n      {\n        fstp    st(2)\n        fxch    st(1)\n      }\n    }\n    __asm { fxch    st(1) }\nLABEL_260:\n    __asm\n    {\n      fld     cs:flt_40C130\n      fcomip  st, st(2)\n      fstp    st(1)\n    }\n    v91 = (v59 != 0) & (unsigned __int8)!(_CF | _ZF);\nLABEL_222:\n    if ( v58 )\n    {\n      __asm\n      {\n        fxch    st(1)\n        fstp    tbyte ptr [rsp+168h+var_148]\n        fld     st\n        fstp    tbyte ptr [rsp+178h+var_178]\n        fstp    tbyte ptr [rsp+178h+var_168]\n      }\n      __fprintf_chk(stderr, 1LL, \"  after rounding, value=%Lf * %0.f ^ %u\\n\", v59, v24, v91);\n      __asm\n      {\n        fld     tbyte ptr [rsp+168h+var_148]\n        fld     tbyte ptr [rsp+168h+var_168]\n      }\n    }\n    strcpy(v55, \".*Lf%s\");\n    if ( v59 > 8 )\n      __asm { fxch    st(1) }\n    else\n      __asm { fxch    st(1) }\n    __asm\n    {\n      fstp    tbyte ptr [rsp+168h+var_158]\n      fld     st\n      fstp    [rsp+188h+var_188]\n      fstp    tbyte ptr [rsp+188h+var_168]\n    }\n    v92 = __snprintf_chk(&src, 127LL, 1LL, 128LL, &v182);\n    __asm { fld     tbyte ptr [rsp+188h+var_158] }\n    if ( v92 > 0x7E )\n    {\n      __asm { fstp    st }\n      v103 = dcgettext(0LL, \"failed to prepare value '%Lf' for printing\", 5);\n      __asm\n      {\n        fld     tbyte ptr [rsp+168h+var_168]\n        fstp    tbyte ptr [rsp+178h+var_178]\n      }\n      error(1, 0, v103);\nLABEL_293:\n      __asm\n      {\n        fstp    st(3); jumptable 00000000004033ED default case\n        fstp    st\n        fxch    st(1)\n        fldz\n        fxch    st(1)\n        fxch    st(2)\n      }\nLABEL_210:\n      __asm { fld     st }\n      do\n      {\n        __asm { fmul    st, st(1) }\n        v89 = __SETP__(--v62, 0);\n      }\n      while ( v62 );\n      __asm\n      {\n        fstp    st(1)\n        fdivp   st(1), st\n      }\n      continue;\n    }\n    break;\n  }\n  if ( v59 && v20 == 4 )\n  {\n    __asm { fstp    tbyte ptr [rsp+168h+var_168] }\n    __strncat_chk(&src, \"i\", 127LL - (int)v92, 128LL);\n    __asm { fld     tbyte ptr [rsp+168h+var_168] }\n  }\n  v79 = byte_610338;\n  if ( byte_610338 )\n  {\n    __asm { fstp    tbyte ptr [rsp+168h+var_168] }\n    v98 = sub_407590(&src);\n    __fprintf_chk(stderr, 1LL, \"  returning value: %s\\n\", v98, v99, v100);\n    v79 = byte_610338;\n    __asm { fld     tbyte ptr [rsp+168h+var_168] }\nLABEL_173:\n    v80 = ::s1;\n    if ( ::s1 )\n      goto LABEL_174;\n    goto LABEL_181;\n  }\n  v80 = ::s1;\n  if ( !::s1 )\n  {\n    __asm { fstp    st }\n    goto LABEL_184;\n  }\nLABEL_174:\n  v81 = &src;\n  do\n  {\n    v82 = *(_DWORD *)v81;\n    v81 = (__int128 *)((char *)v81 + 4);\n    v83 = ~v82 & (v82 - 16843009) & 0x80808080;\n  }\n  while ( !v83 );\n  __asm { fstp    tbyte ptr [rsp+168h+var_168] }\n  if ( !(~v82 & (v82 - 16843009) & 0x8080) )\n    LOBYTE(v83) = (~v82 & (v82 - 16843009) & 0x80808080) >> 16;\n  if ( !(~v82 & (v82 - 16843009) & 0x8080) )\n    v81 = (__int128 *)((char *)v81 + 2);\n  __strncat_chk(&src, v80, (char *)&src - ((char *)v81 - __CFADD__((_BYTE)v83, (_BYTE)v83) - 3) + 127, 128LL);\n  __asm { fld     tbyte ptr [rsp+168h+var_168] }\nLABEL_181:\n  if ( v79 )\n  {\n    __asm { fstp    tbyte ptr [rsp+168h+var_168] }\n    v84 = sub_407590(&src);\n    __asm\n    {\n      fld     tbyte ptr [rsp+168h+var_168]\n      fstp    tbyte ptr [rsp+178h+var_178]\n    }\n    __fprintf_chk(stderr, 1LL, \"formatting output:\\n  value: %Lf\\n  humanized: %s\\n\", v84, v85, v86);\n  }\n  else\n  {\n    __asm { fstp    st }\n  }\nLABEL_184:\n  v87 = strlen((const char *)&src);\n  if ( qword_610380 && qword_610380 > v87 )\n  {\n    *(_QWORD *)&v182 = qword_610380;\n    sub_405530(&src, dest, qword_610388, &v182, (unsigned int)dword_610258, 2LL);\n    if ( byte_610338 )\n    {\n      v94 = sub_407590(dest);\n      __fprintf_chk(stderr, 1LL, \"  After padding: %s\\n\", v94, v95, v96);\n    }\n  }\n  else\n  {\n    if ( v87 + 1 >= qword_610388 )\n      sub_402BD0(v87 + 1);\n    strcpy(dest, (const char *)&src);\n  }\n  v88 = stdout;\n  if ( qword_610368 )\n  {\n    fputs_unlocked(qword_610368, stdout);\n    v88 = stdout;\n  }\n  v8 = 1;\n  fputs_unlocked(dest, v88);\n  if ( qword_610360 )\n    fputs_unlocked(qword_610360, stdout);\n  return v8;\n}\n", 
            "funcStartAddr": "0x402c00L", 
            "funcEndAddr": "0x4041a0L", 
            "funcName": "sub_402C00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4041A0(char *s, char a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  char *v6; // r15\n  unsigned __int64 v7; // r14\n  unsigned int v8; // er12\n  int v9; // eax\n  unsigned __int8 v10; // bp\n  char *v11; // rbx\n  char v12; // dl\n  char *v13; // rax\n  const unsigned __int16 *v15; // rax\n  unsigned __int8 v16; // si\n  bool v17; // zf\n  char v18; // [rsp+Ch] [rbp-3Ch]\n\n  v6 = s;\n  v7 = 0LL;\n  v8 = 1;\n  v9 = dword_610254;\n  v18 = a2;\n  while ( 1 )\n  {\n    ++v7;\n    v10 = *v6;\n    if ( v9 != 128 )\n      break;\n    if ( !v10 )\n      goto LABEL_8;\n    v11 = v6;\n    v15 = *__ctype_b_loc();\n    while ( 1 )\n    {\n      a3 = v10;\n      if ( !(v15[v10] & 1) && v10 != 10 )\n        break;\n      v10 = *++v11;\n      if ( !*v11 )\n        goto LABEL_8;\n    }\n    a3 = (unsigned __int8)*v11;\n    if ( !(_BYTE)a3 )\n      goto LABEL_8;\n    while ( !(v15[(unsigned __int8)a3] & 1) && (_BYTE)a3 != 10 )\n    {\n      a3 = (unsigned __int8)*++v11;\n      if ( !(_BYTE)a3 )\n        goto LABEL_8;\n    }\n    v10 = *v11;\nLABEL_22:\n    if ( !v10 )\n      goto LABEL_8;\nLABEL_23:\n    *v11 = 0;\n    v16 = 32;\n    v17 = (unsigned __int8)sub_402C00(v6, v7, a3, a4, a5, a6) == 0;\n    v9 = dword_610254;\n    if ( v17 )\n      v8 = 0;\n    a3 = (__int64)stdout->_IO_write_ptr;\n    if ( dword_610254 != 128 )\n      v16 = dword_610254;\n    if ( (char *)a3 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, v16);\n      v9 = dword_610254;\n    }\n    else\n    {\n      a5 = a3 + 1;\n      stdout->_IO_write_ptr = (char *)(a3 + 1);\n      *(_BYTE *)a3 = v16;\n    }\n    v6 = v11 + 1;\n  }\n  a3 = (unsigned int)(char)v10;\n  if ( (_DWORD)a3 == v9 )\n  {\n    v11 = v6;\n    goto LABEL_22;\n  }\n  if ( v10 )\n  {\n    v11 = v6;\n    while ( 1 )\n    {\n      a3 = (unsigned int)*++v11;\n      if ( !*v11 )\n        break;\n      if ( (_DWORD)a3 == v9 )\n        goto LABEL_23;\n    }\n  }\nLABEL_8:\n  if ( !(unsigned __int8)sub_402C00(v6, v7, a3, a4, a5, a6) )\n    v8 = 0;\n  if ( v18 )\n  {\n    v12 = byte_610250;\n    v13 = stdout->_IO_write_ptr;\n    if ( v13 >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, (unsigned __int8)byte_610250);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v13 + 1;\n      *v13 = v12;\n    }\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x4041a0L", 
            "funcEndAddr": "0x40435eL", 
            "funcName": "sub_4041A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_404360(int status)\n{\n  __int64 v1; // rbx\n  char *v2; // rax\n  __int64 v3; // r8\n  __int64 v4; // r9\n  char *v5; // rax\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rbx\n  char *v9; // rax\n  FILE *v10; // rbx\n  char *v11; // rax\n  FILE *v12; // rbx\n  char *v13; // rax\n  FILE *v14; // rbx\n  char *v15; // rax\n  FILE *v16; // rbx\n  char *v17; // rax\n  FILE *v18; // rbx\n  char *v19; // rax\n  FILE *v20; // rbx\n  char *v21; // rax\n  FILE *v22; // rbx\n  char *v23; // rax\n  FILE *v24; // rbx\n  char *v25; // rax\n  FILE *v26; // rbx\n  char *v27; // rax\n  FILE *v28; // rbx\n  char *v29; // rax\n  FILE *v30; // rbx\n  char *v31; // rax\n  FILE *v32; // rbx\n  char *v33; // rax\n  FILE *v34; // rbx\n  char *v35; // rax\n  FILE *v36; // rbx\n  char *v37; // rax\n  FILE *v38; // rbx\n  char *v39; // rax\n  FILE *v40; // rbx\n  char *v41; // rax\n  FILE *v42; // rbx\n  char *v43; // rax\n  FILE *v44; // rbx\n  char *v45; // rax\n  FILE *v46; // rbx\n  char *v47; // rax\n  FILE *v48; // rbx\n  char *v49; // rax\n  FILE *v50; // rbx\n  char *v51; // rax\n  FILE *v52; // rbx\n  char *v53; // rax\n  FILE *v54; // rbx\n  char *v55; // rax\n  FILE *v56; // rbx\n  char *v57; // rax\n  FILE *v58; // rbx\n  char *v59; // rax\n  __int64 v60; // rbx\n  char *v61; // rax\n  __int64 v62; // rbx\n  char *v63; // rax\n  const char **v64; // rax\n  const char *v65; // rbx\n  char *v66; // rax\n  char *v67; // rax\n  char *v68; // rax\n  char *v69; // rax\n  char *v70; // rax\n  char *v71; // rax\n  char *v72; // rax\n  char *v73; // rax\n  const char *v74; // [rsp+0h] [rbp-88h]\n  const char *v75; // [rsp+8h] [rbp-80h]\n  const char *v76; // [rsp+10h] [rbp-78h]\n  const char *v77; // [rsp+18h] [rbp-70h]\n  const char *v78; // [rsp+20h] [rbp-68h]\n  const char *v79; // [rsp+28h] [rbp-60h]\n  const char *v80; // [rsp+30h] [rbp-58h]\n  const char *v81; // [rsp+38h] [rbp-50h]\n  const char *v82; // [rsp+40h] [rbp-48h]\n  const char *v83; // [rsp+48h] [rbp-40h]\n  const char *v84; // [rsp+50h] [rbp-38h]\n  const char *v85; // [rsp+58h] [rbp-30h]\n  __int64 v86; // [rsp+60h] [rbp-28h]\n  __int64 v87; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_6103D8;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1, v3, v4);\n    goto LABEL_3;\n  }\n  v5 = dcgettext(0LL, \"Usage: %s [OPTION]... [NUMBER]...\\n\", 5);\n  __printf_chk(1LL, v5, v1);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"Reformat NUMBER(s), or the numbers from standard input if none are specified.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(0LL, \"      --debug          print warnings about invalid input\\n\", 5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(0LL, \"  -d, --delimiter=X    use X instead of whitespace for field delimiter\\n\", 5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --field=FIELDS   replace the numbers in these input fields (default=1)\\n\"\n          \"                         see FIELDS below\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"      --format=FORMAT  use printf style floating-point FORMAT;\\n\"\n          \"                         see FORMAT below for details\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(\n          0LL,\n          \"      --from=UNIT      auto-scale input numbers to UNITs; default is 'none';\\n\"\n          \"                         see UNIT below\\n\",\n          5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(0LL, \"      --from-unit=N    specify the input unit size (instead of the default 1)\\n\", 5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\\n\"\n          \"                         (which means it has no effect in the C/POSIX locale)\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"      --header[=N]     print (without converting) the first N header lines;\\n\"\n          \"                         N defaults to 1 if not specified\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"      --invalid=MODE   failure mode for invalid numbers: MODE can be:\\n\"\n          \"                         abort (default), fail, warn, ignore\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(\n          0LL,\n          \"      --padding=N      pad the output to N characters; positive N will\\n\"\n          \"                         right-align; negative N will left-align;\\n\"\n          \"                         padding is ignored if the output is wider than N;\\n\"\n          \"                         the default is to automatically pad if a whitespace\\n\"\n          \"                         is found\\n\",\n          5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(\n          0LL,\n          \"      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\\n\"\n          \"                         up, down, from-zero (default), towards-zero, nearest\\n\",\n          5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(\n          0LL,\n          \"      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\\n\"\n          \"                         SUFFIX in input numbers\\n\",\n          5);\n  fputs_unlocked(v33, v32);\n  v34 = stdout;\n  v35 = dcgettext(0LL, \"      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\\n\", 5);\n  fputs_unlocked(v35, v34);\n  v36 = stdout;\n  v37 = dcgettext(0LL, \"      --to-unit=N      the output unit size (instead of the default 1)\\n\", 5);\n  fputs_unlocked(v37, v36);\n  v38 = stdout;\n  v39 = dcgettext(0LL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5);\n  fputs_unlocked(v39, v38);\n  v40 = stdout;\n  v41 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v41, v40);\n  v42 = stdout;\n  v43 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v43, v42);\n  v44 = stdout;\n  v45 = dcgettext(0LL, \"\\nUNIT options:\\n\", 5);\n  fputs_unlocked(v45, v44);\n  v46 = stdout;\n  v47 = dcgettext(0LL, \"  none       no auto-scaling is done; suffixes will trigger an error\\n\", 5);\n  fputs_unlocked(v47, v46);\n  v48 = stdout;\n  v49 = dcgettext(\n          0LL,\n          \"  auto       accept optional single/two letter suffix:\\n\"\n          \"               1K = 1000,\\n\"\n          \"               1Ki = 1024,\\n\"\n          \"               1M = 1000000,\\n\"\n          \"               1Mi = 1048576,\\n\",\n          5);\n  fputs_unlocked(v49, v48);\n  v50 = stdout;\n  v51 = dcgettext(\n          0LL,\n          \"  si         accept optional single letter suffix:\\n\"\n          \"               1K = 1000,\\n\"\n          \"               1M = 1000000,\\n\"\n          \"               ...\\n\",\n          5);\n  fputs_unlocked(v51, v50);\n  v52 = stdout;\n  v53 = dcgettext(\n          0LL,\n          \"  iec        accept optional single letter suffix:\\n\"\n          \"               1K = 1024,\\n\"\n          \"               1M = 1048576,\\n\"\n          \"               ...\\n\",\n          5);\n  fputs_unlocked(v53, v52);\n  v54 = stdout;\n  v55 = dcgettext(\n          0LL,\n          \"  iec-i      accept optional two-letter suffix:\\n\"\n          \"               1Ki = 1024,\\n\"\n          \"               1Mi = 1048576,\\n\"\n          \"               ...\\n\",\n          5);\n  fputs_unlocked(v55, v54);\n  v56 = stdout;\n  v57 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"FIELDS supports cut(1) style field ranges:\\n\"\n          \"  N    N'th field, counted from 1\\n\"\n          \"  N-   from N'th field, to end of line\\n\"\n          \"  N-M  from N'th to M'th field (inclusive)\\n\"\n          \"  -M   from first to M'th field (inclusive)\\n\"\n          \"  -    all fields\\n\"\n          \"Multiple fields/ranges can be separated with commas\\n\",\n          5);\n  fputs_unlocked(v57, v56);\n  v58 = stdout;\n  v59 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"FORMAT must be suitable for printing one floating-point argument '%f'.\\n\"\n          \"Optional quote (%'f) will enable --grouping (if supported by current locale).\\n\"\n          \"Optional width value (%10f) will pad output. Optional zero (%010f) width\\n\"\n          \"will zero pad the number. Optional negative values (%-10f) will left align.\\n\"\n          \"Optional precision (%.1f) will override the input determined precision.\\n\",\n          5);\n  fputs_unlocked(v59, v58);\n  v60 = qword_6103D8;\n  v61 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Exit status is 0 if all input numbers were successfully converted.\\n\"\n          \"By default, %s will stop at the first conversion error with exit status 2.\\n\"\n          \"With --invalid='fail' a warning is printed for each conversion error\\n\"\n          \"and the exit status is 2.  With --invalid='warn' each conversion error is\\n\"\n          \"diagnosed, but the exit status is 0.  With --invalid='ignore' conversion\\n\"\n          \"errors are not diagnosed and the exit status is 0.\\n\",\n          5);\n  __printf_chk(1LL, v61, v60);\n  v62 = qword_6103D8;\n  v63 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Examples:\\n\"\n          \"  $ %s --to=si 1000\\n\"\n          \"            -> \\\"1.0K\\\"\\n\"\n          \"  $ %s --to=iec 2048\\n\"\n          \"           -> \\\"2.0K\\\"\\n\"\n          \"  $ %s --to=iec-i 4096\\n\"\n          \"           -> \\\"4.0Ki\\\"\\n\"\n          \"  $ echo 1K | %s --from=si\\n\"\n          \"           -> \\\"1000\\\"\\n\"\n          \"  $ echo 1K | %s --from=iec\\n\"\n          \"           -> \\\"1024\\\"\\n\"\n          \"  $ df -B1 | %s --header --field 2-4 --to=si\\n\"\n          \"  $ ls -l  | %s --header --field 5 --to=iec\\n\"\n          \"  $ ls -lh | %s --header --field 5 --from=iec --padding=10\\n\"\n          \"  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\\n\",\n          5);\n  __printf_chk(1LL, v63, v62);\n  v74 = \"[\";\n  v75 = \"test invocation\";\n  v76 = \"coreutils\";\n  v77 = \"Multi-call invocation\";\n  v78 = \"sha224sum\";\n  v79 = \"sha2 utilities\";\n  v80 = \"sha256sum\";\n  v81 = \"sha2 utilities\";\n  v82 = \"sha384sum\";\n  v83 = \"sha2 utilities\";\n  v84 = \"sha512sum\";\n  v85 = \"sha2 utilities\";\n  v86 = 0LL;\n  v87 = 0LL;\n  v64 = &v74;\n  do\n    v64 += 2;\n  while ( *v64 && strcmp(\"numfmt\", *v64) );\n  v65 = v64[1];\n  if ( v65 )\n  {\n    v66 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v66, &unk_40A199);\n    v67 = setlocale(5, 0LL);\n    if ( !v67 || !strncmp(v67, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v70 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v70, &unk_40A199);\n    v71 = setlocale(5, 0LL);\n    if ( !v71 || !strncmp(v71, \"en_\", 3uLL) )\n    {\n      v65 = \"numfmt\";\n      v72 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v72, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v65 = \"numfmt\";\n  }\n  v73 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v73, \"numfmt\");\nLABEL_10:\n  v68 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v68, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v69 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v69, v65);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x404360L", 
            "funcEndAddr": "0x404a0dL", 
            "funcName": "sub_404360"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall compar(const void *a1, const void *a2)\n{\n  __int64 result; // rax\n\n  result = 0xFFFFFFFFLL;\n  if ( *(_DWORD *)a1 >= *(_DWORD *)a2 )\n    result = *(_DWORD *)a1 > *(_DWORD *)a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x404a10L", 
            "funcEndAddr": "0x404a22L", 
            "funcName": "compar"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_404A30(__int64 a1, __int64 a2)\n{\n  size_t v2; // rdx\n  unsigned __int64 v3; // rcx\n  char *v4; // rax\n  char *result; // rax\n\n  v2 = nmemb;\n  v3 = qword_6103C0;\n  v4 = (char *)ptr;\n  if ( nmemb == qword_6103C0 )\n  {\n    if ( ptr )\n    {\n      if ( (unsigned __int64)qword_6103C0 <= 0x555555555555554LL )\n      {\n        v3 = qword_6103C0 + ((unsigned __int64)qword_6103C0 >> 1) + 1;\nLABEL_6:\n        qword_6103C0 = v3;\n        v4 = (char *)sub_407BB0(ptr);\n        v2 = nmemb;\n        ptr = v4;\n        goto LABEL_2;\n      }\n    }\n    else\n    {\n      if ( !qword_6103C0 )\n      {\n        v3 = 8LL;\n        goto LABEL_6;\n      }\n      if ( !(qword_6103C0 & 0x800000000000000LL) && (unsigned __int64)qword_6103C0 >> 60 == 0 )\n        goto LABEL_6;\n    }\n    sub_407DA0();\n  }\nLABEL_2:\n  result = &v4[16 * v2];\n  *(_QWORD *)result = a1;\n  *((_QWORD *)result + 1) = a2;\n  nmemb = v2 + 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x404a30L", 
            "funcEndAddr": "0x404afcL", 
            "funcName": "sub_404A30"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_404B00(const char *a1, char a2)\n{\n  char *v2; // r15\n  unsigned __int64 v3; // rdi\n  char v4; // bl\n  char v5; // bp\n  char v6; // r12\n  char v7; // r14\n  char v8; // r13\n  size_t v9; // r15\n  size_t v10; // rbx\n  unsigned __int64 *v11; // r14\n  __int64 v12; // rbp\n  __int64 v13; // r12\n  unsigned __int64 *v14; // rdi\n  char *v15; // rdx\n  unsigned __int64 v16; // rax\n  char *v17; // rax\n  char *result; // rax\n  unsigned __int64 v19; // rax\n  unsigned __int64 v20; // rax\n  unsigned __int64 *v21; // rbp\n  __int64 v22; // rdi\n  unsigned __int64 v23; // rax\n  const char *v24; // rsi\n  char *v25; // rax\n  char *v26; // rbx\n  size_t v27; // rax\n  void *v28; // rbx\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  char *v32; // rax\n  unsigned __int64 v33; // [rsp+8h] [rbp-50h]\n\n  v2 = (char *)a1;\n  if ( a2 & 1 && !strcmp(a1, \"-\") )\n  {\n    v2 = (char *)(a1 + 1);\n    v3 = 1LL;\n    v4 = 1;\n  }\n  else\n  {\n    v3 = 0LL;\n    v4 = 0;\n  }\n  v5 = v4;\n  v6 = 0;\n  v7 = 0;\n  v33 = 1LL;\n  while ( 1 )\n  {\n    v8 = *v2;\n    if ( *v2 == 45 )\n    {\n      if ( !v5 )\n      {\n        v6 = v4 & (v3 == 0);\n        if ( !((unsigned __int8)v4 & (v3 == 0)) )\n        {\n          if ( v4 )\n          {\n            v33 = v3;\n            v5 = v4;\n            v3 = 0LL;\n          }\n          else\n          {\n            v6 = 0;\n            v3 = 0LL;\n            v5 = 1;\n            v33 = 1LL;\n          }\n          goto LABEL_16;\n        }\n        if ( a2 & 4 )\n        {\n          v25 = dcgettext(0LL, \"byte/character positions are numbered from 1\", 5);\n          goto LABEL_64;\n        }\nLABEL_75:\n        v25 = dcgettext(0LL, \"fields are numbered from 1\", 5);\n        goto LABEL_64;\n      }\n      if ( a2 & 4 )\n        v25 = dcgettext(0LL, \"invalid byte or character range\", 5);\n      else\n        v25 = dcgettext(0LL, \"invalid field range\", 5);\nLABEL_64:\n      error(0, 0, v25);\n      sub_404360(1);\n    }\n    if ( v8 == 44 || (*__ctype_b_loc())[(unsigned __int8)v8] & 1 || !v8 )\n      break;\n    if ( (unsigned int)(v8 - 48) > 9 )\n    {\n      v31 = sub_407590(v2);\n      if ( a2 & 4 )\n        v32 = dcgettext(0LL, \"invalid byte/character position %s\", 5);\n      else\n        v32 = dcgettext(0LL, \"invalid field value %s\", 5);\n      error(0, 0, v32, v31);\n      sub_404360(1);\n    }\n    if ( !v6 || !qword_6103B8 )\n      qword_6103B8 = v2;\n    if ( !v5 )\n      v4 = 1;\n    if ( v5 )\n      v7 = v5;\n    if ( v3 > 0x1999999999999999LL || (v19 = v8 - 48 + 10 * v3, v19 < v3) || v19 == -1LL )\n    {\n      v26 = qword_6103B8;\n      v27 = strspn(qword_6103B8, \"0123456789\");\n      v28 = (void *)sub_407DE0(v26, v27);\n      v29 = sub_407590(v28);\n      if ( a2 & 4 )\n        v30 = dcgettext(0LL, \"byte/character offset %s is too large\", 5);\n      else\n        v30 = dcgettext(0LL, \"field number %s is too large\", 5);\n      error(0, 0, v30, v29);\n      free(v28);\n      sub_404360(1);\n    }\n    v3 = v8 - 48 + 10 * v3;\n    v6 = 1;\nLABEL_16:\n    ++v2;\n  }\n  if ( v5 )\n  {\n    if ( v4 )\n    {\n      if ( !v7 )\n        goto LABEL_13;\n    }\n    else if ( !v7 )\n    {\n      if ( !(a2 & 1) )\n      {\n        v24 = \"invalid range with no endpoint: -\";\n        goto LABEL_63;\n      }\n      v33 = 1LL;\nLABEL_13:\n      sub_404A30(v33, -1LL);\nLABEL_14:\n      if ( !*v2 )\n        goto LABEL_24;\nLABEL_15:\n      v3 = 0LL;\n      v6 = 0;\n      v5 = 0;\n      v7 = 0;\n      v4 = 0;\n      goto LABEL_16;\n    }\n    if ( v33 > v3 )\n    {\n      v24 = \"invalid decreasing range\";\n      goto LABEL_63;\n    }\n    sub_404A30(v33, v3);\n    goto LABEL_14;\n  }\n  if ( !v3 )\n  {\n    if ( a2 & 4 )\n    {\n      v25 = dcgettext(0LL, \"byte/character positions are numbered from 1\", 5);\n      goto LABEL_64;\n    }\n    goto LABEL_75;\n  }\n  sub_404A30(v3, v3);\n  if ( *v2 )\n    goto LABEL_15;\nLABEL_24:\n  if ( !nmemb )\n  {\n    if ( a2 & 4 )\n    {\n      v25 = dcgettext(0LL, \"missing list of byte/character positions\", 5);\n    }\n    else\n    {\n      v24 = \"missing list of fields\";\nLABEL_63:\n      v25 = dcgettext(0LL, v24, 5);\n    }\n    goto LABEL_64;\n  }\n  v9 = 0LL;\n  qsort(ptr, nmemb, 0x10uLL, (__compar_fn_t)compar);\n  v10 = nmemb;\n  v11 = (unsigned __int64 *)ptr;\n  while ( v9 < v10 )\n  {\nLABEL_27:\n    if ( ++v9 < v10 )\n    {\n      v12 = 2 * v9;\n      v13 = 16 * v9 - 16;\n      v14 = &v11[2 * v9];\n      v15 = (char *)v11 + v13;\n      v16 = *(unsigned __int64 *)((char *)v11 + v13 + 8);\n      if ( v16 >= *v14 )\n      {\n        while ( 1 )\n        {\n          if ( v14[1] >= v16 )\n            v16 = v14[1];\n          *((_QWORD *)v15 + 1) = v16;\n          memmove(v14, &v11[v12 + 2], 16 * (v10 - v9) - 16);\n          v11 = (unsigned __int64 *)ptr;\n          v10 = nmemb - 1;\n          nmemb = v10;\n          if ( v10 <= v9 )\n            break;\n          v15 = (char *)ptr + v13;\n          v14 = (unsigned __int64 *)((char *)ptr + v12 * 8);\n          v16 = *(_QWORD *)((char *)ptr + v13 + 8);\n          if ( *((_QWORD *)ptr + 2 * v9) > v16 )\n          {\n            if ( v9 < v10 )\n              goto LABEL_27;\n            goto LABEL_34;\n          }\n        }\n      }\n    }\n  }\nLABEL_34:\n  if ( a2 & 2 )\n  {\n    ptr = 0LL;\n    v20 = *v11;\n    nmemb = 0LL;\n    qword_6103C0 = 0LL;\n    if ( v20 > 1 )\n      sub_404A30(1LL, v20 - 1);\n    v21 = v11 + 2;\n    if ( v10 > 1 )\n    {\n      do\n      {\n        v22 = *(v21 - 1) + 1;\n        if ( v22 != *v21 )\n          sub_404A30(v22, *v21 - 1);\n        v21 += 2;\n      }\n      while ( &v11[2 * v10] != v21 );\n    }\n    v23 = v11[2 * v10 - 1];\n    if ( v23 != -1LL )\n      sub_404A30(v23 + 1, -1LL);\n    free(v11);\n    v10 = nmemb;\n    v11 = (unsigned __int64 *)ptr;\n  }\n  nmemb = v10 + 1;\n  v17 = (char *)sub_407BB0(v11);\n  ptr = v17;\n  result = &v17[16 * nmemb - 16];\n  *((_QWORD *)result + 1) = -1LL;\n  *(_QWORD *)result = -1LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x404b00L", 
            "funcEndAddr": "0x40509eL", 
            "funcName": "sub_404B00"
        }, 
        {
            "decompiledFuncCode": "void sub_4050A0()\n{\n  nmemb = 0LL;\n  qword_6103C0 = 0LL;\n  free(ptr);\n  ptr = 0LL;\n}\n", 
            "funcStartAddr": "0x4050a0L", 
            "funcEndAddr": "0x4050d6L", 
            "funcName": "sub_4050A0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4050E0()\n{\n  sub_404360(1);\n}\n", 
            "funcStartAddr": "0x4050e0L", 
            "funcEndAddr": "0x4050eaL", 
            "funcName": "sub_4050E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4050F0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x4050f0L", 
            "funcEndAddr": "0x405206L", 
            "funcName": "sub_4050F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405210(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_407570(1LL);\n  v5 = sub_407260(0LL, 8LL, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x405210L", 
            "funcEndAddr": "0x405281L", 
            "funcName": "sub_405210"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_405290(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  __int64 v11; // rax\n  __int64 v12; // r8\n  __int64 v13; // r9\n  __int64 v14; // rax\n  __int64 v15; // r8\n  __int64 v16; // r9\n  char *v17; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_407590(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11, v12, v13);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v14 = sub_407590(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v14, v15, v16);\n  }\nLABEL_7:\n  v17 = stderr->_IO_write_ptr;\n  if ( v17 >= stderr->_IO_write_end )\n  {\n    LODWORD(v17) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v17 + 1;\n    *v17 = 10;\n  }\n  return (int)v17;\n}\n", 
            "funcStartAddr": "0x405290L", 
            "funcEndAddr": "0x4053a8L", 
            "funcName": "sub_405290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4053B0(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  __int64 *v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (__int64 *)a3;\n  result = sub_4050F0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_405210(a1, (__int64)a2, result);\n    sub_405290(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4053b0L", 
            "funcEndAddr": "0x405420L", 
            "funcName": "sub_4053B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405420(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x405420L", 
            "funcEndAddr": "0x40546dL", 
            "funcName": "sub_405420"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405490()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_4097E0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_6103C8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_6103D0 )\n      {\n        v5 = sub_4073E0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(dword_610290);\n    }\n  }\n  result = sub_4097E0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x405490L", 
            "funcEndAddr": "0x40552eL", 
            "funcName": "sub_405490"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405530(const char *a1, _BYTE *a2, __int64 a3, size_t *a4, int a5, char a6)\n{\n  size_t *v6; // r13\n  char v7; // bp\n  _BYTE *v8; // rbx\n  size_t v9; // rax\n  size_t v10; // r14\n  size_t v11; // r15\n  char *v12; // r12\n  size_t v13; // rdx\n  size_t v14; // rax\n  int v15; // esi\n  size_t v16; // r13\n  size_t v17; // r15\n  unsigned __int64 v18; // rbp\n  _BYTE *v19; // rdi\n  size_t v20; // rdx\n  _BYTE *v21; // rax\n  _BYTE *v22; // rdx\n  __int64 v23; // r13\n  size_t v25; // r12\n  size_t v26; // rax\n  size_t v27; // r15\n  wint_t v28; // edi\n  __int64 v29; // rdx\n  char *v30; // rax\n  wchar_t *v31; // r14\n  wchar_t v32; // edi\n  __int64 v33; // rax\n  unsigned __int64 v34; // rax\n  wchar_t *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v36; // [rsp+8h] [rbp-60h]\n  int v37; // [rsp+14h] [rbp-54h]\n  void *src; // [rsp+18h] [rbp-50h]\n  void *srca; // [rsp+18h] [rbp-50h]\n  __int64 size; // [rsp+20h] [rbp-48h]\n  char sizea; // [rsp+20h] [rbp-48h]\n  __int64 sizeb; // [rsp+20h] [rbp-48h]\n  _DWORD *v43; // [rsp+28h] [rbp-40h]\n\n  v6 = a4;\n  v7 = a6;\n  v8 = a2;\n  src = (void *)a1;\n  v36 = a3;\n  v37 = a5;\n  v9 = strlen(a1);\n  v10 = v9;\n  if ( v7 & 2 || (v25 = v9, __ctype_get_mb_cur_max() <= 1) )\n  {\nLABEL_2:\n    ptr = 0LL;\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  v26 = mbstowcs(0LL, a1, 0LL);\n  if ( v26 == -1LL )\n  {\n    if ( !(v7 & 1) )\n    {\nLABEL_36:\n      v12 = 0LL;\n      v23 = -1LL;\n      free(0LL);\n      goto LABEL_28;\n    }\n    goto LABEL_2;\n  }\n  v27 = v26 + 1;\n  size = v26 + 1;\n  ptr = (wchar_t *)malloc(size * 4);\n  if ( !ptr )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    if ( !(v7 & 1) )\n      goto LABEL_36;\nLABEL_3:\n    v13 = *v6;\n    if ( *v6 < v11 )\n    {\n      v10 = *v6;\n      v14 = 0LL;\n      goto LABEL_5;\n    }\nLABEL_30:\n    if ( v11 < v13 )\n    {\n      v15 = v37;\n      v14 = v13 - v11;\n      *v6 = v11;\n      if ( v37 )\n      {\nLABEL_6:\n        v16 = 0LL;\n        if ( v15 != 1 )\n        {\n          v16 = v14 >> 1;\n          v14 = (v14 >> 1) + (v14 & 1);\n        }\n        goto LABEL_8;\n      }\nLABEL_32:\n      v16 = v14;\n      v14 = 0LL;\nLABEL_8:\n      v17 = v14 + v10;\n      if ( v7 & 4 )\n      {\n        v17 = v10;\n        v14 = 0LL;\n      }\n      if ( v7 & 8 )\n        v16 = 0LL;\n      if ( v36 )\n      {\n        v18 = (unsigned __int64)&v8[v36 - 1];\n        v19 = v8;\n        if ( (unsigned __int64)v8 < v18 && v14 )\n        {\n          do\n            *(++v19 - 1) = 32;\n          while ( v14 + v8 - v19 && v18 > (unsigned __int64)v19 );\n        }\n        *v19 = 0;\n        v20 = v18 - (_QWORD)v19;\n        if ( v18 - (unsigned __int64)v19 > v10 )\n          v20 = v10;\n        v21 = mempcpy(v19, src, v20);\n        v22 = v21;\n        if ( v18 > (unsigned __int64)v21 && v16 )\n        {\n          do\n            *(++v22 - 1) = 32;\n          while ( &v21[v16 - (_QWORD)v22] && v18 > (unsigned __int64)v22 );\n        }\n        *v22 = 0;\n      }\n      v23 = v17 + v16;\n      goto LABEL_27;\n    }\n    v13 = v11;\n    v14 = 0LL;\nLABEL_5:\n    v15 = v37;\n    *v6 = v13;\n    if ( v37 )\n      goto LABEL_6;\n    goto LABEL_32;\n  }\n  if ( !mbstowcs(ptr, a1, v27) )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  ptr[size - 1] = 0;\n  v28 = *ptr;\n  v29 = (__int64)ptr;\n  if ( *ptr )\n  {\n    sizea = 0;\n    do\n    {\n      v43 = (_DWORD *)v29;\n      if ( !iswprint(v28) )\n      {\n        *v43 = 65533;\n        sizea = 1;\n      }\n      v29 = (__int64)(v43 + 1);\n      v28 = v43[1];\n    }\n    while ( v43[1] );\n    v11 = wcswidth(ptr, v27);\n    if ( sizea )\n    {\n      sizeb = wcstombs(0LL, ptr, 0LL) + 1;\n      v30 = (char *)malloc(sizeb);\n      goto LABEL_46;\n    }\n  }\n  else\n  {\n    v11 = wcswidth(ptr, v27);\n  }\n  v13 = *v6;\n  if ( *v6 >= v11 )\n  {\n    v12 = 0LL;\n    goto LABEL_30;\n  }\n  sizeb = v25 + 1;\n  v30 = (char *)malloc(v25 + 1);\nLABEL_46:\n  v12 = v30;\n  if ( v30 )\n  {\n    v31 = ptr;\n    v32 = *ptr;\n    srca = (void *)*v6;\n    if ( *ptr )\n    {\n      v11 = 0LL;\n      do\n      {\n        LODWORD(v33) = wcwidth(v32);\n        if ( (_DWORD)v33 == -1 )\n        {\n          *v31 = 65533;\n          v33 = 1LL;\n        }\n        else\n        {\n          v33 = (int)v33;\n        }\n        v34 = v11 + v33;\n        if ( (unsigned __int64)srca < v34 )\n          break;\n        ++v31;\n        v32 = *v31;\n        v11 = v34;\n      }\n      while ( *v31 );\n    }\n    else\n    {\n      v31 = ptr;\n      v11 = 0LL;\n    }\n    *v31 = 0;\n    src = v12;\n    v10 = wcstombs(v12, ptr, sizeb);\n    goto LABEL_3;\n  }\n  if ( v7 & 1 )\n    goto LABEL_3;\n  v23 = -1LL;\nLABEL_27:\n  free(ptr);\nLABEL_28:\n  free(v12);\n  return v23;\n}\n", 
            "funcStartAddr": "0x405530L", 
            "funcEndAddr": "0x4058cbL", 
            "funcName": "sub_405530"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405970(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_6103D8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x405970L", 
            "funcEndAddr": "0x405a09L", 
            "funcName": "sub_405970"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405A10(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_4098A0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40C3D9;\n      if ( !v5 )\n        v2 = (char *)&unk_40C3CE;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40C3D5;\n    if ( !v5 )\n      v2 = (char *)&unk_40C3D2;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x405a10L", 
            "funcEndAddr": "0x405b02L", 
            "funcName": "sub_405A10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405B10(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405B10((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405B10((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405B10((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405B10((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405B10((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405B10((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", v11);\n        v47 = sub_405A10(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_405B10(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405B10((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405B10((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405B10((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405B10((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405B10((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405B10((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", v11);\n        v47 = sub_405A10(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401b40L", 
            "funcEndAddr": "0x401b45L", 
            "funcName": "sub_405B10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405B10(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405B10((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405B10((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405B10((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405B10((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405B10((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405B10((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", v11);\n        v47 = sub_405A10(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_405B10(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_405B10((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_405B10((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_405B10((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_405B10((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_405B10((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_405B10((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409760((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_405B10((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_405B10((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405A10(\"`\", v11);\n        v47 = sub_405A10(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401b40L", 
            "funcEndAddr": "0x401b45L", 
            "funcName": "sub_405B10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D40(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // er8\n  char *v16; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v16 = a2;\n  v6 = __errno_location();\n  v7 = off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__int128 *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (__int128 *)sub_407BB0(off_6102D8);\n      v7 = off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(v5 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, v4, *(_DWORD *)v5, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)v5;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, v16, v4, v14, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n\n_BYTE *__fastcall sub_406D40(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // er8\n  char *v16; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v16 = a2;\n  v6 = __errno_location();\n  v7 = off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__int128 *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (__int128 *)sub_407BB0(off_6102D8);\n      v7 = off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(v5 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, v4, *(_DWORD *)v5, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)v5;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, v16, v4, v14, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n", 
            "funcStartAddr": "0x401b45L", 
            "funcEndAddr": "0x401b4aL", 
            "funcName": "sub_406D40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D40(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // er8\n  char *v16; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v16 = a2;\n  v6 = __errno_location();\n  v7 = off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__int128 *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (__int128 *)sub_407BB0(off_6102D8);\n      v7 = off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(v5 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, v4, *(_DWORD *)v5, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)v5;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, v16, v4, v14, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n\n_BYTE *__fastcall sub_406D40(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  unsigned __int64 *v9; // rbx\n  _BYTE *v10; // r12\n  unsigned __int64 v11; // rax\n  unsigned __int64 v12; // rsi\n  _BYTE *v13; // rax\n  int v14; // er8\n  char *v16; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v17; // [rsp+10h] [rbp-48h]\n  __int64 v18; // [rsp+10h] [rbp-48h]\n  int v19; // [rsp+18h] [rbp-40h]\n  int v20; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v16 = a2;\n  v6 = __errno_location();\n  v7 = off_6102D8;\n  v8 = v6;\n  v19 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6102F0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_407DA0();\n    if ( off_6102D8 == &xmmword_6102E0 )\n    {\n      v7 = (__int128 *)sub_407BB0(0LL);\n      off_6102D8 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_6102E0);\n    }\n    else\n    {\n      off_6102D8 = (__int128 *)sub_407BB0(off_6102D8);\n      v7 = off_6102D8;\n    }\n    memset(&v7[dword_6102F0], 0, 16LL * (a1 + 1 - dword_6102F0));\n    dword_6102F0 = a1 + 1;\n  }\n  v9 = (unsigned __int64 *)&v7[a1];\n  v10 = (_BYTE *)v9[1];\n  v20 = *(_DWORD *)(v5 + 4) | 1;\n  v17 = *v9;\n  v11 = sub_405B10(v10, *v9, a2, v4, *(_DWORD *)v5, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v17 <= v11 )\n  {\n    v12 = v11 + 1;\n    *v9 = v11 + 1;\n    if ( v10 != (_BYTE *)&unk_6103E0 )\n    {\n      v18 = v11 + 1;\n      free(v10);\n      v12 = v18;\n    }\n    v13 = (_BYTE *)sub_407B50(v12);\n    v14 = *(_DWORD *)v5;\n    v9[1] = (unsigned __int64)v13;\n    v10 = v13;\n    sub_405B10(v13, v12, v16, v4, v14, v20, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v19;\n  return v10;\n}\n", 
            "funcStartAddr": "0x401b45L", 
            "funcEndAddr": "0x401b4aL", 
            "funcName": "sub_406D40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407260(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407260(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401b4aL", 
            "funcEndAddr": "0x401b4fL", 
            "funcName": "sub_407260"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407260(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407260(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401b4aL", 
            "funcEndAddr": "0x401b4fL", 
            "funcName": "sub_407260"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4072D0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_4072D0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401b4fL", 
            "funcEndAddr": "0x401b54L", 
            "funcName": "sub_4072D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4072D0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_4072D0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_406D40(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x401b4fL", 
            "funcEndAddr": "0x401b54L", 
            "funcName": "sub_4072D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407360(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_610510;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6104E0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6104F0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_610500);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_406D40(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x407360L", 
            "funcEndAddr": "0x4073d0L", 
            "funcName": "sub_407360"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4073E0(char *a1)\n{\n  return sub_407360(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x4073e0L", 
            "funcEndAddr": "0x4073f1L", 
            "funcName": "sub_4073E0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407410(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407410(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401b54L", 
            "funcEndAddr": "0x401b59L", 
            "funcName": "sub_407410"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407410(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407410(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406D40(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401b54L", 
            "funcEndAddr": "0x401b59L", 
            "funcName": "sub_407410"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407480(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_6104E0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6104F0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_610500);\n  v9 = qword_610510;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_406D40(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x407480L", 
            "funcEndAddr": "0x4074ecL", 
            "funcName": "sub_407480"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407570(int a1, char *a2)\n{\n  return sub_406D40(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6102A0);\n}\n", 
            "funcStartAddr": "0x407570L", 
            "funcEndAddr": "0x407581L", 
            "funcName": "sub_407570"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407590(char *a1)\n{\n  return sub_406D40(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6102A0);\n}\n", 
            "funcStartAddr": "0x407590L", 
            "funcEndAddr": "0x4075a6L", 
            "funcName": "sub_407590"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4075B0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  __int64 v9; // r9\n  char *v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // r8\n  __int64 v13; // rbx\n  char *v14; // rax\n  __int64 result; // rax\n  const char *v16; // rsi\n  __int64 v17; // r8\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r8\n  __int64 v21; // r9\n  __int64 v22; // r12\n  __int64 v23; // rbx\n  char *v24; // rax\n  __int64 v25; // r9\n  __int64 v26; // r13\n  __int64 v27; // r12\n  __int64 v28; // rbx\n  char *v29; // rax\n  __int64 v30; // r14\n  __int64 v31; // r13\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r13\n  __int64 v36; // rbx\n  char *v37; // rax\n  __int64 v38; // r9\n  __int64 v39; // r8\n  __int64 v40; // r8\n  __int64 v41; // [rsp+0h] [rbp-58h]\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+8h] [rbp-50h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL, v9);\n  v10 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v10, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18, v20, v21);\n    case 2LL:\n      v22 = v7[1];\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23, v22, v25);\n    case 3LL:\n      v26 = v7[2];\n      v27 = v7[1];\n      v28 = *v7;\n      v29 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v29, v28, v27, v26);\n    case 4LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v34, v33, v32, v31);\n      return v30;\n    case 6LL:\n      v42 = v7[1];\n      v35 = v7[2];\n      v36 = *v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v38 = v35;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 7LL:\n      v39 = v7[1];\n      v44 = v7[2];\n      v36 = *v7;\n      v42 = v39;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v38 = v44;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 8LL:\n      v11 = v7[2];\n      v12 = v7[1];\n      v13 = *v7;\n      v41 = v11;\n      v43 = v12;\n      v14 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n    case 9LL:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v17 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v17;\n      goto LABEL_8;\n    default:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v40 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v40;\nLABEL_8:\n      v14 = dcgettext(0LL, v16, 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n  }\n}\n\n__int64 __fastcall sub_4075B0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  __int64 v9; // r9\n  char *v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // r8\n  __int64 v13; // rbx\n  char *v14; // rax\n  __int64 result; // rax\n  const char *v16; // rsi\n  __int64 v17; // r8\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r8\n  __int64 v21; // r9\n  __int64 v22; // r12\n  __int64 v23; // rbx\n  char *v24; // rax\n  __int64 v25; // r9\n  __int64 v26; // r13\n  __int64 v27; // r12\n  __int64 v28; // rbx\n  char *v29; // rax\n  __int64 v30; // r14\n  __int64 v31; // r13\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r13\n  __int64 v36; // rbx\n  char *v37; // rax\n  __int64 v38; // r9\n  __int64 v39; // r8\n  __int64 v40; // r8\n  __int64 v41; // [rsp+0h] [rbp-58h]\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+8h] [rbp-50h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL, v9);\n  v10 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v10, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18, v20, v21);\n    case 2LL:\n      v22 = v7[1];\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23, v22, v25);\n    case 3LL:\n      v26 = v7[2];\n      v27 = v7[1];\n      v28 = *v7;\n      v29 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v29, v28, v27, v26);\n    case 4LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v34, v33, v32, v31);\n      return v30;\n    case 6LL:\n      v42 = v7[1];\n      v35 = v7[2];\n      v36 = *v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v38 = v35;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 7LL:\n      v39 = v7[1];\n      v44 = v7[2];\n      v36 = *v7;\n      v42 = v39;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v38 = v44;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 8LL:\n      v11 = v7[2];\n      v12 = v7[1];\n      v13 = *v7;\n      v41 = v11;\n      v43 = v12;\n      v14 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n    case 9LL:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v17 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v17;\n      goto LABEL_8;\n    default:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v40 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v40;\nLABEL_8:\n      v14 = dcgettext(0LL, v16, 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n  }\n}\n", 
            "funcStartAddr": "0x401b59L", 
            "funcEndAddr": "0x401b5eL", 
            "funcName": "sub_4075B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4075B0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  __int64 v9; // r9\n  char *v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // r8\n  __int64 v13; // rbx\n  char *v14; // rax\n  __int64 result; // rax\n  const char *v16; // rsi\n  __int64 v17; // r8\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r8\n  __int64 v21; // r9\n  __int64 v22; // r12\n  __int64 v23; // rbx\n  char *v24; // rax\n  __int64 v25; // r9\n  __int64 v26; // r13\n  __int64 v27; // r12\n  __int64 v28; // rbx\n  char *v29; // rax\n  __int64 v30; // r14\n  __int64 v31; // r13\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r13\n  __int64 v36; // rbx\n  char *v37; // rax\n  __int64 v38; // r9\n  __int64 v39; // r8\n  __int64 v40; // r8\n  __int64 v41; // [rsp+0h] [rbp-58h]\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+8h] [rbp-50h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL, v9);\n  v10 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v10, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18, v20, v21);\n    case 2LL:\n      v22 = v7[1];\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23, v22, v25);\n    case 3LL:\n      v26 = v7[2];\n      v27 = v7[1];\n      v28 = *v7;\n      v29 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v29, v28, v27, v26);\n    case 4LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v34, v33, v32, v31);\n      return v30;\n    case 6LL:\n      v42 = v7[1];\n      v35 = v7[2];\n      v36 = *v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v38 = v35;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 7LL:\n      v39 = v7[1];\n      v44 = v7[2];\n      v36 = *v7;\n      v42 = v39;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v38 = v44;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 8LL:\n      v11 = v7[2];\n      v12 = v7[1];\n      v13 = *v7;\n      v41 = v11;\n      v43 = v12;\n      v14 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n    case 9LL:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v17 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v17;\n      goto LABEL_8;\n    default:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v40 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v40;\nLABEL_8:\n      v14 = dcgettext(0LL, v16, 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n  }\n}\n\n__int64 __fastcall sub_4075B0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  __int64 v9; // r9\n  char *v10; // rax\n  __int64 v11; // rax\n  __int64 v12; // r8\n  __int64 v13; // rbx\n  char *v14; // rax\n  __int64 result; // rax\n  const char *v16; // rsi\n  __int64 v17; // r8\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r8\n  __int64 v21; // r9\n  __int64 v22; // r12\n  __int64 v23; // rbx\n  char *v24; // rax\n  __int64 v25; // r9\n  __int64 v26; // r13\n  __int64 v27; // r12\n  __int64 v28; // rbx\n  char *v29; // rax\n  __int64 v30; // r14\n  __int64 v31; // r13\n  __int64 v32; // r12\n  __int64 v33; // rbx\n  char *v34; // rax\n  __int64 v35; // r13\n  __int64 v36; // rbx\n  char *v37; // rax\n  __int64 v38; // r9\n  __int64 v39; // r8\n  __int64 v40; // r8\n  __int64 v41; // [rsp+0h] [rbp-58h]\n  __int64 v42; // [rsp+0h] [rbp-58h]\n  __int64 v43; // [rsp+8h] [rbp-50h]\n  __int64 v44; // [rsp+8h] [rbp-50h]\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4, a6);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL, v9);\n  v10 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n          \"This is free software: you are free to change and redistribute it.\\n\"\n          \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v10, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18, v20, v21);\n    case 2LL:\n      v22 = v7[1];\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23, v22, v25);\n    case 3LL:\n      v26 = v7[2];\n      v27 = v7[1];\n      v28 = *v7;\n      v29 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v29, v28, v27, v26);\n    case 4LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v30 = v7[3];\n      v31 = v7[2];\n      v32 = v7[1];\n      v33 = *v7;\n      v34 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v34, v33, v32, v31);\n      return v30;\n    case 6LL:\n      v42 = v7[1];\n      v35 = v7[2];\n      v36 = *v7;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      v38 = v35;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 7LL:\n      v39 = v7[1];\n      v44 = v7[2];\n      v36 = *v7;\n      v42 = v39;\n      v37 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      v38 = v44;\n      return __fprintf_chk(stream, 1LL, v37, v36, v42, v38);\n    case 8LL:\n      v11 = v7[2];\n      v12 = v7[1];\n      v13 = *v7;\n      v41 = v11;\n      v43 = v12;\n      v14 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n    case 9LL:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v17 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v17;\n      goto LABEL_8;\n    default:\n      v16 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v40 = v7[1];\n      v41 = v7[2];\n      v13 = *v7;\n      v43 = v40;\nLABEL_8:\n      v14 = dcgettext(0LL, v16, 5);\n      return __fprintf_chk(stream, 1LL, v14, v13, v43, v41);\n  }\n}\n", 
            "funcStartAddr": "0x401b59L", 
            "funcEndAddr": "0x401b5eL", 
            "funcName": "sub_4075B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4079B0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4075B0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4075B0(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x4079b0L", 
            "funcEndAddr": "0x407a10L", 
            "funcName": "sub_4079B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407A10(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4075B0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4075B0(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x407a10L", 
            "funcEndAddr": "0x407accL", 
            "funcName": "sub_407A10"
        }, 
        {
            "decompiledFuncCode": "int sub_407AD0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40A199);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x407ad0L", 
            "funcEndAddr": "0x407b44L", 
            "funcName": "sub_407AD0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_407B50(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_407DA0();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407b50L", 
            "funcEndAddr": "0x407b6aL", 
            "funcName": "sub_407B50"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_407BB0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_407DA0();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407bb0L", 
            "funcEndAddr": "0x407be6L", 
            "funcName": "sub_407BB0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_407D50(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_407B50(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x407d50L", 
            "funcEndAddr": "0x407d78L", 
            "funcName": "sub_407D50"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_407D80(void *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)src);\n  return sub_407D50(src, v1 + 1);\n}\n", 
            "funcStartAddr": "0x407d80L", 
            "funcEndAddr": "0x407d93L", 
            "funcName": "sub_407D80"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_407DA0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(dword_610290, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x407da0L", 
            "funcEndAddr": "0x407dd1L", 
            "funcName": "sub_407DA0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_407DE0(const char *a1, size_t a2)\n{\n  char *result; // rax\n\n  result = strndup(a1, a2);\n  if ( !result )\n    sub_407DA0();\n  return result;\n}\n", 
            "funcStartAddr": "0x407de0L", 
            "funcEndAddr": "0x407df8L", 
            "funcName": "sub_407DE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407E00(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **v5; // rbx\n  int v6; // ebp\n  const char *v7; // r14\n  int *v8; // rax\n  int *v9; // r13\n  __int64 v10; // rax\n  char *v11; // r15\n  __int64 v12; // rbp\n  unsigned int v13; // er12\n  int v14; // er13\n  __int64 v16; // rsi\n  int v17; // eax\n  __int64 v18; // rax\n  char v19; // al\n  char *v20; // rsi\n  __int64 v21; // rcx\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rdi\n  __int64 v25; // rcx\n  __int64 v26; // r9\n  int v27; // edi\n  int v28; // er10\n  __int64 v29; // rcx\n  __int64 v30; // r9\n  int v31; // edi\n  __int64 v32; // rcx\n  __int64 v33; // r9\n  int v34; // edi\n  __int64 v35; // rcx\n  __int64 v36; // r9\n  int v37; // edi\n  __int64 v38; // rcx\n  __int64 v39; // r9\n  int v40; // edi\n  __int64 v41; // rcx\n  __int64 v42; // r9\n  int v43; // edi\n  __int64 *v44; // [rsp+0h] [rbp-58h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  v44 = a4;\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtol\");\n  v5 = a2;\n  v6 = a3;\n  if ( !a2 )\n    v5 = &endptr;\n  v7 = a5;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = strtol(nptr, v5, v6);\n  v11 = *v5;\n  v12 = v10;\n  if ( *v5 == nptr )\n  {\n    if ( !v7 )\n      return 4;\n    v14 = (unsigned __int8)*v11;\n    v13 = 4;\n    if ( !(_BYTE)v14 )\n      return v13;\n    v12 = 1LL;\n    v13 = 0;\n    if ( !strchr(v7, (char)v14) )\n      return 4;\nLABEL_19:\n    v18 = 142129060940101LL;\n    if ( !_bittest64(&v18, (unsigned int)(v14 - 69)) || !strchr(v7, 48) )\n    {\nLABEL_17:\n      LODWORD(v16) = 1;\n      v17 = 1024;\n      goto LABEL_18;\n    }\n    v19 = v11[1];\n    if ( v19 != 68 )\n    {\n      if ( v19 == 105 )\n      {\n        v17 = 1024;\n        LODWORD(v16) = 2 * (v11[2] == 66) + 1;\nLABEL_18:\n        switch ( (_BYTE)v14 )\n        {\n          case 0x42:\n            v16 = (int)v16;\n            if ( v12 < -9007199254740992LL )\n              goto LABEL_46;\n            if ( v12 > 0x1FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 10;\n            break;\n          case 0x45:\n            v32 = v17;\n            v16 = (int)v16;\n            v33 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_67;\n          case 0x47:\n          case 0x67:\n            v35 = v17;\n            v16 = (int)v16;\n            v36 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_74;\n          case 0x4B:\n          case 0x6B:\n            v21 = v17;\n            v16 = (int)v16;\n            v22 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_38;\n          case 0x4D:\n          case 0x6D:\n            v21 = v17;\n            v16 = (int)v16;\n            v24 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_43;\n          case 0x50:\n            v25 = v17;\n            v16 = (int)v16;\n            v26 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_53;\n          case 0x54:\n          case 0x74:\n            v29 = v17;\n            v16 = (int)v16;\n            v30 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_60;\n          case 0x59:\n            v38 = v17;\n            v16 = (int)v16;\n            v39 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_81;\n          case 0x5A:\n            v41 = v17;\n            v16 = (int)v16;\n            v42 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_88;\n          case 0x62:\n            v16 = (int)v16;\n            goto LABEL_48;\n          case 0x63:\n            v16 = (int)v16;\n            break;\n          case 0x77:\n            v16 = (int)v16;\n            if ( v12 < -4611686018427387904LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 *= 2LL;\n            break;\n          default:\n            goto LABEL_27;\n        }\nLABEL_31:\n        v20 = &v11[v16];\n        *v5 = v20;\n        if ( *v20 )\n          v13 |= 2u;\n        goto LABEL_9;\n      }\n      if ( v19 != 66 )\n      {\n        switch ( (_BYTE)v14 )\n        {\n          case 0x45:\n            v16 = 1LL;\n            v32 = 1024LL;\n            v33 = -9007199254740992LL;\nLABEL_67:\n            v34 = 6;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v33 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v32 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v32;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v34;\n            }\n            while ( v34 );\n            goto LABEL_104;\n          case 0x46:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4C:\n          case 0x4E:\n          case 0x4F:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x5B:\n          case 0x5C:\n          case 0x5D:\n          case 0x5E:\n          case 0x5F:\n          case 0x60:\n          case 0x61:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6C:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n            goto LABEL_27;\n          case 0x47:\n          case 0x67:\n            v16 = 1LL;\n            v35 = 1024LL;\n            v36 = -9007199254740992LL;\nLABEL_74:\n            v37 = 3;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v36 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v35 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v35;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v37;\n            }\n            while ( v37 );\n            goto LABEL_104;\n          case 0x4B:\n          case 0x6B:\n            v16 = 1LL;\n            v21 = 1024LL;\n            v22 = -9007199254740992LL;\nLABEL_38:\n            if ( v12 < v22 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            goto LABEL_40;\n          case 0x4D:\n          case 0x6D:\n            v16 = 1LL;\n            v21 = 1024LL;\n            v24 = -9007199254740992LL;\nLABEL_43:\n            if ( v12 < v24 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            if ( v12 > 0x7FFFFFFFFFFFFFFFLL / v21 )\n              goto LABEL_105;\n            v12 *= v21;\n            if ( v12 >= v24 )\n            {\nLABEL_40:\n              if ( v23 < v12 )\n              {\nLABEL_105:\n                v12 = 0x7FFFFFFFFFFFFFFFLL;\n                v13 = 1;\n              }\n              else\n              {\n                v12 *= v21;\n              }\n            }\n            else\n            {\nLABEL_46:\n              v12 = 0x8000000000000000LL;\n              v13 = 1;\n            }\n            break;\n          case 0x50:\n            v16 = 1LL;\n            v25 = 1024LL;\n            v26 = -9007199254740992LL;\nLABEL_53:\n            v27 = 5;\n            v28 = 0;\n            do\n            {\n              if ( v26 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v25 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v25;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v27;\n            }\n            while ( v27 );\n            goto LABEL_104;\n          case 0x54:\n          case 0x74:\n            v16 = 1LL;\n            v29 = 1024LL;\n            v30 = -9007199254740992LL;\nLABEL_60:\n            v31 = 4;\n            v28 = 0;\n            do\n            {\n              if ( v30 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v29 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v29;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v31;\n            }\n            while ( v31 );\n            goto LABEL_104;\n          case 0x59:\n            v16 = 1LL;\n            v38 = 1024LL;\n            v39 = -9007199254740992LL;\nLABEL_81:\n            v40 = 8;\n            v28 = 0;\n            do\n            {\n              if ( v39 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v38 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v38;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v40;\n            }\n            while ( v40 );\n            goto LABEL_104;\n          case 0x5A:\n            v16 = 1LL;\n            v41 = 1024LL;\n            v42 = -9007199254740992LL;\nLABEL_88:\n            v43 = 7;\n            v28 = 0;\n            do\n            {\n              if ( v42 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v41 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v41;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v43;\n            }\n            while ( v43 );\nLABEL_104:\n            v13 |= v28;\n            goto LABEL_31;\n          case 0x62:\n            v16 = 1LL;\nLABEL_48:\n            if ( v12 < -18014398509481984LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 9;\n            break;\n          case 0x63:\n            v16 = 1LL;\n            goto LABEL_31;\n          default:\n            goto LABEL_17;\n        }\n        goto LABEL_31;\n      }\n    }\n    LODWORD(v16) = 2;\n    v17 = 1000;\n    goto LABEL_18;\n  }\n  if ( *v9 )\n  {\n    v13 = 4;\n    if ( *v9 != 34 )\n      return v13;\n    v13 = 1;\n  }\n  else\n  {\n    v13 = 0;\n  }\n  if ( v7 )\n  {\n    v14 = (unsigned __int8)*v11;\n    if ( (_BYTE)v14 )\n    {\n      if ( !strchr(v7, (char)v14) )\n      {\nLABEL_27:\n        v13 |= 2u;\n        *v44 = v12;\n        return v13;\n      }\n      goto LABEL_19;\n    }\n  }\nLABEL_9:\n  *v44 = v12;\n  return v13;\n}\n", 
            "funcStartAddr": "0x407e00L", 
            "funcEndAddr": "0x408542L", 
            "funcName": "sub_407E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408550(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // er12\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // er9\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  int base; // [rsp+0h] [rbp-58h]\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, v5, base, 0);\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(v7, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v15 = (unsigned __int8)**v5;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *v5;\n      v26 = strchr(v7, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_39:\n        *v6 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      v19 = 142129060940101LL;\n      if ( !_bittest64(&v19, (unsigned int)(v15 - 69)) || (v37 = v18, v20 = strchr(v7, 48), v18 = v37, !v20) )\n      {\nLABEL_26:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_27;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_27:\n          switch ( (_BYTE)v15 )\n          {\n            case 0x42:\n              if ( v13 >> 54 )\n                goto LABEL_37;\n              v13 <<= 10;\n              break;\n            case 0x45:\n              goto LABEL_70;\n            case 0x47:\n            case 0x67:\n              goto LABEL_76;\n            case 0x4B:\n            case 0x6B:\n              goto LABEL_36;\n            case 0x4D:\n            case 0x6D:\n              goto LABEL_29;\n            case 0x50:\n              goto LABEL_64;\n            case 0x54:\n            case 0x74:\n              goto LABEL_58;\n            case 0x59:\n              goto LABEL_52;\n            case 0x5A:\n              goto LABEL_46;\n            case 0x62:\n              goto LABEL_43;\n            case 0x63:\n              break;\n            case 0x77:\n              if ( (v13 & 0x8000000000000000LL) != 0LL )\n                goto LABEL_37;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_39;\n          }\nLABEL_32:\n          v24 = &v18[v22];\n          *v5 = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (_BYTE)v15 )\n          {\n            case 0x45:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_70:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_50;\n            case 0x46:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4C:\n            case 0x4E:\n            case 0x4F:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6C:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n              goto LABEL_39;\n            case 0x47:\n            case 0x67:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_76:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_32;\n            case 0x4B:\n            case 0x6B:\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_36:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_32;\n              goto LABEL_37;\n            case 0x4D:\n            case 0x6D:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_29:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_37;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 0x50:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_64:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_50;\n            case 0x54:\n            case 0x74:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_58:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_50;\n            case 0x59:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_52:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_50;\n            case 0x5A:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_46:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_50:\n              v14 |= v28;\n              break;\n            case 0x62:\n              v22 = 1;\nLABEL_43:\n              if ( v13 >> 55 )\n              {\nLABEL_37:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 0x63:\n              v22 = 1;\n              goto LABEL_32;\n            default:\n              goto LABEL_26;\n          }\n          goto LABEL_32;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_27;\n    }\n  }\nLABEL_13:\n  *v6 = v13;\n  return v14;\n}\n", 
            "funcStartAddr": "0x408550L", 
            "funcEndAddr": "0x408984L", 
            "funcName": "sub_408550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408990(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x408990L", 
            "funcEndAddr": "0x408a6fL", 
            "funcName": "sub_408990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408A70(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  __int64 v34; // r9\n  FILE *v35; // rdi\n  char **v36; // rbx\n  _BYTE *v37; // rbp\n  __int64 v38; // r12\n  const char *v39; // r12\n  __int64 v40; // rbp\n  char *v41; // rax\n  char **v42; // [rsp+0h] [rbp-88h]\n  int v43; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v47; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v49; // [rsp+38h] [rbp-50h]\n  char v50; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+40h] [rbp-48h]\n  int v52; // [rsp+44h] [rbp-44h]\n  int v53; // [rsp+48h] [rbp-40h]\n\n  v51 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v42 = a4;\n  v47 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v43 = a6;\n  v50 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v43 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v50), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v52 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v49 = 0;\n  v53 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v42;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v43\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v49 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v53 = 1;\n            ptr[v52] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v49 = 1;\n        }\n        else\n        {\n          v49 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v52 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v49 )\n  {\n    if ( a8 )\n    {\n      if ( v49 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v35 = stderr;\n        v36 = v42;\n        v37 = ptr;\n        v38 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v37 )\n          {\n            __fprintf_chk(v35, 1LL, \" '%s%s'\", a9, *v36, v34);\n            v35 = stderr;\n          }\n          ++v37;\n          v36 += 4;\n        }\n        while ( (_BYTE *)v38 != v37 );\n        fputc(10, v35);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v53 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v52;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v51 )\n      {\n        if ( a8 )\n        {\n          v39 = *v12;\n          v40 = *a2;\n          v41 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v41, v40, a9, v39);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v47 )\n          *v47 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408a70L", 
            "funcEndAddr": "0x40908cL", 
            "funcName": "sub_408A70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409090(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // r9\n  __int64 v42; // rbp\n  char *v43; // rax\n  __int64 v44; // r9\n  __int64 v45; // rbp\n  char *v46; // rax\n  __int64 v47; // r9\n  char **v48; // [rsp+8h] [rbp-60h]\n  _DWORD *v49; // [rsp+10h] [rbp-58h]\n  char v50; // [rsp+1Ch] [rbp-4Ch]\n  int v51; // [rsp+1Ch] [rbp-4Ch]\n  int v52; // [rsp+1Ch] [rbp-4Ch]\n  int v53; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v54; // [rsp+20h] [rbp-48h]\n  __int64 v55; // [rsp+28h] [rbp-40h]\n\n  v48 = a4;\n  v49 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v53 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v53;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v51 = a6;\n        sub_408990(a2, a7);\n        v26 = *a7;\n        a6 = v51;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_408990((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v48 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_408A70(a1, v11, v12, v48, v49, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v52 = a6, v31 = strchr(v12, v30), a6 = v52, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_408A70(a1, v11, v12, v48, v49, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v54 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v55 = (__int64)(v13 + 1);\n  v50 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v55;\n  if ( !v54[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v50 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v48 && v24 == 59 )\n    {\n      if ( v54[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_408A70(a1, v11, v12, v48, v49, 0, a7, v8, (__int64)&unk_40DC98);\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v45 = *v11;\n        v46 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v46, v45, v21, v47);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v54[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v55;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v55;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v42 = *v11;\n            v43 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v43, v42, v21, v44);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21, v41);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x409090L", 
            "funcEndAddr": "0x409656L", 
            "funcName": "sub_409090"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409660(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_610520 = dword_6102FC;\n  dword_610524 = dword_6102F8;\n  result = sub_409090(a1, a2, a3, a4, a5, a6, &dword_610520, a7);\n  dword_6102FC = dword_610520;\n  nptr = (char *)qword_610530;\n  dword_6102F4 = dword_610528;\n  return result;\n}\n", 
            "funcStartAddr": "0x409660L", 
            "funcEndAddr": "0x4096b6L", 
            "funcName": "sub_409660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4096C0(int a1, __int64 a2, char *a3)\n{\n  return sub_409660(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x4096c0L", 
            "funcEndAddr": "0x4096d8L", 
            "funcName": "sub_4096C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4096E0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409660(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x4096e0L", 
            "funcEndAddr": "0x4096f3L", 
            "funcName": "sub_4096E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409700(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409090(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x409700L", 
            "funcEndAddr": "0x409715L", 
            "funcName": "sub_409700"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409720(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409660(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x409720L", 
            "funcEndAddr": "0x409736L", 
            "funcName": "sub_409720"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409740(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409090(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x409740L", 
            "funcEndAddr": "0x409758L", 
            "funcName": "sub_409740"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_409760(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_409840(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x409760L", 
            "funcEndAddr": "0x4097daL", 
            "funcName": "sub_409760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4097E0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409E10(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x4097e0L", 
            "funcEndAddr": "0x40983dL", 
            "funcName": "sub_4097E0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_409840(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409840L", 
            "funcEndAddr": "0x40989eL", 
            "funcName": "sub_409840"
        }, 
        {
            "decompiledFuncCode": "const char *sub_4098A0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = qword_610558;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_610558 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          qword_610558 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_409E10(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409E10(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x4098a0L", 
            "funcEndAddr": "0x409e02L", 
            "funcName": "sub_4098A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409E10(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_409E90(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409e10L", 
            "funcEndAddr": "0x409e8bL", 
            "funcName": "sub_409E10"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409E90(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_409ED0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x409e90L", 
            "funcEndAddr": "0x409ed0L", 
            "funcName": "sub_409E90"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409ED0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x409ed0L", 
            "funcEndAddr": "0x409f27L", 
            "funcName": "sub_409ED0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x409f30L", 
            "funcEndAddr": "0x409f8dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x409f90L", 
            "funcEndAddr": "0x409f91L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409FA0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_610248 )\n    v1 = (void *)unk_610248;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x409fa0L", 
            "funcEndAddr": "0x409fb8L", 
            "funcName": "sub_409FA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409FB8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_60FE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x409fb8L", 
            "funcEndAddr": "0x409fd8L", 
            "funcName": "sub_409FB8"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 74, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}