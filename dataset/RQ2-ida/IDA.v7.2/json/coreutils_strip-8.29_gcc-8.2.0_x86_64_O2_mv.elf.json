{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  char **v3; // rbx\n  int v4; // eax\n  __int64 v5; // r12\n  char *v6; // r13\n  char *v7; // r15\n  char v8; // r14\n  int v9; // eax\n  char *v10; // rax\n  int v11; // ebp\n  char **v12; // rbx\n  char *v13; // rax\n  int v14; // eax\n  int v15; // ebp\n  __int64 v17; // rax\n  __int64 v18; // r12\n  char *v19; // rdi\n  const char **v20; // r13\n  int v21; // er8\n  char *v22; // rax\n  char *v23; // rax\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbp\n  char *v27; // rbx\n  int *v28; // rax\n  const char *v29; // rsi\n  char *v30; // rax\n  __int64 v31; // rbx\n  char *v32; // rax\n  char *v33; // rax\n  __int64 v34; // rbx\n  char *v35; // rax\n  char *errnum; // [rsp+8h] [rbp-120h]\n  int errnuma; // [rsp+8h] [rbp-120h]\n  int v38; // [rsp+10h] [rbp-118h]\n  int v39; // [rsp+14h] [rbp-114h]\n  __int64 v40; // [rsp+18h] [rbp-110h]\n  __int64 v41; // [rsp+20h] [rbp-108h]\n  __int16 v42; // [rsp+28h] [rbp-100h]\n  __int64 v43; // [rsp+2Ch] [rbp-FCh]\n  __int64 v44; // [rsp+34h] [rbp-F4h]\n  char v45; // [rsp+3Ch] [rbp-ECh]\n  __int16 v46; // [rsp+3Dh] [rbp-EBh]\n  bool v47; // [rsp+3Fh] [rbp-E9h]\n  char v48; // [rsp+40h] [rbp-E8h]\n  int v49; // [rsp+44h] [rbp-E4h]\n  __int64 v50; // [rsp+48h] [rbp-E0h]\n  __int64 v51; // [rsp+50h] [rbp-D8h]\n  struct stat stat_buf; // [rsp+60h] [rbp-C8h]\n\n  v3 = a2;\n  sub_40C350(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_415170(sub_40A6C0);\n  sub_4053C0(&v38);\n  v49 = 1;\n  v43 = 72339069031481600LL;\n  v44 = 281474993487872LL;\n  v40 = 8589934596LL;\n  v45 = 0;\n  v39 = 2;\n  v41 = 0LL;\n  v42 = 1;\n  v4 = isatty(0);\n  v48 = 0;\n  v50 = 0LL;\n  v47 = v4 != 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v46 = 0;\n  v7 = 0LL;\n  v8 = 0;\n  v51 = 0LL;\n  errnum = 0LL;\n  do\n  {\n    while ( 1 )\n    {\n      while ( 1 )\n      {\n        while ( 1 )\n        {\n          v9 = sub_413690(a1, a2, \"bfint:uvS:TZ\", &off_415DC0, 0LL);\n          if ( v9 == -1 )\n            goto LABEL_38;\n          if ( v9 != 102 )\n            break;\n          LODWORD(v40) = 1;\n        }\n        if ( v9 > 102 )\n          break;\n        if ( v9 == 83 )\n        {\n          v8 = 1;\n          errnum = filename;\n        }\n        else\n        {\n          if ( v9 <= 83 )\n          {\n            if ( v9 == -131 )\n            {\n              sub_40FF60((char)stdout);\n              exit(0);\n            }\n            if ( v9 == -130 )\n              sub_4036B0(0);\nLABEL_22:\n            sub_4036B0(1);\n          }\n          if ( v9 != 90 )\n          {\n            if ( v9 == 98 )\n            {\n              v8 = 1;\n              if ( filename )\n                v7 = filename;\n            }\n            else\n            {\n              if ( v9 != 84 )\n                goto LABEL_22;\n              v5 = 1LL;\n            }\n          }\n        }\n      }\n      if ( v9 == 116 )\n        break;\n      if ( v9 <= 116 )\n      {\n        if ( v9 == 105 )\n        {\n          LODWORD(v40) = 3;\n        }\n        else\n        {\n          if ( v9 != 110 )\n            goto LABEL_22;\n          LODWORD(v40) = 2;\n        }\n      }\n      else if ( v9 == 118 )\n      {\n        HIBYTE(v46) = 1;\n      }\n      else if ( v9 >= 118 )\n      {\n        if ( v9 != 128 )\n          goto LABEL_22;\n        byte_61D4F0 = 1;\n      }\n      else\n      {\n        LOBYTE(v46) = 1;\n      }\n    }\n    if ( v6 )\n    {\n      v33 = dcgettext(0LL, \"multiple target directories specified\", 5);\n      error(1, 0, v33);\n      goto LABEL_77;\n    }\n    if ( __xstat(1, filename, &stat_buf) )\n    {\n      v26 = sub_40DD80(4LL, filename);\n      v27 = dcgettext(0LL, \"failed to access %s\", 5);\n      v28 = __errno_location();\n      error(1, *v28, v27, v26);\nLABEL_71:\n      v29 = \"missing file operand\";\nLABEL_72:\n      v30 = dcgettext(0LL, v29, 5);\n      error(0, 0, v30);\n      goto LABEL_22;\n    }\n    v6 = filename;\n  }\n  while ( (stat_buf.st_mode & 0xF000) == 0x4000 );\n  v3 = (char **)sub_40DD80(4LL, filename);\n  v10 = dcgettext(0LL, \"target %s is not a directory\", 5);\n  error(1, 0, v10, v3);\nLABEL_38:\n  v11 = a1 - dword_61D47C;\n  v12 = &v3[dword_61D47C];\n  if ( (v6 == 0LL) >= (int)(a1 - dword_61D47C) )\n  {\nLABEL_68:\n    if ( v11 == 1 )\n    {\n      v24 = sub_40DD80(4LL, *v12);\n      v25 = dcgettext(0LL, \"missing destination file operand after %s\", 5);\n      error(0, 0, v25, v24);\n      goto LABEL_22;\n    }\n    goto LABEL_71;\n  }\n  if ( !(_BYTE)v5 )\n  {\n    if ( v6 )\n    {\n      if ( v8 )\n        goto LABEL_43;\n      v38 = 0;\n      sub_40A040(errnum);\n      sub_409750();\n      goto LABEL_46;\n    }\n    if ( v11 == 1 )\n      __assert_fail(\"2 <= n_files\", \"src/mv.c\", 0x1C6u, \"main\");\n    v20 = (const char **)&v12[v11 - 1];\n    v5 = (__int64)*v20;\n    if ( !__xstat(1, *v20, &stat_buf) )\n      goto LABEL_63;\n    v21 = *__errno_location();\n    if ( !v21 )\n      goto LABEL_63;\n    if ( v21 == 2 )\n    {\n      do\n      {\n        if ( v11 == 2 )\n          goto LABEL_42;\n        v12 = (char **)sub_40DD80(4LL, *v20);\n        v22 = dcgettext(0LL, \"target %s is not a directory\", 5);\n        error(1, 0, v22, v12);\nLABEL_63:\n        ;\n      }\n      while ( (stat_buf.st_mode & 0xF000) != 0x4000 );\n      v6 = v12[--v11];\n      v14 = 0;\n      if ( v8 )\n      {\nLABEL_43:\n        if ( (_DWORD)v40 == 2 )\n        {\n          v29 = \"options --backup and --no-clobber are mutually exclusive\";\n          goto LABEL_72;\n        }\n        v13 = dcgettext(0LL, \"backup type\", 5);\n        v14 = sub_40A5F0(v13, v7);\n      }\n      v38 = v14;\n      sub_40A040(errnum);\n      sub_409750();\n      if ( !v6 )\n        goto LABEL_56;\nLABEL_46:\n      if ( v11 == 1 )\n      {\n        LOBYTE(v15) = sub_403620(*v12, v6, 1LL, &v38);\n      }\n      else\n      {\n        sub_405360(&v38);\n        v17 = (unsigned int)(v11 - 1);\n        v15 = 1;\n        v18 = (__int64)&v12[v17 + 1];\n        do\n        {\n          v19 = *v12;\n          ++v12;\n          v15 &= sub_403620(v19, v6, 1LL, &v38);\n        }\n        while ( v12 != (char **)v18 );\n      }\n      return (unsigned __int8)v15 ^ 1u;\n    }\nLABEL_77:\n    errnuma = v21;\n    v34 = sub_40DD80(4LL, v5);\n    v35 = dcgettext(0LL, \"failed to access %s\", 5);\n    error(1, errnuma, v35, v34);\n    start();\n  }\n  if ( v6 )\n  {\n    v23 = dcgettext(0LL, \"cannot combine --target-directory (-t) and --no-target-directory (-T)\", 5);\n    error(1, 0, v23);\n    goto LABEL_68;\n  }\n  if ( v11 > 2 )\n  {\n    v31 = sub_40DD80(4LL, v12[2]);\n    v32 = dcgettext(0LL, \"extra operand %s\", 5);\n    error(0, 0, v32, v31);\n    sub_4036B0(1);\n  }\nLABEL_42:\n  v6 = 0LL;\n  if ( v8 )\n    goto LABEL_43;\n  v38 = 0;\n  sub_40A040(errnum);\n  sub_409750();\nLABEL_56:\n  LOBYTE(v15) = sub_403620(*v12, v12[1], 0LL, &v38);\n  return (unsigned __int8)v15 ^ 1u;\n}\n", 
            "funcStartAddr": "0x402dd0L", 
            "funcEndAddr": "0x403430L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x403430L", 
            "funcEndAddr": "0x40345bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "void *sub_40345B()\n{\n  void *result; // rax\n\n  result = &unk_61D488;\n  if ( &unk_61D488 != &unk_61D488 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40345bL", 
            "funcEndAddr": "0x40347aL", 
            "funcName": "sub_40345B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40347A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40347aL", 
            "funcEndAddr": "0x4034b1L", 
            "funcName": "sub_40347A"
        }, 
        {
            "decompiledFuncCode": "void *sub_4034B1()\n{\n  void *result; // rax\n\n  if ( !byte_61D4C8 )\n  {\n    while ( qword_61D4D0 < (unsigned __int64)(&qword_61CE48 - qword_61CE40 - 1) )\n      ((void (*)(void))qword_61CE40[++qword_61D4D0])();\n    result = sub_40345B();\n    byte_61D4C8 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4034b1L", 
            "funcEndAddr": "0x403508L", 
            "funcName": "sub_4034B1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403508()\n{\n  return sub_40347A();\n}\n", 
            "funcStartAddr": "0x403508L", 
            "funcEndAddr": "0x40350dL", 
            "funcName": "sub_403508"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_403510(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  char result; // al\n  char v5; // al\n  int v6; // eax\n  __int64 v7; // rbp\n  char *v8; // rbx\n  int *v9; // rax\n  char v10; // [rsp+Eh] [rbp-4Ah]\n  char v11; // [rsp+Fh] [rbp-49h]\n  __int64 v12; // [rsp+10h] [rbp-48h]\n  __int64 v13; // [rsp+18h] [rbp-40h]\n  char v14; // [rsp+20h] [rbp-38h]\n  int v15; // [rsp+24h] [rbp-34h]\n  __int16 v16; // [rsp+28h] [rbp-30h]\n  char v17; // [rsp+2Ah] [rbp-2Eh]\n  __int64 v18; // [rsp+30h] [rbp-28h]\n  __int16 v19; // [rsp+38h] [rbp-20h]\n  char v20; // [rsp+3Ah] [rbp-1Eh]\n\n  v3 = a3;\n  result = sub_4094D0(a1, a2, 0LL, a3, &v10, &v11);\n  if ( result )\n  {\n    if ( v10 )\n      return 0;\n    if ( v11 != 1 && a1 )\n    {\n      v14 = 0;\n      v15 = 5;\n      v16 = 256;\n      v17 = 1;\n      v19 = 0;\n      v20 = 1;\n      v18 = sub_40E240(&unk_61D4E0);\n      if ( v18 )\n      {\n        v5 = *(_BYTE *)(v3 + 46);\n        v12 = a1;\n        v13 = 0LL;\n        HIBYTE(v19) = v5;\n        v6 = sub_4041B0(&v12, &v14);\n        if ( (unsigned int)(v6 - 2) <= 2 )\n          return v6 != 4;\n      }\n      else\n      {\n        v7 = sub_40DD80(4LL, \"/\");\n        v8 = dcgettext(0LL, \"failed to get attributes of %s\", 5);\n        v9 = __errno_location();\n        error(1, *v9, v8, v7);\n      }\n      __assert_fail(\"VALID_STATUS (status)\", \"src/mv.c\", 0xECu, \"do_move\");\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403510L", 
            "funcEndAddr": "0x403620L", 
            "funcName": "sub_403510"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_403620(__int64 a1, __int64 a2, char a3, __int64 a4)\n{\n  char v4; // r13\n  __int64 v5; // r12\n  __int64 v7; // rax\n  void *v8; // rbp\n  char v9; // bl\n\n  v4 = a3;\n  v5 = a4;\n  if ( byte_61D4F0 )\n    ((void (*)(void))sub_40AA90)();\n  if ( !v4 )\n    return sub_403510(a1, a2, v5);\n  v7 = sub_40AA00(a1);\n  v8 = (void *)sub_40AEB0(a2, v7, 0LL);\n  sub_40AA90(v8);\n  v9 = sub_403510(a1, (__int64)v8, v5);\n  free(v8);\n  return v9;\n}\n", 
            "funcStartAddr": "0x403620L", 
            "funcEndAddr": "0x4036afL", 
            "funcName": "sub_403620"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_4036B0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  const char **v22; // rax\n  char *v23; // rbp\n  char *v24; // rax\n  __int64 v25; // r8\n  char *v26; // rax\n  char *v27; // r12\n  char *v28; // rax\n  __int64 v29; // r8\n  char *v30; // rax\n  __int64 v31; // r8\n  char *v32; // rax\n  __int64 v33; // r8\n  char *v34; // rax\n  char *v35; // rax\n  __int64 v36; // r8\n  char *v37; // rax\n  __int64 v38; // rcx\n  __int64 v39; // r8\n  const char *v40; // [rsp+0h] [rbp-88h]\n  const char *v41; // [rsp+8h] [rbp-80h]\n  const char *v42; // [rsp+10h] [rbp-78h]\n  const char *v43; // [rsp+18h] [rbp-70h]\n  const char *v44; // [rsp+20h] [rbp-68h]\n  const char *v45; // [rsp+28h] [rbp-60h]\n  const char *v46; // [rsp+30h] [rbp-58h]\n  const char *v47; // [rsp+38h] [rbp-50h]\n  const char *v48; // [rsp+40h] [rbp-48h]\n  const char *v49; // [rsp+48h] [rbp-40h]\n  const char *v50; // [rsp+50h] [rbp-38h]\n  const char *v51; // [rsp+58h] [rbp-30h]\n  __int64 v52; // [rsp+60h] [rbp-28h]\n  __int64 v53; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_61D940;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(\n         0LL,\n         \"Usage: %s [OPTION]... [-T] SOURCE DEST\\n\"\n         \"  or:  %s [OPTION]... SOURCE... DIRECTORY\\n\"\n         \"  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n\",\n         5);\n  __printf_chk(1LL, v3, v1, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"      --backup[=CONTROL]       make a backup of each existing destination file\\n\"\n         \"  -b                           like --backup but does not accept an argument\\n\"\n         \"  -f, --force                  do not prompt before overwriting\\n\"\n         \"  -i, --interactive            prompt before overwrite\\n\"\n         \"  -n, --no-clobber             do not overwrite an existing file\\n\"\n         \"If you specify more than one of -i, -f, -n, only the final one takes effect.\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\\n\"\n          \"                                 argument\\n\"\n          \"  -S, --suffix=SUFFIX          override the usual backup suffix\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -t, --target-directory=DIRECTORY  move all SOURCE arguments into DIRECTORY\\n\"\n          \"  -T, --no-target-directory    treat DEST as a normal file\\n\"\n          \"  -u, --update                 move only when the SOURCE file is newer\\n\"\n          \"                                 than the destination file or when the\\n\"\n          \"                                 destination file is missing\\n\"\n          \"  -v, --verbose                explain what is being done\\n\"\n          \"  -Z, --context                set SELinux security context of destination\\n\"\n          \"                                 file to default type\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\n\"\n          \"The version control method may be selected via the --backup option or through\\n\"\n          \"the VERSION_CONTROL environment variable.  Here are the values:\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"  none, off       never make backups (even if --backup is given)\\n\"\n          \"  numbered, t     make numbered backups\\n\"\n          \"  existing, nil   numbered if numbered backups exist, simple otherwise\\n\"\n          \"  simple, never   always make simple backups\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v40 = \"[\";\n  v22 = &v40;\n  v41 = \"test invocation\";\n  v42 = \"coreutils\";\n  v43 = \"Multi-call invocation\";\n  v44 = \"sha224sum\";\n  v45 = \"sha2 utilities\";\n  v46 = \"sha256sum\";\n  v47 = \"sha2 utilities\";\n  v48 = \"sha384sum\";\n  v49 = \"sha2 utilities\";\n  v50 = \"sha512sum\";\n  v51 = \"sha2 utilities\";\n  v52 = 0LL;\n  v53 = 0LL;\n  do\n    v22 += 2;\n  while ( *v22 && strcmp(\"mv\", *v22) );\n  v23 = (char *)v22[1];\n  if ( v23 )\n  {\n    v24 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v24, &unk_41525C, \"https://www.gnu.org/software/coreutils/\", v25);\n    v26 = setlocale(5, 0LL);\n    if ( !v26 || !strncmp(v26, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v32 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v32, &unk_41525C, \"https://www.gnu.org/software/coreutils/\", v33);\n    v34 = setlocale(5, 0LL);\n    if ( !v34 || !strncmp(v34, \"en_\", 3uLL) )\n    {\n      v23 = \"mv\";\n      v35 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v27 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v35, \"https://www.gnu.org/software/coreutils/\", \"mv\", v36);\nLABEL_12:\n      v30 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v30, v23, v27, v31);\nLABEL_3:\n      exit(status);\n    }\n    v23 = \"mv\";\n  }\n  v37 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v37, \"mv\", v38, v39);\nLABEL_10:\n  v27 = \"Multi-call invocation\" + 10;\n  v28 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v28, \"https://www.gnu.org/software/coreutils/\", \"mv\", v29);\n  if ( v23 != \"mv\" )\n    v27 = \"\";\n  goto LABEL_12;\n}\n", 
            "funcStartAddr": "0x4036b0L", 
            "funcEndAddr": "0x403a75L", 
            "funcName": "sub_4036B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403A80(__int64 a1, __int64 a2, _BYTE *a3, char a4)\n{\n  char v4; // r13\n  _BYTE *v5; // r12\n  int *v6; // rax\n  unsigned __int64 v7; // rdx\n  int *v8; // r13\n  __int64 result; // rax\n  __int64 v10; // rbp\n  char *v11; // rax\n  _QWORD *i; // rax\n  __int64 v13; // rax\n  int v14; // eax\n  __int64 v15; // rbx\n  __int64 v16; // rcx\n  char *v17; // rsi\n  __int64 v18; // r8\n  __int64 v19; // [rsp+0h] [rbp-B8h]\n\n  v4 = a4;\n  v5 = a3;\n  if ( unlinkat(*(_DWORD *)(a1 + 44), *(const char **)(a2 + 48), (a4 != 0) << 9) )\n  {\n    v6 = __errno_location();\n    v7 = (unsigned int)*v6;\n    v8 = v6;\n    if ( (_DWORD)v7 == 30 )\n    {\n      if ( !__fxstatat(1, *(_DWORD *)(a1 + 44), *(const char **)(a2 + 48), (struct stat *)&v19, 256)\n        || (v7 = (unsigned int)*v8, (_DWORD)v7 != 2) )\n      {\n        *v8 = 30;\n        goto LABEL_9;\n      }\n      result = 2LL;\n      if ( *v5 )\n        return result;\n      if ( *(_WORD *)(a2 + 112) != 4 )\n        goto LABEL_9;\n      goto LABEL_18;\n    }\n    if ( *v5 )\n    {\n      result = 2LL;\n      if ( (_DWORD)v7 == 20 )\n        return result;\n      if ( (int)v7 <= 20 )\n      {\n        if ( (_DWORD)v7 == 2 )\n          return result;\n        if ( *(_WORD *)(a2 + 112) != 4 )\n          goto LABEL_9;\nLABEL_17:\n        if ( (unsigned int)v7 > 0x27 )\n          goto LABEL_9;\nLABEL_18:\n        v13 = 549759090688LL;\n        if ( _bittest64(&v13, v7) )\n        {\n          v14 = *(_DWORD *)(a2 + 64);\n          if ( v14 == 1 || v14 == 13 )\n            *v8 = v14;\n        }\n        goto LABEL_9;\n      }\n      if ( (_DWORD)v7 == 22 || (_DWORD)v7 == 84 )\n        return result;\n    }\n    if ( *(_WORD *)(a2 + 112) != 4 )\n    {\nLABEL_9:\n      v10 = sub_40DD80(4LL, *(_QWORD *)(a2 + 56));\n      v11 = dcgettext(0LL, \"cannot remove %s\", 5);\n      error(0, *v8, v11, v10);\n      for ( i = *(_QWORD **)(a2 + 8); i[11] >= 0LL; i = (_QWORD *)i[1] )\n      {\n        if ( i[4] )\n          break;\n        i[4] = 1LL;\n      }\n      return 4LL;\n    }\n    goto LABEL_17;\n  }\n  result = 2LL;\n  if ( v5[25] )\n  {\n    v15 = sub_40DD80(4LL, *(_QWORD *)(a2 + 56));\n    if ( v4 )\n      v17 = dcgettext(0LL, \"removed directory %s\\n\", 5);\n    else\n      v17 = dcgettext(0LL, \"removed %s\\n\", 5);\n    __printf_chk(1LL, v17, v15, v16, v18);\n    result = 2LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403a80L", 
            "funcEndAddr": "0x403c89L", 
            "funcName": "sub_403A80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403C90(int fildes, char *filename, struct stat *stat_buf)\n{\n  __off_t v3; // rax\n  struct stat *v4; // rbx\n  int *v6; // rax\n  __ino_t v7; // rcx\n  int v8; // edx\n\n  v3 = stat_buf->st_size;\n  v4 = stat_buf;\n  if ( v3 == -1 )\n  {\n    if ( __fxstatat(1, fildes, filename, stat_buf, 256) )\n    {\n      v4->st_size = -2LL;\n      v6 = __errno_location();\n      v7 = *v6;\n      v4->st_ino = v7;\n      v8 = v7;\n      goto LABEL_6;\n    }\n    v3 = v4->st_size;\n  }\n  if ( v3 >= 0 )\n    return 0LL;\n  v6 = __errno_location();\n  v8 = v4->st_ino;\nLABEL_6:\n  *v6 = v8;\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x403c90L", 
            "funcEndAddr": "0x403d00L", 
            "funcName": "sub_403C90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403D00(__int64 a1, _QWORD *a2, unsigned __int8 a3, __int64 a4, int a5, int *a6)\n{\n  __int64 v6; // rbp\n  int v7; // edi\n  char *v8; // r13\n  int *v9; // r12\n  int v10; // ebx\n  int v11; // eax\n  DIR *v12; // r14\n  struct dirent *v13; // rax\n  int v14; // eax\n  int v15; // eax\n  int v16; // er12\n  int v17; // er15\n  __int64 v18; // rbp\n  char *v19; // rax\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  __int64 v24; // rbp\n  char *v25; // rdx\n  char v26; // al\n  int v27; // eax\n  char *v28; // rbp\n  int *v29; // rax\n  __int64 v30; // [rsp+8h] [rbp-E0h]\n  int v31; // [rsp+14h] [rbp-D4h]\n  int v32; // [rsp+18h] [rbp-D0h]\n  int *v33; // [rsp+18h] [rbp-D0h]\n  int v34; // [rsp+18h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+20h] [rbp-C8h]\n\n  v6 = a4;\n  v7 = *(_DWORD *)(a1 + 44);\n  v31 = a5;\n  v8 = (char *)a2[6];\n  v30 = a2[7];\n  if ( a6 )\n  {\n    *a6 = 2;\n    v9 = a6;\n    stat_buf.st_size = -1LL;\n    v10 = 4 * (a3 != 0);\n    v11 = openat(v7, v8, 198912);\n    if ( v11 < 0 )\n      goto LABEL_8;\n    v32 = v11;\n    v12 = fdopendir(v11);\n    if ( !v12 )\n    {\n      close(v32);\n      v14 = 3;\n      goto LABEL_9;\n    }\n    v33 = __errno_location();\n    *v33 = 0;\n    while ( 1 )\n    {\n      v13 = readdir(v12);\n      if ( !v13 )\n        break;\n      if ( v13->d_name[0] == 46 )\n      {\n        v26 = v13->d_name[(v13->d_name[1] == 46) + 1];\n        if ( !v26 || v26 == 47 )\n          continue;\n      }\n      closedir(v12);\n      goto LABEL_8;\n    }\n    v34 = *v33;\n    closedir(v12);\n    if ( v34 )\n    {\nLABEL_8:\n      LOBYTE(v12) = 0;\n      v14 = 3;\n    }\n    else\n    {\n      LOBYTE(v12) = 1;\n      v14 = 4;\n    }\nLABEL_9:\n    *v9 = v14;\n    goto LABEL_10;\n  }\n  LOBYTE(v12) = a3;\n  stat_buf.st_size = -1LL;\n  v10 = a3 >= 1u ? 4 : 0;\n  if ( a3 )\n    LOBYTE(v12) = 0;\nLABEL_10:\n  if ( a2[4] )\n    return 3LL;\n  v15 = *(_DWORD *)(v6 + 4);\n  if ( v15 == 5 )\n    return 2LL;\n  if ( *(_BYTE *)v6 )\n    goto LABEL_30;\n  if ( v15 != 3 && !*(_BYTE *)(v6 + 24) )\n    return 2LL;\n  if ( (unsigned __int8)sub_4100A0() )\n    goto LABEL_67;\n  if ( (unsigned int)sub_403C90(v7, v8, &stat_buf) )\n  {\nLABEL_56:\n    v16 = *__errno_location();\n    goto LABEL_57;\n  }\n  if ( (stat_buf.st_mode & 0xF000) == 40960 || !faccessat(v7, v8, 2, 512) )\n  {\nLABEL_67:\n    v15 = *(_DWORD *)(v6 + 4);\nLABEL_30:\n    if ( v15 != 3 )\n      return 2LL;\n    v17 = 0;\n    goto LABEL_32;\n  }\n  v16 = *__errno_location();\n  if ( v16 != 13 )\n  {\nLABEL_57:\n    v21 = sub_40DD80(4LL, v30);\n    goto LABEL_38;\n  }\n  v17 = 1;\nLABEL_32:\n  if ( v10 )\n  {\n    if ( v10 == 4 )\n      goto LABEL_34;\nLABEL_55:\n    v23 = sub_40DD80(4LL, v30);\n    goto LABEL_21;\n  }\n  if ( (unsigned int)sub_403C90(v7, v8, &stat_buf) )\n    goto LABEL_56;\n  v27 = stat_buf.st_mode & 0xF000;\n  if ( v27 == 40960 )\n  {\n    if ( *(_DWORD *)(v6 + 4) != 3 )\n      return 2LL;\n    goto LABEL_55;\n  }\n  if ( v27 != 0x4000 )\n    goto LABEL_55;\nLABEL_34:\n  if ( !*(_BYTE *)(v6 + 9) )\n  {\n    if ( !*(_BYTE *)(v6 + 10) || !(_BYTE)v12 )\n    {\n      v16 = 21;\n      v21 = sub_40DD80(4LL, v30);\nLABEL_38:\n      v22 = dcgettext(0LL, \"cannot remove %s\", 5);\n      error(0, v16, v22, v21);\n      return 4LL;\n    }\n    goto LABEL_55;\n  }\n  v23 = sub_40DD80(4LL, v30);\n  if ( v31 == 2 && !(_BYTE)v12 )\n  {\n    v24 = qword_61D940;\n    if ( v17 )\n      v25 = dcgettext(0LL, \"%s: descend into write-protected directory %s? \", 5);\n    else\n      v25 = dcgettext(0LL, \"%s: descend into directory %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v25, v24);\nLABEL_25:\n    if ( (unsigned __int8)sub_4103F0() )\n      return 2LL;\n    return 3LL;\n  }\nLABEL_21:\n  if ( !(unsigned int)sub_403C90(v7, v8, &stat_buf) )\n  {\n    sub_40AC30(&stat_buf);\n    v18 = qword_61D940;\n    if ( v17 )\n      v19 = dcgettext(0LL, \"%s: remove write-protected %s %s? \", 5);\n    else\n      v19 = dcgettext(0LL, \"%s: remove %s %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v19, v18);\n    goto LABEL_25;\n  }\n  v28 = dcgettext(0LL, \"cannot remove %s\", 5);\n  v29 = __errno_location();\n  error(0, *v29, v28, v23);\n  return 4LL;\n}\n", 
            "funcStartAddr": "0x403d00L", 
            "funcEndAddr": "0x4041a2L", 
            "funcName": "sub_403D00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4041B0(_QWORD *a1, __int64 a2)\n{\n  __int64 v2; // r13\n  unsigned int v3; // er12\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  __int64 v6; // rbx\n  __int16 v7; // ax\n  __int64 v8; // r12\n  char *v9; // rax\n  int v10; // esi\n  __int64 v11; // rcx\n  const char *v12; // rdx\n  int *v13; // rbx\n  __int64 result; // rax\n  bool v15; // r15\n  int v16; // er14\n  __int64 v17; // r12\n  char *v18; // rax\n  int v19; // eax\n  int v20; // er14\n  DIR *v21; // r15\n  int *v22; // rax\n  int *v23; // r14\n  struct dirent *v24; // rax\n  int v25; // er12\n  int v26; // er14\n  _BYTE *v27; // rax\n  _QWORD *v28; // rax\n  _QWORD *j; // rax\n  __int64 v30; // r14\n  char *v31; // rax\n  _QWORD *i; // rax\n  char v33; // al\n  __int64 v34; // r15\n  __int64 v35; // r14\n  __int64 v36; // r12\n  char *v37; // rax\n  char v38; // al\n  __int64 v39; // r12\n  char *v40; // rax\n  char *v41; // rax\n  char *v42; // rax\n  char *v43; // rax\n  _QWORD *k; // rax\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // rax\n  unsigned int v48; // ebx\n  __int64 v49; // rbp\n  char *v50; // rax\n  __int64 v51; // r14\n  __int64 v52; // r12\n  char *v53; // rax\n  int v54; // [rsp+Ch] [rbp-3Ch]\n\n  if ( !*a1 )\n    return 2;\n  v2 = a2;\n  v3 = 2;\n  v4 = sub_410370(a1, *(_BYTE *)(a2 + 8) < 1u ? 536 : 600, 0LL);\nLABEL_3:\n  while ( 1 )\n  {\n    v5 = fts_read(v4);\n    v6 = v5;\n    if ( !v5 )\n      break;\n    while ( 2 )\n    {\n      v7 = *(_WORD *)(v5 + 112);\n      switch ( v7 )\n      {\n        case 1:\n          if ( *(_BYTE *)(v2 + 9) )\n            goto LABEL_35;\n          if ( !*(_BYTE *)(v2 + 10) )\n            goto LABEL_48;\n          v19 = openat(*(_DWORD *)(v4 + 44), *(const char **)(v6 + 48), 198912);\n          v20 = v19;\n          if ( v19 < 0 )\n            goto LABEL_32;\n          v21 = fdopendir(v19);\n          if ( !v21 )\n          {\n            close(v20);\nLABEL_32:\n            if ( *(_BYTE *)(v2 + 10) )\n              v25 = 39;\n            else\nLABEL_48:\n              v25 = 21;\n            v30 = sub_40DD80(4LL, *(_QWORD *)(v6 + 56));\n            v31 = dcgettext(0LL, \"cannot remove %s\", 5);\n            error(0, v25, v31, v30);\n            for ( i = *(_QWORD **)(v6 + 8); i[11] >= 0LL; i = (_QWORD *)i[1] )\n            {\n              if ( i[4] )\n                break;\n              i[4] = 1LL;\n            }\n            goto LABEL_7;\n          }\n          v22 = __errno_location();\n          *v22 = 0;\n          v23 = v22;\n          while ( 1 )\n          {\n            v24 = readdir(v21);\n            if ( !v24 )\n              break;\n            if ( v24->d_name[0] == 46 )\n            {\n              v38 = v24->d_name[(v24->d_name[1] == 46) + 1];\n              if ( !v38 || v38 == 47 )\n                continue;\n            }\n            closedir(v21);\n            goto LABEL_32;\n          }\n          v26 = *v23;\n          closedir(v21);\n          if ( v26 )\n            goto LABEL_32;\nLABEL_35:\n          if ( *(_QWORD *)(v6 + 88) )\n            goto LABEL_39;\n          v27 = (_BYTE *)sub_40AA00(*(_QWORD *)(v6 + 48));\n          if ( *v27 == 46 )\n          {\n            v33 = v27[(v27[1] == 46) + 1];\n            if ( !v33 || v33 == 47 )\n            {\n              v34 = sub_40DCA0(2LL, 4LL, *(_QWORD *)(v6 + 56));\n              v35 = sub_40DCA0(1LL, 4LL, \"..\");\n              v36 = sub_40DCA0(0LL, 4LL, \".\");\n              v37 = dcgettext(0LL, \"refusing to remove %s or %s directory: skipping %s\", 5);\n              error(0, 0, v37, v36, v35, v34);\nLABEL_7:\n              v3 = 4;\n              fts_set(v4, v6, 4LL);\n              fts_read(v4);\n              v5 = fts_read(v4);\n              v6 = v5;\n              if ( !v5 )\n                goto LABEL_8;\n              continue;\n            }\n          }\n          v28 = *(_QWORD **)(v2 + 16);\n          if ( v28 && *(_QWORD *)(v6 + 128) == *v28 && *(_QWORD *)(v6 + 120) == v28[1] )\n          {\n            if ( !strcmp(*(const char **)(v6 + 56), \"/\") )\n            {\n              v39 = sub_40DD80(4LL, *(_QWORD *)(v6 + 56));\n              v40 = dcgettext(0LL, \"it is dangerous to operate recursively on %s\", 5);\n              error(0, 0, v40, v39);\n            }\n            else\n            {\n              v51 = sub_40DCA0(1LL, 4LL, \"/\");\n              v52 = sub_40DCA0(0LL, 4LL, *(_QWORD *)(v6 + 56));\n              v53 = dcgettext(0LL, \"it is dangerous to operate recursively on %s (same as %s)\", 5);\n              error(0, 0, v53, v52, v51);\n            }\n            v41 = dcgettext(0LL, \"use --no-preserve-root to override this failsafe\", 5);\n            error(0, 0, v41);\n            goto LABEL_7;\n          }\nLABEL_39:\n          v16 = sub_403D00(v4, (_QWORD *)v6, 1u, v2, 2, &v54);\n          if ( v16 != 2\n            || v54 == 4 && (v16 = sub_403A80(v4, v6, (_BYTE *)v2, 1), fts_set(v4, v6, 4LL), fts_read(v4), v16 != 2) )\n          {\n            for ( j = *(_QWORD **)(v6 + 8); j[11] >= 0LL; j = (_QWORD *)j[1] )\n            {\n              if ( j[4] )\n                break;\n              j[4] = 1LL;\n            }\n            fts_set(v4, v6, 4LL);\n            fts_read(v4);\nLABEL_17:\n            if ( (unsigned int)(v16 - 2) > 2 )\n              __assert_fail(\"VALID_STATUS (s)\", \"src/remove.c\", 0x23Eu, \"rm\");\n            if ( v16 == 4 )\n            {\n              v3 = 4;\n            }\n            else if ( v16 == 3 && v3 == 2 )\n            {\n              v3 = 3;\n            }\n          }\n          break;\n        case 2:\n          v17 = sub_40DE50(0LL, 3LL, *(_QWORD *)(v6 + 56));\n          v18 = dcgettext(\n                  0LL,\n                  \"WARNING: Circular directory structure.\\n\"\n                  \"This almost certainly means that you have a corrupted file system.\\n\"\n                  \"NOTIFY YOUR SYSTEM MANAGER.\\n\"\n                  \"The following directory is part of the cycle:\\n\"\n                  \"  %s\\n\",\n                  5);\n          v11 = v17;\n          v10 = 0;\n          v12 = v18;\n          goto LABEL_6;\n        case 3:\n        case 4:\n        case 6:\n        case 8:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n          if ( v7 != 6\n            || !*(_BYTE *)(v2 + 8)\n            || *(_QWORD *)(v6 + 88) <= 0LL\n            || *(_QWORD *)(v6 + 120) == *(_QWORD *)(v4 + 24) )\n          {\n            v15 = (v7 & 0xFFFD) == 4;\n            v16 = sub_403D00(v4, (_QWORD *)v6, v15, v2, 3, 0LL);\n            if ( v16 == 2 )\n              v16 = sub_403A80(v4, v6, (_BYTE *)v2, v15);\n            goto LABEL_17;\n          }\n          for ( k = *(_QWORD **)(v6 + 8); k[11] >= 0LL; k = (_QWORD *)k[1] )\n          {\n            if ( k[4] )\n              break;\n            k[4] = 1LL;\n          }\n          v3 = 4;\n          v45 = sub_40DD80(4LL, *(_QWORD *)(v6 + 56));\n          v46 = dcgettext(0LL, \"skipping %s, since it's on a different device\", 5);\n          error(0, 0, v46, v45);\n          goto LABEL_3;\n        case 7:\n          v8 = sub_40DE50(0LL, 3LL, *(_QWORD *)(v6 + 56));\n          v9 = dcgettext(0LL, \"traversal failed: %s\", 5);\n          v10 = *(_DWORD *)(v6 + 64);\n          v11 = v8;\n          v12 = v9;\nLABEL_6:\n          error(0, v10, v12, v11);\n          goto LABEL_7;\n        default:\n          v47 = sub_40DE50(0LL, 3LL, *(_QWORD *)(v6 + 56));\n          v48 = *(unsigned __int16 *)(v6 + 112);\n          v49 = v47;\n          v50 = dcgettext(0LL, \"unexpected failure: fts_info=%d: %s\\nplease report to %s\", 5);\n          error(0, 0, v50, v48, v49, \"bug-coreutils@gnu.org\");\n          abort();\n          return result;\n      }\n      break;\n    }\n  }\nLABEL_8:\n  v13 = __errno_location();\n  if ( *v13 )\n  {\n    v3 = 4;\n    v42 = dcgettext(0LL, \"fts_read failed\", 5);\n    error(0, *v13, v42);\n    if ( !(unsigned int)fts_close((void *)v4) )\n      return v3;\nLABEL_65:\n    v3 = 4;\n    v43 = dcgettext(0LL, \"fts_close failed\", 5);\n    error(0, *v13, v43);\n    return v3;\n  }\n  if ( (unsigned int)fts_close((void *)v4) )\n    goto LABEL_65;\n  return v3;\n}\n", 
            "funcStartAddr": "0x4041b0L", 
            "funcEndAddr": "0x404886L", 
            "funcName": "sub_4041B0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_404890(char *name, __int16 a2)\n{\n  if ( (a2 & 0xF000) == 40960 )\n    return 1;\n  if ( (unsigned __int8)sub_4100A0() )\n    return 1;\n  return euidaccess(name, 2) == 0;\n}\n", 
            "funcStartAddr": "0x404890L", 
            "funcEndAddr": "0x4048d4L", 
            "funcName": "sub_404890"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4048E0(int fd, size_t a2)\n{\n  size_t v2; // rbx\n  size_t v3; // rbp\n  __int64 v4; // rax\n  void *v6; // rax\n\n  v2 = a2;\n  if ( !buf )\n  {\n    v6 = calloc(n, 1uLL);\n    if ( v6 )\n    {\n      buf = v6;\n    }\n    else\n    {\n      buf = &unk_61D500;\n      n = 1024LL;\n    }\n  }\n  if ( !a2 )\n    return 1LL;\n  while ( 1 )\n  {\n    v3 = v2;\n    if ( n <= v2 )\n      v3 = n;\n    v4 = sub_40AFB0(fd, buf, v3);\n    if ( v4 != v3 )\n      break;\n    v2 -= v4;\n    if ( !v2 )\n      return 1LL;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4048e0L", 
            "funcEndAddr": "0x404982L", 
            "funcName": "sub_4048E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404990(int a1, __off_t a2, __off_t a3)\n{\n  int v3; // ebx\n  __int64 result; // rax\n  int v5; // eax\n\n  v3 = fallocate(a1, 3, a2, a3);\n  if ( v3 >= 0 || (v5 = *__errno_location(), v5 != 38) && v5 != 95 )\n    result = (unsigned int)v3;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x404990L", 
            "funcEndAddr": "0x4049c7L", 
            "funcName": "sub_404990"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4049D0(int a1, const char *a2, __mode_t a3)\n{\n  int result; // eax\n\n  if ( a1 >= 0 )\n    result = fchmod(a1, a3);\n  else\n    result = chmod(a2, a3);\n  return result;\n}\n", 
            "funcStartAddr": "0x4049d0L", 
            "funcEndAddr": "0x4049edL", 
            "funcName": "sub_4049D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4049F0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  char *v2; // rax\n\n  v0 = __errno_location();\n  *v0 = 95;\n  v1 = v0;\n  v2 = dcgettext(0LL, \"failed to restore the default file creation context\", 5);\n  error(1, *v1, v2);\n  return sub_404A30();\n}\n", 
            "funcStartAddr": "0x4049f0L", 
            "funcEndAddr": "0x404a30L", 
            "funcName": "sub_4049F0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404A30(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  __int64 v6; // r8\n  __int64 v7; // rbx\n  char *v8; // rax\n  __int64 v9; // rcx\n  __int64 v10; // r8\n  char *v11; // rax\n\n  v3 = a3;\n  v4 = sub_40DCA0(1LL, 4LL, a2);\n  v5 = sub_40DCA0(0LL, 4LL, a1);\n  __printf_chk(1LL, \"%s -> %s\", v5, v4, v6);\n  if ( v3 )\n  {\n    v7 = sub_40DD80(4LL, v3);\n    v8 = dcgettext(0LL, \" (backup: %s)\", 5);\n    __printf_chk(1LL, v8, v7, v9, v10);\n  }\n  v11 = stdout->_IO_write_ptr;\n  if ( v11 >= stdout->_IO_write_end )\n  {\n    LODWORD(v11) = __overflow(stdout, 10);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = v11 + 1;\n    *v11 = 10;\n  }\n  return (int)v11;\n}\n", 
            "funcStartAddr": "0x404a30L", 
            "funcEndAddr": "0x404adeL", 
            "funcName": "sub_404A30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404AE0(__int64 a1, char *a2, unsigned int *a3)\n{\n  unsigned int *v3; // rbp\n  __int64 v4; // rbx\n  char *v5; // rdx\n  FILE *v6; // rdi\n  __int64 result; // rax\n  __int64 v8; // rbx\n  char *v9; // rax\n  char v10; // [rsp+4h] [rbp-34h]\n  char v11; // [rsp+Eh] [rbp-2Ah]\n\n  v3 = a3;\n  if ( sub_404890(a2, *a3) )\n  {\n    sub_40DD80(4LL, a2);\n    v8 = qword_61D940;\n    v9 = dcgettext(0LL, \"%s: overwrite %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v9, v8);\n    result = ((__int64 (*)(void))sub_4103F0)();\n  }\n  else\n  {\n    sub_40AD20(*v3, &v10);\n    v11 = 0;\n    sub_40DD80(4LL, a2);\n    v4 = qword_61D940;\n    if ( *(_BYTE *)(a1 + 24) || *(_DWORD *)(a1 + 20) & 0xFFFF00 )\n      v5 = dcgettext(0LL, \"%s: replace %s, overriding mode %04lo (%s)? \", 5);\n    else\n      v5 = dcgettext(0LL, \"%s: unwritable %s (mode %04lo, %s); try anyway? \", 5);\n    v6 = stderr;\n    __fprintf_chk(stderr, 1LL, v5, v4);\n    result = ((__int64 (__fastcall *)(FILE *, __int64))sub_4103F0)(v6, 1LL);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404ae0L", 
            "funcEndAddr": "0x404c0cL", 
            "funcName": "sub_404AE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404C10(__int64 a1, __int64 a2, unsigned __int8 a3, char a4, char a5)\n{\n  char v5; // bp\n  unsigned int v6; // ebx\n  int v7; // eax\n  __int64 result; // rax\n  __int64 v9; // rbp\n  char *v10; // rax\n  __int64 v11; // rcx\n  __int64 v12; // r8\n  __int64 v13; // r13\n  __int64 v14; // rbp\n  char *v15; // rbx\n  int *v16; // rax\n\n  v5 = a4;\n  v6 = a1;\n  v7 = sub_409B50(4294967196LL, a1, 4294967196LL, a2, (unsigned __int8)(a5 != 0) << 10, a3);\n  if ( v7 < 0 )\n  {\n    v13 = sub_40DCA0(1LL, 4LL, a1);\n    v14 = sub_40DCA0(0LL, 4LL, a2);\n    v15 = dcgettext(0LL, \"cannot create hard link %s to %s\", 5);\n    v16 = __errno_location();\n    error(0, *v16, v15, v14, v13);\n    result = 0LL;\n  }\n  else\n  {\n    LOBYTE(v6) = v5 & (v7 > 0);\n    if ( (_BYTE)v6 )\n    {\n      v9 = sub_40DD80(4LL, a2);\n      v10 = dcgettext(0LL, \"removed %s\\n\", 5);\n      __printf_chk(1LL, v10, v9, v11, v12);\n      result = v6;\n    }\n    else\n    {\n      result = 1LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404c10L", 
            "funcEndAddr": "0x404d13L", 
            "funcName": "sub_404C10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404D20(int a1, __int64 a2, char a3, __off_t a4)\n{\n  char v4; // r12\n  __off_t v5; // rbx\n  __off_t v6; // rax\n  __int64 v8; // rax\n  const char *v9; // rsi\n  __int64 v10; // rbp\n  __int64 v11; // rax\n  char *v12; // rbx\n  int *v13; // rax\n\n  v4 = a3;\n  v5 = a4;\n  v6 = lseek(a1, a4, 1);\n  if ( v6 < 0 )\n  {\n    v11 = sub_40DD80(4LL, a2);\n    v9 = \"cannot lseek %s\";\n    v10 = v11;\n  }\n  else\n  {\n    if ( !v4 || (int)sub_404990(a1, v6 - v5, v5) >= 0 )\n      return 1LL;\n    v8 = sub_40DD80(4LL, a2);\n    v9 = \"error deallocating %s\";\n    v10 = v8;\n  }\n  v12 = dcgettext(0LL, v9, 5);\n  v13 = __errno_location();\n  error(0, *v13, v12, v10);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x404d20L", 
            "funcEndAddr": "0x404dd7L", 
            "funcName": "sub_404D20"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_404DE0@<rax>(char *a1@<rdx>, size_t a2@<rcx>, unsigned int a3@<ebp>, int a4@<edi>, int a5@<esi>, size_t a6@<r8>, char a7@<r9b>, __int64 a8, __int64 a9, size_t a10, _QWORD *a11, _BYTE *a12)\n{\n  unsigned int v12; // er14\n  unsigned __int64 v13; // r15\n  size_t v14; // rdx\n  ssize_t v15; // rax\n  int *v16; // rax\n  int *v17; // rbx\n  unsigned int v18; // er15\n  __int64 v19; // rbp\n  char *v20; // rax\n  int v22; // eax\n  char *v23; // r13\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  void *v26; // r11\n  _BYTE *v27; // rsi\n  size_t v28; // rdx\n  int v29; // eax\n  char v30; // dl\n  bool v31; // al\n  int v32; // er9\n  __int64 v33; // rax\n  char v34; // r9\n  unsigned int v35; // eax\n  bool v36; // zf\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rbx\n  int *v41; // rax\n  __off_t v42; // r13\n  void *v43; // [rsp+8h] [rbp-A0h]\n  int v44; // [rsp+8h] [rbp-A0h]\n  int v45; // [rsp+18h] [rbp-90h]\n  bool v46; // [rsp+1Dh] [rbp-8Bh]\n  char v47; // [rsp+1Eh] [rbp-8Ah]\n  char v48; // [rsp+1Fh] [rbp-89h]\n  char *buf; // [rsp+20h] [rbp-88h]\n  size_t v50; // [rsp+28h] [rbp-80h]\n  ssize_t v51; // [rsp+30h] [rbp-78h]\n  size_t nbytes; // [rsp+38h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+50h] [rbp-58h]\n  size_t v54; // [rsp+58h] [rbp-50h]\n  char v55; // [rsp+6Ch] [rbp-3Ch]\n\n  v48 = a7;\n  *a12 = 0;\n  v50 = a10;\n  *a11 = 0LL;\n  if ( !a10 )\n    return 1;\n  v54 = a6;\n  if ( !a6 )\n    a6 = a2;\n  v55 = a7;\n  nbytes = a2;\n  v12 = 0;\n  v13 = 0LL;\n  buf = a1;\n  v45 = a5;\n  v53 = a6;\n  while ( 1 )\n  {\nLABEL_5:\n    v14 = v50;\n    if ( nbytes <= v50 )\n      v14 = nbytes;\n    v15 = read(a4, buf, v14);\n    v51 = v15;\n    if ( v15 >= 0 )\n      break;\n    v16 = __errno_location();\n    if ( *v16 != 4 )\n    {\n      v17 = v16;\n      v18 = 0;\n      v19 = sub_40DD80(4LL, a8);\n      v20 = dcgettext(0LL, \"error reading %s\", 5);\n      error(0, *v17, v20, v19);\n      return v18;\n    }\n  }\n  if ( !v15 )\n  {\n    v42 = v13;\n    LOBYTE(a3) = v12;\n    goto LABEL_51;\n  }\n  v22 = (int)a11;\n  v23 = buf;\n  v24 = v51;\n  v25 = v53;\n  *a11 += v51;\n  v26 = buf;\n  v46 = v54 != 0;\n  while ( 1 )\n  {\n    if ( v25 > v24 )\n      v25 = v24;\n    LOBYTE(a3) = v46 && v25 != 0;\n    if ( v46 && v25 != 0 )\n      break;\n    a3 = v12;\n    if ( !(((unsigned __int8)v12 ^ 1) & (v25 == v24)) && v25 )\n    {\nLABEL_38:\n      v22 = -1 - v25;\n      if ( 0x7FFFFFFFFFFFFFFFLL - v25 < v13 )\n      {\n        v18 = 0;\n        v37 = sub_40DD80(4LL, a8);\n        v38 = dcgettext(0LL, \"overflow reading %s\", 5);\n        error(0, 0, v38, v37);\n        return v18;\n      }\n      v13 += v25;\n      v24 -= v25;\n      v23 += v25;\n      v12 = a3;\n      goto LABEL_40;\n    }\nLABEL_33:\n    v13 += v25;\n    v44 = 1;\n    v47 = 0;\n    if ( !(_BYTE)v12 )\n      goto LABEL_26;\nLABEL_34:\n    v35 = sub_404D20(v45, a9, v48, v13);\n    v34 = v47;\n    if ( !(_BYTE)v35 )\n      return v35;\nLABEL_27:\n    v22 = v44;\n    if ( v44 )\n    {\n      if ( !v25 )\n      {\n        v13 = 0LL;\nLABEL_44:\n        v36 = v50 == v51;\n        v50 -= v51;\n        *a12 = a3;\n        if ( !v36 )\n        {\n          v12 = a3;\n          goto LABEL_5;\n        }\n        v42 = v13;\nLABEL_51:\n        if ( (_BYTE)a3 )\n          return sub_404D20(v45, a9, v55, v42);\n        return 1;\n      }\n      if ( !v34 )\n      {\n        v26 = v23;\n        v24 -= v25;\n        v12 = a3;\n        v23 += v25;\n        v13 = 0LL;\n        goto LABEL_40;\n      }\n      v13 = v25;\n      v26 = v23;\n      v12 = a3;\n      v25 = 0LL;\n    }\n    else\n    {\n      v26 = v23;\n      v24 -= v25;\n      v12 = a3;\n      v23 += v25;\n      v13 = v25;\nLABEL_40:\n      if ( !v24 )\n        goto LABEL_44;\n    }\n  }\n  v27 = v23;\n  v28 = v25;\n  do\n  {\n    if ( *v27 )\n    {\n      v31 = v46 && v25 != 0;\n      v30 = v12;\n      a3 = 0;\n      goto LABEL_21;\n    }\n    ++v27;\n    if ( !--v28 )\n    {\n      LOBYTE(v22) = v13 != 0;\n      v32 = v22 & (v12 ^ 1);\n      goto LABEL_37;\n    }\n  }\n  while ( v28 & 0xF );\n  v43 = v26;\n  v29 = memcmp(v23, v27, v28);\n  v26 = v43;\n  LOBYTE(a3) = v29 == 0;\n  v30 = v12 ^ (v29 == 0);\n  v31 = v29 != 0;\nLABEL_21:\n  LOBYTE(v32) = v30 & (v13 != 0);\n  if ( v25 != v24 || !v31 )\n  {\nLABEL_37:\n    if ( !(_BYTE)v32 )\n      goto LABEL_38;\n    v44 = 0;\n    goto LABEL_25;\n  }\n  if ( !(_BYTE)v32 )\n  {\n    a3 = 0;\n    goto LABEL_33;\n  }\n  v44 = 1;\n  a3 = 0;\nLABEL_25:\n  v47 = v32;\n  if ( (_BYTE)v12 )\n    goto LABEL_34;\nLABEL_26:\n  v33 = sub_40AFB0(v45, v26, v13);\n  v34 = v47;\n  if ( v13 == v33 )\n    goto LABEL_27;\n  v18 = v12;\n  v39 = sub_40DD80(4LL, a9);\n  v40 = dcgettext(0LL, \"error writing %s\", 5);\n  v41 = __errno_location();\n  error(0, *v41, v40, v39);\n  return v18;\n}\n", 
            "funcStartAddr": "0x404de0L", 
            "funcEndAddr": "0x405203L", 
            "funcName": "sub_404DE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405210(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  int *v6; // rax\n  int *v7; // r13\n  __int64 v8; // rbx\n  char *v9; // rax\n  int v10; // ebx\n  __int64 result; // rax\n  unsigned int v12; // ebx\n\n  v5 = a5;\n  if ( *(_BYTE *)(a5 + 37) )\n  {\n    v6 = __errno_location();\n    v7 = v6;\n    if ( !*(_BYTE *)(v5 + 35) || (v10 = *(unsigned __int8 *)(v5 + 38), (_BYTE)v10) )\n    {\n      *v6 = 95;\n      v8 = sub_40DD80(4LL, a1);\n      v9 = dcgettext(0LL, \"failed to get security context of %s\", 5);\n      error(0, *v7, v9, v8);\n      v10 = *(unsigned __int8 *)(v5 + 38);\n    }\n    else\n    {\n      *v6 = 95;\n    }\n    result = v10 ^ 1u;\n  }\n  else\n  {\n    v12 = a4;\n    LOBYTE(v12) = *(_BYTE *)(a5 + 33) & a4;\n    if ( (_BYTE)v12 )\n    {\n      *__errno_location() = 95;\n      result = v12;\n    }\n    else\n    {\n      result = 1LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405210L", 
            "funcEndAddr": "0x4052d8L", 
            "funcName": "sub_405210"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4052E0(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbx\n  int *v5; // rax\n  int *v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rax\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = __errno_location();\n  v6 = v5;\n  if ( !*(_BYTE *)(v4 + 35) || *(_BYTE *)(v4 + 38) )\n  {\n    *v5 = 95;\n    v7 = sub_40DCA0(0LL, 4LL, a1);\n    v8 = dcgettext(0LL, \"failed to set the security context of %s\", 5);\n    error(0, *v6, v8, v7);\n    result = 0LL;\n  }\n  else\n  {\n    *v5 = 95;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4052e0L", 
            "funcEndAddr": "0x405353L", 
            "funcName": "sub_4052E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405360(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40B8C0(61LL, 0LL, sub_40C280, sub_40C2C0, sub_40C330);\n  *(_QWORD *)(a1 + 56) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x405360L", 
            "funcEndAddr": "0x405386L", 
            "funcName": "sub_405360"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405390(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40B8C0(61LL, 0LL, sub_40C2B0, sub_40C2C0, sub_40C330);\n  *(_QWORD *)(a1 + 64) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x405390L", 
            "funcEndAddr": "0x4053b6L", 
            "funcName": "sub_405390"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4053C0(__int64 a1)\n{\n  bool result; // al\n\n  *(_QWORD *)(a1 + 64) = 0LL;\n  *(_OWORD *)a1 = 0LL;\n  *(_OWORD *)(a1 + 16) = 0LL;\n  *(_OWORD *)(a1 + 32) = 0LL;\n  *(_OWORD *)(a1 + 48) = 0LL;\n  result = geteuid() == 0;\n  *(_BYTE *)(a1 + 27) = result;\n  *(_BYTE *)(a1 + 26) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4053c0L", 
            "funcEndAddr": "0x4053f1L", 
            "funcName": "sub_4053C0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_405400(__int64 a1)\n{\n  int *v1; // rax\n  char result; // al\n\n  v1 = __errno_location();\n  result = *v1 == 22 || *v1 == 1;\n  if ( result )\n    result = *(_BYTE *)(a1 + 26) ^ 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x405400L", 
            "funcEndAddr": "0x405424L", 
            "funcName": "sub_405400"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405430(__int64 a1, const char *a2, unsigned int a3, _DWORD *a4, char a5, __int64 a6)\n{\n  const char *v6; // r12\n  unsigned int v7; // ebx\n  __uid_t v8; // er14\n  __gid_t v9; // er13\n  int v10; // esi\n  int v11; // edx\n  int v12; // eax\n  int *v13; // rax\n  int v14; // er14\n  int *v15; // r15\n  char v16; // al\n  unsigned int v17; // edx\n  int *v19; // rax\n  int v20; // ebx\n  int *v21; // r14\n  __int64 v22; // r12\n  char *v23; // rbx\n  int *v24; // rax\n  int *v25; // rax\n  int *v26; // rbx\n  int v27; // eax\n  __int64 v28; // r12\n  char *v29; // rax\n\n  v6 = a2;\n  v7 = a3;\n  v8 = a4[7];\n  v9 = a4[8];\n  if ( !a5 )\n  {\n    if ( *(_QWORD *)(a1 + 24) & 0xFF0000000000FFLL )\n    {\n      v10 = *(_DWORD *)(a6 + 24);\n      v11 = a4[6];\n    }\n    else\n    {\n      if ( !*(_BYTE *)(a1 + 43) )\n        goto LABEL_6;\n      v10 = *(_DWORD *)(a6 + 24);\n      v11 = *(_DWORD *)(a1 + 16);\n    }\n    v12 = ~v11;\n    BYTE1(v12) |= 0xEu;\n    if ( v10 & v12 & 0xFFF && (unsigned int)sub_40C430(v6, v7, (unsigned __int16)v10 & (unsigned __int16)v11 & 0x1C0) )\n    {\n      v25 = __errno_location();\n      v26 = v25;\n      v27 = *v25;\n      if ( v27 != 1 && v27 != 22 || *(_BYTE *)(a1 + 27) )\n      {\n        v28 = sub_40DD80(4LL, v6);\n        v29 = dcgettext(0LL, \"clearing permissions for %s\", 5);\n        error(0, *v26, v29, v28);\n      }\n      goto LABEL_20;\n    }\n  }\nLABEL_6:\n  if ( v7 != -1 )\n  {\n    if ( fchown(v7, v8, v9) )\n    {\n      v13 = __errno_location();\n      v14 = *v13;\n      v15 = v13;\n      if ( *v13 == 1 || v14 == 22 )\n      {\n        fchown(v7, 0xFFFFFFFF, v9);\n        *v15 = v14;\n      }\n      goto LABEL_10;\n    }\n    return 1;\n  }\n  if ( !lchown(v6, v8, v9) )\n    return 1;\n  v19 = __errno_location();\n  v20 = *v19;\n  v21 = v19;\n  if ( *v19 == 1 || v20 == 22 )\n  {\n    lchown(v6, 0xFFFFFFFF, v9);\n    *v21 = v20;\n  }\nLABEL_10:\n  v16 = sub_405400(a1);\n  v17 = 0;\n  if ( !v16 )\n  {\n    v22 = sub_40DD80(4LL, v6);\n    v23 = dcgettext(0LL, \"failed to preserve ownership for %s\", 5);\n    v24 = __errno_location();\n    error(0, *v24, v23, v22);\nLABEL_20:\n    v17 = -*(unsigned __int8 *)(a1 + 36);\n  }\n  return v17;\n}\n", 
            "funcStartAddr": "0x405430L", 
            "funcEndAddr": "0x40561bL", 
            "funcName": "sub_405430"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405620()\n{\n  __mode_t v0; // ebx\n\n  v0 = dword_61D3F0;\n  if ( dword_61D3F0 == -1 )\n  {\n    v0 = umask(0);\n    dword_61D3F0 = v0;\n    umask(v0);\n  }\n  return v0;\n}\n", 
            "funcStartAddr": "0x405620L", 
            "funcEndAddr": "0x40564aL", 
            "funcName": "sub_405620"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_405650@<rax>(unsigned int a1@<edx>, __off_t a2@<rcx>, const char *a3@<rdi>, char *a4@<rsi>, __int64 a5@<r8>, const __m128i *a6@<r9>, unsigned int a7@<r15d>, unsigned int a8, _BYTE *a9, _BYTE *a10, _BYTE *a11)\n{\n  char *v11; // r14\n  const __m128i *v12; // r13\n  unsigned int v13; // er12\n  bool v14; // zf\n  __int64 v15; // rbx\n  int v16; // eax\n  char *v17; // rsi\n  __int64 v18; // rdi\n  int v19; // eax\n  int v20; // eax\n  __int64 v21; // r8\n  int v22; // eax\n  __int16 v23; // ax\n  __int64 v24; // rcx\n  int v25; // er12\n  __int64 v26; // rdi\n  char v27; // al\n  char v28; // al\n  int v29; // eax\n  int *v30; // rax\n  int *v31; // r12\n  struct stat *v32; // rdx\n  __int64 v33; // r12\n  const char *v34; // rsi\n  __int64 v35; // rbx\n  char *v36; // rax\n  __int64 v37; // r8\n  __int64 v38; // rcx\n  const char *v39; // rdx\n  int v40; // er12\n  char v41; // al\n  void *v42; // r12\n  char v43; // r8\n  bool v44; // r12\n  __int64 v45; // rsi\n  char v46; // al\n  int v47; // eax\n  __int64 v48; // r12\n  char *v49; // rbx\n  int *v50; // rax\n  int v51; // eax\n  __mode_t v52; // edx\n  __int64 v53; // r12\n  char *v54; // rbx\n  int *v55; // rax\n  unsigned int v56; // eax\n  int v57; // eax\n  __int64 v58; // r12\n  char *v59; // rbx\n  int *v60; // rax\n  __dev_t v62; // rdx\n  __ino_t v63; // rdi\n  __int64 v64; // rdx\n  __int64 v65; // rcx\n  __int64 v66; // r8\n  __int64 v67; // r9\n  __int64 v68; // rdx\n  __int64 v69; // rcx\n  __int64 v70; // r8\n  __int64 v71; // r9\n  int v72; // eax\n  __int64 v73; // r12\n  char *v74; // rax\n  __int64 v75; // r12\n  __int64 v76; // rbx\n  char *v77; // rax\n  __int64 v78; // r8\n  int *v79; // rax\n  int *v80; // r12\n  int v81; // eax\n  int v82; // eax\n  int *v83; // rax\n  __int64 v84; // rbx\n  char *v85; // rax\n  int v86; // eax\n  char v87; // al\n  __ino_t v88; // rdx\n  __dev_t v89; // rcx\n  _QWORD *v90; // rax\n  const char *v91; // rsi\n  char *v92; // rax\n  int v93; // eax\n  const char *v94; // rsi\n  char *v95; // r12\n  int *v96; // rax\n  _QWORD *v97; // rax\n  __mode_t v98; // er12\n  int v99; // eax\n  __int64 v100; // r12\n  char *v101; // rax\n  __int64 v102; // rcx\n  __int64 v103; // r8\n  __m128i v104; // xmm1\n  __m128i v105; // xmm2\n  __m128i v106; // xmm3\n  __blkcnt_t v107; // rax\n  char *v108; // r12\n  char v109; // r15\n  void *v110; // rbx\n  __int64 v111; // rax\n  void *v112; // r14\n  char v113; // al\n  char v114; // r12\n  __int64 v115; // rax\n  int v116; // edx\n  const char *v117; // rsi\n  char *v118; // rax\n  _BOOL8 v119; // rcx\n  int v120; // eax\n  __int64 v121; // rax\n  char v122; // r12\n  __int64 v123; // rcx\n  __m128i *v124; // r9\n  __m128i *v125; // rdx\n  char v126; // al\n  __int64 v127; // r13\n  const char *v128; // rsi\n  __int64 v129; // rbx\n  char *v130; // rax\n  int v131; // eax\n  int v132; // eax\n  bool v133; // al\n  char v134; // al\n  __int64 v135; // r12\n  char *v136; // rbx\n  int *v137; // rax\n  char *v138; // r12\n  int v139; // ecx\n  int *v140; // rax\n  int *v141; // r12\n  int *v142; // rax\n  int v143; // er12\n  char *v144; // rax\n  void *v145; // rcx\n  int v146; // esi\n  const char *v147; // rdx\n  char v148; // r8\n  __int64 v149; // rcx\n  __int64 v150; // rbx\n  char *v151; // rax\n  __int64 v152; // r12\n  char *v153; // rax\n  char *v154; // rax\n  __int64 v155; // rdx\n  __int64 v156; // rcx\n  __int64 v157; // r8\n  _BYTE *v158; // rax\n  __int64 v159; // rdx\n  _BYTE *v160; // r8\n  size_t v161; // r12\n  size_t v162; // rax\n  int v163; // eax\n  int v164; // eax\n  size_t v165; // rax\n  char *v166; // rax\n  char *v167; // r12\n  char *v168; // rax\n  __int64 v169; // rsi\n  char *v170; // rax\n  char *v171; // r12\n  size_t v172; // rax\n  void *v173; // rsp\n  char *v174; // r12\n  char v175; // al\n  int v176; // er12\n  char *v177; // rax\n  __int64 v178; // rdx\n  __int64 v179; // rcx\n  __int64 v180; // r8\n  __int64 v181; // r12\n  __int64 v182; // rbx\n  char *v183; // rax\n  __int64 v184; // r12\n  char *v185; // r14\n  int *v186; // rax\n  __int64 v187; // rax\n  char *v188; // r12\n  __int64 v189; // r12\n  char *v190; // rax\n  __int64 v191; // rdx\n  unsigned int v192; // eax\n  _BYTE *v193; // rax\n  __int64 v194; // rbx\n  char *v195; // rax\n  char v196; // al\n  int v197; // er12\n  int v198; // eax\n  char v199; // al\n  char *v200; // r12\n  int *v201; // rax\n  int *v202; // rax\n  const char *v203; // rsi\n  __int64 v204; // rbx\n  char *v205; // rax\n  char *v206; // r12\n  int *v207; // rax\n  char *v208; // r12\n  int *v209; // rax\n  char *v210; // rax\n  __int64 v211; // rcx\n  int v212; // eax\n  __int64 v213; // r12\n  char *v214; // rax\n  __int64 v215; // r12\n  char *v216; // rax\n  __int64 v217; // rcx\n  __int64 v218; // r8\n  unsigned __int64 v219; // r12\n  __blksize_t v220; // rax\n  __blksize_t v221; // rdi\n  unsigned __int64 v222; // rax\n  char *v223; // rsi\n  unsigned __int64 v224; // rdx\n  bool v225; // r9\n  int v226; // eax\n  char v227; // r8\n  int v228; // eax\n  char *v229; // r12\n  int *v230; // rax\n  char *v231; // r12\n  int *v232; // rax\n  int v233; // eax\n  int v234; // eax\n  char *v235; // r12\n  int *v236; // rax\n  int v237; // eax\n  __off_t v238; // r12\n  char *v239; // rcx\n  __off_t v240; // rbx\n  char v241; // r15\n  size_t v242; // r14\n  char v243; // al\n  size_t v244; // rdx\n  __off_t v245; // rsi\n  unsigned int v246; // er13\n  __int64 v247; // rax\n  size_t v248; // r8\n  __off_t *v249; // rax\n  bool v250; // r12\n  const char *v251; // rsi\n  char *v252; // r12\n  int *v253; // rax\n  __int64 v254; // rdx\n  char *v255; // rbx\n  __int64 v256; // r12\n  __int64 v257; // rax\n  int v258; // eax\n  __int64 v259; // r12\n  int *v260; // rax\n  char *v261; // r12\n  int *v262; // rax\n  __int64 v263; // rcx\n  char *v264; // rdi\n  void *v265; // rax\n  __int64 v266; // r12\n  char *v267; // rax\n  __int64 v268; // rcx\n  __int64 v269; // r8\n  const char *v270; // rsi\n  char *v271; // r12\n  int *v272; // rax\n  char *v273; // rax\n  int v274; // eax\n  int v275; // eax\n  char *v276; // r12\n  int *v277; // rax\n  __blksize_t v278; // rax\n  __int64 v279; // r12\n  char *v280; // rax\n  char v281; // [rsp+1h] [rbp-381h]\n  unsigned __int64 v282; // [rsp+Ah] [rbp-378h]\n  __off_t v283; // [rsp+1Ah] [rbp-368h]\n  const __m128i *v284; // [rsp+22h] [rbp-360h]\n  unsigned int v285; // [rsp+2Ah] [rbp-358h]\n  unsigned int v286; // [rsp+2Eh] [rbp-354h]\n  char *v287; // [rsp+32h] [rbp-350h]\n  int v288; // [rsp+3Ah] [rbp-348h]\n  __mode_t v289; // [rsp+3Eh] [rbp-344h]\n  __blksize_t v290; // [rsp+42h] [rbp-340h]\n  char *v291; // [rsp+4Ah] [rbp-338h]\n  char *s; // [rsp+52h] [rbp-330h]\n  unsigned int v293; // [rsp+5Ah] [rbp-328h]\n  char v294; // [rsp+5Fh] [rbp-323h]\n  unsigned __int8 v295; // [rsp+60h] [rbp-322h]\n  char v296; // [rsp+61h] [rbp-321h]\n  struct stat *v297; // [rsp+62h] [rbp-320h]\n  __int64 v298; // [rsp+6Ah] [rbp-318h]\n  char *s2; // [rsp+72h] [rbp-310h]\n  void *s1; // [rsp+7Ah] [rbp-308h]\n  char *old; // [rsp+82h] [rbp-300h]\n  __off_t v302; // [rsp+8Ah] [rbp-2F8h]\n  size_t n; // [rsp+92h] [rbp-2F0h]\n  int fd[2]; // [rsp+9Ah] [rbp-2E8h]\n  void *ptr; // [rsp+A2h] [rbp-2E0h]\n  struct stat *v306; // [rsp+AAh] [rbp-2D8h]\n  char *src; // [rsp+B2h] [rbp-2D0h]\n  __mode_t v308; // [rsp+BAh] [rbp-2C8h]\n  int v309; // [rsp+BEh] [rbp-2C4h]\n  int fildes[2]; // [rsp+C2h] [rbp-2C0h]\n  char *filename; // [rsp+CAh] [rbp-2B8h]\n  char v312; // [rsp+D9h] [rbp-2A9h]\n  __int64 v313; // [rsp+DAh] [rbp-2A8h]\n  __int128 length; // [rsp+E2h] [rbp-2A0h]\n  timespec v315; // [rsp+F2h] [rbp-290h]\n  char v316; // [rsp+102h] [rbp-280h]\n  char v317; // [rsp+103h] [rbp-27Fh]\n  void *v318; // [rsp+10Ah] [rbp-278h]\n  struct stat stat_buf; // [rsp+112h] [rbp-270h]\n  struct stat v320; // [rsp+1A2h] [rbp-1E0h]\n  struct stat v321; // [rsp+232h] [rbp-150h]\n  struct stat v322; // [rsp+2C2h] [rbp-C0h]\n  __int64 savedregs; // [rsp+382h] [rbp+0h]\n\n  v11 = (char *)a3;\n  v12 = a6;\n  v13 = a1;\n  filename = a4;\n  LOBYTE(fildes[0]) = a11 != 0LL;\n  v14 = a6[1].m128i_i8[8] == 0;\n  v15 = a8;\n  v302 = a2;\n  *(_QWORD *)fd = a5;\n  if ( !v14 && a11 != 0LL )\n    *a11 = 0;\n  v14 = HIDWORD(a6->m128i_i64[0]) == 2;\n  *a10 = 0;\n  v306 = &stat_buf;\n  if ( !v14 )\n  {\n    v16 = __xstat(1, a3, &stat_buf);\n    v17 = (char *)a3;\n    LOBYTE(a7) = v16 != 0;\n    if ( !v16 )\n      goto LABEL_6;\nLABEL_118:\n    a7 = 0;\n    v58 = sub_40DD80(4LL, v17);\n    v59 = dcgettext(0LL, \"cannot stat %s\", 5);\n    v60 = __errno_location();\n    error(0, *v60, v59, v58);\n    return a7;\n  }\n  v57 = __lxstat(1, a3, &stat_buf);\n  v17 = (char *)a3;\n  LOBYTE(a7) = v57 != 0;\n  if ( v57 )\n    goto LABEL_118;\nLABEL_6:\n  v308 = stat_buf.st_mode;\n  v309 = stat_buf.st_mode & 0xF000;\n  if ( v309 != 0x4000 )\n  {\n    if ( !(_BYTE)a8 )\n      goto LABEL_10;\n    v18 = v12[4].m128i_i64[0];\n    if ( LODWORD(v12->m128i_i64[0]) )\n    {\n      sub_40AB60(v18, v11, v306);\n      goto LABEL_10;\n    }\n    v87 = sub_40ABF0(v18, v11, v306);\n    if ( v87 )\n    {\n      LOBYTE(filename) = v87;\n      v150 = sub_40DD80(4LL, v11);\n      v151 = dcgettext(0LL, \"warning: source file %s specified more than once\", 5);\n      error(0, 0, v151, v150);\n      return (unsigned __int8)filename;\n    }\n    goto LABEL_170;\n  }\n  if ( !v12[2].m128i_i8[10] )\n  {\n    v115 = sub_40DD80(4LL, v17);\n    v116 = 5;\n    v15 = v115;\n    if ( !v12[1].m128i_i8[9] )\n    {\nLABEL_241:\n      v118 = dcgettext(0LL, \"-r not specified; omitting directory %s\", v116);\n      goto LABEL_227;\n    }\n    v117 = \"omitting directory %s\";\n    goto LABEL_226;\n  }\n  if ( (_BYTE)a8 )\nLABEL_170:\n    sub_40AB60(v12[4].m128i_i64[0], v11, v306);\nLABEL_10:\n  LODWORD(ptr) = 1;\n  v19 = HIDWORD(v12->m128i_i64[0]);\n  if ( v19 != 4 )\n    LODWORD(ptr) = (unsigned __int8)a8 & (v19 == 3);\n  if ( (_BYTE)v13 )\n  {\nLABEL_59:\n    LOBYTE(src) = 1;\n    LOBYTE(v24) = 0;\n    old = 0LL;\n    goto LABEL_60;\n  }\n  if ( v309 != 0x8000 && (!v12[1].m128i_i8[4] || v309 == 0x4000 || v309 == 40960)\n    || v12[1].m128i_i8[8]\n    || v12[2].m128i_i8[12]\n    || v12[1].m128i_i8[7]\n    || LODWORD(v12->m128i_i64[0])\n    || v12[1].m128i_i8[5] )\n  {\n    n = (size_t)&v320;\n    v82 = __lxstat(1, filename, &v320);\n    v21 = v13;\n    LOBYTE(src) = v82 != 0;\n    if ( !v82 )\n      goto LABEL_23;\n    goto LABEL_158;\n  }\n  n = (size_t)&v320;\n  v20 = __xstat(1, filename, &v320);\n  v21 = 1LL;\n  LOBYTE(src) = v20 != 0;\n  if ( v20 )\n  {\nLABEL_158:\n    v83 = __errno_location();\n    if ( *v83 != 2 )\n    {\n      *(_QWORD *)fildes = v83;\n      a7 = v13;\n      v84 = sub_40DD80(4LL, filename);\n      v85 = dcgettext(0LL, \"cannot stat %s\", 5);\n      error(0, **(_DWORD **)fildes, v85, v84);\n      return a7;\n    }\n    goto LABEL_59;\n  }\nLABEL_23:\n  if ( stat_buf.st_ino != v320.st_ino || stat_buf.st_dev != v320.st_dev )\n  {\n    if ( HIDWORD(v12->m128i_i64[0]) != 2 )\n      goto LABEL_25;\n    v122 = 0;\n    v123 = 0LL;\n  }\n  else\n  {\n    v122 = v12[1].m128i_i8[7];\n    if ( v122 )\n      goto LABEL_325;\n    if ( HIDWORD(v12->m128i_i64[0]) != 2 )\n    {\n      LOBYTE(old) = v21;\n      s2 = (char *)&v321;\n      v131 = __lxstat(1, filename, &v321);\n      LOBYTE(v21) = (_BYTE)old;\n      if ( v131 )\n        goto LABEL_25;\n      v297 = &v322;\n      v132 = __lxstat(1, v11, &v322);\n      v21 = (unsigned __int8)old;\n      if ( v132 )\n        goto LABEL_25;\n      if ( v322.st_ino == v321.st_ino )\n        v122 = v322.st_dev == v321.st_dev;\n      v124 = (__m128i *)s2;\n      v125 = (__m128i *)v297;\n      if ( (v322.st_mode & 0xF000) == 40960 && (v321.st_mode & 0xF000) == 40960 && v12[1].m128i_i8[5] )\n        goto LABEL_25;\n      goto LABEL_244;\n    }\n    v122 = 1;\n    v123 = 1LL;\n  }\n  v124 = (__m128i *)n;\n  v125 = (__m128i *)v306;\n  if ( (stat_buf.st_mode & 0xF000) == 40960 && (v320.st_mode & 0xF000) == 40960 )\n  {\n    LODWORD(s1) = v123;\n    LOBYTE(old) = v21;\n    if ( (unsigned __int8)sub_40E2F0(v11, filename, v306, v123, v21, n) )\n      goto LABEL_250;\n    LOBYTE(v21) = (_BYTE)old;\n    if ( LODWORD(v12->m128i_i64[0]) || !(_DWORD)s1 )\n      goto LABEL_25;\n    v175 = 1;\n    LOBYTE(v176) = v12[1].m128i_i8[8] ^ 1;\n    goto LABEL_369;\n  }\nLABEL_244:\n  if ( LODWORD(v12->m128i_i64[0]) )\n  {\n    if ( !v122 )\n    {\n      if ( v12[1].m128i_i8[8]\n        || HIDWORD(v12->m128i_i64[0]) == 2\n        || (v125[1].m128i_i32[2] & 0xF000) != 40960\n        || (v124[1].m128i_i32[2] & 0xF000) == 40960 )\n      {\n        goto LABEL_25;\n      }\nLABEL_250:\n      v33 = sub_40DCA0(1LL, 4LL, filename);\n      v34 = \"%s and %s are the same file\";\n      v35 = sub_40DCA0(0LL, 4LL, v11);\nLABEL_56:\n      v36 = dcgettext(0LL, v34, 5);\n      v37 = v33;\n      v38 = v35;\n      v39 = v36;\nLABEL_57:\n      error(0, 0, v39, v38, v37);\n      return 0;\n    }\n    LOBYTE(src) = v21;\n    v199 = sub_40E2F0(v11, filename, v125, v123, v21, v124);\n    LOBYTE(v21) = (_BYTE)src;\n    LOBYTE(v176) = v199 ^ 1;\n    v175 = 0;\nLABEL_369:\n    if ( (_BYTE)v176 )\n    {\n      LOBYTE(src) = v175;\n      goto LABEL_25;\n    }\n    goto LABEL_250;\n  }\n  v149 = v12[1].m128i_u8[8];\n  if ( (_BYTE)v149 || v12[1].m128i_i8[5] )\n  {\n    if ( (v124[1].m128i_i32[2] & 0xF000) == 40960 )\n      goto LABEL_25;\n    if ( !v122 || v124[1].m128i_i64[0] <= 1uLL )\n    {\n      if ( (v125[1].m128i_i32[2] & 0xF000) == 40960 )\n        goto LABEL_312;\n      goto LABEL_342;\n    }\n    LOBYTE(s2) = v21;\n    s1 = v124;\n    old = (char *)v125;\n    v175 = sub_40E2F0(v11, filename, v125, v149, v21, v124);\n    v125 = (__m128i *)old;\n    v124 = (__m128i *)s1;\n    LOBYTE(v21) = (_BYTE)s2;\n    if ( !v175 )\n    {\n      LOBYTE(v176) = v12[1].m128i_i8[8] ^ 1;\n      goto LABEL_369;\n    }\n    if ( (*((_DWORD *)old + 6) & 0xF000) == 40960 )\n      goto LABEL_311;\n  }\n  else if ( (v125[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    goto LABEL_314;\n  }\n  if ( (v124[1].m128i_i32[2] & 0xF000) != 40960 )\n  {\nLABEL_342:\n    if ( v125->m128i_i64[1] != v124->m128i_i64[1] || v125->m128i_i64[0] != v124->m128i_i64[0] )\n      goto LABEL_25;\n    if ( v12[1].m128i_i8[7] )\n      goto LABEL_325;\n  }\nLABEL_311:\n  LOBYTE(v149) = v12[1].m128i_i8[8];\nLABEL_312:\n  if ( (_BYTE)v149 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) == 40960 && v124[1].m128i_i64[0] > 1uLL )\n    {\n      LOBYTE(s2) = v21;\n      s1 = v124;\n      old = (char *)v125;\n      v210 = canonicalize_file_name(v11);\n      v125 = (__m128i *)old;\n      v124 = (__m128i *)s1;\n      LOBYTE(v21) = (_BYTE)s2;\n      if ( v210 )\n      {\n        LOBYTE(old) = (_BYTE)s2;\n        src = v210;\n        v176 = (unsigned __int64)sub_40E2F0(v210, filename, v125, v211, (unsigned __int8)s2, s1) ^ 1;\n        free(src);\n        v175 = 0;\n        LOBYTE(v21) = (_BYTE)s2;\n        goto LABEL_369;\n      }\n    }\n  }\nLABEL_314:\n  if ( v12[2].m128i_i8[12] || v12[1].m128i_i32[1] & 0xFF00FF00 && (v124[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(v176) = v124->m128i_i64[0] == v125->m128i_i64[0];\n    v175 = 0;\n    goto LABEL_369;\n  }\n  if ( HIDWORD(v12->m128i_i64[0]) != 2 )\n    goto LABEL_250;\n  if ( (v125[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(s1) = v21;\n    old = (char *)v124;\n    v234 = __xstat(1, v11, &v322);\n    v124 = (__m128i *)old;\n    LOBYTE(v21) = (_BYTE)s1;\n    if ( v234 )\n      goto LABEL_25;\n  }\n  else\n  {\n    *(__m128i *)&v322.st_dev = _mm_load_si128(v125);\n    *(__m128i *)&v322.st_nlink = _mm_load_si128(v125 + 1);\n    *(__m128i *)&v322.st_gid = _mm_load_si128(v125 + 2);\n    *(__m128i *)&v322.st_size = _mm_load_si128(v125 + 3);\n    *(__m128i *)&v322.st_blocks = _mm_load_si128(v125 + 4);\n    *(__m128i *)&v322.st_atim.tv_nsec = _mm_load_si128(v125 + 5);\n    *(__m128i *)&v322.st_mtim.tv_nsec = _mm_load_si128(v125 + 6);\n    *(__m128i *)&v322.st_ctim.tv_nsec = _mm_load_si128(v125 + 7);\n    *(__m128i *)&v322.__unused[1] = _mm_load_si128(v125 + 8);\n  }\n  if ( (v124[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(old) = v21;\n    v233 = __xstat(1, filename, &v321);\n    LOBYTE(v21) = (_BYTE)old;\n    if ( v233 )\n      goto LABEL_25;\n  }\n  else\n  {\n    *(__m128i *)&v321.st_dev = _mm_load_si128(v124);\n    *(__m128i *)&v321.st_nlink = _mm_load_si128(v124 + 1);\n    *(__m128i *)&v321.st_gid = _mm_load_si128(v124 + 2);\n    *(__m128i *)&v321.st_size = _mm_load_si128(v124 + 3);\n    *(__m128i *)&v321.st_blocks = _mm_load_si128(v124 + 4);\n    *(__m128i *)&v321.st_atim.tv_nsec = _mm_load_si128(v124 + 5);\n    *(__m128i *)&v321.st_mtim.tv_nsec = _mm_load_si128(v124 + 6);\n    *(__m128i *)&v321.st_ctim.tv_nsec = _mm_load_si128(v124 + 7);\n    *(__m128i *)&v321.__unused[1] = _mm_load_si128(v124 + 8);\n  }\n  if ( v322.st_ino == v321.st_ino && v322.st_dev == v321.st_dev )\n  {\n    if ( !v12[1].m128i_i8[7] )\n      goto LABEL_250;\nLABEL_325:\n    LOBYTE(src) = 1;\n  }\nLABEL_25:\n  if ( v309 == 0x4000 )\n  {\n    if ( !v12[1].m128i_i8[8] )\n      goto LABEL_30;\n    v22 = v12->m128i_i64[1];\n  }\n  else\n  {\n    if ( v12[2].m128i_i8[13] )\n    {\n      v119 = 0LL;\n      if ( v12[1].m128i_i8[15] )\n      {\n        v119 = 1LL;\n        if ( v12[1].m128i_i8[8] )\n          v119 = v320.st_dev != stat_buf.st_dev;\n      }\n      LOBYTE(old) = v21;\n      v120 = sub_40EB60(filename, n, v306, v119);\n      LOBYTE(v21) = (_BYTE)old;\n      if ( v120 >= 0 )\n      {\n        if ( a11 )\n          *a11 = 1;\n        v121 = sub_4096D0(filename);\n        if ( v121 && !(unsigned __int8)sub_404C10(v121, (__int64)filename, 1u, v12[2].m128i_i8[14], (char)ptr) )\n        {\n          if ( !v12[2].m128i_i8[5] )\n            return a7;\n          goto LABEL_240;\n        }\n        return 1;\n      }\n    }\n    v22 = v12->m128i_i64[1];\n    if ( !v12[1].m128i_i8[8] )\n    {\n      if ( v22 == 2 )\n        return 1;\n      if ( v22 == 3 )\n      {\n        LOBYTE(old) = v21;\n        v196 = sub_404AE0((__int64)v12, filename, (unsigned int *)(n + 24));\n        LOBYTE(v21) = (_BYTE)old;\n        if ( !v196 )\n          return 1;\n      }\n      goto LABEL_30;\n    }\n  }\n  if ( v22 == 2\n    || (v22 == 3\n     || v22 == 4\n     && v12[2].m128i_i8[15]\n     && (LOBYTE(old) = v21, v133 = sub_404890(filename, v320.st_mode), LOBYTE(v21) = (_BYTE)old, !v133))\n    && (LOBYTE(old) = v21,\n        v134 = sub_404AE0((__int64)v12, filename, (unsigned int *)(n + 24)),\n        LOBYTE(v21) = (_BYTE)old,\n        !v134) )\n  {\n    if ( !a11 )\n      return 1;\nLABEL_285:\n    a7 = 1;\n    *a11 = 1;\n    return a7;\n  }\nLABEL_30:\n  if ( (_BYTE)src )\n    return 1;\n  v23 = v320.st_mode;\n  LOBYTE(v24) = v21 ^ 1;\n  if ( (v320.st_mode & 0xF000) != 0x4000 )\n  {\n    if ( v309 == 0x4000 )\n    {\n      if ( !v12[1].m128i_i8[8] || (v25 = v12->m128i_i64[0]) == 0 )\n      {\n        v33 = sub_40DCA0(1LL, 4LL, v11);\n        v34 = \"cannot overwrite non-directory %s with directory %s\";\n        v35 = sub_40DCA0(0LL, 4LL, filename);\n        goto LABEL_56;\n      }\n      if ( !(_BYTE)a8 )\n        goto LABEL_350;\n    }\n    else\n    {\n      v25 = v12->m128i_i64[0];\n      if ( !(_BYTE)a8 )\n        goto LABEL_39;\n    }\n    if ( v25 != 3 )\n    {\n      v26 = v12[3].m128i_i64[1];\n      LOBYTE(old) = v21 ^ 1;\n      v27 = sub_40ABF0(v26, filename, n);\n      LOBYTE(v24) = (_BYTE)old;\n      if ( v27 )\n      {\n        v33 = sub_40DCA0(1LL, 4LL, v11);\n        v34 = \"will not overwrite just-created %s with %s\";\n        v35 = sub_40DCA0(0LL, 4LL, filename);\n        goto LABEL_56;\n      }\n      if ( v309 == 0x4000 )\n        goto LABEL_38;\n      v23 = v320.st_mode;\n      if ( (v320.st_mode & 0xF000) != 0x4000 )\n        goto LABEL_38;\n      goto LABEL_348;\n    }\n    if ( !v12[1].m128i_i8[8] )\n      goto LABEL_391;\nLABEL_350:\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      goto LABEL_351;\n    goto LABEL_409;\n  }\n  if ( v309 != 0x4000 )\n  {\nLABEL_348:\n    if ( v12[1].m128i_i8[8] )\n    {\n      v25 = v12->m128i_i64[0];\n      if ( LODWORD(v12->m128i_i64[0]) )\n        goto LABEL_350;\n    }\n    v117 = \"cannot overwrite directory %s with non-directory\";\n    v15 = sub_40DD80(4LL, filename);\nLABEL_226:\n    v118 = dcgettext(0LL, v117, 5);\nLABEL_227:\n    a7 = 0;\n    error(0, 0, v118, v15);\n    return a7;\n  }\nLABEL_38:\n  v25 = v12->m128i_i64[0];\nLABEL_39:\n  v28 = v12[1].m128i_i8[8];\n  if ( v28 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      goto LABEL_395;\n    v23 = v320.st_mode;\nLABEL_409:\n    if ( (v23 & 0xF000) == 0x4000 )\n    {\nLABEL_395:\n      if ( !v25 )\n        goto LABEL_393;\n      goto LABEL_351;\n    }\n    if ( !v25 )\n    {\n      v33 = sub_40DE50(0LL, 3LL, filename);\n      v34 = \"cannot move directory onto non-directory: %s -> %s\";\n      v35 = sub_40DE50(0LL, 3LL, v11);\n      goto LABEL_56;\n    }\nLABEL_351:\n    LOBYTE(n) = v24;\n    v158 = (_BYTE *)sub_40AA00(v11);\n    v24 = (unsigned __int8)n;\n    v160 = v158;\n    if ( *v158 != 46 )\n      goto LABEL_352;\n    v28 = 1;\n    goto LABEL_431;\n  }\n  if ( v25 )\n  {\nLABEL_391:\n    LOBYTE(n) = v24;\n    v193 = (_BYTE *)sub_40AA00(v11);\n    v24 = (unsigned __int8)n;\n    v160 = v193;\n    if ( *v193 != 46 )\n    {\nLABEL_392:\n      if ( (v320.st_mode & 0xF000) == 0x4000 )\n      {\nLABEL_393:\n        old = 0LL;\n        goto LABEL_60;\n      }\nLABEL_352:\n      if ( v25 != 3 )\n      {\n        LOBYTE(n) = v24;\n        s1 = v160;\n        src = (char *)strlen(v160);\n        old = (char *)sub_40AA00(filename);\n        v161 = strlen(old);\n        s2 = ::src;\n        v162 = strlen(::src);\n        v24 = (unsigned __int8)n;\n        v298 = v162;\n        if ( src == (char *)(v161 + v162) )\n        {\n          LOBYTE(src) = n;\n          n = (size_t)s1;\n          v163 = memcmp(s1, old, v161);\n          v24 = (unsigned __int8)src;\n          if ( !v163 )\n          {\n            v164 = strcmp((const char *)(n + v161), s2);\n            v24 = (unsigned __int8)src;\n            if ( !v164 )\n            {\n              LOBYTE(old) = (_BYTE)src;\n              v165 = strlen(filename);\n              n = v165;\n              v166 = (char *)sub_4100E0(v298 + v165 + 1);\n              v167 = v166;\n              src = ::src;\n              v168 = (char *)mempcpy(v166, filename, n);\n              strcpy(v168, src);\n              LODWORD(src) = __xstat(1, v167, &v322);\n              free(v167);\n              v24 = (unsigned __int8)old;\n              if ( !(_DWORD)src && stat_buf.st_ino == v322.st_ino && stat_buf.st_dev == v322.st_dev )\n              {\n                if ( v12[1].m128i_i8[8] )\n                  v255 = dcgettext(0LL, \"backing up %s might destroy source;  %s not moved\", 5);\n                else\n                  v255 = dcgettext(0LL, \"backing up %s might destroy source;  %s not copied\", 5);\n                v256 = sub_40DCA0(1LL, 4LL, v11);\n                v257 = sub_40DCA0(0LL, 4LL, filename);\n                v37 = v256;\n                v39 = v255;\n                v38 = v257;\n                goto LABEL_57;\n              }\n            }\n          }\n        }\n      }\n      v169 = LODWORD(v12->m128i_i64[0]);\n      LOBYTE(src) = v24;\n      v170 = (char *)sub_40A570(filename, v169, v159, v24, v160);\n      v171 = v170;\n      old = v170;\n      LOBYTE(n) = (_BYTE)src;\n      if ( v170 )\n      {\n        v172 = strlen(v170);\n        v173 = alloca(v172 + 9);\n        v174 = (char *)memcpy((void *)(((unsigned __int64)&v283 + 7) & 0xFFFFFFFFFFFFFFF0LL), v171, v172 + 1);\n        free(old);\n        old = v174;\n        LOBYTE(v24) = n;\n        LOBYTE(src) = 1;\n        goto LABEL_60;\n      }\n      v202 = __errno_location();\n      LOBYTE(src) = 1;\n      LOBYTE(v24) = n;\n      v31 = v202;\n      if ( *v202 == 2 )\n        goto LABEL_60;\n      v203 = \"cannot backup %s\";\n      v204 = sub_40DD80(4LL, filename);\nLABEL_422:\n      a7 = 0;\n      v205 = dcgettext(0LL, v203, 5);\n      error(0, *v31, v205, v204);\n      return a7;\n    }\n    v28 = 0;\nLABEL_431:\n    v159 = (unsigned __int8)v160[(v160[1] == 46) + 1];\n    if ( !(_BYTE)v159 || (_BYTE)v159 == 47 )\n      goto LABEL_41;\n    if ( v28 )\n      goto LABEL_352;\n    goto LABEL_392;\n  }\nLABEL_41:\n  old = 0LL;\n  if ( (unsigned __int8)v28 | ((v320.st_mode & 0xF000) == 0x4000)\n    || (LOBYTE(src) = v12[1].m128i_i8[5], !(_BYTE)src)\n    && (!v12[2].m128i_i8[2] || v320.st_nlink <= 1)\n    && ((old = 0LL, HIDWORD(v12->m128i_i64[0]) != 2) || (stat_buf.st_mode & 0xF000) == 0x8000) )\n  {\nLABEL_60:\n    if ( !(_BYTE)a8 || !v12[3].m128i_i64[1] )\n      goto LABEL_61;\n    goto LABEL_50;\n  }\n  LOBYTE(src) = v24;\n  v29 = unlink(filename);\n  LOBYTE(v24) = (_BYTE)src;\n  if ( v29 )\n  {\n    v30 = __errno_location();\n    LOBYTE(v24) = (_BYTE)src;\n    v31 = v30;\n    if ( *v30 != 2 )\n    {\n      v203 = \"cannot remove %s\";\n      v204 = sub_40DD80(4LL, filename);\n      goto LABEL_422;\n    }\n  }\n  LOBYTE(src) = v12[2].m128i_i8[14];\n  if ( (_BYTE)src )\n  {\n    LOBYTE(n) = v24;\n    v215 = sub_40DD80(4LL, filename);\n    v216 = dcgettext(0LL, \"removed %s\\n\", 5);\n    __printf_chk(1LL, v216, v215, v217, v218);\n    LOBYTE(v24) = n;\n    old = 0LL;\n    goto LABEL_60;\n  }\n  if ( !(_BYTE)a8 )\n  {\n    LOBYTE(src) = v12[2].m128i_i8[10] & (v309 == 0x4000);\n    if ( (_BYTE)src )\n    {\n      v62 = stat_buf.st_dev;\n      v63 = stat_buf.st_ino;\n      old = 0LL;\n      goto LABEL_229;\n    }\n    LOBYTE(src) = 1;\n    old = 0LL;\n    goto LABEL_65;\n  }\n  v14 = v12[3].m128i_i64[1] == 0;\n  LOBYTE(src) = a8;\n  old = 0LL;\n  if ( !v14 )\n  {\nLABEL_50:\n    if ( v12[1].m128i_i8[8] )\n    {\n      if ( v12[2].m128i_i8[14] )\n      {\nLABEL_144:\n        if ( v309 != 0x4000 || !v12[2].m128i_i8[10] )\n          goto LABEL_146;\nLABEL_126:\n        v62 = stat_buf.st_dev;\n        v63 = stat_buf.st_ino;\n        if ( (_BYTE)a8 )\n        {\n          n = sub_4096D0(filename);\n          goto LABEL_128;\n        }\nLABEL_229:\n        n = sub_409690(v63, v62);\nLABEL_128:\n        if ( !n )\n          goto LABEL_142;\n        goto LABEL_129;\n      }\n      goto LABEL_124;\n    }\n    if ( LODWORD(v12->m128i_i64[0]) )\n    {\n      if ( !v12[2].m128i_i8[14] )\n      {\n        if ( v309 != 0x4000 )\n          goto LABEL_66;\n        goto LABEL_187;\n      }\nLABEL_63:\n      if ( v309 != 0x4000 )\n      {\n        sub_404A30((__int64)v11, (__int64)filename, (__int64)old);\n        goto LABEL_65;\n      }\nLABEL_187:\n      if ( v12[2].m128i_i8[10] )\n        goto LABEL_126;\nLABEL_66:\n      if ( !v12[2].m128i_i8[2] )\n      {\n        n = 0LL;\n        fildes[0] = (unsigned __int8)src;\n        goto LABEL_68;\n      }\nLABEL_140:\n      if ( v12[1].m128i_i8[7] )\n      {\n        n = 0LL;\n        goto LABEL_142;\n      }\n      if ( stat_buf.st_nlink <= 1 )\n      {\n        v86 = HIDWORD(v12->m128i_i64[0]);\n        if ( !(_BYTE)a8 || v86 != 3 )\n        {\n          n = 0LL;\n          if ( v86 != 4 )\n            goto LABEL_142;\n        }\n      }\n      n = sub_4096D0(filename);\n      goto LABEL_165;\n    }\n    v32 = &v320;\n    if ( !(_BYTE)v24 )\n    {\n      if ( __lxstat(1, filename, &v322) )\n        goto LABEL_61;\n      v32 = &v322;\n    }\n    if ( (v32->st_mode & 0xF000) != 40960 || !(unsigned __int8)sub_40ABF0(v12[3].m128i_i64[1], filename, v32) )\n    {\nLABEL_61:\n      if ( v12[2].m128i_i8[14] )\n      {\n        if ( !v12[1].m128i_i8[8] )\n          goto LABEL_63;\n        goto LABEL_144;\n      }\n      goto LABEL_124;\n    }\n    v33 = sub_40DCA0(1LL, 4LL, filename);\n    v34 = \"will not copy %s through just-created symlink %s\";\n    v35 = sub_40DCA0(0LL, 4LL, v11);\n    goto LABEL_56;\n  }\nLABEL_124:\n  if ( v12[2].m128i_i8[10] && v309 == 0x4000 )\n    goto LABEL_126;\nLABEL_65:\n  if ( !v12[1].m128i_i8[8] )\n    goto LABEL_66;\nLABEL_146:\n  if ( stat_buf.st_nlink != 1 )\n  {\n    if ( !v12[2].m128i_i8[2] )\n    {\n      n = 0LL;\n      goto LABEL_149;\n    }\n    goto LABEL_140;\n  }\n  n = sub_409690(stat_buf.st_ino, stat_buf.st_dev);\nLABEL_165:\n  if ( !n )\n    goto LABEL_142;\n  if ( v309 != 0x4000 )\n  {\n    if ( (unsigned __int8)sub_404C10(n, (__int64)filename, 1u, v12[2].m128i_i8[14], (char)ptr) )\n      return 1;\n    goto LABEL_135;\n  }\nLABEL_129:\n  if ( (unsigned __int8)sub_40E2F0(v11, n, v64, v65, v66, v67) )\n  {\n    v15 = sub_40DCA0(1LL, 4LL, qword_61D908);\n    v152 = sub_40DCA0(0LL, 4LL, qword_61D910);\n    v153 = dcgettext(0LL, \"cannot copy a directory, %s, into itself, %s\", 5);\n    error(0, 0, v153, v152, v15);\n    *a10 = 1;\nLABEL_135:\n    if ( !v12[2].m128i_i8[5] )\n      goto LABEL_136;\n    goto LABEL_240;\n  }\n  if ( (unsigned __int8)sub_40E2F0(filename, n, v68, v69, v70, v71) )\n  {\n    v194 = sub_40DD80(4LL, qword_61D910);\n    v195 = dcgettext(0LL, \"warning: source directory %s specified more than once\", 5);\n    error(0, 0, v195, v194);\n    if ( !v12[1].m128i_i8[8] || !LOBYTE(fildes[0]) )\n      return 1;\n    goto LABEL_285;\n  }\n  v72 = HIDWORD(v12->m128i_i64[0]);\n  if ( v72 != 4 && (v72 != 3 || !(_BYTE)a8) )\n  {\n    v73 = sub_40DCA0(1LL, 4LL, n);\n    v15 = sub_40DCA0(0LL, 4LL, filename);\n    v74 = dcgettext(0LL, \"will not create hard link %s to directory %s\", 5);\n    error(0, 0, v74, v15, v73);\n    goto LABEL_135;\n  }\nLABEL_142:\n  if ( !v12[1].m128i_i8[8] )\n  {\n    fildes[0] = (unsigned __int8)src;\n    goto LABEL_68;\n  }\nLABEL_149:\n  if ( !rename(v11, filename) )\n  {\n    if ( v12[2].m128i_i8[14] )\n    {\n      v154 = dcgettext(0LL, \"renamed \", 5);\n      __printf_chk(1LL, v154, v155, v156, v157);\n      sub_404A30((__int64)v11, (__int64)filename, (__int64)old);\n    }\n    if ( v12[2].m128i_i8[1] )\n      sub_4052E0((__int64)filename, 0LL, 1LL, (__int64)v12);\n    if ( a11 )\n      *a11 = 1;\n    if ( (_BYTE)a8 )\n    {\n      a7 = a8;\n      sub_40AB60(v12[3].m128i_i64[1], filename, v306);\n      return a7;\n    }\n    return 1;\n  }\n  v79 = __errno_location();\n  v80 = v79;\n  v81 = *v79;\n  if ( v81 == 22 )\n  {\n    a7 = 1;\n    v181 = sub_40DCA0(1LL, 4LL, qword_61D908);\n    v182 = sub_40DCA0(0LL, 4LL, qword_61D910);\n    v183 = dcgettext(0LL, \"cannot move %s to a subdirectory of itself, %s\", 5);\n    error(0, 0, v183, v182, v181);\n    *a10 = 1;\n    return a7;\n  }\n  if ( v81 != 18 )\n  {\n    v127 = sub_40DCA0(1LL, 4LL, filename);\n    v128 = \"cannot move %s to %s\";\n    v129 = sub_40DCA0(0LL, 4LL, v11);\n    goto LABEL_256;\n  }\n  if ( v309 == 0x4000 )\n  {\n    if ( !rmdir(filename) || *v80 == 2 )\n      goto LABEL_156;\n    goto LABEL_255;\n  }\n  if ( unlink(filename) && *v80 != 2 )\n  {\nLABEL_255:\n    v127 = sub_40DCA0(1LL, 4LL, filename);\n    v128 = \"inter-device move failed: %s to %s; unable to remove target\";\n    v129 = sub_40DCA0(0LL, 4LL, v11);\nLABEL_256:\n    v130 = dcgettext(0LL, v128, 5);\n    error(0, *v80, v130, v129, v127);\n    sub_409640(stat_buf.st_ino, stat_buf.st_dev);\n    return a7;\n  }\n  LOBYTE(src) = v12[2].m128i_i8[14] & (v309 != 0x4000);\n  if ( !(_BYTE)src )\n  {\nLABEL_156:\n    fildes[0] = 1;\n    LOBYTE(src) = 1;\n    goto LABEL_68;\n  }\n  v177 = dcgettext(0LL, \"copied \", 5);\n  __printf_chk(1LL, v177, v178, v179, v180);\n  sub_404A30((__int64)v11, (__int64)filename, (__int64)old);\n  fildes[0] = 1;\nLABEL_68:\n  v40 = v308 & 0xFFF;\n  if ( v12[2].m128i_i8[11] )\n    v40 = v12[1].m128i_i32[0] & 0xFFF;\n  if ( v12[1].m128i_i8[13] )\n  {\n    if ( !(unsigned __int8)sub_405210((__int64)v11, (__int64)filename, v308, fildes[0], (__int64)v12) )\n      return a7;\n    LODWORD(s1) = v40 & 0x3F;\n    if ( v309 != 0x4000 )\n      goto LABEL_73;\nLABEL_178:\n    v88 = stat_buf.st_ino;\n    v89 = stat_buf.st_dev;\n    v90 = *(_QWORD **)fd;\n    if ( *(_QWORD *)fd )\n    {\n      while ( v90[1] != stat_buf.st_ino || v90[2] != stat_buf.st_dev )\n      {\n        v90 = (_QWORD *)*v90;\n        if ( !v90 )\n          goto LABEL_200;\n      }\n      v91 = \"cannot copy cyclic symbolic link %s\";\n      v15 = sub_40DD80(4LL, v11);\n      goto LABEL_184;\n    }\nLABEL_200:\n    v97 = (_QWORD *)((unsigned __int64)&v281 & 0xFFFFFFFFFFFFFFF0LL);\n    v14 = (_BYTE)src == 0;\n    v298 = (__int64)v97;\n    *v97 = *(_QWORD *)fd;\n    v97[1] = v88;\n    v97[2] = v89;\n    if ( v14 && (v320.st_mode & 0xF000) == 0x4000 )\n    {\n      if ( v12[2].m128i_i64[0] & 0xFF000000FF00LL\n        && !(unsigned __int8)sub_4052E0((__int64)filename, v12[2].m128i_u8[5], 0LL, (__int64)v12)\n        && v12[2].m128i_i8[6] )\n      {\n        goto LABEL_197;\n      }\n      v296 = 0;\n      LODWORD(s1) = 0;\n    }\n    else\n    {\n      if ( mkdir(filename, v40 & ~(_DWORD)s1) )\n      {\n        v94 = \"cannot create directory %s\";\n        v15 = sub_40DD80(4LL, filename);\n        goto LABEL_196;\n      }\n      if ( __lxstat(1, filename, &v320) )\n      {\n        v94 = \"cannot stat %s\";\n        v15 = sub_40DD80(4LL, filename);\n        goto LABEL_196;\n      }\n      v98 = v320.st_mode;\n      v296 = 0;\n      if ( (v320.st_mode & 0x1C0) != 448 )\n      {\n        v99 = chmod(filename, v320.st_mode | 0x1C0);\n        v289 = v98;\n        v296 = 1;\n        if ( v99 )\n        {\n          v94 = \"setting permissions for %s\";\n          v15 = sub_40DD80(4LL, filename);\n          goto LABEL_196;\n        }\n      }\n      if ( !*a9 )\n      {\n        sub_4096D0(filename);\n        *a9 = 1;\n      }\n      if ( v12[2].m128i_i8[14] )\n      {\n        if ( v12[1].m128i_i8[8] )\n        {\n          v100 = sub_40DD80(4LL, filename);\n          v101 = dcgettext(0LL, \"created directory %s\\n\", 5);\n          __printf_chk(1LL, v101, v100, v102, v103);\n        }\n        else\n        {\n          sub_404A30((__int64)v11, (__int64)filename, 0LL);\n        }\n      }\n    }\n    LOBYTE(ptr) = v12[1].m128i_i8[12] & (v302 != 0);\n    if ( !(_BYTE)ptr || (LOBYTE(fd[0]) = 0, v43 = 0, *(_QWORD *)v302 == stat_buf.st_dev) )\n    {\n      v104 = _mm_loadu_si128(v12 + 1);\n      v105 = _mm_loadu_si128(v12 + 2);\n      v106 = _mm_loadu_si128(v12 + 3);\n      v107 = v12[4].m128i_i64[0];\n      *(__m128i *)&v322.st_dev = _mm_loadu_si128(v12);\n      *(__m128i *)&v322.st_nlink = v104;\n      *(__m128i *)&v322.st_gid = v105;\n      *(__m128i *)&v322.st_size = v106;\n      v322.st_blocks = v107;\n      s = (char *)sub_40E7F0(v11, 2LL);\n      if ( s )\n      {\n        if ( HIDWORD(v12->m128i_i64[0]) == 3 )\n          HIDWORD(v322.st_dev) = 2;\n        if ( *s )\n        {\n          LOBYTE(v291) = a7;\n          v108 = s;\n          s2 = (char *)&v321;\n          v109 = 0;\n          v297 = &v322;\n          v290 = (__blksize_t)v12;\n          LOBYTE(ptr) = 1;\n          v302 = (__off_t)&length;\n          *(_QWORD *)fd = v11;\n          v293 = a8;\n          do\n          {\n            v110 = (void *)sub_40AEB0(*(_QWORD *)fd, v108, 0LL);\n            v111 = sub_40AEB0(filename, v108, 0LL);\n            v112 = (void *)v111;\n            LOBYTE(v321.st_dev) = *a9;\n            v113 = sub_405650((_DWORD)v110, v111, (unsigned int)fildes[0], (__int64)v306, v298);\n            LOBYTE(ptr) = v113 & (unsigned __int8)ptr;\n            *a10 |= length;\n            free(v112);\n            free(v110);\n            if ( (_BYTE)length )\n              break;\n            v109 |= LOBYTE(v321.st_dev);\n            v108 += strlen(v108) + 1;\n          }\n          while ( *v108 );\n          v114 = v109;\n          v11 = *(char **)fd;\n          a7 = (unsigned __int8)v291;\n          v12 = (const __m128i *)v290;\n          v15 = v293;\n        }\n        else\n        {\n          v114 = 0;\n          LOBYTE(ptr) = 1;\n        }\n        free(s);\n        *a9 = v114;\n      }\n      else\n      {\n        *(_QWORD *)fildes = sub_40DD80(4LL, v11);\n        v208 = dcgettext(0LL, \"cannot access %s\", 5);\n        v209 = __errno_location();\n        error(0, *v209, v208, *(_QWORD *)fildes);\n        LOBYTE(ptr) = 0;\n      }\n      LOBYTE(fd[0]) = 0;\n      v43 = 0;\n    }\n    goto LABEL_79;\n  }\n  if ( v309 == 0x4000 )\n  {\n    if ( !(unsigned __int8)sub_405210((__int64)v11, (__int64)filename, v308, fildes[0], (__int64)v12) )\n      return a7;\n    LODWORD(s1) = v40 & 0x12;\n    goto LABEL_178;\n  }\n  v41 = sub_405210((__int64)v11, (__int64)filename, v308, fildes[0], (__int64)v12);\n  LODWORD(s1) = 0;\n  if ( !v41 )\n    return a7;\nLABEL_73:\n  LOBYTE(fd[0]) = v12[2].m128i_i8[12];\n  if ( LOBYTE(fd[0]) )\n  {\n    if ( *v11 == 47 )\n    {\nLABEL_77:\n      if ( (int)sub_409C90(v11, 4294967196LL, filename, v12[1].m128i_u8[6]) < 0 )\n      {\n        v15 = sub_40DCA0(1LL, 4LL, v11);\n        v184 = sub_40DCA0(0LL, 4LL, filename);\n        v185 = dcgettext(0LL, \"cannot create symbolic link %s to %s\", 5);\n        v186 = __errno_location();\n        error(0, *v186, v185, v184, v15);\n        goto LABEL_197;\n      }\n      v296 = 0;\n      v43 = 0;\n      LOBYTE(ptr) = fd[0];\n      goto LABEL_79;\n    }\n    v42 = (void *)sub_40A920(filename);\n    if ( !strcmp(\".\", (const char *)v42)\n      || __xstat(1, \".\", &v321)\n      || __xstat(1, (const char *)v42, &v322)\n      || v321.st_ino == v322.st_ino && v321.st_dev == v322.st_dev )\n    {\n      free(v42);\n      goto LABEL_77;\n    }\n    free(v42);\n    v91 = \"%s: can make relative symbolic links only in current directory\";\n    v15 = sub_40DE50(0LL, 3LL, filename);\nLABEL_184:\n    v92 = dcgettext(0LL, v91, 5);\n    error(0, 0, v92, v15);\n    goto LABEL_197;\n  }\n  v296 = v12[1].m128i_i8[7];\n  if ( v296 )\n  {\n    v126 = sub_404C10((__int64)v11, (__int64)filename, v12[1].m128i_u8[6], 0, (char)ptr);\n    v43 = 0;\n    v296 = 0;\n    LOBYTE(ptr) = v126;\n    if ( !v126 )\n      goto LABEL_197;\nLABEL_79:\n    v44 = v309 != 0x4000;\n    if ( !(_BYTE)src && v12[1].m128i_i8[4] != 1 && v44 )\n    {\n      if ( v12[2].m128i_i64[0] & 0xFF000000FF00LL )\n      {\n        v45 = v12[2].m128i_u8[5];\n        LOBYTE(fildes[0]) = v43;\n        v46 = sub_4052E0((__int64)filename, v45, 0LL, (__int64)v12);\n        v43 = fildes[0];\n        if ( !v46 )\n        {\n          if ( v12[2].m128i_i8[6] )\n            goto LABEL_197;\n        }\n      }\n    }\n    if ( (_BYTE)v15 )\n    {\n      if ( v12[3].m128i_i64[1] )\n      {\n        LOBYTE(fildes[0]) = v43;\n        v47 = __lxstat(1, filename, &v322);\n        v43 = fildes[0];\n        if ( !v47 )\n        {\n          sub_40AB60(v12[3].m128i_i64[1], filename, &v322);\n          v43 = fildes[0];\n        }\n      }\n    }\n    if ( v12[1].m128i_i8[7] && v44 || v43 )\n      return (unsigned __int8)ptr;\n    if ( v12[1].m128i_i8[15] )\n    {\n      v322.st_dev = stat_buf.st_atim.tv_sec;\n      v322.st_ino = stat_buf.st_atim.tv_nsec;\n      *(timespec *)&v322.st_nlink = stat_buf.st_mtim;\n      if ( !LOBYTE(fd[0]) )\n      {\n        if ( !(unsigned int)sub_40F8A0(filename) )\n        {\nLABEL_98:\n          if ( !v12[1].m128i_i8[13] || !(_BYTE)src && stat_buf.st_uid == v320.st_uid && stat_buf.st_gid == v320.st_gid )\n            goto LABEL_105;\n          v51 = sub_405430((__int64)v12, filename, 0xFFFFFFFF, v306, (char)src, (__int64)&v320);\n          if ( v51 != -1 )\n          {\n            v52 = v308;\n            BYTE1(v52) &= 0xF1u;\n            if ( v51 )\n              v52 = v308;\n            v308 = v52;\nLABEL_105:\n            if ( !(v12[1].m128i_i64[1] & 0xFF0000000000FFLL) )\n            {\n              if ( v12[2].m128i_i8[11] )\n              {\n                v191 = v12[1].m128i_u32[0];\n              }\n              else\n              {\n                if ( !v12[2].m128i_i8[0] )\n                {\n                  if ( (_DWORD)s1 && (LODWORD(s1) = ~(unsigned int)sub_405620() & (unsigned int)s1, (_DWORD)s1) )\n                  {\n                    if ( v296 != 1 )\n                    {\n                      if ( (_BYTE)src && __lxstat(1, filename, &v320) )\n                      {\n                        v17 = filename;\n                        goto LABEL_118;\n                      }\n                      v289 = v320.st_mode;\n                      if ( !(~v320.st_mode & (unsigned int)s1) )\n                        return (unsigned __int8)ptr;\n                    }\n                  }\n                  else if ( !v296 )\n                  {\n                    return (unsigned __int8)ptr;\n                  }\n                  if ( !chmod(filename, (unsigned int)s1 | v289) )\n                    return (unsigned __int8)ptr;\n                  v53 = sub_40DD80(4LL, filename);\n                  v54 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n                  v55 = __errno_location();\n                  error(0, *v55, v54, v53);\nLABEL_112:\n                  v56 = (unsigned __int8)ptr;\n                  if ( v12[2].m128i_i8[4] )\n                    v56 = a7;\n                  return v56;\n                }\n                v191 = ~(unsigned __int16)sub_405620() & 0x1FF;\n              }\n              v14 = (unsigned int)sub_409E20(filename, 0xFFFFFFFFLL, v191) == 0;\n              v192 = (unsigned __int8)ptr;\n              if ( !v14 )\n                v192 = a7;\n              return v192;\n            }\n            if ( !(unsigned int)sub_409D90(v11, 0xFFFFFFFFLL, filename, 0xFFFFFFFFLL, v308) )\n              return (unsigned __int8)ptr;\n            goto LABEL_112;\n          }\n          return 0;\n        }\n        goto LABEL_96;\n      }\n      if ( (unsigned int)sub_40F8B0(filename) && *__errno_location() != 38 )\n      {\nLABEL_96:\n        v48 = sub_40DD80(4LL, filename);\n        v49 = dcgettext(0LL, \"preserving times for %s\", 5);\n        v50 = __errno_location();\n        error(0, *v50, v49, v48);\n        if ( v12[2].m128i_i8[4] )\n          return 0;\n        goto LABEL_97;\n      }\n    }\nLABEL_97:\n    if ( LOBYTE(fd[0]) )\n      return (unsigned __int8)ptr;\n    goto LABEL_98;\n  }\n  if ( v309 != 0x8000 && !(v12[1].m128i_i8[4] & (v309 != 40960)) )\n  {\n    LOBYTE(fildes[0]) = 0;\n    if ( v309 == 4096 )\n    {\n      v322.st_dev = 0LL;\n      v197 = v308 & ~(_DWORD)s1;\n      v198 = __xmknod(0, filename, v308 & ~(_DWORD)s1, &v322.st_dev);\n      v43 = fildes[0];\n      if ( !v198 || (v212 = mkfifo(filename, v197 & 0xFFFFEFFF), v43 = fildes[0], !v212) )\n      {\n        LOBYTE(fd[0]) = v43;\n        v296 = v43;\n        LOBYTE(ptr) = 1;\n        goto LABEL_79;\n      }\n      v94 = \"cannot create fifo %s\";\n      v15 = sub_40DD80(4LL, filename);\n      goto LABEL_196;\n    }\n    LOBYTE(ptr) = v309 == 49152 || (v308 & 0xB000) == 0x2000;\n    if ( (_BYTE)ptr )\n    {\n      v322.st_dev = stat_buf.st_rdev;\n      v93 = __xmknod(0, filename, v308 & ~(_DWORD)s1, &v322.st_dev);\n      v43 = fildes[0];\n      LOBYTE(fd[0]) = fildes[0];\n      v296 = fildes[0];\n      if ( !v93 )\n        goto LABEL_79;\n      v94 = \"cannot create special file %s\";\n      v15 = sub_40DD80(4LL, filename);\nLABEL_196:\n      v95 = dcgettext(0LL, v94, 5);\n      v96 = __errno_location();\n      error(0, *v96, v95, v15);\n      goto LABEL_197;\n    }\n    if ( v309 != 40960 )\n    {\n      v91 = \"%s has unknown file type\";\n      v15 = sub_40DD80(4LL, v11);\n      goto LABEL_184;\n    }\n    v187 = sub_409E80(v11);\n    v188 = (char *)v187;\n    if ( !v187 )\n    {\n      v94 = \"cannot read symbolic link %s\";\n      v15 = sub_40DD80(4LL, v11);\n      goto LABEL_196;\n    }\n    if ( (int)sub_409C90(v187, 4294967196LL, filename, v12[1].m128i_u8[6]) < 0 )\n    {\n      fildes[0] = *__errno_location();\n      if ( fildes[0] )\n      {\n        if ( v12[2].m128i_i8[13] == 1 && !(_BYTE)src && (v320.st_mode & 0xF000) == 40960 )\n        {\n          v263 = -1LL;\n          v264 = v188;\n          do\n          {\n            if ( !v263 )\n              break;\n            v14 = *v264++ == (_BYTE)src;\n            --v263;\n          }\n          while ( !v14 );\n          if ( v320.st_size == -v263 - 2 )\n          {\n            v265 = (void *)sub_409E80(filename);\n            if ( v265 )\n            {\n              ptr = v265;\n              if ( !strcmp((const char *)v265, v188) )\n              {\n                free(ptr);\n                goto LABEL_377;\n              }\n              free(ptr);\n            }\n          }\n        }\n        free(v188);\n        v213 = sub_40DD80(4LL, filename);\n        v214 = dcgettext(0LL, \"cannot create symbolic link %s\", 5);\n        error(0, fildes[0], v214, v213);\n        goto LABEL_197;\n      }\n    }\nLABEL_377:\n    free(v188);\n    v296 = v12[2].m128i_i8[5];\n    if ( !v296 )\n    {\n      v43 = v12[1].m128i_i8[13];\n      if ( v43 )\n      {\n        LOBYTE(fildes[0]) = v12[1].m128i_i8[13];\n        if ( lchown(filename, stat_buf.st_uid, stat_buf.st_gid) )\n        {\n          LOBYTE(fd[0]) = sub_405400((__int64)v12);\n          if ( LOBYTE(fd[0]) )\n          {\n            v43 = 0;\n            LOBYTE(ptr) = fd[0];\n          }\n          else\n          {\n            v261 = dcgettext(0LL, \"failed to preserve ownership for %s\", 5);\n            v262 = __errno_location();\n            error(0, *v262, v261, filename);\n            v296 = v12[2].m128i_i8[4];\n            if ( v296 )\n              goto LABEL_197;\n            LOBYTE(fd[0]) = fildes[0];\n            LOBYTE(ptr) = fildes[0];\n            v43 = 0;\n          }\n        }\n        else\n        {\n          LOBYTE(fd[0]) = fildes[0];\n          LOBYTE(ptr) = fildes[0];\n          v43 = 0;\n        }\n      }\n      else\n      {\n        v296 = 0;\n        LOBYTE(fd[0]) = 1;\n        LOBYTE(ptr) = 1;\n      }\n      goto LABEL_79;\n    }\nLABEL_240:\n    sub_4049F0();\n    goto LABEL_241;\n  }\n  LODWORD(v298) = stat_buf.st_mode;\n  LOBYTE(s2) = v12[2].m128i_i8[3];\n  fildes[0] = sub_40AB10((char)v11);\n  if ( fildes[0] < 0 )\n  {\n    v94 = \"cannot open %s for reading\";\n    v15 = sub_40DD80(4LL, v11);\n    goto LABEL_196;\n  }\n  if ( __fxstat(1, fildes[0], &v321) )\n  {\n    ptr = (void *)sub_40DD80(4LL, v11);\n    v206 = dcgettext(0LL, \"cannot fstat %s\", 5);\n    v207 = __errno_location();\n    v145 = ptr;\n    v147 = v206;\n    v146 = *v207;\n    goto LABEL_303;\n  }\n  if ( stat_buf.st_ino != v321.st_ino || stat_buf.st_dev != v321.st_dev )\n  {\n    v189 = sub_40DD80(4LL, v11);\n    v190 = dcgettext(0LL, \"skipping file %s, as it was replaced while being copied\", 5);\n    v145 = (void *)v189;\n    v146 = 0;\n    v147 = v190;\n    goto LABEL_303;\n  }\n  v286 = v40 & 0x1FF;\n  if ( (_BYTE)src )\n    goto LABEL_441;\n  v138 = filename;\n  v139 = sub_40AB10((char)filename);\n  fd[0] = v139;\n  if ( v12[2].m128i_i64[0] & 0xFF000000FF00LL )\n  {\n    if ( v139 < 0 )\n    {\nLABEL_295:\n      v140 = __errno_location();\n      v141 = v140;\n      if ( !v12[1].m128i_i8[6] )\n      {\n        v143 = *v140;\n        if ( *v140 != 2 || v12[1].m128i_i8[8] )\n        {\n          LOBYTE(src) = 0;\n          goto LABEL_302;\n        }\n        v288 = 0;\n        goto LABEL_300;\n      }\n      if ( unlink(filename) )\n      {\n        ptr = (void *)sub_40DD80(4LL, filename);\n        v273 = dcgettext(0LL, \"cannot remove %s\", 5);\n        v145 = ptr;\n        v146 = *v141;\n        v147 = v273;\n        goto LABEL_303;\n      }\n      if ( v12[2].m128i_i8[14] )\n      {\n        v266 = sub_40DD80(4LL, filename);\n        v267 = dcgettext(0LL, \"removed %s\\n\", 5);\n        __printf_chk(1LL, v267, v266, v268, v269);\n      }\n      LOBYTE(src) = v12[2].m128i_i8[1];\n      v288 = (int)s1;\n      if ( !(_BYTE)src )\n      {\nLABEL_300:\n        LODWORD(ptr) = v286 & ~v288;\n        fd[0] = sub_40AB10((char)filename);\n        v142 = __errno_location();\n        v143 = *v142;\n        v302 = (__off_t)v142;\n        LOBYTE(v297) = fd[0] < 0 && v143 == 17;\n        if ( (_BYTE)v297 )\n        {\n          v143 = 17;\n          LOBYTE(src) = v12[1].m128i_i8[8];\n          if ( (_BYTE)src )\n            goto LABEL_302;\n          if ( !__lxstat(1, filename, &v322) && (v322.st_mode & 0xF000) == 40960 )\n          {\n            if ( !v12[3].m128i_i8[0] )\n            {\n              LOBYTE(fd[0]) = 0;\n              v279 = sub_40DD80(4LL, filename);\n              v280 = dcgettext(0LL, \"not writing through dangling symlink %s\", 5);\n              error(0, 0, v280, v279);\n              ptr = 0LL;\n              v148 = fd[0];\n              LOBYTE(src) = (_BYTE)v297;\n              goto LABEL_304;\n            }\n            fd[0] = sub_40AB10((char)filename);\n            v143 = *(_DWORD *)v302;\n          }\n        }\n        LOBYTE(src) = fd[0] < 0 && v143 == 21;\n        if ( (_BYTE)src )\n        {\n          v143 = 21;\n          if ( *filename )\n            v143 = (filename[strlen(filename) - 1] != 47) + 20;\n          goto LABEL_302;\n        }\n        LOBYTE(src) = 1;\n        if ( fd[0] < 0 )\n        {\nLABEL_302:\n          ptr = (void *)sub_40DD80(4LL, filename);\n          v144 = dcgettext(0LL, \"cannot create regular file %s\", 5);\n          v145 = ptr;\n          v146 = v143;\n          v147 = v144;\nLABEL_303:\n          error(0, v146, v147, v145);\n          v148 = 0;\n          ptr = 0LL;\n          goto LABEL_304;\n        }\n        goto LABEL_458;\n      }\n      v148 = sub_405210((__int64)v11, (__int64)filename, v286, 1u, (__int64)v12);\n      if ( !v148 )\n      {\n        ptr = 0LL;\n        goto LABEL_304;\n      }\nLABEL_441:\n      v288 = (int)s1;\n      goto LABEL_300;\n    }\n    v227 = sub_4052E0((__int64)v138, v12[2].m128i_u8[5], 0LL, (__int64)v12);\n    if ( !v227 )\n    {\n      LOBYTE(src) = v12[2].m128i_i8[6];\n      if ( (_BYTE)src )\n      {\n        LOBYTE(src) = 0;\n        ptr = 0LL;\n        goto LABEL_490;\n      }\n    }\n  }\n  else if ( fd[0] < 0 )\n  {\n    goto LABEL_295;\n  }\n  v288 = 0;\nLABEL_458:\n  v297 = &v322;\n  LODWORD(v302) = __fxstat(1, fd[0], &v322);\n  if ( (_DWORD)v302 )\n  {\n    ptr = (void *)sub_40DD80(4LL, filename);\n    v235 = dcgettext(0LL, \"cannot fstat %s\", 5);\n    v236 = __errno_location();\n    error(0, *v236, v235, ptr);\n    v227 = 0;\n    ptr = 0LL;\n    goto LABEL_490;\n  }\n  if ( !(_BYTE)s2 )\n    goto LABEL_623;\n  if ( !v12[3].m128i_i32[1] )\n    goto LABEL_461;\n  if ( !ioctl(fd[0], 0x40049409uLL, (unsigned int)fildes[0]) )\n  {\nLABEL_623:\n    ptr = 0LL;\n    goto LABEL_477;\n  }\n  if ( v12[3].m128i_i32[1] == 2 )\n  {\n    v302 = sub_40DCA0(1LL, 4LL, v11);\n    v259 = sub_40DCA0(0LL, 4LL, filename);\n    ptr = dcgettext(0LL, \"failed to clone %s from %s\", 5);\n    v260 = __errno_location();\n    error(0, *v260, (const char *)ptr, v259, v302);\n    v227 = 0;\n    ptr = 0LL;\n    goto LABEL_490;\n  }\nLABEL_461:\n  v219 = getpagesize();\n  v290 = v322.st_blksize;\n  s = (char *)v322.st_blksize;\n  if ( (unsigned __int64)(v322.st_blksize - 0x20000) > 0x1FFFFFFFFFFE0000LL )\n  {\n    s = (char *)0x20000;\n    v220 = 512LL;\n    if ( (unsigned __int64)(v290 - 1) <= 0x1FFFFFFFFFFFFFFFLL )\n      v220 = v290;\n    v290 = v220;\n  }\n  j__posix_fadvise(fildes[0], 0LL, 0LL, 2);\n  if ( (v321.st_mode & 0xF000) == 0x8000 )\n    LODWORD(v302) = v321.st_blocks < v321.st_size / 512;\n  ptr = (void *)(v219 - 1);\n  if ( (v322.st_mode & 0xF000) != 0x8000 )\n    goto LABEL_468;\n  v258 = HIDWORD(v12->m128i_i64[1]);\n  if ( v258 == 3 )\n  {\n    ptr = (void *)sub_4100E0(&s[v219]);\n    v224 = ((unsigned __int64)ptr + v219 - 1) % v219;\n    v287 = (char *)ptr + v219 - v224 - 1;\n    if ( !(_DWORD)v302 )\n    {\n      v225 = HIDWORD(v12->m128i_i64[1]) == 3;\n      v302 = (__off_t)&length;\n      goto LABEL_475;\n    }\n  }\n  else\n  {\n    if ( v258 != 2 || !(v302 & 1) )\n    {\nLABEL_468:\n      v221 = v321.st_blksize;\n      LODWORD(v291) = v321.st_mode & 0xF000;\n      ptr = (void *)(0x7FFFFFFFFFFFFFFFLL - v219);\n      if ( (unsigned __int64)(v321.st_blksize - 0x20000) > 0x1FFFFFFFFFFE0000LL )\n        v221 = 0x20000LL;\n      v222 = sub_40A640(v221, s, 0x7FFFFFFFFFFFFFFFLL - v219);\n      if ( (_DWORD)v291 == 0x8000 && (unsigned __int64)s > v321.st_size )\n        s = (char *)(v321.st_size + 1);\n      v223 = &s[v222 - 1 - (unsigned __int64)&s[v222 - 1] % v222];\n      s = v223;\n      if ( !v223 || ptr < v223 )\n        s = (char *)v222;\n      ptr = (void *)sub_4100E0(&s[v219]);\n      v224 = ((unsigned __int64)ptr + v219 - 1) % v219;\n      v287 = (char *)ptr + v219 - v224 - 1;\n      if ( !(_DWORD)v302 )\n      {\n        v14 = HIDWORD(v12->m128i_i64[1]) == 3;\n        v290 = 0LL;\n        v302 = (__off_t)&length;\n        v225 = v14;\nLABEL_475:\n        v282 = v224;\n        if ( !(unsigned __int8)sub_404DE0(\n                                 v287,\n                                 (size_t)s,\n                                 (unsigned __int64)&savedregs,\n                                 fildes[0],\n                                 fd[0],\n                                 v290,\n                                 v225,\n                                 (__int64)v11,\n                                 (__int64)filename,\n                                 0xFFFFFFFFFFFFFFFFLL,\n                                 (_QWORD *)v302,\n                                 &v313) )\n          goto LABEL_513;\n        if ( !(_BYTE)v313 || ftruncate(fd[0], length) >= 0 )\n          goto LABEL_477;\n        goto LABEL_602;\n      }\n      v294 = 0;\n      v293 = 1;\n      goto LABEL_529;\n    }\n    ptr = (void *)sub_4100E0(&s[v219]);\n    v287 = (char *)ptr + v219 - ((unsigned __int64)ptr + v219 - 1) % v219 - 1;\n  }\n  v293 = HIDWORD(v12->m128i_i64[1]);\n  v294 = (char)s2;\nLABEL_529:\n  v238 = 0LL;\n  v302 = (__off_t)&length;\n  v283 = v321.st_size;\n  sub_4097A0((unsigned int)fildes[0], &length);\n  v285 = a8;\n  v239 = 0LL;\n  v284 = v12;\n  v240 = v283;\n  v295 = a7;\n  v241 = (char)s2;\n  v291 = v11;\n  v242 = 0LL;\n  do\n  {\n    s2 = v239;\n    v243 = sub_4097D0(v302);\n    v239 = s2;\n    if ( !v243 )\n    {\n      LOBYTE(s2) = v241;\n      v11 = v291;\n      a7 = v295;\n      v12 = v284;\n      v15 = v285;\n      if ( v317 )\n        goto LABEL_555;\n      if ( !v316 )\n      {\n        v251 = \"%s: failed to get extents info\";\n        v302 = sub_40DE50(0LL, 3LL, v291);\n        goto LABEL_563;\n      }\n      v278 = 0LL;\n      v225 = HIDWORD(v284->m128i_i64[1]) == 3;\n      if ( v294 )\n        v278 = v290;\n      v290 = v278;\n      goto LABEL_475;\n    }\n    if ( !v315.tv_nsec )\n      goto LABEL_553;\n    v244 = v242;\n    v245 = v238;\n    v246 = 0;\n    v247 = 0LL;\n    while ( 1 )\n    {\n      v249 = (__off_t *)((char *)v318 + 24 * v247);\n      v238 = *v249;\n      v242 = v249[1];\n      if ( v240 < (__int64)(*v249 + v242) )\n      {\n        if ( v238 > v240 )\n          v238 = v240;\n        v242 = v240 - v238;\n      }\n      v241 = 0;\n      if ( v238 - v245 != v244 )\n      {\n        s2 = (char *)(v238 - v245 - v244);\n        if ( lseek(fildes[0], v238, 0) < 0 )\n        {\n          v11 = v291;\n          a7 = v295;\n          v12 = v284;\n          v15 = v285;\n          v270 = \"cannot lseek %s\";\n          v302 = sub_40DD80(4LL, v291);\n        }\n        else\n        {\n          if ( v293 != 1 )\n          {\n            v241 = sub_404D20(fd[0], (__int64)filename, v293 == 3, (__off_t)s2);\n            if ( !v241 )\n            {\nLABEL_548:\n              a7 = v295;\n              v11 = v291;\n              v12 = v284;\n              v15 = v285;\nLABEL_549:\n              free(v318);\n              goto LABEL_513;\n            }\n            goto LABEL_533;\n          }\n          if ( (unsigned __int8)sub_4048E0(fd[0], (size_t)s2) )\n          {\n            v248 = 0LL;\n            goto LABEL_535;\n          }\n          a7 = v295;\n          v11 = v291;\n          v12 = v284;\n          v15 = v285;\n          v270 = \"%s: write failed\";\n          v302 = sub_40DE50(0LL, 3LL, filename);\n        }\n        v271 = dcgettext(0LL, v270, 5);\n        v272 = __errno_location();\n        error(0, *v272, v271, v302);\n        goto LABEL_549;\n      }\nLABEL_533:\n      v248 = 0LL;\n      if ( v293 == 3 )\n        v248 = v290;\nLABEL_535:\n      if ( !(unsigned __int8)sub_404DE0(\n                               v287,\n                               (size_t)s,\n                               (unsigned __int64)&savedregs,\n                               fildes[0],\n                               fd[0],\n                               v248,\n                               1,\n                               (__int64)v291,\n                               (__int64)filename,\n                               v242,\n                               &v313,\n                               &v312) )\n        goto LABEL_548;\n      v239 = (char *)(v238 + v313);\n      if ( v313 )\n        v241 = v312;\n      if ( (char *)v240 == v239 )\n        break;\n      v245 = v238;\n      v244 = v242;\n      v247 = ++v246;\n      if ( (unsigned __int64)v246 >= v315.tv_nsec )\n        goto LABEL_553;\n    }\n    v317 = 1;\nLABEL_553:\n    s2 = v239;\n    free(v318);\n    v318 = 0LL;\n    v315.tv_nsec = 0LL;\n    v239 = s2;\n  }\n  while ( !v317 );\n  LOBYTE(s2) = v241;\n  v11 = v291;\n  a7 = v295;\n  v12 = v284;\n  v15 = v285;\nLABEL_555:\n  v250 = v283 > (__int64)v239;\n  if ( v283 <= (__int64)v239 && !(_BYTE)s2 )\n    goto LABEL_477;\n  if ( v293 == 1 )\n  {\n    if ( (unsigned __int8)sub_4048E0(fd[0], v283 - (_QWORD)v239) )\n      goto LABEL_477;\n    goto LABEL_602;\n  }\n  v302 = (__off_t)v239;\n  if ( ftruncate(fd[0], v283) )\n  {\nLABEL_602:\n    v251 = \"failed to extend %s\";\n    v302 = sub_40DD80(4LL, filename);\nLABEL_563:\n    v252 = dcgettext(0LL, v251, 5);\n    v253 = __errno_location();\n    error(0, *v253, v252, v302);\n    goto LABEL_513;\n  }\n  if ( v293 == 3 && v250 && (int)sub_404990(fd[0], v302, v283 - v302) < 0 )\n  {\n    v251 = \"error deallocating %s\";\n    v302 = sub_40DD80(4LL, filename);\n    goto LABEL_563;\n  }\nLABEL_477:\n  if ( !v12[1].m128i_i8[15]\n    || (length = (__int128)stat_buf.st_atim, v315 = stat_buf.st_mtim, !(unsigned int)sub_40F460(fd[0], filename))\n    || (v302 = sub_40DD80(4LL, filename),\n        v231 = dcgettext(0LL, \"preserving times for %s\", 5),\n        v232 = __errno_location(),\n        error(0, *v232, v231, v302),\n        !v12[2].m128i_i8[4]) )\n  {\n    if ( v12[1].m128i_i8[13] && (stat_buf.st_uid != v322.st_uid || stat_buf.st_gid != v322.st_gid) )\n    {\n      v226 = sub_405430((__int64)v12, filename, fd[0], v306, (char)src, (__int64)v297);\n      if ( v226 == -1 )\n        goto LABEL_513;\n      if ( !v226 )\n        LODWORD(v298) = v298 & 0xFFFFF1FF;\n    }\n    if ( v12[2].m128i_i8[7] && SLOBYTE(v322.st_mode) >= 0 && geteuid() && !sub_4049D0(fd[0], filename, 0x180u) )\n      sub_4049D0(fd[0], filename, v286 & ~v288);\n    if ( !(v12[1].m128i_i64[1] & 0xFF0000000000FFLL) )\n    {\n      if ( v12[2].m128i_i8[11] )\n      {\n        v254 = v12[1].m128i_u32[0];\n      }\n      else\n      {\n        if ( !v12[2].m128i_i8[0] )\n        {\n          v227 = 1;\n          if ( !v288 )\n            goto LABEL_490;\n          LOBYTE(v302) = 1;\n          v274 = sub_405620();\n          v227 = v302;\n          if ( !(~v274 & v288) )\n            goto LABEL_490;\n          v275 = sub_4049D0(fd[0], filename, v286);\n          v227 = v302;\n          if ( !v275 )\n            goto LABEL_490;\n          v302 = sub_40DD80(4LL, filename);\n          v276 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n          v277 = __errno_location();\n          error(0, *v277, v276, v302);\n          goto LABEL_523;\n        }\n        v254 = ~(unsigned __int16)sub_405620() & 0x1B6;\n      }\n      v227 = (unsigned int)sub_409E20(filename, (unsigned int)fd[0], v254) == 0;\n      goto LABEL_490;\n    }\n    v237 = sub_409D90(v11, (unsigned int)fildes[0], filename, (unsigned int)fd[0], (unsigned int)v298);\n    v227 = 1;\n    if ( !v237 )\n      goto LABEL_490;\nLABEL_523:\n    v227 = v12[2].m128i_i8[4] ^ 1;\n    goto LABEL_490;\n  }\nLABEL_513:\n  v227 = 0;\nLABEL_490:\n  LOBYTE(v302) = v227;\n  v228 = close(fd[0]);\n  v148 = v302;\n  if ( v228 < 0 )\n  {\n    *(_QWORD *)fd = sub_40DD80(4LL, filename);\n    v229 = dcgettext(0LL, \"failed to close %s\", 5);\n    v230 = __errno_location();\n    error(0, *v230, v229, *(_QWORD *)fd);\n    v148 = 0;\n  }\nLABEL_304:\n  LOBYTE(fd[0]) = v148;\n  if ( close(fildes[0]) < 0 )\n  {\n    v15 = sub_40DD80(4LL, v11);\n    v200 = dcgettext(0LL, \"failed to close %s\", 5);\n    v201 = __errno_location();\n    error(0, *v201, v200, v15);\n    free(ptr);\n    goto LABEL_197;\n  }\n  LOBYTE(fildes[0]) = fd[0];\n  free(ptr);\n  v43 = fildes[0];\n  LOBYTE(fd[0]) = 0;\n  LOBYTE(ptr) = fildes[0];\n  if ( LOBYTE(fildes[0]) )\n    goto LABEL_79;\nLABEL_197:\n  if ( v12[2].m128i_i8[5] )\n    goto LABEL_240;\n  if ( !n )\n    sub_409640(stat_buf.st_ino, stat_buf.st_dev);\nLABEL_136:\n  if ( old )\n  {\n    if ( rename(old, filename) )\n    {\n      v135 = sub_40DD80(4LL, filename);\n      v136 = dcgettext(0LL, \"cannot un-backup %s\", 5);\n      v137 = __errno_location();\n      error(0, *v137, v136, v135);\n    }\n    else if ( v12[2].m128i_i8[14] )\n    {\n      v75 = sub_40DCA0(1LL, 4LL, filename);\n      v76 = sub_40DCA0(0LL, 4LL, old);\n      v77 = dcgettext(0LL, \"%s -> %s (unbackup)\\n\", 5);\n      __printf_chk(1LL, v77, v76, v75, v78);\n    }\n  }\n  return a7;\n}\n", 
            "funcStartAddr": "0x405650L", 
            "funcEndAddr": "0x4094ccL", 
            "funcName": "sub_405650"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4094D0@<rax>(unsigned __int8 a1@<dl>, const __m128i *a2@<rcx>, const char *a3@<rdi>, char *a4@<rsi>, _BYTE *a5@<r8>, _BYTE *a6@<r9>, unsigned int a7@<r15d>)\n{\n  int v7; // eax\n  unsigned int v8; // er10\n  char v10; // [rsp+Fh] [rbp-9h]\n\n  if ( !a2 )\n    __assert_fail(\"co != NULL\", \"src/copy.c\", 0xB60u, \"valid_options\");\n  if ( LODWORD(a2->m128i_i64[0]) > 3 )\n    __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 0xB61u, \"valid_options\");\n  v7 = HIDWORD(a2->m128i_i64[1]);\n  if ( (unsigned int)(v7 - 1) > 2 )\n    __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 0xB62u, \"valid_options\");\n  v8 = a2[3].m128i_u32[1];\n  if ( v8 > 2 )\n    __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 0xB63u, \"valid_options\");\n  if ( a2[1].m128i_i8[7] && a2[2].m128i_i8[12] )\n    __assert_fail(\"!(co->hard_link && co->symbolic_link)\", \"src/copy.c\", 0xB64u, \"valid_options\");\n  if ( v7 != 2 && v8 == 2 )\n    __assert_fail(\n      \"! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)\",\n      \"src/copy.c\",\n      0xB67u,\n      \"valid_options\");\n  v10 = 0;\n  qword_61D910 = (__int64)a3;\n  qword_61D908 = (__int64)a4;\n  return sub_405650(a1, 0LL, a3, a4, 0LL, a2, a7, 1u, &v10, a5, a6);\n}\n", 
            "funcStartAddr": "0x4094d0L", 
            "funcEndAddr": "0x4095ecL", 
            "funcName": "sub_4094D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4095F0(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n", 
            "funcStartAddr": "0x4095f0L", 
            "funcEndAddr": "0x4095fcL", 
            "funcName": "sub_4095F0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_409600(_QWORD *a1, _QWORD *a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( *a1 == *a2 )\n    result = a1[1] == a2[1];\n  return result;\n}\n", 
            "funcStartAddr": "0x409600L", 
            "funcEndAddr": "0x40961cL", 
            "funcName": "sub_409600"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_409620(void *ptr)\n{\n  free(*((void **)ptr + 2));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x409620L", 
            "funcEndAddr": "0x409636L", 
            "funcName": "sub_409620"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_409640(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  void *v3; // rbx\n  __int64 v4; // [rsp+0h] [rbp-28h]\n  __int64 v5; // [rsp+8h] [rbp-20h]\n  __int64 v6; // [rsp+10h] [rbp-18h]\n\n  v4 = a1;\n  v5 = a2;\n  v6 = 0LL;\n  v2 = sub_40C0A0(qword_61D918, &v4);\n  if ( v2 )\n  {\n    v3 = (void *)v2;\n    free(*(void **)(v2 + 16));\n    free(v3);\n  }\n}\n", 
            "funcStartAddr": "0x409640L", 
            "funcEndAddr": "0x409685L", 
            "funcName": "sub_409640"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409690(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 result; // rax\n  __int64 v4; // [rsp+0h] [rbp-28h]\n  __int64 v5; // [rsp+8h] [rbp-20h]\n\n  v4 = a1;\n  v5 = a2;\n  v2 = sub_40B650(qword_61D918, &v4);\n  if ( v2 )\n    result = *(_QWORD *)(v2 + 16);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x409690L", 
            "funcEndAddr": "0x4096c7L", 
            "funcName": "sub_409690"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4096D0(void *src, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // rax\n  _QWORD *v8; // rbp\n  __int64 result; // rax\n\n  v3 = a3;\n  v4 = (_QWORD *)sub_4100E0(24LL);\n  v5 = sub_410310(src);\n  v6 = qword_61D918;\n  *v4 = a2;\n  v4[2] = v5;\n  v4[1] = v3;\n  v7 = sub_40C060(v6, v4);\n  if ( !v7 )\n    sub_410330();\n  v8 = (_QWORD *)v7;\n  result = 0LL;\n  if ( v4 != v8 )\n  {\n    free((void *)v4[2]);\n    free(v4);\n    result = v8[2];\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4096d0L", 
            "funcEndAddr": "0x409746L", 
            "funcName": "sub_4096D0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_409750()\n{\n  __int64 result; // rax\n\n  result = sub_40B8C0(103LL, 0LL, sub_4095F0, sub_409600, sub_409620);\n  qword_61D918 = result;\n  if ( !result )\n    sub_410330();\n  return result;\n}\n", 
            "funcStartAddr": "0x409750L", 
            "funcEndAddr": "0x409786L", 
            "funcName": "sub_409750"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4097A0(int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  *(_DWORD *)a2 = a1;\n  *(_QWORD *)(a2 + 40) = 0LL;\n  *(_QWORD *)(a2 + 8) = 0LL;\n  *(_QWORD *)(a2 + 24) = 0LL;\n  *(_WORD *)(a2 + 32) = 0;\n  *(_DWORD *)(a2 + 16) = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4097a0L", 
            "funcEndAddr": "0x4097c8L", 
            "funcName": "sub_4097A0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4097D0(__int64 a1)\n{\n  unsigned int v1; // er13\n  __int64 v2; // r12\n  __int64 v3; // rbx\n  __int64 v4; // rdx\n  int v5; // eax\n  int v6; // edi\n  unsigned __int64 v7; // rcx\n  __int64 v8; // rdi\n  unsigned __int64 v9; // rcx\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  unsigned int v12; // er8\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rdx\n  unsigned int v15; // edi\n  __int64 *v16; // rcx\n  int v17; // er9\n  __int64 v18; // r10\n  unsigned __int64 v19; // rsi\n  __int64 v20; // rcx\n  char v21; // al\n  __int64 v22; // rax\n  __int64 v23; // rdx\n  bool result; // al\n  bool v25; // zf\n  __int64 vars0; // [rsp+0h] [rbp+0h]\n  __int64 vars8; // [rsp+8h] [rbp+8h]\n  int vars10; // [rsp+10h] [rbp+10h]\n  unsigned int vars14; // [rsp+14h] [rbp+14h]\n  int vars18; // [rsp+18h] [rbp+18h]\n  __int64 vars20[2]; // [rsp+20h] [rbp+20h]\n  unsigned __int64 vars30; // [rsp+30h] [rbp+30h]\n\n  v1 = 0;\n  v2 = a1;\n  v3 = *(_QWORD *)(a1 + 40);\n  v4 = *(_QWORD *)(a1 + 8);\n  while ( 1 )\n  {\n    memset(&vars0, 0, 0x1000uLL);\n    v5 = *(_DWORD *)(v2 + 16);\n    v6 = *(_DWORD *)v2;\n    vars0 = v4;\n    vars18 = 72;\n    vars10 = v5;\n    vars8 = ~v4;\n    if ( ioctl(v6, 0xC020660BuLL, &vars0) < 0 )\n      break;\n    if ( !vars14 )\n    {\n      v25 = *(_QWORD *)(v2 + 8) == 0LL;\n      *(_BYTE *)(v2 + 33) = 1;\n      return !v25;\n    }\n    v7 = *(_QWORD *)(v2 + 24);\n    if ( v7 > ~(unsigned __int64)vars14 )\n      __assert_fail(\n        \"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\",\n        \"src/extent-scan.c\",\n        0x7Eu,\n        \"extent_scan_read\");\n    v8 = *(_QWORD *)(v2 + 40);\n    v9 = vars14 + v7;\n    *(_QWORD *)(v2 + 24) = v9;\n    v10 = v3 - v8;\n    if ( ((24 * v9) & 0x8000000000000000LL) != 0LL || (v9 * (unsigned __int128)0x18uLL) >> 64 != 0 )\n      sub_410330(v8, 3223348747LL, (v9 * (unsigned __int128)0x18uLL) >> 64 != 0);\n    v11 = sub_410140(v8, 24 * v9);\n    v12 = vars14;\n    *(_QWORD *)(v2 + 40) = v11;\n    v3 = v11 + v10;\n    if ( v12 )\n    {\n      v13 = vars30;\n      v14 = vars20[0];\n      if ( vars20[0] > 0x7FFFFFFFFFFFFFFFLL - vars30 )\nLABEL_17:\n        __assert_fail(\n          \"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\",\n          \"src/extent-scan.c\",\n          0x8Du,\n          \"extent_scan_read\");\n      v15 = 0;\n      v16 = vars20;\n      while ( 2 )\n      {\n        if ( v1 )\n        {\n          v17 = *((_DWORD *)v16 + 10);\n          v18 = *(_QWORD *)(v3 + 8);\n          v19 = v18 + *(_QWORD *)v3;\n          if ( *(_DWORD *)(v3 + 16) == (v16[5] & 0xFFFFFFFE) && v14 == v19 )\n          {\n            *(_DWORD *)(v3 + 16) = v17;\n            ++v15;\n            *(_QWORD *)(v3 + 8) = v18 + v13;\nLABEL_15:\n            if ( v15 >= v12 )\n              goto LABEL_21;\nLABEL_16:\n            v16 = &vars20[7 * v15];\n            v13 = v16[2];\n            v14 = *v16;\n            if ( *v16 > 0x7FFFFFFFFFFFFFFFLL - v13 )\n              goto LABEL_17;\n            continue;\n          }\n          if ( v19 > v14 )\n          {\nLABEL_13:\n            if ( v19 - v14 < v13 )\n              goto LABEL_27;\n            *v16 = v19;\n            v16[2] = v13 + v14 - v19;\n            goto LABEL_15;\n          }\n        }\n        else\n        {\n          v19 = *(_QWORD *)(v2 + 8);\n          if ( v19 > v14 )\n            goto LABEL_13;\n          v17 = *((_DWORD *)v16 + 10);\n        }\n        break;\n      }\n      v20 = v1;\n      ++v15;\n      ++v1;\n      v3 = *(_QWORD *)(v2 + 40) + 24 * v20;\n      *(_QWORD *)v3 = v14;\n      *(_QWORD *)(v3 + 8) = v13;\n      *(_DWORD *)(v3 + 16) = v17;\n      if ( v15 >= v12 )\n        goto LABEL_21;\n      goto LABEL_16;\n    }\nLABEL_21:\n    if ( *(_BYTE *)(v3 + 16) & 1 )\n    {\n      *(_BYTE *)(v2 + 33) = 1;\nLABEL_35:\n      *(_QWORD *)(v2 + 24) = v1;\n      return 1;\n    }\n    v21 = *(_BYTE *)(v2 + 33);\n    if ( v1 > 0x48 )\n    {\n      if ( v21 )\n        goto LABEL_35;\n      v22 = v1 - 1;\n      v23 = *(_QWORD *)(v2 + 40);\n      *(_QWORD *)(v2 + 24) = v22;\n      *(_QWORD *)(v2 + 8) = *(_QWORD *)(v23 + 24 * v22 - 24) + *(_QWORD *)(v23 + 24 * v22 - 16);\n      return 1;\n    }\n    *(_QWORD *)(v2 + 24) = v1;\n    if ( !v21 )\n    {\n      v4 = *(_QWORD *)v3 + *(_QWORD *)(v3 + 8);\n      *(_QWORD *)(v2 + 8) = v4;\n      if ( v1 != 72 )\n        continue;\n    }\n    return 1;\n  }\nLABEL_27:\n  result = 0;\n  if ( !*(_QWORD *)(v2 + 8) )\n  {\n    *(_BYTE *)(v2 + 32) = 1;\n    result = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4097d0L", 
            "funcEndAddr": "0x409a95L", 
            "funcName": "sub_4097D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409AA0(char *to, __int64 a2)\n{\n  return linkat(*(_DWORD *)a2, *(const char **)(a2 + 8), *(_DWORD *)(a2 + 16), to, *(_DWORD *)(a2 + 20));\n}\n", 
            "funcStartAddr": "0x409aa0L", 
            "funcEndAddr": "0x409ab8L", 
            "funcName": "sub_409AA0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409AC0(void *src, void *dest)\n{\n  void *v2; // rbx\n  __int64 v3; // rax\n  size_t v4; // rbp\n\n  v2 = dest;\n  v3 = sub_40AA00(src) - (_QWORD)src;\n  v4 = v3;\n  if ( (unsigned __int64)(v3 + 9) > 0x100 )\n  {\n    v2 = malloc(v3 + 9);\n    if ( !v2 )\n      return 0LL;\n  }\n  strcpy((char *)mempcpy(v2, src, v4), \"CuXXXXXX\");\n  return v2;\n}\n", 
            "funcStartAddr": "0x409ac0L", 
            "funcEndAddr": "0x409b24L", 
            "funcName": "sub_409AC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409B30(char *to, __int64 a2)\n{\n  return symlinkat(*(const char **)a2, *(_DWORD *)(a2 + 8), to);\n}\n", 
            "funcStartAddr": "0x409b30L", 
            "funcEndAddr": "0x409b41L", 
            "funcName": "sub_409B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409B50(int a1, const char *a2, int a3, const char *a4, int a5, char a6)\n{\n  char *v6; // r12\n  int v7; // ebp\n  int v8; // eax\n  unsigned int v9; // ebx\n  int *v10; // rax\n  char *v12; // rax\n  char *v13; // rbx\n  int v14; // eax\n  int *v15; // r9\n  int v16; // er12\n  char v17; // [rsp+8h] [rbp-160h]\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  char dest; // [rsp+30h] [rbp-138h]\n\n  v6 = (char *)a4;\n  v7 = a3;\n  v17 = a6;\n  v8 = linkat(a1, a2, a3, a4, a5);\n  v9 = v8;\n  if ( v17 == 1 )\n  {\n    if ( v8 )\n    {\n      v10 = __errno_location();\n      if ( *v10 == 17 )\n      {\n        v18 = v10;\n        v12 = (char *)sub_409AC0(v6, &dest);\n        v13 = v12;\n        if ( v12 )\n        {\n          v14 = sub_40E910(v12);\n          v15 = v18;\n          if ( v14 )\n          {\n            v16 = *v18;\n          }\n          else\n          {\n            v16 = renameat(v7, v13, v7, v6);\n            if ( v16 )\n              v16 = *v18;\n            unlinkat(v7, v13, 0);\n            v15 = v18;\n          }\n          if ( v13 != &dest )\n          {\n            v19 = v15;\n            free(v13);\n            v15 = v19;\n          }\n          v9 = 1;\n          if ( v16 )\n          {\n            *v15 = v16;\n            v9 = -1;\n          }\n        }\n        else\n        {\n          v9 = -1;\n        }\n      }\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x409b50L", 
            "funcEndAddr": "0x409c85L", 
            "funcName": "sub_409B50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409C90(const char *a1, int a2, const char *a3, char a4)\n{\n  char v4; // r14\n  char *v5; // r12\n  int v6; // eax\n  unsigned int v7; // ebx\n  int *v8; // r14\n  char *v10; // rax\n  char *v11; // rbx\n  int v12; // er12\n  char dest; // [rsp+10h] [rbp-138h]\n\n  v4 = a4;\n  v5 = (char *)a3;\n  v6 = symlinkat(a1, a2, a3);\n  v7 = v6;\n  if ( v4 == 1 )\n  {\n    if ( v6 )\n    {\n      v8 = __errno_location();\n      if ( *v8 == 17 )\n      {\n        v10 = (char *)sub_409AC0(v5, &dest);\n        v11 = v10;\n        if ( !v10 )\n          return (unsigned int)-1;\n        if ( (unsigned int)sub_40E910(v10) )\n        {\n          v12 = *v8;\n        }\n        else\n        {\n          if ( !renameat(a2, v11, a2, v5) )\n          {\n            if ( v11 != &dest )\n              free(v11);\n            return 1;\n          }\n          v12 = *v8;\n          unlinkat(a2, v11, 0);\n        }\n        if ( v11 != &dest )\n          free(v11);\n        if ( v12 )\n        {\n          *v8 = v12;\n          return (unsigned int)-1;\n        }\n        return 1;\n      }\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x409c90L", 
            "funcEndAddr": "0x409d90L", 
            "funcName": "sub_409C90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409D90(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  unsigned int v4; // eax\n  unsigned int v5; // ebx\n  __int64 v6; // r12\n  char *v7; // rbp\n  int *v8; // rax\n  __int64 result; // rax\n  __int64 v10; // rbp\n  int *v11; // rax\n\n  v3 = a3;\n  v4 = sub_40C3F0();\n  v5 = v4;\n  if ( v4 == -2 )\n  {\n    v10 = sub_40DFD0(a1);\n    v11 = __errno_location();\n    error(0, *v11, \"%s\", v10);\n    result = 4294967294LL;\n  }\n  else\n  {\n    if ( v4 == -1 )\n    {\n      v6 = sub_40DFD0(v3);\n      v7 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n      v8 = __errno_location();\n      error(0, *v8, v7, v6);\n    }\n    result = v5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409d90L", 
            "funcEndAddr": "0x409e1aL", 
            "funcName": "sub_409D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409E20(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned int v3; // ebx\n  __int64 v5; // r12\n  char *v6; // rbp\n  int *v7; // rax\n\n  v3 = sub_40C430(a1, a2, a3);\n  if ( v3 )\n  {\n    v5 = sub_40DFD0(a1);\n    v6 = dcgettext(0LL, \"setting permissions for %s\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6, v5);\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x409e20L", 
            "funcEndAddr": "0x409e7cL", 
            "funcName": "sub_409E20"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_409E80(char *path, unsigned __int64 a2)\n{\n  size_t v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  ssize_t v5; // r12\n  char *v7; // rdi\n\n  v2 = a2 + 1;\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  while ( 2 )\n  {\n    v3 = (char *)malloc(v2);\n    v4 = v3;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        v5 = readlink(path, v3, v2);\n        if ( v5 < 0 && *__errno_location() != 34 )\n        {\n          v7 = v4;\n          v4 = 0LL;\n          free(v7);\n          return v4;\n        }\n        if ( v2 > v5 )\n        {\n          v4[v5] = 0;\n          return v4;\n        }\n        free(v4);\n        if ( v2 > 0x3FFFFFFFFFFFFFFFLL )\n          break;\n        v2 *= 2LL;\n        v3 = (char *)malloc(v2);\n        v4 = v3;\n        if ( !v3 )\n          return v4;\n      }\n      if ( v2 <= 0x7FFFFFFFFFFFFFFELL )\n      {\n        v2 = 0x7FFFFFFFFFFFFFFFLL;\n        continue;\n      }\n      v4 = 0LL;\n      *__errno_location() = 12;\n    }\n    break;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x409e80L", 
            "funcEndAddr": "0x409f6fL", 
            "funcName": "sub_409E80"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_409F70(char *path, __int64 a2)\n{\n  __int64 v2; // r13\n  __int64 v3; // rax\n  char *v4; // rbp\n  char *result; // rax\n  __int16 v6; // r14\n  char *v7; // r12\n  int *v8; // rax\n  int *v9; // r15\n  unsigned __int64 v10; // rdx\n  char *v11; // rsi\n\n  v2 = a2;\n  v3 = sub_40AA00(path);\n  v4 = (char *)v3;\n  result = (char *)sub_40AA60(v3);\n  if ( (unsigned __int64)result > 0xE )\n  {\n    v6 = *(_WORD *)v4;\n    v7 = result;\n    *(_WORD *)v4 = 46;\n    v8 = __errno_location();\n    *v8 = 0;\n    v9 = v8;\n    result = (char *)pathconf(path, 3);\n    if ( (__int64)result >= 0 || (v10 = 255LL, !*v9) )\n      v10 = (unsigned __int64)result;\n    *(_WORD *)v4 = v6;\n    if ( (unsigned __int64)v7 > v10 )\n    {\n      v11 = &path[a2];\n      result = (char *)(&path[v2] - v4);\n      if ( (unsigned __int64)result >= v10 )\n        v11 = &v4[v10 - 1];\n      else\n        v10 = (unsigned __int64)(result + 1);\n      *v11 = 126;\n      v4[v10] = 0;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409f70L", 
            "funcEndAddr": "0x40a03eL", 
            "funcName": "sub_409F70"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40A040(char *a1)\n{\n  char *v1; // rbx\n\n  v1 = a1;\n  if ( (a1 || (v1 = getenv(\"SIMPLE_BACKUP_SUFFIX\")) != 0LL) && *v1 && (char *)sub_40AA00(v1) == v1 )\n    src = v1;\n  else\n    src = \"~\";\n}\n", 
            "funcStartAddr": "0x40a040L", 
            "funcEndAddr": "0x40a094L", 
            "funcName": "sub_40A040"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A0A0(void *a1, int a2, char a3)\n{\n  const char *v3; // rax\n  const char *v4; // r14\n  size_t v5; // rax\n  signed __int64 v6; // r14\n  const char *v7; // rdi\n  size_t v8; // rax\n  bool v9; // cf\n  __int64 v10; // rbx\n  __int64 v11; // rsi\n  __int64 v12; // rax\n  char *v13; // r15\n  DIR *v14; // r12\n  char *v15; // rbx\n  __int64 v16; // r13\n  int v17; // ebp\n  struct dirent *v18; // rax\n  char *v19; // rbx\n  char *v20; // rbx\n  unsigned __int64 v21; // rcx\n  unsigned __int8 v22; // r8\n  int i; // eax\n  int v24; // eax\n  __int64 v25; // rdx\n  size_t v26; // rax\n  __int64 v27; // rax\n  char *v28; // rax\n  char *v29; // r8\n  __int64 v30; // rax\n  char *v31; // rax\n  char v32; // dl\n  char *v33; // rax\n  int v34; // eax\n  char *v35; // rcx\n  int v36; // edx\n  int *v37; // rax\n  int v38; // ebp\n  int *v39; // rbx\n  void *v40; // rdi\n  __int16 v42; // ax\n  void *v43; // rdi\n  _BOOL4 v44; // ebp\n  __int64 v45; // [rsp+8h] [rbp-90h]\n  void *src; // [rsp+10h] [rbp-88h]\n  unsigned __int8 v47; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v48; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-80h]\n  __int16 v50; // [rsp+18h] [rbp-80h]\n  size_t v51; // [rsp+20h] [rbp-78h]\n  unsigned __int64 size; // [rsp+28h] [rbp-70h]\n  int v53; // [rsp+40h] [rbp-58h]\n  char v54; // [rsp+47h] [rbp-51h]\n  unsigned __int64 v55; // [rsp+48h] [rbp-50h]\n  unsigned __int64 v56; // [rsp+50h] [rbp-48h]\n  __int64 v57; // [rsp+50h] [rbp-48h]\n  char *v58; // [rsp+50h] [rbp-48h]\n  size_t v59; // [rsp+58h] [rbp-40h]\n\n  src = a1;\n  v53 = a2;\n  v54 = a3;\n  v3 = (const char *)sub_40AA00(a1);\n  v4 = v3;\n  v5 = strlen(v3);\n  v6 = v4 - (_BYTE *)a1;\n  v7 = ::src;\n  v45 = v6 + v5;\n  if ( !::src )\n  {\n    sub_40A040(::src);\n    v7 = ::src;\n  }\n  v8 = strlen(v7) + 1;\n  v9 = v8 < 9;\n  v10 = v45 + 1;\n  v59 = v8;\n  v11 = v8;\n  v12 = 9LL;\n  if ( !v9 )\n    v12 = v11;\n  v55 = v10 + v12;\n  v13 = (char *)malloc(v10 + v12);\n  if ( v13 )\n  {\n    v14 = 0LL;\n    while ( 1 )\n    {\n      memcpy(v13, src, v45 + 1);\n      if ( v53 == 1 )\n      {\n        memcpy(&v13[v45], ::src, v59);\n        goto LABEL_33;\n      }\n      v15 = &v13[v6];\n      v16 = sub_40AA60(&v13[v6]);\n      if ( v14 )\n        break;\n      v42 = *(_WORD *)v15;\n      *(_WORD *)v15 = 46;\n      v50 = v42;\n      v14 = (DIR *)sub_40A880(v13);\n      if ( v14 )\n      {\n        *(_WORD *)v15 = v50;\n        strcpy(&v15[v16], \".~1~\");\nLABEL_10:\n        v17 = 2;\n        v51 = 1LL;\n        size = v55;\n        while ( 1 )\n        {\n          v18 = readdir(v14);\n          if ( !v18 )\n            goto LABEL_30;\n          while ( 1 )\n          {\n            v19 = v18->d_name;\n            if ( strlen(v18->d_name) < v16 + 4 )\n              break;\n            if ( memcmp(&v13[v6], v19, v16 + 2) )\n              break;\n            v20 = &v19[v16 + 2];\n            if ( (unsigned __int8)(*v20 - 49) > 8u )\n              break;\n            v21 = 1LL;\n            v22 = *v20 == 57;\n            for ( i = v20[1]; (unsigned int)(i - 48) <= 9; i = v20[v21] )\n            {\n              ++v21;\n              v22 &= (_BYTE)i == 57;\n            }\n            if ( (_BYTE)i != 126 )\n              break;\n            if ( v20[v21 + 1] )\n              break;\n            if ( v51 >= v21 )\n            {\n              v56 = v21;\n              v47 = v22;\n              if ( v51 != v21 )\n                break;\n              v24 = memcmp(&v13[v45 + 2], v20, v51);\n              v22 = v47;\n              v21 = v56;\n              if ( v24 > 0 )\n                break;\n            }\n            v25 = v22;\n            v17 = v22;\n            v26 = v22 + v21;\n            v51 = v26;\n            v27 = v45 + v26 + 4;\n            if ( v27 <= size )\n            {\n              v29 = v13;\n            }\n            else\n            {\n              if ( v27 & 0x4000000000000000LL || v27 < 0 )\n                size = v27;\n              else\n                size = 2 * v27;\n              v57 = v22;\n              v48 = v21;\n              v28 = (char *)realloc(v13, size);\n              v21 = v48;\n              v25 = v57;\n              v29 = v28;\n              if ( !v28 )\n                goto LABEL_49;\n            }\n            v58 = v29;\n            v49 = v21;\n            v30 = (__int64)&v29[v45];\n            *(_WORD *)v30 = 32302;\n            *(_BYTE *)(v30 + 2) = 48;\n            v31 = (char *)memcpy(&v29[v45 + 2 + v25], v20, v21 + 2);\n            v32 = v31[v49 - 1];\n            v33 = &v31[v49 - 1];\n            if ( v32 == 57 )\n            {\n              do\n              {\n                *v33-- = 48;\n                v32 = *v33;\n              }\n              while ( *v33 == 57 );\n            }\n            v13 = v58;\n            *v33 = v32 + 1;\n            v18 = readdir(v14);\n            if ( !v18 )\n              goto LABEL_30;\n          }\n        }\n      }\n      v44 = *__errno_location() == 12;\n      *(_WORD *)v15 = v50;\n      v17 = v44 + 2;\n      strcpy(&v15[v16], \".~1~\");\nLABEL_30:\n      switch ( v17 )\n      {\n        case 2:\n          if ( v53 == 2 )\n          {\n            memcpy(&v13[v45], ::src, v59);\n            v53 = 1;\n          }\nLABEL_46:\n          sub_409F70(v13, v45);\n          break;\n        case 3:\nLABEL_49:\n          v43 = v13;\n          v13 = 0LL;\n          free(v43);\n          *__errno_location() = 12;\n          return v13;\n        case 1:\n          goto LABEL_46;\n      }\nLABEL_33:\n      if ( !v54 )\n        goto LABEL_57;\n      if ( !v14 || (v34 = dirfd(v14), v35 = &v13[v6], v36 = v34, v34 < 0) )\n      {\n        v35 = v13;\n        v36 = -100;\n        v6 = 0LL;\n      }\n      if ( !(unsigned int)sub_40DFF0(-100, (char *)src, v36, v35) )\n      {\nLABEL_57:\n        if ( v14 )\n          closedir(v14);\n        return v13;\n      }\n      v37 = __errno_location();\n      v38 = *v37;\n      if ( *v37 != 17 )\n      {\n        v39 = v37;\n        if ( v14 )\n          closedir(v14);\n        v40 = v13;\n        v13 = 0LL;\n        free(v40);\n        *v39 = v38;\n        return v13;\n      }\n    }\n    rewinddir(v14);\n    goto LABEL_10;\n  }\n  return v13;\n}\n", 
            "funcStartAddr": "0x40a0a0L", 
            "funcEndAddr": "0x40a561L", 
            "funcName": "sub_40A0A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A570(void *a1, int a2)\n{\n  return sub_40A0A0(a1, a2, 1);\n}\n", 
            "funcStartAddr": "0x40a570L", 
            "funcEndAddr": "0x40a57aL", 
            "funcName": "sub_40A570"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A580(__int64 a1, __int64 a2)\n{\n  return (unsigned int)dword_416DA0[sub_413AC0(a1, a2, off_416DC0, dword_416DA0, 4LL, off_61D480)];\n}\n", 
            "funcStartAddr": "0x40a580L", 
            "funcEndAddr": "0x40a5acL", 
            "funcName": "sub_40A580"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A5B0(void *a1, __int64 a2)\n{\n  char *result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40A0A0(a1, a2, 0);\n  if ( !result )\n    sub_410330(a1, a2, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x40a5b0L", 
            "funcEndAddr": "0x40a5caL", 
            "funcName": "sub_40A5B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A5F0(void *a1, char *a2)\n{\n  char *v2; // rax\n\n  if ( !a2 || !*a2 )\n  {\n    v2 = getenv(\"VERSION_CONTROL\");\n    if ( !v2 || !*v2 )\n      return 2LL;\n    a2 = v2;\n    a1 = &unk_416D4D;\n  }\n  return sub_40A580((__int64)a1, (__int64)a2);\n}\n", 
            "funcStartAddr": "0x40a5f0L", 
            "funcEndAddr": "0x40a631L", 
            "funcName": "sub_40A5F0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A640(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rcx\n  unsigned __int64 v4; // r8\n  unsigned __int64 v6; // r8\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // rdx\n  unsigned __int64 v9; // rax\n\n  v3 = a3;\n  if ( a1 )\n  {\n    if ( a2 )\n    {\n      v6 = a2;\n      v7 = a1;\n      while ( 1 )\n      {\n        v8 = v7 % v6;\n        if ( !(v7 % v6) )\n          break;\n        v7 = v6;\n        v6 = v8;\n      }\n      v9 = a1 / v6;\n      v4 = a1 / v6 * a2;\n      if ( v9 * a2 <= v3 && v4 / a2 == v9 )\n        return v4;\n    }\n  }\n  else\n  {\n    a1 = 0x2000LL;\n    if ( a2 )\n      a1 = a2;\n  }\n  if ( a1 <= v3 )\n    v3 = a1;\n  return v3;\n}\n", 
            "funcStartAddr": "0x40a640L", 
            "funcEndAddr": "0x40a6b0L", 
            "funcName": "sub_40A640"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40A6C0()\n{\n  FILE *v0; // rbx\n  int v2; // eax\n  FILE *v3; // rdi\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // r12\n  int *v7; // rax\n  int *v8; // rbp\n  __int64 v9; // rax\n  int v10; // eax\n\n  v0 = stdin;\n  if ( !sub_4105E0(stdin) )\n  {\n    if ( !(unsigned int)sub_413B80(v0) )\n      return sub_40A7E0();\n    goto LABEL_6;\n  }\n  v10 = sub_410610(v0, 0LL, 1LL);\n  v3 = stdin;\n  if ( !v10 )\n  {\n    v2 = sub_4105A0(stdin);\n    v3 = stdin;\n    if ( v2 )\n    {\n      sub_413B80(stdin);\n      goto LABEL_6;\n    }\n  }\n  if ( (unsigned int)sub_413B80(v3) )\n  {\nLABEL_6:\n    v4 = dcgettext(0LL, \"error closing file\", 5);\n    v5 = qword_61D928;\n    v6 = v4;\n    v7 = __errno_location();\n    v8 = v7;\n    if ( v5 )\n    {\n      v9 = sub_40DE20(v5);\n      error(0, *v8, \"%s: %s\", v9, v6);\n    }\n    else\n    {\n      error(0, *v7, \"%s\", v6);\n    }\n    sub_40A7E0();\n    _exit(status);\n  }\n  return sub_40A7E0();\n}\n", 
            "funcStartAddr": "0x40a6c0L", 
            "funcEndAddr": "0x40a7bdL", 
            "funcName": "sub_40A6C0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40A7E0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_413B80(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_61D930 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_61D938 )\n      {\n        v5 = sub_40DE20(qword_61D938);\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_413B80(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x40a7e0L", 
            "funcEndAddr": "0x40a87eL", 
            "funcName": "sub_40A7E0"
        }, 
        {
            "decompiledFuncCode": "DIR *__fastcall sub_40A880(const char *a1)\n{\n  DIR *v1; // rax\n  DIR *v2; // rbx\n  unsigned int v3; // eax\n  int v5; // er12\n  int *v6; // rax\n  int *v7; // rbp\n  int v8; // er14\n  DIR *v9; // r13\n  DIR *v10; // rax\n\n  v1 = opendir(a1);\n  v2 = v1;\n  if ( !v1 )\n    return v2;\n  v3 = dirfd(v1);\n  if ( v3 > 2 )\n    return v2;\n  v5 = sub_410460(v3);\n  v6 = __errno_location();\n  v7 = v6;\n  if ( v5 >= 0 )\n  {\n    v10 = fdopendir(v5);\n    v8 = *v7;\n    v9 = v10;\n    if ( !v10 )\n      close(v5);\n  }\n  else\n  {\n    v8 = *v6;\n    v9 = 0LL;\n  }\n  closedir(v2);\n  *v7 = v8;\n  return v9;\n}\n", 
            "funcStartAddr": "0x40a880L", 
            "funcEndAddr": "0x40a916L", 
            "funcName": "sub_40A880"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A920(void *a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40A9A0(a1);\n  if ( !result )\n    sub_410330(a1, a2, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x40a920L", 
            "funcEndAddr": "0x40a938L", 
            "funcName": "sub_40A920"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A940(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_40AA00(a1);\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n", 
            "funcStartAddr": "0x40a940L", 
            "funcEndAddr": "0x40a99dL", 
            "funcName": "sub_40A940"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40A9A0(void *src)\n{\n  __int64 v1; // rax\n  size_t v2; // rbx\n  _BYTE *v3; // rax\n  _BYTE *v4; // rcx\n  _BYTE *v5; // rax\n\n  v1 = sub_40A940(src);\n  v2 = v1;\n  v3 = malloc(v1 + (v1 == 0) + 1);\n  v4 = v3;\n  if ( v3 )\n  {\n    v5 = memcpy(v3, src, v2);\n    v4 = v5;\n    if ( !v2 )\n    {\n      *v5 = 46;\n      v2 = 1LL;\n    }\n    v5[v2] = 0;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40a9a0L", 
            "funcEndAddr": "0x40a9faL", 
            "funcName": "sub_40A9A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40AA00(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40aa00L", 
            "funcEndAddr": "0x40aa5bL", 
            "funcName": "sub_40AA00"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40AA60(const char *a1)\n{\n  size_t result; // rax\n  __int64 v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40aa60L", 
            "funcEndAddr": "0x40aa8bL", 
            "funcName": "sub_40AA60"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40AA90(char *a1)\n{\n  const char *v1; // rbx\n  const char *v2; // rbx\n  bool v3; // zf\n\n  v1 = sub_40AA00(a1);\n  if ( !*v1 )\n    v1 = a1;\n  v2 = &v1[sub_40AA60(v1)];\n  v3 = *v2 == 0;\n  *v2 = 0;\n  return !v3;\n}\n", 
            "funcStartAddr": "0x40aa90L", 
            "funcEndAddr": "0x40aac3L", 
            "funcName": "sub_40AA90"
        }, 
        {
            "decompiledFuncCode": "int j__posix_fadvise(int fd, off_t offset, off_t len, int advise)\n{\n  return posix_fadvise(fd, offset, len, advise);\n}\n", 
            "funcStartAddr": "0x40aad0L", 
            "funcEndAddr": "0x40aad5L", 
            "funcName": "j_.posix_fadvise"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AB10(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n  unsigned int v6; // [rsp+30h] [rbp-28h]\n\n  v6 = a3;\n  v3 = 0LL;\n  if ( a2 & 0x40 )\n    v3 = v6;\n  v4 = open(a1, a2, v3);\n  return sub_40EAF0(v4);\n}\n", 
            "funcStartAddr": "0x40ab10L", 
            "funcEndAddr": "0x40ab5aL", 
            "funcName": "sub_40AB10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40AB60(__int64 a1, void *a2, _QWORD *a3)\n{\n  _QWORD *v3; // rbp\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdx\n\n  if ( a1 )\n  {\n    v3 = a3;\n    v4 = (_QWORD *)sub_4100E0(24LL);\n    *v4 = sub_410310(a2);\n    v4[1] = v3[1];\n    v4[2] = *v3;\n    v5 = sub_40C060(a1, v4);\n    if ( !v5 )\n      sub_410330(a1, v4, v6);\n    if ( v4 != (_QWORD *)v5 )\n      sub_40C330(v4);\n  }\n}\n", 
            "funcStartAddr": "0x40ab60L", 
            "funcEndAddr": "0x40abe6L", 
            "funcName": "sub_40AB60"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40ABF0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v3; // rax\n  __int64 v5; // [rsp+0h] [rbp-28h]\n  __int64 v6; // [rsp+8h] [rbp-20h]\n  __int64 v7; // [rsp+10h] [rbp-18h]\n\n  if ( !a1 )\n    return 0;\n  v3 = a3[1];\n  v5 = a2;\n  v6 = v3;\n  v7 = *a3;\n  return sub_40B650(a1, &v5) != 0;\n}\n", 
            "funcStartAddr": "0x40abf0L", 
            "funcEndAddr": "0x40ac2bL", 
            "funcName": "sub_40ABF0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40AC30(__int64 a1)\n{\n  int v1; // eax\n  char *result; // rax\n\n  v1 = *(_DWORD *)(a1 + 24) & 0xF000;\n  switch ( v1 )\n  {\n    case 32768:\n      if ( *(_QWORD *)(a1 + 48) )\n        result = dcgettext(0LL, \"regular file\", 5);\n      else\n        result = dcgettext(0LL, \"regular empty file\", 5);\n      break;\n    case 16384:\n      result = dcgettext(0LL, \"directory\", 5);\n      break;\n    case 40960:\n      result = dcgettext(0LL, \"symbolic link\", 5);\n      break;\n    case 24576:\n      result = dcgettext(0LL, \"block special file\", 5);\n      break;\n    case 8192:\n      result = dcgettext(0LL, \"character special file\", 5);\n      break;\n    case 4096:\n      result = dcgettext(0LL, \"fifo\", 5);\n      break;\n    case 49152:\n      result = dcgettext(0LL, \"socket\", 5);\n      break;\n    default:\n      result = dcgettext(0LL, \"weird file\", 5);\n      break;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ac30L", 
            "funcEndAddr": "0x40ad14L", 
            "funcName": "sub_40AC30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AD20(__int16 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n\n  v2 = 45;\n  v3 = a1 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (a1 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (a1 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((a1 & 0x40u) < 1);\n  if ( a1 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (a1 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (a1 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((a1 & 8u) < 1);\n  if ( a1 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (a1 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (a1 & 2u) < 1 ? 45 : 119;\n  v8 = -((a1 & 1u) < 1);\n  if ( a1 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ad20L", 
            "funcEndAddr": "0x40ae93L", 
            "funcName": "sub_40AD20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AEB0(void *a1, void *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40AED0(a1, a2);\n  if ( !result )\n    sub_410330(a1, a2, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x40aeb0L", 
            "funcEndAddr": "0x40aec8L", 
            "funcName": "sub_40AEB0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40AED0(void *src, void *a2, _QWORD *a3)\n{\n  const char *v3; // r12\n  const char *v4; // rax\n  const char *v5; // r14\n  size_t v6; // rax\n  _BOOL8 v7; // rbx\n  size_t v8; // rbp\n  size_t v9; // rax\n  size_t v10; // r14\n  void *v11; // rax\n  void *v12; // r15\n  _BYTE *v13; // rax\n  char *v14; // rdi\n  _QWORD *v16; // [rsp+0h] [rbp-48h]\n  char v17; // [rsp+Fh] [rbp-39h]\n\n  v3 = (const char *)a2;\n  v16 = a3;\n  v4 = sub_40AA00(src);\n  v5 = v4;\n  v6 = sub_40AA60(v4);\n  v7 = v6;\n  v8 = v6 + v5 - (_BYTE *)src;\n  if ( v6 )\n    v7 = v5[v6 - 1] != 47;\n  v17 = *(_BYTE *)a2;\n  if ( *(_BYTE *)a2 == 47 )\n  {\n    do\n      ++v3;\n    while ( *v3 == 47 );\n  }\n  v9 = strlen(v3);\n  v10 = v9;\n  v11 = malloc(v9 + v7 + v8 + 1);\n  v12 = v11;\n  if ( v11 )\n  {\n    v13 = mempcpy(v11, src, v8);\n    *v13 = 47;\n    v14 = &v13[v7];\n    if ( v16 )\n      *v16 = &v14[-(v17 == 47)];\n    *(_BYTE *)mempcpy(v14, v3, v10) = 0;\n  }\n  return v12;\n}\n", 
            "funcStartAddr": "0x40aed0L", 
            "funcEndAddr": "0x40afa9L", 
            "funcName": "sub_40AED0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AFB0(int fd, void *buf, size_t n)\n{\n  char *v3; // rbp\n  size_t v4; // rbx\n  __int64 v5; // r12\n  __int64 v6; // rax\n\n  if ( !n )\n    return 0LL;\n  v3 = (char *)buf;\n  v4 = n;\n  v5 = 0LL;\n  do\n  {\n    v6 = sub_40E290(fd, v3, v4);\n    if ( v6 == -1 )\n      break;\n    if ( !v6 )\n    {\n      *__errno_location() = 28;\n      return v5;\n    }\n    v5 += v6;\n    v3 += v6;\n    v4 -= v6;\n  }\n  while ( v4 );\n  return v5;\n}\n", 
            "funcStartAddr": "0x40afb0L", 
            "funcEndAddr": "0x40b026L", 
            "funcName": "sub_40AFB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B030(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40b030L", 
            "funcEndAddr": "0x40b0c3L", 
            "funcName": "sub_40B030"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B0D0(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n", 
            "funcStartAddr": "0x40b0d0L", 
            "funcEndAddr": "0x40b0e0L", 
            "funcName": "sub_40B0D0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40B0E0(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n", 
            "funcStartAddr": "0x40b0e0L", 
            "funcEndAddr": "0x40b0e7L", 
            "funcName": "sub_40B0E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B0F0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40B0F0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x402d80L", 
            "funcEndAddr": "0x402d85L", 
            "funcName": "sub_40B0F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B0F0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40B0F0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x402d80L", 
            "funcEndAddr": "0x402d85L", 
            "funcName": "sub_40B0F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B120(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i **v4; // r14\n  char v5; // r13\n  __int64 v6; // rbp\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v4 = a3;\n  v5 = a4;\n  v6 = a2;\n  v7 = (__m128i *)sub_40B0F0(a1, a2);\n  *v4 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != v6 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( v6 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == v6 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( v5 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( v5 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b120L", 
            "funcEndAddr": "0x40b239L", 
            "funcName": "sub_40B120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B240(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_416F10 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_416F10;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b240L", 
            "funcEndAddr": "0x40b2beL", 
            "funcName": "sub_40B240"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B2C0(__int64 a1, __int64 a2, char a3)\n{\n  char v3; // r14\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v3 = a3;\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_40B0F0(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !v3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_40B0F0(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b2c0L", 
            "funcEndAddr": "0x40b40aL", 
            "funcName": "sub_40B2C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B650(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_40B0F0(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40b650L", 
            "funcEndAddr": "0x40b6a3L", 
            "funcName": "sub_40B650"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B700(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_40B0F0(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b700L", 
            "funcEndAddr": "0x40b76aL", 
            "funcName": "sub_40B700"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B7E0(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v4; // r13\n  __int64 v5; // r15\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v4 = a3;\n  v5 = a1;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(v5 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, v4) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x40b7e0L", 
            "funcEndAddr": "0x40b858L", 
            "funcName": "sub_40B7E0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40B8C0(unsigned __int64 a1, __int64 a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), __int64 a5)\n{\n  __int64 v5; // r14\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  unsigned __int64 v8; // rbp\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = a1;\n  if ( !a3 )\n    v7 = sub_40B0D0;\n  if ( !a4 )\n    v6 = sub_40B0E0;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_40B240(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_40B030(v8);\n        if ( !_bittest64((const __int64 *)&v12, 0x3Cu) && v12 >> 61 == 0 )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = v5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_416F10;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_40B240(v11) )\n        goto LABEL_14;\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n      {\nLABEL_23:\n        v17 = (float)(int)(v8 & 1 | (v8 >> 1)) + (float)(int)(v8 & 1 | (v8 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)v8;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      v8 = (unsigned int)(int)v18;\n    else\n      v8 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x40b8c0L", 
            "funcEndAddr": "0x40ba4aL", 
            "funcName": "sub_40B8C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BB00(void *ptr)\n{\n  void **v1; // r12\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v1 = (void **)ptr;\n  v2 = *(_QWORD **)ptr;\n  v3 = *((_QWORD *)ptr + 1);\n  if ( *((_QWORD *)ptr + 8) && *((_QWORD *)ptr + 4) )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        (*((void (**)(void))ptr + 8))();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = *((_QWORD *)ptr + 1);\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = *(_QWORD **)ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( v1[1] > v2 );\n  }\nLABEL_15:\n  v7 = v1[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free(*v1);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x40bb00L", 
            "funcEndAddr": "0x40bbd6L", 
            "funcName": "sub_40BB00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BBE0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B030(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B2C0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40BBE0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B030(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B2C0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x402d8aL", 
            "funcEndAddr": "0x402d8fL", 
            "funcName": "sub_40BBE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BBE0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B030(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B2C0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40BBE0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B030(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B2C0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B2C0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x402d8aL", 
            "funcEndAddr": "0x402d8fL", 
            "funcName": "sub_40BBE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BDE0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B120(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B240((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BBE0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B120(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40BDE0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B120(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B240((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BBE0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B120(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x402d8fL", 
            "funcEndAddr": "0x402d94L", 
            "funcName": "sub_40BDE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BDE0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B120(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B240((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BBE0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B120(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40BDE0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B120(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B240((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BBE0(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B120(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x402d8fL", 
            "funcEndAddr": "0x402d94L", 
            "funcName": "sub_40BDE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C060(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v2 = a2;\n  v3 = sub_40BDE0(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    v2 = v5;\n  return v2;\n}\n", 
            "funcStartAddr": "0x40c060L", 
            "funcEndAddr": "0x40c09bL", 
            "funcName": "sub_40C060"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C0A0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rbp\n  _QWORD *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  unsigned __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  unsigned __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  _QWORD *v24; // [rsp+8h] [rbp-20h]\n\n  v2 = a1;\n  v3 = sub_40B120(a1, a2, (__m128i **)&v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( *v4 )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( (v9 & 0x8000000000000000LL) == 0LL )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(int)(v9 & 1 | (v9 >> 1)) + (float)(int)(v9 & 1 | (v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( (v9 & 0x8000000000000000LL) != 0LL )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_40B240((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_40BBE0(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(v2 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40c0a0L", 
            "funcEndAddr": "0x40c277L", 
            "funcName": "sub_40C0A0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C280(_QWORD *a1, unsigned __int64 a2)\n{\n  return (a1[1] ^ (unsigned __int64)sub_413D10(*a1)) % a2;\n}\n", 
            "funcStartAddr": "0x40c280L", 
            "funcEndAddr": "0x40c2a7L", 
            "funcName": "sub_40C280"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C2B0(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n", 
            "funcStartAddr": "0x40c2b0L", 
            "funcEndAddr": "0x40c2bdL", 
            "funcName": "sub_40C2B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C2C0(_QWORD *a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 result; // rax\n\n  if ( a1[1] != a2[1] || a1[2] != a2[2] )\n    result = 0LL;\n  else\n    result = sub_40E2F0(*a1, *a2, a3, a4, a5, a6);\n  return result;\n}\n", 
            "funcStartAddr": "0x40c2c0L", 
            "funcEndAddr": "0x40c2e5L", 
            "funcName": "sub_40C2C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C330(void *ptr)\n{\n  free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x40c330L", 
            "funcEndAddr": "0x40c345L", 
            "funcName": "sub_40C330"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40C350(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_61D940 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x40c350L", 
            "funcEndAddr": "0x40c3e9L", 
            "funcName": "sub_40C350"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C3F0(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5)\n{\n  unsigned int v5; // ebp\n  __int64 v6; // rbx\n  __int64 result; // rax\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  v5 = a4;\n  v6 = a3;\n  if ( (unsigned int)sub_413790(a1, a2, a5, &v8) )\n    result = 4294967294LL;\n  else\n    result = sub_4137C0(&v8, v6, v5);\n  return result;\n}\n", 
            "funcStartAddr": "0x40c3f0L", 
            "funcEndAddr": "0x40c42fL", 
            "funcName": "sub_40C3F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C430(__int64 a1, unsigned int a2, int a3)\n{\n  int v4; // [rsp+Ch] [rbp-Ch]\n\n  v4 = a3;\n  return sub_4137C0(&v4, a1, a2);\n}\n", 
            "funcStartAddr": "0x40c430L", 
            "funcEndAddr": "0x40c44cL", 
            "funcName": "sub_40C430"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40C450(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_413E10();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_416FA1;\n      if ( !v5 )\n        v2 = (char *)&unk_416F96;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_416F9D;\n    if ( !v5 )\n      v2 = (char *)&unk_416F9A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x40c450L", 
            "funcEndAddr": "0x40c542L", 
            "funcName": "sub_40C450"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C550(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40C550((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40C550((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40C550((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40C550((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_413710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40C550((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40C550((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40C450(\"`\", v11);\n        v47 = sub_40C450(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_40C550(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40C550((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40C550((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40C550((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40C550((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_413710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40C550((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40C550((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40C450(\"`\", v11);\n        v47 = sub_40C450(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402d94L", 
            "funcEndAddr": "0x402d99L", 
            "funcName": "sub_40C550"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C550(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40C550((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40C550((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40C550((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40C550((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_413710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40C550((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40C550((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40C450(\"`\", v11);\n        v47 = sub_40C450(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_40C550(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40C550((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40C550((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40C550((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40C550((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40C550((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40C550((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_413710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40C550((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40C550((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40C450(\"`\", v11);\n        v47 = sub_40C450(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402d94L", 
            "funcEndAddr": "0x402d99L", 
            "funcName": "sub_40C550"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40D780(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61D458;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61D470 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_410330(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61D458 == &xmmword_61D460 )\n    {\n      v8 = (__int128 *)sub_410140(0LL, v10);\n      off_61D458 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61D460);\n    }\n    else\n    {\n      off_61D458 = (__int128 *)sub_410140(off_61D458, v10);\n      v8 = off_61D458;\n    }\n    memset(&v8[dword_61D470], 0, 16LL * ((int)a1 + 1 - dword_61D470));\n    dword_61D470 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40C550(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_61D960 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4100E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40C550(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_40D780(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61D458;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61D470 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_410330(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61D458 == &xmmword_61D460 )\n    {\n      v8 = (__int128 *)sub_410140(0LL, v10);\n      off_61D458 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61D460);\n    }\n    else\n    {\n      off_61D458 = (__int128 *)sub_410140(off_61D458, v10);\n      v8 = off_61D458;\n    }\n    memset(&v8[dword_61D470], 0, 16LL * ((int)a1 + 1 - dword_61D470));\n    dword_61D470 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40C550(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_61D960 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4100E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40C550(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x402d99L", 
            "funcEndAddr": "0x402d9eL", 
            "funcName": "sub_40D780"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40D780(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61D458;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61D470 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_410330(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61D458 == &xmmword_61D460 )\n    {\n      v8 = (__int128 *)sub_410140(0LL, v10);\n      off_61D458 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61D460);\n    }\n    else\n    {\n      off_61D458 = (__int128 *)sub_410140(off_61D458, v10);\n      v8 = off_61D458;\n    }\n    memset(&v8[dword_61D470], 0, 16LL * ((int)a1 + 1 - dword_61D470));\n    dword_61D470 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40C550(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_61D960 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4100E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40C550(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_40D780(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61D458;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61D470 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_410330(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61D458 == &xmmword_61D460 )\n    {\n      v8 = (__int128 *)sub_410140(0LL, v10);\n      off_61D458 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61D460);\n    }\n    else\n    {\n      off_61D458 = (__int128 *)sub_410140(off_61D458, v10);\n      v8 = off_61D458;\n    }\n    memset(&v8[dword_61D470], 0, 16LL * ((int)a1 + 1 - dword_61D470));\n    dword_61D470 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40C550(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_61D960 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4100E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40C550(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x402d99L", 
            "funcEndAddr": "0x402d9eL", 
            "funcName": "sub_40D780"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DCA0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40DCA0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402d9eL", 
            "funcEndAddr": "0x402da3L", 
            "funcName": "sub_40DCA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DCA0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40DCA0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402d9eL", 
            "funcEndAddr": "0x402da3L", 
            "funcName": "sub_40DCA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DD10(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40D780(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_40DD10(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40D780(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x402da3L", 
            "funcEndAddr": "0x402da8L", 
            "funcName": "sub_40DD10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DD10(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40D780(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_40DD10(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40D780(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x402da3L", 
            "funcEndAddr": "0x402da8L", 
            "funcName": "sub_40DD10"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DD80(int a1, char *a2)\n{\n  return sub_40DCA0(0LL, a1, a2);\n}\n", 
            "funcStartAddr": "0x40dd80L", 
            "funcEndAddr": "0x40dd8cL", 
            "funcName": "sub_40DD80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DDA0(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_61DA90;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_61DA60);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_61DA70);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_61DA80);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_40D780(0LL, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x40dda0L", 
            "funcEndAddr": "0x40de10L", 
            "funcName": "sub_40DDA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DE20(char *a1)\n{\n  return sub_40DDA0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x40de20L", 
            "funcEndAddr": "0x40de31L", 
            "funcName": "sub_40DE20"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DE50(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40DE50(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402da8L", 
            "funcEndAddr": "0x402dadL", 
            "funcName": "sub_40DE50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DE50(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40DE50(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40D780(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402da8L", 
            "funcEndAddr": "0x402dadL", 
            "funcName": "sub_40DE50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DEC0(__int64 a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_61DA60);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_61DA70);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_61DA80);\n  v9 = qword_61DA90;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_40D780(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x40dec0L", 
            "funcEndAddr": "0x40df2cL", 
            "funcName": "sub_40DEC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DFB0(__int64 a1, char *a2)\n{\n  return sub_40D780(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61D420);\n}\n", 
            "funcStartAddr": "0x40dfb0L", 
            "funcEndAddr": "0x40dfc1L", 
            "funcName": "sub_40DFB0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40DFD0(char *a1)\n{\n  return sub_40D780(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61D420);\n}\n", 
            "funcStartAddr": "0x40dfd0L", 
            "funcEndAddr": "0x40dfe6L", 
            "funcName": "sub_40DFD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40DFF0(int oldfd, char *old, int newfd, char *a4, unsigned int a5)\n{\n  int v5; // er13\n  char *v6; // r12\n  unsigned int v7; // ebp\n  int v8; // eax\n  unsigned int v9; // edx\n  int *v10; // rax\n  int *v11; // r9\n  bool v12; // r15\n  int v14; // eax\n  size_t v15; // rbp\n  size_t v16; // rax\n  unsigned int v17; // [rsp+8h] [rbp-160h]\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  struct stat v20; // [rsp+10h] [rbp-158h]\n  struct stat stat_buf; // [rsp+A0h] [rbp-C8h]\n\n  v5 = newfd;\n  v6 = a4;\n  v7 = a5;\n  v8 = syscall(316LL, (unsigned int)oldfd, old, (unsigned int)newfd, a4, a5);\n  v9 = v8;\n  if ( v8 < 0 )\n  {\n    v17 = v8;\n    v10 = __errno_location();\n    v9 = v17;\n    v11 = v10;\n    v12 = *v10 != 95 && ((*v10 - 22) & 0xFFFFFFEF) != 0;\n    if ( !v12 )\n    {\n      if ( v7 )\n      {\n        if ( v7 & 0xFFFFFFFE )\n        {\n          *v10 = 95;\n          return (unsigned int)-1;\n        }\n        v18 = v10;\n        v14 = __fxstatat(1, v5, v6, &stat_buf, 256);\n        v11 = v18;\n        if ( !v14 || *v18 == 75 )\n        {\n          *v18 = 17;\n          return (unsigned int)-1;\n        }\n        if ( *v18 != 2 )\n          return (unsigned int)-1;\n        v12 = 1;\n      }\n      v19 = v11;\n      v15 = strlen(old);\n      v16 = strlen(v6);\n      if ( !v15 || !v16 || old[v15 - 1] != 47 && v6[v16 - 1] != 47 )\n        return (unsigned int)renameat(oldfd, old, v5, v6);\n      if ( !__fxstatat(1, oldfd, old, &v20, 256) )\n      {\n        if ( v12 )\n        {\n          if ( (v20.st_mode & 0xF000) != 0x4000 )\n          {\n            *v19 = 2;\n            return (unsigned int)-1;\n          }\n          return (unsigned int)renameat(oldfd, old, v5, v6);\n        }\n        if ( __fxstatat(1, v5, v6, &stat_buf, 256) )\n        {\n          if ( *v19 == 2 && (v20.st_mode & 0xF000) == 0x4000 )\n            return (unsigned int)renameat(oldfd, old, v5, v6);\n        }\n        else\n        {\n          if ( (stat_buf.st_mode & 0xF000) == 0x4000 )\n          {\n            if ( (v20.st_mode & 0xF000) != 0x4000 )\n            {\n              *v19 = 21;\n              return (unsigned int)-1;\n            }\n            return (unsigned int)renameat(oldfd, old, v5, v6);\n          }\n          *v19 = 20;\n        }\n      }\n      return (unsigned int)-1;\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x40dff0L", 
            "funcEndAddr": "0x40e232L", 
            "funcName": "sub_40DFF0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40E240(_QWORD *a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-98h]\n  __int64 v3; // [rsp+8h] [rbp-90h]\n\n  if ( __lxstat(1, \"/\", (struct stat *)&v2) )\n    return 0LL;\n  *a1 = v3;\n  a1[1] = v2;\n  return a1;\n}\n", 
            "funcStartAddr": "0x40e240L", 
            "funcEndAddr": "0x40e28bL", 
            "funcName": "sub_40E240"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_40E290(int fd, void *buf, size_t n)\n{\n  size_t v3; // rbx\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  v3 = n;\n  while ( 1 )\n  {\n    v4 = write(fd, buf, v3);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v5 != 22 || v3 <= 0x7FFFE000 )\n        return v4;\n      v3 = 2147475456LL;\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40e290L", 
            "funcEndAddr": "0x40e2eeL", 
            "funcName": "sub_40E290"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E2F0(_BYTE *a1, _BYTE *a2)\n{\n  unsigned int v2; // ebx\n  const char *v3; // rbp\n  const char *v4; // r12\n  size_t v5; // r13\n  char *v7; // rbp\n  char *v8; // r12\n  int *v9; // rax\n  int *v10; // rax\n  __int64 v11; // [rsp+0h] [rbp-158h]\n  __int64 v12; // [rsp+8h] [rbp-150h]\n  struct stat stat_buf; // [rsp+90h] [rbp-C8h]\n\n  v2 = 0;\n  v3 = sub_40AA00(a1);\n  v4 = sub_40AA00(a2);\n  v5 = sub_40AA60(v3);\n  if ( v5 == sub_40AA60(v4) && !memcmp(v3, v4, v5) )\n  {\n    v7 = (char *)sub_40A920(a1, (__int64)v4);\n    v8 = (char *)sub_40A920(a2, (__int64)v4);\n    if ( __xstat(1, v7, (struct stat *)&v11) )\n    {\n      v10 = __errno_location();\n      error(1, *v10, \"%s\", v7);\n    }\n    if ( __xstat(1, v8, &stat_buf) )\n    {\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n    v2 = 0;\n    if ( v12 == stat_buf.st_ino )\n      LOBYTE(v2) = v11 == stat_buf.st_dev;\n    free(v7);\n    free(v8);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40e2f0L", 
            "funcEndAddr": "0x40e420L", 
            "funcName": "sub_40E2F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E420(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // rdx\n\n  result = 0xFFFFFFFFLL;\n  v3 = *(_QWORD *)(a2 + 8);\n  if ( *(_QWORD *)(a1 + 8) >= v3 )\n    result = *(_QWORD *)(a1 + 8) > v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e420L", 
            "funcEndAddr": "0x40e436L", 
            "funcName": "sub_40E420"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40E440(const char **a1, const char **a2)\n{\n  return strcmp(*a1, *a2);\n}\n", 
            "funcStartAddr": "0x40e440L", 
            "funcEndAddr": "0x40e44bL", 
            "funcName": "sub_40E440"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E450(DIR *dirp, __int64 a2)\n{\n  DIR *v2; // rbx\n  unsigned __int64 v3; // r15\n  size_t v4; // r12\n  char *v5; // r14\n  __int64 v6; // r13\n  int *v7; // rbp\n  struct dirent *v8; // rax\n  struct dirent *v9; // rcx\n  const char *v10; // r8\n  char v11; // al\n  const char *v12; // rdi\n  size_t v13; // rax\n  void *v14; // r8\n  size_t v15; // rdx\n  struct dirent *v16; // rcx\n  char *v17; // r12\n  int v18; // ebx\n  char *v19; // rbp\n  char *v20; // rbp\n  __int64 v21; // r12\n  const char **v22; // rbx\n  const char *v23; // rsi\n  __int64 v25; // rax\n  __int64 v26; // rax\n  __int64 v27; // rax\n  void *v28; // rdi\n  int (*compar)(const void *, const void *); // [rsp+8h] [rbp-70h]\n  __int64 v30; // [rsp+10h] [rbp-68h]\n  const char *srcb; // [rsp+18h] [rbp-60h]\n  __int64 src; // [rsp+18h] [rbp-60h]\n  unsigned __int64 srca; // [rsp+18h] [rbp-60h]\n  __int64 v34; // [rsp+20h] [rbp-58h]\n  struct dirent *v35; // [rsp+28h] [rbp-50h]\n  struct dirent *v36; // [rsp+28h] [rbp-50h]\n  void *v37; // [rsp+28h] [rbp-50h]\n  size_t n; // [rsp+30h] [rbp-48h]\n  size_t na; // [rsp+30h] [rbp-48h]\n  size_t nb; // [rsp+30h] [rbp-48h]\n  __int64 v41; // [rsp+38h] [rbp-40h]\n\n  a2 = (unsigned int)a2;\n  compar = (int (*)(const void *, const void *))qword_417CE0[(unsigned int)a2];\n  if ( !dirp )\n    return 0LL;\n  v2 = dirp;\n  v3 = 0LL;\n  v4 = 0LL;\n  v5 = 0LL;\n  v6 = 0LL;\n  v34 = 0LL;\n  v30 = 0LL;\n  v7 = __errno_location();\n  while ( 1 )\n  {\n    *v7 = 0;\n    v8 = readdir(v2);\n    v9 = v8;\n    if ( !v8 )\n      break;\n    v10 = v8->d_name;\n    v11 = v8->d_name[0];\n    if ( v11 == 46 )\n    {\n      if ( v9->d_name[1] == 46 )\n      {\n        v11 = v9->d_name[2];\n        goto LABEL_3;\n      }\n      if ( v9->d_name[1] )\n        goto LABEL_8;\n    }\n    else\n    {\nLABEL_3:\n      if ( v11 )\n      {\nLABEL_8:\n        v12 = v10;\n        srcb = v10;\n        v35 = v9;\n        v13 = strlen(v10);\n        v14 = (void *)srcb;\n        v15 = v13 + 1;\n        if ( compar )\n        {\n          v16 = v35;\n          src = v4 + 1;\n          if ( v4 == v34 )\n          {\n            if ( v5 )\n            {\n              if ( v4 > 0x555555555555554LL )\n                goto LABEL_41;\n              v34 = src + (v4 >> 1);\n              a2 = 16 * (src + (v4 >> 1));\n            }\n            else if ( v4 )\n            {\n              a2 = 16 * v4;\n              if ( v4 & 0x800000000000000LL || v4 >> 60 != 0 )\nLABEL_41:\n                sub_410330(v12, a2, v15);\n            }\n            else\n            {\n              v34 = 8LL;\n              a2 = 128LL;\n              src = 1LL;\n            }\n            v41 = v13 + 1;\n            nb = (size_t)v14;\n            v27 = sub_410140(v5, a2);\n            v15 = v41;\n            v14 = (void *)nb;\n            v5 = (char *)v27;\n            v16 = v35;\n          }\n          n = v15;\n          v36 = v16;\n          v17 = &v5[16 * v4];\n          *(_QWORD *)v17 = sub_410310(v14);\n          v3 += n;\n          *((_QWORD *)v17 + 1) = v36->d_ino;\n          v4 = src;\n        }\n        else\n        {\n          a2 = v15 + v3;\n          srca = v15 + v3;\n          if ( v30 - v3 > v15 )\n            goto LABEL_29;\n          if ( __CFADD__(v15, v3) )\n            goto LABEL_41;\n          if ( v6 )\n          {\n            a2 = v15 + v3;\n            if ( srca > 0x5555555555555553LL )\n              goto LABEL_41;\n            v25 = srca + (srca >> 1) + 1;\n          }\n          else\n          {\n            v25 = v15 + v3;\n            if ( !a2 )\n            {\n              v30 = 128LL;\n              goto LABEL_28;\n            }\n            if ( a2 < 0 )\n              goto LABEL_41;\n          }\n          v30 = v25;\nLABEL_28:\n          na = v15;\n          v37 = v14;\n          v26 = sub_410140(v6, v30);\n          v15 = na;\n          v14 = v37;\n          v6 = v26;\nLABEL_29:\n          a2 = (__int64)v14;\n          memcpy((void *)(v6 + v3), v14, v15);\n          v3 = srca;\n        }\n      }\n    }\n  }\n  v18 = *v7;\n  if ( *v7 )\n  {\n    free(v5);\n    v28 = (void *)v6;\n    v6 = 0LL;\n    free(v28);\n    *v7 = v18;\n  }\n  else\n  {\n    if ( compar )\n    {\n      if ( v4 )\n      {\n        v20 = 0LL;\n        qsort(v5, v4, 0x10uLL, compar);\n        v21 = (__int64)&v5[16 * v4];\n        v22 = (const char **)v5;\n        v6 = sub_4100E0(v3 + 1);\n        do\n        {\n          v23 = *v22;\n          v22 += 2;\n          v20 = &stpcpy(&v20[v6], v23)[-v6 + 1];\n          free((void *)*(v22 - 2));\n        }\n        while ( v22 != (const char **)v21 );\n        v19 = &v20[v6];\n      }\n      else\n      {\n        v6 = sub_4100E0(v3 + 1);\n        v19 = (char *)v6;\n      }\n      free(v5);\n    }\n    else if ( v30 == v3 )\n    {\n      v6 = sub_410140(v6, v30 + 1);\n      v19 = (char *)(v6 + v30);\n    }\n    else\n    {\n      v19 = (char *)(v6 + v3);\n    }\n    *v19 = 0;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x40e450L", 
            "funcEndAddr": "0x40e7e4L", 
            "funcName": "sub_40E450"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40E7F0(const char *a1, unsigned int a2)\n{\n  DIR *v2; // rax\n  DIR *v3; // rbx\n  void *v4; // rbp\n  void *result; // rax\n  int *v6; // rax\n  int v7; // er12\n  int *v8; // rbx\n\n  v2 = sub_40A880(a1);\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = (void *)sub_40E450(v2, a2);\n  if ( !closedir(v3) )\n    return v4;\n  v6 = __errno_location();\n  v7 = *v6;\n  v8 = v6;\n  free(v4);\n  result = 0LL;\n  *v8 = v7;\n  return result;\n}\n", 
            "funcStartAddr": "0x40e7f0L", 
            "funcEndAddr": "0x40e858L", 
            "funcName": "sub_40E7F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E860(char *filename)\n{\n  int v1; // ebx\n  int *v2; // rax\n  __int64 v4; // [rsp+0h] [rbp-98h]\n\n  v1 = __lxstat(1, filename, (struct stat *)&v4);\n  v2 = __errno_location();\n  if ( v1 && *v2 != 75 )\n    return (unsigned int)-(*v2 != 2);\n  *v2 = 17;\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x40e860L", 
            "funcEndAddr": "0x40e8b4L", 
            "funcName": "sub_40E860"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40E8C0(const char *a1)\n{\n  return mkdir(a1, 0x1C0u);\n}\n", 
            "funcStartAddr": "0x40e8c0L", 
            "funcEndAddr": "0x40e8caL", 
            "funcName": "sub_40E8C0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40E8D0(const char *a1, int *a2)\n{\n  int v2; // esi\n\n  v2 = *a2;\n  LOBYTE(v2) = v2 & 0x3C | 0xC2;\n  return open(a1, v2, 384LL);\n}\n", 
            "funcStartAddr": "0x40e8d0L", 
            "funcEndAddr": "0x40e8e6L", 
            "funcName": "sub_40E8D0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_40E8F0()\n{\n  __assert_fail(\"! \\\"invalid KIND in __gen_tempname\\\"\", \"lib/tempname.c\", 0x147u, \"gen_tempname_len\");\n}\n", 
            "funcStartAddr": "0x40e8f0L", 
            "funcEndAddr": "0x40e90dL", 
            "funcName": "sub_40E8F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40E910(char *s, int a2, __int64 a3, __int64 (__fastcall *a4)(char *, __int64), size_t a5)\n{\n  size_t v5; // r13\n  int *v6; // rax\n  int *v7; // r15\n  size_t v8; // rax\n  size_t v9; // rdx\n  size_t v10; // rbx\n  void *v11; // rbp\n  int v12; // er12\n  char *v13; // rbx\n  char *v14; // r14\n  int v15; // edx\n  int v16; // ecx\n  unsigned int v17; // edx\n  int v19; // [rsp+8h] [rbp-60h]\n  char *v20; // [rsp+10h] [rbp-58h]\n  int v21; // [rsp+10h] [rbp-58h]\n  __int64 v22; // [rsp+18h] [rbp-50h]\n  __int64 (__fastcall *v23)(char *, __int64); // [rsp+20h] [rbp-48h]\n  int v24; // [rsp+2Ch] [rbp-3Ch]\n\n  v5 = a5;\n  v22 = a3;\n  v23 = a4;\n  v6 = __errno_location();\n  v7 = v6;\n  v24 = *v6;\n  v8 = strlen(s);\n  v9 = v5 + a2;\n  if ( v9 > v8 || (v10 = v8 - v9, v20 = &s[v8 - v9], v5 > strspn(&s[v8 - v9], \"X\")) )\n  {\n    *v7 = 22;\n    v17 = -1;\n  }\n  else\n  {\n    v11 = (void *)sub_414400(0LL, v5);\n    if ( v11 )\n    {\n      v12 = 238328;\n      v13 = &s[v5 + v10];\n      while ( 1 )\n      {\n        v14 = v20;\n        if ( v5 )\n        {\n          do\n            *(++v14 - 1) = byte_417D80[sub_414440(v11, 61LL)];\n          while ( v14 != v13 );\n        }\n        v15 = v23(s, v22);\n        if ( v15 >= 0 )\n        {\n          *v7 = v24;\n          v16 = v24;\n          goto LABEL_12;\n        }\n        v16 = *v7;\n        if ( *v7 != 17 )\n          break;\n        if ( !--v12 )\n        {\n          sub_414560(v11);\n          *v7 = 17;\n          return (unsigned int)-1;\n        }\n      }\n      v15 = -1;\nLABEL_12:\n      v21 = v15;\n      v19 = v16;\n      sub_414560(v11);\n      v17 = v21;\n      *v7 = v19;\n    }\n    else\n    {\n      v17 = -1;\n    }\n  }\n  return v17;\n}\n", 
            "funcStartAddr": "0x40e910L", 
            "funcEndAddr": "0x40ea6dL", 
            "funcName": "sub_40E910"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EA70(char *a1, int a2, int a3, unsigned int a4, size_t a5)\n{\n  int v6; // [rsp+Ch] [rbp-Ch]\n\n  v6 = a3;\n  if ( a4 > 2 )\n    sub_40E8F0();\n  return sub_40E910(a1, a2, (__int64)&v6, (__int64 (__fastcall *)(char *, __int64))off_417D40[a4], a5);\n}\n", 
            "funcStartAddr": "0x40ea70L", 
            "funcEndAddr": "0x40ea9bL", 
            "funcName": "sub_40EA70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EAA0(char *a1, int a2, int a3, unsigned int a4)\n{\n  int v5; // [rsp+Ch] [rbp-Ch]\n\n  v5 = a3;\n  if ( a4 > 2 )\n    sub_40E8F0();\n  return sub_40E910(a1, a2, (__int64)&v5, (__int64 (__fastcall *)(char *, __int64))off_417D40[a4], 6uLL);\n}\n", 
            "funcStartAddr": "0x40eaa0L", 
            "funcEndAddr": "0x40ead1L", 
            "funcName": "sub_40EAA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EAF0(int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // er12\n  int *v3; // rax\n  int v4; // er13\n  int *v5; // rbp\n\n  if ( (unsigned int)fd > 2 )\n    return (unsigned int)fd;\n  v2 = sub_414FD0();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x40eaf0L", 
            "funcEndAddr": "0x40eb3eL", 
            "funcName": "sub_40EAF0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40EB40(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n", 
            "funcStartAddr": "0x40eb40L", 
            "funcEndAddr": "0x40eb4cL", 
            "funcName": "sub_40EB40"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40EB50(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n", 
            "funcStartAddr": "0x40eb50L", 
            "funcEndAddr": "0x40eb5aL", 
            "funcName": "sub_40EB50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EB60(char *a1, __int64 a2, __int64 a3, char a4)\n{\n  __int64 v4; // r13\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  __int64 v7; // r14\n  int v8; // er15\n  unsigned int v9; // ebx\n  _QWORD *v10; // rdx\n  _QWORD *v11; // rsi\n  __int64 v12; // rax\n  __int64 *v13; // r9\n  int v14; // edi\n  __int64 v16; // rcx\n  int v17; // er10\n  int v18; // edi\n  int v19; // ecx\n  int v20; // esi\n  int v21; // er8\n  int v22; // er15\n  int v23; // er11\n  signed __int64 v24; // rax\n  int v25; // eax\n  int v26; // er8\n  __int64 *v27; // r9\n  int v28; // eax\n  int v29; // er8\n  int v30; // er10\n  char v31; // al\n  int v32; // ecx\n  int v33; // eax\n  int v34; // er10\n  int v35; // ecx\n  int v36; // esi\n  __int64 v37; // rax\n  _QWORD *v38; // rax\n  __int64 v39; // rdi\n  __int64 *v40; // [rsp+0h] [rbp-148h]\n  __int64 *v41; // [rsp+0h] [rbp-148h]\n  __int64 *v42; // [rsp+0h] [rbp-148h]\n  bool v43; // [rsp+8h] [rbp-140h]\n  __int64 v44; // [rsp+10h] [rbp-138h]\n  int v45; // [rsp+10h] [rbp-138h]\n  int v46; // [rsp+18h] [rbp-130h]\n  int v47; // [rsp+18h] [rbp-130h]\n  int v48; // [rsp+18h] [rbp-130h]\n  int v49; // [rsp+18h] [rbp-130h]\n  _QWORD *v50; // [rsp+18h] [rbp-130h]\n  char *filename; // [rsp+20h] [rbp-128h]\n  __int64 v52; // [rsp+30h] [rbp-118h]\n  int v53; // [rsp+3Ch] [rbp-10Ch]\n  __int64 v54; // [rsp+48h] [rbp-100h]\n  __int64 v55; // [rsp+50h] [rbp-F8h]\n  int v56; // [rsp+58h] [rbp-F0h]\n  char v57; // [rsp+5Ch] [rbp-ECh]\n  __int64 v58; // [rsp+60h] [rbp-E8h]\n  __int64 v59; // [rsp+68h] [rbp-E0h]\n  __int64 v60; // [rsp+70h] [rbp-D8h]\n  __int64 v61; // [rsp+78h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+80h] [rbp-C8h]\n\n  v4 = *(_QWORD *)(a3 + 96);\n  v5 = *(_QWORD *)(a2 + 88);\n  v6 = *(_QWORD *)(a3 + 88);\n  v7 = *(_QWORD *)(a2 + 96);\n  v8 = *(_QWORD *)(a3 + 96);\n  v9 = a4 & 1;\n  if ( !(a4 & 1) )\n  {\nLABEL_12:\n    if ( v6 > v5 )\n      return (unsigned int)-1;\n    v9 = 1;\n    if ( v6 == v5 )\n    {\n      if ( v8 <= (int)v7 )\n        return v8 < (int)v7;\n      return (unsigned int)-1;\n    }\n    return v9;\n  }\n  v43 = v5 == v6 && (_DWORD)v7 == (_DWORD)v4;\n  if ( v43 )\n    return 0;\n  if ( v6 - 1 > v5 )\n    return (unsigned int)-1;\n  if ( v5 - 1 <= v6 )\n  {\n    v10 = (_QWORD *)qword_61DAA0;\n    v44 = a2;\n    filename = a1;\n    if ( !qword_61DAA0 )\n    {\n      v10 = sub_40B8C0(\n              0x10uLL,\n              0LL,\n              (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_40EB40,\n              (bool (__fastcall *)(__int64, __int64))sub_40EB50,\n              (__int64)free);\n      qword_61DAA0 = (__int64)v10;\n      if ( !v10 )\n        goto LABEL_21;\n    }\n    v11 = (_QWORD *)qword_61DA98;\n    if ( !qword_61DA98 )\n    {\n      v50 = v10;\n      v38 = malloc(0x10uLL);\n      v11 = v38;\n      qword_61DA98 = (__int64)v38;\n      if ( !v38 )\n      {\n        v39 = qword_61DAA0;\n        goto LABEL_59;\n      }\n      *((_DWORD *)v38 + 2) = 2000000000;\n      v10 = v50;\n      *((_BYTE *)v38 + 12) = 0;\n    }\n    *v11 = *(_QWORD *)v44;\n    v12 = sub_40C060((__int64)v10, (__int64)v11);\n    v13 = (__int64 *)v12;\n    if ( v12 )\n    {\n      if ( qword_61DA98 == v12 )\n        qword_61DA98 = 0LL;\nLABEL_10:\n      v14 = *((_DWORD *)v13 + 2);\n      v46 = *((_DWORD *)v13 + 2);\n      if ( *((_BYTE *)v13 + 12) )\n      {\n        v6 = ~(v14 == 2000000000) & (unsigned __int64)v6;\n        v8 = v4 - v8 % v14;\n        goto LABEL_12;\n      }\nLABEL_22:\n      v16 = *(_QWORD *)(v44 + 112);\n      v52 = *(_QWORD *)(v44 + 80);\n      v17 = (int)v16 / 10;\n      v18 = (int)v7 / 10;\n      if ( ((int)v7 % 10) | ((int)v52 % 10) | ((int)v16 % 10) )\n      {\nLABEL_55:\n        *((_DWORD *)v13 + 2) = v9;\n        *((_BYTE *)v13 + 12) = 1;\n        goto LABEL_12;\n      }\n      v19 = (int)v52 / 10;\n      v20 = v17;\n      v54 = *(_QWORD *)(v44 + 72);\n      if ( v46 <= 10 )\n      {\n        *((_DWORD *)v13 + 2) = 10;\n        v24 = v6;\n        v21 = 10;\n      }\n      else\n      {\n        v21 = 10;\n        if ( ((int)v7 / 10 % 10) | (v17 % 10) | ((int)v52 / 10 % 10) )\n        {\n          *((_DWORD *)v13 + 2) = 10;\n          v24 = v6;\n        }\n        else\n        {\n          v53 = v8;\n          v22 = 8;\n          do\n          {\n            v23 = 10 * v21;\n            v21 = v23;\n            v19 /= 10;\n            v20 /= 10;\n            v18 /= 10;\n            if ( v23 >= v46 || (v18 % 10) | (v20 % 10) | (v19 % 10) )\n            {\n              v43 = v23 == 2000000000;\n              v8 = v53;\n              *((_DWORD *)v13 + 2) = v23;\n              v24 = v6 & ~(v23 == 2000000000);\n              goto LABEL_31;\n            }\n            --v22;\n          }\n          while ( v22 );\n          v8 = v53;\n          if ( (*(_BYTE *)(v44 + 104) | (unsigned __int8)(v5 | v54)) & 1 )\n          {\n            *((_DWORD *)v13 + 2) = 1000000000;\n            v24 = v6;\n            v21 = 1000000000;\n          }\n          else\n          {\n            *((_DWORD *)v13 + 2) = 2000000000;\n            v21 = 2000000000;\n            v24 = v6 & 0xFFFFFFFFFFFFFFFELL;\n            v43 = 1;\n          }\n        }\n      }\nLABEL_31:\n      if ( v5 > v6 || (int)v7 >= (int)v4 && v5 == v6 )\n        return v9;\n      if ( v5 < v24 || v5 == v24 && (int)v4 - v8 % v21 > (int)v7 )\n        return (unsigned int)-1;\n      v47 = v21;\n      v58 = v54;\n      v59 = (int)v52;\n      v60 = v5 | v43;\n      v61 = (int)(v21 / 9u + v7);\n      v40 = v13;\n      if ( (*(_DWORD *)(v44 + 24) & 0xF000) == 40960 )\n      {\n        v25 = sub_40F8B0(filename);\n        v27 = v40;\n        v26 = v47;\n      }\n      else\n      {\n        v25 = sub_40F8A0(filename);\n        v26 = v47;\n        v27 = v40;\n      }\n      if ( v25 != 0 )\n        return (unsigned int)-2;\n      v48 = v26;\n      v41 = v27;\n      if ( (*(_DWORD *)(v44 + 24) & 0xF000) == 40960 )\n      {\n        v28 = __lxstat(1, filename, &stat_buf);\n        v13 = v41;\n        v29 = v48;\n      }\n      else\n      {\n        v28 = __xstat(1, filename, &stat_buf);\n        v29 = v48;\n        v13 = v41;\n      }\n      v30 = v28;\n      v31 = stat_buf.st_mtim.tv_sec;\n      v32 = stat_buf.st_mtim.tv_nsec;\n      if ( v30 | v5 ^ stat_buf.st_mtim.tv_sec | stat_buf.st_mtim.tv_nsec ^ (int)v7 )\n      {\n        v61 = (int)v7;\n        v60 = v5;\n        v33 = *(_DWORD *)(v44 + 24);\n        v49 = v29;\n        v45 = v30;\n        v42 = v13;\n        if ( (v33 & 0xF000) == 40960 )\n        {\n          sub_40F8B0(filename);\n          v13 = v42;\n          v34 = v45;\n          v29 = v49;\n        }\n        else\n        {\n          sub_40F8A0(filename);\n          v29 = v49;\n          v34 = v45;\n          v13 = v42;\n        }\n        if ( v34 )\n          return (unsigned int)-2;\n        v31 = stat_buf.st_mtim.tv_sec;\n        v32 = stat_buf.st_mtim.tv_nsec;\n      }\n      v35 = 1000000000 * (v31 & 1) + v32;\n      if ( v35 == 10 * (v35 / 10) )\n      {\n        if ( v29 != 10 )\n        {\n          v36 = 9;\n          v9 = 10;\n          do\n          {\n            v35 /= 10;\n            if ( v35 != 10 * (v35 / 10) )\n              break;\n            if ( !--v36 )\n            {\n              v37 = -2LL;\n              v9 = 2000000000;\n              goto LABEL_54;\n            }\n            v9 *= 10;\n          }\n          while ( v9 != v29 );\n          v37 = ~(v9 == 2000000000);\n          goto LABEL_54;\n        }\n        v9 = 10;\n      }\n      v37 = -1LL;\nLABEL_54:\n      v6 &= v37;\n      v8 = v4 - v8 % (int)v9;\n      goto LABEL_55;\n    }\n    v39 = qword_61DAA0;\n    if ( !qword_61DAA0 )\n    {\nLABEL_21:\n      v56 = 2000000000;\n      v13 = &v55;\n      v57 = 0;\n      v46 = 2000000000;\n      goto LABEL_22;\n    }\nLABEL_59:\n    v55 = *(_QWORD *)v44;\n    v13 = (__int64 *)sub_40B650(v39, (__int64)&v55);\n    if ( v13 )\n      goto LABEL_10;\n    goto LABEL_21;\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x40eb60L", 
            "funcEndAddr": "0x40f2c9L", 
            "funcName": "sub_40EB60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F2D0(_QWORD *a1, struct timespec **a2)\n{\n  struct timespec *v2; // rbx\n  __syscall_slong_t v3; // rax\n  __syscall_slong_t v4; // rdx\n  __syscall_slong_t v5; // rax\n  __int64 result; // rax\n  __syscall_slong_t v7; // rax\n\n  v2 = *a2;\n  v3 = (*a2)->tv_nsec;\n  v4 = (*a2)[1].tv_nsec;\n  if ( v3 == 1073741822 )\n  {\n    result = 1LL;\n    if ( v4 == 1073741822 )\n      return result;\n    v7 = a1[10];\n    v2->tv_sec = a1[9];\n    v2->tv_nsec = v7;\n  }\n  else if ( v3 == 0x3FFFFFFF )\n  {\n    if ( v4 == 0x3FFFFFFF )\n    {\n      *a2 = 0LL;\n      return 0LL;\n    }\n    sub_413C70(*a2);\n    v4 = v2[1].tv_nsec;\n    if ( v4 == 1073741822 )\n      goto LABEL_4;\n  }\n  else if ( v4 == 1073741822 )\n  {\nLABEL_4:\n    v5 = a1[12];\n    v2[1].tv_sec = a1[11];\n    v2[1].tv_nsec = v5;\n    return 0LL;\n  }\n  result = 0LL;\n  if ( v4 == 0x3FFFFFFF )\n  {\n    sub_413C70(v2 + 1);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40f2d0L", 
            "funcEndAddr": "0x40f39eL", 
            "funcName": "sub_40F2D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F3A0(_QWORD *a1)\n{\n  unsigned __int64 v1; // r9\n  unsigned __int64 v2; // rdx\n  int v3; // ecx\n  int v4; // er10\n  __int64 result; // rax\n\n  v1 = a1[1];\n  if ( v1 - 1073741822 > 1 && v1 > 0x3B9AC9FF || (v2 = a1[3], v2 - 1073741822 > 1) && v2 > 0x3B9AC9FF )\n  {\n    *__errno_location() = 22;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    v3 = 0;\n    v4 = 0;\n    if ( v1 - 1073741822 <= 1 )\n    {\n      *a1 = 0LL;\n      v4 = 1;\n      v3 = v1 == 1073741822;\n    }\n    if ( v2 - 1073741822 <= 1 )\n    {\n      a1[2] = 0LL;\n      v4 = 1;\n      v3 += v2 == 1073741822;\n    }\n    result = v4 + (unsigned int)(v3 == 1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40f3a0L", 
            "funcEndAddr": "0x40f449L", 
            "funcName": "sub_40F3A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F460(int fd, char *filename, const __m128i *a3)\n{\n  char *v3; // rbp\n  int v4; // ebx\n  __m128i v5; // xmm1\n  int v6; // er13\n  struct timespec *v7; // rsi\n  unsigned int v8; // er12\n  bool v9; // zf\n  char v10; // al\n  __syscall_slong_t v11; // rdi\n  const __m128i *v12; // r13\n  __syscall_slong_t v13; // rsi\n  struct timeval *v14; // rdx\n  struct utimbuf *v15; // rsi\n  __time_t v16; // rax\n  bool v18; // al\n  __time_t v19; // rdx\n  bool v20; // bp\n  bool v21; // r14\n  __time_t v22; // rax\n  __m128i v23; // xmm3\n  bool v24; // dl\n  bool v25; // r14\n  __syscall_slong_t v26; // rax\n  struct timespec *times; // [rsp+8h] [rbp-120h]\n  __m128i v28; // [rsp+10h] [rbp-118h]\n  __m128i v29; // [rsp+20h] [rbp-108h]\n  struct timeval tvp; // [rsp+30h] [rbp-F8h]\n  __time_t v31; // [rsp+40h] [rbp-E8h]\n  __syscall_slong_t v32; // [rsp+48h] [rbp-E0h]\n  struct utimbuf file_times; // [rsp+50h] [rbp-D8h]\n  __m128i v34; // [rsp+60h] [rbp-C8h]\n  struct stat stat_buf; // [rsp+70h] [rbp-B8h]\n\n  v3 = filename;\n  v4 = fd;\n  if ( a3 )\n  {\n    v5 = _mm_loadu_si128(a3 + 1);\n    times = (struct timespec *)&v28;\n    v28 = _mm_loadu_si128(a3);\n    v29 = v5;\n    v6 = sub_40F3A0(&v28);\n    if ( v6 < 0 )\n      return (unsigned int)-1;\n  }\n  else\n  {\n    times = 0LL;\n    v6 = 0;\n  }\n  if ( fd < 0 && !filename )\n  {\n    *__errno_location() = 9;\n    return (unsigned int)-1;\n  }\n  if ( dword_61DAAC < 0 )\n    goto LABEL_11;\n  if ( v6 == 2 )\n  {\n    if ( fd < 0 )\n      v18 = __xstat(1, filename, &stat_buf) != 0;\n    else\n      v18 = __fxstat(1, fd, &stat_buf) != 0;\n    if ( v18 )\n      return (unsigned int)-1;\n    v7 = times;\n    if ( times->tv_nsec == 1073741822 )\n    {\n      v26 = stat_buf.st_atim.tv_nsec;\n      v6 = 3;\n      times->tv_sec = stat_buf.st_atim.tv_sec;\n      v7->tv_nsec = v26;\n    }\n    else\n    {\n      v6 = 3;\n      if ( times[1].tv_nsec == 1073741822 )\n      {\n        v19 = stat_buf.st_mtim.tv_sec;\n        times[1].tv_nsec = stat_buf.st_mtim.tv_nsec;\n        v7[1].tv_sec = v19;\n      }\n    }\n  }\n  else\n  {\n    v7 = times;\n  }\n  if ( fd < 0 )\n  {\n    v8 = utimensat(-100, v3, v7, 0);\n    v9 = v8 == 0;\n    if ( (int)v8 > 0 )\n      goto LABEL_10;\n  }\n  else\n  {\n    v8 = futimens(fd, v7);\n    v9 = v8 == 0;\n    if ( (int)v8 > 0 )\n    {\nLABEL_10:\n      *__errno_location() = 38;\n      goto LABEL_11;\n    }\n  }\n  if ( v9 || *__errno_location() != 38 )\n  {\n    dword_61DAAC = 1;\n    return v8;\n  }\nLABEL_11:\n  dword_61DAAC = -1;\n  dword_61DAA8 = -1;\n  if ( !v6 )\n    goto LABEL_18;\n  if ( v6 != 3 )\n  {\n    v10 = fd < 0 ? __xstat(1, v3, &stat_buf) != 0 : __fxstat(1, fd, &stat_buf) != 0;\n    if ( v10 )\n      return (unsigned int)-1;\n  }\n  if ( !times )\n    goto LABEL_26;\n  v8 = 0;\n  if ( (unsigned __int8)sub_40F2D0(&stat_buf, &times) )\n    return v8;\nLABEL_18:\n  if ( times )\n  {\n    v11 = times->tv_nsec;\n    v12 = (const __m128i *)&tvp;\n    tvp.tv_sec = times->tv_sec;\n    v13 = times[1].tv_nsec;\n    v31 = times[1].tv_sec;\n    tvp.tv_usec = v11 / 1000;\n    v14 = &tvp;\n    v32 = v13 / 1000;\n    if ( v4 >= 0 )\n      goto LABEL_20;\n    return (unsigned int)futimesat(-100, v3, v14);\n  }\nLABEL_26:\n  v12 = 0LL;\n  v14 = 0LL;\n  if ( fd < 0 )\n    return (unsigned int)futimesat(-100, v3, v14);\nLABEL_20:\n  v8 = futimesat(v4, 0LL, v14);\n  if ( !v8 )\n  {\n    if ( !v12 )\n      return v8;\n    v20 = v12->m128i_i64[1] > 499999;\n    v21 = v12[1].m128i_i64[1] > 499999;\n    if ( v12->m128i_i64[1] <= 499999 && !v21 )\n      return v8;\n    if ( __fxstat(1, v4, &stat_buf) )\n      return v8;\n    v22 = stat_buf.st_atim.tv_sec - v12->m128i_i64[0];\n    v23 = _mm_load_si128(v12 + 1);\n    v24 = stat_buf.st_mtim.tv_sec - v12[1].m128i_i64[0] == 1;\n    file_times = (struct utimbuf)_mm_load_si128(v12);\n    v34 = v23;\n    v25 = v24 && v21;\n    if ( v22 != 1 || !v20 || stat_buf.st_atim.tv_nsec )\n    {\n      if ( !v25 || stat_buf.st_mtim.tv_nsec )\n        return 0;\n    }\n    else\n    {\n      file_times.modtime = 0LL;\n      if ( !v25 || stat_buf.st_mtim.tv_nsec )\n        goto LABEL_48;\n    }\n    v34.m128i_i64[1] = 0LL;\nLABEL_48:\n    futimesat(v4, 0LL, (const struct timeval *)&file_times);\n    return 0;\n  }\n  v8 = -1;\n  if ( v3 )\n  {\n    v15 = 0LL;\n    if ( times )\n    {\n      v16 = times[1].tv_sec;\n      v15 = &file_times;\n      file_times.actime = times->tv_sec;\n      file_times.modtime = v16;\n    }\n    v8 = utime(v3, v15);\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x40f460L", 
            "funcEndAddr": "0x40f89eL", 
            "funcName": "sub_40F460"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F8A0(char *filename, const __m128i *a2)\n{\n  return sub_40F460(-1, filename, a2);\n}\n", 
            "funcStartAddr": "0x40f8a0L", 
            "funcEndAddr": "0x40f8b0L", 
            "funcName": "sub_40F8A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F8B0(char *filename, const __m128i *a2)\n{\n  __m128i v2; // xmm1\n  int v3; // ebx\n  struct timespec *v4; // rdx\n  int v5; // eax\n  unsigned int v6; // ebp\n  unsigned int v7; // ebp\n  __int64 result; // rax\n  __time_t v9; // rcx\n  __syscall_slong_t v10; // rax\n  struct timespec *times; // [rsp+8h] [rbp-D0h]\n  __m128i v12; // [rsp+10h] [rbp-C8h]\n  __m128i v13; // [rsp+20h] [rbp-B8h]\n  struct stat stat_buf; // [rsp+30h] [rbp-A8h]\n\n  if ( a2 )\n  {\n    v2 = _mm_loadu_si128(a2 + 1);\n    times = (struct timespec *)&v12;\n    v12 = _mm_loadu_si128(a2);\n    v13 = v2;\n    v3 = sub_40F3A0(&v12);\n    if ( v3 < 0 )\n      return (unsigned int)-1;\n    if ( dword_61DAA8 < 0 )\n      goto LABEL_8;\n    if ( v3 == 2 )\n    {\n      if ( __lxstat(1, filename, &stat_buf) )\n        return (unsigned int)-1;\n      v4 = times;\n      if ( times->tv_nsec == 1073741822 )\n      {\n        v10 = stat_buf.st_atim.tv_nsec;\n        v3 = 3;\n        times->tv_sec = stat_buf.st_atim.tv_sec;\n        v4->tv_nsec = v10;\n      }\n      else\n      {\n        v3 = 3;\n        if ( times[1].tv_nsec == 1073741822 )\n        {\n          v9 = stat_buf.st_mtim.tv_sec;\n          times[1].tv_nsec = stat_buf.st_mtim.tv_nsec;\n          v4[1].tv_sec = v9;\n        }\n      }\n    }\n    else\n    {\n      v4 = times;\n    }\n  }\n  else\n  {\n    v4 = 0LL;\n    v3 = 0;\n    times = 0LL;\n    if ( dword_61DAA8 < 0 )\n    {\n      dword_61DAA8 = -1;\n      goto LABEL_17;\n    }\n  }\n  v5 = utimensat(-100, filename, v4, 256);\n  v6 = v5;\n  if ( v5 > 0 )\n  {\n    *__errno_location() = 38;\n    goto LABEL_8;\n  }\n  if ( v5 && *__errno_location() == 38 )\n  {\nLABEL_8:\n    dword_61DAA8 = -1;\n    if ( v3 )\n    {\n      if ( v3 == 3 )\n      {\n        if ( !times )\n        {\nLABEL_12:\n          if ( (stat_buf.st_mode & 0xF000) != 40960 )\n            return (unsigned int)sub_40F460(-1, filename, (const __m128i *)times);\n          *__errno_location() = 38;\n          return (unsigned int)-1;\n        }\n      }\n      else\n      {\n        if ( __lxstat(1, filename, &stat_buf) )\n          return (unsigned int)-1;\n        if ( !times )\n          goto LABEL_12;\n      }\n      v7 = 0;\n      if ( (unsigned __int8)sub_40F2D0(&stat_buf, &times) )\n        return v7;\n      goto LABEL_12;\n    }\nLABEL_17:\n    if ( __lxstat(1, filename, &stat_buf) )\n      return (unsigned int)-1;\n    goto LABEL_12;\n  }\n  dword_61DAAC = 1;\n  result = v6;\n  dword_61DAA8 = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x40f8b0L", 
            "funcEndAddr": "0x40faf8L", 
            "funcName": "sub_40F8B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FB00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_40FB00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402dadL", 
            "funcEndAddr": "0x402db2L", 
            "funcName": "sub_40FB00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FB00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_40FB00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402dadL", 
            "funcEndAddr": "0x402db2L", 
            "funcName": "sub_40FB00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FF00(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_40FB00(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_40FB00(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x40ff00L", 
            "funcEndAddr": "0x40ff60L", 
            "funcName": "sub_40FF00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FF60(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_40FB00(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_40FB00(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x40ff60L", 
            "funcEndAddr": "0x41001cL", 
            "funcName": "sub_40FF60"
        }, 
        {
            "decompiledFuncCode": "int sub_410020()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  __int64 v2; // r8\n  char *v3; // rax\n  __int64 v4; // r8\n  FILE *v5; // rbx\n  char *v6; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1, v2);\n  v3 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v3, &unk_41525C, \"https://www.gnu.org/software/coreutils/\", v4);\n  v5 = stdout;\n  v6 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v6, v5);\n}\n", 
            "funcStartAddr": "0x410020L", 
            "funcEndAddr": "0x410094L", 
            "funcName": "sub_410020"
        }, 
        {
            "decompiledFuncCode": "char sub_4100A0()\n{\n  char result; // al\n  __uid_t v1; // eax\n\n  if ( byte_61DAB1 )\n    return byte_61DAB0;\n  v1 = geteuid();\n  byte_61DAB1 = 1;\n  result = v1 == 0;\n  byte_61DAB0 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4100a0L", 
            "funcEndAddr": "0x4100d8L", 
            "funcName": "sub_4100A0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4100E0(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_410330(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4100e0L", 
            "funcEndAddr": "0x4100faL", 
            "funcName": "sub_4100E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_410140(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_410330(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x410140L", 
            "funcEndAddr": "0x410176L", 
            "funcName": "sub_410140"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4102E0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4100E0(n, n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x4102e0L", 
            "funcEndAddr": "0x410308L", 
            "funcName": "sub_4102E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_410310(void *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)src);\n  return sub_4102E0(src, v1 + 1);\n}\n", 
            "funcStartAddr": "0x410310L", 
            "funcEndAddr": "0x410323L", 
            "funcName": "sub_410310"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_410330()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x410330L", 
            "funcEndAddr": "0x410361L", 
            "funcName": "sub_410330"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410370(__int64 a1, int a2)\n{\n  __int64 result; // rax\n\n  result = fts_open(a1, a2 | 0x200u);\n  if ( !result )\n  {\n    if ( *__errno_location() != 22 )\n      sub_410330();\n    __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 0x29u, \"xfts_open\");\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x410370L", 
            "funcEndAddr": "0x4103b9L", 
            "funcName": "sub_410370"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4103F0()\n{\n  unsigned int v0; // ebx\n  __ssize_t v1; // rax\n  char *v2; // rdi\n  char *v3; // rax\n  char *response; // [rsp+0h] [rbp-18h]\n  size_t n; // [rsp+8h] [rbp-10h]\n\n  v0 = 0;\n  response = 0LL;\n  n = 0LL;\n  v1 = __getdelim(&response, &n, 10, stdin);\n  if ( v1 > 0 )\n  {\n    v2 = response;\n    v3 = &response[v1 - 1];\n    if ( *v3 == 10 )\n    {\n      *v3 = 0;\n      v2 = response;\n    }\n    LOBYTE(v0) = rpmatch(v2) > 0;\n  }\n  free(response);\n  return v0;\n}\n", 
            "funcStartAddr": "0x4103f0L", 
            "funcEndAddr": "0x410459L", 
            "funcName": "sub_4103F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410460(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_61DAB4 < 0 )\n    {\n      v3 = sub_410460(a1);\n      if ( v3 >= 0 && dword_61DAB4 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_61DAB4 = 1;\n      }\n      else\n      {\n        v3 = sub_410460(a1);\n        if ( v3 >= 0 )\n        {\n          dword_61DAB4 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x410460L", 
            "funcEndAddr": "0x410595L", 
            "funcName": "sub_410460"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4105A0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_410610(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x4105a0L", 
            "funcEndAddr": "0x4105e0L", 
            "funcName": "sub_4105A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4105E0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_QWORD *)(a1 + 40) <= *(_QWORD *)(a1 + 32) )\n  {\n    result = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);\n    if ( *(_DWORD *)a1 & 0x100 )\n      result += *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4105e0L", 
            "funcEndAddr": "0x410608L", 
            "funcName": "sub_4105E0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_410610(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x410610L", 
            "funcEndAddr": "0x410667L", 
            "funcName": "sub_410610"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_410670(_QWORD *a1, _QWORD *a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( a1[1] == a2[1] )\n    result = *a1 == *a2;\n  return result;\n}\n", 
            "funcStartAddr": "0x410670L", 
            "funcEndAddr": "0x41068aL", 
            "funcName": "sub_410670"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_410690(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n", 
            "funcStartAddr": "0x410690L", 
            "funcEndAddr": "0x41069dL", 
            "funcName": "sub_410690"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4106A0(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n", 
            "funcStartAddr": "0x4106a0L", 
            "funcEndAddr": "0x4106acL", 
            "funcName": "sub_4106A0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4106B0(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n", 
            "funcStartAddr": "0x4106b0L", 
            "funcEndAddr": "0x4106baL", 
            "funcName": "sub_4106B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4106C0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // rdx\n\n  result = 0xFFFFFFFFLL;\n  v3 = *(_QWORD *)(*(_QWORD *)a2 + 128LL);\n  if ( *(_QWORD *)(*(_QWORD *)a1 + 128LL) >= v3 )\n    result = *(_QWORD *)(*(_QWORD *)a1 + 128LL) > v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x4106c0L", 
            "funcEndAddr": "0x4106e2L", 
            "funcName": "sub_4106C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4106F0(__int64 a1, __int64 a2, char a3)\n{\n  struct stat *v3; // rbp\n  __int64 v4; // rbx\n  int v5; // eax\n  bool v6; // zf\n  const char *v7; // rsi\n  int *v8; // rax\n  int *v9; // r12\n  int v10; // eax\n  __int64 result; // rax\n  int v12; // eax\n  unsigned __int64 v13; // rax\n\n  v3 = (struct stat *)(a2 + 120);\n  v4 = a2;\n  v5 = *(_DWORD *)(a1 + 72);\n  v6 = *(_QWORD *)(a2 + 88) == 0LL;\n  v7 = *(const char **)(a2 + 48);\n  if ( v6 && v5 & 1 || v5 & 2 || a3 )\n  {\n    if ( !__xstat(1, v7, v3) )\n      goto LABEL_10;\n    v8 = __errno_location();\n    v9 = v8;\n    v10 = *v8;\n    if ( v10 == 2 )\n    {\n      if ( !__lxstat(1, *(const char **)(v4 + 48), v3) )\n      {\n        *v9 = 0;\n        return 13LL;\n      }\n      v10 = *v9;\n    }\nLABEL_15:\n    *(_DWORD *)(v4 + 64) = v10;\n    *(_QWORD *)(v4 + 120) = 0LL;\n    v3->__unused[2] = 0LL;\n    memset(\n      (void *)((unsigned __int64)&v3->st_ino & 0xFFFFFFFFFFFFFFF8LL),\n      0,\n      8LL * (((unsigned int)v3 - (((_DWORD)v3 + 8) & 0xFFFFFFF8) + 144) >> 3));\n    return 10LL;\n  }\n  if ( __fxstatat(1, *(_DWORD *)(a1 + 44), v7, v3, 256) )\n  {\n    v10 = *__errno_location();\n    goto LABEL_15;\n  }\nLABEL_10:\n  v12 = *(_DWORD *)(v4 + 144) & 0xF000;\n  if ( v12 == 0x4000 )\n  {\n    v13 = *(_QWORD *)(v4 + 136);\n    if ( v13 <= 1 || *(_QWORD *)(v4 + 88) <= 0LL )\n    {\n      v13 = -1LL;\n    }\n    else if ( !(*(_BYTE *)(a1 + 72) & 0x20) )\n    {\n      v13 -= 2LL;\n    }\n    v6 = *(_BYTE *)(v4 + 264) == 46;\n    *(_QWORD *)(v4 + 104) = v13;\n    result = 1LL;\n    if ( v6 && (!*(_BYTE *)(v4 + 265) || (*(_DWORD *)(v4 + 264) & 0xFFFF00) == 11776) )\n      result = *(_QWORD *)(v4 + 88) < 1uLL ? 1 : 5;\n  }\n  else if ( v12 == 40960 )\n  {\n    result = 12LL;\n  }\n  else\n  {\n    result = 5 * (unsigned int)(v12 == 0x8000) + 3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4106f0L", 
            "funcEndAddr": "0x41089aL", 
            "funcName": "sub_4106F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4108A0(__int64 a1, __int64 a2, size_t a3)\n{\n  size_t v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rbx\n  int (*v6)(const void *, const void *); // r13\n  void *v7; // rdi\n  void *v8; // rax\n  _QWORD *v9; // rdx\n  __int64 *v10; // r8\n  __int64 result; // rax\n  __int64 *v12; // rdx\n  __int64 v13; // rsi\n  __int64 v14; // rcx\n  __int64 v15; // rdi\n  __int64 v16; // rdx\n\n  v3 = a3;\n  v4 = a1;\n  v5 = a2;\n  v6 = *(int (**)(const void *, const void *))(a1 + 64);\n  v7 = *(void **)(a1 + 16);\n  if ( *(_QWORD *)(v4 + 56) >= a3 )\n    goto LABEL_5;\n  *(_QWORD *)(v4 + 56) = a3 + 40;\n  if ( a3 + 40 > 0x1FFFFFFFFFFFFFFFLL )\n  {\nLABEL_14:\n    free(v7);\n    *(_QWORD *)(v4 + 16) = 0LL;\n    result = a2;\n    *(_QWORD *)(v4 + 56) = 0LL;\n    return result;\n  }\n  v8 = realloc(v7, 8 * (a3 + 40));\n  v7 = v8;\n  if ( !v8 )\n  {\n    v7 = *(void **)(v4 + 16);\n    goto LABEL_14;\n  }\n  *(_QWORD *)(v4 + 16) = v8;\nLABEL_5:\n  v9 = v7;\n  if ( a2 )\n  {\n    do\n    {\n      ++v9;\n      *(v9 - 1) = v5;\n      v5 = *(_QWORD *)(v5 + 16);\n    }\n    while ( v5 );\n  }\n  qsort(v7, v3, 8uLL, v6);\n  v10 = *(__int64 **)(v4 + 16);\n  result = *v10;\n  v12 = *(__int64 **)(v4 + 16);\n  v13 = *v10;\n  v14 = v3 - 1;\n  if ( v3 == 1 )\n  {\n    v16 = *v10;\n  }\n  else\n  {\n    while ( 1 )\n    {\n      v15 = v12[1];\n      ++v12;\n      *(_QWORD *)(v13 + 16) = v15;\n      if ( !--v14 )\n        break;\n      v13 = *v12;\n    }\n    v16 = v10[v3 - 1];\n  }\n  *(_QWORD *)(v16 + 16) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4108a0L", 
            "funcEndAddr": "0x41099dL", 
            "funcName": "sub_4108A0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4109A0(__int64 a1, const void *a2, size_t a3)\n{\n  size_t v3; // rbp\n  char *v4; // rax\n  char *v5; // rbx\n  __int64 v6; // rax\n\n  v3 = a3;\n  v4 = (char *)malloc((a3 + 272) & 0xFFFFFFFFFFFFFFF8LL);\n  v5 = v4;\n  if ( v4 )\n  {\n    memcpy(v4 + 264, a2, v3);\n    v6 = *(_QWORD *)(a1 + 32);\n    v5[v3 + 264] = 0;\n    *((_QWORD *)v5 + 12) = v3;\n    *((_QWORD *)v5 + 10) = a1;\n    *((_QWORD *)v5 + 7) = v6;\n    *((_DWORD *)v5 + 16) = 0;\n    *((_QWORD *)v5 + 3) = 0LL;\n    *(_DWORD *)(v5 + 114) = 196608;\n    *((_QWORD *)v5 + 4) = 0LL;\n    *((_QWORD *)v5 + 5) = 0LL;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x4109a0L", 
            "funcEndAddr": "0x410a2aL", 
            "funcName": "sub_4109A0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_410A30(void *ptr)\n{\n  void *v1; // rbx\n  DIR *v2; // rdi\n  void *v3; // rbp\n  void *v4; // rdi\n\n  if ( ptr )\n  {\n    v1 = ptr;\n    do\n    {\n      v2 = (DIR *)*((_QWORD *)v1 + 3);\n      v3 = (void *)*((_QWORD *)v1 + 2);\n      if ( v2 )\n        closedir(v2);\n      v4 = v1;\n      v1 = v3;\n      free(v4);\n    }\n    while ( v3 );\n  }\n}\n", 
            "funcStartAddr": "0x410a30L", 
            "funcEndAddr": "0x410a71L", 
            "funcName": "sub_410A30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410A80(__int64 a1)\n{\n  int v1; // eax\n  __int64 result; // rax\n\n  while ( 1 )\n  {\n    result = sub_413D70(a1);\n    if ( (_BYTE)result )\n      break;\n    v1 = sub_413DC0(a1);\n    if ( v1 >= 0 )\n      close(v1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x410a80L", 
            "funcEndAddr": "0x410ab9L", 
            "funcName": "sub_410A80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410AC0(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD **)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40B8C0(\n           0xDuLL,\n           0LL,\n           (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_4106A0,\n           (bool (__fastcall *)(__int64, __int64))sub_4106B0,\n           (__int64)free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40B650((__int64)v2, (__int64)&v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40C060((__int64)v2, (__int64)v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n\n__int64 __fastcall sub_410AC0(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD **)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40B8C0(\n           0xDuLL,\n           0LL,\n           (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_4106A0,\n           (bool (__fastcall *)(__int64, __int64))sub_4106B0,\n           (__int64)free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40B650((__int64)v2, (__int64)&v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40C060((__int64)v2, (__int64)v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402db2L", 
            "funcEndAddr": "0x402db7L", 
            "funcName": "sub_410AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410AC0(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD **)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40B8C0(\n           0xDuLL,\n           0LL,\n           (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_4106A0,\n           (bool (__fastcall *)(__int64, __int64))sub_4106B0,\n           (__int64)free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40B650((__int64)v2, (__int64)&v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40C060((__int64)v2, (__int64)v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n\n__int64 __fastcall sub_410AC0(__int64 a1)\n{\n  __int64 v1; // rbx\n  _QWORD *v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD **)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40B8C0(\n           0xDuLL,\n           0LL,\n           (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_4106A0,\n           (bool (__fastcall *)(__int64, __int64))sub_4106B0,\n           (__int64)free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40B650((__int64)v2, (__int64)&v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40C060((__int64)v2, (__int64)v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402db2L", 
            "funcEndAddr": "0x402db7L", 
            "funcName": "sub_410AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410BE0(__int64 a1)\n{\n  __int64 v1; // rax\n  unsigned int v2; // edx\n\n  v1 = sub_410AC0(a1);\n  if ( v1 == 40864 )\n    return 0;\n  if ( v1 > 40864 )\n  {\n    if ( v1 != 1397113167 )\n    {\n      v2 = 2;\n      if ( v1 != 1481003842 )\n        v2 = (v1 == 1382369651) + 1;\n      return v2;\n    }\n    return 0;\n  }\n  v2 = 0;\n  if ( !v1 )\n    return v2;\n  return v1 != 26985;\n}\n", 
            "funcStartAddr": "0x410be0L", 
            "funcEndAddr": "0x410c44L", 
            "funcName": "sub_410BE0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_410C50(__int64 a1, int a2, char a3)\n{\n  int v3; // ebp\n  int v4; // esi\n  int v5; // eax\n\n  v3 = a2;\n  v4 = *(_DWORD *)(a1 + 44);\n  if ( v4 == v3 && v4 != -100 )\n    abort();\n  if ( a3 )\n  {\n    v5 = sub_413D80(a1 + 96);\n    if ( v5 < 0 )\n    {\nLABEL_6:\n      *(_DWORD *)(a1 + 44) = v3;\n      return;\n    }\n    close(v5);\n    *(_DWORD *)(a1 + 44) = v3;\n  }\n  else\n  {\n    if ( *(_BYTE *)(a1 + 72) & 4 || v4 < 0 )\n      goto LABEL_6;\n    close(v4);\n    *(_DWORD *)(a1 + 44) = v3;\n  }\n}\n", 
            "funcStartAddr": "0x410c50L", 
            "funcEndAddr": "0x410cb6L", 
            "funcName": "sub_410C50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410CC0(__int64 a1)\n{\n  int v1; // edx\n  unsigned int v2; // ebp\n\n  v2 = *(_DWORD *)(a1 + 72) & 4;\n  if ( v2 )\n  {\n    v2 = 0;\n  }\n  else\n  {\n    v1 = *(_DWORD *)(a1 + 72);\n    if ( v1 & 0x200 )\n      sub_410C50(a1, -100, 1);\n    else\n      v2 = fchdir(*(_DWORD *)(a1 + 40)) != 0;\n  }\n  sub_410A80(a1 + 96);\n  return v2;\n}\n", 
            "funcStartAddr": "0x410cc0L", 
            "funcEndAddr": "0x410d1aL", 
            "funcName": "sub_410CC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410D20(void **a1, size_t *a2, __int64 a3)\n{\n  void **v3; // rbx\n  void *v4; // rdi\n  size_t v5; // rax\n  void *v6; // rax\n  __int64 result; // rax\n\n  v3 = a1;\n  v4 = *a1;\n  v5 = *a2 + a3 + 256;\n  if ( *a2 > v5 )\n  {\n    free(v4);\n    *v3 = 0LL;\n    *__errno_location() = 36;\n    result = 0LL;\n  }\n  else\n  {\n    *a2 = v5;\n    v6 = realloc(v4, v5);\n    if ( v6 )\n    {\n      *v3 = v6;\n      result = 1LL;\n    }\n    else\n    {\n      free(*v3);\n      *v3 = 0LL;\n      result = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x410d20L", 
            "funcEndAddr": "0x410d8bL", 
            "funcName": "sub_410D20"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_410D90(__int16 a1, _QWORD *a2)\n{\n  _QWORD *v2; // rax\n  bool result; // al\n  void *v4; // rax\n  void *v5; // rdi\n\n  if ( a1 & 0x102 )\n  {\n    v2 = sub_40B8C0(0x1FuLL, 0LL, sub_410690, (bool (__fastcall *)(__int64, __int64))sub_410670, (__int64)free);\n    *a2 = v2;\n    result = v2 != 0LL;\n  }\n  else\n  {\n    v4 = malloc(0x20uLL);\n    v5 = v4;\n    *a2 = v4;\n    result = 0;\n    if ( v5 )\n    {\n      sub_413BE0();\n      result = 1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x410d90L", 
            "funcEndAddr": "0x410debL", 
            "funcName": "sub_410D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410DF0(char a1, int a2, const char *a3)\n{\n  const char *v3; // rcx\n  int v4; // edx\n\n  v3 = a3;\n  if ( a2 & 0x200 )\n    return sub_414380(a1);\n  v4 = (a2 << 7) & 0x40000 | (a2 << 13) & 0x20000 | 0x90900;\n  return sub_40AB10(v3, v4, v4);\n}\n", 
            "funcStartAddr": "0x410df0L", 
            "funcEndAddr": "0x410e34L", 
            "funcName": "sub_410DF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410E40(__int64 a1, __int64 a2, int a3, const char *a4)\n{\n  int v4; // ebp\n  const char *v5; // rbx\n  int v6; // er12\n  int v7; // edx\n  char v8; // r14\n  int v9; // eax\n  int v10; // er12\n  unsigned int v11; // ebx\n  int *v12; // rax\n  int v13; // er13\n  int *v14; // rbp\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h]\n\n  v4 = a3;\n  v5 = a4;\n  v6 = *(_DWORD *)(a1 + 72);\n  v7 = *(_DWORD *)(a1 + 72) & 4;\n  if ( a4 && !strcmp(a4, \"..\") )\n  {\n    if ( !v7 )\n    {\n      if ( v4 >= 0 )\n      {\n        v10 = v4;\n        v8 = 1;\n        goto LABEL_12;\n      }\n      if ( v6 & 0x200 )\n      {\n        v8 = sub_413D70(a1 + 96);\n        if ( !v8 )\n        {\n          v9 = sub_413DC0(a1 + 96);\n          v10 = v9;\n          if ( v9 >= 0 )\n          {\n            v4 = v9;\n            v8 = 1;\n            goto LABEL_12;\n          }\n          v6 = *(_DWORD *)(a1 + 72);\n          v8 = 1;\n        }\n      }\n      else\n      {\n        v8 = 1;\n      }\nLABEL_24:\n      v10 = sub_410DF0(*(_DWORD *)(a1 + 44), v6, v5);\n      if ( v10 < 0 )\n        return (unsigned int)-1;\nLABEL_12:\n      v11 = __fxstat(1, v10, &stat_buf);\n      if ( !v11 )\n      {\n        if ( *(_QWORD *)(a2 + 120) == stat_buf.st_dev && *(_QWORD *)(a2 + 128) == stat_buf.st_ino )\n        {\n          if ( *(_BYTE *)(a1 + 73) & 2 )\n          {\n            sub_410C50(a1, v10, v8 ^ 1);\n            return v11;\n          }\n          v11 = fchdir(v10);\n          goto LABEL_17;\n        }\n        *__errno_location() = 2;\n      }\n      v11 = -1;\nLABEL_17:\n      if ( v4 < 0 )\n      {\n        v12 = __errno_location();\n        v13 = *v12;\n        v14 = v12;\n        close(v10);\n        *v14 = v13;\n      }\n      return v11;\n    }\n  }\n  else if ( !v7 )\n  {\n    if ( v4 >= 0 )\n    {\n      v10 = v4;\n      v8 = 0;\n      goto LABEL_12;\n    }\n    v8 = 0;\n    goto LABEL_24;\n  }\n  if ( v6 & 0x200 && v4 >= 0 )\n  {\n    v11 = 0;\n    close(v4);\n  }\n  else\n  {\n    v11 = 0;\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x410e40L", 
            "funcEndAddr": "0x411006L", 
            "funcName": "sub_410E40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411010(__int16 a1, __int64 *a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  _QWORD *v4; // rbp\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // r12\n  __int64 v8; // rax\n  __int64 result; // rax\n\n  v3 = a3;\n  if ( a1 & 0x102 )\n  {\n    v4 = malloc(0x18uLL);\n    if ( v4 )\n    {\n      v5 = *(_QWORD *)(v3 + 120);\n      v6 = *a2;\n      v4[2] = v3;\n      *v4 = v5;\n      v4[1] = *(_QWORD *)(v3 + 128);\n      v7 = sub_40C060(v6, (__int64)v4);\n      if ( v4 == (_QWORD *)v7 )\n        return 1LL;\n      free(v4);\n      if ( v7 )\n      {\n        v8 = *(_QWORD *)(v7 + 16);\n        *(_WORD *)(v3 + 112) = 2;\n        *(_QWORD *)v3 = v8;\n        return 1LL;\n      }\n    }\n    result = 0LL;\n  }\n  else\n  {\n    result = sub_413BF0(*a2, a3 + 120);\n    if ( !(_BYTE)result )\n      return 1LL;\n    *(_QWORD *)v3 = v3;\n    *(_WORD *)(v3 + 112) = 2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x411010L", 
            "funcEndAddr": "0x4110bfL", 
            "funcName": "sub_411010"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4110C0(__int16 a1, __int64 *a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  __int64 v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40C0A0(v5, (__int64)&v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = (_QWORD *)*a2;\n  if ( !*(_QWORD *)(*a2 + 16) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n\nvoid __fastcall sub_4110C0(__int16 a1, __int64 *a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  __int64 v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40C0A0(v5, (__int64)&v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = (_QWORD *)*a2;\n  if ( !*(_QWORD *)(*a2 + 16) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n", 
            "funcStartAddr": "0x402db7L", 
            "funcEndAddr": "0x402dbcL", 
            "funcName": "sub_4110C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4110C0(__int16 a1, __int64 *a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  __int64 v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40C0A0(v5, (__int64)&v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = (_QWORD *)*a2;\n  if ( !*(_QWORD *)(*a2 + 16) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n\nvoid __fastcall sub_4110C0(__int16 a1, __int64 *a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  __int64 v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40C0A0(v5, (__int64)&v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = (_QWORD *)*a2;\n  if ( !*(_QWORD *)(*a2 + 16) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n", 
            "funcStartAddr": "0x402db7L", 
            "funcEndAddr": "0x402dbcL", 
            "funcName": "sub_4110C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411160(__int64 *a1, int a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r13\n  DIR *v4; // rdi\n  int v5; // edi\n  _BYTE *v6; // rax\n  size_t v7; // rbp\n  __int64 v8; // rbx\n  DIR *v9; // r15\n  int *v10; // rax\n  int *v11; // r12\n  struct dirent *v12; // rax\n  struct dirent *v13; // r14\n  size_t v14; // r13\n  char *v15; // r15\n  const void *v16; // rsi\n  __int64 v17; // rax\n  int v18; // eax\n  __int64 v19; // rdx\n  __int64 v20; // rax\n  char v21; // al\n  __int64 v22; // rdx\n  _BYTE *v23; // rdx\n  __int64 v24; // r13\n  __int64 v25; // r15\n  _QWORD *v26; // rax\n  __int64 i; // rcx\n  _QWORD *v28; // rdx\n  char *j; // rax\n  char *v30; // rdx\n  char *v31; // rdx\n  int v32; // edi\n  int v33; // eax\n  int v34; // ebx\n  DIR *v35; // rax\n  bool v36; // zf\n  int v37; // edi\n  char v38; // r14\n  bool v39; // r12\n  DIR *v40; // rdi\n  __int16 v41; // bp\n  char *v42; // rcx\n  __int64 v43; // r15\n  int v44; // ebx\n  __int64 v46; // rax\n  char v47; // al\n  DIR *v48; // rdi\n  int *v49; // rax\n  int v50; // er12\n  int *v51; // rbp\n  __int64 v52; // rax\n  __int64 v53; // rax\n  __int16 v54; // ax\n  DIR *dirp; // [rsp+8h] [rbp-90h]\n  __int64 v56; // [rsp+10h] [rbp-88h]\n  char *ptr; // [rsp+18h] [rbp-80h]\n  size_t v58; // [rsp+20h] [rbp-78h]\n  __int64 v59; // [rsp+20h] [rbp-78h]\n  __int64 v60; // [rsp+28h] [rbp-70h]\n  __int64 v61; // [rsp+30h] [rbp-68h]\n  unsigned __int64 v62; // [rsp+38h] [rbp-60h]\n  _BYTE *dest; // [rsp+40h] [rbp-58h]\n  __int64 v64; // [rsp+48h] [rbp-50h]\n  DIR *v65; // [rsp+50h] [rbp-48h]\n  int v66; // [rsp+58h] [rbp-40h]\n  char v67; // [rsp+5Eh] [rbp-3Ah]\n  char v68; // [rsp+5Fh] [rbp-39h]\n\n  v2 = (__int64)a1;\n  v3 = *a1;\n  v66 = a2;\n  v4 = *(DIR **)(*a1 + 24);\n  v65 = v4;\n  if ( v4 )\n  {\n    if ( dirfd(v4) >= 0 )\n    {\n      if ( !*(_QWORD *)(v2 + 64) )\n      {\n        v62 = 100000LL;\n        v5 = *(_DWORD *)(v2 + 72);\n        v68 = 1;\n        goto LABEL_6;\n      }\n      v62 = -1LL;\n      goto LABEL_5;\n    }\n    closedir(*(DIR **)(v3 + 24));\n    *(_QWORD *)(v3 + 24) = 0LL;\n    if ( a2 == 3 )\n      goto LABEL_127;\n    return 0LL;\n  }\n  LOBYTE(v32) = -100;\n  if ( (*(_DWORD *)(v2 + 72) & 0x204) == 512 )\n    v32 = *(_DWORD *)(v2 + 44);\n  v33 = sub_414380(v32);\n  v34 = v33;\n  if ( v33 < 0 )\n  {\nLABEL_114:\n    *(_QWORD *)(v3 + 24) = 0LL;\n    if ( a2 == 3 )\n    {\nLABEL_127:\n      *(_WORD *)(v3 + 112) = 4;\n      *(_DWORD *)(v3 + 64) = *__errno_location();\n    }\n    return 0LL;\n  }\n  v35 = fdopendir(v33);\n  if ( !v35 )\n  {\n    v49 = __errno_location();\n    v50 = *v49;\n    v51 = v49;\n    close(v34);\n    *v51 = v50;\n    goto LABEL_114;\n  }\n  v36 = *(_WORD *)(v3 + 112) == 11;\n  *(_QWORD *)(v3 + 24) = v35;\n  if ( v36 )\n  {\n    *(_WORD *)(v3 + 112) = sub_4106F0(v2, v3, 0);\n  }\n  else\n  {\n    v37 = *(_DWORD *)(v2 + 72);\n    if ( v37 & 0x100 )\n    {\n      sub_4110C0(v37, (__int64 *)(v2 + 88), (_QWORD *)v3);\n      sub_4106F0(v2, v3, 0);\n      if ( !(unsigned __int8)sub_411010(*(_DWORD *)(v2 + 72), (__int64 *)(v2 + 88), v3) )\n      {\n        ptr = 0LL;\n        *__errno_location() = 12;\n        return (__int64)ptr;\n      }\n    }\n  }\n  v62 = *(_QWORD *)(v2 + 64) < 1uLL ? 100000LL : -1LL;\n  if ( a2 == 2 )\n    goto LABEL_117;\n  if ( (*(_DWORD *)(v2 + 72) & 0x38) == 24 && *(_QWORD *)(v3 + 136) == 2LL && (unsigned int)sub_410BE0(v3) )\n  {\n    if ( a2 == 3 )\n    {\n      v38 = 0;\n      v39 = 1;\n      goto LABEL_69;\n    }\nLABEL_117:\n    v68 = 0;\n    v5 = *(_DWORD *)(v2 + 72);\n    goto LABEL_6;\n  }\n  v38 = 1;\n  v39 = a2 == 3;\nLABEL_69:\n  if ( *(_BYTE *)(v2 + 73) & 2 )\n  {\n    v34 = sub_410460(v34, 1030, 3LL);\n    if ( v34 < 0 )\n    {\n      v40 = *(DIR **)(v3 + 24);\n      v41 = *(_WORD *)(v3 + 114) | 1;\n      if ( !v39 || !v38 )\n      {\n        *(_WORD *)(v3 + 114) |= 1u;\n        closedir(v40);\n        v5 = *(_DWORD *)(v2 + 72);\nLABEL_77:\n        *(_QWORD *)(v3 + 24) = 0LL;\n        v68 = 0;\n        goto LABEL_6;\n      }\n      goto LABEL_73;\n    }\n  }\n  if ( (unsigned int)sub_410E40(v2, v3, v34, 0LL) )\n  {\n    v40 = *(DIR **)(v3 + 24);\n    v41 = *(_WORD *)(v3 + 114) | 1;\n    if ( !v39 || !v38 )\n    {\nLABEL_74:\n      *(_WORD *)(v3 + 114) = v41;\n      closedir(v40);\n      v5 = *(_DWORD *)(v2 + 72);\n      *(_QWORD *)(v3 + 24) = 0LL;\n      if ( v5 & 0x200 && v34 >= 0 )\n      {\n        close(v34);\n        v5 = *(_DWORD *)(v2 + 72);\n      }\n      goto LABEL_77;\n    }\nLABEL_73:\n    *(_DWORD *)(v3 + 64) = *__errno_location();\n    goto LABEL_74;\n  }\nLABEL_5:\n  v68 = 1;\n  v5 = *(_DWORD *)(v2 + 72);\nLABEL_6:\n  v56 = *(_QWORD *)(v3 + 72);\n  v64 = v56 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v3 + 56) + v56 - 1) != 47 )\n  {\n    v64 = *(_QWORD *)(v3 + 72);\n    ++v56;\n  }\n  dest = 0LL;\n  if ( v5 & 4 )\n  {\n    v6 = (_BYTE *)(*(_QWORD *)(v2 + 32) + v64);\n    *v6 = 47;\n    dest = v6 + 1;\n  }\n  v67 = 0;\n  v7 = 0LL;\n  v58 = *(_QWORD *)(v2 + 48) - v56;\n  v8 = v2;\n  dirp = 0LL;\n  v60 = v3;\n  v61 = *(_QWORD *)(v3 + 88) + 1LL;\n  ptr = 0LL;\n  while ( 1 )\n  {\n    v9 = *(DIR **)(v60 + 24);\n    if ( !v9 )\n    {\n      v24 = v60;\n      v25 = v8;\n      goto LABEL_86;\n    }\n    v10 = __errno_location();\n    *v10 = 0;\n    v11 = v10;\n    v12 = readdir(v9);\n    v13 = v12;\n    if ( !v12 )\n      break;\n    if ( *(_BYTE *)(v8 + 72) & 0x20 || v12->d_name[0] != 46 || v12->d_name[1] && *(_WORD *)&v12->d_name[1] != 46 )\n    {\n      v14 = strlen(v12->d_name);\n      v15 = sub_4109A0(v8, v13->d_name, v14);\n      if ( !v15 )\n        goto LABEL_79;\n      if ( v58 <= v14 )\n      {\n        v59 = *(_QWORD *)(v8 + 32);\n        v21 = sub_410D20((void **)(v8 + 32), (size_t *)(v8 + 48), v64 + v14 + 2);\n        if ( !v21 )\n        {\nLABEL_79:\n          v42 = v15;\n          v43 = v8;\n          v44 = *v11;\n          free(v42);\n          sub_410A30(ptr);\n          closedir(*(DIR **)(v60 + 24));\n          *(_QWORD *)(v60 + 24) = 0LL;\n          *(_WORD *)(v60 + 112) = 7;\n          ptr = 0LL;\n          *(_DWORD *)(v43 + 72) |= 0x4000u;\n          *v11 = v44;\n          return (__int64)ptr;\n        }\n        v22 = *(_QWORD *)(v8 + 32);\n        if ( v22 == v59 )\n        {\n          v21 = v67;\n        }\n        else\n        {\n          v23 = (_BYTE *)(v56 + v22);\n          if ( !(*(_BYTE *)(v8 + 72) & 4) )\n            v23 = dest;\n          dest = v23;\n        }\n        v67 = v21;\n        v58 = *(_QWORD *)(v8 + 48) - v56;\n      }\n      if ( __CFADD__(v56, v14) )\n      {\n        free(v15);\n        sub_410A30(ptr);\n        closedir(*(DIR **)(v60 + 24));\n        *(_QWORD *)(v60 + 24) = 0LL;\n        *(_WORD *)(v60 + 112) = 7;\n        ptr = 0LL;\n        *(_DWORD *)(v8 + 72) |= 0x4000u;\n        *v11 = 36;\n        return (__int64)ptr;\n      }\n      v16 = v15 + 264;\n      *((_QWORD *)v15 + 11) = v61;\n      v17 = *(_QWORD *)v8;\n      *((_QWORD *)v15 + 9) = v56 + v14;\n      *((_QWORD *)v15 + 1) = v17;\n      *((_QWORD *)v15 + 16) = v13->d_ino;\n      v18 = *(_DWORD *)(v8 + 72);\n      if ( v18 & 4 )\n      {\n        *((_QWORD *)v15 + 6) = *((_QWORD *)v15 + 7);\n        memmove(dest, v16, *((_QWORD *)v15 + 12) + 1LL);\n        v18 = *(_DWORD *)(v8 + 72);\n      }\n      else\n      {\n        *((_QWORD *)v15 + 6) = v16;\n      }\n      if ( *(_QWORD *)(v8 + 64) && !(v18 & 0x400) )\n      {\n        *((_WORD *)v15 + 56) = sub_4106F0(v8, (__int64)v15, 0);\n      }\n      else\n      {\n        v19 = (unsigned int)v13->d_type - 1;\n        if ( (v18 & 0x18) == 24 && v13->d_type & 0xFB )\n        {\n          *((_WORD *)v15 + 56) = 11;\n          if ( (unsigned int)v19 <= 0xB )\n            *((_DWORD *)v15 + 36) = dword_418180[v19];\n          else\n            *((_DWORD *)v15 + 36) = 0;\n          v20 = 1LL;\n        }\n        else\n        {\n          *((_WORD *)v15 + 56) = 11;\n          if ( (unsigned int)v19 > 0xB )\n            *((_DWORD *)v15 + 36) = 0;\n          else\n            *((_DWORD *)v15 + 36) = dword_418180[v19];\n          v20 = 2LL;\n        }\n        *((_QWORD *)v15 + 21) = v20;\n      }\n      *((_QWORD *)v15 + 2) = 0LL;\n      if ( ptr )\n      {\n        ++v7;\n        *((_QWORD *)dirp + 2) = v15;\n        if ( v7 >= v62 )\n          goto LABEL_39;\n      }\n      else\n      {\n        ptr = v15;\n        if ( ++v7 >= v62 )\n        {\nLABEL_39:\n          v24 = v60;\n          v25 = v8;\n          if ( !v67 )\n            goto LABEL_87;\n          goto LABEL_40;\n        }\n      }\n    }\n    else\n    {\n      v15 = (char *)dirp;\n    }\n    dirp = (DIR *)v15;\n  }\n  v24 = v60;\n  v25 = v8;\n  if ( *v11 )\n  {\n    *(_DWORD *)(v60 + 64) = *v11;\n    *(_WORD *)(v60 + 112) = (v7 | (unsigned __int64)v65) < 1 ? 4 : 7;\n  }\n  v48 = *(DIR **)(v60 + 24);\n  if ( v48 )\n  {\n    closedir(v48);\n    *(_QWORD *)(v60 + 24) = 0LL;\n  }\nLABEL_86:\n  if ( !v67 )\n    goto LABEL_87;\nLABEL_40:\n  v26 = *(_QWORD **)(v25 + 8);\n  for ( i = *(_QWORD *)(v25 + 32); v26; v26 = (_QWORD *)v26[2] )\n  {\n    v28 = (_QWORD *)v26[6];\n    if ( v28 != v26 + 33 )\n      v26[6] = (char *)v28 + i - v26[7];\n    v26[7] = i;\n  }\n  for ( j = ptr; *((_QWORD *)j + 11) >= 0LL; j = v31 )\n  {\n    v30 = (char *)*((_QWORD *)j + 6);\n    if ( v30 != j + 264 )\n      *((_QWORD *)j + 6) = &v30[i - *((_QWORD *)j + 7)];\n    v31 = (char *)*((_QWORD *)j + 2);\n    *((_QWORD *)j + 7) = i;\n    if ( !v31 )\n      v31 = (char *)*((_QWORD *)j + 1);\n  }\nLABEL_87:\n  if ( *(_BYTE *)(v25 + 72) & 4 )\n  {\n    if ( *(_QWORD *)(v25 + 48) == v56 || !v7 )\n      --dest;\n    *dest = 0;\n  }\n  if ( v65 || !v68 )\n    goto LABEL_138;\n  if ( v66 != 1 && v7 )\n    goto LABEL_96;\n  v47 = *(_QWORD *)(v24 + 88) ? (unsigned int)sub_410E40(v25, *(_QWORD *)(v24 + 8), -1, \"..\") != 0 : (unsigned int)sub_410CC0(v25) != 0;\n  if ( !v47 )\n  {\nLABEL_138:\n    if ( !v7 )\n    {\n      if ( v66 == 3 )\n      {\n        v54 = *(_WORD *)(v24 + 112);\n        if ( v54 != 4 && v54 != 7 )\n          *(_WORD *)(v24 + 112) = 6;\n      }\n      sub_410A30(ptr);\n      return 0LL;\n    }\nLABEL_96:\n    v46 = *(_QWORD *)(v25 + 64);\n    if ( v7 > 0x2710 )\n    {\n      if ( v46 )\n        return sub_4108A0(v25, (__int64)ptr, v7);\n      v52 = sub_410AC0(v24);\n      if ( v52 != 26985 && v52 != 16914836 )\n      {\n        *(_QWORD *)(v25 + 64) = sub_4106C0;\n        v53 = sub_4108A0(v25, (__int64)ptr, v7);\n        *(_QWORD *)(v25 + 64) = 0LL;\n        return v53;\n      }\n      v46 = *(_QWORD *)(v25 + 64);\n    }\n    if ( !v46 || v7 == 1 )\n      return (__int64)ptr;\n    return sub_4108A0(v25, (__int64)ptr, v7);\n  }\n  *(_WORD *)(v24 + 112) = 7;\n  *(_DWORD *)(v25 + 72) |= 0x4000u;\n  sub_410A30(ptr);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x411160L", 
            "funcEndAddr": "0x411b13L", 
            "funcName": "sub_411160"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_open(const char **a1, unsigned int a2, __int64 a3)\n{\n  const char **v3; // r13\n  __int64 v4; // r14\n  _QWORD *v5; // rax\n  __int64 v6; // rbx\n  const char *v7; // rdi\n  const char **v8; // r15\n  size_t v9; // r12\n  size_t v10; // rax\n  __int64 v11; // rdx\n  const char *v12; // r15\n  char *v13; // rcx\n  void *v14; // r12\n  size_t v15; // rbp\n  char *v16; // rax\n  char *v17; // r15\n  size_t v18; // rax\n  char *v19; // rax\n  int v20; // edi\n  int v21; // esi\n  void *v23; // rdi\n  unsigned int v24; // eax\n  __int64 v25; // rax\n  int v26; // eax\n  char *ptr; // [rsp+8h] [rbp-50h]\n  char v28; // [rsp+16h] [rbp-42h]\n  _BYTE v29[9]; // [rsp+17h] [rbp-41h]\n\n  if ( a2 & 0xFFFFE000 || (a2 & 0x204) == 516 || !(a2 & 0x12) )\n  {\n    v6 = 0LL;\n    *__errno_location() = 22;\n    return v6;\n  }\n  v3 = a1;\n  v4 = a3;\n  v5 = calloc(0x80uLL, 1uLL);\n  v6 = (__int64)v5;\n  if ( v5 )\n  {\n    v5[8] = v4;\n    if ( a2 & 2 )\n    {\n      v24 = a2;\n      BYTE1(v24) &= 0xFDu;\n      *(_DWORD *)(v6 + 72) = v24 | 4;\n    }\n    else\n    {\n      *((_DWORD *)v5 + 18) = a2;\n    }\n    v7 = *a1;\n    *(_DWORD *)(v6 + 44) = -100;\n    if ( v7 )\n    {\n      v8 = v3;\n      v9 = 0LL;\n      do\n      {\n        v10 = strlen(v7);\n        if ( v9 < v10 )\n          v9 = v10;\n        ++v8;\n        v7 = *v8;\n      }\n      while ( *v8 );\n      v11 = v9 + 1;\n      if ( v9 + 1 < 0x1000 )\n        v11 = 4096LL;\n    }\n    else\n    {\n      v11 = 4096LL;\n    }\n    v28 = sub_410D20((void **)(v6 + 32), (size_t *)(v6 + 48), v11);\n    if ( !v28 )\n      goto LABEL_44;\n    v12 = *v3;\n    if ( *v3 )\n    {\n      v13 = sub_4109A0(v6, \"\", 0LL);\n      ptr = v13;\n      if ( !v13 )\n      {\nLABEL_43:\n        free(*(void **)(v6 + 32));\nLABEL_44:\n        v23 = (void *)v6;\n        v6 = 0LL;\n        free(v23);\n        return v6;\n      }\n      v12 = *v3;\n      *((_QWORD *)v13 + 11) = -1LL;\n      *((_QWORD *)v13 + 13) = -1LL;\n      if ( !v4 )\n        goto LABEL_19;\n    }\n    else\n    {\n      ptr = 0LL;\n      if ( !v4 )\n      {\nLABEL_47:\n        v14 = 0LL;\nLABEL_36:\n        v19 = sub_4109A0(v6, \"\", 0LL);\n        *(_QWORD *)v6 = v19;\n        if ( v19 )\n        {\n          *((_QWORD *)v19 + 2) = v14;\n          v20 = *(_DWORD *)(v6 + 72);\n          *((_WORD *)v19 + 56) = 9;\n          if ( sub_410D90(v20, (_QWORD *)(v6 + 88)) )\n          {\n            v21 = *(_DWORD *)(v6 + 72);\n            if ( !(v21 & 0x204) )\n            {\n              v26 = sub_410DF0(*(_DWORD *)(v6 + 44), v21, \".\");\n              *(_DWORD *)(v6 + 40) = v26;\n              if ( v26 < 0 )\n                *(_DWORD *)(v6 + 72) |= 4u;\n            }\n            sub_413D50(v6 + 96, 0xFFFFFFFFLL);\n            return v6;\n          }\n        }\nLABEL_42:\n        sub_410A30(v14);\n        free(ptr);\n        goto LABEL_43;\n      }\n    }\n    v28 = (*(_DWORD *)(v6 + 72) >> 10) & 1;\nLABEL_19:\n    if ( v12 )\n    {\n      v29[8] = 0;\n      v14 = 0LL;\n      v15 = 0LL;\n      *(_QWORD *)v29 = ((unsigned __int8)(a2 >> 12) ^ 1) & 1;\n      while ( 1 )\n      {\n        v18 = strlen(v12);\n        if ( v18 > 2 && v29[0] && v12[v18 - 1] == 47 )\n        {\n          do\n          {\n            if ( v12[v18 - 2] != 47 )\n              break;\n            --v18;\n          }\n          while ( v18 != 1 );\n        }\n        v16 = sub_4109A0(v6, v12, v18);\n        v17 = v16;\n        if ( !v16 )\n          goto LABEL_42;\n        *((_QWORD *)v16 + 11) = 0LL;\n        *((_QWORD *)v16 + 1) = ptr;\n        *((_QWORD *)v16 + 6) = v16 + 264;\n        if ( v14 )\n        {\n          if ( v28 )\n            break;\n        }\n        *((_WORD *)v16 + 56) = sub_4106F0(v6, (__int64)v16, 0);\n        if ( v4 )\n          goto LABEL_25;\n        *((_QWORD *)v17 + 2) = 0LL;\n        if ( v14 )\n          goto LABEL_52;\n        *(_QWORD *)&v29[1] = v17;\n        v14 = v17;\nLABEL_26:\n        v12 = v3[++v15];\n        if ( !v12 )\n        {\n          if ( v4 && v15 > 1 )\n            v14 = (void *)sub_4108A0(v6, (__int64)v14, v15);\n          goto LABEL_36;\n        }\n      }\n      *((_QWORD *)v16 + 21) = 2LL;\n      *((_WORD *)v16 + 56) = 11;\n      if ( !v4 )\n      {\n        *((_QWORD *)v16 + 2) = 0LL;\nLABEL_52:\n        v25 = *(_QWORD *)&v29[1];\n        *(_QWORD *)&v29[1] = v17;\n        *(_QWORD *)(v25 + 16) = v17;\n        goto LABEL_26;\n      }\nLABEL_25:\n      *((_QWORD *)v17 + 2) = v14;\n      v14 = v17;\n      goto LABEL_26;\n    }\n    goto LABEL_47;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x411b20L", 
            "funcEndAddr": "0x411eb9L", 
            "funcName": "fts_open"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_close(void *ptr)\n{\n  void *v1; // rbp\n  _QWORD *v2; // rdi\n  void *v3; // rdi\n  int v4; // eax\n  int v5; // edi\n  unsigned int v6; // ebx\n  void *v7; // rdi\n  void *v8; // rdi\n  int *v10; // r12\n  _QWORD *v11; // rbx\n\n  v1 = ptr;\n  v2 = *(_QWORD **)ptr;\n  if ( v2 )\n  {\n    if ( v2[11] >= 0 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          v11 = (_QWORD *)v2[2];\n          if ( !v11 )\n            break;\n          free(v2);\n          v2 = v11;\n          if ( v11[11] < 0LL )\n            goto LABEL_7;\n        }\n        v11 = (_QWORD *)v2[1];\n        free(v2);\n        v2 = v11;\n      }\n      while ( v11[11] >= 0 );\n    }\n    else\n    {\n      v11 = v2;\n    }\nLABEL_7:\n    free(v11);\n  }\n  v3 = (void *)*((_QWORD *)v1 + 1);\n  if ( v3 )\n    sub_410A30(v3);\n  free(*((void **)v1 + 2));\n  free(*((void **)v1 + 4));\n  v4 = *((_DWORD *)v1 + 18);\n  if ( v4 & 0x200 )\n  {\n    v5 = *((_DWORD *)v1 + 11);\n    if ( v5 >= 0 && close(v5) )\n    {\n      v6 = *__errno_location();\n      goto LABEL_13;\n    }\nLABEL_12:\n    v6 = 0;\n    goto LABEL_13;\n  }\n  if ( v4 & 4 )\n    goto LABEL_12;\n  if ( !fchdir(*((_DWORD *)v1 + 10)) )\n  {\n    if ( !close(*((_DWORD *)v1 + 10)) )\n      goto LABEL_12;\n    v10 = __errno_location();\n    goto LABEL_30;\n  }\n  v10 = __errno_location();\n  v6 = *v10;\n  if ( close(*((_DWORD *)v1 + 10)) && !v6 )\nLABEL_30:\n    v6 = *v10;\nLABEL_13:\n  sub_410A80((__int64)v1 + 96);\n  v7 = (void *)*((_QWORD *)v1 + 10);\n  if ( v7 )\n    sub_40BB00(v7);\n  v8 = (void *)*((_QWORD *)v1 + 11);\n  if ( *((_DWORD *)v1 + 18) & 0x102 )\n  {\n    if ( v8 )\n      sub_40BB00(v8);\n  }\n  else\n  {\n    free(v8);\n  }\n  free(v1);\n  if ( v6 )\n  {\n    *__errno_location() = v6;\n    v6 = -1;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x411ec0L", 
            "funcEndAddr": "0x412039L", 
            "funcName": "fts_close"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_4106F0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_4106F0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_410DF0(*(_DWORD *)(a1 + 44), v40, \".\");\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_410BE0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_4106F0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_411010(*(_DWORD *)(v4 + 72), (__int64 *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_410A30(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4110C0(v15, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_410E40(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_410A30(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_411160((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4110C0(v31, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_411160((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_410C50(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_410E40(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_410CC0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4110C0(v9, (__int64 *)(v4 + 88), (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_410CC0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40BB00(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_410D90(v23, (_QWORD *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_4106F0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_410DF0(*(_DWORD *)(a1 + 44), v41, \".\");\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n\n__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_4106F0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_4106F0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_410DF0(*(_DWORD *)(a1 + 44), v40, \".\");\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_410BE0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_4106F0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_411010(*(_DWORD *)(v4 + 72), (__int64 *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_410A30(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4110C0(v15, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_410E40(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_410A30(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_411160((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4110C0(v31, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_411160((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_410C50(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_410E40(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_410CC0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4110C0(v9, (__int64 *)(v4 + 88), (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_410CC0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40BB00(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_410D90(v23, (_QWORD *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_4106F0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_410DF0(*(_DWORD *)(a1 + 44), v41, \".\");\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n", 
            "funcStartAddr": "0x402dbcL", 
            "funcEndAddr": "0x402dc1L", 
            "funcName": "fts_read"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_4106F0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_4106F0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_410DF0(*(_DWORD *)(a1 + 44), v40, \".\");\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_410BE0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_4106F0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_411010(*(_DWORD *)(v4 + 72), (__int64 *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_410A30(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4110C0(v15, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_410E40(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_410A30(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_411160((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4110C0(v31, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_411160((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_410C50(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_410E40(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_410CC0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4110C0(v9, (__int64 *)(v4 + 88), (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_410CC0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40BB00(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_410D90(v23, (_QWORD *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_4106F0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_410DF0(*(_DWORD *)(a1 + 44), v41, \".\");\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n\n__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_4106F0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_4106F0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_410DF0(*(_DWORD *)(a1 + 44), v40, \".\");\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_410BE0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_4106F0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_411010(*(_DWORD *)(v4 + 72), (__int64 *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_410A30(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4110C0(v15, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_410E40(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_410A30(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_411160((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4110C0(v31, (__int64 *)(v4 + 88), (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_411160((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_410C50(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_410E40(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_410CC0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4110C0(v9, (__int64 *)(v4 + 88), (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_410CC0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40BB00(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_410D90(v23, (_QWORD *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_4106F0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_410DF0(*(_DWORD *)(a1 + 44), v41, \".\");\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n", 
            "funcStartAddr": "0x402dbcL", 
            "funcEndAddr": "0x402dc1L", 
            "funcName": "fts_read"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_set(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 result; // rax\n\n  if ( a3 > 4 )\n  {\n    *__errno_location() = 22;\n    result = 1LL;\n  }\n  else\n  {\n    *(_WORD *)(a2 + 116) = a3;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4127a0L", 
            "funcEndAddr": "0x4127c9L", 
            "funcName": "fts_set"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_children(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n  int *v3; // rax\n  int *v4; // r13\n  __int64 v5; // r12\n  __int16 v6; // dx\n  __int64 result; // rax\n  void *v8; // rdi\n  int v9; // er14\n  int v10; // esi\n  int v11; // ebp\n  int v12; // ebx\n\n  v2 = a1;\n  v3 = __errno_location();\n  v4 = v3;\n  if ( a2 & 0xFFFFDFFF )\n  {\n    *v3 = 22;\n    return 0LL;\n  }\n  v5 = *(_QWORD *)a1;\n  *v3 = 0;\n  if ( *(_BYTE *)(a1 + 73) & 0x40 )\n    return 0LL;\n  v6 = *(_WORD *)(v5 + 112);\n  if ( v6 == 9 )\n    return *(_QWORD *)(v5 + 16);\n  result = 0LL;\n  if ( v6 == 1 )\n  {\n    v8 = *(void **)(a1 + 8);\n    if ( v8 )\n      sub_410A30(v8);\n    v9 = 1;\n    if ( a2 == 0x2000 )\n    {\n      *(_DWORD *)(v2 + 72) |= 0x2000u;\n      v9 = 2;\n    }\n    if ( *(_QWORD *)(v5 + 88) || **(_BYTE **)(v5 + 48) == 47 || (v10 = *(_DWORD *)(v2 + 72), v10 & 4) )\n    {\n      result = sub_411160((__int64 *)v2, v9);\n      *(_QWORD *)(v2 + 8) = result;\n      return result;\n    }\n    v11 = sub_410DF0(*(_DWORD *)(v2 + 44), v10, \".\");\n    if ( v11 < 0 )\n    {\n      *(_QWORD *)(v2 + 8) = 0LL;\n      result = 0LL;\n    }\n    else\n    {\n      *(_QWORD *)(v2 + 8) = sub_411160((__int64 *)v2, v9);\n      if ( *(_BYTE *)(v2 + 73) & 2 )\n      {\n        sub_410C50(v2, v11, 1);\n        return *(_QWORD *)(v2 + 8);\n      }\n      if ( !fchdir(v11) )\n      {\n        close(v11);\n        return *(_QWORD *)(v2 + 8);\n      }\n      v12 = *v4;\n      close(v11);\n      result = 0LL;\n      *v4 = v12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4127d0L", 
            "funcEndAddr": "0x41293dL", 
            "funcName": "fts_children"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412940(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x412940L", 
            "funcEndAddr": "0x412a1fL", 
            "funcName": "sub_412940"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412A20(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412a20L", 
            "funcEndAddr": "0x41303cL", 
            "funcName": "sub_412A20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413040(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_412940(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_412940((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_412A20(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_412A20(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_412A20(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x413040L", 
            "funcEndAddr": "0x413606L", 
            "funcName": "sub_413040"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413610(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_61DAC0 = dword_61D47C;\n  dword_61DAC4 = dword_61D478;\n  result = sub_413040(a1, a2, a3, a4, a5, a6, &dword_61DAC0, a7);\n  dword_61D47C = dword_61DAC0;\n  filename = (char *)qword_61DAD0;\n  dword_61D474 = dword_61DAC8;\n  return result;\n}\n", 
            "funcStartAddr": "0x413610L", 
            "funcEndAddr": "0x413666L", 
            "funcName": "sub_413610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413670(int a1, __int64 a2, char *a3)\n{\n  return sub_413610(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x413670L", 
            "funcEndAddr": "0x413688L", 
            "funcName": "sub_413670"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413690(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_413610(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x413690L", 
            "funcEndAddr": "0x4136a3L", 
            "funcName": "sub_413690"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4136B0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_413040(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x4136b0L", 
            "funcEndAddr": "0x4136c5L", 
            "funcName": "sub_4136B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4136D0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_413610(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x4136d0L", 
            "funcEndAddr": "0x4136e6L", 
            "funcName": "sub_4136D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4136F0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_413040(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x4136f0L", 
            "funcEndAddr": "0x413708L", 
            "funcName": "sub_4136F0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_413710(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_413CB0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x413710L", 
            "funcEndAddr": "0x41378aL", 
            "funcName": "sub_413710"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413790(__int64 a1, __int64 a2, int a3, _DWORD *a4)\n{\n  *a4 = a3;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x413790L", 
            "funcEndAddr": "0x413795L", 
            "funcName": "sub_413790"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4137A0(const char *a1, int a2, __mode_t a3)\n{\n  int result; // eax\n\n  if ( a2 == -1 )\n    result = chmod(a1, a3);\n  else\n    result = fchmod(a2, a3);\n  return result;\n}\n", 
            "funcStartAddr": "0x4137a0L", 
            "funcEndAddr": "0x4137b5L", 
            "funcName": "sub_4137A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4137C0(__mode_t *a1, const char *a2, int a3)\n{\n  return (unsigned int)-(sub_4137A0(a2, a3, *a1) != 0);\n}\n", 
            "funcStartAddr": "0x4137c0L", 
            "funcEndAddr": "0x4137e2L", 
            "funcName": "sub_4137C0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4137F0()\n{\n  sub_4036B0(1);\n}\n", 
            "funcStartAddr": "0x4137f0L", 
            "funcEndAddr": "0x4137faL", 
            "funcName": "sub_4137F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413800(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x413800L", 
            "funcEndAddr": "0x413916L", 
            "funcName": "sub_413800"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_413920(char *a1, char *a2, __int64 a3)\n{\n  char *v3; // rbx\n  _BYTE *v4; // rbp\n  _BYTE *v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_40DFB0(1LL, a1);\n  v5 = sub_40DCA0(0LL, 8, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x413920L", 
            "funcEndAddr": "0x413991L", 
            "funcName": "sub_413920"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4139A0(char **a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  char *i; // r12\n  _BYTE *v11; // rax\n  _BYTE *v12; // rax\n  char *v13; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_40DFD0(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v12 = sub_40DFD0(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x4139a0L", 
            "funcEndAddr": "0x413ab8L", 
            "funcName": "sub_4139A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413AC0(char *a1, char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  char **v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (char **)a3;\n  result = sub_413800(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_413920(a1, a2, result);\n    sub_4139A0(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413ac0L", 
            "funcEndAddr": "0x413b30L", 
            "funcName": "sub_413AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413B30(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x413b30L", 
            "funcEndAddr": "0x413b7dL", 
            "funcName": "sub_413B30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413B80(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_414FE0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x413b80L", 
            "funcEndAddr": "0x413bddL", 
            "funcName": "sub_413B80"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_413BE0(__int64 a1)\n{\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_DWORD *)(a1 + 24) = 9827862;\n}\n", 
            "funcStartAddr": "0x413be0L", 
            "funcEndAddr": "0x413bf0L", 
            "funcName": "sub_413BE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413BF0(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  __int64 v5; // rax\n\n  if ( *(_DWORD *)(a1 + 24) != 9827862 )\n    __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 0x3Cu, \"cycle_check\");\n  v2 = *(_QWORD *)(a1 + 16);\n  v3 = a2[1];\n  if ( !v2 )\n  {\n    *(_QWORD *)(a1 + 16) = 1LL;\n    goto LABEL_7;\n  }\n  if ( *(_QWORD *)a1 == v3 && *a2 == *(_QWORD *)(a1 + 8) )\n    return 1LL;\n  *(_QWORD *)(a1 + 16) = v2 + 1;\n  if ( (v2 + 1) & v2 )\n    return 0LL;\n  if ( v2 != -1 )\n  {\nLABEL_7:\n    v5 = *a2;\n    *(_QWORD *)a1 = v3;\n    *(_QWORD *)(a1 + 8) = v5;\n    return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x413bf0L", 
            "funcEndAddr": "0x413c6cL", 
            "funcName": "sub_413BF0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_413C70(struct timespec *tp)\n{\n  int result; // eax\n  __time_t v2; // [rsp+0h] [rbp-18h]\n  __int64 v3; // [rsp+8h] [rbp-10h]\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday((struct timeval *)&v2, 0LL);\n    tp->tv_sec = v2;\n    result = 1000 * v3;\n    tp->tv_nsec = 1000 * v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413c70L", 
            "funcEndAddr": "0x413caaL", 
            "funcName": "sub_413C70"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_413CB0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413cb0L", 
            "funcEndAddr": "0x413d0eL", 
            "funcName": "sub_413CB0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_413D10(char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rcx\n  unsigned __int64 v3; // rax\n\n  v2 = *a1;\n  if ( !(_BYTE)v2 )\n    return 0LL;\n  v3 = 0LL;\n  do\n  {\n    ++a1;\n    v3 = v2 + __ROL8__(v3, 9);\n    v2 = *a1;\n  }\n  while ( (_BYTE)v2 );\n  return v3 % a2;\n}\n", 
            "funcStartAddr": "0x413d10L", 
            "funcEndAddr": "0x413d46L", 
            "funcName": "sub_413D10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_413D50(__int64 a1, int a2)\n{\n  *(_QWORD *)(a1 + 20) = 0LL;\n  *(_BYTE *)(a1 + 28) = 1;\n  *(_DWORD *)a1 = a2;\n  *(_DWORD *)(a1 + 4) = a2;\n  *(_DWORD *)(a1 + 8) = a2;\n  *(_DWORD *)(a1 + 12) = a2;\n  *(_DWORD *)(a1 + 16) = a2;\n}\n", 
            "funcStartAddr": "0x413d50L", 
            "funcEndAddr": "0x413d6bL", 
            "funcName": "sub_413D50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413D70(__int64 a1)\n{\n  return *(unsigned __int8 *)(a1 + 28);\n}\n", 
            "funcStartAddr": "0x413d70L", 
            "funcEndAddr": "0x413d75L", 
            "funcName": "sub_413D70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413D80(__int64 a1, int a2)\n{\n  char v2; // dl\n  int v3; // ecx\n  _DWORD *v4; // r8\n  __int64 result; // rax\n  int v6; // esi\n\n  v2 = *(_BYTE *)(a1 + 28) ^ 1;\n  v3 = (v2 + (unsigned __int8)*(_DWORD *)(a1 + 20)) & 3;\n  v4 = (_DWORD *)(a1 + 4LL * ((v2 + (unsigned __int8)*(_DWORD *)(a1 + 20)) & 3));\n  result = (unsigned int)*v4;\n  *v4 = a2;\n  v6 = *(_DWORD *)(a1 + 24);\n  *(_DWORD *)(a1 + 20) = v3;\n  if ( v6 == v3 )\n    *(_DWORD *)(a1 + 24) = ((_BYTE)v6 + v2) & 3;\n  *(_BYTE *)(a1 + 28) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x413d80L", 
            "funcEndAddr": "0x413db5L", 
            "funcName": "sub_413D80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413DC0(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n\n__int64 __fastcall sub_413DC0(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n", 
            "funcStartAddr": "0x402dc1L", 
            "funcEndAddr": "0x402dc6L", 
            "funcName": "sub_413DC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413DC0(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n\n__int64 __fastcall sub_413DC0(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n", 
            "funcStartAddr": "0x402dc1L", 
            "funcEndAddr": "0x402dc6L", 
            "funcName": "sub_413DC0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_413E10()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_414FE0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_414FE0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x413e10L", 
            "funcEndAddr": "0x414372L", 
            "funcName": "sub_413E10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414380(int a1, const char *a2, char a3, unsigned int a4)\n{\n  __int64 v4; // rcx\n  int v5; // eax\n  unsigned int v7; // [rsp+38h] [rbp-20h]\n\n  v7 = a4;\n  v4 = 0LL;\n  if ( a3 & 0x40 )\n    v4 = v7;\n  v5 = openat(a1, a2, a3, v4);\n  return sub_40EAF0(v5);\n}\n", 
            "funcStartAddr": "0x414380L", 
            "funcEndAddr": "0x4143caL", 
            "funcName": "sub_414380"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_4143D0(__int64 a1, __int64 a2)\n{\n  _QWORD *result; // rax\n\n  result = sub_4100E0(0x18uLL, a2);\n  *result = a1;\n  result[2] = 0LL;\n  result[1] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4143d0L", 
            "funcEndAddr": "0x4143f3L", 
            "funcName": "sub_4143D0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_414400(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  _QWORD *result; // rax\n\n  v2 = sub_414620();\n  result = 0LL;\n  if ( v2 )\n  {\n    result = sub_4100E0(0x18uLL, a2);\n    *result = v2;\n    result[2] = 0LL;\n    result[1] = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x414400L", 
            "funcEndAddr": "0x41442fL", 
            "funcName": "sub_414400"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_414440(__int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r14\n  unsigned __int64 v3; // r13\n  __int64 v4; // r12\n  unsigned __int64 v5; // rbp\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rsi\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  char *v10; // rax\n  __int64 v11; // rdx\n  char v13; // [rsp+8h] [rbp-40h]\n\n  v2 = a2 + 1;\n  v3 = a2;\n  v4 = *a1;\n  v5 = a1[1];\n  v6 = a1[2];\n  while ( 1 )\n  {\n    if ( v6 >= v3 )\n    {\n      if ( v6 == v3 )\n        goto LABEL_11;\n    }\n    else\n    {\n      v8 = v6;\n      v9 = 0LL;\n      do\n      {\n        ++v9;\n        v8 = (v8 << 8) + 255;\n      }\n      while ( v3 > v8 );\n      sub_414930(v4, &v13, v9);\n      v10 = &v13;\n      do\n      {\n        v11 = (unsigned __int8)*v10++;\n        v6 = (v6 << 8) + 255;\n        v5 = v11 + (v5 << 8);\n      }\n      while ( v3 > v6 );\n      if ( v6 == v3 )\n      {\nLABEL_11:\n        a1[2] = 0LL;\n        a1[1] = 0LL;\n        return v5;\n      }\n    }\n    v7 = (v6 - v3) % v2;\n    if ( v5 <= v6 - v7 )\n      break;\n    v6 = v7 - 1;\n    v5 %= v2;\n  }\n  a1[1] = v5 / v2;\n  v5 %= v2;\n  a1[2] = (v6 - v3) / v2;\n  return v5;\n}\n", 
            "funcStartAddr": "0x414440L", 
            "funcEndAddr": "0x414535L", 
            "funcName": "sub_414440"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_414540(void *ptr)\n{\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x414540L", 
            "funcEndAddr": "0x41455eL", 
            "funcName": "sub_414540"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414560(void *ptr)\n{\n  unsigned int v1; // er12\n  int *v2; // rax\n  int v3; // er13\n  int *v4; // rbp\n\n  v1 = sub_414A90(*(void **)ptr);\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n  *v4 = v3;\n  return v1;\n}\n", 
            "funcStartAddr": "0x414560L", 
            "funcEndAddr": "0x4145b1L", 
            "funcName": "sub_414560"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_4145C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40DFD0(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_4145C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40DFD0(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x402dc6L", 
            "funcEndAddr": "0x402dcbL", 
            "funcName": "sub_4145C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_4145C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40DFD0(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_4145C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40DFD0(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x402dc6L", 
            "funcEndAddr": "0x402dcbL", 
            "funcName": "sub_4145C0"
        }, 
        {
            "decompiledFuncCode": "__m128i *__fastcall sub_414620(__int64 a1, unsigned __int64 a2)\n{\n  FILE *v2; // r13\n  __m128i *v3; // rax\n  size_t v4; // rcx\n  __m128i *v5; // rbx\n  __m128i *v7; // rax\n  __int64 v8; // r13\n  int v9; // eax\n  int v10; // er15\n  __int64 v11; // rdx\n  __int64 v12; // rbp\n  unsigned __int64 v13; // r14\n  __int64 v14; // rbp\n  unsigned int v15; // eax\n  __int64 v16; // rdx\n  unsigned __int64 v17; // rbp\n  __int64 v18; // r14\n  unsigned int v19; // eax\n  __int64 v20; // rdx\n  unsigned __int64 v21; // rbp\n  int v22; // eax\n  unsigned int v23; // edi\n  unsigned int v24; // eax\n  __int64 v25; // rdx\n  __int64 v26; // rcx\n  struct timeval *v27; // r15\n  __int64 v28; // rbp\n  __int64 v29; // r14\n  unsigned __int64 v30; // rcx\n  unsigned int v31; // [rsp+8h] [rbp-50h]\n  struct timeval tv; // [rsp+10h] [rbp-48h]\n\n  if ( !a2 )\n  {\n    v5 = (__m128i *)sub_4100E0(0x1038uLL, 0LL);\n    v5->m128i_i64[0] = 0LL;\n    v5->m128i_i64[1] = (__int64)sub_4145C0;\n    v5[1].m128i_i64[0] = 0LL;\n    return v5;\n  }\n  if ( !a1 )\n  {\n    v7 = (__m128i *)sub_4100E0(0x1038uLL, a2);\n    v7->m128i_i64[0] = 0LL;\n    v5 = v7;\n    v8 = (__int64)v7[2].m128i_i64;\n    v7->m128i_i64[1] = (__int64)sub_4145C0;\n    v7[1].m128i_i64[0] = 0LL;\n    v7[1].m128i_i64[1] = 0LL;\n    v9 = open(\"/dev/urandom\", 0);\n    v10 = v9;\n    if ( v9 < 0 )\n    {\n      v13 = 20LL;\n      gettimeofday(&tv, 0LL);\n      v5[2] = _mm_load_si128((const __m128i *)&tv);\n      LODWORD(tv.tv_sec) = getpid();\n      v5[3].m128i_i32[0] = tv.tv_sec;\n    }\n    else\n    {\n      v11 = a2;\n      if ( a2 > 0x800 )\n        v11 = 2048LL;\n      v12 = __read_chk((unsigned int)v9, v8, v11, 4120LL);\n      close(v10);\n      if ( v12 > 2047 )\n        goto LABEL_12;\n      if ( v12 < 0 )\n        v12 = 0LL;\n      v26 = 2048 - v12;\n      v27 = (struct timeval *)(v8 + v12);\n      if ( (unsigned __int64)(2048 - v12) > 0x10 )\n        v26 = 16LL;\n      v28 = v26 + v12;\n      v31 = v26;\n      gettimeofday(&tv, 0LL);\n      qmemcpy(v27, &tv, v31);\n      if ( v28 > 2047 )\n        goto LABEL_12;\n      v29 = 2048 - v28;\n      if ( (unsigned __int64)(2048 - v28) > 4 )\n        v29 = 4LL;\n      LODWORD(tv.tv_sec) = getpid();\n      v30 = (unsigned int)v29;\n      v13 = v28 + v29;\n      qmemcpy((void *)(v8 + v28), &tv, v30);\n      if ( v13 > 0x7FF )\n        goto LABEL_12;\n    }\n    v14 = 2048 - v13;\n    if ( 2048 - v13 > 4 )\n      v14 = 4LL;\n    LODWORD(tv.tv_sec) = getppid();\n    if ( (_DWORD)v14 )\n    {\n      v15 = 0;\n      do\n      {\n        v16 = v15++;\n        *(_BYTE *)(v8 + v13 + v16) = *((_BYTE *)&tv.tv_sec + v16);\n      }\n      while ( v15 < (unsigned int)v14 );\n    }\n    v17 = v13 + v14;\n    if ( v17 <= 0x7FF )\n    {\n      v18 = 2048 - v17;\n      if ( 2048 - v17 > 4 )\n        v18 = 4LL;\n      LODWORD(tv.tv_sec) = getuid();\n      if ( (_DWORD)v18 )\n      {\n        v19 = 0;\n        do\n        {\n          v20 = v19++;\n          *(_BYTE *)(v8 + v17 + v20) = *((_BYTE *)&tv.tv_sec + v20);\n        }\n        while ( v19 < (unsigned int)v18 );\n      }\n      v21 = v18 + v17;\n      if ( v21 <= 0x7FF )\n      {\n        LODWORD(tv.tv_sec) = getgid();\n        v22 = 2048 - v21;\n        if ( 2048 - v21 > 4 )\n          v22 = 4;\n        v23 = v22;\n        if ( v22 )\n        {\n          v24 = 0;\n          do\n          {\n            v25 = v24++;\n            *(_BYTE *)(v8 + v21 + v25) = *((_BYTE *)&tv.tv_sec + v25);\n          }\n          while ( v24 < v23 );\n        }\n      }\n    }\nLABEL_12:\n    sub_414D90(v8);\n    return v5;\n  }\n  v2 = (FILE *)sub_415060(a1, \"rb\");\n  if ( !v2 )\n    return 0LL;\n  v3 = (__m128i *)sub_4100E0(0x1038uLL, (__int64)\"rb\");\n  v4 = 4096LL;\n  v3->m128i_i64[0] = (__int64)v2;\n  if ( a2 <= 0x1000 )\n    v4 = a2;\n  v3->m128i_i64[1] = (__int64)sub_4145C0;\n  v5 = v3;\n  v3[1].m128i_i64[0] = a1;\n  setvbuf(v2, &v3[1].m128i_i8[8], 0, v4);\n  return v5;\n}\n", 
            "funcStartAddr": "0x414620L", 
            "funcEndAddr": "0x41490fL", 
            "funcName": "sub_414620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414930(__int64 a1, char *a2, size_t a3)\n{\n  __int64 v3; // r12\n  char *v4; // rbp\n  size_t v5; // rbx\n  FILE *v6; // r13\n  int *v7; // r14\n  __int64 v8; // rdi\n  int v9; // edx\n  __int64 result; // rax\n  size_t v11; // r15\n  char *v12; // r13\n  __int64 v13; // r14\n  void *v14; // rdi\n  char *v15; // rsi\n\n  v3 = a1;\n  v4 = a2;\n  v5 = a3;\n  v6 = *(FILE **)a1;\n  if ( *(_QWORD *)a1 )\n  {\n    v7 = __errno_location();\n    while ( 1 )\n    {\n      result = fread_unlocked(v4, 1uLL, v5, v6);\n      v9 = *v7;\n      v4 += result;\n      v5 -= result;\n      if ( !v5 )\n        break;\n      v8 = *(_QWORD *)(v3 + 16);\n      if ( !(**(_BYTE **)v3 & 0x20) )\n        v9 = 0;\n      *v7 = v9;\n      (*(void (__fastcall **)(__int64))(v3 + 8))(v8);\n      v6 = *(FILE **)v3;\n    }\n  }\n  else\n  {\n    v11 = *(_QWORD *)(a1 + 24);\n    v12 = (char *)(a1 + 2104);\n    v13 = a1 + 32;\n    if ( a3 <= v11 )\n    {\n      v12 = &v12[-v11 + 2048];\nLABEL_16:\n      result = (__int64)memcpy(v4, v12, v5);\n      *(_QWORD *)(v3 + 24) = v11 - v5;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v14 = v4;\n        v4 += v11;\n        v5 -= v11;\n        memcpy(v14, &v12[2048 - v11], v11);\n        if ( !((unsigned __int8)v4 & 7) )\n          break;\n        v11 = 2048LL;\n        sub_414AE0(v13, v12);\n        if ( v5 <= 0x800 )\n        {\nLABEL_15:\n          v11 = 2048LL;\n          goto LABEL_16;\n        }\n      }\n      do\n      {\n        if ( v5 <= 0x7FF )\n        {\n          sub_414AE0(v13, v12);\n          goto LABEL_15;\n        }\n        v15 = v4;\n        v4 += 2048;\n        result = sub_414AE0(v13, v15);\n        v5 -= 2048LL;\n      }\n      while ( v5 );\n      *(_QWORD *)(v3 + 24) = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x414930L", 
            "funcEndAddr": "0x414a8cL", 
            "funcName": "sub_414930"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414A90(void *ptr)\n{\n  FILE *v1; // rbp\n  __int64 result; // rax\n\n  v1 = *(FILE **)ptr;\n  __explicit_bzero_chk(ptr, 4152LL, -1LL);\n  free(ptr);\n  if ( v1 )\n    result = sub_414FE0(v1);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x414a90L", 
            "funcEndAddr": "0x414ad9L", 
            "funcName": "sub_414A90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_414AE0(unsigned __int64 *a1, __int64 *a2)\n{\n  unsigned __int64 v2; // r11\n  unsigned __int64 v3; // rdx\n  __int64 *v4; // r9\n  __int64 v5; // r8\n  unsigned __int64 *result; // rax\n  __int64 v7; // r11\n  unsigned __int64 v8; // rcx\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  __int64 v11; // rbx\n  unsigned __int64 v12; // r8\n  unsigned __int64 v13; // r11\n  __int64 v14; // rdx\n  unsigned __int64 v15; // rcx\n  __int64 v16; // rbx\n  unsigned __int64 v17; // rcx\n  unsigned __int64 v18; // rdx\n  unsigned __int64 v19; // r8\n  __int64 v20; // rcx\n  unsigned __int64 v21; // r8\n  unsigned __int64 v22; // rcx\n  __int64 *v23; // rsi\n  unsigned __int64 v24; // rcx\n  unsigned __int64 v25; // rdx\n  __int64 v26; // rbx\n  __int64 v27; // rcx\n  unsigned __int64 v28; // r8\n  unsigned __int64 v29; // r10\n  __int64 v30; // rdx\n  unsigned __int64 v31; // rcx\n  __int64 v32; // r11\n  unsigned __int64 v33; // rcx\n  unsigned __int64 v34; // rdx\n  unsigned __int64 v35; // r8\n  __int64 v36; // rcx\n  unsigned __int64 v37; // r8\n  unsigned __int64 v38; // rcx\n\n  v2 = a1[257];\n  v3 = a1[256];\n  v4 = a2;\n  v5 = a1[258] + 1;\n  result = a1;\n  a1[258] = v5;\n  v7 = v5 + v2;\n  do\n  {\n    v8 = *result;\n    v9 = result[128] + ~((v3 << 21) ^ v3);\n    v10 = v7 + v9 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v10;\n    v11 = v8 + *(unsigned __int64 *)((char *)a1 + ((v10 >> 8) & 0x7F8));\n    *v4 = v11;\n    v12 = result[1];\n    v13 = result[129] + ((v9 >> 5) ^ v9);\n    v14 = v13 ^ (v13 << 12);\n    v15 = v11 + v13 + *(unsigned __int64 *)((char *)a1 + (result[1] & 0x7F8));\n    result[1] = v15;\n    v16 = v12 + *(unsigned __int64 *)((char *)a1 + ((v15 >> 8) & 0x7F8));\n    v4[1] = v16;\n    v17 = result[2];\n    v18 = result[130] + v14;\n    v19 = v16 + v18 + *(unsigned __int64 *)((char *)a1 + (result[2] & 0x7F8));\n    result[2] = v19;\n    v20 = *(unsigned __int64 *)((char *)a1 + ((v19 >> 8) & 0x7F8)) + v17;\n    v4[2] = v20;\n    v21 = result[3];\n    v3 = result[131] + ((v18 >> 33) ^ v18);\n    v22 = v20 + v3 + *(unsigned __int64 *)((char *)a1 + (result[3] & 0x7F8));\n    result += 4;\n    v4 += 4;\n    *(result - 1) = v22;\n    v7 = v21 + *(unsigned __int64 *)((char *)a1 + ((v22 >> 8) & 0x7F8));\n    *(v4 - 1) = v7;\n  }\n  while ( result != a1 + 128 );\n  v23 = a2 + 128;\n  do\n  {\n    v24 = *result;\n    v25 = *(result - 128) + ~((v3 << 21) ^ v3);\n    v26 = v25 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v7 + v26;\n    v27 = *(unsigned __int64 *)((char *)a1 + (((unsigned __int64)(v7 + v26) >> 8) & 0x7F8)) + v24;\n    *v23 = v27;\n    v28 = result[1];\n    v29 = *(result - 127) + ((v25 >> 5) ^ v25);\n    v30 = v29 ^ (v29 << 12);\n    v31 = v27 + v29 + *(unsigned __int64 *)((char *)a1 + (result[1] & 0x7F8));\n    result[1] = v31;\n    v32 = v28 + *(unsigned __int64 *)((char *)a1 + ((v31 >> 8) & 0x7F8));\n    v23[1] = v32;\n    v33 = result[2];\n    v34 = *(result - 126) + v30;\n    v35 = v32 + v34 + *(unsigned __int64 *)((char *)a1 + (result[2] & 0x7F8));\n    result[2] = v35;\n    v36 = *(unsigned __int64 *)((char *)a1 + ((v35 >> 8) & 0x7F8)) + v33;\n    v23[2] = v36;\n    v37 = result[3];\n    v3 = *(result - 125) + ((v34 >> 33) ^ v34);\n    v38 = v36 + v3 + *(unsigned __int64 *)((char *)a1 + (result[3] & 0x7F8));\n    result += 4;\n    v23 += 4;\n    *(result - 1) = v38;\n    v7 = v37 + *(unsigned __int64 *)((char *)a1 + ((v38 >> 8) & 0x7F8));\n    *(v23 - 1) = v7;\n  }\n  while ( result != a1 + 256 );\n  a1[256] = v3;\n  a1[257] = v7;\n  return result;\n}\n", 
            "funcStartAddr": "0x414ae0L", 
            "funcEndAddr": "0x414d85L", 
            "funcName": "sub_414AE0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_414D90(_QWORD *a1)\n{\n  _QWORD *v1; // rdx\n  __int64 *v2; // rax\n  __int64 v3; // rcx\n  __int64 v4; // rsi\n  __int64 v5; // r11\n  __int64 v6; // r12\n  __int64 v7; // r10\n  __int64 v8; // r9\n  __int64 v9; // rbp\n  __int64 v10; // r8\n  __int64 v11; // rbx\n  __int64 v12; // rsi\n  unsigned __int64 v13; // rcx\n  __int64 v14; // r8\n  __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  __int64 v17; // r12\n  __int64 v18; // r10\n  unsigned __int64 v19; // rcx\n  unsigned __int64 v20; // r11\n  __int64 v21; // rsi\n  unsigned __int64 v22; // rbx\n  unsigned __int64 v23; // r13\n  __int64 v24; // r12\n  unsigned __int64 v25; // rcx\n  __int64 v26; // rsi\n  __int64 v27; // r8\n  __int64 v28; // rbx\n  unsigned __int64 v29; // r9\n  __int64 v30; // r12\n  __int64 v31; // r10\n  unsigned __int64 v32; // rcx\n  unsigned __int64 v33; // r11\n  __int64 v34; // rsi\n  unsigned __int64 v35; // rbx\n  unsigned __int64 result; // rax\n  __int64 v37; // r12\n\n  v1 = a1;\n  v2 = a1;\n  v3 = -7424904924229222229LL;\n  v4 = -9011610652101975858LL;\n  v5 = -5576812576440232668LL;\n  v6 = -5865837416287532563LL;\n  v7 = -8354558816804203872LL;\n  v8 = -5046086420515862430LL;\n  v9 = (__int64)(a1 + 256);\n  v10 = 7240739780546808700LL;\n  v11 = 5259722845879046933LL;\n  do\n  {\n    v12 = v2[4] + v4;\n    v13 = v2[7] + v3;\n    v14 = *v2 - v12 + v10;\n    v15 = (v13 >> 9) ^ (v2[5] + v11);\n    v16 = v2[1] - v15 + v8;\n    v17 = (v14 << 9) ^ (v2[6] + v6);\n    v18 = v2[2] - v17 + v7;\n    v19 = (v16 >> 23) ^ (v14 + v13);\n    v20 = v2[3] - v19 + v5;\n    v10 = (v18 << 15) ^ (v16 + v14);\n    v21 = v12 - v10;\n    *v2 = v10;\n    v8 = (v20 >> 14) ^ (v18 + v16);\n    v22 = v15 - v8;\n    v2[1] = v8;\n    v7 = (v21 << 20) ^ (v20 + v18);\n    v23 = v21 + v22;\n    v24 = v17 - v7;\n    v2[2] = v7;\n    v2 += 8;\n    v5 = (v22 >> 17) ^ (v21 + v20);\n    v11 = v24 + v22;\n    v3 = v19 - v5;\n    *(v2 - 5) = v5;\n    v4 = v23 ^ (v24 << 14);\n    v6 = v3 + v24;\n    *(v2 - 3) = v11;\n    *(v2 - 4) = v4;\n    *(v2 - 2) = v6;\n    *(v2 - 1) = v3;\n  }\n  while ( (__int64 *)v9 != v2 );\n  do\n  {\n    v25 = v1[7] + v3;\n    v26 = v1[4] + v4;\n    v27 = *v1 + v10 - v26;\n    v28 = (v25 >> 9) ^ (v1[5] + v11);\n    v29 = v1[1] + v8 - v28;\n    v30 = (v27 << 9) ^ (v1[6] + v6);\n    v31 = v1[2] + v7 - v30;\n    v32 = (v29 >> 23) ^ (v27 + v25);\n    v33 = v1[3] + v5 - v32;\n    v10 = (v31 << 15) ^ (v29 + v27);\n    v34 = v26 - v10;\n    *v1 = v10;\n    v8 = (v33 >> 14) ^ (v31 + v29);\n    v35 = v28 - v8;\n    v1[1] = v8;\n    v7 = (v34 << 20) ^ (v33 + v31);\n    result = v34 + v35;\n    v37 = v30 - v7;\n    v1[2] = v7;\n    v1 += 8;\n    v5 = (v35 >> 17) ^ (v34 + v33);\n    v11 = v37 + v35;\n    v3 = v32 - v5;\n    *(v1 - 5) = v5;\n    v4 = result ^ (v37 << 14);\n    v6 = v3 + v37;\n    *(v1 - 3) = v11;\n    *(v1 - 4) = v4;\n    *(v1 - 2) = v6;\n    *(v1 - 1) = v3;\n  }\n  while ( (_QWORD *)v9 != v1 );\n  a1[258] = 0LL;\n  a1[257] = 0LL;\n  a1[256] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x414d90L", 
            "funcEndAddr": "0x414fc4L", 
            "funcName": "sub_414D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_414FD0(char a1)\n{\n  return sub_410460(a1, 0, 3LL);\n}\n", 
            "funcStartAddr": "0x414fd0L", 
            "funcEndAddr": "0x414fdeL", 
            "funcName": "sub_414FD0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_414FE0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !sub_4105A0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x414fe0L", 
            "funcEndAddr": "0x41505bL", 
            "funcName": "sub_414FE0"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_415060(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // er12\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // er12\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_414FD0(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_414FE0(v11);\n        *v13 = v12;\n      }\n      else if ( sub_414FE0(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        v3 = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x415060L", 
            "funcEndAddr": "0x4150f3L", 
            "funcName": "sub_415060"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x415100L", 
            "funcEndAddr": "0x41515dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x415160L", 
            "funcEndAddr": "0x415161L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_415170(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_61D3E8 )\n    v1 = (void *)unk_61D3E8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x415170L", 
            "funcEndAddr": "0x415188L", 
            "funcName": "sub_415170"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_415188(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_61CE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x415188L", 
            "funcEndAddr": "0x4151a8L", 
            "funcName": "sub_415188"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mv.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 240, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}