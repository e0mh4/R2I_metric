{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char v3; // r15\n  int v4; // er14\n  unsigned __int64 v5; // r13\n  char *v6; // r12\n  __int64 v7; // rbp\n  int *v8; // rbx\n  char *v9; // rdi\n  int v10; // eax\n  char **v11; // rax\n  const char *v12; // rsi\n  char *v13; // rax\n  int v14; // eax\n  int v15; // eax\n  int v16; // edx\n  int v17; // eax\n  __int64 v18; // rax\n  void *v19; // r13\n  const char *v20; // rsi\n  struct passwd *v21; // rax\n  __uid_t v22; // eax\n  struct group *v23; // rax\n  __gid_t v24; // eax\n  char *v26; // rax\n  __int64 v27; // rax\n  __int64 v28; // rcx\n  _BYTE *v29; // rdi\n  bool v30; // zf\n  char *v31; // rax\n  int *v32; // rax\n  char *v33; // rax\n  __int64 v34; // r13\n  char *v35; // r15\n  __int64 v36; // rax\n  __int64 v37; // rax\n  void *v38; // rbx\n  char *v39; // rax\n  char *v40; // rbx\n  char v41; // al\n  char v42; // dl\n  char *v44; // rax\n  char *v45; // rax\n  char *v46; // rax\n  char *v47; // rax\n  char *v48; // rax\n  __int64 v49; // rbx\n  char *v50; // rax\n  __int64 v51; // rbp\n  char *v52; // rbx\n  int *v53; // rax\n  const char *v54; // rsi\n  __int64 v55; // rbx\n  char *v56; // rax\n  char *v57; // rax\n  char *v58; // rax\n  char *v59; // rax\n  __int64 v60; // rbx\n  char *v61; // rax\n  char *v62; // rax\n  __int64 v63; // rbx\n  char *v64; // rax\n  __int64 v65; // rbx\n  char *v66; // rax\n  char **v67; // [rsp+8h] [rbp-140h]\n  void *v68; // [rsp+10h] [rbp-138h]\n  unsigned int v69; // [rsp+10h] [rbp-138h]\n  void *v70; // [rsp+18h] [rbp-130h]\n  int v71; // [rsp+18h] [rbp-130h]\n  char v72; // [rsp+27h] [rbp-121h]\n  void *v73; // [rsp+28h] [rbp-120h]\n  __int64 v74; // [rsp+30h] [rbp-118h]\n  __int64 v75; // [rsp+38h] [rbp-110h]\n  __int64 v76; // [rsp+40h] [rbp-108h]\n  __int16 v77; // [rsp+48h] [rbp-100h]\n  int v78; // [rsp+4Ch] [rbp-FCh]\n  __int64 v79; // [rsp+50h] [rbp-F8h]\n  __int64 v80; // [rsp+58h] [rbp-F0h]\n  char v81; // [rsp+60h] [rbp-E8h]\n  int v82; // [rsp+64h] [rbp-E4h]\n  __int64 v83; // [rsp+68h] [rbp-E0h]\n  __int64 v84; // [rsp+70h] [rbp-D8h]\n  struct stat stat_buf; // [rsp+80h] [rbp-C8h]\n\n  v3 = 0;\n  v4 = 0;\n  v5 = (unsigned __int64)a2;\n  v6 = 0LL;\n  LOBYTE(v7) = 0;\n  LODWORD(v8) = a1;\n  v9 = *a2;\n  dword_621560 = 0;\n  sub_40CFD0(v9);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_416FD0(sub_40AA00);\n  sub_405700(&v74);\n  v74 = 0x400000000LL;\n  v75 = 8589934596LL;\n  v82 = 0;\n  v76 = 1103806595456LL;\n  v77 = 256;\n  v78 = 0;\n  v79 = 0x1000000LL;\n  v80 = 0x1000000LL;\n  v81 = 0;\n  v83 = 0LL;\n  v84 = 0LL;\n  nptr = 0LL;\n  qword_621548 = 0LL;\n  byte_621541 = 0;\n  byte_621540 = 0;\n  umask(0);\n  v72 = 0;\n  v73 = 0LL;\n  v67 = 0LL;\n  v68 = 0LL;\n  v70 = 0LL;\n  while ( 1 )\n  {\n    v10 = sub_412970((unsigned int)v8, v5, \"bcCsDdg:m:o:pt:TvS:Z\", &off_418380, 0LL);\n    if ( v10 == -1 )\n      break;\n    if ( v10 == 100 )\n    {\n      byte_621540 = 1;\n    }\n    else if ( v10 <= 100 )\n    {\n      if ( v10 == 83 )\n      {\n        v3 = 1;\n        v68 = qword_621B80;\n      }\n      else if ( v10 <= 83 )\n      {\n        if ( v10 == -130 )\n          sub_4046F0(0);\n        if ( v10 <= -130 )\n        {\n          if ( v10 == -131 )\n          {\n            sub_411160((char)stdout);\n            exit(0);\n          }\n          goto LABEL_22;\n        }\n        if ( v10 == 67 )\n        {\n          byte_621542 = 1;\n        }\n        else\n        {\n          if ( v10 != 68 )\n            goto LABEL_22;\n          LOBYTE(v7) = 1;\n        }\n      }\n      else if ( v10 == 90 )\n      {\n        if ( dword_621560 )\n        {\n          byte_61F44C = 0;\n          if ( qword_621B80 )\n            v73 = qword_621B80;\n          else\n            BYTE1(v79) = 1;\n        }\n        else if ( qword_621B80 )\n        {\n          v12 = \"warning: ignoring --context; it requires an SELinux-enabled kernel\";\nLABEL_56:\n          v13 = dcgettext(0LL, v12, 5);\n          error(0, 0, v13);\n        }\n      }\n      else if ( v10 <= 90 )\n      {\n        if ( v10 != 84 )\n          goto LABEL_22;\n        v4 = 1;\n      }\n      else if ( v10 == 98 )\n      {\n        v11 = (char **)qword_621B80;\n        v3 = 1;\n        if ( !qword_621B80 )\n          v11 = v67;\n        v67 = v11;\n      }\n      else if ( v10 != 99 )\n      {\n        goto LABEL_22;\n      }\n    }\n    else if ( v10 == 115 )\n    {\n      byte_621541 = 1;\n      signal(17, 0LL);\n    }\n    else if ( v10 > 115 )\n    {\n      if ( v10 == 118 )\n      {\n        BYTE6(v80) = 1;\n      }\n      else if ( v10 <= 118 )\n      {\n        if ( v10 != 116 )\n          goto LABEL_22;\n        if ( v6 )\n        {\n          v48 = dcgettext(0LL, \"multiple target directories specified\", 5);\n          error(1, 0, v48);\n          goto LABEL_140;\n        }\n        v6 = (char *)qword_621B80;\n      }\n      else if ( v10 == 128 )\n      {\n        v12 = \"WARNING: ignoring --preserve-context; this kernel is not SELinux-enabled\";\n        if ( !dword_621560 )\n          goto LABEL_56;\n        BYTE5(v79) = 1;\n        byte_61F44C = 0;\n      }\n      else\n      {\n        if ( v10 != 129 )\n          goto LABEL_22;\n        v72 = 1;\n        arg = (char *)sub_411510(qword_621B80);\n      }\n    }\n    else if ( v10 == 109 )\n    {\n      v70 = qword_621B80;\n    }\n    else if ( v10 <= 109 )\n    {\n      if ( v10 != 103 )\n        goto LABEL_22;\n      qword_621548 = (char *)qword_621B80;\n    }\n    else if ( v10 == 111 )\n    {\n      nptr = (char *)qword_621B80;\n    }\n    else\n    {\n      if ( v10 != 112 )\n        goto LABEL_22;\n      HIBYTE(v78) = 1;\n    }\n  }\n  if ( !byte_621540 )\n  {\n    if ( !v6 )\n      goto LABEL_63;\n    v14 = __xstat(1, v6, &stat_buf);\n    if ( (_BYTE)v7 || !v14 )\n    {\n      if ( v14 || (stat_buf.st_mode & 0xF000) == 0x4000 )\n        goto LABEL_63;\nLABEL_140:\n      v49 = sub_40EA00(4LL, v6);\n      v50 = dcgettext(0LL, \"target %s is not a directory\", 5);\n      error(1, 0, v50, v49);\n    }\n    v51 = sub_40EA00(4LL, v6);\n    v52 = dcgettext(0LL, \"failed to access %s\", 5);\n    v53 = __errno_location();\n    error(1, *v53, v52, v51);\nLABEL_142:\n    v54 = \"extra operand %s\";\n    v55 = sub_40EA00(4LL, v67[2]);\nLABEL_143:\n    v56 = dcgettext(0LL, v54, 5);\n    error(0, 0, v56, v55);\n    goto LABEL_22;\n  }\n  if ( byte_621541 )\n    goto LABEL_152;\n  if ( v6 )\n  {\n    v26 = dcgettext(0LL, \"target directory not allowed when installing a directory\", 5);\n    error(1, 0, v26);\n    goto LABEL_97;\n  }\nLABEL_63:\n  v15 = 0;\n  if ( v3 )\n  {\n    v39 = dcgettext(0LL, \"backup type\", 5);\n    v15 = sub_40A930(v39, v67);\n  }\n  LODWORD(v74) = v15;\n  sub_40A380(v68);\n  if ( !BYTE5(v79) )\n    goto LABEL_110;\n  if ( BYTE1(v79) || v73 )\n  {\n    v58 = dcgettext(0LL, \"cannot set target context and preserve it\", 5);\n    error(1, 0, v58);\n    goto LABEL_148;\n  }\n  while ( 2 )\n  {\n    LODWORD(v8) = (_DWORD)v8 - dword_61F4DC;\n    v67 = (char **)(v5 + 8LL * dword_61F4DC);\n    LOBYTE(v16) = v6 == 0LL;\n    v17 = v16 & ((unsigned __int8)byte_621540 ^ 1);\n    if ( ((v6 == 0LL) & (unsigned __int8)(byte_621540 ^ 1)) >= (int)v8 )\n      goto LABEL_145;\n    if ( (_BYTE)v4 )\n    {\n      if ( !v6 )\n      {\n        if ( (int)v8 <= 2 )\n          goto LABEL_72;\n        goto LABEL_142;\n      }\n      v57 = dcgettext(0LL, \"cannot combine --target-directory (-t) and --no-target-directory (-T)\", 5);\n      error(1, 0, v57);\nLABEL_145:\n      if ( (_DWORD)v8 == 1 )\n      {\n        v54 = \"missing destination file operand after %s\";\n        v55 = sub_40EA00(4LL, *v67);\n        goto LABEL_143;\n      }\nLABEL_148:\n      v20 = \"missing file operand\";\n      goto LABEL_149;\n    }\nLABEL_97:\n    if ( !(_BYTE)v17 )\n      goto LABEL_72;\n    v6 = 0LL;\n    if ( (_DWORD)v8 == 1 )\n      goto LABEL_72;\n    v5 = 1LL;\n    v6 = v67[(int)v8 - 1];\n    v27 = sub_40AD40(v6);\n    v28 = -1LL;\n    v29 = (_BYTE *)v27;\n    do\n    {\n      if ( !v28 )\n        break;\n      v30 = *v29++ == (_BYTE)v4;\n      --v28;\n    }\n    while ( !v30 );\n    if ( -v28 != 2 )\n      v5 = *(_BYTE *)(v27 + -v28 - 2 - 1) == 47;\n    if ( __xstat(1, v6, &stat_buf) )\n    {\n      v4 = *__errno_location();\n      if ( v4 )\n      {\n        if ( v4 != 2 )\n          goto LABEL_153;\nLABEL_107:\n        if ( (_DWORD)v5 )\n          goto LABEL_154;\n        v6 = 0LL;\n        if ( (_DWORD)v8 == 2 )\n          goto LABEL_72;\n        v8 = (int *)sub_40EA00(4LL, v67[(int)v8 - 1]);\n        v31 = dcgettext(0LL, \"target %s is not a directory\", 5);\n        error(1, 0, v31, v8);\nLABEL_110:\n        if ( v73 )\n        {\n          v32 = __errno_location();\n          *v32 = 95;\n          v8 = v32;\n          v7 = sub_40EC50(v73);\n          v33 = dcgettext(0LL, \"failed to set default file creation context to %s\", 5);\n          error(1, *v8, v33, v7);\nLABEL_112:\n          sub_409A90();\n          if ( v6 )\n          {\n            v34 = 0LL;\n            sub_4056A0(&v74);\n            v69 = 0;\n            v71 = (int)v8;\n            do\n            {\n              v35 = v67[v34];\n              v36 = sub_40AD40(v67[v34]);\n              v37 = sub_40B0C0(v6, v36, 0LL);\n              v38 = (void *)v37;\n              if ( (!((unsigned __int8)v7 & ((_DWORD)v34 == 0)) || (unsigned __int8)sub_403DB0(v35, v37, &v74, 1LL))\n                && (unsigned __int8)sub_404090(v35, (char *)v38) )\n              {\n                free(v38);\n              }\n              else\n              {\n                free(v38);\n                v69 = 1;\n              }\n              ++v34;\n            }\n            while ( v71 > (int)v34 );\n            return v69;\n          }\n          v6 = v67[1];\n          v40 = *v67;\n          if ( (_BYTE)v7 )\n          {\n            v41 = sub_403DB0(*v67, v67[1], &v74, 0LL);\n            v42 = 0;\n            if ( !v41 )\n              goto LABEL_125;\n            goto LABEL_134;\n          }\n          return (unsigned __int8)((unsigned __int64)sub_404090(*v67, v67[1]) ^ 1);\n        }\n        continue;\n      }\n    }\n    break;\n  }\n  if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n  {\n    v4 = 0;\n    goto LABEL_107;\n  }\n  LODWORD(v8) = (_DWORD)v8 - 1;\n  v6 = v67[(int)v8];\nLABEL_72:\n  if ( v70 )\n  {\n    v18 = sub_40CA80(v70);\n    v19 = (void *)v18;\n    if ( v18 )\n    {\n      mode = sub_40CE50(0LL, 0LL, 0LL, v18, 0LL);\n      dword_61F444 = sub_40CE50(0LL, 1LL, 0LL, v19, &dword_61F440);\n      free(v19);\n      goto LABEL_75;\n    }\n    v60 = sub_40EC50(v70);\n    v61 = dcgettext(0LL, \"invalid mode %s\", 5);\n    error(1, 0, v61, v60);\nLABEL_152:\n    v62 = dcgettext(0LL, \"the strip option may not be used when installing a directory\", 5);\n    error(1, 0, v62);\nLABEL_153:\n    v63 = sub_40EA00(4LL, v6);\n    v64 = dcgettext(0LL, \"failed to access %s\", 5);\n    error(1, v4, v64, v63);\nLABEL_154:\n    v65 = sub_40EA00(4LL, v6);\n    v66 = dcgettext(0LL, \"target %s is not a directory\", 5);\n    error(1, v4, v66, v65);\n    start();\n  }\nLABEL_75:\n  if ( v72 && !byte_621541 )\n  {\n    v45 = dcgettext(0LL, \"WARNING: ignoring --strip-program option as -s option was not specified\", 5);\n    error(0, 0, v45);\n  }\n  if ( byte_621542 )\n  {\n    if ( HIBYTE(v78) )\n    {\n      v20 = \"options --compare (-C) and --preserve-timestamps are mutually exclusive\";\n    }\n    else\n    {\n      v20 = \"options --compare (-C) and --strip are mutually exclusive\";\n      if ( !byte_621541 )\n      {\n        if ( mode & 0xFFFF0E00 )\n        {\n          v44 = dcgettext(\n                  0LL,\n                  \"the --compare (-C) option is ignored when you specify a mode with non-permission bits\",\n                  5);\n          error(0, 0, v44);\n        }\n        goto LABEL_83;\n      }\n    }\nLABEL_149:\n    v59 = dcgettext(0LL, v20, 5);\n    error(0, 0, v59);\nLABEL_22:\n    sub_4046F0(1);\n  }\nLABEL_83:\n  if ( nptr )\n  {\n    v21 = getpwnam(nptr);\n    if ( v21 )\n    {\n      v22 = v21->pw_uid;\n      goto LABEL_86;\n    }\n    if ( (unsigned int)sub_411570(nptr) || (v22 = stat_buf.st_dev, stat_buf.st_dev > 0xFFFFFFFF) )\n    {\n      v8 = (int *)sub_40EC50(nptr);\n      v46 = dcgettext(0LL, \"invalid user %s\", 5);\n      error(1, 0, v46, v8);\nLABEL_131:\n      if ( (unsigned int)sub_411570(qword_621548) || (v24 = stat_buf.st_dev, stat_buf.st_dev > 0xFFFFFFFF) )\n      {\n        v40 = (char *)sub_40EC50(qword_621548);\n        v47 = dcgettext(0LL, \"invalid group %s\", 5);\n        error(1, 0, v47, v40);\nLABEL_134:\n        v42 = sub_404090(v40, v6);\nLABEL_125:\n        return v42 & 1 ^ 1;\n      }\n      goto LABEL_90;\n    }\nLABEL_86:\n    owner = v22;\n    endpwent();\n  }\n  else\n  {\n    owner = -1;\n  }\n  if ( qword_621548 )\n  {\n    v23 = getgrnam(qword_621548);\n    if ( !v23 )\n      goto LABEL_131;\n    v24 = v23->gr_gid;\nLABEL_90:\n    group = v24;\n    endgrent();\n  }\n  else\n  {\n    group = -1;\n  }\n  if ( !byte_621540 )\n    goto LABEL_112;\n  return (unsigned int)sub_40F910((unsigned int)v8, v67, sub_403F50, &v74);\n}\n", 
            "funcStartAddr": "0x403050L", 
            "funcEndAddr": "0x403cd0L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x403cd0L", 
            "funcEndAddr": "0x403cfbL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "void *sub_403CFB()\n{\n  void *result; // rax\n\n  result = &unk_61F4E8;\n  if ( &unk_61F4E8 != &unk_61F4E8 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x403cfbL", 
            "funcEndAddr": "0x403d1aL", 
            "funcName": "sub_403CFB"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403D1A()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x403d1aL", 
            "funcEndAddr": "0x403d51L", 
            "funcName": "sub_403D1A"
        }, 
        {
            "decompiledFuncCode": "void *sub_403D51()\n{\n  void *result; // rax\n\n  if ( !byte_61F528 )\n  {\n    while ( qword_61F530 < (unsigned __int64)(&qword_61EE48 - qword_61EE40 - 1) )\n      ((void (*)(void))qword_61EE40[++qword_61F530])();\n    result = sub_403CFB();\n    byte_61F528 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403d51L", 
            "funcEndAddr": "0x403da8L", 
            "funcName": "sub_403D51"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403DA8()\n{\n  return sub_403D1A();\n}\n", 
            "funcStartAddr": "0x403da8L", 
            "funcEndAddr": "0x403dadL", 
            "funcName": "sub_403DA8"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403DB0(_BYTE *a1, _BYTE *a2, __int64 a3, char a4)\n{\n  __int64 v4; // rbp\n  __int64 v5; // rbp\n  int *v6; // r12\n  __int64 v7; // rbx\n  char *v8; // rax\n  int v10; // eax\n  int v11; // er12\n  int v12; // ebp\n  __int64 v13; // rbp\n  char *v14; // rbx\n  int *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  int v18; // [rsp+8h] [rbp-20h]\n\n  v4 = a3;\n  if ( !a4 && *a1 == 47 && *a2 == 47 )\n  {\n    v18 = 0;\n    sub_40F8A0(&v18);\n    if ( sub_40C5E0(a2, &v18, &sub_404020, v4) == -1 )\n    {\n      v13 = sub_40EA00(4LL, a2);\n      v14 = dcgettext(0LL, \"cannot create directory %s\", 5);\n      v15 = __errno_location();\n      error(0, *v15, v14, v13);\n      return 0LL;\n    }\n    return 1LL;\n  }\n  v18 = 0;\n  v5 = sub_40C5E0(a2, &v18, &sub_404020, a3);\n  v6 = __errno_location();\n  if ( v5 == -1 )\n  {\n    v7 = sub_40EA00(4LL, a2);\n    v8 = dcgettext(0LL, \"cannot create directory %s\", 5);\n    error(0, *v6, v8, v7);\n    sub_40F770(&v18, 1LL);\n    sub_40F8A0(&v18);\n    return 0LL;\n  }\n  v10 = sub_40F770(&v18, 0LL);\n  v11 = *v6;\n  v12 = v10;\n  sub_40F8A0(&v18);\n  if ( v12 > 0 )\n    return 0LL;\n  if ( !v12 )\n    return 1LL;\n  v16 = sub_40EA00(4LL, a2);\n  v17 = dcgettext(0LL, \"cannot create directory %s\", 5);\n  error(0, v11, v17, v16);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x403db0L", 
            "funcEndAddr": "0x403f4aL", 
            "funcName": "sub_403DB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403F50(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  int v4; // eax\n  unsigned int v5; // ebp\n\n  v3 = a3;\n  v4 = (unsigned __int64)sub_40C770(\n                           a1,\n                           a2,\n                           &sub_404020,\n                           a3,\n                           (unsigned int)dword_61F444,\n                           sub_404000,\n                           (unsigned int)dword_61F440,\n                           owner,\n                           group,\n                           0LL) ^ 1;\n  v5 = (unsigned __int8)v4;\n  if ( !(_BYTE)v4 && *(_BYTE *)(v3 + 33) )\n    *__errno_location() = 95;\n  return v5;\n}\n", 
            "funcStartAddr": "0x403f50L", 
            "funcEndAddr": "0x403fb2L", 
            "funcName": "sub_403F50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403FC0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  sub_40EA00(4LL, a1);\n  dcgettext(0LL, \"creating directory %s\", 5);\n  return sub_404AE0(stdout, a7);\n}\n", 
            "funcStartAddr": "0x403fc0L", 
            "funcEndAddr": "0x403ff7L", 
            "funcName": "sub_403FC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404000(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a2 + 46) )\n    result = sub_403FC0(a1, a2, a3, a4, a5, a6, a7);\n  return result;\n}\n", 
            "funcStartAddr": "0x404000L", 
            "funcEndAddr": "0x404012L", 
            "funcName": "sub_404000"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404020(__int64 a1, const char *a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  int result; // eax\n  __int64 v5; // rdx\n  __int64 v6; // rcx\n  __int64 v7; // r8\n  __int64 v8; // r9\n  char v9; // [rsp+0h] [rbp-28h]\n\n  v3 = a3;\n  if ( *(_BYTE *)(a3 + 33) )\n    *__errno_location() = 95;\n  result = mkdir(a2, 0x1EDu);\n  if ( !result )\n  {\n    if ( *(_BYTE *)(v3 + 46) )\n    {\n      sub_403FC0(a1, 493LL, v5, v6, v7, v8, v9);\n      result = 0;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404020L", 
            "funcEndAddr": "0x404081L", 
            "funcName": "sub_404020"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404090(char *file, char *filename, __int64 a3)\n{\n  __int64 v3; // rbp\n  char *v4; // rbx\n  __mode_t v5; // er14\n  __uid_t v6; // eax\n  __gid_t v7; // eax\n  int v8; // er14\n  int v9; // er15\n  size_t v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebp\n  __pid_t v14; // eax\n  const char *v15; // rsi\n  char *v16; // rbp\n  int *v17; // rax\n  __int64 v18; // rbp\n  char *v19; // rbx\n  int *v20; // rax\n  const char *v21; // rsi\n  __int64 v22; // rbp\n  char *v23; // rbx\n  int *v24; // rax\n  const char *v25; // rsi\n  __int64 v26; // r12\n  char *v27; // rbp\n  int *v28; // rax\n  const char *v29; // rdx\n  char *v30; // rax\n  char v31; // al\n  __int64 v32; // r12\n  size_t v33; // rbx\n  char *v34; // rax\n  char *v35; // r13\n  _BYTE *v36; // rdx\n  int *v37; // rax\n  int *v38; // r14\n  int *v39; // rax\n  int *v40; // r14\n  char *v41; // rbp\n  int *v42; // rax\n  __int64 v43; // [rsp+8h] [rbp-1F0h]\n  struct stat stat_buf; // [rsp+10h] [rbp-1E8h]\n  struct stat v45; // [rsp+A0h] [rbp-158h]\n  struct stat v46; // [rsp+130h] [rbp-C8h]\n\n  v3 = a3;\n  v4 = filename;\n  if ( *(_BYTE *)(a3 + 31) && __xstat(1, file, &stat_buf) )\n    goto LABEL_46;\n  if ( byte_621542 )\n  {\n    v5 = mode;\n    if ( !(mode & 0xFFFF0E00)\n      && !__lxstat(1, file, &v45)\n      && !__lxstat(1, filename, &v46)\n      && (v45.st_mode & 0xF000) == 0x8000\n      && (v46.st_mode & 0xF000) == 0x8000\n      && !((v46.st_mode | v45.st_mode) & 0xFFFF0E00)\n      && v45.st_size == v46.st_size\n      && v5 == (v46.st_mode & 0xFFF) )\n    {\n      v6 = owner;\n      if ( owner != -1 || (v37 = __errno_location(), *v37 = 0, v38 = v37, v6 = getuid(), v6 != -1) || !*v38 )\n      {\n        if ( v6 == v46.st_uid )\n        {\n          v7 = group;\n          if ( group != -1 || (v39 = __errno_location(), *v39 = 0, v40 = v39, v7 = getgid(), v7 != -1) || !*v40 )\n          {\n            if ( v7 == v46.st_gid )\n            {\n              if ( dword_621560 && *(_BYTE *)(v3 + 37) )\n                goto LABEL_77;\n              v8 = open(file, 0);\n              if ( v8 >= 0 )\n              {\n                v9 = open(filename, 0);\n                if ( v9 >= 0 )\n                {\n                  do\n                  {\n                    v11 = sub_40B1C0(v8, &unk_61F540, 0x1000uLL);\n                    if ( !v11 )\n                    {\n                      close(v8);\n                      close(v9);\n                      goto LABEL_25;\n                    }\n                    v43 = v11;\n                    v10 = sub_40B1C0(v9, &unk_620540, 0x1000uLL);\n                  }\n                  while ( v10 == v43 && !memcmp(&unk_61F540, &unk_620540, v10) );\n                  close(v8);\n                  close(v9);\n                }\n                else\n                {\n                  close(v8);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  while ( 1 )\n  {\n    if ( !(unsigned __int8)sub_409810(file, v4, 0LL, v3, &v46, 0LL) )\n      return 0;\nLABEL_25:\n    if ( !byte_621541 )\n    {\n      if ( *(_BYTE *)(v3 + 31) )\n        goto LABEL_27;\n      goto LABEL_29;\n    }\n    v14 = fork();\n    if ( v14 == -1 )\n    {\n      v15 = \"fork system call failed\";\nLABEL_43:\n      v16 = dcgettext(0LL, v15, 5);\n      v17 = __errno_location();\n      error(0, *v17, v16);\n      goto LABEL_44;\n    }\n    if ( v14 )\n      break;\n    v41 = arg;\n    execlp(arg, arg, v4, 0LL);\n    v3 = sub_40EA00(4LL, v41);\n    v4 = dcgettext(0LL, \"cannot run %s\", 5);\n    v42 = __errno_location();\n    error(1, *v42, v4, v3);\nLABEL_77:\n    *__errno_location() = 95;\n  }\n  if ( waitpid(v14, (int *)&v46, 0) < 0 )\n  {\n    v15 = \"waiting for strip\";\n    goto LABEL_43;\n  }\n  if ( !(v46.st_dev & 0x7F | BYTE1(v46.st_dev)) )\n  {\n    if ( *(_BYTE *)(v3 + 31) )\n    {\n      if ( byte_621541 )\n        goto LABEL_28;\nLABEL_27:\n      if ( (stat_buf.st_mode & 0xF000) != 0x8000 )\n      {\nLABEL_28:\n        v46.st_dev = stat_buf.st_atim.tv_sec;\n        v46.st_ino = stat_buf.st_atim.tv_nsec;\n        *(timespec *)&v46.st_nlink = stat_buf.st_mtim;\n        if ( (unsigned int)sub_410AA0(v4) )\n        {\n          v21 = \"cannot set timestamps for %s\";\n          v22 = sub_40EA00(4LL, v4);\n          goto LABEL_47;\n        }\n      }\n    }\nLABEL_29:\n    if ( (group & owner) != -1 && lchown(v4, owner, group) )\n    {\n      v25 = \"cannot change ownership of %s\";\n      v26 = sub_40EA00(4LL, v4);\n    }\n    else\n    {\n      v12 = 1;\n      if ( !chmod(v4, mode) )\n      {\nLABEL_32:\n        if ( byte_61F44C && dword_621560 == 1 && !__lxstat(1, v4, &v46) )\n        {\n          if ( byte_61F430 && *v4 == 47 )\n          {\n            v31 = v4[1];\n            v32 = (__int64)(v4 + 1);\n            if ( v31 == 47 )\n            {\n              while ( 1 )\n              {\n                v31 = *(_BYTE *)(v32 + 1);\n                v36 = (_BYTE *)(v32 + 1);\n                if ( v31 != 47 )\n                  break;\n                ++v32;\n              }\n            }\n            else\n            {\n              v36 = v4 + 1;\n              v32 = (__int64)v4;\n            }\n            if ( v31 )\n            {\n              do\n                ++v36;\n              while ( *v36 && *v36 != 47 );\n              v33 = (size_t)&v36[-v32];\n              v34 = (char *)malloc((size_t)&v36[-v32 + 2]);\n              v35 = v34;\n              if ( v34 )\n              {\n                *(_WORD *)stpncpy(v34, (const char *)v32, v33) = 47;\n                free(v35);\n              }\n            }\n          }\n          byte_61F430 = 0;\n          *__errno_location() = 95;\n        }\n        return v12;\n      }\n      v25 = \"cannot change permissions of %s\";\n      v26 = sub_40EA00(4LL, v4);\n    }\n    v27 = dcgettext(0LL, v25, 5);\n    v28 = __errno_location();\n    v29 = v27;\n    v12 = 0;\n    error(0, *v28, v29, v26);\n    goto LABEL_32;\n  }\n  v30 = dcgettext(0LL, \"strip process terminated abnormally\", 5);\n  error(0, 0, v30);\nLABEL_44:\n  if ( !unlink(v4) )\n    return 0;\n  v18 = sub_40EA00(4LL, v4);\n  v19 = dcgettext(0LL, \"cannot unlink %s\", 5);\n  v20 = __errno_location();\n  error(1, *v20, v19, v18);\nLABEL_46:\n  v21 = \"cannot stat %s\";\n  v22 = sub_40EA00(4LL, file);\nLABEL_47:\n  v23 = dcgettext(0LL, v21, 5);\n  v24 = __errno_location();\n  error(0, *v24, v23, v22);\n  return 0;\n}\n", 
            "funcStartAddr": "0x404090L", 
            "funcEndAddr": "0x4046ebL", 
            "funcName": "sub_404090"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_4046F0(int status)\n{\n  char *v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  const char **v24; // rax\n  char *v25; // rbp\n  char *v26; // rax\n  __int64 v27; // r8\n  __int64 v28; // r9\n  char *v29; // rax\n  char *v30; // r12\n  char *v31; // rax\n  __int64 v32; // r8\n  __int64 v33; // r9\n  char *v34; // rax\n  __int64 v35; // r8\n  __int64 v36; // r9\n  char *v37; // rax\n  __int64 v38; // r8\n  __int64 v39; // r9\n  char *v40; // rax\n  char *v41; // rax\n  __int64 v42; // r8\n  __int64 v43; // r9\n  char *v44; // rax\n  __int64 v45; // rcx\n  __int64 v46; // r8\n  __int64 v47; // r9\n  const char *v48; // [rsp+0h] [rbp-88h]\n  const char *v49; // [rsp+8h] [rbp-80h]\n  const char *v50; // [rsp+10h] [rbp-78h]\n  const char *v51; // [rsp+18h] [rbp-70h]\n  const char *v52; // [rsp+20h] [rbp-68h]\n  const char *v53; // [rsp+28h] [rbp-60h]\n  const char *v54; // [rsp+30h] [rbp-58h]\n  const char *v55; // [rsp+38h] [rbp-50h]\n  const char *v56; // [rsp+40h] [rbp-48h]\n  const char *v57; // [rsp+48h] [rbp-40h]\n  const char *v58; // [rsp+50h] [rbp-38h]\n  const char *v59; // [rsp+58h] [rbp-30h]\n  __int64 v60; // [rsp+60h] [rbp-28h]\n  __int64 v61; // [rsp+68h] [rbp-20h]\n\n  v1 = s;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(\n         0LL,\n         \"Usage: %s [OPTION]... [-T] SOURCE DEST\\n\"\n         \"  or:  %s [OPTION]... SOURCE... DIRECTORY\\n\"\n         \"  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n\"\n         \"  or:  %s [OPTION]... -d DIRECTORY...\\n\",\n         5);\n  __printf_chk(1LL, v3, v1, v1, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"This install program copies files (often just compiled) into destination\\n\"\n         \"locations you choose.  If you want to download and install a ready-to-use\\n\"\n         \"package on a GNU/Linux system, you should instead be using a package manager\\n\"\n         \"like yum(1) or apt-get(1).\\n\"\n         \"\\n\"\n         \"In the first three forms, copy SOURCE to DEST or multiple SOURCE(s) to\\n\"\n         \"the existing DIRECTORY, while setting permission modes and owner/group.\\n\"\n         \"In the 4th form, create all components of the given DIRECTORY(ies).\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"      --backup[=CONTROL]  make a backup of each existing destination file\\n\"\n         \"  -b                  like --backup but does not accept an argument\\n\"\n         \"  -c                  (ignored)\\n\"\n         \"  -C, --compare       compare each pair of source and destination files, and\\n\"\n         \"                        in some cases, do not modify the destination at all\\n\"\n         \"  -d, --directory     treat all arguments as directory names; create all\\n\"\n         \"                        components of the specified directories\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  -D                  create all leading components of DEST except the last,\\n\"\n          \"                        or all components of --target-directory,\\n\"\n          \"                        then copy SOURCE to DEST\\n\"\n          \"  -g, --group=GROUP   set group ownership, instead of process' current group\\n\"\n          \"  -m, --mode=MODE     set permission mode (as in chmod), instead of rwxr-xr-x\\n\"\n          \"  -o, --owner=OWNER   set ownership (super-user only)\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -p, --preserve-timestamps   apply access/modification times of SOURCE files\\n\"\n          \"                        to corresponding destination files\\n\"\n          \"  -s, --strip         strip symbol tables\\n\"\n          \"      --strip-program=PROGRAM  program used to strip binaries\\n\"\n          \"  -S, --suffix=SUFFIX  override the usual backup suffix\\n\"\n          \"  -t, --target-directory=DIRECTORY  copy all SOURCE arguments into DIRECTORY\\n\"\n          \"  -T, --no-target-directory  treat DEST as a normal file\\n\"\n          \"  -v, --verbose       print the name of each directory as it is created\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --preserve-context  preserve SELinux security context\\n\"\n          \"  -Z                      set SELinux security context of destination\\n\"\n          \"                            file and each created directory to default type\\n\"\n          \"      --context[=CTX]     like -Z, or if CTX is specified then set the\\n\"\n          \"                            SELinux or SMACK security context to CTX\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\n\"\n          \"The version control method may be selected via the --backup option or through\\n\"\n          \"the VERSION_CONTROL environment variable.  Here are the values:\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"  none, off       never make backups (even if --backup is given)\\n\"\n          \"  numbered, t     make numbered backups\\n\"\n          \"  existing, nil   numbered if numbered backups exist, simple otherwise\\n\"\n          \"  simple, never   always make simple backups\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v48 = \"[\";\n  v24 = &v48;\n  v49 = \"test invocation\";\n  v50 = \"coreutils\";\n  v51 = \"Multi-call invocation\";\n  v52 = \"sha224sum\";\n  v53 = \"sha2 utilities\";\n  v54 = \"sha256sum\";\n  v55 = \"sha2 utilities\";\n  v56 = \"sha384sum\";\n  v57 = \"sha2 utilities\";\n  v58 = \"sha512sum\";\n  v59 = \"sha2 utilities\";\n  v60 = 0LL;\n  v61 = 0LL;\n  do\n    v24 += 2;\n  while ( *v24 && strcmp(\"install\", *v24) );\n  v25 = (char *)v24[1];\n  if ( v25 )\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_417166, \"https://www.gnu.org/software/coreutils/\", v27, v28);\n    v29 = setlocale(5, 0LL);\n    if ( !v29 || !strncmp(v29, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v37 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v37, &unk_417166, \"https://www.gnu.org/software/coreutils/\", v38, v39);\n    v40 = setlocale(5, 0LL);\n    if ( !v40 || !strncmp(v40, \"en_\", 3uLL) )\n    {\n      v25 = \"install\";\n      v41 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v30 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v41, \"https://www.gnu.org/software/coreutils/\", \"install\", v42, v43);\nLABEL_12:\n      v34 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v34, v25, v30, v35, v36);\nLABEL_3:\n      exit(status);\n    }\n    v25 = \"install\";\n  }\n  v44 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v44, \"install\", v45, v46, v47);\nLABEL_10:\n  v30 = \"Multi-call invocation\" + 10;\n  v31 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v31, \"https://www.gnu.org/software/coreutils/\", \"install\", v32, v33);\n  if ( v25 != \"install\" )\n    v30 = \"\";\n  goto LABEL_12;\n}\n", 
            "funcStartAddr": "0x4046f0L", 
            "funcEndAddr": "0x404addL", 
            "funcName": "sub_4046F0"
        }, 
        {
            "decompiledFuncCode": "int __usercall sub_404AE0@<eax>(FILE *s@<rdi>)\n{\n  char *v1; // rax\n\n  fputs_unlocked(::s, s);\n  fwrite_unlocked(&unk_4185C0, 1uLL, 2uLL, s);\n  sub_412A70(s);\n  v1 = s->_IO_write_ptr;\n  if ( v1 >= s->_IO_write_end )\n  {\n    LODWORD(v1) = __overflow(s, 10);\n  }\n  else\n  {\n    s->_IO_write_ptr = v1 + 1;\n    *v1 = 10;\n  }\n  return (int)v1;\n}\n", 
            "funcStartAddr": "0x404ae0L", 
            "funcEndAddr": "0x404bcfL", 
            "funcName": "sub_404AE0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_404BD0(char *name, __int16 a2)\n{\n  if ( (a2 & 0xF000) == 40960 )\n    return 1;\n  if ( (unsigned __int8)sub_4112A0() )\n    return 1;\n  return euidaccess(name, 2) == 0;\n}\n", 
            "funcStartAddr": "0x404bd0L", 
            "funcEndAddr": "0x404c14L", 
            "funcName": "sub_404BD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404C20(int fd, size_t a2)\n{\n  size_t v2; // rbx\n  size_t v3; // rbp\n  __int64 v4; // rax\n  void *v6; // rax\n\n  v2 = a2;\n  if ( !buf )\n  {\n    v6 = calloc(n, 1uLL);\n    if ( v6 )\n    {\n      buf = v6;\n    }\n    else\n    {\n      buf = &unk_621580;\n      n = 1024LL;\n    }\n  }\n  if ( !a2 )\n    return 1LL;\n  while ( 1 )\n  {\n    v3 = v2;\n    if ( n <= v2 )\n      v3 = n;\n    v4 = sub_40B240(fd, buf, v3);\n    if ( v4 != v3 )\n      break;\n    v2 -= v4;\n    if ( !v2 )\n      return 1LL;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x404c20L", 
            "funcEndAddr": "0x404cc2L", 
            "funcName": "sub_404C20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404CD0(int a1, __off_t a2, __off_t a3)\n{\n  int v3; // ebx\n  __int64 result; // rax\n  int v5; // eax\n\n  v3 = fallocate(a1, 3, a2, a3);\n  if ( v3 >= 0 || (v5 = *__errno_location(), v5 != 38) && v5 != 95 )\n    result = (unsigned int)v3;\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x404cd0L", 
            "funcEndAddr": "0x404d07L", 
            "funcName": "sub_404CD0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404D10(int a1, const char *a2, __mode_t a3)\n{\n  int result; // eax\n\n  if ( a1 >= 0 )\n    result = fchmod(a1, a3);\n  else\n    result = chmod(a2, a3);\n  return result;\n}\n", 
            "funcStartAddr": "0x404d10L", 
            "funcEndAddr": "0x404d2dL", 
            "funcName": "sub_404D10"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_404D30()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  char *v2; // rax\n\n  v0 = __errno_location();\n  *v0 = 95;\n  v1 = v0;\n  v2 = dcgettext(0LL, \"failed to restore the default file creation context\", 5);\n  error(1, *v1, v2);\n  return sub_404D70();\n}\n", 
            "funcStartAddr": "0x404d30L", 
            "funcEndAddr": "0x404d70L", 
            "funcName": "sub_404D30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_404D70(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  __int64 v6; // r8\n  __int64 v7; // r9\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // r8\n  __int64 v12; // r9\n  char *v13; // rax\n\n  v3 = a3;\n  v4 = sub_40E920(1LL, 4LL, a2);\n  v5 = sub_40E920(0LL, 4LL, a1);\n  __printf_chk(1LL, \"%s -> %s\", v5, v4, v6, v7);\n  if ( v3 )\n  {\n    v8 = sub_40EA00(4LL, v3);\n    v9 = dcgettext(0LL, \" (backup: %s)\", 5);\n    __printf_chk(1LL, v9, v8, v10, v11, v12);\n  }\n  v13 = stdout->_IO_write_ptr;\n  if ( v13 >= stdout->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stdout, 10);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x404d70L", 
            "funcEndAddr": "0x404e1eL", 
            "funcName": "sub_404D70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404E20(__int64 a1, char *a2, unsigned int *a3)\n{\n  unsigned int *v3; // rbp\n  char *v4; // rbx\n  char *v5; // rdx\n  FILE *v6; // rdi\n  __int64 result; // rax\n  char *v8; // rbx\n  char *v9; // rax\n  char v10; // [rsp+4h] [rbp-34h]\n  char v11; // [rsp+Eh] [rbp-2Ah]\n\n  v3 = a3;\n  if ( sub_404BD0(a2, *a3) )\n  {\n    sub_40EA00(4LL, a2);\n    v8 = s;\n    v9 = dcgettext(0LL, \"%s: overwrite %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v9, v8);\n    result = ((__int64 (*)(void))sub_4119A0)();\n  }\n  else\n  {\n    sub_40AF30(*v3, &v10);\n    v11 = 0;\n    sub_40EA00(4LL, a2);\n    v4 = s;\n    if ( *(_BYTE *)(a1 + 24) || *(_DWORD *)(a1 + 20) & 0xFFFF00 )\n      v5 = dcgettext(0LL, \"%s: replace %s, overriding mode %04lo (%s)? \", 5);\n    else\n      v5 = dcgettext(0LL, \"%s: unwritable %s (mode %04lo, %s); try anyway? \", 5);\n    v6 = stderr;\n    __fprintf_chk(stderr, 1LL, v5, v4);\n    result = ((__int64 (__fastcall *)(FILE *, __int64))sub_4119A0)(v6, 1LL);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404e20L", 
            "funcEndAddr": "0x404f4cL", 
            "funcName": "sub_404E20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404F50(__int64 a1, __int64 a2, unsigned __int8 a3, char a4, char a5)\n{\n  char v5; // bp\n  unsigned int v6; // ebx\n  int v7; // eax\n  __int64 result; // rax\n  __int64 v9; // rbp\n  char *v10; // rax\n  __int64 v11; // rcx\n  __int64 v12; // r8\n  __int64 v13; // r9\n  __int64 v14; // r13\n  __int64 v15; // rbp\n  char *v16; // rbx\n  int *v17; // rax\n\n  v5 = a4;\n  v6 = a1;\n  v7 = sub_409E90(4294967196LL, a1, 4294967196LL, a2, (unsigned __int8)(a5 != 0) << 10, a3);\n  if ( v7 < 0 )\n  {\n    v14 = sub_40E920(1LL, 4LL, a1);\n    v15 = sub_40E920(0LL, 4LL, a2);\n    v16 = dcgettext(0LL, \"cannot create hard link %s to %s\", 5);\n    v17 = __errno_location();\n    error(0, *v17, v16, v15, v14);\n    result = 0LL;\n  }\n  else\n  {\n    LOBYTE(v6) = v5 & (v7 > 0);\n    if ( (_BYTE)v6 )\n    {\n      v9 = sub_40EA00(4LL, a2);\n      v10 = dcgettext(0LL, \"removed %s\\n\", 5);\n      __printf_chk(1LL, v10, v9, v11, v12, v13);\n      result = v6;\n    }\n    else\n    {\n      result = 1LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404f50L", 
            "funcEndAddr": "0x405053L", 
            "funcName": "sub_404F50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405060(int a1, __int64 a2, char a3, __off_t a4)\n{\n  char v4; // r12\n  __off_t v5; // rbx\n  __off_t v6; // rax\n  __int64 v8; // rax\n  const char *v9; // rsi\n  __int64 v10; // rbp\n  __int64 v11; // rax\n  char *v12; // rbx\n  int *v13; // rax\n\n  v4 = a3;\n  v5 = a4;\n  v6 = lseek(a1, a4, 1);\n  if ( v6 < 0 )\n  {\n    v11 = sub_40EA00(4LL, a2);\n    v9 = \"cannot lseek %s\";\n    v10 = v11;\n  }\n  else\n  {\n    if ( !v4 || (int)sub_404CD0(a1, v6 - v5, v5) >= 0 )\n      return 1LL;\n    v8 = sub_40EA00(4LL, a2);\n    v9 = \"error deallocating %s\";\n    v10 = v8;\n  }\n  v12 = dcgettext(0LL, v9, 5);\n  v13 = __errno_location();\n  error(0, *v13, v12, v10);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x405060L", 
            "funcEndAddr": "0x405117L", 
            "funcName": "sub_405060"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_405120@<rax>(char *a1@<rdx>, size_t a2@<rcx>, unsigned int a3@<ebp>, int a4@<edi>, int a5@<esi>, size_t a6@<r8>, char a7@<r9b>, __int64 a8, __int64 a9, size_t a10, _QWORD *a11, _BYTE *a12)\n{\n  unsigned int v12; // er14\n  unsigned __int64 v13; // r15\n  size_t v14; // rdx\n  ssize_t v15; // rax\n  int *v16; // rax\n  int *v17; // rbx\n  unsigned int v18; // er15\n  __int64 v19; // rbp\n  char *v20; // rax\n  int v22; // eax\n  char *v23; // r13\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rbx\n  void *v26; // r11\n  _BYTE *v27; // rsi\n  size_t v28; // rdx\n  int v29; // eax\n  char v30; // dl\n  bool v31; // al\n  int v32; // er9\n  __int64 v33; // rax\n  char v34; // r9\n  unsigned int v35; // eax\n  bool v36; // zf\n  __int64 v37; // rbx\n  char *v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rbx\n  int *v41; // rax\n  __off_t v42; // r13\n  void *v43; // [rsp+8h] [rbp-A0h]\n  int v44; // [rsp+8h] [rbp-A0h]\n  int v45; // [rsp+18h] [rbp-90h]\n  bool v46; // [rsp+1Dh] [rbp-8Bh]\n  char v47; // [rsp+1Eh] [rbp-8Ah]\n  char v48; // [rsp+1Fh] [rbp-89h]\n  char *buf; // [rsp+20h] [rbp-88h]\n  size_t v50; // [rsp+28h] [rbp-80h]\n  ssize_t v51; // [rsp+30h] [rbp-78h]\n  size_t nbytes; // [rsp+38h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+50h] [rbp-58h]\n  size_t v54; // [rsp+58h] [rbp-50h]\n  char v55; // [rsp+6Ch] [rbp-3Ch]\n\n  v48 = a7;\n  *a12 = 0;\n  v50 = a10;\n  *a11 = 0LL;\n  if ( !a10 )\n    return 1;\n  v54 = a6;\n  if ( !a6 )\n    a6 = a2;\n  v55 = a7;\n  nbytes = a2;\n  v12 = 0;\n  v13 = 0LL;\n  buf = a1;\n  v45 = a5;\n  v53 = a6;\n  while ( 1 )\n  {\nLABEL_5:\n    v14 = v50;\n    if ( nbytes <= v50 )\n      v14 = nbytes;\n    v15 = read(a4, buf, v14);\n    v51 = v15;\n    if ( v15 >= 0 )\n      break;\n    v16 = __errno_location();\n    if ( *v16 != 4 )\n    {\n      v17 = v16;\n      v18 = 0;\n      v19 = sub_40EA00(4LL, a8);\n      v20 = dcgettext(0LL, \"error reading %s\", 5);\n      error(0, *v17, v20, v19);\n      return v18;\n    }\n  }\n  if ( !v15 )\n  {\n    v42 = v13;\n    LOBYTE(a3) = v12;\n    goto LABEL_51;\n  }\n  v22 = (int)a11;\n  v23 = buf;\n  v24 = v51;\n  v25 = v53;\n  *a11 += v51;\n  v26 = buf;\n  v46 = v54 != 0;\n  while ( 1 )\n  {\n    if ( v25 > v24 )\n      v25 = v24;\n    LOBYTE(a3) = v46 && v25 != 0;\n    if ( v46 && v25 != 0 )\n      break;\n    a3 = v12;\n    if ( !(((unsigned __int8)v12 ^ 1) & (v25 == v24)) && v25 )\n    {\nLABEL_38:\n      v22 = -1 - v25;\n      if ( 0x7FFFFFFFFFFFFFFFLL - v25 < v13 )\n      {\n        v18 = 0;\n        v37 = sub_40EA00(4LL, a8);\n        v38 = dcgettext(0LL, \"overflow reading %s\", 5);\n        error(0, 0, v38, v37);\n        return v18;\n      }\n      v13 += v25;\n      v24 -= v25;\n      v23 += v25;\n      v12 = a3;\n      goto LABEL_40;\n    }\nLABEL_33:\n    v13 += v25;\n    v44 = 1;\n    v47 = 0;\n    if ( !(_BYTE)v12 )\n      goto LABEL_26;\nLABEL_34:\n    v35 = sub_405060(v45, a9, v48, v13);\n    v34 = v47;\n    if ( !(_BYTE)v35 )\n      return v35;\nLABEL_27:\n    v22 = v44;\n    if ( v44 )\n    {\n      if ( !v25 )\n      {\n        v13 = 0LL;\nLABEL_44:\n        v36 = v50 == v51;\n        v50 -= v51;\n        *a12 = a3;\n        if ( !v36 )\n        {\n          v12 = a3;\n          goto LABEL_5;\n        }\n        v42 = v13;\nLABEL_51:\n        if ( (_BYTE)a3 )\n          return sub_405060(v45, a9, v55, v42);\n        return 1;\n      }\n      if ( !v34 )\n      {\n        v26 = v23;\n        v24 -= v25;\n        v12 = a3;\n        v23 += v25;\n        v13 = 0LL;\n        goto LABEL_40;\n      }\n      v13 = v25;\n      v26 = v23;\n      v12 = a3;\n      v25 = 0LL;\n    }\n    else\n    {\n      v26 = v23;\n      v24 -= v25;\n      v12 = a3;\n      v23 += v25;\n      v13 = v25;\nLABEL_40:\n      if ( !v24 )\n        goto LABEL_44;\n    }\n  }\n  v27 = v23;\n  v28 = v25;\n  do\n  {\n    if ( *v27 )\n    {\n      v31 = v46 && v25 != 0;\n      v30 = v12;\n      a3 = 0;\n      goto LABEL_21;\n    }\n    ++v27;\n    if ( !--v28 )\n    {\n      LOBYTE(v22) = v13 != 0;\n      v32 = v22 & (v12 ^ 1);\n      goto LABEL_37;\n    }\n  }\n  while ( v28 & 0xF );\n  v43 = v26;\n  v29 = memcmp(v23, v27, v28);\n  v26 = v43;\n  LOBYTE(a3) = v29 == 0;\n  v30 = v12 ^ (v29 == 0);\n  v31 = v29 != 0;\nLABEL_21:\n  LOBYTE(v32) = v30 & (v13 != 0);\n  if ( v25 != v24 || !v31 )\n  {\nLABEL_37:\n    if ( !(_BYTE)v32 )\n      goto LABEL_38;\n    v44 = 0;\n    goto LABEL_25;\n  }\n  if ( !(_BYTE)v32 )\n  {\n    a3 = 0;\n    goto LABEL_33;\n  }\n  v44 = 1;\n  a3 = 0;\nLABEL_25:\n  v47 = v32;\n  if ( (_BYTE)v12 )\n    goto LABEL_34;\nLABEL_26:\n  v33 = sub_40B240(v45, v26, v13);\n  v34 = v47;\n  if ( v13 == v33 )\n    goto LABEL_27;\n  v18 = v12;\n  v39 = sub_40EA00(4LL, a9);\n  v40 = dcgettext(0LL, \"error writing %s\", 5);\n  v41 = __errno_location();\n  error(0, *v41, v40, v39);\n  return v18;\n}\n", 
            "funcStartAddr": "0x405120L", 
            "funcEndAddr": "0x405543L", 
            "funcName": "sub_405120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405550(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, __int64 a5)\n{\n  __int64 v5; // rbp\n  int *v6; // rax\n  int *v7; // r13\n  __int64 v8; // rbx\n  char *v9; // rax\n  int v10; // ebx\n  __int64 result; // rax\n  unsigned int v12; // ebx\n\n  v5 = a5;\n  if ( *(_BYTE *)(a5 + 37) )\n  {\n    v6 = __errno_location();\n    v7 = v6;\n    if ( !*(_BYTE *)(v5 + 35) || (v10 = *(unsigned __int8 *)(v5 + 38), (_BYTE)v10) )\n    {\n      *v6 = 95;\n      v8 = sub_40EA00(4LL, a1);\n      v9 = dcgettext(0LL, \"failed to get security context of %s\", 5);\n      error(0, *v7, v9, v8);\n      v10 = *(unsigned __int8 *)(v5 + 38);\n    }\n    else\n    {\n      *v6 = 95;\n    }\n    result = v10 ^ 1u;\n  }\n  else\n  {\n    v12 = a4;\n    LOBYTE(v12) = *(_BYTE *)(a5 + 33) & a4;\n    if ( (_BYTE)v12 )\n    {\n      *__errno_location() = 95;\n      result = v12;\n    }\n    else\n    {\n      result = 1LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405550L", 
            "funcEndAddr": "0x405618L", 
            "funcName": "sub_405550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405620(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rbx\n  int *v5; // rax\n  int *v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rax\n  __int64 result; // rax\n\n  v4 = a4;\n  v5 = __errno_location();\n  v6 = v5;\n  if ( !*(_BYTE *)(v4 + 35) || *(_BYTE *)(v4 + 38) )\n  {\n    *v5 = 95;\n    v7 = sub_40E920(0LL, 4LL, a1);\n    v8 = dcgettext(0LL, \"failed to set the security context of %s\", 5);\n    error(0, *v6, v8, v7);\n    result = 0LL;\n  }\n  else\n  {\n    *v5 = 95;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405620L", 
            "funcEndAddr": "0x405693L", 
            "funcName": "sub_405620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4056A0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40BB50(61LL, 0LL, sub_40C510, sub_40C550, sub_40C5C0);\n  *(_QWORD *)(a1 + 56) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4056a0L", 
            "funcEndAddr": "0x4056c6L", 
            "funcName": "sub_4056A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4056D0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40BB50(61LL, 0LL, sub_40C540, sub_40C550, sub_40C5C0);\n  *(_QWORD *)(a1 + 64) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4056d0L", 
            "funcEndAddr": "0x4056f6L", 
            "funcName": "sub_4056D0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_405700(__int64 a1)\n{\n  bool result; // al\n\n  *(_QWORD *)(a1 + 64) = 0LL;\n  *(_OWORD *)a1 = 0LL;\n  *(_OWORD *)(a1 + 16) = 0LL;\n  *(_OWORD *)(a1 + 32) = 0LL;\n  *(_OWORD *)(a1 + 48) = 0LL;\n  result = geteuid() == 0;\n  *(_BYTE *)(a1 + 27) = result;\n  *(_BYTE *)(a1 + 26) = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x405700L", 
            "funcEndAddr": "0x405731L", 
            "funcName": "sub_405700"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_405740(__int64 a1)\n{\n  int *v1; // rax\n  char result; // al\n\n  v1 = __errno_location();\n  result = *v1 == 22 || *v1 == 1;\n  if ( result )\n    result = *(_BYTE *)(a1 + 26) ^ 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x405740L", 
            "funcEndAddr": "0x405764L", 
            "funcName": "sub_405740"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405770(__int64 a1, const char *a2, unsigned int a3, _DWORD *a4, char a5, __int64 a6)\n{\n  const char *v6; // r12\n  unsigned int v7; // ebx\n  __uid_t v8; // er14\n  __gid_t v9; // er13\n  int v10; // esi\n  int v11; // edx\n  int v12; // eax\n  int *v13; // rax\n  int v14; // er14\n  int *v15; // r15\n  char v16; // al\n  unsigned int v17; // edx\n  int *v19; // rax\n  int v20; // ebx\n  int *v21; // r14\n  __int64 v22; // r12\n  char *v23; // rbx\n  int *v24; // rax\n  int *v25; // rax\n  int *v26; // rbx\n  int v27; // eax\n  __int64 v28; // r12\n  char *v29; // rax\n\n  v6 = a2;\n  v7 = a3;\n  v8 = a4[7];\n  v9 = a4[8];\n  if ( !a5 )\n  {\n    if ( *(_QWORD *)(a1 + 24) & 0xFF0000000000FFLL )\n    {\n      v10 = *(_DWORD *)(a6 + 24);\n      v11 = a4[6];\n    }\n    else\n    {\n      if ( !*(_BYTE *)(a1 + 43) )\n        goto LABEL_6;\n      v10 = *(_DWORD *)(a6 + 24);\n      v11 = *(_DWORD *)(a1 + 16);\n    }\n    v12 = ~v11;\n    BYTE1(v12) |= 0xEu;\n    if ( v10 & v12 & 0xFFF && (unsigned int)sub_40D0B0(v6, v7, (unsigned __int16)v10 & (unsigned __int16)v11 & 0x1C0) )\n    {\n      v25 = __errno_location();\n      v26 = v25;\n      v27 = *v25;\n      if ( v27 != 1 && v27 != 22 || *(_BYTE *)(a1 + 27) )\n      {\n        v28 = sub_40EA00(4LL, v6);\n        v29 = dcgettext(0LL, \"clearing permissions for %s\", 5);\n        error(0, *v26, v29, v28);\n      }\n      goto LABEL_20;\n    }\n  }\nLABEL_6:\n  if ( v7 != -1 )\n  {\n    if ( fchown(v7, v8, v9) )\n    {\n      v13 = __errno_location();\n      v14 = *v13;\n      v15 = v13;\n      if ( *v13 == 1 || v14 == 22 )\n      {\n        fchown(v7, 0xFFFFFFFF, v9);\n        *v15 = v14;\n      }\n      goto LABEL_10;\n    }\n    return 1;\n  }\n  if ( !lchown(v6, v8, v9) )\n    return 1;\n  v19 = __errno_location();\n  v20 = *v19;\n  v21 = v19;\n  if ( *v19 == 1 || v20 == 22 )\n  {\n    lchown(v6, 0xFFFFFFFF, v9);\n    *v21 = v20;\n  }\nLABEL_10:\n  v16 = sub_405740(a1);\n  v17 = 0;\n  if ( !v16 )\n  {\n    v22 = sub_40EA00(4LL, v6);\n    v23 = dcgettext(0LL, \"failed to preserve ownership for %s\", 5);\n    v24 = __errno_location();\n    error(0, *v24, v23, v22);\nLABEL_20:\n    v17 = -*(unsigned __int8 *)(a1 + 36);\n  }\n  return v17;\n}\n", 
            "funcStartAddr": "0x405770L", 
            "funcEndAddr": "0x40595bL", 
            "funcName": "sub_405770"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_405960()\n{\n  __mode_t v0; // ebx\n\n  v0 = dword_61F450;\n  if ( dword_61F450 == -1 )\n  {\n    v0 = umask(0);\n    dword_61F450 = v0;\n    umask(v0);\n  }\n  return v0;\n}\n", 
            "funcStartAddr": "0x405960L", 
            "funcEndAddr": "0x40598aL", 
            "funcName": "sub_405960"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_405990@<rax>(unsigned int a1@<edx>, __off_t a2@<rcx>, const char *a3@<rdi>, char *a4@<rsi>, __int64 a5@<r8>, const __m128i *a6@<r9>, unsigned int a7@<r15d>, unsigned int a8, _BYTE *a9, _BYTE *a10, _BYTE *a11)\n{\n  char *v11; // r14\n  const __m128i *v12; // r13\n  unsigned int v13; // er12\n  bool v14; // zf\n  __int64 v15; // rbx\n  int v16; // eax\n  char *v17; // rsi\n  __int64 v18; // rdi\n  int v19; // eax\n  int v20; // eax\n  __int64 v21; // r8\n  int v22; // eax\n  __int16 v23; // ax\n  __int64 v24; // rcx\n  int v25; // er12\n  __int64 v26; // rdi\n  char v27; // al\n  char v28; // al\n  int v29; // eax\n  int *v30; // rax\n  int *v31; // r12\n  struct stat *v32; // rdx\n  __int64 v33; // r12\n  const char *v34; // rsi\n  __int64 v35; // rbx\n  char *v36; // rax\n  __int64 v37; // r8\n  __int64 v38; // rcx\n  const char *v39; // rdx\n  int v40; // er12\n  char v41; // al\n  void *v42; // r12\n  char v43; // r8\n  bool v44; // r12\n  __int64 v45; // rsi\n  char v46; // al\n  int v47; // eax\n  __int64 v48; // r12\n  char *v49; // rbx\n  int *v50; // rax\n  int v51; // eax\n  __mode_t v52; // edx\n  __int64 v53; // r12\n  char *v54; // rbx\n  int *v55; // rax\n  unsigned int v56; // eax\n  int v57; // eax\n  __int64 v58; // r12\n  char *v59; // rbx\n  int *v60; // rax\n  __dev_t v62; // rdx\n  __ino_t v63; // rdi\n  __int64 v64; // rdx\n  __int64 v65; // rcx\n  __int64 v66; // r8\n  __int64 v67; // r9\n  __int64 v68; // rdx\n  __int64 v69; // rcx\n  __int64 v70; // r8\n  __int64 v71; // r9\n  int v72; // eax\n  __int64 v73; // r12\n  char *v74; // rax\n  __int64 v75; // r12\n  __int64 v76; // rbx\n  char *v77; // rax\n  __int64 v78; // r8\n  __int64 v79; // r9\n  int *v80; // rax\n  int *v81; // r12\n  int v82; // eax\n  int v83; // eax\n  int *v84; // rax\n  __int64 v85; // rbx\n  char *v86; // rax\n  int v87; // eax\n  char v88; // al\n  __ino_t v89; // rdx\n  __dev_t v90; // rcx\n  _QWORD *v91; // rax\n  const char *v92; // rsi\n  char *v93; // rax\n  int v94; // eax\n  const char *v95; // rsi\n  char *v96; // r12\n  int *v97; // rax\n  _QWORD *v98; // rax\n  __mode_t v99; // er12\n  int v100; // eax\n  __int64 v101; // r12\n  char *v102; // rax\n  __int64 v103; // rcx\n  __int64 v104; // r8\n  __int64 v105; // r9\n  __m128i v106; // xmm1\n  __m128i v107; // xmm2\n  __m128i v108; // xmm3\n  __blkcnt_t v109; // rax\n  char *v110; // r12\n  char v111; // r15\n  void *v112; // rbx\n  __int64 v113; // rax\n  void *v114; // r14\n  char v115; // al\n  char v116; // r12\n  __int64 v117; // rax\n  int v118; // edx\n  const char *v119; // rsi\n  char *v120; // rax\n  _BOOL8 v121; // rcx\n  int v122; // eax\n  __int64 v123; // rax\n  char v124; // r12\n  __int64 v125; // rcx\n  __m128i *v126; // r9\n  __m128i *v127; // rdx\n  char v128; // al\n  __int64 v129; // r13\n  const char *v130; // rsi\n  __int64 v131; // rbx\n  char *v132; // rax\n  int v133; // eax\n  int v134; // eax\n  bool v135; // al\n  char v136; // al\n  __int64 v137; // r12\n  char *v138; // rbx\n  int *v139; // rax\n  char *v140; // r12\n  int v141; // ecx\n  int *v142; // rax\n  int *v143; // r12\n  int *v144; // rax\n  int v145; // er12\n  char *v146; // rax\n  void *v147; // rcx\n  int v148; // esi\n  const char *v149; // rdx\n  char v150; // r8\n  __int64 v151; // rcx\n  __int64 v152; // rbx\n  char *v153; // rax\n  __int64 v154; // r12\n  char *v155; // rax\n  __int64 v156; // rcx\n  char *v157; // rax\n  __int64 v158; // rdx\n  __int64 v159; // rcx\n  __int64 v160; // r8\n  __int64 v161; // r9\n  _BYTE *v162; // rax\n  __int64 v163; // rdx\n  _BYTE *v164; // r8\n  size_t v165; // r12\n  size_t v166; // rax\n  int v167; // eax\n  int v168; // eax\n  size_t v169; // rax\n  char *v170; // rax\n  char *v171; // r12\n  char *v172; // rax\n  __int64 v173; // rsi\n  char *v174; // rax\n  char *v175; // r12\n  size_t v176; // rax\n  void *v177; // rsp\n  char *v178; // r12\n  char v179; // al\n  int v180; // er12\n  char *v181; // rax\n  __int64 v182; // rdx\n  __int64 v183; // rcx\n  __int64 v184; // r8\n  __int64 v185; // r9\n  __int64 v186; // r12\n  __int64 v187; // rbx\n  char *v188; // rax\n  __int64 v189; // r12\n  char *v190; // r14\n  int *v191; // rax\n  __int64 v192; // rax\n  char *v193; // r12\n  __int64 v194; // r12\n  char *v195; // rax\n  __int64 v196; // rdx\n  unsigned int v197; // eax\n  _BYTE *v198; // rax\n  __int64 v199; // rbx\n  char *v200; // rax\n  char v201; // al\n  int v202; // er12\n  int v203; // eax\n  __int64 v204; // rcx\n  char v205; // al\n  char *v206; // r12\n  int *v207; // rax\n  int *v208; // rax\n  const char *v209; // rsi\n  __int64 v210; // rbx\n  char *v211; // rax\n  char *v212; // r12\n  int *v213; // rax\n  char *v214; // r12\n  int *v215; // rax\n  char *v216; // rax\n  __int64 v217; // rcx\n  int v218; // eax\n  __int64 v219; // r12\n  char *v220; // rax\n  __int64 v221; // r12\n  char *v222; // rax\n  __int64 v223; // rcx\n  __int64 v224; // r8\n  __int64 v225; // r9\n  unsigned __int64 v226; // r12\n  __blksize_t v227; // rax\n  __blksize_t v228; // rdi\n  unsigned __int64 v229; // rax\n  char *v230; // rsi\n  unsigned __int64 v231; // rdx\n  bool v232; // r9\n  int v233; // eax\n  char v234; // r8\n  int v235; // eax\n  char *v236; // r12\n  int *v237; // rax\n  char *v238; // r12\n  int *v239; // rax\n  int v240; // eax\n  int v241; // eax\n  char *v242; // r12\n  int *v243; // rax\n  int v244; // eax\n  __off_t v245; // r12\n  char *v246; // rcx\n  __off_t v247; // rbx\n  char v248; // r15\n  size_t v249; // r14\n  char v250; // al\n  size_t v251; // rdx\n  __off_t v252; // rsi\n  unsigned int v253; // er13\n  __int64 v254; // rax\n  size_t v255; // r8\n  __off_t *v256; // rax\n  __int64 v257; // rcx\n  bool v258; // r12\n  const char *v259; // rsi\n  char *v260; // r12\n  int *v261; // rax\n  __int64 v262; // rdx\n  char *v263; // rbx\n  __int64 v264; // r12\n  __int64 v265; // rax\n  int v266; // eax\n  __int64 v267; // r12\n  int *v268; // rax\n  char *v269; // r12\n  int *v270; // rax\n  __int64 v271; // rcx\n  char *v272; // rdi\n  void *v273; // rax\n  __int64 v274; // r12\n  char *v275; // rax\n  __int64 v276; // rcx\n  __int64 v277; // r8\n  __int64 v278; // r9\n  const char *v279; // rsi\n  char *v280; // r12\n  int *v281; // rax\n  char *v282; // rax\n  int v283; // eax\n  int v284; // eax\n  char *v285; // r12\n  int *v286; // rax\n  __blksize_t v287; // rax\n  __int64 v288; // r12\n  char *v289; // rax\n  char v290; // [rsp+1h] [rbp-381h]\n  unsigned __int64 v291; // [rsp+Ah] [rbp-378h]\n  __off_t v292; // [rsp+1Ah] [rbp-368h]\n  const __m128i *v293; // [rsp+22h] [rbp-360h]\n  unsigned int v294; // [rsp+2Ah] [rbp-358h]\n  unsigned int v295; // [rsp+2Eh] [rbp-354h]\n  char *v296; // [rsp+32h] [rbp-350h]\n  int v297; // [rsp+3Ah] [rbp-348h]\n  __mode_t v298; // [rsp+3Eh] [rbp-344h]\n  __blksize_t v299; // [rsp+42h] [rbp-340h]\n  char *v300; // [rsp+4Ah] [rbp-338h]\n  char *s; // [rsp+52h] [rbp-330h]\n  unsigned int v302; // [rsp+5Ah] [rbp-328h]\n  char v303; // [rsp+5Fh] [rbp-323h]\n  unsigned __int8 v304; // [rsp+60h] [rbp-322h]\n  char v305; // [rsp+61h] [rbp-321h]\n  struct stat *v306; // [rsp+62h] [rbp-320h]\n  __int64 v307; // [rsp+6Ah] [rbp-318h]\n  char *s2; // [rsp+72h] [rbp-310h]\n  void *s1; // [rsp+7Ah] [rbp-308h]\n  char *old; // [rsp+82h] [rbp-300h]\n  __off_t v311; // [rsp+8Ah] [rbp-2F8h]\n  size_t n; // [rsp+92h] [rbp-2F0h]\n  int fd[2]; // [rsp+9Ah] [rbp-2E8h]\n  void *ptr; // [rsp+A2h] [rbp-2E0h]\n  struct stat *v315; // [rsp+AAh] [rbp-2D8h]\n  char *src; // [rsp+B2h] [rbp-2D0h]\n  __mode_t v317; // [rsp+BAh] [rbp-2C8h]\n  int v318; // [rsp+BEh] [rbp-2C4h]\n  int fildes[2]; // [rsp+C2h] [rbp-2C0h]\n  char *filename; // [rsp+CAh] [rbp-2B8h]\n  char v321; // [rsp+D9h] [rbp-2A9h]\n  __int64 v322; // [rsp+DAh] [rbp-2A8h]\n  __int128 length; // [rsp+E2h] [rbp-2A0h]\n  timespec v324; // [rsp+F2h] [rbp-290h]\n  char v325; // [rsp+102h] [rbp-280h]\n  char v326; // [rsp+103h] [rbp-27Fh]\n  void *v327; // [rsp+10Ah] [rbp-278h]\n  struct stat stat_buf; // [rsp+112h] [rbp-270h]\n  struct stat v329; // [rsp+1A2h] [rbp-1E0h]\n  struct stat v330; // [rsp+232h] [rbp-150h]\n  struct stat v331; // [rsp+2C2h] [rbp-C0h]\n  __int64 savedregs; // [rsp+382h] [rbp+0h]\n\n  v11 = (char *)a3;\n  v12 = a6;\n  v13 = a1;\n  filename = a4;\n  LOBYTE(fildes[0]) = a11 != 0LL;\n  v14 = a6[1].m128i_i8[8] == 0;\n  v15 = a8;\n  v311 = a2;\n  *(_QWORD *)fd = a5;\n  if ( !v14 && a11 != 0LL )\n    *a11 = 0;\n  v14 = HIDWORD(a6->m128i_i64[0]) == 2;\n  *a10 = 0;\n  v315 = &stat_buf;\n  if ( !v14 )\n  {\n    v16 = __xstat(1, a3, &stat_buf);\n    v17 = (char *)a3;\n    LOBYTE(a7) = v16 != 0;\n    if ( !v16 )\n      goto LABEL_6;\nLABEL_118:\n    a7 = 0;\n    v58 = sub_40EA00(4LL, v17);\n    v59 = dcgettext(0LL, \"cannot stat %s\", 5);\n    v60 = __errno_location();\n    error(0, *v60, v59, v58);\n    return a7;\n  }\n  v57 = __lxstat(1, a3, &stat_buf);\n  v17 = (char *)a3;\n  LOBYTE(a7) = v57 != 0;\n  if ( v57 )\n    goto LABEL_118;\nLABEL_6:\n  v317 = stat_buf.st_mode;\n  v318 = stat_buf.st_mode & 0xF000;\n  if ( v318 != 0x4000 )\n  {\n    if ( !(_BYTE)a8 )\n      goto LABEL_10;\n    v18 = v12[4].m128i_i64[0];\n    if ( LODWORD(v12->m128i_i64[0]) )\n    {\n      sub_40AE60(v18, v11, v315);\n      goto LABEL_10;\n    }\n    v88 = sub_40AEF0(v18, v11, v315);\n    if ( v88 )\n    {\n      LOBYTE(filename) = v88;\n      v152 = sub_40EA00(4LL, v11);\n      v153 = dcgettext(0LL, \"warning: source file %s specified more than once\", 5);\n      error(0, 0, v153, v152);\n      return (unsigned __int8)filename;\n    }\n    goto LABEL_170;\n  }\n  if ( !v12[2].m128i_i8[10] )\n  {\n    v117 = sub_40EA00(4LL, v17);\n    v118 = 5;\n    v15 = v117;\n    if ( !v12[1].m128i_i8[9] )\n    {\nLABEL_241:\n      v120 = dcgettext(0LL, \"-r not specified; omitting directory %s\", v118);\n      goto LABEL_227;\n    }\n    v119 = \"omitting directory %s\";\n    goto LABEL_226;\n  }\n  if ( (_BYTE)a8 )\nLABEL_170:\n    sub_40AE60(v12[4].m128i_i64[0], v11, v315);\nLABEL_10:\n  LODWORD(ptr) = 1;\n  v19 = HIDWORD(v12->m128i_i64[0]);\n  if ( v19 != 4 )\n    LODWORD(ptr) = (unsigned __int8)a8 & (v19 == 3);\n  if ( (_BYTE)v13 )\n  {\nLABEL_59:\n    LOBYTE(src) = 1;\n    LOBYTE(v24) = 0;\n    old = 0LL;\n    goto LABEL_60;\n  }\n  if ( v318 != 0x8000 && (!v12[1].m128i_i8[4] || v318 == 0x4000 || v318 == 40960)\n    || v12[1].m128i_i8[8]\n    || v12[2].m128i_i8[12]\n    || v12[1].m128i_i8[7]\n    || LODWORD(v12->m128i_i64[0])\n    || v12[1].m128i_i8[5] )\n  {\n    n = (size_t)&v329;\n    v83 = __lxstat(1, filename, &v329);\n    v21 = v13;\n    LOBYTE(src) = v83 != 0;\n    if ( !v83 )\n      goto LABEL_23;\n    goto LABEL_158;\n  }\n  n = (size_t)&v329;\n  v20 = __xstat(1, filename, &v329);\n  v21 = 1LL;\n  LOBYTE(src) = v20 != 0;\n  if ( v20 )\n  {\nLABEL_158:\n    v84 = __errno_location();\n    if ( *v84 != 2 )\n    {\n      *(_QWORD *)fildes = v84;\n      a7 = v13;\n      v85 = sub_40EA00(4LL, filename);\n      v86 = dcgettext(0LL, \"cannot stat %s\", 5);\n      error(0, **(_DWORD **)fildes, v86, v85);\n      return a7;\n    }\n    goto LABEL_59;\n  }\nLABEL_23:\n  if ( stat_buf.st_ino != v329.st_ino || stat_buf.st_dev != v329.st_dev )\n  {\n    if ( HIDWORD(v12->m128i_i64[0]) != 2 )\n      goto LABEL_25;\n    v124 = 0;\n    v125 = 0LL;\n  }\n  else\n  {\n    v124 = v12[1].m128i_i8[7];\n    if ( v124 )\n      goto LABEL_325;\n    if ( HIDWORD(v12->m128i_i64[0]) != 2 )\n    {\n      LOBYTE(old) = v21;\n      s2 = (char *)&v330;\n      v133 = __lxstat(1, filename, &v330);\n      LODWORD(v21) = (unsigned __int8)old;\n      if ( v133 )\n        goto LABEL_25;\n      v306 = &v331;\n      v134 = __lxstat(1, v11, &v331);\n      v21 = (unsigned __int8)old;\n      if ( v134 )\n        goto LABEL_25;\n      if ( v331.st_ino == v330.st_ino )\n        v124 = v331.st_dev == v330.st_dev;\n      v126 = (__m128i *)s2;\n      v127 = (__m128i *)v306;\n      if ( (v331.st_mode & 0xF000) == 40960 && (v330.st_mode & 0xF000) == 40960 && v12[1].m128i_i8[5] )\n        goto LABEL_25;\n      goto LABEL_244;\n    }\n    v124 = 1;\n    v125 = 1LL;\n  }\n  v126 = (__m128i *)n;\n  v127 = (__m128i *)v315;\n  if ( (stat_buf.st_mode & 0xF000) == 40960 && (v329.st_mode & 0xF000) == 40960 )\n  {\n    LODWORD(s1) = v125;\n    LOBYTE(old) = v21;\n    if ( (unsigned __int8)sub_40EF80(v11, filename, v315, v125, v21, n) )\n      goto LABEL_250;\n    LODWORD(v21) = (unsigned __int8)old;\n    if ( LODWORD(v12->m128i_i64[0]) || !(_DWORD)s1 )\n      goto LABEL_25;\n    v179 = 1;\n    LOBYTE(v180) = v12[1].m128i_i8[8] ^ 1;\n    goto LABEL_369;\n  }\nLABEL_244:\n  if ( LODWORD(v12->m128i_i64[0]) )\n  {\n    if ( !v124 )\n    {\n      if ( v12[1].m128i_i8[8]\n        || HIDWORD(v12->m128i_i64[0]) == 2\n        || (v127[1].m128i_i32[2] & 0xF000) != 40960\n        || (v126[1].m128i_i32[2] & 0xF000) == 40960 )\n      {\n        goto LABEL_25;\n      }\nLABEL_250:\n      v33 = sub_40E920(1LL, 4LL, filename);\n      v34 = \"%s and %s are the same file\";\n      v35 = sub_40E920(0LL, 4LL, v11);\nLABEL_56:\n      v36 = dcgettext(0LL, v34, 5);\n      v37 = v33;\n      v38 = v35;\n      v39 = v36;\nLABEL_57:\n      error(0, 0, v39, v38, v37);\n      return 0;\n    }\n    LOBYTE(src) = v21;\n    v205 = sub_40EF80(v11, filename, v127, v125, v21, v126);\n    LODWORD(v21) = (unsigned __int8)src;\n    LOBYTE(v180) = v205 ^ 1;\n    v179 = 0;\nLABEL_369:\n    if ( (_BYTE)v180 )\n    {\n      LOBYTE(src) = v179;\n      goto LABEL_25;\n    }\n    goto LABEL_250;\n  }\n  v151 = v12[1].m128i_u8[8];\n  if ( (_BYTE)v151 || v12[1].m128i_i8[5] )\n  {\n    if ( (v126[1].m128i_i32[2] & 0xF000) == 40960 )\n      goto LABEL_25;\n    if ( !v124 || v126[1].m128i_i64[0] <= 1uLL )\n    {\n      if ( (v127[1].m128i_i32[2] & 0xF000) == 40960 )\n        goto LABEL_312;\n      goto LABEL_342;\n    }\n    LOBYTE(s2) = v21;\n    s1 = v126;\n    old = (char *)v127;\n    v179 = sub_40EF80(v11, filename, v127, v151, v21, v126);\n    v127 = (__m128i *)old;\n    v126 = (__m128i *)s1;\n    LODWORD(v21) = (unsigned __int8)s2;\n    if ( !v179 )\n    {\n      LOBYTE(v180) = v12[1].m128i_i8[8] ^ 1;\n      goto LABEL_369;\n    }\n    if ( (*((_DWORD *)old + 6) & 0xF000) == 40960 )\n      goto LABEL_311;\n  }\n  else if ( (v127[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    goto LABEL_314;\n  }\n  if ( (v126[1].m128i_i32[2] & 0xF000) != 40960 )\n  {\nLABEL_342:\n    if ( v127->m128i_i64[1] != v126->m128i_i64[1] || v127->m128i_i64[0] != v126->m128i_i64[0] )\n      goto LABEL_25;\n    if ( v12[1].m128i_i8[7] )\n      goto LABEL_325;\n  }\nLABEL_311:\n  LOBYTE(v151) = v12[1].m128i_i8[8];\nLABEL_312:\n  if ( (_BYTE)v151 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) == 40960 && v126[1].m128i_i64[0] > 1uLL )\n    {\n      LOBYTE(s2) = v21;\n      s1 = v126;\n      old = (char *)v127;\n      v216 = canonicalize_file_name(v11);\n      v127 = (__m128i *)old;\n      v126 = (__m128i *)s1;\n      LODWORD(v21) = (unsigned __int8)s2;\n      if ( v216 )\n      {\n        LOBYTE(old) = (_BYTE)s2;\n        src = v216;\n        v180 = (unsigned __int64)sub_40EF80(v216, filename, v127, v217, (unsigned __int8)s2, s1) ^ 1;\n        free(src);\n        v179 = 0;\n        LODWORD(v21) = (unsigned __int8)s2;\n        goto LABEL_369;\n      }\n    }\n  }\nLABEL_314:\n  if ( v12[2].m128i_i8[12] || v12[1].m128i_i32[1] & 0xFF00FF00 && (v126[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(v180) = v126->m128i_i64[0] == v127->m128i_i64[0];\n    v179 = 0;\n    goto LABEL_369;\n  }\n  if ( HIDWORD(v12->m128i_i64[0]) != 2 )\n    goto LABEL_250;\n  if ( (v127[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(s1) = v21;\n    old = (char *)v126;\n    v241 = __xstat(1, v11, &v331);\n    v126 = (__m128i *)old;\n    LODWORD(v21) = (unsigned __int8)s1;\n    if ( v241 )\n      goto LABEL_25;\n  }\n  else\n  {\n    *(__m128i *)&v331.st_dev = _mm_load_si128(v127);\n    *(__m128i *)&v331.st_nlink = _mm_load_si128(v127 + 1);\n    *(__m128i *)&v331.st_gid = _mm_load_si128(v127 + 2);\n    *(__m128i *)&v331.st_size = _mm_load_si128(v127 + 3);\n    *(__m128i *)&v331.st_blocks = _mm_load_si128(v127 + 4);\n    *(__m128i *)&v331.st_atim.tv_nsec = _mm_load_si128(v127 + 5);\n    *(__m128i *)&v331.st_mtim.tv_nsec = _mm_load_si128(v127 + 6);\n    *(__m128i *)&v331.st_ctim.tv_nsec = _mm_load_si128(v127 + 7);\n    *(__m128i *)&v331.__unused[1] = _mm_load_si128(v127 + 8);\n  }\n  if ( (v126[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(old) = v21;\n    v240 = __xstat(1, filename, &v330);\n    LODWORD(v21) = (unsigned __int8)old;\n    if ( v240 )\n      goto LABEL_25;\n  }\n  else\n  {\n    *(__m128i *)&v330.st_dev = _mm_load_si128(v126);\n    *(__m128i *)&v330.st_nlink = _mm_load_si128(v126 + 1);\n    *(__m128i *)&v330.st_gid = _mm_load_si128(v126 + 2);\n    *(__m128i *)&v330.st_size = _mm_load_si128(v126 + 3);\n    *(__m128i *)&v330.st_blocks = _mm_load_si128(v126 + 4);\n    *(__m128i *)&v330.st_atim.tv_nsec = _mm_load_si128(v126 + 5);\n    *(__m128i *)&v330.st_mtim.tv_nsec = _mm_load_si128(v126 + 6);\n    *(__m128i *)&v330.st_ctim.tv_nsec = _mm_load_si128(v126 + 7);\n    *(__m128i *)&v330.__unused[1] = _mm_load_si128(v126 + 8);\n  }\n  if ( v331.st_ino == v330.st_ino && v331.st_dev == v330.st_dev )\n  {\n    if ( !v12[1].m128i_i8[7] )\n      goto LABEL_250;\nLABEL_325:\n    LOBYTE(src) = 1;\n  }\nLABEL_25:\n  if ( v318 == 0x4000 )\n  {\n    if ( !v12[1].m128i_i8[8] )\n      goto LABEL_30;\n    v22 = v12->m128i_i64[1];\n  }\n  else\n  {\n    if ( v12[2].m128i_i8[13] )\n    {\n      v121 = 0LL;\n      if ( v12[1].m128i_i8[15] )\n      {\n        v121 = 1LL;\n        if ( v12[1].m128i_i8[8] )\n          v121 = v329.st_dev != stat_buf.st_dev;\n      }\n      LOBYTE(old) = v21;\n      v122 = sub_40FD60(filename, n, v315, v121);\n      LODWORD(v21) = (unsigned __int8)old;\n      if ( v122 >= 0 )\n      {\n        if ( a11 )\n          *a11 = 1;\n        v123 = sub_409A10(filename);\n        if ( v123 && !(unsigned __int8)sub_404F50(v123, (__int64)filename, 1u, v12[2].m128i_i8[14], (char)ptr) )\n        {\n          if ( !v12[2].m128i_i8[5] )\n            return a7;\n          goto LABEL_240;\n        }\n        return 1;\n      }\n    }\n    v22 = v12->m128i_i64[1];\n    if ( !v12[1].m128i_i8[8] )\n    {\n      if ( v22 == 2 )\n        return 1;\n      if ( v22 == 3 )\n      {\n        LOBYTE(old) = v21;\n        v201 = sub_404E20((__int64)v12, filename, (unsigned int *)(n + 24));\n        LODWORD(v21) = (unsigned __int8)old;\n        if ( !v201 )\n          return 1;\n      }\n      goto LABEL_30;\n    }\n  }\n  if ( v22 == 2\n    || (v22 == 3\n     || v22 == 4\n     && v12[2].m128i_i8[15]\n     && (LOBYTE(old) = v21, v135 = sub_404BD0(filename, v329.st_mode), LODWORD(v21) = (unsigned __int8)old, !v135))\n    && (LOBYTE(old) = v21,\n        v136 = sub_404E20((__int64)v12, filename, (unsigned int *)(n + 24)),\n        LODWORD(v21) = (unsigned __int8)old,\n        !v136) )\n  {\n    if ( !a11 )\n      return 1;\nLABEL_285:\n    a7 = 1;\n    *a11 = 1;\n    return a7;\n  }\nLABEL_30:\n  if ( (_BYTE)src )\n    return 1;\n  v23 = v329.st_mode;\n  v24 = (unsigned int)v21 ^ 1;\n  if ( (v329.st_mode & 0xF000) != 0x4000 )\n  {\n    if ( v318 == 0x4000 )\n    {\n      if ( !v12[1].m128i_i8[8] || (v25 = v12->m128i_i64[0]) == 0 )\n      {\n        v33 = sub_40E920(1LL, 4LL, v11);\n        v34 = \"cannot overwrite non-directory %s with directory %s\";\n        v35 = sub_40E920(0LL, 4LL, filename);\n        goto LABEL_56;\n      }\n      if ( !(_BYTE)a8 )\n        goto LABEL_350;\n    }\n    else\n    {\n      v25 = v12->m128i_i64[0];\n      if ( !(_BYTE)a8 )\n        goto LABEL_39;\n    }\n    if ( v25 != 3 )\n    {\n      v26 = v12[3].m128i_i64[1];\n      LOBYTE(old) = v21 ^ 1;\n      v27 = sub_40AEF0(v26, filename, n);\n      v24 = (unsigned __int8)old;\n      if ( v27 )\n      {\n        v33 = sub_40E920(1LL, 4LL, v11);\n        v34 = \"will not overwrite just-created %s with %s\";\n        v35 = sub_40E920(0LL, 4LL, filename);\n        goto LABEL_56;\n      }\n      if ( v318 == 0x4000 )\n        goto LABEL_38;\n      v23 = v329.st_mode;\n      if ( (v329.st_mode & 0xF000) != 0x4000 )\n        goto LABEL_38;\n      goto LABEL_348;\n    }\n    if ( !v12[1].m128i_i8[8] )\n      goto LABEL_391;\nLABEL_350:\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      goto LABEL_351;\n    goto LABEL_409;\n  }\n  if ( v318 != 0x4000 )\n  {\nLABEL_348:\n    if ( v12[1].m128i_i8[8] )\n    {\n      v25 = v12->m128i_i64[0];\n      if ( LODWORD(v12->m128i_i64[0]) )\n        goto LABEL_350;\n    }\n    v119 = \"cannot overwrite directory %s with non-directory\";\n    v15 = sub_40EA00(4LL, filename);\nLABEL_226:\n    v120 = dcgettext(0LL, v119, 5);\nLABEL_227:\n    a7 = 0;\n    error(0, 0, v120, v15);\n    return a7;\n  }\nLABEL_38:\n  v25 = v12->m128i_i64[0];\nLABEL_39:\n  v28 = v12[1].m128i_i8[8];\n  if ( v28 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      goto LABEL_395;\n    v23 = v329.st_mode;\nLABEL_409:\n    if ( (v23 & 0xF000) == 0x4000 )\n    {\nLABEL_395:\n      if ( !v25 )\n        goto LABEL_393;\n      goto LABEL_351;\n    }\n    if ( !v25 )\n    {\n      v33 = sub_40EAD0(0LL, 3LL, filename, v24);\n      v34 = \"cannot move directory onto non-directory: %s -> %s\";\n      v35 = sub_40EAD0(0LL, 3LL, v11, v204);\n      goto LABEL_56;\n    }\nLABEL_351:\n    LOBYTE(n) = v24;\n    v162 = (_BYTE *)sub_40AD40(v11);\n    v24 = (unsigned __int8)n;\n    v164 = v162;\n    if ( *v162 != 46 )\n      goto LABEL_352;\n    v28 = 1;\n    goto LABEL_431;\n  }\n  if ( v25 )\n  {\nLABEL_391:\n    LOBYTE(n) = v24;\n    v198 = (_BYTE *)sub_40AD40(v11);\n    v24 = (unsigned __int8)n;\n    v164 = v198;\n    if ( *v198 != 46 )\n    {\nLABEL_392:\n      if ( (v329.st_mode & 0xF000) == 0x4000 )\n      {\nLABEL_393:\n        old = 0LL;\n        goto LABEL_60;\n      }\nLABEL_352:\n      if ( v25 != 3 )\n      {\n        LOBYTE(n) = v24;\n        s1 = v164;\n        src = (char *)strlen(v164);\n        old = (char *)sub_40AD40(filename);\n        v165 = strlen(old);\n        s2 = ::src;\n        v166 = strlen(::src);\n        v24 = (unsigned __int8)n;\n        v307 = v166;\n        if ( src == (char *)(v165 + v166) )\n        {\n          LOBYTE(src) = n;\n          n = (size_t)s1;\n          v167 = memcmp(s1, old, v165);\n          v24 = (unsigned __int8)src;\n          if ( !v167 )\n          {\n            v168 = strcmp((const char *)(n + v165), s2);\n            v24 = (unsigned __int8)src;\n            if ( !v168 )\n            {\n              LOBYTE(old) = (_BYTE)src;\n              v169 = strlen(filename);\n              n = v169;\n              v170 = (char *)sub_4112E0(v307 + v169 + 1);\n              v171 = v170;\n              src = ::src;\n              v172 = (char *)mempcpy(v170, filename, n);\n              strcpy(v172, src);\n              LODWORD(src) = __xstat(1, v171, &v331);\n              free(v171);\n              v24 = (unsigned __int8)old;\n              if ( !(_DWORD)src && stat_buf.st_ino == v331.st_ino && stat_buf.st_dev == v331.st_dev )\n              {\n                if ( v12[1].m128i_i8[8] )\n                  v263 = dcgettext(0LL, \"backing up %s might destroy source;  %s not moved\", 5);\n                else\n                  v263 = dcgettext(0LL, \"backing up %s might destroy source;  %s not copied\", 5);\n                v264 = sub_40E920(1LL, 4LL, v11);\n                v265 = sub_40E920(0LL, 4LL, filename);\n                v37 = v264;\n                v39 = v263;\n                v38 = v265;\n                goto LABEL_57;\n              }\n            }\n          }\n        }\n      }\n      v173 = LODWORD(v12->m128i_i64[0]);\n      LOBYTE(src) = v24;\n      v174 = (char *)sub_40A8B0(filename, v173, v163, v24, v164);\n      v175 = v174;\n      old = v174;\n      LOBYTE(n) = (_BYTE)src;\n      if ( v174 )\n      {\n        v176 = strlen(v174);\n        v177 = alloca(v176 + 9);\n        v178 = (char *)memcpy((void *)(((unsigned __int64)&v292 + 7) & 0xFFFFFFFFFFFFFFF0LL), v175, v176 + 1);\n        free(old);\n        old = v178;\n        LOBYTE(v24) = n;\n        LOBYTE(src) = 1;\n        goto LABEL_60;\n      }\n      v208 = __errno_location();\n      LOBYTE(src) = 1;\n      LOBYTE(v24) = n;\n      v31 = v208;\n      if ( *v208 == 2 )\n        goto LABEL_60;\n      v209 = \"cannot backup %s\";\n      v210 = sub_40EA00(4LL, filename);\nLABEL_422:\n      a7 = 0;\n      v211 = dcgettext(0LL, v209, 5);\n      error(0, *v31, v211, v210);\n      return a7;\n    }\n    v28 = 0;\nLABEL_431:\n    v163 = (unsigned __int8)v164[(v164[1] == 46) + 1];\n    if ( !(_BYTE)v163 || (_BYTE)v163 == 47 )\n      goto LABEL_41;\n    if ( v28 )\n      goto LABEL_352;\n    goto LABEL_392;\n  }\nLABEL_41:\n  old = 0LL;\n  if ( (unsigned __int8)v28 | ((v329.st_mode & 0xF000) == 0x4000)\n    || (LOBYTE(src) = v12[1].m128i_i8[5], !(_BYTE)src)\n    && (!v12[2].m128i_i8[2] || v329.st_nlink <= 1)\n    && ((old = 0LL, HIDWORD(v12->m128i_i64[0]) != 2) || (stat_buf.st_mode & 0xF000) == 0x8000) )\n  {\nLABEL_60:\n    if ( !(_BYTE)a8 || !v12[3].m128i_i64[1] )\n      goto LABEL_61;\n    goto LABEL_50;\n  }\n  LOBYTE(src) = v24;\n  v29 = unlink(filename);\n  LOBYTE(v24) = (_BYTE)src;\n  if ( v29 )\n  {\n    v30 = __errno_location();\n    LOBYTE(v24) = (_BYTE)src;\n    v31 = v30;\n    if ( *v30 != 2 )\n    {\n      v209 = \"cannot remove %s\";\n      v210 = sub_40EA00(4LL, filename);\n      goto LABEL_422;\n    }\n  }\n  LOBYTE(src) = v12[2].m128i_i8[14];\n  if ( (_BYTE)src )\n  {\n    LOBYTE(n) = v24;\n    v221 = sub_40EA00(4LL, filename);\n    v222 = dcgettext(0LL, \"removed %s\\n\", 5);\n    __printf_chk(1LL, v222, v221, v223, v224, v225);\n    LOBYTE(v24) = n;\n    old = 0LL;\n    goto LABEL_60;\n  }\n  if ( !(_BYTE)a8 )\n  {\n    LOBYTE(src) = v12[2].m128i_i8[10] & (v318 == 0x4000);\n    if ( (_BYTE)src )\n    {\n      v62 = stat_buf.st_dev;\n      v63 = stat_buf.st_ino;\n      old = 0LL;\n      goto LABEL_229;\n    }\n    LOBYTE(src) = 1;\n    old = 0LL;\n    goto LABEL_65;\n  }\n  v14 = v12[3].m128i_i64[1] == 0;\n  LOBYTE(src) = a8;\n  old = 0LL;\n  if ( !v14 )\n  {\nLABEL_50:\n    if ( v12[1].m128i_i8[8] )\n    {\n      if ( v12[2].m128i_i8[14] )\n      {\nLABEL_144:\n        if ( v318 != 0x4000 || !v12[2].m128i_i8[10] )\n          goto LABEL_146;\nLABEL_126:\n        v62 = stat_buf.st_dev;\n        v63 = stat_buf.st_ino;\n        if ( (_BYTE)a8 )\n        {\n          n = sub_409A10(filename);\n          goto LABEL_128;\n        }\nLABEL_229:\n        n = sub_4099D0(v63, v62);\nLABEL_128:\n        if ( !n )\n          goto LABEL_142;\n        goto LABEL_129;\n      }\n      goto LABEL_124;\n    }\n    if ( LODWORD(v12->m128i_i64[0]) )\n    {\n      if ( !v12[2].m128i_i8[14] )\n      {\n        if ( v318 != 0x4000 )\n          goto LABEL_66;\n        goto LABEL_187;\n      }\nLABEL_63:\n      if ( v318 != 0x4000 )\n      {\n        sub_404D70((__int64)v11, (__int64)filename, (__int64)old);\n        goto LABEL_65;\n      }\nLABEL_187:\n      if ( v12[2].m128i_i8[10] )\n        goto LABEL_126;\nLABEL_66:\n      if ( !v12[2].m128i_i8[2] )\n      {\n        n = 0LL;\n        fildes[0] = (unsigned __int8)src;\n        goto LABEL_68;\n      }\nLABEL_140:\n      if ( v12[1].m128i_i8[7] )\n      {\n        n = 0LL;\n        goto LABEL_142;\n      }\n      if ( stat_buf.st_nlink <= 1 )\n      {\n        v87 = HIDWORD(v12->m128i_i64[0]);\n        if ( !(_BYTE)a8 || v87 != 3 )\n        {\n          n = 0LL;\n          if ( v87 != 4 )\n            goto LABEL_142;\n        }\n      }\n      n = sub_409A10(filename);\n      goto LABEL_165;\n    }\n    v32 = &v329;\n    if ( !(_BYTE)v24 )\n    {\n      if ( __lxstat(1, filename, &v331) )\n        goto LABEL_61;\n      v32 = &v331;\n    }\n    if ( (v32->st_mode & 0xF000) != 40960 || !(unsigned __int8)sub_40AEF0(v12[3].m128i_i64[1], filename, v32) )\n    {\nLABEL_61:\n      if ( v12[2].m128i_i8[14] )\n      {\n        if ( !v12[1].m128i_i8[8] )\n          goto LABEL_63;\n        goto LABEL_144;\n      }\n      goto LABEL_124;\n    }\n    v33 = sub_40E920(1LL, 4LL, filename);\n    v34 = \"will not copy %s through just-created symlink %s\";\n    v35 = sub_40E920(0LL, 4LL, v11);\n    goto LABEL_56;\n  }\nLABEL_124:\n  if ( v12[2].m128i_i8[10] && v318 == 0x4000 )\n    goto LABEL_126;\nLABEL_65:\n  if ( !v12[1].m128i_i8[8] )\n    goto LABEL_66;\nLABEL_146:\n  if ( stat_buf.st_nlink != 1 )\n  {\n    if ( !v12[2].m128i_i8[2] )\n    {\n      n = 0LL;\n      goto LABEL_149;\n    }\n    goto LABEL_140;\n  }\n  n = sub_4099D0(stat_buf.st_ino, stat_buf.st_dev);\nLABEL_165:\n  if ( !n )\n    goto LABEL_142;\n  if ( v318 != 0x4000 )\n  {\n    if ( (unsigned __int8)sub_404F50(n, (__int64)filename, 1u, v12[2].m128i_i8[14], (char)ptr) )\n      return 1;\n    goto LABEL_135;\n  }\nLABEL_129:\n  if ( (unsigned __int8)sub_40EF80(v11, n, v64, v65, v66, v67) )\n  {\n    v15 = sub_40E920(1LL, 4LL, qword_621988);\n    v154 = sub_40E920(0LL, 4LL, qword_621990);\n    v155 = dcgettext(0LL, \"cannot copy a directory, %s, into itself, %s\", 5);\n    error(0, 0, v155, v154, v15);\n    *a10 = 1;\nLABEL_135:\n    if ( !v12[2].m128i_i8[5] )\n      goto LABEL_136;\n    goto LABEL_240;\n  }\n  if ( (unsigned __int8)sub_40EF80(filename, n, v68, v69, v70, v71) )\n  {\n    v199 = sub_40EA00(4LL, qword_621990);\n    v200 = dcgettext(0LL, \"warning: source directory %s specified more than once\", 5);\n    error(0, 0, v200, v199);\n    if ( !v12[1].m128i_i8[8] || !LOBYTE(fildes[0]) )\n      return 1;\n    goto LABEL_285;\n  }\n  v72 = HIDWORD(v12->m128i_i64[0]);\n  if ( v72 != 4 && (v72 != 3 || !(_BYTE)a8) )\n  {\n    v73 = sub_40E920(1LL, 4LL, n);\n    v15 = sub_40E920(0LL, 4LL, filename);\n    v74 = dcgettext(0LL, \"will not create hard link %s to directory %s\", 5);\n    error(0, 0, v74, v15, v73);\n    goto LABEL_135;\n  }\nLABEL_142:\n  if ( !v12[1].m128i_i8[8] )\n  {\n    fildes[0] = (unsigned __int8)src;\n    goto LABEL_68;\n  }\nLABEL_149:\n  if ( !rename(v11, filename) )\n  {\n    if ( v12[2].m128i_i8[14] )\n    {\n      v157 = dcgettext(0LL, \"renamed \", 5);\n      __printf_chk(1LL, v157, v158, v159, v160, v161);\n      sub_404D70((__int64)v11, (__int64)filename, (__int64)old);\n    }\n    if ( v12[2].m128i_i8[1] )\n      sub_405620((__int64)filename, 0LL, 1LL, (__int64)v12);\n    if ( a11 )\n      *a11 = 1;\n    if ( (_BYTE)a8 )\n    {\n      a7 = a8;\n      sub_40AE60(v12[3].m128i_i64[1], filename, v315);\n      return a7;\n    }\n    return 1;\n  }\n  v80 = __errno_location();\n  v81 = v80;\n  v82 = *v80;\n  if ( v82 == 22 )\n  {\n    a7 = 1;\n    v186 = sub_40E920(1LL, 4LL, qword_621988);\n    v187 = sub_40E920(0LL, 4LL, qword_621990);\n    v188 = dcgettext(0LL, \"cannot move %s to a subdirectory of itself, %s\", 5);\n    error(0, 0, v188, v187, v186);\n    *a10 = 1;\n    return a7;\n  }\n  if ( v82 != 18 )\n  {\n    v129 = sub_40E920(1LL, 4LL, filename);\n    v130 = \"cannot move %s to %s\";\n    v131 = sub_40E920(0LL, 4LL, v11);\n    goto LABEL_256;\n  }\n  if ( v318 == 0x4000 )\n  {\n    if ( !rmdir(filename) || *v81 == 2 )\n      goto LABEL_156;\n    goto LABEL_255;\n  }\n  if ( unlink(filename) && *v81 != 2 )\n  {\nLABEL_255:\n    v129 = sub_40E920(1LL, 4LL, filename);\n    v130 = \"inter-device move failed: %s to %s; unable to remove target\";\n    v131 = sub_40E920(0LL, 4LL, v11);\nLABEL_256:\n    v132 = dcgettext(0LL, v130, 5);\n    error(0, *v81, v132, v131, v129);\n    sub_409980(stat_buf.st_ino, stat_buf.st_dev);\n    return a7;\n  }\n  LOBYTE(src) = v12[2].m128i_i8[14] & (v318 != 0x4000);\n  if ( !(_BYTE)src )\n  {\nLABEL_156:\n    fildes[0] = 1;\n    LOBYTE(src) = 1;\n    goto LABEL_68;\n  }\n  v181 = dcgettext(0LL, \"copied \", 5);\n  __printf_chk(1LL, v181, v182, v183, v184, v185);\n  sub_404D70((__int64)v11, (__int64)filename, (__int64)old);\n  fildes[0] = 1;\nLABEL_68:\n  v40 = v317 & 0xFFF;\n  if ( v12[2].m128i_i8[11] )\n    v40 = v12[1].m128i_i32[0] & 0xFFF;\n  if ( v12[1].m128i_i8[13] )\n  {\n    if ( !(unsigned __int8)sub_405550((__int64)v11, (__int64)filename, v317, fildes[0], (__int64)v12) )\n      return a7;\n    LODWORD(s1) = v40 & 0x3F;\n    if ( v318 != 0x4000 )\n      goto LABEL_73;\nLABEL_178:\n    v89 = stat_buf.st_ino;\n    v90 = stat_buf.st_dev;\n    v91 = *(_QWORD **)fd;\n    if ( *(_QWORD *)fd )\n    {\n      while ( v91[1] != stat_buf.st_ino || v91[2] != stat_buf.st_dev )\n      {\n        v91 = (_QWORD *)*v91;\n        if ( !v91 )\n          goto LABEL_200;\n      }\n      v92 = \"cannot copy cyclic symbolic link %s\";\n      v15 = sub_40EA00(4LL, v11);\n      goto LABEL_184;\n    }\nLABEL_200:\n    v98 = (_QWORD *)((unsigned __int64)&v290 & 0xFFFFFFFFFFFFFFF0LL);\n    v14 = (_BYTE)src == 0;\n    v307 = (__int64)v98;\n    *v98 = *(_QWORD *)fd;\n    v98[1] = v89;\n    v98[2] = v90;\n    if ( v14 && (v329.st_mode & 0xF000) == 0x4000 )\n    {\n      if ( v12[2].m128i_i64[0] & 0xFF000000FF00LL\n        && !(unsigned __int8)sub_405620((__int64)filename, v12[2].m128i_u8[5], 0LL, (__int64)v12)\n        && v12[2].m128i_i8[6] )\n      {\n        goto LABEL_197;\n      }\n      v305 = 0;\n      LODWORD(s1) = 0;\n    }\n    else\n    {\n      if ( mkdir(filename, v40 & ~(_DWORD)s1) )\n      {\n        v95 = \"cannot create directory %s\";\n        v15 = sub_40EA00(4LL, filename);\n        goto LABEL_196;\n      }\n      if ( __lxstat(1, filename, &v329) )\n      {\n        v95 = \"cannot stat %s\";\n        v15 = sub_40EA00(4LL, filename);\n        goto LABEL_196;\n      }\n      v99 = v329.st_mode;\n      v305 = 0;\n      if ( (v329.st_mode & 0x1C0) != 448 )\n      {\n        v100 = chmod(filename, v329.st_mode | 0x1C0);\n        v298 = v99;\n        v305 = 1;\n        if ( v100 )\n        {\n          v95 = \"setting permissions for %s\";\n          v15 = sub_40EA00(4LL, filename);\n          goto LABEL_196;\n        }\n      }\n      if ( !*a9 )\n      {\n        sub_409A10(filename);\n        *a9 = 1;\n      }\n      if ( v12[2].m128i_i8[14] )\n      {\n        if ( v12[1].m128i_i8[8] )\n        {\n          v101 = sub_40EA00(4LL, filename);\n          v102 = dcgettext(0LL, \"created directory %s\\n\", 5);\n          __printf_chk(1LL, v102, v101, v103, v104, v105);\n        }\n        else\n        {\n          sub_404D70((__int64)v11, (__int64)filename, 0LL);\n        }\n      }\n    }\n    LOBYTE(ptr) = v12[1].m128i_i8[12] & (v311 != 0);\n    if ( !(_BYTE)ptr || (LOBYTE(fd[0]) = 0, v43 = 0, *(_QWORD *)v311 == stat_buf.st_dev) )\n    {\n      v106 = _mm_loadu_si128(v12 + 1);\n      v107 = _mm_loadu_si128(v12 + 2);\n      v108 = _mm_loadu_si128(v12 + 3);\n      v109 = v12[4].m128i_i64[0];\n      *(__m128i *)&v331.st_dev = _mm_loadu_si128(v12);\n      *(__m128i *)&v331.st_nlink = v106;\n      *(__m128i *)&v331.st_gid = v107;\n      *(__m128i *)&v331.st_size = v108;\n      v331.st_blocks = v109;\n      s = (char *)sub_40F480(v11, 2LL);\n      if ( s )\n      {\n        if ( HIDWORD(v12->m128i_i64[0]) == 3 )\n          HIDWORD(v331.st_dev) = 2;\n        if ( *s )\n        {\n          LOBYTE(v300) = a7;\n          v110 = s;\n          s2 = (char *)&v330;\n          v111 = 0;\n          v306 = &v331;\n          v299 = (__blksize_t)v12;\n          LOBYTE(ptr) = 1;\n          v311 = (__off_t)&length;\n          *(_QWORD *)fd = v11;\n          v302 = a8;\n          do\n          {\n            v112 = (void *)sub_40B0C0(*(_QWORD *)fd, v110, 0LL);\n            v113 = sub_40B0C0(filename, v110, 0LL);\n            v114 = (void *)v113;\n            LOBYTE(v330.st_dev) = *a9;\n            v115 = sub_405990((_DWORD)v112, v113, (unsigned int)fildes[0], (__int64)v315, v307);\n            LOBYTE(ptr) = v115 & (unsigned __int8)ptr;\n            *a10 |= length;\n            free(v114);\n            free(v112);\n            if ( (_BYTE)length )\n              break;\n            v111 |= LOBYTE(v330.st_dev);\n            v110 += strlen(v110) + 1;\n          }\n          while ( *v110 );\n          v116 = v111;\n          v11 = *(char **)fd;\n          a7 = (unsigned __int8)v300;\n          v12 = (const __m128i *)v299;\n          v15 = v302;\n        }\n        else\n        {\n          v116 = 0;\n          LOBYTE(ptr) = 1;\n        }\n        free(s);\n        *a9 = v116;\n      }\n      else\n      {\n        *(_QWORD *)fildes = sub_40EA00(4LL, v11);\n        v214 = dcgettext(0LL, \"cannot access %s\", 5);\n        v215 = __errno_location();\n        error(0, *v215, v214, *(_QWORD *)fildes);\n        LOBYTE(ptr) = 0;\n      }\n      LOBYTE(fd[0]) = 0;\n      v43 = 0;\n    }\n    goto LABEL_79;\n  }\n  if ( v318 == 0x4000 )\n  {\n    if ( !(unsigned __int8)sub_405550((__int64)v11, (__int64)filename, v317, fildes[0], (__int64)v12) )\n      return a7;\n    LODWORD(s1) = v40 & 0x12;\n    goto LABEL_178;\n  }\n  v41 = sub_405550((__int64)v11, (__int64)filename, v317, fildes[0], (__int64)v12);\n  LODWORD(s1) = 0;\n  if ( !v41 )\n    return a7;\nLABEL_73:\n  LOBYTE(fd[0]) = v12[2].m128i_i8[12];\n  if ( LOBYTE(fd[0]) )\n  {\n    if ( *v11 == 47 )\n    {\nLABEL_77:\n      if ( (int)sub_409FD0(v11, 4294967196LL, filename, v12[1].m128i_u8[6]) < 0 )\n      {\n        v15 = sub_40E920(1LL, 4LL, v11);\n        v189 = sub_40E920(0LL, 4LL, filename);\n        v190 = dcgettext(0LL, \"cannot create symbolic link %s to %s\", 5);\n        v191 = __errno_location();\n        error(0, *v191, v190, v189, v15);\n        goto LABEL_197;\n      }\n      v305 = 0;\n      v43 = 0;\n      LOBYTE(ptr) = fd[0];\n      goto LABEL_79;\n    }\n    v42 = (void *)sub_40AC60(filename);\n    if ( !strcmp(\".\", (const char *)v42)\n      || __xstat(1, \".\", &v330)\n      || __xstat(1, (const char *)v42, &v331)\n      || v330.st_ino == v331.st_ino && v330.st_dev == v331.st_dev )\n    {\n      free(v42);\n      goto LABEL_77;\n    }\n    free(v42);\n    v92 = \"%s: can make relative symbolic links only in current directory\";\n    v15 = sub_40EAD0(0LL, 3LL, filename, v156);\nLABEL_184:\n    v93 = dcgettext(0LL, v92, 5);\n    error(0, 0, v93, v15);\n    goto LABEL_197;\n  }\n  v305 = v12[1].m128i_i8[7];\n  if ( v305 )\n  {\n    v128 = sub_404F50((__int64)v11, (__int64)filename, v12[1].m128i_u8[6], 0, (char)ptr);\n    v43 = 0;\n    v305 = 0;\n    LOBYTE(ptr) = v128;\n    if ( !v128 )\n      goto LABEL_197;\nLABEL_79:\n    v44 = v318 != 0x4000;\n    if ( !(_BYTE)src && v12[1].m128i_i8[4] != 1 && v44 )\n    {\n      if ( v12[2].m128i_i64[0] & 0xFF000000FF00LL )\n      {\n        v45 = v12[2].m128i_u8[5];\n        LOBYTE(fildes[0]) = v43;\n        v46 = sub_405620((__int64)filename, v45, 0LL, (__int64)v12);\n        v43 = fildes[0];\n        if ( !v46 )\n        {\n          if ( v12[2].m128i_i8[6] )\n            goto LABEL_197;\n        }\n      }\n    }\n    if ( (_BYTE)v15 )\n    {\n      if ( v12[3].m128i_i64[1] )\n      {\n        LOBYTE(fildes[0]) = v43;\n        v47 = __lxstat(1, filename, &v331);\n        v43 = fildes[0];\n        if ( !v47 )\n        {\n          sub_40AE60(v12[3].m128i_i64[1], filename, &v331);\n          v43 = fildes[0];\n        }\n      }\n    }\n    if ( v12[1].m128i_i8[7] && v44 || v43 )\n      return (unsigned __int8)ptr;\n    if ( v12[1].m128i_i8[15] )\n    {\n      v331.st_dev = stat_buf.st_atim.tv_sec;\n      v331.st_ino = stat_buf.st_atim.tv_nsec;\n      *(timespec *)&v331.st_nlink = stat_buf.st_mtim;\n      if ( !LOBYTE(fd[0]) )\n      {\n        if ( !(unsigned int)sub_410AA0(filename) )\n        {\nLABEL_98:\n          if ( !v12[1].m128i_i8[13] || !(_BYTE)src && stat_buf.st_uid == v329.st_uid && stat_buf.st_gid == v329.st_gid )\n            goto LABEL_105;\n          v51 = sub_405770((__int64)v12, filename, 0xFFFFFFFF, v315, (char)src, (__int64)&v329);\n          if ( v51 != -1 )\n          {\n            v52 = v317;\n            BYTE1(v52) &= 0xF1u;\n            if ( v51 )\n              v52 = v317;\n            v317 = v52;\nLABEL_105:\n            if ( !(v12[1].m128i_i64[1] & 0xFF0000000000FFLL) )\n            {\n              if ( v12[2].m128i_i8[11] )\n              {\n                v196 = v12[1].m128i_u32[0];\n              }\n              else\n              {\n                if ( !v12[2].m128i_i8[0] )\n                {\n                  if ( (_DWORD)s1 && (LODWORD(s1) = ~(unsigned int)sub_405960() & (unsigned int)s1, (_DWORD)s1) )\n                  {\n                    if ( v305 != 1 )\n                    {\n                      if ( (_BYTE)src && __lxstat(1, filename, &v329) )\n                      {\n                        v17 = filename;\n                        goto LABEL_118;\n                      }\n                      v298 = v329.st_mode;\n                      if ( !(~v329.st_mode & (unsigned int)s1) )\n                        return (unsigned __int8)ptr;\n                    }\n                  }\n                  else if ( !v305 )\n                  {\n                    return (unsigned __int8)ptr;\n                  }\n                  if ( !chmod(filename, (unsigned int)s1 | v298) )\n                    return (unsigned __int8)ptr;\n                  v53 = sub_40EA00(4LL, filename);\n                  v54 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n                  v55 = __errno_location();\n                  error(0, *v55, v54, v53);\nLABEL_112:\n                  v56 = (unsigned __int8)ptr;\n                  if ( v12[2].m128i_i8[4] )\n                    v56 = a7;\n                  return v56;\n                }\n                v196 = ~(unsigned __int16)sub_405960() & 0x1FF;\n              }\n              v14 = (unsigned int)sub_40A160(filename, 0xFFFFFFFFLL, v196) == 0;\n              v197 = (unsigned __int8)ptr;\n              if ( !v14 )\n                v197 = a7;\n              return v197;\n            }\n            if ( !(unsigned int)sub_40A0D0(v11, 0xFFFFFFFFLL, filename, 0xFFFFFFFFLL, v317) )\n              return (unsigned __int8)ptr;\n            goto LABEL_112;\n          }\n          return 0;\n        }\n        goto LABEL_96;\n      }\n      if ( (unsigned int)sub_410AB0(filename) && *__errno_location() != 38 )\n      {\nLABEL_96:\n        v48 = sub_40EA00(4LL, filename);\n        v49 = dcgettext(0LL, \"preserving times for %s\", 5);\n        v50 = __errno_location();\n        error(0, *v50, v49, v48);\n        if ( v12[2].m128i_i8[4] )\n          return 0;\n        goto LABEL_97;\n      }\n    }\nLABEL_97:\n    if ( LOBYTE(fd[0]) )\n      return (unsigned __int8)ptr;\n    goto LABEL_98;\n  }\n  if ( v318 != 0x8000 && !(v12[1].m128i_i8[4] & (v318 != 40960)) )\n  {\n    LOBYTE(fildes[0]) = 0;\n    if ( v318 == 4096 )\n    {\n      v331.st_dev = 0LL;\n      v202 = v317 & ~(_DWORD)s1;\n      v203 = __xmknod(0, filename, v317 & ~(_DWORD)s1, &v331.st_dev);\n      v43 = fildes[0];\n      if ( !v203 || (v218 = mkfifo(filename, v202 & 0xFFFFEFFF), v43 = fildes[0], !v218) )\n      {\n        LOBYTE(fd[0]) = v43;\n        v305 = v43;\n        LOBYTE(ptr) = 1;\n        goto LABEL_79;\n      }\n      v95 = \"cannot create fifo %s\";\n      v15 = sub_40EA00(4LL, filename);\n      goto LABEL_196;\n    }\n    LOBYTE(ptr) = v318 == 49152 || (v317 & 0xB000) == 0x2000;\n    if ( (_BYTE)ptr )\n    {\n      v331.st_dev = stat_buf.st_rdev;\n      v94 = __xmknod(0, filename, v317 & ~(_DWORD)s1, &v331.st_dev);\n      v43 = fildes[0];\n      LOBYTE(fd[0]) = fildes[0];\n      v305 = fildes[0];\n      if ( !v94 )\n        goto LABEL_79;\n      v95 = \"cannot create special file %s\";\n      v15 = sub_40EA00(4LL, filename);\nLABEL_196:\n      v96 = dcgettext(0LL, v95, 5);\n      v97 = __errno_location();\n      error(0, *v97, v96, v15);\n      goto LABEL_197;\n    }\n    if ( v318 != 40960 )\n    {\n      v92 = \"%s has unknown file type\";\n      v15 = sub_40EA00(4LL, v11);\n      goto LABEL_184;\n    }\n    v192 = sub_40A1C0(v11);\n    v193 = (char *)v192;\n    if ( !v192 )\n    {\n      v95 = \"cannot read symbolic link %s\";\n      v15 = sub_40EA00(4LL, v11);\n      goto LABEL_196;\n    }\n    if ( (int)sub_409FD0(v192, 4294967196LL, filename, v12[1].m128i_u8[6]) < 0 )\n    {\n      fildes[0] = *__errno_location();\n      if ( fildes[0] )\n      {\n        if ( v12[2].m128i_i8[13] == 1 && !(_BYTE)src && (v329.st_mode & 0xF000) == 40960 )\n        {\n          v271 = -1LL;\n          v272 = v193;\n          do\n          {\n            if ( !v271 )\n              break;\n            v14 = *v272++ == (_BYTE)src;\n            --v271;\n          }\n          while ( !v14 );\n          if ( v329.st_size == -v271 - 2 )\n          {\n            v273 = (void *)sub_40A1C0(filename);\n            if ( v273 )\n            {\n              ptr = v273;\n              if ( !strcmp((const char *)v273, v193) )\n              {\n                free(ptr);\n                goto LABEL_377;\n              }\n              free(ptr);\n            }\n          }\n        }\n        free(v193);\n        v219 = sub_40EA00(4LL, filename);\n        v220 = dcgettext(0LL, \"cannot create symbolic link %s\", 5);\n        error(0, fildes[0], v220, v219);\n        goto LABEL_197;\n      }\n    }\nLABEL_377:\n    free(v193);\n    v305 = v12[2].m128i_i8[5];\n    if ( !v305 )\n    {\n      v43 = v12[1].m128i_i8[13];\n      if ( v43 )\n      {\n        LOBYTE(fildes[0]) = v12[1].m128i_i8[13];\n        if ( lchown(filename, stat_buf.st_uid, stat_buf.st_gid) )\n        {\n          LOBYTE(fd[0]) = sub_405740((__int64)v12);\n          if ( LOBYTE(fd[0]) )\n          {\n            v43 = 0;\n            LOBYTE(ptr) = fd[0];\n          }\n          else\n          {\n            v269 = dcgettext(0LL, \"failed to preserve ownership for %s\", 5);\n            v270 = __errno_location();\n            error(0, *v270, v269, filename);\n            v305 = v12[2].m128i_i8[4];\n            if ( v305 )\n              goto LABEL_197;\n            LOBYTE(fd[0]) = fildes[0];\n            LOBYTE(ptr) = fildes[0];\n            v43 = 0;\n          }\n        }\n        else\n        {\n          LOBYTE(fd[0]) = fildes[0];\n          LOBYTE(ptr) = fildes[0];\n          v43 = 0;\n        }\n      }\n      else\n      {\n        v305 = 0;\n        LOBYTE(fd[0]) = 1;\n        LOBYTE(ptr) = 1;\n      }\n      goto LABEL_79;\n    }\nLABEL_240:\n    sub_404D30();\n    goto LABEL_241;\n  }\n  LODWORD(v307) = stat_buf.st_mode;\n  LOBYTE(s2) = v12[2].m128i_i8[3];\n  fildes[0] = sub_40AE10((char)v11);\n  if ( fildes[0] < 0 )\n  {\n    v95 = \"cannot open %s for reading\";\n    v15 = sub_40EA00(4LL, v11);\n    goto LABEL_196;\n  }\n  if ( __fxstat(1, fildes[0], &v330) )\n  {\n    ptr = (void *)sub_40EA00(4LL, v11);\n    v212 = dcgettext(0LL, \"cannot fstat %s\", 5);\n    v213 = __errno_location();\n    v147 = ptr;\n    v149 = v212;\n    v148 = *v213;\n    goto LABEL_303;\n  }\n  if ( stat_buf.st_ino != v330.st_ino || stat_buf.st_dev != v330.st_dev )\n  {\n    v194 = sub_40EA00(4LL, v11);\n    v195 = dcgettext(0LL, \"skipping file %s, as it was replaced while being copied\", 5);\n    v147 = (void *)v194;\n    v148 = 0;\n    v149 = v195;\n    goto LABEL_303;\n  }\n  v295 = v40 & 0x1FF;\n  if ( (_BYTE)src )\n    goto LABEL_441;\n  v140 = filename;\n  v141 = sub_40AE10((char)filename);\n  fd[0] = v141;\n  if ( v12[2].m128i_i64[0] & 0xFF000000FF00LL )\n  {\n    if ( v141 < 0 )\n    {\nLABEL_295:\n      v142 = __errno_location();\n      v143 = v142;\n      if ( !v12[1].m128i_i8[6] )\n      {\n        v145 = *v142;\n        if ( *v142 != 2 || v12[1].m128i_i8[8] )\n        {\n          LOBYTE(src) = 0;\n          goto LABEL_302;\n        }\n        v297 = 0;\n        goto LABEL_300;\n      }\n      if ( unlink(filename) )\n      {\n        ptr = (void *)sub_40EA00(4LL, filename);\n        v282 = dcgettext(0LL, \"cannot remove %s\", 5);\n        v147 = ptr;\n        v148 = *v143;\n        v149 = v282;\n        goto LABEL_303;\n      }\n      if ( v12[2].m128i_i8[14] )\n      {\n        v274 = sub_40EA00(4LL, filename);\n        v275 = dcgettext(0LL, \"removed %s\\n\", 5);\n        __printf_chk(1LL, v275, v274, v276, v277, v278);\n      }\n      LOBYTE(src) = v12[2].m128i_i8[1];\n      v297 = (int)s1;\n      if ( !(_BYTE)src )\n      {\nLABEL_300:\n        LODWORD(ptr) = v295 & ~v297;\n        fd[0] = sub_40AE10((char)filename);\n        v144 = __errno_location();\n        v145 = *v144;\n        v311 = (__off_t)v144;\n        LOBYTE(v306) = fd[0] < 0 && v145 == 17;\n        if ( (_BYTE)v306 )\n        {\n          v145 = 17;\n          LOBYTE(src) = v12[1].m128i_i8[8];\n          if ( (_BYTE)src )\n            goto LABEL_302;\n          if ( !__lxstat(1, filename, &v331) && (v331.st_mode & 0xF000) == 40960 )\n          {\n            if ( !v12[3].m128i_i8[0] )\n            {\n              LOBYTE(fd[0]) = 0;\n              v288 = sub_40EA00(4LL, filename);\n              v289 = dcgettext(0LL, \"not writing through dangling symlink %s\", 5);\n              error(0, 0, v289, v288);\n              ptr = 0LL;\n              v150 = fd[0];\n              LOBYTE(src) = (_BYTE)v306;\n              goto LABEL_304;\n            }\n            fd[0] = sub_40AE10((char)filename);\n            v145 = *(_DWORD *)v311;\n          }\n        }\n        LOBYTE(src) = fd[0] < 0 && v145 == 21;\n        if ( (_BYTE)src )\n        {\n          v145 = 21;\n          if ( *filename )\n            v145 = (filename[strlen(filename) - 1] != 47) + 20;\n          goto LABEL_302;\n        }\n        LOBYTE(src) = 1;\n        if ( fd[0] < 0 )\n        {\nLABEL_302:\n          ptr = (void *)sub_40EA00(4LL, filename);\n          v146 = dcgettext(0LL, \"cannot create regular file %s\", 5);\n          v147 = ptr;\n          v148 = v145;\n          v149 = v146;\nLABEL_303:\n          error(0, v148, v149, v147);\n          v150 = 0;\n          ptr = 0LL;\n          goto LABEL_304;\n        }\n        goto LABEL_458;\n      }\n      v150 = sub_405550((__int64)v11, (__int64)filename, v295, 1u, (__int64)v12);\n      if ( !v150 )\n      {\n        ptr = 0LL;\n        goto LABEL_304;\n      }\nLABEL_441:\n      v297 = (int)s1;\n      goto LABEL_300;\n    }\n    v234 = sub_405620((__int64)v140, v12[2].m128i_u8[5], 0LL, (__int64)v12);\n    if ( !v234 )\n    {\n      LOBYTE(src) = v12[2].m128i_i8[6];\n      if ( (_BYTE)src )\n      {\n        LOBYTE(src) = 0;\n        ptr = 0LL;\n        goto LABEL_490;\n      }\n    }\n  }\n  else if ( fd[0] < 0 )\n  {\n    goto LABEL_295;\n  }\n  v297 = 0;\nLABEL_458:\n  v306 = &v331;\n  LODWORD(v311) = __fxstat(1, fd[0], &v331);\n  if ( (_DWORD)v311 )\n  {\n    ptr = (void *)sub_40EA00(4LL, filename);\n    v242 = dcgettext(0LL, \"cannot fstat %s\", 5);\n    v243 = __errno_location();\n    error(0, *v243, v242, ptr);\n    v234 = 0;\n    ptr = 0LL;\n    goto LABEL_490;\n  }\n  if ( !(_BYTE)s2 )\n    goto LABEL_623;\n  if ( !v12[3].m128i_i32[1] )\n    goto LABEL_461;\n  if ( !ioctl(fd[0], 0x40049409uLL, (unsigned int)fildes[0]) )\n  {\nLABEL_623:\n    ptr = 0LL;\n    goto LABEL_477;\n  }\n  if ( v12[3].m128i_i32[1] == 2 )\n  {\n    v311 = sub_40E920(1LL, 4LL, v11);\n    v267 = sub_40E920(0LL, 4LL, filename);\n    ptr = dcgettext(0LL, \"failed to clone %s from %s\", 5);\n    v268 = __errno_location();\n    error(0, *v268, (const char *)ptr, v267, v311);\n    v234 = 0;\n    ptr = 0LL;\n    goto LABEL_490;\n  }\nLABEL_461:\n  v226 = getpagesize();\n  v299 = v331.st_blksize;\n  s = (char *)v331.st_blksize;\n  if ( (unsigned __int64)(v331.st_blksize - 0x20000) > 0x1FFFFFFFFFFE0000LL )\n  {\n    s = (char *)0x20000;\n    v227 = 512LL;\n    if ( (unsigned __int64)(v299 - 1) <= 0x1FFFFFFFFFFFFFFFLL )\n      v227 = v299;\n    v299 = v227;\n  }\n  j__posix_fadvise(fildes[0], 0LL, 0LL, 2);\n  if ( (v330.st_mode & 0xF000) == 0x8000 )\n    LODWORD(v311) = v330.st_blocks < v330.st_size / 512;\n  ptr = (void *)(v226 - 1);\n  if ( (v331.st_mode & 0xF000) != 0x8000 )\n    goto LABEL_468;\n  v266 = HIDWORD(v12->m128i_i64[1]);\n  if ( v266 == 3 )\n  {\n    ptr = (void *)sub_4112E0(&s[v226]);\n    v231 = ((unsigned __int64)ptr + v226 - 1) % v226;\n    v296 = (char *)ptr + v226 - v231 - 1;\n    if ( !(_DWORD)v311 )\n    {\n      v232 = HIDWORD(v12->m128i_i64[1]) == 3;\n      v311 = (__off_t)&length;\n      goto LABEL_475;\n    }\n  }\n  else\n  {\n    if ( v266 != 2 || !(v311 & 1) )\n    {\nLABEL_468:\n      v228 = v330.st_blksize;\n      LODWORD(v300) = v330.st_mode & 0xF000;\n      ptr = (void *)(0x7FFFFFFFFFFFFFFFLL - v226);\n      if ( (unsigned __int64)(v330.st_blksize - 0x20000) > 0x1FFFFFFFFFFE0000LL )\n        v228 = 0x20000LL;\n      v229 = sub_40A980(v228, s, 0x7FFFFFFFFFFFFFFFLL - v226);\n      if ( (_DWORD)v300 == 0x8000 && (unsigned __int64)s > v330.st_size )\n        s = (char *)(v330.st_size + 1);\n      v230 = &s[v229 - 1 - (unsigned __int64)&s[v229 - 1] % v229];\n      s = v230;\n      if ( !v230 || ptr < v230 )\n        s = (char *)v229;\n      ptr = (void *)sub_4112E0(&s[v226]);\n      v231 = ((unsigned __int64)ptr + v226 - 1) % v226;\n      v296 = (char *)ptr + v226 - v231 - 1;\n      if ( !(_DWORD)v311 )\n      {\n        v14 = HIDWORD(v12->m128i_i64[1]) == 3;\n        v299 = 0LL;\n        v311 = (__off_t)&length;\n        v232 = v14;\nLABEL_475:\n        v291 = v231;\n        if ( !(unsigned __int8)sub_405120(\n                                 v296,\n                                 (size_t)s,\n                                 (unsigned __int64)&savedregs,\n                                 fildes[0],\n                                 fd[0],\n                                 v299,\n                                 v232,\n                                 (__int64)v11,\n                                 (__int64)filename,\n                                 0xFFFFFFFFFFFFFFFFLL,\n                                 (_QWORD *)v311,\n                                 &v322) )\n          goto LABEL_513;\n        if ( !(_BYTE)v322 || ftruncate(fd[0], length) >= 0 )\n          goto LABEL_477;\n        goto LABEL_602;\n      }\n      v303 = 0;\n      v302 = 1;\n      goto LABEL_529;\n    }\n    ptr = (void *)sub_4112E0(&s[v226]);\n    v296 = (char *)ptr + v226 - ((unsigned __int64)ptr + v226 - 1) % v226 - 1;\n  }\n  v302 = HIDWORD(v12->m128i_i64[1]);\n  v303 = (char)s2;\nLABEL_529:\n  v245 = 0LL;\n  v311 = (__off_t)&length;\n  v292 = v330.st_size;\n  sub_409AE0((unsigned int)fildes[0], &length);\n  v294 = a8;\n  v246 = 0LL;\n  v293 = v12;\n  v247 = v292;\n  v304 = a7;\n  v248 = (char)s2;\n  v300 = v11;\n  v249 = 0LL;\n  do\n  {\n    s2 = v246;\n    v250 = sub_409B10(v311);\n    v246 = s2;\n    if ( !v250 )\n    {\n      LOBYTE(s2) = v248;\n      v11 = v300;\n      a7 = v304;\n      v12 = v293;\n      v15 = v294;\n      if ( v326 )\n        goto LABEL_555;\n      if ( !v325 )\n      {\n        v259 = \"%s: failed to get extents info\";\n        v311 = sub_40EAD0(0LL, 3LL, v300, v246);\n        goto LABEL_563;\n      }\n      v287 = 0LL;\n      v232 = HIDWORD(v293->m128i_i64[1]) == 3;\n      if ( v303 )\n        v287 = v299;\n      v299 = v287;\n      goto LABEL_475;\n    }\n    if ( !v324.tv_nsec )\n      goto LABEL_553;\n    v251 = v249;\n    v252 = v245;\n    v253 = 0;\n    v254 = 0LL;\n    while ( 1 )\n    {\n      v256 = (__off_t *)((char *)v327 + 24 * v254);\n      v245 = *v256;\n      v249 = v256[1];\n      if ( v247 < (__int64)(*v256 + v249) )\n      {\n        if ( v245 > v247 )\n          v245 = v247;\n        v249 = v247 - v245;\n      }\n      v248 = 0;\n      if ( v245 - v252 != v251 )\n      {\n        s2 = (char *)(v245 - v252 - v251);\n        if ( lseek(fildes[0], v245, 0) < 0 )\n        {\n          v11 = v300;\n          a7 = v304;\n          v12 = v293;\n          v15 = v294;\n          v279 = \"cannot lseek %s\";\n          v311 = sub_40EA00(4LL, v300);\n        }\n        else\n        {\n          if ( v302 != 1 )\n          {\n            v248 = sub_405060(fd[0], (__int64)filename, v302 == 3, (__off_t)s2);\n            if ( !v248 )\n            {\nLABEL_548:\n              a7 = v304;\n              v11 = v300;\n              v12 = v293;\n              v15 = v294;\nLABEL_549:\n              free(v327);\n              goto LABEL_513;\n            }\n            goto LABEL_533;\n          }\n          if ( (unsigned __int8)sub_404C20(fd[0], (size_t)s2) )\n          {\n            v255 = 0LL;\n            goto LABEL_535;\n          }\n          a7 = v304;\n          v11 = v300;\n          v12 = v293;\n          v15 = v294;\n          v279 = \"%s: write failed\";\n          v311 = sub_40EAD0(0LL, 3LL, filename, v257);\n        }\n        v280 = dcgettext(0LL, v279, 5);\n        v281 = __errno_location();\n        error(0, *v281, v280, v311);\n        goto LABEL_549;\n      }\nLABEL_533:\n      v255 = 0LL;\n      if ( v302 == 3 )\n        v255 = v299;\nLABEL_535:\n      if ( !(unsigned __int8)sub_405120(\n                               v296,\n                               (size_t)s,\n                               (unsigned __int64)&savedregs,\n                               fildes[0],\n                               fd[0],\n                               v255,\n                               1,\n                               (__int64)v300,\n                               (__int64)filename,\n                               v249,\n                               &v322,\n                               &v321) )\n        goto LABEL_548;\n      v246 = (char *)(v245 + v322);\n      if ( v322 )\n        v248 = v321;\n      if ( (char *)v247 == v246 )\n        break;\n      v252 = v245;\n      v251 = v249;\n      v254 = ++v253;\n      if ( (unsigned __int64)v253 >= v324.tv_nsec )\n        goto LABEL_553;\n    }\n    v326 = 1;\nLABEL_553:\n    s2 = v246;\n    free(v327);\n    v327 = 0LL;\n    v324.tv_nsec = 0LL;\n    v246 = s2;\n  }\n  while ( !v326 );\n  LOBYTE(s2) = v248;\n  v11 = v300;\n  a7 = v304;\n  v12 = v293;\n  v15 = v294;\nLABEL_555:\n  v258 = v292 > (__int64)v246;\n  if ( v292 <= (__int64)v246 && !(_BYTE)s2 )\n    goto LABEL_477;\n  if ( v302 == 1 )\n  {\n    if ( (unsigned __int8)sub_404C20(fd[0], v292 - (_QWORD)v246) )\n      goto LABEL_477;\n    goto LABEL_602;\n  }\n  v311 = (__off_t)v246;\n  if ( ftruncate(fd[0], v292) )\n  {\nLABEL_602:\n    v259 = \"failed to extend %s\";\n    v311 = sub_40EA00(4LL, filename);\nLABEL_563:\n    v260 = dcgettext(0LL, v259, 5);\n    v261 = __errno_location();\n    error(0, *v261, v260, v311);\n    goto LABEL_513;\n  }\n  if ( v302 == 3 && v258 && (int)sub_404CD0(fd[0], v311, v292 - v311) < 0 )\n  {\n    v259 = \"error deallocating %s\";\n    v311 = sub_40EA00(4LL, filename);\n    goto LABEL_563;\n  }\nLABEL_477:\n  if ( !v12[1].m128i_i8[15]\n    || (length = (__int128)stat_buf.st_atim, v324 = stat_buf.st_mtim, !(unsigned int)sub_410660(fd[0], filename))\n    || (v311 = sub_40EA00(4LL, filename),\n        v238 = dcgettext(0LL, \"preserving times for %s\", 5),\n        v239 = __errno_location(),\n        error(0, *v239, v238, v311),\n        !v12[2].m128i_i8[4]) )\n  {\n    if ( v12[1].m128i_i8[13] && (stat_buf.st_uid != v331.st_uid || stat_buf.st_gid != v331.st_gid) )\n    {\n      v233 = sub_405770((__int64)v12, filename, fd[0], v315, (char)src, (__int64)v306);\n      if ( v233 == -1 )\n        goto LABEL_513;\n      if ( !v233 )\n        LODWORD(v307) = v307 & 0xFFFFF1FF;\n    }\n    if ( v12[2].m128i_i8[7] && SLOBYTE(v331.st_mode) >= 0 && geteuid() && !sub_404D10(fd[0], filename, 0x180u) )\n      sub_404D10(fd[0], filename, v295 & ~v297);\n    if ( !(v12[1].m128i_i64[1] & 0xFF0000000000FFLL) )\n    {\n      if ( v12[2].m128i_i8[11] )\n      {\n        v262 = v12[1].m128i_u32[0];\n      }\n      else\n      {\n        if ( !v12[2].m128i_i8[0] )\n        {\n          v234 = 1;\n          if ( !v297 )\n            goto LABEL_490;\n          LOBYTE(v311) = 1;\n          v283 = sub_405960();\n          v234 = v311;\n          if ( !(~v283 & v297) )\n            goto LABEL_490;\n          v284 = sub_404D10(fd[0], filename, v295);\n          v234 = v311;\n          if ( !v284 )\n            goto LABEL_490;\n          v311 = sub_40EA00(4LL, filename);\n          v285 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n          v286 = __errno_location();\n          error(0, *v286, v285, v311);\n          goto LABEL_523;\n        }\n        v262 = ~(unsigned __int16)sub_405960() & 0x1B6;\n      }\n      v234 = (unsigned int)sub_40A160(filename, (unsigned int)fd[0], v262) == 0;\n      goto LABEL_490;\n    }\n    v244 = sub_40A0D0(v11, (unsigned int)fildes[0], filename, (unsigned int)fd[0], (unsigned int)v307);\n    v234 = 1;\n    if ( !v244 )\n      goto LABEL_490;\nLABEL_523:\n    v234 = v12[2].m128i_i8[4] ^ 1;\n    goto LABEL_490;\n  }\nLABEL_513:\n  v234 = 0;\nLABEL_490:\n  LOBYTE(v311) = v234;\n  v235 = close(fd[0]);\n  v150 = v311;\n  if ( v235 < 0 )\n  {\n    *(_QWORD *)fd = sub_40EA00(4LL, filename);\n    v236 = dcgettext(0LL, \"failed to close %s\", 5);\n    v237 = __errno_location();\n    error(0, *v237, v236, *(_QWORD *)fd);\n    v150 = 0;\n  }\nLABEL_304:\n  LOBYTE(fd[0]) = v150;\n  if ( close(fildes[0]) < 0 )\n  {\n    v15 = sub_40EA00(4LL, v11);\n    v206 = dcgettext(0LL, \"failed to close %s\", 5);\n    v207 = __errno_location();\n    error(0, *v207, v206, v15);\n    free(ptr);\n    goto LABEL_197;\n  }\n  LOBYTE(fildes[0]) = fd[0];\n  free(ptr);\n  v43 = fildes[0];\n  LOBYTE(fd[0]) = 0;\n  LOBYTE(ptr) = fildes[0];\n  if ( LOBYTE(fildes[0]) )\n    goto LABEL_79;\nLABEL_197:\n  if ( v12[2].m128i_i8[5] )\n    goto LABEL_240;\n  if ( !n )\n    sub_409980(stat_buf.st_ino, stat_buf.st_dev);\nLABEL_136:\n  if ( old )\n  {\n    if ( rename(old, filename) )\n    {\n      v137 = sub_40EA00(4LL, filename);\n      v138 = dcgettext(0LL, \"cannot un-backup %s\", 5);\n      v139 = __errno_location();\n      error(0, *v139, v138, v137);\n    }\n    else if ( v12[2].m128i_i8[14] )\n    {\n      v75 = sub_40E920(1LL, 4LL, filename);\n      v76 = sub_40E920(0LL, 4LL, old);\n      v77 = dcgettext(0LL, \"%s -> %s (unbackup)\\n\", 5);\n      __printf_chk(1LL, v77, v76, v75, v78, v79);\n    }\n  }\n  return a7;\n}\n", 
            "funcStartAddr": "0x405990L", 
            "funcEndAddr": "0x40980cL", 
            "funcName": "sub_405990"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_409810@<rax>(unsigned __int8 a1@<dl>, const __m128i *a2@<rcx>, const char *a3@<rdi>, char *a4@<rsi>, _BYTE *a5@<r8>, _BYTE *a6@<r9>, unsigned int a7@<r15d>)\n{\n  int v7; // eax\n  unsigned int v8; // er10\n  char v10; // [rsp+Fh] [rbp-9h]\n\n  if ( !a2 )\n    __assert_fail(\"co != NULL\", \"src/copy.c\", 0xB60u, \"valid_options\");\n  if ( LODWORD(a2->m128i_i64[0]) > 3 )\n    __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 0xB61u, \"valid_options\");\n  v7 = HIDWORD(a2->m128i_i64[1]);\n  if ( (unsigned int)(v7 - 1) > 2 )\n    __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 0xB62u, \"valid_options\");\n  v8 = a2[3].m128i_u32[1];\n  if ( v8 > 2 )\n    __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 0xB63u, \"valid_options\");\n  if ( a2[1].m128i_i8[7] && a2[2].m128i_i8[12] )\n    __assert_fail(\"!(co->hard_link && co->symbolic_link)\", \"src/copy.c\", 0xB64u, \"valid_options\");\n  if ( v7 != 2 && v8 == 2 )\n    __assert_fail(\n      \"! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)\",\n      \"src/copy.c\",\n      0xB67u,\n      \"valid_options\");\n  v10 = 0;\n  qword_621990 = (__int64)a3;\n  qword_621988 = (__int64)a4;\n  return sub_405990(a1, 0LL, a3, a4, 0LL, a2, a7, 1u, &v10, a5, a6);\n}\n", 
            "funcStartAddr": "0x409810L", 
            "funcEndAddr": "0x40992cL", 
            "funcName": "sub_409810"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_409930(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n", 
            "funcStartAddr": "0x409930L", 
            "funcEndAddr": "0x40993cL", 
            "funcName": "sub_409930"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_409940(_QWORD *a1, _QWORD *a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( *a1 == *a2 )\n    result = a1[1] == a2[1];\n  return result;\n}\n", 
            "funcStartAddr": "0x409940L", 
            "funcEndAddr": "0x40995cL", 
            "funcName": "sub_409940"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_409960(void *ptr)\n{\n  free(*((void **)ptr + 2));\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x409960L", 
            "funcEndAddr": "0x409976L", 
            "funcName": "sub_409960"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_409980(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  void *v3; // rbx\n  __int64 v4; // [rsp+0h] [rbp-28h]\n  __int64 v5; // [rsp+8h] [rbp-20h]\n  __int64 v6; // [rsp+10h] [rbp-18h]\n\n  v4 = a1;\n  v5 = a2;\n  v6 = 0LL;\n  v2 = sub_40C330(qword_621998, &v4);\n  if ( v2 )\n  {\n    v3 = (void *)v2;\n    free(*(void **)(v2 + 16));\n    free(v3);\n  }\n}\n", 
            "funcStartAddr": "0x409980L", 
            "funcEndAddr": "0x4099c5L", 
            "funcName": "sub_409980"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4099D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 result; // rax\n  __int64 v4; // [rsp+0h] [rbp-28h]\n  __int64 v5; // [rsp+8h] [rbp-20h]\n\n  v4 = a1;\n  v5 = a2;\n  v2 = sub_40B8E0(qword_621998, &v4);\n  if ( v2 )\n    result = *(_QWORD *)(v2 + 16);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4099d0L", 
            "funcEndAddr": "0x409a07L", 
            "funcName": "sub_4099D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409A10(void *src, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // rax\n  _QWORD *v8; // rbp\n  __int64 result; // rax\n\n  v3 = a3;\n  v4 = (_QWORD *)sub_4112E0(24LL);\n  v5 = sub_411510(src);\n  v6 = qword_621998;\n  *v4 = a2;\n  v4[2] = v5;\n  v4[1] = v3;\n  v7 = sub_40C2F0(v6, v4);\n  if ( !v7 )\n    sub_411530();\n  v8 = (_QWORD *)v7;\n  result = 0LL;\n  if ( v4 != v8 )\n  {\n    free((void *)v4[2]);\n    free(v4);\n    result = v8[2];\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409a10L", 
            "funcEndAddr": "0x409a86L", 
            "funcName": "sub_409A10"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_409A90()\n{\n  __int64 result; // rax\n\n  result = sub_40BB50(103LL, 0LL, sub_409930, sub_409940, sub_409960);\n  qword_621998 = result;\n  if ( !result )\n    sub_411530();\n  return result;\n}\n", 
            "funcStartAddr": "0x409a90L", 
            "funcEndAddr": "0x409ac6L", 
            "funcName": "sub_409A90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409AE0(int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  *(_DWORD *)a2 = a1;\n  *(_QWORD *)(a2 + 40) = 0LL;\n  *(_QWORD *)(a2 + 8) = 0LL;\n  *(_QWORD *)(a2 + 24) = 0LL;\n  *(_WORD *)(a2 + 32) = 0;\n  *(_DWORD *)(a2 + 16) = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x409ae0L", 
            "funcEndAddr": "0x409b08L", 
            "funcName": "sub_409AE0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_409B10(__int64 a1)\n{\n  unsigned int v1; // er13\n  __int64 v2; // r12\n  __int64 v3; // rbx\n  __int64 v4; // rdx\n  int v5; // eax\n  int v6; // edi\n  unsigned __int64 v7; // rcx\n  __int64 v8; // rdi\n  unsigned __int64 v9; // rcx\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  unsigned int v12; // er8\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rdx\n  unsigned int v15; // edi\n  __int64 *v16; // rcx\n  int v17; // er9\n  __int64 v18; // r10\n  unsigned __int64 v19; // rsi\n  __int64 v20; // rcx\n  char v21; // al\n  __int64 v22; // rax\n  __int64 v23; // rdx\n  bool result; // al\n  bool v25; // zf\n  __int64 vars0; // [rsp+0h] [rbp+0h]\n  __int64 vars8; // [rsp+8h] [rbp+8h]\n  int vars10; // [rsp+10h] [rbp+10h]\n  unsigned int vars14; // [rsp+14h] [rbp+14h]\n  int vars18; // [rsp+18h] [rbp+18h]\n  __int64 vars20[2]; // [rsp+20h] [rbp+20h]\n  unsigned __int64 vars30; // [rsp+30h] [rbp+30h]\n\n  v1 = 0;\n  v2 = a1;\n  v3 = *(_QWORD *)(a1 + 40);\n  v4 = *(_QWORD *)(a1 + 8);\n  while ( 1 )\n  {\n    memset(&vars0, 0, 0x1000uLL);\n    v5 = *(_DWORD *)(v2 + 16);\n    v6 = *(_DWORD *)v2;\n    vars0 = v4;\n    vars18 = 72;\n    vars10 = v5;\n    vars8 = ~v4;\n    if ( ioctl(v6, 0xC020660BuLL, &vars0) < 0 )\n      break;\n    if ( !vars14 )\n    {\n      v25 = *(_QWORD *)(v2 + 8) == 0LL;\n      *(_BYTE *)(v2 + 33) = 1;\n      return !v25;\n    }\n    v7 = *(_QWORD *)(v2 + 24);\n    if ( v7 > ~(unsigned __int64)vars14 )\n      __assert_fail(\n        \"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\",\n        \"src/extent-scan.c\",\n        0x7Eu,\n        \"extent_scan_read\");\n    v8 = *(_QWORD *)(v2 + 40);\n    v9 = vars14 + v7;\n    *(_QWORD *)(v2 + 24) = v9;\n    v10 = v3 - v8;\n    if ( ((24 * v9) & 0x8000000000000000LL) != 0LL || (v9 * (unsigned __int128)0x18uLL) >> 64 != 0 )\n      sub_411530(v8, 3223348747LL, (v9 * (unsigned __int128)0x18uLL) >> 64 != 0);\n    v11 = sub_411340(v8, 24 * v9);\n    v12 = vars14;\n    *(_QWORD *)(v2 + 40) = v11;\n    v3 = v11 + v10;\n    if ( v12 )\n    {\n      v13 = vars30;\n      v14 = vars20[0];\n      if ( vars20[0] > 0x7FFFFFFFFFFFFFFFLL - vars30 )\nLABEL_17:\n        __assert_fail(\n          \"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\",\n          \"src/extent-scan.c\",\n          0x8Du,\n          \"extent_scan_read\");\n      v15 = 0;\n      v16 = vars20;\n      while ( 2 )\n      {\n        if ( v1 )\n        {\n          v17 = *((_DWORD *)v16 + 10);\n          v18 = *(_QWORD *)(v3 + 8);\n          v19 = v18 + *(_QWORD *)v3;\n          if ( *(_DWORD *)(v3 + 16) == (v16[5] & 0xFFFFFFFE) && v14 == v19 )\n          {\n            *(_DWORD *)(v3 + 16) = v17;\n            ++v15;\n            *(_QWORD *)(v3 + 8) = v18 + v13;\nLABEL_15:\n            if ( v15 >= v12 )\n              goto LABEL_21;\nLABEL_16:\n            v16 = &vars20[7 * v15];\n            v13 = v16[2];\n            v14 = *v16;\n            if ( *v16 > 0x7FFFFFFFFFFFFFFFLL - v13 )\n              goto LABEL_17;\n            continue;\n          }\n          if ( v19 > v14 )\n          {\nLABEL_13:\n            if ( v19 - v14 < v13 )\n              goto LABEL_27;\n            *v16 = v19;\n            v16[2] = v13 + v14 - v19;\n            goto LABEL_15;\n          }\n        }\n        else\n        {\n          v19 = *(_QWORD *)(v2 + 8);\n          if ( v19 > v14 )\n            goto LABEL_13;\n          v17 = *((_DWORD *)v16 + 10);\n        }\n        break;\n      }\n      v20 = v1;\n      ++v15;\n      ++v1;\n      v3 = *(_QWORD *)(v2 + 40) + 24 * v20;\n      *(_QWORD *)v3 = v14;\n      *(_QWORD *)(v3 + 8) = v13;\n      *(_DWORD *)(v3 + 16) = v17;\n      if ( v15 >= v12 )\n        goto LABEL_21;\n      goto LABEL_16;\n    }\nLABEL_21:\n    if ( *(_BYTE *)(v3 + 16) & 1 )\n    {\n      *(_BYTE *)(v2 + 33) = 1;\nLABEL_35:\n      *(_QWORD *)(v2 + 24) = v1;\n      return 1;\n    }\n    v21 = *(_BYTE *)(v2 + 33);\n    if ( v1 > 0x48 )\n    {\n      if ( v21 )\n        goto LABEL_35;\n      v22 = v1 - 1;\n      v23 = *(_QWORD *)(v2 + 40);\n      *(_QWORD *)(v2 + 24) = v22;\n      *(_QWORD *)(v2 + 8) = *(_QWORD *)(v23 + 24 * v22 - 24) + *(_QWORD *)(v23 + 24 * v22 - 16);\n      return 1;\n    }\n    *(_QWORD *)(v2 + 24) = v1;\n    if ( !v21 )\n    {\n      v4 = *(_QWORD *)v3 + *(_QWORD *)(v3 + 8);\n      *(_QWORD *)(v2 + 8) = v4;\n      if ( v1 != 72 )\n        continue;\n    }\n    return 1;\n  }\nLABEL_27:\n  result = 0;\n  if ( !*(_QWORD *)(v2 + 8) )\n  {\n    *(_BYTE *)(v2 + 32) = 1;\n    result = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409b10L", 
            "funcEndAddr": "0x409dd5L", 
            "funcName": "sub_409B10"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409DE0(char *to, __int64 a2)\n{\n  return linkat(*(_DWORD *)a2, *(const char **)(a2 + 8), *(_DWORD *)(a2 + 16), to, *(_DWORD *)(a2 + 20));\n}\n", 
            "funcStartAddr": "0x409de0L", 
            "funcEndAddr": "0x409df8L", 
            "funcName": "sub_409DE0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_409E00(void *src, void *dest)\n{\n  void *v2; // rbx\n  __int64 v3; // rax\n  size_t v4; // rbp\n\n  v2 = dest;\n  v3 = sub_40AD40(src) - (_QWORD)src;\n  v4 = v3;\n  if ( (unsigned __int64)(v3 + 9) > 0x100 )\n  {\n    v2 = malloc(v3 + 9);\n    if ( !v2 )\n      return 0LL;\n  }\n  strcpy((char *)mempcpy(v2, src, v4), \"CuXXXXXX\");\n  return v2;\n}\n", 
            "funcStartAddr": "0x409e00L", 
            "funcEndAddr": "0x409e64L", 
            "funcName": "sub_409E00"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409E70(char *to, __int64 a2)\n{\n  return symlinkat(*(const char **)a2, *(_DWORD *)(a2 + 8), to);\n}\n", 
            "funcStartAddr": "0x409e70L", 
            "funcEndAddr": "0x409e81L", 
            "funcName": "sub_409E70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409E90(int a1, const char *a2, int a3, const char *a4, int a5, char a6)\n{\n  char *v6; // r12\n  int v7; // ebp\n  int v8; // eax\n  unsigned int v9; // ebx\n  int *v10; // rax\n  char *v12; // rax\n  char *v13; // rbx\n  int v14; // eax\n  int *v15; // r9\n  int v16; // er12\n  char v17; // [rsp+8h] [rbp-160h]\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  char dest; // [rsp+30h] [rbp-138h]\n\n  v6 = (char *)a4;\n  v7 = a3;\n  v17 = a6;\n  v8 = linkat(a1, a2, a3, a4, a5);\n  v9 = v8;\n  if ( v17 == 1 )\n  {\n    if ( v8 )\n    {\n      v10 = __errno_location();\n      if ( *v10 == 17 )\n      {\n        v18 = v10;\n        v12 = (char *)sub_409E00(v6, &dest);\n        v13 = v12;\n        if ( v12 )\n        {\n          v14 = sub_40FB10(v12);\n          v15 = v18;\n          if ( v14 )\n          {\n            v16 = *v18;\n          }\n          else\n          {\n            v16 = renameat(v7, v13, v7, v6);\n            if ( v16 )\n              v16 = *v18;\n            unlinkat(v7, v13, 0);\n            v15 = v18;\n          }\n          if ( v13 != &dest )\n          {\n            v19 = v15;\n            free(v13);\n            v15 = v19;\n          }\n          v9 = 1;\n          if ( v16 )\n          {\n            *v15 = v16;\n            v9 = -1;\n          }\n        }\n        else\n        {\n          v9 = -1;\n        }\n      }\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x409e90L", 
            "funcEndAddr": "0x409fc5L", 
            "funcName": "sub_409E90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409FD0(const char *a1, int a2, const char *a3, char a4)\n{\n  char v4; // r14\n  char *v5; // r12\n  int v6; // eax\n  unsigned int v7; // ebx\n  int *v8; // r14\n  char *v10; // rax\n  char *v11; // rbx\n  int v12; // er12\n  char dest; // [rsp+10h] [rbp-138h]\n\n  v4 = a4;\n  v5 = (char *)a3;\n  v6 = symlinkat(a1, a2, a3);\n  v7 = v6;\n  if ( v4 == 1 )\n  {\n    if ( v6 )\n    {\n      v8 = __errno_location();\n      if ( *v8 == 17 )\n      {\n        v10 = (char *)sub_409E00(v5, &dest);\n        v11 = v10;\n        if ( !v10 )\n          return (unsigned int)-1;\n        if ( (unsigned int)sub_40FB10(v10) )\n        {\n          v12 = *v8;\n        }\n        else\n        {\n          if ( !renameat(a2, v11, a2, v5) )\n          {\n            if ( v11 != &dest )\n              free(v11);\n            return 1;\n          }\n          v12 = *v8;\n          unlinkat(a2, v11, 0);\n        }\n        if ( v11 != &dest )\n          free(v11);\n        if ( v12 )\n        {\n          *v8 = v12;\n          return (unsigned int)-1;\n        }\n        return 1;\n      }\n    }\n  }\n  return v7;\n}\n", 
            "funcStartAddr": "0x409fd0L", 
            "funcEndAddr": "0x40a0d0L", 
            "funcName": "sub_409FD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A0D0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbp\n  unsigned int v4; // eax\n  unsigned int v5; // ebx\n  __int64 v6; // r12\n  char *v7; // rbp\n  int *v8; // rax\n  __int64 result; // rax\n  __int64 v10; // rbp\n  int *v11; // rax\n\n  v3 = a3;\n  v4 = sub_40D070();\n  v5 = v4;\n  if ( v4 == -2 )\n  {\n    v10 = sub_40EC50(a1);\n    v11 = __errno_location();\n    error(0, *v11, \"%s\", v10);\n    result = 4294967294LL;\n  }\n  else\n  {\n    if ( v4 == -1 )\n    {\n      v6 = sub_40EC50(v3);\n      v7 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n      v8 = __errno_location();\n      error(0, *v8, v7, v6);\n    }\n    result = v5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a0d0L", 
            "funcEndAddr": "0x40a15aL", 
            "funcName": "sub_40A0D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A160(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned int v3; // ebx\n  __int64 v5; // r12\n  char *v6; // rbp\n  int *v7; // rax\n\n  v3 = sub_40D0B0(a1, a2, a3);\n  if ( v3 )\n  {\n    v5 = sub_40EC50(a1);\n    v6 = dcgettext(0LL, \"setting permissions for %s\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6, v5);\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40a160L", 
            "funcEndAddr": "0x40a1bcL", 
            "funcName": "sub_40A160"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A1C0(char *path, unsigned __int64 a2)\n{\n  size_t v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  ssize_t v5; // r12\n  char *v7; // rdi\n\n  v2 = a2 + 1;\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  while ( 2 )\n  {\n    v3 = (char *)malloc(v2);\n    v4 = v3;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        v5 = readlink(path, v3, v2);\n        if ( v5 < 0 && *__errno_location() != 34 )\n        {\n          v7 = v4;\n          v4 = 0LL;\n          free(v7);\n          return v4;\n        }\n        if ( v2 > v5 )\n        {\n          v4[v5] = 0;\n          return v4;\n        }\n        free(v4);\n        if ( v2 > 0x3FFFFFFFFFFFFFFFLL )\n          break;\n        v2 *= 2LL;\n        v3 = (char *)malloc(v2);\n        v4 = v3;\n        if ( !v3 )\n          return v4;\n      }\n      if ( v2 <= 0x7FFFFFFFFFFFFFFELL )\n      {\n        v2 = 0x7FFFFFFFFFFFFFFFLL;\n        continue;\n      }\n      v4 = 0LL;\n      *__errno_location() = 12;\n    }\n    break;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40a1c0L", 
            "funcEndAddr": "0x40a2afL", 
            "funcName": "sub_40A1C0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A2B0(char *path, __int64 a2)\n{\n  __int64 v2; // r13\n  __int64 v3; // rax\n  char *v4; // rbp\n  char *result; // rax\n  __int16 v6; // r14\n  char *v7; // r12\n  int *v8; // rax\n  int *v9; // r15\n  unsigned __int64 v10; // rdx\n  char *v11; // rsi\n\n  v2 = a2;\n  v3 = sub_40AD40(path);\n  v4 = (char *)v3;\n  result = (char *)sub_40ADA0(v3);\n  if ( (unsigned __int64)result > 0xE )\n  {\n    v6 = *(_WORD *)v4;\n    v7 = result;\n    *(_WORD *)v4 = 46;\n    v8 = __errno_location();\n    *v8 = 0;\n    v9 = v8;\n    result = (char *)pathconf(path, 3);\n    if ( (__int64)result >= 0 || (v10 = 255LL, !*v9) )\n      v10 = (unsigned __int64)result;\n    *(_WORD *)v4 = v6;\n    if ( (unsigned __int64)v7 > v10 )\n    {\n      v11 = &path[a2];\n      result = (char *)(&path[v2] - v4);\n      if ( (unsigned __int64)result >= v10 )\n        v11 = &v4[v10 - 1];\n      else\n        v10 = (unsigned __int64)(result + 1);\n      *v11 = 126;\n      v4[v10] = 0;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a2b0L", 
            "funcEndAddr": "0x40a37eL", 
            "funcName": "sub_40A2B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40A380(char *a1)\n{\n  char *v1; // rbx\n\n  v1 = a1;\n  if ( (a1 || (v1 = getenv(\"SIMPLE_BACKUP_SUFFIX\")) != 0LL) && *v1 && (char *)sub_40AD40(v1) == v1 )\n    src = v1;\n  else\n    src = \"~\";\n}\n", 
            "funcStartAddr": "0x40a380L", 
            "funcEndAddr": "0x40a3d4L", 
            "funcName": "sub_40A380"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A3E0(void *a1, int a2, char a3)\n{\n  const char *v3; // rax\n  const char *v4; // r14\n  size_t v5; // rax\n  signed __int64 v6; // r14\n  const char *v7; // rdi\n  size_t v8; // rax\n  bool v9; // cf\n  __int64 v10; // rbx\n  __int64 v11; // rsi\n  __int64 v12; // rax\n  char *v13; // r15\n  DIR *v14; // r12\n  char *v15; // rbx\n  __int64 v16; // r13\n  int v17; // ebp\n  struct dirent *v18; // rax\n  char *v19; // rbx\n  char *v20; // rbx\n  unsigned __int64 v21; // rcx\n  unsigned __int8 v22; // r8\n  int i; // eax\n  int v24; // eax\n  __int64 v25; // rdx\n  size_t v26; // rax\n  __int64 v27; // rax\n  char *v28; // rax\n  char *v29; // r8\n  __int64 v30; // rax\n  char *v31; // rax\n  char v32; // dl\n  char *v33; // rax\n  int v34; // eax\n  char *v35; // rcx\n  int v36; // edx\n  int *v37; // rax\n  int v38; // ebp\n  int *v39; // rbx\n  void *v40; // rdi\n  __int16 v42; // ax\n  void *v43; // rdi\n  _BOOL4 v44; // ebp\n  __int64 v45; // [rsp+8h] [rbp-90h]\n  void *src; // [rsp+10h] [rbp-88h]\n  unsigned __int8 v47; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v48; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v49; // [rsp+18h] [rbp-80h]\n  __int16 v50; // [rsp+18h] [rbp-80h]\n  size_t v51; // [rsp+20h] [rbp-78h]\n  unsigned __int64 size; // [rsp+28h] [rbp-70h]\n  int v53; // [rsp+40h] [rbp-58h]\n  char v54; // [rsp+47h] [rbp-51h]\n  unsigned __int64 v55; // [rsp+48h] [rbp-50h]\n  unsigned __int64 v56; // [rsp+50h] [rbp-48h]\n  __int64 v57; // [rsp+50h] [rbp-48h]\n  char *v58; // [rsp+50h] [rbp-48h]\n  size_t v59; // [rsp+58h] [rbp-40h]\n\n  src = a1;\n  v53 = a2;\n  v54 = a3;\n  v3 = (const char *)sub_40AD40(a1);\n  v4 = v3;\n  v5 = strlen(v3);\n  v6 = v4 - (_BYTE *)a1;\n  v7 = ::src;\n  v45 = v6 + v5;\n  if ( !::src )\n  {\n    sub_40A380(::src);\n    v7 = ::src;\n  }\n  v8 = strlen(v7) + 1;\n  v9 = v8 < 9;\n  v10 = v45 + 1;\n  v59 = v8;\n  v11 = v8;\n  v12 = 9LL;\n  if ( !v9 )\n    v12 = v11;\n  v55 = v10 + v12;\n  v13 = (char *)malloc(v10 + v12);\n  if ( v13 )\n  {\n    v14 = 0LL;\n    while ( 1 )\n    {\n      memcpy(v13, src, v45 + 1);\n      if ( v53 == 1 )\n      {\n        memcpy(&v13[v45], ::src, v59);\n        goto LABEL_33;\n      }\n      v15 = &v13[v6];\n      v16 = sub_40ADA0(&v13[v6]);\n      if ( v14 )\n        break;\n      v42 = *(_WORD *)v15;\n      *(_WORD *)v15 = 46;\n      v50 = v42;\n      v14 = (DIR *)sub_40ABC0(v13);\n      if ( v14 )\n      {\n        *(_WORD *)v15 = v50;\n        strcpy(&v15[v16], \".~1~\");\nLABEL_10:\n        v17 = 2;\n        v51 = 1LL;\n        size = v55;\n        while ( 1 )\n        {\n          v18 = readdir(v14);\n          if ( !v18 )\n            goto LABEL_30;\n          while ( 1 )\n          {\n            v19 = v18->d_name;\n            if ( strlen(v18->d_name) < v16 + 4 )\n              break;\n            if ( memcmp(&v13[v6], v19, v16 + 2) )\n              break;\n            v20 = &v19[v16 + 2];\n            if ( (unsigned __int8)(*v20 - 49) > 8u )\n              break;\n            v21 = 1LL;\n            v22 = *v20 == 57;\n            for ( i = v20[1]; (unsigned int)(i - 48) <= 9; i = v20[v21] )\n            {\n              ++v21;\n              v22 &= (_BYTE)i == 57;\n            }\n            if ( (_BYTE)i != 126 )\n              break;\n            if ( v20[v21 + 1] )\n              break;\n            if ( v51 >= v21 )\n            {\n              v56 = v21;\n              v47 = v22;\n              if ( v51 != v21 )\n                break;\n              v24 = memcmp(&v13[v45 + 2], v20, v51);\n              v22 = v47;\n              v21 = v56;\n              if ( v24 > 0 )\n                break;\n            }\n            v25 = v22;\n            v17 = v22;\n            v26 = v22 + v21;\n            v51 = v26;\n            v27 = v45 + v26 + 4;\n            if ( v27 <= size )\n            {\n              v29 = v13;\n            }\n            else\n            {\n              if ( v27 & 0x4000000000000000LL || v27 < 0 )\n                size = v27;\n              else\n                size = 2 * v27;\n              v57 = v22;\n              v48 = v21;\n              v28 = (char *)realloc(v13, size);\n              v21 = v48;\n              v25 = v57;\n              v29 = v28;\n              if ( !v28 )\n                goto LABEL_49;\n            }\n            v58 = v29;\n            v49 = v21;\n            v30 = (__int64)&v29[v45];\n            *(_WORD *)v30 = 32302;\n            *(_BYTE *)(v30 + 2) = 48;\n            v31 = (char *)memcpy(&v29[v45 + 2 + v25], v20, v21 + 2);\n            v32 = v31[v49 - 1];\n            v33 = &v31[v49 - 1];\n            if ( v32 == 57 )\n            {\n              do\n              {\n                *v33-- = 48;\n                v32 = *v33;\n              }\n              while ( *v33 == 57 );\n            }\n            v13 = v58;\n            *v33 = v32 + 1;\n            v18 = readdir(v14);\n            if ( !v18 )\n              goto LABEL_30;\n          }\n        }\n      }\n      v44 = *__errno_location() == 12;\n      *(_WORD *)v15 = v50;\n      v17 = v44 + 2;\n      strcpy(&v15[v16], \".~1~\");\nLABEL_30:\n      switch ( v17 )\n      {\n        case 2:\n          if ( v53 == 2 )\n          {\n            memcpy(&v13[v45], ::src, v59);\n            v53 = 1;\n          }\nLABEL_46:\n          sub_40A2B0(v13, v45);\n          break;\n        case 3:\nLABEL_49:\n          v43 = v13;\n          v13 = 0LL;\n          free(v43);\n          *__errno_location() = 12;\n          return v13;\n        case 1:\n          goto LABEL_46;\n      }\nLABEL_33:\n      if ( !v54 )\n        goto LABEL_57;\n      if ( !v14 || (v34 = dirfd(v14), v35 = &v13[v6], v36 = v34, v34 < 0) )\n      {\n        v35 = v13;\n        v36 = -100;\n        v6 = 0LL;\n      }\n      if ( !(unsigned int)sub_40EC70(-100, (char *)src, v36, v35) )\n      {\nLABEL_57:\n        if ( v14 )\n          closedir(v14);\n        return v13;\n      }\n      v37 = __errno_location();\n      v38 = *v37;\n      if ( *v37 != 17 )\n      {\n        v39 = v37;\n        if ( v14 )\n          closedir(v14);\n        v40 = v13;\n        v13 = 0LL;\n        free(v40);\n        *v39 = v38;\n        return v13;\n      }\n    }\n    rewinddir(v14);\n    goto LABEL_10;\n  }\n  return v13;\n}\n", 
            "funcStartAddr": "0x40a3e0L", 
            "funcEndAddr": "0x40a8a1L", 
            "funcName": "sub_40A3E0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A8B0(void *a1, int a2)\n{\n  return sub_40A3E0(a1, a2, 1);\n}\n", 
            "funcStartAddr": "0x40a8b0L", 
            "funcEndAddr": "0x40a8baL", 
            "funcName": "sub_40A8B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A8C0(__int64 a1, __int64 a2)\n{\n  return (unsigned int)dword_419020[sub_412E60(a1, a2, off_419040, dword_419020, 4LL, off_61F4E0)];\n}\n", 
            "funcStartAddr": "0x40a8c0L", 
            "funcEndAddr": "0x40a8ecL", 
            "funcName": "sub_40A8C0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40A8F0(void *a1, __int64 a2)\n{\n  char *result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40A3E0(a1, a2, 0);\n  if ( !result )\n    sub_411530(a1, a2, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x40a8f0L", 
            "funcEndAddr": "0x40a90aL", 
            "funcName": "sub_40A8F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A930(void *a1, char *a2)\n{\n  char *v2; // rax\n\n  if ( !a2 || !*a2 )\n  {\n    v2 = getenv(\"VERSION_CONTROL\");\n    if ( !v2 || !*v2 )\n      return 2LL;\n    a2 = v2;\n    a1 = &unk_418FCD;\n  }\n  return sub_40A8C0((__int64)a1, (__int64)a2);\n}\n", 
            "funcStartAddr": "0x40a930L", 
            "funcEndAddr": "0x40a971L", 
            "funcName": "sub_40A930"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A980(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v3; // rcx\n  unsigned __int64 v4; // r8\n  unsigned __int64 v6; // r8\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // rdx\n  unsigned __int64 v9; // rax\n\n  v3 = a3;\n  if ( a1 )\n  {\n    if ( a2 )\n    {\n      v6 = a2;\n      v7 = a1;\n      while ( 1 )\n      {\n        v8 = v7 % v6;\n        if ( !(v7 % v6) )\n          break;\n        v7 = v6;\n        v6 = v8;\n      }\n      v9 = a1 / v6;\n      v4 = a1 / v6 * a2;\n      if ( v9 * a2 <= v3 && v4 / a2 == v9 )\n        return v4;\n    }\n  }\n  else\n  {\n    a1 = 0x2000LL;\n    if ( a2 )\n      a1 = a2;\n  }\n  if ( a1 <= v3 )\n    v3 = a1;\n  return v3;\n}\n", 
            "funcStartAddr": "0x40a980L", 
            "funcEndAddr": "0x40a9f0L", 
            "funcName": "sub_40A980"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40AA00()\n{\n  FILE *v0; // rbx\n  int v2; // eax\n  FILE *v3; // rdi\n  char *v4; // rax\n  __int64 v5; // rbx\n  char *v6; // r12\n  int *v7; // rax\n  int *v8; // rbp\n  __int64 v9; // rax\n  int v10; // eax\n\n  v0 = stdin;\n  if ( !sub_411B90(stdin) )\n  {\n    if ( !(unsigned int)sub_412F20(v0) )\n      return sub_40AB20();\n    goto LABEL_6;\n  }\n  v10 = sub_411BC0(v0, 0LL, 1LL);\n  v3 = stdin;\n  if ( !v10 )\n  {\n    v2 = sub_411B50(stdin);\n    v3 = stdin;\n    if ( v2 )\n    {\n      sub_412F20(stdin);\n      goto LABEL_6;\n    }\n  }\n  if ( (unsigned int)sub_412F20(v3) )\n  {\nLABEL_6:\n    v4 = dcgettext(0LL, \"error closing file\", 5);\n    v5 = qword_6219A8;\n    v6 = v4;\n    v7 = __errno_location();\n    v8 = v7;\n    if ( v5 )\n    {\n      v9 = sub_40EAA0(v5);\n      error(0, *v8, \"%s: %s\", v9, v6);\n    }\n    else\n    {\n      error(0, *v7, \"%s\", v6);\n    }\n    sub_40AB20();\n    _exit(status);\n  }\n  return sub_40AB20();\n}\n", 
            "funcStartAddr": "0x40aa00L", 
            "funcEndAddr": "0x40aafdL", 
            "funcName": "sub_40AA00"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_40AB20()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_412F20(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_6219B0 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_6219B8 )\n      {\n        v5 = sub_40EAA0(qword_6219B8);\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_412F20(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ab20L", 
            "funcEndAddr": "0x40abbeL", 
            "funcName": "sub_40AB20"
        }, 
        {
            "decompiledFuncCode": "DIR *__fastcall sub_40ABC0(const char *a1)\n{\n  DIR *v1; // rax\n  DIR *v2; // rbx\n  unsigned int v3; // eax\n  int v5; // er12\n  int *v6; // rax\n  int *v7; // rbp\n  int v8; // er14\n  DIR *v9; // r13\n  DIR *v10; // rax\n\n  v1 = opendir(a1);\n  v2 = v1;\n  if ( !v1 )\n    return v2;\n  v3 = dirfd(v1);\n  if ( v3 > 2 )\n    return v2;\n  v5 = sub_411A10(v3);\n  v6 = __errno_location();\n  v7 = v6;\n  if ( v5 >= 0 )\n  {\n    v10 = fdopendir(v5);\n    v8 = *v7;\n    v9 = v10;\n    if ( !v10 )\n      close(v5);\n  }\n  else\n  {\n    v8 = *v6;\n    v9 = 0LL;\n  }\n  closedir(v2);\n  *v7 = v8;\n  return v9;\n}\n", 
            "funcStartAddr": "0x40abc0L", 
            "funcEndAddr": "0x40ac56L", 
            "funcName": "sub_40ABC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AC60(void *a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40ACE0(a1);\n  if ( !result )\n    sub_411530(a1, a2, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x40ac60L", 
            "funcEndAddr": "0x40ac78L", 
            "funcName": "sub_40AC60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AC80(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_40AD40(a1);\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n", 
            "funcStartAddr": "0x40ac80L", 
            "funcEndAddr": "0x40acddL", 
            "funcName": "sub_40AC80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40ACE0(void *src)\n{\n  __int64 v1; // rax\n  size_t v2; // rbx\n  _BYTE *v3; // rax\n  _BYTE *v4; // rcx\n  _BYTE *v5; // rax\n\n  v1 = sub_40AC80(src);\n  v2 = v1;\n  v3 = malloc(v1 + (v1 == 0) + 1);\n  v4 = v3;\n  if ( v3 )\n  {\n    v5 = memcpy(v3, src, v2);\n    v4 = v5;\n    if ( !v2 )\n    {\n      *v5 = 46;\n      v2 = 1LL;\n    }\n    v5[v2] = 0;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40ace0L", 
            "funcEndAddr": "0x40ad3aL", 
            "funcName": "sub_40ACE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40AD40(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ad40L", 
            "funcEndAddr": "0x40ad9bL", 
            "funcName": "sub_40AD40"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_40ADA0(const char *a1)\n{\n  size_t result; // rax\n  __int64 v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ada0L", 
            "funcEndAddr": "0x40adcbL", 
            "funcName": "sub_40ADA0"
        }, 
        {
            "decompiledFuncCode": "int j__posix_fadvise(int fd, off_t offset, off_t len, int advise)\n{\n  return posix_fadvise(fd, offset, len, advise);\n}\n", 
            "funcStartAddr": "0x40add0L", 
            "funcEndAddr": "0x40add5L", 
            "funcName": "j_.posix_fadvise"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AE10(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n  unsigned int v6; // [rsp+30h] [rbp-28h]\n\n  v6 = a3;\n  v3 = 0LL;\n  if ( a2 & 0x40 )\n    v3 = v6;\n  v4 = open(a1, a2, v3);\n  return sub_40FCF0(v4);\n}\n", 
            "funcStartAddr": "0x40ae10L", 
            "funcEndAddr": "0x40ae5aL", 
            "funcName": "sub_40AE10"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40AE60(__int64 a1, void *a2, _QWORD *a3)\n{\n  _QWORD *v3; // rbp\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdx\n\n  if ( a1 )\n  {\n    v3 = a3;\n    v4 = (_QWORD *)sub_4112E0(24LL);\n    *v4 = sub_411510(a2);\n    v4[1] = v3[1];\n    v4[2] = *v3;\n    v5 = sub_40C2F0(a1, v4);\n    if ( !v5 )\n      sub_411530(a1, v4, v6);\n    if ( v4 != (_QWORD *)v5 )\n      sub_40C5C0(v4);\n  }\n}\n", 
            "funcStartAddr": "0x40ae60L", 
            "funcEndAddr": "0x40aee6L", 
            "funcName": "sub_40AE60"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40AEF0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v3; // rax\n  __int64 v5; // [rsp+0h] [rbp-28h]\n  __int64 v6; // [rsp+8h] [rbp-20h]\n  __int64 v7; // [rsp+10h] [rbp-18h]\n\n  if ( !a1 )\n    return 0;\n  v3 = a3[1];\n  v5 = a2;\n  v6 = v3;\n  v7 = *a3;\n  return sub_40B8E0(a1, &v5) != 0;\n}\n", 
            "funcStartAddr": "0x40aef0L", 
            "funcEndAddr": "0x40af2bL", 
            "funcName": "sub_40AEF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AF30(__int16 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // eax\n  int v6; // eax\n  unsigned int v7; // eax\n  int v8; // eax\n  __int64 result; // rax\n\n  v2 = 45;\n  v3 = a1 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (a1 & 0x100u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (a1 & 0x80u) < 1 ? 45 : 119;\n  v4 = -((a1 & 0x40u) < 1);\n  if ( a1 & 0x800 )\n    v5 = (v4 & 0xFFFFFFE0) + 115;\n  else\n    v5 = (v4 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (a1 & 0x20u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (a1 & 0x10u) < 1 ? 45 : 119;\n  v6 = -((a1 & 8u) < 1);\n  if ( a1 & 0x400 )\n    v7 = (v6 & 0xFFFFFFE0) + 115;\n  else\n    v7 = (v6 & 0xFFFFFFB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (a1 & 4u) < 1 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (a1 & 2u) < 1 ? 45 : 119;\n  v8 = -((a1 & 1u) < 1);\n  if ( a1 & 0x200 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n", 
            "funcStartAddr": "0x40af30L", 
            "funcEndAddr": "0x40b0a3L", 
            "funcName": "sub_40AF30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B0C0(void *a1, void *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40B0E0(a1, a2);\n  if ( !result )\n    sub_411530(a1, a2, v3);\n  return result;\n}\n", 
            "funcStartAddr": "0x40b0c0L", 
            "funcEndAddr": "0x40b0d8L", 
            "funcName": "sub_40B0C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40B0E0(void *src, void *a2, _QWORD *a3)\n{\n  const char *v3; // r12\n  const char *v4; // rax\n  const char *v5; // r14\n  size_t v6; // rax\n  _BOOL8 v7; // rbx\n  size_t v8; // rbp\n  size_t v9; // rax\n  size_t v10; // r14\n  void *v11; // rax\n  void *v12; // r15\n  _BYTE *v13; // rax\n  char *v14; // rdi\n  _QWORD *v16; // [rsp+0h] [rbp-48h]\n  char v17; // [rsp+Fh] [rbp-39h]\n\n  v3 = (const char *)a2;\n  v16 = a3;\n  v4 = sub_40AD40(src);\n  v5 = v4;\n  v6 = sub_40ADA0(v4);\n  v7 = v6;\n  v8 = v6 + v5 - (_BYTE *)src;\n  if ( v6 )\n    v7 = v5[v6 - 1] != 47;\n  v17 = *(_BYTE *)a2;\n  if ( *(_BYTE *)a2 == 47 )\n  {\n    do\n      ++v3;\n    while ( *v3 == 47 );\n  }\n  v9 = strlen(v3);\n  v10 = v9;\n  v11 = malloc(v9 + v7 + v8 + 1);\n  v12 = v11;\n  if ( v11 )\n  {\n    v13 = mempcpy(v11, src, v8);\n    *v13 = 47;\n    v14 = &v13[v7];\n    if ( v16 )\n      *v16 = &v14[-(v17 == 47)];\n    *(_BYTE *)mempcpy(v14, v3, v10) = 0;\n  }\n  return v12;\n}\n", 
            "funcStartAddr": "0x40b0e0L", 
            "funcEndAddr": "0x40b1b9L", 
            "funcName": "sub_40B0E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B1C0(int fd, void *buf, size_t nbytes)\n{\n  char *v3; // rbp\n  size_t v4; // rbx\n  __int64 v5; // r12\n  __int64 v6; // rax\n\n  if ( !nbytes )\n    return 0LL;\n  v3 = (char *)buf;\n  v4 = nbytes;\n  v5 = 0LL;\n  do\n  {\n    v6 = sub_40EEC0(fd, v3, v4);\n    if ( v6 == -1 )\n      break;\n    if ( !v6 )\n    {\n      *__errno_location() = 0;\n      return v5;\n    }\n    v5 += v6;\n    v3 += v6;\n    v4 -= v6;\n  }\n  while ( v4 );\n  return v5;\n}\n", 
            "funcStartAddr": "0x40b1c0L", 
            "funcEndAddr": "0x40b236L", 
            "funcName": "sub_40B1C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B240(int fd, void *buf, size_t n)\n{\n  char *v3; // rbp\n  size_t v4; // rbx\n  __int64 v5; // r12\n  __int64 v6; // rax\n\n  if ( !n )\n    return 0LL;\n  v3 = (char *)buf;\n  v4 = n;\n  v5 = 0LL;\n  do\n  {\n    v6 = sub_40EF20(fd, v3, v4);\n    if ( v6 == -1 )\n      break;\n    if ( !v6 )\n    {\n      *__errno_location() = 28;\n      return v5;\n    }\n    v5 += v6;\n    v3 += v6;\n    v4 -= v6;\n  }\n  while ( v4 );\n  return v5;\n}\n", 
            "funcStartAddr": "0x40b240L", 
            "funcEndAddr": "0x40b2b6L", 
            "funcName": "sub_40B240"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B2C0(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40b2c0L", 
            "funcEndAddr": "0x40b353L", 
            "funcName": "sub_40B2C0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B360(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n", 
            "funcStartAddr": "0x40b360L", 
            "funcEndAddr": "0x40b370L", 
            "funcName": "sub_40B360"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40B370(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n", 
            "funcStartAddr": "0x40b370L", 
            "funcEndAddr": "0x40b377L", 
            "funcName": "sub_40B370"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x403010L", 
            "funcEndAddr": "0x403015L", 
            "funcName": "sub_40B380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x403010L", 
            "funcEndAddr": "0x403015L", 
            "funcName": "sub_40B380"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B3B0(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i **v4; // r14\n  char v5; // r13\n  __int64 v6; // rbp\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v4 = a3;\n  v5 = a4;\n  v6 = a2;\n  v7 = (__m128i *)sub_40B380(a1, a2);\n  *v4 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != v6 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( v6 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == v6 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( v5 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( v5 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b3b0L", 
            "funcEndAddr": "0x40b4c9L", 
            "funcName": "sub_40B3B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B4D0(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_419120 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_419120;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b4d0L", 
            "funcEndAddr": "0x40b54eL", 
            "funcName": "sub_40B4D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B550(__int64 a1, __int64 a2, char a3)\n{\n  char v3; // r14\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v3 = a3;\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_40B380(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !v3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_40B380(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b550L", 
            "funcEndAddr": "0x40b69aL", 
            "funcName": "sub_40B550"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B8E0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_40B380(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40b8e0L", 
            "funcEndAddr": "0x40b933L", 
            "funcName": "sub_40B8E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B990(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_40B380(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40b990L", 
            "funcEndAddr": "0x40b9faL", 
            "funcName": "sub_40B990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BA70(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v4; // r13\n  __int64 v5; // r15\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v4 = a3;\n  v5 = a1;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(v5 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, v4) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x40ba70L", 
            "funcEndAddr": "0x40bae8L", 
            "funcName": "sub_40BA70"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40BB50(unsigned __int64 a1, __int64 a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), __int64 a5)\n{\n  __int64 v5; // r14\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  unsigned __int64 v8; // rbp\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = a1;\n  if ( !a3 )\n    v7 = sub_40B360;\n  if ( !a4 )\n    v6 = sub_40B370;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_40B4D0(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_40B2C0(v8);\n        if ( !_bittest64((const __int64 *)&v12, 0x3Cu) && v12 >> 61 == 0 )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = v5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_419120;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_40B4D0(v11) )\n        goto LABEL_14;\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n      {\nLABEL_23:\n        v17 = (float)(int)(v8 & 1 | (v8 >> 1)) + (float)(int)(v8 & 1 | (v8 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)v8;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      v8 = (unsigned int)(int)v18;\n    else\n      v8 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x40bb50L", 
            "funcEndAddr": "0x40bcdaL", 
            "funcName": "sub_40BB50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BE70(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40BE70(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x40301aL", 
            "funcEndAddr": "0x40301fL", 
            "funcName": "sub_40BE70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BE70(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40BE70(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x40301aL", 
            "funcEndAddr": "0x40301fL", 
            "funcName": "sub_40BE70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B3B0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B3B0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x40301fL", 
            "funcEndAddr": "0x403024L", 
            "funcName": "sub_40C070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B3B0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40B3B0(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x40301fL", 
            "funcEndAddr": "0x403024L", 
            "funcName": "sub_40C070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C2F0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v2 = a2;\n  v3 = sub_40C070(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    v2 = v5;\n  return v2;\n}\n", 
            "funcStartAddr": "0x40c2f0L", 
            "funcEndAddr": "0x40c32bL", 
            "funcName": "sub_40C2F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C330(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rbp\n  _QWORD *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  unsigned __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  unsigned __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  _QWORD *v24; // [rsp+8h] [rbp-20h]\n\n  v2 = a1;\n  v3 = sub_40B3B0(a1, a2, (__m128i **)&v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( *v4 )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( (v9 & 0x8000000000000000LL) == 0LL )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(int)(v9 & 1 | (v9 >> 1)) + (float)(int)(v9 & 1 | (v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( (v9 & 0x8000000000000000LL) != 0LL )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_40B4D0((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_40BE70(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(v2 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40c330L", 
            "funcEndAddr": "0x40c507L", 
            "funcName": "sub_40C330"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C510(_QWORD *a1, unsigned __int64 a2)\n{\n  return (a1[1] ^ (unsigned __int64)sub_413020(*a1)) % a2;\n}\n", 
            "funcStartAddr": "0x40c510L", 
            "funcEndAddr": "0x40c537L", 
            "funcName": "sub_40C510"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C540(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n", 
            "funcStartAddr": "0x40c540L", 
            "funcEndAddr": "0x40c54dL", 
            "funcName": "sub_40C540"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C550(_QWORD *a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  __int64 result; // rax\n\n  if ( a1[1] != a2[1] || a1[2] != a2[2] )\n    result = 0LL;\n  else\n    result = sub_40EF80(*a1, *a2, a3, a4, a5, a6);\n  return result;\n}\n", 
            "funcStartAddr": "0x40c550L", 
            "funcEndAddr": "0x40c575L", 
            "funcName": "sub_40C550"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40C5C0(void *ptr)\n{\n  free(*(void **)ptr);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x40c5c0L", 
            "funcEndAddr": "0x40c5d5L", 
            "funcName": "sub_40C5C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40C5E0(_BYTE *a1, __int64 a2, int (__fastcall *a3)(_BYTE *, _BYTE *, __int64), __int64 a4)\n{\n  int (__fastcall *v4)(_BYTE *, _BYTE *, __int64); // r14\n  _BYTE *v5; // r13\n  _BYTE *v6; // r12\n  _BYTE *v7; // rbp\n  char v8; // dl\n  bool v9; // r15\n  __int64 v10; // rdx\n  int v11; // er15\n  int v12; // eax\n  int v13; // er13\n  int *v15; // rax\n  bool v16; // [rsp+14h] [rbp-44h]\n  __int64 v17; // [rsp+18h] [rbp-40h]\n\n  v4 = a3;\n  v5 = a1;\n  v6 = a1;\n  v7 = 0LL;\n  v17 = a4;\n  v16 = 0;\nLABEL_2:\n  while ( 1 )\n  {\n    v8 = *(++v6 - 1);\n    if ( !v8 )\n      return (_BYTE *)(v5 - a1);\n    while ( *v6 != 47 )\n    {\n      v9 = *v6 != 0 && v8 == 47;\n      if ( !v9 || !v7 )\n        goto LABEL_2;\n      if ( v7 - v5 == 1 )\n      {\n        if ( *v5 == 46 )\n          goto LABEL_12;\n        *v7 = 0;\n      }\n      else\n      {\n        *v7 = 0;\n        if ( v7 - v5 == 2 && *v5 == 46 && v5[1] == 46 )\n        {\n          v11 = 0;\n          v16 = 0;\n          v10 = 0LL;\n          goto LABEL_10;\n        }\n      }\n      if ( v4(a1, v5, v17) < 0 )\n      {\n        v11 = *__errno_location();\n        v10 = v16;\n      }\n      else\n      {\n        v16 = v9;\n        v10 = 1LL;\n        v11 = 0;\n      }\nLABEL_10:\n      v12 = sub_40F520(a2, v5, v10, 0LL);\n      v13 = v12;\n      if ( v12 == -1 || (*v7 = 47, v12) )\n      {\n        if ( v11 )\n        {\n          v15 = __errno_location();\n          if ( *v15 == 2 )\n            *v15 = v11;\n        }\n        return (_BYTE *)v13;\n      }\nLABEL_12:\n      v5 = v6++;\n      v8 = *(v6 - 1);\n      if ( !v8 )\n        return (_BYTE *)(v5 - a1);\n    }\n    if ( v8 != 47 )\n      v7 = v6;\n  }\n}\n", 
            "funcStartAddr": "0x40c5e0L", 
            "funcEndAddr": "0x40c768L", 
            "funcName": "sub_40C5E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C770(char *a1, _DWORD *a2, int (__fastcall *a3)(_BYTE *, _BYTE *, __int64), __int64 a4, __mode_t a5, void (__fastcall *a6)(char *, __int64), int a7, int a8, int a9, char a10)\n{\n  int (__fastcall *v10)(_BYTE *, _BYTE *, __int64); // r13\n  __mode_t v11; // er12\n  _BYTE *v12; // rax\n  _BYTE *v13; // rbp\n  char *v14; // rbp\n  int v15; // eax\n  int v16; // er15\n  __int64 v17; // rbx\n  char *v18; // rax\n  __int64 result; // rax\n  __int64 v20; // rdx\n  int v21; // eax\n  int *v22; // rbp\n  const char *v23; // rsi\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // [rsp+0h] [rbp-E8h]\n  void (__fastcall *v27)(char *, __int64); // [rsp+10h] [rbp-D8h]\n  struct stat stat_buf; // [rsp+20h] [rbp-C8h]\n\n  v10 = a3;\n  v11 = a5;\n  v26 = a4;\n  v27 = a6;\n  if ( *a1 != 47 && *a2 == 4 )\n  {\n    v16 = a2[1];\n    if ( v16 )\n      goto LABEL_14;\n    if ( a3 )\n      goto LABEL_4;\nLABEL_16:\n    v14 = a1;\n    goto LABEL_6;\n  }\n  if ( !a3 )\n    goto LABEL_16;\nLABEL_4:\n  v12 = sub_40C5E0(a1, (__int64)a2, a3, a4);\n  v13 = v12;\n  if ( (__int64)v12 < 0 )\n  {\n    result = 1LL;\n    if ( v13 == (_BYTE *)-1LL )\n    {\n      v16 = *__errno_location();\n      goto LABEL_14;\n    }\n    return result;\n  }\n  v14 = &v12[(_QWORD)a1];\nLABEL_6:\n  if ( (a9 & a8) == -1 )\n  {\n    if ( !(v11 & 0x200 | a7 & 0xC00) )\n    {\n      v16 = mkdir(v14, v11);\n      if ( v16 )\n        goto LABEL_9;\n      v27(a1, v26);\n      if ( !(v11 & a7 & 0x1FF) )\n        return 1LL;\n      v20 = 3LL;\n      goto LABEL_28;\n    }\n    v15 = mkdir(v14, v11 & 0xFFFFFFED);\n  }\n  else\n  {\n    v15 = mkdir(v14, v11 & 0xFFFFFFC0);\n  }\n  v16 = v15;\n  if ( v15 )\n  {\nLABEL_9:\n    v16 = *__errno_location();\n    if ( a10 )\n    {\n      if ( !v16 || v16 != 2 && v10 && !__xstat(1, v14, &stat_buf) && (stat_buf.st_mode & 0xF000) == 0x4000 )\n        return 1LL;\nLABEL_14:\n      v17 = sub_40EC50(a1);\n      v18 = dcgettext(0LL, \"cannot create directory %s\", 5);\n      error(0, v16, v18, v17);\n      return 0LL;\n    }\n    v20 = 2LL;\n    goto LABEL_28;\n  }\n  v27(a1, v26);\n  v20 = 3LL;\nLABEL_28:\n  v21 = sub_40F520(a2, v14, v20, &stat_buf);\n  if ( v21 < -1 )\n    return 1LL;\n  if ( !v21 )\n    v14 = \".\";\n  if ( !(unsigned int)sub_4135D0(stat_buf.st_dev, v14, a7) )\n    return 1LL;\n  if ( v16 && (v16 == 2 || !v10 || *__errno_location() == 20) )\n    goto LABEL_14;\n  v22 = __errno_location();\n  v23 = \"cannot change permissions of %s\";\n  v24 = sub_40EC50(a1);\n  if ( (a9 & a8) != -1 )\n    v23 = \"cannot change owner and permissions of %s\";\n  v25 = dcgettext(0LL, v23, 5);\n  error(0, *v22, v25, v24);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40c770L", 
            "funcEndAddr": "0x40ca78L", 
            "funcName": "sub_40C770"
        }, 
        {
            "decompiledFuncCode": "_WORD *__fastcall sub_40CA80(_BYTE *a1, __int64 a2)\n{\n  _BYTE *v2; // rcx\n  char *v3; // rbx\n  __int64 v4; // rdx\n  unsigned __int64 v5; // rdi\n  bool v6; // al\n  bool v7; // al\n  __int64 v8; // rdi\n  _WORD *result; // rax\n  __int64 v10; // r10\n  int v11; // edi\n  char v12; // r9\n  unsigned int v13; // ebp\n  __int64 v14; // r11\n  __int64 v15; // r10\n  int v16; // ecx\n  int v17; // edx\n  char *v18; // r8\n  __int64 v19; // rsi\n  unsigned int v20; // ecx\n  unsigned __int8 v21; // si\n  char v22; // bl\n  int v23; // ebx\n\n  v2 = a1;\n  v3 = a1;\n  LODWORD(v4) = (char)*a1;\n  if ( (unsigned __int8)(*a1 - 48) > 7u )\n  {\n    v5 = 1LL;\n    if ( (_BYTE)v4 )\n    {\n      do\n      {\n        ++v2;\n        v6 = (_BYTE)v4 == 43 || (v4 & 0xEF) == 45;\n        v4 = (unsigned __int8)*v2;\n        v5 += v6;\n      }\n      while ( (_BYTE)v4 );\n      v7 = v5 >> 60 != 0;\n      v8 = 16 * v5;\n      if ( v8 < 0 || v7 )\n        sub_411530(v8, a2, v4);\n    }\n    else\n    {\n      v8 = 16LL;\n    }\n    result = (_WORD *)sub_4112E0(v8);\n    v10 = 0LL;\nLABEL_7:\n    v11 = 0;\n    while ( 1 )\n    {\n      v12 = *v3;\n      if ( *v3 == 97 )\n      {\n        v11 = 4095;\n        goto LABEL_54;\n      }\n      if ( v12 <= 97 )\n        break;\n      switch ( v12 )\n      {\n        case 111:\n          v11 |= 0x207u;\n          break;\n        case 117:\n          v11 |= 0x9C0u;\n          break;\n        case 103:\n          v11 |= 0x438u;\n          break;\n        default:\n          goto LABEL_13;\n      }\nLABEL_54:\n      ++v3;\n    }\n    if ( v12 != 45 && v12 != 61 && v12 != 43 )\n      goto LABEL_13;\n    v14 = v10 + 1;\n    v15 = (__int64)&result[8 * v10];\n    while ( 1 )\n    {\n      v17 = v3[1];\n      v18 = v3 + 1;\n      if ( v3[1] == 103 )\n      {\n        v19 = (__int64)(v3 + 2);\n        v16 = 56;\n      }\n      else\n      {\n        if ( v3[1] <= 103 )\n        {\n          if ( (unsigned __int8)(v17 - 48) <= 7u )\n          {\n            v20 = 0;\n            while ( 1 )\n            {\n              v20 = v17 + 8 * v20 - 48;\n              ++v18;\n              if ( v20 > 0xFFF )\n                goto LABEL_13;\n              v17 = *v18;\n              if ( (unsigned __int8)(*v18 - 48) > 7u )\n              {\n                if ( !v11 && (!(_BYTE)v17 || (_BYTE)v17 == 44) )\n                {\n                  *(_BYTE *)v15 = v12;\n                  v3 = v18;\n                  v12 = v17;\n                  v11 = 4095;\n                  *(_DWORD *)(v15 + 8) = v20;\n                  v16 = 4095;\n                  *(_BYTE *)(v15 + 1) = 1;\n                  *(_DWORD *)(v15 + 4) = 4095;\n                  goto LABEL_27;\n                }\n                goto LABEL_13;\n              }\n            }\n          }\nLABEL_42:\n          v21 = v17 - 88;\n          v22 = 1;\n          v16 = 0;\n          while ( 2 )\n          {\n            switch ( v21 )\n            {\n              case 0u:\n                v22 = 2;\n                goto LABEL_45;\n              case 0x1Au:\n                v16 |= 0x124u;\n                goto LABEL_45;\n              case 0x1Bu:\n                BYTE1(v16) |= 0xCu;\n                goto LABEL_45;\n              case 0x1Cu:\n                BYTE1(v16) |= 2u;\n                goto LABEL_45;\n              case 0x1Fu:\n                LOBYTE(v16) = v16 | 0x92;\n                goto LABEL_45;\n              case 0x20u:\n                v16 |= 0x49u;\nLABEL_45:\n                LOBYTE(v17) = *++v18;\n                v21 = *v18 - 88;\n                if ( v21 > 0x20u )\n                  goto LABEL_46;\n                continue;\n              default:\nLABEL_46:\n                *(_BYTE *)v15 = v12;\n                v12 = v17;\n                *(_BYTE *)(v15 + 1) = v22;\n                v3 = v18;\n                *(_DWORD *)(v15 + 4) = v11;\n                *(_DWORD *)(v15 + 8) = v16;\n                break;\n            }\n            goto LABEL_25;\n          }\n        }\n        v19 = (__int64)(v3 + 2);\n        if ( (_BYTE)v17 == 111 )\n        {\n          v16 = 7;\n        }\n        else\n        {\n          v16 = 448;\n          if ( (_BYTE)v17 != 117 )\n            goto LABEL_42;\n        }\n      }\n      *(_BYTE *)(v15 + 1) = 3;\n      *(_DWORD *)(v15 + 4) = v11;\n      *(_DWORD *)(v15 + 8) = v16;\n      *(_BYTE *)v15 = v12;\n      v12 = v3[2];\n      v3 = (char *)v19;\nLABEL_25:\n      if ( v11 )\n        v16 &= v11;\nLABEL_27:\n      *(_DWORD *)(v15 + 12) = v16;\n      v15 += 16LL;\n      if ( (v12 & 0xEF) != 45 && v12 != 43 )\n      {\n        if ( v12 == 44 )\n        {\n          ++v3;\n          v10 = v14;\n          goto LABEL_7;\n        }\n        if ( !v12 )\n        {\n          HIBYTE(result[8 * v14]) = 0;\n          return result;\n        }\nLABEL_13:\n        free(result);\n        return 0LL;\n      }\n      ++v14;\n    }\n  }\n  v13 = 0;\n  do\n  {\n    v13 = v4 + 8 * v13 - 48;\n    ++v2;\n    if ( v13 > 0xFFF )\n      return 0LL;\n    LODWORD(v4) = (char)*v2;\n  }\n  while ( (unsigned __int8)(*v2 - 48) <= 7u );\n  result = 0LL;\n  if ( !(_BYTE)v4 )\n  {\n    v23 = v13 & 0xC00 | 0x3FF;\n    if ( v2 - a1 >= 5 )\n      v23 = 4095;\n    result = (_WORD *)sub_4112E0(32LL);\n    *result = 317;\n    *((_DWORD *)result + 1) = 4095;\n    *((_DWORD *)result + 2) = v13;\n    *((_DWORD *)result + 3) = v23;\n    *((_BYTE *)result + 17) = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40ca80L", 
            "funcEndAddr": "0x40cde1L", 
            "funcName": "sub_40CA80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CDF0(char *filename)\n{\n  int v1; // edx\n  __int64 result; // rax\n  int v3; // ebx\n  __int64 v4; // [rsp+0h] [rbp-98h]\n  int v5; // [rsp+18h] [rbp-80h]\n\n  v1 = __xstat(1, filename, (struct stat *)&v4);\n  result = 0LL;\n  if ( !v1 )\n  {\n    v3 = v5;\n    result = sub_4112E0(32LL);\n    *(_WORD *)result = 317;\n    *(_DWORD *)(result + 4) = 4095;\n    *(_DWORD *)(result + 8) = v3;\n    *(_DWORD *)(result + 12) = 4095;\n    *(_BYTE *)(result + 17) = 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40cdf0L", 
            "funcEndAddr": "0x40ce44L", 
            "funcName": "sub_40CDF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40CE50(__int16 a1, char a2, int a3, char *a4, _DWORD *a5)\n{\n  char v5; // r11\n  __int64 result; // rax\n  int v7; // ebx\n  int v8; // edx\n  unsigned int v9; // er10\n  int v10; // edi\n  int v11; // er9\n  int v12; // er11\n  int v13; // er9\n  char v14; // r11\n  int v15; // er9\n  int v16; // er9\n  int v17; // er12\n\n  v5 = a4[1];\n  result = a1 & 0xFFF;\n  v7 = 0;\n  if ( v5 )\n  {\n    v8 = ~a3;\n    while ( 1 )\n    {\n      v17 = *((_DWORD *)a4 + 1);\n      v13 = *((_DWORD *)a4 + 2);\n      if ( a2 )\n        break;\n      v9 = -1;\n      v10 = 0;\n      if ( v5 == 2 )\n      {\n        if ( !(result & 0x49) )\n          goto LABEL_10;\nLABEL_18:\n        v14 = *a4;\n        v15 = v9 & (v13 | 0x49);\n        if ( !v17 )\n          goto LABEL_11;\nLABEL_19:\n        v16 = v17 & v15;\n        if ( v14 != 45 )\n        {\n          if ( v14 == 61 )\n          {\n            v10 |= ~v17;\n            LOWORD(v9) = ~(_WORD)v10;\n            goto LABEL_22;\n          }\nLABEL_13:\n          if ( v14 == 43 )\n          {\n            v7 |= v16;\n            result = v16 | (unsigned int)result;\n          }\n          goto LABEL_15;\n        }\nLABEL_26:\n        v7 |= v16;\n        result = ~v16 & (unsigned int)result;\nLABEL_15:\n        a4 += 16;\n        v5 = a4[1];\n        if ( !v5 )\n          goto LABEL_23;\n      }\n      else\n      {\nLABEL_4:\n        if ( v5 == 3 )\n        {\n          v11 = result & v13;\n          v12 = (v11 & 0x124u) >= 1 ? 0x124 : 0;\n          if ( v11 & 0x92 )\n            v12 = (v11 & 0x124u) >= 1 ? 0x124 : 0;\n          if ( v11 & 0x49 )\n            v12 |= 0x49u;\n          v13 = v12 | v11;\n        }\nLABEL_10:\n        v14 = *a4;\n        v15 = v9 & v13;\n        if ( v17 )\n          goto LABEL_19;\nLABEL_11:\n        v16 = v8 & v15;\n        if ( v14 == 45 )\n          goto LABEL_26;\n        if ( v14 != 61 )\n          goto LABEL_13;\nLABEL_22:\n        a4 += 16;\n        v5 = a4[1];\n        v7 |= v9 & 0xFFF;\n        result = v16 | v10 & (unsigned int)result;\n        if ( !v5 )\n          goto LABEL_23;\n      }\n    }\n    v9 = *((_DWORD *)a4 + 3) | 0xFFFFF3FF;\n    v10 = ~(unsigned __int16)*((_DWORD *)a4 + 3) & 0xC00;\n    if ( v5 == 2 )\n      goto LABEL_18;\n    goto LABEL_4;\n  }\nLABEL_23:\n  if ( a5 )\n    *a5 = v7;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ce50L", 
            "funcEndAddr": "0x40cfcdL", 
            "funcName": "sub_40CE50"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40CFD0(const char *a1)\n{\n  char *v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (char *)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = result + 1;\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = result + 4;\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  s = v1;\n  program_invocation_name = (__int64)v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x40cfd0L", 
            "funcEndAddr": "0x40d069L", 
            "funcName": "sub_40CFD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D070(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5)\n{\n  unsigned int v5; // ebp\n  __int64 v6; // rbx\n  __int64 result; // rax\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  v5 = a4;\n  v6 = a3;\n  if ( (unsigned int)sub_412B30(a1, a2, a5, &v8) )\n    result = 4294967294LL;\n  else\n    result = sub_412B60(&v8, v6, v5);\n  return result;\n}\n", 
            "funcStartAddr": "0x40d070L", 
            "funcEndAddr": "0x40d0afL", 
            "funcName": "sub_40D070"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40D0B0(__int64 a1, unsigned int a2, int a3)\n{\n  int v4; // [rsp+Ch] [rbp-Ch]\n\n  v4 = a3;\n  return sub_412B60(&v4, a1, a2);\n}\n", 
            "funcStartAddr": "0x40d0b0L", 
            "funcEndAddr": "0x40d0ccL", 
            "funcName": "sub_40D0B0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40D0D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_413060();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_4192E9;\n      if ( !v5 )\n        v2 = (char *)&unk_4192DE;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_4192E5;\n    if ( !v5 )\n      v2 = (char *)&unk_4192E2;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x40d0d0L", 
            "funcEndAddr": "0x40d1c2L", 
            "funcName": "sub_40D0D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40D1D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40D1D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40D1D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40D1D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40D1D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40D1D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", v11);\n        v47 = sub_40D0D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_40D1D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40D1D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40D1D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40D1D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40D1D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40D1D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", v11);\n        v47 = sub_40D0D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x403024L", 
            "funcEndAddr": "0x403029L", 
            "funcName": "sub_40D1D0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40D1D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40D1D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40D1D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40D1D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40D1D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40D1D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", v11);\n        v47 = sub_40D0D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_40D1D0(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_40D1D0((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_40D1D0((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_40D1D0((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_40D1D0((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_40D1D0((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_40D1D0((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_40D1D0((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", v11);\n        v47 = sub_40D0D0(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x403024L", 
            "funcEndAddr": "0x403029L", 
            "funcName": "sub_40D1D0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E400(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61F4B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61F4B8 == &xmmword_61F4C0 )\n    {\n      v8 = (__int128 *)sub_411340(0LL, v10);\n      off_61F4B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      off_61F4B8 = (__int128 *)sub_411340(off_61F4B8, v10);\n      v8 = off_61F4B8;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_40E400(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61F4B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61F4B8 == &xmmword_61F4C0 )\n    {\n      v8 = (__int128 *)sub_411340(0LL, v10);\n      off_61F4B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      off_61F4B8 = (__int128 *)sub_411340(off_61F4B8, v10);\n      v8 = off_61F4B8;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x403029L", 
            "funcEndAddr": "0x40302eL", 
            "funcName": "sub_40E400"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E400(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61F4B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61F4B8 == &xmmword_61F4C0 )\n    {\n      v8 = (__int128 *)sub_411340(0LL, v10);\n      off_61F4B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      off_61F4B8 = (__int128 *)sub_411340(off_61F4B8, v10);\n      v8 = off_61F4B8;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_40E400(__int64 a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int64 v7; // rdx\n  __int128 *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // er8\n  char *v18; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v18 = a2;\n  v6 = __errno_location();\n  v8 = off_61F4B8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_61F4B8 == &xmmword_61F4C0 )\n    {\n      v8 = (__int128 *)sub_411340(0LL, v10);\n      off_61F4B8 = v8;\n      *v8 = (__int128)_mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      off_61F4B8 = (__int128 *)sub_411340(off_61F4B8, v10);\n      v8 = off_61F4B8;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(v5 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, v18, v4, *(_DWORD *)v5, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)v5;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, v18, v4, v16, v22, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n", 
            "funcStartAddr": "0x403029L", 
            "funcEndAddr": "0x40302eL", 
            "funcName": "sub_40E400"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E920(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40E920(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40302eL", 
            "funcEndAddr": "0x403033L", 
            "funcName": "sub_40E920"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E920(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40E920(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40302eL", 
            "funcEndAddr": "0x403033L", 
            "funcName": "sub_40E920"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E990(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_40E990(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x403033L", 
            "funcEndAddr": "0x403038L", 
            "funcName": "sub_40E990"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E990(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_40E990(__int64 a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x403033L", 
            "funcEndAddr": "0x403038L", 
            "funcName": "sub_40E990"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EA00(int a1, char *a2)\n{\n  return sub_40E920(0LL, a1, a2);\n}\n", 
            "funcStartAddr": "0x40ea00L", 
            "funcEndAddr": "0x40ea0cL", 
            "funcName": "sub_40EA00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EA20(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_621B10;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_621AE0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_621AF0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_621B00);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_40E400(0LL, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x40ea20L", 
            "funcEndAddr": "0x40ea90L", 
            "funcName": "sub_40EA20"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EAA0(char *a1)\n{\n  return sub_40EA20(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x40eaa0L", 
            "funcEndAddr": "0x40eab1L", 
            "funcName": "sub_40EAA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x403038L", 
            "funcEndAddr": "0x40303dL", 
            "funcName": "sub_40EAD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x403038L", 
            "funcEndAddr": "0x40303dL", 
            "funcName": "sub_40EAD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EB40(__int64 a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_621AE0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_621AF0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_621B00);\n  v9 = qword_621B10;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_40E400(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x40eb40L", 
            "funcEndAddr": "0x40ebacL", 
            "funcName": "sub_40EB40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EC30(__int64 a1, char *a2)\n{\n  return sub_40E400(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61F480);\n}\n", 
            "funcStartAddr": "0x40ec30L", 
            "funcEndAddr": "0x40ec41L", 
            "funcName": "sub_40EC30"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EC50(char *a1)\n{\n  return sub_40E400(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61F480);\n}\n", 
            "funcStartAddr": "0x40ec50L", 
            "funcEndAddr": "0x40ec66L", 
            "funcName": "sub_40EC50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EC70(int oldfd, char *old, int newfd, char *a4, unsigned int a5)\n{\n  int v5; // er13\n  char *v6; // r12\n  unsigned int v7; // ebp\n  int v8; // eax\n  unsigned int v9; // edx\n  int *v10; // rax\n  int *v11; // r9\n  bool v12; // r15\n  int v14; // eax\n  size_t v15; // rbp\n  size_t v16; // rax\n  unsigned int v17; // [rsp+8h] [rbp-160h]\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  struct stat v20; // [rsp+10h] [rbp-158h]\n  struct stat stat_buf; // [rsp+A0h] [rbp-C8h]\n\n  v5 = newfd;\n  v6 = a4;\n  v7 = a5;\n  v8 = syscall(316LL, (unsigned int)oldfd, old, (unsigned int)newfd, a4, a5);\n  v9 = v8;\n  if ( v8 < 0 )\n  {\n    v17 = v8;\n    v10 = __errno_location();\n    v9 = v17;\n    v11 = v10;\n    v12 = *v10 != 95 && ((*v10 - 22) & 0xFFFFFFEF) != 0;\n    if ( !v12 )\n    {\n      if ( v7 )\n      {\n        if ( v7 & 0xFFFFFFFE )\n        {\n          *v10 = 95;\n          return (unsigned int)-1;\n        }\n        v18 = v10;\n        v14 = __fxstatat(1, v5, v6, &stat_buf, 256);\n        v11 = v18;\n        if ( !v14 || *v18 == 75 )\n        {\n          *v18 = 17;\n          return (unsigned int)-1;\n        }\n        if ( *v18 != 2 )\n          return (unsigned int)-1;\n        v12 = 1;\n      }\n      v19 = v11;\n      v15 = strlen(old);\n      v16 = strlen(v6);\n      if ( !v15 || !v16 || old[v15 - 1] != 47 && v6[v16 - 1] != 47 )\n        return (unsigned int)renameat(oldfd, old, v5, v6);\n      if ( !__fxstatat(1, oldfd, old, &v20, 256) )\n      {\n        if ( v12 )\n        {\n          if ( (v20.st_mode & 0xF000) != 0x4000 )\n          {\n            *v19 = 2;\n            return (unsigned int)-1;\n          }\n          return (unsigned int)renameat(oldfd, old, v5, v6);\n        }\n        if ( __fxstatat(1, v5, v6, &stat_buf, 256) )\n        {\n          if ( *v19 == 2 && (v20.st_mode & 0xF000) == 0x4000 )\n            return (unsigned int)renameat(oldfd, old, v5, v6);\n        }\n        else\n        {\n          if ( (stat_buf.st_mode & 0xF000) == 0x4000 )\n          {\n            if ( (v20.st_mode & 0xF000) != 0x4000 )\n            {\n              *v19 = 21;\n              return (unsigned int)-1;\n            }\n            return (unsigned int)renameat(oldfd, old, v5, v6);\n          }\n          *v19 = 20;\n        }\n      }\n      return (unsigned int)-1;\n    }\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x40ec70L", 
            "funcEndAddr": "0x40eeb2L", 
            "funcName": "sub_40EC70"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_40EEC0(int fd, void *buf, size_t nbytes)\n{\n  size_t v3; // rbx\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  v3 = nbytes;\n  while ( 1 )\n  {\n    v4 = read(fd, buf, v3);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v3 <= 0x7FFFE000 || v5 != 22 )\n        return v4;\n      v3 = 2147475456LL;\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40eec0L", 
            "funcEndAddr": "0x40ef1eL", 
            "funcName": "sub_40EEC0"
        }, 
        {
            "decompiledFuncCode": "ssize_t __fastcall sub_40EF20(int fd, void *buf, size_t n)\n{\n  size_t v3; // rbx\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  v3 = n;\n  while ( 1 )\n  {\n    v4 = write(fd, buf, v3);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v5 != 22 || v3 <= 0x7FFFE000 )\n        return v4;\n      v3 = 2147475456LL;\n    }\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x40ef20L", 
            "funcEndAddr": "0x40ef7eL", 
            "funcName": "sub_40EF20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40EF80(_BYTE *a1, _BYTE *a2)\n{\n  unsigned int v2; // ebx\n  const char *v3; // rbp\n  const char *v4; // r12\n  size_t v5; // r13\n  char *v7; // rbp\n  char *v8; // r12\n  int *v9; // rax\n  int *v10; // rax\n  __int64 v11; // [rsp+0h] [rbp-158h]\n  __int64 v12; // [rsp+8h] [rbp-150h]\n  struct stat stat_buf; // [rsp+90h] [rbp-C8h]\n\n  v2 = 0;\n  v3 = sub_40AD40(a1);\n  v4 = sub_40AD40(a2);\n  v5 = sub_40ADA0(v3);\n  if ( v5 == sub_40ADA0(v4) && !memcmp(v3, v4, v5) )\n  {\n    v7 = (char *)sub_40AC60(a1, (__int64)v4);\n    v8 = (char *)sub_40AC60(a2, (__int64)v4);\n    if ( __xstat(1, v7, (struct stat *)&v11) )\n    {\n      v10 = __errno_location();\n      error(1, *v10, \"%s\", v7);\n    }\n    if ( __xstat(1, v8, &stat_buf) )\n    {\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n    v2 = 0;\n    if ( v12 == stat_buf.st_ino )\n      LOBYTE(v2) = v11 == stat_buf.st_dev;\n    free(v7);\n    free(v8);\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40ef80L", 
            "funcEndAddr": "0x40f0b0L", 
            "funcName": "sub_40EF80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F0B0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // rdx\n\n  result = 0xFFFFFFFFLL;\n  v3 = *(_QWORD *)(a2 + 8);\n  if ( *(_QWORD *)(a1 + 8) >= v3 )\n    result = *(_QWORD *)(a1 + 8) > v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x40f0b0L", 
            "funcEndAddr": "0x40f0c6L", 
            "funcName": "sub_40F0B0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40F0D0(const char **a1, const char **a2)\n{\n  return strcmp(*a1, *a2);\n}\n", 
            "funcStartAddr": "0x40f0d0L", 
            "funcEndAddr": "0x40f0dbL", 
            "funcName": "sub_40F0D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F0E0(DIR *dirp, __int64 a2)\n{\n  DIR *v2; // rbx\n  unsigned __int64 v3; // r15\n  size_t v4; // r12\n  char *v5; // r14\n  __int64 v6; // r13\n  int *v7; // rbp\n  struct dirent *v8; // rax\n  struct dirent *v9; // rcx\n  const char *v10; // r8\n  char v11; // al\n  const char *v12; // rdi\n  size_t v13; // rax\n  void *v14; // r8\n  size_t v15; // rdx\n  struct dirent *v16; // rcx\n  char *v17; // r12\n  int v18; // ebx\n  char *v19; // rbp\n  char *v20; // rbp\n  __int64 v21; // r12\n  const char **v22; // rbx\n  const char *v23; // rsi\n  __int64 v25; // rax\n  __int64 v26; // rax\n  __int64 v27; // rax\n  void *v28; // rdi\n  int (*compar)(const void *, const void *); // [rsp+8h] [rbp-70h]\n  __int64 v30; // [rsp+10h] [rbp-68h]\n  const char *srcb; // [rsp+18h] [rbp-60h]\n  __int64 src; // [rsp+18h] [rbp-60h]\n  unsigned __int64 srca; // [rsp+18h] [rbp-60h]\n  __int64 v34; // [rsp+20h] [rbp-58h]\n  struct dirent *v35; // [rsp+28h] [rbp-50h]\n  struct dirent *v36; // [rsp+28h] [rbp-50h]\n  void *v37; // [rsp+28h] [rbp-50h]\n  size_t n; // [rsp+30h] [rbp-48h]\n  size_t na; // [rsp+30h] [rbp-48h]\n  size_t nb; // [rsp+30h] [rbp-48h]\n  __int64 v41; // [rsp+38h] [rbp-40h]\n\n  a2 = (unsigned int)a2;\n  compar = (int (*)(const void *, const void *))qword_41A020[(unsigned int)a2];\n  if ( !dirp )\n    return 0LL;\n  v2 = dirp;\n  v3 = 0LL;\n  v4 = 0LL;\n  v5 = 0LL;\n  v6 = 0LL;\n  v34 = 0LL;\n  v30 = 0LL;\n  v7 = __errno_location();\n  while ( 1 )\n  {\n    *v7 = 0;\n    v8 = readdir(v2);\n    v9 = v8;\n    if ( !v8 )\n      break;\n    v10 = v8->d_name;\n    v11 = v8->d_name[0];\n    if ( v11 == 46 )\n    {\n      if ( v9->d_name[1] == 46 )\n      {\n        v11 = v9->d_name[2];\n        goto LABEL_3;\n      }\n      if ( v9->d_name[1] )\n        goto LABEL_8;\n    }\n    else\n    {\nLABEL_3:\n      if ( v11 )\n      {\nLABEL_8:\n        v12 = v10;\n        srcb = v10;\n        v35 = v9;\n        v13 = strlen(v10);\n        v14 = (void *)srcb;\n        v15 = v13 + 1;\n        if ( compar )\n        {\n          v16 = v35;\n          src = v4 + 1;\n          if ( v4 == v34 )\n          {\n            if ( v5 )\n            {\n              if ( v4 > 0x555555555555554LL )\n                goto LABEL_41;\n              v34 = src + (v4 >> 1);\n              a2 = 16 * (src + (v4 >> 1));\n            }\n            else if ( v4 )\n            {\n              a2 = 16 * v4;\n              if ( v4 & 0x800000000000000LL || v4 >> 60 != 0 )\nLABEL_41:\n                sub_411530(v12, a2, v15);\n            }\n            else\n            {\n              v34 = 8LL;\n              a2 = 128LL;\n              src = 1LL;\n            }\n            v41 = v13 + 1;\n            nb = (size_t)v14;\n            v27 = sub_411340(v5, a2);\n            v15 = v41;\n            v14 = (void *)nb;\n            v5 = (char *)v27;\n            v16 = v35;\n          }\n          n = v15;\n          v36 = v16;\n          v17 = &v5[16 * v4];\n          *(_QWORD *)v17 = sub_411510(v14);\n          v3 += n;\n          *((_QWORD *)v17 + 1) = v36->d_ino;\n          v4 = src;\n        }\n        else\n        {\n          a2 = v15 + v3;\n          srca = v15 + v3;\n          if ( v30 - v3 > v15 )\n            goto LABEL_29;\n          if ( __CFADD__(v15, v3) )\n            goto LABEL_41;\n          if ( v6 )\n          {\n            a2 = v15 + v3;\n            if ( srca > 0x5555555555555553LL )\n              goto LABEL_41;\n            v25 = srca + (srca >> 1) + 1;\n          }\n          else\n          {\n            v25 = v15 + v3;\n            if ( !a2 )\n            {\n              v30 = 128LL;\n              goto LABEL_28;\n            }\n            if ( a2 < 0 )\n              goto LABEL_41;\n          }\n          v30 = v25;\nLABEL_28:\n          na = v15;\n          v37 = v14;\n          v26 = sub_411340(v6, v30);\n          v15 = na;\n          v14 = v37;\n          v6 = v26;\nLABEL_29:\n          a2 = (__int64)v14;\n          memcpy((void *)(v6 + v3), v14, v15);\n          v3 = srca;\n        }\n      }\n    }\n  }\n  v18 = *v7;\n  if ( *v7 )\n  {\n    free(v5);\n    v28 = (void *)v6;\n    v6 = 0LL;\n    free(v28);\n    *v7 = v18;\n  }\n  else\n  {\n    if ( compar )\n    {\n      if ( v4 )\n      {\n        v20 = 0LL;\n        qsort(v5, v4, 0x10uLL, compar);\n        v21 = (__int64)&v5[16 * v4];\n        v22 = (const char **)v5;\n        v6 = sub_4112E0(v3 + 1);\n        do\n        {\n          v23 = *v22;\n          v22 += 2;\n          v20 = &stpcpy(&v20[v6], v23)[-v6 + 1];\n          free((void *)*(v22 - 2));\n        }\n        while ( v22 != (const char **)v21 );\n        v19 = &v20[v6];\n      }\n      else\n      {\n        v6 = sub_4112E0(v3 + 1);\n        v19 = (char *)v6;\n      }\n      free(v5);\n    }\n    else if ( v30 == v3 )\n    {\n      v6 = sub_411340(v6, v30 + 1);\n      v19 = (char *)(v6 + v30);\n    }\n    else\n    {\n      v19 = (char *)(v6 + v3);\n    }\n    *v19 = 0;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x40f0e0L", 
            "funcEndAddr": "0x40f474L", 
            "funcName": "sub_40F0E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_40F480(const char *a1, unsigned int a2)\n{\n  DIR *v2; // rax\n  DIR *v3; // rbx\n  void *v4; // rbp\n  void *result; // rax\n  int *v6; // rax\n  int v7; // er12\n  int *v8; // rbx\n\n  v2 = sub_40ABC0(a1);\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = (void *)sub_40F0E0(v2, a2);\n  if ( !closedir(v3) )\n    return v4;\n  v6 = __errno_location();\n  v7 = *v6;\n  v8 = v6;\n  free(v4);\n  result = 0LL;\n  *v8 = v7;\n  return result;\n}\n", 
            "funcStartAddr": "0x40f480L", 
            "funcEndAddr": "0x40f4e8L", 
            "funcName": "sub_40F480"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F520(unsigned int *a1, const char *a2, unsigned int a3, int *a4)\n{\n  int *v4; // rbx\n  char v5; // r14\n  int v6; // eax\n  int v7; // er13\n  int v8; // eax\n  int v9; // ecx\n  signed int v10; // eax\n  unsigned int v11; // er12\n  bool v12; // al\n  __int64 result; // rax\n  int *v14; // rax\n  int v15; // ebp\n  int *v16; // rbx\n  __pid_t v17; // eax\n  int v18; // eax\n\n  v4 = a4;\n  if ( a4 )\n  {\n    v5 = a3;\n    v6 = __open_2(a2, (a3 << 17) & 0x20000 | 0x10900);\n    *v4 = v6;\n    v7 = v6;\n    v8 = *__errno_location();\n    v4[1] = v8;\n    if ( v7 < 0 )\n    {\n      if ( v8 != 13 )\n        return (unsigned int)-1;\n    }\n    else if ( v5 & 2 )\n    {\n      return 0;\n    }\n  }\n  else\n  {\n    v7 = -1;\n  }\n  v9 = *a1;\n  if ( *a1 > 5 )\n    goto LABEL_40;\n  if ( (1LL << v9) & 0x36 )\n    goto LABEL_10;\n  if ( (1LL << v9) & 8 )\n  {\n    if ( (a1[1] & 0x80000000) == 0 )\n      goto LABEL_10;\n    goto LABEL_26;\n  }\n  if ( v9 )\nLABEL_40:\n    __assert_fail(\"0\", \"lib/savewd.c\", 0x63u, \"savewd_save\");\n  v10 = sub_40AE10(\".\", 0, a3);\n  if ( v10 >= 0 )\n  {\n    *a1 = 1;\n    a1[1] = v10;\n    goto LABEL_10;\n  }\n  v18 = *__errno_location();\n  if ( v18 != 13 && v18 != 116 )\n  {\n    *a1 = 4;\n    a1[1] = v18;\n    goto LABEL_10;\n  }\n  *(_QWORD *)a1 = -4294967293LL;\nLABEL_26:\n  v17 = fork();\n  a1[1] = v17;\n  if ( v17 )\n  {\n    if ( v17 > 0 )\n    {\n      v12 = 1;\n      v11 = -2;\n      goto LABEL_21;\n    }\n    *a1 = 4;\n    a1[1] = *__errno_location();\n  }\nLABEL_10:\n  if ( v7 < 0 )\n  {\n    v11 = chdir(a2);\n    if ( !v11 )\n      goto LABEL_18;\n    return v11;\n  }\n  v11 = fchdir(v7);\n  if ( v11 )\n  {\n    v12 = v4 == 0LL;\n    goto LABEL_21;\n  }\nLABEL_18:\n  switch ( (unsigned __int64)*a1 )\n  {\n    case 1uLL:\n      *a1 = 2;\n      break;\n    case 2uLL:\n    case 4uLL:\n    case 5uLL:\n      break;\n    case 3uLL:\n      if ( a1[1] )\n        __assert_fail(\"wd->val.child == 0\", \"lib/savewd.c\", 0x9Bu, \"savewd_chdir\");\n      return result;\n    default:\n      __assert_fail(\"0\", \"lib/savewd.c\", 0x9Fu, \"savewd_chdir\");\n      return result;\n  }\n  v12 = v4 == 0LL;\n  v11 = 0;\nLABEL_21:\n  if ( v7 < 0 || !v12 )\n    return v11;\n  v14 = __errno_location();\n  v15 = *v14;\n  v16 = v14;\n  close(v7);\n  result = v11;\n  *v16 = v15;\n  return result;\n}\n", 
            "funcStartAddr": "0x40f520L", 
            "funcEndAddr": "0x40f769L", 
            "funcName": "sub_40F520"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40F770(unsigned int *a1, int a2)\n{\n  __pid_t v2; // ebp\n  int result; // eax\n  int v4; // er12\n  int *v5; // rbp\n  __int16 v6; // ax\n  int *v7; // rax\n  int stat_loc; // [rsp+Ch] [rbp-1Ch]\n\n  switch ( (unsigned __int64)*a1 )\n  {\n    case 0uLL:\n    case 1uLL:\n      return 0;\n    case 2uLL:\n      result = fchdir(a1[1]);\n      if ( result )\n      {\n        v7 = __errno_location();\n        v4 = *v7;\n        v5 = v7;\n        close(a1[1]);\n        *a1 = 4;\n        a1[1] = v4;\nLABEL_6:\n        *v5 = v4;\n        result = -1;\n      }\n      else\n      {\n        *a1 = 1;\n      }\n      return result;\n    case 3uLL:\n      v2 = a1[1];\n      if ( !v2 )\n        _exit(a2);\n      if ( v2 <= 0 )\n        return 0;\n      while ( waitpid(v2, &stat_loc, 0) < 0 )\n      {\n        if ( *__errno_location() != 4 )\n          __assert_fail(\"(*__errno_location ()) == 4\", \"lib/savewd.c\", 0xD8u, \"savewd_restore\");\n      }\n      v6 = stat_loc;\n      a1[1] = -1;\n      if ( v6 & 0x7F )\n      {\n        raise(v6 & 0x7F);\n        HIBYTE(v6) = BYTE1(stat_loc);\n      }\n      return HIBYTE(v6);\n    case 4uLL:\n      v4 = a1[1];\n      v5 = __errno_location();\n      goto LABEL_6;\n    default:\n      __assert_fail(\"0\", \"lib/savewd.c\", 0xE2u, \"savewd_restore\");\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x40f770L", 
            "funcEndAddr": "0x40f896L", 
            "funcName": "sub_40F770"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40F8A0(unsigned int *a1)\n{\n  __int64 v1; // rax\n  int result; // eax\n\n  v1 = *a1;\n  switch ( v1 )\n  {\n    case 0LL:\n    case 4LL:\n      break;\n    case 1LL:\n    case 2LL:\n      LODWORD(v1) = close(a1[1]);\n      break;\n    case 3LL:\n      LODWORD(v1) = a1[1];\n      if ( (int)v1 >= 0 )\n        __assert_fail(\"wd->val.child < 0\", \"lib/savewd.c\", 0xF7u, \"savewd_finish\");\n      return result;\n    default:\n      __assert_fail(\"0\", \"lib/savewd.c\", 0xFBu, \"savewd_finish\");\n      return result;\n  }\n  *a1 = 5;\n  return v1;\n}\n", 
            "funcStartAddr": "0x40f8a0L", 
            "funcEndAddr": "0x40f909L", 
            "funcName": "sub_40F8A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40F910(int a1, __int64 a2, __int64 (__fastcall *a3)(_QWORD, int *, __int64), __int64 a4)\n{\n  __int64 (__fastcall *v4)(_QWORD, int *, __int64); // r13\n  int v5; // ebp\n  __int64 v6; // rax\n  _BYTE *v7; // rdx\n  __int64 v8; // r15\n  int v9; // er14\n  int i; // eax\n  int v11; // eax\n  int v12; // eax\n  _QWORD *v13; // r15\n  unsigned __int64 v14; // rbp\n  int v15; // eax\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  int v18; // [rsp+28h] [rbp-40h]\n  int v19; // [rsp+2Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v17 = a4;\n  v18 = 0;\n  if ( a1 - 1 < 0 )\n    goto LABEL_27;\n  v5 = a1 - 1;\n  if ( **(_BYTE **)(a2 + 8LL * (a1 - 1)) == 47 )\n  {\n    v6 = a1 - 2;\n    do\n    {\n      v5 = v6;\n      if ( (int)v6 < 0 )\n        break;\n      v7 = *(_BYTE **)(a2 + 8 * v6--);\n    }\n    while ( *v7 == 47 );\n  }\n  if ( v5 <= 0 )\n  {\nLABEL_27:\n    v9 = 0;\n    v5 = 0;\n  }\n  else\n  {\n    v8 = a2;\n    v9 = 0;\n    for ( i = 0; ; i = v18 )\n    {\n      if ( i != 3 || v19 <= 0 )\n      {\n        v11 = v4(*(_QWORD *)v8, &v18, v17);\n        if ( v9 < v11 )\n          v9 = v11;\n      }\n      if ( **(_BYTE **)(v8 + 8) != 47 )\n      {\n        v12 = sub_40F770((unsigned int *)&v18, v9);\n        if ( v9 < v12 )\n          v9 = v12;\n      }\n      v8 += 8LL;\n      if ( v8 == a2 + 8LL * (unsigned int)(v5 - 1) + 8 )\n        break;\n    }\n  }\n  sub_40F8A0((unsigned int *)&v18);\n  if ( a1 > v5 )\n  {\n    v13 = (_QWORD *)(a2 + 8LL * v5);\n    v14 = a2 + 8 * (v5 + (unsigned __int64)(unsigned int)(a1 - 1 - v5)) + 8;\n    do\n    {\n      v15 = v4(*v13, &v18, v17);\n      if ( v9 < v15 )\n        v9 = v15;\n      ++v13;\n    }\n    while ( v13 != (_QWORD *)v14 );\n  }\n  return (unsigned int)v9;\n}\n", 
            "funcStartAddr": "0x40f910L", 
            "funcEndAddr": "0x40fa58L", 
            "funcName": "sub_40F910"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FA60(char *filename)\n{\n  int v1; // ebx\n  int *v2; // rax\n  __int64 v4; // [rsp+0h] [rbp-98h]\n\n  v1 = __lxstat(1, filename, (struct stat *)&v4);\n  v2 = __errno_location();\n  if ( v1 && *v2 != 75 )\n    return (unsigned int)-(*v2 != 2);\n  *v2 = 17;\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x40fa60L", 
            "funcEndAddr": "0x40fab4L", 
            "funcName": "sub_40FA60"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40FAC0(const char *a1)\n{\n  return mkdir(a1, 0x1C0u);\n}\n", 
            "funcStartAddr": "0x40fac0L", 
            "funcEndAddr": "0x40facaL", 
            "funcName": "sub_40FAC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40FAD0(const char *a1, int *a2)\n{\n  int v2; // esi\n\n  v2 = *a2;\n  LOBYTE(v2) = v2 & 0x3C | 0xC2;\n  return open(a1, v2, 384LL);\n}\n", 
            "funcStartAddr": "0x40fad0L", 
            "funcEndAddr": "0x40fae6L", 
            "funcName": "sub_40FAD0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_40FAF0()\n{\n  __assert_fail(\"! \\\"invalid KIND in __gen_tempname\\\"\", \"lib/tempname.c\", 0x147u, \"gen_tempname_len\");\n}\n", 
            "funcStartAddr": "0x40faf0L", 
            "funcEndAddr": "0x40fb0dL", 
            "funcName": "sub_40FAF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FB10(char *s, int a2, __int64 a3, __int64 (__fastcall *a4)(char *, __int64), size_t a5)\n{\n  size_t v5; // r13\n  int *v6; // rax\n  int *v7; // r15\n  size_t v8; // rax\n  size_t v9; // rdx\n  size_t v10; // rbx\n  void *v11; // rbp\n  int v12; // er12\n  char *v13; // rbx\n  char *v14; // r14\n  int v15; // edx\n  int v16; // ecx\n  unsigned int v17; // edx\n  int v19; // [rsp+8h] [rbp-60h]\n  char *v20; // [rsp+10h] [rbp-58h]\n  int v21; // [rsp+10h] [rbp-58h]\n  __int64 v22; // [rsp+18h] [rbp-50h]\n  __int64 (__fastcall *v23)(char *, __int64); // [rsp+20h] [rbp-48h]\n  int v24; // [rsp+2Ch] [rbp-3Ch]\n\n  v5 = a5;\n  v22 = a3;\n  v23 = a4;\n  v6 = __errno_location();\n  v7 = v6;\n  v24 = *v6;\n  v8 = strlen(s);\n  v9 = v5 + a2;\n  if ( v9 > v8 || (v10 = v8 - v9, v20 = &s[v8 - v9], v5 > strspn(&s[v8 - v9], \"X\")) )\n  {\n    *v7 = 22;\n    v17 = -1;\n  }\n  else\n  {\n    v11 = (void *)sub_413800(0LL, v5);\n    if ( v11 )\n    {\n      v12 = 238328;\n      v13 = &s[v5 + v10];\n      while ( 1 )\n      {\n        v14 = v20;\n        if ( v5 )\n        {\n          do\n            *(++v14 - 1) = byte_41A1C0[sub_413840(v11, 61LL)];\n          while ( v14 != v13 );\n        }\n        v15 = v23(s, v22);\n        if ( v15 >= 0 )\n        {\n          *v7 = v24;\n          v16 = v24;\n          goto LABEL_12;\n        }\n        v16 = *v7;\n        if ( *v7 != 17 )\n          break;\n        if ( !--v12 )\n        {\n          sub_413960(v11);\n          *v7 = 17;\n          return (unsigned int)-1;\n        }\n      }\n      v15 = -1;\nLABEL_12:\n      v21 = v15;\n      v19 = v16;\n      sub_413960(v11);\n      v17 = v21;\n      *v7 = v19;\n    }\n    else\n    {\n      v17 = -1;\n    }\n  }\n  return v17;\n}\n", 
            "funcStartAddr": "0x40fb10L", 
            "funcEndAddr": "0x40fc6dL", 
            "funcName": "sub_40FB10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FC70(char *a1, int a2, int a3, unsigned int a4, size_t a5)\n{\n  int v6; // [rsp+Ch] [rbp-Ch]\n\n  v6 = a3;\n  if ( a4 > 2 )\n    sub_40FAF0();\n  return sub_40FB10(a1, a2, (__int64)&v6, (__int64 (__fastcall *)(char *, __int64))off_41A180[a4], a5);\n}\n", 
            "funcStartAddr": "0x40fc70L", 
            "funcEndAddr": "0x40fc9bL", 
            "funcName": "sub_40FC70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FCA0(char *a1, int a2, int a3, unsigned int a4)\n{\n  int v5; // [rsp+Ch] [rbp-Ch]\n\n  v5 = a3;\n  if ( a4 > 2 )\n    sub_40FAF0();\n  return sub_40FB10(a1, a2, (__int64)&v5, (__int64 (__fastcall *)(char *, __int64))off_41A180[a4], 6uLL);\n}\n", 
            "funcStartAddr": "0x40fca0L", 
            "funcEndAddr": "0x40fcd1L", 
            "funcName": "sub_40FCA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FCF0(int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // er12\n  int *v3; // rax\n  int v4; // er13\n  int *v5; // rbp\n\n  if ( (unsigned int)fd > 2 )\n    return (unsigned int)fd;\n  v2 = sub_4143D0();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x40fcf0L", 
            "funcEndAddr": "0x40fd3eL", 
            "funcName": "sub_40FCF0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40FD40(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n", 
            "funcStartAddr": "0x40fd40L", 
            "funcEndAddr": "0x40fd4cL", 
            "funcName": "sub_40FD40"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40FD50(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n", 
            "funcStartAddr": "0x40fd50L", 
            "funcEndAddr": "0x40fd5aL", 
            "funcName": "sub_40FD50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40FD60(char *a1, __int64 a2, __int64 a3, char a4)\n{\n  __int64 v4; // r13\n  __int64 v5; // r12\n  __int64 v6; // rbp\n  __int64 v7; // r14\n  int v8; // er15\n  unsigned int v9; // ebx\n  _QWORD *v10; // rdx\n  _QWORD *v11; // rsi\n  __int64 v12; // rax\n  __int64 *v13; // r9\n  int v14; // edi\n  __int64 v16; // rcx\n  int v17; // er10\n  int v18; // edi\n  int v19; // ecx\n  int v20; // esi\n  int v21; // er8\n  int v22; // er15\n  int v23; // er11\n  signed __int64 v24; // rax\n  int v25; // eax\n  int v26; // er8\n  __int64 *v27; // r9\n  int v28; // eax\n  int v29; // er8\n  int v30; // er10\n  char v31; // al\n  int v32; // ecx\n  int v33; // eax\n  int v34; // er10\n  int v35; // ecx\n  int v36; // esi\n  __int64 v37; // rax\n  _QWORD *v38; // rax\n  __int64 v39; // rdi\n  __int64 *v40; // [rsp+0h] [rbp-148h]\n  __int64 *v41; // [rsp+0h] [rbp-148h]\n  __int64 *v42; // [rsp+0h] [rbp-148h]\n  bool v43; // [rsp+8h] [rbp-140h]\n  __int64 v44; // [rsp+10h] [rbp-138h]\n  int v45; // [rsp+10h] [rbp-138h]\n  int v46; // [rsp+18h] [rbp-130h]\n  int v47; // [rsp+18h] [rbp-130h]\n  int v48; // [rsp+18h] [rbp-130h]\n  int v49; // [rsp+18h] [rbp-130h]\n  _QWORD *v50; // [rsp+18h] [rbp-130h]\n  char *filename; // [rsp+20h] [rbp-128h]\n  __int64 v52; // [rsp+30h] [rbp-118h]\n  int v53; // [rsp+3Ch] [rbp-10Ch]\n  __int64 v54; // [rsp+48h] [rbp-100h]\n  __int64 v55; // [rsp+50h] [rbp-F8h]\n  int v56; // [rsp+58h] [rbp-F0h]\n  char v57; // [rsp+5Ch] [rbp-ECh]\n  __int64 v58; // [rsp+60h] [rbp-E8h]\n  __int64 v59; // [rsp+68h] [rbp-E0h]\n  __int64 v60; // [rsp+70h] [rbp-D8h]\n  __int64 v61; // [rsp+78h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+80h] [rbp-C8h]\n\n  v4 = *(_QWORD *)(a3 + 96);\n  v5 = *(_QWORD *)(a2 + 88);\n  v6 = *(_QWORD *)(a3 + 88);\n  v7 = *(_QWORD *)(a2 + 96);\n  v8 = *(_QWORD *)(a3 + 96);\n  v9 = a4 & 1;\n  if ( !(a4 & 1) )\n  {\nLABEL_12:\n    if ( v6 > v5 )\n      return (unsigned int)-1;\n    v9 = 1;\n    if ( v6 == v5 )\n    {\n      if ( v8 <= (int)v7 )\n        return v8 < (int)v7;\n      return (unsigned int)-1;\n    }\n    return v9;\n  }\n  v43 = v5 == v6 && (_DWORD)v7 == (_DWORD)v4;\n  if ( v43 )\n    return 0;\n  if ( v6 - 1 > v5 )\n    return (unsigned int)-1;\n  if ( v5 - 1 <= v6 )\n  {\n    v10 = (_QWORD *)qword_621B20;\n    v44 = a2;\n    filename = a1;\n    if ( !qword_621B20 )\n    {\n      v10 = sub_40BB50(\n              0x10uLL,\n              0LL,\n              (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_40FD40,\n              (bool (__fastcall *)(__int64, __int64))sub_40FD50,\n              (__int64)free);\n      qword_621B20 = (__int64)v10;\n      if ( !v10 )\n        goto LABEL_21;\n    }\n    v11 = (_QWORD *)qword_621B18;\n    if ( !qword_621B18 )\n    {\n      v50 = v10;\n      v38 = malloc(0x10uLL);\n      v11 = v38;\n      qword_621B18 = (__int64)v38;\n      if ( !v38 )\n      {\n        v39 = qword_621B20;\n        goto LABEL_59;\n      }\n      *((_DWORD *)v38 + 2) = 2000000000;\n      v10 = v50;\n      *((_BYTE *)v38 + 12) = 0;\n    }\n    *v11 = *(_QWORD *)v44;\n    v12 = sub_40C2F0((__int64)v10, (__int64)v11);\n    v13 = (__int64 *)v12;\n    if ( v12 )\n    {\n      if ( qword_621B18 == v12 )\n        qword_621B18 = 0LL;\nLABEL_10:\n      v14 = *((_DWORD *)v13 + 2);\n      v46 = *((_DWORD *)v13 + 2);\n      if ( *((_BYTE *)v13 + 12) )\n      {\n        v6 = ~(v14 == 2000000000) & (unsigned __int64)v6;\n        v8 = v4 - v8 % v14;\n        goto LABEL_12;\n      }\nLABEL_22:\n      v16 = *(_QWORD *)(v44 + 112);\n      v52 = *(_QWORD *)(v44 + 80);\n      v17 = (int)v16 / 10;\n      v18 = (int)v7 / 10;\n      if ( ((int)v7 % 10) | ((int)v52 % 10) | ((int)v16 % 10) )\n      {\nLABEL_55:\n        *((_DWORD *)v13 + 2) = v9;\n        *((_BYTE *)v13 + 12) = 1;\n        goto LABEL_12;\n      }\n      v19 = (int)v52 / 10;\n      v20 = v17;\n      v54 = *(_QWORD *)(v44 + 72);\n      if ( v46 <= 10 )\n      {\n        *((_DWORD *)v13 + 2) = 10;\n        v24 = v6;\n        v21 = 10;\n      }\n      else\n      {\n        v21 = 10;\n        if ( ((int)v7 / 10 % 10) | (v17 % 10) | ((int)v52 / 10 % 10) )\n        {\n          *((_DWORD *)v13 + 2) = 10;\n          v24 = v6;\n        }\n        else\n        {\n          v53 = v8;\n          v22 = 8;\n          do\n          {\n            v23 = 10 * v21;\n            v21 = v23;\n            v19 /= 10;\n            v20 /= 10;\n            v18 /= 10;\n            if ( v23 >= v46 || (v18 % 10) | (v20 % 10) | (v19 % 10) )\n            {\n              v43 = v23 == 2000000000;\n              v8 = v53;\n              *((_DWORD *)v13 + 2) = v23;\n              v24 = v6 & ~(v23 == 2000000000);\n              goto LABEL_31;\n            }\n            --v22;\n          }\n          while ( v22 );\n          v8 = v53;\n          if ( (*(_BYTE *)(v44 + 104) | (unsigned __int8)(v5 | v54)) & 1 )\n          {\n            *((_DWORD *)v13 + 2) = 1000000000;\n            v24 = v6;\n            v21 = 1000000000;\n          }\n          else\n          {\n            *((_DWORD *)v13 + 2) = 2000000000;\n            v21 = 2000000000;\n            v24 = v6 & 0xFFFFFFFFFFFFFFFELL;\n            v43 = 1;\n          }\n        }\n      }\nLABEL_31:\n      if ( v5 > v6 || (int)v7 >= (int)v4 && v5 == v6 )\n        return v9;\n      if ( v5 < v24 || v5 == v24 && (int)v4 - v8 % v21 > (int)v7 )\n        return (unsigned int)-1;\n      v47 = v21;\n      v58 = v54;\n      v59 = (int)v52;\n      v60 = v5 | v43;\n      v61 = (int)(v21 / 9u + v7);\n      v40 = v13;\n      if ( (*(_DWORD *)(v44 + 24) & 0xF000) == 40960 )\n      {\n        v25 = sub_410AB0(filename);\n        v27 = v40;\n        v26 = v47;\n      }\n      else\n      {\n        v25 = sub_410AA0(filename);\n        v26 = v47;\n        v27 = v40;\n      }\n      if ( v25 != 0 )\n        return (unsigned int)-2;\n      v48 = v26;\n      v41 = v27;\n      if ( (*(_DWORD *)(v44 + 24) & 0xF000) == 40960 )\n      {\n        v28 = __lxstat(1, filename, &stat_buf);\n        v13 = v41;\n        v29 = v48;\n      }\n      else\n      {\n        v28 = __xstat(1, filename, &stat_buf);\n        v29 = v48;\n        v13 = v41;\n      }\n      v30 = v28;\n      v31 = stat_buf.st_mtim.tv_sec;\n      v32 = stat_buf.st_mtim.tv_nsec;\n      if ( v30 | v5 ^ stat_buf.st_mtim.tv_sec | stat_buf.st_mtim.tv_nsec ^ (int)v7 )\n      {\n        v61 = (int)v7;\n        v60 = v5;\n        v33 = *(_DWORD *)(v44 + 24);\n        v49 = v29;\n        v45 = v30;\n        v42 = v13;\n        if ( (v33 & 0xF000) == 40960 )\n        {\n          sub_410AB0(filename);\n          v13 = v42;\n          v34 = v45;\n          v29 = v49;\n        }\n        else\n        {\n          sub_410AA0(filename);\n          v29 = v49;\n          v34 = v45;\n          v13 = v42;\n        }\n        if ( v34 )\n          return (unsigned int)-2;\n        v31 = stat_buf.st_mtim.tv_sec;\n        v32 = stat_buf.st_mtim.tv_nsec;\n      }\n      v35 = 1000000000 * (v31 & 1) + v32;\n      if ( v35 == 10 * (v35 / 10) )\n      {\n        if ( v29 != 10 )\n        {\n          v36 = 9;\n          v9 = 10;\n          do\n          {\n            v35 /= 10;\n            if ( v35 != 10 * (v35 / 10) )\n              break;\n            if ( !--v36 )\n            {\n              v37 = -2LL;\n              v9 = 2000000000;\n              goto LABEL_54;\n            }\n            v9 *= 10;\n          }\n          while ( v9 != v29 );\n          v37 = ~(v9 == 2000000000);\n          goto LABEL_54;\n        }\n        v9 = 10;\n      }\n      v37 = -1LL;\nLABEL_54:\n      v6 &= v37;\n      v8 = v4 - v8 % (int)v9;\n      goto LABEL_55;\n    }\n    v39 = qword_621B20;\n    if ( !qword_621B20 )\n    {\nLABEL_21:\n      v56 = 2000000000;\n      v13 = &v55;\n      v57 = 0;\n      v46 = 2000000000;\n      goto LABEL_22;\n    }\nLABEL_59:\n    v55 = *(_QWORD *)v44;\n    v13 = (__int64 *)sub_40B8E0(v39, (__int64)&v55);\n    if ( v13 )\n      goto LABEL_10;\n    goto LABEL_21;\n  }\n  return v9;\n}\n", 
            "funcStartAddr": "0x40fd60L", 
            "funcEndAddr": "0x4104c9L", 
            "funcName": "sub_40FD60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4104D0(_QWORD *a1, struct timespec **a2)\n{\n  struct timespec *v2; // rbx\n  __syscall_slong_t v3; // rax\n  __syscall_slong_t v4; // rdx\n  __syscall_slong_t v5; // rax\n  __int64 result; // rax\n  __syscall_slong_t v7; // rax\n\n  v2 = *a2;\n  v3 = (*a2)->tv_nsec;\n  v4 = (*a2)[1].tv_nsec;\n  if ( v3 == 1073741822 )\n  {\n    result = 1LL;\n    if ( v4 == 1073741822 )\n      return result;\n    v7 = a1[10];\n    v2->tv_sec = a1[9];\n    v2->tv_nsec = v7;\n  }\n  else if ( v3 == 0x3FFFFFFF )\n  {\n    if ( v4 == 0x3FFFFFFF )\n    {\n      *a2 = 0LL;\n      return 0LL;\n    }\n    sub_412F80(*a2);\n    v4 = v2[1].tv_nsec;\n    if ( v4 == 1073741822 )\n      goto LABEL_4;\n  }\n  else if ( v4 == 1073741822 )\n  {\nLABEL_4:\n    v5 = a1[12];\n    v2[1].tv_sec = a1[11];\n    v2[1].tv_nsec = v5;\n    return 0LL;\n  }\n  result = 0LL;\n  if ( v4 == 0x3FFFFFFF )\n  {\n    sub_412F80(v2 + 1);\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4104d0L", 
            "funcEndAddr": "0x41059eL", 
            "funcName": "sub_4104D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4105A0(_QWORD *a1)\n{\n  unsigned __int64 v1; // r9\n  unsigned __int64 v2; // rdx\n  int v3; // ecx\n  int v4; // er10\n  __int64 result; // rax\n\n  v1 = a1[1];\n  if ( v1 - 1073741822 > 1 && v1 > 0x3B9AC9FF || (v2 = a1[3], v2 - 1073741822 > 1) && v2 > 0x3B9AC9FF )\n  {\n    *__errno_location() = 22;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    v3 = 0;\n    v4 = 0;\n    if ( v1 - 1073741822 <= 1 )\n    {\n      *a1 = 0LL;\n      v4 = 1;\n      v3 = v1 == 1073741822;\n    }\n    if ( v2 - 1073741822 <= 1 )\n    {\n      a1[2] = 0LL;\n      v4 = 1;\n      v3 += v2 == 1073741822;\n    }\n    result = v4 + (unsigned int)(v3 == 1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4105a0L", 
            "funcEndAddr": "0x410649L", 
            "funcName": "sub_4105A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410660(int fd, char *filename, const __m128i *a3)\n{\n  char *v3; // rbp\n  int v4; // ebx\n  __m128i v5; // xmm1\n  int v6; // er13\n  struct timespec *v7; // rsi\n  unsigned int v8; // er12\n  bool v9; // zf\n  char v10; // al\n  __syscall_slong_t v11; // rdi\n  const __m128i *v12; // r13\n  __syscall_slong_t v13; // rsi\n  struct timeval *v14; // rdx\n  struct utimbuf *v15; // rsi\n  __time_t v16; // rax\n  bool v18; // al\n  __time_t v19; // rdx\n  bool v20; // bp\n  bool v21; // r14\n  __time_t v22; // rax\n  __m128i v23; // xmm3\n  bool v24; // dl\n  bool v25; // r14\n  __syscall_slong_t v26; // rax\n  struct timespec *times; // [rsp+8h] [rbp-120h]\n  __m128i v28; // [rsp+10h] [rbp-118h]\n  __m128i v29; // [rsp+20h] [rbp-108h]\n  struct timeval tvp; // [rsp+30h] [rbp-F8h]\n  __time_t v31; // [rsp+40h] [rbp-E8h]\n  __syscall_slong_t v32; // [rsp+48h] [rbp-E0h]\n  struct utimbuf file_times; // [rsp+50h] [rbp-D8h]\n  __m128i v34; // [rsp+60h] [rbp-C8h]\n  struct stat stat_buf; // [rsp+70h] [rbp-B8h]\n\n  v3 = filename;\n  v4 = fd;\n  if ( a3 )\n  {\n    v5 = _mm_loadu_si128(a3 + 1);\n    times = (struct timespec *)&v28;\n    v28 = _mm_loadu_si128(a3);\n    v29 = v5;\n    v6 = sub_4105A0(&v28);\n    if ( v6 < 0 )\n      return (unsigned int)-1;\n  }\n  else\n  {\n    times = 0LL;\n    v6 = 0;\n  }\n  if ( fd < 0 && !filename )\n  {\n    *__errno_location() = 9;\n    return (unsigned int)-1;\n  }\n  if ( dword_621B2C < 0 )\n    goto LABEL_11;\n  if ( v6 == 2 )\n  {\n    if ( fd < 0 )\n      v18 = __xstat(1, filename, &stat_buf) != 0;\n    else\n      v18 = __fxstat(1, fd, &stat_buf) != 0;\n    if ( v18 )\n      return (unsigned int)-1;\n    v7 = times;\n    if ( times->tv_nsec == 1073741822 )\n    {\n      v26 = stat_buf.st_atim.tv_nsec;\n      v6 = 3;\n      times->tv_sec = stat_buf.st_atim.tv_sec;\n      v7->tv_nsec = v26;\n    }\n    else\n    {\n      v6 = 3;\n      if ( times[1].tv_nsec == 1073741822 )\n      {\n        v19 = stat_buf.st_mtim.tv_sec;\n        times[1].tv_nsec = stat_buf.st_mtim.tv_nsec;\n        v7[1].tv_sec = v19;\n      }\n    }\n  }\n  else\n  {\n    v7 = times;\n  }\n  if ( fd < 0 )\n  {\n    v8 = utimensat(-100, v3, v7, 0);\n    v9 = v8 == 0;\n    if ( (int)v8 > 0 )\n      goto LABEL_10;\n  }\n  else\n  {\n    v8 = futimens(fd, v7);\n    v9 = v8 == 0;\n    if ( (int)v8 > 0 )\n    {\nLABEL_10:\n      *__errno_location() = 38;\n      goto LABEL_11;\n    }\n  }\n  if ( v9 || *__errno_location() != 38 )\n  {\n    dword_621B2C = 1;\n    return v8;\n  }\nLABEL_11:\n  dword_621B2C = -1;\n  dword_621B28 = -1;\n  if ( !v6 )\n    goto LABEL_18;\n  if ( v6 != 3 )\n  {\n    v10 = fd < 0 ? __xstat(1, v3, &stat_buf) != 0 : __fxstat(1, fd, &stat_buf) != 0;\n    if ( v10 )\n      return (unsigned int)-1;\n  }\n  if ( !times )\n    goto LABEL_26;\n  v8 = 0;\n  if ( (unsigned __int8)sub_4104D0(&stat_buf, &times) )\n    return v8;\nLABEL_18:\n  if ( times )\n  {\n    v11 = times->tv_nsec;\n    v12 = (const __m128i *)&tvp;\n    tvp.tv_sec = times->tv_sec;\n    v13 = times[1].tv_nsec;\n    v31 = times[1].tv_sec;\n    tvp.tv_usec = v11 / 1000;\n    v14 = &tvp;\n    v32 = v13 / 1000;\n    if ( v4 >= 0 )\n      goto LABEL_20;\n    return (unsigned int)futimesat(-100, v3, v14);\n  }\nLABEL_26:\n  v12 = 0LL;\n  v14 = 0LL;\n  if ( fd < 0 )\n    return (unsigned int)futimesat(-100, v3, v14);\nLABEL_20:\n  v8 = futimesat(v4, 0LL, v14);\n  if ( !v8 )\n  {\n    if ( !v12 )\n      return v8;\n    v20 = v12->m128i_i64[1] > 499999;\n    v21 = v12[1].m128i_i64[1] > 499999;\n    if ( v12->m128i_i64[1] <= 499999 && !v21 )\n      return v8;\n    if ( __fxstat(1, v4, &stat_buf) )\n      return v8;\n    v22 = stat_buf.st_atim.tv_sec - v12->m128i_i64[0];\n    v23 = _mm_load_si128(v12 + 1);\n    v24 = stat_buf.st_mtim.tv_sec - v12[1].m128i_i64[0] == 1;\n    file_times = (struct utimbuf)_mm_load_si128(v12);\n    v34 = v23;\n    v25 = v24 && v21;\n    if ( v22 != 1 || !v20 || stat_buf.st_atim.tv_nsec )\n    {\n      if ( !v25 || stat_buf.st_mtim.tv_nsec )\n        return 0;\n    }\n    else\n    {\n      file_times.modtime = 0LL;\n      if ( !v25 || stat_buf.st_mtim.tv_nsec )\n        goto LABEL_48;\n    }\n    v34.m128i_i64[1] = 0LL;\nLABEL_48:\n    futimesat(v4, 0LL, (const struct timeval *)&file_times);\n    return 0;\n  }\n  v8 = -1;\n  if ( v3 )\n  {\n    v15 = 0LL;\n    if ( times )\n    {\n      v16 = times[1].tv_sec;\n      v15 = &file_times;\n      file_times.actime = times->tv_sec;\n      file_times.modtime = v16;\n    }\n    v8 = utime(v3, v15);\n  }\n  return v8;\n}\n", 
            "funcStartAddr": "0x410660L", 
            "funcEndAddr": "0x410a9eL", 
            "funcName": "sub_410660"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410AA0(char *filename, const __m128i *a2)\n{\n  return sub_410660(-1, filename, a2);\n}\n", 
            "funcStartAddr": "0x410aa0L", 
            "funcEndAddr": "0x410ab0L", 
            "funcName": "sub_410AA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410AB0(char *filename, const __m128i *a2)\n{\n  __m128i v2; // xmm1\n  int v3; // ebx\n  struct timespec *v4; // rdx\n  int v5; // eax\n  unsigned int v6; // ebp\n  unsigned int v7; // ebp\n  __int64 result; // rax\n  __time_t v9; // rcx\n  __syscall_slong_t v10; // rax\n  struct timespec *times; // [rsp+8h] [rbp-D0h]\n  __m128i v12; // [rsp+10h] [rbp-C8h]\n  __m128i v13; // [rsp+20h] [rbp-B8h]\n  struct stat stat_buf; // [rsp+30h] [rbp-A8h]\n\n  if ( a2 )\n  {\n    v2 = _mm_loadu_si128(a2 + 1);\n    times = (struct timespec *)&v12;\n    v12 = _mm_loadu_si128(a2);\n    v13 = v2;\n    v3 = sub_4105A0(&v12);\n    if ( v3 < 0 )\n      return (unsigned int)-1;\n    if ( dword_621B28 < 0 )\n      goto LABEL_8;\n    if ( v3 == 2 )\n    {\n      if ( __lxstat(1, filename, &stat_buf) )\n        return (unsigned int)-1;\n      v4 = times;\n      if ( times->tv_nsec == 1073741822 )\n      {\n        v10 = stat_buf.st_atim.tv_nsec;\n        v3 = 3;\n        times->tv_sec = stat_buf.st_atim.tv_sec;\n        v4->tv_nsec = v10;\n      }\n      else\n      {\n        v3 = 3;\n        if ( times[1].tv_nsec == 1073741822 )\n        {\n          v9 = stat_buf.st_mtim.tv_sec;\n          times[1].tv_nsec = stat_buf.st_mtim.tv_nsec;\n          v4[1].tv_sec = v9;\n        }\n      }\n    }\n    else\n    {\n      v4 = times;\n    }\n  }\n  else\n  {\n    v4 = 0LL;\n    v3 = 0;\n    times = 0LL;\n    if ( dword_621B28 < 0 )\n    {\n      dword_621B28 = -1;\n      goto LABEL_17;\n    }\n  }\n  v5 = utimensat(-100, filename, v4, 256);\n  v6 = v5;\n  if ( v5 > 0 )\n  {\n    *__errno_location() = 38;\n    goto LABEL_8;\n  }\n  if ( v5 && *__errno_location() == 38 )\n  {\nLABEL_8:\n    dword_621B28 = -1;\n    if ( v3 )\n    {\n      if ( v3 == 3 )\n      {\n        if ( !times )\n        {\nLABEL_12:\n          if ( (stat_buf.st_mode & 0xF000) != 40960 )\n            return (unsigned int)sub_410660(-1, filename, (const __m128i *)times);\n          *__errno_location() = 38;\n          return (unsigned int)-1;\n        }\n      }\n      else\n      {\n        if ( __lxstat(1, filename, &stat_buf) )\n          return (unsigned int)-1;\n        if ( !times )\n          goto LABEL_12;\n      }\n      v7 = 0;\n      if ( (unsigned __int8)sub_4104D0(&stat_buf, &times) )\n        return v7;\n      goto LABEL_12;\n    }\nLABEL_17:\n    if ( __lxstat(1, filename, &stat_buf) )\n      return (unsigned int)-1;\n    goto LABEL_12;\n  }\n  dword_621B2C = 1;\n  result = v6;\n  dword_621B28 = 1;\n  return result;\n}\n", 
            "funcStartAddr": "0x410ab0L", 
            "funcEndAddr": "0x410cf8L", 
            "funcName": "sub_410AB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410D00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_410D00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x40303dL", 
            "funcEndAddr": "0x403042L", 
            "funcName": "sub_410D00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_410D00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_410D00(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x40303dL", 
            "funcEndAddr": "0x403042L", 
            "funcName": "sub_410D00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411100(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_410D00(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_410D00(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x411100L", 
            "funcEndAddr": "0x411160L", 
            "funcName": "sub_411100"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411160(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_410D00(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_410D00(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x411160L", 
            "funcEndAddr": "0x41121cL", 
            "funcName": "sub_411160"
        }, 
        {
            "decompiledFuncCode": "int sub_411220()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  __int64 v2; // r8\n  __int64 v3; // r9\n  char *v4; // rax\n  __int64 v5; // r8\n  __int64 v6; // r9\n  FILE *v7; // rbx\n  char *v8; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1, v2, v3);\n  v4 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v4, &unk_417166, \"https://www.gnu.org/software/coreutils/\", v5, v6);\n  v7 = stdout;\n  v8 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v8, v7);\n}\n", 
            "funcStartAddr": "0x411220L", 
            "funcEndAddr": "0x411294L", 
            "funcName": "sub_411220"
        }, 
        {
            "decompiledFuncCode": "char sub_4112A0()\n{\n  char result; // al\n  __uid_t v1; // eax\n\n  if ( byte_621B31 )\n    return byte_621B30;\n  v1 = geteuid();\n  byte_621B31 = 1;\n  result = v1 == 0;\n  byte_621B30 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x4112a0L", 
            "funcEndAddr": "0x4112d8L", 
            "funcName": "sub_4112A0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4112E0(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_411530(a1, a2, v3);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4112e0L", 
            "funcEndAddr": "0x4112faL", 
            "funcName": "sub_4112E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_411340(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_411530(a1, a2, v3);\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x411340L", 
            "funcEndAddr": "0x411376L", 
            "funcName": "sub_411340"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4114E0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4112E0(n, n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x4114e0L", 
            "funcEndAddr": "0x411508L", 
            "funcName": "sub_4114E0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_411510(void *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)src);\n  return sub_4114E0(src, v1 + 1);\n}\n", 
            "funcStartAddr": "0x411510L", 
            "funcEndAddr": "0x411523L", 
            "funcName": "sub_411510"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_411530()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x411530L", 
            "funcEndAddr": "0x411561L", 
            "funcName": "sub_411530"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411570(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // er12\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // er9\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  int base; // [rsp+0h] [rbp-58h]\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoul\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = strtoul(nptr, v5, base);\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(v7, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v15 = (unsigned __int8)**v5;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *v5;\n      v26 = strchr(v7, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_39:\n        *v6 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      v19 = 142129060940101LL;\n      if ( !_bittest64(&v19, (unsigned int)(v15 - 69)) || (v37 = v18, v20 = strchr(v7, 48), v18 = v37, !v20) )\n      {\nLABEL_26:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_27;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_27:\n          switch ( (_BYTE)v15 )\n          {\n            case 0x42:\n              if ( v13 >> 54 )\n                goto LABEL_37;\n              v13 <<= 10;\n              break;\n            case 0x45:\n              goto LABEL_70;\n            case 0x47:\n            case 0x67:\n              goto LABEL_76;\n            case 0x4B:\n            case 0x6B:\n              goto LABEL_36;\n            case 0x4D:\n            case 0x6D:\n              goto LABEL_29;\n            case 0x50:\n              goto LABEL_64;\n            case 0x54:\n            case 0x74:\n              goto LABEL_58;\n            case 0x59:\n              goto LABEL_52;\n            case 0x5A:\n              goto LABEL_46;\n            case 0x62:\n              goto LABEL_43;\n            case 0x63:\n              break;\n            case 0x77:\n              if ( (v13 & 0x8000000000000000LL) != 0LL )\n                goto LABEL_37;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_39;\n          }\nLABEL_32:\n          v24 = &v18[v22];\n          *v5 = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (_BYTE)v15 )\n          {\n            case 0x45:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_70:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_50;\n            case 0x46:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4C:\n            case 0x4E:\n            case 0x4F:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6C:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n              goto LABEL_39;\n            case 0x47:\n            case 0x67:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_76:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_32;\n            case 0x4B:\n            case 0x6B:\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_36:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_32;\n              goto LABEL_37;\n            case 0x4D:\n            case 0x6D:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_29:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_37;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 0x50:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_64:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_50;\n            case 0x54:\n            case 0x74:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_58:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_50;\n            case 0x59:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_52:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_50;\n            case 0x5A:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_46:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_50:\n              v14 |= v28;\n              break;\n            case 0x62:\n              v22 = 1;\nLABEL_43:\n              if ( v13 >> 55 )\n              {\nLABEL_37:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 0x63:\n              v22 = 1;\n              goto LABEL_32;\n            default:\n              goto LABEL_26;\n          }\n          goto LABEL_32;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_27;\n    }\n  }\nLABEL_13:\n  *v6 = v13;\n  return v14;\n}\n", 
            "funcStartAddr": "0x411570L", 
            "funcEndAddr": "0x411994L", 
            "funcName": "sub_411570"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4119A0()\n{\n  unsigned int v0; // ebx\n  __ssize_t v1; // rax\n  char *v2; // rdi\n  char *v3; // rax\n  char *response; // [rsp+0h] [rbp-18h]\n  size_t n; // [rsp+8h] [rbp-10h]\n\n  v0 = 0;\n  response = 0LL;\n  n = 0LL;\n  v1 = __getdelim(&response, &n, 10, stdin);\n  if ( v1 > 0 )\n  {\n    v2 = response;\n    v3 = &response[v1 - 1];\n    if ( *v3 == 10 )\n    {\n      *v3 = 0;\n      v2 = response;\n    }\n    LOBYTE(v0) = rpmatch(v2) > 0;\n  }\n  free(response);\n  return v0;\n}\n", 
            "funcStartAddr": "0x4119a0L", 
            "funcEndAddr": "0x411a09L", 
            "funcName": "sub_4119A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411A10(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_621B34 < 0 )\n    {\n      v3 = sub_411A10(a1);\n      if ( v3 >= 0 && dword_621B34 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_621B34 = 1;\n      }\n      else\n      {\n        v3 = sub_411A10(a1);\n        if ( v3 >= 0 )\n        {\n          dword_621B34 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x411a10L", 
            "funcEndAddr": "0x411b45L", 
            "funcName": "sub_411A10"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_411B50(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_411BC0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x411b50L", 
            "funcEndAddr": "0x411b90L", 
            "funcName": "sub_411B50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411B90(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_QWORD *)(a1 + 40) <= *(_QWORD *)(a1 + 32) )\n  {\n    result = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);\n    if ( *(_DWORD *)a1 & 0x100 )\n      result += *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x411b90L", 
            "funcEndAddr": "0x411bb8L", 
            "funcName": "sub_411B90"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_411BC0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x411bc0L", 
            "funcEndAddr": "0x411c17L", 
            "funcName": "sub_411BC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411C20(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x411c20L", 
            "funcEndAddr": "0x411cffL", 
            "funcName": "sub_411C20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_411D00(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x411d00L", 
            "funcEndAddr": "0x41231cL", 
            "funcName": "sub_411D00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412320(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_411C20(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_411C20((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_411D00(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_411D00(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_411D00(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x412320L", 
            "funcEndAddr": "0x4128e6L", 
            "funcName": "sub_412320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4128F0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_621B40 = dword_61F4DC;\n  dword_621B44 = dword_61F4D8;\n  result = sub_412320(a1, a2, a3, a4, a5, a6, &dword_621B40, a7);\n  dword_61F4DC = dword_621B40;\n  qword_621B80 = (void *)qword_621B50;\n  dword_61F4D4 = dword_621B48;\n  return result;\n}\n", 
            "funcStartAddr": "0x4128f0L", 
            "funcEndAddr": "0x412946L", 
            "funcName": "sub_4128F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412950(int a1, __int64 a2, char *a3)\n{\n  return sub_4128F0(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x412950L", 
            "funcEndAddr": "0x412968L", 
            "funcName": "sub_412950"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412970(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_4128F0(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x412970L", 
            "funcEndAddr": "0x412983L", 
            "funcName": "sub_412970"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412990(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_412320(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x412990L", 
            "funcEndAddr": "0x4129a5L", 
            "funcName": "sub_412990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4129B0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_4128F0(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x4129b0L", 
            "funcEndAddr": "0x4129c6L", 
            "funcName": "sub_4129B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4129D0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_412320(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x4129d0L", 
            "funcEndAddr": "0x4129e8L", 
            "funcName": "sub_4129D0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_4129F0(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_412FC0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x4129f0L", 
            "funcEndAddr": "0x412a6aL", 
            "funcName": "sub_4129F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412A70(FILE *s, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  size_t v4; // rbx\n  char *v5; // rbp\n  int *v7; // rax\n  int v8; // er13\n  int *v9; // r12\n  size_t n; // [rsp+8h] [rbp-800h]\n  char v11; // [rsp+10h] [rbp-7F8h]\n\n  n = 2000LL;\n  v3 = (char *)sub_414470(&v11, &n, a2, a3);\n  v4 = n;\n  if ( !v3 )\n    goto LABEL_10;\n  v5 = v3;\n  if ( fwrite(v3, 1uLL, n, s) >= v4 )\n  {\n    if ( v5 != &v11 )\n      free(v5);\n    if ( v4 <= 0x7FFFFFFF )\n      return (unsigned int)v4;\n    *__errno_location() = 75;\nLABEL_10:\n    LODWORD(v4) = -1;\n    sub_414460(s);\n    return (unsigned int)v4;\n  }\n  LODWORD(v4) = -1;\n  if ( v5 != &v11 )\n  {\n    v7 = __errno_location();\n    v8 = *v7;\n    v9 = v7;\n    free(v5);\n    *v9 = v8;\n  }\n  return (unsigned int)v4;\n}\n", 
            "funcStartAddr": "0x412a70L", 
            "funcEndAddr": "0x412b2dL", 
            "funcName": "sub_412A70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412B30(__int64 a1, __int64 a2, int a3, _DWORD *a4)\n{\n  *a4 = a3;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x412b30L", 
            "funcEndAddr": "0x412b35L", 
            "funcName": "sub_412B30"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_412B40(const char *a1, int a2, __mode_t a3)\n{\n  int result; // eax\n\n  if ( a2 == -1 )\n    result = chmod(a1, a3);\n  else\n    result = fchmod(a2, a3);\n  return result;\n}\n", 
            "funcStartAddr": "0x412b40L", 
            "funcEndAddr": "0x412b55L", 
            "funcName": "sub_412B40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412B60(__mode_t *a1, const char *a2, int a3)\n{\n  return (unsigned int)-(sub_412B40(a2, a3, *a1) != 0);\n}\n", 
            "funcStartAddr": "0x412b60L", 
            "funcEndAddr": "0x412b82L", 
            "funcName": "sub_412B60"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_412B90()\n{\n  sub_4046F0(1);\n}\n", 
            "funcStartAddr": "0x412b90L", 
            "funcEndAddr": "0x412b9aL", 
            "funcName": "sub_412B90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412BA0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  size_t v4; // r13\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n  char *v16; // [rsp+18h] [rbp-40h]\n\n  v4 = a4;\n  v5 = a3;\n  v16 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += v4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( v16 )\n      {\n        v10 = memcmp(&v16[v4 * v14], v5, v4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += v4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    v12 = v14;\n  return v12;\n}\n", 
            "funcStartAddr": "0x412ba0L", 
            "funcEndAddr": "0x412cb6L", 
            "funcName": "sub_412BA0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_412CC0(char *a1, char *a2, __int64 a3)\n{\n  char *v3; // rbx\n  _BYTE *v4; // rbp\n  _BYTE *v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_40EC30(1LL, a1);\n  v5 = sub_40E920(0LL, 8, a2);\n  error(0, 0, v3, v5, v4);\n}\n", 
            "funcStartAddr": "0x412cc0L", 
            "funcEndAddr": "0x412d31L", 
            "funcName": "sub_412CC0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_412D40(char **a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  size_t v4; // r13\n  char *v5; // rbp\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  char *i; // r12\n  _BYTE *v11; // rax\n  _BYTE *v12; // rax\n  char *v13; // rax\n\n  v3 = 0LL;\n  v4 = a3;\n  v5 = a2;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, v5, v4) )\n    {\n      ++v9;\n      v3 = v5;\n      v5 += v4;\n      v11 = sub_40EC50(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    v5 += v4;\n    v12 = sub_40EC50(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  v13 = stderr->_IO_write_ptr;\n  if ( v13 >= stderr->_IO_write_end )\n  {\n    LODWORD(v13) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = v13 + 1;\n    *v13 = 10;\n  }\n  return (int)v13;\n}\n", 
            "funcStartAddr": "0x412d40L", 
            "funcEndAddr": "0x412e58L", 
            "funcName": "sub_412D40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412E60(char *a1, char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  size_t v6; // r15\n  void (*v7)(void); // r13\n  char *v8; // rbp\n  char **v9; // rbx\n  __int64 result; // rax\n\n  v6 = a5;\n  v7 = a6;\n  v8 = a4;\n  v9 = (char **)a3;\n  result = sub_412BA0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_412CC0(a1, a2, result);\n    sub_412D40(v9, v8, v6);\n    v7();\n    result = -1LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412e60L", 
            "funcEndAddr": "0x412ed0L", 
            "funcName": "sub_412E60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412ED0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  size_t v5; // r12\n  __int64 *v6; // rbx\n  char *v7; // rbp\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v5 = a4;\n    v6 = a2 + 1;\n    v7 = a3;\n    do\n    {\n      if ( !memcmp(s1, v7, v5) )\n        break;\n      v4 = *v6;\n      v7 += v5;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x412ed0L", 
            "funcEndAddr": "0x412f1dL", 
            "funcName": "sub_412ED0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_412F20(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_4143E0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x412f20L", 
            "funcEndAddr": "0x412f7dL", 
            "funcName": "sub_412F20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_412F80(struct timespec *tp)\n{\n  int result; // eax\n  __time_t v2; // [rsp+0h] [rbp-18h]\n  __int64 v3; // [rsp+8h] [rbp-10h]\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday((struct timeval *)&v2, 0LL);\n    tp->tv_sec = v2;\n    result = 1000 * v3;\n    tp->tv_nsec = 1000 * v3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412f80L", 
            "funcEndAddr": "0x412fbaL", 
            "funcName": "sub_412F80"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_412FC0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x412fc0L", 
            "funcEndAddr": "0x41301eL", 
            "funcName": "sub_412FC0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_413020(char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rcx\n  unsigned __int64 v3; // rax\n\n  v2 = *a1;\n  if ( !(_BYTE)v2 )\n    return 0LL;\n  v3 = 0LL;\n  do\n  {\n    ++a1;\n    v3 = v2 + __ROL8__(v3, 9);\n    v2 = *a1;\n  }\n  while ( (_BYTE)v2 );\n  return v3 % a2;\n}\n", 
            "funcStartAddr": "0x413020L", 
            "funcEndAddr": "0x413056L", 
            "funcName": "sub_413020"
        }, 
        {
            "decompiledFuncCode": "const char *sub_413060()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = qword_621B78;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_621B78 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          qword_621B78 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_4143E0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_4143E0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x413060L", 
            "funcEndAddr": "0x4135c2L", 
            "funcName": "sub_413060"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_4135D0@<rax>(int fd@<edi>, char *file@<rsi>, int a3@<edx>, __uid_t a4@<ecx>, __gid_t a5@<r8d>, int a6@<r9d>, int a7)\n{\n  int v7; // er14\n  __gid_t v8; // er13\n  __uid_t v9; // er12\n  char *v10; // rbp\n  unsigned int v11; // ebx\n  __mode_t v12; // ecx\n  int v13; // eax\n  int v14; // edx\n  int *v16; // rax\n  int v17; // er12\n  int *v18; // rbp\n  int v19; // esi\n  int v20; // eax\n  int v21; // [rsp+8h] [rbp-D0h]\n  __mode_t v22; // [rsp+Ch] [rbp-CCh]\n  __mode_t v23; // [rsp+Ch] [rbp-CCh]\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h]\n\n  v7 = a6;\n  v8 = a5;\n  v9 = a4;\n  v10 = file;\n  v21 = a3;\n  if ( fd < 0 )\n  {\n    v11 = __xstat(1, file, &stat_buf);\n    if ( v11 )\n      return v11;\n    v12 = stat_buf.st_mode;\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n    {\n      v11 = -1;\n      *__errno_location() = 20;\n      return v11;\n    }\n  }\n  else\n  {\n    v11 = __fxstat(1, fd, &stat_buf);\n    if ( v11 )\n      goto LABEL_23;\n    v12 = stat_buf.st_mode;\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n    {\n      v16 = __errno_location();\n      v17 = 20;\n      v11 = -1;\n      *v16 = 20;\n      v18 = v16;\nLABEL_15:\n      close(fd);\n      *v18 = v17;\n      return v11;\n    }\n  }\n  if ( (v9 == -1 || stat_buf.st_uid == v9) && (v8 == -1 || stat_buf.st_gid == v8) )\n    goto LABEL_18;\n  if ( fd >= 0 )\n  {\n    v23 = v12;\n    v20 = fchown(fd, v9, v8);\n    v12 = v23;\n    v11 = v20;\n    if ( !v20 )\n      goto LABEL_10;\nLABEL_23:\n    v18 = __errno_location();\n    v17 = *v18;\n    goto LABEL_15;\n  }\n  v22 = v12;\n  if ( v21 == -1 )\n    v13 = chown(file, v9, v8);\n  else\n    v13 = lchown(file, v9, v8);\n  v12 = v22;\n  v11 = v13;\n  if ( !v13 )\n  {\nLABEL_10:\n    if ( v12 & 0x49 )\n    {\n      v14 = v12 & 0xC00;\n      goto LABEL_19;\n    }\nLABEL_18:\n    v14 = 0;\nLABEL_19:\n    if ( (v14 | v7 ^ v12) & a7 )\n    {\n      v19 = v7 | (unsigned __int16)v12 & (unsigned __int16)~(_WORD)a7 & 0xFFF;\n      if ( fd < 0 )\n        return (unsigned int)chmod(v10, v19);\n      v11 = fchmod(fd, v19);\n      if ( v11 )\n        goto LABEL_23;\n    }\n    else\n    {\n      v11 = 0;\n      if ( fd < 0 )\n        return v11;\n    }\n    v11 = close(fd);\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x4135d0L", 
            "funcEndAddr": "0x4137c9L", 
            "funcName": "sub_4135D0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_4137D0(__int64 a1, __int64 a2)\n{\n  _QWORD *result; // rax\n\n  result = sub_4112E0(0x18uLL, a2);\n  *result = a1;\n  result[2] = 0LL;\n  result[1] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4137d0L", 
            "funcEndAddr": "0x4137f3L", 
            "funcName": "sub_4137D0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_413800(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  _QWORD *result; // rax\n\n  v2 = sub_413A20();\n  result = 0LL;\n  if ( v2 )\n  {\n    result = sub_4112E0(0x18uLL, a2);\n    *result = v2;\n    result[2] = 0LL;\n    result[1] = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413800L", 
            "funcEndAddr": "0x41382fL", 
            "funcName": "sub_413800"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_413840(__int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r14\n  unsigned __int64 v3; // r13\n  __int64 v4; // r12\n  unsigned __int64 v5; // rbp\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rsi\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  char *v10; // rax\n  __int64 v11; // rdx\n  char v13; // [rsp+8h] [rbp-40h]\n\n  v2 = a2 + 1;\n  v3 = a2;\n  v4 = *a1;\n  v5 = a1[1];\n  v6 = a1[2];\n  while ( 1 )\n  {\n    if ( v6 >= v3 )\n    {\n      if ( v6 == v3 )\n        goto LABEL_11;\n    }\n    else\n    {\n      v8 = v6;\n      v9 = 0LL;\n      do\n      {\n        ++v9;\n        v8 = (v8 << 8) + 255;\n      }\n      while ( v3 > v8 );\n      sub_413D30(v4, &v13, v9);\n      v10 = &v13;\n      do\n      {\n        v11 = (unsigned __int8)*v10++;\n        v6 = (v6 << 8) + 255;\n        v5 = v11 + (v5 << 8);\n      }\n      while ( v3 > v6 );\n      if ( v6 == v3 )\n      {\nLABEL_11:\n        a1[2] = 0LL;\n        a1[1] = 0LL;\n        return v5;\n      }\n    }\n    v7 = (v6 - v3) % v2;\n    if ( v5 <= v6 - v7 )\n      break;\n    v6 = v7 - 1;\n    v5 %= v2;\n  }\n  a1[1] = v5 / v2;\n  v5 %= v2;\n  a1[2] = (v6 - v3) / v2;\n  return v5;\n}\n", 
            "funcStartAddr": "0x413840L", 
            "funcEndAddr": "0x413935L", 
            "funcName": "sub_413840"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_413940(void *ptr)\n{\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n}\n", 
            "funcStartAddr": "0x413940L", 
            "funcEndAddr": "0x41395eL", 
            "funcName": "sub_413940"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413960(void *ptr)\n{\n  unsigned int v1; // er12\n  int *v2; // rax\n  int v3; // er13\n  int *v4; // rbp\n\n  v1 = sub_413E90(*(void **)ptr);\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n  *v4 = v3;\n  return v1;\n}\n", 
            "funcStartAddr": "0x413960L", 
            "funcEndAddr": "0x4139b1L", 
            "funcName": "sub_413960"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_4139C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_4139C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x403042L", 
            "funcEndAddr": "0x403047L", 
            "funcName": "sub_4139C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_4139C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_4139C0(char *a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n", 
            "funcStartAddr": "0x403042L", 
            "funcEndAddr": "0x403047L", 
            "funcName": "sub_4139C0"
        }, 
        {
            "decompiledFuncCode": "__m128i *__fastcall sub_413A20(__int64 a1, unsigned __int64 a2)\n{\n  FILE *v2; // r13\n  __m128i *v3; // rax\n  size_t v4; // rcx\n  __m128i *v5; // rbx\n  __m128i *v7; // rax\n  __int64 v8; // r13\n  int v9; // eax\n  int v10; // er15\n  __int64 v11; // rdx\n  __int64 v12; // rbp\n  unsigned __int64 v13; // r14\n  __int64 v14; // rbp\n  unsigned int v15; // eax\n  __int64 v16; // rdx\n  unsigned __int64 v17; // rbp\n  __int64 v18; // r14\n  unsigned int v19; // eax\n  __int64 v20; // rdx\n  unsigned __int64 v21; // rbp\n  int v22; // eax\n  unsigned int v23; // edi\n  unsigned int v24; // eax\n  __int64 v25; // rdx\n  __int64 v26; // rcx\n  struct timeval *v27; // r15\n  __int64 v28; // rbp\n  __int64 v29; // r14\n  unsigned __int64 v30; // rcx\n  unsigned int v31; // [rsp+8h] [rbp-50h]\n  struct timeval tv; // [rsp+10h] [rbp-48h]\n\n  if ( !a2 )\n  {\n    v5 = (__m128i *)sub_4112E0(0x1038uLL, 0LL);\n    v5->m128i_i64[0] = 0LL;\n    v5->m128i_i64[1] = (__int64)sub_4139C0;\n    v5[1].m128i_i64[0] = 0LL;\n    return v5;\n  }\n  if ( !a1 )\n  {\n    v7 = (__m128i *)sub_4112E0(0x1038uLL, a2);\n    v7->m128i_i64[0] = 0LL;\n    v5 = v7;\n    v8 = (__int64)v7[2].m128i_i64;\n    v7->m128i_i64[1] = (__int64)sub_4139C0;\n    v7[1].m128i_i64[0] = 0LL;\n    v7[1].m128i_i64[1] = 0LL;\n    v9 = open(\"/dev/urandom\", 0);\n    v10 = v9;\n    if ( v9 < 0 )\n    {\n      v13 = 20LL;\n      gettimeofday(&tv, 0LL);\n      v5[2] = _mm_load_si128((const __m128i *)&tv);\n      LODWORD(tv.tv_sec) = getpid();\n      v5[3].m128i_i32[0] = tv.tv_sec;\n    }\n    else\n    {\n      v11 = a2;\n      if ( a2 > 0x800 )\n        v11 = 2048LL;\n      v12 = __read_chk((unsigned int)v9, v8, v11, 4120LL);\n      close(v10);\n      if ( v12 > 2047 )\n        goto LABEL_12;\n      if ( v12 < 0 )\n        v12 = 0LL;\n      v26 = 2048 - v12;\n      v27 = (struct timeval *)(v8 + v12);\n      if ( (unsigned __int64)(2048 - v12) > 0x10 )\n        v26 = 16LL;\n      v28 = v26 + v12;\n      v31 = v26;\n      gettimeofday(&tv, 0LL);\n      qmemcpy(v27, &tv, v31);\n      if ( v28 > 2047 )\n        goto LABEL_12;\n      v29 = 2048 - v28;\n      if ( (unsigned __int64)(2048 - v28) > 4 )\n        v29 = 4LL;\n      LODWORD(tv.tv_sec) = getpid();\n      v30 = (unsigned int)v29;\n      v13 = v28 + v29;\n      qmemcpy((void *)(v8 + v28), &tv, v30);\n      if ( v13 > 0x7FF )\n        goto LABEL_12;\n    }\n    v14 = 2048 - v13;\n    if ( 2048 - v13 > 4 )\n      v14 = 4LL;\n    LODWORD(tv.tv_sec) = getppid();\n    if ( (_DWORD)v14 )\n    {\n      v15 = 0;\n      do\n      {\n        v16 = v15++;\n        *(_BYTE *)(v8 + v13 + v16) = *((_BYTE *)&tv.tv_sec + v16);\n      }\n      while ( v15 < (unsigned int)v14 );\n    }\n    v17 = v13 + v14;\n    if ( v17 <= 0x7FF )\n    {\n      v18 = 2048 - v17;\n      if ( 2048 - v17 > 4 )\n        v18 = 4LL;\n      LODWORD(tv.tv_sec) = getuid();\n      if ( (_DWORD)v18 )\n      {\n        v19 = 0;\n        do\n        {\n          v20 = v19++;\n          *(_BYTE *)(v8 + v17 + v20) = *((_BYTE *)&tv.tv_sec + v20);\n        }\n        while ( v19 < (unsigned int)v18 );\n      }\n      v21 = v18 + v17;\n      if ( v21 <= 0x7FF )\n      {\n        LODWORD(tv.tv_sec) = getgid();\n        v22 = 2048 - v21;\n        if ( 2048 - v21 > 4 )\n          v22 = 4;\n        v23 = v22;\n        if ( v22 )\n        {\n          v24 = 0;\n          do\n          {\n            v25 = v24++;\n            *(_BYTE *)(v8 + v21 + v25) = *((_BYTE *)&tv.tv_sec + v25);\n          }\n          while ( v24 < v23 );\n        }\n      }\n    }\nLABEL_12:\n    sub_414190(v8);\n    return v5;\n  }\n  v2 = (FILE *)sub_415F90(a1, \"rb\");\n  if ( !v2 )\n    return 0LL;\n  v3 = (__m128i *)sub_4112E0(0x1038uLL, (__int64)\"rb\");\n  v4 = 4096LL;\n  v3->m128i_i64[0] = (__int64)v2;\n  if ( a2 <= 0x1000 )\n    v4 = a2;\n  v3->m128i_i64[1] = (__int64)sub_4139C0;\n  v5 = v3;\n  v3[1].m128i_i64[0] = a1;\n  setvbuf(v2, &v3[1].m128i_i8[8], 0, v4);\n  return v5;\n}\n", 
            "funcStartAddr": "0x413a20L", 
            "funcEndAddr": "0x413d0fL", 
            "funcName": "sub_413A20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413D30(__int64 a1, char *a2, size_t a3)\n{\n  __int64 v3; // r12\n  char *v4; // rbp\n  size_t v5; // rbx\n  FILE *v6; // r13\n  int *v7; // r14\n  __int64 v8; // rdi\n  int v9; // edx\n  __int64 result; // rax\n  size_t v11; // r15\n  char *v12; // r13\n  __int64 v13; // r14\n  void *v14; // rdi\n  char *v15; // rsi\n\n  v3 = a1;\n  v4 = a2;\n  v5 = a3;\n  v6 = *(FILE **)a1;\n  if ( *(_QWORD *)a1 )\n  {\n    v7 = __errno_location();\n    while ( 1 )\n    {\n      result = fread_unlocked(v4, 1uLL, v5, v6);\n      v9 = *v7;\n      v4 += result;\n      v5 -= result;\n      if ( !v5 )\n        break;\n      v8 = *(_QWORD *)(v3 + 16);\n      if ( !(**(_BYTE **)v3 & 0x20) )\n        v9 = 0;\n      *v7 = v9;\n      (*(void (__fastcall **)(__int64))(v3 + 8))(v8);\n      v6 = *(FILE **)v3;\n    }\n  }\n  else\n  {\n    v11 = *(_QWORD *)(a1 + 24);\n    v12 = (char *)(a1 + 2104);\n    v13 = a1 + 32;\n    if ( a3 <= v11 )\n    {\n      v12 = &v12[-v11 + 2048];\nLABEL_16:\n      result = (__int64)memcpy(v4, v12, v5);\n      *(_QWORD *)(v3 + 24) = v11 - v5;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v14 = v4;\n        v4 += v11;\n        v5 -= v11;\n        memcpy(v14, &v12[2048 - v11], v11);\n        if ( !((unsigned __int8)v4 & 7) )\n          break;\n        v11 = 2048LL;\n        sub_413EE0(v13, v12);\n        if ( v5 <= 0x800 )\n        {\nLABEL_15:\n          v11 = 2048LL;\n          goto LABEL_16;\n        }\n      }\n      do\n      {\n        if ( v5 <= 0x7FF )\n        {\n          sub_413EE0(v13, v12);\n          goto LABEL_15;\n        }\n        v15 = v4;\n        v4 += 2048;\n        result = sub_413EE0(v13, v15);\n        v5 -= 2048LL;\n      }\n      while ( v5 );\n      *(_QWORD *)(v3 + 24) = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x413d30L", 
            "funcEndAddr": "0x413e8cL", 
            "funcName": "sub_413D30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_413E90(void *ptr)\n{\n  FILE *v1; // rbp\n  __int64 result; // rax\n\n  v1 = *(FILE **)ptr;\n  __explicit_bzero_chk(ptr, 4152LL, -1LL);\n  free(ptr);\n  if ( v1 )\n    result = sub_4143E0(v1);\n  else\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x413e90L", 
            "funcEndAddr": "0x413ed9L", 
            "funcName": "sub_413E90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_413EE0(unsigned __int64 *a1, __int64 *a2)\n{\n  unsigned __int64 v2; // r11\n  unsigned __int64 v3; // rdx\n  __int64 *v4; // r9\n  __int64 v5; // r8\n  unsigned __int64 *result; // rax\n  __int64 v7; // r11\n  unsigned __int64 v8; // rcx\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  __int64 v11; // rbx\n  unsigned __int64 v12; // r8\n  unsigned __int64 v13; // r11\n  __int64 v14; // rdx\n  unsigned __int64 v15; // rcx\n  __int64 v16; // rbx\n  unsigned __int64 v17; // rcx\n  unsigned __int64 v18; // rdx\n  unsigned __int64 v19; // r8\n  __int64 v20; // rcx\n  unsigned __int64 v21; // r8\n  unsigned __int64 v22; // rcx\n  __int64 *v23; // rsi\n  unsigned __int64 v24; // rcx\n  unsigned __int64 v25; // rdx\n  __int64 v26; // rbx\n  __int64 v27; // rcx\n  unsigned __int64 v28; // r8\n  unsigned __int64 v29; // r10\n  __int64 v30; // rdx\n  unsigned __int64 v31; // rcx\n  __int64 v32; // r11\n  unsigned __int64 v33; // rcx\n  unsigned __int64 v34; // rdx\n  unsigned __int64 v35; // r8\n  __int64 v36; // rcx\n  unsigned __int64 v37; // r8\n  unsigned __int64 v38; // rcx\n\n  v2 = a1[257];\n  v3 = a1[256];\n  v4 = a2;\n  v5 = a1[258] + 1;\n  result = a1;\n  a1[258] = v5;\n  v7 = v5 + v2;\n  do\n  {\n    v8 = *result;\n    v9 = result[128] + ~((v3 << 21) ^ v3);\n    v10 = v7 + v9 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v10;\n    v11 = v8 + *(unsigned __int64 *)((char *)a1 + ((v10 >> 8) & 0x7F8));\n    *v4 = v11;\n    v12 = result[1];\n    v13 = result[129] + ((v9 >> 5) ^ v9);\n    v14 = v13 ^ (v13 << 12);\n    v15 = v11 + v13 + *(unsigned __int64 *)((char *)a1 + (result[1] & 0x7F8));\n    result[1] = v15;\n    v16 = v12 + *(unsigned __int64 *)((char *)a1 + ((v15 >> 8) & 0x7F8));\n    v4[1] = v16;\n    v17 = result[2];\n    v18 = result[130] + v14;\n    v19 = v16 + v18 + *(unsigned __int64 *)((char *)a1 + (result[2] & 0x7F8));\n    result[2] = v19;\n    v20 = *(unsigned __int64 *)((char *)a1 + ((v19 >> 8) & 0x7F8)) + v17;\n    v4[2] = v20;\n    v21 = result[3];\n    v3 = result[131] + ((v18 >> 33) ^ v18);\n    v22 = v20 + v3 + *(unsigned __int64 *)((char *)a1 + (result[3] & 0x7F8));\n    result += 4;\n    v4 += 4;\n    *(result - 1) = v22;\n    v7 = v21 + *(unsigned __int64 *)((char *)a1 + ((v22 >> 8) & 0x7F8));\n    *(v4 - 1) = v7;\n  }\n  while ( result != a1 + 128 );\n  v23 = a2 + 128;\n  do\n  {\n    v24 = *result;\n    v25 = *(result - 128) + ~((v3 << 21) ^ v3);\n    v26 = v25 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v7 + v26;\n    v27 = *(unsigned __int64 *)((char *)a1 + (((unsigned __int64)(v7 + v26) >> 8) & 0x7F8)) + v24;\n    *v23 = v27;\n    v28 = result[1];\n    v29 = *(result - 127) + ((v25 >> 5) ^ v25);\n    v30 = v29 ^ (v29 << 12);\n    v31 = v27 + v29 + *(unsigned __int64 *)((char *)a1 + (result[1] & 0x7F8));\n    result[1] = v31;\n    v32 = v28 + *(unsigned __int64 *)((char *)a1 + ((v31 >> 8) & 0x7F8));\n    v23[1] = v32;\n    v33 = result[2];\n    v34 = *(result - 126) + v30;\n    v35 = v32 + v34 + *(unsigned __int64 *)((char *)a1 + (result[2] & 0x7F8));\n    result[2] = v35;\n    v36 = *(unsigned __int64 *)((char *)a1 + ((v35 >> 8) & 0x7F8)) + v33;\n    v23[2] = v36;\n    v37 = result[3];\n    v3 = *(result - 125) + ((v34 >> 33) ^ v34);\n    v38 = v36 + v3 + *(unsigned __int64 *)((char *)a1 + (result[3] & 0x7F8));\n    result += 4;\n    v23 += 4;\n    *(result - 1) = v38;\n    v7 = v37 + *(unsigned __int64 *)((char *)a1 + ((v38 >> 8) & 0x7F8));\n    *(v23 - 1) = v7;\n  }\n  while ( result != a1 + 256 );\n  a1[256] = v3;\n  a1[257] = v7;\n  return result;\n}\n", 
            "funcStartAddr": "0x413ee0L", 
            "funcEndAddr": "0x414185L", 
            "funcName": "sub_413EE0"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_414190(_QWORD *a1)\n{\n  _QWORD *v1; // rdx\n  __int64 *v2; // rax\n  __int64 v3; // rcx\n  __int64 v4; // rsi\n  __int64 v5; // r11\n  __int64 v6; // r12\n  __int64 v7; // r10\n  __int64 v8; // r9\n  __int64 v9; // rbp\n  __int64 v10; // r8\n  __int64 v11; // rbx\n  __int64 v12; // rsi\n  unsigned __int64 v13; // rcx\n  __int64 v14; // r8\n  __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  __int64 v17; // r12\n  __int64 v18; // r10\n  unsigned __int64 v19; // rcx\n  unsigned __int64 v20; // r11\n  __int64 v21; // rsi\n  unsigned __int64 v22; // rbx\n  unsigned __int64 v23; // r13\n  __int64 v24; // r12\n  unsigned __int64 v25; // rcx\n  __int64 v26; // rsi\n  __int64 v27; // r8\n  __int64 v28; // rbx\n  unsigned __int64 v29; // r9\n  __int64 v30; // r12\n  __int64 v31; // r10\n  unsigned __int64 v32; // rcx\n  unsigned __int64 v33; // r11\n  __int64 v34; // rsi\n  unsigned __int64 v35; // rbx\n  unsigned __int64 result; // rax\n  __int64 v37; // r12\n\n  v1 = a1;\n  v2 = a1;\n  v3 = -7424904924229222229LL;\n  v4 = -9011610652101975858LL;\n  v5 = -5576812576440232668LL;\n  v6 = -5865837416287532563LL;\n  v7 = -8354558816804203872LL;\n  v8 = -5046086420515862430LL;\n  v9 = (__int64)(a1 + 256);\n  v10 = 7240739780546808700LL;\n  v11 = 5259722845879046933LL;\n  do\n  {\n    v12 = v2[4] + v4;\n    v13 = v2[7] + v3;\n    v14 = *v2 - v12 + v10;\n    v15 = (v13 >> 9) ^ (v2[5] + v11);\n    v16 = v2[1] - v15 + v8;\n    v17 = (v14 << 9) ^ (v2[6] + v6);\n    v18 = v2[2] - v17 + v7;\n    v19 = (v16 >> 23) ^ (v14 + v13);\n    v20 = v2[3] - v19 + v5;\n    v10 = (v18 << 15) ^ (v16 + v14);\n    v21 = v12 - v10;\n    *v2 = v10;\n    v8 = (v20 >> 14) ^ (v18 + v16);\n    v22 = v15 - v8;\n    v2[1] = v8;\n    v7 = (v21 << 20) ^ (v20 + v18);\n    v23 = v21 + v22;\n    v24 = v17 - v7;\n    v2[2] = v7;\n    v2 += 8;\n    v5 = (v22 >> 17) ^ (v21 + v20);\n    v11 = v24 + v22;\n    v3 = v19 - v5;\n    *(v2 - 5) = v5;\n    v4 = v23 ^ (v24 << 14);\n    v6 = v3 + v24;\n    *(v2 - 3) = v11;\n    *(v2 - 4) = v4;\n    *(v2 - 2) = v6;\n    *(v2 - 1) = v3;\n  }\n  while ( (__int64 *)v9 != v2 );\n  do\n  {\n    v25 = v1[7] + v3;\n    v26 = v1[4] + v4;\n    v27 = *v1 + v10 - v26;\n    v28 = (v25 >> 9) ^ (v1[5] + v11);\n    v29 = v1[1] + v8 - v28;\n    v30 = (v27 << 9) ^ (v1[6] + v6);\n    v31 = v1[2] + v7 - v30;\n    v32 = (v29 >> 23) ^ (v27 + v25);\n    v33 = v1[3] + v5 - v32;\n    v10 = (v31 << 15) ^ (v29 + v27);\n    v34 = v26 - v10;\n    *v1 = v10;\n    v8 = (v33 >> 14) ^ (v31 + v29);\n    v35 = v28 - v8;\n    v1[1] = v8;\n    v7 = (v34 << 20) ^ (v33 + v31);\n    result = v34 + v35;\n    v37 = v30 - v7;\n    v1[2] = v7;\n    v1 += 8;\n    v5 = (v35 >> 17) ^ (v34 + v33);\n    v11 = v37 + v35;\n    v3 = v32 - v5;\n    *(v1 - 5) = v5;\n    v4 = result ^ (v37 << 14);\n    v6 = v3 + v37;\n    *(v1 - 3) = v11;\n    *(v1 - 4) = v4;\n    *(v1 - 2) = v6;\n    *(v1 - 1) = v3;\n  }\n  while ( (_QWORD *)v9 != v1 );\n  a1[258] = 0LL;\n  a1[257] = 0LL;\n  a1[256] = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x414190L", 
            "funcEndAddr": "0x4143c4L", 
            "funcName": "sub_414190"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4143D0(char a1)\n{\n  return sub_411A10(a1, 0, 3LL);\n}\n", 
            "funcStartAddr": "0x4143d0L", 
            "funcEndAddr": "0x4143deL", 
            "funcName": "sub_4143D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4143E0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !sub_411B50(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4143e0L", 
            "funcEndAddr": "0x41445bL", 
            "funcName": "sub_4143E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_414460(_DWORD *a1)\n{\n  *a1 |= 0x20u;\n}\n", 
            "funcStartAddr": "0x414460L", 
            "funcEndAddr": "0x414464L", 
            "funcName": "sub_414460"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_414470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_416250(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_414470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_416250(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x403047L", 
            "funcEndAddr": "0x40304cL", 
            "funcName": "sub_414470"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_414470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_416250(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_414470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_416250(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x403047L", 
            "funcEndAddr": "0x40304cL", 
            "funcName": "sub_414470"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_415F90(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // er12\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // er12\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_4143D0(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_4143E0(v11);\n        *v13 = v12;\n      }\n      else if ( sub_4143E0(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        v3 = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x415f90L", 
            "funcEndAddr": "0x416023L", 
            "funcName": "sub_415F90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416030(int *a1, unsigned __int64 *a2)\n{\n  unsigned int *v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  unsigned int *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = (unsigned int *)a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( (unsigned __int64)*v2 )\n      {\n        case 1uLL:\n        case 2uLL:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *((_BYTE *)v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3uLL:\n        case 4uLL:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *((_WORD *)v2 + 8) = *v10;\n          goto LABEL_7;\n        case 5uLL:\n        case 6uLL:\n        case 0xDuLL:\n        case 0xEuLL:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (unsigned int *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (unsigned int *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          v2[4] = *v8;\n          goto LABEL_7;\n        case 7uLL:\n        case 8uLL:\n        case 9uLL:\n        case 0xAuLL:\n        case 0x11uLL:\n        case 0x12uLL:\n        case 0x13uLL:\n        case 0x14uLL:\n        case 0x15uLL:\n        case 0x16uLL:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *((_QWORD *)v2 + 2) = *v5;\n          goto LABEL_7;\n        case 0xBuLL:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *((_QWORD *)v2 + 2) = *v14;\n          goto LABEL_7;\n        case 0xCuLL:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *((long double *)v2 + 1) = *v15;\n          goto LABEL_7;\n        case 0xFuLL:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *((_QWORD *)v2 + 2) = v21;\n          goto LABEL_7;\n        case 0x10uLL:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_41ACE0;\n          *((_QWORD *)v2 + 2) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 8;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x416030L", 
            "funcEndAddr": "0x416249L", 
            "funcName": "sub_416030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416250(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 *v5; // r15\n  unsigned __int64 v6; // r9\n  unsigned __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  __int64 v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  void *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  void *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  __int64 v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  void *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  __int64 v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v94; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v95; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v96; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v97; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v5 = a3;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = (__int64)(a2 + 4);\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (__int64)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_QWORD *)(v12 + 24) = 0LL;\n  *(_QWORD *)(v12 + 32) = 0LL;\n  *(_QWORD *)(v12 + 40) = -1LL;\n  *(_QWORD *)(v12 + 48) = 0LL;\n  *(_QWORD *)(v12 + 56) = 0LL;\n  *(_QWORD *)(v12 + 64) = -1LL;\n  *(_QWORD *)(v12 + 80) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_17;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_17;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_131;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_131;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_17:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case 39:\n        *(_DWORD *)(v12 + 16) |= 1u;\n        goto LABEL_16;\n      case 45:\n        *(_DWORD *)(v12 + 16) |= 2u;\n        goto LABEL_16;\n      case 43:\n        *(_DWORD *)(v12 + 16) |= 4u;\n        goto LABEL_16;\n      case 32:\n        *(_DWORD *)(v12 + 16) |= 8u;\n        goto LABEL_16;\n      case 35:\n        *(_DWORD *)(v12 + 16) |= 0x10u;\n        goto LABEL_16;\n    }\n    if ( v13 != 48 )\n      break;\n    *(_DWORD *)(v12 + 16) |= 0x20u;\nLABEL_16:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *(_DWORD *)(v12 + 16) |= 0x40u;\n    goto LABEL_16;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *(_QWORD *)(v12 + 24) = v9;\n    *(_QWORD *)(v12 + 32) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_215;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 != 36 )\n    {\nLABEL_215:\n      v18 = *(_QWORD *)(v12 + 40);\n      if ( v18 == -1LL )\n      {\n        *(_QWORD *)(v12 + 40) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v18 = v81++;\n      }\n    }\n    else\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_131;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_131;\n      *(_QWORD *)(v12 + 40) = v18;\n      v14 = v47 + 2;\n    }\n    v19 = (_DWORD *)v5[1];\n    if ( v6 > v18 )\n    {\n      v20 = *v5;\nLABEL_43:\n      if ( v20 <= v18 )\n      {\n        do\n          v19[8 * ++v20 - 8] = 0;\n        while ( v20 <= v18 );\n        *v5 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_26;\n        }\n        goto LABEL_132;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_27;\nLABEL_48:\n      v22 = v9[1] == 42;\n      *(_QWORD *)(v12 + 48) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *(_QWORD *)(v12 + 56) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_27;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *(_QWORD *)(v12 + 56) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_216;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 != 36 )\n      {\nLABEL_216:\n        v26 = *(_QWORD *)(v12 + 64);\n        if ( v26 != -1LL )\n          goto LABEL_53;\n        *(_QWORD *)(v12 + 64) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_53;\n        }\n      }\n      else\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_131;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *(_QWORD *)(v12 + 64) = v26;\n          v24 = v72 + 2;\nLABEL_53:\n          v19 = (_DWORD *)v5[1];\n          if ( v6 > v26 )\n          {\n            v27 = *v5;\n            goto LABEL_55;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_163;\n              v27 = *v5;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)v5[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_161;\n              v27 = *v5;\n              if ( src != v40 )\n                goto LABEL_172;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *v5;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_172:\n            v5[1] = (unsigned __int64)v19;\nLABEL_55:\n            if ( v27 <= v26 )\n            {\n              do\n                v19[8 * ++v27 - 8] = 0;\n              while ( v27 <= v26 );\n              *v5 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_27;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_27;\n            }\n            goto LABEL_132;\n          }\nLABEL_160:\n          v40 = v19;\n          goto LABEL_161;\n        }\n      }\nLABEL_131:\n      v19 = (_DWORD *)v5[1];\nLABEL_132:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (void *)v4[1];\n      if ( (void *)v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_160;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_163;\n      v20 = *v5;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)v5[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_161;\n      v20 = *v5;\n      if ( src != v40 )\n        goto LABEL_94;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *v5;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_94:\n    v5[1] = (unsigned __int64)v19;\n    goto LABEL_43;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *(_QWORD *)(v12 + 24) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = (__int64)(i + 1);\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - (_QWORD)v9;\n      v9 = (char *)v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *(_QWORD *)(v12 + 32) = v9;\n    v13 = *v9;\n  }\nLABEL_26:\n  if ( v13 == 46 )\n    goto LABEL_48;\nLABEL_27:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_34;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_34;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_34:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case 37:\n      goto LABEL_71;\n    case 65:\n    case 69:\n    case 70:\n    case 71:\n    case 97:\n    case 101:\n    case 102:\n    case 103:\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_63;\n    case 67:\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_63;\n    case 83:\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_63;\n    case 88:\n    case 111:\n    case 117:\n    case 120:\n      v29 = 10;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 6 : 4;\n        }\n      }\n      goto LABEL_63;\n    case 99:\n      v29 = (v15 > 7) + 13;\n      goto LABEL_63;\n    case 100:\n    case 105:\n      v29 = 9;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 5 : 3;\n        }\n      }\n      goto LABEL_63;\n    case 110:\n      v29 = 22;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( !(v15 & 2) )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_63;\n    case 112:\n      v29 = 17;\n      goto LABEL_63;\n    case 115:\n      v29 = (v15 > 7) + 15;\nLABEL_63:\n      if ( v11 == -1LL )\n      {\n        *(_QWORD *)(v12 + 80) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v11 = v81++;\n      }\n      else\n      {\n        *(_QWORD *)(v12 + 80) = v11;\n      }\n      v19 = (_DWORD *)v5[1];\n      if ( v6 > v11 )\n        goto LABEL_66;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_160;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_163;\n        goto LABEL_159;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_211;\n      if ( src == (_DWORD *)v5[1] )\n      {\n        v19 = src;\nLABEL_159:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *v5);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      v5[1] = (unsigned __int64)v19;\nLABEL_66:\n      v30 = *v5;\n      if ( *v5 <= v11 )\n      {\n        do\n          v19[8 * ++v30 - 8] = 0;\n        while ( v30 <= v11 );\n        *v5 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_132;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_71:\n      *(_BYTE *)(v12 + 72) = v13;\n      v32 = *v4;\n      *(_QWORD *)(v12 + 8) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > v32 + 1 )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( (v7 & 0x8000000000000000LL) == 0LL )\n      {\n        v33 = 2 * v7;\n        if ( 2 * v7 <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (void *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( (void *)v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)v5[1];\n              if ( src != v40 )\n                goto LABEL_162;\n              goto LABEL_165;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_211;\n            v34 = (void *)v91[1];\n            v8 = *v91;\n            if ( (void *)v82 != v34 )\n              goto LABEL_78;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_78:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_211:\n      v40 = (_DWORD *)v5[1];\nLABEL_161:\n      if ( src != v40 )\n      {\nLABEL_162:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_163:\n      v58 = (void *)v4[1];\n      if ( (void *)v82 != v58 )\n        free(v58);\nLABEL_165:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_131;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x416250L", 
            "funcEndAddr": "0x416f59L", 
            "funcName": "sub_416250"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x416f60L", 
            "funcEndAddr": "0x416fbdL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x416fc0L", 
            "funcEndAddr": "0x416fc1L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_416FD0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_61F428 )\n    v1 = (void *)unk_61F428;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x416fd0L", 
            "funcEndAddr": "0x416fe8L", 
            "funcName": "sub_416FD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_416FE8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_61EE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x416fe8L", 
            "funcEndAddr": "0x417008L", 
            "funcName": "sub_416FE8"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_install.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 218, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}