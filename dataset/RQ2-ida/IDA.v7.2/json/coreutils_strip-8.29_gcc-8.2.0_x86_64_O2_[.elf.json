{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  unsigned __int8 v3; // al\n  unsigned int v4; // ebx\n  const char *v6; // rbp\n  const char *v7; // rsi\n  char v8; // al\n\n  sub_4032E0(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  status = 2;\n  sub_408F30(sub_4031F0);\n  qword_60D298 = (__int64)a2;\n  if ( a1 == 2 )\n  {\n    v6 = a2[1];\n    if ( !strcmp(v6, \"--help\") )\n      sub_402E30(0);\n    v4 = strcmp(v6, \"--version\");\n    if ( !v4 )\n    {\n      sub_4056B0((char)stdout);\n      return v4;\n    }\n    if ( !strcmp(v6, \"]\") )\n    {\n      dword_60D2A0 = 1;\n      v4 = 1;\n      dword_60D2A4 = 1;\n      return v4;\n    }\n    goto LABEL_12;\n  }\n  if ( a1 <= 1 || strcmp(a2[a1 - 1], \"]\") )\n  {\nLABEL_12:\n    sub_404F00(\"]\");\n    v7 = \"missing %s\";\nLABEL_13:\n    v8 = (unsigned __int64)dcgettext(0LL, v7, 5);\n    sub_401B10(v8);\n  }\n  dword_60D2A4 = 1;\n  dword_60D2A0 = a1 - 1;\n  v3 = sub_402790((unsigned int)(a1 - 2));\n  if ( dword_60D2A4 != dword_60D2A0 )\n  {\n    sub_404F00(*(_QWORD *)(qword_60D298 + 8LL * dword_60D2A4));\n    v7 = \"extra argument %s\";\n    goto LABEL_13;\n  }\n  return v3 ^ 1u;\n}\n", 
            "funcStartAddr": "0x401700L", 
            "funcEndAddr": "0x401899L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x4018a0L", 
            "funcEndAddr": "0x4018cbL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "void *sub_4018CB()\n{\n  void *result; // rax\n\n  result = &unk_60D258;\n  if ( &unk_60D258 != &unk_60D258 )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4018cbL", 
            "funcEndAddr": "0x4018eaL", 
            "funcName": "sub_4018CB"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4018EA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4018eaL", 
            "funcEndAddr": "0x401921L", 
            "funcName": "sub_4018EA"
        }, 
        {
            "decompiledFuncCode": "void *sub_401921()\n{\n  void *result; // rax\n\n  if ( !byte_60D288 )\n  {\n    while ( qword_60D290 < (unsigned __int64)(&qword_60CE48 - qword_60CE40 - 1) )\n      ((void (*)(void))qword_60CE40[++qword_60D290])();\n    result = sub_4018CB();\n    byte_60D288 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401921L", 
            "funcEndAddr": "0x401978L", 
            "funcName": "sub_401921"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401978()\n{\n  return sub_4018EA();\n}\n", 
            "funcStartAddr": "0x401978L", 
            "funcEndAddr": "0x40197dL", 
            "funcName": "sub_401978"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_401980(char *s1)\n{\n  bool result; // al\n  int v2; // edx\n\n  result = 1;\n  if ( strcmp(s1, (const char *)&unk_408F85)\n    && strcmp(s1, (const char *)&unk_408F84)\n    && strcmp(s1, (const char *)&unk_408F87)\n    && strcmp(s1, (const char *)&unk_408F8A)\n    && strcmp(s1, (const char *)&unk_408F8E)\n    && strcmp(s1, (const char *)&unk_408F92)\n    && strcmp(s1, (const char *)&unk_408F96)\n    && strcmp(s1, (const char *)&unk_408F9A)\n    && strcmp(s1, (const char *)&unk_408F9E)\n    && strcmp(s1, (const char *)&unk_408FA2) )\n  {\n    v2 = strcmp(s1, \"-gt\");\n    result = 1;\n    if ( v2 )\n      result = strcmp(s1, \"-ge\") == 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401980L", 
            "funcEndAddr": "0x401ac8L", 
            "funcName": "sub_401980"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_401AD0(char *filename, _QWORD *a2)\n{\n  bool result; // al\n  __int64 v3; // [rsp+0h] [rbp-98h]\n  __int64 v4; // [rsp+58h] [rbp-40h]\n  __int64 v5; // [rsp+60h] [rbp-38h]\n\n  result = __xstat(1, filename, (struct stat *)&v3) == 0;\n  if ( result )\n  {\n    *a2 = v4;\n    a2[1] = v5;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401ad0L", 
            "funcEndAddr": "0x401b0cL", 
            "funcName": "sub_401AD0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_401B10()\n{\n  sub_405240(0, 0);\n  exit(2);\n}\n", 
            "funcStartAddr": "0x401b10L", 
            "funcEndAddr": "0x401badL", 
            "funcName": "sub_401B10"
        }, 
        {
            "decompiledFuncCode": "unsigned __int8 *__fastcall sub_401BB0(unsigned __int8 *a1)\n{\n  const unsigned __int16 *v1; // r8\n  unsigned __int8 *result; // rax\n  __int64 v3; // rcx\n  unsigned __int8 *v4; // rcx\n  char *v5; // rdx\n\n  v1 = *__ctype_b_loc();\n  for ( result = a1; ; ++result )\n  {\n    v3 = *result;\n    if ( !(v1[v3] & 1) )\n      break;\n  }\n  if ( (_BYTE)v3 == 43 )\n    v4 = ++result;\n  else\n    v4 = &result[(_BYTE)v3 == 45];\n  v5 = (char *)(v4 + 1);\n  if ( (unsigned int)((char)*v4 - 48) > 9 )\n    goto LABEL_18;\n  LOBYTE(v4) = v4[1];\n  if ( (unsigned int)((char)v4 - 48) <= 9 )\n  {\n    do\n      LOBYTE(v4) = *++v5;\n    while ( (unsigned int)(*v5 - 48) <= 9 );\n  }\n  if ( v1[(unsigned __int8)v4] & 1 )\n  {\n    do\n      v4 = (unsigned __int8 *)(unsigned __int8)*++v5;\n    while ( v1[(_QWORD)v4] & 1 );\n  }\n  if ( (_BYTE)v4 )\n  {\nLABEL_18:\n    sub_404F00(a1);\n    dcgettext(0LL, \"invalid integer %s\", 5);\n    sub_401B10();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x401bb0L", 
            "funcEndAddr": "0x401c82L", 
            "funcName": "sub_401BB0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_401C90()\n{\n  sub_404F00(*(_QWORD *)(qword_60D298 + 8LL * dword_60D2A0 - 8));\n  dcgettext(0LL, \"missing argument after %s\", 5);\n  sub_401B10();\n}\n", 
            "funcStartAddr": "0x401c90L", 
            "funcEndAddr": "0x401ccaL", 
            "funcName": "sub_401C90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401CD0()\n{\n  int v0; // eax\n  __int64 result; // rax\n\n  v0 = dword_60D2A4++;\n  if ( dword_60D2A4 >= dword_60D2A0 )\n    sub_401C90();\n  result = (unsigned int)(v0 + 2);\n  dword_60D2A4 = result;\n  return result;\n}\n", 
            "funcStartAddr": "0x401cd0L", 
            "funcEndAddr": "0x401cf7L", 
            "funcName": "sub_401CD0"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_401D00()\n{\n  __int64 v0; // rbx\n  unsigned int v1; // edx\n  int v3; // eax\n  unsigned __int8 *v4; // rbp\n  int *v5; // rax\n  int *v6; // rbx\n  unsigned __int64 v7; // rax\n  int v8; // eax\n  int v9; // eax\n  int v10; // eax\n  int v11; // eax\n  int v12; // eax\n  int v13; // eax\n  int v14; // eax\n  int v15; // eax\n  int v16; // eax\n  int *v17; // rax\n  int *v18; // rbx\n  __uid_t v19; // eax\n  int v20; // eax\n  int *v21; // rax\n  int *v22; // rbx\n  __gid_t v23; // eax\n  __int64 v24; // [rsp+0h] [rbp-A8h]\n  unsigned int v25; // [rsp+18h] [rbp-90h]\n  int v26; // [rsp+1Ch] [rbp-8Ch]\n  int v27; // [rsp+20h] [rbp-88h]\n  __int64 v28; // [rsp+30h] [rbp-78h]\n\n  v0 = qword_60D298;\n  switch ( *(_BYTE *)(*(_QWORD *)(qword_60D298 + 8LL * dword_60D2A4) + 1LL) )\n  {\n    case 0x47:\n      sub_401CD0();\n      if ( __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24) )\n        goto LABEL_2;\n      v21 = __errno_location();\n      *v21 = 0;\n      v22 = v21;\n      v23 = getegid();\n      if ( v23 != -1 || (v1 = 0, !*v22) )\n        LOBYTE(v1) = v27 == v23;\n      break;\n    case 0x4C:\n    case 0x68:\n      sub_401CD0();\n      v20 = __lxstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v20 )\n        LOBYTE(v1) = (v25 & 0xF000) == 40960;\n      break;\n    case 0x4F:\n      sub_401CD0();\n      if ( __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24) )\n        goto LABEL_2;\n      v17 = __errno_location();\n      *v17 = 0;\n      v18 = v17;\n      v19 = geteuid();\n      if ( v19 != -1 || (v1 = 0, !*v18) )\n        LOBYTE(v1) = v26 == v19;\n      break;\n    case 0x53:\n      sub_401CD0();\n      v16 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v16 )\n        LOBYTE(v1) = (v25 & 0xF000) == 49152;\n      break;\n    case 0x61:\n    case 0x65:\n      sub_401CD0();\n      LOBYTE(v1) = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24) == 0;\n      break;\n    case 0x62:\n      sub_401CD0();\n      v15 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v15 )\n        LOBYTE(v1) = (v25 & 0xF000) == 24576;\n      break;\n    case 0x63:\n      sub_401CD0();\n      v14 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v14 )\n        LOBYTE(v1) = (v25 & 0xF000) == 0x2000;\n      break;\n    case 0x64:\n      sub_401CD0();\n      v13 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v13 )\n        LOBYTE(v1) = (v25 & 0xF000) == 0x4000;\n      break;\n    case 0x66:\n      sub_401CD0();\n      v12 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v12 )\n        LOBYTE(v1) = (v25 & 0xF000) == 0x8000;\n      break;\n    case 0x67:\n      sub_401CD0();\n      v11 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v11 )\n        v1 = (v25 >> 10) & 1;\n      break;\n    case 0x6B:\n      sub_401CD0();\n      v10 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v10 )\n        v1 = (v25 >> 9) & 1;\n      break;\n    case 0x6E:\n      sub_401CD0();\n      LOBYTE(v1) = **(_BYTE **)(v0 + 8LL * dword_60D2A4 - 8) != 0;\n      break;\n    case 0x70:\n      sub_401CD0();\n      v9 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v9 )\n        LOBYTE(v1) = (v25 & 0xF000) == 4096;\n      break;\n    case 0x72:\n      sub_401CD0();\n      LOBYTE(v1) = euidaccess(*(const char **)(v0 + 8LL * dword_60D2A4 - 8), 4) == 0;\n      break;\n    case 0x73:\n      sub_401CD0();\n      v8 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v8 )\n        LOBYTE(v1) = v28 > 0;\n      break;\n    case 0x74:\n      sub_401CD0();\n      v4 = sub_401BB0(*(unsigned __int8 **)(v0 + 8LL * dword_60D2A4 - 8));\n      v5 = __errno_location();\n      *v5 = 0;\n      v6 = v5;\n      v7 = strtol((const char *)v4, 0LL, 10);\n      v1 = 0;\n      if ( *v6 != 34 && v7 <= 0x7FFFFFFF )\n        LOBYTE(v1) = isatty(v7) != 0;\n      break;\n    case 0x75:\n      sub_401CD0();\n      v3 = __xstat(1, *(const char **)(v0 + 8LL * dword_60D2A4 - 8), (struct stat *)&v24);\n      v1 = 0;\n      if ( !v3 )\n        v1 = (v25 >> 11) & 1;\n      break;\n    case 0x77:\n      sub_401CD0();\n      LOBYTE(v1) = euidaccess(*(const char **)(v0 + 8LL * dword_60D2A4 - 8), 2) == 0;\n      break;\n    case 0x78:\n      sub_401CD0();\n      LOBYTE(v1) = euidaccess(*(const char **)(v0 + 8LL * dword_60D2A4 - 8), 1) == 0;\n      break;\n    case 0x7A:\n      sub_401CD0();\n      LOBYTE(v1) = **(_BYTE **)(v0 + 8LL * dword_60D2A4 - 8) == 0;\n      break;\n    default:\nLABEL_2:\n      v1 = 0;\n      break;\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x401d00L", 
            "funcEndAddr": "0x402209L", 
            "funcName": "sub_401D00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402210(unsigned __int8 a1)\n{\n  unsigned __int8 v1; // al\n  int v2; // ecx\n  int v3; // edx\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  unsigned int v6; // ebp\n  __int64 v7; // rsi\n  __int64 v8; // r13\n  int v9; // ebx\n  char v11; // al\n  int v12; // ebx\n  char v13; // dl\n  unsigned int v14; // ebx\n  unsigned int v15; // eax\n  unsigned int v16; // er14\n  unsigned int v17; // eax\n  char v18; // dl\n  char v19; // cl\n  unsigned int v20; // eax\n  unsigned int v21; // eax\n  char v22; // cl\n  char *v23; // rdi\n  size_t v24; // rax\n  unsigned __int8 *v25; // r12\n  size_t v26; // rax\n  unsigned __int8 *v27; // rsi\n  int v28; // eax\n  __int64 v29; // rcx\n  bool v30; // zf\n  char v31; // cl\n  const char *v32; // rsi\n  __int64 v33; // [rsp+0h] [rbp-148h]\n  __int64 v34; // [rsp+8h] [rbp-140h]\n  struct stat stat_buf; // [rsp+90h] [rbp-B8h]\n\n  v1 = a1;\n  v2 = dword_60D2A4;\n  v3 = dword_60D2A4 + 1;\n  if ( a1 )\n  {\n    ++dword_60D2A4;\n    v3 = v2 + 2;\n  }\n  v4 = qword_60D298;\n  v5 = v3;\n  v6 = 0;\n  if ( dword_60D2A0 - 2 > v3 && !strcmp(*(const char **)(qword_60D298 + 8LL * v3 + 8), \"-l\") )\n  {\n    dword_60D2A4 = v3;\n    v6 = 1;\n  }\n  v7 = *(_QWORD *)(qword_60D298 + 8LL * v3);\n  v8 = 8LL * v3;\n  if ( *(_BYTE *)v7 != 45 )\n  {\n    if ( *(_BYTE *)v7 != 61 || (v11 = *(_BYTE *)(v7 + 1)) != 0 && (v11 != 61 || *(_BYTE *)(v7 + 2)) )\n    {\n      if ( strcmp((const char *)v7, (const char *)&unk_408F84) )\n        abort();\n      v9 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) != 0;\n      dword_60D2A4 = v9 + 3;\n    }\n    else\n    {\n      v12 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) == 0;\n      dword_60D2A4 = v12 + 3;\n    }\n    return v6;\n  }\n  v13 = *(_BYTE *)(v7 + 1);\n  if ( v13 == 108 || v13 == 103 )\n  {\n    v19 = *(_BYTE *)(v7 + 2);\n    if ( v19 == 101 || v19 == 116 )\n    {\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_19;\nLABEL_52:\n      v23 = *(char **)(qword_60D298 + v8 - 8);\n      if ( v1 )\n      {\n        v24 = strlen(v23);\n        v25 = (unsigned __int8 *)sub_403290(v24, &v33);\n      }\n      else\n      {\n        v25 = sub_401BB0((unsigned __int8 *)v23);\n      }\n      if ( (_BYTE)v6 )\n      {\n        v26 = strlen(*(const char **)(qword_60D298 + v8 + 16));\n        v27 = (unsigned __int8 *)sub_403290(v26, &stat_buf);\n      }\n      else\n      {\n        v27 = sub_401BB0(*(unsigned __int8 **)(qword_60D298 + v8 + 8));\n      }\n      v28 = sub_404F20(v25, v27);\n      v29 = *(_QWORD *)(qword_60D298 + 8 * v5);\n      v30 = *(_BYTE *)(v29 + 2) == 101;\n      v31 = *(_BYTE *)(v29 + 1);\n      dword_60D2A4 += 3;\n      if ( v31 == 108 )\n      {\n        LOBYTE(v6) = v30 > v28;\n      }\n      else if ( v31 == 103 )\n      {\n        LOBYTE(v6) = -v30 < v28;\n      }\n      else\n      {\n        LOBYTE(v6) = (v28 != 0) == v30;\n      }\n      return v6;\n    }\n  }\n  if ( v13 == 101 )\n  {\n    v18 = *(_BYTE *)(v7 + 2);\n    if ( v18 == 113 )\n    {\nLABEL_51:\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_48;\n      goto LABEL_52;\n    }\n    if ( v18 != 102 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    LOBYTE(v6) = a1 | v6;\n    if ( (_BYTE)v6 )\n    {\n      v32 = \"-ef does not accept -l\";\n      goto LABEL_66;\n    }\n    if ( !__xstat(1, *(const char **)(qword_60D298 + v8 - 8), (struct stat *)&v33)\n      && !__xstat(1, *(const char **)(v4 + v8 + 8), &stat_buf)\n      && v33 == stat_buf.st_dev )\n    {\n      LOBYTE(v6) = v34 == stat_buf.st_ino;\n    }\n  }\n  else\n  {\n    if ( v13 != 110 )\n    {\nLABEL_19:\n      if ( v13 == 111 && *(_BYTE *)(v7 + 2) == 116 && !*(_BYTE *)(v7 + 3) )\n      {\n        v14 = v6;\n        dword_60D2A4 += 3;\n        LOBYTE(v14) = a1 | v6;\n        if ( !(a1 | (unsigned __int8)v6) )\n        {\n          LOBYTE(v15) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n          v16 = v15;\n          LOBYTE(v17) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n          v6 = v17;\n          if ( (_BYTE)v17 && (_BYTE)v16 )\n          {\n            if ( v33 < (signed __int64)stat_buf.st_dev )\n            {\n              v6 = v16;\n            }\n            else\n            {\n              v6 = (unsigned int)(v34 - LODWORD(stat_buf.st_ino)) >> 31;\n              if ( v33 > (signed __int64)stat_buf.st_dev )\n                v6 = v14;\n            }\n          }\n          return v6;\n        }\n        v32 = \"-ot does not accept -l\";\nLABEL_66:\n        dcgettext(0LL, v32, 5);\n        sub_401B10();\n      }\nLABEL_48:\n      sub_404F00(*(_QWORD *)(qword_60D298 + 8 * v5));\n      dcgettext(0LL, \"%s: unknown binary operator\", 5);\n      sub_401B10();\n    }\n    v22 = *(_BYTE *)(v7 + 2);\n    if ( v22 == 101 )\n      goto LABEL_51;\n    if ( v22 != 116 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    if ( a1 | (unsigned __int8)v6 )\n    {\n      v32 = \"-nt does not accept -l\";\n      goto LABEL_66;\n    }\n    LOBYTE(v20) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n    v6 = v20;\n    LOBYTE(v21) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n    if ( (_BYTE)v6 )\n    {\n      if ( (signed __int64)stat_buf.st_dev > v33 )\n      {\n        v6 = 0;\n      }\n      else\n      {\n        v6 = v21;\n        if ( (signed __int64)stat_buf.st_dev >= v33 )\n          LOBYTE(v6) = (int)v34 - LODWORD(stat_buf.st_ino) > 0;\n      }\n    }\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_402210(unsigned __int8 a1)\n{\n  unsigned __int8 v1; // al\n  int v2; // ecx\n  int v3; // edx\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  unsigned int v6; // ebp\n  __int64 v7; // rsi\n  __int64 v8; // r13\n  int v9; // ebx\n  char v11; // al\n  int v12; // ebx\n  char v13; // dl\n  unsigned int v14; // ebx\n  unsigned int v15; // eax\n  unsigned int v16; // er14\n  unsigned int v17; // eax\n  char v18; // dl\n  char v19; // cl\n  unsigned int v20; // eax\n  unsigned int v21; // eax\n  char v22; // cl\n  char *v23; // rdi\n  size_t v24; // rax\n  unsigned __int8 *v25; // r12\n  size_t v26; // rax\n  unsigned __int8 *v27; // rsi\n  int v28; // eax\n  __int64 v29; // rcx\n  bool v30; // zf\n  char v31; // cl\n  const char *v32; // rsi\n  __int64 v33; // [rsp+0h] [rbp-148h]\n  __int64 v34; // [rsp+8h] [rbp-140h]\n  struct stat stat_buf; // [rsp+90h] [rbp-B8h]\n\n  v1 = a1;\n  v2 = dword_60D2A4;\n  v3 = dword_60D2A4 + 1;\n  if ( a1 )\n  {\n    ++dword_60D2A4;\n    v3 = v2 + 2;\n  }\n  v4 = qword_60D298;\n  v5 = v3;\n  v6 = 0;\n  if ( dword_60D2A0 - 2 > v3 && !strcmp(*(const char **)(qword_60D298 + 8LL * v3 + 8), \"-l\") )\n  {\n    dword_60D2A4 = v3;\n    v6 = 1;\n  }\n  v7 = *(_QWORD *)(qword_60D298 + 8LL * v3);\n  v8 = 8LL * v3;\n  if ( *(_BYTE *)v7 != 45 )\n  {\n    if ( *(_BYTE *)v7 != 61 || (v11 = *(_BYTE *)(v7 + 1)) != 0 && (v11 != 61 || *(_BYTE *)(v7 + 2)) )\n    {\n      if ( strcmp((const char *)v7, (const char *)&unk_408F84) )\n        abort();\n      v9 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) != 0;\n      dword_60D2A4 = v9 + 3;\n    }\n    else\n    {\n      v12 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) == 0;\n      dword_60D2A4 = v12 + 3;\n    }\n    return v6;\n  }\n  v13 = *(_BYTE *)(v7 + 1);\n  if ( v13 == 108 || v13 == 103 )\n  {\n    v19 = *(_BYTE *)(v7 + 2);\n    if ( v19 == 101 || v19 == 116 )\n    {\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_19;\nLABEL_52:\n      v23 = *(char **)(qword_60D298 + v8 - 8);\n      if ( v1 )\n      {\n        v24 = strlen(v23);\n        v25 = (unsigned __int8 *)sub_403290(v24, &v33);\n      }\n      else\n      {\n        v25 = sub_401BB0((unsigned __int8 *)v23);\n      }\n      if ( (_BYTE)v6 )\n      {\n        v26 = strlen(*(const char **)(qword_60D298 + v8 + 16));\n        v27 = (unsigned __int8 *)sub_403290(v26, &stat_buf);\n      }\n      else\n      {\n        v27 = sub_401BB0(*(unsigned __int8 **)(qword_60D298 + v8 + 8));\n      }\n      v28 = sub_404F20(v25, v27);\n      v29 = *(_QWORD *)(qword_60D298 + 8 * v5);\n      v30 = *(_BYTE *)(v29 + 2) == 101;\n      v31 = *(_BYTE *)(v29 + 1);\n      dword_60D2A4 += 3;\n      if ( v31 == 108 )\n      {\n        LOBYTE(v6) = v30 > v28;\n      }\n      else if ( v31 == 103 )\n      {\n        LOBYTE(v6) = -v30 < v28;\n      }\n      else\n      {\n        LOBYTE(v6) = (v28 != 0) == v30;\n      }\n      return v6;\n    }\n  }\n  if ( v13 == 101 )\n  {\n    v18 = *(_BYTE *)(v7 + 2);\n    if ( v18 == 113 )\n    {\nLABEL_51:\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_48;\n      goto LABEL_52;\n    }\n    if ( v18 != 102 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    LOBYTE(v6) = a1 | v6;\n    if ( (_BYTE)v6 )\n    {\n      v32 = \"-ef does not accept -l\";\n      goto LABEL_66;\n    }\n    if ( !__xstat(1, *(const char **)(qword_60D298 + v8 - 8), (struct stat *)&v33)\n      && !__xstat(1, *(const char **)(v4 + v8 + 8), &stat_buf)\n      && v33 == stat_buf.st_dev )\n    {\n      LOBYTE(v6) = v34 == stat_buf.st_ino;\n    }\n  }\n  else\n  {\n    if ( v13 != 110 )\n    {\nLABEL_19:\n      if ( v13 == 111 && *(_BYTE *)(v7 + 2) == 116 && !*(_BYTE *)(v7 + 3) )\n      {\n        v14 = v6;\n        dword_60D2A4 += 3;\n        LOBYTE(v14) = a1 | v6;\n        if ( !(a1 | (unsigned __int8)v6) )\n        {\n          LOBYTE(v15) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n          v16 = v15;\n          LOBYTE(v17) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n          v6 = v17;\n          if ( (_BYTE)v17 && (_BYTE)v16 )\n          {\n            if ( v33 < (signed __int64)stat_buf.st_dev )\n            {\n              v6 = v16;\n            }\n            else\n            {\n              v6 = (unsigned int)(v34 - LODWORD(stat_buf.st_ino)) >> 31;\n              if ( v33 > (signed __int64)stat_buf.st_dev )\n                v6 = v14;\n            }\n          }\n          return v6;\n        }\n        v32 = \"-ot does not accept -l\";\nLABEL_66:\n        dcgettext(0LL, v32, 5);\n        sub_401B10();\n      }\nLABEL_48:\n      sub_404F00(*(_QWORD *)(qword_60D298 + 8 * v5));\n      dcgettext(0LL, \"%s: unknown binary operator\", 5);\n      sub_401B10();\n    }\n    v22 = *(_BYTE *)(v7 + 2);\n    if ( v22 == 101 )\n      goto LABEL_51;\n    if ( v22 != 116 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    if ( a1 | (unsigned __int8)v6 )\n    {\n      v32 = \"-nt does not accept -l\";\n      goto LABEL_66;\n    }\n    LOBYTE(v20) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n    v6 = v20;\n    LOBYTE(v21) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n    if ( (_BYTE)v6 )\n    {\n      if ( (signed __int64)stat_buf.st_dev > v33 )\n      {\n        v6 = 0;\n      }\n      else\n      {\n        v6 = v21;\n        if ( (signed __int64)stat_buf.st_dev >= v33 )\n          LOBYTE(v6) = (int)v34 - LODWORD(stat_buf.st_ino) > 0;\n      }\n    }\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x4016d0L", 
            "funcEndAddr": "0x4016d5L", 
            "funcName": "sub_402210"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402210(unsigned __int8 a1)\n{\n  unsigned __int8 v1; // al\n  int v2; // ecx\n  int v3; // edx\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  unsigned int v6; // ebp\n  __int64 v7; // rsi\n  __int64 v8; // r13\n  int v9; // ebx\n  char v11; // al\n  int v12; // ebx\n  char v13; // dl\n  unsigned int v14; // ebx\n  unsigned int v15; // eax\n  unsigned int v16; // er14\n  unsigned int v17; // eax\n  char v18; // dl\n  char v19; // cl\n  unsigned int v20; // eax\n  unsigned int v21; // eax\n  char v22; // cl\n  char *v23; // rdi\n  size_t v24; // rax\n  unsigned __int8 *v25; // r12\n  size_t v26; // rax\n  unsigned __int8 *v27; // rsi\n  int v28; // eax\n  __int64 v29; // rcx\n  bool v30; // zf\n  char v31; // cl\n  const char *v32; // rsi\n  __int64 v33; // [rsp+0h] [rbp-148h]\n  __int64 v34; // [rsp+8h] [rbp-140h]\n  struct stat stat_buf; // [rsp+90h] [rbp-B8h]\n\n  v1 = a1;\n  v2 = dword_60D2A4;\n  v3 = dword_60D2A4 + 1;\n  if ( a1 )\n  {\n    ++dword_60D2A4;\n    v3 = v2 + 2;\n  }\n  v4 = qword_60D298;\n  v5 = v3;\n  v6 = 0;\n  if ( dword_60D2A0 - 2 > v3 && !strcmp(*(const char **)(qword_60D298 + 8LL * v3 + 8), \"-l\") )\n  {\n    dword_60D2A4 = v3;\n    v6 = 1;\n  }\n  v7 = *(_QWORD *)(qword_60D298 + 8LL * v3);\n  v8 = 8LL * v3;\n  if ( *(_BYTE *)v7 != 45 )\n  {\n    if ( *(_BYTE *)v7 != 61 || (v11 = *(_BYTE *)(v7 + 1)) != 0 && (v11 != 61 || *(_BYTE *)(v7 + 2)) )\n    {\n      if ( strcmp((const char *)v7, (const char *)&unk_408F84) )\n        abort();\n      v9 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) != 0;\n      dword_60D2A4 = v9 + 3;\n    }\n    else\n    {\n      v12 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) == 0;\n      dword_60D2A4 = v12 + 3;\n    }\n    return v6;\n  }\n  v13 = *(_BYTE *)(v7 + 1);\n  if ( v13 == 108 || v13 == 103 )\n  {\n    v19 = *(_BYTE *)(v7 + 2);\n    if ( v19 == 101 || v19 == 116 )\n    {\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_19;\nLABEL_52:\n      v23 = *(char **)(qword_60D298 + v8 - 8);\n      if ( v1 )\n      {\n        v24 = strlen(v23);\n        v25 = (unsigned __int8 *)sub_403290(v24, &v33);\n      }\n      else\n      {\n        v25 = sub_401BB0((unsigned __int8 *)v23);\n      }\n      if ( (_BYTE)v6 )\n      {\n        v26 = strlen(*(const char **)(qword_60D298 + v8 + 16));\n        v27 = (unsigned __int8 *)sub_403290(v26, &stat_buf);\n      }\n      else\n      {\n        v27 = sub_401BB0(*(unsigned __int8 **)(qword_60D298 + v8 + 8));\n      }\n      v28 = sub_404F20(v25, v27);\n      v29 = *(_QWORD *)(qword_60D298 + 8 * v5);\n      v30 = *(_BYTE *)(v29 + 2) == 101;\n      v31 = *(_BYTE *)(v29 + 1);\n      dword_60D2A4 += 3;\n      if ( v31 == 108 )\n      {\n        LOBYTE(v6) = v30 > v28;\n      }\n      else if ( v31 == 103 )\n      {\n        LOBYTE(v6) = -v30 < v28;\n      }\n      else\n      {\n        LOBYTE(v6) = (v28 != 0) == v30;\n      }\n      return v6;\n    }\n  }\n  if ( v13 == 101 )\n  {\n    v18 = *(_BYTE *)(v7 + 2);\n    if ( v18 == 113 )\n    {\nLABEL_51:\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_48;\n      goto LABEL_52;\n    }\n    if ( v18 != 102 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    LOBYTE(v6) = a1 | v6;\n    if ( (_BYTE)v6 )\n    {\n      v32 = \"-ef does not accept -l\";\n      goto LABEL_66;\n    }\n    if ( !__xstat(1, *(const char **)(qword_60D298 + v8 - 8), (struct stat *)&v33)\n      && !__xstat(1, *(const char **)(v4 + v8 + 8), &stat_buf)\n      && v33 == stat_buf.st_dev )\n    {\n      LOBYTE(v6) = v34 == stat_buf.st_ino;\n    }\n  }\n  else\n  {\n    if ( v13 != 110 )\n    {\nLABEL_19:\n      if ( v13 == 111 && *(_BYTE *)(v7 + 2) == 116 && !*(_BYTE *)(v7 + 3) )\n      {\n        v14 = v6;\n        dword_60D2A4 += 3;\n        LOBYTE(v14) = a1 | v6;\n        if ( !(a1 | (unsigned __int8)v6) )\n        {\n          LOBYTE(v15) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n          v16 = v15;\n          LOBYTE(v17) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n          v6 = v17;\n          if ( (_BYTE)v17 && (_BYTE)v16 )\n          {\n            if ( v33 < (signed __int64)stat_buf.st_dev )\n            {\n              v6 = v16;\n            }\n            else\n            {\n              v6 = (unsigned int)(v34 - LODWORD(stat_buf.st_ino)) >> 31;\n              if ( v33 > (signed __int64)stat_buf.st_dev )\n                v6 = v14;\n            }\n          }\n          return v6;\n        }\n        v32 = \"-ot does not accept -l\";\nLABEL_66:\n        dcgettext(0LL, v32, 5);\n        sub_401B10();\n      }\nLABEL_48:\n      sub_404F00(*(_QWORD *)(qword_60D298 + 8 * v5));\n      dcgettext(0LL, \"%s: unknown binary operator\", 5);\n      sub_401B10();\n    }\n    v22 = *(_BYTE *)(v7 + 2);\n    if ( v22 == 101 )\n      goto LABEL_51;\n    if ( v22 != 116 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    if ( a1 | (unsigned __int8)v6 )\n    {\n      v32 = \"-nt does not accept -l\";\n      goto LABEL_66;\n    }\n    LOBYTE(v20) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n    v6 = v20;\n    LOBYTE(v21) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n    if ( (_BYTE)v6 )\n    {\n      if ( (signed __int64)stat_buf.st_dev > v33 )\n      {\n        v6 = 0;\n      }\n      else\n      {\n        v6 = v21;\n        if ( (signed __int64)stat_buf.st_dev >= v33 )\n          LOBYTE(v6) = (int)v34 - LODWORD(stat_buf.st_ino) > 0;\n      }\n    }\n  }\n  return v6;\n}\n\n__int64 __fastcall sub_402210(unsigned __int8 a1)\n{\n  unsigned __int8 v1; // al\n  int v2; // ecx\n  int v3; // edx\n  __int64 v4; // r12\n  __int64 v5; // rbx\n  unsigned int v6; // ebp\n  __int64 v7; // rsi\n  __int64 v8; // r13\n  int v9; // ebx\n  char v11; // al\n  int v12; // ebx\n  char v13; // dl\n  unsigned int v14; // ebx\n  unsigned int v15; // eax\n  unsigned int v16; // er14\n  unsigned int v17; // eax\n  char v18; // dl\n  char v19; // cl\n  unsigned int v20; // eax\n  unsigned int v21; // eax\n  char v22; // cl\n  char *v23; // rdi\n  size_t v24; // rax\n  unsigned __int8 *v25; // r12\n  size_t v26; // rax\n  unsigned __int8 *v27; // rsi\n  int v28; // eax\n  __int64 v29; // rcx\n  bool v30; // zf\n  char v31; // cl\n  const char *v32; // rsi\n  __int64 v33; // [rsp+0h] [rbp-148h]\n  __int64 v34; // [rsp+8h] [rbp-140h]\n  struct stat stat_buf; // [rsp+90h] [rbp-B8h]\n\n  v1 = a1;\n  v2 = dword_60D2A4;\n  v3 = dword_60D2A4 + 1;\n  if ( a1 )\n  {\n    ++dword_60D2A4;\n    v3 = v2 + 2;\n  }\n  v4 = qword_60D298;\n  v5 = v3;\n  v6 = 0;\n  if ( dword_60D2A0 - 2 > v3 && !strcmp(*(const char **)(qword_60D298 + 8LL * v3 + 8), \"-l\") )\n  {\n    dword_60D2A4 = v3;\n    v6 = 1;\n  }\n  v7 = *(_QWORD *)(qword_60D298 + 8LL * v3);\n  v8 = 8LL * v3;\n  if ( *(_BYTE *)v7 != 45 )\n  {\n    if ( *(_BYTE *)v7 != 61 || (v11 = *(_BYTE *)(v7 + 1)) != 0 && (v11 != 61 || *(_BYTE *)(v7 + 2)) )\n    {\n      if ( strcmp((const char *)v7, (const char *)&unk_408F84) )\n        abort();\n      v9 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) != 0;\n      dword_60D2A4 = v9 + 3;\n    }\n    else\n    {\n      v12 = dword_60D2A4;\n      LOBYTE(v6) = strcmp(\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL) - 16),\n                     *(const char **)(qword_60D298 + 8 * (dword_60D2A4 + 2LL))) == 0;\n      dword_60D2A4 = v12 + 3;\n    }\n    return v6;\n  }\n  v13 = *(_BYTE *)(v7 + 1);\n  if ( v13 == 108 || v13 == 103 )\n  {\n    v19 = *(_BYTE *)(v7 + 2);\n    if ( v19 == 101 || v19 == 116 )\n    {\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_19;\nLABEL_52:\n      v23 = *(char **)(qword_60D298 + v8 - 8);\n      if ( v1 )\n      {\n        v24 = strlen(v23);\n        v25 = (unsigned __int8 *)sub_403290(v24, &v33);\n      }\n      else\n      {\n        v25 = sub_401BB0((unsigned __int8 *)v23);\n      }\n      if ( (_BYTE)v6 )\n      {\n        v26 = strlen(*(const char **)(qword_60D298 + v8 + 16));\n        v27 = (unsigned __int8 *)sub_403290(v26, &stat_buf);\n      }\n      else\n      {\n        v27 = sub_401BB0(*(unsigned __int8 **)(qword_60D298 + v8 + 8));\n      }\n      v28 = sub_404F20(v25, v27);\n      v29 = *(_QWORD *)(qword_60D298 + 8 * v5);\n      v30 = *(_BYTE *)(v29 + 2) == 101;\n      v31 = *(_BYTE *)(v29 + 1);\n      dword_60D2A4 += 3;\n      if ( v31 == 108 )\n      {\n        LOBYTE(v6) = v30 > v28;\n      }\n      else if ( v31 == 103 )\n      {\n        LOBYTE(v6) = -v30 < v28;\n      }\n      else\n      {\n        LOBYTE(v6) = (v28 != 0) == v30;\n      }\n      return v6;\n    }\n  }\n  if ( v13 == 101 )\n  {\n    v18 = *(_BYTE *)(v7 + 2);\n    if ( v18 == 113 )\n    {\nLABEL_51:\n      if ( *(_BYTE *)(v7 + 3) )\n        goto LABEL_48;\n      goto LABEL_52;\n    }\n    if ( v18 != 102 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    LOBYTE(v6) = a1 | v6;\n    if ( (_BYTE)v6 )\n    {\n      v32 = \"-ef does not accept -l\";\n      goto LABEL_66;\n    }\n    if ( !__xstat(1, *(const char **)(qword_60D298 + v8 - 8), (struct stat *)&v33)\n      && !__xstat(1, *(const char **)(v4 + v8 + 8), &stat_buf)\n      && v33 == stat_buf.st_dev )\n    {\n      LOBYTE(v6) = v34 == stat_buf.st_ino;\n    }\n  }\n  else\n  {\n    if ( v13 != 110 )\n    {\nLABEL_19:\n      if ( v13 == 111 && *(_BYTE *)(v7 + 2) == 116 && !*(_BYTE *)(v7 + 3) )\n      {\n        v14 = v6;\n        dword_60D2A4 += 3;\n        LOBYTE(v14) = a1 | v6;\n        if ( !(a1 | (unsigned __int8)v6) )\n        {\n          LOBYTE(v15) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n          v16 = v15;\n          LOBYTE(v17) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n          v6 = v17;\n          if ( (_BYTE)v17 && (_BYTE)v16 )\n          {\n            if ( v33 < (signed __int64)stat_buf.st_dev )\n            {\n              v6 = v16;\n            }\n            else\n            {\n              v6 = (unsigned int)(v34 - LODWORD(stat_buf.st_ino)) >> 31;\n              if ( v33 > (signed __int64)stat_buf.st_dev )\n                v6 = v14;\n            }\n          }\n          return v6;\n        }\n        v32 = \"-ot does not accept -l\";\nLABEL_66:\n        dcgettext(0LL, v32, 5);\n        sub_401B10();\n      }\nLABEL_48:\n      sub_404F00(*(_QWORD *)(qword_60D298 + 8 * v5));\n      dcgettext(0LL, \"%s: unknown binary operator\", 5);\n      sub_401B10();\n    }\n    v22 = *(_BYTE *)(v7 + 2);\n    if ( v22 == 101 )\n      goto LABEL_51;\n    if ( v22 != 116 || *(_BYTE *)(v7 + 3) )\n      goto LABEL_48;\n    dword_60D2A4 += 3;\n    if ( a1 | (unsigned __int8)v6 )\n    {\n      v32 = \"-nt does not accept -l\";\n      goto LABEL_66;\n    }\n    LOBYTE(v20) = sub_401AD0(*(char **)(qword_60D298 + v8 - 8), &v33);\n    v6 = v20;\n    LOBYTE(v21) = sub_401AD0(*(char **)(v4 + v8 + 8), &stat_buf);\n    if ( (_BYTE)v6 )\n    {\n      if ( (signed __int64)stat_buf.st_dev > v33 )\n      {\n        v6 = 0;\n      }\n      else\n      {\n        v6 = v21;\n        if ( (signed __int64)stat_buf.st_dev >= v33 )\n          LOBYTE(v6) = (int)v34 - LODWORD(stat_buf.st_ino) > 0;\n      }\n    }\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x4016d0L", 
            "funcEndAddr": "0x4016d5L", 
            "funcName": "sub_402210"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4026C0(__int64 a1)\n{\n  bool result; // al\n\n  result = 0;\n  if ( (unsigned __int8)(*(_BYTE *)(a1 + 1) - 71) <= 0x33u )\n    result = ((1LL << (*(_BYTE *)(a1 + 1) - 71)) & 0xB7B93FC0011A1LL) != 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x4026c0L", 
            "funcEndAddr": "0x4026e7L", 
            "funcName": "sub_4026C0"
        }, 
        {
            "decompiledFuncCode": "char sub_4026F0()\n{\n  _BYTE *v0; // r8\n  __int64 v1; // rdi\n  char result; // al\n  _BYTE *v3; // rax\n\n  v0 = *(_BYTE **)(qword_60D298 + 8LL * dword_60D2A4);\n  if ( !strcmp(*(const char **)(qword_60D298 + 8LL * dword_60D2A4), \"!\") )\n  {\n    v3 = *(_BYTE **)(qword_60D298 + 8LL * dword_60D2A4 + 8);\n    dword_60D2A4 += 2;\n    result = *v3 == 0;\n  }\n  else\n  {\n    if ( *v0 != 45 || !v0[1] || v0[2] )\n      sub_401C90();\n    v1 = *(_QWORD *)(qword_60D298 + 8LL * dword_60D2A4);\n    if ( !sub_4026C0((__int64)v0) )\n    {\n      sub_404F00(v1);\n      dcgettext(0LL, \"%s: unary operator expected\", 5);\n      sub_401B10();\n    }\n    result = sub_401D00();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4026f0L", 
            "funcEndAddr": "0x402790L", 
            "funcName": "sub_4026F0"
        }, 
        {
            "decompiledFuncCode": "char __fastcall sub_402790(int a1)\n{\n  bool v1; // cf\n  bool v2; // zf\n  const char *v3; // rdi\n  __int64 v4; // rcx\n  int v5; // eax\n  const char *v6; // rsi\n  __int64 v7; // rax\n\n  if ( a1 == 2 )\n  {\n    LOBYTE(v7) = sub_4026F0();\n    return v7;\n  }\n  if ( a1 <= 2 )\n  {\n    if ( a1 == 1 )\n    {\n      v7 = dword_60D2A4++;\n      LOBYTE(v7) = **(_BYTE **)(qword_60D298 + 8 * v7) != 0;\n      return v7;\n    }\n  }\n  else\n  {\n    if ( a1 == 3 )\n    {\n      LOBYTE(v7) = ((__int64 (*)(void))sub_402CD0)();\n      return v7;\n    }\n    v1 = (unsigned int)a1 < 4;\n    v2 = a1 == 4;\n    if ( a1 == 4 )\n    {\n      v3 = \"!\";\n      v4 = 2LL;\n      v5 = dword_60D2A4;\n      v6 = *(const char **)(qword_60D298 + 8LL * dword_60D2A4);\n      do\n      {\n        if ( !v4 )\n          break;\n        v1 = *v6 < (unsigned int)*v3;\n        v2 = *v6++ == *v3++;\n        --v4;\n      }\n      while ( v2 );\n      if ( (!v1 && !v2) == v1 )\n      {\n        ++dword_60D2A4;\n        if ( v5 + 1 < dword_60D2A0 )\n        {\n          LODWORD(v7) = (unsigned __int64)sub_402CD0(v3, v6) ^ 1;\n          return v7;\n        }\nLABEL_22:\n        sub_401C90();\n      }\n      if ( !strcmp(*(const char **)(qword_60D298 + 8LL * dword_60D2A4), \"(\")\n        && !strcmp(*(const char **)(qword_60D298 + 8LL * dword_60D2A4 + 24), \")\") )\n      {\n        ++dword_60D2A4;\n        LOBYTE(v7) = sub_4026F0();\n        ++dword_60D2A4;\n        return v7;\n      }\n      goto LABEL_15;\n    }\n  }\n  v5 = dword_60D2A4;\nLABEL_15:\n  if ( v5 >= dword_60D2A0 )\n    goto LABEL_22;\n  LOBYTE(v7) = sub_4028D0();\n  return v7;\n}\n", 
            "funcStartAddr": "0x402790L", 
            "funcEndAddr": "0x4028cbL", 
            "funcName": "sub_402790"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4028D0()\n{\n  int v0; // ebx\n  int v1; // er14\n  __int64 v2; // r10\n  __int64 v3; // rbp\n  char *v4; // r15\n  char v5; // r13\n  int v6; // ebx\n  char v7; // al\n  char i; // r12\n  int v9; // ecx\n  int v10; // ecx\n  char v11; // si\n  const char **v12; // r10\n  int v13; // eax\n  char v14; // al\n  _BYTE *v15; // rsi\n  int v16; // ebx\n  bool v17; // al\n  const char *v19; // rsi\n  __int64 v20; // [rsp+0h] [rbp-48h]\n  char v21; // [rsp+Eh] [rbp-3Ah]\n  unsigned __int8 v22; // [rsp+Fh] [rbp-39h]\n\n  v0 = dword_60D2A4;\n  v1 = dword_60D2A0;\n  v22 = 0;\nLABEL_2:\n  v21 = 1;\n  if ( v0 >= v1 )\nLABEL_29:\n    sub_401C90();\n  while ( 1 )\n  {\n    v2 = qword_60D298;\n    v3 = v0;\n    v4 = *(char **)(qword_60D298 + 8LL * v0);\n    v5 = *v4;\n    if ( *v4 != 33 )\n    {\n      i = 0;\nLABEL_14:\n      if ( v5 != 40 || v4[1] )\n        goto LABEL_32;\n      dword_60D2A4 = v0 + 1;\n      if ( v0 + 1 >= v1 )\n        goto LABEL_29;\n      if ( v0 + 2 >= v1 )\n      {\n        v13 = 1;\n      }\n      else\n      {\n        v12 = (const char **)(qword_60D298 + 8LL * (v0 + 2));\n        v13 = 1;\n        while ( strcmp(*v12, \")\") )\n        {\n          if ( v13 == 4 )\n          {\n            v13 = v1 - (v0 + 1);\n            break;\n          }\n          ++v13;\n          ++v12;\n          if ( v13 == v1 - 1 - v0 )\n            break;\n        }\n      }\n      v14 = sub_402790(v13);\n      v15 = *(_BYTE **)(qword_60D298 + 8LL * dword_60D2A4);\n      if ( !v15 )\n      {\n        sub_404F00(\")\");\n        v19 = \"%s expected\";\n        goto LABEL_58;\n      }\n      if ( *v15 != 41 || v15[1] )\n      {\n        sub_404EE0(1LL);\n        sub_404EE0(0LL);\n        dcgettext(0LL, \"%s expected, found %s\", 5);\n        sub_401B10();\n      }\n      v16 = dword_60D2A4 + 1;\n      v1 = dword_60D2A0;\n      ++dword_60D2A4;\nLABEL_26:\n      v21 &= i ^ v14;\n      if ( v1 <= v16 )\n        break;\n      goto LABEL_27;\n    }\n    if ( v4[1] )\n    {\n      i = 0;\n      goto LABEL_32;\n    }\n    v6 = v0 + 1;\n    dword_60D2A4 = v6;\n    if ( v6 >= v1 )\n      goto LABEL_29;\n    v3 = v6;\n    v7 = 0;\n    for ( i = 1; ; i ^= 1u )\n    {\n      v4 = *(char **)(qword_60D298 + 8 * v3);\n      v10 = v3;\n      v0 = v3;\n      v11 = *v4;\n      if ( *v4 != 33 )\n      {\n        if ( v7 )\n          dword_60D2A4 = v3;\n        v5 = v11;\n        goto LABEL_14;\n      }\n      if ( v4[1] )\n        break;\n      ++v3;\n      v9 = v10 + 1;\n      if ( v1 <= (int)v3 )\n      {\n        dword_60D2A4 = v9;\n        sub_401C90();\n      }\n      v7 = 1;\n    }\n    if ( v7 )\n      dword_60D2A4 = v3;\nLABEL_32:\n    if ( v1 - v0 <= 3 )\n    {\n      if ( v1 - v0 == 3 )\n        goto LABEL_35;\n      if ( v5 == 45 )\n        goto LABEL_42;\n      goto LABEL_37;\n    }\n    if ( !memcmp(v4, \"-l\", 3uLL) )\n    {\n      v20 = qword_60D298;\n      v17 = sub_401980(*(char **)(qword_60D298 + 8 * v3 + 16));\n      v2 = v20;\n      if ( v17 )\n      {\n        v14 = sub_402210(1u);\n        v16 = dword_60D2A4;\n        v1 = dword_60D2A0;\n        goto LABEL_26;\n      }\n    }\nLABEL_35:\n    if ( sub_401980(*(char **)(v2 + 8 * v3 + 8)) )\n    {\n      v14 = sub_402210(0);\n      v16 = dword_60D2A4;\n      v1 = dword_60D2A0;\n      goto LABEL_26;\n    }\n    if ( v5 != 45 )\n      goto LABEL_37;\nLABEL_42:\n    if ( v4[1] && !v4[2] )\n    {\n      if ( sub_4026C0((__int64)v4) )\n      {\n        v14 = sub_401D00();\n        v16 = dword_60D2A4;\n        v1 = dword_60D2A0;\n        goto LABEL_26;\n      }\n      sub_404F00(v4);\n      v19 = \"%s: unary operator expected\";\nLABEL_58:\n      dcgettext(0LL, v19, 5);\n      sub_401B10();\n    }\nLABEL_37:\n    v16 = v0 + 1;\n    dword_60D2A4 = v16;\n    v21 &= i ^ (v5 != 0);\n    if ( v1 <= v16 )\n      break;\nLABEL_27:\n    if ( strcmp(*(const char **)(qword_60D298 + 8LL * v16), \"-a\") )\n    {\n      v22 |= v21;\n      if ( strcmp(*(const char **)(qword_60D298 + 8LL * v16), \"-o\") )\n        return v22;\n      v0 = v16 + 1;\n      dword_60D2A4 = v0;\n      goto LABEL_2;\n    }\n    v0 = v16 + 1;\n    dword_60D2A4 = v0;\n    if ( v0 >= v1 )\n      goto LABEL_29;\n  }\n  v22 |= v21;\n  return v22;\n}\n", 
            "funcStartAddr": "0x4028d0L", 
            "funcEndAddr": "0x402cc7L", 
            "funcName": "sub_4028D0"
        }, 
        {
            "decompiledFuncCode": "char sub_402CD0()\n{\n  __int64 v0; // rbp\n  int v1; // ebx\n  __int64 v2; // rax\n  const char *v3; // r13\n  __int64 v4; // r12\n  char result; // al\n\n  v0 = qword_60D298;\n  v1 = dword_60D2A4;\n  v2 = dword_60D2A4 + 1LL;\n  v3 = *(const char **)(qword_60D298 + 8 * v2);\n  v4 = 8 * v2;\n  if ( sub_401980(*(char **)(qword_60D298 + 8 * v2)) )\n    return sub_402210(0);\n  if ( !strcmp(*(const char **)(v0 + v4 - 8), \"!\") )\n  {\n    dword_60D2A4 = v1 + 1;\n    if ( v1 + 1 < dword_60D2A0 )\n      return sub_4026F0() ^ 1;\nLABEL_16:\n    sub_401C90();\n  }\n  if ( strcmp(*(const char **)(v0 + v4 - 8), \"(\") || strcmp(*(const char **)(v0 + v4 + 8), \")\") )\n  {\n    if ( strcmp(v3, \"-a\") && strcmp(v3, \"-o\") )\n    {\n      sub_404F00(v3);\n      dcgettext(0LL, \"%s: binary operator expected\", 5);\n      sub_401B10();\n    }\n    if ( v1 < dword_60D2A0 )\n      return sub_4028D0();\n    goto LABEL_16;\n  }\n  result = *v3 != 0;\n  dword_60D2A4 = v1 + 3;\n  return result;\n}\n", 
            "funcStartAddr": "0x402cd0L", 
            "funcEndAddr": "0x402e2fL", 
            "funcName": "sub_402CD0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_402E30(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  FILE *v3; // rbp\n  char *v4; // rax\n  FILE *v5; // rbp\n  char *v6; // rax\n  FILE *v7; // rbp\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  FILE *v19; // rbp\n  char *v20; // rax\n  FILE *v21; // rbp\n  char *v22; // rax\n  FILE *v23; // rbp\n  char *v24; // rax\n  FILE *v25; // rbp\n  char *v26; // rax\n  FILE *v27; // rbp\n  char *v28; // rax\n  FILE *v29; // rbp\n  char *v30; // rax\n  FILE *v31; // rbp\n  char *v32; // rax\n  FILE *v33; // rbp\n  char *v34; // rax\n  char *v35; // rbp\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n\n  if ( status )\n  {\n    v1 = qword_60D2B8;\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n  }\n  else\n  {\n    v3 = stdout;\n    v4 = dcgettext(0LL, \"Usage: test EXPRESSION\\n  or:  test\\n  or:  [ EXPRESSION ]\\n  or:  [ ]\\n  or:  [ OPTION\\n\", 5);\n    fputs_unlocked(v4, v3);\n    v5 = stdout;\n    v6 = dcgettext(0LL, \"Exit with the status determined by EXPRESSION.\\n\\n\", 5);\n    fputs_unlocked(v6, v5);\n    v7 = stdout;\n    v8 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n    fputs_unlocked(v8, v7);\n    v9 = stdout;\n    v10 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n    fputs_unlocked(v10, v9);\n    v11 = stdout;\n    v12 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"An omitted EXPRESSION defaults to false.  Otherwise,\\n\"\n            \"EXPRESSION is true or false and sets exit status.  It is one of:\\n\",\n            5);\n    fputs_unlocked(v12, v11);\n    v13 = stdout;\n    v14 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"  ( EXPRESSION )               EXPRESSION is true\\n\"\n            \"  ! EXPRESSION                 EXPRESSION is false\\n\"\n            \"  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 are true\\n\"\n            \"  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 is true\\n\",\n            5);\n    fputs_unlocked(v14, v13);\n    v15 = stdout;\n    v16 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"  -n STRING            the length of STRING is nonzero\\n\"\n            \"  STRING               equivalent to -n STRING\\n\"\n            \"  -z STRING            the length of STRING is zero\\n\"\n            \"  STRING1 = STRING2    the strings are equal\\n\"\n            \"  STRING1 != STRING2   the strings are not equal\\n\",\n            5);\n    fputs_unlocked(v16, v15);\n    v17 = stdout;\n    v18 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2\\n\"\n            \"  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER2\\n\"\n            \"  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2\\n\"\n            \"  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER2\\n\"\n            \"  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2\\n\"\n            \"  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2\\n\",\n            5);\n    fputs_unlocked(v18, v17);\n    v19 = stdout;\n    v20 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inode numbers\\n\"\n            \"  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2\\n\"\n            \"  FILE1 -ot FILE2   FILE1 is older than FILE2\\n\",\n            5);\n    fputs_unlocked(v20, v19);\n    v21 = stdout;\n    v22 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"  -b FILE     FILE exists and is block special\\n\"\n            \"  -c FILE     FILE exists and is character special\\n\"\n            \"  -d FILE     FILE exists and is a directory\\n\"\n            \"  -e FILE     FILE exists\\n\",\n            5);\n    fputs_unlocked(v22, v21);\n    v23 = stdout;\n    v24 = dcgettext(\n            0LL,\n            \"  -f FILE     FILE exists and is a regular file\\n\"\n            \"  -g FILE     FILE exists and is set-group-ID\\n\"\n            \"  -G FILE     FILE exists and is owned by the effective group ID\\n\"\n            \"  -h FILE     FILE exists and is a symbolic link (same as -L)\\n\"\n            \"  -k FILE     FILE exists and has its sticky bit set\\n\",\n            5);\n    fputs_unlocked(v24, v23);\n    v25 = stdout;\n    v26 = dcgettext(\n            0LL,\n            \"  -L FILE     FILE exists and is a symbolic link (same as -h)\\n\"\n            \"  -O FILE     FILE exists and is owned by the effective user ID\\n\"\n            \"  -p FILE     FILE exists and is a named pipe\\n\"\n            \"  -r FILE     FILE exists and read permission is granted\\n\"\n            \"  -s FILE     FILE exists and has a size greater than zero\\n\",\n            5);\n    fputs_unlocked(v26, v25);\n    v27 = stdout;\n    v28 = dcgettext(\n            0LL,\n            \"  -S FILE     FILE exists and is a socket\\n\"\n            \"  -t FD       file descriptor FD is opened on a terminal\\n\"\n            \"  -u FILE     FILE exists and its set-user-ID bit is set\\n\"\n            \"  -w FILE     FILE exists and write permission is granted\\n\"\n            \"  -x FILE     FILE exists and execute (or search) permission is granted\\n\",\n            5);\n    fputs_unlocked(v28, v27);\n    v29 = stdout;\n    v30 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"Except for -h and -L, all FILE-related tests dereference symbolic links.\\n\"\n            \"Beware that parentheses need to be escaped (e.g., by backslashes) for shells.\\n\"\n            \"INTEGER may also be -l STRING, which evaluates to the length of STRING.\\n\",\n            5);\n    fputs_unlocked(v30, v29);\n    v31 = stdout;\n    v32 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"NOTE: Binary -a and -o are inherently ambiguous.  Use 'test EXPR1 && test\\n\"\n            \"EXPR2' or 'test EXPR1 || test EXPR2' instead.\\n\",\n            5);\n    fputs_unlocked(v32, v31);\n    v33 = stdout;\n    v34 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"NOTE: [ honors the --help and --version options, but test does not.\\n\"\n            \"test treats each of those as it treats any other nonempty STRING.\\n\",\n            5);\n    fputs_unlocked(v34, v33);\n    v35 = dcgettext(0LL, \"test and/or [\", 5);\n    v36 = dcgettext(\n            0LL,\n            \"\\n\"\n            \"NOTE: your shell may have its own version of %s, which usually supersedes\\n\"\n            \"the version described here.  Please refer to your shell's documentation\\n\"\n            \"for details about the options it supports.\\n\",\n            5);\n    __printf_chk(1LL, v36, v35);\n    v37 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v37, &unk_4090C6);\n    v38 = setlocale(5, 0LL);\n    if ( v38 )\n    {\n      if ( strncmp(v38, \"en_\", 3uLL) )\n      {\n        v41 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n        __printf_chk(1LL, v41, 4231341LL);\n      }\n    }\n    v39 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n    __printf_chk(1LL, v39, \"https://www.gnu.org/software/coreutils/\");\n    v40 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n    __printf_chk(1LL, v40, \"test invocation\");\n  }\n  exit(status);\n}\n", 
            "funcStartAddr": "0x402e30L", 
            "funcEndAddr": "0x4031c6L", 
            "funcName": "sub_402E30"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4031F0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_405D20(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60D2A8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60D2B0 )\n      {\n        v5 = sub_404D50();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_405D20(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x4031f0L", 
            "funcEndAddr": "0x40328eL", 
            "funcName": "sub_4031F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403290(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  while ( 1 )\n  {\n    *(_BYTE *)--v2 = a1 % 0xA + 48;\n    if ( a1 <= 9 )\n      break;\n    a1 /= 0xAuLL;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x403290L", 
            "funcEndAddr": "0x4032d8L", 
            "funcName": "sub_403290"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4032E0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60D2B8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4032e0L", 
            "funcEndAddr": "0x403379L", 
            "funcName": "sub_4032E0"
        }, 
        {
            "decompiledFuncCode": "const char *__fastcall sub_403380(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_405DE0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40A111;\n      if ( !v5 )\n        v2 = (char *)&unk_40A106;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40A10D;\n    if ( !v5 )\n      v2 = (char *)&unk_40A10A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x403380L", 
            "funcEndAddr": "0x403472L", 
            "funcName": "sub_403380"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403480(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403480((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403480((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403480((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403480((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_405C40((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403480((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403480((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403380(\"`\", v11);\n        v47 = sub_403380(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_403480(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403480((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403480((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403480((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403480((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_405C40((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403480((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403480((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403380(\"`\", v11);\n        v47 = sub_403380(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x4016d5L", 
            "funcEndAddr": "0x4016daL", 
            "funcName": "sub_403480"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403480(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403480((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403480((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403480((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403480((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_405C40((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403480((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403480((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403380(\"`\", v11);\n        v47 = sub_403380(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_403480(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, const char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  const char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  const char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403480((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403480((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403480((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403480((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403480((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403480((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_405C40((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403480((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403480((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403380(\"`\", v11);\n        v47 = sub_403380(\"'\", v11);\n        v14 = v55;\n        a9 = (char *)v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x4016d5L", 
            "funcEndAddr": "0x4016daL", 
            "funcName": "sub_403480"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4046B0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60D238;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405A40();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60D238 == &xmmword_60D240 )\n    {\n      v7 = (__int128 *)sub_405850(0LL, v9);\n      off_60D238 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      off_60D238 = (__int128 *)sub_405850(off_60D238, v9);\n      v7 = off_60D238;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403480(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4057F0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403480(v14, v13, v17, v4, v15, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4046B0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60D238;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405A40();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60D238 == &xmmword_60D240 )\n    {\n      v7 = (__int128 *)sub_405850(0LL, v9);\n      off_60D238 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      off_60D238 = (__int128 *)sub_405850(off_60D238, v9);\n      v7 = off_60D238;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403480(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4057F0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403480(v14, v13, v17, v4, v15, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x4016daL", 
            "funcEndAddr": "0x4016dfL", 
            "funcName": "sub_4046B0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4046B0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60D238;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405A40();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60D238 == &xmmword_60D240 )\n    {\n      v7 = (__int128 *)sub_405850(0LL, v9);\n      off_60D238 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      off_60D238 = (__int128 *)sub_405850(off_60D238, v9);\n      v7 = off_60D238;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403480(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4057F0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403480(v14, v13, v17, v4, v15, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_4046B0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60D238;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60D250 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405A40();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60D238 == &xmmword_60D240 )\n    {\n      v7 = (__int128 *)sub_405850(0LL, v9);\n      off_60D238 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60D240);\n    }\n    else\n    {\n      off_60D238 = (__int128 *)sub_405850(off_60D238, v9);\n      v7 = off_60D238;\n    }\n    memset(&v7[dword_60D250], 0, 16LL * (a1 + 1 - dword_60D250));\n    dword_60D250 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403480(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60D2C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4057F0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403480(v14, v13, v17, v4, v15, v21, v5 + 8, *(const char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x4016daL", 
            "funcEndAddr": "0x4016dfL", 
            "funcName": "sub_4046B0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404BD0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404BD0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x4016dfL", 
            "funcEndAddr": "0x4016e4L", 
            "funcName": "sub_404BD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404BD0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404BD0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x4016dfL", 
            "funcEndAddr": "0x4016e4L", 
            "funcName": "sub_404BD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404C40(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4046B0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_404C40(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4046B0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x4016e4L", 
            "funcEndAddr": "0x4016e9L", 
            "funcName": "sub_404C40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404C40(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4046B0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_404C40(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_4046B0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x4016e4L", 
            "funcEndAddr": "0x4016e9L", 
            "funcName": "sub_404C40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404CD0(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_60D3F0;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60D3C0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60D3D0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_60D3E0);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_4046B0(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x404cd0L", 
            "funcEndAddr": "0x404d40L", 
            "funcName": "sub_404CD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404D50(char *a1)\n{\n  return sub_404CD0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x404d50L", 
            "funcEndAddr": "0x404d61L", 
            "funcName": "sub_404D50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404D80(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404D80(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x4016e9L", 
            "funcEndAddr": "0x4016eeL", 
            "funcName": "sub_404D80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404D80(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_404D80(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4046B0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x4016e9L", 
            "funcEndAddr": "0x4016eeL", 
            "funcName": "sub_404D80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404DF0(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_60D3C0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60D3D0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60D3E0);\n  v9 = qword_60D3F0;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_4046B0(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x404df0L", 
            "funcEndAddr": "0x404e5cL", 
            "funcName": "sub_404DF0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404EE0(int a1, char *a2)\n{\n  return sub_4046B0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60D200);\n}\n", 
            "funcStartAddr": "0x404ee0L", 
            "funcEndAddr": "0x404ef1L", 
            "funcName": "sub_404EE0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_404F00(char *a1)\n{\n  return sub_4046B0(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60D200);\n}\n", 
            "funcStartAddr": "0x404f00L", 
            "funcEndAddr": "0x404f16L", 
            "funcName": "sub_404F00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_404F20(_BYTE *a1, unsigned __int8 *a2)\n{\n  int v2; // ecx\n  int v3; // edx\n  int v4; // eax\n  unsigned int v5; // er8\n  __int64 result; // rax\n  unsigned __int64 v7; // r8\n  int v8; // ecx\n  unsigned __int64 v9; // rcx\n  int v10; // edx\n  unsigned __int8 v11; // al\n  int v12; // er8\n  unsigned int v13; // er9\n  int v14; // eax\n  unsigned int v15; // edx\n  unsigned __int8 v16; // dl\n  int v17; // ecx\n  int v18; // edx\n  unsigned __int64 v19; // rcx\n  int v20; // edx\n\n  v2 = (unsigned __int8)*a1;\n  v3 = *a2;\n  if ( (_BYTE)v2 == 45 )\n  {\n    do\n      v11 = *++a1;\n    while ( *a1 == 48 );\n    v12 = v11;\n    v13 = v11 - 48;\n    if ( (_BYTE)v3 != 45 )\n    {\n      if ( v13 <= 9 )\n        return 0xFFFFFFFFLL;\n      while ( (_BYTE)v3 == 48 )\n        v3 = *++a2;\n      return (unsigned int)-((unsigned int)(v3 - 48) <= 9);\n    }\n    do\n      v16 = *++a2;\n    while ( *a2 == 48 );\n    if ( v11 == v16 )\n    {\n      while ( v13 <= 9 )\n      {\n        ++a1;\n        ++a2;\n        v12 = (unsigned __int8)*a1;\n        v16 = *a2;\n        v13 = v12 - 48;\n        if ( (_BYTE)v12 != *a2 )\n          goto LABEL_31;\n      }\n      v17 = v16;\n      result = (unsigned int)v16 - v12;\n    }\n    else\n    {\nLABEL_31:\n      v17 = v16;\n      result = (unsigned int)v16 - v12;\n      if ( v13 <= 9 )\n      {\n        v7 = 0LL;\n        do\n          v18 = (unsigned __int8)a1[++v7];\n        while ( (unsigned int)(v18 - 48) <= 9 );\n        if ( (unsigned int)(v17 - 48) > 9 )\n          return (unsigned int)-(v7 != 0);\nLABEL_35:\n        v19 = 0LL;\n        do\n          v20 = a2[++v19];\n        while ( (unsigned int)(v20 - 48) <= 9 );\n        if ( v7 != v19 )\n          return v7 < v19 ? 1 : -1;\n        goto LABEL_42;\n      }\n    }\n    v7 = 0LL;\n    if ( (unsigned int)(v17 - 48) > 9 )\n      return 0LL;\n    goto LABEL_35;\n  }\n  if ( (_BYTE)v3 != 45 )\n  {\n    while ( (_BYTE)v2 == 48 )\n      LOBYTE(v2) = *++a1;\n    while ( (_BYTE)v3 == 48 )\n      v3 = *++a2;\n    v4 = (unsigned __int8)v2;\n    v5 = (unsigned __int8)v2 - 48;\n    if ( (_BYTE)v3 == (_BYTE)v2 )\n    {\n      while ( v5 <= 9 )\n      {\n        ++a1;\n        ++a2;\n        v4 = (unsigned __int8)*a1;\n        v3 = *a2;\n        v5 = v4 - 48;\n        if ( (_BYTE)v4 != (_BYTE)v3 )\n          goto LABEL_8;\n      }\n      result = (unsigned int)(v4 - v3);\n    }\n    else\n    {\nLABEL_8:\n      result = (unsigned int)(v4 - v3);\n      if ( v5 <= 9 )\n      {\n        v7 = 0LL;\n        do\n          v8 = (unsigned __int8)a1[++v7];\n        while ( (unsigned int)(v8 - 48) <= 9 );\n        if ( (unsigned int)(v3 - 48) > 9 )\n          return v7 != 0;\nLABEL_12:\n        v9 = 0LL;\n        do\n          v10 = a2[++v9];\n        while ( (unsigned int)(v10 - 48) <= 9 );\n        if ( v7 != v9 )\n          return v7 < v9 ? -1 : 1;\nLABEL_42:\n        if ( !v7 )\n          result = 0LL;\n        return result;\n      }\n    }\n    v7 = 0LL;\n    if ( (unsigned int)(v3 - 48) > 9 )\n      return 0LL;\n    goto LABEL_12;\n  }\n  do\n    v14 = *++a2;\n  while ( (_BYTE)v14 == 48 );\n  v15 = v14 - 48;\n  result = 1LL;\n  if ( v15 > 9 )\n  {\n    while ( (_BYTE)v2 == 48 )\n      v2 = (unsigned __int8)*++a1;\n    result = (unsigned int)(v2 - 48) <= 9;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x404f20L", 
            "funcEndAddr": "0x405171L", 
            "funcName": "sub_404F20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n", 
            "funcStartAddr": "0x4051e0L", 
            "funcEndAddr": "0x405231L", 
            "funcName": "sub_405240"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n", 
            "funcStartAddr": "0x4051e0L", 
            "funcEndAddr": "0x405231L", 
            "funcName": "sub_405240"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n\nvoid __fastcall sub_405240(int status, int errnum, __int64 a3, __int64 a4)\n{\n  __int64 v4; // rax\n  void *v5; // rbx\n  char *v6; // rbx\n  int *v7; // rax\n\n  v4 = sub_405BB0(a3, a4);\n  if ( !v4 )\n  {\n    v6 = dcgettext(0LL, \"unable to display error message\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6);\n    abort();\n  }\n  v5 = (void *)v4;\n  error(status, errnum, \"%s\", v4);\n  free(v5);\n}\n", 
            "funcStartAddr": "0x4051e0L", 
            "funcEndAddr": "0x405231L", 
            "funcName": "sub_405240"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405250(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_405250(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x4016eeL", 
            "funcEndAddr": "0x4016f3L", 
            "funcName": "sub_405250"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405250(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_405250(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x4016eeL", 
            "funcEndAddr": "0x4016f3L", 
            "funcName": "sub_405250"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405650(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_405250(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_405250(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x405650L", 
            "funcEndAddr": "0x4056b0L", 
            "funcName": "sub_405650"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4056B0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_405250(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_405250(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x4056b0L", 
            "funcEndAddr": "0x40576cL", 
            "funcName": "sub_4056B0"
        }, 
        {
            "decompiledFuncCode": "int sub_405770()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_4090C6);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x405770L", 
            "funcEndAddr": "0x4057e4L", 
            "funcName": "sub_405770"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4057F0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_405A40();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4057f0L", 
            "funcEndAddr": "0x40580aL", 
            "funcName": "sub_4057F0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_405850(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_405A40();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405850L", 
            "funcEndAddr": "0x405886L", 
            "funcName": "sub_405850"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4059F0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4057F0(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x4059f0L", 
            "funcEndAddr": "0x405a18L", 
            "funcName": "sub_4059F0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_405A40()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x405a40L", 
            "funcEndAddr": "0x405a71L", 
            "funcName": "sub_405A40"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405A80(__int64 a1, __m128i *a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r13\n  __int64 v4; // rbp\n  unsigned __int64 v5; // rbx\n  const char **v6; // rdx\n  size_t v7; // rax\n  bool v8; // cf\n  unsigned __int32 v9; // eax\n  _BYTE *v10; // rbp\n  _BYTE *v11; // rbx\n  const char **v12; // rdx\n  const char *v13; // r15\n  size_t v14; // r14\n  unsigned int v15; // eax\n  __m128i v17; // [rsp+8h] [rbp-50h]\n\n  v17 = _mm_loadu_si128(a2);\n  v2 = a2[1].m128i_i64[0];\n  if ( a1 )\n  {\n    v3 = a1;\n    v4 = a1;\n    v5 = 0LL;\n    do\n    {\n      v9 = v17.m128i_i32[0];\n      if ( v17.m128i_i32[0] <= 0x2Fu )\n      {\n        v17.m128i_i32[0] += 8;\n        v6 = (const char **)(v2 + v9);\n      }\n      else\n      {\n        v6 = (const char **)v17.m128i_i64[1];\n        v17.m128i_i64[1] += 8LL;\n      }\n      v7 = strlen(*v6);\n      v8 = __CFADD__(v7, v5);\n      v5 += v7;\n      if ( v8 )\n        v5 = -1LL;\n      --v4;\n    }\n    while ( v4 );\n    if ( v5 > 0x7FFFFFFF )\n    {\n      v10 = 0LL;\n      *__errno_location() = 75;\n      return v10;\n    }\n    v10 = sub_4057F0(v5 + 1);\n    v11 = v10;\n    do\n    {\n      v15 = a2->m128i_i64[0];\n      if ( LODWORD(a2->m128i_i64[0]) <= 0x2F )\n      {\n        v12 = (const char **)(a2[1].m128i_i64[0] + v15);\n        LODWORD(a2->m128i_i64[0]) = v15 + 8;\n      }\n      else\n      {\n        v12 = (const char **)a2->m128i_i64[1];\n        a2->m128i_i64[1] = (__int64)(v12 + 1);\n      }\n      v13 = *v12;\n      v14 = strlen(*v12);\n      memcpy(v11, v13, v14);\n      v11 += v14;\n      --v3;\n    }\n    while ( v3 );\n  }\n  else\n  {\n    v11 = sub_4057F0(1uLL);\n    v10 = v11;\n  }\n  *v11 = 0;\n  return v10;\n}\n", 
            "funcStartAddr": "0x405a80L", 
            "funcEndAddr": "0x405ba7L", 
            "funcName": "sub_405A80"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405BB0(_BYTE *a1, __m128i *a2)\n{\n  __int64 v2; // rax\n  char v3; // cl\n  __int64 v5; // [rsp+8h] [rbp-10h]\n\n  if ( !*a1 )\n  {\n    v2 = 0LL;\n    return sub_405A80(v2, a2);\n  }\n  if ( *a1 == 37 && a1[1] == 115 )\n  {\n    v2 = 0LL;\n    do\n    {\n      v3 = a1[2 * ++v2];\n      if ( !v3 )\n        return sub_405A80(v2, a2);\n    }\n    while ( v3 == 37 && a1[2 * v2 + 1] == 115 );\n  }\n  if ( (int)sub_405CC0(&v5, a1, a2) >= 0 )\n    return (_BYTE *)v5;\n  if ( *__errno_location() == 12 )\n    sub_405A40();\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x405bb0L", 
            "funcEndAddr": "0x405c3aL", 
            "funcName": "sub_405BB0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_405C40(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"Written by %s, %s, and %s.\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_405D80(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x405c40L", 
            "funcEndAddr": "0x405cbaL", 
            "funcName": "sub_405C40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405CC0(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rax\n  unsigned int v4; // edx\n  __int64 result; // rax\n  unsigned __int64 v6; // [rsp+8h] [rbp-10h]\n\n  v3 = (void *)sub_406470(0LL, &v6, a2, a3);\n  if ( !v3 )\n    return 0xFFFFFFFFLL;\n  v4 = v6;\n  if ( v6 > 0x7FFFFFFF )\n  {\n    free(v3);\n    *__errno_location() = 75;\n    result = 0xFFFFFFFFLL;\n  }\n  else\n  {\n    *a1 = v3;\n    result = v4;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405cc0L", 
            "funcEndAddr": "0x405d19L", 
            "funcName": "sub_405CC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405D20(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_406350(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x405d20L", 
            "funcEndAddr": "0x405d7dL", 
            "funcName": "sub_405D20"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_405D80(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x405d80L", 
            "funcEndAddr": "0x405ddeL", 
            "funcName": "sub_405D80"
        }, 
        {
            "decompiledFuncCode": "const char *sub_405DE0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"Written by %s, %s, and %s.\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"Written by %s, %s, and %s.\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_406350(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_406350(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"Written by %s, %s, and %s.\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x405de0L", 
            "funcEndAddr": "0x406342L", 
            "funcName": "sub_405DE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_406350(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_4063D0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406350L", 
            "funcEndAddr": "0x4063cbL", 
            "funcName": "sub_406350"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4063D0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_406410(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x4063d0L", 
            "funcEndAddr": "0x406410L", 
            "funcName": "sub_4063D0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_406410(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x406410L", 
            "funcEndAddr": "0x406467L", 
            "funcName": "sub_406410"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_4081B0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_407F90(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_406470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_4081B0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_407F90(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x4016f3L", 
            "funcEndAddr": "0x4016f8L", 
            "funcName": "sub_406470"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_4081B0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_407F90(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_406470(void *a1, size_t *a2, char *a3, __int64 a4, double a5)\n{\n  char *v5; // r15\n  __int64 v6; // rbx\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  _BYTE *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  char *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  char *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  _BYTE *v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  char *result; // rax\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // er11\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  int *v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  unsigned __int64 v80; // r9\n  int v81; // ebx\n  __int64 v82; // rax\n  char *v83; // rdi\n  unsigned __int128 v84; // fst7\n  __int64 v85; // rax\n  char *v86; // rdi\n  unsigned __int64 v87; // rax\n  void *v88; // rax\n  char *v89; // rax\n  char *v90; // rcx\n  int v91; // er8\n  __int16 v92; // ax\n  unsigned __int64 v93; // r15\n  char *v94; // rax\n  char *v95; // rax\n  char *v96; // rax\n  char v97; // al\n  unsigned __int64 v98; // r9\n  size_t v99; // r8\n  unsigned __int64 v100; // r10\n  unsigned __int64 v101; // rdi\n  __int64 v102; // rax\n  unsigned __int64 v103; // r10\n  unsigned __int64 v104; // rax\n  char *v105; // rax\n  __int64 v106; // rsi\n  char v107; // al\n  size_t v108; // r15\n  size_t v109; // r14\n  bool v110; // r13\n  char *v111; // rax\n  char *v112; // rax\n  __int64 v113; // rax\n  unsigned __int64 v114; // r10\n  char *v115; // rax\n  char *v116; // rax\n  char *v117; // rax\n  __int64 v118; // rsi\n  __int64 v119; // rdx\n  char v120; // al\n  __int64 v121; // rdx\n  unsigned __int64 v122; // rax\n  char *v123; // rax\n  __int64 v124; // rdx\n  char v125; // al\n  unsigned __int64 v126; // rax\n  __int64 v127; // rsi\n  __int64 v128; // r9\n  __int64 v129; // rdx\n  __int64 v130; // rax\n  char *v131; // rsi\n  char *v132; // rdi\n  __int64 v133; // rax\n  __int64 v134; // rsi\n  unsigned __int64 v135; // rax\n  char v136; // al\n  __int64 v137; // rsi\n  char v138; // al\n  char *v139; // rax\n  __int64 v140; // rdx\n  char v141; // al\n  __int64 v142; // rax\n  char *v143; // rax\n  char *v144; // rax\n  void *v145; // rdx\n  char v146; // al\n  char *v147; // rax\n  char *v148; // rax\n  char v149; // al\n  __int64 v150; // [rsp-8h] [rbp-718h]\n  int *v151; // [rsp+8h] [rbp-708h]\n  int *v152; // [rsp+10h] [rbp-700h]\n  int *v153; // [rsp+18h] [rbp-6F8h]\n  __int64 v154; // [rsp+20h] [rbp-6F0h]\n  unsigned __int64 v155; // [rsp+28h] [rbp-6E8h]\n  char *v156; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v158; // [rsp+40h] [rbp-6D0h]\n  void *v159; // [rsp+48h] [rbp-6C8h]\n  char *v160; // [rsp+50h] [rbp-6C0h]\n  __int64 v161; // [rsp+58h] [rbp-6B8h]\n  char *v162; // [rsp+60h] [rbp-6B0h]\n  _BYTE *v163; // [rsp+68h] [rbp-6A8h]\n  long double v164; // [rsp+70h] [rbp-6A0h]\n  void *v165; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v167; // [rsp+94h] [rbp-67Ch]\n  unsigned int v168; // [rsp+98h] [rbp-678h]\n  unsigned int v169; // [rsp+9Ch] [rbp-674h]\n  char v170; // [rsp+A0h] [rbp-670h]\n  void *v171; // [rsp+A8h] [rbp-668h]\n  __int64 v172; // [rsp+B0h] [rbp-660h]\n  __int64 v173; // [rsp+190h] [rbp-580h]\n  void *v174; // [rsp+198h] [rbp-578h]\n  __int64 v175; // [rsp+1A0h] [rbp-570h]\n  __int64 v176; // [rsp+1A8h] [rbp-568h]\n  __int64 v177; // [rsp+1B0h] [rbp-560h]\n  char v178; // [rsp+420h] [rbp-2F0h]\n\n  v5 = a3;\n  v6 = a4;\n  src = a1;\n  v158 = a2;\n  if ( (int)sub_4081B0(a3, &v173, &v170) < 0 )\n    return 0LL;\n  if ( (int)sub_407F90(v6, &v170) >= 0 )\n  {\n    v7 = v175 + 7;\n    if ( (unsigned __int64)(v175 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v176, v7);\n    v8 = v176 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v163 = (_BYTE *)(((unsigned __int64)&v155 + 7) & 0xFFFFFFFFFFFFFFF0LL);\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = malloc(v9);\n      v163 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v158;\n    v12 = (char *)v174;\n    v13 = v5;\n    v14 = (char *)src;\n    v161 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v174;\n    if ( *(char **)v174 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (char *)(v16 - v13);\n    v18 = (unsigned __int64)&v17[v15];\n    v19 = (size_t)&v17[v15];\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v162 = v13;\n          LOBYTE(v164) = v20;\n          v165 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = (char *)v165;\n          v13 = v162;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v164) )\n          {\n            *(_QWORD *)&v164 = v162;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = (char *)v165;\n            v13 = *(char **)&v164;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v164 = v13;\n          v165 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = (char *)v165;\n          v13 = *(char **)&v164;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)&v17[v15];\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v173 != v161 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_239;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_239:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v164 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v165) = v14 == src;\n          v96 = (char *)malloc(v11);\n          if ( !v96 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v165 )\n            v14 = (char *)memcpy(v96, v14, v19);\n          else\n            v14 = v96;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v171;\n      v28 = (long double *)((char *)v171 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v165) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v165 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v165 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v127 = (__int64)(v66 + 1);\n                  v128 = -1LL;\n                  v129 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v128 = 10 * v50;\n                  v76 = __CFADD__(v128, v129);\n                  v50 = v128 + v129;\n                  v66 = (char *)v127;\n                  if ( v76 )\n                  {\n                    if ( v67 == (char *)v127 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v165;\n                      goto LABEL_82;\n                    }\n                    while ( *(++v66 - 1) != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v171 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v130 = (__int64)(v51 + 1);\n                v55 = 0LL;\n                if ( v52 != (char *)v130 )\n                {\n                  v131 = (char *)v130;\n                  while ( 1 )\n                  {\n                    v132 = v131 + 1;\n                    v133 = *v131 - 48;\n                    v134 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v134 = 10 * v55;\n                    v76 = __CFADD__(v134, v133);\n                    v135 = v134 + v133;\n                    v131 = v132;\n                    v55 = v135;\n                    if ( v76 )\n                    {\n                      if ( v52 == v132 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v131 = v132 + 1;\n                        if ( *v132 == 48 )\n                          break;\n                        if ( v52 == v131 )\n                          goto LABEL_88;\n                        ++v132;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v131 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_376;\n              }\n              v54 = (char *)v171 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v87 = v56;\n                  if ( v50 >= v56 )\n                    v87 = v50;\n                  v76 = __CFADD__(v87, 1LL);\n                  v88 = (void *)(v87 + 1);\n                  v165 = v88;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v88 <= 0x2BC )\n                  {\n                    v90 = &v178;\n                  }\n                  else\n                  {\n                    v159 = (void *)v50;\n                    v160 = (char *)v55;\n                    LODWORD(v162) = v68;\n                    v164 = _FST7;\n                    if ( v88 == (void *)-1LL )\n                      goto LABEL_88;\n                    v89 = (char *)malloc((size_t)v88);\n                    v68 = (int)v162;\n                    _FST7 = v164;\n                    v90 = v89;\n                    v55 = (unsigned __int64)v160;\n                    v50 = (unsigned __int64)v159;\n                    if ( !v89 )\n                      goto LABEL_88;\n                  }\n                  v91 = (unsigned __int16)v168;\n                  LOBYTE(v92) = v168;\n                  HIBYTE(v92) = BYTE1(v168) | 3;\n                  LOWORD(v168) = v92;\n                  __asm { fxam }\n                  if ( v62 & 2 )\n                  {\n                    *v90 = 45;\n                    _FST7 = -_FST7;\n                    v93 = (unsigned __int64)(v90 + 1);\n                  }\n                  else if ( v68 & 4 )\n                  {\n                    v93 = (unsigned __int64)(v90 + 1);\n                    *v90 = 43;\n                  }\n                  else\n                  {\n                    v93 = (unsigned __int64)v90;\n                    if ( v68 & 8 )\n                    {\n                      v93 = (unsigned __int64)(v90 + 1);\n                      *v90 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v98 = v93 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      *(_BYTE *)(v93 + 2) = 102;\n                      *(_WORD *)v93 = 28265;\n                    }\n                    else\n                    {\n                      *(_BYTE *)(v93 + 2) = 70;\n                      *(_WORD *)v93 = 20041;\n                    }\n                    v93 = 0LL;\n                    goto LABEL_264;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v97 = v12[72] & 0xDF;\n                  switch ( v97 )\n                  {\n                    case 70:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || v55 )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v123 = nl_langinfo(0x10000);\n                        v124 = (__int64)v160;\n                        v98 = *(_QWORD *)&v164;\n                        v125 = *v123;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v125 )\n                          v125 = 46;\n                        *(_BYTE *)(v93 + 1) = v125;\n                        if ( v124 )\n                        {\n                          v126 = v98;\n                          do\n                            *(_BYTE *)(++v126 - 1) = 48;\n                          while ( v126 != v93 + v124 + 2 );\n                          v98 += v124;\n                        }\n                        goto LABEL_264;\n                      }\n                      goto LABEL_263;\n                    case 69:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 || (v106 = v93 + 1, v55) )\n                      {\n                        LODWORD(v155) = v91;\n                        v156 = (char *)v50;\n                        v159 = v90;\n                        v160 = (char *)v55;\n                        LODWORD(v162) = v68;\n                        *(_QWORD *)&v164 = v93 + 2;\n                        v139 = nl_langinfo(0x10000);\n                        v140 = (__int64)v160;\n                        v106 = *(_QWORD *)&v164;\n                        v141 = *v139;\n                        LOBYTE(v68) = (_BYTE)v162;\n                        v90 = (char *)v159;\n                        v50 = (unsigned __int64)v156;\n                        LOWORD(v91) = v155;\n                        if ( !v141 )\n                          v141 = 46;\n                        *(_BYTE *)(v93 + 1) = v141;\n                        if ( v140 )\n                        {\n                          v142 = v106;\n                          do\n                            *(_BYTE *)(++v142 - 1) = 48;\n                          while ( v142 != v93 + v140 + 2 );\n                          v106 += v140;\n                        }\n                      }\n                      v107 = v12[72];\n                      v98 = v106 + 4;\n                      *(_BYTE *)(v106 + 3) = 48;\n                      *(_BYTE *)v106 = v107;\n                      *(_WORD *)(v106 + 1) = 12331;\n                      goto LABEL_264;\n                    case 71:\n                      *(_BYTE *)v93 = 48;\n                      if ( v68 & 0x10 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v154) = v91;\n                          v155 = v50;\n                          v156 = (char *)(v93 + 2);\n                          v159 = v90;\n                          LODWORD(v160) = v68;\n                          v162 = (char *)v55;\n                          *(_QWORD *)&v164 = v55 - 1;\n                          v117 = nl_langinfo(0x10000);\n                          v118 = *(_QWORD *)&v164;\n                          v119 = (__int64)v162;\n                          v120 = *v117;\n                          LOBYTE(v68) = (_BYTE)v160;\n                          v90 = (char *)v159;\n                          v98 = (unsigned __int64)v156;\n                          v50 = v155;\n                          LOWORD(v91) = WORD2(v154);\n                          if ( !v120 )\n                            v120 = 46;\n                          *(_BYTE *)(v93 + 1) = v120;\n                          if ( v118 )\n                          {\n                            v121 = v93 + v119 + 1;\n                            v122 = v98;\n                            do\n                              *(_BYTE *)(++v122 - 1) = 48;\n                            while ( v122 != v121 );\n                            v98 += v118;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v156) = v91;\n                          v159 = (void *)v50;\n                          v160 = (char *)(v93 + 2);\n                          v162 = v90;\n                          LODWORD(v164) = v68;\n                          v148 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v164);\n                          v90 = v162;\n                          v149 = *v148;\n                          v98 = (unsigned __int64)v160;\n                          v50 = (unsigned __int64)v159;\n                          LOWORD(v91) = (_WORD)v156;\n                          if ( !v149 )\n                            v149 = 46;\n                          *(_BYTE *)(v93 + 1) = v149;\n                        }\n                        goto LABEL_264;\n                      }\nLABEL_263:\n                      v98 = v93 + 1;\n                      goto LABEL_264;\n                  }\n                  if ( v97 != 65 )\n                    goto LABEL_200;\n                  *(_BYTE *)v93 = 48;\n                  *(_QWORD *)&v164 = v93 + 2;\n                  v136 = v12[72];\n                  *(_BYTE *)(v93 + 2) = 48;\n                  *(_BYTE *)(v93 + 1) = v136 + 23;\n                  if ( v68 & 0x10 || (v137 = v93 + 3, v55) )\n                  {\n                    HIDWORD(v154) = v91;\n                    v155 = v50;\n                    v156 = v90;\n                    v159 = (void *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = (char *)(v93 + 4);\n                    v144 = nl_langinfo(0x10000);\n                    v145 = v159;\n                    v137 = (__int64)v162;\n                    v146 = *v144;\n                    LOBYTE(v68) = (_BYTE)v160;\n                    v90 = v156;\n                    v50 = v155;\n                    LOWORD(v91) = WORD2(v154);\n                    if ( !v146 )\n                      v146 = 46;\n                    *(_BYTE *)(v93 + 3) = v146;\n                    if ( v145 )\n                    {\n                      v147 = (char *)v137;\n                      do\n                        *(++v147 - 1) = 48;\n                      while ( v147 != (char *)v145 + v93 + 4 );\n                      v137 += (__int64)v145;\n                    }\n                  }\n                  v138 = v12[72];\n                  v98 = v137 + 3;\n                  *(_WORD *)(v137 + 1) = 12331;\n                  v93 = *(_QWORD *)&v164;\n                  *(_BYTE *)v137 = v138 + 15;\nLABEL_264:\n                  LOWORD(v168) = v91;\n                  v99 = v98 - (_QWORD)v90;\n                  if ( v50 > v98 - (unsigned __int64)v90 )\n                  {\n                    v100 = v50 - v99;\n                    v101 = v98 + v100;\n                    v99 = v98 + v100 - (_QWORD)v90;\n                    if ( v68 & 2 )\n                    {\n                      if ( v100 )\n                      {\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v101 != v98 );\n                      }\n                    }\n                    else if ( v68 & 0x20 && v93 )\n                    {\n                      if ( v93 >= v98 )\n                      {\n                        v93 = v98;\n                      }\n                      else\n                      {\n                        v102 = -1LL;\n                        do\n                        {\n                          *(_BYTE *)(v101 + v102) = *(_BYTE *)(v98 + v102);\n                          --v102;\n                        }\n                        while ( v102 != v93 - 1 - v98 );\n                      }\n                      if ( v100 )\n                      {\n                        v103 = v93 + v100;\n                        do\n                          *(_BYTE *)(++v93 - 1) = 48;\n                        while ( v93 != v103 );\n                      }\n                    }\n                    else\n                    {\n                      v113 = -1LL;\n                      if ( (unsigned __int64)v90 < v98 )\n                      {\n                        do\n                        {\n                          *(_BYTE *)(v101 + v113) = *(_BYTE *)(v98 + v113);\n                          --v113;\n                        }\n                        while ( &v90[-v98 - 1] != (char *)v113 );\n                        v98 = (unsigned __int64)v90;\n                      }\n                      if ( v100 )\n                      {\n                        v114 = v98 + v100;\n                        do\n                          *(_BYTE *)(++v98 - 1) = 32;\n                        while ( v98 != v114 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v165 <= v99 )\n                    goto LABEL_200;\n                  v104 = v99 + v19;\n                  v15 = v99 + v19;\n                  if ( v11 - v19 <= v99 )\n                  {\n                    if ( __CFADD__(v99, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v104 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v104 )\n                          goto LABEL_374;\n                      }\n                      else\n                      {\n                        if ( v104 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_281;\n                        }\nLABEL_374:\n                        if ( v104 == -1LL )\n                          goto LABEL_88;\n                        v11 = v99 + v19;\n                      }\nLABEL_281:\n                      if ( v14 && v14 != src )\n                      {\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v105 = (char *)realloc(v14, v11);\n                        if ( !v105 )\n                          goto LABEL_88;\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        v14 = v105;\n                      }\n                      else\n                      {\n                        LOBYTE(v162) = v14 == src;\n                        *(_QWORD *)&v164 = v99;\n                        v165 = v90;\n                        v115 = (char *)malloc(v11);\n                        v90 = (char *)v165;\n                        v99 = *(_QWORD *)&v164;\n                        if ( !v115 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v162 )\n                        {\n                          v116 = (char *)memcpy(v115, v14, v19);\n                          v90 = (char *)v165;\n                          v99 = *(_QWORD *)&v164;\n                          v14 = v116;\n                        }\n                        else\n                        {\n                          v14 = v115;\n                        }\n                      }\n                    }\n                  }\n                  v165 = v90;\n                  memcpy(&v14[v19], v90, v99);\n                  if ( v165 != &v178 )\n                    free(v165);\n                  goto LABEL_110;\n                }\nLABEL_376:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = v163 + 1;\n        *v163 = 37;\n        if ( v31 & 1 )\n        {\n          v33 = v163;\n          v163[1] = 39;\n          v32 = v33 + 2;\n        }\n        if ( v31 & 2 )\n          *v32++ = 45;\n        if ( v31 & 4 )\n          *v32++ = 43;\n        if ( v31 & 8 )\n          *v32++ = 32;\n        if ( v31 & 0x10 )\n          *v32++ = 35;\n        if ( v31 & 0x40 )\n          *v32++ = 73;\n        if ( v31 & 0x20 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v162 = v27;\n          *(_QWORD *)&v164 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v162;\n          v32 += *(_QWORD *)&v164;\n        }\n        if ( (unsigned int)v165 <= 0x10 )\n        {\n          v38 = 1LL << (char)v165;\n          if ( (1LL << (char)v165) & 0x14180 )\n            goto LABEL_125;\n          if ( v38 & 0x1000 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( !(v38 & 0x600) )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v162) = 1;\n            v168 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v162) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v162;\n          *(&v168 + (unsigned int)v162) = *((_DWORD *)v43 + 4);\n          LODWORD(v162) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v164 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v174 != &v177 )\n                    free(v174);\n                  if ( v171 != &v172 )\n                    free(v171);\n                  v14 = 0LL;\n                  **(_DWORD **)&v164 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v164 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v164) = v14 == src;\n            v95 = (char *)malloc(v11);\n            v46 = v95;\n            if ( !v95 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v164) )\n              v46 = (char *)memcpy(v95, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v160 = v46;\n            v47 = __errno_location();\n            v48 = v160;\n            v160 = v32;\n            *(_QWORD *)&v164 = v47;\n            LODWORD(v156) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v167 = -1;\n              **(_DWORD **)&v164 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (_DWORD)v165 )\n              {\n                case 1:\n                  v80 = (unsigned int)*((char *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v80 = *((unsigned __int8 *)v171 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v80 = (unsigned int)*((__int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v80 = *((unsigned __int16 *)v171 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 0xD:\n                case 0xE:\n                  v80 = *((unsigned int *)v171 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v152 = &v167;\n                      goto LABEL_153;\n                    }\n                    v151 = (int *)v80;\n                    goto LABEL_210;\n                  }\n                  v153 = &v167;\n                  v152 = (int *)v80;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 0xA:\n                case 0xF:\n                case 0x10:\n                case 0x11:\n                  v71 = &v48[v19];\n                  v72 = (int *)*((_QWORD *)v171 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v159 = v48;\n                  if ( (_DWORD)v162 != 1 )\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v72, a5, &v167, v153);\nLABEL_131:\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v151 = v72;\nLABEL_210:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v168, a5, v169, v151);\nLABEL_211:\n                    v48 = (char *)v159;\nLABEL_132:\n                    v74 = v167;\n                    if ( v167 < 0 )\n                    {\nLABEL_154:\n                      if ( v160[1] )\n                      {\n                        v160[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v81 = **(_DWORD **)&v164;\n                        if ( !**(_DWORD **)&v164 )\n                        {\n                          v81 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v81 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        **(_DWORD **)&v164 = v81;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v167 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v164 = (_DWORD)v156;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v174 != &v177 )\n                          free(v174);\n                        if ( v171 != &v172 )\n                          free(v171);\n                        v14 = 0LL;\n                        **(_DWORD **)&v164 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v78 )\n                          {\n                            v159 = v48;\n                            v94 = (char *)malloc(v11);\n                            v48 = (char *)v159;\n                            if ( !v94 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v94, v159, v19);\n                            else\n                              v48 = v94;\n                          }\n                          else\n                          {\n                            v159 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v159;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v153 = &v167;\n                  v152 = v72;\n                  break;\n                case 0xB:\n                  v85 = *((_QWORD *)v12 + 10);\n                  v86 = &v48[v19];\n                  v159 = v48;\n                  a5 = *((double *)v171 + 4 * v85 + 2);\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, &v167, v153);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v162 != 2 )\n                    {\n                      v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, &v167, a5, v154, v155);\n                      v48 = (char *)v159;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v86, v49, 1LL, -1LL, v163, v168, a5, v169, &v167);\n                  }\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                case 0xC:\n                  v82 = *((_QWORD *)v12 + 10);\n                  v83 = &v48[v19];\n                  v159 = v48;\n                  if ( (_DWORD)v162 == 1 )\n                  {\n                    v84 = *((unsigned __int128 *)v171 + 2 * v82 + 1);\n                    v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v84, v84 >> 64);\n                    goto LABEL_211;\n                  }\n                  if ( (_DWORD)v162 != 2 )\n                  {\n                    v73 = __snprintf_chk(\n                            v83,\n                            v49,\n                            1LL,\n                            -1LL,\n                            v163,\n                            &v167,\n                            a5,\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)),\n                            COERCE_UNSIGNED_INT128(*((long double *)v171 + 2 * v82 + 1)) >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v83, v49, 1LL, -1LL, v163, v168, a5, v169, v150);\n                  v48 = (char *)v159;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_409;\n              }\n              break;\n            }\n            v80 = v168;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v163, v80, a5, v152, v153);\n            v74 = v167;\n            v48 = (char *)v159;\n            if ( v167 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_409:\n          abort();\n          return result;\n      }\nLABEL_110:\n      v13 = (char *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v161;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v108 = v19;\n    v109 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v109 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v109 )\n        {\nLABEL_304:\n          v110 = v14 == src;\n          if ( !v14 || v110 )\n          {\n            v143 = (char *)malloc(v11);\n            if ( !v143 )\n              goto LABEL_88;\n            if ( v108 && v110 )\n              v14 = (char *)memcpy(v143, v14, v108);\n            else\n              v14 = v143;\n          }\n          else\n          {\n            v111 = (char *)realloc(v14, v11);\n            if ( !v111 )\n              goto LABEL_126;\n            v14 = v111;\n          }\n          goto LABEL_308;\n        }\n      }\n      else if ( v109 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_304;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_304;\n    }\nLABEL_308:\n    v14[v108] = 0;\n    if ( v11 > v109 && v14 != src )\n    {\n      v112 = (char *)realloc(v14, v109);\n      if ( v112 )\n        v14 = v112;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v174 != &v177 )\n      free(v174);\n    if ( v171 != &v172 )\n      free(v171);\n    *v158 = v108;\n    return v14;\n  }\n  if ( v174 != &v177 )\n    free(v174);\n  if ( v171 != &v172 )\n    free(v171);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n", 
            "funcStartAddr": "0x4016f3L", 
            "funcEndAddr": "0x4016f8L", 
            "funcName": "sub_406470"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407F90(int *a1, unsigned __int64 *a2)\n{\n  unsigned int *v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  unsigned int *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = (unsigned int *)a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( (unsigned __int64)*v2 )\n      {\n        case 1uLL:\n        case 2uLL:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *((_BYTE *)v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3uLL:\n        case 4uLL:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *((_WORD *)v2 + 8) = *v10;\n          goto LABEL_7;\n        case 5uLL:\n        case 6uLL:\n        case 0xDuLL:\n        case 0xEuLL:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (unsigned int *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (unsigned int *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          v2[4] = *v8;\n          goto LABEL_7;\n        case 7uLL:\n        case 8uLL:\n        case 9uLL:\n        case 0xAuLL:\n        case 0x11uLL:\n        case 0x12uLL:\n        case 0x13uLL:\n        case 0x14uLL:\n        case 0x15uLL:\n        case 0x16uLL:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *((_QWORD *)v2 + 2) = *v5;\n          goto LABEL_7;\n        case 0xBuLL:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *((_QWORD *)v2 + 2) = *v14;\n          goto LABEL_7;\n        case 0xCuLL:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *((long double *)v2 + 1) = *v15;\n          goto LABEL_7;\n        case 0xFuLL:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *((_QWORD *)v2 + 2) = v21;\n          goto LABEL_7;\n        case 0x10uLL:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_40B430;\n          *((_QWORD *)v2 + 2) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 8;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x407f90L", 
            "funcEndAddr": "0x4081a9L", 
            "funcName": "sub_407F90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4081B0(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 *v5; // r15\n  unsigned __int64 v6; // r9\n  unsigned __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  __int64 v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  void *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  void *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  __int64 v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  void *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  __int64 v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v94; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v95; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v96; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v97; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v5 = a3;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = (__int64)(a2 + 4);\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (__int64)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *(_DWORD *)(v12 + 16) = 0;\n  *(_QWORD *)(v12 + 24) = 0LL;\n  *(_QWORD *)(v12 + 32) = 0LL;\n  *(_QWORD *)(v12 + 40) = -1LL;\n  *(_QWORD *)(v12 + 48) = 0LL;\n  *(_QWORD *)(v12 + 56) = 0LL;\n  *(_QWORD *)(v12 + 64) = -1LL;\n  *(_QWORD *)(v12 + 80) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_17;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_17;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_131;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_131;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_17:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case 39:\n        *(_DWORD *)(v12 + 16) |= 1u;\n        goto LABEL_16;\n      case 45:\n        *(_DWORD *)(v12 + 16) |= 2u;\n        goto LABEL_16;\n      case 43:\n        *(_DWORD *)(v12 + 16) |= 4u;\n        goto LABEL_16;\n      case 32:\n        *(_DWORD *)(v12 + 16) |= 8u;\n        goto LABEL_16;\n      case 35:\n        *(_DWORD *)(v12 + 16) |= 0x10u;\n        goto LABEL_16;\n    }\n    if ( v13 != 48 )\n      break;\n    *(_DWORD *)(v12 + 16) |= 0x20u;\nLABEL_16:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *(_DWORD *)(v12 + 16) |= 0x40u;\n    goto LABEL_16;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *(_QWORD *)(v12 + 24) = v9;\n    *(_QWORD *)(v12 + 32) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_215;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 != 36 )\n    {\nLABEL_215:\n      v18 = *(_QWORD *)(v12 + 40);\n      if ( v18 == -1LL )\n      {\n        *(_QWORD *)(v12 + 40) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v18 = v81++;\n      }\n    }\n    else\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_131;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_131;\n      *(_QWORD *)(v12 + 40) = v18;\n      v14 = v47 + 2;\n    }\n    v19 = (_DWORD *)v5[1];\n    if ( v6 > v18 )\n    {\n      v20 = *v5;\nLABEL_43:\n      if ( v20 <= v18 )\n      {\n        do\n          v19[8 * ++v20 - 8] = 0;\n        while ( v20 <= v18 );\n        *v5 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_26;\n        }\n        goto LABEL_132;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_27;\nLABEL_48:\n      v22 = v9[1] == 42;\n      *(_QWORD *)(v12 + 48) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *(_QWORD *)(v12 + 56) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_27;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *(_QWORD *)(v12 + 56) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_216;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 != 36 )\n      {\nLABEL_216:\n        v26 = *(_QWORD *)(v12 + 64);\n        if ( v26 != -1LL )\n          goto LABEL_53;\n        *(_QWORD *)(v12 + 64) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_53;\n        }\n      }\n      else\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_131;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *(_QWORD *)(v12 + 64) = v26;\n          v24 = v72 + 2;\nLABEL_53:\n          v19 = (_DWORD *)v5[1];\n          if ( v6 > v26 )\n          {\n            v27 = *v5;\n            goto LABEL_55;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_163;\n              v27 = *v5;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)v5[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_161;\n              v27 = *v5;\n              if ( src != v40 )\n                goto LABEL_172;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *v5;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_172:\n            v5[1] = (unsigned __int64)v19;\nLABEL_55:\n            if ( v27 <= v26 )\n            {\n              do\n                v19[8 * ++v27 - 8] = 0;\n              while ( v27 <= v26 );\n              *v5 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_27;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_27;\n            }\n            goto LABEL_132;\n          }\nLABEL_160:\n          v40 = v19;\n          goto LABEL_161;\n        }\n      }\nLABEL_131:\n      v19 = (_DWORD *)v5[1];\nLABEL_132:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (void *)v4[1];\n      if ( (void *)v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_160;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_163;\n      v20 = *v5;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)v5[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_161;\n      v20 = *v5;\n      if ( src != v40 )\n        goto LABEL_94;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *v5;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_94:\n    v5[1] = (unsigned __int64)v19;\n    goto LABEL_43;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *(_QWORD *)(v12 + 24) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = (__int64)(i + 1);\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - (_QWORD)v9;\n      v9 = (char *)v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *(_QWORD *)(v12 + 32) = v9;\n    v13 = *v9;\n  }\nLABEL_26:\n  if ( v13 == 46 )\n    goto LABEL_48;\nLABEL_27:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_34;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_34;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_34:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case 37:\n      goto LABEL_71;\n    case 65:\n    case 69:\n    case 70:\n    case 71:\n    case 97:\n    case 101:\n    case 102:\n    case 103:\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_63;\n    case 67:\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_63;\n    case 83:\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_63;\n    case 88:\n    case 111:\n    case 117:\n    case 120:\n      v29 = 10;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 6 : 4;\n        }\n      }\n      goto LABEL_63;\n    case 99:\n      v29 = (v15 > 7) + 13;\n      goto LABEL_63;\n    case 100:\n    case 105:\n      v29 = 9;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( !(v15 & 2) )\n            v29 = (v15 & 1u) < 1 ? 5 : 3;\n        }\n      }\n      goto LABEL_63;\n    case 110:\n      v29 = 22;\n      if ( v15 <= 15 && !(v15 & 4) )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( !(v15 & 2) )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_63;\n    case 112:\n      v29 = 17;\n      goto LABEL_63;\n    case 115:\n      v29 = (v15 > 7) + 15;\nLABEL_63:\n      if ( v11 == -1LL )\n      {\n        *(_QWORD *)(v12 + 80) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_131;\n        v11 = v81++;\n      }\n      else\n      {\n        *(_QWORD *)(v12 + 80) = v11;\n      }\n      v19 = (_DWORD *)v5[1];\n      if ( v6 > v11 )\n        goto LABEL_66;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_160;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_163;\n        goto LABEL_159;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_211;\n      if ( src == (_DWORD *)v5[1] )\n      {\n        v19 = src;\nLABEL_159:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *v5);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      v5[1] = (unsigned __int64)v19;\nLABEL_66:\n      v30 = *v5;\n      if ( *v5 <= v11 )\n      {\n        do\n          v19[8 * ++v30 - 8] = 0;\n        while ( v30 <= v11 );\n        *v5 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_132;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_71:\n      *(_BYTE *)(v12 + 72) = v13;\n      v32 = *v4;\n      *(_QWORD *)(v12 + 8) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > v32 + 1 )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( (v7 & 0x8000000000000000LL) == 0LL )\n      {\n        v33 = 2 * v7;\n        if ( 2 * v7 <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (void *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( (void *)v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)v5[1];\n              if ( src != v40 )\n                goto LABEL_162;\n              goto LABEL_165;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_211;\n            v34 = (void *)v91[1];\n            v8 = *v91;\n            if ( (void *)v82 != v34 )\n              goto LABEL_78;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_78:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_211:\n      v40 = (_DWORD *)v5[1];\nLABEL_161:\n      if ( src != v40 )\n      {\nLABEL_162:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_163:\n      v58 = (void *)v4[1];\n      if ( (void *)v82 != v58 )\n        free(v58);\nLABEL_165:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_131;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4081b0L", 
            "funcEndAddr": "0x408eb9L", 
            "funcName": "sub_4081B0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x408ec0L", 
            "funcEndAddr": "0x408f1dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x408f20L", 
            "funcEndAddr": "0x408f21L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_408F30(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_60D1E8 )\n    v1 = (void *)unk_60D1E8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x408f30L", 
            "funcEndAddr": "0x408f48L", 
            "funcName": "sub_408F30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408F48(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_60CE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x408f48L", 
            "funcEndAddr": "0x408f68L", 
            "funcName": "sub_408F48"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_[.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 71, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}