{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  char v3; // r14\n  char *v4; // r13\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbp\n  const char *v7; // rbx\n  int v8; // eax\n  const char *v9; // rsi\n  __int64 v10; // rax\n  unsigned int v11; // eax\n  char *v12; // rax\n  __int64 v13; // rbx\n  __ssize_t v14; // rax\n  __int64 v15; // r8\n  char *v16; // r15\n  unsigned __int64 v17; // rcx\n  __int64 v18; // rdx\n  char v19; // r10\n  bool v20; // cf\n  bool v21; // zf\n  const char *v22; // rdi\n  __int64 v23; // rcx\n  const char *v24; // rsi\n  char v25; // al\n  char *v26; // rax\n  __int64 v27; // rdx\n  char v28; // al\n  __int64 v29; // rax\n  char v30; // si\n  const char *v31; // r15\n  bool v32; // cf\n  bool v33; // zf\n  char *v34; // rdi\n  const char *v35; // rsi\n  _BOOL8 v36; // r14\n  unsigned int v37; // eax\n  char *v38; // rax\n  const char *v39; // rsi\n  char *v40; // rax\n  __int64 v41; // rcx\n  __int64 v42; // r8\n  int v43; // ebx\n  char v44; // al\n  __int64 v45; // r15\n  char *v46; // rax\n  const __int32_t **v47; // rax\n  unsigned __int64 v48; // rdx\n  const __int32_t *v49; // rdi\n  char *v50; // rax\n  __int64 v52; // r11\n  const char *v53; // rdx\n  __int64 v54; // rbx\n  int *v55; // rax\n  char *v56; // rax\n  unsigned int v57; // ebx\n  __int64 v58; // rdx\n  char *v59; // rax\n  char *v60; // rax\n  char *v61; // rax\n  char v62; // dl\n  __int64 v63; // rax\n  const char *v64; // rax\n  char v65; // dl\n  char v66; // al\n  char *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  __int64 v70; // rax\n  int *v71; // rax\n  char *v72; // rax\n  char *v73; // rax\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  const char **v78; // [rsp+0h] [rbp-E8h]\n  char *s; // [rsp+8h] [rbp-E0h]\n  char v80; // [rsp+13h] [rbp-D5h]\n  int v81; // [rsp+14h] [rbp-D4h]\n  unsigned __int64 v82; // [rsp+18h] [rbp-D0h]\n  __int64 v83; // [rsp+20h] [rbp-C8h]\n  unsigned __int8 v84; // [rsp+20h] [rbp-C8h]\n  unsigned __int64 v85; // [rsp+20h] [rbp-C8h]\n  unsigned __int8 v86; // [rsp+20h] [rbp-C8h]\n  const char *v87; // [rsp+20h] [rbp-C8h]\n  unsigned __int64 v88; // [rsp+20h] [rbp-C8h]\n  char v89; // [rsp+28h] [rbp-C0h]\n  unsigned __int64 v90; // [rsp+28h] [rbp-C0h]\n  unsigned __int64 v91; // [rsp+28h] [rbp-C0h]\n  unsigned __int64 v92; // [rsp+28h] [rbp-C0h]\n  __int64 v93; // [rsp+30h] [rbp-B8h]\n  const char **v94; // [rsp+38h] [rbp-B0h]\n  unsigned __int64 v95; // [rsp+40h] [rbp-A8h]\n  char v96; // [rsp+48h] [rbp-A0h]\n  char v97; // [rsp+49h] [rbp-9Fh]\n  char v98; // [rsp+4Ah] [rbp-9Eh]\n  char v99; // [rsp+4Bh] [rbp-9Dh]\n  int v100; // [rsp+4Ch] [rbp-9Ch]\n  char v101; // [rsp+5Fh] [rbp-89h]\n  char *lineptr; // [rsp+60h] [rbp-88h]\n  size_t n; // [rsp+68h] [rbp-80h]\n  char v104[32]; // [rsp+70h] [rbp-78h]\n  char v105[88]; // [rsp+90h] [rbp-58h]\n\n  v3 = 0;\n  LOBYTE(v4) = 0;\n  LODWORD(v5) = -1;\n  LODWORD(v6) = a1;\n  v7 = (const char *)a2;\n  sub_406260(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_409E30(sub_403080);\n  setvbuf(stdout, 0LL, 1, 0LL);\n  while ( 1 )\n  {\n    v8 = sub_409690(a1, a2, \"bctw\", &off_40A9E0, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 119 )\n    {\n      byte_60E2DC = 0;\n      byte_60E2DB = 1;\n      byte_60E2D9 = 0;\n    }\n    else if ( v8 <= 119 )\n    {\n      if ( v8 == 98 )\n        goto LABEL_15;\n      if ( v8 <= 98 )\n      {\n        if ( v8 == -131 )\n        {\n          sub_408310((char)stdout);\n          exit(0);\n        }\n        if ( v8 == -130 )\n          sub_402C90(0);\nLABEL_204:\n        sub_402C90(1);\n      }\n      if ( v8 == 99 )\n      {\n        LOBYTE(v4) = 1;\n      }\n      else\n      {\n        if ( v8 != 116 )\n          goto LABEL_204;\n        LODWORD(v5) = 0;\n      }\n    }\n    else if ( v8 == 130 )\n    {\n      byte_60E2DC = 0;\n      byte_60E2DB = 0;\n      byte_60E2D9 = 1;\n    }\n    else if ( v8 > 130 )\n    {\n      if ( v8 == 131 )\n      {\n        byte_60E2D8 = 1;\n      }\n      else\n      {\n        if ( v8 != 132 )\n          goto LABEL_204;\n        v3 = 1;\nLABEL_15:\n        LODWORD(v5) = 1;\n      }\n    }\n    else if ( v8 == 128 )\n    {\n      byte_60E2DA = 1;\n    }\n    else\n    {\n      if ( v8 != 129 )\n        goto LABEL_204;\n      byte_60E2DC = 1;\n      byte_60E2DB = 0;\n      byte_60E2D9 = 0;\n    }\n  }\n  qword_60E2E8 = 58LL;\n  qword_60E2E0 = 56LL;\n  if ( !(_DWORD)v5 && v3 )\n  {\n    v9 = \"--tag does not support --text mode\";\n    goto LABEL_203;\n  }\n  if ( (_BYTE)v4 )\n  {\n    v9 = \"the --tag option is meaningless when verifying checksums\";\n    if ( v3 )\n      goto LABEL_203;\n  }\n  v9 = \"the --binary and --text options are meaningless when verifying checksums\";\n  if ( ((v5 & 0x80000000) == 0LL) & (unsigned __int8)v4 )\n    goto LABEL_203;\n  if ( byte_60E2DA )\n    goto LABEL_71;\n  if ( !byte_60E2DC )\n  {\n    if ( !byte_60E2DB )\n      goto LABEL_201;\n    v9 = \"the --warn option is meaningful only when verifying checksums\";\n    if ( (_BYTE)v4 )\n      goto LABEL_40;\n    goto LABEL_203;\n  }\n  v9 = \"the --status option is meaningful only when verifying checksums\";\n  if ( !(_BYTE)v4 )\n  {\nLABEL_203:\n    v72 = dcgettext(0LL, v9, 5);\n    error(0, 0, v72);\n    goto LABEL_204;\n  }\nLABEL_37:\n  if ( !byte_60E2DB )\n    goto LABEL_38;\n  while ( 1 )\n  {\nLABEL_40:\n    if ( (_DWORD)v5 == -1 )\n      LODWORD(v5) = 0;\n    v94 = (const char **)&v7[8 * (int)v6];\n    v10 = dword_60E29C;\n    if ( dword_60E29C == (_DWORD)v6 )\n    {\n      *v94 = \"-\";\n      ++v94;\n    }\n    v78 = (const char **)&v7[8 * v10];\n    if ( v94 <= v78 )\n    {\n      v96 = 1;\n      goto LABEL_130;\n    }\n    v96 = 1;\n    v80 = (char)v4;\n    v11 = (unsigned int)v5 < 1 ? 0xFFFFFFF6 : 0;\n    v98 = v3;\n    v100 = v11 + 42;\n    v99 = v11 + 42;\n    do\n    {\n      s = (char *)*v78;\n      if ( !v80 )\n      {\n        if ( !(unsigned __int8)sub_402AF0(s, v104, v105) )\n        {\n          v96 = 0;\n          goto LABEL_129;\n        }\n        if ( strchr(s, 92) || strchr(s, 10) )\n        {\n          if ( v98 )\n          {\n            v77 = stdout->_IO_write_ptr;\n            v57 = 1;\n            if ( stdout->_IO_write_end <= v77 )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v77 + 1;\n              *v77 = 92;\n            }\nLABEL_197:\n            fwrite_unlocked(\"SHA224\", 1uLL, 6uLL, stdout);\n            fwrite_unlocked(\" (\", 1uLL, 2uLL, stdout);\n            sub_402A40(s, v57);\n            fwrite_unlocked(\") = \", 1uLL, 4uLL, stdout);\n            if ( !((unsigned __int64)qword_60E2E0 >> 1) )\n              goto LABEL_153;\n            goto LABEL_151;\n          }\n          v56 = stdout->_IO_write_ptr;\n          if ( v56 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 92);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v56 + 1;\n            *v56 = 92;\n          }\n          v57 = 1;\n          if ( !((unsigned __int64)qword_60E2E0 >> 1) )\n            goto LABEL_157;\n        }\n        else\n        {\n          v57 = 0;\n          if ( v98 )\n            goto LABEL_197;\n          if ( !((unsigned __int64)qword_60E2E0 >> 1) )\n            goto LABEL_157;\n        }\nLABEL_151:\n        v6 = 0LL;\n        do\n        {\n          v58 = (unsigned __int8)v104[v6++];\n          __printf_chk(1LL, \"%02x\", v58);\n        }\n        while ( (unsigned __int64)qword_60E2E0 >> 1 > v6 );\nLABEL_153:\n        if ( v98 )\n        {\nLABEL_154:\n          v59 = stdout->_IO_write_ptr;\n          if ( v59 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 10);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v59 + 1;\n            *v59 = 10;\n          }\n          goto LABEL_129;\n        }\nLABEL_157:\n        v60 = stdout->_IO_write_ptr;\n        if ( v60 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 32);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v60 + 1;\n          *v60 = 32;\n        }\n        v61 = stdout->_IO_write_ptr;\n        if ( v61 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v100);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v61 + 1;\n          *v61 = v99;\n        }\n        sub_402A40(s, v57);\n        goto LABEL_154;\n      }\n      v81 = strcmp(*v78, \"-\");\n      if ( v81 )\n      {\n        v6 = sub_4061C0(s, 4235053LL);\n        if ( !v6 )\n          goto LABEL_141;\n      }\n      else\n      {\n        byte_60E2F0 = 1;\n        v12 = dcgettext(0LL, \"standard input\", 5);\n        v6 = (unsigned __int64)stdin;\n        s = v12;\n      }\n      v97 = 0;\n      v3 = 0;\n      v5 = 0LL;\n      v13 = 1LL;\n      lineptr = 0LL;\n      n = 0LL;\n      v95 = 0LL;\n      v82 = 0LL;\n      while ( 1 )\n      {\n        v14 = __getdelim(&lineptr, &n, 10, (FILE *)v6);\n        if ( v14 <= 0 )\n          break;\n        v16 = lineptr;\n        v17 = (unsigned __int8)*lineptr;\n        if ( (_BYTE)v17 == 35 )\n          goto LABEL_68;\n        v15 = v14;\n        if ( lineptr[v14 - 1] == 10 )\n        {\n          v15 = v14 - 1;\n          lineptr[v14 - 1] = 0;\n          v16 = lineptr;\n          LOBYTE(v17) = *lineptr;\n        }\n        v18 = 0LL;\n        while ( (_BYTE)v17 == 32 )\nLABEL_55:\n          LOBYTE(v17) = v16[++v18];\n        if ( (_BYTE)v17 == 9 )\n          goto LABEL_55;\n        v19 = 0;\n        v20 = (unsigned __int8)v17 < 0x5Cu;\n        v21 = (_BYTE)v17 == 92;\n        if ( (_BYTE)v17 == 92 )\n        {\n          v19 = v80;\n          v20 = __CFADD__(v18, 1LL);\n          v21 = v18++ == -1;\n        }\n        v4 = &v16[v18];\n        v22 = \"SHA224\";\n        v23 = 6LL;\n        v24 = &v16[v18];\n        do\n        {\n          if ( !v23 )\n            break;\n          v20 = *v24 < (unsigned int)*v22;\n          v21 = *v24++ == *v22++;\n          --v23;\n        }\n        while ( v21 );\n        if ( (!v20 && !v21) == v20 )\n        {\n          v25 = v16[v18 + 6];\n          v17 = v18 + 6;\n          if ( v25 == 32 )\n          {\n            v25 = v16[v18 + 7];\n            v17 = v18 + 7;\n          }\n          if ( v25 != 40 || (++v17, (v15 -= v17) == 0) )\n          {\nLABEL_66:\n            ++v5;\n            if ( byte_60E2DB )\n            {\n              v45 = sub_407D00(0LL, 3LL, s, v17, v15);\n              v46 = dcgettext(0LL, \"%s: %lu: improperly formatted %s checksum line\", 5);\n              error(0, 0, v46, v45, v13, \"SHA224\", v78);\n            }\nLABEL_68:\n            if ( *(_BYTE *)v6 & 0x30 )\n              break;\n            goto LABEL_69;\n          }\n          v31 = &v16[v17];\n          v52 = v15 - 1;\n          if ( v15 != 1 )\n          {\n            if ( v31[v15 - 1] == 41 )\n            {\nLABEL_162:\n              v53 = &v31[v52];\nLABEL_163:\n              if ( v19 )\n              {\n                v24 = (const char *)v52;\n                v87 = v53;\n                v70 = sub_4029B0(v31, v52);\n                v53 = v87;\n                if ( !v70 )\n                  goto LABEL_66;\n              }\n              *v53 = 0;\n              v62 = v31[v52 + 1];\n              v63 = v52 + 1;\n              if ( v62 == 9 || v62 == 32 )\n              {\n                do\n                {\n                  do\n                    v62 = v31[++v63];\n                  while ( v62 == 32 );\n                }\n                while ( v62 == 9 );\n              }\n              if ( v62 != 61 )\n                goto LABEL_66;\n              v4 = (char *)&v31[v63 + 1];\n              if ( *v4 == 32 || *v4 == 9 )\n              {\n                v64 = &v31[v63 + 2];\n                do\n                {\n                  do\n                  {\n                    v65 = *v64;\n                    v4 = (char *)v64++;\n                  }\n                  while ( v65 == 32 );\n                }\n                while ( v65 == 9 );\n              }\n              v66 = sub_402950(v4, v24);\n              goto LABEL_175;\n            }\n            while ( --v52 )\n            {\n              if ( v31[v52] == 41 )\n                goto LABEL_162;\n            }\n          }\n          if ( *v31 != 41 )\n            goto LABEL_66;\n          v53 = v31;\n          v52 = 0LL;\n          goto LABEL_163;\n        }\n        v17 = v15 - v18;\n        if ( v15 - v18 < qword_60E2E8 + (unsigned __int64)(*v4 == 92) )\n          goto LABEL_66;\n        v27 = qword_60E2E0 + v18;\n        v17 = (unsigned __int64)&v16[v27];\n        v28 = v16[v27];\n        if ( v28 != 32 && v28 != 9 )\n          goto LABEL_66;\n        *(_BYTE *)v17 = 0;\n        v93 = v27;\n        v89 = v19;\n        v83 = v15;\n        if ( !(unsigned __int8)sub_402950(v4, v24) )\n          goto LABEL_66;\n        v15 = v83;\n        v17 = (unsigned int)dword_60E210;\n        v29 = v93 + 1;\n        if ( v83 - (v93 + 1) != 1 && ((v30 = v16[v93 + 1], v30 == 32) || v30 == 42) )\n        {\n          if ( dword_60E210 != 1 )\n          {\n            dword_60E210 = 0;\n            v29 = v93 + 2;\n          }\n        }\n        else\n        {\n          if ( !dword_60E210 )\n            goto LABEL_66;\n          dword_60E210 = 1;\n        }\n        v31 = &v16[v29];\n        if ( v89 )\n        {\n          v66 = sub_4029B0(v31, v83 - v29) != 0;\nLABEL_175:\n          if ( !v66 )\n            goto LABEL_66;\n        }\n        v32 = 0;\n        v33 = v81 == 0;\n        if ( !v81 )\n        {\n          v34 = \"-\";\n          v17 = 2LL;\n          v35 = v31;\n          do\n          {\n            if ( !v17 )\n              break;\n            v32 = (unsigned int)*v35 < (unsigned __int8)*v34;\n            v33 = *v35++ == *v34++;\n            --v17;\n          }\n          while ( v33 );\n          if ( (!v32 && !v33) == v32 )\n            goto LABEL_66;\n        }\n        LODWORD(v36) = 0;\n        if ( !byte_60E2DC )\n          v36 = strchr(v31, 10) != 0LL;\n        v37 = sub_402AF0(v31, v105, &v101);\n        v15 = v37;\n        if ( !(_BYTE)v37 )\n        {\n          ++v82;\n          if ( byte_60E2DC )\n            goto LABEL_97;\n          if ( v36 )\n          {\n            v38 = stdout->_IO_write_ptr;\n            if ( v38 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v38 + 1;\n              *v38 = 92;\n            }\n          }\n          sub_402A40(v31, v36);\n          v39 = \"FAILED open or read\";\n          goto LABEL_96;\n        }\n        if ( byte_60E2DA && v101 )\n          goto LABEL_97;\n        v17 = (unsigned __int64)qword_60E2E0 >> 1;\n        if ( (unsigned __int64)qword_60E2E0 >> 1 )\n        {\n          v90 = (unsigned __int64)qword_60E2E0 >> 1;\n          v84 = v37;\n          v47 = __ctype_tolower_loc();\n          v48 = 0LL;\n          v15 = v84;\n          v17 = v90;\n          v49 = *v47;\n          while ( v49[(unsigned __int8)v4[2 * v48]] == byte_40A9C0[((unsigned __int8)v105[v48] >> 4) & 0xF]\n               && v49[(unsigned __int8)v4[2 * v48 + 1]] == byte_40A9C0[v105[v48] & 0xF] )\n          {\n            if ( v90 == ++v48 )\n            {\n              v48 = v90;\n              goto LABEL_180;\n            }\n          }\n          ++v95;\n          if ( byte_60E2DC )\n            goto LABEL_97;\n          if ( v36 )\n          {\nLABEL_123:\n            v50 = stdout->_IO_write_ptr;\n            if ( v50 >= stdout->_IO_write_end )\n            {\n              v92 = v48;\n              v88 = v17;\n              __overflow(stdout, 92);\n              v17 = v88;\n              v48 = v92;\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v50 + 1;\n              *v50 = 92;\n            }\n          }\n          v91 = v48;\n          v85 = v17;\n          sub_402A40(v31, v36);\n          v17 = v85;\n          if ( v85 != v91 )\n          {\n            v39 = \"FAILED\";\nLABEL_96:\n            v40 = dcgettext(0LL, v39, 5);\n            __printf_chk(1LL, \": %s\\n\", v40);\n            goto LABEL_97;\n          }\n          goto LABEL_188;\n        }\n        v48 = 0LL;\nLABEL_180:\n        v97 = byte_60E2DC;\n        if ( byte_60E2DC )\n          goto LABEL_97;\n        v97 = byte_60E2D9;\n        if ( byte_60E2D9 )\n          goto LABEL_97;\n        if ( v36 )\n        {\n          v97 = v15;\n          goto LABEL_123;\n        }\n        v86 = v15;\n        sub_402A40(v31, 0LL);\n        v15 = v86;\n        v97 = v86;\nLABEL_188:\n        if ( !byte_60E2D9 )\n        {\n          v39 = \"OK\";\n          goto LABEL_96;\n        }\nLABEL_97:\n        v3 = v80;\n        if ( *(_BYTE *)v6 & 0x30 )\n          break;\nLABEL_69:\n        if ( !++v13 )\n        {\n          v7 = (const char *)sub_407D00(0LL, 3LL, s, v17, v15);\n          v26 = dcgettext(0LL, \"%s: too many checksum lines\", 5);\n          error(1, 0, v26, v7);\nLABEL_71:\n          v9 = \"the --ignore-missing option is meaningful only when verifying checksums\";\n          if ( !(_BYTE)v4 )\n            goto LABEL_203;\n          goto LABEL_37;\n        }\n      }\n      free(lineptr);\n      v43 = *(_DWORD *)v6 & 0x20;\n      if ( v43 )\n      {\n        v68 = sub_407D00(0LL, 3LL, s, v41, v42);\n        v69 = dcgettext(0LL, \"%s: read error\", 5);\n        error(0, 0, v69, v68);\n        v44 = 0;\n        goto LABEL_113;\n      }\n      if ( !v81 || !(unsigned int)sub_4086E0((FILE *)v6) )\n      {\n        if ( v3 )\n        {\n          if ( byte_60E2DC )\n            goto LABEL_220;\n          if ( v5 )\n          {\n            v76 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu line is improperly formatted\",\n                    \"WARNING: %lu lines are improperly formatted\",\n                    v5,\n                    5);\n            error(0, 0, v76, v5);\n          }\n          if ( v82 )\n          {\n            v3 = v82;\n            v75 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu listed file could not be read\",\n                    \"WARNING: %lu listed files could not be read\",\n                    v82,\n                    5);\n            error(0, 0, v75, v82);\n          }\n          if ( v95 )\n          {\n            v3 = v95;\n            v74 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu computed checksum did NOT match\",\n                    \"WARNING: %lu computed checksums did NOT match\",\n                    v95,\n                    5);\n            error(0, 0, v74, v95);\n          }\n          if ( !byte_60E2DA )\n          {\nLABEL_220:\n            if ( v97 )\n              goto LABEL_110;\n          }\n          else if ( v97 )\n          {\nLABEL_110:\n            if ( !(v95 | v82) )\n              LOBYTE(v43) = (v5 == 0) | byte_60E2D8 ^ 1;\n          }\n          else\n          {\n            v6 = sub_407D00(0LL, 3LL, s, v41, v42);\n            v73 = dcgettext(0LL, \"%s: no file was verified\", 5);\n            error(0, 0, v73, v6);\n          }\n        }\n        else\n        {\n          v6 = sub_407D00(0LL, 3LL, s, v41, v42);\n          v67 = dcgettext(0LL, \"%s: no properly formatted %s checksum lines found\", 5);\n          error(0, 0, v67, v6, \"SHA224\");\n        }\n        v44 = v43 & 1;\n        goto LABEL_113;\n      }\nLABEL_141:\n      v54 = sub_407D00(0LL, 3LL, s, v41, v42);\n      v55 = __errno_location();\n      error(0, *v55, \"%s\", v54);\n      v44 = 0;\nLABEL_113:\n      v96 &= v44;\nLABEL_129:\n      ++v78;\n    }\n    while ( v94 > v78 );\nLABEL_130:\n    if ( !byte_60E2F0 || (unsigned int)sub_4086E0(stdin) != -1 )\n      return (unsigned __int8)v96 ^ 1u;\n    v7 = dcgettext(0LL, \"standard input\", 5);\n    v71 = __errno_location();\n    error(1, *v71, v7);\nLABEL_201:\n    if ( byte_60E2D9 == 1 )\n    {\n      v9 = \"the --quiet option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_203;\n    }\nLABEL_38:\n    if ( byte_60E2D8 )\n    {\n      v9 = \"the --strict option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_203;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x401940L", 
            "funcEndAddr": "0x402869L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402870L", 
            "funcEndAddr": "0x40289bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_40289B()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40289bL", 
            "funcEndAddr": "0x4028baL", 
            "funcName": "sub_40289B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4028BA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4028baL", 
            "funcEndAddr": "0x4028f1L", 
            "funcName": "sub_4028BA"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4028F1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60E2C8 )\n  {\n    while ( qword_60E2D0 < (unsigned __int64)(&qword_60DE48 - qword_60DE40 - 1) )\n      ((void (*)(void))qword_60DE40[++qword_60E2D0])();\n    result = sub_40289B();\n    byte_60E2C8 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4028f1L", 
            "funcEndAddr": "0x402948L", 
            "funcName": "sub_4028F1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402948()\n{\n  return sub_4028BA();\n}\n", 
            "funcStartAddr": "0x402948L", 
            "funcEndAddr": "0x40294dL", 
            "funcName": "sub_402948"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_402950(_BYTE *a1)\n{\n  _BYTE *v1; // rbx\n  unsigned __int64 v2; // rbp\n  const unsigned __int16 *v3; // rcx\n  unsigned __int64 v4; // rax\n\n  v1 = a1;\n  v2 = qword_60E2E0;\n  if ( !qword_60E2E0 )\n    return *v1 == 0;\n  v3 = *__ctype_b_loc();\n  LODWORD(v4) = 0;\n  while ( v3[(unsigned __int8)*v1] & 0x1000 )\n  {\n    ++v1;\n    v4 = (unsigned int)(v4 + 1);\n    if ( v4 >= v2 )\n      return *v1 == 0;\n  }\n  return 0;\n}\n", 
            "funcStartAddr": "0x402950L", 
            "funcEndAddr": "0x4029adL", 
            "funcName": "sub_402950"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4029B0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  char v4; // cl\n  char v5; // cl\n  _BYTE *v7; // r9\n\n  v2 = a1 + 1;\n  v3 = 0LL;\n  if ( a2 )\n  {\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v3);\n      if ( !v4 )\n        return 0LL;\n      if ( v4 == 92 )\n      {\n        if ( a2 - 1 == v3 )\n          return 0LL;\n        v5 = *(_BYTE *)(a1 + ++v3);\n        if ( v5 == 92 )\n        {\n          v7 = (_BYTE *)v2;\n          *(_BYTE *)(v2 - 1) = 92;\n        }\n        else\n        {\n          if ( v5 != 110 )\n            return 0LL;\n          v7 = (_BYTE *)v2;\n          *(_BYTE *)(v2 - 1) = 10;\n        }\n      }\n      else\n      {\n        *(_BYTE *)(v2 - 1) = v4;\n        v7 = (_BYTE *)v2;\n      }\n      ++v3;\n      ++v2;\n    }\n    while ( a2 > v3 );\n    if ( (unsigned __int64)v7 < a1 + a2 )\n      *v7 = 0;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x4029b0L", 
            "funcEndAddr": "0x402a31L", 
            "funcName": "sub_4029B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402A40(const char *a1, char a2)\n{\n  const char *v2; // rbx\n  char *v3; // rax\n  int v4; // esi\n\n  v2 = a1;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      v4 = *(unsigned __int8 *)v2;\n      if ( !(_BYTE)v4 )\n        break;\n      if ( (_BYTE)v4 == 10 )\n      {\n        fwrite_unlocked(&unk_409E84, 1uLL, 2uLL, stdout);\n      }\n      else if ( (_BYTE)v4 == 92 )\n      {\n        fwrite_unlocked(&unk_409E87, 1uLL, 2uLL, stdout);\n      }\n      else\n      {\n        v3 = stdout->_IO_write_ptr;\n        if ( v3 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v4);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v3 + 1;\n          *v3 = v4;\n        }\n      }\n      ++v2;\n    }\n  }\n  else\n  {\n    fputs_unlocked(a1, stdout);\n  }\n}\n", 
            "funcStartAddr": "0x402a40L", 
            "funcEndAddr": "0x402ae5L", 
            "funcName": "sub_402A40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402AF0(const char *a1, __int64 a2, _BYTE *a3)\n{\n  FILE *v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r8\n  unsigned int v6; // er12\n  _BYTE *v8; // r13\n  __int64 v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // r8\n  __int64 v12; // rbx\n  int *v13; // rax\n  __int64 v14; // rbp\n  int *v15; // rax\n  int *v16; // rax\n  __int64 v17; // rcx\n  __int64 v18; // r8\n  int *v19; // rbx\n  __int64 v20; // rax\n\n  *a3 = 0;\n  if ( !strcmp(a1, \"-\") )\n  {\n    v3 = stdin;\n    byte_60E2F0 = 1;\n    sub_406190(stdin, 2LL);\n    if ( !(unsigned int)sub_406020(v3) )\n      return 1;\nLABEL_9:\n    v6 = 0;\n    v14 = sub_407D00(0LL, 3LL, a1, v4, v5);\n    v15 = __errno_location();\n    error(0, *v15, \"%s\", v14);\n    if ( stdin != v3 )\n      sub_4086E0(v3);\n    return v6;\n  }\n  v8 = a3;\n  v9 = sub_4061C0(a1, 4235053LL);\n  v3 = (FILE *)v9;\n  if ( v9 )\n  {\n    sub_406190(v9, 2LL);\n    if ( !(unsigned int)sub_406020(v3) )\n    {\n      if ( (unsigned int)sub_4086E0(v3) )\n      {\n        v6 = 0;\n        v12 = sub_407D00(0LL, 3LL, a1, v10, v11);\n        v13 = __errno_location();\n        error(0, *v13, \"%s\", v12);\n        return v6;\n      }\n      return 1;\n    }\n    goto LABEL_9;\n  }\n  v16 = __errno_location();\n  v6 = (unsigned __int8)byte_60E2DA;\n  v19 = v16;\n  if ( byte_60E2DA && *v16 == 2 )\n  {\n    *v8 = 1;\n  }\n  else\n  {\n    v6 = 0;\n    v20 = sub_407D00(0LL, 3LL, a1, v17, v18);\n    error(0, *v19, \"%s\", v20);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x402af0L", 
            "funcEndAddr": "0x402c82L", 
            "funcName": "sub_402AF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_402C90(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  char *v19; // rax\n  const char **v20; // rax\n  const char *v21; // rbp\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  const char *v30; // [rsp+0h] [rbp-88h]\n  const char *v31; // [rsp+8h] [rbp-80h]\n  const char *v32; // [rsp+10h] [rbp-78h]\n  const char *v33; // [rsp+18h] [rbp-70h]\n  const char *v34; // [rsp+20h] [rbp-68h]\n  const char *v35; // [rsp+28h] [rbp-60h]\n  const char *v36; // [rsp+30h] [rbp-58h]\n  const char *v37; // [rsp+38h] [rbp-50h]\n  const char *v38; // [rsp+40h] [rbp-48h]\n  const char *v39; // [rsp+48h] [rbp-40h]\n  const char *v40; // [rsp+50h] [rbp-38h]\n  const char *v41; // [rsp+58h] [rbp-30h]\n  __int64 v42; // [rsp+60h] [rbp-28h]\n  __int64 v43; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_60E308;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\n  -b, --binary         read in binary mode\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = dcgettext(0LL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5);\n  __printf_chk(1LL, v8, \"SHA224\");\n  v9 = stdout;\n  v10 = dcgettext(0LL, \"      --tag            create a BSD-style checksum\\n\", 5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(0LL, \"  -t, --text           read in text mode (default)\\n\", 5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The following five options are useful only when verifying checksums:\\n\"\n          \"      --ignore-missing  don't fail or report status for missing files\\n\"\n          \"      --quiet          don't print OK for each successfully verified file\\n\"\n          \"      --status         don't output anything, status code shows success\\n\"\n          \"      --strict         exit non-zero for improperly formatted checksum lines\\n\"\n          \"  -w, --warn           warn about improperly formatted checksum lines\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v18, v17);\n  v19 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The sums are computed as described in %s.  When checking, the input\\n\"\n          \"should be a former output of this program.  The default mode is to print a\\n\"\n          \"line with checksum, a space, a character indicating input mode ('*' for binary,\\n\"\n          \"' ' for text or where binary is insignificant), and name for each FILE.\\n\",\n          5);\n  __printf_chk(1LL, v19, \"RFC 3874\");\n  v30 = \"[\";\n  v20 = &v30;\n  v31 = \"test invocation\";\n  v32 = \"coreutils\";\n  v33 = \"Multi-call invocation\";\n  v34 = \"sha224sum\";\n  v35 = \"sha2 utilities\";\n  v36 = \"sha256sum\";\n  v37 = \"sha2 utilities\";\n  v38 = \"sha384sum\";\n  v39 = \"sha2 utilities\";\n  v40 = \"sha512sum\";\n  v41 = \"sha2 utilities\";\n  v42 = 0LL;\n  v43 = 0LL;\n  do\n    v20 += 2;\n  while ( *v20 && strcmp(\"sha224sum\", *v20) );\n  v21 = v20[1];\n  if ( v21 )\n  {\n    v22 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v22, &unk_409F10);\n    v23 = setlocale(5, 0LL);\n    if ( !v23 || !strncmp(v23, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_409F10);\n    v27 = setlocale(5, 0LL);\n    if ( !v27 || !strncmp(v27, \"en_\", 3uLL) )\n    {\n      v21 = \"sha224sum\";\n      v28 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v28, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v21 = \"sha224sum\";\n  }\n  v29 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v29, \"sha224sum\");\nLABEL_10:\n  v24 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v24, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v25 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v25, v21);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x402c90L", 
            "funcEndAddr": "0x40305dL", 
            "funcName": "sub_402C90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403080()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_409790(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60E2F8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60E300 )\n      {\n        v5 = sub_407CD0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_409790(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x403080L", 
            "funcEndAddr": "0x40311eL", 
            "funcName": "sub_403080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4031C0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 i; // rdx\n\n  result = a2;\n  for ( i = 0LL; i != 32; i += 4LL )\n    *(_DWORD *)(a2 + i) = _byteswap_ulong(*(_DWORD *)(a1 + i));\n  return result;\n}\n", 
            "funcStartAddr": "0x4031c0L", 
            "funcEndAddr": "0x4031dbL", 
            "funcName": "sub_4031C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4031E0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 i; // rdx\n\n  result = a2;\n  for ( i = 0LL; i != 28; i += 4LL )\n    *(_DWORD *)(a2 + i) = _byteswap_ulong(*(_DWORD *)(a1 + i));\n  return result;\n}\n", 
            "funcStartAddr": "0x4031e0L", 
            "funcEndAddr": "0x4031fbL", 
            "funcName": "sub_4031E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403200(unsigned __int64 a1, __int64 a2, unsigned int *a3)\n{\n  unsigned int *v3; // rbx\n  unsigned int v4; // er13\n  unsigned int v5; // er12\n  unsigned int v6; // er10\n  unsigned int v7; // ebp\n  bool v8; // cf\n  unsigned int v9; // ecx\n  unsigned int v10; // er9\n  int v11; // edx\n  unsigned int v12; // er8\n  __int64 result; // rax\n  __int64 i; // rcx\n  int v15; // ecx\n  int v16; // er14\n  int v17; // esi\n  int v18; // edi\n  int v19; // er9\n  int v20; // er8\n  int v21; // edi\n  int v22; // ecx\n  int v23; // ebx\n  int v24; // eax\n  int v25; // edx\n  int v26; // edi\n  int v27; // eax\n  int v28; // esi\n  int v29; // er11\n  int v30; // er9\n  int v31; // er8\n  int v32; // eax\n  int v33; // er9\n  int v34; // ebx\n  int v35; // ecx\n  int v36; // er9\n  int v37; // edi\n  int v38; // edx\n  int v39; // esi\n  int v40; // er11\n  int v41; // er10\n  int v42; // esi\n  int v43; // eax\n  int v44; // er9\n  int v45; // esi\n  int v46; // ecx\n  int v47; // er8\n  int v48; // esi\n  int v49; // edx\n  int v50; // ebx\n  int v51; // edi\n  int v52; // er10\n  int v53; // esi\n  int v54; // eax\n  int v55; // er9\n  int v56; // edi\n  int v57; // eax\n  int v58; // er8\n  int v59; // er14\n  int v60; // eax\n  int v61; // ebx\n  int v62; // ecx\n  unsigned int v63; // er11\n  int v64; // eax\n  int v65; // esi\n  int v66; // edx\n  unsigned int v67; // er10\n  int v68; // eax\n  int v69; // edi\n  int v70; // er13\n  unsigned int v71; // er9\n  int v72; // eax\n  int v73; // er14\n  int v74; // er12\n  unsigned int v75; // er8\n  int v76; // eax\n  int v77; // ecx\n  int v78; // ebp\n  int v79; // eax\n  int v80; // edx\n  int v81; // ebx\n  unsigned int v82; // eax\n  int v83; // esi\n  int v84; // er13\n  int v85; // eax\n  int v86; // esi\n  int v87; // er12\n  int v88; // edi\n  int v89; // ecx\n  int v90; // ebp\n  int v91; // esi\n  int v92; // edx\n  int v93; // ebx\n  int v94; // ecx\n  unsigned int v95; // edx\n  int v96; // er14\n  int v97; // er13\n  int v98; // edx\n  unsigned int v99; // eax\n  int v100; // er14\n  int v101; // er12\n  int v102; // eax\n  int v103; // er14\n  int v104; // ebp\n  int v105; // edi\n  int v106; // er14\n  int v107; // ebx\n  int v108; // esi\n  int v109; // er14\n  int v110; // er13\n  int v111; // ecx\n  unsigned int v112; // edx\n  int v113; // er12\n  int v114; // er14\n  int v115; // edx\n  int v116; // eax\n  int v117; // ebp\n  int v118; // edi\n  int v119; // eax\n  int v120; // ebx\n  int v121; // esi\n  int v122; // er11\n  int v123; // er10\n  int v124; // ebx\n  int v125; // ecx\n  int v126; // er10\n  int v127; // er9\n  int v128; // ebx\n  int v129; // ebp\n  int v130; // er9\n  int v131; // er8\n  int v132; // edx\n  int v133; // eax\n  int v134; // er8\n  unsigned int v135; // er13\n  int v136; // edx\n  int v137; // er11\n  int v138; // ebx\n  int v139; // edx\n  int v140; // er10\n  int v141; // er15\n  int v142; // ecx\n  unsigned int v143; // er12\n  int v144; // ecx\n  unsigned int v145; // ebp\n  int v146; // edx\n  int v147; // er9\n  int v148; // edi\n  unsigned int v149; // er14\n  int v150; // eax\n  int v151; // er8\n  int v152; // esi\n  unsigned int v153; // er13\n  int v154; // eax\n  int v155; // ebx\n  int v156; // er11\n  unsigned int v157; // edx\n  int v158; // eax\n  int v159; // er15\n  int v160; // er10\n  int v161; // ebp\n  unsigned int v162; // er13\n  int v163; // eax\n  int v164; // ebp\n  int v165; // er9\n  int v166; // ecx\n  int v167; // eax\n  int v168; // edx\n  int v169; // esi\n  int v170; // er8\n  int v171; // ecx\n  unsigned int v172; // er12\n  int v173; // esi\n  int v174; // er11\n  int v175; // er13\n  int v176; // edi\n  int v177; // esi\n  int v178; // er14\n  int v179; // er9\n  int v180; // edi\n  int v181; // edx\n  int v182; // eax\n  int v183; // er9\n  int v184; // edi\n  int v185; // ecx\n  int v186; // er10\n  unsigned int v187; // er12\n  int v188; // edi\n  int v189; // er13\n  int v190; // er9\n  unsigned int v191; // ebp\n  int v192; // esi\n  int v193; // er14\n  int v194; // er8\n  int v195; // edx\n  int v196; // eax\n  int v197; // edi\n  int v198; // edx\n  int v199; // er10\n  int v200; // esi\n  int v201; // edx\n  int v202; // er9\n  int v203; // ecx\n  unsigned int v204; // edx\n  int v205; // er13\n  int v206; // er8\n  int v207; // edx\n  int v208; // er13\n  int v209; // edi\n  int v210; // eax\n  int v211; // er12\n  int v212; // esi\n  int v213; // er10\n  unsigned int v214; // ebp\n  int v215; // er12\n  int v216; // ecx\n  int v217; // er9\n  int v218; // er12\n  int v219; // edx\n  int v220; // er12\n  int v221; // er8\n  int v222; // eax\n  int v223; // er8\n  int v224; // ebx\n  int v225; // er10\n  int v226; // ebx\n  int v227; // er11\n  int v228; // er9\n  int v229; // er11\n  int v230; // ecx\n  int v231; // er12\n  int v232; // ecx\n  int v233; // edx\n  int v234; // eax\n  unsigned int v235; // [rsp+0h] [rbp-F8h]\n  unsigned int v236; // [rsp+0h] [rbp-F8h]\n  unsigned int v237; // [rsp+4h] [rbp-F4h]\n  unsigned int v238; // [rsp+4h] [rbp-F4h]\n  unsigned int v239; // [rsp+8h] [rbp-F0h]\n  unsigned int v240; // [rsp+8h] [rbp-F0h]\n  unsigned int v241; // [rsp+Ch] [rbp-ECh]\n  unsigned int v242; // [rsp+10h] [rbp-E8h]\n  unsigned int v243; // [rsp+10h] [rbp-E8h]\n  unsigned int v244; // [rsp+14h] [rbp-E4h]\n  unsigned int v245; // [rsp+14h] [rbp-E4h]\n  unsigned int v246; // [rsp+14h] [rbp-E4h]\n  unsigned int v247; // [rsp+18h] [rbp-E0h]\n  unsigned int v248; // [rsp+18h] [rbp-E0h]\n  unsigned int v249; // [rsp+1Ch] [rbp-DCh]\n  unsigned int v250; // [rsp+1Ch] [rbp-DCh]\n  unsigned int v251; // [rsp+20h] [rbp-D8h]\n  unsigned int v252; // [rsp+20h] [rbp-D8h]\n  unsigned int v253; // [rsp+24h] [rbp-D4h]\n  unsigned int v254; // [rsp+24h] [rbp-D4h]\n  unsigned int v255; // [rsp+28h] [rbp-D0h]\n  unsigned int v256; // [rsp+28h] [rbp-D0h]\n  unsigned int v257; // [rsp+2Ch] [rbp-CCh]\n  unsigned int v258; // [rsp+2Ch] [rbp-CCh]\n  unsigned int v259; // [rsp+30h] [rbp-C8h]\n  unsigned int v260; // [rsp+34h] [rbp-C4h]\n  unsigned __int64 v261; // [rsp+38h] [rbp-C0h]\n  unsigned int v262; // [rsp+40h] [rbp-B8h]\n  unsigned int v263; // [rsp+44h] [rbp-B4h]\n  int v264; // [rsp+48h] [rbp-B0h]\n  int v265; // [rsp+4Ch] [rbp-ACh]\n  int v266; // [rsp+50h] [rbp-A8h]\n  int v267; // [rsp+54h] [rbp-A4h]\n  int v268; // [rsp+58h] [rbp-A0h]\n  int v269; // [rsp+5Ch] [rbp-9Ch]\n  unsigned int v270; // [rsp+60h] [rbp-98h]\n  unsigned int v271; // [rsp+64h] [rbp-94h]\n  unsigned int v272; // [rsp+68h] [rbp-90h]\n  int v273; // [rsp+6Ch] [rbp-8Ch]\n  unsigned __int64 v274; // [rsp+70h] [rbp-88h]\n  int *v275; // [rsp+78h] [rbp-80h]\n  int v276; // [rsp+80h] [rbp-78h]\n  unsigned int v277; // [rsp+84h] [rbp-74h]\n  unsigned int v278; // [rsp+88h] [rbp-70h]\n  unsigned int v279; // [rsp+8Ch] [rbp-6Ch]\n  unsigned int v280; // [rsp+90h] [rbp-68h]\n  unsigned int v281; // [rsp+94h] [rbp-64h]\n  unsigned int v282; // [rsp+98h] [rbp-60h]\n  unsigned int v283; // [rsp+9Ch] [rbp-5Ch]\n  unsigned int v284; // [rsp+A0h] [rbp-58h]\n  unsigned int v285; // [rsp+A4h] [rbp-54h]\n  unsigned int v286; // [rsp+A8h] [rbp-50h]\n  unsigned int v287; // [rsp+ACh] [rbp-4Ch]\n  unsigned int v288; // [rsp+B0h] [rbp-48h]\n  unsigned int v289; // [rsp+B4h] [rbp-44h]\n  unsigned int v290; // [rsp+B8h] [rbp-40h]\n  unsigned int v291; // [rsp+BCh] [rbp-3Ch]\n\n  v3 = a3;\n  v4 = a3[2];\n  v5 = a3[3];\n  v6 = a3[4];\n  v7 = a3[5];\n  v261 = a1;\n  v8 = __CFADD__(a3[8], (_DWORD)a2);\n  v9 = a3[8] + a2;\n  v10 = a3[6];\n  v275 = (int *)a3;\n  v11 = *a3;\n  v3[8] = v9;\n  v12 = v3[7];\n  v274 = a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL);\n  result = v3[1];\n  v3[9] += v8 + HIDWORD(a2);\n  if ( a1 < a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL) )\n  {\n    v269 = v12;\n    v268 = v10;\n    v267 = v7;\n    v266 = v6;\n    v265 = v5;\n    v264 = v4;\n    v263 = result;\n    v273 = v11;\n    do\n    {\n      for ( i = 0LL; i != 64; i += 4LL )\n        *(int *)((char *)&v276 + i) = _byteswap_ulong(*(_DWORD *)(v261 + i));\n      v261 += 64LL;\n      v15 = (__ROR4__(v6, 6) ^ __ROR4__(v6, 11) ^ __ROL4__(v6, 7)) + v276 + v12 + 1116352408 + (v10 ^ v6 & (v10 ^ v7));\n      v16 = v15 + v5;\n      v17 = v15 + (__ROL4__(v11, 10) ^ __ROR4__(v11, 2) ^ __ROR4__(v11, 13)) + (result & v11 | v4 & (result | v11));\n      v18 = (v7 ^ (v15 + v5) & (v7 ^ v6))\n          + v277\n          + v10\n          + 1899447441\n          + (__ROR4__(v15 + v5, 6) ^ __ROR4__(v15 + v5, 11) ^ __ROL4__(v15 + v5, 7));\n      v19 = v18 + v4;\n      v20 = v18 + (__ROL4__(v17, 10) ^ __ROR4__(v17, 2) ^ __ROR4__(v17, 13)) + (v11 & v17 | result & (v11 | v17));\n      v21 = (v6 ^ (v18 + v4) & (v6 ^ (v15 + v5)))\n          + v278\n          + v7\n          - 1245643825\n          + (__ROR4__(v18 + v4, 6) ^ __ROR4__(v18 + v4, 11) ^ __ROL4__(v18 + v4, 7));\n      v22 = v21 + result;\n      v23 = v21 + (__ROL4__(v20, 10) ^ __ROR4__(v20, 2) ^ __ROR4__(v20, 13)) + (v20 & v17 | v11 & (v20 | v17));\n      v24 = (v16 ^ v22 & (v19 ^ v16))\n          + v6\n          + v279\n          - 373957723\n          + (__ROR4__(v21 + result, 6) ^ __ROR4__(v21 + result, 11) ^ __ROL4__(v22, 7));\n      v25 = v24 + v11;\n      v26 = v24 + (__ROL4__(v23, 10) ^ __ROR4__(v23, 2) ^ __ROR4__(v23, 13)) + (v23 & v20 | v17 & (v23 | v20));\n      v27 = (v19 ^ v25 & (v22 ^ v19))\n          + v280\n          + v16\n          + 961987163\n          + (__ROR4__(v25, 6) ^ __ROR4__(v25, 11) ^ __ROL4__(v25, 7));\n      v28 = v27 + v17;\n      v29 = v27 + (__ROL4__(v26, 10) ^ __ROR4__(v26, 2) ^ __ROR4__(v26, 13)) + (v26 & v23 | v20 & (v26 | v23));\n      v30 = v281\n          + v19\n          + 1508970993\n          + (v22 ^ v28 & (v25 ^ v22))\n          + (__ROR4__(v28, 6) ^ __ROR4__(v28, 11) ^ __ROL4__(v28, 7));\n      v31 = v30 + v20;\n      v32 = v30 + (__ROL4__(v29, 10) ^ __ROR4__(v29, 2) ^ __ROR4__(v29, 13)) + (v29 & v26 | v23 & (v29 | v26));\n      v33 = (v25 ^ v31 & (v28 ^ v25))\n          + v282\n          + v22\n          - 1841331548\n          + (__ROR4__(v31, 6) ^ __ROR4__(v31, 11) ^ __ROL4__(v31, 7));\n      v34 = v33 + v23;\n      v35 = v33 + (__ROL4__(v32, 10) ^ __ROR4__(v32, 2) ^ __ROR4__(v32, 13)) + (v32 & v29 | v26 & (v32 | v29));\n      v36 = (v28 ^ v34 & (v31 ^ v28))\n          + v283\n          + v25\n          - 1424204075\n          + (__ROR4__(v34, 6) ^ __ROR4__(v34, 11) ^ __ROL4__(v34, 7));\n      v37 = v36 + v26;\n      v38 = v36 + (__ROL4__(v35, 10) ^ __ROR4__(v35, 2) ^ __ROR4__(v35, 13)) + (v35 & v32 | v29 & (v35 | v32));\n      v39 = v284\n          + v28\n          - 670586216\n          + (v31 ^ v37 & (v34 ^ v31))\n          + (__ROR4__(v37, 6) ^ __ROR4__(v37, 11) ^ __ROL4__(v37, 7));\n      v40 = v39 + v29;\n      v41 = v39 + (__ROL4__(v38, 10) ^ __ROR4__(v38, 2) ^ __ROR4__(v38, 13)) + (v38 & v35 | v32 & (v38 | v35));\n      v42 = (v34 ^ v40 & (v37 ^ v34))\n          + v285\n          + v31\n          + 310598401\n          + (__ROR4__(v40, 6) ^ __ROR4__(v40, 11) ^ __ROL4__(v40, 7));\n      v43 = v42 + v32;\n      v44 = v42 + (__ROL4__(v41, 10) ^ __ROR4__(v41, 2) ^ __ROR4__(v41, 13)) + (v41 & v38 | v35 & (v41 | v38));\n      v45 = (v37 ^ v43 & (v40 ^ v37))\n          + v286\n          + v34\n          + 607225278\n          + (__ROR4__(v43, 6) ^ __ROR4__(v43, 11) ^ __ROL4__(v43, 7));\n      v46 = v45 + v35;\n      v47 = v45 + (__ROL4__(v44, 10) ^ __ROR4__(v44, 2) ^ __ROR4__(v44, 13)) + (v44 & v41 | v38 & (v44 | v41));\n      v48 = (v40 ^ v46 & (v43 ^ v40))\n          + v287\n          + v37\n          + 1426881987\n          + (__ROR4__(v46, 6) ^ __ROR4__(v46, 11) ^ __ROL4__(v46, 7));\n      v49 = v48 + v38;\n      v50 = v48 + (__ROL4__(v47, 10) ^ __ROR4__(v47, 2) ^ __ROR4__(v47, 13)) + (v47 & v44 | v41 & (v47 | v44));\n      v51 = (v43 ^ v49 & (v46 ^ v43))\n          + v288\n          + v40\n          + 1925078388\n          + (__ROR4__(v49, 6) ^ __ROR4__(v49, 11) ^ __ROL4__(v49, 7));\n      v52 = v51 + v41;\n      v53 = v51 + (__ROL4__(v50, 10) ^ __ROR4__(v50, 2) ^ __ROR4__(v50, 13)) + (v50 & v47 | v44 & (v50 | v47));\n      v54 = v289\n          + v43\n          - 2132889090\n          + (v46 ^ v52 & (v49 ^ v46))\n          + (__ROR4__(v52, 6) ^ __ROR4__(v52, 11) ^ __ROL4__(v52, 7));\n      v55 = v54 + v44;\n      v56 = v54 + (__ROL4__(v53, 10) ^ __ROR4__(v53, 2) ^ __ROR4__(v53, 13)) + (v53 & v50 | v47 & (v53 | v50));\n      v57 = (v49 ^ v55 & (v52 ^ v49))\n          + v290\n          + v46\n          - 1680079193\n          + (__ROR4__(v55, 6) ^ __ROR4__(v55, 11) ^ __ROL4__(v55, 7));\n      v58 = v57 + v47;\n      v59 = v57 + (__ROL4__(v56, 10) ^ __ROR4__(v56, 2) ^ __ROR4__(v56, 13)) + (v56 & v53 | v50 & (v56 | v53));\n      v60 = (v52 ^ v58 & (v55 ^ v52))\n          + v291\n          + v49\n          - 1046744716\n          + (__ROR4__(v58, 6) ^ __ROR4__(v58, 11) ^ __ROL4__(v58, 7));\n      v61 = v60 + v50;\n      v62 = v60 + (__ROL4__(v59, 10) ^ __ROR4__(v59, 2) ^ __ROR4__(v59, 13)) + (v59 & v56 | v53 & (v59 | v56));\n      v63 = (__ROL4__(v290, 15) ^ __ROL4__(v290, 13) ^ (v290 >> 10))\n          + v285\n          + v276\n          + ((v277 >> 3) ^ __ROR4__(v277, 7) ^ __ROL4__(v277, 14));\n      v64 = (v55 ^ v61 & (v58 ^ v55))\n          + v52\n          + v63\n          - 459576895\n          + (__ROR4__(v61, 6) ^ __ROR4__(v61, 11) ^ __ROL4__(v61, 7));\n      v65 = v64 + v53;\n      v66 = v64 + (__ROL4__(v62, 10) ^ __ROR4__(v62, 2) ^ __ROR4__(v62, 13)) + (v62 & v59 | v56 & (v62 | v59));\n      v67 = (__ROL4__(v291, 15) ^ __ROL4__(v291, 13) ^ (v291 >> 10))\n          + v277\n          + v286\n          + ((v278 >> 3) ^ __ROR4__(v278, 7) ^ __ROL4__(v278, 14));\n      v68 = (v58 ^ v65 & (v61 ^ v58))\n          + v55\n          + v67\n          - 272742522\n          + (__ROR4__(v65, 6) ^ __ROR4__(v65, 11) ^ __ROL4__(v65, 7));\n      v69 = v68 + v56;\n      v70 = v68 + (__ROL4__(v66, 10) ^ __ROR4__(v66, 2) ^ __ROR4__(v66, 13)) + (v66 & v62 | v59 & (v66 | v62));\n      v71 = (__ROL4__(v63, 15) ^ __ROL4__(v63, 13) ^ (v63 >> 10))\n          + v278\n          + v287\n          + (__ROL4__(v279, 14) ^ __ROR4__(v279, 7) ^ (v279 >> 3));\n      v72 = (v61 ^ v69 & (v65 ^ v61))\n          + v58\n          + v71\n          + 264347078\n          + (__ROR4__(v69, 6) ^ __ROR4__(v69, 11) ^ __ROL4__(v69, 7));\n      v73 = v72 + v59;\n      v74 = v72 + (__ROL4__(v70, 10) ^ __ROR4__(v70, 2) ^ __ROR4__(v70, 13)) + (v70 & v66 | v62 & (v70 | v66));\n      v75 = (__ROL4__(v67, 15) ^ __ROL4__(v67, 13) ^ (v67 >> 10))\n          + v288\n          + v279\n          + (__ROL4__(v280, 14) ^ __ROR4__(v280, 7) ^ (v280 >> 3));\n      v76 = (v65 ^ v73 & (v69 ^ v65))\n          + v61\n          + v75\n          + 604807628\n          + (__ROR4__(v73, 6) ^ __ROR4__(v73, 11) ^ __ROL4__(v73, 7));\n      v77 = v76 + v62;\n      v78 = v76 + (__ROL4__(v74, 10) ^ __ROR4__(v74, 2) ^ __ROR4__(v74, 13)) + (v74 & v70 | v66 & (v74 | v70));\n      v235 = (__ROL4__(v281, 14) ^ __ROR4__(v281, 7) ^ (v281 >> 3))\n           + v289\n           + v280\n           + ((v71 >> 10) ^ __ROL4__(v71, 15) ^ __ROL4__(v71, 13));\n      v79 = (v69 ^ v77 & (v73 ^ v69))\n          + v65\n          + v235\n          + 770255983\n          + (__ROR4__(v77, 6) ^ __ROR4__(v77, 11) ^ __ROL4__(v77, 7));\n      v80 = v79 + v66;\n      v81 = v79 + (__ROL4__(v78, 10) ^ __ROR4__(v78, 2) ^ __ROR4__(v78, 13)) + (v78 & v74 | v70 & (v78 | v74));\n      v82 = ((v75 >> 10) ^ __ROL4__(v75, 15) ^ __ROL4__(v75, 13))\n          + (__ROL4__(v282, 14) ^ __ROR4__(v282, 7) ^ (v282 >> 3))\n          + v290\n          + v281;\n      v237 = v82;\n      v83 = (v73 ^ v80 & (v77 ^ v73))\n          + v69\n          + v82\n          + 1249150122\n          + (__ROR4__(v80, 6) ^ __ROR4__(v80, 11) ^ __ROL4__(v80, 7));\n      v84 = v83 + v70;\n      v85 = v83 + (__ROL4__(v81, 10) ^ __ROR4__(v81, 2) ^ __ROR4__(v81, 13)) + (v81 & v78 | v74 & (v81 | v78));\n      v239 = (__ROL4__(v283, 14) ^ __ROR4__(v283, 7) ^ (v283 >> 3))\n           + v291\n           + v282\n           + ((v235 >> 10) ^ __ROL4__(v235, 15) ^ __ROL4__(v235, 13));\n      v86 = (v77 ^ v84 & (v80 ^ v77))\n          + v73\n          + v239\n          + 1555081692\n          + (__ROR4__(v84, 6) ^ __ROR4__(v84, 11) ^ __ROL4__(v84, 7));\n      v87 = v86 + v74;\n      v88 = v86 + (__ROL4__(v85, 10) ^ __ROR4__(v85, 2) ^ __ROR4__(v85, 13)) + (v85 & v81 | v78 & (v85 | v81));\n      v242 = ((v237 >> 10) ^ __ROL4__(v237, 15) ^ __ROL4__(v237, 13))\n           + v63\n           + v283\n           + ((v284 >> 3) ^ __ROR4__(v284, 7) ^ __ROL4__(v284, 14));\n      v89 = v77\n          + v242\n          + 1996064986\n          + (v80 ^ v87 & (v84 ^ v80))\n          + (__ROR4__(v87, 6) ^ __ROR4__(v87, 11) ^ __ROL4__(v87, 7));\n      v90 = v89 + v78;\n      v91 = v89 + (__ROL4__(v88, 10) ^ __ROR4__(v88, 2) ^ __ROR4__(v88, 13)) + (v88 & v85 | v81 & (v88 | v85));\n      v244 = ((v239 >> 10) ^ __ROL4__(v239, 15) ^ __ROL4__(v239, 13))\n           + v67\n           + v284\n           + ((v285 >> 3) ^ __ROR4__(v285, 7) ^ __ROL4__(v285, 14));\n      v92 = v80\n          + v244\n          - 1740746414\n          + (v84 ^ v90 & (v87 ^ v84))\n          + (__ROR4__(v90, 6) ^ __ROR4__(v90, 11) ^ __ROL4__(v90, 7));\n      v93 = v92 + v81;\n      v94 = v92 + (__ROL4__(v91, 10) ^ __ROR4__(v91, 2) ^ __ROR4__(v91, 13)) + (v91 & v88 | v85 & (v91 | v88));\n      v95 = ((v242 >> 10) ^ __ROL4__(v242, 15) ^ __ROL4__(v242, 13))\n          + v71\n          + v285\n          + ((v286 >> 3) ^ __ROR4__(v286, 7) ^ __ROL4__(v286, 14));\n      v247 = v95;\n      v96 = (v87 ^ v93 & (v90 ^ v87))\n          + v84\n          + v95\n          - 1473132947\n          + (__ROR4__(v93, 6) ^ __ROR4__(v93, 11) ^ __ROL4__(v93, 7));\n      v97 = v85 + v96;\n      v98 = v96 + (__ROL4__(v94, 10) ^ __ROR4__(v94, 2) ^ __ROR4__(v94, 13)) + (v94 & v91 | v88 & (v94 | v91));\n      v99 = ((v244 >> 10) ^ __ROL4__(v244, 15) ^ __ROL4__(v244, 13))\n          + v75\n          + v286\n          + ((v287 >> 3) ^ __ROR4__(v287, 7) ^ __ROL4__(v287, 14));\n      v249 = v99;\n      v100 = (v90 ^ v97 & (v93 ^ v90))\n           + v87\n           + v99\n           - 1341970488\n           + (__ROR4__(v97, 6) ^ __ROR4__(v97, 11) ^ __ROL4__(v97, 7));\n      v101 = v88 + v100;\n      v102 = v100 + (__ROL4__(v98, 10) ^ __ROR4__(v98, 2) ^ __ROR4__(v98, 13)) + (v98 & v94 | v91 & (v98 | v94));\n      v251 = ((v247 >> 10) ^ __ROL4__(v247, 15) ^ __ROL4__(v247, 13))\n           + v235\n           + v287\n           + ((v288 >> 3) ^ __ROR4__(v288, 7) ^ __ROL4__(v288, 14));\n      v103 = (v93 ^ v101 & (v97 ^ v93))\n           + v90\n           + v251\n           - 1084653625\n           + (__ROR4__(v101, 6) ^ __ROR4__(v101, 11) ^ __ROL4__(v101, 7));\n      v104 = v91 + v103;\n      v105 = v103 + (__ROL4__(v102, 10) ^ __ROR4__(v102, 2) ^ __ROR4__(v102, 13)) + (v102 & v98 | v94 & (v102 | v98));\n      v253 = ((v249 >> 10) ^ __ROL4__(v249, 15) ^ __ROL4__(v249, 13))\n           + v237\n           + v288\n           + ((v289 >> 3) ^ __ROR4__(v289, 7) ^ __ROL4__(v289, 14));\n      v106 = (v97 ^ v104 & (v101 ^ v97))\n           + v93\n           + v253\n           - 958395405\n           + (__ROR4__(v104, 6) ^ __ROR4__(v104, 11) ^ __ROL4__(v104, 7));\n      v107 = v94 + v106;\n      v108 = v106 + (__ROL4__(v105, 10) ^ __ROR4__(v105, 2) ^ __ROR4__(v105, 13)) + (v105 & v102 | v98 & (v105 | v102));\n      v255 = ((v251 >> 10) ^ __ROL4__(v251, 15) ^ __ROL4__(v251, 13))\n           + v239\n           + v289\n           + ((v290 >> 3) ^ __ROR4__(v290, 7) ^ __ROL4__(v290, 14));\n      v109 = (v101 ^ v107 & (v104 ^ v101))\n           + v97\n           + v255\n           - 710438585\n           + (__ROR4__(v107, 6) ^ __ROR4__(v107, 11) ^ __ROL4__(v107, 7));\n      v110 = v98 + v109;\n      v111 = v109 + (__ROL4__(v108, 10) ^ __ROR4__(v108, 2) ^ __ROR4__(v108, 13)) + (v108 & v105 | v102 & (v108 | v105));\n      v112 = ((v253 >> 10) ^ __ROL4__(v253, 15) ^ __ROL4__(v253, 13))\n           + v242\n           + v290\n           + ((v291 >> 3) ^ __ROR4__(v291, 7) ^ __ROL4__(v291, 14));\n      v257 = v112;\n      v113 = v101\n           + v112\n           + 113926993\n           + (v104 ^ v110 & (v107 ^ v104))\n           + (__ROR4__(v110, 6) ^ __ROR4__(v110, 11) ^ __ROL4__(v110, 7));\n      v114 = v102 + v113;\n      v115 = v113 + (__ROL4__(v111, 10) ^ __ROR4__(v111, 2) ^ __ROR4__(v111, 13)) + (v111 & v108 | v105 & (v111 | v108));\n      v116 = ((v255 >> 10) ^ __ROL4__(v255, 15) ^ __ROL4__(v255, 13))\n           + v244\n           + v291\n           + ((v63 >> 3) ^ __ROR4__(v63, 7) ^ __ROL4__(v63, 14));\n      v259 = v116;\n      v117 = v104\n           + v116\n           + 338241895\n           + (v107 ^ v114 & (v110 ^ v107))\n           + (__ROR4__(v114, 6) ^ __ROR4__(v114, 11) ^ __ROL4__(v114, 7));\n      v118 = v117 + v105;\n      v119 = v117 + (__ROL4__(v115, 10) ^ __ROR4__(v115, 2) ^ __ROR4__(v115, 13)) + (v115 & v111 | v108 & (v115 | v111));\n      v270 = ((v257 >> 10) ^ __ROL4__(v257, 15) ^ __ROL4__(v257, 13))\n           + v247\n           + ((v67 >> 3) ^ __ROR4__(v67, 7) ^ __ROL4__(v67, 14))\n           + v63;\n      v120 = v107\n           + v270\n           + 666307205\n           + (v110 ^ v118 & (v114 ^ v110))\n           + (__ROR4__(v118, 6) ^ __ROR4__(v118, 11) ^ __ROL4__(v118, 7));\n      v121 = v120 + v108;\n      v122 = v120 + (__ROL4__(v119, 10) ^ __ROR4__(v119, 2) ^ __ROR4__(v119, 13)) + (v119 & v115 | v111 & (v119 | v115));\n      v123 = ((v259 >> 10) ^ __ROL4__(v259, 15) ^ __ROL4__(v259, 13))\n           + v249\n           + ((v71 >> 3) ^ __ROR4__(v71, 7) ^ __ROL4__(v71, 14))\n           + v67;\n      v260 = v123;\n      v124 = (v114 ^ v121 & (v118 ^ v114))\n           + v110\n           + v123\n           + 773529912\n           + (__ROR4__(v121, 6) ^ __ROR4__(v121, 11) ^ __ROL4__(v121, 7));\n      v125 = v124 + v111;\n      v126 = v124 + (__ROL4__(v122, 10) ^ __ROR4__(v122, 2) ^ __ROR4__(v122, 13)) + (v122 & v119 | v115 & (v122 | v119));\n      v127 = ((v270 >> 10) ^ __ROL4__(v270, 15) ^ __ROL4__(v270, 13))\n           + v251\n           + ((v75 >> 3) ^ __ROR4__(v75, 7) ^ __ROL4__(v75, 14))\n           + v71;\n      v271 = v127;\n      v128 = (v118 ^ v125 & (v121 ^ v118))\n           + v114\n           + v127\n           + 1294757372\n           + (__ROR4__(v125, 6) ^ __ROR4__(v125, 11) ^ __ROL4__(v125, 7));\n      v129 = v115 + v128;\n      v130 = v128 + (__ROL4__(v126, 10) ^ __ROR4__(v126, 2) ^ __ROR4__(v126, 13)) + (v126 & v122 | v119 & (v126 | v122));\n      v131 = ((v260 >> 10) ^ __ROL4__(v260, 15) ^ __ROL4__(v260, 13))\n           + v253\n           + ((v235 >> 3) ^ __ROR4__(v235, 7) ^ __ROL4__(v235, 14))\n           + v75;\n      v272 = v131;\n      v132 = (v121 ^ (v115 + v128) & (v125 ^ v121))\n           + v118\n           + v131\n           + 1396182291\n           + (__ROR4__(v115 + v128, 6) ^ __ROR4__(v115 + v128, 11) ^ __ROL4__(v115 + v128, 7));\n      v133 = v132 + v119;\n      v134 = v132 + (__ROL4__(v130, 10) ^ __ROR4__(v130, 2) ^ __ROR4__(v130, 13)) + (v130 & v126 | v122 & (v130 | v126));\n      v135 = v255\n           + v235\n           + ((v237 >> 3) ^ __ROR4__(v237, 7) ^ __ROL4__(v237, 14))\n           + ((v271 >> 10) ^ __ROL4__(v271, 15) ^ __ROL4__(v271, 13));\n      v136 = (v125 ^ v133 & (v129 ^ v125))\n           + v121\n           + v135\n           + 1695183700\n           + (__ROR4__(v133, 6) ^ __ROR4__(v133, 11) ^ __ROL4__(v133, 7));\n      v137 = v136 + v122;\n      v138 = v136 + (__ROL4__(v134, 10) ^ __ROR4__(v134, 2) ^ __ROR4__(v134, 13)) + (v134 & v130 | v126 & (v134 | v130));\n      v241 = v257\n           + v237\n           + ((v239 >> 3) ^ __ROR4__(v239, 7) ^ __ROL4__(v239, 14))\n           + ((v272 >> 10) ^ __ROL4__(v272, 15) ^ __ROL4__(v272, 13));\n      v262 = v135;\n      v139 = (v129 ^ v137 & (v133 ^ v129))\n           + v125\n           + v241\n           + 1986661051\n           + (__ROR4__(v137, 6) ^ __ROR4__(v137, 11) ^ __ROL4__(v137, 7));\n      v140 = v139 + v126;\n      v141 = v139 + (__ROL4__(v138, 10) ^ __ROR4__(v138, 2) ^ __ROR4__(v138, 13)) + (v138 & v134 | v130 & (v138 | v134));\n      v142 = ((v135 >> 10) ^ __ROL4__(v135, 15) ^ __ROL4__(v135, 13))\n           + v259\n           + v239\n           + ((v242 >> 3) ^ __ROR4__(v242, 7) ^ __ROL4__(v242, 14));\n      v143 = v142;\n      v144 = v129 + v142 - 2117940946;\n      v145 = v244;\n      v245 = v143;\n      v146 = (v133 ^ v140 & (v137 ^ v133)) + v144 + (__ROR4__(v140, 6) ^ __ROR4__(v140, 11) ^ __ROL4__(v140, 7));\n      v147 = v146 + v130;\n      v148 = v146 + (__ROL4__(v141, 10) ^ __ROR4__(v141, 2) ^ __ROR4__(v141, 13)) + (v141 & v138 | v134 & (v141 | v138));\n      v149 = v247;\n      v236 = ((v241 >> 10) ^ __ROL4__(v241, 15) ^ __ROL4__(v241, 13))\n           + v270\n           + v242\n           + ((v145 >> 3) ^ __ROR4__(v145, 7) ^ __ROL4__(v145, 14));\n      v150 = v133\n           + v236\n           - 1838011259\n           + (v137 ^ v147 & (v140 ^ v137))\n           + (__ROR4__(v147, 6) ^ __ROR4__(v147, 11) ^ __ROL4__(v147, 7));\n      v151 = v150 + v134;\n      v152 = v150 + (__ROL4__(v148, 10) ^ __ROR4__(v148, 2) ^ __ROR4__(v148, 13)) + (v148 & v141 | v138 & (v148 | v141));\n      v153 = v260\n           + v145\n           + ((v247 >> 3) ^ __ROR4__(v247, 7) ^ __ROL4__(v247, 14))\n           + ((v143 >> 10) ^ __ROL4__(v143, 15) ^ __ROL4__(v143, 13));\n      v248 = v153;\n      v154 = (v140 ^ v151 & (v147 ^ v140))\n           + v137\n           + v153\n           - 1564481375\n           + (__ROR4__(v151, 6) ^ __ROR4__(v151, 11) ^ __ROL4__(v151, 7));\n      v155 = v154 + v138;\n      v156 = v154 + (__ROL4__(v152, 10) ^ __ROR4__(v152, 2) ^ __ROR4__(v152, 13)) + (v152 & v148 | v141 & (v152 | v148));\n      v157 = ((v236 >> 10) ^ __ROL4__(v236, 15) ^ __ROL4__(v236, 13))\n           + v271\n           + v149\n           + ((v249 >> 3) ^ __ROR4__(v249, 7) ^ __ROL4__(v249, 14));\n      v238 = v157;\n      v158 = (v147 ^ v155 & (v151 ^ v147))\n           + v140\n           + v157\n           - 1474664885\n           + (__ROR4__(v155, 6) ^ __ROR4__(v155, 11) ^ __ROL4__(v155, 7));\n      v159 = v158 + v141;\n      v160 = v158 + (__ROL4__(v156, 10) ^ __ROR4__(v156, 2) ^ __ROR4__(v156, 13)) + (v156 & v152 | v148 & (v156 | v152));\n      v161 = ((v153 >> 10) ^ __ROL4__(v153, 15) ^ __ROL4__(v153, 13))\n           + v272\n           + v249\n           + ((v251 >> 3) ^ __ROR4__(v251, 7) ^ __ROL4__(v251, 14));\n      v162 = v161;\n      v250 = v161;\n      v163 = (v151 ^ v159 & (v155 ^ v151))\n           + v147\n           + v161\n           - 1035236496\n           + (__ROR4__(v159, 6) ^ __ROR4__(v159, 11) ^ __ROL4__(v159, 7));\n      v164 = v148 + v163;\n      v165 = v163 + (__ROL4__(v160, 10) ^ __ROR4__(v160, 2) ^ __ROR4__(v160, 13)) + (v160 & v156 | v152 & (v160 | v156));\n      v240 = ((v157 >> 10) ^ __ROL4__(v157, 15) ^ __ROL4__(v157, 13))\n           + v262\n           + v251\n           + ((v253 >> 3) ^ __ROR4__(v253, 7) ^ __ROL4__(v253, 14));\n      v166 = (v155 ^ v164 & (v159 ^ v155))\n           + v151\n           + v240\n           - 949202525\n           + (__ROR4__(v164, 6) ^ __ROR4__(v164, 11) ^ __ROL4__(v164, 7));\n      v167 = v152 + v166;\n      v168 = v166 + (__ROL4__(v165, 10) ^ __ROR4__(v165, 2) ^ __ROR4__(v165, 13)) + (v165 & v160 | v156 & (v165 | v160));\n      v243 = v241\n           + v253\n           + ((v255 >> 3) ^ __ROR4__(v255, 7) ^ __ROL4__(v255, 14))\n           + ((v162 >> 10) ^ __ROL4__(v162, 15) ^ __ROL4__(v162, 13));\n      v169 = (v159 ^ v167 & (v164 ^ v159))\n           + v155\n           + v243\n           - 778901479\n           + (__ROR4__(v167, 6) ^ __ROR4__(v167, 11) ^ __ROL4__(v167, 7));\n      v170 = v156 + v169;\n      v171 = v169 + (__ROL4__(v168, 10) ^ __ROR4__(v168, 2) ^ __ROR4__(v168, 13)) + (v168 & v165 | v160 & (v168 | v165));\n      v172 = ((v240 >> 10) ^ __ROL4__(v240, 15) ^ __ROL4__(v240, 13))\n           + v143\n           + v255\n           + ((v257 >> 3) ^ __ROR4__(v257, 7) ^ __ROL4__(v257, 14));\n      v252 = v172;\n      v173 = (v164 ^ (v156 + v169) & (v167 ^ v164))\n           + v159\n           + v172\n           - 694614492\n           + (__ROR4__(v156 + v169, 6) ^ __ROR4__(v156 + v169, 11) ^ __ROL4__(v156 + v169, 7));\n      v174 = v160 + v173;\n      v175 = v173 + (__ROL4__(v171, 10) ^ __ROR4__(v171, 2) ^ __ROR4__(v171, 13)) + (v171 & v168 | v165 & (v171 | v168));\n      v254 = ((v243 >> 10) ^ __ROL4__(v243, 15) ^ __ROL4__(v243, 13))\n           + v236\n           + v257\n           + ((v259 >> 3) ^ __ROR4__(v259, 7) ^ __ROL4__(v259, 14));\n      v176 = (v167 ^ v174 & (v170 ^ v167))\n           + v164\n           + v254\n           - 200395387\n           + (__ROR4__(v174, 6) ^ __ROR4__(v174, 11) ^ __ROL4__(v174, 7));\n      v177 = v165 + v176;\n      v178 = v176 + (__ROL4__(v175, 10) ^ __ROR4__(v175, 2) ^ __ROR4__(v175, 13)) + (v175 & v171 | v168 & (v175 | v171));\n      v179 = v248\n           + v259\n           + ((v270 >> 3) ^ __ROR4__(v270, 7) ^ __ROL4__(v270, 14))\n           + ((v172 >> 10) ^ __ROL4__(v172, 15) ^ __ROL4__(v172, 13));\n      v258 = v179;\n      v180 = (v170 ^ v177 & (v174 ^ v170))\n           + v167\n           + v179\n           + 275423344\n           + (__ROR4__(v177, 6) ^ __ROR4__(v177, 11) ^ __ROL4__(v177, 7));\n      v181 = v180 + v168;\n      v182 = v180 + (__ROL4__(v178, 10) ^ __ROR4__(v178, 2) ^ __ROR4__(v178, 13)) + (v178 & v175 | v171 & (v178 | v175));\n      v183 = v238\n           + v270\n           + ((v260 >> 3) ^ __ROR4__(v260, 7) ^ __ROL4__(v260, 14))\n           + ((v254 >> 10) ^ __ROL4__(v254, 15) ^ __ROL4__(v254, 13));\n      v256 = v183;\n      v276 = v183;\n      v184 = (v174 ^ v181 & (v177 ^ v174))\n           + v170\n           + v183\n           + 430227734\n           + (__ROR4__(v181, 6) ^ __ROR4__(v181, 11) ^ __ROL4__(v181, 7));\n      v185 = v184 + v171;\n      v186 = v184 + (__ROL4__(v182, 10) ^ __ROR4__(v182, 2) ^ __ROR4__(v182, 13)) + (v182 & v178 | v175 & (v182 | v178));\n      v187 = v250\n           + v260\n           + ((v271 >> 3) ^ __ROR4__(v271, 7) ^ __ROL4__(v271, 14))\n           + ((v258 >> 10) ^ __ROL4__(v258, 15) ^ __ROL4__(v258, 13));\n      v277 = v187;\n      v188 = (v177 ^ v185 & (v181 ^ v177))\n           + v174\n           + v187\n           + 506948616\n           + (__ROR4__(v185, 6) ^ __ROR4__(v185, 11) ^ __ROL4__(v185, 7));\n      v189 = v188 + v175;\n      v190 = v188 + (__ROL4__(v186, 10) ^ __ROR4__(v186, 2) ^ __ROR4__(v186, 13)) + (v186 & v182 | v178 & (v186 | v182));\n      v191 = v240\n           + v271\n           + ((v272 >> 3) ^ __ROR4__(v272, 7) ^ __ROL4__(v272, 14))\n           + ((v256 >> 10) ^ __ROL4__(v256, 15) ^ __ROL4__(v256, 13));\n      v278 = v191;\n      v192 = v177\n           + v191\n           + 659060556\n           + (v181 ^ v189 & (v185 ^ v181))\n           + (__ROR4__(v189, 6) ^ __ROR4__(v189, 11) ^ __ROL4__(v189, 7));\n      v193 = v192 + v178;\n      v194 = v192 + (__ROL4__(v190, 10) ^ __ROR4__(v190, 2) ^ __ROR4__(v190, 13)) + (v190 & v186 | v182 & (v190 | v186));\n      v279 = v243\n           + v272\n           + ((v262 >> 3) ^ __ROR4__(v262, 7) ^ __ROL4__(v262, 14))\n           + ((v187 >> 10) ^ __ROL4__(v187, 15) ^ __ROL4__(v187, 13));\n      v195 = v181\n           + v279\n           + 883997877\n           + (v185 ^ v193 & (v189 ^ v185))\n           + (__ROR4__(v193, 6) ^ __ROR4__(v193, 11) ^ __ROL4__(v193, 7));\n      v196 = v195 + v182;\n      v197 = v195 + (__ROL4__(v194, 10) ^ __ROR4__(v194, 2) ^ __ROR4__(v194, 13)) + (v194 & v190 | v186 & (v194 | v190));\n      v280 = v252\n           + v262\n           + ((v241 >> 3) ^ __ROR4__(v241, 7) ^ __ROL4__(v241, 14))\n           + ((v191 >> 10) ^ __ROL4__(v191, 15) ^ __ROL4__(v191, 13));\n      v198 = (v189 ^ v196 & (v193 ^ v189))\n           + v185\n           + v280\n           + 958139571\n           + (__ROR4__(v196, 6) ^ __ROR4__(v196, 11) ^ __ROL4__(v196, 7));\n      v199 = v198 + v186;\n      v200 = v198 + (__ROL4__(v197, 10) ^ __ROR4__(v197, 2) ^ __ROR4__(v197, 13)) + (v197 & v194 | v190 & (v197 | v194));\n      v281 = v254\n           + v241\n           + ((v245 >> 3) ^ __ROR4__(v245, 7) ^ __ROL4__(v245, 14))\n           + ((v279 >> 10) ^ __ROL4__(v279, 15) ^ __ROL4__(v279, 13));\n      v201 = (v193 ^ v199 & (v196 ^ v193))\n           + v189\n           + v281\n           + 1322822218\n           + (__ROR4__(v199, 6) ^ __ROR4__(v199, 11) ^ __ROL4__(v199, 7));\n      v202 = v201 + v190;\n      v203 = v201 + (__ROL4__(v200, 10) ^ __ROR4__(v200, 2) ^ __ROR4__(v200, 13)) + (v200 & v197 | v194 & (v200 | v197));\n      v204 = ((v280 >> 10) ^ __ROL4__(v280, 15) ^ __ROL4__(v280, 13))\n           + v258\n           + v245\n           + ((v236 >> 3) ^ __ROR4__(v236, 7) ^ __ROL4__(v236, 14));\n      v282 = v204;\n      v246 = v204;\n      v205 = (v196 ^ v202 & (v199 ^ v196))\n           + v193\n           + v204\n           + 1537002063\n           + (__ROR4__(v202, 6) ^ __ROR4__(v202, 11) ^ __ROL4__(v202, 7));\n      v206 = v205 + v194;\n      v207 = v205 + (__ROL4__(v203, 10) ^ __ROR4__(v203, 2) ^ __ROR4__(v203, 13)) + (v203 & v200 | v197 & (v203 | v200));\n      v283 = v256\n           + v236\n           + ((v248 >> 3) ^ __ROR4__(v248, 7) ^ __ROL4__(v248, 14))\n           + ((v281 >> 10) ^ __ROL4__(v281, 15) ^ __ROL4__(v281, 13));\n      v208 = (v199 ^ v206 & (v202 ^ v199))\n           + v196\n           + v283\n           + 1747873779\n           + (__ROR4__(v206, 6) ^ __ROR4__(v206, 11) ^ __ROL4__(v206, 7));\n      v209 = v208 + v197;\n      v210 = v208 + (__ROL4__(v207, 10) ^ __ROR4__(v207, 2) ^ __ROR4__(v207, 13)) + (v207 & v203 | v200 & (v207 | v203));\n      v284 = ((v246 >> 10) ^ __ROL4__(v246, 15) ^ __ROL4__(v246, 13))\n           + v248\n           + ((v238 >> 3) ^ __ROR4__(v238, 7) ^ __ROL4__(v238, 14))\n           + v187;\n      v211 = (v202 ^ v209 & (v206 ^ v202))\n           + v199\n           + v284\n           + 1955562222\n           + (__ROR4__(v209, 6) ^ __ROR4__(v209, 11) ^ __ROL4__(v209, 7));\n      v212 = v211 + v200;\n      v213 = v211 + (__ROL4__(v210, 10) ^ __ROR4__(v210, 2) ^ __ROR4__(v210, 13)) + (v210 & v207 | v203 & (v210 | v207));\n      v214 = ((v283 >> 10) ^ __ROL4__(v283, 15) ^ __ROL4__(v283, 13))\n           + v238\n           + ((v250 >> 3) ^ __ROR4__(v250, 7) ^ __ROL4__(v250, 14))\n           + v191;\n      v285 = v214;\n      v215 = (v206 ^ v212 & (v209 ^ v206))\n           + v202\n           + v214\n           + 2024104815\n           + (__ROR4__(v212, 6) ^ __ROR4__(v212, 11) ^ __ROL4__(v212, 7));\n      v216 = v215 + v203;\n      v217 = v215 + (__ROL4__(v213, 10) ^ __ROR4__(v213, 2) ^ __ROR4__(v213, 13)) + (v213 & v210 | v207 & (v213 | v210));\n      v286 = ((v284 >> 10) ^ __ROL4__(v284, 15) ^ __ROL4__(v284, 13))\n           + v250\n           + ((v240 >> 3) ^ __ROR4__(v240, 7) ^ __ROL4__(v240, 14))\n           + v279;\n      v218 = (v209 ^ v216 & (v212 ^ v209))\n           + v206\n           + v286\n           - 2067236844\n           + (__ROL4__(v216, 7) ^ __ROR4__(v216, 6) ^ __ROR4__(v216, 11));\n      v219 = v218 + v207;\n      v220 = (__ROL4__(v217, 10) ^ __ROR4__(v217, 2) ^ __ROR4__(v217, 13)) + (v217 & v213 | v210 & (v217 | v213)) + v218;\n      v287 = (__ROL4__(v214, 15) ^ __ROL4__(v214, 13) ^ (v214 >> 10))\n           + v240\n           + ((v243 >> 3) ^ __ROR4__(v243, 7) ^ __ROL4__(v243, 14))\n           + v280;\n      v221 = (v212 ^ v219 & (v216 ^ v212))\n           + v209\n           + v287\n           - 1933114872\n           + (__ROL4__(v219, 7) ^ __ROR4__(v219, 6) ^ __ROR4__(v219, 11));\n      v222 = v221 + v210;\n      v223 = (__ROL4__(v220, 10) ^ __ROR4__(v220, 2) ^ __ROR4__(v220, 13)) + (v220 & v217 | v213 & (v220 | v217)) + v221;\n      v288 = (__ROL4__(v286, 15) ^ __ROL4__(v286, 13) ^ (v286 >> 10))\n           + v281\n           + ((v252 >> 3) ^ __ROR4__(v252, 7) ^ __ROL4__(v252, 14))\n           + v243;\n      v224 = (v216 ^ v222 & (v219 ^ v216))\n           + v212\n           + v288\n           - 1866530822\n           + (__ROL4__(v222, 7) ^ __ROR4__(v222, 6) ^ __ROR4__(v222, 11));\n      v225 = v224 + v213;\n      v226 = (__ROL4__(v223, 10) ^ __ROR4__(v223, 2) ^ __ROR4__(v223, 13)) + (v223 & v220 | v217 & (v223 | v220)) + v224;\n      v289 = (__ROL4__(v287, 15) ^ __ROL4__(v287, 13) ^ (v287 >> 10))\n           + v246\n           + ((v254 >> 3) ^ __ROR4__(v254, 7) ^ __ROL4__(v254, 14))\n           + v252;\n      v227 = (v219 ^ v225 & (v222 ^ v219))\n           + v216\n           + v289\n           - 1538233109\n           + (__ROL4__(v225, 7) ^ __ROR4__(v225, 6) ^ __ROR4__(v225, 11));\n      v228 = v227 + v217;\n      v229 = (__ROL4__(v226, 10) ^ __ROR4__(v226, 2) ^ __ROR4__(v226, 13)) + (v226 & v223 | v220 & (v226 | v223)) + v227;\n      v290 = v283\n           + v254\n           + ((v258 >> 3) ^ __ROR4__(v258, 7) ^ __ROL4__(v258, 14))\n           + (__ROL4__(v288, 15) ^ __ROL4__(v288, 13) ^ (v288 >> 10));\n      v230 = (v222 ^ v228 & (v225 ^ v222))\n           + v219\n           + v290\n           - 1090935817\n           + (__ROL4__(v228, 7) ^ __ROR4__(v228, 6) ^ __ROR4__(v228, 11));\n      v231 = v230 + v220;\n      v232 = (__ROL4__(v229, 10) ^ __ROR4__(v229, 2) ^ __ROR4__(v229, 13)) + (v229 & v226 | v223 & (v229 | v226)) + v230;\n      v263 += v232;\n      v291 = v284\n           + v258\n           + ((v256 >> 3) ^ __ROR4__(v256, 7) ^ __ROL4__(v256, 14))\n           + (__ROL4__(v289, 15) ^ __ROL4__(v289, 13) ^ (v289 >> 10));\n      v265 += v226;\n      v233 = v222 + v291 - 965641998 + (v225 ^ v231 & (v228 ^ v225));\n      v264 += v229;\n      v4 = v264;\n      v267 += v231;\n      v7 = v267;\n      v268 += v228;\n      v10 = v268;\n      v234 = v233 + (__ROL4__(v231, 7) ^ __ROR4__(v231, 6) ^ __ROR4__(v231, 11));\n      v266 += v234 + v223;\n      v11 = v234\n          + v273\n          + (v232 & v229 | v226 & (v232 | v229))\n          + (__ROL4__(v232, 10) ^ __ROR4__(v232, 2) ^ __ROR4__(v232, 13));\n      *v275 = v11;\n      v275[1] = v263;\n      result = v263;\n      v275[2] = v264;\n      v275[3] = v265;\n      v275[5] = v267;\n      v5 = v265;\n      v275[4] = v266;\n      v273 = v11;\n      v275[6] = v268;\n      v269 += v225;\n      v12 = v269;\n      v6 = v266;\n      v275[7] = v269;\n    }\n    while ( v261 < v274 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403200L", 
            "funcEndAddr": "0x405984L", 
            "funcName": "sub_403200"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405990(__int64 a1)\n{\n  unsigned __int64 v1; // rsi\n  int v2; // edx\n  __int64 v3; // rbp\n  unsigned int v4; // ecx\n\n  v1 = *(_QWORD *)(a1 + 40);\n  v2 = *(_DWORD *)(a1 + 36);\n  v3 = (-(__int64)(v1 < 0x38) & 0xFFFFFFFFFFFFFFC0LL) + 128;\n  v4 = v1 + *(_DWORD *)(a1 + 32);\n  *(_DWORD *)(a1 + 32) = v4;\n  if ( v4 < v1 )\n    *(_DWORD *)(a1 + 36) = ++v2;\n  *(_DWORD *)(a1 + 4 * ((-(__int64)(v1 < 0x38) & 0xFFFFFFFFFFFFFFF0LL) + 30) + 48) = _byteswap_ulong((v4 >> 29) | (8 * v2));\n  *(_DWORD *)(a1 + 4 * ((-(__int64)(v1 < 0x38) & 0xFFFFFFFFFFFFFFF0LL) + 31) + 48) = ((8 * v4) >> 8) & 0xFF00 | (v4 << 27) | ((8 * v4) >> 24) | (v4 << 11) & 0xFF0000;\n  memcpy((void *)(a1 + 48 + v1), &unk_40AB80, v3 - v1 - 8);\n  return sub_403200(a1 + 48, v3, (unsigned int *)a1);\n}\n", 
            "funcStartAddr": "0x405990L", 
            "funcEndAddr": "0x405a51L", 
            "funcName": "sub_405990"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405A60(__int64 a1, __int64 a2)\n{\n  sub_405990(a1);\n  return sub_4031C0(a1, a2);\n}\n", 
            "funcStartAddr": "0x405a60L", 
            "funcEndAddr": "0x405a82L", 
            "funcName": "sub_405A60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405A90(__int64 a1, __int64 a2)\n{\n  sub_405990(a1);\n  return sub_4031E0(a1, a2);\n}\n", 
            "funcStartAddr": "0x405a90L", 
            "funcEndAddr": "0x405ab2L", 
            "funcName": "sub_405A90"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_405AC0(void *src, size_t n, __m128i *a3)\n{\n  size_t v3; // r13\n  __m128i *v4; // r12\n  const __m128i *v5; // rbx\n  __int64 v6; // rbp\n  __m128i *v7; // rbp\n  const __m128i *v8; // r14\n  __m128i v9; // xmm0\n  __int64 v10; // rax\n  _QWORD *v11; // rsi\n  size_t v12; // r13\n  size_t v13; // rbp\n  unsigned __int64 v14; // rdi\n  unsigned __int64 v15; // r15\n  __int64 v16; // r14\n  unsigned __int64 v17; // rsi\n  unsigned __int64 v18; // rdi\n  signed __int64 v19; // r14\n  unsigned int v20; // edx\n  unsigned int v21; // ecx\n  __int64 v22; // rsi\n  unsigned __int64 v23; // rbp\n  __int64 *v24; // rax\n  __int64 v25; // rcx\n  unsigned __int64 v26; // rdi\n  unsigned int v27; // edx\n  unsigned int v28; // ecx\n  __int64 v29; // rsi\n\n  v3 = n;\n  v4 = a3;\n  v5 = (const __m128i *)src;\n  v6 = a3[2].m128i_i64[1];\n  if ( v6 )\n  {\n    v15 = (unsigned __int64)&a3[3];\n    v16 = 128 - v6;\n    if ( 128 - v6 > n )\n      v16 = n;\n    memcpy(&a3[3].m128i_i8[v6], src, v16);\n    v17 = v16 + v4[2].m128i_i64[1];\n    v4[2].m128i_i64[1] = v17;\n    if ( v17 > 0x40 )\n    {\n      sub_403200(v15, v17 & 0xFFFFFFFFFFFFFFC0LL, (unsigned int *)v4);\n      v23 = (v16 + v6) & 0xFFFFFFFFFFFFFFC0LL;\n      v24 = (__int64 *)(v15 + v23);\n      v25 = v4[2].m128i_i64[1] & 0x3F;\n      v4[2].m128i_i64[1] = v25;\n      if ( (unsigned int)v25 >= 8 )\n      {\n        v26 = (unsigned __int64)&v4[3].m128i_u64[1] & 0xFFFFFFFFFFFFFFF8LL;\n        v4[3].m128i_i64[0] = *v24;\n        *(_QWORD *)(v15 + (unsigned int)v25 - 8) = *(__int64 *)((char *)v24 + (unsigned int)v25 - 8);\n        if ( (((_DWORD)v25 + (_DWORD)v15 - (_DWORD)v26) & 0xFFFFFFF8) >= 8 )\n        {\n          v27 = (v25 + v15 - v26) & 0xFFFFFFF8;\n          v28 = 0;\n          do\n          {\n            v29 = v28;\n            v28 += 8;\n            *(_QWORD *)(v26 + v29) = *(_QWORD *)(v23 + v26 + v29);\n          }\n          while ( v28 < v27 );\n        }\n      }\n      else if ( v25 & 4 )\n      {\n        v4[3].m128i_i32[0] = *(_DWORD *)v24;\n        *(_DWORD *)(v15 + (unsigned int)v25 - 4) = *(_DWORD *)((char *)v24 + (unsigned int)v25 - 4);\n      }\n      else if ( (_DWORD)v25 )\n      {\n        v4[3].m128i_i8[0] = *(_BYTE *)v24;\n        if ( v25 & 2 )\n          *(_WORD *)(v15 + (unsigned int)v25 - 2) = *(_WORD *)((char *)v24 + (unsigned int)v25 - 2);\n      }\n    }\n    v5 = (const __m128i *)((char *)v5 + v16);\n    v3 -= v16;\n  }\n  if ( v3 > 0x3F )\n  {\n    if ( (unsigned __int8)v5 & 3 )\n    {\n      v7 = v4 + 3;\n      if ( v3 == 64 )\n      {\n        v8 = v5;\n      }\n      else\n      {\n        v8 = &v5[4 * ((v3 - 65) >> 6) + 4];\n        do\n        {\n          v9 = _mm_loadu_si128(v5);\n          v5 += 4;\n          *v7 = v9;\n          v4[4] = _mm_loadu_si128(v5 - 3);\n          v4[5] = _mm_loadu_si128(v5 - 2);\n          v4[6] = _mm_loadu_si128(v5 - 1);\n          sub_403200((unsigned __int64)&v4[3], 64LL, (unsigned int *)v4);\n        }\n        while ( v5 != v8 );\n        v3 = v3 - ((v3 - 65) >> 6 << 6) - 64;\n      }\n      goto LABEL_8;\n    }\n    v13 = v3;\n    v14 = (unsigned __int64)v5;\n    v3 &= 0x3Fu;\n    v5 = (const __m128i *)((char *)v5 + (v13 & 0xFFFFFFFFFFFFFFC0LL));\n    sub_403200(v14, v13 & 0xFFFFFFFFFFFFFFC0LL, (unsigned int *)v4);\n  }\n  if ( !v3 )\n    return;\n  v7 = v4 + 3;\n  v8 = v5;\nLABEL_8:\n  v10 = v4[2].m128i_i64[1];\n  v11 = (__int64 *)((char *)v7->m128i_i64 + v10);\n  if ( (unsigned int)v3 >= 8 )\n  {\n    v18 = (unsigned __int64)(v11 + 1) & 0xFFFFFFFFFFFFFFF8LL;\n    *v11 = v8->m128i_i64[0];\n    *(_QWORD *)((char *)v11 + (unsigned int)v3 - 8) = *(__int64 *)((char *)&v8->m128i_i64[-1] + (unsigned int)v3);\n    v19 = (char *)v8 - ((char *)v11 - v18);\n    if ( (((_DWORD)v3 + (_DWORD)v11 - (_DWORD)v18) & 0xFFFFFFF8) >= 8 )\n    {\n      v20 = (v3 + (_DWORD)v11 - v18) & 0xFFFFFFF8;\n      v21 = 0;\n      do\n      {\n        v22 = v21;\n        v21 += 8;\n        *(_QWORD *)(v18 + v22) = *(_QWORD *)(v19 + v22);\n      }\n      while ( v21 < v20 );\n    }\n  }\n  else if ( v3 & 4 )\n  {\n    *(_DWORD *)v11 = v8->m128i_i64[0];\n    *(_DWORD *)((char *)v11 + (unsigned int)v3 - 4) = *(_DWORD *)((char *)v8->m128i_i64 + (unsigned int)v3 - 4);\n  }\n  else if ( (_DWORD)v3 )\n  {\n    *(_BYTE *)v11 = v8->m128i_i64[0];\n    if ( v3 & 2 )\n      *(_WORD *)((char *)v11 + (unsigned int)v3 - 2) = *(_WORD *)((char *)v8->m128i_i64 + (unsigned int)v3 - 2);\n  }\n  v12 = v10 + v3;\n  if ( v12 > 0x3F )\n  {\n    v12 -= 64LL;\n    sub_403200((unsigned __int64)v7, 64LL, (unsigned int *)v4);\n    memcpy(v7, &v4[7], v12);\n  }\n  v4[2].m128i_i64[1] = v12;\n}\n", 
            "funcStartAddr": "0x405ac0L", 
            "funcEndAddr": "0x405dbeL", 
            "funcName": "sub_405AC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406020(FILE *stream, __int64 a2)\n{\n  char *v2; // rax\n  char *v3; // r12\n  size_t v4; // rbx\n  int v5; // edx\n  size_t v6; // rax\n  __int64 v8; // [rsp+0h] [rbp-D8h]\n  __int64 v9; // [rsp+8h] [rbp-D0h]\n  __int64 v10; // [rsp+10h] [rbp-C8h]\n  __int64 v11; // [rsp+18h] [rbp-C0h]\n  __int64 v12; // [rsp+20h] [rbp-B8h]\n  __int64 v13; // [rsp+28h] [rbp-B0h]\n\n  v2 = (char *)malloc(0x8048uLL);\n  if ( !v2 )\n    return 1LL;\n  v12 = 0LL;\n  v3 = v2;\n  v8 = 3926247204440088280LL;\n  v9 = -644479594506691305LL;\n  v10 = 7518782744944446257LL;\n  v11 = -4685344894838272089LL;\n  v13 = 0LL;\nLABEL_3:\n  v4 = 0LL;\n  while ( 1 )\n  {\n    v6 = fread_unlocked(&v3[v4], 1uLL, 0x8000 - v4, stream);\n    v4 += v6;\n    if ( v4 == 0x8000 )\n    {\n      sub_403200((unsigned __int64)v3, 0x8000LL, (unsigned int *)&v8);\n      goto LABEL_3;\n    }\n    v5 = stream->_flags;\n    if ( !v6 )\n      break;\n    if ( v5 & 0x10 )\n      goto LABEL_9;\n  }\n  if ( v5 & 0x20 )\n  {\n    free(v3);\n    return 1LL;\n  }\nLABEL_9:\n  if ( v4 )\n    sub_405AC0(v3, v4, (__m128i *)&v8);\n  sub_405990((__int64)&v8);\n  sub_4031E0((__int64)&v8, a2);\n  free(v3);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x406020L", 
            "funcEndAddr": "0x406175L", 
            "funcName": "sub_406020"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_406190(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n", 
            "funcStartAddr": "0x406190L", 
            "funcEndAddr": "0x4061b1L", 
            "funcName": "sub_406190"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_4061C0(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // er12\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // er12\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_407EA0(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_4086E0(v11);\n        *v13 = v12;\n      }\n      else if ( (unsigned int)sub_4086E0(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        v3 = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x4061c0L", 
            "funcEndAddr": "0x406253L", 
            "funcName": "sub_4061C0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406260(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60E308 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x406260L", 
            "funcEndAddr": "0x4062f9L", 
            "funcName": "sub_406260"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406300(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_409850();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40AC11;\n      if ( !v5 )\n        v2 = (char *)&unk_40AC06;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40AC0D;\n    if ( !v5 )\n      v2 = (char *)&unk_40AC0A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x406300L", 
            "funcEndAddr": "0x4063f2L", 
            "funcName": "sub_406300"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406400(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406400((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406400((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406400((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406400((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406400((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406400((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", v11);\n        v47 = sub_406300(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_406400(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406400((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406400((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406400((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406400((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406400((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406400((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", v11);\n        v47 = sub_406300(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401920L", 
            "funcEndAddr": "0x401925L", 
            "funcName": "sub_406400"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406400(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406400((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406400((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406400((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406400((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406400((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406400((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", v11);\n        v47 = sub_406300(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_406400(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_406400((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_406400((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_406400((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_406400((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_406400((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_406400((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409710((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_406400((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_406400((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406300(\"`\", v11);\n        v47 = sub_406300(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401920L", 
            "funcEndAddr": "0x401925L", 
            "funcName": "sub_406400"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407630(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60E278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4086A0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60E278 == &xmmword_60E280 )\n    {\n      v7 = (__int128 *)sub_4084B0(0LL, v9);\n      off_60E278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E280);\n    }\n    else\n    {\n      off_60E278 = (__int128 *)sub_4084B0(off_60E278, v9);\n      v7 = off_60E278;\n    }\n    memset(&v7[dword_60E290], 0, 16LL * (a1 + 1 - dword_60E290));\n    dword_60E290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408450(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407630(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60E278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4086A0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60E278 == &xmmword_60E280 )\n    {\n      v7 = (__int128 *)sub_4084B0(0LL, v9);\n      off_60E278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E280);\n    }\n    else\n    {\n      off_60E278 = (__int128 *)sub_4084B0(off_60E278, v9);\n      v7 = off_60E278;\n    }\n    memset(&v7[dword_60E290], 0, 16LL * (a1 + 1 - dword_60E290));\n    dword_60E290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408450(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401925L", 
            "funcEndAddr": "0x40192aL", 
            "funcName": "sub_407630"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407630(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60E278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4086A0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60E278 == &xmmword_60E280 )\n    {\n      v7 = (__int128 *)sub_4084B0(0LL, v9);\n      off_60E278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E280);\n    }\n    else\n    {\n      off_60E278 = (__int128 *)sub_4084B0(off_60E278, v9);\n      v7 = off_60E278;\n    }\n    memset(&v7[dword_60E290], 0, 16LL * (a1 + 1 - dword_60E290));\n    dword_60E290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408450(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407630(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60E278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60E290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_4086A0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60E278 == &xmmword_60E280 )\n    {\n      v7 = (__int128 *)sub_4084B0(0LL, v9);\n      off_60E278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E280);\n    }\n    else\n    {\n      off_60E278 = (__int128 *)sub_4084B0(off_60E278, v9);\n      v7 = off_60E278;\n    }\n    memset(&v7[dword_60E290], 0, 16LL * (a1 + 1 - dword_60E290));\n    dword_60E290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406400(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60E320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408450(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406400(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401925L", 
            "funcEndAddr": "0x40192aL", 
            "funcName": "sub_407630"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B50(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407B50(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40192aL", 
            "funcEndAddr": "0x40192fL", 
            "funcName": "sub_407B50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407B50(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407B50(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40192aL", 
            "funcEndAddr": "0x40192fL", 
            "funcName": "sub_407B50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407BC0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_407BC0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40192fL", 
            "funcEndAddr": "0x401934L", 
            "funcName": "sub_407BC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407BC0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_407BC0(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_407630(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40192fL", 
            "funcEndAddr": "0x401934L", 
            "funcName": "sub_407BC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407C50(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_60E450;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60E420);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60E430);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_60E440);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_407630(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x407c50L", 
            "funcEndAddr": "0x407cc0L", 
            "funcName": "sub_407C50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407CD0(char *a1)\n{\n  return sub_407C50(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x407cd0L", 
            "funcEndAddr": "0x407ce1L", 
            "funcName": "sub_407CD0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407D00(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407D00(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401934L", 
            "funcEndAddr": "0x401939L", 
            "funcName": "sub_407D00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407D00(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_407D00(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407630(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401934L", 
            "funcEndAddr": "0x401939L", 
            "funcName": "sub_407D00"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_407D70(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_60E420);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60E430);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60E440);\n  v9 = qword_60E450;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_407630(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x407d70L", 
            "funcEndAddr": "0x407ddcL", 
            "funcName": "sub_407D70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407EA0(char a1)\n{\n  return sub_408760(a1);\n}\n", 
            "funcStartAddr": "0x407ea0L", 
            "funcEndAddr": "0x407eaeL", 
            "funcName": "sub_407EA0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407EB0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_407EB0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401939L", 
            "funcEndAddr": "0x40193eL", 
            "funcName": "sub_407EB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407EB0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_407EB0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401939L", 
            "funcEndAddr": "0x40193eL", 
            "funcName": "sub_407EB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4082B0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_407EB0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_407EB0(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x4082b0L", 
            "funcEndAddr": "0x408310L", 
            "funcName": "sub_4082B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408310(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_407EB0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_407EB0(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x408310L", 
            "funcEndAddr": "0x4083ccL", 
            "funcName": "sub_408310"
        }, 
        {
            "decompiledFuncCode": "int sub_4083D0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, aReportBugsTo, 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_409F10);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x4083d0L", 
            "funcEndAddr": "0x408444L", 
            "funcName": "sub_4083D0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_408450(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4086A0();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408450L", 
            "funcEndAddr": "0x40846aL", 
            "funcName": "sub_408450"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4084B0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4086A0();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4084b0L", 
            "funcEndAddr": "0x4084e6L", 
            "funcName": "sub_4084B0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_408650(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_408450(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x408650L", 
            "funcEndAddr": "0x408678L", 
            "funcName": "sub_408650"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_4086A0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x4086a0L", 
            "funcEndAddr": "0x4086d1L", 
            "funcName": "sub_4086A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4086E0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_4088A0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4086e0L", 
            "funcEndAddr": "0x40875bL", 
            "funcName": "sub_4086E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408760(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_60E458 < 0 )\n    {\n      v3 = sub_408760(a1);\n      if ( v3 >= 0 && dword_60E458 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_60E458 = 1;\n      }\n      else\n      {\n        v3 = sub_408760(a1);\n        if ( v3 >= 0 )\n        {\n          dword_60E458 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x408760L", 
            "funcEndAddr": "0x408895L", 
            "funcName": "sub_408760"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4088A0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_4088E0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x4088a0L", 
            "funcEndAddr": "0x4088e0L", 
            "funcName": "sub_4088A0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4088E0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x4088e0L", 
            "funcEndAddr": "0x408937L", 
            "funcName": "sub_4088E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408940(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x408940L", 
            "funcEndAddr": "0x408a1fL", 
            "funcName": "sub_408940"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408A20(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408a20L", 
            "funcEndAddr": "0x40903cL", 
            "funcName": "sub_408A20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409040(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_408940(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_408940((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_408A20(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_408A20(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_408A20(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x409040L", 
            "funcEndAddr": "0x409606L", 
            "funcName": "sub_409040"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409610(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60E460 = dword_60E29C;\n  dword_60E464 = dword_60E298;\n  result = sub_409040(a1, a2, a3, a4, a5, a6, &dword_60E460, a7);\n  dword_60E29C = dword_60E460;\n  qword_60E4A0 = qword_60E470;\n  dword_60E294 = dword_60E468;\n  return result;\n}\n", 
            "funcStartAddr": "0x409610L", 
            "funcEndAddr": "0x409666L", 
            "funcName": "sub_409610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409670(int a1, __int64 a2, char *a3)\n{\n  return sub_409610(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x409670L", 
            "funcEndAddr": "0x409688L", 
            "funcName": "sub_409670"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409690(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409610(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x409690L", 
            "funcEndAddr": "0x4096a3L", 
            "funcName": "sub_409690"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4096B0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409040(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x4096b0L", 
            "funcEndAddr": "0x4096c5L", 
            "funcName": "sub_4096B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4096D0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409610(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x4096d0L", 
            "funcEndAddr": "0x4096e6L", 
            "funcName": "sub_4096D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4096F0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409040(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x4096f0L", 
            "funcEndAddr": "0x409708L", 
            "funcName": "sub_4096F0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_409710(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_4097F0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x409710L", 
            "funcEndAddr": "0x40978aL", 
            "funcName": "sub_409710"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409790(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_4086E0(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x409790L", 
            "funcEndAddr": "0x4097edL", 
            "funcName": "sub_409790"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4097F0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4097f0L", 
            "funcEndAddr": "0x40984eL", 
            "funcName": "sub_4097F0"
        }, 
        {
            "decompiledFuncCode": "const char *sub_409850()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_4086E0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_4086E0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x409850L", 
            "funcEndAddr": "0x409db2L", 
            "funcName": "sub_409850"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x409dc0L", 
            "funcEndAddr": "0x409e1dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x409e20L", 
            "funcEndAddr": "0x409e21L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_409E30(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_60E208 )\n    v1 = (void *)unk_60E208;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x409e30L", 
            "funcEndAddr": "0x409e48L", 
            "funcName": "sub_409E30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409E48(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_60DE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x409e48L", 
            "funcEndAddr": "0x409e68L", 
            "funcName": "sub_409E48"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sha224sum.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 68, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}