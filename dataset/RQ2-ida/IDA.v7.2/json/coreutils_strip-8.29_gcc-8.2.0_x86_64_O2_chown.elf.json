{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char v3; // r14\n  int v4; // er13\n  __int64 v5; // r12\n  char **v6; // rbp\n  int v7; // ebx\n  char *v8; // rdi\n  int v9; // eax\n  __int64 v10; // rax\n  __int64 v11; // rdx\n  __int64 v12; // rax\n  bool v13; // zf\n  char *v14; // r13\n  __int64 v15; // rdx\n  __gid_t v16; // er12\n  bool v18; // cc\n  __uid_t *v19; // rsi\n  __int64 v20; // rdx\n  char *v21; // rbx\n  int *v22; // rax\n  char *v23; // rax\n  __int64 v24; // rbx\n  char *v25; // rax\n  char *v26; // rbx\n  __int64 v27; // rax\n  char *v28; // rax\n  __int64 v29; // [rsp+8h] [rbp-110h]\n  __uid_t v30; // [rsp+10h] [rbp-108h]\n  __gid_t v31; // [rsp+14h] [rbp-104h]\n  int v32; // [rsp+18h] [rbp-100h]\n  int v33; // [rsp+1Ch] [rbp-FCh]\n  int v34; // [rsp+20h] [rbp-F8h]\n  char v35; // [rsp+24h] [rbp-F4h]\n  __int64 v36; // [rsp+28h] [rbp-F0h]\n  bool v37; // [rsp+30h] [rbp-E8h]\n  char v38; // [rsp+31h] [rbp-E7h]\n  char *v39; // [rsp+38h] [rbp-E0h]\n  __int64 v40; // [rsp+40h] [rbp-D8h]\n  struct stat stat_buf; // [rsp+50h] [rbp-C8h]\n\n  v3 = 0;\n  v4 = -1;\n  v5 = a1;\n  v6 = a2;\n  v7 = 16;\n  v8 = *a2;\n  v30 = -1;\n  v31 = -1;\n  v32 = -1;\n  v33 = -1;\n  sub_403CB0(v8);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40C620(sub_403BC0);\n  sub_402C50(&v34);\n  while ( 1 )\n  {\n    v9 = sub_409C90((unsigned int)v5, a2, \"HLPRcfhv\", &off_40D320, 0LL);\n    if ( v9 == -1 )\n      break;\n    if ( v9 == 102 )\n    {\n      v38 = 1;\n    }\n    else if ( v9 <= 102 )\n    {\n      if ( v9 == 76 )\n      {\n        v7 = 2;\n      }\n      else if ( v9 <= 76 )\n      {\n        if ( v9 == -130 )\n          sub_402770(0);\n        if ( v9 != 72 )\n        {\n          if ( v9 == -131 )\n          {\n            sub_406180((char)stdout);\n            exit(0);\n          }\nLABEL_16:\n          sub_402770(1);\n        }\n        v7 = 17;\n      }\n      else\n      {\n        switch ( v9 )\n        {\n          case 82:\n            goto LABEL_35;\n          case 99:\n            v34 = 1;\n            break;\n          case 80:\n            v7 = 16;\n            break;\n          default:\n            goto LABEL_16;\n        }\n      }\n    }\n    else if ( v9 == 129 )\n    {\n      v10 = sub_405C50(qword_612550);\n      if ( v10 )\n      {\n        v29 = v10;\n        v12 = sub_4058D0(qword_612550, &v32, v11);\n        error(1, 0, \"%s: %s\", v29, v12);\nLABEL_35:\n        v35 = 1;\n      }\n    }\n    else if ( v9 > 129 )\n    {\n      if ( v9 == 131 )\n      {\n        v3 = 1;\n      }\n      else if ( v9 >= 131 )\n      {\n        if ( v9 != 132 )\n          goto LABEL_16;\n        filename = qword_612550;\n      }\n      else\n      {\n        v3 = 0;\n      }\n    }\n    else\n    {\n      switch ( v9 )\n      {\n        case 118:\n          v34 = 0;\n          break;\n        case 128:\n          v4 = 1;\n          break;\n        case 104:\n          v4 = 0;\n          break;\n        default:\n          goto LABEL_16;\n      }\n    }\n  }\n  if ( v35 && v7 == 16 )\n  {\n    if ( v4 != 1 )\n    {\n      v4 = 0;\n      goto LABEL_39;\n    }\nLABEL_63:\n    v28 = dcgettext(0LL, \"-R --dereference requires either -H or -L\", 5);\n    error(1, 0, v28);\n    start();\n  }\nLABEL_39:\n  v13 = v4 == 0;\n  v14 = filename;\n  v37 = !v13;\n  v15 = (unsigned int)(v5 - dword_61233C);\n  if ( !filename )\n  {\n    v18 = (int)v15 <= 1;\n    v15 = (unsigned int)(v15 - 1);\n    if ( !v18 )\n    {\n      v19 = &v30;\n      v5 = sub_405C50(v6[dword_61233C]);\n      if ( !v5 )\n      {\n        if ( !v39 )\n          goto LABEL_55;\n        goto LABEL_52;\n      }\n      goto LABEL_62;\n    }\nLABEL_58:\n    if ( dword_61233C < (int)v5 )\n    {\n      v24 = sub_4058D0(a2[v5 - 1], a2, v15);\n      v25 = dcgettext(0LL, \"missing operand after %s\", 5);\n      error(0, 0, v25, v24);\n    }\n    else\n    {\n      v23 = dcgettext(0LL, \"missing operand\", 5);\n      error(0, 0, v23);\n    }\n    goto LABEL_16;\n  }\n  if ( (int)v15 <= 0 )\n    goto LABEL_58;\n  if ( __xstat(1, filename, &stat_buf) )\n  {\n    v6 = (char **)sub_405680(4LL, v14);\n    v26 = dcgettext(0LL, \"failed to get attributes of %s\", 5);\n    v19 = (__uid_t *)(unsigned int)*__errno_location();\n    error(1, (int)v19, v26, v6);\nLABEL_62:\n    v27 = sub_4058D0(v6[dword_61233C], v19, v20);\n    error(1, 0, \"%s: %s\", v5, v27);\n    goto LABEL_63;\n  }\n  v16 = stat_buf.st_gid;\n  v30 = stat_buf.st_uid;\n  v31 = stat_buf.st_gid;\n  v39 = (char *)sub_402CD0();\n  v40 = sub_402C90(v16);\n  while ( v35 )\n  {\n    if ( !v3 )\n      break;\n    v36 = sub_4058F0(&unk_612380);\n    if ( v36 )\n      break;\n    v6 = (char **)sub_405680(4LL, \"/\");\n    v21 = dcgettext(0LL, \"failed to get attributes of %s\", 5);\n    v22 = __errno_location();\n    error(1, *v22, v21, v6);\nLABEL_55:\n    if ( v40 )\n      v39 = \"\";\nLABEL_52:\n    ++dword_61233C;\n  }\n  return (unsigned __int8)sub_403A80((__int64)&v6[dword_61233C]) ^ 1u;\n}\n", 
            "funcStartAddr": "0x402180L", 
            "funcEndAddr": "0x402690L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402690L", 
            "funcEndAddr": "0x4026bbL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4026BB()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x4026bbL", 
            "funcEndAddr": "0x4026daL", 
            "funcName": "sub_4026BB"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4026DA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4026daL", 
            "funcEndAddr": "0x402711L", 
            "funcName": "sub_4026DA"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_402711()\n{\n  __int64 *result; // rax\n\n  if ( !byte_612368 )\n  {\n    while ( qword_612370 < (unsigned __int64)(&qword_611E48 - qword_611E40 - 1) )\n      ((void (*)(void))qword_611E40[++qword_612370])();\n    result = sub_4026BB();\n    byte_612368 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x402711L", 
            "funcEndAddr": "0x402768L", 
            "funcName": "sub_402711"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402768()\n{\n  return sub_4026DA();\n}\n", 
            "funcStartAddr": "0x402768L", 
            "funcEndAddr": "0x40276dL", 
            "funcName": "sub_402768"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_402770(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  const char **v30; // rax\n  char *v31; // rbp\n  char *v32; // rax\n  char *v33; // rax\n  char *v34; // r12\n  char *v35; // rax\n  char *v36; // rax\n  char *v37; // rax\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  __int64 v41; // rcx\n  const char *v42; // [rsp+0h] [rbp-88h]\n  const char *v43; // [rsp+8h] [rbp-80h]\n  const char *v44; // [rsp+10h] [rbp-78h]\n  const char *v45; // [rsp+18h] [rbp-70h]\n  const char *v46; // [rsp+20h] [rbp-68h]\n  const char *v47; // [rsp+28h] [rbp-60h]\n  const char *v48; // [rsp+30h] [rbp-58h]\n  const char *v49; // [rsp+38h] [rbp-50h]\n  const char *v50; // [rsp+40h] [rbp-48h]\n  const char *v51; // [rsp+48h] [rbp-40h]\n  const char *v52; // [rsp+50h] [rbp-38h]\n  const char *v53; // [rsp+58h] [rbp-30h]\n  __int64 v54; // [rsp+60h] [rbp-28h]\n  __int64 v55; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_6123A8;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(\n         0LL,\n         \"Usage: %s [OPTION]... [OWNER][:[GROUP]] FILE...\\n  or:  %s [OPTION]... --reference=RFILE FILE...\\n\",\n         5);\n  __printf_chk(1LL, v3, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Change the owner and/or group of each FILE to OWNER and/or GROUP.\\n\"\n         \"With --reference, change the owner and group of each FILE to those of RFILE.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(\n         0LL,\n         \"  -c, --changes          like verbose but report only when a change is made\\n\"\n         \"  -f, --silent, --quiet  suppress most error messages\\n\"\n         \"  -v, --verbose          output a diagnostic for every file processed\\n\",\n         5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"      --dereference      affect the referent of each symbolic link (this is\\n\"\n         \"                         the default), rather than the symbolic link itself\\n\"\n         \"  -h, --no-dereference   affect symbolic links instead of any referenced file\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"                         (useful only on systems that can change the\\n\"\n          \"                         ownership of a symlink)\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"      --from=CURRENT_OWNER:CURRENT_GROUP\\n\"\n          \"                         change the owner and/or group of each file only if\\n\"\n          \"                         its current owner and/or group match those specified\\n\"\n          \"                         here.  Either may be omitted, in which case a match\\n\"\n          \"                         is not required for the omitted attribute\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --no-preserve-root  do not treat '/' specially (the default)\\n\"\n          \"      --preserve-root    fail to operate recursively on '/'\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"      --reference=RFILE  use RFILE's owner and group rather than\\n\"\n          \"                         specifying OWNER:GROUP values\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"  -R, --recursive        operate on files and directories recursively\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The following options modify how a hierarchy is traversed when the -R\\n\"\n          \"option is also specified.  If more than one is specified, only the final\\n\"\n          \"one takes effect.\\n\"\n          \"\\n\"\n          \"  -H                     if a command line argument is a symbolic link\\n\"\n          \"                         to a directory, traverse it\\n\"\n          \"  -L                     traverse every symbolic link to a directory\\n\"\n          \"                         encountered\\n\"\n          \"  -P                     do not traverse any symbolic links (default)\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Owner is unchanged if missing.  Group is unchanged if missing, but changed\\n\"\n          \"to login group if implied by a ':' following a symbolic OWNER.\\n\"\n          \"OWNER and GROUP may be numeric as well as symbolic.\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v28 = qword_6123A8;\n  v29 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Examples:\\n\"\n          \"  %s root /u        Change the owner of /u to \\\"root\\\".\\n\"\n          \"  %s root:staff /u  Likewise, but also change its group to \\\"staff\\\".\\n\"\n          \"  %s -hR root /u    Change the owner of /u and subfiles to \\\"root\\\".\\n\",\n          5);\n  __printf_chk(1LL, v29, v28, v28);\n  v42 = \"[\";\n  v30 = &v42;\n  v43 = \"test invocation\";\n  v44 = \"coreutils\";\n  v45 = \"Multi-call invocation\";\n  v46 = \"sha224sum\";\n  v47 = \"sha2 utilities\";\n  v48 = \"sha256sum\";\n  v49 = \"sha2 utilities\";\n  v50 = \"sha384sum\";\n  v51 = \"sha2 utilities\";\n  v52 = \"sha512sum\";\n  v53 = \"sha2 utilities\";\n  v54 = 0LL;\n  v55 = 0LL;\n  do\n    v30 += 2;\n  while ( *v30 && strcmp(\"chown\", *v30) );\n  v31 = (char *)v30[1];\n  if ( v31 )\n  {\n    v32 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v32, &unk_40C700, \"https://www.gnu.org/software/coreutils/\");\n    v33 = setlocale(5, 0LL);\n    if ( !v33 || !strncmp(v33, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v37 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v37, &unk_40C700, \"https://www.gnu.org/software/coreutils/\");\n    v38 = setlocale(5, 0LL);\n    if ( !v38 || !strncmp(v38, \"en_\", 3uLL) )\n    {\n      v31 = \"chown\";\n      v39 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v34 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v39, \"https://www.gnu.org/software/coreutils/\", \"chown\");\nLABEL_12:\n      v36 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v36, v31, v34);\nLABEL_3:\n      exit(status);\n    }\n    v31 = \"chown\";\n  }\n  v40 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v40, \"chown\", v41);\nLABEL_10:\n  v34 = \"Multi-call invocation\" + 10;\n  v35 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v35, \"https://www.gnu.org/software/coreutils/\", \"chown\");\n  if ( v31 != \"chown\" )\n    v34 = \"\";\n  goto LABEL_12;\n}\n", 
            "funcStartAddr": "0x402770L", 
            "funcEndAddr": "0x402bcdL", 
            "funcName": "sub_402770"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_402BD0(char *src, void *a2)\n{\n  size_t v2; // r12\n  size_t v3; // rax\n  char *v4; // rax\n  char *v5; // r12\n  char *v6; // rax\n\n  if ( src )\n  {\n    if ( a2 )\n    {\n      v2 = strlen(src);\n      v3 = strlen((const char *)a2);\n      v4 = (char *)sub_4062C0(v2 + v3 + 2);\n      v5 = v4;\n      v6 = stpcpy(v4, src);\n      *v6 = 58;\n      strcpy(v6 + 1, (const char *)a2);\n      return v5;\n    }\n  }\n  else\n  {\n    if ( !a2 )\n      return 0LL;\n    src = (char *)a2;\n  }\n  return (char *)sub_4064F0(src);\n}\n", 
            "funcStartAddr": "0x402bd0L", 
            "funcEndAddr": "0x402c45L", 
            "funcName": "sub_402BD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402C50(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 1LL;\n  *(_DWORD *)a1 = 2;\n  *(_BYTE *)(a1 + 4) = 0;\n  *(_QWORD *)(a1 + 8) = 0LL;\n  *(_WORD *)(a1 + 16) = 1;\n  *(_QWORD *)(a1 + 24) = 0LL;\n  *(_QWORD *)(a1 + 32) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x402c50L", 
            "funcEndAddr": "0x402c7cL", 
            "funcName": "sub_402C50"
        }, 
        {
            "decompiledFuncCode": "void nullsub_1()\n{\n  ;\n}\n", 
            "funcStartAddr": "0x402c80L", 
            "funcEndAddr": "0x402c81L", 
            "funcName": "nullsub_1"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402C90(__gid_t a1)\n{\n  struct group *v1; // rax\n  void *v3; // rax\n  __int64 v4; // [rsp+0h] [rbp-28h]\n\n  v1 = getgrgid(a1);\n  if ( v1 )\n    return sub_4064F0(v1->gr_name);\n  v3 = (void *)sub_403C60(a1, &v4);\n  return sub_4064F0(v3);\n}\n", 
            "funcStartAddr": "0x402c90L", 
            "funcEndAddr": "0x402cc8L", 
            "funcName": "sub_402C90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402CD0(__uid_t a1)\n{\n  struct passwd *v1; // rax\n  void *v3; // rax\n  __int64 v4; // [rsp+0h] [rbp-28h]\n\n  v1 = getpwuid(a1);\n  if ( v1 )\n    return sub_4064F0(v1->pw_name);\n  v3 = (void *)sub_403C60(a1, &v4);\n  return sub_4064F0(v3);\n}\n", 
            "funcStartAddr": "0x402cd0L", 
            "funcEndAddr": "0x402d08L", 
            "funcName": "sub_402CD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __usercall sub_402D10@<rax>(__uid_t a1@<edx>, __gid_t a2@<ecx>, unsigned int a3@<ebp>, __int64 a4@<rdi>, __int64 a5@<rsi>, int a6@<r8d>, int a7@<r9d>, int *a8)\n{\n  __uid_t v8; // er15\n  int v9; // er10\n  __int64 v10; // r13\n  __int64 v11; // r12\n  int v12; // edx\n  char v13; // al\n  struct stat *v14; // r14\n  int v15; // er11\n  char v16; // al\n  unsigned int v17; // eax\n  _QWORD *v18; // rax\n  int v19; // eax\n  _QWORD *v20; // rdx\n  unsigned int v21; // ebp\n  int v22; // eax\n  bool v23; // bp\n  __uid_t v24; // edi\n  __gid_t v25; // er15\n  __int64 v26; // rax\n  void *v27; // r15\n  char *v28; // r14\n  char *v29; // rax\n  void *v30; // rsi\n  char *v31; // r15\n  __int64 v32; // rax\n  _QWORD *v34; // rax\n  __int64 v35; // rbx\n  char *v36; // rax\n  char *v37; // rax\n  int v38; // eax\n  const char *v39; // rsi\n  __int64 v40; // r15\n  char *v41; // rax\n  int v42; // esi\n  __int64 v43; // rcx\n  const char *v44; // rdx\n  _QWORD *v45; // rax\n  __int64 v46; // rbx\n  char *v47; // rax\n  char *v48; // rax\n  int v49; // eax\n  int v50; // eax\n  int v51; // er10\n  int v52; // er9\n  int v53; // ecx\n  int *v54; // r8\n  int v55; // eax\n  int v56; // eax\n  int v57; // ecx\n  int *v58; // rax\n  int *v59; // rbp\n  int v60; // er15\n  int v61; // eax\n  char *v62; // r15\n  int *v63; // rax\n  __int64 v64; // rbx\n  char *v65; // rax\n  int *v66; // rbp\n  __int64 v67; // rax\n  __int64 v68; // r14\n  char *v69; // rax\n  __int64 v70; // rcx\n  const char *v71; // rsi\n  char *v72; // rax\n  int v73; // eax\n  int v74; // eax\n  int *v75; // rbp\n  __int64 v76; // rbp\n  __int64 v77; // rbx\n  char *v78; // rax\n  __int64 v79; // r14\n  char *v80; // r15\n  int *v81; // rax\n  __int64 v82; // rbp\n  __int64 v83; // rbx\n  char *v84; // rax\n  int v85; // eax\n  const char *v86; // [rsp+0h] [rbp-188h]\n  __gid_t group; // [rsp+8h] [rbp-180h]\n  void *groupa; // [rsp+8h] [rbp-180h]\n  __int64 groupb; // [rsp+8h] [rbp-180h]\n  __gid_t groupc; // [rsp+8h] [rbp-180h]\n  int filenamec; // [rsp+10h] [rbp-178h]\n  char *filename; // [rsp+10h] [rbp-178h]\n  char *filenamea; // [rsp+10h] [rbp-178h]\n  int filenameb; // [rsp+10h] [rbp-178h]\n  int filenamed; // [rsp+10h] [rbp-178h]\n  int filenamee; // [rsp+10h] [rbp-178h]\n  int v97; // [rsp+18h] [rbp-170h]\n  char *v98; // [rsp+18h] [rbp-170h]\n  unsigned int v99; // [rsp+18h] [rbp-170h]\n  int v100; // [rsp+18h] [rbp-170h]\n  int v101; // [rsp+18h] [rbp-170h]\n  int v102; // [rsp+18h] [rbp-170h]\n  int ptre; // [rsp+20h] [rbp-168h]\n  char *ptr; // [rsp+20h] [rbp-168h]\n  int ptra; // [rsp+20h] [rbp-168h]\n  int ptrb; // [rsp+20h] [rbp-168h]\n  int ptrc; // [rsp+20h] [rbp-168h]\n  int *ptrd; // [rsp+20h] [rbp-168h]\n  int v109; // [rsp+28h] [rbp-160h]\n  int v110; // [rsp+28h] [rbp-160h]\n  int v111; // [rsp+28h] [rbp-160h]\n  int v112; // [rsp+28h] [rbp-160h]\n  int v113; // [rsp+2Ch] [rbp-15Ch]\n  struct stat v114; // [rsp+30h] [rbp-158h]\n  struct stat stat_buf; // [rsp+C0h] [rbp-C8h]\n\n  v8 = a1;\n  v9 = a6;\n  v10 = a4;\n  v11 = a5;\n  v12 = *(unsigned __int16 *)(a5 + 112);\n  group = a2;\n  v86 = *(const char **)(a5 + 56);\n  switch ( (_WORD)v12 )\n  {\n    case 1:\n      a3 = *((unsigned __int8 *)a8 + 4);\n      if ( !(_BYTE)a3 )\n        goto LABEL_3;\n      v34 = (_QWORD *)*((_QWORD *)a8 + 1);\n      if ( v34 && *(_QWORD *)(a5 + 128) == *v34 && *(_QWORD *)(a5 + 120) == v34[1] )\n      {\n        if ( !strcmp(*(const char **)(a5 + 56), \"/\") )\n        {\n          v35 = sub_405680(4LL, v86);\n          v36 = dcgettext(0LL, \"it is dangerous to operate recursively on %s\", 5);\n          error(0, 0, v36, v35);\n        }\n        else\n        {\n          v82 = sub_4055A0(1LL, 4LL, \"/\");\n          v83 = sub_4055A0(0LL, 4LL, v86);\n          v84 = dcgettext(0LL, \"it is dangerous to operate recursively on %s (same as %s)\", 5);\n          error(0, 0, v84, v83, v82);\n        }\n        a3 = 0;\n        v37 = dcgettext(0LL, \"use --no-preserve-root to override this failsafe\", 5);\n        error(0, 0, v37);\n        fts_set(a4, a5, 4LL);\n        fts_read(a4);\n      }\n      return a3;\n    case 2:\n      ptre = a7;\n      filenamec = *(unsigned __int16 *)(a5 + 112);\n      v97 = a6;\n      v13 = sub_4065A0();\n      v12 = filenamec;\n      v9 = v97;\n      a7 = ptre;\n      if ( !v13 )\n        goto LABEL_3;\n      a3 = 0;\n      v64 = sub_405750(0LL, 3LL, v86);\n      v65 = dcgettext(\n              0LL,\n              \"WARNING: Circular directory structure.\\n\"\n              \"This almost certainly means that you have a corrupted file system.\\n\"\n              \"NOTIFY YOUR SYSTEM MANAGER.\\n\"\n              \"The following directory is part of the cycle:\\n\"\n              \"  %s\\n\",\n              5);\n      error(0, 0, v65, v64);\n      return a3;\n    case 4:\n      a3 = *((unsigned __int8 *)a8 + 17);\n      if ( (_BYTE)a3 )\n        goto LABEL_47;\n      v39 = \"cannot read directory %s\";\n      v40 = sub_405680(4LL, v86);\n      goto LABEL_56;\n    case 6:\n      if ( !*((_BYTE *)a8 + 4) )\n        return 1;\n      goto LABEL_3;\n    case 7:\n      a3 = *((unsigned __int8 *)a8 + 17);\n      if ( (_BYTE)a3 )\n        goto LABEL_47;\n      v67 = sub_405750(0LL, 3LL, v86);\n      v42 = *(_DWORD *)(a5 + 64);\n      v44 = \"%s: %s\" + 4;\n      v43 = v67;\n      goto LABEL_57;\n    case 0xA:\n      if ( !*(_QWORD *)(a5 + 88) && !*(_QWORD *)(a5 + 32) )\n      {\n        *(_QWORD *)(a5 + 32) = 1LL;\n        fts_set(a4, a5, 1LL);\n        return 1;\n      }\n      a3 = *((unsigned __int8 *)a8 + 17);\n      if ( (_BYTE)a3 )\n      {\nLABEL_47:\n        v38 = *a8;\n        a3 = 0;\n        if ( *a8 == 2 )\n          goto LABEL_36;\n      }\n      else\n      {\n        v39 = \"cannot access %s\";\n        v40 = sub_405680(4LL, v86);\nLABEL_56:\n        v41 = dcgettext(0LL, v39, 5);\n        v42 = *(_DWORD *)(v11 + 64);\n        v43 = v40;\n        v44 = v41;\nLABEL_57:\n        error(0, v42, v44, v43);\n        v38 = *a8;\n        if ( *a8 == 2 )\n          goto LABEL_36;\n      }\n      if ( v38 )\n        goto LABEL_36;\n      v27 = (void *)*((_QWORD *)a8 + 4);\n      v28 = (char *)*((_QWORD *)a8 + 3);\n      a3 = 0;\n      filenamea = 0LL;\n      groupa = 0LL;\n      v109 = 3;\n      goto LABEL_28;\n    default:\nLABEL_3:\n      v14 = (struct stat *)(a5 + 120);\n      v15 = a7 & v9;\n      filename = *(char **)(a5 + 48);\n      v16 = *((_BYTE *)a8 + 16);\n      if ( (a7 & v9) != -1 || *a8 != 2 || *((_QWORD *)a8 + 1) )\n      {\n        if ( !v16 )\n        {\nLABEL_6:\n          v17 = v12 & 0xFFFFFFFD;\n          LOBYTE(a3) = (v12 & 0xFFFD) == 4;\n          LOBYTE(v17) = (unsigned __int16)(v12 - 1) <= 1u;\n          a3 |= v17;\n          if ( v9 != -1 && v14->st_uid != v9 )\n          {\n            if ( !(_BYTE)a3 )\n            {\n              if ( *a8 == 2 || *a8 )\n              {\nLABEL_105:\n                a3 = 1;\n                goto LABEL_36;\n              }\n              a3 = 1;\n              v109 = 4;\nLABEL_99:\n              v24 = v14->st_uid;\n              v25 = v14->st_gid;\n              goto LABEL_27;\n            }\n            v18 = (_QWORD *)*((_QWORD *)a8 + 1);\n            if ( !v18 || *v18 != v14->st_ino )\n            {\n              v19 = *a8;\n              if ( *a8 == 2 )\n                goto LABEL_36;\n              goto LABEL_12;\n            }\n            if ( v14->st_dev != v18[1] )\n            {\nLABEL_130:\n              v19 = *a8;\n              a3 = 1;\n              if ( *a8 == 2 )\n                goto LABEL_36;\nLABEL_12:\n              if ( v19 )\n                goto LABEL_36;\n              v109 = 4;\n              goto LABEL_99;\n            }\nLABEL_65:\n            if ( !strcmp(v86, \"/\") )\n            {\n              v46 = sub_405680(4LL, v86);\n              v47 = dcgettext(0LL, \"it is dangerous to operate recursively on %s\", 5);\n              error(0, 0, v47, v46);\n            }\n            else\n            {\n              v76 = sub_4055A0(1LL, 4LL, \"/\");\n              v77 = sub_4055A0(0LL, 4LL, v86);\n              v78 = dcgettext(0LL, \"it is dangerous to operate recursively on %s (same as %s)\", 5);\n              error(0, 0, v78, v77, v76);\n            }\n            a3 = 0;\n            v48 = dcgettext(0LL, \"use --no-preserve-root to override this failsafe\", 5);\n            error(0, 0, v48);\n            return a3;\n          }\n          if ( a7 == -1 )\n          {\n            if ( (_BYTE)a3 )\n            {\n              v45 = (_QWORD *)*((_QWORD *)a8 + 1);\n              if ( v45 )\n              {\n                if ( v14->st_ino == *v45 && v14->st_dev == v45[1] )\n                  goto LABEL_65;\n              }\n            }\n          }\n          else\n          {\n            if ( (_BYTE)a3 )\n            {\n              v20 = (_QWORD *)*((_QWORD *)a8 + 1);\n              if ( v20 )\n              {\n                if ( v14->st_ino == *v20 && v14->st_dev == v20[1] )\n                  goto LABEL_65;\n              }\n            }\n            if ( v14->st_gid != a7 )\n              goto LABEL_130;\n          }\n          v16 = *((_BYTE *)a8 + 16);\n          goto LABEL_19;\n        }\n      }\n      else if ( !v16 )\n      {\n        if ( (v12 & 0xFFFD) == 4 || (unsigned __int16)(v12 - 1) <= 1u )\n        {\n          v21 = *(_DWORD *)(a4 + 44);\n          goto LABEL_20;\n        }\nLABEL_19:\n        v21 = *(_DWORD *)(a4 + 44);\n        if ( !v16 )\n        {\nLABEL_20:\n          v22 = sub_406A00(v21, filename, v8, group);\n          v23 = v22 == 0;\n          if ( v22 && *__errno_location() == 95 )\n          {\n            a3 = 1;\n            if ( *a8 != 2 && !*a8 )\n            {\n              filenamea = (char *)sub_402CD0(v14->st_uid);\n              groupa = (void *)sub_402C90(v14->st_gid);\n              v68 = sub_405680(4LL, v86);\n              v69 = dcgettext(0LL, \"neither symbolic link %s nor referent has been changed\\n\", 5);\n              __printf_chk(1LL, v69, v68, v70);\n              goto LABEL_35;\n            }\n            goto LABEL_36;\n          }\n          goto LABEL_22;\n        }\n        if ( v15 != -1 )\n        {\n          v49 = v14->st_mode & 0xF000;\n          if ( v49 == 0x8000 )\n          {\n            v99 = 2304;\nLABEL_71:\n            v110 = a7;\n            ptra = v9;\n            v50 = __openat_2(v21, filename, v99);\n            v51 = ptra;\n            v52 = v110;\n            v53 = v50;\n            if ( v50 < 0 )\n            {\n              v54 = __errno_location();\n              if ( *v54 != 13 )\n              {\nLABEL_73:\n                a3 = *((unsigned __int8 *)a8 + 17);\n                if ( (_BYTE)a3 )\n                {\n                  v55 = *a8;\n                  a3 = 0;\n                  if ( *a8 == 2 )\n                    goto LABEL_36;\nLABEL_75:\n                  if ( v55 )\n                    goto LABEL_36;\n                  goto LABEL_98;\n                }\n                groupb = sub_405680(4LL, v86);\n                if ( v8 == -1 )\n                  v62 = dcgettext(0LL, \"changing group of %s\", 5);\n                else\n                  v62 = dcgettext(0LL, \"changing ownership of %s\", 5);\n                v63 = __errno_location();\n                error(0, *v63, v62, groupb);\n                v55 = *a8;\n                if ( *a8 != 2 )\n                  goto LABEL_75;\n                goto LABEL_36;\n              }\n              if ( (v14->st_mode & 0xF000) != 0x8000 )\n                goto LABEL_109;\n              v113 = v110;\n              v112 = ptra;\n              ptrd = v54;\n              v74 = __openat_2(v21, filename, v99 | 1);\n              v51 = v112;\n              v53 = v74;\n              v52 = v113;\n              if ( v74 < 0 )\n              {\n                if ( *ptrd != 13 )\n                  goto LABEL_73;\nLABEL_109:\n                v21 = *(_DWORD *)(a4 + 44);\n                goto LABEL_110;\n              }\n            }\n            filenameb = v53;\n            ptrb = v52;\n            v100 = v51;\n            v56 = __fxstat(1, v53, &stat_buf);\n            v57 = filenameb;\n            if ( v56 )\n              goto LABEL_165;\n            if ( v14->st_ino != stat_buf.st_ino || v14->st_dev != stat_buf.st_dev )\n            {\n              v58 = __errno_location();\n              v59 = v58;\n              v60 = *v58;\n              close(filenameb);\n              v61 = *a8;\n              *v59 = v60;\n              if ( v61 == 2 || v61 )\n              {\n                a3 = 0;\n                goto LABEL_36;\n              }\n              a3 = 0;\nLABEL_98:\n              v109 = 3;\n              goto LABEL_99;\n            }\n            if ( v100 != -1 && v100 != stat_buf.st_uid || ptrb != -1 && ptrb != stat_buf.st_gid )\n            {\n              v102 = filenameb;\n              v75 = __errno_location();\n              filenamee = *v75;\n              close(v102);\n              *v75 = filenamee;\n              goto LABEL_23;\n            }\n            v85 = fchown(filenameb, v8, group);\n            v57 = filenameb;\n            if ( v85 )\n            {\nLABEL_165:\n              filenamed = v57;\n              v66 = __errno_location();\n              groupc = *v66;\n              close(filenamed);\n              *v66 = groupc;\n            }\n            else if ( !close(filenameb) )\n            {\n              goto LABEL_23;\n            }\n            goto LABEL_73;\n          }\n          v99 = 67840;\n          if ( v49 == 0x4000 )\n            goto LABEL_71;\n        }\nLABEL_110:\n        v23 = (unsigned int)sub_406A00(v21, filename, v8, group) == 0;\nLABEL_22:\n        if ( v23 )\n        {\nLABEL_23:\n          if ( *a8 != 2 )\n          {\n            if ( v8 != -1 )\n            {\n              v24 = v14->st_uid;\n              if ( v24 != v8 )\n              {\n                v109 = 2;\n                v25 = v14->st_gid;\n                a3 = 1;\nLABEL_27:\n                filenamea = (char *)sub_402CD0(v24);\n                v26 = sub_402C90(v25);\n                v27 = (void *)*((_QWORD *)a8 + 4);\n                v28 = (char *)*((_QWORD *)a8 + 3);\n                groupa = (void *)v26;\nLABEL_28:\n                v29 = sub_402BD0(v28, v27);\n                v30 = 0LL;\n                if ( v27 )\n                  v30 = groupa;\n                v98 = v29;\n                if ( v28 )\n                {\n                  ptr = sub_402BD0(filenamea, v30);\n                  if ( v109 != 3 )\n                  {\n                    if ( v109 == 4 )\n                      v31 = dcgettext(0LL, \"ownership of %s retained as %s\\n\", 5);\n                    else\n                      v31 = dcgettext(0LL, \"changed ownership of %s from %s to %s\\n\", 5);\nLABEL_34:\n                    v32 = sub_405680(4LL, v86);\n                    __printf_chk(1LL, v31, v32, ptr);\n                    free(ptr);\n                    free(v98);\nLABEL_35:\n                    free(filenamea);\n                    free(groupa);\n                    goto LABEL_36;\n                  }\n                }\n                else\n                {\n                  ptr = sub_402BD0(0LL, v30);\n                  if ( v109 != 3 )\n                  {\n                    if ( v109 == 4 )\n                    {\n                      if ( v27 )\n                        v31 = dcgettext(0LL, \"group of %s retained as %s\\n\", 5);\n                      else\n                        v31 = dcgettext(0LL, \"ownership of %s retained\\n\", 5);\n                    }\n                    else if ( v27 )\n                    {\n                      v31 = dcgettext(0LL, \"changed group of %s from %s to %s\\n\", 5);\n                    }\n                    else\n                    {\n                      v31 = dcgettext(0LL, \"no change to ownership of %s\\n\", 5);\n                    }\n                    goto LABEL_34;\n                  }\n                }\n                if ( ptr )\n                {\n                  if ( v28 )\n                  {\n                    v31 = dcgettext(0LL, \"failed to change ownership of %s from %s to %s\\n\", 5);\n                  }\n                  else if ( v27 )\n                  {\n                    v31 = dcgettext(0LL, \"failed to change group of %s from %s to %s\\n\", 5);\n                  }\n                  else\n                  {\n                    v31 = dcgettext(0LL, \"failed to change ownership of %s\\n\", 5);\n                  }\n                }\n                else\n                {\n                  v71 = \"failed to change ownership of %s to %s\\n\";\n                  if ( !v28 )\n                  {\n                    v71 = \"failed to change group of %s to %s\\n\";\n                    if ( !v27 )\n                      v71 = \"failed to change ownership of %s\\n\";\n                  }\n                  v31 = dcgettext(0LL, v71, 5);\n                  v72 = v98;\n                  v98 = 0LL;\n                  ptr = v72;\n                }\n                goto LABEL_34;\n              }\n            }\n            if ( group != -1 )\n            {\n              v25 = v14->st_gid;\n              if ( v25 != group )\n              {\n                v24 = v14->st_uid;\n                v109 = 2;\n                a3 = 1;\n                goto LABEL_27;\n              }\n            }\n            if ( !*a8 )\n            {\n              v109 = 4;\n              a3 = 1;\n              goto LABEL_99;\n            }\n          }\n          goto LABEL_105;\n        }\n        goto LABEL_73;\n      }\n      if ( (*(_DWORD *)(a5 + 144) & 0xF000) != 40960 )\n        goto LABEL_6;\n      v111 = a7;\n      ptrc = v9;\n      v101 = a7 & v9;\n      if ( !__fxstatat(1, *(_DWORD *)(a4 + 44), filename, &v114, 0) )\n      {\n        v12 = *(unsigned __int16 *)(a5 + 112);\n        v14 = &v114;\n        v15 = v101;\n        v9 = ptrc;\n        a7 = v111;\n        goto LABEL_6;\n      }\n      a3 = *((unsigned __int8 *)a8 + 17);\n      if ( (_BYTE)a3 )\n      {\n        v73 = *a8;\n        a3 = 0;\n        if ( *a8 == 2 )\n          goto LABEL_36;\n      }\n      else\n      {\n        v79 = sub_405680(4LL, v86);\n        v80 = dcgettext(0LL, \"cannot dereference %s\", 5);\n        v81 = __errno_location();\n        error(0, *v81, v80, v79);\n        v73 = *a8;\n        if ( *a8 == 2 )\n          goto LABEL_36;\n      }\n      if ( !v73 )\n      {\n        v14 = &v114;\n        v109 = 3;\n        goto LABEL_99;\n      }\nLABEL_36:\n      if ( !*((_BYTE *)a8 + 4) )\n        fts_set(v10, v11, 4LL);\n      return a3;\n  }\n}\n", 
            "funcStartAddr": "0x402d10L", 
            "funcEndAddr": "0x403a7dL", 
            "funcName": "sub_402D10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403A80(__int64 a1, __int64 a2, __uid_t a3, __gid_t a4, int a5, int a6, __int64 a7)\n{\n  __gid_t v7; // er15\n  int v8; // er14\n  int v9; // er13\n  unsigned int v10; // ebx\n  void *i; // rbp\n  __int64 v12; // rax\n  int *v13; // r13\n  char *v15; // rax\n  char *v16; // rax\n  __uid_t v17; // [rsp+Ch] [rbp-3Ch]\n\n  v7 = a4;\n  v8 = a6;\n  v9 = a5;\n  v17 = a3;\n  if ( (a6 & a5) == -1 && !*(_BYTE *)(a7 + 16) && *(_DWORD *)a7 == 2 )\n    a2 = (unsigned int)a2 | 8;\n  v10 = 1;\n  for ( i = (void *)sub_406550(a1, a2, 0LL);\n        ;\n        v10 &= sub_402D10(v17, v7, (unsigned int)i, (__int64)i, v12, v9, v8, (int *)a7) )\n  {\n    v12 = fts_read(i);\n    if ( !v12 )\n      break;\n  }\n  v13 = __errno_location();\n  if ( *v13 )\n  {\n    v10 = *(unsigned __int8 *)(a7 + 17);\n    if ( (_BYTE)v10 )\n    {\n      v10 = 0;\n    }\n    else\n    {\n      v16 = dcgettext(0LL, \"fts_read failed\", 5);\n      error(0, *v13, v16);\n    }\n  }\n  if ( (unsigned int)fts_close(i) )\n  {\n    v10 = 0;\n    v15 = dcgettext(0LL, \"fts_close failed\", 5);\n    error(0, *v13, v15);\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x403a80L", 
            "funcEndAddr": "0x403b9eL", 
            "funcName": "sub_403A80"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403BC0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_409EC0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_612398 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_6123A0 )\n      {\n        v5 = sub_405720();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_409EC0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x403bc0L", 
            "funcEndAddr": "0x403c5eL", 
            "funcName": "sub_403BC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403C60(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  while ( 1 )\n  {\n    *(_BYTE *)--v2 = a1 % 0xA + 48;\n    if ( a1 <= 9 )\n      break;\n    a1 /= 0xAuLL;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x403c60L", 
            "funcEndAddr": "0x403ca8L", 
            "funcName": "sub_403C60"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_403CB0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_6123A8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x403cb0L", 
            "funcEndAddr": "0x403d49L", 
            "funcName": "sub_403CB0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_403D50(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40B370();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40D971;\n      if ( !v5 )\n        v2 = (char *)&unk_40D966;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40D96D;\n    if ( !v5 )\n      v2 = (char *)&unk_40D96A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x403d50L", 
            "funcEndAddr": "0x403e42L", 
            "funcName": "sub_403D50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403E50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403E50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403E50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403E50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409D10((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403E50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403E50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403D50(\"`\", v11);\n        v47 = sub_403D50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_403E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403E50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403E50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403E50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403E50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409D10((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403E50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403E50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403D50(\"`\", v11);\n        v47 = sub_403D50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402130L", 
            "funcEndAddr": "0x402135L", 
            "funcName": "sub_403E50"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403E50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403E50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403E50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403E50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409D10((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403E50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403E50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403D50(\"`\", v11);\n        v47 = sub_403D50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_403E50(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_403E50((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_403E50((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_403E50((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_403E50((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_403E50((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_403E50((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_409D10((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_403E50((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_403E50((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403D50(\"`\", v11);\n        v47 = sub_403D50(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x402130L", 
            "funcEndAddr": "0x402135L", 
            "funcName": "sub_403E50"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405080(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406510();\n    v9 = 16LL * (a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v7 = (__int128 *)sub_406320(0LL, v9);\n      off_612318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      off_612318 = (__int128 *)sub_406320(off_612318, v9);\n      v7 = off_612318;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403E50(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4062C0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403E50(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405080(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406510();\n    v9 = 16LL * (a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v7 = (__int128 *)sub_406320(0LL, v9);\n      off_612318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      off_612318 = (__int128 *)sub_406320(off_612318, v9);\n      v7 = off_612318;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403E50(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4062C0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403E50(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x402135L", 
            "funcEndAddr": "0x40213aL", 
            "funcName": "sub_405080"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405080(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406510();\n    v9 = 16LL * (a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v7 = (__int128 *)sub_406320(0LL, v9);\n      off_612318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      off_612318 = (__int128 *)sub_406320(off_612318, v9);\n      v7 = off_612318;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403E50(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4062C0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403E50(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405080(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_612318;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_612330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406510();\n    v9 = 16LL * (a1 + 1);\n    if ( off_612318 == &xmmword_612320 )\n    {\n      v7 = (__int128 *)sub_406320(0LL, v9);\n      off_612318 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_612320);\n    }\n    else\n    {\n      off_612318 = (__int128 *)sub_406320(off_612318, v9);\n      v7 = off_612318;\n    }\n    memset(&v7[dword_612330], 0, 16LL * (a1 + 1 - dword_612330));\n    dword_612330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403E50(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6123C0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_4062C0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403E50(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x402135L", 
            "funcEndAddr": "0x40213aL", 
            "funcName": "sub_405080"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4055A0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4055A0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40213aL", 
            "funcEndAddr": "0x40213fL", 
            "funcName": "sub_4055A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4055A0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4055A0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40213aL", 
            "funcEndAddr": "0x40213fL", 
            "funcName": "sub_4055A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405610(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405080(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_405610(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405080(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40213fL", 
            "funcEndAddr": "0x402144L", 
            "funcName": "sub_405610"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405610(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405080(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_405610(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405080(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40213fL", 
            "funcEndAddr": "0x402144L", 
            "funcName": "sub_405610"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405680(int a1, char *a2)\n{\n  return sub_4055A0(0, a1, a2);\n}\n", 
            "funcStartAddr": "0x405680L", 
            "funcEndAddr": "0x40568cL", 
            "funcName": "sub_405680"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4056A0(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_6124F0;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6124C0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6124D0);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_6124E0);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_405080(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x4056a0L", 
            "funcEndAddr": "0x405710L", 
            "funcName": "sub_4056A0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405720(char *a1)\n{\n  return sub_4056A0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x405720L", 
            "funcEndAddr": "0x405731L", 
            "funcName": "sub_405720"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405750(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_405750(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402144L", 
            "funcEndAddr": "0x402149L", 
            "funcName": "sub_405750"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405750(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_405750(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405080(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x402144L", 
            "funcEndAddr": "0x402149L", 
            "funcName": "sub_405750"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4057C0(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_6124C0);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_6124D0);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_6124E0);\n  v9 = qword_6124F0;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_405080(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x4057c0L", 
            "funcEndAddr": "0x40582cL", 
            "funcName": "sub_4057C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4058D0(char *a1)\n{\n  return sub_405080(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6122E0);\n}\n", 
            "funcStartAddr": "0x4058d0L", 
            "funcEndAddr": "0x4058e6L", 
            "funcName": "sub_4058D0"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_4058F0(_QWORD *a1)\n{\n  __int64 v2; // [rsp+0h] [rbp-98h]\n  __int64 v3; // [rsp+8h] [rbp-90h]\n\n  if ( __lxstat(1, \"/\", (struct stat *)&v2) )\n    return 0LL;\n  *a1 = v3;\n  a1[1] = v2;\n  return a1;\n}\n", 
            "funcStartAddr": "0x4058f0L", 
            "funcEndAddr": "0x40593bL", 
            "funcName": "sub_4058F0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405940(_BYTE *a1, _BYTE *a2, _DWORD *a3, unsigned int *a4, char **a5, char **a6)\n{\n  unsigned int v6; // er15\n  char **v7; // r13\n  char **v8; // r12\n  unsigned int *v9; // rbp\n  signed __int64 v10; // r14\n  char *v11; // r14\n  char *v12; // rbx\n  struct group *v13; // rax\n  char *v15; // rax\n  _BYTE *v16; // r10\n  bool v17; // dl\n  struct passwd *v18; // rax\n  const char *v19; // r12\n  void *v20; // rbp\n  __int64 v21; // rax\n  struct group *v22; // rax\n  void *v23; // rdi\n  int v24; // [rsp+Ch] [rbp-6Ch]\n  bool v25; // [rsp+Ch] [rbp-6Ch]\n  _DWORD *v26; // [rsp+10h] [rbp-68h]\n  unsigned __int64 v27; // [rsp+20h] [rbp-58h]\n\n  v6 = -1;\n  v7 = a6;\n  v8 = a5;\n  v9 = a4;\n  v26 = a3;\n  v24 = *a3;\n  if ( a4 )\n    v6 = *a4;\n  if ( a5 )\n    *a5 = 0LL;\n  if ( a6 )\n    *a6 = 0LL;\n  if ( !a2 )\n  {\n    v12 = 0LL;\n    v11 = 0LL;\n    if ( !*a1 )\n      goto LABEL_15;\n    v21 = sub_4064F0(a1);\n    v16 = 0LL;\n    v12 = (char *)v21;\n    goto LABEL_34;\n  }\n  v10 = a2 - a1;\n  if ( a2 == a1 )\n  {\n    v11 = a2 + 1;\n    if ( a2[1] )\n      goto LABEL_10;\n    v12 = 0LL;\nLABEL_40:\n    v11 = 0LL;\n    goto LABEL_15;\n  }\n  v15 = (char *)sub_4064C0(a1, v10 + 1);\n  v16 = a2;\n  v15[v10] = 0;\n  v12 = v15;\n  if ( !a2[1] )\n  {\nLABEL_34:\n    if ( !v12 )\n      goto LABEL_40;\n    v11 = 0LL;\n    v17 = v16 != 0LL;\n    if ( *v12 == 43 )\n    {\nLABEL_36:\n      if ( v17 )\n      {\n        endpwent();\n        v19 = \"invalid spec\";\n        v20 = 0LL;\n        goto LABEL_38;\n      }\n      if ( (unsigned int)sub_4065D0(v12) || (v24 = v27, v27 > 0xFFFFFFFE) )\n      {\n        endpwent();\n        v19 = \"invalid user\";\n        v20 = 0LL;\n        goto LABEL_38;\n      }\n      endpwent();\n      if ( !v11 )\n        goto LABEL_15;\nLABEL_11:\n      if ( *v11 != 43 )\n        goto LABEL_12;\n      goto LABEL_29;\n    }\nLABEL_25:\n    v25 = v17;\n    v18 = getpwnam(v12);\n    v17 = v25;\n    if ( v18 )\n    {\n      v24 = v18->pw_uid;\n      if ( v17 )\n      {\n        v6 = v18->pw_gid;\n        v22 = getgrgid(v18->pw_gid);\n        if ( v22 )\n          v23 = v22->gr_name;\n        else\n          v23 = (void *)sub_403C60(v6, (__int64)&v27);\n        v11 = (char *)sub_4064F0(v23);\n        endgrent();\n        endpwent();\n        goto LABEL_15;\n      }\n      endpwent();\n      if ( v11 )\n      {\n        if ( *v11 != 43 )\n        {\nLABEL_12:\n          v13 = getgrnam(v11);\n          if ( v13 )\n          {\n            v6 = v13->gr_gid;\nLABEL_14:\n            endgrent();\n            v11 = (char *)sub_4064F0(v11);\n            goto LABEL_15;\n          }\n        }\nLABEL_29:\n        if ( !(unsigned int)sub_4065D0(v11) )\n        {\n          v6 = v27;\n          if ( v27 <= 0xFFFFFFFE )\n            goto LABEL_14;\n        }\n        endgrent();\n        v19 = \"invalid group\";\n        v20 = (void *)sub_4064F0(v11);\nLABEL_38:\n        free(v12);\n        free(v20);\n        return dcgettext(0LL, v19, 5);\n      }\n      goto LABEL_15;\n    }\n    goto LABEL_36;\n  }\n  v11 = a2 + 1;\n  if ( v15 )\n  {\n    v17 = a2 != 0LL && v11 == 0LL;\n    if ( *v15 == 43 )\n      goto LABEL_36;\n    goto LABEL_25;\n  }\nLABEL_10:\n  v12 = 0LL;\n  if ( v11 )\n    goto LABEL_11;\nLABEL_15:\n  *v26 = v24;\n  if ( v9 )\n    *v9 = v6;\n  if ( v8 )\n  {\n    *v8 = v12;\n    v12 = 0LL;\n  }\n  if ( v7 )\n  {\n    *v7 = v11;\n    v11 = 0LL;\n  }\n  free(v12);\n  free(v11);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x405940L", 
            "funcEndAddr": "0x405c4dL", 
            "funcName": "sub_405940"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_405C50(char *s, _DWORD *a2, unsigned int *a3, char **a4, char **a5)\n{\n  char **v5; // r13\n  char **v6; // r12\n  unsigned int *v7; // rbp\n  char *v8; // rax\n  char *v9; // r15\n  char *v10; // rax\n  char *v11; // r10\n  char *v12; // rax\n  char *v13; // rax\n  char *v15; // [rsp+0h] [rbp-40h]\n\n  if ( !a3 )\n    return sub_405940(s, 0LL, a2, 0LL, a4, a5);\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = strchr(s, 58);\n  v9 = v8;\n  v10 = sub_405940(s, v8, a2, v7, v6, v5);\n  v11 = v10;\n  if ( !v9 )\n  {\n    v15 = v10;\n    if ( !v10 || (v12 = strchr(s, 46), v11 = v15, v12) && (v13 = sub_405940(s, v12, a2, v7, v6, v5), v11 = v15, !v13) )\n      v11 = 0LL;\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x405c50L", 
            "funcEndAddr": "0x405d1dL", 
            "funcName": "sub_405C50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405D20(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_405D20(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402149L", 
            "funcEndAddr": "0x40214eL", 
            "funcName": "sub_405D20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_405D20(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_405D20(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x402149L", 
            "funcEndAddr": "0x40214eL", 
            "funcName": "sub_405D20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406120(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_405D20(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_405D20(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x406120L", 
            "funcEndAddr": "0x406180L", 
            "funcName": "sub_406120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406180(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_405D20(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_405D20(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x406180L", 
            "funcEndAddr": "0x40623cL", 
            "funcName": "sub_406180"
        }, 
        {
            "decompiledFuncCode": "int sub_406240()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_40C700, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n", 
            "funcStartAddr": "0x406240L", 
            "funcEndAddr": "0x4062b4L", 
            "funcName": "sub_406240"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4062C0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_406510();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4062c0L", 
            "funcEndAddr": "0x4062daL", 
            "funcName": "sub_4062C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_406320(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_406510();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406320L", 
            "funcEndAddr": "0x406356L", 
            "funcName": "sub_406320"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4064C0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4062C0(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x4064c0L", 
            "funcEndAddr": "0x4064e8L", 
            "funcName": "sub_4064C0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_4064F0(void *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen((const char *)src);\n  return sub_4064C0(src, v1 + 1);\n}\n", 
            "funcStartAddr": "0x4064f0L", 
            "funcEndAddr": "0x406503L", 
            "funcName": "sub_4064F0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_406510()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x406510L", 
            "funcEndAddr": "0x406541L", 
            "funcName": "sub_406510"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406550(__int64 a1, int a2)\n{\n  __int64 result; // rax\n\n  result = fts_open(a1, a2 | 0x200u);\n  if ( !result )\n  {\n    if ( *__errno_location() != 22 )\n      sub_406510();\n    __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 0x29u, \"xfts_open\");\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406550L", 
            "funcEndAddr": "0x406599L", 
            "funcName": "sub_406550"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_4065A0(__int64 a1, __int64 a2)\n{\n  bool result; // al\n  int v3; // edx\n\n  result = 1;\n  v3 = *(_DWORD *)(a1 + 72) & 0x11;\n  if ( v3 != 16 )\n  {\n    result = 0;\n    if ( v3 == 17 )\n      result = *(_QWORD *)(a2 + 88) != 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4065a0L", 
            "funcEndAddr": "0x4065c9L", 
            "funcName": "sub_4065A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4065D0(char *nptr, char **a2, unsigned int a3, unsigned __int64 *a4, const char *a5)\n{\n  char **v5; // r15\n  unsigned __int64 *v6; // r14\n  const char *v7; // r13\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  unsigned __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // er12\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // er9\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  int base; // [rsp+0h] [rbp-58h]\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h]\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoul\");\n  v5 = a2;\n  base = a3;\n  v6 = a4;\n  v7 = a5;\n  if ( !a2 )\n    v5 = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( v11[v10] & 0x2000 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = strtoul(nptr, v5, base);\n  if ( *v5 == nptr )\n  {\n    basea = *v5;\n    if ( v7 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(v7, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( v7 )\n  {\n    v15 = (unsigned __int8)**v5;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *v5;\n      v26 = strchr(v7, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_39:\n        *v6 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      v19 = 142129060940101LL;\n      if ( !_bittest64(&v19, (unsigned int)(v15 - 69)) || (v37 = v18, v20 = strchr(v7, 48), v18 = v37, !v20) )\n      {\nLABEL_26:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_27;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_27:\n          switch ( (_BYTE)v15 )\n          {\n            case 0x42:\n              if ( v13 >> 54 )\n                goto LABEL_37;\n              v13 <<= 10;\n              break;\n            case 0x45:\n              goto LABEL_70;\n            case 0x47:\n            case 0x67:\n              goto LABEL_76;\n            case 0x4B:\n            case 0x6B:\n              goto LABEL_36;\n            case 0x4D:\n            case 0x6D:\n              goto LABEL_29;\n            case 0x50:\n              goto LABEL_64;\n            case 0x54:\n            case 0x74:\n              goto LABEL_58;\n            case 0x59:\n              goto LABEL_52;\n            case 0x5A:\n              goto LABEL_46;\n            case 0x62:\n              goto LABEL_43;\n            case 0x63:\n              break;\n            case 0x77:\n              if ( (v13 & 0x8000000000000000LL) != 0LL )\n                goto LABEL_37;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_39;\n          }\nLABEL_32:\n          v24 = &v18[v22];\n          *v5 = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (_BYTE)v15 )\n          {\n            case 0x45:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_70:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_50;\n            case 0x46:\n            case 0x48:\n            case 0x49:\n            case 0x4A:\n            case 0x4C:\n            case 0x4E:\n            case 0x4F:\n            case 0x51:\n            case 0x52:\n            case 0x53:\n            case 0x55:\n            case 0x56:\n            case 0x57:\n            case 0x58:\n            case 0x5B:\n            case 0x5C:\n            case 0x5D:\n            case 0x5E:\n            case 0x5F:\n            case 0x60:\n            case 0x61:\n            case 0x64:\n            case 0x65:\n            case 0x66:\n            case 0x68:\n            case 0x69:\n            case 0x6A:\n            case 0x6C:\n            case 0x6E:\n            case 0x6F:\n            case 0x70:\n            case 0x71:\n            case 0x72:\n            case 0x73:\n              goto LABEL_39;\n            case 0x47:\n            case 0x67:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_76:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_32;\n            case 0x4B:\n            case 0x6B:\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_36:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_32;\n              goto LABEL_37;\n            case 0x4D:\n            case 0x6D:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_29:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_37;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 0x50:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_64:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_50;\n            case 0x54:\n            case 0x74:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_58:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_50;\n            case 0x59:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_52:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_50;\n            case 0x5A:\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_46:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_50:\n              v14 |= v28;\n              break;\n            case 0x62:\n              v22 = 1;\nLABEL_43:\n              if ( v13 >> 55 )\n              {\nLABEL_37:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 0x63:\n              v22 = 1;\n              goto LABEL_32;\n            default:\n              goto LABEL_26;\n          }\n          goto LABEL_32;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_27;\n    }\n  }\nLABEL_13:\n  *v6 = v13;\n  return v14;\n}\n", 
            "funcStartAddr": "0x4065d0L", 
            "funcEndAddr": "0x4069f4L", 
            "funcName": "sub_4065D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406A00(int fd, char *file, __uid_t owner, __gid_t group, int a5)\n{\n  int v5; // ebx\n  char *v6; // r12\n  __uid_t v7; // er14\n  __gid_t v8; // er15\n  int v9; // ebp\n  const char *v10; // rax\n  int v11; // eax\n  unsigned int v12; // er13\n  int *v13; // rax\n  unsigned __int64 v14; // rsi\n  int *v15; // rdi\n  __int64 v16; // rcx\n  int *v18; // rbx\n  int v19; // ebp\n  int *v20; // rax\n  int v21; // ebp\n  int *v22; // rbx\n  int *v23; // rax\n  int *v24; // rax\n  int *ptr; // [rsp+0h] [rbp-1008h]\n  int *ptra; // [rsp+0h] [rbp-1008h]\n  unsigned int v27; // [rsp+Ch] [rbp-FFCh]\n  int v28; // [rsp+10h] [rbp-FF8h]\n\n  if ( a5 & 0xFFFFFEFF )\n  {\n    v12 = -1;\n    *__errno_location() = 22;\n    return v12;\n  }\n  v5 = fd;\n  v6 = file;\n  v7 = owner;\n  v8 = group;\n  v9 = a5;\n  if ( fd == -100 || *file == 47 )\n  {\n    if ( a5 == 256 )\n      v12 = lchown(file, owner, group);\n    else\n      v12 = chown(file, owner, group);\n    return v12;\n  }\n  v10 = (const char *)sub_409D90(&v28, (unsigned int)fd, file);\n  if ( !v10 )\n    goto LABEL_12;\n  ptr = (int *)v10;\n  if ( v9 == 256 )\n    v11 = lchown(v10, v7, v8);\n  else\n    v11 = chown(v10, v7, v8);\n  v12 = v11;\n  v13 = __errno_location();\n  v14 = (unsigned int)*v13;\n  if ( ptr != &v28 )\n  {\n    v15 = ptr;\n    v27 = *v13;\n    ptra = v13;\n    free(v15);\n    v14 = v27;\n    v13 = ptra;\n  }\n  if ( v12 != -1 )\n    return v12;\n  if ( (unsigned int)v14 > 0x26 )\n  {\n    if ( (_DWORD)v14 == 95 )\n      goto LABEL_12;\nLABEL_25:\n    *v13 = v14;\n    return v12;\n  }\n  v16 = 274878963718LL;\n  if ( !_bittest64(&v16, v14) )\n    goto LABEL_25;\nLABEL_12:\n  if ( (unsigned int)sub_40B990(&v28) )\n  {\n    v24 = __errno_location();\n    sub_40B8E0(*v24);\n  }\n  if ( v5 >= 0 && v28 == v5 )\n  {\n    v12 = -1;\n    sub_40BA00(&v28);\n    *__errno_location() = 9;\n    return v12;\n  }\n  if ( fchdir(v5) )\n  {\n    v20 = __errno_location();\n    v12 = -1;\n    v21 = *v20;\n    v22 = v20;\n    sub_40BA00(&v28);\n    *v22 = v21;\n    return v12;\n  }\n  if ( v9 == 256 )\n    v12 = lchown(v6, v7, v8);\n  else\n    v12 = chown(v6, v7, v8);\n  if ( v12 != -1 )\n  {\n    if ( !(unsigned int)sub_40B9E0(&v28) )\n    {\n      sub_40BA00(&v28);\n      return v12;\n    }\nLABEL_35:\n    v23 = __errno_location();\n    sub_40B910(*v23);\n  }\n  v18 = __errno_location();\n  v19 = *v18;\n  if ( (unsigned int)sub_40B9E0(&v28) )\n    goto LABEL_35;\n  sub_40BA00(&v28);\n  if ( v19 )\n    *v18 = v19;\n  return v12;\n}\n", 
            "funcStartAddr": "0x406a00L", 
            "funcEndAddr": "0x406c6eL", 
            "funcName": "sub_406A00"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406C90(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n", 
            "funcStartAddr": "0x406c90L", 
            "funcEndAddr": "0x406c9dL", 
            "funcName": "sub_406C90"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406CA0(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n", 
            "funcStartAddr": "0x406ca0L", 
            "funcEndAddr": "0x406cacL", 
            "funcName": "sub_406CA0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_406CB0(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n", 
            "funcStartAddr": "0x406cb0L", 
            "funcEndAddr": "0x406cbaL", 
            "funcName": "sub_406CB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406CC0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // rdx\n\n  result = 0xFFFFFFFFLL;\n  v3 = *(_QWORD *)(*(_QWORD *)a2 + 128LL);\n  if ( *(_QWORD *)(*(_QWORD *)a1 + 128LL) >= v3 )\n    result = *(_QWORD *)(*(_QWORD *)a1 + 128LL) > v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x406cc0L", 
            "funcEndAddr": "0x406ce2L", 
            "funcName": "sub_406CC0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406CF0(__int64 a1, __int64 a2, char a3)\n{\n  struct stat *v3; // rbp\n  __int64 v4; // rbx\n  int v5; // eax\n  bool v6; // zf\n  const char *v7; // rsi\n  int *v8; // rax\n  int *v9; // r12\n  int v10; // eax\n  __int64 result; // rax\n  int v12; // eax\n  unsigned __int64 v13; // rax\n\n  v3 = (struct stat *)(a2 + 120);\n  v4 = a2;\n  v5 = *(_DWORD *)(a1 + 72);\n  v6 = *(_QWORD *)(a2 + 88) == 0LL;\n  v7 = *(const char **)(a2 + 48);\n  if ( v6 && v5 & 1 || v5 & 2 || a3 )\n  {\n    if ( !__xstat(1, v7, v3) )\n      goto LABEL_10;\n    v8 = __errno_location();\n    v9 = v8;\n    v10 = *v8;\n    if ( v10 == 2 )\n    {\n      if ( !__lxstat(1, *(const char **)(v4 + 48), v3) )\n      {\n        *v9 = 0;\n        return 13LL;\n      }\n      v10 = *v9;\n    }\nLABEL_15:\n    *(_DWORD *)(v4 + 64) = v10;\n    *(_QWORD *)(v4 + 120) = 0LL;\n    v3->__unused[2] = 0LL;\n    memset(\n      (void *)((unsigned __int64)&v3->st_ino & 0xFFFFFFFFFFFFFFF8LL),\n      0,\n      8LL * (((unsigned int)v3 - (((_DWORD)v3 + 8) & 0xFFFFFFF8) + 144) >> 3));\n    return 10LL;\n  }\n  if ( __fxstatat(1, *(_DWORD *)(a1 + 44), v7, v3, 256) )\n  {\n    v10 = *__errno_location();\n    goto LABEL_15;\n  }\nLABEL_10:\n  v12 = *(_DWORD *)(v4 + 144) & 0xF000;\n  if ( v12 == 0x4000 )\n  {\n    v13 = *(_QWORD *)(v4 + 136);\n    if ( v13 <= 1 || *(_QWORD *)(v4 + 88) <= 0LL )\n    {\n      v13 = -1LL;\n    }\n    else if ( !(*(_BYTE *)(a1 + 72) & 0x20) )\n    {\n      v13 -= 2LL;\n    }\n    v6 = *(_BYTE *)(v4 + 264) == 46;\n    *(_QWORD *)(v4 + 104) = v13;\n    result = 1LL;\n    if ( v6 && (!*(_BYTE *)(v4 + 265) || (*(_DWORD *)(v4 + 264) & 0xFFFF00) == 11776) )\n      result = *(_QWORD *)(v4 + 88) < 1uLL ? 1 : 5;\n  }\n  else if ( v12 == 40960 )\n  {\n    result = 12LL;\n  }\n  else\n  {\n    result = 5 * (unsigned int)(v12 == 0x8000) + 3;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406cf0L", 
            "funcEndAddr": "0x406e9aL", 
            "funcName": "sub_406CF0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406EA0(__int64 a1, __int64 a2, size_t a3)\n{\n  size_t v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rbx\n  int (*v6)(const void *, const void *); // r13\n  void *v7; // rdi\n  void *v8; // rax\n  _QWORD *v9; // rdx\n  __int64 *v10; // r8\n  __int64 result; // rax\n  __int64 *v12; // rdx\n  __int64 v13; // rsi\n  __int64 v14; // rcx\n  __int64 v15; // rdi\n  __int64 v16; // rdx\n\n  v3 = a3;\n  v4 = a1;\n  v5 = a2;\n  v6 = *(int (**)(const void *, const void *))(a1 + 64);\n  v7 = *(void **)(a1 + 16);\n  if ( *(_QWORD *)(v4 + 56) >= a3 )\n    goto LABEL_5;\n  *(_QWORD *)(v4 + 56) = a3 + 40;\n  if ( a3 + 40 > 0x1FFFFFFFFFFFFFFFLL )\n  {\nLABEL_14:\n    free(v7);\n    *(_QWORD *)(v4 + 16) = 0LL;\n    result = a2;\n    *(_QWORD *)(v4 + 56) = 0LL;\n    return result;\n  }\n  v8 = realloc(v7, 8 * (a3 + 40));\n  v7 = v8;\n  if ( !v8 )\n  {\n    v7 = *(void **)(v4 + 16);\n    goto LABEL_14;\n  }\n  *(_QWORD *)(v4 + 16) = v8;\nLABEL_5:\n  v9 = v7;\n  if ( a2 )\n  {\n    do\n    {\n      ++v9;\n      *(v9 - 1) = v5;\n      v5 = *(_QWORD *)(v5 + 16);\n    }\n    while ( v5 );\n  }\n  qsort(v7, v3, 8uLL, v6);\n  v10 = *(__int64 **)(v4 + 16);\n  result = *v10;\n  v12 = *(__int64 **)(v4 + 16);\n  v13 = *v10;\n  v14 = v3 - 1;\n  if ( v3 == 1 )\n  {\n    v16 = *v10;\n  }\n  else\n  {\n    while ( 1 )\n    {\n      v15 = v12[1];\n      ++v12;\n      *(_QWORD *)(v13 + 16) = v15;\n      if ( !--v14 )\n        break;\n      v13 = *v12;\n    }\n    v16 = v10[v3 - 1];\n  }\n  *(_QWORD *)(v16 + 16) = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x406ea0L", 
            "funcEndAddr": "0x406f9dL", 
            "funcName": "sub_406EA0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_406FA0(__int64 a1, const void *a2, size_t a3)\n{\n  size_t v3; // rbp\n  char *v4; // rax\n  char *v5; // rbx\n  __int64 v6; // rax\n\n  v3 = a3;\n  v4 = (char *)malloc((a3 + 272) & 0xFFFFFFFFFFFFFFF8LL);\n  v5 = v4;\n  if ( v4 )\n  {\n    memcpy(v4 + 264, a2, v3);\n    v6 = *(_QWORD *)(a1 + 32);\n    v5[v3 + 264] = 0;\n    *((_QWORD *)v5 + 12) = v3;\n    *((_QWORD *)v5 + 10) = a1;\n    *((_QWORD *)v5 + 7) = v6;\n    *((_DWORD *)v5 + 16) = 0;\n    *((_QWORD *)v5 + 3) = 0LL;\n    *(_DWORD *)(v5 + 114) = 196608;\n    *((_QWORD *)v5 + 4) = 0LL;\n    *((_QWORD *)v5 + 5) = 0LL;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x406fa0L", 
            "funcEndAddr": "0x40702aL", 
            "funcName": "sub_406FA0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_407030(void *ptr)\n{\n  void *v1; // rbx\n  DIR *v2; // rdi\n  void *v3; // rbp\n  void *v4; // rdi\n\n  if ( ptr )\n  {\n    v1 = ptr;\n    do\n    {\n      v2 = (DIR *)*((_QWORD *)v1 + 3);\n      v3 = (void *)*((_QWORD *)v1 + 2);\n      if ( v2 )\n        closedir(v2);\n      v4 = v1;\n      v1 = v3;\n      free(v4);\n    }\n    while ( v3 );\n  }\n}\n", 
            "funcStartAddr": "0x407030L", 
            "funcEndAddr": "0x407071L", 
            "funcName": "sub_407030"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407080(__int64 a1)\n{\n  int v1; // eax\n  __int64 result; // rax\n\n  while ( 1 )\n  {\n    result = sub_40B2D0(a1);\n    if ( (_BYTE)result )\n      break;\n    v1 = sub_40B320(a1);\n    if ( v1 >= 0 )\n      close(v1);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407080L", 
            "funcEndAddr": "0x4070b9L", 
            "funcName": "sub_407080"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4070C0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40A8F0(13LL, 0LL, sub_406CA0, sub_406CB0, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40A680(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40B090(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n\n__int64 __fastcall sub_4070C0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40A8F0(13LL, 0LL, sub_406CA0, sub_406CB0, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40A680(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40B090(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40214eL", 
            "funcEndAddr": "0x402153L", 
            "funcName": "sub_4070C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4070C0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40A8F0(13LL, 0LL, sub_406CA0, sub_406CB0, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40A680(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40B090(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n\n__int64 __fastcall sub_4070C0(__int64 a1)\n{\n  __int64 v1; // rbx\n  __int64 v2; // r12\n  __int64 v3; // rax\n  __int64 result; // rax\n  _QWORD *v5; // rbx\n  __int64 v6; // rdx\n  __int64 v7; // rax\n  struct statfs v8; // [rsp+0h] [rbp-98h]\n\n  v1 = *(_QWORD *)(a1 + 80);\n  if ( !(*(_BYTE *)(v1 + 73) & 2) )\n    return 0LL;\n  v2 = *(_QWORD *)(v1 + 80);\n  if ( !v2 )\n  {\n    v2 = sub_40A8F0(13LL, 0LL, sub_406CA0, sub_406CB0, free);\n    *(_QWORD *)(v1 + 80) = v2;\n    if ( !v2 )\n    {\n      if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n        return 0LL;\n      return v8.f_type;\n    }\n  }\n  v8.f_type = *(_QWORD *)(a1 + 120);\n  v3 = sub_40A680(v2, &v8);\n  if ( v3 )\n    return *(_QWORD *)(v3 + 8);\n  if ( fstatfs(*(_DWORD *)(*(_QWORD *)(a1 + 80) + 44LL), &v8) )\n    return 0LL;\n  v5 = malloc(0x10uLL);\n  result = v8.f_type;\n  if ( v5 )\n  {\n    v6 = *(_QWORD *)(a1 + 120);\n    v5[1] = v8.f_type;\n    *v5 = v6;\n    v7 = sub_40B090(v2, v5);\n    if ( v7 )\n    {\n      if ( v5 != (_QWORD *)v7 )\n        abort();\n      return v8.f_type;\n    }\n    free(v5);\n    result = v8.f_type;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40214eL", 
            "funcEndAddr": "0x402153L", 
            "funcName": "sub_4070C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4071E0(__int64 a1)\n{\n  __int64 v1; // rax\n  unsigned int v2; // edx\n\n  v1 = sub_4070C0(a1);\n  if ( v1 == 40864 )\n    return 0;\n  if ( v1 > 40864 )\n  {\n    if ( v1 != 1397113167 )\n    {\n      v2 = 2;\n      if ( v1 != 1481003842 )\n        v2 = (v1 == 1382369651) + 1;\n      return v2;\n    }\n    return 0;\n  }\n  v2 = 0;\n  if ( !v1 )\n    return v2;\n  return v1 != 26985;\n}\n", 
            "funcStartAddr": "0x4071e0L", 
            "funcEndAddr": "0x407244L", 
            "funcName": "sub_4071E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_407250(__int64 a1, int a2, char a3)\n{\n  int v3; // ebp\n  int v4; // esi\n  int v5; // eax\n\n  v3 = a2;\n  v4 = *(_DWORD *)(a1 + 44);\n  if ( v4 == v3 && v4 != -100 )\n    abort();\n  if ( a3 )\n  {\n    v5 = sub_40B2E0(a1 + 96);\n    if ( v5 < 0 )\n    {\nLABEL_6:\n      *(_DWORD *)(a1 + 44) = v3;\n      return;\n    }\n    close(v5);\n    *(_DWORD *)(a1 + 44) = v3;\n  }\n  else\n  {\n    if ( *(_BYTE *)(a1 + 72) & 4 || v4 < 0 )\n      goto LABEL_6;\n    close(v4);\n    *(_DWORD *)(a1 + 44) = v3;\n  }\n}\n", 
            "funcStartAddr": "0x407250L", 
            "funcEndAddr": "0x4072b6L", 
            "funcName": "sub_407250"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4072C0(__int64 a1)\n{\n  int v1; // edx\n  unsigned int v2; // ebp\n\n  v2 = *(_DWORD *)(a1 + 72) & 4;\n  if ( v2 )\n  {\n    v2 = 0;\n  }\n  else\n  {\n    v1 = *(_DWORD *)(a1 + 72);\n    if ( v1 & 0x200 )\n      sub_407250(a1, -100, 1);\n    else\n      v2 = fchdir(*(_DWORD *)(a1 + 40)) != 0;\n  }\n  sub_407080(a1 + 96);\n  return v2;\n}\n", 
            "funcStartAddr": "0x4072c0L", 
            "funcEndAddr": "0x40731aL", 
            "funcName": "sub_4072C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407320(void **a1, size_t *a2, __int64 a3)\n{\n  void **v3; // rbx\n  void *v4; // rdi\n  size_t v5; // rax\n  void *v6; // rax\n  __int64 result; // rax\n\n  v3 = a1;\n  v4 = *a1;\n  v5 = *a2 + a3 + 256;\n  if ( *a2 > v5 )\n  {\n    free(v4);\n    *v3 = 0LL;\n    *__errno_location() = 36;\n    result = 0LL;\n  }\n  else\n  {\n    *a2 = v5;\n    v6 = realloc(v4, v5);\n    if ( v6 )\n    {\n      *v3 = v6;\n      result = 1LL;\n    }\n    else\n    {\n      free(*v3);\n      *v3 = 0LL;\n      result = 0LL;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407320L", 
            "funcEndAddr": "0x40738bL", 
            "funcName": "sub_407320"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_407390(__int16 a1, __int64 *a2)\n{\n  __int64 v2; // rax\n  bool result; // al\n  void *v4; // rax\n  void *v5; // rdi\n\n  if ( a1 & 0x102 )\n  {\n    v2 = sub_40A8F0(31LL, 0LL, sub_406C90, sub_406C70, free);\n    *a2 = v2;\n    result = v2 != 0;\n  }\n  else\n  {\n    v4 = malloc(0x20uLL);\n    v5 = v4;\n    *a2 = (__int64)v4;\n    result = 0;\n    if ( v5 )\n    {\n      sub_409F20();\n      result = 1;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407390L", 
            "funcEndAddr": "0x4073ebL", 
            "funcName": "sub_407390"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4073F0(char a1, __int16 a2, char a3)\n{\n  __int64 result; // rax\n\n  if ( a2 & 0x200 )\n    result = sub_40B940(a1);\n  else\n    result = sub_409FB0(a3);\n  return result;\n}\n", 
            "funcStartAddr": "0x4073f0L", 
            "funcEndAddr": "0x407434L", 
            "funcName": "sub_4073F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407440(__int64 a1, __int64 a2, int a3, const char *a4)\n{\n  int v4; // ebp\n  char v5; // bl\n  int v6; // er12\n  int v7; // edx\n  char v8; // r14\n  int v9; // eax\n  int v10; // er12\n  unsigned int v11; // ebx\n  int *v12; // rax\n  int v13; // er13\n  int *v14; // rbp\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h]\n\n  v4 = a3;\n  v5 = (char)a4;\n  v6 = *(_DWORD *)(a1 + 72);\n  v7 = *(_DWORD *)(a1 + 72) & 4;\n  if ( a4 && !strcmp(a4, \"..\") )\n  {\n    if ( !v7 )\n    {\n      if ( v4 >= 0 )\n      {\n        v10 = v4;\n        v8 = 1;\n        goto LABEL_12;\n      }\n      if ( v6 & 0x200 )\n      {\n        v8 = sub_40B2D0(a1 + 96);\n        if ( !v8 )\n        {\n          v9 = sub_40B320(a1 + 96);\n          v10 = v9;\n          if ( v9 >= 0 )\n          {\n            v4 = v9;\n            v8 = 1;\n            goto LABEL_12;\n          }\n          v6 = *(_DWORD *)(a1 + 72);\n          v8 = 1;\n        }\n      }\n      else\n      {\n        v8 = 1;\n      }\nLABEL_24:\n      v10 = sub_4073F0(*(_DWORD *)(a1 + 44), v6, v5);\n      if ( v10 < 0 )\n        return (unsigned int)-1;\nLABEL_12:\n      v11 = __fxstat(1, v10, &stat_buf);\n      if ( !v11 )\n      {\n        if ( *(_QWORD *)(a2 + 120) == stat_buf.st_dev && *(_QWORD *)(a2 + 128) == stat_buf.st_ino )\n        {\n          if ( *(_BYTE *)(a1 + 73) & 2 )\n          {\n            sub_407250(a1, v10, v8 ^ 1);\n            return v11;\n          }\n          v11 = fchdir(v10);\n          goto LABEL_17;\n        }\n        *__errno_location() = 2;\n      }\n      v11 = -1;\nLABEL_17:\n      if ( v4 < 0 )\n      {\n        v12 = __errno_location();\n        v13 = *v12;\n        v14 = v12;\n        close(v10);\n        *v14 = v13;\n      }\n      return v11;\n    }\n  }\n  else if ( !v7 )\n  {\n    if ( v4 >= 0 )\n    {\n      v10 = v4;\n      v8 = 0;\n      goto LABEL_12;\n    }\n    v8 = 0;\n    goto LABEL_24;\n  }\n  if ( v6 & 0x200 && v4 >= 0 )\n  {\n    v11 = 0;\n    close(v4);\n  }\n  else\n  {\n    v11 = 0;\n  }\n  return v11;\n}\n", 
            "funcStartAddr": "0x407440L", 
            "funcEndAddr": "0x407606L", 
            "funcName": "sub_407440"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407610(__int16 a1, _QWORD *a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  _QWORD *v4; // rbp\n  __int64 v5; // rax\n  __int64 v6; // rdi\n  __int64 v7; // r12\n  __int64 v8; // rax\n  __int64 result; // rax\n\n  v3 = a3;\n  if ( a1 & 0x102 )\n  {\n    v4 = malloc(0x18uLL);\n    if ( v4 )\n    {\n      v5 = *(_QWORD *)(v3 + 120);\n      v6 = *a2;\n      v4[2] = v3;\n      *v4 = v5;\n      v4[1] = *(_QWORD *)(v3 + 128);\n      v7 = sub_40B090(v6, v4);\n      if ( v4 == (_QWORD *)v7 )\n        return 1LL;\n      free(v4);\n      if ( v7 )\n      {\n        v8 = *(_QWORD *)(v7 + 16);\n        *(_WORD *)(v3 + 112) = 2;\n        *(_QWORD *)v3 = v8;\n        return 1LL;\n      }\n    }\n    result = 0LL;\n  }\n  else\n  {\n    result = sub_409F30(*a2, a3 + 120);\n    if ( !(_BYTE)result )\n      return 1LL;\n    *(_QWORD *)v3 = v3;\n    *(_WORD *)(v3 + 112) = 2;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407610L", 
            "funcEndAddr": "0x4076bfL", 
            "funcName": "sub_407610"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4076C0(__int16 a1, __int64 a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  _QWORD *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *(_QWORD **)a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40B0D0(v5, &v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = *(_QWORD **)a2;\n  if ( !*(_QWORD *)(*(_QWORD *)a2 + 16LL) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n\nvoid __fastcall sub_4076C0(__int16 a1, __int64 a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  _QWORD *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *(_QWORD **)a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40B0D0(v5, &v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = *(_QWORD **)a2;\n  if ( !*(_QWORD *)(*(_QWORD *)a2 + 16LL) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n", 
            "funcStartAddr": "0x402153L", 
            "funcEndAddr": "0x402158L", 
            "funcName": "sub_4076C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_4076C0(__int16 a1, __int64 a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  _QWORD *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *(_QWORD **)a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40B0D0(v5, &v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = *(_QWORD **)a2;\n  if ( !*(_QWORD *)(*(_QWORD *)a2 + 16LL) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n\nvoid __fastcall sub_4076C0(__int16 a1, __int64 a2, _QWORD *a3)\n{\n  _QWORD *v3; // rax\n  _QWORD *v4; // rcx\n  _QWORD *v5; // rdi\n  void *v6; // rax\n  __int64 v7; // rdx\n  __int64 v8; // rax\n  __int64 v9; // [rsp+0h] [rbp-28h]\n  __int64 v10; // [rsp+8h] [rbp-20h]\n\n  if ( a1 & 0x102 )\n  {\n    v5 = *(_QWORD **)a2;\n    v9 = a3[15];\n    v10 = a3[16];\n    v6 = (void *)sub_40B0D0(v5, &v9);\n    if ( v6 )\n    {\n      free(v6);\n      return;\n    }\n    goto LABEL_11;\n  }\n  v3 = (_QWORD *)a3[1];\n  if ( !v3 || v3[11] < 0LL )\n    return;\n  v4 = *(_QWORD **)a2;\n  if ( !*(_QWORD *)(*(_QWORD *)a2 + 16LL) )\nLABEL_11:\n    abort();\n  if ( *v4 == a3[16] && v4[1] == a3[15] )\n  {\n    v7 = v3[15];\n    v8 = v3[16];\n    v4[1] = v7;\n    *v4 = v8;\n  }\n}\n", 
            "funcStartAddr": "0x402153L", 
            "funcEndAddr": "0x402158L", 
            "funcName": "sub_4076C0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407760(__int64 *a1, int a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r13\n  DIR *v4; // rdi\n  int v5; // edi\n  _BYTE *v6; // rax\n  size_t v7; // rbp\n  __int64 v8; // rbx\n  DIR *v9; // r15\n  int *v10; // rax\n  int *v11; // r12\n  struct dirent *v12; // rax\n  struct dirent *v13; // r14\n  size_t v14; // r13\n  char *v15; // r15\n  const void *v16; // rsi\n  __int64 v17; // rax\n  int v18; // eax\n  __int64 v19; // rdx\n  __int64 v20; // rax\n  char v21; // al\n  __int64 v22; // rdx\n  _BYTE *v23; // rdx\n  __int64 v24; // r13\n  __int64 v25; // r15\n  _QWORD *v26; // rax\n  __int64 i; // rcx\n  _QWORD *v28; // rdx\n  char *j; // rax\n  char *v30; // rdx\n  char *v31; // rdx\n  int v32; // edi\n  int v33; // eax\n  int v34; // ebx\n  DIR *v35; // rax\n  bool v36; // zf\n  int v37; // edi\n  char v38; // r14\n  bool v39; // r12\n  DIR *v40; // rdi\n  __int16 v41; // bp\n  char *v42; // rcx\n  __int64 v43; // r15\n  int v44; // ebx\n  __int64 v46; // rax\n  char v47; // al\n  DIR *v48; // rdi\n  int *v49; // rax\n  int v50; // er12\n  int *v51; // rbp\n  __int64 v52; // rax\n  __int64 v53; // rax\n  __int16 v54; // ax\n  DIR *dirp; // [rsp+8h] [rbp-90h]\n  __int64 v56; // [rsp+10h] [rbp-88h]\n  char *ptr; // [rsp+18h] [rbp-80h]\n  size_t v58; // [rsp+20h] [rbp-78h]\n  __int64 v59; // [rsp+20h] [rbp-78h]\n  __int64 v60; // [rsp+28h] [rbp-70h]\n  __int64 v61; // [rsp+30h] [rbp-68h]\n  unsigned __int64 v62; // [rsp+38h] [rbp-60h]\n  _BYTE *dest; // [rsp+40h] [rbp-58h]\n  __int64 v64; // [rsp+48h] [rbp-50h]\n  DIR *v65; // [rsp+50h] [rbp-48h]\n  int v66; // [rsp+58h] [rbp-40h]\n  char v67; // [rsp+5Eh] [rbp-3Ah]\n  char v68; // [rsp+5Fh] [rbp-39h]\n\n  v2 = (__int64)a1;\n  v3 = *a1;\n  v66 = a2;\n  v4 = *(DIR **)(*a1 + 24);\n  v65 = v4;\n  if ( v4 )\n  {\n    if ( dirfd(v4) >= 0 )\n    {\n      if ( !*(_QWORD *)(v2 + 64) )\n      {\n        v62 = 100000LL;\n        v5 = *(_DWORD *)(v2 + 72);\n        v68 = 1;\n        goto LABEL_6;\n      }\n      v62 = -1LL;\n      goto LABEL_5;\n    }\n    closedir(*(DIR **)(v3 + 24));\n    *(_QWORD *)(v3 + 24) = 0LL;\n    if ( a2 == 3 )\n      goto LABEL_127;\n    return 0LL;\n  }\n  LOBYTE(v32) = -100;\n  if ( (*(_DWORD *)(v2 + 72) & 0x204) == 512 )\n    v32 = *(_DWORD *)(v2 + 44);\n  v33 = sub_40B940(v32);\n  v34 = v33;\n  if ( v33 < 0 )\n  {\nLABEL_114:\n    *(_QWORD *)(v3 + 24) = 0LL;\n    if ( a2 == 3 )\n    {\nLABEL_127:\n      *(_WORD *)(v3 + 112) = 4;\n      *(_DWORD *)(v3 + 64) = *__errno_location();\n    }\n    return 0LL;\n  }\n  v35 = fdopendir(v33);\n  if ( !v35 )\n  {\n    v49 = __errno_location();\n    v50 = *v49;\n    v51 = v49;\n    close(v34);\n    *v51 = v50;\n    goto LABEL_114;\n  }\n  v36 = *(_WORD *)(v3 + 112) == 11;\n  *(_QWORD *)(v3 + 24) = v35;\n  if ( v36 )\n  {\n    *(_WORD *)(v3 + 112) = sub_406CF0(v2, v3, 0);\n  }\n  else\n  {\n    v37 = *(_DWORD *)(v2 + 72);\n    if ( v37 & 0x100 )\n    {\n      sub_4076C0(v37, v2 + 88, (_QWORD *)v3);\n      sub_406CF0(v2, v3, 0);\n      if ( !(unsigned __int8)sub_407610(*(_DWORD *)(v2 + 72), (_QWORD *)(v2 + 88), v3) )\n      {\n        ptr = 0LL;\n        *__errno_location() = 12;\n        return (__int64)ptr;\n      }\n    }\n  }\n  v62 = *(_QWORD *)(v2 + 64) < 1uLL ? 100000LL : -1LL;\n  if ( a2 == 2 )\n    goto LABEL_117;\n  if ( (*(_DWORD *)(v2 + 72) & 0x38) == 24 && *(_QWORD *)(v3 + 136) == 2LL && (unsigned int)sub_4071E0(v3) )\n  {\n    if ( a2 == 3 )\n    {\n      v38 = 0;\n      v39 = 1;\n      goto LABEL_69;\n    }\nLABEL_117:\n    v68 = 0;\n    v5 = *(_DWORD *)(v2 + 72);\n    goto LABEL_6;\n  }\n  v38 = 1;\n  v39 = a2 == 3;\nLABEL_69:\n  if ( *(_BYTE *)(v2 + 73) & 2 )\n  {\n    v34 = sub_40BDE0(v34);\n    if ( v34 < 0 )\n    {\n      v40 = *(DIR **)(v3 + 24);\n      v41 = *(_WORD *)(v3 + 114) | 1;\n      if ( !v39 || !v38 )\n      {\n        *(_WORD *)(v3 + 114) |= 1u;\n        closedir(v40);\n        v5 = *(_DWORD *)(v2 + 72);\nLABEL_77:\n        *(_QWORD *)(v3 + 24) = 0LL;\n        v68 = 0;\n        goto LABEL_6;\n      }\n      goto LABEL_73;\n    }\n  }\n  if ( (unsigned int)sub_407440(v2, v3, v34, 0LL) )\n  {\n    v40 = *(DIR **)(v3 + 24);\n    v41 = *(_WORD *)(v3 + 114) | 1;\n    if ( !v39 || !v38 )\n    {\nLABEL_74:\n      *(_WORD *)(v3 + 114) = v41;\n      closedir(v40);\n      v5 = *(_DWORD *)(v2 + 72);\n      *(_QWORD *)(v3 + 24) = 0LL;\n      if ( v5 & 0x200 && v34 >= 0 )\n      {\n        close(v34);\n        v5 = *(_DWORD *)(v2 + 72);\n      }\n      goto LABEL_77;\n    }\nLABEL_73:\n    *(_DWORD *)(v3 + 64) = *__errno_location();\n    goto LABEL_74;\n  }\nLABEL_5:\n  v68 = 1;\n  v5 = *(_DWORD *)(v2 + 72);\nLABEL_6:\n  v56 = *(_QWORD *)(v3 + 72);\n  v64 = v56 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v3 + 56) + v56 - 1) != 47 )\n  {\n    v64 = *(_QWORD *)(v3 + 72);\n    ++v56;\n  }\n  dest = 0LL;\n  if ( v5 & 4 )\n  {\n    v6 = (_BYTE *)(*(_QWORD *)(v2 + 32) + v64);\n    *v6 = 47;\n    dest = v6 + 1;\n  }\n  v67 = 0;\n  v7 = 0LL;\n  v58 = *(_QWORD *)(v2 + 48) - v56;\n  v8 = v2;\n  dirp = 0LL;\n  v60 = v3;\n  v61 = *(_QWORD *)(v3 + 88) + 1LL;\n  ptr = 0LL;\n  while ( 1 )\n  {\n    v9 = *(DIR **)(v60 + 24);\n    if ( !v9 )\n    {\n      v24 = v60;\n      v25 = v8;\n      goto LABEL_86;\n    }\n    v10 = __errno_location();\n    *v10 = 0;\n    v11 = v10;\n    v12 = readdir(v9);\n    v13 = v12;\n    if ( !v12 )\n      break;\n    if ( *(_BYTE *)(v8 + 72) & 0x20 || v12->d_name[0] != 46 || v12->d_name[1] && *(_WORD *)&v12->d_name[1] != 46 )\n    {\n      v14 = strlen(v12->d_name);\n      v15 = sub_406FA0(v8, v13->d_name, v14);\n      if ( !v15 )\n        goto LABEL_79;\n      if ( v58 <= v14 )\n      {\n        v59 = *(_QWORD *)(v8 + 32);\n        v21 = sub_407320((void **)(v8 + 32), (size_t *)(v8 + 48), v64 + v14 + 2);\n        if ( !v21 )\n        {\nLABEL_79:\n          v42 = v15;\n          v43 = v8;\n          v44 = *v11;\n          free(v42);\n          sub_407030(ptr);\n          closedir(*(DIR **)(v60 + 24));\n          *(_QWORD *)(v60 + 24) = 0LL;\n          *(_WORD *)(v60 + 112) = 7;\n          ptr = 0LL;\n          *(_DWORD *)(v43 + 72) |= 0x4000u;\n          *v11 = v44;\n          return (__int64)ptr;\n        }\n        v22 = *(_QWORD *)(v8 + 32);\n        if ( v22 == v59 )\n        {\n          v21 = v67;\n        }\n        else\n        {\n          v23 = (_BYTE *)(v56 + v22);\n          if ( !(*(_BYTE *)(v8 + 72) & 4) )\n            v23 = dest;\n          dest = v23;\n        }\n        v67 = v21;\n        v58 = *(_QWORD *)(v8 + 48) - v56;\n      }\n      if ( __CFADD__(v56, v14) )\n      {\n        free(v15);\n        sub_407030(ptr);\n        closedir(*(DIR **)(v60 + 24));\n        *(_QWORD *)(v60 + 24) = 0LL;\n        *(_WORD *)(v60 + 112) = 7;\n        ptr = 0LL;\n        *(_DWORD *)(v8 + 72) |= 0x4000u;\n        *v11 = 36;\n        return (__int64)ptr;\n      }\n      v16 = v15 + 264;\n      *((_QWORD *)v15 + 11) = v61;\n      v17 = *(_QWORD *)v8;\n      *((_QWORD *)v15 + 9) = v56 + v14;\n      *((_QWORD *)v15 + 1) = v17;\n      *((_QWORD *)v15 + 16) = v13->d_ino;\n      v18 = *(_DWORD *)(v8 + 72);\n      if ( v18 & 4 )\n      {\n        *((_QWORD *)v15 + 6) = *((_QWORD *)v15 + 7);\n        memmove(dest, v16, *((_QWORD *)v15 + 12) + 1LL);\n        v18 = *(_DWORD *)(v8 + 72);\n      }\n      else\n      {\n        *((_QWORD *)v15 + 6) = v16;\n      }\n      if ( *(_QWORD *)(v8 + 64) && !(v18 & 0x400) )\n      {\n        *((_WORD *)v15 + 56) = sub_406CF0(v8, (__int64)v15, 0);\n      }\n      else\n      {\n        v19 = (unsigned int)v13->d_type - 1;\n        if ( (v18 & 0x18) == 24 && v13->d_type & 0xFB )\n        {\n          *((_WORD *)v15 + 56) = 11;\n          if ( (unsigned int)v19 <= 0xB )\n            *((_DWORD *)v15 + 36) = dword_40EE20[v19];\n          else\n            *((_DWORD *)v15 + 36) = 0;\n          v20 = 1LL;\n        }\n        else\n        {\n          *((_WORD *)v15 + 56) = 11;\n          if ( (unsigned int)v19 > 0xB )\n            *((_DWORD *)v15 + 36) = 0;\n          else\n            *((_DWORD *)v15 + 36) = dword_40EE20[v19];\n          v20 = 2LL;\n        }\n        *((_QWORD *)v15 + 21) = v20;\n      }\n      *((_QWORD *)v15 + 2) = 0LL;\n      if ( ptr )\n      {\n        ++v7;\n        *((_QWORD *)dirp + 2) = v15;\n        if ( v7 >= v62 )\n          goto LABEL_39;\n      }\n      else\n      {\n        ptr = v15;\n        if ( ++v7 >= v62 )\n        {\nLABEL_39:\n          v24 = v60;\n          v25 = v8;\n          if ( !v67 )\n            goto LABEL_87;\n          goto LABEL_40;\n        }\n      }\n    }\n    else\n    {\n      v15 = (char *)dirp;\n    }\n    dirp = (DIR *)v15;\n  }\n  v24 = v60;\n  v25 = v8;\n  if ( *v11 )\n  {\n    *(_DWORD *)(v60 + 64) = *v11;\n    *(_WORD *)(v60 + 112) = (v7 | (unsigned __int64)v65) < 1 ? 4 : 7;\n  }\n  v48 = *(DIR **)(v60 + 24);\n  if ( v48 )\n  {\n    closedir(v48);\n    *(_QWORD *)(v60 + 24) = 0LL;\n  }\nLABEL_86:\n  if ( !v67 )\n    goto LABEL_87;\nLABEL_40:\n  v26 = *(_QWORD **)(v25 + 8);\n  for ( i = *(_QWORD *)(v25 + 32); v26; v26 = (_QWORD *)v26[2] )\n  {\n    v28 = (_QWORD *)v26[6];\n    if ( v28 != v26 + 33 )\n      v26[6] = (char *)v28 + i - v26[7];\n    v26[7] = i;\n  }\n  for ( j = ptr; *((_QWORD *)j + 11) >= 0LL; j = v31 )\n  {\n    v30 = (char *)*((_QWORD *)j + 6);\n    if ( v30 != j + 264 )\n      *((_QWORD *)j + 6) = &v30[i - *((_QWORD *)j + 7)];\n    v31 = (char *)*((_QWORD *)j + 2);\n    *((_QWORD *)j + 7) = i;\n    if ( !v31 )\n      v31 = (char *)*((_QWORD *)j + 1);\n  }\nLABEL_87:\n  if ( *(_BYTE *)(v25 + 72) & 4 )\n  {\n    if ( *(_QWORD *)(v25 + 48) == v56 || !v7 )\n      --dest;\n    *dest = 0;\n  }\n  if ( v65 || !v68 )\n    goto LABEL_138;\n  if ( v66 != 1 && v7 )\n    goto LABEL_96;\n  v47 = *(_QWORD *)(v24 + 88) ? (unsigned int)sub_407440(v25, *(_QWORD *)(v24 + 8), -1, \"..\") != 0 : (unsigned int)sub_4072C0(v25) != 0;\n  if ( !v47 )\n  {\nLABEL_138:\n    if ( !v7 )\n    {\n      if ( v66 == 3 )\n      {\n        v54 = *(_WORD *)(v24 + 112);\n        if ( v54 != 4 && v54 != 7 )\n          *(_WORD *)(v24 + 112) = 6;\n      }\n      sub_407030(ptr);\n      return 0LL;\n    }\nLABEL_96:\n    v46 = *(_QWORD *)(v25 + 64);\n    if ( v7 > 0x2710 )\n    {\n      if ( v46 )\n        return sub_406EA0(v25, (__int64)ptr, v7);\n      v52 = sub_4070C0(v24);\n      if ( v52 != 26985 && v52 != 16914836 )\n      {\n        *(_QWORD *)(v25 + 64) = sub_406CC0;\n        v53 = sub_406EA0(v25, (__int64)ptr, v7);\n        *(_QWORD *)(v25 + 64) = 0LL;\n        return v53;\n      }\n      v46 = *(_QWORD *)(v25 + 64);\n    }\n    if ( !v46 || v7 == 1 )\n      return (__int64)ptr;\n    return sub_406EA0(v25, (__int64)ptr, v7);\n  }\n  *(_WORD *)(v24 + 112) = 7;\n  *(_DWORD *)(v25 + 72) |= 0x4000u;\n  sub_407030(ptr);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x407760L", 
            "funcEndAddr": "0x408113L", 
            "funcName": "sub_407760"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_open(const char **a1, unsigned int a2, __int64 a3)\n{\n  const char **v3; // r13\n  __int64 v4; // r14\n  _QWORD *v5; // rax\n  __int64 v6; // rbx\n  const char *v7; // rdi\n  const char **v8; // r15\n  size_t v9; // r12\n  size_t v10; // rax\n  __int64 v11; // rdx\n  const char *v12; // r15\n  char *v13; // rcx\n  void *v14; // r12\n  size_t v15; // rbp\n  char *v16; // rax\n  char *v17; // r15\n  size_t v18; // rax\n  char *v19; // rax\n  int v20; // edi\n  int v21; // esi\n  void *v23; // rdi\n  unsigned int v24; // eax\n  __int64 v25; // rax\n  int v26; // eax\n  char *ptr; // [rsp+8h] [rbp-50h]\n  char v28; // [rsp+16h] [rbp-42h]\n  _BYTE v29[9]; // [rsp+17h] [rbp-41h]\n\n  if ( a2 & 0xFFFFE000 || (a2 & 0x204) == 516 || !(a2 & 0x12) )\n  {\n    v6 = 0LL;\n    *__errno_location() = 22;\n    return v6;\n  }\n  v3 = a1;\n  v4 = a3;\n  v5 = calloc(0x80uLL, 1uLL);\n  v6 = (__int64)v5;\n  if ( v5 )\n  {\n    v5[8] = v4;\n    if ( a2 & 2 )\n    {\n      v24 = a2;\n      BYTE1(v24) &= 0xFDu;\n      *(_DWORD *)(v6 + 72) = v24 | 4;\n    }\n    else\n    {\n      *((_DWORD *)v5 + 18) = a2;\n    }\n    v7 = *a1;\n    *(_DWORD *)(v6 + 44) = -100;\n    if ( v7 )\n    {\n      v8 = v3;\n      v9 = 0LL;\n      do\n      {\n        v10 = strlen(v7);\n        if ( v9 < v10 )\n          v9 = v10;\n        ++v8;\n        v7 = *v8;\n      }\n      while ( *v8 );\n      v11 = v9 + 1;\n      if ( v9 + 1 < 0x1000 )\n        v11 = 4096LL;\n    }\n    else\n    {\n      v11 = 4096LL;\n    }\n    v28 = sub_407320((void **)(v6 + 32), (size_t *)(v6 + 48), v11);\n    if ( !v28 )\n      goto LABEL_44;\n    v12 = *v3;\n    if ( *v3 )\n    {\n      v13 = sub_406FA0(v6, \"\", 0LL);\n      ptr = v13;\n      if ( !v13 )\n      {\nLABEL_43:\n        free(*(void **)(v6 + 32));\nLABEL_44:\n        v23 = (void *)v6;\n        v6 = 0LL;\n        free(v23);\n        return v6;\n      }\n      v12 = *v3;\n      *((_QWORD *)v13 + 11) = -1LL;\n      *((_QWORD *)v13 + 13) = -1LL;\n      if ( !v4 )\n        goto LABEL_19;\n    }\n    else\n    {\n      ptr = 0LL;\n      if ( !v4 )\n      {\nLABEL_47:\n        v14 = 0LL;\nLABEL_36:\n        v19 = sub_406FA0(v6, \"\", 0LL);\n        *(_QWORD *)v6 = v19;\n        if ( v19 )\n        {\n          *((_QWORD *)v19 + 2) = v14;\n          v20 = *(_DWORD *)(v6 + 72);\n          *((_WORD *)v19 + 56) = 9;\n          if ( sub_407390(v20, (__int64 *)(v6 + 88)) )\n          {\n            v21 = *(_DWORD *)(v6 + 72);\n            if ( !(v21 & 0x204) )\n            {\n              v26 = sub_4073F0(*(_DWORD *)(v6 + 44), v21, 26);\n              *(_DWORD *)(v6 + 40) = v26;\n              if ( v26 < 0 )\n                *(_DWORD *)(v6 + 72) |= 4u;\n            }\n            sub_40B2B0(v6 + 96, 0xFFFFFFFFLL);\n            return v6;\n          }\n        }\nLABEL_42:\n        sub_407030(v14);\n        free(ptr);\n        goto LABEL_43;\n      }\n    }\n    v28 = (*(_DWORD *)(v6 + 72) >> 10) & 1;\nLABEL_19:\n    if ( v12 )\n    {\n      v29[8] = 0;\n      v14 = 0LL;\n      v15 = 0LL;\n      *(_QWORD *)v29 = ((unsigned __int8)(a2 >> 12) ^ 1) & 1;\n      while ( 1 )\n      {\n        v18 = strlen(v12);\n        if ( v18 > 2 && v29[0] && v12[v18 - 1] == 47 )\n        {\n          do\n          {\n            if ( v12[v18 - 2] != 47 )\n              break;\n            --v18;\n          }\n          while ( v18 != 1 );\n        }\n        v16 = sub_406FA0(v6, v12, v18);\n        v17 = v16;\n        if ( !v16 )\n          goto LABEL_42;\n        *((_QWORD *)v16 + 11) = 0LL;\n        *((_QWORD *)v16 + 1) = ptr;\n        *((_QWORD *)v16 + 6) = v16 + 264;\n        if ( v14 )\n        {\n          if ( v28 )\n            break;\n        }\n        *((_WORD *)v16 + 56) = sub_406CF0(v6, (__int64)v16, 0);\n        if ( v4 )\n          goto LABEL_25;\n        *((_QWORD *)v17 + 2) = 0LL;\n        if ( v14 )\n          goto LABEL_52;\n        *(_QWORD *)&v29[1] = v17;\n        v14 = v17;\nLABEL_26:\n        v12 = v3[++v15];\n        if ( !v12 )\n        {\n          if ( v4 && v15 > 1 )\n            v14 = (void *)sub_406EA0(v6, (__int64)v14, v15);\n          goto LABEL_36;\n        }\n      }\n      *((_QWORD *)v16 + 21) = 2LL;\n      *((_WORD *)v16 + 56) = 11;\n      if ( !v4 )\n      {\n        *((_QWORD *)v16 + 2) = 0LL;\nLABEL_52:\n        v25 = *(_QWORD *)&v29[1];\n        *(_QWORD *)&v29[1] = v17;\n        *(_QWORD *)(v25 + 16) = v17;\n        goto LABEL_26;\n      }\nLABEL_25:\n      *((_QWORD *)v17 + 2) = v14;\n      v14 = v17;\n      goto LABEL_26;\n    }\n    goto LABEL_47;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x408120L", 
            "funcEndAddr": "0x4084b9L", 
            "funcName": "fts_open"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_close(void *ptr)\n{\n  void *v1; // rbp\n  _QWORD *v2; // rdi\n  void *v3; // rdi\n  int v4; // eax\n  int v5; // edi\n  unsigned int v6; // ebx\n  void *v7; // rdi\n  void *v8; // rdi\n  int *v10; // r12\n  _QWORD *v11; // rbx\n\n  v1 = ptr;\n  v2 = *(_QWORD **)ptr;\n  if ( v2 )\n  {\n    if ( v2[11] >= 0 )\n    {\n      do\n      {\n        while ( 1 )\n        {\n          v11 = (_QWORD *)v2[2];\n          if ( !v11 )\n            break;\n          free(v2);\n          v2 = v11;\n          if ( v11[11] < 0LL )\n            goto LABEL_7;\n        }\n        v11 = (_QWORD *)v2[1];\n        free(v2);\n        v2 = v11;\n      }\n      while ( v11[11] >= 0 );\n    }\n    else\n    {\n      v11 = v2;\n    }\nLABEL_7:\n    free(v11);\n  }\n  v3 = (void *)*((_QWORD *)v1 + 1);\n  if ( v3 )\n    sub_407030(v3);\n  free(*((void **)v1 + 2));\n  free(*((void **)v1 + 4));\n  v4 = *((_DWORD *)v1 + 18);\n  if ( v4 & 0x200 )\n  {\n    v5 = *((_DWORD *)v1 + 11);\n    if ( v5 >= 0 && close(v5) )\n    {\n      v6 = *__errno_location();\n      goto LABEL_13;\n    }\nLABEL_12:\n    v6 = 0;\n    goto LABEL_13;\n  }\n  if ( v4 & 4 )\n    goto LABEL_12;\n  if ( !fchdir(*((_DWORD *)v1 + 10)) )\n  {\n    if ( !close(*((_DWORD *)v1 + 10)) )\n      goto LABEL_12;\n    v10 = __errno_location();\n    goto LABEL_30;\n  }\n  v10 = __errno_location();\n  v6 = *v10;\n  if ( close(*((_DWORD *)v1 + 10)) && !v6 )\nLABEL_30:\n    v6 = *v10;\nLABEL_13:\n  sub_407080((__int64)v1 + 96);\n  v7 = (void *)*((_QWORD *)v1 + 10);\n  if ( v7 )\n    sub_40AB30(v7);\n  v8 = (void *)*((_QWORD *)v1 + 11);\n  if ( *((_DWORD *)v1 + 18) & 0x102 )\n  {\n    if ( v8 )\n      sub_40AB30(v8);\n  }\n  else\n  {\n    free(v8);\n  }\n  free(v1);\n  if ( v6 )\n  {\n    *__errno_location() = v6;\n    v6 = -1;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x4084c0L", 
            "funcEndAddr": "0x408639L", 
            "funcName": "fts_close"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_406CF0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_406CF0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_4073F0(*(_DWORD *)(a1 + 44), v40, 26);\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_4071E0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_406CF0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_407610(*(_DWORD *)(v4 + 72), (_QWORD *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_407030(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4076C0(v15, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_407440(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_407030(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_407760((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4076C0(v31, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_407760((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_407250(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_407440(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_4072C0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4076C0(v9, v4 + 88, (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_4072C0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40AB30(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_407390(v23, (__int64 *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_406CF0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_4073F0(*(_DWORD *)(a1 + 44), v41, 26);\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n\n__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_406CF0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_406CF0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_4073F0(*(_DWORD *)(a1 + 44), v40, 26);\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_4071E0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_406CF0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_407610(*(_DWORD *)(v4 + 72), (_QWORD *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_407030(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4076C0(v15, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_407440(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_407030(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_407760((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4076C0(v31, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_407760((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_407250(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_407440(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_4072C0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4076C0(v9, v4 + 88, (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_4072C0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40AB30(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_407390(v23, (__int64 *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_406CF0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_4073F0(*(_DWORD *)(a1 + 44), v41, 26);\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n", 
            "funcStartAddr": "0x402158L", 
            "funcEndAddr": "0x40215dL", 
            "funcName": "fts_read"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_406CF0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_406CF0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_4073F0(*(_DWORD *)(a1 + 44), v40, 26);\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_4071E0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_406CF0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_407610(*(_DWORD *)(v4 + 72), (_QWORD *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_407030(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4076C0(v15, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_407440(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_407030(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_407760((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4076C0(v31, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_407760((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_407250(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_407440(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_4072C0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4076C0(v9, v4 + 88, (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_4072C0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40AB30(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_407390(v23, (__int64 *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_406CF0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_4073F0(*(_DWORD *)(a1 + 44), v41, 26);\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n\n__int64 __fastcall fts_read(__int64 a1)\n{\n  __int64 v1; // rbp\n  int v2; // edx\n  __int16 v3; // ax\n  __int64 v4; // r12\n  __int16 v5; // cx\n  __int16 v6; // ax\n  __int64 v7; // rbx\n  __int16 v8; // ax\n  int v9; // edi\n  void *v11; // rdi\n  int *v12; // rax\n  _QWORD *v13; // rax\n  void *v14; // rdi\n  int v15; // edi\n  void *v16; // rdi\n  __int64 v17; // rdx\n  void *v18; // rdi\n  char *v19; // rax\n  const void *v20; // r13\n  size_t v21; // r14\n  __int64 v22; // rax\n  int v23; // edi\n  __int16 v24; // ax\n  __int64 v25; // rcx\n  __int64 v26; // rdx\n  __int64 v27; // rax\n  _BYTE *v28; // rax\n  __int16 v29; // ax\n  __int64 v30; // rax\n  int v31; // edi\n  int v32; // eax\n  int v33; // edi\n  __int64 v34; // rbp\n  int v35; // edx\n  __int64 v36; // rcx\n  __int64 v37; // rax\n  __int64 v38; // rdx\n  __int16 v39; // ax\n  int v40; // esi\n  int v41; // esi\n  int v42; // eax\n  int v43; // eax\n  int v44; // eax\n  int v45; // eax\n\n  v1 = *(_QWORD *)a1;\n  if ( !*(_QWORD *)a1 )\n    return 0LL;\n  v2 = *(_DWORD *)(a1 + 72);\n  if ( v2 & 0x4000 )\n    return 0LL;\n  v3 = *(_WORD *)(v1 + 116);\n  v4 = a1;\n  *(_WORD *)(v1 + 116) = 3;\n  if ( v3 == 1 )\n  {\n    *(_WORD *)(v1 + 112) = sub_406CF0(a1, v1, 0);\n    return v1;\n  }\n  v5 = *(_WORD *)(v1 + 112);\n  if ( v3 != 2 )\n  {\n    if ( v5 != 1 )\n      goto LABEL_9;\n    if ( v3 == 4 )\n      goto LABEL_34;\n    goto LABEL_24;\n  }\n  if ( (unsigned __int16)(v5 - 12) <= 1u )\n  {\n    v29 = sub_406CF0(a1, v1, 1);\n    *(_WORD *)(v1 + 112) = v29;\n    if ( v29 == 1 )\n    {\n      v40 = *(_DWORD *)(a1 + 72);\n      if ( !(v40 & 4) )\n      {\n        v43 = sub_4073F0(*(_DWORD *)(a1 + 44), v40, 26);\n        *(_DWORD *)(v1 + 68) = v43;\n        if ( v43 >= 0 )\n        {\n          *(_WORD *)(v1 + 114) |= 2u;\n          v24 = *(_WORD *)(v1 + 112);\n          v7 = v1;\n          goto LABEL_51;\n        }\n        v44 = *__errno_location();\n        *(_WORD *)(v1 + 112) = 7;\n        *(_DWORD *)(v1 + 64) = v44;\n        *(_QWORD *)a1 = v1;\n        return v1;\n      }\n      *(_QWORD *)a1 = v1;\n      v7 = v1;\nLABEL_53:\n      if ( *(_QWORD *)(v7 + 88) )\n        goto LABEL_55;\n      goto LABEL_54;\n    }\n    *(_QWORD *)a1 = v1;\n    if ( v29 != 11 )\n      return v1;\n    v7 = v1;\nLABEL_60:\n    v30 = *(_QWORD *)(v7 + 168);\n    if ( v30 != 2 )\n    {\n      if ( v30 == 1 )\n        return v7;\n      goto LABEL_117;\n    }\n    v34 = *(_QWORD *)(v7 + 8);\n    if ( !*(_QWORD *)(v34 + 104)\n      && (*(_DWORD *)(v4 + 72) & 0x18) == 24\n      && (unsigned int)sub_4071E0(*(_QWORD *)(v7 + 8)) == 2 )\n    {\n      v24 = *(_WORD *)(v7 + 112);\n      goto LABEL_52;\n    }\n    v24 = sub_406CF0(v4, v7, 0);\n    v35 = *(_DWORD *)(v7 + 144);\n    *(_WORD *)(v7 + 112) = v24;\n    if ( (v35 & 0xF000) != 0x4000 )\n      goto LABEL_52;\n    if ( *(_QWORD *)(v7 + 88) )\n    {\n      v36 = *(_QWORD *)(v34 + 104);\n      if ( (unsigned __int64)(v36 - 1) <= 0xFFFFFFFFFFFFFFFDLL )\n        *(_QWORD *)(v34 + 104) = v36 - 1;\n      if ( v24 != 1 )\n        return v7;\nLABEL_55:\n      v1 = v7;\n      if ( !(unsigned __int8)sub_407610(*(_DWORD *)(v4 + 72), (_QWORD *)(v4 + 88), v7) )\n      {\n        v1 = 0LL;\n        *__errno_location() = 12;\n      }\n      return v1;\n    }\n    if ( v24 != 1 )\n      return v7;\nLABEL_54:\n    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v7 + 120);\n    goto LABEL_55;\n  }\n  if ( v5 == 1 )\n  {\nLABEL_24:\n    if ( v2 & 0x40 && *(_QWORD *)(v1 + 120) != *(_QWORD *)(a1 + 24) )\n    {\nLABEL_34:\n      if ( *(_BYTE *)(v1 + 114) & 2 )\n        close(*(_DWORD *)(v1 + 68));\n      v14 = *(void **)(a1 + 8);\n      if ( v14 )\n      {\n        sub_407030(v14);\n        *(_QWORD *)(v4 + 8) = 0LL;\n      }\n      v15 = *(_DWORD *)(v4 + 72);\n      *(_WORD *)(v1 + 112) = 6;\n      sub_4076C0(v15, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    v11 = *(void **)(a1 + 8);\n    if ( v11 )\n    {\n      if ( !(v2 & 0x2000) )\n      {\n        if ( (unsigned int)sub_407440(v4, v1, -1, *(const char **)(v1 + 48)) )\n        {\n          v12 = __errno_location();\n          v7 = *(_QWORD *)(v4 + 8);\n          LODWORD(v12) = *v12;\n          *(_WORD *)(v1 + 114) |= 1u;\n          *(_DWORD *)(v1 + 64) = (_DWORD)v12;\n          if ( v7 )\n          {\n            v13 = (_QWORD *)v7;\n            do\n            {\n              v13[6] = *(_QWORD *)(v13[1] + 48LL);\n              v13 = (_QWORD *)v13[2];\n            }\n            while ( v13 );\n          }\n        }\n        else\n        {\n          v7 = *(_QWORD *)(v4 + 8);\n        }\n        goto LABEL_32;\n      }\n      BYTE1(v2) &= 0xDFu;\n      *(_DWORD *)(v4 + 72) = v2;\n      sub_407030(v11);\n      *(_QWORD *)(v4 + 8) = 0LL;\n    }\n    v7 = sub_407760((__int64 *)v4, 3);\n    *(_QWORD *)(v4 + 8) = v7;\n    if ( v7 )\n    {\nLABEL_32:\n      *(_QWORD *)(v4 + 8) = 0LL;\n      goto LABEL_48;\n    }\n    v31 = *(_DWORD *)(v4 + 72);\n    if ( !(v31 & 0x4000) )\n    {\n      if ( *(_DWORD *)(v1 + 64) && *(_WORD *)(v1 + 112) != 4 )\n        *(_WORD *)(v1 + 112) = 7;\n      sub_4076C0(v31, v4 + 88, (_QWORD *)v1);\n      return v1;\n    }\n    return 0LL;\n  }\n  do\n  {\nLABEL_9:\n    v7 = *(_QWORD *)(v1 + 16);\n    if ( !v7 )\n    {\n      v7 = *(_QWORD *)(v1 + 8);\n      if ( *(_QWORD *)(v7 + 24) )\n      {\n        v37 = *(_QWORD *)(v7 + 72);\n        v38 = *(_QWORD *)(a1 + 32);\n        *(_QWORD *)a1 = v7;\n        *(_BYTE *)(v38 + v37) = 0;\n        v7 = sub_407760((__int64 *)a1, 3);\n        if ( v7 )\n        {\n          free((void *)v1);\n          goto LABEL_48;\n        }\n        if ( *(_BYTE *)(a1 + 73) & 0x40 )\n          return 0LL;\n        v7 = *(_QWORD *)(v1 + 8);\n      }\n      *(_QWORD *)a1 = v7;\n      free((void *)v1);\n      if ( *(_QWORD *)(v7 + 88) == -1LL )\n      {\n        v1 = 0LL;\n        free((void *)v7);\n        *__errno_location() = 0;\n        *(_QWORD *)a1 = 0LL;\n        return v1;\n      }\n      if ( *(_WORD *)(v7 + 112) != 11 )\n      {\n        *(_BYTE *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(v7 + 72)) = 0;\n        if ( *(_QWORD *)(v7 + 88) )\n        {\n          v8 = *(_WORD *)(v7 + 114);\n          if ( v8 & 2 )\n          {\n            v32 = *(_DWORD *)(a1 + 72);\n            v33 = *(_DWORD *)(v7 + 68);\n            if ( !(v32 & 4) )\n            {\n              if ( v32 & 0x200 )\n              {\n                sub_407250(v4, v33, 1);\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n              else\n              {\n                if ( fchdir(v33) )\n                {\n                  *(_DWORD *)(v7 + 64) = *__errno_location();\n                  *(_DWORD *)(v4 + 72) |= 0x4000u;\n                }\n                v33 = *(_DWORD *)(v7 + 68);\n              }\n            }\n            close(v33);\n          }\n          else if ( !(v8 & 1) && (unsigned int)sub_407440(a1, *(_QWORD *)(v7 + 8), -1, \"..\") )\n          {\n            goto LABEL_81;\n          }\n        }\n        else if ( (unsigned int)sub_4072C0(a1) )\n        {\nLABEL_81:\n          *(_DWORD *)(v7 + 64) = *__errno_location();\n          *(_DWORD *)(a1 + 72) |= 0x4000u;\n          if ( *(_WORD *)(v7 + 112) == 2 )\n            return 0LL;\n          v9 = *(_DWORD *)(a1 + 72);\nLABEL_17:\n          if ( *(_DWORD *)(v7 + 64) )\n          {\n            *(_WORD *)(v7 + 112) = 7;\n          }\n          else\n          {\n            *(_WORD *)(v7 + 112) = 6;\n            sub_4076C0(v9, v4 + 88, (_QWORD *)v7);\n            v9 = *(_DWORD *)(v4 + 72);\n          }\nLABEL_19:\n          if ( v9 & 0x4000 )\n            return 0LL;\n          return v7;\n        }\n        v9 = *(_DWORD *)(v4 + 72);\n        if ( *(_WORD *)(v7 + 112) == 2 )\n          goto LABEL_19;\n        goto LABEL_17;\n      }\nLABEL_117:\n      abort();\n    }\n    *(_QWORD *)a1 = v7;\n    free((void *)v1);\n    if ( !*(_QWORD *)(v7 + 88) )\n    {\n      if ( !(unsigned int)sub_4072C0(a1) )\n      {\n        v16 = *(void **)(a1 + 88);\n        if ( *(_DWORD *)(v4 + 72) & 0x102 )\n        {\n          if ( v16 )\n            sub_40AB30(v16);\n        }\n        else\n        {\n          free(v16);\n        }\n        v17 = *(_QWORD *)(v7 + 96);\n        v18 = *(void **)(v4 + 32);\n        *(_QWORD *)(v7 + 72) = v17;\n        memmove(v18, (const void *)(v7 + 264), v17 + 1);\n        v19 = strrchr((const char *)(v7 + 264), 47);\n        if ( v19 && ((char *)(v7 + 264) != v19 || *(_BYTE *)(v7 + 265)) )\n        {\n          v20 = v19 + 1;\n          v21 = strlen(v19 + 1);\n          memmove((void *)(v7 + 264), v20, v21 + 1);\n          *(_QWORD *)(v7 + 96) = v21;\n        }\n        v22 = *(_QWORD *)(v4 + 32);\n        v23 = *(_DWORD *)(v4 + 72);\n        *(_QWORD *)(v7 + 56) = v22;\n        *(_QWORD *)(v7 + 48) = v22;\n        sub_407390(v23, (__int64 *)(v4 + 88));\n        v24 = *(_WORD *)(v7 + 112);\n        goto LABEL_51;\n      }\n      *(_DWORD *)(a1 + 72) |= 0x4000u;\n      return 0LL;\n    }\n    v6 = *(_WORD *)(v7 + 116);\n    v1 = v7;\n  }\n  while ( v6 == 4 );\n  if ( v6 == 2 )\n  {\n    v39 = sub_406CF0(a1, v7, 1);\n    *(_WORD *)(v7 + 112) = v39;\n    if ( v39 == 1 )\n    {\n      v41 = *(_DWORD *)(a1 + 72);\n      if ( !(v41 & 4) )\n      {\n        v42 = sub_4073F0(*(_DWORD *)(a1 + 44), v41, 26);\n        *(_DWORD *)(v7 + 68) = v42;\n        if ( v42 < 0 )\n        {\n          v45 = *__errno_location();\n          *(_WORD *)(v7 + 112) = 7;\n          *(_DWORD *)(v7 + 64) = v45;\n        }\n        else\n        {\n          *(_WORD *)(v7 + 114) |= 2u;\n        }\n      }\n    }\n    *(_WORD *)(v7 + 116) = 3;\n  }\nLABEL_48:\n  v25 = *(_QWORD *)(v7 + 8);\n  v26 = *(_QWORD *)(v25 + 72);\n  v27 = v26 - 1;\n  if ( *(_BYTE *)(*(_QWORD *)(v25 + 56) + v26 - 1) != 47 )\n    v27 = *(_QWORD *)(v25 + 72);\n  v28 = (_BYTE *)(*(_QWORD *)(v4 + 32) + v27);\n  *v28 = 47;\n  memmove(v28 + 1, (const void *)(v7 + 264), *(_QWORD *)(v7 + 96) + 1LL);\n  v24 = *(_WORD *)(v7 + 112);\nLABEL_51:\n  *(_QWORD *)v4 = v7;\n  if ( v24 == 11 )\n    goto LABEL_60;\nLABEL_52:\n  v1 = v7;\n  if ( v24 == 1 )\n    goto LABEL_53;\n  return v1;\n}\n", 
            "funcStartAddr": "0x402158L", 
            "funcEndAddr": "0x40215dL", 
            "funcName": "fts_read"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_set(__int64 a1, __int64 a2, unsigned int a3)\n{\n  __int64 result; // rax\n\n  if ( a3 > 4 )\n  {\n    *__errno_location() = 22;\n    result = 1LL;\n  }\n  else\n  {\n    *(_WORD *)(a2 + 116) = a3;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408da0L", 
            "funcEndAddr": "0x408dc9L", 
            "funcName": "fts_set"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall fts_children(__int64 a1, int a2)\n{\n  __int64 v2; // rbx\n  int *v3; // rax\n  int *v4; // r13\n  __int64 v5; // r12\n  __int16 v6; // dx\n  __int64 result; // rax\n  void *v8; // rdi\n  int v9; // er14\n  int v10; // esi\n  int v11; // ebp\n  int v12; // ebx\n\n  v2 = a1;\n  v3 = __errno_location();\n  v4 = v3;\n  if ( a2 & 0xFFFFDFFF )\n  {\n    *v3 = 22;\n    return 0LL;\n  }\n  v5 = *(_QWORD *)a1;\n  *v3 = 0;\n  if ( *(_BYTE *)(a1 + 73) & 0x40 )\n    return 0LL;\n  v6 = *(_WORD *)(v5 + 112);\n  if ( v6 == 9 )\n    return *(_QWORD *)(v5 + 16);\n  result = 0LL;\n  if ( v6 == 1 )\n  {\n    v8 = *(void **)(a1 + 8);\n    if ( v8 )\n      sub_407030(v8);\n    v9 = 1;\n    if ( a2 == 0x2000 )\n    {\n      *(_DWORD *)(v2 + 72) |= 0x2000u;\n      v9 = 2;\n    }\n    if ( *(_QWORD *)(v5 + 88) || **(_BYTE **)(v5 + 48) == 47 || (v10 = *(_DWORD *)(v2 + 72), v10 & 4) )\n    {\n      result = sub_407760((__int64 *)v2, v9);\n      *(_QWORD *)(v2 + 8) = result;\n      return result;\n    }\n    v11 = sub_4073F0(*(_DWORD *)(v2 + 44), v10, 26);\n    if ( v11 < 0 )\n    {\n      *(_QWORD *)(v2 + 8) = 0LL;\n      result = 0LL;\n    }\n    else\n    {\n      *(_QWORD *)(v2 + 8) = sub_407760((__int64 *)v2, v9);\n      if ( *(_BYTE *)(v2 + 73) & 2 )\n      {\n        sub_407250(v2, v11, 1);\n        return *(_QWORD *)(v2 + 8);\n      }\n      if ( !fchdir(v11) )\n      {\n        close(v11);\n        return *(_QWORD *)(v2 + 8);\n      }\n      v12 = *v4;\n      close(v11);\n      result = 0LL;\n      *v4 = v12;\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x408dd0L", 
            "funcEndAddr": "0x408f3dL", 
            "funcName": "fts_children"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_408F40(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x408f40L", 
            "funcEndAddr": "0x40901fL", 
            "funcName": "sub_408F40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409020(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409020L", 
            "funcEndAddr": "0x40963cL", 
            "funcName": "sub_409020"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409640(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_408F40(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_408F40((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_409020(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_409020(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_409020(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x409640L", 
            "funcEndAddr": "0x409c06L", 
            "funcName": "sub_409640"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409C10(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_612500 = dword_61233C;\n  dword_612504 = dword_612338;\n  result = sub_409640(a1, a2, a3, a4, a5, a6, &dword_612500, a7);\n  dword_61233C = dword_612500;\n  qword_612550 = (char *)qword_612510;\n  dword_612334 = dword_612508;\n  return result;\n}\n", 
            "funcStartAddr": "0x409c10L", 
            "funcEndAddr": "0x409c66L", 
            "funcName": "sub_409C10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409C70(int a1, __int64 a2, char *a3)\n{\n  return sub_409C10(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x409c70L", 
            "funcEndAddr": "0x409c88L", 
            "funcName": "sub_409C70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409C90(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409C10(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x409c90L", 
            "funcEndAddr": "0x409ca3L", 
            "funcName": "sub_409C90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409CB0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409640(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x409cb0L", 
            "funcEndAddr": "0x409cc5L", 
            "funcName": "sub_409CB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409CD0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_409C10(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x409cd0L", 
            "funcEndAddr": "0x409ce6L", 
            "funcName": "sub_409CD0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409CF0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409640(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x409cf0L", 
            "funcEndAddr": "0x409d08L", 
            "funcName": "sub_409CF0"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_409D10(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40A000(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x409d10L", 
            "funcEndAddr": "0x409d8aL", 
            "funcName": "sub_409D10"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_409D90(char *a1, unsigned int a2, const char *a3)\n{\n  char *v3; // rbx\n  int v4; // eax\n  const char *v5; // rbp\n  size_t v6; // rdi\n  int v7; // eax\n  char *result; // rax\n  int v9; // eax\n  int v10; // er13\n  __int64 v11; // [rsp+0h] [rbp-48h]\n\n  v3 = a1;\n  if ( *a3 )\n  {\n    v4 = dword_612538;\n    v5 = a3;\n    if ( !dword_612538 )\n    {\n      v9 = open(\"/proc/self/fd\", 67840);\n      v10 = v9;\n      if ( v9 < 0 )\n      {\n        dword_612538 = -1;\n        return 0LL;\n      }\n      __sprintf_chk(&v11, 1LL, 32LL, \"/proc/self/fd/%d/../fd\", (unsigned int)v9);\n      dword_612538 = (unsigned int)access((const char *)&v11, 0) < 1 ? 1 : -1;\n      close(v10);\n      v4 = dword_612538;\n    }\n    if ( v4 >= 0 && ((v6 = strlen(v5) + 27, v6 <= 0xFC0) || (v3 = (char *)malloc(v6)) != 0LL) )\n    {\n      v7 = __sprintf_chk(v3, 1LL, -1LL, \"/proc/self/fd/%d/\", a2);\n      strcpy(&v3[v7], v5);\n      result = v3;\n    }\n    else\n    {\n      result = 0LL;\n    }\n  }\n  else\n  {\n    *a1 = 0;\n    result = a1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x409d90L", 
            "funcEndAddr": "0x409ebaL", 
            "funcName": "sub_409D90"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409EC0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40BD60(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n  }\n  else\n  {\n    if ( !(_DWORD)result )\n      return result;\n    if ( !v1 )\n      return (unsigned int)-(*__errno_location() != 9);\n  }\n  return 0xFFFFFFFFLL;\n}\n", 
            "funcStartAddr": "0x409ec0L", 
            "funcEndAddr": "0x409f1dL", 
            "funcName": "sub_409EC0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_409F20(__int64 a1)\n{\n  *(_QWORD *)(a1 + 16) = 0LL;\n  *(_DWORD *)(a1 + 24) = 9827862;\n}\n", 
            "funcStartAddr": "0x409f20L", 
            "funcEndAddr": "0x409f30L", 
            "funcName": "sub_409F20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409F30(__int64 a1, __int64 *a2)\n{\n  __int64 v2; // rax\n  __int64 v3; // rdx\n  __int64 v5; // rax\n\n  if ( *(_DWORD *)(a1 + 24) != 9827862 )\n    __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 0x3Cu, \"cycle_check\");\n  v2 = *(_QWORD *)(a1 + 16);\n  v3 = a2[1];\n  if ( !v2 )\n  {\n    *(_QWORD *)(a1 + 16) = 1LL;\n    goto LABEL_7;\n  }\n  if ( *(_QWORD *)a1 == v3 && *a2 == *(_QWORD *)(a1 + 8) )\n    return 1LL;\n  *(_QWORD *)(a1 + 16) = v2 + 1;\n  if ( (v2 + 1) & v2 )\n    return 0LL;\n  if ( v2 != -1 )\n  {\nLABEL_7:\n    v5 = *a2;\n    *(_QWORD *)a1 = v3;\n    *(_QWORD *)(a1 + 8) = v5;\n    return 0LL;\n  }\n  return 1LL;\n}\n", 
            "funcStartAddr": "0x409f30L", 
            "funcEndAddr": "0x409facL", 
            "funcName": "sub_409F30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_409FB0(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n  unsigned int v6; // [rsp+30h] [rbp-28h]\n\n  v6 = a3;\n  v3 = 0LL;\n  if ( a2 & 0x40 )\n    v3 = v6;\n  v4 = open(a1, a2, v3);\n  return sub_40BA20(v4);\n}\n", 
            "funcStartAddr": "0x409fb0L", 
            "funcEndAddr": "0x409ffaL", 
            "funcName": "sub_409FB0"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40A000(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a000L", 
            "funcEndAddr": "0x40a05eL", 
            "funcName": "sub_40A000"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A060(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40a060L", 
            "funcEndAddr": "0x40a0f3L", 
            "funcName": "sub_40A060"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A100(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n", 
            "funcStartAddr": "0x40a100L", 
            "funcEndAddr": "0x40a110L", 
            "funcName": "sub_40A100"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_40A110(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n", 
            "funcStartAddr": "0x40a110L", 
            "funcEndAddr": "0x40a117L", 
            "funcName": "sub_40A110"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A120(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40A120(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x40215dL", 
            "funcEndAddr": "0x402162L", 
            "funcName": "sub_40A120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A120(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40A120(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n", 
            "funcStartAddr": "0x40215dL", 
            "funcEndAddr": "0x402162L", 
            "funcName": "sub_40A120"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A150(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i **v4; // r14\n  char v5; // r13\n  __int64 v6; // rbp\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v4 = a3;\n  v5 = a4;\n  v6 = a2;\n  v7 = (__m128i *)sub_40A120(a1, a2);\n  *v4 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != v6 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( v6 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v6) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == v6 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( v5 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( v5 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40a150L", 
            "funcEndAddr": "0x40a269L", 
            "funcName": "sub_40A150"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A270(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_40F070 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_40F070;\n    result = 0LL;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40a270L", 
            "funcEndAddr": "0x40a2eeL", 
            "funcName": "sub_40A270"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A2F0(__int64 a1, __int64 a2, char a3)\n{\n  char v3; // r14\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v3 = a3;\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_40A120(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !v3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_40A120(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40a2f0L", 
            "funcEndAddr": "0x40a43aL", 
            "funcName": "sub_40A2F0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A680(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_40A120(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n", 
            "funcStartAddr": "0x40a680L", 
            "funcEndAddr": "0x40a6d3L", 
            "funcName": "sub_40A680"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A730(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_40A120(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40a730L", 
            "funcEndAddr": "0x40a79aL", 
            "funcName": "sub_40A730"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40A810(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v4; // r13\n  __int64 v5; // r15\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v4 = a3;\n  v5 = a1;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(v5 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, v4) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x40a810L", 
            "funcEndAddr": "0x40a888L", 
            "funcName": "sub_40A810"
        }, 
        {
            "decompiledFuncCode": "_QWORD *__fastcall sub_40A8F0(unsigned __int64 a1, __int64 a2, unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2), bool (__fastcall *a4)(__int64 a1, __int64 a2), __int64 a5)\n{\n  __int64 v5; // r14\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  unsigned __int64 v8; // rbp\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v5 = a5;\n  v6 = a4;\n  v7 = a3;\n  v8 = a1;\n  if ( !a3 )\n    v7 = sub_40A100;\n  if ( !a4 )\n    v6 = sub_40A110;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_40A270(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_40A060(v8);\n        if ( !_bittest64((const __int64 *)&v12, 0x3Cu) && v12 >> 61 == 0 )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = v5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_40F070;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_40A270(v11) )\n        goto LABEL_14;\n      if ( (v8 & 0x8000000000000000LL) != 0LL )\n      {\nLABEL_23:\n        v17 = (float)(int)(v8 & 1 | (v8 >> 1)) + (float)(int)(v8 & 1 | (v8 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)v8;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      v8 = (unsigned int)(int)v18;\n    else\n      v8 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n", 
            "funcStartAddr": "0x40a8f0L", 
            "funcEndAddr": "0x40aa7aL", 
            "funcName": "sub_40A8F0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40AB30(void *ptr)\n{\n  void **v1; // r12\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v1 = (void **)ptr;\n  v2 = *(_QWORD **)ptr;\n  v3 = *((_QWORD *)ptr + 1);\n  if ( *((_QWORD *)ptr + 8) && *((_QWORD *)ptr + 4) )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        (*((void (**)(void))ptr + 8))();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = *((_QWORD *)ptr + 1);\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = *(_QWORD **)ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( v1[1] > v2 );\n  }\nLABEL_15:\n  v7 = v1[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free(*v1);\n  free(v1);\n}\n", 
            "funcStartAddr": "0x40ab30L", 
            "funcEndAddr": "0x40ac06L", 
            "funcName": "sub_40AB30"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AC10(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40A060(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40A2F0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40AC10(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40A060(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40A2F0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x402167L", 
            "funcEndAddr": "0x40216cL", 
            "funcName": "sub_40AC10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AC10(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40A060(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40A2F0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n\n__int64 __fastcall sub_40AC10(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rax\n  size_t v6; // rbx\n  bool v7; // sf\n  _BOOL8 v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  __int64 v12; // rax\n  __int64 v13; // rax\n  unsigned int v14; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h]\n  __int64 v17; // [rsp+8h] [rbp-60h]\n  size_t v18; // [rsp+10h] [rbp-58h]\n  __int64 v19; // [rsp+18h] [rbp-50h]\n  __int64 v20; // [rsp+20h] [rbp-48h]\n  __int64 v21; // [rsp+28h] [rbp-40h]\n  __int64 v22; // [rsp+30h] [rbp-38h]\n  __int64 v23; // [rsp+38h] [rbp-30h]\n  __int64 v24; // [rsp+40h] [rbp-28h]\n  __int64 v25; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( (a2 & 0x8000000000000000LL) != 0LL )\n      v3 = (float)(int)(a2 & 1 | (a2 >> 1)) + (float)(int)(a2 & 1 | (a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40A060(a2);\n  v6 = v5;\n  v7 = ((8 * v5) & 0x8000000000000000LL) != 0LL;\n  v8 = v5 >> 61 != 0;\n  if ( v7 )\n    v8 = 1LL;\n  if ( !v6 || v8 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v6 )\n    return 1LL;\n  v9 = (char *)calloc(v6, 0x10uLL);\n  ptr = v9;\n  if ( !v9 )\n    return 0;\n  v18 = v6;\n  v10 = (__int64)&v9[16 * v6];\n  v11 = *(_QWORD *)(a1 + 48);\n  v19 = 0LL;\n  v17 = v10;\n  v22 = v11;\n  v12 = *(_QWORD *)(a1 + 56);\n  v20 = 0LL;\n  v23 = v12;\n  v13 = *(_QWORD *)(a1 + 64);\n  v21 = v2;\n  v24 = v13;\n  v25 = *(_QWORD *)(a1 + 72);\n  v14 = sub_40A2F0((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v14 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v17;\n    *(_QWORD *)(a1 + 16) = v18;\n    *(_QWORD *)(a1 + 24) = v19;\n    *(_QWORD *)(a1 + 72) = v25;\n    return v14;\n  }\n  *(_QWORD *)(a1 + 72) = v25;\n  if ( !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40A2F0(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v14;\n}\n", 
            "funcStartAddr": "0x402167L", 
            "funcEndAddr": "0x40216cL", 
            "funcName": "sub_40AC10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AE10(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40A150(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40A270((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40AC10(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40A150(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40AE10(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40A150(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40A270((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40AC10(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40A150(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x40216cL", 
            "funcEndAddr": "0x402171L", 
            "funcName": "sub_40AE10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40AE10(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40A150(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40A270((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40AC10(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40A150(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40AE10(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 *v3; // r12\n  __int64 v4; // rbp\n  __int64 v5; // rdx\n  __int64 result; // rax\n  unsigned __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  unsigned __int64 v10; // rax\n  __int64 *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  unsigned __int64 v25; // rsi\n  __int64 *v26; // [rsp+8h] [rbp-20h]\n\n  if ( !a2 )\n    goto LABEL_35;\n  v3 = a3;\n  v4 = a2;\n  v5 = sub_40A150(a1, a2, (__m128i **)&v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( (v7 & 0x8000000000000000LL) != 0LL )\n    {\n      v14 = v7 & 1 | (v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40A270((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18 ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL : (unsigned __int64)(unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40AC10(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40A150(a1, v4, (__m128i **)&v26, 0) )\n        {\nLABEL_9:\n          v11 = v26;\n          if ( !*v26 )\n          {\n            *v26 = v4;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11[1];\n            *v12 = v4;\n            v12[1] = v13;\n            v11[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( (v10 & 0x8000000000000000LL) == 0LL )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(int)(v10 & 1 | (v10 >> 1)) + (float)(int)(v10 & 1 | (v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( v3 )\n    *v3 = v5;\n  return result;\n}\n", 
            "funcStartAddr": "0x40216cL", 
            "funcEndAddr": "0x402171L", 
            "funcName": "sub_40AE10"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B090(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h]\n\n  v2 = a2;\n  v3 = sub_40AE10(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    v2 = v5;\n  return v2;\n}\n", 
            "funcStartAddr": "0x40b090L", 
            "funcEndAddr": "0x40b0cbL", 
            "funcName": "sub_40B090"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B0D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  __int64 v3; // rbp\n  _QWORD *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  unsigned __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  unsigned __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  _QWORD *v24; // [rsp+8h] [rbp-20h]\n\n  v2 = a1;\n  v3 = sub_40A150(a1, a2, (__m128i **)&v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( *v4 )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( (v9 & 0x8000000000000000LL) == 0LL )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(int)(v9 & 1 | (v9 >> 1)) + (float)(int)(v9 & 1 | (v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( (v9 & 0x8000000000000000LL) != 0LL )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_40A270((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_40AC10(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(v2 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40b0d0L", 
            "funcEndAddr": "0x40b2a7L", 
            "funcName": "sub_40B0D0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40B2B0(__int64 a1, int a2)\n{\n  *(_QWORD *)(a1 + 20) = 0LL;\n  *(_BYTE *)(a1 + 28) = 1;\n  *(_DWORD *)a1 = a2;\n  *(_DWORD *)(a1 + 4) = a2;\n  *(_DWORD *)(a1 + 8) = a2;\n  *(_DWORD *)(a1 + 12) = a2;\n  *(_DWORD *)(a1 + 16) = a2;\n}\n", 
            "funcStartAddr": "0x40b2b0L", 
            "funcEndAddr": "0x40b2cbL", 
            "funcName": "sub_40B2B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B2D0(__int64 a1)\n{\n  return *(unsigned __int8 *)(a1 + 28);\n}\n", 
            "funcStartAddr": "0x40b2d0L", 
            "funcEndAddr": "0x40b2d5L", 
            "funcName": "sub_40B2D0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B2E0(__int64 a1, int a2)\n{\n  char v2; // dl\n  int v3; // ecx\n  _DWORD *v4; // r8\n  __int64 result; // rax\n  int v6; // esi\n\n  v2 = *(_BYTE *)(a1 + 28) ^ 1;\n  v3 = (v2 + (unsigned __int8)*(_DWORD *)(a1 + 20)) & 3;\n  v4 = (_DWORD *)(a1 + 4LL * ((v2 + (unsigned __int8)*(_DWORD *)(a1 + 20)) & 3));\n  result = (unsigned int)*v4;\n  *v4 = a2;\n  v6 = *(_DWORD *)(a1 + 24);\n  *(_DWORD *)(a1 + 20) = v3;\n  if ( v6 == v3 )\n    *(_DWORD *)(a1 + 24) = ((_BYTE)v6 + v2) & 3;\n  *(_BYTE *)(a1 + 28) = 0;\n  return result;\n}\n", 
            "funcStartAddr": "0x40b2e0L", 
            "funcEndAddr": "0x40b315L", 
            "funcName": "sub_40B2E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B320(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n\n__int64 __fastcall sub_40B320(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n", 
            "funcStartAddr": "0x402171L", 
            "funcEndAddr": "0x402176L", 
            "funcName": "sub_40B320"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B320(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n\n__int64 __fastcall sub_40B320(__int64 a1)\n{\n  _DWORD *v1; // rcx\n  int v2; // edx\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a1 + 28) )\n    abort();\n  v1 = (_DWORD *)(a1 + 4LL * *(unsigned int *)(a1 + 20));\n  v2 = *(_DWORD *)(a1 + 20);\n  result = (unsigned int)*v1;\n  *v1 = *(_DWORD *)(a1 + 16);\n  if ( v2 == *(_DWORD *)(a1 + 24) )\n    *(_BYTE *)(a1 + 28) = 1;\n  else\n    *(_DWORD *)(a1 + 20) = ((_BYTE)v2 + 3) & 3;\n  return result;\n}\n", 
            "funcStartAddr": "0x402171L", 
            "funcEndAddr": "0x402176L", 
            "funcName": "sub_40B320"
        }, 
        {
            "decompiledFuncCode": "const char *sub_40B370()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_40BD60(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40BD60(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x40b370L", 
            "funcEndAddr": "0x40b8d2L", 
            "funcName": "sub_40B370"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_40B8E0(int errnum)\n{\n  char *v1; // rax\n\n  v1 = dcgettext(0LL, \"unable to record current working directory\", 5);\n  error(status, errnum, v1);\n  abort();\n}\n", 
            "funcStartAddr": "0x40b8e0L", 
            "funcEndAddr": "0x40b90bL", 
            "funcName": "sub_40B8E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_40B910(int errnum)\n{\n  char *v1; // rax\n\n  v1 = dcgettext(0LL, \"failed to return to initial working directory\", 5);\n  error(status, errnum, v1);\n  abort();\n}\n", 
            "funcStartAddr": "0x40b910L", 
            "funcEndAddr": "0x40b93bL", 
            "funcName": "sub_40B910"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B940(int a1, const char *a2, char a3, unsigned int a4)\n{\n  __int64 v4; // rcx\n  int v5; // eax\n  unsigned int v7; // [rsp+38h] [rbp-20h]\n\n  v7 = a4;\n  v4 = 0LL;\n  if ( a3 & 0x40 )\n    v4 = v7;\n  v5 = openat(a1, a2, a3, v4);\n  return sub_40BA20(v5);\n}\n", 
            "funcStartAddr": "0x40b940L", 
            "funcEndAddr": "0x40b98aL", 
            "funcName": "sub_40B940"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40B990(__int64 a1, __int64 a2, unsigned int a3)\n{\n  int v3; // eax\n  int v4; // edx\n  __int64 result; // rax\n  __int64 v6; // rax\n\n  *(_QWORD *)(a1 + 8) = 0LL;\n  v3 = sub_409FB0(\".\", 0, a3);\n  v4 = v3;\n  *(_DWORD *)a1 = v3;\n  result = 0LL;\n  if ( v4 < 0 )\n  {\n    v6 = sub_40BFC0(0LL, 0LL);\n    *(_QWORD *)(a1 + 8) = v6;\n    result = (unsigned int)-(v6 == 0);\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40b990L", 
            "funcEndAddr": "0x40b9daL", 
            "funcName": "sub_40B990"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40B9E0(__int64 a1)\n{\n  int result; // eax\n\n  if ( *(_DWORD *)a1 < 0 )\n    result = sub_40BAF0(*(void **)(a1 + 8));\n  else\n    result = fchdir(*(_DWORD *)a1);\n  return result;\n}\n", 
            "funcStartAddr": "0x40b9e0L", 
            "funcEndAddr": "0x40b9f9L", 
            "funcName": "sub_40B9E0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BA00(int *a1)\n{\n  int *v1; // rbx\n  int v2; // edi\n\n  v1 = a1;\n  v2 = *a1;\n  if ( v2 >= 0 )\n    close(v2);\n  free(*((void **)v1 + 1));\n}\n", 
            "funcStartAddr": "0x40ba00L", 
            "funcEndAddr": "0x40ba19L", 
            "funcName": "sub_40BA00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BA20(int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // er12\n  int *v3; // rax\n  int v4; // er13\n  int *v5; // rbp\n\n  if ( (unsigned int)fd > 2 )\n    return (unsigned int)fd;\n  v2 = sub_40C5A0();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n", 
            "funcStartAddr": "0x40ba20L", 
            "funcEndAddr": "0x40ba6eL", 
            "funcName": "sub_40BA20"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_40BA70(int a1)\n{\n  if ( a1 >= 0 )\n  {\n    if ( close(a1) )\n      __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 0x40u, \"cdb_free\");\n  }\n}\n", 
            "funcStartAddr": "0x40ba70L", 
            "funcEndAddr": "0x40baa3L", 
            "funcName": "sub_40BA70"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BAB0(int *a1, const char *a2)\n{\n  int v2; // eax\n  int v3; // ebp\n\n  v2 = openat(*a1, a2, 67840);\n  if ( v2 < 0 )\n    return 0xFFFFFFFFLL;\n  v3 = v2;\n  sub_40BA70(*a1);\n  *a1 = v3;\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x40bab0L", 
            "funcEndAddr": "0x40bae7L", 
            "funcName": "sub_40BAB0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BAF0(void *s)\n{\n  unsigned int v1; // ebx\n  int *v2; // r12\n  size_t v3; // rax\n  size_t v4; // r14\n  size_t v5; // rax\n  size_t v6; // rbx\n  _BYTE *v7; // rbp\n  char *v8; // r13\n  _BYTE *v9; // rax\n  _BYTE *v10; // rbx\n  int v11; // eax\n  int v12; // ebx\n  _BYTE *v14; // rax\n  _BYTE *v15; // rbx\n  int v16; // eax\n  int fd; // [rsp+Ch] [rbp-2Ch]\n\n  v1 = chdir((const char *)s);\n  if ( v1 )\n  {\n    v2 = __errno_location();\n    if ( *v2 == 36 )\n    {\n      v3 = strlen((const char *)s);\n      fd = -100;\n      v4 = v3;\n      if ( !v3 )\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 0x7Eu, \"chdir_long\");\n      if ( v3 <= 0xFFF )\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 0x7Fu, \"chdir_long\");\n      v5 = strspn((const char *)s, \"/\");\n      v6 = v5;\n      if ( v5 == 2 )\n      {\n        v14 = (_BYTE *)sub_40C490((char *)s + 3, 47LL, v4 - 3);\n        v15 = v14;\n        if ( !v14 )\n          return (unsigned int)-1;\n        *v14 = 0;\n        v16 = sub_40BAB0(&fd, (const char *)s);\n        *v15 = 47;\n        if ( !v16 )\n        {\n          v7 = &v15[strspn(v15 + 1, \"/\") + 1];\n          goto LABEL_7;\n        }\n      }\n      else\n      {\n        v7 = s;\n        if ( !v5 )\n        {\nLABEL_7:\n          if ( *v7 == 47 )\n            __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 0xA2u, \"chdir_long\");\n          v8 = (char *)s + v4;\n          if ( v7 > (char *)s + v4 )\n            __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 0xA3u, \"chdir_long\");\n          while ( v8 - v7 > 4095 )\n          {\n            v9 = memrchr(v7, 47, 0x1000uLL);\n            v10 = v9;\n            if ( !v9 )\n            {\n              *v2 = 36;\n              return (unsigned int)-1;\n            }\n            *v9 = 0;\n            if ( v9 - v7 > 4095 )\n              __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 0xB3u, \"chdir_long\");\n            v11 = sub_40BAB0(&fd, v7);\n            *v10 = 47;\n            if ( v11 )\n              goto LABEL_18;\n            v7 = &v10[strspn(v10 + 1, \"/\") + 1];\n          }\n          if ( v8 <= v7 || !(unsigned int)sub_40BAB0(&fd, v7) )\n          {\n            v1 = fchdir(fd);\n            if ( !v1 )\n            {\n              sub_40BA70(fd);\n              return v1;\n            }\n          }\n          goto LABEL_18;\n        }\n        if ( !(unsigned int)sub_40BAB0(&fd, \"/\") )\n        {\n          v7 = (char *)s + v6;\n          goto LABEL_7;\n        }\n      }\nLABEL_18:\n      v12 = *v2;\n      sub_40BA70(fd);\n      *v2 = v12;\n      return (unsigned int)-1;\n    }\n  }\n  return v1;\n}\n", 
            "funcStartAddr": "0x40baf0L", 
            "funcEndAddr": "0x40bd5bL", 
            "funcName": "sub_40BAF0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40BD60(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40BF20(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x40bd60L", 
            "funcEndAddr": "0x40bddbL", 
            "funcName": "sub_40BD60"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40BDE0(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_612548 < 0 )\n    {\n      v3 = sub_40BDE0(a1);\n      if ( v3 >= 0 && dword_612548 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_612548 = 1;\n      }\n      else\n      {\n        v3 = sub_40BDE0(a1);\n        if ( v3 >= 0 )\n        {\n          dword_612548 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x40bde0L", 
            "funcEndAddr": "0x40bf15L", 
            "funcName": "sub_40BDE0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40BF20(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_40BF60(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x40bf20L", 
            "funcEndAddr": "0x40bf60L", 
            "funcName": "sub_40BF20"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40BF60(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x40bf60L", 
            "funcEndAddr": "0x40bfb7L", 
            "funcName": "sub_40BF60"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_40BFC0(char *a1, size_t a2)\n{\n  char *v3; // rbx\n  __dev_t v4; // r15\n  __ino_t v5; // r14\n  DIR *v6; // rbp\n  int v7; // er15\n  int *v8; // r12\n  int v9; // eax\n  bool v10; // r13\n  struct dirent *v11; // rax\n  const char *v12; // rbx\n  signed __int64 v13; // r13\n  size_t v14; // r14\n  char *v15; // rdx\n  char *v16; // rax\n  size_t v17; // rbx\n  char *v18; // rax\n  int v19; // ebx\n  __dev_t v20; // [rsp+8h] [rbp-120h]\n  size_t v21; // [rsp+8h] [rbp-120h]\n  __dev_t v22; // [rsp+10h] [rbp-118h]\n  char *ptr; // [rsp+18h] [rbp-110h]\n  char *v24; // [rsp+20h] [rbp-108h]\n  size_t size; // [rsp+28h] [rbp-100h]\n  bool v26; // [rsp+3Fh] [rbp-E9h]\n  char *src; // [rsp+40h] [rbp-E8h]\n  char *srca; // [rsp+40h] [rbp-E8h]\n  __dev_t v29; // [rsp+48h] [rbp-E0h]\n  __ino_t v30; // [rsp+50h] [rbp-D8h]\n  __ino_t v31; // [rsp+58h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+60h] [rbp-C8h]\n\n  v24 = a1;\n  if ( !a2 )\n  {\n    size = 4096LL;\n    if ( a1 )\n    {\n      ptr = 0LL;\n      *__errno_location() = 22;\n      return ptr;\n    }\nLABEL_3:\n    ptr = (char *)malloc(size);\n    if ( !ptr )\n      return ptr;\n    goto LABEL_7;\n  }\n  size = a2;\n  if ( !a1 )\n    goto LABEL_3;\n  ptr = a1;\nLABEL_7:\n  v3 = &ptr[size];\n  ptr[size - 1] = 0;\n  if ( __lxstat(1, \".\", &stat_buf) < 0\n    || (v4 = stat_buf.st_dev, v5 = stat_buf.st_ino, v20 = stat_buf.st_dev, __lxstat(1, \"/\", &stat_buf) < 0) )\n  {\n    v8 = __errno_location();\nLABEL_58:\n    v19 = *v8;\n    if ( a1 )\n      goto LABEL_56;\n    goto LABEL_59;\n  }\n  src = v3 - 1;\n  v30 = stat_buf.st_ino;\n  v29 = stat_buf.st_dev;\n  v26 = v5 != stat_buf.st_ino || v4 != stat_buf.st_dev;\n  if ( !v26 )\n    goto LABEL_37;\n  v6 = 0LL;\n  v7 = -100;\n  v8 = __errno_location();\n  do\n  {\n    v9 = openat(v7, \"..\", 0);\n    v7 = v9;\n    if ( v9 < 0 )\n    {\n      v19 = *v8;\n      if ( v6 )\nLABEL_54:\n        closedir(v6);\nLABEL_55:\n      if ( a1 )\n      {\nLABEL_56:\n        *v8 = v19;\n        return 0LL;\n      }\nLABEL_59:\n      free(ptr);\n      goto LABEL_56;\n    }\n    if ( __fxstat(1, v9, &stat_buf) )\n    {\n      v19 = *v8;\n      if ( v6 )\n        closedir(v6);\n      goto LABEL_62;\n    }\n    if ( v6 && closedir(v6) || (v22 = stat_buf.st_dev, v31 = stat_buf.st_ino, (v6 = fdopendir(v7)) == 0LL) )\n    {\n      v19 = *v8;\nLABEL_62:\n      close(v7);\n      goto LABEL_55;\n    }\n    v10 = v26;\n    do\n    {\n      while ( 1 )\n      {\n        *v8 = 0;\n        v11 = readdir(v6);\n        if ( v11 )\n        {\n          if ( v11->d_name[0] != 46 )\n            goto LABEL_19;\n          goto LABEL_48;\n        }\n        v19 = *v8;\n        if ( *v8 || !v10 )\n          goto LABEL_52;\n        rewinddir(v6);\n        v11 = readdir(v6);\n        if ( !v11 )\n        {\n          v19 = *v8;\nLABEL_52:\n          if ( !v19 )\n          {\n            *v8 = 2;\n            v19 = 2;\n          }\n          goto LABEL_54;\n        }\n        v10 = 0;\n        if ( v11->d_name[0] != 46 )\n          break;\nLABEL_48:\n        if ( v11->d_name[1] && *(_WORD *)&v11->d_name[1] != 46 )\n        {\nLABEL_19:\n          if ( !v10 )\n            break;\n          if ( v22 != v20 || v11->d_ino == v5 )\n          {\n            v10 = v22 != v20 || v11->d_ino == v5;\n            break;\n          }\n        }\n      }\n      v12 = v11->d_name;\n    }\n    while ( __fxstatat(1, v7, v11->d_name, &stat_buf, 256)\n         || (stat_buf.st_mode & 0xF000) != 0x4000\n         || stat_buf.st_dev != v20\n         || stat_buf.st_ino != v5 );\n    v13 = src - ptr;\n    v14 = strlen(v12);\n    if ( src - ptr <= v14 )\n    {\n      if ( a2 )\n      {\n        *v8 = 34;\n        v19 = 34;\n        goto LABEL_54;\n      }\n      v15 = (char *)size;\n      if ( v14 >= size )\n        v15 = (char *)v14;\n      srca = v15;\n      v21 = (size_t)&v15[size];\n      if ( __CFADD__(v15, size) || (v16 = (char *)realloc(ptr, (size_t)&v15[size])) == 0LL )\n      {\n        *v8 = 12;\n        v19 = 12;\n        goto LABEL_54;\n      }\n      ptr = v16;\n      src = (char *)memcpy(&srca[v13 + (_QWORD)v16], &v16[v13], size - v13);\n      size = v21;\n    }\n    src = (char *)memcpy(&src[-v14], v12, v14) - 1;\n    v5 = v31;\n    *src = 47;\n    v20 = v22;\n  }\n  while ( v29 != v22 || v30 != v31 );\n  if ( closedir(v6) )\n    goto LABEL_58;\n  v3 = &ptr[size];\nLABEL_37:\n  if ( src == &ptr[size - 1] )\n    *--src = 47;\n  v17 = v3 - src;\n  memmove(ptr, src, v17);\n  if ( !a2 )\n    v24 = (char *)realloc(ptr, v17);\n  v18 = v24;\n  if ( !v24 )\n    v18 = ptr;\n  return v18;\n}\n", 
            "funcStartAddr": "0x40bfc0L", 
            "funcEndAddr": "0x40c482L", 
            "funcName": "sub_40BFC0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_40C490(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  __int64 v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( (unsigned __int8)a1 & 7 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( !((unsigned __int8)a1 & 7) )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && !(((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( ((v4 ^ *(_QWORD *)a1) - 72340172838076673LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = (__int64)(a1 + 1);\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = (_BYTE *)v5;\n      if ( (_BYTE *)v5 == v6 )\n        break;\n      if ( *(_BYTE *)(++v5 - 1) == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x40c490L", 
            "funcEndAddr": "0x40c594L", 
            "funcName": "sub_40C490"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C5A0(char a1)\n{\n  return sub_40BDE0(a1, 0, 3LL);\n}\n", 
            "funcStartAddr": "0x40c5a0L", 
            "funcEndAddr": "0x40c5aeL", 
            "funcName": "sub_40C5A0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x40c5b0L", 
            "funcEndAddr": "0x40c60dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x40c610L", 
            "funcEndAddr": "0x40c611L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_40C620(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_6122C8 )\n    v1 = (void *)unk_6122C8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x40c620L", 
            "funcEndAddr": "0x40c638L", 
            "funcName": "sub_40C620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_40C638(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_611E30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x40c638L", 
            "funcEndAddr": "0x40c658L", 
            "funcName": "sub_40C638"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chown.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 140, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}