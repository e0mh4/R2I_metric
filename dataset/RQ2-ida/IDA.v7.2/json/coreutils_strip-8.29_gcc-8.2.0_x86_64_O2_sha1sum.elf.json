{
    "funcInfo": [
        {
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  char v3; // r14\n  char *v4; // r13\n  unsigned __int64 v5; // r12\n  unsigned __int64 v6; // rbp\n  const char *v7; // rbx\n  int v8; // eax\n  const char *v9; // rsi\n  __int64 v10; // rax\n  unsigned int v11; // eax\n  char *v12; // rax\n  __int64 v13; // rbx\n  __ssize_t v14; // rax\n  __int64 v15; // r8\n  char *v16; // r15\n  unsigned __int64 v17; // rcx\n  __int64 v18; // rdx\n  char v19; // r10\n  bool v20; // cf\n  bool v21; // zf\n  const char *v22; // rdi\n  __int64 v23; // rcx\n  const char *v24; // rsi\n  char v25; // al\n  char *v26; // rax\n  __int64 v27; // rdx\n  char v28; // al\n  __int64 v29; // rax\n  char v30; // si\n  const char *v31; // r15\n  bool v32; // cf\n  bool v33; // zf\n  char *v34; // rdi\n  const char *v35; // rsi\n  _BOOL8 v36; // r14\n  unsigned int v37; // eax\n  char *v38; // rax\n  const char *v39; // rsi\n  char *v40; // rax\n  __int64 v41; // rcx\n  __int64 v42; // r8\n  int v43; // ebx\n  char v44; // al\n  __int64 v45; // r15\n  char *v46; // rax\n  const __int32_t **v47; // rax\n  unsigned __int64 v48; // rdx\n  const __int32_t *v49; // rdi\n  char *v50; // rax\n  __int64 v52; // r11\n  const char *v53; // rdx\n  __int64 v54; // rbx\n  int *v55; // rax\n  char *v56; // rax\n  unsigned int v57; // ebx\n  __int64 v58; // rdx\n  char *v59; // rax\n  char *v60; // rax\n  char *v61; // rax\n  char v62; // dl\n  __int64 v63; // rax\n  const char *v64; // rax\n  char v65; // dl\n  char v66; // al\n  char *v67; // rax\n  __int64 v68; // rbx\n  char *v69; // rax\n  __int64 v70; // rax\n  int *v71; // rax\n  char *v72; // rax\n  char *v73; // rax\n  char *v74; // rax\n  char *v75; // rax\n  char *v76; // rax\n  char *v77; // rax\n  const char **v78; // [rsp+0h] [rbp-E8h]\n  char *s; // [rsp+8h] [rbp-E0h]\n  char v80; // [rsp+13h] [rbp-D5h]\n  int v81; // [rsp+14h] [rbp-D4h]\n  unsigned __int64 v82; // [rsp+18h] [rbp-D0h]\n  __int64 v83; // [rsp+20h] [rbp-C8h]\n  unsigned __int8 v84; // [rsp+20h] [rbp-C8h]\n  unsigned __int64 v85; // [rsp+20h] [rbp-C8h]\n  unsigned __int8 v86; // [rsp+20h] [rbp-C8h]\n  const char *v87; // [rsp+20h] [rbp-C8h]\n  unsigned __int64 v88; // [rsp+20h] [rbp-C8h]\n  char v89; // [rsp+28h] [rbp-C0h]\n  unsigned __int64 v90; // [rsp+28h] [rbp-C0h]\n  unsigned __int64 v91; // [rsp+28h] [rbp-C0h]\n  unsigned __int64 v92; // [rsp+28h] [rbp-C0h]\n  __int64 v93; // [rsp+30h] [rbp-B8h]\n  const char **v94; // [rsp+38h] [rbp-B0h]\n  unsigned __int64 v95; // [rsp+40h] [rbp-A8h]\n  char v96; // [rsp+48h] [rbp-A0h]\n  char v97; // [rsp+49h] [rbp-9Fh]\n  char v98; // [rsp+4Ah] [rbp-9Eh]\n  char v99; // [rsp+4Bh] [rbp-9Dh]\n  int v100; // [rsp+4Ch] [rbp-9Ch]\n  char v101; // [rsp+5Fh] [rbp-89h]\n  char *lineptr; // [rsp+60h] [rbp-88h]\n  size_t n; // [rsp+68h] [rbp-80h]\n  char v104[32]; // [rsp+70h] [rbp-78h]\n  char v105[88]; // [rsp+90h] [rbp-58h]\n\n  v3 = 0;\n  LOBYTE(v4) = 0;\n  LODWORD(v5) = -1;\n  LODWORD(v6) = a1;\n  v7 = (const char *)a2;\n  sub_4049D0(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_4085A0(sub_403080);\n  setvbuf(stdout, 0LL, 1, 0LL);\n  while ( 1 )\n  {\n    v8 = sub_407E00(a1, a2, \"bctw\", &off_409180, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 119 )\n    {\n      byte_60C2DC = 0;\n      byte_60C2DB = 1;\n      byte_60C2D9 = 0;\n    }\n    else if ( v8 <= 119 )\n    {\n      if ( v8 == 98 )\n        goto LABEL_15;\n      if ( v8 <= 98 )\n      {\n        if ( v8 == -131 )\n        {\n          sub_406A80((char)stdout);\n          exit(0);\n        }\n        if ( v8 == -130 )\n          sub_402C90(0);\nLABEL_204:\n        sub_402C90(1);\n      }\n      if ( v8 == 99 )\n      {\n        LOBYTE(v4) = 1;\n      }\n      else\n      {\n        if ( v8 != 116 )\n          goto LABEL_204;\n        LODWORD(v5) = 0;\n      }\n    }\n    else if ( v8 == 130 )\n    {\n      byte_60C2DC = 0;\n      byte_60C2DB = 0;\n      byte_60C2D9 = 1;\n    }\n    else if ( v8 > 130 )\n    {\n      if ( v8 == 131 )\n      {\n        byte_60C2D8 = 1;\n      }\n      else\n      {\n        if ( v8 != 132 )\n          goto LABEL_204;\n        v3 = 1;\nLABEL_15:\n        LODWORD(v5) = 1;\n      }\n    }\n    else if ( v8 == 128 )\n    {\n      byte_60C2DA = 1;\n    }\n    else\n    {\n      if ( v8 != 129 )\n        goto LABEL_204;\n      byte_60C2DC = 1;\n      byte_60C2DB = 0;\n      byte_60C2D9 = 0;\n    }\n  }\n  qword_60C2E8 = 42LL;\n  qword_60C2E0 = 40LL;\n  if ( !(_DWORD)v5 && v3 )\n  {\n    v9 = \"--tag does not support --text mode\";\n    goto LABEL_203;\n  }\n  if ( (_BYTE)v4 )\n  {\n    v9 = \"the --tag option is meaningless when verifying checksums\";\n    if ( v3 )\n      goto LABEL_203;\n  }\n  v9 = \"the --binary and --text options are meaningless when verifying checksums\";\n  if ( ((v5 & 0x80000000) == 0LL) & (unsigned __int8)v4 )\n    goto LABEL_203;\n  if ( byte_60C2DA )\n    goto LABEL_71;\n  if ( !byte_60C2DC )\n  {\n    if ( !byte_60C2DB )\n      goto LABEL_201;\n    v9 = \"the --warn option is meaningful only when verifying checksums\";\n    if ( (_BYTE)v4 )\n      goto LABEL_40;\n    goto LABEL_203;\n  }\n  v9 = \"the --status option is meaningful only when verifying checksums\";\n  if ( !(_BYTE)v4 )\n  {\nLABEL_203:\n    v72 = dcgettext(0LL, v9, 5);\n    error(0, 0, v72);\n    goto LABEL_204;\n  }\nLABEL_37:\n  if ( !byte_60C2DB )\n    goto LABEL_38;\n  while ( 1 )\n  {\nLABEL_40:\n    if ( (_DWORD)v5 == -1 )\n      LODWORD(v5) = 0;\n    v94 = (const char **)&v7[8 * (int)v6];\n    v10 = dword_60C29C;\n    if ( dword_60C29C == (_DWORD)v6 )\n    {\n      *v94 = \"-\";\n      ++v94;\n    }\n    v78 = (const char **)&v7[8 * v10];\n    if ( v94 <= v78 )\n    {\n      v96 = 1;\n      goto LABEL_130;\n    }\n    v96 = 1;\n    v80 = (char)v4;\n    v11 = (unsigned int)v5 < 1 ? 0xFFFFFFF6 : 0;\n    v98 = v3;\n    v100 = v11 + 42;\n    v99 = v11 + 42;\n    do\n    {\n      s = (char *)*v78;\n      if ( !v80 )\n      {\n        if ( !(unsigned __int8)sub_402AF0(s, v104, v105) )\n        {\n          v96 = 0;\n          goto LABEL_129;\n        }\n        if ( strchr(s, 92) || strchr(s, 10) )\n        {\n          if ( v98 )\n          {\n            v77 = stdout->_IO_write_ptr;\n            v57 = 1;\n            if ( stdout->_IO_write_end <= v77 )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v77 + 1;\n              *v77 = 92;\n            }\nLABEL_197:\n            fwrite_unlocked(\"SHA1\", 1uLL, 4uLL, stdout);\n            fwrite_unlocked(\" (\", 1uLL, 2uLL, stdout);\n            sub_402A40(s, v57);\n            fwrite_unlocked(\") = \", 1uLL, 4uLL, stdout);\n            if ( !((unsigned __int64)qword_60C2E0 >> 1) )\n              goto LABEL_153;\n            goto LABEL_151;\n          }\n          v56 = stdout->_IO_write_ptr;\n          if ( v56 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 92);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v56 + 1;\n            *v56 = 92;\n          }\n          v57 = 1;\n          if ( !((unsigned __int64)qword_60C2E0 >> 1) )\n            goto LABEL_157;\n        }\n        else\n        {\n          v57 = 0;\n          if ( v98 )\n            goto LABEL_197;\n          if ( !((unsigned __int64)qword_60C2E0 >> 1) )\n            goto LABEL_157;\n        }\nLABEL_151:\n        v6 = 0LL;\n        do\n        {\n          v58 = (unsigned __int8)v104[v6++];\n          __printf_chk(1LL, \"%02x\", v58);\n        }\n        while ( (unsigned __int64)qword_60C2E0 >> 1 > v6 );\nLABEL_153:\n        if ( v98 )\n        {\nLABEL_154:\n          v59 = stdout->_IO_write_ptr;\n          if ( v59 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, 10);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v59 + 1;\n            *v59 = 10;\n          }\n          goto LABEL_129;\n        }\nLABEL_157:\n        v60 = stdout->_IO_write_ptr;\n        if ( v60 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 32);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v60 + 1;\n          *v60 = 32;\n        }\n        v61 = stdout->_IO_write_ptr;\n        if ( v61 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v100);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v61 + 1;\n          *v61 = v99;\n        }\n        sub_402A40(s, v57);\n        goto LABEL_154;\n      }\n      v81 = strcmp(*v78, \"-\");\n      if ( v81 )\n      {\n        v6 = sub_404930(s, 4228789LL);\n        if ( !v6 )\n          goto LABEL_141;\n      }\n      else\n      {\n        byte_60C2F0 = 1;\n        v12 = dcgettext(0LL, \"standard input\", 5);\n        v6 = (unsigned __int64)stdin;\n        s = v12;\n      }\n      v97 = 0;\n      v3 = 0;\n      v5 = 0LL;\n      v13 = 1LL;\n      lineptr = 0LL;\n      n = 0LL;\n      v95 = 0LL;\n      v82 = 0LL;\n      while ( 1 )\n      {\n        v14 = __getdelim(&lineptr, &n, 10, (FILE *)v6);\n        if ( v14 <= 0 )\n          break;\n        v16 = lineptr;\n        v17 = (unsigned __int8)*lineptr;\n        if ( (_BYTE)v17 == 35 )\n          goto LABEL_68;\n        v15 = v14;\n        if ( lineptr[v14 - 1] == 10 )\n        {\n          v15 = v14 - 1;\n          lineptr[v14 - 1] = 0;\n          v16 = lineptr;\n          LOBYTE(v17) = *lineptr;\n        }\n        v18 = 0LL;\n        while ( (_BYTE)v17 == 32 )\nLABEL_55:\n          LOBYTE(v17) = v16[++v18];\n        if ( (_BYTE)v17 == 9 )\n          goto LABEL_55;\n        v19 = 0;\n        v20 = (unsigned __int8)v17 < 0x5Cu;\n        v21 = (_BYTE)v17 == 92;\n        if ( (_BYTE)v17 == 92 )\n        {\n          v19 = v80;\n          v20 = __CFADD__(v18, 1LL);\n          v21 = v18++ == -1;\n        }\n        v4 = &v16[v18];\n        v22 = \"SHA1\";\n        v23 = 4LL;\n        v24 = &v16[v18];\n        do\n        {\n          if ( !v23 )\n            break;\n          v20 = *v24 < (unsigned int)*v22;\n          v21 = *v24++ == *v22++;\n          --v23;\n        }\n        while ( v21 );\n        if ( (!v20 && !v21) == v20 )\n        {\n          v25 = v16[v18 + 4];\n          v17 = v18 + 4;\n          if ( v25 == 32 )\n          {\n            v25 = v16[v18 + 5];\n            v17 = v18 + 5;\n          }\n          if ( v25 != 40 || (++v17, (v15 -= v17) == 0) )\n          {\nLABEL_66:\n            ++v5;\n            if ( byte_60C2DB )\n            {\n              v45 = sub_406470(0LL, 3LL, s, v17, v15);\n              v46 = dcgettext(0LL, \"%s: %lu: improperly formatted %s checksum line\", 5);\n              error(0, 0, v46, v45, v13, \"SHA1\", v78);\n            }\nLABEL_68:\n            if ( *(_BYTE *)v6 & 0x30 )\n              break;\n            goto LABEL_69;\n          }\n          v31 = &v16[v17];\n          v52 = v15 - 1;\n          if ( v15 != 1 )\n          {\n            if ( v31[v15 - 1] == 41 )\n            {\nLABEL_162:\n              v53 = &v31[v52];\nLABEL_163:\n              if ( v19 )\n              {\n                v24 = (const char *)v52;\n                v87 = v53;\n                v70 = sub_4029B0(v31, v52);\n                v53 = v87;\n                if ( !v70 )\n                  goto LABEL_66;\n              }\n              *v53 = 0;\n              v62 = v31[v52 + 1];\n              v63 = v52 + 1;\n              if ( v62 == 9 || v62 == 32 )\n              {\n                do\n                {\n                  do\n                    v62 = v31[++v63];\n                  while ( v62 == 32 );\n                }\n                while ( v62 == 9 );\n              }\n              if ( v62 != 61 )\n                goto LABEL_66;\n              v4 = (char *)&v31[v63 + 1];\n              if ( *v4 == 32 || *v4 == 9 )\n              {\n                v64 = &v31[v63 + 2];\n                do\n                {\n                  do\n                  {\n                    v65 = *v64;\n                    v4 = (char *)v64++;\n                  }\n                  while ( v65 == 32 );\n                }\n                while ( v65 == 9 );\n              }\n              v66 = sub_402950(v4, v24);\n              goto LABEL_175;\n            }\n            while ( --v52 )\n            {\n              if ( v31[v52] == 41 )\n                goto LABEL_162;\n            }\n          }\n          if ( *v31 != 41 )\n            goto LABEL_66;\n          v53 = v31;\n          v52 = 0LL;\n          goto LABEL_163;\n        }\n        v17 = v15 - v18;\n        if ( v15 - v18 < qword_60C2E8 + (unsigned __int64)(*v4 == 92) )\n          goto LABEL_66;\n        v27 = qword_60C2E0 + v18;\n        v17 = (unsigned __int64)&v16[v27];\n        v28 = v16[v27];\n        if ( v28 != 32 && v28 != 9 )\n          goto LABEL_66;\n        *(_BYTE *)v17 = 0;\n        v93 = v27;\n        v89 = v19;\n        v83 = v15;\n        if ( !(unsigned __int8)sub_402950(v4, v24) )\n          goto LABEL_66;\n        v15 = v83;\n        v17 = (unsigned int)dword_60C210;\n        v29 = v93 + 1;\n        if ( v83 - (v93 + 1) != 1 && ((v30 = v16[v93 + 1], v30 == 32) || v30 == 42) )\n        {\n          if ( dword_60C210 != 1 )\n          {\n            dword_60C210 = 0;\n            v29 = v93 + 2;\n          }\n        }\n        else\n        {\n          if ( !dword_60C210 )\n            goto LABEL_66;\n          dword_60C210 = 1;\n        }\n        v31 = &v16[v29];\n        if ( v89 )\n        {\n          v66 = sub_4029B0(v31, v83 - v29) != 0;\nLABEL_175:\n          if ( !v66 )\n            goto LABEL_66;\n        }\n        v32 = 0;\n        v33 = v81 == 0;\n        if ( !v81 )\n        {\n          v34 = \"-\";\n          v17 = 2LL;\n          v35 = v31;\n          do\n          {\n            if ( !v17 )\n              break;\n            v32 = (unsigned int)*v35 < (unsigned __int8)*v34;\n            v33 = *v35++ == *v34++;\n            --v17;\n          }\n          while ( v33 );\n          if ( (!v32 && !v33) == v32 )\n            goto LABEL_66;\n        }\n        LODWORD(v36) = 0;\n        if ( !byte_60C2DC )\n          v36 = strchr(v31, 10) != 0LL;\n        v37 = sub_402AF0(v31, v105, &v101);\n        v15 = v37;\n        if ( !(_BYTE)v37 )\n        {\n          ++v82;\n          if ( byte_60C2DC )\n            goto LABEL_97;\n          if ( v36 )\n          {\n            v38 = stdout->_IO_write_ptr;\n            if ( v38 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 92);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v38 + 1;\n              *v38 = 92;\n            }\n          }\n          sub_402A40(v31, v36);\n          v39 = \"FAILED open or read\";\n          goto LABEL_96;\n        }\n        if ( byte_60C2DA && v101 )\n          goto LABEL_97;\n        v17 = (unsigned __int64)qword_60C2E0 >> 1;\n        if ( (unsigned __int64)qword_60C2E0 >> 1 )\n        {\n          v90 = (unsigned __int64)qword_60C2E0 >> 1;\n          v84 = v37;\n          v47 = __ctype_tolower_loc();\n          v48 = 0LL;\n          v15 = v84;\n          v17 = v90;\n          v49 = *v47;\n          while ( v49[(unsigned __int8)v4[2 * v48]] == byte_409160[((unsigned __int8)v105[v48] >> 4) & 0xF]\n               && v49[(unsigned __int8)v4[2 * v48 + 1]] == byte_409160[v105[v48] & 0xF] )\n          {\n            if ( v90 == ++v48 )\n            {\n              v48 = v90;\n              goto LABEL_180;\n            }\n          }\n          ++v95;\n          if ( byte_60C2DC )\n            goto LABEL_97;\n          if ( v36 )\n          {\nLABEL_123:\n            v50 = stdout->_IO_write_ptr;\n            if ( v50 >= stdout->_IO_write_end )\n            {\n              v92 = v48;\n              v88 = v17;\n              __overflow(stdout, 92);\n              v17 = v88;\n              v48 = v92;\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v50 + 1;\n              *v50 = 92;\n            }\n          }\n          v91 = v48;\n          v85 = v17;\n          sub_402A40(v31, v36);\n          v17 = v85;\n          if ( v85 != v91 )\n          {\n            v39 = \"FAILED\";\nLABEL_96:\n            v40 = dcgettext(0LL, v39, 5);\n            __printf_chk(1LL, \": %s\\n\", v40);\n            goto LABEL_97;\n          }\n          goto LABEL_188;\n        }\n        v48 = 0LL;\nLABEL_180:\n        v97 = byte_60C2DC;\n        if ( byte_60C2DC )\n          goto LABEL_97;\n        v97 = byte_60C2D9;\n        if ( byte_60C2D9 )\n          goto LABEL_97;\n        if ( v36 )\n        {\n          v97 = v15;\n          goto LABEL_123;\n        }\n        v86 = v15;\n        sub_402A40(v31, 0LL);\n        v15 = v86;\n        v97 = v86;\nLABEL_188:\n        if ( !byte_60C2D9 )\n        {\n          v39 = \"OK\";\n          goto LABEL_96;\n        }\nLABEL_97:\n        v3 = v80;\n        if ( *(_BYTE *)v6 & 0x30 )\n          break;\nLABEL_69:\n        if ( !++v13 )\n        {\n          v7 = (const char *)sub_406470(0LL, 3LL, s, v17, v15);\n          v26 = dcgettext(0LL, \"%s: too many checksum lines\", 5);\n          error(1, 0, v26, v7);\nLABEL_71:\n          v9 = \"the --ignore-missing option is meaningful only when verifying checksums\";\n          if ( !(_BYTE)v4 )\n            goto LABEL_203;\n          goto LABEL_37;\n        }\n      }\n      free(lineptr);\n      v43 = *(_DWORD *)v6 & 0x20;\n      if ( v43 )\n      {\n        v68 = sub_406470(0LL, 3LL, s, v41, v42);\n        v69 = dcgettext(0LL, \"%s: read error\", 5);\n        error(0, 0, v69, v68);\n        v44 = 0;\n        goto LABEL_113;\n      }\n      if ( !v81 || !(unsigned int)sub_406E50((FILE *)v6) )\n      {\n        if ( v3 )\n        {\n          if ( byte_60C2DC )\n            goto LABEL_220;\n          if ( v5 )\n          {\n            v76 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu line is improperly formatted\",\n                    \"WARNING: %lu lines are improperly formatted\",\n                    v5,\n                    5);\n            error(0, 0, v76, v5);\n          }\n          if ( v82 )\n          {\n            v3 = v82;\n            v75 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu listed file could not be read\",\n                    \"WARNING: %lu listed files could not be read\",\n                    v82,\n                    5);\n            error(0, 0, v75, v82);\n          }\n          if ( v95 )\n          {\n            v3 = v95;\n            v74 = dcngettext(\n                    0LL,\n                    \"WARNING: %lu computed checksum did NOT match\",\n                    \"WARNING: %lu computed checksums did NOT match\",\n                    v95,\n                    5);\n            error(0, 0, v74, v95);\n          }\n          if ( !byte_60C2DA )\n          {\nLABEL_220:\n            if ( v97 )\n              goto LABEL_110;\n          }\n          else if ( v97 )\n          {\nLABEL_110:\n            if ( !(v95 | v82) )\n              LOBYTE(v43) = (v5 == 0) | byte_60C2D8 ^ 1;\n          }\n          else\n          {\n            v6 = sub_406470(0LL, 3LL, s, v41, v42);\n            v73 = dcgettext(0LL, \"%s: no file was verified\", 5);\n            error(0, 0, v73, v6);\n          }\n        }\n        else\n        {\n          v6 = sub_406470(0LL, 3LL, s, v41, v42);\n          v67 = dcgettext(0LL, \"%s: no properly formatted %s checksum lines found\", 5);\n          error(0, 0, v67, v6, \"SHA1\");\n        }\n        v44 = v43 & 1;\n        goto LABEL_113;\n      }\nLABEL_141:\n      v54 = sub_406470(0LL, 3LL, s, v41, v42);\n      v55 = __errno_location();\n      error(0, *v55, \"%s\", v54);\n      v44 = 0;\nLABEL_113:\n      v96 &= v44;\nLABEL_129:\n      ++v78;\n    }\n    while ( v94 > v78 );\nLABEL_130:\n    if ( !byte_60C2F0 || (unsigned int)sub_406E50(stdin) != -1 )\n      return (unsigned __int8)v96 ^ 1u;\n    v7 = dcgettext(0LL, \"standard input\", 5);\n    v71 = __errno_location();\n    error(1, *v71, v7);\nLABEL_201:\n    if ( byte_60C2D9 == 1 )\n    {\n      v9 = \"the --quiet option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_203;\n    }\nLABEL_38:\n    if ( byte_60C2D8 )\n    {\n      v9 = \"the --strict option is meaningful only when verifying checksums\";\n      if ( !(_BYTE)v4 )\n        goto LABEL_203;\n    }\n  }\n}\n", 
            "funcStartAddr": "0x401940L", 
            "funcEndAddr": "0x402869L", 
            "funcName": "main"
        }, 
        {
            "decompiledFuncCode": "// positive sp value has been detected, the output may be wrong!\nvoid __usercall __noreturn start(__int64 a1@<rax>, void (*a2)(void)@<rdx>)\n{\n  int v2; // esi\n  int v3; // [rsp-8h] [rbp-8h]\n  __int64 _0; // [rsp+0h] [rbp+0h]\n\n  v2 = v3;\n  *(_QWORD *)&v3 = a1;\n  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, (char **)&_0, init, fini, a2, &v3);\n  __halt();\n}\n", 
            "funcStartAddr": "0x402870L", 
            "funcEndAddr": "0x40289bL", 
            "funcName": "start"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_40289B()\n{\n  __int64 *result; // rax\n\n  result = &program_invocation_short_name;\n  if ( &program_invocation_short_name != &program_invocation_short_name )\n    result = 0LL;\n  return result;\n}\n", 
            "funcStartAddr": "0x40289bL", 
            "funcEndAddr": "0x4028baL", 
            "funcName": "sub_40289B"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_4028BA()\n{\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4028baL", 
            "funcEndAddr": "0x4028f1L", 
            "funcName": "sub_4028BA"
        }, 
        {
            "decompiledFuncCode": "__int64 *sub_4028F1()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60C2C8 )\n  {\n    while ( qword_60C2D0 < (unsigned __int64)(&qword_60BE48 - qword_60BE40 - 1) )\n      ((void (*)(void))qword_60BE40[++qword_60C2D0])();\n    result = sub_40289B();\n    byte_60C2C8 = 1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x4028f1L", 
            "funcEndAddr": "0x402948L", 
            "funcName": "sub_4028F1"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_402948()\n{\n  return sub_4028BA();\n}\n", 
            "funcStartAddr": "0x402948L", 
            "funcEndAddr": "0x40294dL", 
            "funcName": "sub_402948"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_402950(_BYTE *a1)\n{\n  _BYTE *v1; // rbx\n  unsigned __int64 v2; // rbp\n  const unsigned __int16 *v3; // rcx\n  unsigned __int64 v4; // rax\n\n  v1 = a1;\n  v2 = qword_60C2E0;\n  if ( !qword_60C2E0 )\n    return *v1 == 0;\n  v3 = *__ctype_b_loc();\n  LODWORD(v4) = 0;\n  while ( v3[(unsigned __int8)*v1] & 0x1000 )\n  {\n    ++v1;\n    v4 = (unsigned int)(v4 + 1);\n    if ( v4 >= v2 )\n      return *v1 == 0;\n  }\n  return 0;\n}\n", 
            "funcStartAddr": "0x402950L", 
            "funcEndAddr": "0x4029adL", 
            "funcName": "sub_402950"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4029B0(__int64 a1, unsigned __int64 a2)\n{\n  __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  char v4; // cl\n  char v5; // cl\n  _BYTE *v7; // r9\n\n  v2 = a1 + 1;\n  v3 = 0LL;\n  if ( a2 )\n  {\n    do\n    {\n      v4 = *(_BYTE *)(a1 + v3);\n      if ( !v4 )\n        return 0LL;\n      if ( v4 == 92 )\n      {\n        if ( a2 - 1 == v3 )\n          return 0LL;\n        v5 = *(_BYTE *)(a1 + ++v3);\n        if ( v5 == 92 )\n        {\n          v7 = (_BYTE *)v2;\n          *(_BYTE *)(v2 - 1) = 92;\n        }\n        else\n        {\n          if ( v5 != 110 )\n            return 0LL;\n          v7 = (_BYTE *)v2;\n          *(_BYTE *)(v2 - 1) = 10;\n        }\n      }\n      else\n      {\n        *(_BYTE *)(v2 - 1) = v4;\n        v7 = (_BYTE *)v2;\n      }\n      ++v3;\n      ++v2;\n    }\n    while ( a2 > v3 );\n    if ( (unsigned __int64)v7 < a1 + a2 )\n      *v7 = 0;\n  }\n  return a1;\n}\n", 
            "funcStartAddr": "0x4029b0L", 
            "funcEndAddr": "0x402a31L", 
            "funcName": "sub_4029B0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_402A40(const char *a1, char a2)\n{\n  const char *v2; // rbx\n  char *v3; // rax\n  int v4; // esi\n\n  v2 = a1;\n  if ( a2 )\n  {\n    while ( 1 )\n    {\n      v4 = *(unsigned __int8 *)v2;\n      if ( !(_BYTE)v4 )\n        break;\n      if ( (_BYTE)v4 == 10 )\n      {\n        fwrite_unlocked(&unk_408604, 1uLL, 2uLL, stdout);\n      }\n      else if ( (_BYTE)v4 == 92 )\n      {\n        fwrite_unlocked(&unk_408607, 1uLL, 2uLL, stdout);\n      }\n      else\n      {\n        v3 = stdout->_IO_write_ptr;\n        if ( v3 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, v4);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v3 + 1;\n          *v3 = v4;\n        }\n      }\n      ++v2;\n    }\n  }\n  else\n  {\n    fputs_unlocked(a1, stdout);\n  }\n}\n", 
            "funcStartAddr": "0x402a40L", 
            "funcEndAddr": "0x402ae5L", 
            "funcName": "sub_402A40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_402AF0(const char *a1, __int64 a2, _BYTE *a3)\n{\n  FILE *v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r8\n  unsigned int v6; // er12\n  _BYTE *v8; // r13\n  __int64 v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // r8\n  __int64 v12; // rbx\n  int *v13; // rax\n  __int64 v14; // rbp\n  int *v15; // rax\n  int *v16; // rax\n  __int64 v17; // rcx\n  __int64 v18; // r8\n  int *v19; // rbx\n  __int64 v20; // rax\n\n  *a3 = 0;\n  if ( !strcmp(a1, \"-\") )\n  {\n    v3 = stdin;\n    byte_60C2F0 = 1;\n    sub_404900(stdin, 2LL);\n    if ( !(unsigned int)sub_4047C0(v3) )\n      return 1;\nLABEL_9:\n    v6 = 0;\n    v14 = sub_406470(0LL, 3LL, a1, v4, v5);\n    v15 = __errno_location();\n    error(0, *v15, \"%s\", v14);\n    if ( stdin != v3 )\n      sub_406E50(v3);\n    return v6;\n  }\n  v8 = a3;\n  v9 = sub_404930(a1, 4228789LL);\n  v3 = (FILE *)v9;\n  if ( v9 )\n  {\n    sub_404900(v9, 2LL);\n    if ( !(unsigned int)sub_4047C0(v3) )\n    {\n      if ( (unsigned int)sub_406E50(v3) )\n      {\n        v6 = 0;\n        v12 = sub_406470(0LL, 3LL, a1, v10, v11);\n        v13 = __errno_location();\n        error(0, *v13, \"%s\", v12);\n        return v6;\n      }\n      return 1;\n    }\n    goto LABEL_9;\n  }\n  v16 = __errno_location();\n  v6 = (unsigned __int8)byte_60C2DA;\n  v19 = v16;\n  if ( byte_60C2DA && *v16 == 2 )\n  {\n    *v8 = 1;\n  }\n  else\n  {\n    v6 = 0;\n    v20 = sub_406470(0LL, 3LL, a1, v17, v18);\n    error(0, *v19, \"%s\", v20);\n  }\n  return v6;\n}\n", 
            "funcStartAddr": "0x402af0L", 
            "funcEndAddr": "0x402c82L", 
            "funcName": "sub_402AF0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall __noreturn sub_402C90(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  char *v8; // rax\n  FILE *v9; // rbp\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  char *v19; // rax\n  const char **v20; // rax\n  const char *v21; // rbp\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  const char *v30; // [rsp+0h] [rbp-88h]\n  const char *v31; // [rsp+8h] [rbp-80h]\n  const char *v32; // [rsp+10h] [rbp-78h]\n  const char *v33; // [rsp+18h] [rbp-70h]\n  const char *v34; // [rsp+20h] [rbp-68h]\n  const char *v35; // [rsp+28h] [rbp-60h]\n  const char *v36; // [rsp+30h] [rbp-58h]\n  const char *v37; // [rsp+38h] [rbp-50h]\n  const char *v38; // [rsp+40h] [rbp-48h]\n  const char *v39; // [rsp+48h] [rbp-40h]\n  const char *v40; // [rsp+50h] [rbp-38h]\n  const char *v41; // [rsp+58h] [rbp-30h]\n  __int64 v42; // [rsp+60h] [rbp-28h]\n  __int64 v43; // [rsp+68h] [rbp-20h]\n\n  v1 = qword_60C308;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\n  -b, --binary         read in binary mode\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = dcgettext(0LL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5);\n  __printf_chk(1LL, v8, \"SHA1\");\n  v9 = stdout;\n  v10 = dcgettext(0LL, \"      --tag            create a BSD-style checksum\\n\", 5);\n  fputs_unlocked(v10, v9);\n  v11 = stdout;\n  v12 = dcgettext(0LL, \"  -t, --text           read in text mode (default)\\n\", 5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The following five options are useful only when verifying checksums:\\n\"\n          \"      --ignore-missing  don't fail or report status for missing files\\n\"\n          \"      --quiet          don't print OK for each successfully verified file\\n\"\n          \"      --status         don't output anything, status code shows success\\n\"\n          \"      --strict         exit non-zero for improperly formatted checksum lines\\n\"\n          \"  -w, --warn           warn about improperly formatted checksum lines\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v18, v17);\n  v19 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The sums are computed as described in %s.  When checking, the input\\n\"\n          \"should be a former output of this program.  The default mode is to print a\\n\"\n          \"line with checksum, a space, a character indicating input mode ('*' for binary,\\n\"\n          \"' ' for text or where binary is insignificant), and name for each FILE.\\n\",\n          5);\n  __printf_chk(1LL, v19, \"FIPS-180-1\");\n  v30 = \"[\";\n  v20 = &v30;\n  v31 = \"test invocation\";\n  v32 = \"coreutils\";\n  v33 = \"Multi-call invocation\";\n  v34 = \"sha224sum\";\n  v35 = \"sha2 utilities\";\n  v36 = \"sha256sum\";\n  v37 = \"sha2 utilities\";\n  v38 = \"sha384sum\";\n  v39 = \"sha2 utilities\";\n  v40 = \"sha512sum\";\n  v41 = \"sha2 utilities\";\n  v42 = 0LL;\n  v43 = 0LL;\n  do\n    v20 += 2;\n  while ( *v20 && strcmp(\"sha1sum\", *v20) );\n  v21 = v20[1];\n  if ( v21 )\n  {\n    v22 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v22, &unk_408698);\n    v23 = setlocale(5, 0LL);\n    if ( !v23 || !strncmp(v23, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_408698);\n    v27 = setlocale(5, 0LL);\n    if ( !v27 || !strncmp(v27, \"en_\", 3uLL) )\n    {\n      v21 = \"sha1sum\";\n      v28 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v28, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v21 = \"sha1sum\";\n  }\n  v29 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v29, \"sha1sum\");\nLABEL_10:\n  v24 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v24, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v25 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v25, v21);\nLABEL_3:\n  exit(status);\n}\n", 
            "funcStartAddr": "0x402c90L", 
            "funcEndAddr": "0x40305dL", 
            "funcName": "sub_402C90"
        }, 
        {
            "decompiledFuncCode": "__int64 sub_403080()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  char *v4; // rbp\n  __int64 v5; // rax\n\n  if ( (unsigned int)sub_407F00(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60C2F8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60C300 )\n      {\n        v5 = sub_406440();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_407F00(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n", 
            "funcStartAddr": "0x403080L", 
            "funcEndAddr": "0x40311eL", 
            "funcName": "sub_403080"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_403150(unsigned int *a1, _DWORD *a2)\n{\n  _DWORD *result; // rax\n\n  result = a2;\n  *a2 = _byteswap_ulong(*a1);\n  a2[1] = _byteswap_ulong(a1[1]);\n  a2[2] = _byteswap_ulong(a1[2]);\n  a2[3] = _byteswap_ulong(a1[3]);\n  a2[4] = _byteswap_ulong(a1[4]);\n  return result;\n}\n", 
            "funcStartAddr": "0x403150L", 
            "funcEndAddr": "0x40317aL", 
            "funcName": "sub_403150"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_403180(unsigned __int64 a1, __int64 a2, unsigned int *a3)\n{\n  unsigned __int64 v3; // r11\n  unsigned __int64 v4; // rax\n  unsigned __int64 v5; // r14\n  _DWORD *v6; // rbx\n  int v7; // ecx\n  unsigned int v8; // edi\n  _BOOL4 v9; // er10\n  unsigned int v10; // er8\n  __int64 result; // rax\n  unsigned int v12; // edx\n  int v13; // er9\n  unsigned int v14; // ebp\n  unsigned __int64 v15; // rcx\n  unsigned int v16; // edi\n  __int64 i; // rsi\n  int v18; // esi\n  int v19; // er9\n  int v20; // edx\n  int v21; // er9\n  int v22; // esi\n  int v23; // eax\n  int v24; // er8\n  int v25; // esi\n  int v26; // er9\n  int v27; // edi\n  int v28; // esi\n  int v29; // er8\n  int v30; // esi\n  int v31; // edx\n  int v32; // edi\n  int v33; // edx\n  int v34; // eax\n  int v35; // esi\n  int v36; // eax\n  int v37; // er9\n  int v38; // edx\n  int v39; // er9\n  int v40; // er8\n  int v41; // eax\n  int v42; // er8\n  int v43; // edi\n  int v44; // er9\n  int v45; // edi\n  int v46; // esi\n  int v47; // er8\n  int v48; // esi\n  int v49; // edx\n  int v50; // edi\n  int v51; // edx\n  int v52; // eax\n  int v53; // esi\n  int v54; // eax\n  int v55; // er9\n  int v56; // edx\n  int v57; // er9\n  int v58; // er8\n  int v59; // eax\n  int v60; // er8\n  int v61; // er11\n  int v62; // edi\n  int v63; // er9\n  int v64; // er10\n  int v65; // edi\n  int v66; // esi\n  int v67; // er8\n  int v68; // esi\n  int v69; // edx\n  int v70; // edi\n  int v71; // edx\n  int v72; // eax\n  int v73; // esi\n  int v74; // eax\n  int v75; // er9\n  int v76; // er12\n  int v77; // edx\n  int v78; // eax\n  int v79; // er9\n  int v80; // ebx\n  int v81; // er12\n  int v82; // er8\n  int v83; // eax\n  int v84; // er12\n  int v85; // er8\n  int v86; // ebx\n  int v87; // edi\n  int v88; // er15\n  int v89; // er12\n  int v90; // esi\n  int v91; // er15\n  int v92; // ebp\n  int v93; // ebx\n  int v94; // er15\n  int v95; // esi\n  int v96; // er14\n  int v97; // edx\n  int v98; // ebp\n  int v99; // er15\n  int v100; // ebp\n  int v101; // edx\n  int v102; // er14\n  int v103; // eax\n  int v104; // er13\n  int v105; // ebp\n  int v106; // er13\n  int v107; // er12\n  int v108; // er14\n  int v109; // er12\n  int v110; // ebx\n  int v111; // er13\n  int v112; // er15\n  int v113; // ebx\n  int v114; // ebx\n  int v115; // er12\n  int v116; // ebx\n  int v117; // ebp\n  int v118; // er11\n  int v119; // ebp\n  int v120; // er15\n  int v121; // er14\n  int v122; // ebp\n  int v123; // er11\n  int v124; // ebp\n  int v125; // ebx\n  int v126; // er13\n  int v127; // ebp\n  int v128; // er12\n  int v129; // er14\n  int v130; // ebp\n  int v131; // er11\n  int v132; // ebp\n  int v133; // er13\n  int v134; // ebp\n  int v135; // er15\n  int v136; // er12\n  int v137; // ebx\n  int v138; // er15\n  int v139; // er11\n  int v140; // ebp\n  int v141; // er11\n  int v142; // er14\n  int v143; // er10\n  int v144; // ebx\n  int v145; // er10\n  int v146; // er13\n  int v147; // er9\n  int v148; // er11\n  int v149; // er9\n  int v150; // er12\n  int v151; // er8\n  int v152; // er10\n  int v153; // er8\n  int v154; // edi\n  int v155; // ebp\n  int v156; // edi\n  int v157; // er9\n  int v158; // edi\n  int v159; // ebx\n  int v160; // esi\n  int v161; // er8\n  int v162; // edx\n  int v163; // esi\n  int v164; // ebp\n  int v165; // er10\n  int v166; // er11\n  int v167; // edx\n  int v168; // edi\n  int v169; // eax\n  int v170; // edx\n  int v171; // er9\n  int v172; // eax\n  int v173; // esi\n  int v174; // er10\n  int v175; // er9\n  int v176; // eax\n  int v177; // er11\n  int v178; // er8\n  int v179; // eax\n  int v180; // edx\n  int v181; // er8\n  int v182; // er10\n  int v183; // eax\n  int v184; // er9\n  int v185; // edi\n  int v186; // ebx\n  int v187; // er10\n  int v188; // esi\n  int v189; // ebx\n  int v190; // eax\n  int v191; // er8\n  int v192; // ebp\n  int v193; // eax\n  int v194; // edx\n  int v195; // esi\n  int v196; // ebp\n  int v197; // er10\n  int v198; // eax\n  int v199; // edi\n  int v200; // edx\n  int v201; // er9\n  int v202; // esi\n  int v203; // er10\n  int v204; // ebp\n  int v205; // edx\n  int v206; // er8\n  int v207; // ebp\n  int v208; // eax\n  int v209; // er10\n  int v210; // er9\n  int v211; // edi\n  int v212; // eax\n  int v213; // er8\n  int v214; // er15\n  int v215; // er10\n  int v216; // esi\n  int v217; // eax\n  int v218; // edi\n  int v219; // edx\n  int v220; // eax\n  int v221; // er10\n  int v222; // esi\n  int v223; // er14\n  int v224; // ebx\n  int v225; // er9\n  int v226; // er13\n  int v227; // er8\n  int v228; // eax\n  int v229; // er9\n  int v230; // edx\n  int v231; // er9\n  int v232; // eax\n  int v233; // er12\n  int v234; // er8\n  int v235; // ebx\n  int v236; // er10\n  int v237; // eax\n  int v238; // edi\n  int v239; // esi\n  int v240; // er10\n  int v241; // edi\n  int v242; // er8\n  int v243; // er9\n  int v244; // edi\n  int v245; // eax\n  int v246; // er8\n  int v247; // esi\n  int v248; // er10\n  int v249; // er8\n  int v250; // edx\n  int v251; // eax\n  int v252; // esi\n  int v253; // edi\n  int v254; // edx\n  int v255; // eax\n  int v256; // eax\n  int v257; // er8\n  int v258; // er9\n  int v259; // eax\n  int v260; // esi\n  int v261; // eax\n  int v262; // er10\n  int v263; // edx\n  int v264; // er10\n  int v265; // eax\n  int v266; // esi\n  int v267; // er9\n  int v268; // edi\n  int v269; // esi\n  int v270; // eax\n  int v271; // er8\n  int v272; // er10\n  int v273; // er8\n  int v274; // esi\n  int v275; // er11\n  int v276; // eax\n  int v277; // edi\n  int v278; // edx\n  int v279; // esi\n  int v280; // er9\n  int v281; // ebx\n  int v282; // eax\n  int v283; // er10\n  int v284; // er8\n  int v285; // ebp\n  int v286; // eax\n  int v287; // er9\n  int v288; // eax\n  int v289; // ebp\n  int v290; // edi\n  int v291; // er11\n  int v292; // eax\n  int v293; // er8\n  int v294; // esi\n  int v295; // eax\n  int v296; // edi\n  int v297; // edx\n  int v298; // er14\n  int v299; // eax\n  int v300; // esi\n  int v301; // eax\n  int v302; // er9\n  int v303; // er10\n  int v304; // edx\n  int v305; // eax\n  int v306; // er9\n  int v307; // er10\n  int v308; // er11\n  int v309; // eax\n  int v310; // edi\n  int v311; // esi\n  int v312; // er10\n  int v313; // er15\n  int v314; // esi\n  int v315; // er14\n  int v316; // er11\n  int v317; // er13\n  int v318; // edx\n  int v319; // er14\n  int v320; // er15\n  int v321; // er14\n  int v322; // edx\n  int v323; // er13\n  int v324; // eax\n  int v325; // er10\n  int v326; // er14\n  int v327; // er12\n  int v328; // er10\n  int v329; // er13\n  int v330; // ebp\n  int v331; // er10\n  int v332; // er11\n  int v333; // er12\n  int v334; // er10\n  int v335; // ebp\n  int v336; // er9\n  int v337; // er14\n  int v338; // er15\n  int v339; // er8\n  int v340; // ebp\n  int v341; // er8\n  int v342; // er10\n  int v343; // er14\n  int v344; // er10\n  int v345; // er9\n  int v346; // esi\n  unsigned int v347; // er8\n  int v348; // esi\n  int v349; // esi\n  int v350; // ebx\n  int v351; // edx\n  int v352; // er10\n  int v353; // edx\n  int v354; // eax\n  int v355; // [rsp+0h] [rbp-D0h]\n  int v356; // [rsp+0h] [rbp-D0h]\n  int v357; // [rsp+0h] [rbp-D0h]\n  int v358; // [rsp+4h] [rbp-CCh]\n  int v359; // [rsp+4h] [rbp-CCh]\n  int v360; // [rsp+4h] [rbp-CCh]\n  int v361; // [rsp+8h] [rbp-C8h]\n  int v362; // [rsp+8h] [rbp-C8h]\n  int v363; // [rsp+Ch] [rbp-C4h]\n  int v364; // [rsp+Ch] [rbp-C4h]\n  int v365; // [rsp+10h] [rbp-C0h]\n  int v366; // [rsp+10h] [rbp-C0h]\n  int v367; // [rsp+10h] [rbp-C0h]\n  int v368; // [rsp+14h] [rbp-BCh]\n  int v369; // [rsp+14h] [rbp-BCh]\n  int v370; // [rsp+14h] [rbp-BCh]\n  int v371; // [rsp+18h] [rbp-B8h]\n  int v372; // [rsp+18h] [rbp-B8h]\n  int v373; // [rsp+18h] [rbp-B8h]\n  int v374; // [rsp+1Ch] [rbp-B4h]\n  int v375; // [rsp+1Ch] [rbp-B4h]\n  int v376; // [rsp+1Ch] [rbp-B4h]\n  int v377; // [rsp+20h] [rbp-B0h]\n  int v378; // [rsp+20h] [rbp-B0h]\n  int v379; // [rsp+20h] [rbp-B0h]\n  int v380; // [rsp+24h] [rbp-ACh]\n  int v381; // [rsp+24h] [rbp-ACh]\n  int v382; // [rsp+28h] [rbp-A8h]\n  int v383; // [rsp+28h] [rbp-A8h]\n  int v384; // [rsp+2Ch] [rbp-A4h]\n  unsigned int v385; // [rsp+30h] [rbp-A0h]\n  unsigned int v386; // [rsp+34h] [rbp-9Ch]\n  unsigned int v387; // [rsp+38h] [rbp-98h]\n  int v388; // [rsp+3Ch] [rbp-94h]\n  int v389; // [rsp+40h] [rbp-90h]\n  int v390; // [rsp+44h] [rbp-8Ch]\n  unsigned __int64 v391; // [rsp+48h] [rbp-88h]\n  _DWORD *v392; // [rsp+50h] [rbp-80h]\n  int v393; // [rsp+58h] [rbp-78h]\n  int v394; // [rsp+5Ch] [rbp-74h]\n  int v395; // [rsp+60h] [rbp-70h]\n  int v396; // [rsp+64h] [rbp-6Ch]\n  int v397; // [rsp+68h] [rbp-68h]\n  int v398; // [rsp+6Ch] [rbp-64h]\n  int v399; // [rsp+70h] [rbp-60h]\n  int v400; // [rsp+74h] [rbp-5Ch]\n  int v401; // [rsp+78h] [rbp-58h]\n  int v402; // [rsp+7Ch] [rbp-54h]\n  int v403; // [rsp+80h] [rbp-50h]\n  int v404; // [rsp+84h] [rbp-4Ch]\n  int v405; // [rsp+88h] [rbp-48h]\n  int v406; // [rsp+8Ch] [rbp-44h]\n  int v407; // [rsp+90h] [rbp-40h]\n  int v408; // [rsp+94h] [rbp-3Ch]\n\n  v3 = a1;\n  v4 = a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL);\n  v5 = v4;\n  v6 = a3;\n  v7 = a3[5] + a2;\n  v8 = a3[2];\n  v392 = a3;\n  v9 = __CFADD__(a3[5], (_DWORD)a2);\n  v10 = a3[3];\n  v391 = v4;\n  result = *a3;\n  v12 = a3[1];\n  v13 = v6[4];\n  v6[5] = v7;\n  v6[6] += v9 + HIDWORD(a2);\n  if ( v3 < v5 )\n  {\n    v388 = v13;\n    v14 = v8;\n    v15 = v3;\n    v387 = v10;\n    v385 = v12;\n    v390 = result;\n    v386 = v8;\n    v16 = v10;\n    do\n    {\n      for ( i = 0LL; i != 64; i += 4LL )\n        *(int *)((char *)&v393 + i) = _byteswap_ulong(*(_DWORD *)(v15 + i));\n      v15 += 64LL;\n      v18 = v393 + v13 + 1518500249 + __ROL4__(result, 5);\n      v19 = v12 & (v16 ^ v14);\n      v20 = __ROR4__(v12, 2);\n      v21 = v18 + (v16 ^ v19);\n      v22 = result & (v14 ^ v20);\n      v23 = __ROR4__(result, 2);\n      v24 = v394 + v16 + 1518500249 + (v14 ^ v22) + __ROL4__(v21, 5);\n      v25 = v21 & (v23 ^ v20);\n      v26 = __ROR4__(v21, 2);\n      v27 = v395 + v14 + 1518500249 + (v20 ^ v25) + __ROL4__(v24, 5);\n      v28 = v24 & (v26 ^ v23);\n      v29 = __ROR4__(v24, 2);\n      v30 = __ROL4__(v27, 5) + v396 + v20 + 1518500249 + (v23 ^ v28);\n      v31 = v397 + v23 + 1518500249 + (v26 ^ v27 & (v29 ^ v26));\n      v32 = __ROR4__(v27, 2);\n      v33 = __ROL4__(v30, 5) + v31;\n      v34 = v30 & (v32 ^ v29);\n      v35 = __ROR4__(v30, 2);\n      v36 = __ROL4__(v33, 5) + v398 + v26 + 1518500249 + (v29 ^ v34);\n      v37 = v33 & (v35 ^ v32);\n      v38 = __ROR4__(v33, 2);\n      v39 = __ROL4__(v36, 5) + v399 + v29 + 1518500249 + (v32 ^ v37);\n      v40 = v36 & (v38 ^ v35);\n      v41 = __ROR4__(v36, 2);\n      v42 = __ROL4__(v39, 5) + v400 + v32 + 1518500249 + (v35 ^ v40);\n      v43 = v39 & (v41 ^ v38);\n      v44 = __ROR4__(v39, 2);\n      v45 = __ROL4__(v42, 5) + v401 + v35 + 1518500249 + (v38 ^ v43);\n      v46 = v42 & (v44 ^ v41);\n      v47 = __ROR4__(v42, 2);\n      v48 = __ROL4__(v45, 5) + v402 + v38 + 1518500249 + (v41 ^ v46);\n      v49 = v45 & (v47 ^ v44);\n      v50 = __ROR4__(v45, 2);\n      v51 = __ROL4__(v48, 5) + v403 + v41 + 1518500249 + (v44 ^ v49);\n      v52 = v48 & (v50 ^ v47);\n      v53 = __ROR4__(v48, 2);\n      v54 = __ROL4__(v51, 5) + v404 + v44 + 1518500249 + (v47 ^ v52);\n      v55 = v51 & (v53 ^ v50);\n      v56 = __ROR4__(v51, 2);\n      v57 = __ROL4__(v54, 5) + v405 + v47 + 1518500249 + (v50 ^ v55);\n      v58 = v406 + v50 + 1518500249 + (v53 ^ v54 & (v56 ^ v53));\n      v59 = __ROR4__(v54, 2);\n      v60 = __ROL4__(v57, 5) + v58;\n      v61 = __ROL4__(v406 ^ v401 ^ v395 ^ v393, 1);\n      v62 = v57 & (v59 ^ v56);\n      v63 = __ROR4__(v57, 2);\n      v64 = __ROL4__(v407 ^ v402 ^ v396 ^ v394, 1);\n      v65 = __ROL4__(v60, 5) + v407 + v53 + 1518500249 + (v56 ^ v62);\n      v66 = v60 & (v63 ^ v59);\n      v67 = __ROR4__(v60, 2);\n      v68 = __ROL4__(v65, 5) + v408 + v56 + 1518500249 + (v59 ^ v66);\n      v69 = v65 & (v67 ^ v63);\n      v70 = __ROR4__(v65, 2);\n      v71 = __ROL4__(v68, 5) + v61 + v59 + 1518500249 + (v63 ^ v69);\n      v72 = v68 & (v70 ^ v67);\n      v73 = __ROR4__(v68, 2);\n      v74 = v64 + v63 + 1518500249 + (v67 ^ v72);\n      v75 = v71;\n      v76 = v71 & (v73 ^ v70);\n      v77 = __ROR4__(v71, 2);\n      v78 = __ROL4__(v75, 5) + v74;\n      v79 = __ROL4__(v408 ^ v397 ^ v395 ^ v403, 1);\n      v80 = v73 ^ v78 & (v77 ^ v73);\n      v81 = v79 + v67 + 1518500249 + (v70 ^ v76);\n      v82 = v78;\n      v83 = __ROR4__(v78, 2);\n      v84 = __ROL4__(v82, 5) + v81;\n      v85 = __ROL4__(v61 ^ v404 ^ v398 ^ v396, 1);\n      v86 = __ROL4__(v84, 5) + v85 + v70 + 1518500249 + v80;\n      v87 = __ROL4__(v64 ^ v405 ^ v397 ^ v399, 1);\n      v88 = v84 ^ v83 ^ v77;\n      v89 = __ROR4__(v84, 2);\n      v90 = v88 + v87 + v73 + 1859775393;\n      v91 = __ROL4__(v86, 5);\n      v92 = v86 ^ v89 ^ v83;\n      v93 = __ROR4__(v86, 2);\n      v94 = v90 + v91;\n      v95 = __ROL4__(v79 ^ v406 ^ v398 ^ v400, 1);\n      v96 = v94 ^ v93 ^ v89;\n      v97 = v92 + v95 + v77 + 1859775393;\n      v98 = v94;\n      v99 = __ROR4__(v94, 2);\n      v100 = v97 + __ROL4__(v98, 5);\n      v101 = __ROL4__(v85 ^ v407 ^ v401 ^ v399, 1);\n      v102 = v96 + v101 + v83 + 1859775393 + __ROL4__(v100, 5);\n      v103 = __ROL4__(v87 ^ v408 ^ v402 ^ v400, 1);\n      v104 = v100 ^ v99 ^ v93;\n      v105 = __ROR4__(v100, 2);\n      v106 = v104 + v103 + v89 + 1859775393 + __ROL4__(v102, 5);\n      v365 = v61;\n      v371 = __ROL4__(v95 ^ v61 ^ v403 ^ v401, 1);\n      v107 = v102 ^ v105 ^ v99;\n      v108 = __ROR4__(v102, 2);\n      v109 = v107 + v371 + v93 + 1859775393 + __ROL4__(v106, 5);\n      v374 = __ROL4__(v101 ^ v64 ^ v404 ^ v402, 1);\n      v110 = v106 ^ v108 ^ v105;\n      v111 = __ROR4__(v106, 2);\n      v112 = v374 + v99 + 1859775393 + v110 + __ROL4__(v109, 5);\n      v113 = __ROL4__(v103 ^ v79 ^ v405 ^ v403, 1);\n      v377 = v113;\n      v114 = v113 + v105 + 1859775393 + (v109 ^ v111 ^ v108);\n      v115 = __ROR4__(v109, 2);\n      v116 = __ROL4__(v112, 5) + v114;\n      v117 = __ROL4__(v371 ^ v85 ^ v406 ^ v404, 1);\n      v118 = v117;\n      v355 = v117;\n      v119 = v112 ^ v115 ^ v111;\n      v120 = __ROR4__(v112, 2);\n      v121 = v118 + v108 + 1859775393 + v119 + __ROL4__(v116, 5);\n      v122 = __ROL4__(v374 ^ v87 ^ v407 ^ v405, 1);\n      v123 = v122;\n      v358 = v122;\n      v124 = v116 ^ v120 ^ v115;\n      v125 = __ROR4__(v116, 2);\n      v126 = v123 + v111 + 1859775393 + v124 + __ROL4__(v121, 5);\n      v127 = __ROL4__(v377 ^ v95 ^ v408 ^ v406, 1);\n      v380 = v127;\n      v128 = v127 + v115 + 1859775393 + (v121 ^ v125 ^ v120) + __ROL4__(v126, 5);\n      v129 = __ROR4__(v121, 2);\n      v130 = __ROL4__(v355 ^ v101 ^ v407 ^ v365, 1);\n      v131 = v130;\n      v361 = v130;\n      v132 = v126 ^ v129 ^ v125;\n      v133 = __ROR4__(v126, 2);\n      v134 = __ROL4__(v128, 5) + v131 + v120 + 1859775393 + v132;\n      v363 = __ROL4__(v358 ^ v103 ^ v64 ^ v408, 1);\n      v135 = v128 ^ v133 ^ v129;\n      v136 = __ROR4__(v128, 2);\n      v137 = __ROL4__(v134, 5) + v135 + v363 + v125 + 1859775393;\n      v138 = __ROL4__(v380 ^ v371 ^ v79 ^ v365, 1);\n      v139 = v134 ^ v136 ^ v133;\n      v140 = __ROR4__(v134, 2);\n      v141 = __ROL4__(v137, 5) + v138 + v129 + 1859775393 + v139;\n      v142 = __ROL4__(v361 ^ v374 ^ v85 ^ v64, 1);\n      v143 = v137 ^ v140 ^ v136;\n      v144 = __ROR4__(v137, 2);\n      v145 = __ROL4__(v141, 5) + v142 + v133 + 1859775393 + v143;\n      v146 = __ROL4__(v363 ^ v377 ^ v87 ^ v79, 1);\n      v147 = v141 ^ v144 ^ v140;\n      v148 = __ROR4__(v141, 2);\n      v149 = __ROL4__(v145, 5) + v146 + v136 + 1859775393 + v147;\n      v150 = __ROL4__(v138 ^ v355 ^ v95 ^ v85, 1);\n      v151 = v145 ^ v148 ^ v144;\n      v152 = __ROR4__(v145, 2);\n      v153 = __ROL4__(v149, 5) + v150 + v140 + 1859775393 + v151;\n      v154 = __ROL4__(v142 ^ v358 ^ v101 ^ v87, 1);\n      v155 = v154;\n      v366 = v154;\n      v156 = v149 ^ v152 ^ v148;\n      v157 = __ROR4__(v149, 2);\n      v158 = __ROL4__(v153, 5) + v155 + v144 + 1859775393 + v156;\n      v368 = __ROL4__(v146 ^ v380 ^ v103 ^ v95, 1);\n      v159 = v371;\n      v160 = v153 ^ v157 ^ v152;\n      v161 = __ROR4__(v153, 2);\n      v162 = __ROL4__(v150 ^ v361 ^ v371 ^ v101, 1);\n      v163 = __ROL4__(v158, 5) + v368 + v148 + 1859775393 + v160;\n      v164 = v377;\n      v372 = v162;\n      v165 = v162 + v152 + 1859775393;\n      v166 = v374;\n      v167 = v158 ^ v161 ^ v157;\n      v168 = __ROR4__(v158, 2);\n      v169 = __ROL4__(v366 ^ v363 ^ v374 ^ v103, 1);\n      v170 = __ROL4__(v163, 5) + v165 + v167;\n      v171 = v169 + v157 + 1859775393;\n      v375 = v169;\n      v172 = v163 ^ v168 ^ v161;\n      v173 = __ROR4__(v163, 2);\n      v174 = v173 & v170;\n      v175 = v171 + v172 + __ROL4__(v170, 5);\n      v176 = __ROL4__(v368 ^ v138 ^ v377 ^ v159, 1);\n      v378 = v176;\n      v177 = __ROL4__(v372 ^ v142 ^ v166 ^ v355, 1);\n      v178 = __ROL4__(v175, 5) + v176 + v161 - 1894007588;\n      v179 = v170;\n      v180 = __ROR4__(v170, 2);\n      v181 = (v174 | v168 & (v173 | v179)) + v178;\n      v182 = v180 | v175;\n      v183 = v175;\n      v184 = __ROR4__(v175, 2);\n      v185 = v177 + v168 - 1894007588 + (v173 & v182 | v180 & v183) + __ROL4__(v181, 5);\n      v186 = __ROL4__(v375 ^ v146 ^ v164 ^ v358, 1);\n      v187 = v184 & v181;\n      v188 = v186 + v173 - 1894007588;\n      v382 = v186;\n      v189 = v380;\n      v190 = v181;\n      v191 = __ROR4__(v181, 2);\n      v192 = __ROL4__(v378 ^ v150 ^ v380 ^ v355, 1);\n      v193 = v187 | v180 & (v184 | v190);\n      v194 = v192 + v180 - 1894007588;\n      v356 = v192;\n      v195 = v193 + __ROL4__(v185, 5) + v188;\n      v196 = __ROL4__(v177 ^ v366 ^ v361 ^ v358, 1);\n      v197 = v184 & (v191 | v185);\n      v198 = v191 & v185;\n      v199 = __ROR4__(v185, 2);\n      v381 = v196;\n      v200 = v194 + (v197 | v198) + __ROL4__(v195, 5);\n      v201 = (v199 & v195 | v191 & (v199 | v195)) + __ROL4__(v200, 5) + v196 + v184 - 1894007588;\n      v202 = __ROR4__(v195, 2);\n      v203 = v199 & (v202 | v200);\n      v204 = v200;\n      v205 = __ROR4__(v200, 2);\n      v389 = __ROL4__(v382 ^ v363 ^ v189 ^ v368, 1);\n      v206 = v389 + v191 - 1894007588 + (v203 | v202 & v204) + __ROL4__(v201, 5);\n      v207 = __ROL4__(v356 ^ v372 ^ v138 ^ v361, 1);\n      v208 = v205 | v201;\n      v209 = v201;\n      v210 = __ROR4__(v201, 2);\n      v211 = (v205 & v209 | v202 & v208) + __ROL4__(v206, 5) + v207 + v199 - 1894007588;\n      v359 = __ROL4__(v381 ^ v375 ^ v142 ^ v363, 1);\n      v212 = v205 & (v210 | v206) | v210 & v206;\n      v213 = __ROR4__(v206, 2);\n      v214 = __ROL4__(v389 ^ v378 ^ v146 ^ v138, 1);\n      v215 = v213 & v211;\n      v216 = v359 + v202 - 1894007588 + v212 + __ROL4__(v211, 5);\n      v217 = v211;\n      v218 = __ROR4__(v211, 2);\n      v219 = (v215 | v210 & (v213 | v217)) + __ROL4__(v216, 5) + v214 + v205 - 1894007588;\n      v220 = v218 & v216;\n      v221 = v216;\n      v222 = __ROR4__(v216, 2);\n      v223 = __ROL4__(v207 ^ v177 ^ v150 ^ v142, 1);\n      v224 = v223 + v210 - 1894007588 + (v213 & (v218 | v221) | v220) + __ROL4__(v219, 5);\n      v225 = __ROL4__(v359 ^ v382 ^ v146 ^ v366, 1);\n      v226 = v225;\n      v227 = __ROL4__(v224, 5) + v225 + v213 - 1894007588;\n      v228 = v222 | v219;\n      v229 = v219;\n      v230 = __ROR4__(v219, 2);\n      v231 = (v222 & v229 | v218 & v228) + v227;\n      v232 = v230 & v224;\n      v233 = __ROL4__(v214 ^ v368 ^ v150 ^ v356, 1);\n      v234 = v224;\n      v235 = __ROR4__(v224, 2);\n      v236 = v233 + v218 - 1894007588;\n      v237 = v222 & (v230 | v234) | v232;\n      v238 = __ROL4__(v223 ^ v381 ^ v372 ^ v366, 1);\n      v239 = v238 + v222 - 1894007588;\n      v384 = v238;\n      v240 = v236 + v237 + __ROL4__(v231, 5);\n      v241 = v235 & v231;\n      v242 = v231;\n      v243 = __ROR4__(v231, 2);\n      v244 = (v241 | v230 & (v235 | v242)) + __ROL4__(v240, 5) + v239;\n      v245 = v243 & v240;\n      v246 = __ROL4__(v226 ^ v389 ^ v375 ^ v368, 1);\n      v247 = v240;\n      v248 = __ROR4__(v240, 2);\n      v369 = v246;\n      v249 = v246 + v230 - 1894007588 + (v235 & (v243 | v247) | v245) + __ROL4__(v244, 5);\n      v250 = __ROL4__(v233 ^ v207 ^ v378 ^ v372, 1);\n      v373 = v250;\n      v251 = v248 | v244;\n      v252 = v244;\n      v253 = __ROR4__(v244, 2);\n      v254 = (v248 & v252 | v243 & v251) + __ROL4__(v249, 5) + v250 + v235 - 1894007588;\n      v255 = __ROL4__(v384 ^ v359 ^ v177 ^ v375, 1);\n      v376 = v255;\n      v256 = v255 + v243 - 1894007588 + (v248 & (v253 | v249) | v253 & v249);\n      v257 = __ROR4__(v249, 2);\n      v258 = v256 + __ROL4__(v254, 5);\n      v362 = __ROL4__(v373 ^ v223 ^ v356 ^ v177, 1);\n      v259 = __ROL4__(v369 ^ v214 ^ v382 ^ v378, 1);\n      v379 = v259;\n      v260 = __ROL4__(v258, 5) + v259 + v248 - 1894007588;\n      v261 = v257 | v254;\n      v262 = v254;\n      v263 = __ROR4__(v254, 2);\n      v264 = (v257 & v262 | v253 & v261) + v260;\n      v265 = v263 & v258;\n      v266 = v257 & (v263 | v258);\n      v267 = __ROR4__(v258, 2);\n      v364 = __ROL4__(v376 ^ v226 ^ v381 ^ v382, 1);\n      v268 = v362 + v253 - 1894007588 + (v266 | v265) + __ROL4__(v264, 5);\n      v269 = __ROL4__(v268, 5) + v364 + v257 - 1894007588;\n      v270 = v267 | v264;\n      v271 = v264;\n      v272 = __ROR4__(v264, 2);\n      v367 = __ROL4__(v362 ^ v384 ^ v207 ^ v381, 1);\n      v273 = (v267 & v271 | v263 & v270) + v269;\n      v274 = v267 & (v272 | v268);\n      v275 = v359;\n      v357 = __ROL4__(v379 ^ v233 ^ v389 ^ v356, 1);\n      v276 = v268;\n      v277 = __ROR4__(v268, 2);\n      v278 = v357 + v263 - 1894007588 + (v274 | v272 & v276) + __ROL4__(v273, 5);\n      v279 = __ROR4__(v273, 2);\n      v280 = v367 + v267 - 899497514 + (v273 ^ v277 ^ v272) + __ROL4__(v278, 5);\n      v281 = __ROL4__(v364 ^ v359 ^ v389 ^ v369, 1);\n      v282 = v281 + v272 - 899497514;\n      v283 = __ROR4__(v278, 2);\n      v284 = (v278 ^ v279 ^ v277) + v282 + __ROL4__(v280, 5);\n      v285 = __ROL4__(v357 ^ v373 ^ v214 ^ v207, 1);\n      v286 = v280 ^ v283 ^ v279;\n      v287 = __ROR4__(v280, 2);\n      v360 = v285;\n      v288 = v285 + v277 - 899497514 + v286;\n      v289 = __ROL4__(v281 ^ v379 ^ v226 ^ v214, 1);\n      v393 = v289;\n      v290 = v288 + __ROL4__(v284, 5);\n      v291 = __ROL4__(v367 ^ v376 ^ v223 ^ v275, 1);\n      v292 = v284 ^ v287 ^ v283;\n      v293 = __ROR4__(v284, 2);\n      v294 = v291 + v279 - 899497514 + v292 + __ROL4__(v290, 5);\n      v295 = (v290 ^ v293 ^ v287) + v289 + v283 - 899497514;\n      v296 = __ROR4__(v290, 2);\n      v297 = v295 + __ROL4__(v294, 5);\n      v394 = __ROL4__(v360 ^ v362 ^ v233 ^ v223, 1);\n      v298 = v369;\n      v383 = v291;\n      v370 = v289;\n      v299 = v294 ^ v296 ^ v293;\n      v300 = __ROR4__(v294, 2);\n      v301 = v394 + v287 - 899497514 + v299;\n      v302 = __ROL4__(v297, 5);\n      v303 = v297 ^ v300 ^ v296;\n      v304 = __ROR4__(v297, 2);\n      v305 = v302 + v301;\n      v306 = __ROL4__(v291 ^ v364 ^ v384 ^ v226, 1);\n      v395 = v306;\n      v307 = v303 + v306 + v293 - 899497514 + __ROL4__(v305, 5);\n      v396 = __ROL4__(v289 ^ v298 ^ v233 ^ v357, 1);\n      v308 = (v305 ^ v304 ^ v300) + v396 + v296 - 899497514 + __ROL4__(v307, 5);\n      v309 = __ROR4__(v305, 2);\n      v310 = __ROL4__(v394 ^ v373 ^ v384 ^ v367, 1);\n      v397 = v310;\n      v311 = (v307 ^ v309 ^ v304) + v310 + v300 - 899497514;\n      v312 = __ROR4__(v307, 2);\n      v313 = v311 + __ROL4__(v308, 5);\n      v314 = v306 ^ v281 ^ v376 ^ v298;\n      v315 = v308 ^ v312 ^ v309;\n      v316 = __ROR4__(v308, 2);\n      v317 = v313 ^ v316 ^ v312;\n      v398 = __ROL4__(v314, 1);\n      v318 = v315 + v398 + v304 - 899497514;\n      v319 = v313;\n      v320 = __ROR4__(v313, 2);\n      v321 = v318 + __ROL4__(v319, 5);\n      v322 = __ROL4__(v396 ^ v360 ^ v379 ^ v373, 1);\n      v399 = v322;\n      v323 = v317 + v322 + v309 - 899497514 + __ROL4__(v321, 5);\n      v324 = __ROL4__(v310 ^ v383 ^ v376 ^ v362, 1);\n      v400 = v324;\n      v325 = (v321 ^ v320 ^ v316) + v324 + v312 - 899497514;\n      v326 = __ROR4__(v321, 2);\n      v327 = v325 + __ROL4__(v323, 5);\n      v328 = v323 ^ v326 ^ v320;\n      v329 = __ROR4__(v323, 2);\n      v330 = v327 ^ v329 ^ v326;\n      v401 = __ROL4__(v398 ^ v370 ^ v379 ^ v364, 1);\n      v331 = v401 + v316 - 899497514 + v328;\n      v332 = v327;\n      v333 = __ROR4__(v327, 2);\n      v334 = __ROL4__(v332, 5) + v331;\n      v402 = __ROL4__(v322 ^ v394 ^ v357 ^ v362, 1);\n      v335 = __ROL4__(v334, 5) + v402 + v320 - 899497514 + v330;\n      v336 = __ROL4__(v324 ^ v367 ^ v364 ^ v306, 1);\n      v403 = v336;\n      v337 = __ROL4__(v335, 5) + (v334 ^ v333 ^ v329) + v336 + v326 - 899497514;\n      v338 = __ROR4__(v334, 2);\n      v339 = v335 ^ v338 ^ v333;\n      v340 = __ROR4__(v335, 2);\n      v404 = __ROL4__(v281 ^ v357 ^ v396 ^ v401, 1);\n      v341 = __ROL4__(v337, 5) + v404 + v329 - 899497514 + v339;\n      v342 = v337 ^ v340 ^ v338;\n      v343 = __ROR4__(v337, 2);\n      v405 = __ROL4__(v360 ^ v367 ^ v310 ^ v402, 1);\n      v344 = __ROL4__(v341, 5) + v405 + v333 - 899497514 + v342;\n      v345 = __ROL4__(v383 ^ v281 ^ v398 ^ v336, 1);\n      v346 = v341 ^ v343 ^ v340;\n      v347 = __ROR4__(v341, 2);\n      v406 = v345;\n      v348 = v345 + v338 - 899497514 + v346;\n      v388 += v347;\n      v13 = v388;\n      v349 = __ROL4__(v344, 5) + v348;\n      v350 = __ROL4__(v370 ^ v360 ^ v322 ^ v404, 1);\n      v351 = v344 ^ v347 ^ v343;\n      v352 = __ROR4__(v344, 2);\n      v387 += v352;\n      v407 = v350;\n      v353 = __ROL4__(v349, 5) + v350 + v340 - 899497514 + v351;\n      v385 += v353;\n      v408 = __ROL4__(v383 ^ v394 ^ v324 ^ v405, 1);\n      v386 += __ROR4__(v349, 2);\n      v354 = v353;\n      v14 = v386;\n      v12 = v385;\n      result = (v349 ^ v352 ^ v347) + v390 + v408 - 899497514 + v343 + __ROL4__(v354, 5);\n      v392[1] = v385;\n      *v392 = result;\n      v392[2] = v386;\n      v16 = v387;\n      v390 = result;\n      v392[3] = v387;\n      v392[4] = v388;\n    }\n    while ( v15 < v391 );\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x403180L", 
            "funcEndAddr": "0x40431dL", 
            "funcName": "sub_403180"
        }, 
        {
            "decompiledFuncCode": "_DWORD *__fastcall sub_404320(unsigned int *a1, _DWORD *a2)\n{\n  _DWORD *v2; // rbp\n  __int64 v3; // rax\n  unsigned int v4; // ecx\n  unsigned int v5; // esi\n  __int64 v6; // r8\n  bool v7; // cf\n  unsigned int v8; // esi\n  _QWORD *v9; // rdx\n  unsigned __int64 v10; // rcx\n\n  v2 = a2;\n  v3 = a1[7];\n  v4 = a1[6];\n  v5 = a1[7];\n  v6 = (-(__int64)((unsigned int)v3 < 0x38) & 0xFFFFFFFFFFFFFFC0LL) + 128;\n  v7 = __CFADD__(a1[5], v5);\n  v8 = a1[5] + v5;\n  a1[5] = v8;\n  if ( v7 )\n    a1[6] = ++v4;\n  a1[(-(__int64)((unsigned int)v3 < 0x38) & 0xFFFFFFFFFFFFFFF0LL) + 38] = _byteswap_ulong((v8 >> 29) | (8 * v4));\n  a1[(-(__int64)((unsigned int)v3 < 0x38) & 0xFFFFFFFFFFFFFFF0LL) + 39] = ((8 * v8) >> 8) & 0xFF00 | (v8 << 27) | ((8 * v8) >> 24) | (v8 << 11) & 0xFF0000;\n  v9 = (_QWORD *)((char *)a1 + v3 + 32);\n  v10 = v6 - v3 - 8;\n  if ( v10 >= 8 )\n  {\n    *v9 = 128LL;\n    *(_QWORD *)((char *)v9 + v10 - 8) = *(_QWORD *)((char *)&unk_409318 + v10);\n    qmemcpy(\n      (void *)((unsigned __int64)(v9 + 1) & 0xFFFFFFFFFFFFFFF8LL),\n      (const void *)((char *)&qword_409320 - ((char *)v9 - ((unsigned __int64)(v9 + 1) & 0xFFFFFFFFFFFFFFF8LL))),\n      8 * (((unsigned __int64)v9 + v10 - ((unsigned __int64)(v9 + 1) & 0xFFFFFFFFFFFFFFF8LL)) >> 3));\n  }\n  else if ( v10 & 4 )\n  {\n    *(_DWORD *)v9 = 128;\n    *(_DWORD *)((char *)v9 + v10 - 4) = *(_DWORD *)((char *)&unk_40931C + v10);\n  }\n  else if ( v6 - v3 != 8 )\n  {\n    *(_BYTE *)v9 = -128;\n    if ( v10 & 2 )\n      *(_WORD *)((char *)v9 + v10 - 2) = *(__int16 *)((char *)&word_40931E + v10);\n  }\n  sub_403180((unsigned __int64)(a1 + 8), v6, a1);\n  return sub_403150(a1, v2);\n}\n", 
            "funcStartAddr": "0x404320L", 
            "funcEndAddr": "0x40445cL", 
            "funcName": "sub_404320"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404460(void *src, size_t n, __m128i *a3)\n{\n  size_t v3; // r13\n  __m128i *v4; // r12\n  const __m128i *v5; // rbx\n  unsigned __int64 result; // rax\n  __m128i *v7; // rbp\n  const __m128i *v8; // r14\n  __m128i v9; // xmm0\n  __int64 v10; // rcx\n  _QWORD *v11; // rsi\n  size_t v12; // r13\n  size_t v13; // rbp\n  unsigned __int64 v14; // rdi\n  __int64 v15; // rbp\n  __int64 v16; // r15\n  unsigned __int64 v17; // rdx\n  unsigned __int64 v18; // r14\n  unsigned int v19; // esi\n  unsigned __int64 v20; // rdi\n  signed __int64 v21; // r14\n  unsigned int v22; // edx\n  __int64 v23; // rsi\n  __int32 v24; // ecx\n  __int64 v25; // rdx\n  unsigned __int64 v26; // rsi\n  unsigned __int64 v27; // r15\n  unsigned int v28; // er15\n  unsigned int v29; // er15\n  unsigned int v30; // edx\n  __int64 v31; // rcx\n\n  v3 = n;\n  v4 = a3;\n  v5 = (const __m128i *)src;\n  result = a3[1].m128i_u32[3];\n  if ( (_DWORD)result )\n  {\n    v15 = (unsigned int)result;\n    v16 = (__int64)a3[2].m128i_i64;\n    v17 = 128LL - (unsigned int)result;\n    if ( v17 > n )\n      v17 = n;\n    v18 = v17;\n    result = (unsigned __int64)memcpy(&v4[2].m128i_i8[(unsigned int)result], src, v17);\n    v19 = v18 + v4[1].m128i_i32[3];\n    v4[1].m128i_i32[3] = v19;\n    if ( v19 > 0x40 )\n    {\n      sub_403180((unsigned __int64)&v4[2], v19 & 0xFFFFFFC0, (unsigned int *)v4);\n      v24 = v4[1].m128i_i32[3];\n      result = v16 + ((v15 + v18) & 0xFFFFFFFFFFFFFFC0LL);\n      v25 = v4[1].m128i_i32[3] & 0x3F;\n      v4[1].m128i_i32[3] = v25;\n      if ( (unsigned int)v25 >= 8 )\n      {\n        v4[2].m128i_i64[0] = *(_QWORD *)result;\n        *(_QWORD *)(v16 + (unsigned int)v25 - 8) = *(_QWORD *)(result + (unsigned int)v25 - 8);\n        v26 = (unsigned __int64)&v4[2].m128i_u64[1] & 0xFFFFFFFFFFFFFFF8LL;\n        v27 = v16 - v26;\n        result -= v27;\n        v28 = (v25 + v27) & 0xFFFFFFF8;\n        if ( v28 >= 8 )\n        {\n          v29 = v28 & 0xFFFFFFF8;\n          v30 = 0;\n          do\n          {\n            v31 = v30;\n            v30 += 8;\n            *(_QWORD *)(v26 + v31) = *(_QWORD *)(result + v31);\n          }\n          while ( v30 < v29 );\n        }\n      }\n      else if ( v24 & 4 )\n      {\n        v4[2].m128i_i32[0] = *(_DWORD *)result;\n        result = *(unsigned int *)(result + v25 - 4);\n        *(_DWORD *)(v16 + v25 - 4) = result;\n      }\n      else if ( (_DWORD)v25 )\n      {\n        v4[2].m128i_i8[0] = *(_BYTE *)result;\n        if ( v24 & 2 )\n        {\n          result = *(unsigned __int16 *)(result + v25 - 2);\n          *(_WORD *)(v16 + v25 - 2) = result;\n        }\n      }\n    }\n    v5 = (const __m128i *)((char *)src + v18);\n    v3 -= v18;\n  }\n  if ( v3 > 0x3F )\n  {\n    if ( (unsigned __int8)v5 & 3 )\n    {\n      v7 = v4 + 2;\n      if ( v3 == 64 )\n      {\n        v8 = v5;\n      }\n      else\n      {\n        v8 = &v5[4 * ((v3 - 65) >> 6) + 4];\n        do\n        {\n          v9 = _mm_loadu_si128(v5);\n          v5 += 4;\n          *v7 = v9;\n          v4[3] = _mm_loadu_si128(v5 - 3);\n          v4[4] = _mm_loadu_si128(v5 - 2);\n          v4[5] = _mm_loadu_si128(v5 - 1);\n          sub_403180((unsigned __int64)&v4[2], 64LL, (unsigned int *)v4);\n        }\n        while ( v5 != v8 );\n        v3 = v3 - ((v3 - 65) >> 6 << 6) - 64;\n      }\n      goto LABEL_8;\n    }\n    v13 = v3;\n    v14 = (unsigned __int64)v5;\n    v3 &= 0x3Fu;\n    v5 = (const __m128i *)((char *)v5 + (v13 & 0xFFFFFFFFFFFFFFC0LL));\n    result = sub_403180(v14, v13 & 0xFFFFFFFFFFFFFFC0LL, (unsigned int *)v4);\n  }\n  if ( !v3 )\n    return result;\n  v7 = v4 + 2;\n  v8 = v5;\nLABEL_8:\n  v10 = v4[1].m128i_u32[3];\n  result = (unsigned int)v3;\n  v11 = (__int64 *)((char *)v7->m128i_i64 + v10);\n  if ( (unsigned int)v3 >= 8 )\n  {\n    v20 = (unsigned __int64)(v11 + 1) & 0xFFFFFFFFFFFFFFF8LL;\n    *v11 = v8->m128i_i64[0];\n    *(_QWORD *)((char *)v11 + (unsigned int)v3 - 8) = *(__int64 *)((char *)&v8->m128i_i64[-1] + (unsigned int)v3);\n    v21 = (char *)v8 - ((char *)v11 - v20);\n    result = ((_DWORD)v3 + (_DWORD)v11 - (_DWORD)v20) & 0xFFFFFFF8;\n    if ( (unsigned int)result >= 8 )\n    {\n      result = ((_DWORD)v3 + (_DWORD)v11 - (_DWORD)v20) & 0xFFFFFFF8;\n      v22 = 0;\n      do\n      {\n        v23 = v22;\n        v22 += 8;\n        *(_QWORD *)(v20 + v23) = *(_QWORD *)(v21 + v23);\n      }\n      while ( v22 < (unsigned int)result );\n    }\n  }\n  else if ( v3 & 4 )\n  {\n    *(_DWORD *)v11 = v8->m128i_i64[0];\n    result = *(unsigned int *)((char *)v8->m128i_i64 + (unsigned int)v3 - 4);\n    *(_DWORD *)((char *)v11 + (unsigned int)v3 - 4) = result;\n  }\n  else if ( (_DWORD)v3 )\n  {\n    *(_BYTE *)v11 = v8->m128i_i64[0];\n    if ( v3 & 2 )\n    {\n      result = *(unsigned __int16 *)((char *)v8->m128i_i64 + (unsigned int)v3 - 2);\n      *(_WORD *)((char *)v11 + (unsigned int)v3 - 2) = result;\n    }\n  }\n  v12 = v10 + v3;\n  if ( v12 > 0x3F )\n  {\n    v12 -= 64LL;\n    sub_403180((unsigned __int64)v7, 64LL, (unsigned int *)v4);\n    result = (unsigned __int64)memcpy(v7, &v4[6], v12);\n  }\n  v4[1].m128i_i32[3] = v12;\n  return result;\n}\n", 
            "funcStartAddr": "0x404460L", 
            "funcEndAddr": "0x40475eL", 
            "funcName": "sub_404460"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4047C0(FILE *stream, _DWORD *a2)\n{\n  char *v2; // rax\n  char *v3; // r12\n  size_t v4; // rbx\n  int v5; // edx\n  size_t v6; // rax\n  __int64 v8; // [rsp+0h] [rbp-C8h]\n  __int64 v9; // [rsp+8h] [rbp-C0h]\n  __int64 v10; // [rsp+10h] [rbp-B8h]\n  __int64 v11; // [rsp+18h] [rbp-B0h]\n\n  v2 = (char *)malloc(0x8048uLL);\n  if ( !v2 )\n    return 1LL;\n  v11 = 0LL;\n  v3 = v2;\n  v8 = -1167088121787636991LL;\n  v9 = 1167088121787636990LL;\n  v10 = 3285377520LL;\nLABEL_3:\n  v4 = 0LL;\n  while ( 1 )\n  {\n    v6 = fread_unlocked(&v3[v4], 1uLL, 0x8000 - v4, stream);\n    v4 += v6;\n    if ( v4 == 0x8000 )\n    {\n      sub_403180((unsigned __int64)v3, 0x8000LL, (unsigned int *)&v8);\n      goto LABEL_3;\n    }\n    v5 = stream->_flags;\n    if ( !v6 )\n      break;\n    if ( v5 & 0x10 )\n      goto LABEL_9;\n  }\n  if ( v5 & 0x20 )\n  {\n    free(v3);\n    return 1LL;\n  }\nLABEL_9:\n  if ( v4 )\n    sub_404460(v3, v4, (__m128i *)&v8);\n  sub_404320((unsigned int *)&v8, a2);\n  free(v3);\n  return 0LL;\n}\n", 
            "funcStartAddr": "0x4047c0L", 
            "funcEndAddr": "0x4048e5L", 
            "funcName": "sub_4047C0"
        }, 
        {
            "decompiledFuncCode": "void __fastcall sub_404900(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n", 
            "funcStartAddr": "0x404900L", 
            "funcEndAddr": "0x404921L", 
            "funcName": "sub_404900"
        }, 
        {
            "decompiledFuncCode": "FILE *__fastcall sub_404930(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // er12\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // er12\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_406610(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_406E50(v11);\n        *v13 = v12;\n      }\n      else if ( (unsigned int)sub_406E50(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        v3 = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x404930L", 
            "funcEndAddr": "0x4049c3L", 
            "funcName": "sub_404930"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_4049D0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60C308 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n", 
            "funcStartAddr": "0x4049d0L", 
            "funcEndAddr": "0x404a69L", 
            "funcName": "sub_4049D0"
        }, 
        {
            "decompiledFuncCode": "char *__fastcall sub_404A70(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_407FC0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_4093B1;\n      if ( !v5 )\n        v2 = (char *)&unk_4093A6;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_4093AD;\n    if ( !v5 )\n      v2 = (char *)&unk_4093AA;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    v6 = \"'\";\n  return v6;\n}\n", 
            "funcStartAddr": "0x404a70L", 
            "funcEndAddr": "0x404b62L", 
            "funcName": "sub_404A70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404B70(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_404B70((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_404B70((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_404B70((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_404B70((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_404B70((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_404B70((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404A70(\"`\", v11);\n        v47 = sub_404A70(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_404B70(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_404B70((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_404B70((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_404B70((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_404B70((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_404B70((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_404B70((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404A70(\"`\", v11);\n        v47 = sub_404A70(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401920L", 
            "funcEndAddr": "0x401925L", 
            "funcName": "sub_404B70"
        }, 
        {
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404B70(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_404B70((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_404B70((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_404B70((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_404B70((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_404B70((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_404B70((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404A70(\"`\", v11);\n        v47 = sub_404A70(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n\nunsigned __int64 __fastcall sub_404B70(_BYTE *a1, unsigned __int64 a2, char *a3, unsigned __int64 a4, int a5, char a6, __int64 a7, char *a8, char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v11; // er13\n  int v12; // ebp\n  unsigned __int64 v13; // rdx\n  unsigned __int64 v14; // r11\n  int v15; // er10\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r9\n  unsigned __int64 v18; // r12\n  int v19; // er11\n  char *v20; // r8\n  size_t v21; // rax\n  int v22; // eax\n  unsigned __int64 v23; // rbp\n  bool v24; // al\n  int v25; // eax\n  int v26; // eax\n  char v27; // di\n  const unsigned __int16 **v28; // rax\n  char v29; // cl\n  unsigned __int64 result; // rax\n  __int64 v31; // rcx\n  unsigned __int64 v32; // rdi\n  unsigned __int8 v33; // al\n  unsigned __int8 v34; // al\n  int v35; // er13\n  bool v36; // dl\n  bool v37; // dl\n  bool v38; // al\n  size_t v39; // rax\n  unsigned __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  const unsigned __int16 **v42; // r14\n  char *v43; // rax\n  int v44; // esi\n  unsigned __int64 v45; // rcx\n  unsigned __int8 v46; // di\n  char *v47; // rax\n  size_t v48; // rax\n  __int64 v49; // rsi\n  unsigned __int64 v50; // rsi\n  char *v51; // rcx\n  char i; // al\n  char v53; // dl\n  char *v54; // rax\n  unsigned __int64 v55; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v56; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v57; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v58; // [rsp+10h] [rbp-B8h]\n  char v59; // [rsp+1Fh] [rbp-A9h]\n  char *s; // [rsp+20h] [rbp-A8h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  char *v62; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v63; // [rsp+30h] [rbp-98h]\n  char *v64; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v65; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v66; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v67; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v68; // [rsp+38h] [rbp-90h]\n  char v69; // [rsp+38h] [rbp-90h]\n  int v70; // [rsp+38h] [rbp-90h]\n  int v71; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v72; // [rsp+40h] [rbp-88h]\n  int v73; // [rsp+40h] [rbp-88h]\n  int v74; // [rsp+40h] [rbp-88h]\n  _BYTE *v75; // [rsp+40h] [rbp-88h]\n  int v76; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v77; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  __int64 v79; // [rsp+58h] [rbp-70h]\n  size_t v80; // [rsp+60h] [rbp-68h]\n  char v81; // [rsp+68h] [rbp-60h]\n  bool v82; // [rsp+6Ch] [rbp-5Ch]\n  char v83; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v84; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v85; // [rsp+70h] [rbp-58h]\n  char *v86; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h]\n  mbstate_t ps; // [rsp+88h] [rbp-40h]\n\n  v9 = a1;\n  v10 = a2;\n  v11 = a5;\n  s = a3;\n  v55 = a4;\n  v81 = a6;\n  v12 = a6 & 2;\n  v80 = __ctype_get_mb_cur_max();\n  v82 = v12 != 0;\n  v14 = v55;\n  switch ( v11 )\n  {\n    case 0:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v56 = 0;\n        goto LABEL_212;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 2;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v11 = 2;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v56 = 1;\nLABEL_212:\n      if ( a2 )\n      {\n        v15 = 0;\n        v38 = 0;\n        v59 = 1;\n        v79 = 0LL;\n        goto LABEL_138;\n      }\n      v59 = 1;\n      v15 = 0;\n      v16 = 1LL;\n      v11 = 2;\n      v79 = 0LL;\n      v83 = 0;\n      v82 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v17 = v14;\n      v18 = 0LL;\n      v19 = v11;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(v11) = v17 != v18;\n        if ( v17 == -1LL )\n          LOBYTE(v11) = s[v18] != 0;\n        if ( !(_BYTE)v11 )\n        {\n          v35 = v19;\n          v14 = v17;\n          v36 = v35 == 2;\n          if ( !v16 && v36 && v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v37 = !v82 && v36;\n          if ( v37 )\n          {\n            if ( v83 )\n            {\n              if ( v59 )\n                return sub_404B70((__int64)v9, v79, s);\n              v38 = v79 != 0 && v10 == 0;\n              if ( v38 )\n              {\n                v10 = v79;\nLABEL_138:\n                *v9 = 39;\n                v11 = 2;\n                v16 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v82 = 0;\n                v83 = v38;\n                goto LABEL_3;\n              }\n              v37 = v83;\n            }\n          }\n          else\n          {\n            v37 = !v82;\n          }\n          if ( s2 )\n          {\n            if ( v37 )\n            {\n              v53 = *s2;\n              if ( *s2 )\n              {\n                v54 = &s2[-v16];\n                do\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = v53;\n                  v53 = v54[++v16];\n                }\n                while ( v53 );\n              }\n            }\n          }\n          if ( v10 > v16 )\n            v9[v16] = 0;\n          return v16;\n        }\n        v20 = &s[v18];\n        v57 = v56 & (v19 != 2);\n        if ( !(v56 & (v19 != 2)) )\n          break;\n        if ( n )\n        {\n          if ( v17 == -1LL && n > 1 )\n          {\n            v71 = v19;\n            v66 = v15;\n            v21 = strlen(s);\n            v19 = v71;\n            v15 = v66;\n            v20 = &s[v18];\n            v17 = v21;\n          }\n          if ( v18 + n <= v17 )\n          {\n            v76 = v19;\n            v72 = v17;\n            v67 = v15;\n            v62 = v20;\n            v22 = memcmp(v20, s2, n);\n            v20 = v62;\n            v15 = v67;\n            v17 = v72;\n            v19 = v76;\n            if ( !v22 )\n            {\n              if ( !v82 )\n              {\n                LOBYTE(v23) = *v62;\n                switch ( *v62 )\n                {\n                  case 0:\n                    goto LABEL_83;\n                  case 7:\n                    LOBYTE(v23) = 97;\n                    goto LABEL_79;\n                  case 8:\n                    LODWORD(v13) = 0;\n                    v11 = 0;\n                    LOBYTE(v23) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_72;\n                  case 10:\n                    goto LABEL_68;\n                  case 11:\n                    goto LABEL_80;\n                  case 12:\n                    goto LABEL_77;\n                  case 13:\n                    goto LABEL_76;\n                  case 32:\n                    v33 = v57;\n                    goto LABEL_128;\n                  case 33:\n                  case 34:\n                  case 36:\n                  case 38:\n                  case 40:\n                  case 41:\n                  case 42:\n                  case 59:\n                  case 60:\n                  case 61:\n                  case 62:\n                  case 91:\n                  case 94:\n                  case 96:\n                  case 124:\n                    goto LABEL_74;\n                  case 35:\n                  case 126:\n                    v34 = v57;\n                    goto LABEL_125;\n                  case 37:\n                  case 43:\n                  case 44:\n                  case 45:\n                  case 46:\n                  case 47:\n                  case 48:\n                  case 49:\n                  case 50:\n                  case 51:\n                  case 52:\n                  case 53:\n                  case 54:\n                  case 55:\n                  case 56:\n                  case 57:\n                  case 58:\n                  case 65:\n                  case 66:\n                  case 67:\n                  case 68:\n                  case 69:\n                  case 70:\n                  case 71:\n                  case 72:\n                  case 73:\n                  case 74:\n                  case 75:\n                  case 76:\n                  case 77:\n                  case 78:\n                  case 79:\n                  case 80:\n                  case 81:\n                  case 82:\n                  case 83:\n                  case 84:\n                  case 85:\n                  case 86:\n                  case 87:\n                  case 88:\n                  case 89:\n                  case 90:\n                  case 93:\n                  case 95:\n                  case 97:\n                  case 98:\n                  case 99:\n                  case 100:\n                  case 101:\n                  case 102:\n                  case 103:\n                  case 104:\n                  case 105:\n                  case 106:\n                  case 107:\n                  case 108:\n                  case 109:\n                  case 110:\n                  case 111:\n                  case 112:\n                  case 113:\n                  case 114:\n                  case 115:\n                  case 116:\n                  case 117:\n                  case 118:\n                  case 119:\n                  case 120:\n                  case 121:\n                  case 122:\n                    v33 = v57;\n                    goto LABEL_123;\n                  case 39:\n                    goto LABEL_62;\n                  case 63:\n                    goto LABEL_58;\n                  case 92:\n                    goto LABEL_65;\n                  case 123:\n                  case 125:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_98;\n                }\n              }\n              return sub_404B70((__int64)v9, v10, s);\n            }\n          }\n        }\n        LOBYTE(v23) = *v20;\n        switch ( *v20 )\n        {\n          case 0:\n            goto LABEL_81;\n          case 7:\n            LOBYTE(v23) = 97;\n            goto LABEL_78;\n          case 8:\n            LOBYTE(v23) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_72:\n            LOBYTE(v23) = 116;\n            goto LABEL_69;\n          case 10:\nLABEL_68:\n            LOBYTE(v23) = 110;\nLABEL_69:\n            LODWORD(v13) = 0;\n            v11 = 0;\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            goto LABEL_29;\n          case 11:\nLABEL_80:\n            LOBYTE(v23) = 118;\n            goto LABEL_78;\n          case 12:\nLABEL_77:\n            LOBYTE(v23) = 102;\nLABEL_78:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_79:\n            v11 = 0;\n            goto LABEL_37;\n          case 13:\n            v57 = 0;\nLABEL_76:\n            LOBYTE(v23) = 13;\n            v29 = 114;\n            LOBYTE(v13) = v19 == 2;\n            goto LABEL_66;\n          case 32:\n            v33 = 0;\nLABEL_128:\n            LOBYTE(v23) = 32;\n            goto LABEL_123;\n          case 33:\n          case 34:\n          case 36:\n          case 38:\n          case 40:\n          case 41:\n          case 42:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 91:\n          case 94:\n          case 96:\n          case 124:\n            v57 = 0;\nLABEL_74:\n            LODWORD(v13) = 0;\n            goto LABEL_67;\n          case 35:\n          case 126:\n            v34 = 0;\nLABEL_125:\n            if ( !v18 )\n            {\n              v11 = v57;\n              LODWORD(v13) = 0;\n              v57 = v34;\n              goto LABEL_23;\n            }\n            v57 = v34;\n            v11 = 0;\n            break;\n          case 37:\n          case 43:\n          case 44:\n          case 45:\n          case 46:\n          case 47:\n          case 48:\n          case 49:\n          case 50:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 56:\n          case 57:\n          case 58:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 93:\n          case 95:\n          case 97:\n          case 98:\n          case 99:\n          case 100:\n          case 101:\n          case 102:\n          case 103:\n          case 104:\n          case 105:\n          case 106:\n          case 107:\n          case 108:\n          case 109:\n          case 110:\n          case 111:\n          case 112:\n          case 113:\n          case 114:\n          case 115:\n          case 116:\n          case 117:\n          case 118:\n          case 119:\n          case 120:\n          case 121:\n          case 122:\n            v33 = 0;\nLABEL_123:\n            v11 = v57;\n            v57 = v33;\n            v25 = 0;\n            goto LABEL_25;\n          case 39:\n            v57 = 0;\n            goto LABEL_62;\n          case 63:\n            v57 = 0;\n            goto LABEL_58;\n          case 92:\n            v57 = 0;\n            goto LABEL_65;\n          case 123:\n          case 125:\n            v57 = 0;\n            goto LABEL_17;\n          default:\n            v57 = 0;\n            goto LABEL_98;\n        }\nLABEL_24:\n        v25 = 0;\nLABEL_25:\n        if ( a7 )\n        {\n          LODWORD(v13) = (*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v23 >> 5)) >> v23) & 1;\n          if ( (_DWORD)v13 )\n          {\n            LOBYTE(v13) = v19 == 2;\nLABEL_28:\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\nLABEL_29:\n            v26 = v15 ^ 1;\n            LOBYTE(v26) = v13 & (v15 ^ 1);\n            if ( (unsigned __int8)v13 & ((unsigned __int8)v15 ^ 1) )\n            {\n              if ( v10 > v16 )\n                v9[v16] = 39;\n              if ( v16 + 1 < v10 )\n                v9[v16 + 1] = 36;\n              LODWORD(v13) = v16 + 2;\n              if ( v16 + 2 < v10 )\n                v9[v16 + 2] = 39;\n              v16 += 3LL;\n              v15 = v26;\n            }\nLABEL_37:\n            if ( v10 > v16 )\n              v9[v16] = 92;\n            ++v16;\n            ++v18;\n            goto LABEL_40;\n          }\n        }\nLABEL_49:\n        LOBYTE(v13) = v19 == 2;\n        if ( v57 )\n          goto LABEL_28;\n        ++v18;\n        LODWORD(v28) = v15 & (v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v28 )\n        {\n          if ( v10 > v16 )\n            v9[v16] = 39;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 39;\n          v16 += 2LL;\n          v15 = 0;\n        }\nLABEL_40:\n        if ( v16 < v10 )\n          v9[v16] = v23;\n        v27 = v59;\n        ++v16;\n        if ( !(_BYTE)v11 )\n          v27 = 0;\n        v59 = v27;\n      }\n      LOBYTE(v23) = *v20;\n      switch ( *v20 )\n      {\n        case 0:\n          if ( !v56 )\n          {\n            if ( !(v81 & 1) )\n            {\n              v57 = 0;\n              LOBYTE(v13) = v19 == 2;\n              v11 = 0;\n              LOBYTE(v23) = 0;\n              goto LABEL_23;\n            }\n            ++v18;\n            goto LABEL_4;\n          }\nLABEL_81:\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          v57 = 0;\nLABEL_83:\n          LOBYTE(v13) = v19 == 2;\n          v25 = v15 ^ 1;\n          LOBYTE(v25) = (v19 == 2) & (v15 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 36;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v31 = v16 + 3;\n            if ( v10 <= v16 + 3 )\n            {\n              v16 += 4LL;\n              v15 = v25;\n              v11 = 0;\n              LOBYTE(v23) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_91;\n          }\n          v31 = v16;\n          if ( v10 > v16 )\n          {\n            v25 = v15;\nLABEL_91:\n            v9[v31] = 92;\n            v15 = v25;\n          }\n          v16 = v31 + 1;\n          if ( v19 == 2 )\n          {\n            v25 = v11;\n            LOBYTE(v23) = 48;\n            v11 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v23) = 48;\n          if ( v18 + 1 < v17 && (unsigned __int8)(s[v18 + 1] - 48) <= 9u )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 48;\n            if ( v10 > v31 + 2 )\n              v9[v31 + 2] = 48;\n            v16 = v31 + 3;\n            LOBYTE(v23) = 48;\n          }\nLABEL_95:\n          v25 = v11;\n          v11 = 0;\n          if ( (unsigned __int8)v13 | v56 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v23) = 7;\n          v29 = 97;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v23) = 8;\n          v29 = 98;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v23) = 9;\n          v29 = 116;\n          goto LABEL_104;\n        case 10:\n          LOBYTE(v23) = 10;\n          v29 = 110;\n          goto LABEL_104;\n        case 11:\n          LOBYTE(v23) = 11;\n          v29 = 118;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 12:\n          LOBYTE(v23) = 12;\n          v29 = 102;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_66;\n        case 13:\n          LOBYTE(v23) = 13;\n          v29 = 114;\nLABEL_104:\n          LOBYTE(v13) = v19 == 2;\n          v57 = v19 == 2 && v82;\n          if ( v57 )\n            return sub_404B70((__int64)v9, v10, s);\n          goto LABEL_66;\n        case 32:\n          LOBYTE(v23) = 32;\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_21;\n        case 33:\n        case 34:\n        case 36:\n        case 38:\n        case 40:\n        case 41:\n        case 42:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 91:\n        case 94:\n        case 96:\n        case 124:\n          LOBYTE(v13) = v19 == 2;\n          v11 = 0;\n          goto LABEL_21;\n        case 35:\n        case 126:\n          LOBYTE(v13) = v19 == 2;\n          goto LABEL_20;\n        case 37:\n        case 43:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n        case 58:\n        case 65:\n        case 66:\n        case 67:\n        case 68:\n        case 69:\n        case 70:\n        case 71:\n        case 72:\n        case 73:\n        case 74:\n        case 75:\n        case 76:\n        case 77:\n        case 78:\n        case 79:\n        case 80:\n        case 81:\n        case 82:\n        case 83:\n        case 84:\n        case 85:\n        case 86:\n        case 87:\n        case 88:\n        case 89:\n        case 90:\n        case 93:\n        case 95:\n        case 97:\n        case 98:\n        case 99:\n        case 100:\n        case 101:\n        case 102:\n        case 103:\n        case 104:\n        case 105:\n        case 106:\n        case 107:\n        case 108:\n        case 109:\n        case 110:\n        case 111:\n        case 112:\n        case 113:\n        case 114:\n        case 115:\n        case 116:\n        case 117:\n        case 118:\n        case 119:\n        case 120:\n        case 121:\n        case 122:\n          goto LABEL_101;\n        case 39:\nLABEL_62:\n          if ( v19 != 2 )\n          {\n            v83 = v11;\n            LODWORD(v13) = 0;\n            LOBYTE(v23) = 39;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( !v10 || (v13 = 0LL, v79) )\n          {\n            if ( v10 > v16 )\n              v9[v16] = 39;\n            if ( v10 > v16 + 1 )\n              v9[v16 + 1] = 92;\n            v13 = v10;\n            if ( v10 > v16 + 2 )\n              v9[v16 + 2] = 39;\n            v10 = v79;\n          }\n          v83 = v11;\n          v16 += 3LL;\n          v25 = 0;\n          v15 = 0;\n          v79 = v10;\n          LOBYTE(v23) = 39;\n          v10 = v13;\n          goto LABEL_49;\n        case 63:\nLABEL_58:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            v11 = 0;\n            v25 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_49;\n          }\n          if ( v19 != 5 )\n          {\n            LOBYTE(v23) = 63;\n            LOBYTE(v13) = v19 == 2;\n            v11 = 0;\n            goto LABEL_23;\n          }\n          if ( !(v81 & 4)\n            || v18 + 2 >= v17\n            || s[v18 + 1] != 63\n            || (v23 = (unsigned __int8)s[v18 + 2], (unsigned __int8)v23 > 0x3Eu)\n            || (v49 = 8070630310989004800LL, !_bittest64(&v49, v23)) )\n          {\n            LODWORD(v13) = 0;\n            v11 = 0;\n            LOBYTE(v23) = 63;\n            goto LABEL_23;\n          }\n          if ( v82 )\n            return sub_404B70((__int64)v9, v10, s);\n          if ( v10 > v16 )\n            v9[v16] = 63;\n          if ( v10 > v16 + 1 )\n            v9[v16 + 1] = 34;\n          if ( v10 > v16 + 2 )\n            v9[v16 + 2] = 34;\n          if ( v10 > v16 + 3 )\n            v9[v16 + 3] = 63;\n          v16 += 4LL;\n          LODWORD(v13) = 0;\n          v11 = 0;\n          v18 += 2LL;\n          goto LABEL_95;\n        case 92:\n          if ( v19 == 2 )\n          {\n            if ( v82 )\n              return sub_404B70((__int64)v9, v10, s);\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            LOBYTE(v23) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LODWORD(v13) = v56;\n          LOBYTE(v23) = 92;\n          v29 = 92;\n          LOBYTE(v13) = (n != 0) & v82 & v56;\n          if ( (_BYTE)v13 )\n          {\n            ++v18;\n            LOBYTE(v28) = v15;\n            v11 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v56 )\n          {\nLABEL_67:\n            v11 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v23) = v29;\n          v11 = 0;\n          goto LABEL_28;\n        case 123:\n        case 125:\nLABEL_17:\n          v24 = v17 != 1;\n          if ( v17 == -1LL )\n            v24 = s[1] != 0;\n          LOBYTE(v13) = v19 == 2;\n          if ( v24 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v18 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v82 || !(_BYTE)v13 )\n            goto LABEL_23;\n          return sub_404B70((__int64)v9, v10, s);\n        default:\nLABEL_98:\n          if ( v80 == 1 )\n          {\n            v73 = v19;\n            v68 = v17;\n            v63 = v15;\n            v28 = __ctype_b_loc();\n            LODWORD(v13) = (unsigned __int8)v23;\n            v15 = v63;\n            v17 = v68;\n            v19 = v73;\n            v32 = 1LL;\n            LODWORD(v28) = (*v28)[(unsigned __int8)v23];\n            LOWORD(v28) = (unsigned __int16)v28 & 0x4000;\n            LOBYTE(v11) = (_WORD)v28 != 0;\n            LOBYTE(v13) = v56 & ((_WORD)v28 == 0);\n            goto LABEL_100;\n          }\n          ps = 0LL;\n          if ( v17 == -1LL )\n          {\n            v74 = v19;\n            v69 = v15;\n            v64 = v20;\n            v39 = strlen(s);\n            v19 = v74;\n            LOBYTE(v15) = v69;\n            v20 = v64;\n            v17 = v39;\n          }\n          v85 = v16;\n          v86 = v20;\n          v40 = 0LL;\n          v84 = v15;\n          v75 = v9;\n          v77 = v10;\n          v65 = v17;\n          v70 = v19;\n          break;\n      }\n      while ( 2 )\n      {\n        v41 = v18 + v40;\n        v28 = (const unsigned __int16 **)sub_407E80((wchar_t *)&wc, &s[v18 + v40]);\n        v42 = v28;\n        if ( !v28 )\n        {\nLABEL_241:\n          v32 = v40;\n          v16 = v85;\n          v15 = v84;\n          v9 = v75;\n          LODWORD(v13) = v11 ^ 1;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LOBYTE(v13) = v56 & (v11 ^ 1);\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-1LL )\n        {\n          v32 = v40;\n          v16 = v85;\n          v11 = 0;\n          v15 = v84;\n          v9 = v75;\n          v10 = v77;\n          v17 = v65;\n          v19 = v70;\n          LODWORD(v13) = v56;\n          goto LABEL_242;\n        }\n        if ( v28 == (const unsigned __int16 **)-2LL )\n        {\n          v17 = v65;\n          v50 = v18 + v40;\n          v51 = &s[v18 + v40];\n          v28 = (const unsigned __int16 **)v40;\n          v32 = v40;\n          v15 = v84;\n          v16 = v85;\n          v9 = v75;\n          v10 = v77;\n          v19 = v70;\n          if ( v50 < v65 && *v51 )\n          {\n            do\n              v28 = (const unsigned __int16 **)((char *)v28 + 1);\n            while ( (unsigned __int64)v28 + v18 < v65 && *((_BYTE *)v28 + (_QWORD)v86) );\n            v32 = (unsigned __int64)v28;\n          }\n          LODWORD(v13) = v56;\n          v11 = 0;\nLABEL_242:\n          if ( v32 > 1 )\n            goto LABEL_174;\nLABEL_100:\n          if ( (_BYTE)v13 )\n          {\n            LODWORD(v13) = v56;\n            LOBYTE(v11) = 0;\nLABEL_174:\n            v44 = 0;\n            v45 = v18 + v32;\n            v46 = v57;\n            while ( 1 )\n            {\n              if ( (_BYTE)v13 )\n              {\n                if ( v82 )\n                  return sub_404B70((__int64)v9, v10, s);\n                LOBYTE(v28) = (v15 ^ 1) & (v19 == 2);\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 36;\n                  if ( v10 > v16 + 2 )\n                    v9[v16 + 2] = 39;\n                  v16 += 3LL;\n                  v15 = (int)v28;\n                }\n                if ( v10 > v16 )\n                  v9[v16] = 92;\n                if ( v10 > v16 + 1 )\n                  v9[v16 + 1] = ((unsigned __int8)v23 >> 6) + 48;\n                LODWORD(v28) = v16 + 2;\n                if ( v10 > v16 + 2 )\n                {\n                  LODWORD(v28) = (((unsigned __int8)v23 >> 3) & 7) + 48;\n                  v9[v16 + 2] = (_BYTE)v28;\n                }\n                ++v18;\n                v16 += 3LL;\n                LOBYTE(v23) = (v23 & 7) + 48;\n                if ( v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_40;\n                }\n                v44 = v13;\n              }\n              else\n              {\n                LODWORD(v28) = v15 & (v44 ^ 1);\n                if ( v46 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 92;\n                  ++v16;\n                }\n                if ( ++v18 >= v45 )\n                {\n                  v11 = (unsigned __int8)v11;\n                  goto LABEL_51;\n                }\n                if ( (_BYTE)v28 )\n                {\n                  if ( v10 > v16 )\n                    v9[v16] = 39;\n                  LODWORD(v28) = v16 + 1;\n                  if ( v10 > v16 + 1 )\n                    v9[v16 + 1] = 39;\n                  v16 += 2LL;\n                  v46 = 0;\n                  v15 = 0;\n                }\n                else\n                {\n                  v46 = 0;\n                }\n              }\n              if ( v10 > v16 )\n                v9[v16] = v23;\n              LOBYTE(v23) = s[v18];\n              ++v16;\n            }\n          }\nLABEL_101:\n          LOBYTE(v13) = v19 == 2;\nLABEL_23:\n          v25 = (v13 | v56 ^ 1) ^ 1;\n          LOBYTE(v25) = v82 | (v13 | v56 ^ 1) ^ 1;\n          if ( !(v82 | (unsigned __int8)(v13 | v56 ^ 1) ^ 1) )\n            goto LABEL_49;\n          goto LABEL_24;\n        }\n        if ( v70 != 2 || !v82 || v28 == (const unsigned __int16 **)1 )\n        {\nLABEL_148:\n          if ( !iswprint(wc) )\n            v11 = 0;\n          v40 += (unsigned __int64)v42;\n          LODWORD(v28) = mbsinit(&ps);\n          if ( (_DWORD)v28 )\n            goto LABEL_241;\n          continue;\n        }\n        break;\n      }\n      v43 = &s[v41 + 1];\n      while ( (unsigned __int8)(*v43 - 91) > 0x21u || !((1LL << (*v43 - 91)) & 0x20000002BLL) )\n      {\n        if ( &s[(_QWORD)v42 + v41] == ++v43 )\n          goto LABEL_148;\n      }\n      v9 = v75;\n      v10 = v77;\n      return sub_404B70((__int64)v9, v10, s);\n    case 5:\n      if ( v12 )\n      {\n        v59 = 1;\n        v15 = 0;\n        v16 = 0LL;\n        v83 = 0;\n        v79 = 0LL;\n        v82 = 1;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n          v79 = 0LL;\n        }\n        else\n        {\n          v79 = 0LL;\n          v15 = 0;\n          v59 = 1;\n          v83 = 0;\n        }\n        v82 = 0;\n        v16 = 1LL;\n        v56 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v11 = 5;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 1;\n      v56 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v59 = 1;\n      v15 = 0;\n      v16 = 0LL;\n      v83 = 0;\n      v79 = 0LL;\n      v82 = 0;\n      v56 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404A70(\"`\", v11);\n        v47 = sub_404A70(\"'\", v11);\n        v14 = v55;\n        a9 = v47;\n      }\n      v16 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v16] )\n        {\n          if ( a2 > v16 )\n            a1[v16] = i;\n          ++v16;\n        }\n      }\n      v58 = v14;\n      v48 = strlen(a9);\n      v59 = 1;\n      v15 = 0;\n      v14 = v58;\n      n = v48;\n      v83 = 0;\n      s2 = a9;\n      v79 = 0LL;\n      v56 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n      return result;\n  }\n}\n", 
            "funcStartAddr": "0x401920L", 
            "funcEndAddr": "0x401925L", 
            "funcName": "sub_404B70"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405DA0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60C278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60C290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60C278 == &xmmword_60C280 )\n    {\n      v7 = (__int128 *)sub_406C20(0LL, v9);\n      off_60C278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C280);\n    }\n    else\n    {\n      off_60C278 = (__int128 *)sub_406C20(off_60C278, v9);\n      v7 = off_60C278;\n    }\n    memset(&v7[dword_60C290], 0, 16LL * (a1 + 1 - dword_60C290));\n    dword_60C290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404B70(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60C320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406BC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404B70(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405DA0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60C278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60C290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60C278 == &xmmword_60C280 )\n    {\n      v7 = (__int128 *)sub_406C20(0LL, v9);\n      off_60C278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C280);\n    }\n    else\n    {\n      off_60C278 = (__int128 *)sub_406C20(off_60C278, v9);\n      v7 = off_60C278;\n    }\n    memset(&v7[dword_60C290], 0, 16LL * (a1 + 1 - dword_60C290));\n    dword_60C290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404B70(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60C320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406BC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404B70(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401925L", 
            "funcEndAddr": "0x40192aL", 
            "funcName": "sub_405DA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_405DA0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60C278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60C290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60C278 == &xmmword_60C280 )\n    {\n      v7 = (__int128 *)sub_406C20(0LL, v9);\n      off_60C278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C280);\n    }\n    else\n    {\n      off_60C278 = (__int128 *)sub_406C20(off_60C278, v9);\n      v7 = off_60C278;\n    }\n    memset(&v7[dword_60C290], 0, 16LL * (a1 + 1 - dword_60C290));\n    dword_60C290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404B70(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60C320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406BC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404B70(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405DA0(int a1, char *a2, unsigned __int64 a3, __int64 a4)\n{\n  unsigned __int64 v4; // r14\n  __int64 v5; // rbp\n  int *v6; // rax\n  __int128 *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // er8\n  char *v17; // [rsp+8h] [rbp-50h]\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v4 = a3;\n  v5 = a4;\n  v17 = a2;\n  v6 = __errno_location();\n  v7 = off_60C278;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60C290 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E10();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60C278 == &xmmword_60C280 )\n    {\n      v7 = (__int128 *)sub_406C20(0LL, v9);\n      off_60C278 = v7;\n      *v7 = (__int128)_mm_load_si128((const __m128i *)&xmmword_60C280);\n    }\n    else\n    {\n      off_60C278 = (__int128 *)sub_406C20(off_60C278, v9);\n      v7 = off_60C278;\n    }\n    memset(&v7[dword_60C290], 0, 16LL * (a1 + 1 - dword_60C290));\n    dword_60C290 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(v5 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404B70(v11, *v10, v17, v4, *(_DWORD *)v5, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60C320 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406BC0(v13);\n    v15 = *(_DWORD *)v5;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404B70(v14, v13, v17, v4, v15, v21, v5 + 8, *(char **)(v5 + 40), *(char **)(v5 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n", 
            "funcStartAddr": "0x401925L", 
            "funcEndAddr": "0x40192aL", 
            "funcName": "sub_405DA0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4062C0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4062C0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40192aL", 
            "funcEndAddr": "0x40192fL", 
            "funcName": "sub_4062C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4062C0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_4062C0(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x40192aL", 
            "funcEndAddr": "0x40192fL", 
            "funcName": "sub_4062C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406330(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405DA0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_406330(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405DA0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40192fL", 
            "funcEndAddr": "0x401934L", 
            "funcName": "sub_406330"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406330(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405DA0(a1, a3, a4, (__int64)&v5);\n}\n\n_BYTE *__fastcall sub_406330(int a1, int a2, char *a3, unsigned __int64 a4)\n{\n  int v5; // [rsp+0h] [rbp-48h]\n  int v6; // [rsp+4h] [rbp-44h]\n  __int64 v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n  __int64 v9; // [rsp+18h] [rbp-30h]\n  __int64 v10; // [rsp+20h] [rbp-28h]\n  __int64 v11; // [rsp+28h] [rbp-20h]\n  __int64 v12; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5 = a2;\n  v6 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  v12 = 0LL;\n  return sub_405DA0(a1, a3, a4, (__int64)&v5);\n}\n", 
            "funcStartAddr": "0x40192fL", 
            "funcEndAddr": "0x401934L", 
            "funcName": "sub_406330"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4063C0(char *a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  char v3; // cl\n  int *v4; // r8\n  unsigned __int32 v5; // edx\n  __m128i v7; // [rsp+0h] [rbp-48h]\n  __m128i v8; // [rsp+10h] [rbp-38h]\n  __m128i v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  v3 = a3 & 0x1F;\n  v10 = qword_60C450;\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60C420);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60C430);\n  v4 = &v7.m128i_i32[(a3 >> 5) + 2];\n  v9 = _mm_load_si128((const __m128i *)&xmmword_60C440);\n  v5 = v7.m128i_u32[(a3 >> 5) + 2];\n  *v4 = v5 ^ ((~(unsigned __int8)(v5 >> v3) & 1) << v3);\n  return sub_405DA0(0, a1, a2, (__int64)&v7);\n}\n", 
            "funcStartAddr": "0x4063c0L", 
            "funcEndAddr": "0x406430L", 
            "funcName": "sub_4063C0"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406440(char *a1)\n{\n  return sub_4063C0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n", 
            "funcStartAddr": "0x406440L", 
            "funcEndAddr": "0x406451L", 
            "funcName": "sub_406440"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406470(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_406470(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401934L", 
            "funcEndAddr": "0x401939L", 
            "funcName": "sub_406470"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_406470(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n\n_BYTE *__fastcall sub_406470(int a1, int a2, char *a3)\n{\n  int v4; // [rsp+0h] [rbp-48h]\n  int v5; // [rsp+4h] [rbp-44h]\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4 = a2;\n  v6 = 0x400000000000000LL;\n  v5 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405DA0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)&v4);\n}\n", 
            "funcStartAddr": "0x401934L", 
            "funcEndAddr": "0x401939L", 
            "funcName": "sub_406470"
        }, 
        {
            "decompiledFuncCode": "_BYTE *__fastcall sub_4064E0(int a1, __int64 a2, __int64 a3, char *a4, unsigned __int64 a5)\n{\n  __m128i v6; // [rsp+0h] [rbp-48h]\n  __m128i v7; // [rsp+10h] [rbp-38h]\n  __m128i v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+30h] [rbp-18h]\n\n  v6 = _mm_load_si128((const __m128i *)&xmmword_60C420);\n  v7 = _mm_load_si128((const __m128i *)&xmmword_60C430);\n  v8 = _mm_load_si128((const __m128i *)&xmmword_60C440);\n  v9 = qword_60C450;\n  v6.m128i_i32[0] = 10;\n  if ( !a2 || !a3 )\n    abort();\n  v8.m128i_i64[1] = a2;\n  v9 = a3;\n  return sub_405DA0(a1, a4, a5, (__int64)&v6);\n}\n", 
            "funcStartAddr": "0x4064e0L", 
            "funcEndAddr": "0x40654cL", 
            "funcName": "sub_4064E0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406610(char a1)\n{\n  return sub_406ED0(a1);\n}\n", 
            "funcStartAddr": "0x406610L", 
            "funcEndAddr": "0x40661eL", 
            "funcName": "sub_406610"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406620(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_406620(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401939L", 
            "funcEndAddr": "0x40193eL", 
            "funcName": "sub_406620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406620(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_406620(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  __int64 v6; // r12\n  __int64 *v7; // rbx\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  __int64 result; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n\n  v6 = a6;\n  v7 = a5;\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( v6 )\n  {\n    case 0LL:\n      abort();\n      return result;\n    case 1LL:\n      v14 = *v7;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *v7;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *v7;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = v7[3];\n      v21 = *v7;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 7LL:\n      v23 = *v7;\n      v24 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v24, v23);\n    case 8LL:\n      v10 = *v7;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *v7;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *v7;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n", 
            "funcStartAddr": "0x401939L", 
            "funcEndAddr": "0x40193eL", 
            "funcName": "sub_406620"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406A20(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h]\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_406620(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_406620(a1, a2, a3, a4, v12, i);\n}\n", 
            "funcStartAddr": "0x406a20L", 
            "funcEndAddr": "0x406a80L", 
            "funcName": "sub_406A20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406A80(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // er8\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[10]; // [rsp+20h] [rbp-88h]\n  char v16[32]; // [rsp+70h] [rbp-38h]\n  __int64 v17; // [rsp+90h] [rbp-18h]\n  __int64 v18; // [rsp+98h] [rbp-10h]\n\n  v17 = a5;\n  v7 = &a7;\n  v8 = 32;\n  v18 = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(_QWORD *)&v16[v10];\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_406620(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_406620(a1, a2, a3, a4, v15, i);\n}\n", 
            "funcStartAddr": "0x406a80L", 
            "funcEndAddr": "0x406b3cL", 
            "funcName": "sub_406A80"
        }, 
        {
            "decompiledFuncCode": "int sub_406B40()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, aReportBugsTo, 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_408698);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n", 
            "funcStartAddr": "0x406b40L", 
            "funcEndAddr": "0x406bb4L", 
            "funcName": "sub_406B40"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_406BC0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_406E10();\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406bc0L", 
            "funcEndAddr": "0x406bdaL", 
            "funcName": "sub_406BC0"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_406C20(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    result = 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_406E10();\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406c20L", 
            "funcEndAddr": "0x406c56L", 
            "funcName": "sub_406C20"
        }, 
        {
            "decompiledFuncCode": "void *__fastcall sub_406DC0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_406BC0(n);\n  return memcpy(v2, src, n);\n}\n", 
            "funcStartAddr": "0x406dc0L", 
            "funcEndAddr": "0x406de8L", 
            "funcName": "sub_406DC0"
        }, 
        {
            "decompiledFuncCode": "void __noreturn sub_406E10()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n", 
            "funcStartAddr": "0x406e10L", 
            "funcEndAddr": "0x406e41L", 
            "funcName": "sub_406E10"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_406E50(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // er12\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_407010(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    result = -1;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x406e50L", 
            "funcEndAddr": "0x406ecbL", 
            "funcName": "sub_406E50"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_406ED0(char a1, int a2, __int64 a3)\n{\n  int v3; // ebx\n  int v5; // eax\n  int *v6; // rax\n  int v7; // edi\n  int v8; // er12\n  int *v9; // rbp\n\n  if ( a2 == 1030 )\n  {\n    if ( dword_60C458 < 0 )\n    {\n      v3 = sub_406ED0(a1);\n      if ( v3 >= 0 && dword_60C458 == -1 )\n      {\nLABEL_8:\n        v5 = fcntl((unsigned __int8)v3, 1);\n        if ( v5 < 0 || fcntl((unsigned __int8)v3, 2, v5 | 1u) == -1 )\n        {\n          v6 = __errno_location();\n          v7 = v3;\n          v3 = -1;\n          v8 = *v6;\n          v9 = v6;\n          close(v7);\n          *v9 = v8;\n        }\n        return (unsigned int)v3;\n      }\n    }\n    else\n    {\n      v3 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v3 >= 0 || *__errno_location() != 22 )\n      {\n        dword_60C458 = 1;\n      }\n      else\n      {\n        v3 = sub_406ED0(a1);\n        if ( v3 >= 0 )\n        {\n          dword_60C458 = -1;\n          goto LABEL_8;\n        }\n      }\n    }\n    return (unsigned int)v3;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n", 
            "funcStartAddr": "0x406ed0L", 
            "funcEndAddr": "0x407005L", 
            "funcName": "sub_406ED0"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_407010(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || !(stream->_flags & 0x100) )\n    return fflush(stream);\n  sub_407050(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n", 
            "funcStartAddr": "0x407010L", 
            "funcEndAddr": "0x407050L", 
            "funcName": "sub_407010"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_407050(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v4; // er12\n  int v5; // eax\n\n  if ( a1->_IO_read_end != a1->_IO_read_ptr || a1->_IO_write_ptr != a1->_IO_write_base || a1->_IO_save_base )\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  else\n  {\n    v4 = a3;\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, v4);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= 0xFFFFFFEF;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  return v3;\n}\n", 
            "funcStartAddr": "0x407050L", 
            "funcEndAddr": "0x4070a7L", 
            "funcName": "sub_407050"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4070B0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // er12\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // er9\n  int v7; // er10\n  int v8; // er8\n  int v9; // er14\n  int v10; // edx\n  __int64 *v11; // rax\n  unsigned __int64 v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = a2[11];\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( (__int64 *)v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n", 
            "funcStartAddr": "0x4070b0L", 
            "funcEndAddr": "0x40718fL", 
            "funcName": "sub_4070B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407190(int a1, __int64 *a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8, __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char **v38; // [rsp+0h] [rbp-88h]\n  int v39; // [rsp+Ch] [rbp-7Ch]\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  _DWORD *v43; // [rsp+20h] [rbp-68h]\n  char *s; // [rsp+30h] [rbp-58h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v47; // [rsp+40h] [rbp-48h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v47 = a1;\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  s = a3;\n  v38 = a4;\n  v43 = a5;\n  v10 = (char *)*((_QWORD *)a7 + 4);\n  v39 = a6;\n  v46 = *v9;\n  if ( *v9 != 61 && *v9 )\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  else\n  {\n    v11 = 0LL;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !v39 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(s, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      result = 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = v38;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (v39\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = v38;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    result = 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      result = 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= v47 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        result = 5 * (unsigned int)(*s != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( v43 )\n          *v43 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          result = 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407190L", 
            "funcEndAddr": "0x4077acL", 
            "funcName": "sub_407190"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4077B0(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // er13\n  int v9; // eax\n  int v10; // ebp\n  __int64 *v11; // r12\n  char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  _BYTE *v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // er14\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char **v45; // [rsp+8h] [rbp-60h]\n  _DWORD *v46; // [rsp+10h] [rbp-58h]\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  __int64 v52; // [rsp+28h] [rbp-40h]\n\n  v45 = a4;\n  v46 = a5;\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v11 = (__int64 *)a2;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( !((v14 - 43) & 0xFD) )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_4070B0(a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)v11[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = (_BYTE *)v11[v16];\n    if ( !strcmp((const char *)v11[v16], \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_4070B0((__int64)v11, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *v17 == 45 )\n    {\n      v30 = v17[1];\n      if ( v30 )\n      {\n        if ( v45 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_407190(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( v17[2] || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_407190(a1, v11, v12, v45, v46, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = (_BYTE *)v11[*a7];\n            }\n          }\n        }\n        v13 = v17 + 1;\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = (__int64)(v13 + 1);\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && v45 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_407190(a1, v11, v12, v45, v46, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = v11[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *v11;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      v21 = 5 * (*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *v11;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = v11[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *v11;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    v21 = 63;\n  }\n  return v21;\n}\n", 
            "funcStartAddr": "0x4077b0L", 
            "funcEndAddr": "0x407d76L", 
            "funcName": "sub_4077B0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407D80(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60C460 = dword_60C29C;\n  dword_60C464 = dword_60C298;\n  result = sub_4077B0(a1, a2, a3, a4, a5, a6, &dword_60C460, a7);\n  dword_60C29C = dword_60C460;\n  qword_60C4A0 = qword_60C470;\n  dword_60C294 = dword_60C468;\n  return result;\n}\n", 
            "funcStartAddr": "0x407d80L", 
            "funcEndAddr": "0x407dd6L", 
            "funcName": "sub_407D80"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407DE0(int a1, __int64 a2, char *a3)\n{\n  return sub_407D80(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n", 
            "funcStartAddr": "0x407de0L", 
            "funcEndAddr": "0x407df8L", 
            "funcName": "sub_407DE0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407E00(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_407D80(a1, a2, a3, a4, a5, 0, 0);\n}\n", 
            "funcStartAddr": "0x407e00L", 
            "funcEndAddr": "0x407e13L", 
            "funcName": "sub_407E00"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407E20(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_4077B0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n", 
            "funcStartAddr": "0x407e20L", 
            "funcEndAddr": "0x407e35L", 
            "funcName": "sub_407E20"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407E40(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5)\n{\n  return sub_407D80(a1, a2, a3, a4, a5, 1, 0);\n}\n", 
            "funcStartAddr": "0x407e40L", 
            "funcEndAddr": "0x407e56L", 
            "funcName": "sub_407E40"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_407E60(int a1, __int64 a2, char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_4077B0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n", 
            "funcStartAddr": "0x407e60L", 
            "funcEndAddr": "0x407e78L", 
            "funcName": "sub_407E60"
        }, 
        {
            "decompiledFuncCode": "size_t __fastcall sub_407E80(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch]\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_407F60(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = (unsigned __int8)*v6;\n  }\n  return v4;\n}\n", 
            "funcStartAddr": "0x407e80L", 
            "funcEndAddr": "0x407efaL", 
            "funcName": "sub_407E80"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_407F00(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_406E50(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n  }\n  else\n  {\n    if ( !result )\n      return result;\n    if ( !v1 )\n      return -(*__errno_location() != 9);\n  }\n  return -1;\n}\n", 
            "funcStartAddr": "0x407f00L", 
            "funcEndAddr": "0x407f5dL", 
            "funcName": "sub_407F00"
        }, 
        {
            "decompiledFuncCode": "bool __fastcall sub_407F60(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      result = strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n", 
            "funcStartAddr": "0x407f60L", 
            "funcEndAddr": "0x407fbeL", 
            "funcName": "sub_407F60"
        }, 
        {
            "decompiledFuncCode": "const char *sub_407FC0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  size_t v4; // rax\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // er12\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *v22; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  char *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  signed __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h]\n  char v64[120]; // [rsp+60h] [rbp-78h]\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            v22 = v20->_IO_read_ptr;\n            if ( v22 < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = v22 + 1;\n              v23 = (unsigned __int8)*v22;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = v64;\n              do\n              {\n                v26 = *(_DWORD *)v25;\n                v25 += 4;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v27 >>= 16;\n              if ( !(~v26 & (v26 - 16843009) & 0x8080) )\n                v25 += 2;\n              v28 = &v25[-__CFADD__((_BYTE)v27, (_BYTE)v27) - 3] - v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"%s: invalid option -- '%c'\\n\" + 27;\n                v2 = v58;\n                free(v59);\n                sub_406E50(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( v34 & 4 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( v34 & 2 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = *(_QWORD *)v64;\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v64[v37 - 8];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)(v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( v37 & 4 )\n              {\n                *(_DWORD *)v38 = *(_DWORD *)v64;\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v64[v37 - 4];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( v37 & 2 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v64[v37 - 2];\n              }\n              v1 = v30;\n              v22 = v20->_IO_read_ptr;\n              if ( v22 < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_406E50(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = strlen(v1);\n      v1 += v4 + strlen(&v1[v4 + 1]) + 2;\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    v2 = \"ASCII\";\n  return v2;\n}\n", 
            "funcStartAddr": "0x407fc0L", 
            "funcEndAddr": "0x408522L", 
            "funcName": "sub_407FC0"
        }, 
        {
            "decompiledFuncCode": "void init(void)\n{\n  init_proc();\n}\n", 
            "funcStartAddr": "0x408530L", 
            "funcEndAddr": "0x40858dL", 
            "funcName": "init"
        }, 
        {
            "decompiledFuncCode": "void fini(void)\n{\n  ;\n}\n", 
            "funcStartAddr": "0x408590L", 
            "funcEndAddr": "0x408591L", 
            "funcName": "fini"
        }, 
        {
            "decompiledFuncCode": "int __fastcall sub_4085A0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &unk_60C208 )\n    v1 = (void *)unk_60C208;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n", 
            "funcStartAddr": "0x4085a0L", 
            "funcEndAddr": "0x4085b8L", 
            "funcName": "sub_4085A0"
        }, 
        {
            "decompiledFuncCode": "__int64 __fastcall sub_4085B8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**v3)(void); // rbx\n  __int64 v5; // [rsp-8h] [rbp-10h]\n\n  v3 = (void (**)(void))&qword_60BE30;\n  v5 = a3;\n  while ( *v3 != (void (*)(void))-1LL )\n  {\n    (*v3)();\n    --v3;\n  }\n  return v5;\n}\n", 
            "funcStartAddr": "0x4085b8L", 
            "funcEndAddr": "0x4085d8L", 
            "funcName": "sub_4085B8"
        }
    ], 
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sha1sum.elf", 
        "isStripped": "True"
    }, 
    "funcCount": 65, 
    "buildInfo": {
        "decompilerName": "IDA Pro", 
        "compilerVersion": "9.4.0", 
        "Optlevel": "-O", 
        "compilerName": "gcc"
    }
}