{
    "funcInfo": [
        {
            "funcName": "function_4017b0",
            "funcStartAddr": "4017b0",
            "funcEndAddr": "4017b5",
            "decompiledFuncCode": "int64_t function_4017b0(void) {\n    // 0x4017b0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017b5",
            "funcStartAddr": "4017b5",
            "funcEndAddr": "4017ba",
            "decompiledFuncCode": "int64_t function_4017b5(void) {\n    // 0x4017b5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017ba",
            "funcStartAddr": "4017ba",
            "funcEndAddr": "4017bf",
            "decompiledFuncCode": "int64_t function_4017ba(void) {\n    // 0x4017ba\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017bf",
            "funcStartAddr": "4017bf",
            "funcEndAddr": "4017c4",
            "decompiledFuncCode": "int64_t function_4017bf(void) {\n    // 0x4017bf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c4",
            "funcStartAddr": "4017c4",
            "funcEndAddr": "4017c9",
            "decompiledFuncCode": "int64_t function_4017c4(void) {\n    // 0x4017c4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c9",
            "funcStartAddr": "4017c9",
            "funcEndAddr": "4017ce",
            "decompiledFuncCode": "int64_t function_4017c9(void) {\n    // 0x4017c9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017d0",
            "funcStartAddr": "4017d0",
            "funcEndAddr": "401b50",
            "decompiledFuncCode": "int64_t function_4017d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 & 0xffffffff; // 0x4017d5\n    function_402a40(a2);\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_4064e0(0x402960, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g35 = 1;\n    int64_t v2 = function_405d40(v1, a2, \"it:0::1::2::3::4::5::6::7::8::9::\", &g2, 0, a6); // 0x401832\n    int32_t v3 = v2; // 0x401837\n    int64_t v4; // 0x4017d0\n    int64_t v5; // 0x4017d0\n    int64_t v6; // 0x4017d0\n    int64_t v7; // 0x4017d0\n    int64_t v8; // 0x4017d0\n    int64_t v9; // 0x4017d0\n    int64_t v10; // 0x4017d0\n    int64_t v11; // 0x4017d0\n    int64_t v12; // 0x4017d0\n    int64_t v13; // 0x4017d0\n    int64_t v14; // bp-48, 0x4017d0\n    if (v3 == -1) {\n      lab_0x4018f2:\n        // 0x4018f2\n        function_4024a0();\n        int64_t v15 = (int64_t)*(int32_t *)0x60a27c; // 0x4018f7\n        function_4026a0(v1 > v15 ? 8 * v15 + a2 : 0);\n        int64_t v16 = function_4026c0(0); // 0x40190f\n        if (v16 == 0) {\n            // 0x4019d5\n            function_4028a0();\n            return g34;\n        }\n        // 0x401920\n        v8 = v16;\n        while (true) {\n          lab_0x401920:\n            // 0x401920\n            v14 = 0;\n            v9 = v8;\n            v4 = 0;\n            v6 = 1;\n            while (true) {\n              lab_0x40195c:\n                // 0x40195c\n                v7 = v6;\n                v5 = v4;\n                v10 = v9;\n                int64_t * v17 = (int64_t *)(v10 + 8);\n                uint64_t v18 = *v17; // 0x40195c\n                while (v18 >= *(int64_t *)(v10 + 16)) {\n                    uint32_t v19 = __uflow((struct _IO_FILE *)v10); // 0x4019f3\n                    if (v19 >= 0) {\n                        // 0x401975\n                        v12 = v19;\n                        goto lab_0x401975_2;\n                    }\n                    int64_t v20 = function_4026c0((int32_t)v10); // 0x401a05\n                    int64_t v21 = v20; // 0x401a10\n                    if (v20 == 0) {\n                        // 0x401a16\n                        v13 = v19;\n                        v11 = v20;\n                        if ((char)v7 == 0) {\n                            goto lab_0x4019d5;\n                        } else {\n                            goto lab_0x401a1b;\n                        }\n                    }\n                    v10 = v21;\n                    v17 = (int64_t *)(v10 + 8);\n                    v18 = *v17;\n                }\n                // 0x40196a\n                *v17 = v18 + 1;\n                v12 = (int64_t)*(char *)v18;\n                goto lab_0x401975_2;\n            }\n        }\n      lab_0x4019d5:\n        // 0x4019d5\n        function_4028a0();\n        return g34;\n    }\n    int64_t v22 = &v14;\n    int32_t v23 = v3; // 0x401837\n    int64_t v24 = v2; // 0x4017d0\n    int32_t v25; // 0x4017d0\n    while (true) {\n        // 0x401840\n        v25 = v23;\n        if (v25 > 57) {\n            if (v25 != 105) {\n                if (v25 != 116) {\n                    // 0x401b1d\n                    function_401c30(1);\n                    // UNREACHABLE\n                }\n                // 0x4018a9\n                function_402150(g58);\n            } else {\n                // 0x401885\n                g35 = 0;\n            }\n        } else {\n            if (v25 <= 47) {\n                // break -> 0x40184a\n                break;\n            }\n            // 0x4018c0\n            if (g58 == 0) {\n                // 0x4018da\n                v14 = 0x100000000000000 * v24 >> 56;\n                function_402150(v22);\n            } else {\n                // 0x4018cc\n                function_402150(g58 - 1);\n            }\n        }\n        int64_t v26 = function_405d40(v1, a2, \"it:0::1::2::3::4::5::6::7::8::9::\", &g2, 0, a6); // 0x401832\n        v23 = v26;\n        v24 = v26;\n        if (v23 == -1) {\n            goto lab_0x4018f2;\n        }\n    }\n    if (v25 == -131) {\n        // 0x401851\n        function_404ae0((int64_t)g28, \"expand\", \"GNU coreutils\", (int64_t)g17, \"David MacKenzie\", 0);\n        exit(0);\n        // UNREACHABLE\n    }\n    if (v25 == -130) {\n        // 0x401899\n        function_401c30(0);\n        // UNREACHABLE\n    }\n  lab_0x401b1d:\n    // 0x401b1d\n    function_401c30(1);\n    // UNREACHABLE\n  lab_0x401975_2:;\n    int64_t v27 = v12;\n    int64_t v28 = v27; // 0x401978\n    int64_t v29 = v10; // 0x401978\n    int64_t v30 = v5; // 0x401978\n    int64_t v31 = v7; // 0x401978\n    int64_t v32; // 0x4017d0\n    int64_t v33; // 0x4017d0\n    int64_t v34; // 0x4017d0\n    int64_t v35; // 0x4017d0\n    int64_t v36; // 0x4017d0\n    if ((char)v7 == 0) {\n        goto lab_0x401938;\n    } else {\n        int32_t v37 = v27; // 0x40197a\n        v35 = v10;\n        v33 = v5;\n        if (v37 == 9) {\n            goto lab_0x401a7d;\n        } else {\n            // 0x401983\n            v13 = v27;\n            v11 = v10;\n            if (v37 != 8) {\n                goto lab_0x401a1b;\n            } else {\n                int64_t v38 = v14; // 0x401999\n                v14 = v38 - (int64_t)(v38 != 0);\n                v36 = v27;\n                v34 = v10;\n                v32 = v5 - (int64_t)(v5 != 0);\n                goto lab_0x4019ac;\n            }\n        }\n    }\n  lab_0x401938:;\n    int64_t v39 = v31;\n    int64_t v40 = v30;\n    int64_t v41 = v29;\n    int64_t v42 = v28;\n    int64_t v43 = (int64_t)g28; // 0x401938\n    int64_t * v44 = (int64_t *)(v43 + 40); // 0x40193f\n    uint64_t v45 = *v44; // 0x40193f\n    int64_t v46 = v42; // 0x401947\n    int64_t v47 = v41; // 0x401947\n    int64_t v48 = v43; // 0x401947\n    int64_t v49 = v40; // 0x401947\n    int64_t v50 = v39; // 0x401947\n    int64_t v51; // 0x4017d0\n    int64_t v52; // 0x4017d0\n    int64_t v53; // 0x4017d0\n    int64_t v54; // 0x4017d0\n    if (v45 >= *(int64_t *)(v43 + 48)) {\n        goto lab_0x401a43;\n    } else {\n        // 0x40194d\n        *v44 = v45 + 1;\n        *(char *)v45 = (char)v42;\n        v54 = v42;\n        v53 = v41;\n        v51 = v40;\n        v52 = v39;\n        goto lab_0x401957;\n    }\n  lab_0x401a43:;\n    int64_t v55 = v49;\n    int64_t v56 = v47;\n    int32_t v57 = __overflow((struct _IO_FILE *)v48, (int32_t)v46 % 256); // 0x401a46\n    v54 = v46;\n    v53 = v56;\n    v51 = v55;\n    v52 = v50;\n    if (v57 >= 0) {\n        goto lab_0x401957;\n    } else {\n        // 0x401a53\n        error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n        v35 = v56;\n        v33 = v55;\n        goto lab_0x401a7d;\n    }\n  lab_0x401a7d:;\n    uint64_t v58 = v33;\n    int64_t v59 = v35;\n    char v60; // bp-49, 0x4017d0\n    uint64_t v61 = function_4025f0(v58, &v14, (int64_t *)&v60); // 0x401a8a\n    char * format; // 0x401b33\n    if (v60 == 0) {\n        if (v58 > v61) {\n            // 0x401b27\n            format = dcgettext(NULL, \"input line is too long\", 5);\n            error(1, (int32_t)\"input line is too long\" ^ (int32_t)\"input line is too long\", format);\n            return &g60;\n        }\n        int64_t v62 = v58 + 1; // 0x401acb\n        v36 = 32;\n        v34 = v59;\n        v32 = v62;\n        int64_t v63 = v62; // 0x401ad2\n        if (v61 > v62) {\n            int64_t v64 = (int64_t)g28; // 0x401ad4\n            int64_t * v65 = (int64_t *)(v64 + 40); // 0x401adb\n            uint64_t v66 = *v65; // 0x401adb\n            if (v66 < *(int64_t *)(v64 + 48)) {\n                // 0x401ac0\n                *v65 = v66 + 1;\n                *(char *)v66 = 32;\n            } else {\n                // 0x401ae5\n                if (__overflow(g28, 32) < 0) {\n                    // 0x401af3\n                    error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n                    goto lab_0x401b1d;\n                }\n            }\n            int64_t v67 = v63 + 1; // 0x401acb\n            v36 = 32;\n            v34 = v59;\n            v32 = v67;\n            v63 = v67;\n            while (v61 > v67) {\n                // 0x401ad4\n                v64 = (int64_t)g28;\n                v65 = (int64_t *)(v64 + 40);\n                v66 = *v65;\n                if (v66 < *(int64_t *)(v64 + 48)) {\n                    // 0x401ac0\n                    *v65 = v66 + 1;\n                    *(char *)v66 = 32;\n                } else {\n                    // 0x401ae5\n                    if (__overflow(g28, 32) < 0) {\n                        // 0x401af3\n                        error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n                        goto lab_0x401b1d;\n                    }\n                }\n                // 0x401acb\n                v67 = v63 + 1;\n                v36 = 32;\n                v34 = v59;\n                v32 = v67;\n                v63 = v67;\n            }\n        }\n    } else {\n        if (v58 == -1) {\n            // 0x401b27\n            format = dcgettext(NULL, \"input line is too long\", 5);\n            error(1, (int32_t)\"input line is too long\" ^ (int32_t)\"input line is too long\", format);\n            return &g60;\n        }\n        // 0x401aa8\n        v36 = 32;\n        v34 = v59;\n        v32 = v58 + 1;\n    }\n    goto lab_0x4019ac;\n  lab_0x401957:\n    // 0x401957\n    v8 = v53;\n    v9 = v53;\n    v4 = v51;\n    v6 = v52;\n    if ((int32_t)v54 == 10) {\n        goto lab_0x401920;\n    } else {\n        goto lab_0x40195c;\n    }\n  lab_0x4019ac:;\n    int64_t v68 = v36;\n    int64_t v69 = g35; // 0x4019b7\n    if (g35 == 0) {\n        uint16_t v70 = *(int16_t *)((0x100000000 * v68 >> 31) + (int64_t)*__ctype_b_loc()); // 0x4019c4\n        v69 = v70 % 2;\n    }\n    // 0x4019cd\n    v28 = v68;\n    v29 = v34;\n    v30 = v32;\n    v31 = v69;\n    if ((int32_t)v68 < 0) {\n        // break (via goto) -> 0x4019d5\n        goto lab_0x4019d5;\n    }\n    goto lab_0x401938;\n  lab_0x401a1b:;\n    int64_t v71 = v11;\n    int64_t v72 = v13;\n    int64_t v73 = v5 + 1; // 0x401a1b\n    v36 = v72;\n    v34 = v71;\n    v32 = v73;\n    if (v73 != 0) {\n        goto lab_0x4019ac;\n    } else {\n        // 0x401a21\n        error(1, (int32_t)\"input line is too long\" ^ (int32_t)\"input line is too long\", dcgettext(NULL, \"input line is too long\", 5));\n        v46 = v72;\n        v47 = v71;\n        v48 = 1;\n        v49 = v73;\n        v50 = v7;\n        goto lab_0x401a43;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401b50",
            "funcEndAddr": "401b7b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401b50\n    int64_t v1; // 0x401b50\n    __libc_start_main(0x4017d0, (int32_t)a4, (char **)&v1, (void (*)())0x406470, (void (*)())0x4064d0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b7b",
            "funcStartAddr": "401b7b",
            "funcEndAddr": "401b9a",
            "decompiledFuncCode": "int64_t function_401b7b(void) {\n    // 0x401b7b\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_401b9a",
            "funcStartAddr": "401b9a",
            "funcEndAddr": "401bd1",
            "decompiledFuncCode": "int64_t function_401b9a(void) {\n    // 0x401b9a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401bd1",
            "funcStartAddr": "401bd1",
            "funcEndAddr": "401c28",
            "decompiledFuncCode": "int64_t function_401bd1(void) {\n    // 0x401bd1\n    if (g32 != 0) {\n        // 0x401c27\n        int64_t result; // 0x401bd1\n        return result;\n    }\n    int64_t v1 = g33; // 0x401c04\n    int64_t result2; // 0x401c16\n    if (g33 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x401c16\n        result2 = function_401b7b();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x401c06\n        v1++;\n    }\n    // 0x401bfa\n    g33 = v1;\n    // 0x401c16\n    result2 = function_401b7b();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401c28",
            "funcStartAddr": "401c28",
            "funcEndAddr": "401c2d",
            "decompiledFuncCode": "int64_t function_401c28(void) {\n    // 0x401c28\n    return function_401b9a();\n}\n"
        },
        {
            "funcName": "function_401c30",
            "funcStartAddr": "401c30",
            "funcEndAddr": "401f8d",
            "decompiledFuncCode": "int64_t function_401c30(int32_t status) {\n    // 0x401c30\n    if (status != 0) {\n        // 0x401c4a\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401c6f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401c76\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Convert tabs in each FILE to spaces, writing to standard output.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g28);\n    char * v1 = dcgettext(NULL, \"  -i, --initial    do not convert tabs after non blanks\\n  -t, --tabs=N     have tabs N characters apart, not 8\\n\", 5); // 0x401d10\n    fputs_unlocked(v1, g28);\n    function_4028f0((int64_t)v1);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    int64_t v2 = &g1; // bp-136, 0x401d6b\n    bool v3; // 0x401c30\n    int64_t v4 = v3 ? -1 : 1;\n    int64_t v5 = &v2;\n    int64_t v6 = v5 + 16; // 0x401df0\n    int64_t v7 = *(int64_t *)v6; // 0x401df4\n    int64_t v8 = 7; // 0x401dfa\n    while (v7 != 0) {\n        int64_t v9 = (int64_t)\"expand\";\n        int64_t v10 = v7;\n        unsigned char v11 = *(char *)v9; // 0x401e06\n        char v12 = *(char *)v10; // 0x401e06\n        char v13 = v12; // 0x401e06\n        bool v14 = false; // 0x401e06\n        while (v11 == v12) {\n            // 0x401dfc\n            v8--;\n            int64_t v15 = v10 + v4; // 0x401e06\n            int64_t v16 = v9 + v4; // 0x401e06\n            v13 = v11;\n            v14 = true;\n            if (v8 == 0) {\n                // break -> \n                break;\n            }\n            v9 = v16;\n            v10 = v15;\n            v11 = *(char *)v9;\n            v12 = *(char *)v10;\n            v13 = v12;\n            v14 = false;\n        }\n        unsigned char v17 = v13;\n        if ((v11 >= v17 && !v14) == v11 < v17) {\n            // break -> 0x401e12\n            break;\n        }\n        v5 = v6;\n        v6 = v5 + 16;\n        v7 = *(int64_t *)v6;\n        v8 = 7;\n    }\n    // 0x401e12\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v5 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401f24;\n        } else {\n            // 0x401f0e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401f63\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401e74;\n            } else {\n                goto lab_0x401f24;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401e74;\n        } else {\n            // 0x401e5a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401f63\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401e74;\n            } else {\n                goto lab_0x401e74;\n            }\n        }\n    }\n  lab_0x401f24:\n    // 0x401f24\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401eb4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401c6f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401e74:\n    // 0x401e74\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401eb4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401c6f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401f90",
            "funcStartAddr": "401f90",
            "funcEndAddr": "401fda",
            "decompiledFuncCode": "int64_t function_401f90(int64_t a1) {\n    // 0x401f90\n    if ((int64_t)g43 == 0) {\n        // 0x401fa3\n        g43 = a1;\n        return 1;\n    }\n    // 0x401fb0\n    error(0, (int32_t)\"'/' specifier only allowed with the last value\" ^ (int32_t)\"'/' specifier only allowed with the last value\", dcgettext(NULL, \"'/' specifier only allowed with the last value\", 5));\n    g43 = a1;\n    return (int32_t)&g60 ^ (int32_t)&g60;\n}\n"
        },
        {
            "funcName": "function_401fe0",
            "funcStartAddr": "401fe0",
            "funcEndAddr": "40202a",
            "decompiledFuncCode": "int64_t function_401fe0(int64_t a1) {\n    // 0x401fe0\n    if ((int64_t)g42 == 0) {\n        // 0x401ff3\n        g42 = a1;\n        return 1;\n    }\n    // 0x402000\n    error(0, (int32_t)\"'+' specifier only allowed with the last value\" ^ (int32_t)\"'+' specifier only allowed with the last value\", dcgettext(NULL, \"'+' specifier only allowed with the last value\", 5));\n    g42 = a1;\n    return (int32_t)&g60 ^ (int32_t)&g60;\n}\n"
        },
        {
            "funcName": "function_402030",
            "funcStartAddr": "402030",
            "funcEndAddr": "40214f",
            "decompiledFuncCode": "int64_t function_402030(int64_t a1) {\n    int32_t v1 = g39; // 0x402039\n    int64_t v2 = v1; // 0x402039\n    int64_t result = g41; // 0x402040\n    uint64_t v3 = g40; // 0x402047\n    int64_t v4 = a1; // 0x402051\n    int64_t v5 = a1; // 0x402051\n    int64_t v6; // 0x402030\n    int64_t v7; // 0x402030\n    if (v1 == 0) {\n        goto lab_0x40208b;\n    } else {\n        int64_t v8 = 8 * v2 + result;\n        v4 = *(int64_t *)(v8 - 8);\n        if (v4 > a1) {\n            // 0x402069\n            v6 = 0;\n            v7 = v4;\n            if (v3 != v2) {\n                // 0x40206e\n                *(int64_t *)v8 = a1;\n                g39 = v1 + 1;\n                // 0x40207d\n                return result;\n            }\n            goto lab_0x4020c2;\n        } else {\n            // 0x402144\n            v5 = a1 - v4;\n            goto lab_0x40208b;\n        }\n    }\n  lab_0x40208b:;\n    int64_t result2 = result; // 0x40208e\n    int64_t v9 = v2; // 0x40208e\n    int64_t v10 = v5; // 0x40208e\n    v6 = v5;\n    v7 = v4;\n    if (v3 == v2) {\n        goto lab_0x4020c2;\n    } else {\n        goto lab_0x402090;\n    }\n  lab_0x4020c2:;\n    // 0x4020c2\n    int64_t v11; // 0x402030\n    int64_t v12; // 0x402030\n    if (result == 0) {\n        // 0x402110\n        v11 = 16;\n        v12 = 128;\n        if (v3 != 0) {\n            int64_t v13 = 8 * v3; // 0x402124\n            v11 = v3;\n            v12 = v13;\n            if (v13 > -1 != v3 < 0x2000000000000000) {\n                // 0x40212f\n                function_404e70(v7);\n                // UNREACHABLE\n            }\n        }\n    } else {\n        if (v3 >= 0xaaaaaaaaaaaaaaa) {\n            // 0x40212f\n            function_404e70(v7);\n            // UNREACHABLE\n        }\n        int64_t v14 = v3 + 1 + v3 / 2; // 0x4020dc\n        v11 = v14;\n        v12 = 8 * v14;\n    }\n    // 0x4020e9\n    g40 = v11;\n    int64_t v15 = function_404c80(result, v12); // 0x4020f3\n    g41 = v15;\n    result2 = v15;\n    v9 = g39;\n    v10 = v6;\n    goto lab_0x402090;\n  lab_0x402090:\n    // 0x402090\n    *(int64_t *)(8 * v9 + result2) = a1;\n    g39 = (int32_t)v9 + 1;\n    if (v10 <= (int64_t)g57) {\n        // 0x40207d\n        return result2;\n    }\n    // 0x4020a8\n    g57 = v10;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402150",
            "funcStartAddr": "402150",
            "funcEndAddr": "402497",
            "decompiledFuncCode": "int64_t function_402150(int64_t a1) {\n    char v1 = a1;\n    int64_t v2 = 0; // 0x402165\n    char v3 = 1; // 0x402165\n    int64_t v4 = a1; // 0x402165\n    int64_t v5 = 0; // 0x402165\n    int64_t v6 = 0; // 0x402165\n    int64_t v7 = 0; // 0x402165\n    int64_t v8 = 0; // 0x402165\n    if (v1 == 0) {\n        // 0x402271\n        int64_t result; // 0x402150\n        return result;\n    }\n    char v9 = v1; // 0x402165\n    int64_t v10; // 0x402150\n    int64_t v11; // 0x402150\n    int64_t v12; // 0x402150\n    int64_t v13; // 0x402150\n    int64_t v14; // 0x402150\n    int64_t v15; // 0x402150\n    int64_t v16; // 0x402150\n    int64_t result3; // 0x402150\n    int64_t v17; // 0x402150\n    int64_t v18; // 0x402150\n    char v19; // 0x402150\n    char v20; // 0x402150\n    int64_t str; // 0x402150\n    while (true) {\n      lab_0x4021ee:\n        // 0x4021ee\n        v15 = v8;\n        v11 = v6;\n        char v21 = v3;\n        str = v2;\n        int64_t v22 = v4; // 0x402227\n        int64_t v23 = v5; // 0x402150\n        int64_t v24 = v7; // 0x402150\n        char v25 = v9; // 0x402227\n        char v26; // 0x402150\n        int64_t v27; // 0x402150\n        while (true) {\n            // 0x4021ee\n            v26 = v25;\n            v13 = v24;\n            v18 = v23;\n            v27 = v22;\n            if (v26 != 44) {\n                int16_t * v28 = *__ctype_b_loc(); // 0x402199\n                if (*(char *)(2 * (int64_t)v26 + (int64_t)v28) % 2 == 0) {\n                    // break -> 0x4021a2\n                    break;\n                }\n            }\n            // 0x4021f4\n            v2 = str;\n            v19 = v21;\n            v16 = v27;\n            v17 = v18;\n            v10 = v11;\n            v12 = v13;\n            v14 = v15;\n            if ((char)v18 == 0) {\n                goto lab_0x4021e0;\n            }\n            if ((char)v11 != 0) {\n                int64_t v29 = function_401f90(v15); // 0x4022e8\n                if ((char)v29 == 0) {\n                    goto lab_0x40248d;\n                } else {\n                    // 0x4022f8\n                    v2 = str;\n                    v19 = v21;\n                    v16 = v27;\n                    v17 = 0;\n                    v10 = v29 & 0xffffffff;\n                    v12 = v13;\n                    v14 = v15;\n                    goto lab_0x4021e0;\n                }\n            }\n            if ((char)v13 == 0) {\n                // 0x4022b0\n                function_402030(v15);\n                v2 = str;\n                v19 = v21;\n                v16 = v27;\n                v17 = 0;\n                v10 = v13 & 0xffffffff;\n                v12 = v13;\n                v14 = v15;\n                goto lab_0x4021e0;\n            }\n            int64_t v30 = function_401fe0(v15); // 0x402212\n            if ((char)v30 == 0) {\n                // 0x40248d\n                exit(1);\n                // UNREACHABLE\n            }\n            // 0x402222\n            v22 = v27 + 1;\n            v25 = *(char *)v22;\n            v23 = 0;\n            v24 = v30 & 0xffffffff;\n            v20 = v21;\n            result3 = v27;\n            if (v25 == 0) {\n                goto lab_0x402266;\n            }\n        }\n        switch (v26) {\n            case 47: {\n                // 0x4022c8\n                v2 = str;\n                v19 = v21;\n                v16 = v27;\n                v17 = v18;\n                v10 = 1;\n                v12 = 0;\n                v14 = v15;\n                if ((char)v18 != 0) {\n                    // 0x4023b0\n                    function_404660(v27);\n                    error(0, (int32_t)\"'/' specifier not at start of number: %s\" ^ (int32_t)\"'/' specifier not at start of number: %s\", dcgettext(NULL, \"'/' specifier not at start of number: %s\", 5));\n                    v2 = str;\n                    v19 = 0;\n                    v16 = v27;\n                    v17 = v18;\n                    v10 = v18 & 0xffffffff;\n                    v12 = 0;\n                    v14 = v15;\n                }\n                goto lab_0x4021e0;\n            }\n            case 43: {\n                // 0x402308\n                v2 = str;\n                v19 = v21;\n                v16 = v27;\n                v17 = v18;\n                v10 = 0;\n                v12 = 1;\n                v14 = v15;\n                if ((char)v18 != 0) {\n                    // 0x4023f0\n                    function_404660(v27);\n                    error(0, (int32_t)\"'+' specifier not at start of number: %s\" ^ (int32_t)\"'+' specifier not at start of number: %s\", dcgettext(NULL, \"'+' specifier not at start of number: %s\", 5));\n                    v2 = str;\n                    v19 = 0;\n                    v16 = v27;\n                    v17 = v18;\n                    v10 = 0;\n                    v12 = v18 & 0xffffffff;\n                    v14 = v15;\n                }\n                goto lab_0x4021e0;\n            }\n            default: {\n                int32_t v31 = (int32_t)v26 - 48; // 0x4021ba\n                if (v26 != 57 && v31 >= 9) {\n                    // 0x402460\n                    function_404660(v27);\n                    error(0, (int32_t)\"tab size contains invalid character(s): %s\" ^ (int32_t)\"tab size contains invalid character(s): %s\", dcgettext(NULL, \"tab size contains invalid character(s): %s\", 5));\n                    goto lab_0x40248d;\n                }\n                if ((char)v18 != 0) {\n                    if (v15 < 0x199999999999999a) {\n                        int64_t v32 = 10 * v15 + (int64_t)v31; // 0x402287\n                        v2 = str;\n                        v19 = v21;\n                        v16 = v27;\n                        v17 = v18;\n                        v10 = v11;\n                        v12 = v13;\n                        v14 = v32;\n                        if (v32 < v15) {\n                            goto lab_0x40233b;\n                        } else {\n                            goto lab_0x4021e0;\n                        }\n                    } else {\n                        goto lab_0x40233b;\n                    }\n                } else {\n                    // 0x4021cf\n                    v2 = v27;\n                    v19 = v21;\n                    v16 = v27;\n                    v17 = 1;\n                    v10 = v11;\n                    v12 = v13;\n                    v14 = v31;\n                    goto lab_0x4021e0;\n                }\n            }\n        }\n    }\n  lab_0x402238:\n    // 0x402238\n    v20 = v3;\n    int64_t v33; // 0x402150\n    result3 = v33;\n    if ((char)v5 != 0) {\n        if (v3 == 0) {\n            // 0x40248d\n            exit(1);\n            // UNREACHABLE\n        }\n        if ((char)v6 != 0) {\n            int64_t result2 = function_401f90(v8); // 0x402443\n            if ((char)result2 != 0) {\n                // 0x402271\n                return result2;\n            }\n          lab_0x40248d:\n            // 0x40248d\n            exit(1);\n            // UNREACHABLE\n        }\n        if ((char)v7 == 0) {\n            // 0x402430\n            return function_402030(v8);\n        }\n        int64_t v34 = function_401fe0(v8); // 0x40225d\n        v20 = v34;\n        result3 = v34;\n    }\n  lab_0x402266:\n    // 0x402266\n    if (v20 == 0) {\n        // 0x40248d\n        exit(1);\n        // UNREACHABLE\n    }\n    // 0x402271\n    return result3;\n  lab_0x4021e0:\n    // 0x4021e0\n    v8 = v14;\n    v7 = v12;\n    v6 = v10;\n    v5 = v17;\n    v33 = v16;\n    v3 = v19;\n    v4 = v33 + 1;\n    v9 = *(char *)v4;\n    if (v9 == 0) {\n        // break -> 0x402238\n        goto lab_0x402238;\n    }\n    goto lab_0x4021ee;\n  lab_0x40233b:;\n    int32_t ini_seg_bytes = strspn((char *)str, \"0123456789\"); // 0x402347\n    int64_t v35 = function_404eb0(); // 0x402359\n    function_404660(v35);\n    error(0, (int32_t)\"tab stop is too large %s\" ^ (int32_t)\"tab stop is too large %s\", dcgettext(NULL, \"tab stop is too large %s\", 5));\n    free((int64_t *)v35);\n    v2 = str;\n    v19 = 0;\n    v16 = str - 1 + (int64_t)ini_seg_bytes;\n    v17 = v18;\n    v10 = v11;\n    v12 = v13;\n    v14 = v15;\n    goto lab_0x4021e0;\n}\n"
        },
        {
            "funcName": "function_4024a0",
            "funcStartAddr": "4024a0",
            "funcEndAddr": "4025e5",
            "decompiledFuncCode": "int64_t function_4024a0(void) {\n    // 0x4024a0\n    char * format; // 0x40253e\n    int64_t v1; // 0x4024f2\n    int64_t v2; // 0x4024bb\n    if (g39 == 0) {\n        goto lab_0x402558;\n    } else {\n        // 0x4024bb\n        v2 = *(int64_t *)g41;\n        int64_t v3 = v2; // 0x4024c4\n        if (v2 == 0) {\n            goto lab_0x4025b0;\n        } else {\n            int64_t v4 = 1; // 0x4024e9\n            while (v4 != (int64_t)g39) {\n                uint64_t v5 = *(int64_t *)(8 * v4 + g41); // 0x4024d0\n                if (v5 == 0) {\n                    goto lab_0x4025b0;\n                }\n                uint64_t v6 = v3;\n                v3 = v5;\n                if (v6 >= v5) {\n                    // 0x40258a\n                    error(1, (int32_t)\"tab sizes must be ascending\" ^ (int32_t)\"tab sizes must be ascending\", dcgettext(NULL, \"tab sizes must be ascending\", 5));\n                    goto lab_0x4025b0;\n                }\n                v4++;\n            }\n            // 0x4024f2\n            v1 = g42;\n            if (v1 == 0) {\n                goto lab_0x402508;\n            } else {\n                // 0x4024fe\n                if ((int64_t)g43 != 0) {\n                    // 0x402532\n                    format = dcgettext(NULL, \"'/' specifier is mutually exclusive with '+'\", 5);\n                    error(1, (int32_t)\"'/' specifier is mutually exclusive with '+'\" ^ (int32_t)\"'/' specifier is mutually exclusive with '+'\", format);\n                    goto lab_0x402558;\n                } else {\n                    goto lab_0x402508;\n                }\n            }\n        }\n    }\n  lab_0x4025b0:;\n    char * format2 = dcgettext(NULL, \"tab size cannot be 0\", 5); // 0x4025bc\n    error(1, (int32_t)\"tab size cannot be 0\" ^ (int32_t)\"tab size cannot be 0\", format2);\n    int64_t v7 = g43; // 0x4025cd\n    int64_t v8 = (int64_t)format2; // 0x4025cd\n    goto lab_0x4025d2;\n  lab_0x402558:;\n    int64_t v10 = g42; // 0x402558\n    int64_t v11 = g43;\n    v7 = v11;\n    v8 = v10;\n    int128_t v9; // 0x402577\n    if (v10 == 0) {\n        int64_t result2 = v11 == 0 ? 8 : v11;\n        v9 = result2;\n        g57 = v9;\n        g44 = v9;\n        return result2;\n    }\n    goto lab_0x4025d2;\n  lab_0x4025d2:;\n    int64_t result = v8; // 0x4025da\n    if (v7 == 0) {\n        // 0x402577\n        v9 = result;\n        g57 = v9;\n        g44 = v9;\n        return result;\n    }\n    // 0x402532\n    format = dcgettext(NULL, \"'/' specifier is mutually exclusive with '+'\", 5);\n    error(1, (int32_t)\"'/' specifier is mutually exclusive with '+'\" ^ (int32_t)\"'/' specifier is mutually exclusive with '+'\", format);\n    goto lab_0x402558;\n  lab_0x402508:;\n    int64_t result3 = v1; // 0x40250c\n    int128_t v12 = 0; // 0x40250c\n    if (g39 == 1) {\n        int64_t v13 = g43 | g42; // 0x402520\n        result3 = v13;\n        v12 = v13 != 0 ? 0 : (int128_t)v2;\n    }\n    // 0x402519\n    g44 = v12;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_4025f0",
            "funcStartAddr": "4025f0",
            "funcEndAddr": "402698",
            "decompiledFuncCode": "int64_t function_4025f0(uint64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = g44; // 0x4025f0\n    *(char *)a3 = 0;\n    uint64_t v2; // 0x4025f0\n    if (v1 != 0) {\n        // 0x402660\n        v2 = v1;\n        return v2 + a1 - a1 % v2;\n    }\n    uint64_t v3 = (int64_t)a2;\n    uint64_t v4 = (int64_t)g39; // 0x402602\n    int64_t result2; // 0x4025f0\n    if (v3 < v4) {\n        uint64_t result = *(int64_t *)(g41 + 8 * v3); // 0x402615\n        if (result > a1) {\n            // 0x402659\n            return result;\n        }\n        int64_t v5 = v3 + 1; // 0x402622\n        *a2 = v5;\n        while (v5 != v4) {\n            // 0x402628\n            v5++;\n            uint64_t v6 = *(int64_t *)(g41 - 8 + 8 * v5); // 0x40262c\n            result2 = v6;\n            if (v6 > a1) {\n                // 0x402659\n                return result2;\n            }\n            *a2 = v5;\n        }\n    }\n    int64_t v7 = g43; // 0x40263e\n    if (v7 != 0) {\n        // 0x402660\n        v2 = v7;\n        return v2 + a1 - a1 % v2;\n    }\n    int64_t v8 = g42; // 0x40264a\n    if (v8 != 0) {\n        // 0x402678\n        result2 = v8 + a1 - (a1 - *(int64_t *)(8 * v4 - 8 + g41)) % v8;\n    } else {\n        // 0x402656\n        *(char *)a3 = 1;\n        result2 = v8;\n    }\n    // 0x402659\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4026a0",
            "funcStartAddr": "4026a0",
            "funcEndAddr": "4026bb",
            "decompiledFuncCode": "int64_t function_4026a0(int64_t a1) {\n    // 0x4026a0\n    g37 = 0;\n    g38 = a1 == 0 ? (int64_t)&g16 : a1;\n    return (int64_t)&g16;\n}\n"
        },
        {
            "funcName": "function_4026c0",
            "funcStartAddr": "4026c0",
            "funcEndAddr": "4028a0",
            "decompiledFuncCode": "int64_t function_4026c0(int32_t a1) {\n    // 0x4026c0\n    bool v1; // 0x4026c0\n    if (a1 != 0) {\n        // 0x4026cb\n        if (g36 == NULL) {\n            // 0x402880\n            __assert_fail(\"prev_file\", \"src/expand-common.c\", 341, \"next_file\");\n            return &g60;\n        }\n        int64_t v2 = (int64_t)g36; // 0x4026cb\n        int64_t v3 = v2; // 0x4026e1\n        if ((a1 & 32) != 0) {\n            // 0x402840\n            error(0, *__errno_location(), \"%s\", (char *)function_4044e0(0, 3, v2));\n            g34 = 1;\n            v3 = (int64_t)g36;\n        }\n        int64_t stream = a1;\n        int64_t v4 = v1 ? -1 : 1; // 0x4026f4\n        int64_t v5 = (int64_t)\"-\"; // 0x4026c0\n        int64_t v6 = 2; // 0x4026f4\n        unsigned char v7 = *(char *)v3; // 0x4026f4\n        char v8 = *(char *)v5; // 0x4026f4\n        int64_t v9 = v3 + v4; // 0x4026f4\n        char v10 = v8; // 0x4026f4\n        bool v11 = false; // 0x4026f4\n        while (v7 == v8) {\n            v6--;\n            v5 += v4;\n            v10 = v7;\n            v11 = true;\n            if (v6 == 0) {\n                // break -> \n                break;\n            }\n            v7 = *(char *)v9;\n            v8 = *(char *)v5;\n            v9 += v4;\n            v10 = v8;\n            v11 = false;\n        }\n        unsigned char v12 = v10;\n        if ((v7 >= v12 && !v11) != v7 < v12) {\n            // 0x4027f0\n            if ((int32_t)function_404ed0(stream, v9) != 0) {\n                int64_t v13 = function_4044e0(0, 3, (int64_t)g36); // 0x40280b\n                error(0, *__errno_location(), \"%s\", (char *)v13);\n                g34 = 1;\n            }\n        } else {\n            // 0x402706\n            clearerr_unlocked((struct _IO_FILE *)stream);\n        }\n    }\n    int64_t v14 = *(int64_t *)g38; // 0x402717\n    g38 += 8;\n    if (v14 == 0) {\n        // 0x4027e0\n        return 0;\n    }\n    int64_t v15 = v1 ? -1 : 1; // 0x40279c\n    int64_t v16 = 2; // 0x40279c\n    int64_t v17 = v14;\n    int64_t v18 = (int64_t)\"-\";\n    unsigned char v19 = *(char *)v17; // 0x40279c\n    char v20 = *(char *)v18; // 0x40279c\n    char v21 = v20; // 0x40279c\n    bool v22 = false; // 0x40279c\n    int64_t v23; // 0x4026c0\n    int64_t v24; // 0x4026c0\n    while (v19 == v20) {\n        v16--;\n        v23 = v18 + v15;\n        v24 = v17 + v15;\n        v21 = v19;\n        v22 = true;\n        if (v16 == 0) {\n            // break -> \n            break;\n        }\n        v17 = v24;\n        v18 = v23;\n        v19 = *(char *)v17;\n        v20 = *(char *)v18;\n        v21 = v20;\n        v22 = false;\n    }\n    unsigned char v25 = v21;\n    char * file_path; // 0x4026c0\n    if ((v19 >= v25 && !v22) == v19 < v25) {\n        // 0x402730\n        g37 = 1;\n        if (g29 != 0) {\n            // break -> 0x4027b9\n            break;\n        }\n    } else {\n        // 0x4027a7\n        file_path = (char *)v14;\n        if (fopen(file_path, \"r\") != NULL) {\n            // 0x4027b9\n            goto lab_0x4027b9_2;\n        }\n    }\n    // 0x402743\n    error(0, *__errno_location(), \"%s\", (char *)function_4044e0(0, 3, v14));\n    g34 = 1;\n    int64_t v26 = *(int64_t *)g38; // 0x40277e\n    g38 += 8;\n    while (v26 != 0) {\n        int64_t v27 = v26;\n        v16 = 2;\n        v17 = v27;\n        v18 = (int64_t)\"-\";\n        v19 = *(char *)v17;\n        v20 = *(char *)v18;\n        v21 = v20;\n        v22 = false;\n        while (v19 == v20) {\n            v16--;\n            v23 = v18 + v15;\n            v24 = v17 + v15;\n            v21 = v19;\n            v22 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = v24;\n            v18 = v23;\n            v19 = *(char *)v17;\n            v20 = *(char *)v18;\n            v21 = v20;\n            v22 = false;\n        }\n        v25 = v21;\n        if ((v19 >= v25 && !v22) == v19 < v25) {\n            // 0x402730\n            g37 = 1;\n            if (g29 != 0) {\n                // break -> 0x4027b9\n                break;\n            }\n        } else {\n            // 0x4027a7\n            file_path = (char *)v27;\n            if (fopen(file_path, \"r\") != NULL) {\n                // 0x4027b9\n                goto lab_0x4027b9_2;\n            }\n        }\n        // 0x402743\n        error(0, *__errno_location(), \"%s\", (char *)function_4044e0(0, 3, v27));\n        g34 = 1;\n        v26 = *(int64_t *)g38;\n        g38 += 8;\n    }\n    // 0x4027e0\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4028a0",
            "funcStartAddr": "4028a0",
            "funcEndAddr": "4028f0",
            "decompiledFuncCode": "int64_t function_4028a0(void) {\n    // 0x4028a0\n    if (g37 == 0) {\n        // 0x4028a9\n        int64_t result; // 0x4028a0\n        return result;\n    }\n    // 0x4028b0\n    int64_t v1; // 0x4028a0\n    int64_t result2 = function_404ed0(g29, v1); // 0x4028bb\n    if ((int32_t)result2 == 0) {\n        // 0x4028a9\n        return result2;\n    }\n    // 0x4028c9\n    error(1, *__errno_location(), \"-\");\n    return &g60;\n}\n"
        },
        {
            "funcName": "function_4028f0",
            "funcStartAddr": "4028f0",
            "funcEndAddr": "402938",
            "decompiledFuncCode": "int64_t function_4028f0(int64_t a1) {\n    // 0x4028f0\n    fputs_unlocked(dcgettext(NULL, \"  -t, --tabs=LIST  use comma separated list of tab positions\\n\", 5), g28);\n    char * v1 = dcgettext(NULL, \"                     The last specified position can be prefixed with '/'\\n                     to specify a tab size to use after the last\\n                     explicitly specified tab stop.  Also a prefix of '+'\\n                     can be used to align remaining tab stops relative to\\n                     the last specified tab stop instead of the first column\\n\", 5); // 0x402927\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_402940",
            "funcStartAddr": "402940",
            "funcEndAddr": "402948",
            "decompiledFuncCode": "int64_t function_402940(int64_t a1) {\n    // 0x402940\n    g46 = a1;\n    int64_t result; // 0x402940\n    return result;\n}\n"
        },
        {
            "funcName": "function_402950",
            "funcStartAddr": "402950",
            "funcEndAddr": "402958",
            "decompiledFuncCode": "int64_t function_402950(int64_t a1) {\n    // 0x402950\n    g45 = a1;\n    int64_t result; // 0x402950\n    return result;\n}\n"
        },
        {
            "funcName": "function_402960",
            "funcStartAddr": "402960",
            "funcEndAddr": "4029fe",
            "decompiledFuncCode": "int64_t function_402960(void) {\n    // 0x402960\n    int32_t * err_num; // 0x402976\n    if ((int32_t)function_405e40((int64_t)g28) == 0) {\n        goto lab_0x40298c;\n    } else {\n        // 0x402976\n        err_num = __errno_location();\n        if (g45 == 0) {\n            goto lab_0x4029a3;\n        } else {\n            // 0x402987\n            if (*err_num != 32) {\n                goto lab_0x4029a3;\n            } else {\n                goto lab_0x40298c;\n            }\n        }\n    }\n  lab_0x40298c:;\n    int64_t result = function_405e40((int64_t)g31); // 0x402993\n    if ((int32_t)result == 0) {\n        // 0x40299c\n        return result;\n    }\n    // 0x4029de\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x4029a3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4029af\n    if (g46 == 0) {\n        // 0x4029e9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4029c3\n        error(0, *err_num, \"%s: %s\", (char *)function_4044b0((int64_t)g46), v1);\n    }\n    // 0x4029de\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a00",
            "funcStartAddr": "402a00",
            "funcEndAddr": "402a05",
            "decompiledFuncCode": "int64_t function_402a00(void) {\n    // 0x402a00\n    int64_t fd; // 0x402a00\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402a10",
            "funcStartAddr": "402a10",
            "funcEndAddr": "402a31",
            "decompiledFuncCode": "int64_t function_402a10(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402a10\n    if (stream == 0) {\n        // 0x402a30\n        int64_t result; // 0x402a10\n        return result;\n    }\n    // 0x402a15\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402a40",
            "funcStartAddr": "402a40",
            "funcEndAddr": "402ad9",
            "decompiledFuncCode": "int64_t function_402a40(int64_t str) {\n    // 0x402a40\n    if (str == 0) {\n        // 0x402ab9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402a4e\n    int64_t result = (int64_t)found_char_pos; // 0x402a4e\n    if (found_char_pos == NULL) {\n        // 0x402aa9\n        g47 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402a58\n    if (v1 - str < 7) {\n        // 0x402aa9\n        g47 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x402a68\n    bool v2; // 0x402a40\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402a40\n    int64_t v5 = result - 6; // 0x402a40\n    int64_t v6 = 7; // 0x402a76\n    unsigned char v7 = *(char *)v5; // 0x402a76\n    char v8 = *(char *)v4; // 0x402a76\n    char v9 = v8; // 0x402a76\n    bool v10 = false; // 0x402a76\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402a80\n    int64_t v13 = v1; // 0x402a80\n    int64_t v14 = 3; // 0x402a80\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402aa9\n        g47 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402a92\n    char v16 = *(char *)v12; // 0x402a92\n    char v17 = v16; // 0x402a92\n    bool v18 = false; // 0x402a92\n    while (v15 == v16) {\n        // 0x402a82\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402a9c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402a9e\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x402aa9\n    g47 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ae0",
            "funcStartAddr": "402ae0",
            "funcEndAddr": "402bd2",
            "decompiledFuncCode": "int64_t function_402ae0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402af4\n    int64_t result = (int64_t)v1; // 0x402af4\n    if (result != a1) {\n        // 0x402b01\n        return result;\n    }\n    int64_t v2 = function_405f00(); // 0x402b10\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402bc6\n    if (v3 == 85) {\n        // 0x402b20\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402bb8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x402b4e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x402b5b\n        // 0x402b01\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402bb8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x402b9d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x402baa\n    // 0x402b01\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402be0",
            "funcStartAddr": "402be0",
            "funcEndAddr": "402c37",
            "decompiledFuncCode": "int64_t function_402be0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402be0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402c28\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402c37",
            "funcStartAddr": "402c37",
            "funcEndAddr": "403e01",
            "decompiledFuncCode": "int64_t function_402c37(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402c81\n    int64_t v3 = 0; // 0x402c81\n    int64_t v4; // 0x402c37\n    int64_t v5; // 0x402c37\n    int64_t v6; // 0x402c37\n    int64_t v7; // 0x402c37\n    int64_t v8; // 0x402c37\n    int64_t v9; // 0x402c37\n    int64_t v10; // 0x402c37\n    int64_t v11; // 0x402c37\n    int64_t v12; // 0x402c37\n    int64_t v13; // 0x402c37\n    int64_t v14; // 0x402c37\n    int64_t v15; // 0x402c37\n    int64_t v16; // 0x402c37\n    int64_t v17; // 0x402c37\n    int64_t v18; // 0x402c37\n    int64_t result; // 0x402c37\n    int64_t v19; // 0x402c37\n    int32_t wc; // bp+132, 0x402c37\n    int64_t ps; // bp+136, 0x402c37\n    char v20; // 0x4031f0\n    int64_t v21; // 0x4031f0\n    int64_t v22; // 0x403598\n    int64_t v23; // 0x402c37\n    int64_t v24; // 0x4035b7\n    int32_t v25; // 0x402c37\n    while (true) {\n      lab_0x402c88_2:\n        // 0x402c88\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402c37\n        int64_t v27; // 0x402cbc\n        while (true) {\n          lab_0x402c88:\n            // 0x402c88\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402c93\n            if (v15 == -1) {\n                // 0x402c95\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402ca3\n            if (v28) {\n                // break (via goto) -> 0x403408\n                goto lab_0x403408;\n            }\n            // 0x402cac\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g59 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40329b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402de1;\n                    }\n                    // 0x4036bd\n                    v26 = v5 + 1;\n                    goto lab_0x402c88;\n                }\n                case 7: {\n                    goto lab_0x402de1;\n                }\n                case 8: {\n                    goto lab_0x402de1;\n                }\n                case 9: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402de1;\n                }\n                case 12: {\n                    goto lab_0x402de1;\n                }\n                case 13: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402dad;\n                }\n                case 36: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402de1;\n                }\n                case 38: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402de1;\n                }\n                case 44: {\n                    goto lab_0x402de1;\n                }\n                case 45: {\n                    goto lab_0x402de1;\n                }\n                case 46: {\n                    goto lab_0x402de1;\n                }\n                case 47: {\n                    goto lab_0x402de1;\n                }\n                case 48: {\n                    goto lab_0x402de1;\n                }\n                case 49: {\n                    goto lab_0x402de1;\n                }\n                case 50: {\n                    goto lab_0x402de1;\n                }\n                case 51: {\n                    goto lab_0x402de1;\n                }\n                case 52: {\n                    goto lab_0x402de1;\n                }\n                case 53: {\n                    goto lab_0x402de1;\n                }\n                case 54: {\n                    goto lab_0x402de1;\n                }\n                case 55: {\n                    goto lab_0x402de1;\n                }\n                case 56: {\n                    goto lab_0x402de1;\n                }\n                case 57: {\n                    goto lab_0x402de1;\n                }\n                case 58: {\n                    goto lab_0x402de1;\n                }\n                case 59: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402de1;\n                }\n                case 66: {\n                    goto lab_0x402de1;\n                }\n                case 67: {\n                    goto lab_0x402de1;\n                }\n                case 68: {\n                    goto lab_0x402de1;\n                }\n                case 69: {\n                    goto lab_0x402de1;\n                }\n                case 70: {\n                    goto lab_0x402de1;\n                }\n                case 71: {\n                    goto lab_0x402de1;\n                }\n                case 72: {\n                    goto lab_0x402de1;\n                }\n                case 73: {\n                    goto lab_0x402de1;\n                }\n                case 74: {\n                    goto lab_0x402de1;\n                }\n                case 75: {\n                    goto lab_0x402de1;\n                }\n                case 76: {\n                    goto lab_0x402de1;\n                }\n                case 77: {\n                    goto lab_0x402de1;\n                }\n                case 78: {\n                    goto lab_0x402de1;\n                }\n                case 79: {\n                    goto lab_0x402de1;\n                }\n                case 80: {\n                    goto lab_0x402de1;\n                }\n                case 81: {\n                    goto lab_0x402de1;\n                }\n                case 82: {\n                    goto lab_0x402de1;\n                }\n                case 83: {\n                    goto lab_0x402de1;\n                }\n                case 84: {\n                    goto lab_0x402de1;\n                }\n                case 85: {\n                    goto lab_0x402de1;\n                }\n                case 86: {\n                    goto lab_0x402de1;\n                }\n                case 87: {\n                    goto lab_0x402de1;\n                }\n                case 88: {\n                    goto lab_0x402de1;\n                }\n                case 89: {\n                    goto lab_0x402de1;\n                }\n                case 90: {\n                    goto lab_0x402de1;\n                }\n                case 91: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402de1;\n                }\n                case 94: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402de1;\n                }\n                case 96: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402de1;\n                }\n                case 98: {\n                    goto lab_0x402de1;\n                }\n                case 99: {\n                    goto lab_0x402de1;\n                }\n                case 100: {\n                    goto lab_0x402de1;\n                }\n                case 101: {\n                    goto lab_0x402de1;\n                }\n                case 102: {\n                    goto lab_0x402de1;\n                }\n                case 103: {\n                    goto lab_0x402de1;\n                }\n                case 104: {\n                    goto lab_0x402de1;\n                }\n                case 105: {\n                    goto lab_0x402de1;\n                }\n                case 106: {\n                    goto lab_0x402de1;\n                }\n                case 107: {\n                    goto lab_0x402de1;\n                }\n                case 108: {\n                    goto lab_0x402de1;\n                }\n                case 109: {\n                    goto lab_0x402de1;\n                }\n                case 110: {\n                    goto lab_0x402de1;\n                }\n                case 111: {\n                    goto lab_0x402de1;\n                }\n                case 112: {\n                    goto lab_0x402de1;\n                }\n                case 113: {\n                    goto lab_0x402de1;\n                }\n                case 114: {\n                    goto lab_0x402de1;\n                }\n                case 115: {\n                    goto lab_0x402de1;\n                }\n                case 116: {\n                    goto lab_0x402de1;\n                }\n                case 117: {\n                    goto lab_0x402de1;\n                }\n                case 118: {\n                    goto lab_0x402de1;\n                }\n                case 119: {\n                    goto lab_0x402de1;\n                }\n                case 120: {\n                    goto lab_0x402de1;\n                }\n                case 121: {\n                    goto lab_0x402de1;\n                }\n                case 122: {\n                    goto lab_0x402de1;\n                }\n                case 123: {\n                    goto lab_0x402d85;\n                }\n                case 124: {\n                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402d85;\n                }\n                case 126: {\n                    goto lab_0x402dad;\n                }\n                default: {\n                    goto lab_0x403185;\n                }\n            }\n        }\n      lab_0x403185:\n        if (v23 != 1) {\n            // 0x4034f0\n            ps = 0;\n            int64_t len = v15; // 0x403500\n            if (v15 == -1) {\n                // 0x403502\n                len = strlen((char *)str);\n            }\n            // 0x40352e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40358f:\n                // 0x40358f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403594\n                int64_t v30 = v29 + str;\n                v24 = function_405dc0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403b0a_2;\n                    }\n                    case -1: {\n                        goto lab_0x403b0a_2;\n                    }\n                    case -2: {\n                        // 0x403bed\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403c27\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403c2a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403c37\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403c30\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403b0a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403b0a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403560;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40360c\n                        char v34 = *(char *)v33; // 0x40361d\n                        unsigned char v35; // 0x402c37\n                        if (v34 < 125) {\n                            // 0x403628\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40363f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403610\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40361d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403628\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40363f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403610\n                            v33++;\n                        }\n                        goto lab_0x403560;\n                    }\n                }\n            }\n            goto lab_0x403b0a_2;\n        } else {\n            // 0x4031d4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402de1;\n        }\n    }\n  lab_0x403408:\n    // 0x403408\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403d0a\n        if (v8 > result) {\n            // 0x403d13\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403037\n        return result;\n    }\n    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402de1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402df0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402ffa_2;\n        }\n    }\n    int64_t v39 = result; // 0x402ef1\n    char v40 = v20; // 0x402ef1\n    int64_t v41 = v38; // 0x402ef1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402ef1\n    int64_t v43 = v36; // 0x402ef1\n    goto lab_0x402e6d;\n  lab_0x402ffa_2:\n    // 0x403037\n    return function_402be0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403b0a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402de1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4036de\n        int64_t v50 = v5 + 1; // 0x4037c1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4037c8\n        char v52 = v20; // 0x4037c8\n        int64_t v53 = result; // 0x4037c8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403791\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403795\n            int64_t v56 = v54 + 1; // 0x40379a\n            int64_t v57 = v51 + 1; // 0x4037c1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40378c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403791\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403795\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402e6d;\n    }\n  lab_0x403560:\n    // 0x403560\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40357f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403582\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403b0a\n        goto lab_0x403b0a_2;\n    }\n    goto lab_0x40358f;\n  lab_0x402dad:\n    // 0x402dad\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402ffa_2;\n    }\n    goto lab_0x402de1;\n  lab_0x402d85:;\n    bool v60 = v15 == 1; // 0x402d90\n    if (v15 == -1) {\n        // 0x402d92\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402d9e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402de1;\n    } else {\n        goto lab_0x402dad;\n    }\n  lab_0x402e6d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402e72\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402e76\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402c88_2;\n}\n"
        },
        {
            "funcName": "function_403e10",
            "funcStartAddr": "403e10",
            "funcEndAddr": "403fae",
            "decompiledFuncCode": "int64_t function_403e10(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403e12\n    int32_t * v3 = __errno_location(); // 0x403e2c\n    int64_t v4 = (int64_t)g20; // 0x403e31\n    int32_t v5 = *v3; // 0x403e3b\n    int64_t v6 = v4; // 0x403e51\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403fa9\n            function_404e70(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403e60\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403e67\n        int64_t v9; // 0x403e10\n        if (g20 == &g21) {\n            int64_t v10 = function_404c80(0, v8); // 0x403f8a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x403f8f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404c80(v4, v8); // 0x403e7b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x403e8a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x403e8a\n        int32_t v14 = v7; // 0x403e91\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403ec1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403ecb\n    int64_t * v17 = (int64_t *)v15; // 0x403ece\n    uint64_t v18 = *v17; // 0x403ece\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403ed1\n    int64_t result = *v19; // 0x403ed1\n    int64_t v20; // 0x403e10\n    uint64_t v21 = function_402be0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403ef4\n    if (v18 > v21) {\n        // 0x403f6b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403f07\n    *v17 = v22;\n    if (result != (int64_t)&g48) {\n        // 0x403f17\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404c20(v22); // 0x403f31\n    *v19 = result2;\n    int64_t v23; // 0x403e10\n    function_402be0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403f6b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403fb0",
            "funcStartAddr": "403fb0",
            "funcEndAddr": "403fe4",
            "decompiledFuncCode": "int64_t function_403fb0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403fb7\n    int64_t result = function_404e20(a1 == 0 ? (int64_t)&g49 : a1, 56); // 0x403fd6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ff0",
            "funcStartAddr": "403ff0",
            "funcEndAddr": "403fff",
            "decompiledFuncCode": "int64_t function_403ff0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g49 : a1); // 0x403ffc\n    return result;\n}\n"
        },
        {
            "funcName": "function_404000",
            "funcStartAddr": "404000",
            "funcEndAddr": "40400f",
            "decompiledFuncCode": "int64_t function_404000(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g49 : a1; // 0x404008\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g49;\n}\n"
        },
        {
            "funcName": "function_404010",
            "funcStartAddr": "404010",
            "funcEndAddr": "404043",
            "decompiledFuncCode": "int64_t function_404010(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g49 + 8 : a1 + 8; // 0x404029\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40402e\n    uint32_t v3 = *v2; // 0x40402e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404032\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "404063",
            "decompiledFuncCode": "int64_t function_404050(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g49 + 4 : a1 + 4); // 0x40405c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "40409b",
            "decompiledFuncCode": "int64_t function_404070(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g49 : a1; // 0x404078\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404095\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40408c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g49;\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "404112",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g49 : a5; // 0x4040c2\n    int32_t * v2 = __errno_location(); // 0x4040cb\n    uint32_t v3 = *(int32_t *)v1; // 0x4040eb\n    int64_t result = function_402be0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4040fa\n    return result;\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "404201",
            "decompiledFuncCode": "int64_t function_404120(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g49 : a4; // 0x404142\n    int32_t * v2 = __errno_location(); // 0x404148\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404167\n    int32_t * v4 = (int32_t *)v1; // 0x40416a\n    int64_t v5 = function_402be0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404185\n    int64_t v6 = v5 + 1; // 0x40418a\n    int64_t result = function_404c20(v6); // 0x40419f\n    function_402be0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4041e4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4041ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "40421a",
            "decompiledFuncCode": "int64_t function_404210(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404210\n    return function_404120(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404220",
            "funcStartAddr": "404220",
            "funcEndAddr": "4042b5",
            "decompiledFuncCode": "int64_t function_404220(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x404220\n    int64_t v2 = v1; // 0x404220\n    int64_t v3 = v2; // 0x404234\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x404253\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g60;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404250\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g60;\n        }\n    }\n    int64_t v6 = v3; // 0x40426d\n    if (g21 != 0x60a320) {\n        // 0x40426f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g48;\n        v6 = &g60;\n    }\n    int64_t result = v6; // 0x404291\n    if (g20 != &g21) {\n        // 0x404293\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g60;\n    }\n    // 0x4042a6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "4042d1",
            "decompiledFuncCode": "int64_t function_4042c0(void) {\n    // 0x4042c0\n    int64_t v1; // 0x4042c0\n    return function_403e10(v1, v1, -1, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "4042ea",
            "decompiledFuncCode": "int64_t function_4042e0(void) {\n    // 0x4042e0\n    int64_t v1; // 0x4042e0\n    return function_403e10(v1, v1, v1, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "404306",
            "decompiledFuncCode": "int64_t function_4042f0(int64_t a1) {\n    // 0x4042f0\n    return function_403e10(0, a1, -1, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_404310",
            "funcStartAddr": "404310",
            "funcEndAddr": "404322",
            "decompiledFuncCode": "int64_t function_404310(int64_t a1, int64_t a2) {\n    // 0x404310\n    return function_403e10(0, a1, a2, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_404330",
            "funcStartAddr": "404330",
            "funcEndAddr": "404398",
            "decompiledFuncCode": "int64_t function_404330(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404340\n    return function_403e10((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "404404",
            "decompiledFuncCode": "int64_t function_4043a0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4043b0\n    return function_403e10((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "40441c",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2) {\n    // 0x404410\n    return function_404330(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404420",
            "funcStartAddr": "404420",
            "funcEndAddr": "40442f",
            "decompiledFuncCode": "int64_t function_404420(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404420\n    return function_4043a0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "4044a0",
            "decompiledFuncCode": "int64_t function_404430(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g49); // 0x40443d\n    int128_t v2 = __asm_movdqa(g50); // 0x404445\n    int128_t v3 = __asm_movdqa(g51); // 0x40444d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404462\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404478\n    uint32_t v6 = *v5; // 0x404478\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40447d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403e10(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4044a0",
            "funcStartAddr": "4044a0",
            "funcEndAddr": "4044ad",
            "decompiledFuncCode": "int64_t function_4044a0(int64_t a1, int64_t a2) {\n    // 0x4044a0\n    return function_404430(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4044b0",
            "funcStartAddr": "4044b0",
            "funcEndAddr": "4044c1",
            "decompiledFuncCode": "int64_t function_4044b0(int64_t a1) {\n    // 0x4044b0\n    return function_404430(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "4044da",
            "decompiledFuncCode": "int64_t function_4044d0(void) {\n    // 0x4044d0\n    int64_t v1; // 0x4044d0\n    return function_404430(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "40454e",
            "decompiledFuncCode": "int64_t function_4044e0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4044fa\n    return function_403e10((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404550",
            "funcStartAddr": "404550",
            "funcEndAddr": "4045bc",
            "decompiledFuncCode": "int64_t function_404550(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g49); // 0x404557\n    int128_t v2 = __asm_movdqa(g50); // 0x40455f\n    int128_t v3 = __asm_movdqa(g51); // 0x404567\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404589\n    if (a2 == 0 || a3 == 0) {\n        // 0x4045b7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40459a\n    return function_403e10(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4045c0",
            "funcStartAddr": "4045c0",
            "funcEndAddr": "4045c9",
            "decompiledFuncCode": "int64_t function_4045c0(void) {\n    // 0x4045c0\n    int64_t v1; // 0x4045c0\n    return function_404550(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4045d0",
            "funcStartAddr": "4045d0",
            "funcEndAddr": "4045e7",
            "decompiledFuncCode": "int64_t function_4045d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4045d0\n    return function_404550(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4045f0",
            "funcStartAddr": "4045f0",
            "funcEndAddr": "404603",
            "decompiledFuncCode": "int64_t function_4045f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4045f0\n    return function_404550(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404610",
            "funcStartAddr": "404610",
            "funcEndAddr": "40461a",
            "decompiledFuncCode": "int64_t function_404610(void) {\n    // 0x404610\n    int64_t v1; // 0x404610\n    return function_403e10(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "404632",
            "decompiledFuncCode": "int64_t function_404620(int64_t a1, int64_t a2) {\n    // 0x404620\n    return function_403e10(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_404640",
            "funcStartAddr": "404640",
            "funcEndAddr": "404651",
            "decompiledFuncCode": "int64_t function_404640(void) {\n    // 0x404640\n    int64_t v1; // 0x404640\n    return function_403e10(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404660",
            "funcStartAddr": "404660",
            "funcEndAddr": "404676",
            "decompiledFuncCode": "int64_t function_404660(int64_t a1) {\n    // 0x404660\n    return function_403e10(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "404a5d",
            "decompiledFuncCode": "int64_t function_404680(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404718\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40469c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4046b6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4046fb\n    if (a6 < 10) {\n        // 0x40470a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404802\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404a60",
            "funcStartAddr": "404a60",
            "funcEndAddr": "404a80",
            "decompiledFuncCode": "int64_t function_404a60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404a60\n    if (a5 == 0) {\n        // 0x404a7b\n        return function_404680(a1, a2, a3, a4, a5, 0, (int64_t)&g60);\n    }\n    int64_t v1 = 0; // 0x404a67\n    v1++;\n    int64_t v2 = v1; // 0x404a79\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404a70\n        v1++;\n        v2 = v1;\n    }\n    // 0x404a7b\n    return function_404680(a1, a2, a3, a4, a5, v2, (int64_t)&g60);\n}\n"
        },
        {
            "funcName": "function_404a80",
            "funcStartAddr": "404a80",
            "funcEndAddr": "404ae0",
            "decompiledFuncCode": "int64_t function_404a80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404a80\n    int64_t v3 = &v2; // 0x404a80\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404ab3\n    int64_t v6; // 0x404a9d\n    int64_t * v7; // 0x404abb\n    int64_t v8; // 0x404abb\n    int64_t v9; // 0x404ac7\n    if (v5 < 48) {\n        // 0x404a90\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404ad3\n            break;\n        }\n    } else {\n        // 0x404abb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404ad3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404ab1\n    while (v4 != 9) {\n        // 0x404aa9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404a90\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404ad3\n                break;\n            }\n        } else {\n            // 0x404abb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404ad3\n                break;\n            }\n        }\n        // 0x404aa9\n        v10 = 10;\n    }\n    // 0x404ad3\n    return function_404680(a1, a2, a3, a4, v3, v10, (int64_t)&g60);\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404b9c",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404ae0\n    int64_t v1; // bp-168, 0x404ae0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404ae0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404ae0\n    int64_t v8; // 0x404ae0\n    int64_t v9; // bp-56, 0x404ae0\n    int64_t v10; // 0x404b45\n    int64_t v11; // 0x404b69\n    if ((int32_t)v6 < 48) {\n        // 0x404b30\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404b80\n            break;\n        }\n    } else {\n        // 0x404b62\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404b80\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404b5a\n    int64_t v13 = 10; // 0x404b5a\n    while (v5 != 9) {\n        // 0x404b5c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404b30\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404b80\n                break;\n            }\n        } else {\n            // 0x404b62\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404b80\n                break;\n            }\n        }\n        // 0x404b52\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404b80\n    int64_t v14; // bp-136, 0x404ae0\n    int64_t result = function_404680(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g60); // 0x404b8f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404c14",
            "decompiledFuncCode": "int64_t function_404ba0(int64_t a1) {\n    // 0x404ba0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404c03\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c3a",
            "decompiledFuncCode": "int64_t function_404c20(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404c24\n    if (size != 0 != (mem == NULL)) {\n        // 0x404c33\n        return (int64_t)mem;\n    }\n    // 0x404c35\n    function_404e70(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c61",
            "decompiledFuncCode": "int64_t function_404c40(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404c43\n    int64_t v2 = v1; // 0x404c43\n    if (v2 < 0) {\n        // 0x404c5b\n        function_404e70(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404c59\n        return function_404c20(v2);\n    }\n    // 0x404c5b\n    function_404e70(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c70",
            "funcStartAddr": "404c70",
            "funcEndAddr": "404c72",
            "decompiledFuncCode": "int64_t function_404c70(void) {\n    // 0x404c70\n    int64_t v1; // 0x404c70\n    return function_404c20(v1);\n}\n"
        },
        {
            "funcName": "function_404c80",
            "funcStartAddr": "404c80",
            "funcEndAddr": "404cb6",
            "decompiledFuncCode": "int64_t function_404c80(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404ca8\n        free(v1);\n        return (int32_t)&g60 ^ (int32_t)&g60;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404c91\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404ca0\n        return (int64_t)mem;\n    }\n    // 0x404cb1\n    function_404e70(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cc0",
            "funcStartAddr": "404cc0",
            "funcEndAddr": "404ce1",
            "decompiledFuncCode": "int64_t function_404cc0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404cc3\n    int64_t v2 = v1; // 0x404cc3\n    if (v2 < 0) {\n        // 0x404cdb\n        function_404e70(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404cd9\n        return function_404c80(a1, v2);\n    }\n    // 0x404cdb\n    function_404e70(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d76",
            "decompiledFuncCode": "int64_t function_404cf0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404d4b\n            function_404e70(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404c80(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404d33\n    if (a2 == 0) {\n        // 0x404d58\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404d38\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404d4b\n        function_404e70(a1);\n        // UNREACHABLE\n    }\n    // 0x404d1a\n    *(int64_t *)a2 = v2;\n    return function_404c80(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404d80",
            "funcStartAddr": "404d80",
            "funcEndAddr": "404dd0",
            "decompiledFuncCode": "int64_t function_404d80(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404d80\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404dca\n            function_404e70(a1);\n            // UNREACHABLE\n        }\n        // 0x404da2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404c80(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404db5\n        *(int64_t *)a2 = 128;\n        return function_404c80(0, 128);\n    }\n    // 0x404dc8\n    if (a2 < 0) {\n        // 0x404dca\n        function_404e70(a1);\n        // UNREACHABLE\n    }\n    // 0x404da2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404c80(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404dd0",
            "funcStartAddr": "404dd0",
            "funcEndAddr": "404de7",
            "decompiledFuncCode": "int64_t function_404dd0(int64_t a1, int64_t a2) {\n    // 0x404dd0\n    return (int64_t)memset((int64_t *)function_404c20(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404e1e",
            "decompiledFuncCode": "int64_t function_404df0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404df7\n    if ((int64_t)v1 < 0) {\n        // 0x404e19\n        function_404e70(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404e19\n        function_404e70(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404e0a\n    if (mem != NULL) {\n        // 0x404e14\n        return (int64_t)mem;\n    }\n    // 0x404e19\n    function_404e70(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e48",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404c20(a2); // 0x404e2f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404e50",
            "funcStartAddr": "404e50",
            "funcEndAddr": "404e63",
            "decompiledFuncCode": "int64_t function_404e50(int64_t str) {\n    // 0x404e50\n    return function_404e20(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404e70",
            "funcStartAddr": "404e70",
            "funcEndAddr": "404ea1",
            "decompiledFuncCode": "int64_t function_404e70(int64_t a1) {\n    // 0x404e70\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404eb0",
            "funcStartAddr": "404eb0",
            "funcEndAddr": "404ec8",
            "decompiledFuncCode": "int64_t function_404eb0(void) {\n    // 0x404eb0\n    int64_t str; // 0x404eb0\n    char * v1 = strndup((char *)str, (int32_t)str); // 0x404eb4\n    if (v1 != NULL) {\n        // 0x404ebe\n        return (int64_t)v1;\n    }\n    // 0x404ec3\n    function_404e70(str);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "404f4b",
            "decompiledFuncCode": "int64_t function_404ed0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404ed7\n    if (fileno(stream) < 0) {\n        // 0x404f37\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x404eea\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x404f1b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x404f37\n            return fclose(stream);\n        }\n    }\n    // 0x404eec\n    if ((int32_t)function_404f50(a1, v1) == 0) {\n        // 0x404f37\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x404ef8\n    int32_t v3 = *v2; // 0x404f00\n    int64_t result = fclose(stream); // 0x404f0e\n    if (v3 != 0) {\n        // 0x404f40\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x404f10\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f50",
            "funcStartAddr": "404f50",
            "funcEndAddr": "404f90",
            "decompiledFuncCode": "int64_t function_404f50(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x404f6a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x404f6a\n        return fflush(stream);\n    }\n    // 0x404f78\n    function_404f90(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "404fe7",
            "decompiledFuncCode": "int64_t function_404f90(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x404f90\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x404f9a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x404fcb\n    int64_t result = -1; // 0x404fd4\n    if (v1 != -1) {\n        // 0x404fd6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x404fe2\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ff0",
            "funcStartAddr": "404ff0",
            "funcEndAddr": "4050cf",
            "decompiledFuncCode": "int64_t function_404ff0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x404ffc\n    uint32_t v2 = *v1; // 0x404ffc\n    int64_t v3 = a2 & 0xffffffff; // 0x405001\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405004\n    uint64_t v5 = (int64_t)*v4; // 0x405004\n    int64_t v6; // 0x405072\n    if (v3 <= v5) {\n      lab_0x40506c_2:\n        // 0x40506c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404ff2\n    int64_t v8 = v2; // 0x404ff0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40506c\n        goto lab_0x40506c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405028\n    int64_t v17; // 0x405036\n    int64_t * v18; // 0x405050\n    int64_t * v19; // 0x405053\n    int64_t v20; // 0x40505e\n    int64_t v21; // 0x405036\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405033\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405050\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405067\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40506c\n            goto lab_0x40506c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40506c\n            goto lab_0x40506c_2;\n        }\n        // 0x405022\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4050ab\n    int64_t * v23 = (int64_t *)v22; // 0x4050b0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4050b3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4050b0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4050c7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40501d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40506c\n            goto lab_0x40506c_2;\n        }\n        // 0x405022\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405033\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405050\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405067\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40506c\n                goto lab_0x40506c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40506c\n                goto lab_0x40506c_2;\n            }\n            // 0x405022\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405090\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4050b0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4050c7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40506c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "4056ec",
            "decompiledFuncCode": "int64_t function_4050d0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4050ef\n    int64_t v2 = *v1; // 0x4050ef\n    char * str2 = (char *)v2; // 0x4050fc\n    char c = *str2; // 0x4050fc\n    int64_t v3 = v2; // 0x405128\n    int64_t v4 = 0; // 0x4050d0\n    int32_t v5; // 0x4050d0\n    int64_t v6; // 0x4050d0\n    int64_t v7; // 0x4050d0\n    int64_t v8; // 0x4050d0\n    int64_t v9; // 0x4050d0\n    int64_t v10; // 0x4050d0\n    int64_t v11; // 0x4050d0\n    int64_t v12; // 0x4050d0\n    int64_t v13; // 0x4050d0\n    int64_t str3; // 0x4050d0\n    int64_t v14; // 0x4050d0\n    int64_t v15; // 0x4050d0\n    int64_t v16; // 0x4050d0\n    int64_t v17; // 0x4050d0\n    int32_t v18; // 0x4050d0\n    int32_t v19; // 0x4050d0\n    int32_t v20; // 0x4050d0\n    int32_t v21; // 0x4050d0\n    int32_t v22; // 0x4050d0\n    int32_t v23; // 0x4050d0\n    int32_t v24; // 0x4050d0\n    int32_t v25; // 0x4050d0\n    int32_t v26; // 0x4050d0\n    int32_t v27; // 0x4050d0\n    int32_t v28; // 0x4050d0\n    int32_t v29; // 0x4050d0\n    int64_t nmemb; // 0x4050d0\n    int64_t v30; // 0x4050d0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40512c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405128\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405138\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40513e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405108\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40516c\n                int64_t v34; // 0x4050d0\n                int64_t v35; // 0x4050d0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405175\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4052f0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405186\n                int64_t v37 = *(int64_t *)v36; // 0x40518a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405160\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405175\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4052f0;\n                        }\n                    }\n                    // 0x405186\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4051d6:\n                    // 0x4051d6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405230;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4053a0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405230;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405350\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4051fa;\n                                } else {\n                                    // 0x40535c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4051fa;\n                                    } else {\n                                        // 0x40536a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4051fa;\n                                        } else {\n                                            goto lab_0x405230;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4051fa;\n                            }\n                        }\n                    }\n                }\n              lab_0x405241:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405416\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4055c2\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x4055e2\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40562f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x405649\n                            int64_t v45; // 0x40564b\n                            if (*(char *)v42 != 0) {\n                                // 0x40564b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405643\n                            while (v17 + nmemb != v42) {\n                                // 0x405645\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40564b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x405638\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405670\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x405424\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40557f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405479\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405490\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40533e\n                    return 63;\n                }\n                // 0x405260\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4052e4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4052f0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405300\n                    uint32_t v50 = *v49; // 0x405300\n                    int64_t v51 = v50; // 0x405300\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40530a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405313\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40553f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4054ea\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40533e\n                            return 63;\n                        }\n                        // 0x405388\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40569f\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40559d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4055b0\n                                // 0x40533e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4054ae\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4054c2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40532b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40532e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405332\n                    int64_t result = v59; // 0x405338\n                    if (v58 != 0) {\n                        // 0x40533a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40533e\n                    return result;\n                }\n            } else {\n                // 0x40513e\n                v5 = v32;\n            }\n            // break -> 0x405265\n            break;\n        }\n    }\n    // 0x405265\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40527d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405287\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40533e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4053c9\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4052b6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4052c6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405230:\n    // 0x405230\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405230\n    int64_t v63 = *(int64_t *)v62; // 0x405234\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405241\n        goto lab_0x405241;\n    }\n    goto lab_0x4051d6;\n  lab_0x4051fa:\n    // 0x4051fa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4050d0\n    int32_t v65; // 0x4050d0\n    int32_t v66; // 0x4050d0\n    if (v27 != 0) {\n        goto lab_0x405230;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4053b0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405230;\n            } else {\n                goto lab_0x405221;\n            }\n        } else {\n            // 0x405215\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40550c\n                int64_t v67 = (int64_t)mem; // 0x40550c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405230;\n                } else {\n                    // 0x40551f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405221;\n                }\n            } else {\n                goto lab_0x405221;\n            }\n        }\n    }\n  lab_0x405221:\n    // 0x405221\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405230;\n}\n"
        },
        {
            "funcName": "function_4056f0",
            "funcStartAddr": "4056f0",
            "funcEndAddr": "405cb6",
            "decompiledFuncCode": "int64_t function_4056f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405711\n    if (v3 < 1) {\n        // 0x4058ce\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40570d\n    int32_t v5 = *(int32_t *)a7; // 0x405719\n    uint64_t v6 = a1 & 0xffffffff; // 0x40571b\n    int64_t v7 = v2; // 0x405720\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405723\n    *v8 = 0;\n    int64_t v9; // 0x4056f0\n    int64_t v10; // 0x4056f0\n    int64_t v11; // 0x4056f0\n    int64_t v12; // 0x4056f0\n    int64_t str; // 0x4056f0\n    int64_t v13; // 0x4056f0\n    int64_t v14; // 0x4056f0\n    int64_t v15; // 0x4056f0\n    int64_t v16; // 0x4056f0\n    int64_t v17; // 0x4056f0\n    int32_t v18; // 0x4056f0\n    char v19; // 0x4056f0\n    if (v5 == 0) {\n        // 0x405908\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40573a;\n    } else {\n        // 0x405733\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405780\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405783\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405848;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405796\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4057a6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40585c;\n                } else {\n                    goto lab_0x4057b8;\n                }\n            }\n        } else {\n            goto lab_0x40573a;\n        }\n    }\n  lab_0x40573a:\n    // 0x40573a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405740\n    *v24 = 0;\n    int64_t v25; // 0x4056f0\n    int64_t v26; // 0x4056f0\n    int64_t v27; // 0x4056f0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405830\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40583d;\n        }\n        case 43: {\n            // 0x405b40\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40583d;\n        }\n        default: {\n            // 0x40575c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405abf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405bd8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40583d;\n                } else {\n                    // 0x405acd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40576a;\n                }\n            } else {\n                goto lab_0x40576a;\n            }\n        }\n    }\n  lab_0x405848:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40584f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4057b8;\n    } else {\n        goto lab_0x40585c;\n    }\n  lab_0x40576a:\n    // 0x40576a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40583d;\n  lab_0x40583d:\n    // 0x40583d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405848;\n  lab_0x4057b8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4057b8\n    int64_t v31 = v30; // 0x4057b8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4057ba\n    if ((int64_t)*v32 > v31) {\n        // 0x4057bf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4057c2\n    if (*v33 > v30) {\n        // 0x4057c7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4057ca\n    int64_t v35 = v31; // 0x4057ce\n    int64_t v36 = v15; // 0x4057ce\n    int64_t v37; // 0x4056f0\n    int64_t v38; // 0x4056f0\n    int64_t v39; // 0x4056f0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405938\n        int64_t v41 = v40; // 0x405938\n        v2 = v41;\n        int64_t v42; // 0x4056f0\n        if (*v33 == v40) {\n            // 0x405b20\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405b28\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405944\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405948\n                function_404ff0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405958\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405961\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40596a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405981\n            int64_t v47 = v45 & 0xffffffff; // 0x405985\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40598e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405994\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405996;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405970\n            int64_t v49 = v48 & 0xffffffff; // 0x405970\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405981\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40598e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405994\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405996;\n                    }\n                }\n                // 0x405970\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405b38\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405996;\n    } else {\n        goto lab_0x4057d4;\n    }\n  lab_0x40585c:\n    // 0x40585c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40585f\n    int64_t v51 = v12; // 0x40585f\n    int64_t v52 = v14; // 0x40585f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4057b8;\n    } else {\n        goto lab_0x405865;\n    }\n  lab_0x4057d4:;\n    int32_t v53 = v35; // 0x4057d4\n    int64_t v54; // 0x4056f0\n    int64_t v55; // 0x4056f0\n    int64_t v56; // 0x4056f0\n    int64_t v57; // 0x4056f0\n    int64_t v58; // 0x4056f0\n    int64_t v59; // 0x4056f0\n    char * v60; // 0x4056f0\n    int64_t v61; // 0x4056f0\n    int64_t v62; // 0x4057e9\n    int64_t v63; // 0x4056f0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405923\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405926;\n    } else {\n        // 0x4057dc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4056f0\n        int64_t v66 = v65 ? -1 : 1; // 0x4057f0\n        int64_t v67 = (int64_t)\"--\"; // 0x4056f0\n        int64_t v68 = v62; // 0x4056f0\n        int64_t v69 = 3; // 0x4057f0\n        unsigned char v70 = *(char *)v68; // 0x4057f0\n        char v71 = *(char *)v67; // 0x4057f0\n        char v72 = v71; // 0x4057f0\n        bool v73 = false; // 0x4057f0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4058e0\n            if (*(char *)v62 == 45) {\n                // 0x4059a0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4059a0\n                if (c == 0) {\n                    goto lab_0x4058ea;\n                } else {\n                    // 0x4059ad\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405a30;\n                    } else {\n                        if (c == 45) {\n                            // 0x405c13\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405a85;\n                        } else {\n                            // 0x4059be\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405a30;\n                            } else {\n                                // 0x4059c3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4059e4;\n                                } else {\n                                    // 0x4059ca\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405a30;\n                                    } else {\n                                        goto lab_0x4059e4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4058ea;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405800\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405803\n            int64_t v77 = v35 + 1; // 0x405806\n            int32_t v78 = v77; // 0x405809\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405b70\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405817\n                    function_404ff0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405825\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405926;\n        }\n    }\n  lab_0x405865:;\n    // 0x405865\n    int64_t v79; // bp-104, 0x4056f0\n    int64_t v80 = &v79; // 0x4056fa\n    int64_t v81 = v50 + 1; // 0x405865\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40586c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405871\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405875\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405879\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405881\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405886\n    int32_t c2 = v84; // 0x405886\n    char * found_char_pos = strchr(str2, c2); // 0x405886\n    int64_t v87 = *v82; // 0x40588b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405895\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4058a0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405b90\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405b5d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4058ce\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405886\n    char v91 = *(char *)(v90 + 1); // 0x4058bb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405875\n        if (v91 != 58) {\n            // 0x4058ce\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405ae4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405be8\n                *v8 = 0;\n            } else {\n                // 0x405bcc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405b0e\n            *v83 = 0;\n            // 0x4058ce\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405aee\n        if (v93 != 0) {\n            // 0x405b80\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405b0e\n            *v83 = 0;\n            // 0x4058ce\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405b01\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405b0e\n            *v83 = 0;\n            // 0x4058ce\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405c4a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405bfa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405c01\n        // 0x405b0e\n        *v83 = 0;\n        // 0x4058ce\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405a59\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405a5b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405c80\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405c31\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405c38\n            // 0x4058ce\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405a66\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405a6a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405a85;\n  lab_0x405996:\n    // 0x405996\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4057d4;\n  lab_0x405a85:;\n    int64_t v99 = function_4050d0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405aa3\n    // 0x4058ce\n    return v99 & 0xffffffff;\n  lab_0x405926:;\n    int32_t v100 = v55; // 0x405926\n    if (v100 != (int32_t)v59) {\n        // 0x40592a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4058ce\n    return 0xffffffff;\n  lab_0x4058ea:\n    // 0x4058ea\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4058f1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4058ce\n    return v99 & 0xffffffff;\n  lab_0x405a30:\n    // 0x405a30\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405865;\n  lab_0x4059e4:\n    // 0x4059e4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4050d0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x405a0a\n    if ((int32_t)v101 != -1) {\n        // 0x4058ce\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405a1f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405a30;\n}\n"
        },
        {
            "funcName": "function_405cc0",
            "funcStartAddr": "405cc0",
            "funcEndAddr": "405d16",
            "decompiledFuncCode": "int64_t function_405cc0(int64_t a1) {\n    // 0x405cc0\n    *(int32_t *)&g52 = g26;\n    *(int32_t *)&g53 = g25;\n    int64_t v1; // 0x405cc0\n    int64_t result = function_4056f0(v1, v1, v1, v1, v1, v1, &g52, a1 & 0xffffffff); // 0x405ce6\n    g26 = *(int32_t *)&g52;\n    g58 = g55;\n    *(int32_t *)&g24 = g54;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d20",
            "funcStartAddr": "405d20",
            "funcEndAddr": "405d38",
            "decompiledFuncCode": "int64_t function_405d20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405d20\n    return function_405cc0(1);\n}\n"
        },
        {
            "funcName": "function_405d40",
            "funcStartAddr": "405d40",
            "funcEndAddr": "405d53",
            "decompiledFuncCode": "int64_t function_405d40(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x405d40\n    return function_405cc0(0);\n}\n"
        },
        {
            "funcName": "function_405d60",
            "funcStartAddr": "405d60",
            "funcEndAddr": "405d75",
            "decompiledFuncCode": "int64_t function_405d60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405d60\n    return function_4056f0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405d80",
            "funcStartAddr": "405d80",
            "funcEndAddr": "405d96",
            "decompiledFuncCode": "int64_t function_405d80(void) {\n    // 0x405d80\n    return function_405cc0(0);\n}\n"
        },
        {
            "funcName": "function_405da0",
            "funcStartAddr": "405da0",
            "funcEndAddr": "405db8",
            "decompiledFuncCode": "int64_t function_405da0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405da0\n    return function_4056f0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405dc0",
            "funcStartAddr": "405dc0",
            "funcEndAddr": "405e3a",
            "decompiledFuncCode": "int64_t function_405dc0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405dcb\n    int64_t v2 = (int64_t)&g9; // 0x405dcb\n    int32_t * pwc; // 0x405dc0\n    int64_t v3; // 0x405dc0\n    int64_t n; // 0x405dc0\n    if (a2 == 0) {\n        goto lab_0x405e12;\n    } else {\n        // 0x405dcd\n        if (a3 == 0) {\n            // 0x405df8\n            return -2;\n        }\n        // 0x405dd9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405e12;\n        } else {\n            goto lab_0x405de4;\n        }\n    }\n  lab_0x405e12:\n    // 0x405e12\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405dc0\n    pwc = (int32_t *)&v4;\n    goto lab_0x405de4;\n  lab_0x405de4:;\n    char * wstr = (char *)v3; // 0x405dea\n    int64_t ps; // 0x405dc0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405dea\n    int64_t result = v5; // 0x405dea\n    if (v5 < 0xfffffffe) {\n        // 0x405df8\n        return result;\n    }\n    int64_t result2 = result; // 0x405e29\n    if ((char)function_405ea0(0, v3) == 0) {\n        // 0x405e2b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405df8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405e40",
            "funcStartAddr": "405e40",
            "funcEndAddr": "405e9d",
            "decompiledFuncCode": "int64_t function_405e40(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405e47\n    int64_t v2; // 0x405e40\n    int64_t result = function_404ed0(a1, v2); // 0x405e58\n    if ((v2 & 32) != 0) {\n        // 0x405e80\n        if ((int32_t)result == 0) {\n            // 0x405e84\n            *__errno_location() = 0;\n        }\n        // 0x405e7a\n        return 0xffffffff;\n    }\n    // 0x405e61\n    if ((int32_t)result == 0) {\n        // 0x405e7a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405e68\n    if (v1 == 0) {\n        // 0x405e6a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405e7a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405ea0",
            "funcStartAddr": "405ea0",
            "funcEndAddr": "405efe",
            "decompiledFuncCode": "int64_t function_405ea0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405ea6\n    if (locale == NULL) {\n        // 0x405ed3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405ea6\n    bool v2; // 0x405ea0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g10; // 0x405ea0\n    int64_t v5 = v1; // 0x405ea0\n    int64_t v6 = 2; // 0x405ec5\n    unsigned char v7 = *(char *)v5; // 0x405ec5\n    char v8 = *(char *)v4; // 0x405ec5\n    char v9 = v8; // 0x405ec5\n    bool v10 = false; // 0x405ec5\n    while (v7 == v8) {\n        // 0x405eb8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405ed1\n    int64_t v13 = v1; // 0x405ed1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405ed3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405ed1\n    unsigned char v15 = *(char *)v13; // 0x405eed\n    char v16 = *(char *)v12; // 0x405eed\n    char v17 = v16; // 0x405eed\n    bool v18 = false; // 0x405eed\n    while (v15 == v16) {\n        // 0x405ee0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405f00",
            "funcStartAddr": "405f00",
            "funcEndAddr": "406462",
            "decompiledFuncCode": "int64_t function_405f00(void) {\n    char * v1 = nl_langinfo(14); // 0x405f16\n    char * v2 = g56; // 0x405f1b\n    char * v3; // 0x405f00\n    int64_t v4; // 0x405f00\n    int64_t v5; // 0x405f00\n    int64_t v6; // 0x405f00\n    int64_t v7; // 0x405f00\n    int32_t size; // 0x405f00\n    int32_t size2; // 0x405f00\n    int32_t len; // 0x405fd2\n    int64_t v8; // 0x405fd2\n    char * env_val; // 0x405fbd\n    if (v2 == NULL) {\n        // 0x405fb8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406025;\n        } else {\n            // 0x405fca\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406025;\n            } else {\n                // 0x405fcf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405fbd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406455\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406025;\n                    } else {\n                        // 0x4063c9\n                        size2 = len + 14;\n                        goto lab_0x405feb;\n                    }\n                } else {\n                    goto lab_0x405feb;\n                }\n            }\n        }\n    } else {\n        // 0x405f00\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405f3a;\n    }\n  lab_0x40626c:;\n    // 0x40626c\n    struct _IO_FILE * stream; // 0x4060ab\n    int32_t v10 = __uflow(stream); // 0x40626f\n    int64_t v11; // 0x405f00\n    int64_t v12 = v11; // 0x406279\n    int64_t v13; // 0x405f00\n    int64_t v14 = v13; // 0x406279\n    int32_t v15 = v10; // 0x406279\n    int64_t v16; // 0x405f00\n    int64_t v17 = v16; // 0x406279\n    int64_t v18 = v11; // 0x406279\n    int64_t v19 = v13; // 0x406279\n    int64_t v20 = v16; // 0x406279\n    if (v10 == -1) {\n        // break -> 0x40627f\n        goto lab_0x40627f;\n    }\n    goto lab_0x4060f9;\n  lab_0x4060ee:;\n    // 0x4060ee\n    int64_t v90; // 0x405f00\n    int64_t * v32; // 0x4060e0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405f00\n    v12 = v89;\n    int64_t v91; // 0x405f00\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405f00\n    v17 = v92;\n    goto lab_0x4060f9;\n  lab_0x4060f9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405f00\n    int32_t v25; // bp-120, 0x405f00\n    int32_t v26; // bp-184, 0x405f00\n    int64_t v27; // 0x4060ab\n    int64_t v28; // 0x4060c8\n    int64_t v29; // 0x4060cd\n    int64_t * v30; // 0x4060e4\n    switch (c) {\n        case 32: {\n            goto lab_0x4060e0;\n        }\n        case 10: {\n            goto lab_0x4060e0;\n        }\n        case 9: {\n            goto lab_0x4060e0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4062d1\n            int32_t v33; // 0x405f00\n            char v34; // 0x405f00\n            int32_t v35; // 0x4062de\n            if (v31 < *v30) {\n                // 0x4062b0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4062db\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4062d1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4062b0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4062db\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4062c0\n                v36 = v33;\n            }\n            // 0x4063af\n            if (v36 == -1) {\n                // break -> 0x40627f\n                break;\n            }\n            goto lab_0x4060e0;\n        }\n        default: {\n            // 0x40610f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40627f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406138\n            int64_t v39 = v37 + 4; // 0x40613a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406146\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406148\n            while (v41 == 0) {\n                // 0x406138\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406166\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406172\n            int64_t v45 = v43 + 4; // 0x406174\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406180\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406182\n            while (v47 == 0) {\n                // 0x406172\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40616f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406198\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4061a8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4061ac\n            int64_t v52 = v51 + v48; // 0x4061b5\n            int64_t * mem; // 0x405f00\n            int64_t v53; // 0x405f00\n            int64_t v54; // 0x405f00\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4062eb\n                int64_t v56 = v55 + 3; // 0x4062f7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4061d1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4061e0\n            if (mem == NULL) {\n                // 0x40640c\n                free((int64_t *)v21);\n                function_404ed0(v27, v53);\n                v24 = (int64_t)&g9;\n                goto lab_0x406084;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4061f8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406202\n            uint32_t v62 = (int32_t)v59; // 0x406205\n            int64_t v63; // 0x405f00\n            if (v62 >= 8) {\n                // 0x406314\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40632e\n                int64_t v66 = v61 - v65; // 0x406332\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40633d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40634e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40634e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40634b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4063df\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406217\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40621b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40622b\n            int64_t v74 = v60 - 1; // 0x40622f\n            uint32_t v75 = (int32_t)v73; // 0x406234\n            int64_t v76; // 0x405f00\n            if (v75 >= 8) {\n                // 0x406362\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40636c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40637c\n                int64_t v80 = v74 - v79; // 0x406380\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40638b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40639b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406399\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4063f6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4063fe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406246\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40624a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406443\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40625e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4060ee;\n            } else {\n                goto lab_0x40626c;\n            }\n        }\n    }\n  lab_0x4060e0:;\n    int64_t v93 = v23; // 0x405f00\n    int64_t v94 = v22; // 0x405f00\n    int64_t v95 = v21; // 0x405f00\n    goto lab_0x4060e0_2;\n  lab_0x406025:;\n    int64_t * mem3 = malloc(size); // 0x406025\n    int64_t v97 = (int64_t)&g9; // 0x406030\n    int64_t v98; // 0x405f00\n    int64_t path; // 0x405f00\n    if (mem3 == NULL) {\n        goto lab_0x406002;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406025\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406046;\n    }\n  lab_0x405f3a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x405f2d\n    char v100 = *v3; // 0x405f3a\n    int64_t v101; // 0x405f00\n    if (v100 == 0) {\n        // 0x405f94\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405f00\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405f00\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405f80\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405f87;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405f50\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405f5d\n        char v107 = *(char *)v106; // 0x405f62\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405f94\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405f6b\n    v104 = v103 + 1;\n  lab_0x405f87:\n    // 0x405f94\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406002:;\n    char * v108 = (char *)v97;\n    g56 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405f3a;\n  lab_0x406046:;\n    int64_t v109 = v98 + path; // 0x406046\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406072\n    v24 = (int64_t)&g9;\n    if (fd >= 0) {\n        // 0x4060a1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4063d2\n            close(fd);\n            v24 = (int64_t)&g9;\n        } else {\n            // 0x4060c5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4060e0_2:;\n                uint64_t v96 = *v32; // 0x4060e0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40626c;\n                } else {\n                    goto lab_0x4060ee;\n                }\n            }\n          lab_0x40627f:\n            // 0x40627f\n            function_404ed0(v27, v19);\n            v24 = (int64_t)&g9;\n            if (v18 != 0) {\n                // 0x40629e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406084;\n  lab_0x405feb:;\n    int64_t * mem4 = malloc(size2); // 0x405feb\n    v97 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x406091\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406046;\n    } else {\n        goto lab_0x406002;\n    }\n  lab_0x406084:\n    // 0x406084\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406002;\n}\n"
        },
        {
            "funcName": "function_406470",
            "funcStartAddr": "406470",
            "funcEndAddr": "4064cd",
            "decompiledFuncCode": "int64_t function_406470(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406470\n    return function_4013f8();\n}\n"
        },
        {
            "funcName": "function_4064d0",
            "funcStartAddr": "4064d0",
            "funcEndAddr": "4064d1",
            "decompiledFuncCode": "int64_t function_4064d0(void) {\n    // 0x4064d0\n    int64_t result; // 0x4064d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4064e0",
            "funcStartAddr": "4064e0",
            "funcEndAddr": "4064f8",
            "decompiledFuncCode": "int64_t function_4064e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4064e0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_4064f8",
            "funcStartAddr": "4064f8",
            "funcEndAddr": "406518",
            "decompiledFuncCode": "int64_t function_4064f8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x406502\n    while (*(int64_t *)v1 != -1) {\n        // 0x406503\n        v1 -= 8;\n    }\n    // 0x406514\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_expand.elf"
}