{
    "funcInfo": [
        {
            "funcName": "function_401a40",
            "funcStartAddr": "401a40",
            "funcEndAddr": "401a45",
            "decompiledFuncCode": "int64_t function_401a40(void) {\n    // 0x401a40\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a45",
            "funcStartAddr": "401a45",
            "funcEndAddr": "401a4a",
            "decompiledFuncCode": "int64_t function_401a45(void) {\n    // 0x401a45\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a4a",
            "funcStartAddr": "401a4a",
            "funcEndAddr": "401a4f",
            "decompiledFuncCode": "int64_t function_401a4a(void) {\n    // 0x401a4a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a4f",
            "funcStartAddr": "401a4f",
            "funcEndAddr": "401a54",
            "decompiledFuncCode": "int64_t function_401a4f(void) {\n    // 0x401a4f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a54",
            "funcStartAddr": "401a54",
            "funcEndAddr": "401a59",
            "decompiledFuncCode": "int64_t function_401a54(void) {\n    // 0x401a54\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a59",
            "funcStartAddr": "401a59",
            "funcEndAddr": "401a5e",
            "decompiledFuncCode": "int64_t function_401a59(void) {\n    // 0x401a59\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a5e",
            "funcStartAddr": "401a5e",
            "funcEndAddr": "401a63",
            "decompiledFuncCode": "int64_t function_401a5e(void) {\n    // 0x401a5e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a63",
            "funcStartAddr": "401a63",
            "funcEndAddr": "401a68",
            "decompiledFuncCode": "int64_t function_401a63(void) {\n    // 0x401a63\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a68",
            "funcStartAddr": "401a68",
            "funcEndAddr": "401a6d",
            "decompiledFuncCode": "int64_t function_401a68(void) {\n    // 0x401a68\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a6d",
            "funcStartAddr": "401a6d",
            "funcEndAddr": "401a72",
            "decompiledFuncCode": "int64_t function_401a6d(void) {\n    // 0x401a6d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a80",
            "funcStartAddr": "401a80",
            "funcEndAddr": "401c34",
            "decompiledFuncCode": "int64_t function_401a80(int64_t a1, int64_t a2) {\n    // 0x401a80\n    function_404760(a2);\n    setlocale(LC_ALL, (char *)&g18);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    if (g44 == 0) {\n        int64_t v1 = function_407ee0(1024); // 0x401b90\n        g44 = v1;\n        g45 = v1;\n    }\n    int64_t v2 = a1 & 0xffffffff; // 0x401a87\n    int64_t v3; // 0x401a80\n    function_40bc60(0x4045f0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v3);\n    function_40bc60(0x4023d0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v3);\n    int64_t v4; // 0x401a80\n    int64_t v5; // 0x401a80\n    int64_t v6; // bp-56, 0x401a80\n    int64_t v7; // 0x401ba8\n    int64_t v8; // 0x401bcc\n    int64_t v9; // 0x401c16\n    int64_t v10; // 0x401a80\n    int64_t v11; // 0x401c16\n    while (true) {\n        int64_t v12 = function_408f40(v2, a2, (int64_t *)&g18, &g10, 0, v3); // 0x401af5\n        int32_t v13 = v12;\n        switch (v13) {\n            case -1: {\n                // 0x401ba8\n                v7 = (int64_t)*(int32_t *)0x6132bc;\n                v8 = v7;\n                v4 = 1;\n                if (v2 > v7) {\n                    v4 = (char)function_404170(*(int64_t *)(8 * v8 + a2)) == 0 ? 0 : v4;\n                    v8++;\n                    while (v8 != v2) {\n                        // 0x401bbd\n                        v4 = (char)function_404170(*(int64_t *)(8 * v8 + a2)) == 0 ? 0 : v4;\n                        v8++;\n                    }\n                    // 0x401bd5\n                    return v4 % 256 ^ 1;\n                }\n                // 0x401bea\n                function_406f70(&v6);\n                v9 = function_406f80(g39, \"\\n\\t \", 3, &v6);\n                v10 = 1;\n                v5 = 1;\n                if (v9 != -1) {\n                    v10 &= function_404170(v3);\n                    v11 = function_406f80(g39, \"\\n\\t \", 3, &v6);\n                    v5 = v10;\n                    while (v11 != -1) {\n                        // 0x401bfa\n                        v10 &= function_404170(v3);\n                        v11 = function_406f80(g39, \"\\n\\t \", 3, &v6);\n                        v5 = v10;\n                    }\n                }\n                // 0x401c26\n                free((int64_t *)v3);\n                // 0x401bd5\n                return v5 % 256 ^ 1;\n            }\n            case -130: {\n                // 0x401c2d\n                function_4042e0(0);\n                // UNREACHABLE\n            }\n        }\n        if (v13 != 128) {\n            if (v13 != -131) {\n                // 0x401b27\n                function_4042e0(1);\n                // UNREACHABLE\n            }\n            // 0x401b38\n            function_405150(\"Niels Moller\", &g2);\n            int64_t v14 = function_405150(\"Torbjorn Granlund\", &g3); // 0x401b54\n            function_407da0((int64_t)g38, \"factor\", \"GNU coreutils\", (int64_t)g27, \"Paul Rubin\", v14);\n            exit(0);\n            // UNREACHABLE\n        }\n        // 0x401b15\n        g46 = 1;\n    }\n    // 0x401ba8\n    v7 = (int64_t)*(int32_t *)0x6132bc;\n    v8 = v7;\n    v4 = 1;\n    if (v2 > v7) {\n        v4 = (char)function_404170(*(int64_t *)(8 * v8 + a2)) == 0 ? 0 : v4;\n        v8++;\n        while (v8 != v2) {\n            // 0x401bbd\n            v4 = (char)function_404170(*(int64_t *)(8 * v8 + a2)) == 0 ? 0 : v4;\n            v8++;\n        }\n        // 0x401bd5\n        return v4 % 256 ^ 1;\n    }\n    // 0x401bea\n    function_406f70(&v6);\n    v9 = function_406f80(g39, \"\\n\\t \", 3, &v6);\n    v10 = 1;\n    v5 = 1;\n    if (v9 != -1) {\n        v10 &= function_404170(v3);\n        v11 = function_406f80(g39, \"\\n\\t \", 3, &v6);\n        v5 = v10;\n        while (v11 != -1) {\n            // 0x401bfa\n            v10 &= function_404170(v3);\n            v11 = function_406f80(g39, \"\\n\\t \", 3, &v6);\n            v5 = v10;\n        }\n    }\n    // 0x401c26\n    free((int64_t *)v3);\n    // 0x401bd5\n    return v5 % 256 ^ 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401c40",
            "funcEndAddr": "401c6b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401c40\n    int64_t v1; // 0x401c40\n    __libc_start_main(0x401a80, (int32_t)a4, (char **)&v1, (void (*)())0x40bbf0, (void (*)())0x40bc50, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c6b",
            "funcStartAddr": "401c6b",
            "funcEndAddr": "401c8a",
            "decompiledFuncCode": "int64_t function_401c6b(void) {\n    // 0x401c6b\n    return &g37;\n}\n"
        },
        {
            "funcName": "function_401c8a",
            "funcStartAddr": "401c8a",
            "funcEndAddr": "401cc1",
            "decompiledFuncCode": "int64_t function_401c8a(void) {\n    // 0x401c8a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401cc1",
            "funcStartAddr": "401cc1",
            "funcEndAddr": "401d18",
            "decompiledFuncCode": "int64_t function_401cc1(void) {\n    // 0x401cc1\n    if (g42 != 0) {\n        // 0x401d17\n        int64_t result; // 0x401cc1\n        return result;\n    }\n    int64_t v1 = g43; // 0x401cf4\n    int64_t result2; // 0x401d06\n    if (g43 >= ((int64_t)&g23 - (int64_t)&g22 >> 3) - 1) {\n        // 0x401d06\n        result2 = function_401c6b();\n        g42 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g23 - (int64_t)&g22 >> 3) - 1) {\n        // 0x401cf6\n        v1++;\n    }\n    // 0x401cea\n    g43 = v1;\n    // 0x401d06\n    result2 = function_401c6b();\n    g42 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401d18",
            "funcStartAddr": "401d18",
            "funcEndAddr": "401d1d",
            "decompiledFuncCode": "int64_t function_401d18(void) {\n    // 0x401d18\n    return function_401c8a();\n}\n"
        },
        {
            "funcName": "function_401d20",
            "funcStartAddr": "401d20",
            "funcEndAddr": "401d79",
            "decompiledFuncCode": "int64_t function_401d20(int64_t a1, uint64_t a2) {\n    uint64_t result = a2 % 2 != 0 ? a2 : a1;\n    int64_t v1 = a2 % 2 != 0 ? a1 : a2;\n    if (v1 == 0) {\n        // 0x401d78\n        return result;\n    }\n    int64_t v2 = result / 2; // 0x401d37\n    int64_t v3 = v1; // 0x401d37\n    uint64_t v4; // 0x401d20\n    while (true) {\n        // 0x401d59\n        v4 = v3;\n        int64_t v5 = v2;\n        int64_t v6 = v4 / 2; // 0x401d5c\n        v2 = v5;\n        v3 = v6;\n        if (v4 % 2 != 0) {\n            int64_t v7 = v6 - v5; // 0x401d65\n            if (v7 == 0) {\n                // break -> 0x401d6a\n                break;\n            }\n            int64_t v8 = v7 >> 63; // 0x401d46\n            v2 = (v8 & v7) + v5;\n            v3 = (v8 ^ v7) - v8;\n        }\n    }\n    // 0x401d6a\n    return v4 | 1;\n}\n"
        },
        {
            "funcName": "function_401d80",
            "funcStartAddr": "401d80",
            "funcEndAddr": "401e55",
            "decompiledFuncCode": "int64_t function_401d80(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 + 224; // 0x401d82\n    int64_t v2 = a1 + 16; // 0x401d8b\n    char * v3 = (char *)(a1 + 250); // 0x401d91\n    unsigned char v4 = *v3; // 0x401d91\n    int64_t v5 = (int64_t)v4 + 0xffffffff; // 0x401d9a\n    int64_t v6 = v2; // 0x401da0\n    int64_t v7 = v1; // 0x401da0\n    int64_t v8; // 0x401d80\n    int64_t result; // 0x401d80\n    int64_t result2; // 0x401d80\n    int64_t v9; // 0x401dba\n    int64_t v10; // 0x401d80\n    int64_t v11; // 0x401dd6\n    int64_t v12; // 0x401e26\n    int64_t v13; // 0x401e2a\n    int64_t v14; // 0x401da2\n    int64_t v15; // 0x401d80\n    uint64_t v16; // 0x401da5\n    if ((int32_t)v5 == -1) {\n        goto lab_0x401e06;\n    } else {\n        int64_t v17 = 0x100000000 * v5;\n        v14 = v17 >> 32;\n        v15 = v17 >> 29;\n        v16 = *(int64_t *)(v15 + v2);\n        if (v16 <= a2) {\n            // 0x401e38\n            result2 = v15;\n            v8 = v14;\n            if (v16 != a2) {\n                // 0x401e49\n                result = v15;\n                v6 = a1 + 24 + v15;\n                v7 = a1 + 225 + v14;\n                goto lab_0x401e06;\n            } else {\n                goto lab_0x401e3d;\n            }\n        } else {\n            int64_t v18 = v5 & 0xffffffff; // 0x401d9a\n            v9 = v14 - 1;\n            v10 = a1 + 24;\n            int64_t v19 = v9; // 0x401dc3\n            int64_t v20 = v18 + 0xffffffff; // 0x401dd6\n            v11 = v20 & 0xffffffff;\n            while ((int32_t)v20 != -1) {\n                int64_t v21 = v19;\n                v19 = v21 - 1;\n                uint64_t v22 = *(int64_t *)(8 * v19 + v10); // 0x401dcc\n                if (v22 <= a2) {\n                    // 0x401e20\n                    result2 = v11;\n                    v8 = v21;\n                    if (v22 == a2) {\n                        goto lab_0x401e3d;\n                    } else {\n                        int64_t v23 = v21 + 1; // 0x401e22\n                        v12 = 8 * v23 + v2;\n                        v13 = v23 + v1;\n                        result = v11;\n                        v6 = v12;\n                        v7 = v13;\n                        if (v18 > v11) {\n                            goto lab_0x401de9;\n                        } else {\n                            goto lab_0x401e06;\n                        }\n                    }\n                }\n                v20 = v11 + 0xffffffff;\n                v11 = v20 & 0xffffffff;\n            }\n        }\n    }\n  lab_0x401e06:\n    // 0x401e06\n    *(int64_t *)v6 = a2;\n    *(char *)v7 = (char)a3;\n    *v3 = v4 + 1;\n    return result;\n  lab_0x401e3d:;\n    char * v24 = (char *)(v8 + v1); // 0x401e3d\n    *v24 = *v24 + (char)a3;\n    return result2;\n  lab_0x401de9:\n    // 0x401de9\n    *(int64_t *)(v15 + v10) = v16;\n    int64_t v25 = a1 + 225; // 0x401df7\n    *(char *)(v14 + v25) = *(char *)(v14 + v1);\n    result = v11;\n    v6 = v12;\n    v7 = v13;\n    if (v11 < v9) {\n        int64_t v26 = v9;\n        int64_t v27 = 8 * v26;\n        int64_t v28 = v26 - 1; // 0x401de5\n        *(int64_t *)(v27 + v10) = *(int64_t *)(v27 + v2);\n        *(char *)(v26 + v25) = *(char *)(v26 + v1);\n        result = v11;\n        v6 = v12;\n        v7 = v13;\n        while (v11 < v28) {\n            // 0x401de0\n            v26 = v28;\n            v27 = 8 * v26;\n            v28 = v26 - 1;\n            *(int64_t *)(v27 + v10) = *(int64_t *)(v27 + v2);\n            *(char *)(v26 + v25) = *(char *)(v26 + v1);\n            result = v11;\n            v6 = v12;\n            v7 = v13;\n        }\n    }\n    goto lab_0x401e06;\n}\n"
        },
        {
            "funcName": "function_401e60",
            "funcStartAddr": "401e60",
            "funcEndAddr": "401ec9",
            "decompiledFuncCode": "int64_t function_401e60(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = a2; // 0x401e67\n    int64_t result = a1; // 0x401e67\n    int64_t v2 = a2; // 0x401e67\n    if (a2 % 2 == 0) {\n        goto lab_0x401ec0;\n    } else {\n        goto lab_0x401e70;\n    }\n  lab_0x401ec0:;\n    // 0x401ec0\n    int64_t v3; // 0x401e60\n    result = v3;\n    v1 = v2;\n    if (v1 == 0) {\n        // 0x401ec5\n        return result;\n    }\n    goto lab_0x401e70;\n  lab_0x401e70:;\n    int64_t v4 = v1 / 2; // 0x401e91\n    int64_t v5 = v4; // 0x401e98\n    v2 = v4;\n    if ((v1 & 2) != 0) {\n        uint64_t v6 = v5;\n        int64_t v7 = v6 / 2; // 0x401e91\n        v2 = v7;\n        while ((v6 & 2) != 0) {\n            // 0x401e9a\n            v6 = v7;\n            v7 = v6 / 2;\n            v2 = v7;\n        }\n    }\n    // 0x401ec0\n    v3 = result;\n    goto lab_0x401ec0;\n}\n"
        },
        {
            "funcName": "function_401ed0",
            "funcStartAddr": "401ed0",
            "funcEndAddr": "401f5d",
            "decompiledFuncCode": "int64_t function_401ed0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint32_t a5, int64_t a6) {\n    int64_t v1 = function_401e60(a3, a4, a1, a2); // 0x401eef\n    bool v2 = v1 == a6 | v1 == a1 - a6;\n    int64_t v3 = a6 & -256 | (int64_t)v2; // 0x401f07\n    if (a5 < 2 || v2) {\n        // 0x401f55\n        return v3 & 0xffffffff;\n    }\n    int64_t v4 = 1; // 0x401f4d\n    // 0x401f55\n    return v4 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_401f60",
            "funcStartAddr": "401f60",
            "funcEndAddr": "402234",
            "decompiledFuncCode": "int64_t function_401f60(int64_t a1, uint64_t a2, int64_t a3, uint64_t a4, int64_t a5, uint64_t a6, int64_t a7, int64_t a8) {\n    if (a2 >= 0) {\n        if (a4 >= 0) {\n            if (a6 >= 0) {\n\n                // 0x402059\n                return 0;\n            }\n            // 0x402079\n            __assert_fail(\"(m1 >> (W_TYPE_SIZE - 1)) == 0\", \"src/factor.c\", 1001, \"mulredc2\");\n        }\n        // 0x402092\n        __assert_fail(\"(b1 >> (W_TYPE_SIZE - 1)) == 0\", \"src/factor.c\", 1000, \"mulredc2\");\n    }\n    // 0x4020ab\n    __assert_fail(\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", \"src/factor.c\", 999, \"mulredc2\");\n    int64_t v1; // bp-160, 0x401f60\n    int64_t v2 = &v1; // 0x4020e5\n    int64_t * v3 = (int64_t *)(v2 - 8);\n    int64_t * v4 = (int64_t *)(v2 - 16);\n    int64_t * v5 = (int64_t *)(v2 + 16);\n    int64_t * v6 = (int64_t *)(v2 + 8);\n    int64_t * v7 = (int64_t *)(v2 + 24);\n    int64_t * v8 = (int64_t *)(v2 + 32);\n    int32_t v9 = 64; // 0x402110\n    int64_t v10 = *(int64_t *)999; // 0x402110\n    int64_t v11 = 0x632e726f;\n    int64_t v12 = 0x746361662f637273;\n    int64_t v13 = v12; // 0x402148\n    int64_t v14 = v11; // 0x402148\n    int64_t v15; // 0x402157\n    int64_t v16; // 0x40215f\n    int64_t v17; // 0x40216e\n    if (v10 % 2 != 0) {\n        // 0x40214a\n        *v3 = a5;\n        *v4 = 0x32636465726c756d;\n        v15 = *v5;\n        v16 = *v6;\n        *v7 = v11;\n        *v8 = v12;\n        v17 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v16, v15, v11, v12, 0, (int64_t)&g62, (int64_t)&g62);\n        *v5 = v17;\n        *v6 = 0x28203e3e20316128;\n        v13 = *v8;\n        v14 = *v7;\n    }\n    int64_t v18 = v14;\n    int64_t v19 = v13;\n    *v3 = a5;\n    *v4 = 0x32636465726c756d;\n    int64_t v20 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v18, v19, v18, v19, 0, (int64_t)&g62, (int64_t)&g62); // 0x402131\n    v9--;\n    v10 /= 2;\n    while (v9 != 0) {\n        // 0x402144\n        v11 = 0x28203e3e20316128;\n        v12 = v20;\n        v13 = v12;\n        v14 = v11;\n        if (v10 % 2 != 0) {\n            // 0x40214a\n            *v3 = a5;\n            *v4 = 0x32636465726c756d;\n            v15 = *v5;\n            v16 = *v6;\n            *v7 = v11;\n            *v8 = v12;\n            v17 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v16, v15, v11, v12, 0, (int64_t)&g62, (int64_t)&g62);\n            *v5 = v17;\n            *v6 = 0x28203e3e20316128;\n            v13 = *v8;\n            v14 = *v7;\n        }\n        // 0x402118\n        v18 = v14;\n        v19 = v13;\n        *v3 = a5;\n        *v4 = 0x32636465726c756d;\n        v20 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v18, v19, v18, v19, 0, (int64_t)&g62, (int64_t)&g62);\n        v9--;\n        v10 /= 2;\n    }\n    int64_t v21 = *(int64_t *)(*(int64_t *)(v2 + 40) + 8); // 0x402195\n    uint64_t v22 = v21; // 0x40219c\n    if (v21 == 0) {\n        // 0x402218\n        *(int64_t *)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\" = *v6;\n        return *v5;\n    }\n    int64_t v23 = v20; // 0x4021cc\n    int64_t v24 = 0x28203e3e20316128; // 0x4021cc\n    int64_t v25; // 0x4021db\n    int64_t v26; // 0x4021e3\n    int64_t v27; // 0x4021f2\n    if (v22 % 2 != 0) {\n        // 0x4021ce\n        *v3 = a5;\n        *v4 = 0x32636465726c756d;\n        v25 = *v5;\n        v26 = *v6;\n        *v8 = v20;\n        *v7 = 0x28203e3e20316128;\n        v27 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v26, v25, 0x28203e3e20316128, v20, 0, (int64_t)&g62, (int64_t)&g62);\n        *v5 = v27;\n        *v6 = 0x28203e3e20316128;\n        v23 = *v8;\n        v24 = *v7;\n    }\n    int64_t v28 = v24;\n    int64_t v29 = v23;\n    *v3 = a5;\n    *v4 = 0x32636465726c756d;\n    int64_t v30 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v28, v29, v28, v29, 0, (int64_t)&g62, (int64_t)&g62); // 0x4021b6\n    while (v22 >= 2) {\n        // 0x4021c8\n        v22 /= 2;\n        int64_t v31 = v30;\n        v23 = v31;\n        v24 = 0x28203e3e20316128;\n        if (v22 % 2 != 0) {\n            // 0x4021ce\n            *v3 = a5;\n            *v4 = 0x32636465726c756d;\n            v25 = *v5;\n            v26 = *v6;\n            *v8 = v31;\n            *v7 = 0x28203e3e20316128;\n            v27 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v26, v25, 0x28203e3e20316128, v31, 0, (int64_t)&g62, (int64_t)&g62);\n            *v5 = v27;\n            *v6 = 0x28203e3e20316128;\n            v23 = *v8;\n            v24 = *v7;\n        }\n        // 0x4021a0\n        v28 = v24;\n        v29 = v23;\n        *v3 = a5;\n        *v4 = 0x32636465726c756d;\n        v30 = function_401f60((int64_t)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\", v28, v29, v28, v29, 0, (int64_t)&g62, (int64_t)&g62);\n    }\n    // 0x402218\n    *(int64_t *)\"(a1 >> (W_TYPE_SIZE - 1)) == 0\" = *v6;\n    return *v5;\n}\n"
        },
        {
            "funcName": "function_402240",
            "funcStartAddr": "402240",
            "funcEndAddr": "402337",
            "decompiledFuncCode": "int64_t function_402240(int64_t * a1, int64_t a2, int64_t * a3, int64_t * a4, uint32_t a5, int64_t * a6) {\n    uint64_t v1 = (int64_t)a6;\n    int64_t v2; // bp-88, 0x402240\n    int64_t v3 = &v2; // 0x402262\n    int64_t * v4 = (int64_t *)(v1 + 8); // 0x402278\n    uint64_t v5 = *v4; // 0x402278\n    int64_t v6; // 0x402240\n    if (v6 == v1 && v5 == v6) {\n        // 0x402330\n        *(char *)(v3 + 15) = 1;\n        // 0x40230b\n        return (int64_t)*(char *)(v3 + 15);\n    }\n    int64_t * v7 = (int64_t *)((int64_t)a1 + 8); // 0x402285\n    int64_t v8 = *v7; // 0x402285\n    int64_t v9 = v5 - v1; // 0x402292\n    int64_t v10 = v8 + (int64_t)(v5 < v1) - v5; // 0x402295\n    v2 = v10;\n    if (v6 == v9 == v6 == v10) {\n        // 0x402330\n        *(char *)(v3 + 15) = 1;\n        // 0x40230b\n        return (int64_t)*(char *)(v3 + 15);\n    }\n    if (a5 < 2) {\n        // 0x40230b\n        return (int64_t)*(char *)(v3 + 15);\n    }\n    int64_t v11 = v8; // 0x4022d4\n    int64_t v12 = 1; // 0x402240\n    int64_t v13; // 0x402240\n    int64_t v14 = v13;\n    int64_t v15; // 0x402240\n    int64_t v16 = v15;\n    *(int64_t *)(v3 - 8) = a2;\n    *(int64_t *)(v3 - 16) = v5;\n    int64_t v17 = function_401f60(v5, v14, v16, v14, v16, v11, (int64_t)&g62, (int64_t)&g62); // 0x4022e9\n    int64_t v18 = *(int64_t *)(v3 + 24); // 0x4022ee\n    while (v9 == v17 != (v2 == v18)) {\n        if (v11 == v17) {\n            // 0x402305\n            if (*v4 == v18) {\n                // 0x40230b\n                return (int64_t)*(char *)(v3 + 15);\n            }\n        }\n        int64_t v19 = v12 + 1; // 0x4022c8\n        if ((int32_t)v19 == a5) {\n            // 0x40230b\n            return (int64_t)*(char *)(v3 + 15);\n        }\n        // 0x4022d1\n        v11 = *v7;\n        v12 = v19 & 0xffffffff;\n        v14 = v18;\n        v16 = v17;\n        *(int64_t *)(v3 - 8) = a2;\n        *(int64_t *)(v3 - 16) = v5;\n        v17 = function_401f60(v5, v14, v16, v14, v16, v11, (int64_t)&g62, (int64_t)&g62);\n        v18 = *(int64_t *)(v3 + 24);\n    }\n    // 0x402330\n    *(char *)(v3 + 15) = 1;\n    // 0x40230b\n    return (int64_t)*(char *)(v3 + 15);\n}\n"
        },
        {
            "funcName": "function_402340",
            "funcStartAddr": "402340",
            "funcEndAddr": "4023c1",
            "decompiledFuncCode": "int64_t function_402340(int64_t a1, uint64_t a2) {\n    // 0x402340\n    int64_t v1; // bp-56, 0x402340\n    int64_t v2 = function_404710(a1, &v1); // 0x40234f\n    int64_t v3 = v2 - (int64_t)&v1; // 0x40235c\n    uint64_t v4 = 20 - v3; // 0x402362\n    int64_t v5 = g45;\n    int64_t * dest_mem; // 0x40239b\n    int64_t result; // 0x40239b\n    if (v4 >= a2) {\n        // 0x402392\n        dest_mem = memcpy((int64_t *)v5, (int64_t *)v2, (int32_t)v4);\n        result = (int64_t)dest_mem;\n        g45 = v4 + result;\n        return result;\n    }\n    int64_t v6 = a2 - 20 + v5 + v3;\n    int64_t v7 = v5; // 0x40237d\n    *(char *)v7 = 48;\n    v7++;\n    while (v7 != v6) {\n        // 0x402380\n        *(char *)v7 = 48;\n        v7++;\n    }\n    // 0x402392\n    dest_mem = memcpy((int64_t *)v6, (int64_t *)v2, (int32_t)v4);\n    result = (int64_t)dest_mem;\n    g45 = v4 + result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4023d0",
            "funcStartAddr": "4023d0",
            "funcEndAddr": "402640",
            "decompiledFuncCode": "int64_t function_4023d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5) {\n    int64_t v1 = g45 - g44; // 0x4023e4\n    if (function_404690(1, g44, v1) == v1) {\n        // 0x4023f4\n        g45 = g44;\n        return g44;\n    }\n    char * v2 = dcgettext(NULL, \"write error\", 5); // 0x402410\n    uint32_t err_num = *__errno_location(); // 0x40242a\n    error(1, err_num, \"%s\", v2);\n    if (err_num == 0) {\n        // 0x402460\n        return function_401d80(1, (int64_t)\"%s\", 1);\n    }\n    // 0x402448\n    if (*(int64_t *)9 == 0) {\n        // 0x40244f\n        *(int64_t *)1 = (int64_t)\"%s\";\n        *(int64_t *)9 = (int64_t)err_num;\n        return (int64_t)\"%s\";\n    }\n    // 0x40246d\n    __assert_fail(\"factors->plarge[1] == 0\", \"src/factor.c\", 565, \"factor_insert_large\");\n    int64_t v3 = (int64_t)\"src/factor.c\"; // 0x402494\n    uint64_t v4 = a5; // 0x402494\n    int64_t v5 = 565; // 0x402494\n    uint64_t v6 = (int64_t)\"factor_insert_large\"; // 0x402494\n    int64_t v7; // 0x4023d0\n    uint64_t v8; // 0x4023d0\n    int64_t v9; // 0x4023d0\n    uint64_t v10; // 0x4023d0\n    int64_t v11; // 0x4023d0\n    int64_t v12; // 0x4023d0\n    int64_t result; // 0x4023d0\n    int64_t v13; // 0x4023d0\n    int64_t v14; // 0x4023d0\n    int64_t v15; // 0x4023d0\n    int64_t v16; // 0x4023d0\n    int32_t v17; // 0x4025d3\n    if (a5 % 2 == 0) {\n        // 0x402568\n        __assert_fail(\"b0 & 1\", \"src/factor.c\", 483, \"gcd2_odd\");\n        int64_t v18 = llvm_ctlz_i64((int64_t)\"gcd2_odd\", true); // 0x4025a1\n        uint64_t v19 = v18 - llvm_ctlz_i64((int64_t)\"src/factor.c\", true); // 0x4025b3\n        v17 = v19;\n        if (v17 < 1) {\n            // 0x40260a\n            *(int64_t *)\"b0 & 1\" = (int64_t)\"src/factor.c\";\n            return 483;\n        }\n        uint64_t v20 = v19 % 64; // 0x4025bc\n        v11 = 483;\n        v13 = 0;\n        v14 = (int64_t)\"src/factor.c\";\n        v7 = a5 << v20;\n        v9 = a5 >> -v19 % 64 | (int64_t)\"gcd2_odd\" << v20;\n        while (true) {\n          lab_0x4025e0:\n            // 0x4025e0\n            v10 = v9;\n            v8 = v7;\n            int64_t v21 = v14;\n            uint64_t v22 = v11;\n            if (v21 > v10) {\n                // 0x4025ec\n                v12 = v22 - v8;\n                v15 = v21 - v10 + (int64_t)(v22 < v8);\n                goto lab_0x4025f2;\n            } else {\n                // 0x4025e5\n                v12 = v22;\n                v15 = v21;\n                if (v22 < v8 || v21 != v10) {\n                    goto lab_0x4025f2;\n                } else {\n                    // 0x4025ec\n                    v12 = v22 - v8;\n                    v15 = v21 - v10 + (int64_t)(v22 < v8);\n                    goto lab_0x4025f2;\n                }\n            }\n        }\n      lab_0x40260a:\n        // 0x40260a\n        *(int64_t *)\"b0 & 1\" = v16;\n        return result;\n    }\n    uint64_t v23; // 0x4023d0\n    uint64_t result2; // 0x4023d0\n    while (true) {\n        // 0x4024d0\n        result2 = v5;\n        v23 = v3;\n        int64_t v24; // 0x4023d0\n        int64_t v25; // 0x4023d0\n        while (v23 <= v6) {\n            if (v4 < result2 == v23 == v6) {\n                // break -> 0x402530\n                break;\n            }\n            if (v23 >= v6 && v23 == v6 != v4 > result2) {\n                // break (via goto) -> 0x402561\n                goto lab_0x402561;\n            }\n            int64_t v26 = v6 - v23 + (int64_t)(v4 < result2); // 0x4024f5\n            uint64_t v27 = v4 - result2;\n            int64_t v28 = v26 / 2; // 0x402502\n            int64_t v29 = v27 / 2 | 0x8000000000000000 * v26; // 0x402505\n            v26 = v28;\n            while ((v27 & 2) == 0) {\n                // 0x4024f8\n                v27 = v29;\n                v28 = v26 / 2;\n                v29 = v27 / 2 | 0x8000000000000000 * v26;\n                v26 = v28;\n            }\n            // 0x40250e\n            v25 = result2;\n            v24 = v29;\n            if ((v28 || v23) == 0) {\n                // 0x402516\n                *(int64_t *)\"factors->plarge[1] == 0\" = 0;\n                return function_401d20(v24, v25);\n            }\n            v4 = v29;\n            v6 = v28;\n        }\n        int64_t v30 = v23 - v6 + (int64_t)(result2 < v4); // 0x402536\n        uint64_t v31 = result2 - v4;\n        v3 = v30 / 2;\n        v5 = 0x8000000000000000 * v30 | v31 / 2;\n        v30 = v3;\n        while ((v31 & 2) == 0) {\n            // 0x402540\n            v31 = v5;\n            v3 = v30 / 2;\n            v5 = 0x8000000000000000 * v30 | v31 / 2;\n            v30 = v3;\n        }\n        // 0x4024c8\n        v25 = v5;\n        v24 = v4;\n        if ((v3 || v6) == 0) {\n            // 0x402516\n            *(int64_t *)\"factors->plarge[1] == 0\" = 0;\n            return function_401d20(v24, v25);\n        }\n    }\n  lab_0x402561:\n    // 0x402561\n    *(int64_t *)\"factors->plarge[1] == 0\" = v23;\n    return result2;\n  lab_0x4025f2:;\n    int64_t v32 = v13 + 1; // 0x4025f8\n    v11 = v12;\n    v13 = v32 & 0xffffffff;\n    v14 = v15;\n    v7 = 0x8000000000000000 * v10 | v8 / 2;\n    v9 = v10 / 2;\n    result = v12;\n    v16 = v15;\n    if (v17 == (int32_t)v32) {\n        // break -> 0x40260a\n        goto lab_0x40260a;\n    }\n    goto lab_0x4025e0;\n}\n"
        },
        {
            "funcName": "function_402640",
            "funcStartAddr": "402640",
            "funcEndAddr": "4026e4",
            "decompiledFuncCode": "int64_t function_402640(uint64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x4026da\n        return function_402340(a2, 0);\n    }\n    uint64_t v1 = 0; // 0x402684\n    uint64_t v2 = 0x3b9aca00; // 0x402684\n    int64_t v3 = 0; // 0x402684\n    int64_t v4 = a1 / 512 % 0x3b9aca00; // 0x402684\n    int64_t v5 = a2; // 0x402684\n    int32_t v6 = 64; // 0x402684\n    uint64_t v7; // 0x402640\n    int64_t v8; // 0x402640\n    int64_t v9; // 0x402640\n    int64_t v10; // 0x402640\n    int64_t v11; // 0x40268e\n    while (true) {\n      lab_0x402688:\n        // 0x402688\n        v7 = v5;\n        v9 = v4;\n        uint64_t v12 = v2;\n        v11 = 2 * v3;\n        v2 = v12 / 2;\n        v1 = 0x8000000000000000 * v12 | v1 / 2;\n        if (v9 > v2) {\n            goto lab_0x4026a7;\n        } else {\n            // 0x4026a0\n            v10 = v11;\n            v4 = v9;\n            v8 = v7;\n            if (v9 != v2 || v7 < v1) {\n                goto lab_0x4026b1;\n            } else {\n                goto lab_0x4026a7;\n            }\n        }\n    }\n  lab_0x4026b7:\n    // 0x4026b7\n    function_402640(0, v3);\n    return function_402340(v5, 9);\n  lab_0x4026a7:\n    // 0x4026a7\n    v10 = v11 | 1;\n    v4 = v9 - v2 + (int64_t)(v7 < v1);\n    v8 = v7 - v1;\n    goto lab_0x4026b1;\n  lab_0x4026b1:\n    // 0x4026b1\n    v5 = v8;\n    v3 = v10;\n    v6--;\n    if (v6 == 0) {\n        // break -> 0x4026b7\n        goto lab_0x4026b7;\n    }\n    goto lab_0x402688;\n}\n"
        },
        {
            "funcName": "function_4026f0",
            "funcStartAddr": "4026f0",
            "funcEndAddr": "4027c2",
            "decompiledFuncCode": "int64_t function_4026f0(int64_t a1) {\n    int64_t result = g45; // 0x4026f6\n    int64_t v1 = result + 1; // 0x4026fd\n    char v2 = a1; // 0x402701\n    *(char *)result = v2;\n    g45 = v1;\n    if (v2 != 10) {\n        // 0x402711\n        return result;\n    }\n    int64_t v3 = a1; // 0x402730\n    int32_t v4 = g26; // 0x402730\n    if (g26 == -1) {\n        // 0x4027b0\n        v4 = isatty(0);\n        g26 = v4;\n        v3 = 0;\n    }\n    // 0x402732\n    int64_t v5; // 0x4026f0\n    if (v4 != 0) {\n        // 0x4027a0\n        return function_4023d0(v3, v5, v5, v5, v5);\n    }\n    int64_t result2 = v1 - g44; // 0x402739\n    if (result2 < 512) {\n        // 0x402711\n        return result2;\n    }\n    int64_t v6 = g44 + 512;\n    int64_t v7 = v6 - 1; // 0x40275b\n    while (*(char *)v7 != 10) {\n        // 0x40275b\n        v6 = v7;\n        v7 = v6 - 1;\n    }\n    // 0x402765\n    g45 = v6;\n    int64_t v8 = v1 - v6; // 0x40276c\n    function_4023d0(v3, v5, v5, v5, v5);\n    int64_t dest_mem = (int64_t)memcpy((int64_t *)g44, (int64_t *)v6, (int32_t)v8); // 0x402784\n    g45 = v8 + dest_mem;\n    return dest_mem;\n}\n"
        },
        {
            "funcName": "function_4027d0",
            "funcStartAddr": "4027d0",
            "funcEndAddr": "402be1",
            "decompiledFuncCode": "int64_t function_4027d0(uint64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a2; // 0x4027eb\n    int64_t v2 = a1; // 0x4027eb\n    int64_t v3; // 0x4027d0\n    int64_t v4; // 0x4027d0\n    int64_t v5; // 0x4027d0\n    int64_t v6; // 0x4027d0\n    int64_t v7; // 0x4027d0\n    int64_t v8; // 0x4027d0\n    int64_t v9; // 0x4027d0\n    int64_t v10; // 0x4027d0\n    int64_t v11; // 0x4027d0\n    int64_t v12; // 0x4027d0\n    int64_t v13; // 0x4027d0\n    int64_t v14; // 0x4027d0\n    int64_t v15; // 0x4027d0\n    int64_t v16; // 0x4027d0\n    int64_t v17; // 0x4027d0\n    int64_t v18; // 0x4027d0\n    uint64_t v19; // 0x4027d0\n    int64_t v20; // 0x4027d0\n    int64_t v21; // 0x4027d0\n    int32_t v22; // 0x4027d0\n    uint64_t v23; // 0x4027d0\n    uint64_t v24; // 0x40282a\n    uint64_t v25; // 0x40282d\n    if (a1 >= 2) {\n        while (true) {\n          lab_0x402801:;\n            int64_t v26 = v2;\n            int64_t v27 = v5;\n            int64_t v28 = v3;\n            int64_t v29 = v11;\n            v23 = v1;\n            v13 = 1;\n            v16 = v26;\n            v21 = 0;\n            v22 = 64;\n            v18 = 0;\n            while (true) {\n              lab_0x402820:\n                // 0x402820\n                v19 = v18;\n                v14 = v13;\n                v24 = v16 / 2;\n                v25 = v21 / 2 | 0x8000000000000000 * v16;\n                if (v14 > v24) {\n                    // 0x40283c\n                    goto lab_0x402842;\n                } else {\n                    // 0x402835\n                    if (v14 != v24 || v19 < v25) {\n                        goto lab_0x402842;\n                    } else {\n                        // 0x40283c\n                        goto lab_0x402842;\n                    }\n                }\n            }\n          lab_0x402847:;\n            int64_t v30 = (v26 - v20 > v20 ? v26 : 0) + 2 * v20 - v26; // 0x402866\n            v17 = 1;\n            v7 = v26;\n            v9 = 1;\n            v10 = v30;\n            v15 = v30;\n            v12 = v29;\n            v4 = v28;\n            v6 = v27;\n            v8 = v26;\n            if (v26 > v23) {\n                goto lab_0x402888;\n            } else {\n                goto lab_0x402b1b;\n            }\n        }\n    }\n  lab_0x402bb9:\n    // 0x402bb9\n    __assert_fail(\"(1) < (n)\", \"src/factor.c\", 1474, \"factor_using_pollard_rho\");\n    // 0x402bd2\n    return &g62;\n  lab_0x4029e0:;\n    uint64_t v31 = function_401d20(0, v2); // 0x402a26\n    if (v31 == 1) {\n        goto lab_0x4029e0;\n    } else {\n        goto lab_0x402a31;\n    }\n  lab_0x402842:\n    // 0x402842\n    v20 = v19 - v25;\n    int32_t v32 = v22 - 1; // 0x402842\n    v13 = v14 - v24 + (int64_t)(v19 < v25);\n    v16 = v24;\n    v21 = v25;\n    v22 = v32;\n    v18 = v20;\n    if (v32 == 0) {\n        // break -> 0x402847\n        goto lab_0x402847;\n    }\n    goto lab_0x402820;\n  lab_0x402888:;\n    int64_t v33 = v23 - v7; // 0x4028d8\n    int64_t v34 = v7 - v23; // 0x4028d8\n    int64_t v35 = v17; // 0x4028d8\n    int64_t v36 = v7; // 0x4028d8\n    int64_t v37 = v9; // 0x4028d8\n    int64_t v38 = v10; // 0x4028d8\n    goto lab_0x4028e0_2;\n  lab_0x402b1b:\n    // 0x402b1b\n    __assert_fail(\"a < n\", \"src/factor.c\", 1480, \"factor_using_pollard_rho\");\n    int64_t v49 = (int64_t)\"factor_using_pollard_rho\"; // 0x402b34\n    int64_t v50 = v15; // 0x402b34\n    int64_t v51 = v12; // 0x402b34\n    int64_t v52 = v4; // 0x402b34\n    int64_t v53 = v6; // 0x402b34\n    int64_t v54 = v8; // 0x402b34\n  lab_0x402b38:\n    // 0x402b38\n    v33 = v51;\n    v34 = v52;\n    v35 = v49;\n    v36 = v54;\n    v37 = v53;\n    v38 = v50;\n    goto lab_0x4028e0_2;\n  lab_0x4028e0_2:\n    // 0x4028e0\n    v1 = v23 + 1;\n    uint64_t v39 = v38;\n    v2 = v36;\n    int64_t v40 = v34;\n    int64_t v41 = v33;\n    int64_t v42 = v35; // 0x4027d0\n    int64_t v43 = v37; // 0x4027d0\n    int64_t v44; // 0x4027d0\n    int64_t v45; // 0x4027d0\n    while (true) {\n      lab_0x4028e0:\n        // 0x4028e0\n        v44 = v42;\n        v45 = v43;\n        if (v45 % 32 == 1) {\n            // 0x4029c0\n            if (function_401d20(0, v2) != 1) {\n                goto lab_0x4029e0;\n            }\n        }\n        int64_t v46 = v45 - 1; // 0x402950\n        while (v46 != 0) {\n            // 0x4028e0\n            v45 = v46;\n            if (v45 % 32 == 1) {\n                // 0x4029c0\n                if (function_401d20(0, v2) != 1) {\n                    goto lab_0x4029e0;\n                }\n            }\n            // 0x402950\n            v46 = v45 - 1;\n        }\n        int64_t v47 = 2 * v44; // 0x402956\n        int64_t v48 = v46; // 0x40295d\n        v49 = 0;\n        v50 = 0;\n        v51 = v41;\n        v52 = v40;\n        v53 = 0;\n        v54 = v2;\n        if (v44 == 0) {\n            goto lab_0x402b38;\n        }\n        while (true) {\n          lab_0x402970:\n            // 0x402970\n            v48++;\n            v42 = v47;\n            v43 = v48;\n            if (v44 != v48) {\n                goto lab_0x402970;\n            } else {\n                goto lab_0x4028e0;\n            }\n        }\n    }\n    goto lab_0x402a31;\n  lab_0x402a31:;\n    uint64_t v55; // 0x4027d0\n    if (v2 == v31) {\n        // 0x402ba4\n        v11 = v41;\n        v3 = v40;\n        v5 = v2;\n        if (v2 < 2) {\n            // break -> 0x402bb9\n            goto lab_0x402bb9;\n        }\n        goto lab_0x402801;\n    } else {\n        // 0x402a40\n        v55 = v2 / v31;\n        if (v31 < 2) {\n            goto lab_0x402b49;\n        } else {\n            if (v31 < 0x17ded79) {\n                goto lab_0x402a8f;\n            } else {\n                // 0x402a61\n                if ((char)function_403840(v31) == 0) {\n                    goto lab_0x402b49;\n                } else {\n                    goto lab_0x402a8f;\n                }\n            }\n        }\n    }\n  lab_0x402b49:;\n    int64_t v56 = function_4027d0(v31, v1, a3); // 0x402b73\n    if (v55 < 2) {\n        goto lab_0x402b79;\n    } else {\n        goto lab_0x402abf;\n    }\n  lab_0x402b79:;\n    int64_t v57 = 0; // 0x402b79\n    int64_t result = v56; // 0x402b79\n    if (v55 == 1) {\n        // 0x402bd2\n        return result;\n    }\n    goto lab_0x402b11;\n  lab_0x402abf:\n    if (v55 < 0x17ded79 || (char)function_403840(v55) != 0) {\n        // 0x402b84\n        return function_401d80(a3, v55, 1);\n    }\n    // 0x402af0\n    v57 = v39 % v55;\n    goto lab_0x402b11;\n  lab_0x402a8f:\n    // 0x402a8f\n    v56 = function_401d80(a3, v31, 1);\n    if (v55 < 2) {\n        goto lab_0x402b79;\n    } else {\n        goto lab_0x402abf;\n    }\n  lab_0x402b11:\n    // 0x402b11\n    v17 = v44;\n    v7 = v55;\n    v9 = v45;\n    v10 = v57;\n    v15 = 0;\n    v12 = v41;\n    v4 = v40;\n    v6 = v31;\n    v8 = v55;\n    if (v23 < v55) {\n        goto lab_0x402888;\n    } else {\n        goto lab_0x402b1b;\n    }\n}\n"
        },
        {
            "funcName": "function_402bf0",
            "funcStartAddr": "402bf0",
            "funcEndAddr": "403205",
            "decompiledFuncCode": "int64_t function_402bf0(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = a1 >= 2; // 0x402c2c\n    int64_t v2 = a1 < 2 ? 127 : 63; // 0x402c2c\n    int64_t v3 = a1 < 2; // 0x402c2c\n    int64_t v4; // 0x402bf0\n    int64_t v5; // 0x402bf0\n    int64_t v6; // 0x402bf0\n    while (true) {\n      lab_0x402c30:\n        // 0x402c30\n        v5 = v2;\n        uint64_t v7 = 2 * v3; // 0x402c36\n        int64_t v8 = v3 >> 63 | 2 * v1; // 0x402c3d\n        if (v8 > a1) {\n            // 0x402c4c\n            v4 = v8 - a1 + (int64_t)(v7 < a2);\n            v6 = v7 - a2;\n            goto lab_0x402c52;\n        } else {\n            // 0x402c45\n            if (v7 < a2 || v8 != a1) {\n                goto lab_0x402c52;\n            } else {\n                // 0x402c4c\n                v4 = v8 - a1 + (int64_t)(v7 < a2);\n                v6 = v7 - a2;\n                goto lab_0x402c52;\n            }\n        }\n    }\n  lab_0x402c5c:;\n    // 0x402c5c\n    int64_t v9; // 0x402bf0\n    int64_t v10 = v9; // bp-168, 0x402c5f\n    int64_t v11; // 0x402bf0\n    uint64_t v12 = 2 * v11; // 0x402c68\n    int64_t v13 = 2 * v9 | (int64_t)(v12 < v11); // 0x402c6b\n    int64_t v14; // 0x402bf0\n    int64_t v15; // 0x402bf0\n    if (v13 > a1) {\n        // 0x402c85\n        v14 = (int64_t)(v12 < a2) - a1 + v13;\n        v15 = v12 - a2;\n        goto lab_0x402c96;\n    } else {\n        // 0x402c7e\n        v14 = v13;\n        v15 = v12;\n        if (v12 < a2 || v13 != a1) {\n            goto lab_0x402c96;\n        } else {\n            // 0x402c85\n            v14 = (int64_t)(v12 < a2) - a1 + v13;\n            v15 = v12 - a2;\n            goto lab_0x402c96;\n        }\n    }\n  lab_0x402f35:;\n    // 0x402f35\n    uint64_t v16; // 0x402bf0\n    uint64_t v17; // 0x402bf0\n    uint64_t v18; // 0x402f15\n    int64_t v19; // 0x402f18\n    int64_t v20 = (int64_t)(v18 < v16) - v17 + v19; // 0x402f38\n    int64_t * v21; // 0x402bf0\n    *v21 = v20;\n    int64_t v22 = v20; // 0x402f43\n    int64_t v23 = v18 - v16; // 0x402f43\n    goto lab_0x402f46;\n  lab_0x402f46:;\n    int64_t v24 = v23;\n    int64_t * v25; // 0x402bf0\n    int64_t v26 = *v25; // 0x402f6f\n    if (v26 != 0) {\n        // break (via goto) -> 0x402f7d\n        goto lab_0x402f7d;\n    }\n    int64_t v27 = v22; // 0x402eec\n    int64_t v28 = v24; // 0x402eec\n    if (v24 != 1) {\n        // break -> 0x40304b\n        goto lab_0x40304b;\n    }\n    goto lab_0x402ef2;\n  lab_0x402e3e:;\n    // 0x402e3e\n    uint64_t v38; // 0x402e1c\n    int64_t v39; // 0x402e1f\n    int64_t v40 = (int64_t)(v38 < v16) - v17 + v39; // 0x402e41\n    int64_t * v41; // 0x402bf0\n    *v41 = v40;\n    int64_t v42 = v38 - v16; // 0x402e4c\n    int64_t v43 = v40; // 0x402e4c\n    goto lab_0x402e4f;\n  lab_0x402e4f:;\n    // 0x402e4f\n    int64_t v44; // 0x402bf0\n    int64_t v45 = v44 + 1; // 0x402e4f\n    int64_t v46 = v42; // 0x402e56\n    int64_t v47 = v43; // 0x402e56\n    v44 = v45;\n    int64_t v48; // 0x402dca\n    if (v48 == v45) {\n        // break -> 0x402e58\n        goto lab_0x402e58;\n    }\n    goto lab_0x402e00;\n  lab_0x402d51:;\n    // 0x402d51\n    uint64_t v53; // 0x402d2f\n    int64_t v54; // 0x402d34\n    int64_t v55 = (int64_t)(v53 < v16) - v17 + v54; // 0x402d54\n    *v41 = v55;\n    int64_t v56 = v53 - v16; // 0x402d5f\n    int64_t v57 = v55; // 0x402d5f\n    goto lab_0x402d62;\n  lab_0x402d62:;\n    int64_t v58 = v56;\n    int64_t * v59; // 0x402bf0\n    uint64_t v60 = *v59; // 0x402d67\n    int64_t v61 = v60 - v58; // 0x402d6c\n    int64_t * v62; // 0x402bf0\n    int64_t v63 = *v62 - v57 + (int64_t)(v60 < v58); // 0x402d6f\n    int64_t v64 = v63; // 0x402d75\n    int64_t v65 = v61; // 0x402d75\n    if (v63 < 0) {\n        int64_t v66 = v61 + v16; // 0x402d77\n        v64 = v63 + v17 + (int64_t)(v66 < v61);\n        v65 = v66;\n    }\n    // 0x402d7d\n    int64_t v32; // 0x402d0a\n    int64_t * v31; // 0x402bf0\n    *v31 = v32;\n    int64_t * v33; // 0x402bf0\n    *v33 = v16;\n    int64_t * v67; // 0x402bf0\n    int64_t v68 = *v67; // 0x402d84\n    int64_t v35; // 0x402d20\n    int64_t v69 = function_401f60(v35, v10, v68, v64, v65, v17, (int64_t)&g62, (int64_t)&g62); // 0x402d93\n    *v67 = v69;\n    int64_t * v37; // 0x402bf0\n    v10 = *v37;\n    uint64_t v70; // 0x402bf0\n    int64_t v71; // 0x402bf0\n    int64_t v72; // 0x402bf0\n    int64_t v73; // 0x402bf0\n    if (v70 % 32 == 1) {\n        // 0x402e88\n        if (*v25 != 0) {\n            // break -> 0x402ec8\n            goto lab_0x402ec8;\n        }\n        int64_t v74 = *v41; // 0x402eaf\n        *v21 = v74;\n        v73 = v74;\n        v72 = v58;\n    } else {\n        // 0x402dbb\n        v73 = *v41;\n        v72 = v71;\n    }\n    int64_t v75 = v73;\n    int64_t v76 = v70 - 1; // 0x402dc0\n    int64_t v77 = v58; // 0x402dc4\n    int64_t v78 = v75; // 0x402dc4\n    int64_t v79 = v76; // 0x402dc4\n    int64_t v80 = v72; // 0x402dc4\n    int64_t * v52; // 0x402bf0\n    int64_t * v81; // 0x402bf0\n    int64_t * v82; // 0x402bf0\n    if (v76 == 0) {\n        // 0x402dca\n        v48 = *v81;\n        *v62 = v75;\n        *v59 = 2 * v48;\n        int64_t v83 = v58; // 0x402de3\n        int64_t v84 = v75; // 0x402de3\n        int64_t v85 = v58; // 0x402de3\n        if (v48 != 0) {\n            // 0x402de5\n            *v82 = v58;\n            v46 = v58;\n            v47 = v75;\n            v44 = v76;\n            while (true) {\n              lab_0x402e00:;\n                int64_t v49 = v47;\n                int64_t v50 = v46;\n                *v31 = v32;\n                *v33 = v16;\n                uint64_t v51 = function_401f60(v35, v49, v50, v49, v50, v17, (int64_t)&g62, (int64_t)&g62); // 0x402e12\n                v38 = v51 + *v52;\n                v39 = *v37 + (int64_t)(v38 < v51);\n                *v41 = v39;\n                if (v17 < v39) {\n                    goto lab_0x402e3e;\n                } else {\n                    // 0x402e37\n                    v42 = v38;\n                    v43 = v39;\n                    if (v38 < v16 || v17 != v39) {\n                        goto lab_0x402e4f;\n                    } else {\n                        goto lab_0x402e3e;\n                    }\n                }\n            }\n          lab_0x402e58:;\n            int64_t v86 = *v82; // 0x402e58\n            v83 = v86;\n            int64_t v87; // 0x402bf0\n            v84 = v87;\n            int64_t v88; // 0x402bf0\n            v85 = v88;\n        }\n        // 0x402e60\n        *v59 = v83;\n        *v21 = v84;\n        *v81 = 0;\n        v77 = v85;\n        v78 = v84;\n        v79 = *v81;\n        v80 = v85;\n    }\n    int64_t v89 = v77; // 0x402bf0\n    int64_t v90 = v78; // 0x402bf0\n    int64_t v91 = v79; // 0x402bf0\n    int64_t v92 = v80; // 0x402bf0\n    goto lab_0x402d10;\n  lab_0x403170:;\n    // 0x403170\n    int64_t v96; // 0x402bf0\n    int64_t * v97; // 0x402bf0\n    function_4027d0(v96, *v52 + 1, *v97);\n    goto lab_0x4030f5;\n  lab_0x4030f5:;\n    // 0x4030f5\n    unsigned char v98; // 0x403068\n    int64_t v99 = v98; // 0x403068\n    int64_t v100 = (2 - v24 * v99) * v99; // 0x40307b\n    int64_t v101 = (2 - v100 * v24) * v100; // 0x40308a\n    goto lab_0x403007;\n    int64_t v103 = 0; // 0x40316b\n    int64_t v104 = (2 - v101 * v24) * v101 * v16; // 0x40316b\n    int64_t v105; // 0x403063\n    int64_t v106 = v105; // 0x40316b\n    goto lab_0x402cd0;\n  lab_0x4030e3:;\n    // 0x4030e3\n    int64_t v112; // 0x4030d6\n    function_401d80(*v97, v112, 1);\n    goto lab_0x4030f5;\n  lab_0x402c52:\n    // 0x402c52\n    v11 = v6;\n    v9 = v4;\n    v1 = v9;\n    v2 = v5 - 1;\n    v3 = v11;\n    if (v5 == 0) {\n        // break -> 0x402c5c\n        goto lab_0x402c5c;\n    }\n    goto lab_0x402c30;\n  lab_0x402c96:;\n    int64_t result = v14; // 0x402ca4\n    if (a1 == 0 == a2 == 1) {\n        // 0x40303c\n        return result;\n    }\n    int64_t v111 = &v10; // 0x402c00\n    v25 = (int64_t *)(v111 + 96);\n    v31 = (int64_t *)(v111 - 8);\n    v33 = (int64_t *)(v111 - 16);\n    v35 = v111 + 104;\n    v37 = (int64_t *)v35;\n    v52 = (int64_t *)(v111 + 24);\n    v41 = (int64_t *)(v111 + 72);\n    v62 = (int64_t *)(v111 + 80);\n    v59 = (int64_t *)(v111 + 16);\n    v67 = (int64_t *)(v111 + 8);\n    v21 = (int64_t *)(v111 + 88);\n    v81 = (int64_t *)(v111 + 32);\n    v82 = (int64_t *)(v111 + 40);\n    v97 = (int64_t *)(v111 + 48);\n    v103 = a1;\n    v104 = a2;\n    v106 = 1;\n    int64_t v36; // 0x402ecd\n    while (true) {\n      lab_0x402cd0:\n        // 0x402cd0\n        v16 = v104;\n        v17 = v103;\n        unsigned char v107 = *(char *)(v16 / 2 % 128 + (int64_t)&g4); // 0x402cd9\n        int64_t v108 = v107; // 0x402cd9\n        int64_t v109 = (2 - v16 * v108) * v108; // 0x402cec\n        int64_t v110 = (2 - v109 * v16) * v109; // 0x402cfb\n        v32 = (2 - v110 * v16) * v110;\n        v89 = v15;\n        v90 = v14;\n        v91 = v106;\n        v92 = v15;\n        while (true) {\n          lab_0x402d10:\n            // 0x402d10\n            v71 = v92;\n            v70 = v91;\n            int64_t v93 = v90;\n            int64_t v94 = v89;\n            *v31 = v32;\n            *v33 = v16;\n            uint64_t v95 = function_401f60(v35, v93, v94, v93, v94, v17, (int64_t)&g62, (int64_t)&g62); // 0x402d25\n            v53 = *v52 + v95;\n            v54 = *v37 + (int64_t)(v53 < v95);\n            *v41 = v54;\n            if (v17 < v54) {\n                goto lab_0x402d51;\n            } else {\n                // 0x402d4a\n                v56 = v53;\n                v57 = v54;\n                if (v53 < v16 || v17 != v54) {\n                    goto lab_0x402d62;\n                } else {\n                    goto lab_0x402d51;\n                }\n            }\n        }\n      lab_0x402ec8:\n        // 0x402ec8\n        *v82 = v70;\n        v36 = *v52;\n        *(int64_t *)(v111 + 56) = v58;\n        v27 = *v21;\n        v28 = v71;\n        while (true) {\n          lab_0x402ef2:;\n            int64_t v29 = v28;\n            int64_t v30 = v27; // 0x402ef2\n            *v31 = v32;\n            *v33 = v16;\n            uint64_t v34 = function_401f60(v35, v30, v29, v30, v29, v17, (int64_t)&g62, (int64_t)&g62); // 0x402f0b\n            v18 = v34 + v36;\n            v19 = *v37 + (int64_t)(v18 < v34);\n            *v21 = v19;\n            if (v17 < v19) {\n                goto lab_0x402f35;\n            } else {\n                // 0x402f2e\n                v22 = v19;\n                v23 = v18;\n                if (v18 < v16 || v17 != v19) {\n                    goto lab_0x402f46;\n                } else {\n                    goto lab_0x402f35;\n                }\n            }\n        }\n      lab_0x40304b:\n        // 0x40304b\n        *v52 = v36;\n        v105 = *v82;\n        v98 = *(char *)(v24 / 2 % 128 + (int64_t)&g4);\n        // 0x4030b6\n        v96 = v24;\n        if (v24 < 2) {\n            goto lab_0x403170;\n        } else {\n            // 0x4030c0\n            v112 = v24;\n            if (v24 < 0x17ded79) {\n                goto lab_0x4030e3;\n            } else {\n                // 0x4030c9\n                *v82 = v24;\n                int64_t v113 = function_403840(v24); // 0x4030d1\n                v112 = *v82;\n                v96 = v112;\n                if ((char)v113 == 0) {\n                    goto lab_0x403170;\n                } else {\n                    goto lab_0x4030e3;\n                }\n            }\n        }\n    }\n  lab_0x402f7d:\n    // 0x402f7d\n    *v52 = v36;\n    if (v16 == v24 == v17 == v26) {\n        // 0x40303c\n        return function_402bf0(v17, v16, v36 + 1, *v97);\n    }\n    // 0x402f93\n    v10 = v24;\n    unsigned char v114 = *(char *)(v24 / 2 % 128 + (int64_t)&g4); // 0x402fa3\n    int64_t v115 = v114; // 0x402fa3\n    int64_t v116 = (2 - v24 * v115) * v115; // 0x402fb6\n    int64_t v117 = (2 - v116 * v24) * v116; // 0x402fc5\n    int64_t v118 = v117 * v16 * (2 - v117 * v24); // 0x402fd7\n    int64_t v102 = v118; // 0x402fe6\n    if ((char)function_404050(v26, v24) == 0) {\n        // 0x402fec\n        function_402bf0(*v25, v10, *v52 + 1, *v97);\n        v102 = v118;\n    }\n  lab_0x403007:\n    // 0x403007\n    if (v102 < 2) {\n        // 0x403192\n        return function_4027d0(v102, *v52, *v97);\n    }\n    if (v102 >= 0x17ded79) {\n        // 0x40301a\n        if ((char)function_403840(v102) == 0) {\n            // 0x403192\n            return function_4027d0(v102, *v52, *v97);\n        }\n    }\n    // 0x40303c\n    return function_401d80(*v97, v102, 1);\n}\n"
        },
        {
            "funcName": "function_403210",
            "funcStartAddr": "403210",
            "funcEndAddr": "403836",
            "decompiledFuncCode": "int64_t function_403210(int32_t a1, uint64_t a2, int64_t * a3, int64_t a4) {\n    int64_t v1 = (int64_t)a3;\n    *(char *)(v1 + 250) = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    if (a1 == 0 == a2 < 2) {\n        // 0x403245\n        int64_t result; // 0x403210\n        return result;\n    }\n    int32_t v2 = a1; // 0x40325c\n    int64_t v3 = a2; // 0x40325c\n    int64_t v4; // 0x403210\n    int64_t v5; // 0x403210\n    int64_t v6; // 0x403210\n    if (a2 % 2 != 0) {\n        goto lab_0x4032f5;\n    } else {\n        uint64_t v7 = (int64_t)a1;\n        if (a2 != 0) {\n            uint64_t v8 = llvm_cttz_i64(a2, true); // 0x4032cf\n            int64_t v9 = function_401d80(v1, 2, v8); // 0x4032f0\n            v2 = v7 >> v8;\n            v6 = v9;\n            v3 = v7 << -v8 % 64 | a2 >> v8;\n            goto lab_0x4032f5;\n        } else {\n            uint64_t v10 = a1 == 0 ? a4 : llvm_cttz_i64(v7, true); // 0x403276\n            v5 = function_401d80(v1, 2, v10 + 64 & 0xffffffff);\n            v4 = v7 >> v10 % 64;\n            goto lab_0x403291;\n        }\n    }\n  lab_0x4032f5:\n    // 0x4032f5\n    v5 = v6;\n    v4 = v3;\n    int64_t v11; // 0x403210\n    int64_t v12; // 0x403210\n    int64_t v13; // 0x403210\n    int64_t v14; // 0x403210\n    int64_t result3; // 0x403210\n    int64_t v15; // 0x403210\n    int32_t v16; // 0x403210\n    int32_t v17; // 0x403210\n    if (v2 == 0) {\n        goto lab_0x403291;\n    } else {\n        function_401d80(v1, 3, 1);\n        while (true) {\n            function_401d80(v1, 3, 1);\n        }\n        // 0x4033d8\n        v16 = 0;\n        v14 = 0;\n        v15 = 1;\n        v11 = 0;\n        v12 = 0;\n        v17 = 0;\n        result3 = 0;\n        v13 = 0;\n        goto lab_0x403670;\n    }\n  lab_0x403291:;\n    int32_t v18 = 0; // 0x4032b5\n    int64_t v19 = v5; // 0x4032b5\n    int64_t v20 = 0; // 0x4032b5\n    int64_t v21 = -0x5555555555555555; // 0x4032b5\n    int64_t v22 = 3; // 0x4032b5\n    int64_t v23 = 26; // 0x4032b5\n    int64_t v24 = v4; // 0x4032b5\n    int64_t v25 = 0x5555555555555555; // 0x4032b5\n    goto lab_0x4034af;\n  lab_0x4034af:;\n    uint64_t v26 = v25;\n    int64_t v27 = v24;\n    int64_t v28 = v22;\n    int64_t v29 = v21;\n    int64_t v30 = v20;\n    int64_t v31 = 16 * v30; // 0x4034b2\n    int64_t v32 = v27 * v29; // 0x4034b6\n    int64_t v33 = v32; // 0x4034c4\n    int64_t * v34; // 0x403210\n    int64_t * v35; // 0x403210\n    int64_t v36; // 0x403210\n    int64_t v37; // 0x403210\n    int64_t v38; // 0x403210\n    if (v32 > v26) {\n        int64_t * v39 = (int64_t *)(v31 + (int64_t)&g5 + 16);\n        int64_t v40 = *v39 * v27; // 0x4033f4\n        int64_t * v41 = (int64_t *)(v31 + (int64_t)&g5 + 24);\n        v37 = v19;\n        v36 = v27;\n        v35 = v41;\n        v34 = v39;\n        v38 = v40;\n        if (v40 > *v41) {\n            goto lab_0x403402;\n        } else {\n            goto lab_0x403510;\n        }\n    } else {\n        int64_t v42 = v33;\n        int64_t v43 = function_401d80(v1, v28, 1); // 0x4034df\n        int64_t v44 = v42 * v29; // 0x4034ec\n        while (v44 <= v26) {\n            // 0x4034ca\n            v42 = v44;\n            v43 = function_401d80(v1, v28, 1);\n            v44 = v42 * v29;\n        }\n        int64_t * v45 = (int64_t *)(v31 + (int64_t)&g5 + 16);\n        int64_t v46 = *v45 * v42; // 0x4034f9\n        int64_t * v47 = (int64_t *)(v31 + (int64_t)&g5 + 24);\n        v37 = v43;\n        v36 = v42;\n        v35 = v47;\n        v34 = v45;\n        v38 = v46;\n        if (v46 > *v47) {\n            goto lab_0x403402;\n        } else {\n            goto lab_0x403510;\n        }\n    }\n  lab_0x403490:;\n    int64_t v48 = v15 & 0xffffffff;\n    int64_t v49 = 16 * v48; // 0x40349d\n    v18 = v16;\n    v19 = v14;\n    v20 = v48;\n    v21 = *(int64_t *)(v49 + (int64_t)&g5);\n    v22 = v11;\n    v23 = (int64_t)*(char *)(v48 + (int64_t)&g7);\n    v24 = v12;\n    v25 = *(int64_t *)(v49 + (int64_t)&g6);\n    goto lab_0x4034af;\n  lab_0x403670:\n    // 0x403670\n    if (v17 != 0) {\n        int64_t v50 = v17; // 0x403800\n        int64_t result2 = function_404050(v50, v13); // 0x403808\n        if ((char)result2 == 0) {\n            // 0x403811\n            return function_402bf0(v50, v13, 1, v1);\n        }\n        // 0x403245\n        return result2;\n    }\n    // 0x40367c\n    if (v13 < 2) {\n        // 0x403245\n        return result3;\n    }\n    int64_t result4 = function_404050(0, v13); // 0x40368b\n    if ((char)result4 == 0) {\n        // 0x403698\n        return function_4027d0(v13, 1, v1);\n    }\n    // 0x403245\n    return result4;\n  lab_0x403402:;\n    int64_t * v51 = (int64_t *)(v31 + (int64_t)&g5 + 32);\n    int64_t v52 = *v51 * v36; // 0x403406\n    int64_t * v53 = (int64_t *)(v31 + (int64_t)&g5 + 40);\n    int64_t v54 = v37; // 0x40340e\n    int64_t v55 = v36; // 0x40340e\n    int64_t * v56; // 0x403210\n    int64_t * v57; // 0x403210\n    int64_t v58; // 0x403210\n    char * v59; // 0x403210\n    int64_t v60; // 0x403210\n    if (v52 > *v53) {\n        goto lab_0x403414;\n    } else {\n        int64_t v61 = v30 + 1;\n        v59 = (char *)((v61 & 0xffffffff) + 0x40efa0);\n        v58 = v61;\n        v57 = v53;\n        v56 = v51;\n        v60 = v52;\n        goto lab_0x403558;\n    }\n  lab_0x403510:;\n    int64_t v62 = v30 + 1;\n    char * v63 = (char *)((v62 & 0xffffffff) + 0x40efa0);\n    int64_t v64 = v38;\n    int64_t v65 = function_401d80(v1, v28 + (int64_t)*v63, 1); // 0x40352e\n    int64_t v66 = *v34 * v64; // 0x403537\n    while (v66 <= *v35) {\n        // 0x40351e\n        v64 = v66;\n        v65 = function_401d80(v1, v28 + (int64_t)*v63, 1);\n        v66 = *v34 * v64;\n    }\n    int64_t * v67 = (int64_t *)(v31 + (int64_t)&g5 + 32);\n    int64_t v68 = *v67 * v64; // 0x403545\n    int64_t * v69 = (int64_t *)(v31 + (int64_t)&g5 + 40);\n    v54 = v65;\n    v55 = v64;\n    v59 = v63;\n    v58 = v62;\n    v57 = v69;\n    v56 = v67;\n    v60 = v68;\n    if (v68 > *v69) {\n        goto lab_0x403414;\n    } else {\n        goto lab_0x403558;\n    }\n  lab_0x403414:;\n    int64_t * v70 = (int64_t *)(v31 + (int64_t)&g5 + 48);\n    int64_t v71 = *v70 * v55; // 0x403418\n    int64_t * v72 = (int64_t *)(v31 + (int64_t)&g5 + 56);\n    int64_t v73 = v54; // 0x403420\n    int64_t v74 = v55; // 0x403420\n    int64_t * v75; // 0x403210\n    int64_t * v76; // 0x403210\n    int64_t v77; // 0x403210\n    char * v78; // 0x403210\n    char * v79; // 0x403210\n    int64_t v80; // 0x403210\n    if (*v72 >= v71) {\n        int64_t v81 = v30 + 1; // 0x4035b0\n        v79 = (char *)((v30 + 2 & 0xffffffff) + 0x40efa0);\n        v78 = (char *)((v81 & 0xffffffff) + 0x40efa0);\n        v77 = v81;\n        v76 = v72;\n        v75 = v70;\n        v80 = v71;\n        goto lab_0x4035b0;\n    } else {\n        goto lab_0x403426;\n    }\n  lab_0x403558:;\n    char * v82 = (char *)((v30 + 2 & 0xffffffff) + 0x40efa0);\n    int64_t v83 = v28 + (int64_t)*v59 + (int64_t)*v82; // 0x403570\n    int64_t v84 = v60;\n    int64_t v85 = function_401d80(v1, v83, 1); // 0x403583\n    int64_t v86 = *v56 * v84; // 0x40358c\n    while (v86 <= *v57) {\n        // 0x403573\n        v84 = v86;\n        v85 = function_401d80(v1, v83, 1);\n        v86 = *v56 * v84;\n    }\n    int64_t * v87 = (int64_t *)(v31 + (int64_t)&g5 + 48);\n    int64_t v88 = *v87 * v84; // 0x40359a\n    int64_t * v89 = (int64_t *)(v31 + (int64_t)&g5 + 56);\n    v73 = v85;\n    v74 = v84;\n    v79 = v82;\n    v78 = v59;\n    v77 = v58;\n    v76 = v89;\n    v75 = v87;\n    v80 = v88;\n    if (*v89 < v88) {\n        goto lab_0x403426;\n    } else {\n        goto lab_0x4035b0;\n    }\n  lab_0x403426:;\n    int64_t * v90 = (int64_t *)(v31 + (int64_t)&g5 + 64);\n    int64_t v91 = *v90 * v74; // 0x40342a\n    int64_t * v92 = (int64_t *)(v31 + (int64_t)&g5 + 72);\n    int64_t v93 = v73; // 0x403432\n    int64_t v94 = v74; // 0x403432\n    int64_t * v95; // 0x403210\n    int64_t * v96; // 0x403210\n    int64_t v97; // 0x403210\n    int64_t v98; // 0x403210\n    if (*v92 >= v91) {\n        // 0x403426\n        v97 = v30 + 1;\n        v96 = v92;\n        v95 = v90;\n        v98 = v91;\n        goto lab_0x403610;\n    } else {\n        goto lab_0x403438;\n    }\n  lab_0x4035b0:;\n    unsigned char v99 = *v78; // 0x4035b3\n    unsigned char v100 = *(char *)((v30 + 3 & 0xffffffff) + 0x40efa0); // 0x4035be\n    unsigned char v101 = *v79; // 0x4035cb\n    int64_t v102 = v28 + (int64_t)v99 + (int64_t)v100 + (int64_t)v101; // 0x4035d5\n    int64_t v103 = v80;\n    int64_t v104 = function_401d80(v1, v102, 1); // 0x4035e8\n    int64_t v105 = *v75 * v103; // 0x4035f1\n    while (v105 <= *v76) {\n        // 0x4035d8\n        v103 = v105;\n        v104 = function_401d80(v1, v102, 1);\n        v105 = *v75 * v103;\n    }\n    int64_t * v106 = (int64_t *)(v31 + (int64_t)&g5 + 64);\n    int64_t v107 = *v106 * v103; // 0x4035ff\n    int64_t * v108 = (int64_t *)(v31 + (int64_t)&g5 + 72);\n    v93 = v104;\n    v94 = v103;\n    v97 = v77;\n    v96 = v108;\n    v95 = v106;\n    v98 = v107;\n    if (*v108 < v107) {\n        goto lab_0x403438;\n    } else {\n        goto lab_0x403610;\n    }\n  lab_0x403438:;\n    int64_t * v109 = (int64_t *)(v31 + (int64_t)&g5 + 80); // 0x403438\n    int64_t v110 = *v109 * v94; // 0x40343c\n    int64_t * v111 = (int64_t *)(v31 + (int64_t)&g5 + 88); // 0x403440\n    int64_t v112 = v93; // 0x403444\n    int64_t v113 = v94; // 0x403444\n    if (v110 <= *v111) {\n        int64_t v114 = v30 + 6; // 0x403787\n        int64_t v115 = v30 + 1 & 0xffffffff;\n        int64_t v116 = v115 + 1; // 0x40379a\n        unsigned char v117 = *(char *)(v115 + (int64_t)&g8); // 0x40379d\n        int64_t v118 = v28 + (int64_t)v117; // 0x4037a4\n        int64_t v119 = v118; // 0x4037aa\n        while ((int32_t)v114 != (int32_t)v116) {\n            // 0x403798\n            v115 = v116 & 0xffffffff;\n            v116 = v115 + 1;\n            v117 = *(char *)(v115 + (int64_t)&g8);\n            v118 = v119 + (int64_t)v117;\n            v119 = v118;\n        }\n        int64_t v120 = function_401d80(v1, v118, 1); // 0x4037bb\n        int64_t v121 = *v109 * v110; // 0x4037c9\n        v112 = v120;\n        v113 = v110;\n        v114 &= 0xffffffff;\n        while (v121 <= *v111) {\n            int64_t v122 = v121;\n            v115 = v30 + 1 & 0xffffffff;\n            v116 = v115 + 1;\n            v117 = *(char *)(v115 + (int64_t)&g8);\n            v118 = v28 + (int64_t)v117;\n            v119 = v118;\n            while ((int32_t)v114 != (int32_t)v116) {\n                // 0x403798\n                v115 = v116 & 0xffffffff;\n                v116 = v115 + 1;\n                v117 = *(char *)(v115 + (int64_t)&g8);\n                v118 = v119 + (int64_t)v117;\n                v119 = v118;\n            }\n            // 0x4037ac\n            v120 = function_401d80(v1, v118, 1);\n            v121 = *v109 * v122;\n            v112 = v120;\n            v113 = v122;\n            v114 &= 0xffffffff;\n        }\n    }\n    int64_t * v123 = (int64_t *)(v31 + (int64_t)&g5 + 96); // 0x40344a\n    int64_t v124 = *v123 * v113; // 0x40344e\n    int64_t * v125 = (int64_t *)(v31 + (int64_t)&g5 + 104); // 0x403452\n    int64_t v126 = v112; // 0x403456\n    int64_t v127 = v113; // 0x403456\n    if (*v125 >= v124) {\n        int64_t v128 = v30 + 7; // 0x403727\n        int64_t v129 = v30 + 1 & 0xffffffff;\n        int64_t v130 = v129 + 1; // 0x40373a\n        unsigned char v131 = *(char *)(v129 + (int64_t)&g8); // 0x40373d\n        int64_t v132 = v28 + (int64_t)v131; // 0x403744\n        int64_t v133 = v132; // 0x40374a\n        while ((int32_t)v128 != (int32_t)v130) {\n            // 0x403738\n            v129 = v130 & 0xffffffff;\n            v130 = v129 + 1;\n            v131 = *(char *)(v129 + (int64_t)&g8);\n            v132 = v133 + (int64_t)v131;\n            v133 = v132;\n        }\n        int64_t v134 = function_401d80(v1, v132, 1); // 0x40375b\n        int64_t v135 = *v123 * v124; // 0x403769\n        v126 = v134;\n        v127 = v124;\n        v128 &= 0xffffffff;\n        while (v135 <= *v125) {\n            int64_t v136 = v135;\n            v129 = v30 + 1 & 0xffffffff;\n            v130 = v129 + 1;\n            v131 = *(char *)(v129 + (int64_t)&g8);\n            v132 = v28 + (int64_t)v131;\n            v133 = v132;\n            while ((int32_t)v128 != (int32_t)v130) {\n                // 0x403738\n                v129 = v130 & 0xffffffff;\n                v130 = v129 + 1;\n                v131 = *(char *)(v129 + (int64_t)&g8);\n                v132 = v133 + (int64_t)v131;\n                v133 = v132;\n            }\n            // 0x40374c\n            v134 = function_401d80(v1, v132, 1);\n            v135 = *v123 * v136;\n            v126 = v134;\n            v127 = v136;\n            v128 &= 0xffffffff;\n        }\n    }\n    int64_t * v137 = (int64_t *)(v31 + (int64_t)&g5 + 112); // 0x40345c\n    int64_t v138 = *v137 * v127; // 0x403460\n    int64_t * v139 = (int64_t *)(v31 + (int64_t)&g5 + 120); // 0x403464\n    int64_t v140 = v126; // 0x403468\n    int64_t v141 = v127; // 0x403468\n    if (v138 <= *v139) {\n        int64_t v142 = v30 + 8; // 0x4036c7\n        int64_t v143 = v30 + 1 & 0xffffffff;\n        int64_t v144 = v143 + 1; // 0x4036da\n        unsigned char v145 = *(char *)(v143 + (int64_t)&g8); // 0x4036dd\n        int64_t v146 = v28 + (int64_t)v145; // 0x4036e4\n        int64_t v147 = v146; // 0x4036ea\n        while ((int32_t)v142 != (int32_t)v144) {\n            // 0x4036d8\n            v143 = v144 & 0xffffffff;\n            v144 = v143 + 1;\n            v145 = *(char *)(v143 + (int64_t)&g8);\n            v146 = v147 + (int64_t)v145;\n            v147 = v146;\n        }\n        int64_t v148 = function_401d80(v1, v146, 1); // 0x4036fb\n        int64_t v149 = *v137 * v138; // 0x403709\n        v140 = v148;\n        v141 = v138;\n        v142 &= 0xffffffff;\n        while (v149 <= *v139) {\n            int64_t v150 = v149;\n            v143 = v30 + 1 & 0xffffffff;\n            v144 = v143 + 1;\n            v145 = *(char *)(v143 + (int64_t)&g8);\n            v146 = v28 + (int64_t)v145;\n            v147 = v146;\n            while ((int32_t)v142 != (int32_t)v144) {\n                // 0x4036d8\n                v143 = v144 & 0xffffffff;\n                v144 = v143 + 1;\n                v145 = *(char *)(v143 + (int64_t)&g8);\n                v146 = v147 + (int64_t)v145;\n                v147 = v146;\n            }\n            // 0x4036ec\n            v148 = function_401d80(v1, v146, 1);\n            v149 = *v137 * v150;\n            v140 = v148;\n            v141 = v150;\n            v142 &= 0xffffffff;\n        }\n    }\n    int64_t v151 = v23 + v28; // 0x40346e\n    v17 = v18;\n    result3 = v140;\n    v13 = v141;\n    if (v141 < v151 * v151) {\n        goto lab_0x403670;\n    } else {\n        int64_t v152 = v30 + 8; // 0x403481\n        v16 = v18;\n        v14 = v140;\n        v15 = v152;\n        v11 = v151;\n        v12 = v141;\n        v17 = v18;\n        result3 = v140;\n        v13 = v141;\n        if ((int32_t)v152 < 668) {\n            goto lab_0x403490;\n        } else {\n            goto lab_0x403670;\n        }\n    }\n  lab_0x403610:;\n    int64_t v153 = v30 + 5; // 0x403617\n    int64_t v154 = v97 & 0xffffffff;\n    int64_t v155 = v154 + 1; // 0x40362a\n    unsigned char v156 = *(char *)(v154 + (int64_t)&g8); // 0x40362d\n    int64_t v157 = v28 + (int64_t)v156; // 0x403634\n    int64_t v158 = v157; // 0x40363a\n    while ((int32_t)v153 != (int32_t)v155) {\n        // 0x403628\n        v154 = v155 & 0xffffffff;\n        v155 = v154 + 1;\n        v156 = *(char *)(v154 + (int64_t)&g8);\n        v157 = v158 + (int64_t)v156;\n        v158 = v157;\n    }\n    int64_t v159 = function_401d80(v1, v157, 1); // 0x40364b\n    int64_t v160 = *v95 * v98; // 0x403659\n    v93 = v159;\n    v94 = v98;\n    v153 &= 0xffffffff;\n    int64_t v161 = v160; // 0x403661\n    while (v160 <= *v96) {\n        // 0x40361b\n        v154 = v97 & 0xffffffff;\n        v155 = v154 + 1;\n        v156 = *(char *)(v154 + (int64_t)&g8);\n        v157 = v28 + (int64_t)v156;\n        v158 = v157;\n        while ((int32_t)v153 != (int32_t)v155) {\n            // 0x403628\n            v154 = v155 & 0xffffffff;\n            v155 = v154 + 1;\n            v156 = *(char *)(v154 + (int64_t)&g8);\n            v157 = v158 + (int64_t)v156;\n            v158 = v157;\n        }\n        // 0x40363c\n        v159 = function_401d80(v1, v157, 1);\n        v160 = *v95 * v161;\n        v93 = v159;\n        v94 = v161;\n        v153 &= 0xffffffff;\n        v161 = v160;\n    }\n    goto lab_0x403438;\n}\n"
        },
        {
            "funcName": "function_403840",
            "funcStartAddr": "403840",
            "funcEndAddr": "404045",
            "decompiledFuncCode": "int64_t function_403840(uint64_t a1) {\n    // 0x403840\n    int32_t v1; // 0x403840\n    uint32_t v2 = v1;\n    int64_t v3 = a1 - 1; // 0x403844\n    int64_t v4 = v3; // 0x403861\n    int32_t v5 = 0; // 0x403861\n    if (v3 % 2 == 0) {\n        uint64_t v6 = v4;\n        v4 = v6 / 2;\n        int64_t v7 = 1; // 0x403873\n        int64_t v8 = v7 & 0xffffffff; // 0x40387a\n        while ((v6 & 2) == 0) {\n            // 0x403870\n            v6 = v4;\n            v4 = v6 / 2;\n            v7 = v8 + 1;\n            v8 = v7 & 0xffffffff;\n        }\n        // 0x40387c\n        v5 = v7;\n    }\n    unsigned char v9 = *(char *)(a1 / 2 % 128 + (int64_t)&g4); // 0x403894\n    int64_t v10 = v9; // 0x403894\n    int64_t v11 = (2 - v10 * a1) * v10; // 0x4038a7\n    int64_t v12 = (2 - v11 * a1) * v11; // 0x4038b6\n    int64_t v13 = 1; // 0x4038cf\n    uint64_t v14 = a1; // 0x4038cf\n    uint64_t v15 = 0; // 0x4038cf\n    int32_t v16 = 64; // 0x4038cf\n    int64_t v17 = 0; // 0x4038cf\n    int64_t v18; // 0x403840\n    while (true) {\n      lab_0x4038d0:;\n        uint64_t v19 = v17;\n        uint64_t v20 = v14;\n        int64_t v21 = v13;\n        v14 = v20 / 2;\n        v15 = v15 / 2 | 0x8000000000000000 * v20;\n        if (v21 > v14) {\n            // 0x4038ec\n            v13 = v21 - v14 + (int64_t)(v19 < v15);\n            v18 = v19 - v15;\n            goto lab_0x4038f2;\n        } else {\n            // 0x4038e5\n            v13 = v21;\n            v18 = v19;\n            if (v21 != v14 || v19 < v15) {\n                goto lab_0x4038f2;\n            } else {\n                // 0x4038ec\n                v13 = v21 - v14 + (int64_t)(v19 < v15);\n                v18 = v19 - v15;\n                goto lab_0x4038f2;\n            }\n        }\n    }\n  lab_0x4038f7:;\n    int64_t v22 = (2 - v12 * a1) * v12; // 0x4038c7\n    int64_t v23; // 0x403840\n    int64_t v24 = (a1 - v23 > v23 ? a1 : 0) + 2 * v23 - a1; // 0x403928\n    int64_t v25 = function_401ed0(a1, v22, v24, v4, v5, v23); // 0x40392f\n    if ((char)v25 == 0) {\n        // 0x403a51\n        return 0;\n    }\n    // 0x403940\n    int64_t v26; // bp-312, 0x403840\n    function_403210(0, v3, &v26, v4);\n    uint32_t v27 = v1 % 256;\n    int64_t v28 = v24; // 0x40397d\n    int64_t v29 = (int64_t)&g8; // 0x40397d\n    int64_t v30 = 2; // 0x40397d\n    int64_t v31; // 0x403840\n    int64_t v32; // 0x403840\n    char * v33; // bp-768, 0x403840\n    int32_t v34; // 0x403840\n    while (true) {\n        int64_t v35 = v29;\n        v32 = v25;\n        if (v27 == 0) {\n            // break -> 0x403a51\n            break;\n        }\n        int64_t v36; // bp-296, 0x403840\n        int64_t v37 = &v36;\n        int64_t v38 = function_401e60(v28, v3 / *(int64_t *)v37, a1, v22); // 0x4039aa\n        int64_t v39; // bp-360, 0x403840\n        while (8 * (int64_t)(v27 - 1) + 64 + (int64_t)&v39 != v37) {\n            int64_t v40 = v37 + 8; // 0x4039c1\n            if (v38 == v23) {\n                goto lab_0x4039c8;\n            }\n            v37 = v40;\n            v38 = function_401e60(v28, v3 / *(int64_t *)v37, a1, v22);\n        }\n        // 0x403a48\n        v32 = v25;\n        if (v38 != v23) {\n            // break -> 0x403a51\n            break;\n        }\n      lab_0x4039c8:;\n        int64_t v41 = v30 + (int64_t)*(char *)v35; // 0x4039cd\n        if (false) {\n            // 0x403ac5\n            __assert_fail(\"(s1) < (n)\", \"src/factor.c\", 1268, \"prime_p\");\n            if ((int64_t)\"src/factor.c\" != 1) {\n                int64_t v42 = llvm_cttz_i64((int64_t)\"src/factor.c\" - 1, true); // 0x403ff4\n                uint64_t v43 = (int64_t)\"src/factor.c\" == 1 ? (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256) : v42; // 0x403ff4\n                int32_t v44 = v43; // 0x403ff8\n                uint32_t v45 = -v44 % 64;\n                int64_t v46 = v45 == 0 ? (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256) : (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256) << (int64_t)v45;\n                uint64_t v47 = v43 % 64; // 0x404008\n                int64_t v48 = v47 == 0 ? (int64_t)\"src/factor.c\" - 1 : (int64_t)\"src/factor.c\" - 1 >> v47;\n                v33 = (char *)(v46 | v48);\n                v34 = v44;\n                goto lab_0x403b38;\n            } else {\n                int64_t v49 = llvm_cttz_i64((int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256), true); // 0x403b1c\n                uint64_t v50 = (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256) == 0 ? (int64_t)\"prime_p\" : v49; // 0x403b1c\n                uint64_t v51 = v50 % 64; // 0x403b29\n                int64_t v52 = v51 == 0 ? (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256) : (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256) >> v51;\n                v33 = (char *)v52;\n                v34 = (int32_t)v50 + 64;\n                goto lab_0x403b38;\n            }\n            while (true) {\n              lab_0x403a80:\n                goto lab_0x403aa2;\n            }\n        } else {\n            // 0x4039e2\n            v31 = v41 * v23 % a1;\n        }\n      lab_0x4039ea:\n        // 0x4039ea\n        v32 = 0;\n        if ((char)function_401ed0(a1, v22, v31, v4, v5, v23) == 0) {\n            // break -> 0x403a51\n            break;\n        }\n        // 0x403a0d\n        v28 = v31;\n        v29 = v35 + 1;\n        v30 = v41;\n        if (v35 == (int64_t)&g9 - 1) {\n            // 0x403a1f\n            error(0, (int32_t)\"Lucas prime test failure.  This should not happen\" ^ (int32_t)\"Lucas prime test failure.  This should not happen\", dcgettext(NULL, \"Lucas prime test failure.  This should not happen\", 5));\n            abort();\n            // UNREACHABLE\n        }\n    }\n    // 0x403a51\n    return v32 % 256;\n  lab_0x403aa2:\n    // 0x403aa2\n    v31 = 0;\n    // break -> 0x4039ea\n    goto lab_0x4039ea;\n    goto lab_0x403a80;\n  lab_0x4038f2:\n    // 0x4038f2\n    v23 = v18;\n    v16--;\n    v17 = v23;\n    if (v16 == 0) {\n        // break -> 0x4038f7\n        goto lab_0x4038f7;\n    }\n    goto lab_0x4038d0;\n  lab_0x403b38:;\n    unsigned char v53 = *(char *)(((int64_t)\"src/factor.c\" >> 1 & 127) + (int64_t)&g4); // 0x403b41\n    int64_t v54 = v53; // 0x403b41\n    int64_t v55 = (2 - v54 * (int64_t)\"src/factor.c\") * v54; // 0x403b54\n    int64_t v56 = (2 - v55 * (int64_t)\"src/factor.c\") * v55; // 0x403b63\n    int64_t v57 = (int64_t)\"(s1) < (n)\" >= 2; // 0x403b93\n    int64_t v58 = (int64_t)\"(s1) < (n)\" < 2 ? 127 : 63; // 0x403b93\n    int64_t v59 = (int64_t)\"(s1) < (n)\" < 2; // 0x403b93\n    goto lab_0x403b98;\n  lab_0x403b98:;\n    int64_t v60 = v58;\n    uint64_t v61 = 2 * v59; // 0x403b9e\n    int64_t v62 = v59 >> 63 | 2 * v57; // 0x403ba5\n    int64_t v63; // 0x403840\n    int64_t v64; // 0x403840\n    if (v62 > (int64_t)\"(s1) < (n)\") {\n        goto lab_0x403bb4;\n    } else {\n        // 0x403bad\n        v63 = v62;\n        v64 = v61;\n        if (v61 < (int64_t)\"src/factor.c\" || v62 != (int64_t)\"(s1) < (n)\") {\n            goto lab_0x403bba;\n        } else {\n            goto lab_0x403bb4;\n        }\n    }\n  lab_0x403bb4:;\n    int64_t v65 = v61 < (int64_t)\"src/factor.c\" ? (int64_t)\"(s1) < (n)\" + 1 : (int64_t)\"(s1) < (n)\"; // 0x403bb7\n    v63 = v62 - v65;\n    v64 = v61 - (int64_t)\"src/factor.c\";\n    goto lab_0x403bba;\n  lab_0x403bba:;\n    int64_t v66 = v64;\n    int64_t v67 = v63;\n    v57 = v67;\n    v58 = v60 - 1;\n    v59 = v66;\n    int64_t v68; // bp-736, 0x403840\n    int64_t v69; // bp-752, 0x403840\n    if (v60 != 0) {\n        goto lab_0x403b98;\n    } else {\n        // 0x403bc4\n        v68 = v66;\n        uint64_t v70 = 2 * v66; // 0x403bd1\n        uint64_t v71 = 2 * v67 | (int64_t)(v70 < v66); // 0x403bd4\n        v69 = v70;\n        if (v71 > (int64_t)\"(s1) < (n)\") {\n            // 0x403fd0\n            v69 = v70 - (int64_t)\"src/factor.c\";\n            goto lab_0x403bf0;\n        } else {\n            if (v70 < (int64_t)\"src/factor.c\" || v71 != (int64_t)\"(s1) < (n)\") {\n                goto lab_0x403bf0;\n            } else {\n                // 0x403fd0\n                v69 = v70 - (int64_t)\"src/factor.c\";\n                goto lab_0x403bf0;\n            }\n        }\n    }\n  lab_0x403bf0:;\n    int64_t v72 = (2 - v56 * (int64_t)\"src/factor.c\") * v56; // 0x403b72\n    char * v73 = \"src/factor.c\"; // bp-720, 0x403c0f\n    int64_t v74 = function_402240((int64_t *)&v73, v72, &v69, (int64_t *)&v33, v34, &v68); // 0x403c1f\n    if ((char)v74 == 0) {\n        // 0x403ee6\n        return v74 % 256;\n    }\n    // 0x403c30\n    int128_t v75; // bp-672, 0x403840\n    function_403210((int32_t)((int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256)), (int64_t)\"src/factor.c\" - 1, (int64_t *)&v75, (int64_t)&v33);\n    uint32_t v76 = v2 % 256;\n    int64_t v77 = 2; // 0x403c85\n    int64_t v78 = (int64_t)&g8; // 0x403c85\n    goto lab_0x403c88;\n  lab_0x403c88:;\n    int64_t v79 = v78;\n    int64_t v80; // 0x403840\n    int64_t v81; // 0x403840\n    if (v81 != 0) {\n        uint64_t v82 = (int64_t)v75; // 0x403f00\n        unsigned char v83 = *(char *)(v82 / 2 % 128 + (int64_t)&g4); // 0x403f2f\n        int64_t v84 = v83; // 0x403f2f\n        int64_t v85 = (2 - v84 * v82) * v84; // 0x403f42\n        int64_t v86 = (2 - v85 * v82) * v85; // 0x403f51\n        if (v86 * ((int64_t)\"src/factor.c\" - 1) * (2 - v86 * v82) != v68) {\n            goto lab_0x403c97;\n        } else {\n            if ((char)v2 == 0) {\n                goto lab_0x404038;\n            } else {\n                // 0x403fb9\n                if (v81 != v67) {\n                    // 0x403ca5\n                    v80 = 1;\n                    goto lab_0x403d96;\n                } else {\n                    goto lab_0x403e00;\n                }\n            }\n        }\n    } else {\n        goto lab_0x403c97;\n    }\n  lab_0x403c97:\n    // 0x403c97\n    if ((char)v2 == 0) {\n        // 0x403ee6\n        return v74 % 256;\n    }\n    // 0x403ca5\n    v80 = 1;\n    goto lab_0x403d96;\n  lab_0x404038:\n    // 0x404038\n    if (v81 != v67) {\n        // 0x403ee6\n        return v74 % 256;\n    }\n    goto lab_0x403e00;\n  lab_0x403e00:;\n    uint64_t v106 = v77 + (int64_t)*(char *)v79; // 0x403e05\n    int64_t v100 = v106 < (int64_t)\"(s1) < (n)\" ? v106 : 0; // 0x403e29\n    int64_t v96 = v106 < (int64_t)\"(s1) < (n)\" ? 63 : 127; // 0x403e29\n    int64_t v98 = v106 < (int64_t)\"(s1) < (n)\" ? 0 : v106; // 0x403e29\n    goto lab_0x403e30;\n  lab_0x403d96:;\n    int64_t v87 = v80;\n    int64_t v88; // bp-848, 0x403840\n    uint64_t v89 = *(int64_t *)((int64_t)&v88 + 184 + 8 * v87); // 0x403d96\n    int64_t v90 = (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256) >> 1; // 0x403da2\n    if (v89 != 2) {\n        unsigned char v91 = *(char *)(v89 / 2 % 128 + (int64_t)&g4); // 0x403cec\n        int64_t v92 = v91; // 0x403cec\n        int64_t v93 = (2 - v89 * v92) * v92; // 0x403cff\n        int64_t v94 = (2 - v93 * v89) * v93; // 0x403d0e\n        v90 = v94 * v89 * v94;\n        if (v89 > (int64_t)\"(s1) < (n)\" - ((int64_t)((int32_t)&g62 ^ (int32_t)&g62) & -256)) {\n            goto lab_0x403d4d;\n        } else {\n            // 0x403d2d\n            v90 = 0;\n            goto lab_0x403d4d;\n        }\n    } else {\n        goto lab_0x403d4d;\n    }\n  lab_0x403e30:;\n    int64_t v95 = v96;\n    uint64_t v97 = 2 * v98; // 0x403e36\n    int64_t v99 = v98 >> 63 | 2 * v100; // 0x403e3d\n    int64_t v101; // 0x403840\n    int64_t v102; // 0x403840\n    if (v99 > (int64_t)\"(s1) < (n)\") {\n        goto lab_0x403e4c;\n    } else {\n        // 0x403e45\n        v101 = v99;\n        v102 = v97;\n        if (v97 < (int64_t)\"src/factor.c\" || v99 != (int64_t)\"(s1) < (n)\") {\n            goto lab_0x403e52;\n        } else {\n            goto lab_0x403e4c;\n        }\n    }\n  lab_0x403d4d:\n    // 0x403d4d\n    if (v90 == v68) {\n        if (v76 > (int32_t)v87) {\n            if (v81 != v67) {\n                // 0x403d92\n                v80 = v87 + 1;\n                goto lab_0x403d96;\n            } else {\n                goto lab_0x403e00;\n            }\n        } else {\n            goto lab_0x404038;\n        }\n    } else {\n        // 0x403d81\n        if (v76 <= (int32_t)v87) {\n            // 0x403ee6\n            return v74 % 256;\n        }\n        // 0x403d92\n        v80 = v87 + 1;\n        goto lab_0x403d96;\n    }\n  lab_0x403e4c:;\n    int64_t v103 = v97 < (int64_t)\"src/factor.c\" ? (int64_t)\"(s1) < (n)\" + 1 : (int64_t)\"(s1) < (n)\"; // 0x403e4f\n    v101 = v99 - v103;\n    v102 = v97 - (int64_t)\"src/factor.c\";\n    goto lab_0x403e52;\n  lab_0x403e52:;\n    int64_t v104 = v102;\n    v100 = v101;\n    v96 = v95 - 1;\n    v98 = v104;\n    if (v95 != 0) {\n        goto lab_0x403e30;\n    } else {\n        // 0x403e5c\n        v69 = v104;\n        int64_t v105 = function_402240((int64_t *)&v73, v72, &v69, (int64_t *)&v33, v34, &v68); // 0x403e85\n        if ((char)v105 == 0) {\n            // 0x403ee6\n            return 0;\n        }\n        // 0x403e8e\n        v77 = v106;\n        v78 = v79 + 1;\n        if (v79 == (int64_t)&g9 - 1) {\n            // 0x403ea0\n            error(0, (int32_t)\"Lucas prime test failure.  This should not happen\" ^ (int32_t)\"Lucas prime test failure.  This should not happen\", dcgettext(NULL, \"Lucas prime test failure.  This should not happen\", 5));\n            abort();\n            // UNREACHABLE\n        }\n        goto lab_0x403c88;\n    }\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "404093",
            "decompiledFuncCode": "int64_t function_404050(int64_t a1, uint64_t a2) {\n    if (a1 != 0) {\n        // 0x404055\n        int64_t result; // 0x404050\n        return result;\n    }\n    // 0x404060\n    if (a2 < 2) {\n        // 0x404055\n        return 0;\n    }\n    // 0x404066\n    if (a2 < 0x17ded79) {\n        // 0x404055\n        return 1;\n    }\n    // 0x40406f\n    return function_403840(a2);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "40416e",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1, int64_t a2) {\n    // 0x4040a0\n    function_402640(a1, a2);\n    function_4026f0(58);\n    int64_t v1; // bp-296, 0x4040a0\n    int64_t v2; // 0x4040a0\n    function_403210((int32_t)a1, a2, &v1, v2);\n    int32_t v3; // 0x4040a0\n    if ((char)v3 != 0) {\n        int64_t v4 = &v1; // 0x4040b8\n        int64_t v5 = v4; // 0x4040e4\n        int64_t v6; // bp-280, 0x4040a0\n        int64_t v7 = &v6;\n        char * v8 = (char *)(v5 + 224); // 0x4040ea\n        int64_t v9; // 0x4040a0\n        int64_t v10; // 0x4040fd\n        if (*v8 != 0) {\n            // 0x4040f8\n            v10 = 1;\n            function_4026f0(32);\n            function_402340(*(int64_t *)v7, 0);\n            v9 = v10 & 0xffffffff;\n            while ((int32_t)*v8 > (int32_t)v10) {\n                // 0x4040f8\n                v10 = v9 + 1;\n                function_4026f0(32);\n                function_402340(*(int64_t *)v7, 0);\n                v9 = v10 & 0xffffffff;\n            }\n        }\n        // 0x40411b\n        v5++;\n        int64_t v11 = v7 + 8; // 0x404132\n        while (v3 % 256 + (int32_t)v4 != (int32_t)v5) {\n            // 0x4040e8\n            v7 = v11;\n            v8 = (char *)(v5 + 224);\n            if (*v8 != 0) {\n                // 0x4040f8\n                v10 = 1;\n                function_4026f0(32);\n                function_402340(*(int64_t *)v7, 0);\n                v9 = v10 & 0xffffffff;\n                while ((int32_t)*v8 > (int32_t)v10) {\n                    // 0x4040f8\n                    v10 = v9 + 1;\n                    function_4026f0(32);\n                    function_402340(*(int64_t *)v7, 0);\n                    v9 = v10 & 0xffffffff;\n                }\n            }\n            // 0x40411b\n            v5++;\n            v11 = v7 + 8;\n        }\n    }\n    if (v2 != 0) {\n        // 0x404154\n        function_4026f0(32);\n        function_402640(v2, v1);\n    }\n    // 0x40413c\n    return function_4026f0(10);\n}\n"
        },
        {
            "funcName": "function_404170",
            "funcStartAddr": "404170",
            "funcEndAddr": "4042de",
            "decompiledFuncCode": "int64_t function_404170(int64_t a1) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40417f\n    int64_t v3 = a1; // 0x40417f\n    char v4 = v1; // 0x40417f\n    if (v1 == 32) {\n        v2++;\n        char v5 = *(char *)v2; // 0x40418c\n        v3 = v2;\n        v4 = v5;\n        while (v5 == 32) {\n            // 0x404188\n            v2++;\n            v5 = *(char *)v2;\n            v3 = v2;\n            v4 = v5;\n        }\n    }\n    int64_t v6 = v3 + 1; // 0x404194\n    int64_t v7 = v4 != 43 ? v3 : v6;\n    char v8 = *(char *)v7; // 0x4041b4\n    char v9 = v8; // 0x4041ba\n    int64_t v10 = v7; // 0x4041ba\n    int64_t v11; // 0x404170\n    int64_t v12; // 0x404170\n    int64_t v13; // 0x404170\n    char v14; // 0x404170\n    if (v8 != 0) {\n        while ((int32_t)v9 < 58) {\n            // 0x4041b0\n            v10++;\n            v9 = *(char *)v10;\n            v14 = v8;\n            v13 = 0;\n            v12 = 0;\n            v11 = v4 != 43 ? v6 : v3 + 2;\n            if (v9 == 0) {\n                goto lab_0x404220;\n            }\n        }\n    }\n    // 0x4041c6\n    function_406f50(a1);\n    // 0x4041d8\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"%s is not a valid positive integer\", 5));\n    // 0x4041f2\n    return (int32_t)&g62 ^ (int32_t)&g62;\n  lab_0x404220:;\n    uint64_t v15 = v12;\n    uint64_t v16 = (int64_t)v14 + 0xffffffd0 & 0xffffffff;\n    uint64_t v17 = 10 * v15; // 0x404234\n    int64_t v18 = v16 + v17; // 0x404245\n    uint64_t v19 = v15 / 0x8000000000000000 + v15 / 0x2000000000000000 + (int64_t)(v17 < 2 * v15) + (int64_t)(v18 < v16); // 0x404255\n    uint64_t v20 = v19 + 10 * v13; // 0x404258\n    if (v20 < v19) {\n        // 0x404272\n        function_406f50(a1);\n    } else {\n        char v21 = *(char *)v11; // 0x404261\n        if (v21 == 0) {\n            // 0x404290\n        } else {\n            // 0x40426a\n            v14 = v21;\n            v13 = v20;\n            v12 = v18;\n            v11++;\n            if (v20 > 0x1999999999999999) {\n                // 0x404272\n                function_406f50(a1);\n            } else {\n                goto lab_0x404220;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "4045cd",
            "decompiledFuncCode": "int64_t function_4042e0(int64_t a1) {\n    int32_t status = a1; // 0x4042f6\n    if (status != 0) {\n        // 0x4042fa\n        __fprintf_chk(g41, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40431f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x404326\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [NUMBER]...\\n  or:  %s OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print the prime factors of each specified integer NUMBER.  If none\\nare specified on the command line, read them from standard input.\\n\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g38);\n    int64_t v1 = &g1; // bp-136, 0x4043b0\n    bool v2; // 0x4042e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x404430\n    int64_t v6 = *(int64_t *)v5; // 0x404434\n    int64_t v7 = 7; // 0x40443a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"factor\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x404446\n        char v11 = *(char *)v9; // 0x404446\n        char v12 = v11; // 0x404446\n        bool v13 = false; // 0x404446\n        while (v10 == v11) {\n            // 0x40443c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x404446\n            int64_t v15 = v8 + v3; // 0x404446\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x404452\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x404452\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x404564;\n        } else {\n            // 0x40454e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4045a3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4044b4;\n            } else {\n                goto lab_0x404564;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4044b4;\n        } else {\n            // 0x40449a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4045a3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4044b4;\n            } else {\n                goto lab_0x4044b4;\n            }\n        }\n    }\n  lab_0x404564:\n    // 0x404564\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4044f4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40431f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4044b4:\n    // 0x4044b4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4044f4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40431f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4045d0",
            "funcStartAddr": "4045d0",
            "funcEndAddr": "4045d8",
            "decompiledFuncCode": "int64_t function_4045d0(int64_t a1) {\n    // 0x4045d0\n    g48 = a1;\n    int64_t result; // 0x4045d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "4045e8",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1) {\n    // 0x4045e0\n    g47 = a1;\n    int64_t result; // 0x4045e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4045f0",
            "funcStartAddr": "4045f0",
            "funcEndAddr": "40468e",
            "decompiledFuncCode": "int64_t function_4045f0(void) {\n    // 0x4045f0\n    int32_t * err_num; // 0x404606\n    if ((int32_t)function_4091b0((int64_t)g38) == 0) {\n        goto lab_0x40461c;\n    } else {\n        // 0x404606\n        err_num = __errno_location();\n        if (g47 == 0) {\n            goto lab_0x404633;\n        } else {\n            // 0x404617\n            if (*err_num != 32) {\n                goto lab_0x404633;\n            } else {\n                goto lab_0x40461c;\n            }\n        }\n    }\n  lab_0x40461c:;\n    int64_t result = function_4091b0((int64_t)g41); // 0x404623\n    if ((int32_t)result == 0) {\n        // 0x40462c\n        return result;\n    }\n    // 0x40466e\n    _exit(g28);\n    // UNREACHABLE\n  lab_0x404633:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40463f\n    if (g48 == 0) {\n        // 0x404679\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x404653\n        error(0, *err_num, \"%s: %s\", (char *)function_406da0((int64_t)g48), v1);\n    }\n    // 0x40466e\n    _exit(g28);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404690",
            "funcStartAddr": "404690",
            "funcEndAddr": "404706",
            "decompiledFuncCode": "int64_t function_404690(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404690\n    if (a3 == 0) {\n        // 0x4046d4\n        return 0;\n    }\n    int64_t v1 = a3; // 0x4046ab\n    int64_t v2 = a2; // 0x4046ab\n    int64_t result = 0;\n    int64_t v3 = function_4072e0(a1 & 0xffffffff, v2, v1); // 0x4046c9\n    int64_t result2 = result; // 0x4046d2\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x4046e8\n            *__errno_location() = 28;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x4046b5\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x4046d4\n            break;\n        }\n        result = v4;\n        v3 = function_4072e0(a1 & 0xffffffff, v2, v1);\n        result2 = result;\n    }\n    // 0x4046d4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "404758",
            "decompiledFuncCode": "int64_t function_404710(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x404710\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x404722\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40472b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x404754\n    return result;\n}\n"
        },
        {
            "funcName": "function_404760",
            "funcStartAddr": "404760",
            "funcEndAddr": "4047f9",
            "decompiledFuncCode": "int64_t function_404760(int64_t str) {\n    // 0x404760\n    if (str == 0) {\n        // 0x4047d9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g41);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40476e\n    int64_t result = (int64_t)found_char_pos; // 0x40476e\n    if (found_char_pos == NULL) {\n        // 0x4047c9\n        g49 = str;\n        g40 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x404778\n    if (v1 - str < 7) {\n        // 0x4047c9\n        g49 = str;\n        g40 = str;\n        return result;\n    }\n    // 0x404788\n    bool v2; // 0x404760\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x404760\n    int64_t v5 = result - 6; // 0x404760\n    int64_t v6 = 7; // 0x404796\n    unsigned char v7 = *(char *)v5; // 0x404796\n    char v8 = *(char *)v4; // 0x404796\n    char v9 = v8; // 0x404796\n    bool v10 = false; // 0x404796\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4047a0\n    int64_t v13 = v1; // 0x4047a0\n    int64_t v14 = 3; // 0x4047a0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4047c9\n        g49 = str;\n        g40 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4047b2\n    char v16 = *(char *)v12; // 0x4047b2\n    char v17 = v16; // 0x4047b2\n    bool v18 = false; // 0x4047b2\n    while (v15 == v16) {\n        // 0x4047a2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4047bc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4047be\n        v20 = result + 4;\n        g37 = v20;\n    }\n    // 0x4047c9\n    g49 = v20;\n    g40 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404800",
            "funcStartAddr": "404800",
            "funcEndAddr": "405144",
            "decompiledFuncCode": "int64_t function_404800(void) {\n    // 0x404800\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    int64_t v1; // 0x404800\n    int64_t v2 = function_4073a0((int64_t)\"lib/mbuiter.h\", 2, 179, (int64_t)\"mbuiter_multi_next\", v1, v1, v1); // 0x40483c\n    char * str = (char *)v2; // 0x40484b\n    int64_t v3 = (int64_t)\"iter->cur.wc == 0\"; // 0x404d21\n    int64_t v4 = 179; // 0x404ec2\n    int64_t v5 = (int64_t)\"mbuiter_multi_next\";\n    char * v6; // 0x404800\n    char * str3; // 0x404ba3\n    int64_t v7; // 0x404800\n    int64_t v8; // 0x404800\n    int64_t wc; // 0x404800\n    int64_t v9; // 0x404800\n    int64_t v10; // 0x404800\n    int64_t v11; // 0x404800\n    int64_t v12; // 0x404800\n    int32_t wc2; // 0x404800\n    int64_t v13; // 0x404800\n    int64_t v14; // 0x404800\n    int64_t v15; // 0x404800\n    int64_t len3; // 0x404800\n    int64_t ps2; // bp-124, 0x404800\n    char v16; // 0x404800\n    char v17; // 0x404800\n    char v18; // 0x404800\n    int32_t v19; // bp-156, 0x404800\n    char v20; // 0x404800\n    int64_t v21; // 0x404800\n    char * str5; // 0x404800\n    int64_t v22; // 0x404800\n    int64_t v23; // 0x404800\n    char * str4; // 0x404800\n    int64_t v24; // 0x404800\n    int64_t v25; // 0x404800\n    int64_t ps; // bp-188, 0x404800\n    char v26; // 0x404800\n    char v27; // 0x404800\n    char v28; // 0x404800\n    char v29; // 0x404800\n    char v30; // 0x404800\n    int32_t v31; // bp-92, 0x404800\n    int64_t v32; // 0x404800\n    int32_t len; // 0x40487a\n    uint64_t v33; // 0x40485d\n    while (true) {\n      lab_0x404855_2:;\n        int64_t v34 = v9;\n        v13 = v4;\n        v12 = v3;\n        uint64_t v35; // 0x404800\n        while (true) {\n          lab_0x404855:\n            // 0x404855\n            v35 = v12;\n            int64_t v36 = v13;\n            v33 = function_40a420(v35, v2, v36, v5, v34);\n            v7 = 0;\n            if (v33 == 0) {\n                // break (via goto) -> 0x4048cc\n                goto lab_0x4048cc_8;\n            }\n            // 0x40486a\n            if (__ctype_get_mb_cur_max() >= 2) {\n                // break -> 0x4048f0\n                break;\n            }\n            // 0x404875\n            len = strlen(str);\n            v14 = v36;\n            if (v35 >= v33) {\n                goto lab_0x40489b;\n            } else {\n                int16_t ** v37 = __ctype_b_loc(); // 0x404889\n                int64_t v38 = (int64_t)*(char *)(v33 - 1); // 0x40488e\n                v14 = v38;\n                v15 = v38;\n                if ((*(char *)(2 * v38 + (int64_t)*v37) & 8) != 0) {\n                    goto lab_0x4048ba;\n                } else {\n                    goto lab_0x40489b;\n                }\n            }\n        }\n        // 0x4048f0\n        ps = 0;\n        v27 = 0;\n        v22 = v35;\n        int64_t v39 = 1; // 0x404910\n        if (v35 < v33) {\n            while (true) {\n              lab_0x404988:\n                // 0x404988\n                v23 = v22;\n                str5 = (char *)v23;\n                v28 = v27;\n                if (v27 == 0) {\n                    unsigned char v40 = *str5; // 0x404925\n                    int32_t v41 = *(int32_t *)((int64_t)(4 * v40 / 32) + (int64_t)&g20); // 0x404930\n                    if ((1 << (int32_t)(v40 % 32) & v41) == 0) {\n                        int32_t v42 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404a23\n                        v28 = 1;\n                        if (v42 == 0) {\n                            // 0x405069\n                            __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                            // 0x405082\n                            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                            goto lab_0x40509b_3;\n                        }\n                        goto lab_0x40498f;\n                    } else {\n                        // 0x404941\n                        v19 = v40;\n                        v26 = 0;\n                        v21 = 1;\n                        v8 = v40;\n                        goto lab_0x40495d;\n                    }\n                } else {\n                    goto lab_0x40498f;\n                }\n            }\n          lab_0x404a98:\n            // 0x404a98\n            v39 = 1;\n            if (v20 != 0) {\n                // 0x404aa0\n                v39 = v5 & -256 | (int64_t)(iswalnum((int32_t)wc) == 0);\n            }\n        }\n        // 0x404aae\n        v32 = v39;\n        ps = 0;\n        ps2 = 0;\n        v6 = str;\n        v29 = 0;\n        v17 = 0;\n        v10 = v34;\n        v24 = v33;\n        while (true) {\n          lab_0x404bb2:\n            // 0x404bb2\n            v25 = v24;\n            v11 = v10;\n            v30 = v29;\n            str3 = v6;\n            str4 = (char *)v25;\n            v18 = v17;\n            if (v17 == 0) {\n                unsigned char v43 = *str3; // 0x404af5\n                int32_t v44 = *(int32_t *)((int64_t)(4 * v43 / 32) + (int64_t)&g20); // 0x404b00\n                if ((1 << (int32_t)(v43 % 32) & v44) == 0) {\n                    int32_t v45 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x404df3\n                    v18 = 1;\n                    if (v45 == 0) {\n                        // 0x405069\n                        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                        // 0x405082\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                        goto lab_0x40509b_3;\n                    }\n                    goto lab_0x404bbd;\n                } else {\n                    // 0x404b11\n                    v31 = v43;\n                    v16 = 0;\n                    len3 = 1;\n                    if (v43 == 0) {\n                        // break -> 0x404c56\n                        break;\n                    }\n                    goto lab_0x404b42;\n                }\n            } else {\n                goto lab_0x404bbd;\n            }\n        }\n        if (v30 != 0) {\n            goto lab_0x404eb2;\n        } else {\n            unsigned char v46 = *str4; // 0x404c66\n            int32_t v47 = *(int32_t *)((int64_t)(4 * v46 / 32) + (int64_t)&g20); // 0x404c71\n            if ((1 << (int32_t)(v46 % 32) & v47) == 0) {\n                // 0x404e9b\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                    // 0x405069\n                    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                    // 0x405082\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40509b_3;\n                }\n                goto lab_0x404eb2;\n            } else {\n                int32_t v48 = v46; // 0x404c8b\n                v19 = v48;\n                wc2 = v48;\n                goto lab_0x404c9c;\n            }\n        }\n    }\n  lab_0x4048cc_8:\n    // 0x4048cc\n    free((int64_t *)v2);\n    return v7 & 0xffffffff;\n  lab_0x40509b_3:\n    // 0x40509b\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    char * str2 = dcgettext((char *)((int32_t)\"iter->cur.wc == 0\" ^ (int32_t)\"iter->cur.wc == 0\"), \"iter->cur.wc == 0\", 5); // 0x4050d1\n    int64_t result2 = (int64_t)str2; // 0x4050d1\n    if (str2 != \"iter->cur.wc == 0\" == (char)result2 == 0) {\n        int32_t len2 = strlen(str2); // 0x4050fb\n        int64_t result = function_407ee0((int64_t)len2 + 4 + (int64_t)strlen(\"iter->cur.wc == 0\")); // 0x405110\n        __sprintf_chk((char *)result, 1, -1, \"%s (%s)\", str2, \"iter->cur.wc == 0\");\n        return result;\n    }\n    // 0x4050ed\n    return result2;\n  lab_0x404bbd:;\n    char v49 = v18;\n    int64_t v50 = (int64_t)str3; // 0x404bc2\n    int64_t v51 = function_407340(v50, (int64_t)__ctype_get_mb_cur_max()); // 0x404bcd\n    int64_t v52 = function_408fc0((int64_t *)&v31, v50, v51); // 0x404bde\n    v16 = v49;\n    len3 = 1;\n    switch (v52) {\n        case -1: {\n            goto lab_0x404b42;\n        }\n        case -2: {\n            // 0x404e48\n            v16 = v49;\n            len3 = strlen(str3);\n            goto lab_0x404b42;\n        }\n        default: {\n            // 0x404bfc\n            if (v52 == 0) {\n                char v53 = *str3; // 0x404c0f\n                if (v53 != 0) {\n                    // 0x405082\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40509b_3;\n                }\n                int32_t v54 = v31; // 0x404c18\n                if (v54 != 0) {\n                    goto lab_0x40509b_3;\n                }\n            }\n            int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x404c2c\n            v16 = v55 == 0 ? v49 : 0;\n            len3 = v52;\n            if (v31 == 0) {\n                // break -> 0x404c56\n                break;\n            }\n            goto lab_0x404b42;\n        }\n    }\n  lab_0x404b42:;\n    int64_t v56 = len3;\n    char v57 = v16;\n    char v58 = v30; // 0x404b47\n    int32_t v59; // 0x404800\n    int64_t v60; // 0x404800\n    int64_t v61; // 0x404800\n    char v62; // 0x404800\n    if (v30 != 0) {\n        goto lab_0x404d47;\n    } else {\n        unsigned char v63 = *str4; // 0x404b52\n        int32_t v64 = *(int32_t *)((int64_t)(4 * v63 / 32) + (int64_t)&g20); // 0x404b5d\n        if ((1 << (int32_t)(v63 % 32) & v64) == 0) {\n            int32_t v65 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404d35\n            v58 = 1;\n            if (v65 == 0) {\n                // 0x405069\n                __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                // 0x405082\n                __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                goto lab_0x40509b_3;\n            }\n            goto lab_0x404d47;\n        } else {\n            int32_t v66 = v63; // 0x404b7f\n            v19 = v66;\n            v59 = v66;\n            v62 = v30;\n            v61 = 1;\n            v60 = v11;\n            goto lab_0x404b88;\n        }\n    }\n  lab_0x404d47:;\n    char v67 = v58;\n    int64_t v68 = function_407340(v25, (int64_t)__ctype_get_mb_cur_max()); // 0x404d57\n    int64_t v69 = function_408fc0((int64_t *)&v19, v25, v68); // 0x404d6a\n    char v70 = v67; // 0x404800\n    int64_t len4 = 1; // 0x404800\n    int64_t v71 = v11; // 0x404800\n    switch (v69) {\n        case -1: {\n            goto lab_0x404b94;\n        }\n        case -2: {\n            // 0x404e70\n            v70 = v67;\n            len4 = strlen(str4);\n            v71 = v11;\n            goto lab_0x404b94;\n        }\n        default: {\n            int64_t v72 = v69; // 0x404d8b\n            int64_t v73 = v11; // 0x404d8b\n            if (v69 == 0) {\n                // 0x404d8d\n                if (*str4 != 0) {\n                    // 0x405082\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40509b_3;\n                }\n                // 0x404da4\n                v72 = 1;\n                v73 = v19;\n                if (v19 != 0) {\n                    goto lab_0x40509b_3;\n                }\n            }\n            int32_t v74 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404dbc\n            v59 = v19;\n            v62 = v74 == 0 ? v67 : 0;\n            v61 = v72;\n            v60 = v73;\n            goto lab_0x404b88;\n        }\n    }\n  lab_0x404b94:\n    // 0x404b94\n    v6 = (char *)(v56 + (int64_t)str3);\n    v29 = v70;\n    v17 = v57;\n    v10 = v71;\n    v24 = len4 + v25;\n    goto lab_0x404bb2;\n  lab_0x404b88:\n    // 0x404b88\n    v70 = v62;\n    len4 = v61;\n    v71 = v60;\n    if (v59 == 0) {\n        abort();\n        // UNREACHABLE\n    }\n    goto lab_0x404b94;\n  lab_0x40498f:;\n    char v75 = v28;\n    int64_t v76 = function_407340(v23, (int64_t)__ctype_get_mb_cur_max()); // 0x40499f\n    int64_t v77 = function_408fc0((int64_t *)&v19, v23, v76); // 0x4049b0\n    int64_t len5; // 0x404800\n    char v78; // 0x404800\n    switch (v77) {\n        case -1: {\n            // 0x404a40\n            v78 = v75;\n            len5 = 1;\n            v20 = 0;\n            wc = v19;\n            goto lab_0x40496b;\n        }\n        case -2: {\n            // 0x404a60\n            v78 = v75;\n            len5 = strlen(str5);\n            v20 = 0;\n            wc = v19;\n            goto lab_0x40496b;\n        }\n        default: {\n            int32_t v79; // 0x404800\n            int64_t v80; // 0x404800\n            if (v77 != 0) {\n                // 0x404a88\n                v80 = v77;\n                v79 = v19;\n            } else {\n                // 0x4049d7\n                if (*str5 != 0) {\n                    // 0x405082\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40509b_3;\n                }\n                // 0x4049ee\n                v80 = 1;\n                v79 = v19;\n                if (v19 != 0) {\n                    goto lab_0x40509b_3;\n                }\n            }\n            int32_t v81 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404a04\n            v26 = v81 == 0 ? v75 : 0;\n            v21 = v80;\n            v8 = v79;\n            goto lab_0x40495d;\n        }\n    }\n  lab_0x40495d:\n    // 0x40495d\n    v78 = v26;\n    len5 = v21;\n    v20 = 1;\n    wc = v8;\n    if ((int32_t)v8 == 0) {\n        abort();\n        // UNREACHABLE\n    }\n    goto lab_0x40496b;\n  lab_0x40496b:;\n    int64_t v82 = len5 + v23; // 0x40496b\n    v27 = v78;\n    v22 = v82;\n    if (v82 >= v33) {\n        // break -> 0x404a98\n        goto lab_0x404a98;\n    }\n    goto lab_0x404988;\n  lab_0x40489b:;\n    unsigned char v83 = *(char *)(v33 + (int64_t)len); // 0x40489b\n    v7 = 1;\n    if (v83 == 0) {\n        // break (via goto) -> 0x4048cc\n        goto lab_0x4048cc_8;\n    }\n    int16_t * v84 = *__ctype_b_loc(); // 0x4048ad\n    v15 = v14;\n    v7 = 1;\n    if ((*(char *)(2 * (int64_t)v83 + (int64_t)v84) & 8) == 0) {\n        // break (via goto) -> 0x4048cc\n        goto lab_0x4048cc_8;\n    }\n    goto lab_0x4048ba;\n  lab_0x4048ba:\n    // 0x4048ba\n    v7 = 0;\n    if (*(char *)v33 == 0) {\n        // break (via goto) -> 0x4048cc\n        goto lab_0x4048cc_8;\n    }\n    int64_t v85 = v33 + 1; // 0x4048c0\n    v13 = v15;\n    v12 = v85;\n    v7 = 0;\n    if (*(char *)v85 == 0) {\n        // break (via goto) -> 0x4048cc\n        goto lab_0x4048cc_8;\n    }\n    goto lab_0x404855;\n  lab_0x404eb2:\n    // 0x404eb2\n    v4 = function_407340(v25, (int64_t)__ctype_get_mb_cur_max());\n    int64_t v86 = function_408fc0((int64_t *)&v19, v25, v4); // 0x404ed5\n    int32_t v87; // 0x404800\n    switch (v86) {\n        case -1: {\n            goto lab_0x404cb2;\n        }\n        case -2: {\n            // 0x40503c\n            strlen(str4);\n            goto lab_0x404cb2;\n        }\n        case 0: {\n            // 0x405000\n            if (*str4 != 0) {\n                // 0x405082\n                __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                goto lab_0x40509b_3;\n            }\n            // 0x405013\n            v87 = 0;\n            if (v19 == 0) {\n                goto lab_0x404f00;\n            } else {\n                goto lab_0x405028;\n            }\n        }\n        default: {\n            // 0x404efc\n            v87 = v19;\n            goto lab_0x404f00;\n        }\n    }\n  lab_0x404cb2:\n    // 0x404cb2\n    v7 = v32;\n    if ((char)v32 != 0) {\n        // break -> 0x4048cc\n        goto lab_0x4048cc_8;\n    }\n    goto lab_0x404cbb;\n  lab_0x404f00:\n    // 0x404f00\n    mbsinit((struct _TYPEDEF___mbstate_t *)&ps);\n    wc2 = v87;\n    goto lab_0x404c9c;\n  lab_0x404cbb:\n    // 0x404cbb\n    ps = 0;\n    unsigned char v88 = *(char *)v33; // 0x404cd8\n    int32_t v89 = *(int32_t *)((int64_t)(4 * v88 / 32) + (int64_t)&g20); // 0x404ce4\n    int64_t v90; // 0x404800\n    int64_t len6; // 0x404800\n    if ((1 << (int32_t)(v88 % 32) & v89) == 0) {\n        int32_t v91 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404f43\n        if (v91 == 0) {\n            // 0x405069\n            __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n            // 0x405082\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n            goto lab_0x40509b_3;\n        }\n        int64_t v92 = function_407340(v33, (int64_t)__ctype_get_mb_cur_max()); // 0x404f65\n        int64_t v93 = function_408fc0((int64_t *)&v19, v33, v92); // 0x404f76\n        len6 = 1;\n        switch (v93) {\n            case -1: {\n                goto lab_0x404d1c;\n            }\n            case -2: {\n                goto lab_0x405028;\n            }\n            default: {\n                // 0x404f90\n                v90 = v93;\n                if (v93 != 0) {\n                    goto lab_0x404fb4;\n                } else {\n                    // 0x404f95\n                    char * v94; // 0x404cbb\n                    char v95 = *v94; // 0x404fa3\n                    if (v95 != 0) {\n                        // 0x405082\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                        goto lab_0x40509b_3;\n                    }\n                    uint32_t v96 = v19; // 0x404fac\n                    v90 = 1;\n                    if (v96 != 0) {\n                        goto lab_0x405028;\n                    } else {\n                        goto lab_0x404fb4;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x404cf5\n        v19 = v88;\n        goto lab_0x404d10;\n    }\n  lab_0x405028:\n    // 0x405028\n    len6 = strlen(str4);\n    goto lab_0x404d1c;\n  lab_0x404c9c:\n    // 0x404c9c\n    if (wc2 == 0) {\n        goto lab_0x404cb2;\n    } else {\n        // 0x404ca7\n        if (iswalnum(wc2) != 0) {\n            goto lab_0x404cbb;\n        } else {\n            goto lab_0x404cb2;\n        }\n    }\n  lab_0x404d1c:\n    // 0x404d1c\n    v3 = len6 + v33;\n    v9 = v11;\n    v7 = 0;\n    if (*(char *)v3 == 0) {\n        // break -> 0x4048cc\n        goto lab_0x4048cc_8;\n    }\n    goto lab_0x404855_2;\n  lab_0x404d10:;\n    // 0x404d10\n    int64_t v97; // 0x404800\n    int64_t v98 = v97;\n    int32_t v99; // 0x404800\n    int32_t v100 = v99; // 0x404d10\n    v7 = 0;\n    len6 = v98;\n    if (v100 == 0) {\n        // break -> 0x4048cc\n        goto lab_0x4048cc_8;\n    }\n    goto lab_0x404d1c;\n  lab_0x404fb4:;\n    int64_t v101 = v90;\n    mbsinit((struct _TYPEDEF___mbstate_t *)&ps);\n    int32_t v102 = v19;\n    v99 = v102;\n    v97 = v101;\n    goto lab_0x404d10;\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "4053d0",
            "decompiledFuncCode": "int64_t function_405150(char * str4, int64_t * a2) {\n    int64_t v1 = (int64_t)str4;\n    char * str3 = dcgettext(NULL, str4, 5); // 0x40516e\n    int64_t str = function_409270(); // 0x405176\n    int64_t result2; // 0x405150\n    int64_t v2; // 0x405150\n    int64_t v3; // 0x405150\n    int64_t v4; // 0x405150\n    int32_t v5; // 0x405150\n    int64_t v6; // 0x405150\n    int64_t result; // 0x40529b\n    if ((int32_t)function_409150(str, \"UTF-8\", 5) != 0) {\n        // 0x405290\n        result = function_4081c0();\n        int32_t len = strlen((char *)str); // 0x4052a6\n        int64_t v7 = len; // 0x4052a6\n        int64_t * dest_mem = memcpy((int64_t *)function_407ee0(v7 + 11), (int64_t *)str, len); // 0x4052c0\n        int64_t v8 = (int64_t)dest_mem + v7; // 0x4052d0\n        *(int64_t *)v8 = 0x4c534e4152542f2f;\n        *(int16_t *)(v8 + 8) = 0x5449;\n        *(char *)(v8 + 10) = 0;\n        int64_t str2 = function_4081c0(); // 0x4052f7\n        free(dest_mem);\n        if (str2 == 0) {\n            // 0x4053a0\n            v6 = 0;\n            result2 = v1;\n            v2 = 0;\n            v4 = 0;\n            if (result != 0) {\n                goto lab_0x405334;\n            } else {\n                goto lab_0x4051a1;\n            }\n        } else {\n            // 0x405315\n            if (strchr((char *)str2, 63) == NULL) {\n                // 0x405370\n                v6 = 0;\n                result2 = str2;\n                v2 = str2;\n                v4 = str2;\n                if (result == 0) {\n                    goto lab_0x4051a1;\n                } else {\n                    int32_t strcmp_rc = strcmp(str3, str4); // 0x40537e\n                    v5 = strcmp_rc;\n                    v3 = str2;\n                    if (strcmp_rc == 0) {\n                        // 0x405387\n                        if (result != str2) {\n                            // 0x405390\n                            free((int64_t *)str2);\n                        }\n                        // 0x4051f2\n                        return result;\n                    }\n                    goto lab_0x40534d;\n                }\n            } else {\n                // 0x405327\n                free((int64_t *)str2);\n                v6 = 0;\n                result2 = v1;\n                v2 = 0;\n                v4 = 0;\n                if (result == 0) {\n                    goto lab_0x4051a1;\n                } else {\n                    goto lab_0x405334;\n                }\n            }\n        }\n    } else {\n        int64_t v9 = (int64_t)a2;\n        v6 = v9;\n        result2 = a2 == NULL ? v1 : v9;\n        v2 = 0;\n        v4 = v9;\n        goto lab_0x4051a1;\n    }\n  lab_0x4051a1:;\n    int32_t strcmp_rc2 = strcmp(str3, str4); // 0x4051a7\n    if (strcmp_rc2 == 0) {\n        // 0x4051f2\n        return result2;\n    }\n    char v10 = strcmp_rc2;\n    char v11 = v10; // 0x4051bf\n    int64_t v12 = v6; // 0x4051bf\n    int64_t v13 = 0; // 0x4051bf\n    int64_t v14 = result2; // 0x4051bf\n    int64_t v15 = v2; // 0x4051bf\n    int64_t v16 = v4; // 0x4051bf\n    int64_t v17 = v2; // 0x4051bf\n    if (v10 != 0) {\n        goto lab_0x4051e2;\n    } else {\n        goto lab_0x4051c1;\n    }\n  lab_0x405334:;\n    int32_t strcmp_rc3 = strcmp(str3, str4); // 0x40533a\n    v5 = strcmp_rc3;\n    v3 = 0;\n    if (strcmp_rc3 == 0) {\n        // 0x4051f2\n        return result;\n    }\n    goto lab_0x40534d;\n  lab_0x4051e2:;\n    int64_t result4 = (int64_t)str3; // 0x40516e\n    int64_t result3 = result4; // 0x4051e8\n    int64_t v21 = v17; // 0x4051e8\n    if (v17 == 0) {\n        // 0x4051f2\n        return result4;\n    }\n    goto lab_0x4051ea;\n  lab_0x4051c1:\n    // 0x4051c1\n    if (v11 == 0 || v12 == 0) {\n        // 0x405218\n        if (v11 != 0 == (v16 != 0)) {\n            goto lab_0x4051d5;\n        } else {\n            int32_t len2 = strlen(str3); // 0x40522f\n            char * str5 = (char *)v14; // 0x40523a\n            int64_t result5 = function_407ee0((int64_t)len2 + 4 + (int64_t)strlen(str5)); // 0x405244\n            __sprintf_chk((char *)result5, 1, -1, \"%s (%s)\", str3, str5);\n            if (v13 != 0) {\n                // 0x405272\n                free((int64_t *)v13);\n            }\n            // 0x40527a\n            result3 = result5;\n            v21 = v15;\n            if (v15 == 0) {\n                // 0x4051f2\n                return result5;\n            }\n            goto lab_0x4051ea;\n        }\n    } else {\n        goto lab_0x4051d5;\n    }\n  lab_0x40534d:;\n    char v18 = v5;\n    v11 = v18;\n    v12 = result;\n    v13 = result;\n    v14 = result;\n    v15 = v3;\n    v16 = v3;\n    int64_t v19 = result; // 0x40535a\n    int64_t v20 = v3; // 0x40535a\n    if (v18 != 0) {\n        goto lab_0x4051da;\n    } else {\n        goto lab_0x4051c1;\n    }\n  lab_0x4051ea:\n    // 0x4051ea\n    free((int64_t *)v21);\n    // 0x4051f2\n    return result3;\n  lab_0x4051d5:\n    // 0x4051d5\n    v19 = v13;\n    v20 = v15;\n    v17 = v15;\n    if (v13 == 0) {\n        goto lab_0x4051e2;\n    } else {\n        goto lab_0x4051da;\n    }\n  lab_0x4051da:\n    // 0x4051da\n    free((int64_t *)v19);\n    v17 = v20;\n    goto lab_0x4051e2;\n}\n"
        },
        {
            "funcName": "function_4053d0",
            "funcStartAddr": "4053d0",
            "funcEndAddr": "4054c2",
            "decompiledFuncCode": "int64_t function_4053d0(int64_t * a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4053e4\n    if ((int64_t *)v1 != a1) {\n        // 0x4053f1\n        return (int64_t)v1;\n    }\n    int64_t v2 = function_409270(); // 0x405400\n    char v3 = *(char *)v2 & -33;\n    int64_t result; // 0x4054b6\n    if (v3 == 85) {\n        // 0x405410\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4054a8\n            result = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g12;\n            return result;\n        }\n        char v4 = *v1; // 0x40543e\n        int64_t result2 = v4 != 96 ? (int64_t)&g13 : (int64_t)&g16; // 0x40544b\n        // 0x4053f1\n        return result2;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4054a8\n        result = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g12;\n        return result;\n    }\n    char v5 = *v1; // 0x40548d\n    int64_t result3 = v5 != 96 ? (int64_t)&g14 : (int64_t)&g15; // 0x40549a\n    // 0x4053f1\n    return result3;\n}\n"
        },
        {
            "funcName": "function_4054d0",
            "funcStartAddr": "4054d0",
            "funcEndAddr": "405527",
            "decompiledFuncCode": "int64_t function_4054d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x4054d0\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405527",
            "funcStartAddr": "405527",
            "funcEndAddr": "4066f1",
            "decompiledFuncCode": "int64_t function_405527(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x405571\n    int64_t v3 = 0; // 0x405571\n    int64_t v4; // 0x405527\n    int64_t v5; // 0x405527\n    int64_t v6; // 0x405527\n    int64_t v7; // 0x405527\n    int64_t v8; // 0x405527\n    int64_t v9; // 0x405527\n    int64_t v10; // 0x405527\n    int64_t v11; // 0x405527\n    int64_t v12; // 0x405527\n    int64_t v13; // 0x405527\n    int64_t v14; // 0x405527\n    int64_t v15; // 0x405527\n    int64_t v16; // 0x405527\n    int64_t v17; // 0x405527\n    int64_t v18; // 0x405527\n    int64_t result; // 0x405527\n    int64_t v19; // 0x405527\n    int32_t wc; // bp+132, 0x405527\n    int64_t ps; // bp+136, 0x405527\n    char v20; // 0x405ae0\n    int64_t v21; // 0x405ae0\n    int64_t v22; // 0x405e88\n    int64_t v23; // 0x405527\n    int64_t v24; // 0x405ea7\n    int32_t v25; // 0x405527\n    while (true) {\n      lab_0x405578_2:\n        // 0x405578\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x405527\n        int64_t v27; // 0x4055ac\n        while (true) {\n          lab_0x405578:\n            // 0x405578\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x405583\n            if (v15 == -1) {\n                // 0x405585\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x405593\n            if (v28) {\n                // break (via goto) -> 0x405cf8\n                goto lab_0x405cf8;\n            }\n            // 0x40559c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g61 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x405b8b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4056d1;\n                    }\n                    // 0x405fad\n                    v26 = v5 + 1;\n                    goto lab_0x405578;\n                }\n                case 7: {\n                    goto lab_0x4056d1;\n                }\n                case 8: {\n                    goto lab_0x4056d1;\n                }\n                case 9: {\n                    goto lab_0x4058ea_2;\n                }\n                case 10: {\n                    goto lab_0x4058ea_2;\n                }\n                case 11: {\n                    goto lab_0x4056d1;\n                }\n                case 12: {\n                    goto lab_0x4056d1;\n                }\n                case 13: {\n                    goto lab_0x4058ea_2;\n                }\n                case 32: {\n                    goto lab_0x4058ea_2;\n                }\n                case 33: {\n                    goto lab_0x4058ea_2;\n                }\n                case 34: {\n                    goto lab_0x4058ea_2;\n                }\n                case 35: {\n                    goto lab_0x40569d;\n                }\n                case 36: {\n                    goto lab_0x4058ea_2;\n                }\n                case 37: {\n                    goto lab_0x4056d1;\n                }\n                case 38: {\n                    goto lab_0x4058ea_2;\n                }\n                case 39: {\n                    goto lab_0x4058ea_2;\n                }\n                case 40: {\n                    goto lab_0x4058ea_2;\n                }\n                case 41: {\n                    goto lab_0x4058ea_2;\n                }\n                case 42: {\n                    goto lab_0x4058ea_2;\n                }\n                case 43: {\n                    goto lab_0x4056d1;\n                }\n                case 44: {\n                    goto lab_0x4056d1;\n                }\n                case 45: {\n                    goto lab_0x4056d1;\n                }\n                case 46: {\n                    goto lab_0x4056d1;\n                }\n                case 47: {\n                    goto lab_0x4056d1;\n                }\n                case 48: {\n                    goto lab_0x4056d1;\n                }\n                case 49: {\n                    goto lab_0x4056d1;\n                }\n                case 50: {\n                    goto lab_0x4056d1;\n                }\n                case 51: {\n                    goto lab_0x4056d1;\n                }\n                case 52: {\n                    goto lab_0x4056d1;\n                }\n                case 53: {\n                    goto lab_0x4056d1;\n                }\n                case 54: {\n                    goto lab_0x4056d1;\n                }\n                case 55: {\n                    goto lab_0x4056d1;\n                }\n                case 56: {\n                    goto lab_0x4056d1;\n                }\n                case 57: {\n                    goto lab_0x4056d1;\n                }\n                case 58: {\n                    goto lab_0x4056d1;\n                }\n                case 59: {\n                    goto lab_0x4058ea_2;\n                }\n                case 60: {\n                    goto lab_0x4058ea_2;\n                }\n                case 61: {\n                    goto lab_0x4058ea_2;\n                }\n                case 62: {\n                    goto lab_0x4058ea_2;\n                }\n                case 63: {\n                    goto lab_0x4058ea_2;\n                }\n                case 65: {\n                    goto lab_0x4056d1;\n                }\n                case 66: {\n                    goto lab_0x4056d1;\n                }\n                case 67: {\n                    goto lab_0x4056d1;\n                }\n                case 68: {\n                    goto lab_0x4056d1;\n                }\n                case 69: {\n                    goto lab_0x4056d1;\n                }\n                case 70: {\n                    goto lab_0x4056d1;\n                }\n                case 71: {\n                    goto lab_0x4056d1;\n                }\n                case 72: {\n                    goto lab_0x4056d1;\n                }\n                case 73: {\n                    goto lab_0x4056d1;\n                }\n                case 74: {\n                    goto lab_0x4056d1;\n                }\n                case 75: {\n                    goto lab_0x4056d1;\n                }\n                case 76: {\n                    goto lab_0x4056d1;\n                }\n                case 77: {\n                    goto lab_0x4056d1;\n                }\n                case 78: {\n                    goto lab_0x4056d1;\n                }\n                case 79: {\n                    goto lab_0x4056d1;\n                }\n                case 80: {\n                    goto lab_0x4056d1;\n                }\n                case 81: {\n                    goto lab_0x4056d1;\n                }\n                case 82: {\n                    goto lab_0x4056d1;\n                }\n                case 83: {\n                    goto lab_0x4056d1;\n                }\n                case 84: {\n                    goto lab_0x4056d1;\n                }\n                case 85: {\n                    goto lab_0x4056d1;\n                }\n                case 86: {\n                    goto lab_0x4056d1;\n                }\n                case 87: {\n                    goto lab_0x4056d1;\n                }\n                case 88: {\n                    goto lab_0x4056d1;\n                }\n                case 89: {\n                    goto lab_0x4056d1;\n                }\n                case 90: {\n                    goto lab_0x4056d1;\n                }\n                case 91: {\n                    goto lab_0x4058ea_2;\n                }\n                case 92: {\n                    goto lab_0x4058ea_2;\n                }\n                case 93: {\n                    goto lab_0x4056d1;\n                }\n                case 94: {\n                    goto lab_0x4058ea_2;\n                }\n                case 95: {\n                    goto lab_0x4056d1;\n                }\n                case 96: {\n                    goto lab_0x4058ea_2;\n                }\n                case 97: {\n                    goto lab_0x4056d1;\n                }\n                case 98: {\n                    goto lab_0x4056d1;\n                }\n                case 99: {\n                    goto lab_0x4056d1;\n                }\n                case 100: {\n                    goto lab_0x4056d1;\n                }\n                case 101: {\n                    goto lab_0x4056d1;\n                }\n                case 102: {\n                    goto lab_0x4056d1;\n                }\n                case 103: {\n                    goto lab_0x4056d1;\n                }\n                case 104: {\n                    goto lab_0x4056d1;\n                }\n                case 105: {\n                    goto lab_0x4056d1;\n                }\n                case 106: {\n                    goto lab_0x4056d1;\n                }\n                case 107: {\n                    goto lab_0x4056d1;\n                }\n                case 108: {\n                    goto lab_0x4056d1;\n                }\n                case 109: {\n                    goto lab_0x4056d1;\n                }\n                case 110: {\n                    goto lab_0x4056d1;\n                }\n                case 111: {\n                    goto lab_0x4056d1;\n                }\n                case 112: {\n                    goto lab_0x4056d1;\n                }\n                case 113: {\n                    goto lab_0x4056d1;\n                }\n                case 114: {\n                    goto lab_0x4056d1;\n                }\n                case 115: {\n                    goto lab_0x4056d1;\n                }\n                case 116: {\n                    goto lab_0x4056d1;\n                }\n                case 117: {\n                    goto lab_0x4056d1;\n                }\n                case 118: {\n                    goto lab_0x4056d1;\n                }\n                case 119: {\n                    goto lab_0x4056d1;\n                }\n                case 120: {\n                    goto lab_0x4056d1;\n                }\n                case 121: {\n                    goto lab_0x4056d1;\n                }\n                case 122: {\n                    goto lab_0x4056d1;\n                }\n                case 123: {\n                    goto lab_0x405675;\n                }\n                case 124: {\n                    goto lab_0x4058ea_2;\n                }\n                case 125: {\n                    goto lab_0x405675;\n                }\n                case 126: {\n                    goto lab_0x40569d;\n                }\n                default: {\n                    goto lab_0x405a75;\n                }\n            }\n        }\n      lab_0x405a75:\n        if (v23 != 1) {\n            // 0x405de0\n            ps = 0;\n            int64_t len = v15; // 0x405df0\n            if (v15 == -1) {\n                // 0x405df2\n                len = strlen((char *)str);\n            }\n            // 0x405e1e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x405e7f:\n                // 0x405e7f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x405e84\n                int64_t v30 = v29 + str;\n                v24 = function_408fc0((int64_t *)&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4063fa_2;\n                    }\n                    case -1: {\n                        goto lab_0x4063fa_2;\n                    }\n                    case -2: {\n                        // 0x4064dd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x406517\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40651a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x406527\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x406520\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4063fa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4063fa_2;\n                    }\n                    case 1: {\n                        goto lab_0x405e50;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x405efc\n                        char v34 = *(char *)v33; // 0x405f0d\n                        unsigned char v35; // 0x405527\n                        if (v34 < 125) {\n                            // 0x405f18\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x405f2f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x4058ea_2;\n                            }\n                        }\n                        // 0x405f00\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x405f0d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x405f18\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x405f2f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x4058ea_2;\n                                }\n                            }\n                            // 0x405f00\n                            v33++;\n                        }\n                        goto lab_0x405e50;\n                    }\n                }\n            }\n            goto lab_0x4063fa_2;\n        } else {\n            // 0x405ac4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4056d1;\n        }\n    }\n  lab_0x405cf8:\n    // 0x405cf8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4065fa\n        if (v8 > result) {\n            // 0x406603\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x405927\n        return result;\n    }\n    goto lab_0x4058ea_2;\n  lab_0x4056d1:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x4056e0\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4058ea_2;\n        }\n    }\n    int64_t v42 = result; // 0x4057e1\n    char v43 = v20; // 0x4057e1\n    int64_t v44 = v58; // 0x4057e1\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x4057e1\n    int64_t v46 = v56; // 0x4057e1\n    goto lab_0x40575d;\n  lab_0x4058ea_2:;\n    // 0x405927\n    char * v36; // 0x405527\n    return function_4054d0(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x4063fa_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x4056d1;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x405fce\n        int64_t v41 = v5 + 1; // 0x4060b1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x4060b8\n        char v48 = v20; // 0x4060b8\n        int64_t v49 = result; // 0x4060b8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x406081\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x406085\n            int64_t v52 = v50 + 1; // 0x40608a\n            int64_t v53 = v47 + 1; // 0x4060b1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40607c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x406081\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x406085\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x40575d;\n    }\n  lab_0x405e50:\n    // 0x405e50\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x405e6f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x405e72\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x4063fa\n        goto lab_0x4063fa_2;\n    }\n    goto lab_0x405e7f;\n  lab_0x40569d:\n    // 0x40569d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4058ea_2;\n    }\n    goto lab_0x4056d1;\n  lab_0x405675:;\n    bool v61 = v15 == 1; // 0x405680\n    if (v15 == -1) {\n        // 0x405682\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x40568e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x4056d1;\n    } else {\n        goto lab_0x40569d;\n    }\n  lab_0x40575d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x405762\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x405766\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x405578_2;\n}\n"
        },
        {
            "funcName": "function_406700",
            "funcStartAddr": "406700",
            "funcEndAddr": "40689e",
            "decompiledFuncCode": "int64_t function_406700(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x406702\n    int32_t * v3 = __errno_location(); // 0x40671c\n    int64_t v4 = (int64_t)g30; // 0x406721\n    int32_t v5 = *v3; // 0x40672b\n    int64_t v6 = v4; // 0x406741\n    if (v2 >= (int64_t)*(int32_t *)&g33) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x406899\n            function_408130(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x406750\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x406757\n        int64_t v9; // 0x406700\n        if (g30 == &g31) {\n            int64_t v10 = function_407f40(0, v8); // 0x40687a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g31); // 0x40687f\n            *(int64_t *)&g30 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_407f40(v4, v8); // 0x40676b\n            *(int64_t *)&g30 = v12;\n            v9 = v12;\n        }\n        // 0x40677a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g33; // 0x40677a\n        int32_t v14 = v7; // 0x406781\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g33 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x4067b1\n    int64_t v17 = v15 + 8; // 0x4067b4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x4067bb\n    int64_t * v19 = (int64_t *)v16; // 0x4067be\n    uint64_t v20 = *v19; // 0x4067be\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x4067c1\n    int64_t result = *v21; // 0x4067c1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x4067cc\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x4067d5\n    int64_t v24; // 0x406700\n    uint64_t v25 = function_4054d0(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x4067e4\n    if (v20 > v25) {\n        // 0x40685b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x4067f7\n    *v19 = v26;\n    if (result != (int64_t)&g50) {\n        // 0x406807\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_407ee0(v26); // 0x406821\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40683b\n    int64_t v28 = *v23; // 0x40683e\n    int64_t v29; // 0x406700\n    function_4054d0(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40685b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4068a0",
            "funcStartAddr": "4068a0",
            "funcEndAddr": "4068d4",
            "decompiledFuncCode": "int64_t function_4068a0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4068a7\n    int64_t result = function_4080e0(a1 == 0 ? (int64_t)&g51 : a1, 56); // 0x4068c6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4068e0",
            "funcStartAddr": "4068e0",
            "funcEndAddr": "4068ef",
            "decompiledFuncCode": "int64_t function_4068e0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g51 : a1); // 0x4068ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_4068f0",
            "funcStartAddr": "4068f0",
            "funcEndAddr": "4068ff",
            "decompiledFuncCode": "int64_t function_4068f0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g51 : a1; // 0x4068f8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g51;\n}\n"
        },
        {
            "funcName": "function_406900",
            "funcStartAddr": "406900",
            "funcEndAddr": "406933",
            "decompiledFuncCode": "int64_t function_406900(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g51 + 8 : a1 + 8; // 0x406919\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40691e\n    uint32_t v3 = *v2; // 0x40691e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x406922\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_406940",
            "funcStartAddr": "406940",
            "funcEndAddr": "406953",
            "decompiledFuncCode": "int64_t function_406940(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g51 + 4 : a1 + 4); // 0x40694c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_406960",
            "funcStartAddr": "406960",
            "funcEndAddr": "40698b",
            "decompiledFuncCode": "int64_t function_406960(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g51 : a1; // 0x406968\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x406985\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40697c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g51;\n}\n"
        },
        {
            "funcName": "function_406990",
            "funcStartAddr": "406990",
            "funcEndAddr": "406a02",
            "decompiledFuncCode": "int64_t function_406990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g51 : a5; // 0x4069b2\n    int32_t * v2 = __errno_location(); // 0x4069bb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x4069d4\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x4069d8\n    uint32_t v5 = *(int32_t *)v1; // 0x4069db\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x4069e1\n    int64_t result = function_4054d0(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x4069ea\n    return result;\n}\n"
        },
        {
            "funcName": "function_406a10",
            "funcStartAddr": "406a10",
            "funcEndAddr": "406af1",
            "decompiledFuncCode": "int64_t function_406a10(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g51 : a4; // 0x406a32\n    int32_t * v2 = __errno_location(); // 0x406a38\n    int64_t v3 = v1 + 8; // 0x406a4f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x406a57\n    int32_t * v5 = (int32_t *)v1; // 0x406a5a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x406a68\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x406a6b\n    int64_t v8 = function_4054d0(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x406a75\n    int64_t v9 = v8 + 1; // 0x406a7a\n    int64_t result = function_407ee0(v9); // 0x406a8f\n    function_4054d0(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x406ad4\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x406add\n    return result;\n}\n"
        },
        {
            "funcName": "function_406b00",
            "funcStartAddr": "406b00",
            "funcEndAddr": "406b0a",
            "decompiledFuncCode": "int64_t function_406b00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406b00\n    return function_406a10(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_406b10",
            "funcStartAddr": "406b10",
            "funcEndAddr": "406ba5",
            "decompiledFuncCode": "int64_t function_406b10(void) {\n    uint32_t v1 = *(int32_t *)&g33; // 0x406b10\n    int64_t v2 = v1; // 0x406b10\n    int64_t v3 = v2; // 0x406b24\n    if (v1 >= 2) {\n        int64_t v4 = &g33;\n        int64_t v5 = v4 + 16; // 0x406b43\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g62;\n        while (v5 != (int64_t)g30 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x406b40\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g62;\n        }\n    }\n    int64_t v6 = v3; // 0x406b5d\n    if (g31 != 0x613340) {\n        // 0x406b5f\n        free((int64_t *)g31);\n        g31 = 256;\n        *(int64_t *)&g32 = (int64_t)&g50;\n        v6 = &g62;\n    }\n    int64_t result = v6; // 0x406b81\n    if (g30 != &g31) {\n        // 0x406b83\n        free(g30);\n        *(int64_t *)&g30 = (int64_t)&g31;\n        result = &g62;\n    }\n    // 0x406b96\n    *(int32_t *)&g33 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "406bc1",
            "decompiledFuncCode": "int64_t function_406bb0(void) {\n    // 0x406bb0\n    int64_t v1; // 0x406bb0\n    return function_406700(v1, v1, -1, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_406bd0",
            "funcStartAddr": "406bd0",
            "funcEndAddr": "406bda",
            "decompiledFuncCode": "int64_t function_406bd0(void) {\n    // 0x406bd0\n    int64_t v1; // 0x406bd0\n    return function_406700(v1, v1, v1, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_406be0",
            "funcStartAddr": "406be0",
            "funcEndAddr": "406bf6",
            "decompiledFuncCode": "int64_t function_406be0(int64_t a1) {\n    // 0x406be0\n    return function_406700(0, a1, -1, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_406c00",
            "funcStartAddr": "406c00",
            "funcEndAddr": "406c12",
            "decompiledFuncCode": "int64_t function_406c00(int64_t a1, int64_t a2) {\n    // 0x406c00\n    return function_406700(0, a1, a2, (int64_t *)&g51);\n}\n"
        },
        {
            "funcName": "function_406c20",
            "funcStartAddr": "406c20",
            "funcEndAddr": "406c88",
            "decompiledFuncCode": "int64_t function_406c20(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406c30\n    return function_406700((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406c90",
            "funcStartAddr": "406c90",
            "funcEndAddr": "406cf4",
            "decompiledFuncCode": "int64_t function_406c90(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406ca0\n    return function_406700((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_406d00",
            "funcStartAddr": "406d00",
            "funcEndAddr": "406d0c",
            "decompiledFuncCode": "int64_t function_406d00(int64_t a1, int64_t a2) {\n    // 0x406d00\n    return function_406c20(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_406d10",
            "funcStartAddr": "406d10",
            "funcEndAddr": "406d1f",
            "decompiledFuncCode": "int64_t function_406d10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406d10\n    return function_406c90(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_406d20",
            "funcStartAddr": "406d20",
            "funcEndAddr": "406d90",
            "decompiledFuncCode": "int64_t function_406d20(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g51); // 0x406d2d\n    int128_t v2 = __asm_movdqa(g52); // 0x406d35\n    int128_t v3 = __asm_movdqa(g53); // 0x406d3d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x406d52\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x406d68\n    uint32_t v6 = *v5; // 0x406d68\n    uint32_t v7 = (int32_t)a3 % 32; // 0x406d6d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_406700(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_406d90",
            "funcStartAddr": "406d90",
            "funcEndAddr": "406d9d",
            "decompiledFuncCode": "int64_t function_406d90(int64_t a1, int64_t a2) {\n    // 0x406d90\n    return function_406d20(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_406da0",
            "funcStartAddr": "406da0",
            "funcEndAddr": "406db1",
            "decompiledFuncCode": "int64_t function_406da0(int64_t a1) {\n    // 0x406da0\n    return function_406d20(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_406dc0",
            "funcStartAddr": "406dc0",
            "funcEndAddr": "406dca",
            "decompiledFuncCode": "int64_t function_406dc0(void) {\n    // 0x406dc0\n    int64_t v1; // 0x406dc0\n    return function_406d20(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_406dd0",
            "funcStartAddr": "406dd0",
            "funcEndAddr": "406e3e",
            "decompiledFuncCode": "int64_t function_406dd0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406dea\n    return function_406700(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406e40",
            "funcStartAddr": "406e40",
            "funcEndAddr": "406eac",
            "decompiledFuncCode": "int64_t function_406e40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g51); // 0x406e47\n    int128_t v2 = __asm_movdqa(g52); // 0x406e4f\n    int128_t v3 = __asm_movdqa(g53); // 0x406e57\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x406e79\n    if (a2 == 0 || a3 == 0) {\n        // 0x406ea7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x406e8a\n    return function_406700(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_406eb0",
            "funcStartAddr": "406eb0",
            "funcEndAddr": "406eb9",
            "decompiledFuncCode": "int64_t function_406eb0(void) {\n    // 0x406eb0\n    int64_t v1; // 0x406eb0\n    return function_406e40(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_406ec0",
            "funcStartAddr": "406ec0",
            "funcEndAddr": "406ed7",
            "decompiledFuncCode": "int64_t function_406ec0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406ec0\n    return function_406e40(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_406ee0",
            "funcStartAddr": "406ee0",
            "funcEndAddr": "406ef3",
            "decompiledFuncCode": "int64_t function_406ee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x406ee0\n    return function_406e40(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_406f00",
            "funcStartAddr": "406f00",
            "funcEndAddr": "406f0a",
            "decompiledFuncCode": "int64_t function_406f00(void) {\n    // 0x406f00\n    int64_t v1; // 0x406f00\n    return function_406700(v1, v1, v1, &g29);\n}\n"
        },
        {
            "funcName": "function_406f10",
            "funcStartAddr": "406f10",
            "funcEndAddr": "406f22",
            "decompiledFuncCode": "int64_t function_406f10(int64_t a1, int64_t a2) {\n    // 0x406f10\n    return function_406700(0, a1, a2, &g29);\n}\n"
        },
        {
            "funcName": "function_406f30",
            "funcStartAddr": "406f30",
            "funcEndAddr": "406f41",
            "decompiledFuncCode": "int64_t function_406f30(void) {\n    // 0x406f30\n    int64_t v1; // 0x406f30\n    return function_406700(v1, v1, -1, &g29);\n}\n"
        },
        {
            "funcName": "function_406f50",
            "funcStartAddr": "406f50",
            "funcEndAddr": "406f66",
            "decompiledFuncCode": "int64_t function_406f50(int64_t a1) {\n    // 0x406f50\n    return function_406700(0, a1, -1, &g29);\n}\n"
        },
        {
            "funcName": "function_406f70",
            "funcStartAddr": "406f70",
            "funcEndAddr": "406f80",
            "decompiledFuncCode": "int64_t function_406f70(int64_t * a1) {\n    // 0x406f70\n    *a1 = 0;\n    *(int64_t *)((int64_t)a1 + 8) = 0;\n    int64_t result; // 0x406f70\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f80",
            "funcStartAddr": "406f80",
            "funcEndAddr": "4070f9",
            "decompiledFuncCode": "int64_t function_406f80(int64_t a1, char * a2, int64_t a3, int64_t * a4) {\n    // 0x406f80\n    int128_t v1; // 0x406f80\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a4;\n    int128_t v4 = __asm_pxor(v2, v2); // 0x406f82\n    int64_t v5; // bp-88, 0x406f80\n    int64_t v6 = &v5; // 0x406f94\n    v5 = __asm_movaps(v4);\n    __asm_movaps(v4);\n    int64_t v7 = v3; // 0x406fa4\n    int64_t v8 = a1; // 0x406fa4\n    int64_t * v9; // 0x406f80\n    int64_t v10; // 0x406f80\n    int64_t v11; // 0x406f80\n    int64_t v12; // 0x406f80\n    int64_t v13; // 0x406f80\n    if (a3 == 0) {\n        goto lab_0x406ffc;\n    } else {\n        int64_t v14 = (int64_t)a2;\n        int64_t v15 = v14; // 0x406fae\n        unsigned char v16 = *(char *)v15; // 0x406fb0\n        int64_t v17 = v16; // 0x406fb0\n        v15++;\n        unsigned char v18 = v16 % 64;\n        int64_t * v19 = (int64_t *)((v17 / 8 & 24) + v6); // 0x406fc7\n        *v19 = (v18 == 0 ? 1 : 1 << (int64_t)v18) | *v19;\n        while (v14 + a3 != v15) {\n            // 0x406fb0\n            v16 = *(char *)v15;\n            v17 = v16;\n            v15++;\n            v18 = v16 % 64;\n            v19 = (int64_t *)((v17 / 8 & 24) + v6);\n            *v19 = (v18 == 0 ? 1 : 1 << (int64_t)v18) | *v19;\n        }\n        int64_t * v20 = (int64_t *)(a1 + 8);\n        uint64_t v21 = *v20; // 0x406fd0\n        v9 = v20;\n        v10 = v21;\n        v11 = v17;\n        v13 = 1;\n        v12 = v17;\n        if (v21 >= *(int64_t *)(a1 + 16)) {\n            goto lab_0x407006;\n        } else {\n            goto lab_0x406fe0;\n        }\n    }\n  lab_0x406ffc:;\n    int64_t * v22 = (int64_t *)(a1 + 8);\n    uint64_t v23 = *v22; // 0x406ffc\n    v9 = v22;\n    v10 = v23;\n    v11 = v7;\n    v13 = v8;\n    v12 = v7;\n    if (v23 < *(int64_t *)(a1 + 16)) {\n        goto lab_0x406fe0;\n    } else {\n        goto lab_0x407006;\n    }\n  lab_0x406fe0:\n    // 0x406fe0\n    *v9 = v10 + 1;\n    int64_t v24 = v11; // 0x406fe8\n    int64_t v25 = (int64_t)*(char *)v10; // 0x406fe8\n    int64_t v26 = v13; // 0x406fe8\n    goto lab_0x406feb;\n  lab_0x407006:;\n    int32_t v56 = __uflow((struct _IO_FILE *)a1); // 0x407009\n    int64_t v57 = v56; // 0x40700e\n    v24 = v12;\n    v25 = v57;\n    v26 = a1;\n    int64_t v28 = v12; // 0x407012\n    int64_t v29 = v57; // 0x407012\n    int64_t v30 = a1; // 0x407012\n    if (v56 >= 0) {\n        goto lab_0x406feb;\n    } else {\n        goto lab_0x407014;\n    }\n  lab_0x406feb:\n    // 0x406feb\n    v8 = v26;\n    v7 = v24;\n    int64_t v27 = *(int64_t *)(8 * (0x100000000 * v25 >> 32) / 64 + v6); // 0x406ff2\n    v28 = v7;\n    v29 = v25;\n    v30 = v8;\n    if ((1 << v25 % 64 & v27) == 0) {\n        goto lab_0x407014;\n    } else {\n        goto lab_0x406ffc;\n    }\n  lab_0x407014:\n    // 0x407014\n    if ((int32_t)v29 < 0) {\n        // 0x4070b3\n        return -1;\n    }\n    int64_t * v31 = (int64_t *)(v3 + 8); // 0x407014\n    int64_t * v32 = (int64_t *)(a1 + 8);\n    int64_t v33 = v29; // 0x406f80\n    int64_t result = 0;\n    int64_t v34 = *v31;\n    bool v35 = false;\n    int64_t v36; // 0x406f80\n    int64_t v37; // 0x406f80\n    int64_t v38; // 0x406f80\n    int64_t v39; // 0x406f80\n    int64_t v40; // 0x406f80\n    int64_t v41; // 0x407093\n    if (result != v28) {\n        // 0x407028\n        v40 = result + v34;\n        v39 = v30;\n        v36 = v28;\n        v38 = v34;\n        if (v35) {\n            // break -> 0x4070a8\n            break;\n        }\n    } else {\n        if (v34 == 0) {\n            // 0x4070d8\n            v37 = 128;\n        } else {\n            if (result >= 0x5555555555555554) {\n                // 0x4070ea\n                function_408130(v30);\n                // UNREACHABLE\n            }\n            // 0x407082\n            v37 = result + 1 + result / 2;\n        }\n        // 0x40708d\n        v41 = function_407f40(v34, v37);\n        v40 = v41 + result;\n        v39 = v34;\n        v36 = v37;\n        v38 = v41;\n        if (v35) {\n            // break -> 0x4070a8\n            break;\n        }\n    }\n    int64_t v42 = *(int64_t *)(8 * (0x100000000 * v33 >> 32) / 64 + v6); // 0x407037\n    int64_t v43 = v40; // 0x40703f\n    int64_t v44 = v36; // 0x40703f\n    int64_t v45 = v38; // 0x40703f\n    while ((v42 & 1 << v33 % 64) == 0) {\n        int64_t v46 = v39;\n        *(char *)v40 = (char)v33;\n        uint64_t v47 = *v32; // 0x407047\n        int64_t v48; // 0x406f80\n        int64_t v49; // 0x406f80\n        if (v47 >= *(int64_t *)(a1 + 16)) {\n            // 0x4070c8\n            v48 = __uflow((struct _IO_FILE *)a1);\n            v49 = a1;\n        } else {\n            // 0x407051\n            *v32 = v47 + 1;\n            v48 = (int64_t)*(char *)v47;\n            v49 = v46;\n        }\n        int64_t v50 = result + 1; // 0x407043\n        bool v51 = v50 == 0; // 0x40705e\n        v33 = v48;\n        if (v50 == 0 == (int32_t)v48 < 0) {\n            // 0x4070b3\n            return -1;\n        }\n        int64_t v52 = v49;\n        result = v50;\n        int64_t v53 = v36;\n        v34 = v38;\n        v35 = (int32_t)v48 < 0;\n        if (result != v53) {\n            int64_t v54 = result + v34; // 0x407028\n            v40 = v54;\n            v39 = v52;\n            v36 = v53;\n            v38 = v34;\n            v43 = v54;\n            v44 = v53;\n            v45 = v34;\n            if (v35) {\n                // break -> 0x4070a8\n                break;\n            }\n        } else {\n            if (v34 == 0) {\n                // 0x4070d8\n                v37 = 128;\n                if (!v51) {\n                    // 0x4070e8\n                    v37 = v53;\n                    if (result < 0) {\n                        // 0x4070ea\n                        function_408130(v52);\n                        // UNREACHABLE\n                    }\n                }\n            } else {\n                if (result >= 0x5555555555555554) {\n                    // 0x4070ea\n                    function_408130(v52);\n                    // UNREACHABLE\n                }\n                // 0x407082\n                v37 = result + 1 + result / 2;\n            }\n            // 0x40708d\n            v41 = function_407f40(v34, v37);\n            int64_t v55 = v41 + result; // 0x40709b\n            v40 = v55;\n            v39 = v34;\n            v36 = v37;\n            v38 = v41;\n            v43 = v55;\n            v44 = v37;\n            v45 = v41;\n            if (v35) {\n                // break -> 0x4070a8\n                break;\n            }\n        }\n        // 0x407030\n        v42 = *(int64_t *)(8 * (0x100000000 * v33 >> 32) / 64 + v6);\n        v43 = v40;\n        v44 = v36;\n        v45 = v38;\n    }\n    // 0x4070a8\n    *(char *)v43 = 0;\n    *v31 = v45;\n    *a4 = v44;\n    // 0x4070b3\n    return result;\n}\n"
        },
        {
            "funcName": "function_407100",
            "funcStartAddr": "407100",
            "funcEndAddr": "4072d9",
            "decompiledFuncCode": "int64_t function_407100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 512; // 0x407129\n    int64_t v2 = 64; // 0x407129\n    if (a2 != 0) {\n        // 0x40712b\n        v2 = a2 + 1;\n        v1 = 8 * v2;\n        if (v1 > -1 != v2 < 0x2000000000000000) {\n            // 0x40714a\n            function_408130(a1);\n            // UNREACHABLE\n        }\n    }\n    int64_t v3 = 0; // bp-72, 0x40716f\n    int64_t v4 = 0; // 0x407184\n    int64_t v5 = v2; // 0x407184\n    int64_t v6 = function_407ee0(v1); // 0x407184\n    int64_t v7 = function_407ee0(v1); // 0x407184\n    int64_t v8; // 0x407100\n    int64_t v9; // 0x407100\n    uint64_t result; // 0x407100\n    while (true) {\n        int64_t v10 = v7;\n        int64_t v11 = v6;\n        uint64_t v12 = v5;\n        result = v4;\n        int64_t v13 = function_406f80(a1, (char *)a3, a4, &v3); // 0x4071db\n        int64_t v14; // 0x407100\n        int64_t v15; // 0x407100\n        int64_t v16; // 0x407100\n        if (result < v12) {\n            // 0x407190\n            v5 = v12;\n            v16 = a1;\n            v14 = v11;\n            v15 = v10;\n            v8 = v11;\n            v9 = v10;\n            if (v13 == -1) {\n                // break -> 0x407247\n                break;\n            }\n        } else {\n            int64_t v17; // 0x407100\n            int64_t v18; // 0x407100\n            if (v11 == 0) {\n                // 0x407290\n                v18 = 128;\n                v17 = 16;\n                if (v12 != 0) {\n                    int64_t v19 = 8 * v12; // 0x4072a2\n                    v18 = v19;\n                    v17 = v12;\n                    if (v19 > -1 != v12 < 0x2000000000000000) {\n                        // 0x40714a\n                        function_408130(a1);\n                        // UNREACHABLE\n                    }\n                }\n            } else {\n                // 0x4071f1\n                if (v12 >= 0xaaaaaaaaaaaaaaa) {\n                    // 0x40714a\n                    function_408130(a1);\n                    // UNREACHABLE\n                }\n                int64_t v20 = v12 + 1 + v12 / 2; // 0x40720a\n                v18 = 8 * v20;\n                v17 = v20;\n            }\n            int64_t v21 = function_407f40(v11, v18); // 0x407222\n            int64_t v22 = function_407f40(v10, v18); // 0x407235\n            v5 = v17;\n            v16 = v10;\n            v14 = v21;\n            v15 = v22;\n            v8 = v21;\n            v9 = v22;\n            if (v13 == -1) {\n                // break -> 0x407247\n                break;\n            }\n        }\n        int64_t v23 = v13 + 1; // 0x40719d\n        int64_t v24 = v16; // 0x4071a1\n        if (v23 < 0) {\n            // 0x40714a\n            function_408130(v24);\n            // UNREACHABLE\n        }\n        // 0x4071a3\n        v7 = v15;\n        v6 = v14;\n        int64_t v25 = function_407ee0(v23); // 0x4071a6\n        int64_t v26 = 8 * result; // 0x4071ab\n        *(int64_t *)(v7 + v26) = v13;\n        int64_t * dest_mem = memcpy((int64_t *)v25, NULL, (int32_t)v23); // 0x4071bb\n        *(int64_t *)(v6 + v26) = (int64_t)dest_mem;\n        v4 = result + 1;\n    }\n    int64_t v27 = 8 * result; // 0x407247\n    *(int64_t *)(v8 + v27) = 0;\n    *(int64_t *)(v9 + v27) = 0;\n    free(NULL);\n    *(int64_t *)a5 = v8;\n    if (a6 == 0) {\n        // 0x4072cf\n        free((int64_t *)v9);\n    } else {\n        // 0x407272\n        *(int64_t *)a6 = v9;\n    }\n    // 0x40727a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4072e0",
            "funcStartAddr": "4072e0",
            "funcEndAddr": "40733e",
            "decompiledFuncCode": "int64_t function_4072e0(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x407301\n    while (result < 0) {\n        // 0x40730e\n        if (*__errno_location() != 4) {\n            // break -> 0x40731a\n            break;\n        }\n        result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_407340",
            "funcStartAddr": "407340",
            "funcEndAddr": "407371",
            "decompiledFuncCode": "int64_t function_407340(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409040(a1, 0, a2); // 0x407351\n    return v1 != 0 ? 1 - a1 + v1 : a2;\n}\n"
        },
        {
            "funcName": "function_407380",
            "funcStartAddr": "407380",
            "funcEndAddr": "4073a0",
            "decompiledFuncCode": "int64_t function_407380(void) {\n    // 0x407380\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbiter.h\", 170, \"mbiter_multi_next\");\n    return &g62;\n}\n"
        },
        {
            "funcName": "function_4073a0",
            "funcStartAddr": "4073a0",
            "funcEndAddr": "407d1d",
            "decompiledFuncCode": "int64_t function_4073a0(int64_t str, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    char * v1 = strdup((char *)str); // 0x4073b0\n    if (v1 == NULL) {\n        // 0x407900\n        function_408130(str);\n        // UNREACHABLE\n    }\n    int64_t result = (int64_t)v1; // 0x4073b0\n    int32_t v2 = a2;\n    if (__ctype_get_mb_cur_max() < 2) {\n        if (v2 != 0) {\n            char v3 = *v1; // 0x407604\n            int64_t v4 = result; // 0x40760b\n            if (v3 != 0) {\n                int16_t * v5 = *__ctype_b_loc(); // 0x407619\n                char v6 = v3; // 0x40761c\n                int64_t v7 = result; // 0x40761c\n                v4 = v7;\n                while ((*(char *)((int64_t)v5 + 1 + 2 * (int64_t)v6) & 32) != 0) {\n                    // 0x407620\n                    v7++;\n                    v6 = *(char *)v7;\n                    v4 = v7;\n                    if (v6 == 0) {\n                        // break -> 0x407634\n                        break;\n                    }\n                    v4 = v7;\n                }\n            }\n            int64_t str2 = v4;\n            memmove((int64_t *)v1, (int64_t *)str2, strlen((char *)str2) + 1);\n            if (v2 == 1) {\n              lab_0x40751a:\n                // 0x40751a\n                return result;\n            }\n        }\n        int64_t v8 = result;\n        int32_t v9 = *(int32_t *)v8; // 0x407657\n        int64_t v10 = v8 + 4; // 0x407659\n        int32_t v11 = v9 - 0x1010101 & (v9 ^ -0x7f7f7f80); // 0x407665\n        uint32_t v12 = v11 & -0x7f7f7f80; // 0x407667\n        while (v12 == 0) {\n            // 0x407657\n            v8 = v10;\n            v9 = *(int32_t *)v8;\n            v10 = v8 + 4;\n            v11 = v9 - 0x1010101 & (v9 ^ -0x7f7f7f80);\n            v12 = v11 & -0x7f7f7f80;\n        }\n        unsigned char v13 = (char)((v11 & 0x8080) == 0 ? v12 / 0x10000 : v12); // 0x407685\n        int64_t v14 = (-1 - v13 < v13 ? -5 : -4) + ((v11 & 0x8080) == 0 ? v8 + 6 : v10); // 0x40768c\n        if (v14 < result) {\n            // 0x40751a\n            return result;\n        }\n        int16_t * v15 = *__ctype_b_loc(); // 0x40769e\n        int64_t v16 = v14; // 0x4076a1\n        char * v17 = (char *)v16; // 0x4076b8\n        char v18 = *(char *)((int64_t)v15 + 1 + 2 * (int64_t)*v17); // 0x4076bb\n        while ((v18 & 32) != 0) {\n            // 0x4076a8\n            *v17 = 0;\n            v16--;\n            if (v16 < result) {\n                // break -> 0x40751a\n                break;\n            }\n            v17 = (char *)v16;\n            v18 = *(char *)((int64_t)v15 + 1 + 2 * (int64_t)*v17);\n        }\n        // 0x40751a\n        return result;\n    }\n    // 0x4073d0\n    char * wc2; // 0x4073a0\n    int64_t v19; // 0x4073a0\n    int64_t v20; // 0x4073a0\n    int64_t v21; // 0x4073a0\n    int64_t v22; // 0x4073a0\n    char * v23; // 0x4073a0\n    char * v24; // 0x4073a0\n    int64_t ps; // bp-124, 0x4073a0\n    char v25; // 0x4073a0\n    char v26; // 0x4073a0\n    char v27; // 0x4073a0\n    char * wc; // bp-92, 0x4073a0\n    uint64_t v28; // 0x40776f\n    if (v2 != 0) {\n        int64_t v29 = result;\n        int32_t v30 = *(int32_t *)v29; // 0x407728\n        int64_t v31 = v29 + 4; // 0x40772a\n        int32_t v32 = v30 - 0x1010101 & (v30 ^ -0x7f7f7f80); // 0x407736\n        uint32_t v33 = v32 & -0x7f7f7f80; // 0x407738\n        while (v33 == 0) {\n            // 0x407728\n            v29 = v31;\n            v30 = *(int32_t *)v29;\n            v31 = v29 + 4;\n            v32 = v30 - 0x1010101 & (v30 ^ -0x7f7f7f80);\n            v33 = v32 & -0x7f7f7f80;\n        }\n        // 0x40773f\n        ps = 0;\n        unsigned char v34 = (char)((v32 & 0x8080) == 0 ? v33 / 0x10000 : v33); // 0x40776c\n        v28 = ((v32 & 0x8080) == 0 ? v29 + 6 : v31) - (-1 - v34 < v34 ? 4 : 3);\n        v21 = result;\n        if (v28 > result) {\n            // 0x4077f2\n            v23 = v1;\n            v26 = 0;\n            v19 = result;\n            while (true) {\n              lab_0x4077f2:\n                // 0x4077f2\n                v20 = v19;\n                v24 = v23;\n                v27 = v26;\n                if (v26 == 0) {\n                    unsigned char v35 = *(char *)v20; // 0x407788\n                    int32_t v36 = *(int32_t *)((int64_t)(4 * v35 / 32) + (int64_t)&g20); // 0x407794\n                    if ((1 << (int32_t)(v35 % 32) & v36) == 0) {\n                        int32_t v37 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40788d\n                        v27 = 1;\n                        if (v37 == 0) {\n                            goto lab_0x407905_2;\n                        }\n                        goto lab_0x4077f9;\n                    } else {\n                        char * v38 = (char *)((int64_t)v35 & 0xffffffff); // 0x4077bc\n                        wc = v38;\n                        wc2 = v38;\n                        v25 = 0;\n                        v22 = 1;\n                        goto lab_0x4077c5;\n                    }\n                } else {\n                    goto lab_0x4077f9;\n                }\n            }\n          lab_0x4078b8_3:\n            // 0x4078b8\n            v21 = (int64_t)v24;\n        }\n      lab_0x4078b8_2:;\n        int64_t str3 = v21;\n        memmove((int64_t *)v1, (int64_t *)str3, strlen((char *)str3) + 1);\n        if (v2 == 1) {\n            // 0x40751a\n            return result;\n        }\n    }\n    int64_t v39 = result;\n    int32_t v40 = *(int32_t *)v39; // 0x4073e0\n    int64_t v41 = v39 + 4; // 0x4073e3\n    int32_t v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80); // 0x4073ef\n    uint32_t v43 = v42 & -0x7f7f7f80; // 0x4073f1\n    while (v43 == 0) {\n        // 0x4073e0\n        v39 = v41;\n        v40 = *(int32_t *)v39;\n        v41 = v39 + 4;\n        v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80);\n        v43 = v42 & -0x7f7f7f80;\n    }\n    // 0x4073f8\n    ps = 0;\n    unsigned char v44 = (char)((v42 & 0x8080) == 0 ? v43 / 0x10000 : v43); // 0x407425\n    uint64_t v45 = ((v42 & 0x8080) == 0 ? v39 + 6 : v41) - (-1 - v44 < v44 ? 4 : 3); // 0x407428\n    if (v45 <= result) {\n        // 0x40751a\n        return result;\n    }\n    char * v46 = v1; // 0x4073a0\n    char v47 = 0; // 0x4073a0\n    int64_t v48 = result;\n    int64_t v49 = 0;\n    int64_t v50; // 0x4073a0\n    int64_t v51; // 0x4073a0\n    int64_t v52; // 0x4073a0\n    int64_t v53; // 0x4073a0\n    int64_t v54; // 0x4073a0\n    int64_t v55; // 0x4073a0\n    int64_t v56; // 0x4073a0\n    int64_t v57; // 0x4073a0\n    int64_t v58; // 0x4073a0\n    char * v59; // 0x4073a0\n    char * v60; // 0x4073a0\n    char v61; // 0x4073a0\n    char v62; // 0x4073a0\n    char v63; // 0x4073a0\n    while (true) {\n      lab_0x407472_2:\n        // 0x407472\n        v52 = v51;\n        v59 = v46;\n        v54 = v49;\n        while (true) {\n          lab_0x407472:\n            // 0x407472\n            v55 = v54;\n            v57 = v48;\n            char v64 = v47;\n            v60 = v59;\n            v61 = v64;\n            if (v64 != 0) {\n                goto lab_0x407547;\n            } else {\n                unsigned char v65 = *(char *)v57; // 0x40747d\n                int32_t v66 = *(int32_t *)((int64_t)(4 * v65 / 32) + (int64_t)&g20); // 0x407488\n                if ((1 << (int32_t)(v65 % 32) & v66) == 0) {\n                    int32_t v67 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x407535\n                    v61 = 1;\n                    if (v67 == 0) {\n                        // break (via goto) -> 0x407905\n                        goto lab_0x407905_2;\n                    }\n                    goto lab_0x407547;\n                } else {\n                    int64_t v68 = (int64_t)v60; // 0x4074a5\n                    wc = (char *)((int64_t)v65 & 0xffffffff);\n                    v47 = v64;\n                    v62 = 1;\n                    v58 = v68 + 1;\n                    v56 = v68;\n                    goto lab_0x4074bb;\n                }\n            }\n        }\n      lab_0x407440:\n        // 0x407440\n        v50 = v52;\n        v53 = 1;\n        if (v63 != 0) {\n            // 0x40744d\n            v50 = v52;\n            v53 = iswspace((int32_t)(int64_t)wc) == 0;\n        }\n        goto lab_0x40745f;\n    }\n  lab_0x407905_2:\n    // 0x407905\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbiter.h\", 142, \"mbiter_multi_next\");\n  lab_0x407937_3:\n    // 0x407937\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbiter.h\", 169, \"mbiter_multi_next\");\n    function_407380();\n    struct _IO_FILE * v69 = (struct _IO_FILE *)\"*iter->cur.ptr == '\\\\0'\"; // 0x4073a0\n    int64_t v70 = (int64_t)\"lib/mbiter.h\"; // 0x4073a0\n    int64_t v71 = 169; // 0x4073a0\n    int64_t v72 = (int64_t)\"mbiter_multi_next\"; // 0x4073a0\n    goto lab_0x40795c;\n  lab_0x407510_2:;\n    // 0x407510\n    int64_t v75; // 0x4073a0\n    int64_t v76; // 0x4073a0\n    if ((int32_t)v76 == 2) {\n        // 0x407878\n        *(char *)v75 = 0;\n        goto lab_0x40751a;\n    } else {\n        goto lab_0x40751a;\n    }\n  lab_0x40745f:\n    // 0x40745f\n    v49 = v53;\n    v46 = (char *)v48;\n    v51 = v50;\n    v75 = v50;\n    v76 = v49;\n    if (v48 >= v45) {\n        goto lab_0x407510_2;\n    }\n    goto lab_0x407472_2;\n  lab_0x407937_4:\n    // 0x407937\n    function_407380();\n    v69 = (struct _IO_FILE *)&wc;\n    int64_t v77; // 0x4073a0\n    v70 = v77;\n    int64_t v78; // 0x4073a0\n    v71 = v78;\n    v72 = &ps;\n    struct _IO_FILE * v73; // 0x4073a0\n    if (v77 == 0) {\n        // 0x4079d8\n        __fprintf_chk((struct _IO_FILE *)&wc, 1, \"%s %s\\n\", (char *)v78, &ps);\n        v73 = (struct _IO_FILE *)&wc;\n        goto lab_0x407976;\n    } else {\n        goto lab_0x40795c;\n    }\n  lab_0x407547:;\n    char v79 = v61;\n    int64_t v80 = v45 - v57; // 0x407557\n    int64_t v81 = function_408fc0((int64_t *)&wc, v57, v80); // 0x40755a\n    int64_t v82 = (int64_t)v60;\n    v47 = v79;\n    v62 = 0;\n    v58 = v45;\n    v56 = v82;\n    switch (v81) {\n        case -1: {\n            // 0x4076d0\n            v47 = v79;\n            v62 = 0;\n            v58 = v82 + 1;\n            v56 = v82;\n            goto lab_0x4074bb;\n        }\n        case -2: {\n            goto lab_0x4074bb;\n        }\n        default: {\n            int64_t v83 = v81; // 0x407583\n            if (v81 == 0) {\n                // 0x407585\n                if (*v60 != 0) {\n                    goto lab_0x407937_3;\n                }\n                // 0x407598\n                v83 = 1;\n                v78 = v80;\n                v77 = v57;\n                if ((int32_t)(int64_t)wc != 0) {\n                    goto lab_0x407937_4;\n                }\n            }\n            int32_t v84 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4075b6\n            v47 = v84 == 0 ? v79 : 0;\n            v62 = 1;\n            v58 = v83 + v82;\n            v56 = v82;\n            goto lab_0x4074bb;\n        }\n    }\n  lab_0x4074bb:\n    // 0x4074bb\n    v48 = v58;\n    v63 = v62;\n    int32_t v85 = v55; // 0x4074c0\n    switch (v85) {\n        case 0: {\n            goto lab_0x407440;\n        }\n        case 1: {\n            // 0x4075d8\n            v50 = v52;\n            v53 = v55;\n            if (v63 != 0) {\n                int32_t v86 = iswspace((int32_t)(int64_t)wc); // 0x4075e7\n                v50 = v86 != 0 ? v56 : v52;\n                v53 = v86 != 0 ? 2 : v55 & 0xffffffff;\n            }\n            goto lab_0x40745f;\n        }\n        default: {\n            // 0x4074d3\n            v50 = v52;\n            v53 = 1;\n            if (v85 != 2 || v63 == 0) {\n                goto lab_0x40745f;\n            }\n            int64_t v87 = iswspace((int32_t)(int64_t)wc) == 0 ? 1 : v55 & 0xffffffff; // 0x407502\n            v59 = (char *)v48;\n            v54 = v87;\n            v75 = v52;\n            v76 = v87;\n            if (v48 >= v45) {\n                goto lab_0x407510_2;\n            }\n            goto lab_0x407472;\n        }\n    }\n  lab_0x4077f9:;\n    int64_t v88 = function_408fc0((int64_t *)&wc, v20, v28 - v20); // 0x40780c\n    if (v88 > 0xfffffffffffffffd) {\n        // break -> 0x4078b8\n        goto lab_0x4078b8_3;\n    }\n    int64_t v89 = v88; // 0x407832\n    if (v88 == 0) {\n        // 0x407834\n        if (*v24 != 0) {\n            goto lab_0x407937_3;\n        }\n        int64_t v90 = (int64_t)wc;\n        v89 = 1;\n        if ((int32_t)v90 != 0) {\n            // 0x407937\n            v78 = v90 & 0xffffffff;\n            v77 = v20;\n            goto lab_0x407937_4;\n        }\n    }\n    int32_t v91 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40785d\n    wc2 = wc;\n    v25 = v91 == 0 ? v27 : 0;\n    v22 = v89;\n    goto lab_0x4077c5;\n  lab_0x4077c5:;\n    int64_t v92 = (int64_t)v24;\n    v21 = v92;\n    if (iswspace((int32_t)(int64_t)wc2) == 0) {\n        goto lab_0x4078b8_2;\n    }\n    int64_t v93 = v22 + v92; // 0x4077da\n    v23 = (char *)v93;\n    v26 = v25;\n    v19 = v93;\n    v21 = v93;\n    if (v93 >= v28) {\n        goto lab_0x4078b8_2;\n    }\n    goto lab_0x4077f2;\n  lab_0x40795c:\n    // 0x40795c\n    __fprintf_chk(v69, 1, \"%s (%s) %s\\n\", (char *)v70, (char *)v71, (char *)v72);\n    v73 = v69;\n    goto lab_0x407976;\n  lab_0x407976:\n    // 0x407976\n    __fprintf_chk(v73, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result2 = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v73); // 0x4079bb\n    if (a6 < 10) {\n        // 0x4079ca\n        return result2;\n    }\n    char * v74 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x407ac2\n    return __fprintf_chk(v73, 1, v74);\n}\n"
        },
        {
            "funcName": "function_407d20",
            "funcStartAddr": "407d20",
            "funcEndAddr": "407d40",
            "decompiledFuncCode": "int64_t function_407d20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407d20\n    int64_t result; // 0x407d20\n    if (a5 == 0) {\n        // 0x407d3b\n        return result;\n    }\n    int64_t v1 = 0; // 0x407d27\n    while (*(int64_t *)(8 * (v1 + 1) + a5) != 0) {\n        // 0x407d30\n        v1++;\n    }\n    // 0x407d3b\n    return result;\n}\n"
        },
        {
            "funcName": "function_407d40",
            "funcStartAddr": "407d40",
            "funcEndAddr": "407da0",
            "decompiledFuncCode": "int64_t function_407d40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x407d40\n    int64_t v3 = &v2; // 0x407d40\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x407d73\n    int64_t v6; // 0x407d40\n    int64_t v7; // 0x407d5d\n    int64_t * v8; // 0x407d7b\n    int64_t v9; // 0x407d7b\n    int64_t v10; // 0x407d87\n    if (v5 < 48) {\n        // 0x407d50\n        *(int32_t *)v1 = v5 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v7;\n        v6 = v7;\n        if (v7 == 0) {\n            // break -> 0x407d93\n            break;\n        }\n    } else {\n        // 0x407d7b\n        v8 = (int64_t *)(v1 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v4 + v3) = v10;\n        v6 = v10;\n        if (v10 == 0) {\n            // break -> 0x407d93\n            break;\n        }\n    }\n    int64_t result = v6; // 0x407d71\n    while (v4 != 9) {\n        // 0x407d69\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x407d50\n            *(int32_t *)v1 = v5 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v7;\n            v6 = v7;\n            result = 0;\n            if (v7 == 0) {\n                // break -> 0x407d93\n                break;\n            }\n        } else {\n            // 0x407d7b\n            v8 = (int64_t *)(v1 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v4 + v3) = v10;\n            v6 = v10;\n            result = v10;\n            if (v10 == 0) {\n                // break -> 0x407d93\n                break;\n            }\n        }\n        // 0x407d69\n        result = v6;\n    }\n    // 0x407d93\n    return result;\n}\n"
        },
        {
            "funcName": "function_407da0",
            "funcStartAddr": "407da0",
            "funcEndAddr": "407e5c",
            "decompiledFuncCode": "int64_t function_407da0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int64_t a6) {\n    // 0x407da0\n    int64_t v1; // bp-168, 0x407da0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x407da0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x407da0\n    int64_t v8; // 0x407da0\n    int64_t v9; // 0x407da0\n    int64_t v10; // bp-56, 0x407da0\n    int64_t v11; // 0x407e05\n    int64_t v12; // 0x407e29\n    if ((int32_t)v6 < 48) {\n        // 0x407df0\n        v11 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v10);\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v9 = v11;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v11 == 0) {\n            // break -> 0x407e40\n            break;\n        }\n    } else {\n        // 0x407e22\n        v12 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v12;\n        v9 = v12;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v12 == 0) {\n            // break -> 0x407e40\n            break;\n        }\n    }\n    int64_t v13 = v5 + 1; // 0x407e1a\n    int64_t result = v9; // 0x407e1a\n    while (v5 != 9) {\n        // 0x407e1c\n        v4 = v7;\n        v5 = v13;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x407df0\n            v11 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v10);\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v9 = v11;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            result = 0;\n            if (v11 == 0) {\n                // break -> 0x407e40\n                break;\n            }\n        } else {\n            // 0x407e22\n            v12 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v12;\n            v9 = v12;\n            v8 = v6;\n            v7 = v4 + 8;\n            result = v12;\n            if (v12 == 0) {\n                // break -> 0x407e40\n                break;\n            }\n        }\n        // 0x407e12\n        v13 = v5 + 1;\n        result = v9;\n    }\n    // 0x407e40\n    return result;\n}\n"
        },
        {
            "funcName": "function_407e60",
            "funcStartAddr": "407e60",
            "funcEndAddr": "407ed4",
            "decompiledFuncCode": "int64_t function_407e60(int64_t a1) {\n    // 0x407e60\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x407ec3\n    return fputs_unlocked(v1, g38);\n}\n"
        },
        {
            "funcName": "function_407ee0",
            "funcStartAddr": "407ee0",
            "funcEndAddr": "407efa",
            "decompiledFuncCode": "int64_t function_407ee0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x407ee4\n    if (size != 0 != (mem == NULL)) {\n        // 0x407ef3\n        return (int64_t)mem;\n    }\n    // 0x407ef5\n    function_408130(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407f00",
            "funcStartAddr": "407f00",
            "funcEndAddr": "407f21",
            "decompiledFuncCode": "int64_t function_407f00(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x407f03\n    int64_t v2 = v1; // 0x407f03\n    if (v2 < 0) {\n        // 0x407f1b\n        function_408130(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407f19\n        return function_407ee0(v2);\n    }\n    // 0x407f1b\n    function_408130(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407f30",
            "funcStartAddr": "407f30",
            "funcEndAddr": "407f32",
            "decompiledFuncCode": "int64_t function_407f30(void) {\n    // 0x407f30\n    int64_t v1; // 0x407f30\n    return function_407ee0(v1);\n}\n"
        },
        {
            "funcName": "function_407f40",
            "funcStartAddr": "407f40",
            "funcEndAddr": "407f76",
            "decompiledFuncCode": "int64_t function_407f40(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x407f68\n        free(v1);\n        return (int32_t)&g62 ^ (int32_t)&g62;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x407f51\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x407f60\n        return (int64_t)mem;\n    }\n    // 0x407f71\n    function_408130(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407f80",
            "funcStartAddr": "407f80",
            "funcEndAddr": "407fa1",
            "decompiledFuncCode": "int64_t function_407f80(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x407f83\n    int64_t v2 = v1; // 0x407f83\n    if (v2 < 0) {\n        // 0x407f9b\n        function_408130(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407f99\n        return function_407f40(a1, v2);\n    }\n    // 0x407f9b\n    function_408130(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407fb0",
            "funcStartAddr": "407fb0",
            "funcEndAddr": "408036",
            "decompiledFuncCode": "int64_t function_407fb0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40800b\n            function_408130(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_407f40(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x407ff3\n    if (a2 == 0) {\n        // 0x408018\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x407ff8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40800b\n        function_408130(a1);\n        // UNREACHABLE\n    }\n    // 0x407fda\n    *(int64_t *)a2 = v2;\n    return function_407f40(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_408040",
            "funcStartAddr": "408040",
            "funcEndAddr": "408090",
            "decompiledFuncCode": "int64_t function_408040(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x408040\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40808a\n            function_408130(a1);\n            // UNREACHABLE\n        }\n        // 0x408062\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_407f40(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x408075\n        *(int64_t *)a2 = 128;\n        return function_407f40(0, 128);\n    }\n    // 0x408088\n    if (a2 < 0) {\n        // 0x40808a\n        function_408130(a1);\n        // UNREACHABLE\n    }\n    // 0x408062\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_407f40(a1, v1);\n}\n"
        },
        {
            "funcName": "function_408090",
            "funcStartAddr": "408090",
            "funcEndAddr": "4080a7",
            "decompiledFuncCode": "int64_t function_408090(int64_t a1, int64_t a2) {\n    // 0x408090\n    return (int64_t)memset((int64_t *)function_407ee0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4080b0",
            "funcStartAddr": "4080b0",
            "funcEndAddr": "4080de",
            "decompiledFuncCode": "int64_t function_4080b0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4080b7\n    if ((int64_t)v1 < 0) {\n        // 0x4080d9\n        function_408130(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4080d9\n        function_408130(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4080ca\n    if (mem != NULL) {\n        // 0x4080d4\n        return (int64_t)mem;\n    }\n    // 0x4080d9\n    function_408130(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4080e0",
            "funcStartAddr": "4080e0",
            "funcEndAddr": "408108",
            "decompiledFuncCode": "int64_t function_4080e0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_407ee0(a2); // 0x4080ef\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_408110",
            "funcStartAddr": "408110",
            "funcEndAddr": "408123",
            "decompiledFuncCode": "int64_t function_408110(int64_t str) {\n    // 0x408110\n    return function_4080e0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_408130",
            "funcStartAddr": "408130",
            "funcEndAddr": "408161",
            "decompiledFuncCode": "int64_t function_408130(int64_t a1) {\n    // 0x408130\n    error(g28, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408170",
            "funcStartAddr": "408170",
            "funcEndAddr": "40818f",
            "decompiledFuncCode": "int64_t function_408170(void) {\n    // 0x408170\n    int64_t v1; // 0x408170\n    int64_t v2 = function_40b2f0(v1, v1, v1, v1, v1); // 0x408171\n    if ((int32_t)v2 >= 0 || *__errno_location() != 12) {\n        // 0x40817c\n        return v2 & 0xffffffff;\n    }\n    // 0x40818a\n    function_408130(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408190",
            "funcStartAddr": "408190",
            "funcEndAddr": "4081b7",
            "decompiledFuncCode": "int64_t function_408190(void) {\n    // 0x408190\n    int64_t v1; // 0x408190\n    int64_t result = function_40b540(v1, v1, v1, v1, v1); // 0x408191\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x40819e\n        return result;\n    }\n    // 0x4081b2\n    function_408130(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4081c0",
            "funcStartAddr": "4081c0",
            "funcEndAddr": "4081e7",
            "decompiledFuncCode": "int64_t function_4081c0(void) {\n    // 0x4081c0\n    int64_t v1; // 0x4081c0\n    int64_t result = function_40b710(v1, v1, v1); // 0x4081c1\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x4081ce\n        return result;\n    }\n    // 0x4081e2\n    function_408130(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4081f0",
            "funcStartAddr": "4081f0",
            "funcEndAddr": "4082cf",
            "decompiledFuncCode": "int64_t function_4081f0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4081fc\n    uint32_t v2 = *v1; // 0x4081fc\n    int64_t v3 = a2 & 0xffffffff; // 0x408201\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x408204\n    uint64_t v5 = (int64_t)*v4; // 0x408204\n    int64_t v6; // 0x408272\n    if (v3 <= v5) {\n      lab_0x40826c_2:\n        // 0x40826c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4081f2\n    int64_t v8 = v2; // 0x4081f0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40826c\n        goto lab_0x40826c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x408228\n    int64_t v17; // 0x408236\n    int64_t * v18; // 0x408250\n    int64_t * v19; // 0x408253\n    int64_t v20; // 0x40825e\n    int64_t v21; // 0x408236\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x408233\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x408250\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x408267\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40826c\n            goto lab_0x40826c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40826c\n            goto lab_0x40826c_2;\n        }\n        // 0x408222\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4082ab\n    int64_t * v23 = (int64_t *)v22; // 0x4082b0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4082b3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4082b0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4082c7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40821d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40826c\n            goto lab_0x40826c_2;\n        }\n        // 0x408222\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x408233\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x408250\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x408267\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40826c\n                goto lab_0x40826c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40826c\n                goto lab_0x40826c_2;\n            }\n            // 0x408222\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x408290\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4082b0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4082c7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40826c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4082d0",
            "funcStartAddr": "4082d0",
            "funcEndAddr": "4088ec",
            "decompiledFuncCode": "int64_t function_4082d0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4082ef\n    int64_t v2 = *v1; // 0x4082ef\n    char * str2 = (char *)v2; // 0x4082fc\n    char c = *str2; // 0x4082fc\n    int64_t v3 = v2; // 0x408328\n    int64_t v4 = 0; // 0x4082d0\n    int32_t v5; // 0x4082d0\n    int64_t v6; // 0x4082d0\n    int64_t v7; // 0x4082d0\n    int64_t v8; // 0x4082d0\n    int64_t v9; // 0x4082d0\n    int64_t v10; // 0x4082d0\n    int64_t v11; // 0x4082d0\n    int64_t v12; // 0x4082d0\n    int64_t v13; // 0x4082d0\n    int64_t str3; // 0x4082d0\n    int64_t v14; // 0x4082d0\n    int64_t v15; // 0x4082d0\n    int64_t v16; // 0x4082d0\n    int64_t v17; // 0x4082d0\n    int32_t v18; // 0x4082d0\n    int32_t v19; // 0x4082d0\n    int32_t v20; // 0x4082d0\n    int32_t v21; // 0x4082d0\n    int32_t v22; // 0x4082d0\n    int32_t v23; // 0x4082d0\n    int32_t v24; // 0x4082d0\n    int32_t v25; // 0x4082d0\n    int32_t v26; // 0x4082d0\n    int32_t v27; // 0x4082d0\n    int32_t v28; // 0x4082d0\n    int32_t v29; // 0x4082d0\n    int64_t nmemb; // 0x4082d0\n    int64_t v30; // 0x4082d0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40832c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x408328\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x408338\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40833e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408308\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40836c\n                int64_t v34; // 0x4082d0\n                int64_t v35; // 0x4082d0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x408375\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4084f0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x408386\n                int64_t v37 = *(int64_t *)v36; // 0x40838a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x408360\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x408375\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4084f0;\n                        }\n                    }\n                    // 0x408386\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4083d6:\n                    // 0x4083d6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x408430;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4085a0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x408430;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408550\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4083fa;\n                                } else {\n                                    // 0x40855c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4083fa;\n                                    } else {\n                                        // 0x40856a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4083fa;\n                                        } else {\n                                            goto lab_0x408430;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4083fa;\n                            }\n                        }\n                    }\n                }\n              lab_0x408441:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408616\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4087c2\n                            flockfile(g41);\n                            int64_t v41 = *v1; // 0x4087e2\n                            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40882f\n                            int64_t v43 = (int64_t)g41;\n                            int64_t v44 = v43; // 0x408849\n                            int64_t v45; // 0x40884b\n                            if (*(char *)v42 != 0) {\n                                // 0x40884b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g41;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x408843\n                            while (v17 + nmemb != v42) {\n                                // 0x408845\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40884b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g41;\n                                }\n                                // 0x408838\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x408870\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g41);\n                            v40 = *v1;\n                        } else {\n                            // 0x408624\n                            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40877f\n                        free((int64_t *)v17);\n                    }\n                    // 0x408679\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408690\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40853e\n                    return 63;\n                }\n                // 0x408460\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4084e4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4084f0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408500\n                    uint32_t v50 = *v49; // 0x408500\n                    int64_t v51 = v50; // 0x408500\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40850a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408513\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40873f\n                                __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4086ea\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40853e\n                            return 63;\n                        }\n                        // 0x408588\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40889f\n                                    __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40879d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4087b0\n                                // 0x40853e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4086ae\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4086c2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40852b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40852e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408532\n                    int64_t result = v59; // 0x408538\n                    if (v58 != 0) {\n                        // 0x40853a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40853e\n                    return result;\n                }\n            } else {\n                // 0x40833e\n                v5 = v32;\n            }\n            // break -> 0x408465\n            break;\n        }\n    }\n    // 0x408465\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40847d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408487\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40853e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4085c9\n        __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4084b6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4084c6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x408430:\n    // 0x408430\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x408430\n    int64_t v63 = *(int64_t *)v62; // 0x408434\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x408441\n        goto lab_0x408441;\n    }\n    goto lab_0x4083d6;\n  lab_0x4083fa:\n    // 0x4083fa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4082d0\n    int32_t v65; // 0x4082d0\n    int32_t v66; // 0x4082d0\n    if (v27 != 0) {\n        goto lab_0x408430;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4085b0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x408430;\n            } else {\n                goto lab_0x408421;\n            }\n        } else {\n            // 0x408415\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40870c\n                int64_t v67 = (int64_t)mem; // 0x40870c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x408430;\n                } else {\n                    // 0x40871f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x408421;\n                }\n            } else {\n                goto lab_0x408421;\n            }\n        }\n    }\n  lab_0x408421:\n    // 0x408421\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x408430;\n}\n"
        },
        {
            "funcName": "function_4088f0",
            "funcStartAddr": "4088f0",
            "funcEndAddr": "408eb6",
            "decompiledFuncCode": "int64_t function_4088f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x408911\n    if (v3 < 1) {\n        // 0x408ace\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40890d\n    int32_t v5 = *(int32_t *)a7; // 0x408919\n    uint64_t v6 = a1 & 0xffffffff; // 0x40891b\n    int64_t v7 = v2; // 0x408920\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x408923\n    *v8 = 0;\n    int64_t v9; // 0x4088f0\n    int64_t v10; // 0x4088f0\n    int64_t v11; // 0x4088f0\n    int64_t v12; // 0x4088f0\n    int64_t str; // 0x4088f0\n    int64_t v13; // 0x4088f0\n    int64_t v14; // 0x4088f0\n    int64_t v15; // 0x4088f0\n    int64_t v16; // 0x4088f0\n    int64_t v17; // 0x4088f0\n    int32_t v18; // 0x4088f0\n    char v19; // 0x4088f0\n    if (v5 == 0) {\n        // 0x408b08\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40893a;\n    } else {\n        // 0x408933\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x408980\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x408983\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x408a48;\n            } else {\n                int64_t v22 = v7 + 1; // 0x408996\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4089a6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x408a5c;\n                } else {\n                    goto lab_0x4089b8;\n                }\n            }\n        } else {\n            goto lab_0x40893a;\n        }\n    }\n  lab_0x40893a:\n    // 0x40893a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x408940\n    *v24 = 0;\n    int64_t v25; // 0x4088f0\n    int64_t v26; // 0x4088f0\n    int64_t v27; // 0x4088f0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x408a30\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x408a3d;\n        }\n        case 43: {\n            // 0x408d40\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x408a3d;\n        }\n        default: {\n            // 0x40895c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x408cbf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x408dd8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x408a3d;\n                } else {\n                    // 0x408ccd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40896a;\n                }\n            } else {\n                goto lab_0x40896a;\n            }\n        }\n    }\n  lab_0x408a48:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x408a4f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4089b8;\n    } else {\n        goto lab_0x408a5c;\n    }\n  lab_0x40896a:\n    // 0x40896a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x408a3d;\n  lab_0x408a3d:\n    // 0x408a3d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x408a48;\n  lab_0x4089b8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4089b8\n    int64_t v31 = v30; // 0x4089b8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4089ba\n    if ((int64_t)*v32 > v31) {\n        // 0x4089bf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4089c2\n    if (*v33 > v30) {\n        // 0x4089c7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4089ca\n    int64_t v35 = v31; // 0x4089ce\n    int64_t v36 = v15; // 0x4089ce\n    int64_t v37; // 0x4088f0\n    int64_t v38; // 0x4088f0\n    int64_t v39; // 0x4088f0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x408b38\n        int64_t v41 = v40; // 0x408b38\n        v2 = v41;\n        int64_t v42; // 0x4088f0\n        if (*v33 == v40) {\n            // 0x408d20\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408d28\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x408b44\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x408b58\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x408b61\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x408b6a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x408b81\n            int64_t v47 = v45 & 0xffffffff; // 0x408b85\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x408b8e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x408b94\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x408b96;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x408b70\n            int64_t v49 = v48 & 0xffffffff; // 0x408b70\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x408b81\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x408b8e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x408b94\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x408b96;\n                    }\n                }\n                // 0x408b70\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408d38\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x408b96;\n    } else {\n        goto lab_0x4089d4;\n    }\n  lab_0x408a5c:\n    // 0x408a5c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x408a5f\n    int64_t v51 = v12; // 0x408a5f\n    int64_t v52 = v14; // 0x408a5f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4089b8;\n    } else {\n        goto lab_0x408a65;\n    }\n  lab_0x4089d4:;\n    int32_t v53 = v35; // 0x4089d4\n    int64_t v54; // 0x4088f0\n    int64_t v55; // 0x4088f0\n    int64_t v56; // 0x4088f0\n    int64_t v57; // 0x4088f0\n    int64_t v58; // 0x4088f0\n    int64_t v59; // 0x4088f0\n    char * v60; // 0x4088f0\n    int64_t v61; // 0x4088f0\n    int64_t v62; // 0x4089e9\n    int64_t v63; // 0x4088f0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x408b23\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x408b26;\n    } else {\n        // 0x4089dc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4088f0\n        int64_t v66 = v65 ? -1 : 1; // 0x4089f0\n        int64_t v67 = (int64_t)\"--\"; // 0x4088f0\n        int64_t v68 = v62; // 0x4088f0\n        int64_t v69 = 3; // 0x4089f0\n        unsigned char v70 = *(char *)v68; // 0x4089f0\n        char v71 = *(char *)v67; // 0x4089f0\n        char v72 = v71; // 0x4089f0\n        bool v73 = false; // 0x4089f0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x408ae0\n            if (*(char *)v62 == 45) {\n                // 0x408ba0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x408ba0\n                if (c == 0) {\n                    goto lab_0x408aea;\n                } else {\n                    // 0x408bad\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x408c30;\n                    } else {\n                        if (c == 45) {\n                            // 0x408e13\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x408c85;\n                        } else {\n                            // 0x408bbe\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x408c30;\n                            } else {\n                                // 0x408bc3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x408be4;\n                                } else {\n                                    // 0x408bca\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x408c30;\n                                    } else {\n                                        goto lab_0x408be4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x408aea;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x408a00\n            v2 = v75;\n            int32_t v76 = *v32; // 0x408a03\n            int64_t v77 = v35 + 1; // 0x408a06\n            int32_t v78 = v77; // 0x408a09\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x408d70\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x408a17\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x408a25\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x408b26;\n        }\n    }\n  lab_0x408a65:;\n    // 0x408a65\n    int64_t v79; // bp-104, 0x4088f0\n    int64_t v80 = &v79; // 0x4088fa\n    int64_t v81 = v50 + 1; // 0x408a65\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x408a6c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x408a71\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x408a75\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x408a79\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x408a81\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x408a86\n    int32_t c2 = v84; // 0x408a86\n    char * found_char_pos = strchr(str2, c2); // 0x408a86\n    int64_t v87 = *v82; // 0x408a8b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x408a95\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x408aa0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x408d90\n            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x408d5d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x408ace\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x408a86\n    char v91 = *(char *)(v90 + 1); // 0x408abb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x408a75\n        if (v91 != 58) {\n            // 0x408ace\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408ce4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408de8\n                *v8 = 0;\n            } else {\n                // 0x408dcc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x408d0e\n            *v83 = 0;\n            // 0x408ace\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x408cee\n        if (v93 != 0) {\n            // 0x408d80\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x408d0e\n            *v83 = 0;\n            // 0x408ace\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x408d01\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x408d0e\n            *v83 = 0;\n            // 0x408ace\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x408e4a\n            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x408dfa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x408e01\n        // 0x408d0e\n        *v83 = 0;\n        // 0x408ace\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x408c59\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x408c5b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x408e80\n                __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408e31\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408e38\n            // 0x408ace\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x408c66\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x408c6a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x408c85;\n  lab_0x408b96:\n    // 0x408b96\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4089d4;\n  lab_0x408c85:;\n    int64_t v99 = function_4082d0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x408ca3\n    // 0x408ace\n    return v99 & 0xffffffff;\n  lab_0x408b26:;\n    int32_t v100 = v55; // 0x408b26\n    if (v100 != (int32_t)v59) {\n        // 0x408b2a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x408ace\n    return 0xffffffff;\n  lab_0x408aea:\n    // 0x408aea\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x408af1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x408ace\n    return v99 & 0xffffffff;\n  lab_0x408c30:\n    // 0x408c30\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x408a65;\n  lab_0x408be4:\n    // 0x408be4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4082d0(v6, a2, str, a4, a5, v57, v1, v11, &g17); // 0x408c0a\n    if ((int32_t)v101 != -1) {\n        // 0x408ace\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x408c1f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x408c30;\n}\n"
        },
        {
            "funcName": "function_408ec0",
            "funcStartAddr": "408ec0",
            "funcEndAddr": "408f16",
            "decompiledFuncCode": "int64_t function_408ec0(int64_t a1) {\n    // 0x408ec0\n    *(int32_t *)&g54 = g36;\n    *(int32_t *)&g55 = g35;\n    int64_t v1; // 0x408ec0\n    int64_t result = function_4088f0(v1, v1, v1, v1, v1, v1, &g54, a1 & 0xffffffff); // 0x408ee6\n    g36 = *(int32_t *)&g54;\n    g60 = g57;\n    *(int32_t *)&g34 = g56;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408f20",
            "funcStartAddr": "408f20",
            "funcEndAddr": "408f38",
            "decompiledFuncCode": "int64_t function_408f20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408f20\n    return function_408ec0(1);\n}\n"
        },
        {
            "funcName": "function_408f40",
            "funcStartAddr": "408f40",
            "funcEndAddr": "408f53",
            "decompiledFuncCode": "int64_t function_408f40(int64_t a1, int64_t a2, int64_t * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x408f40\n    return function_408ec0(0);\n}\n"
        },
        {
            "funcName": "function_408f60",
            "funcStartAddr": "408f60",
            "funcEndAddr": "408f75",
            "decompiledFuncCode": "int64_t function_408f60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408f60\n    return function_4088f0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408f80",
            "funcStartAddr": "408f80",
            "funcEndAddr": "408f96",
            "decompiledFuncCode": "int64_t function_408f80(void) {\n    // 0x408f80\n    return function_408ec0(0);\n}\n"
        },
        {
            "funcName": "function_408fa0",
            "funcStartAddr": "408fa0",
            "funcEndAddr": "408fb8",
            "decompiledFuncCode": "int64_t function_408fa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408fa0\n    return function_4088f0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408fc0",
            "funcStartAddr": "408fc0",
            "funcEndAddr": "40903a",
            "decompiledFuncCode": "int64_t function_408fc0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x408fcb\n    int64_t v2 = (int64_t)&g18; // 0x408fcb\n    int64_t * pwc; // 0x408fc0\n    int64_t v3; // 0x408fc0\n    int64_t n; // 0x408fc0\n    if (a2 == 0) {\n        goto lab_0x409012;\n    } else {\n        // 0x408fcd\n        if (a3 == 0) {\n            // 0x408ff8\n            return -2;\n        }\n        // 0x408fd9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x409012;\n        } else {\n            goto lab_0x408fe4;\n        }\n    }\n  lab_0x409012:\n    // 0x409012\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x408fc0\n    pwc = &v4;\n    goto lab_0x408fe4;\n  lab_0x408fe4:;\n    char * wstr = (char *)v3; // 0x408fea\n    int64_t ps; // 0x408fc0\n    int32_t v5 = mbrtowc((int32_t *)pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x408fea\n    int64_t result = v5; // 0x408fea\n    if (v5 < 0xfffffffe) {\n        // 0x408ff8\n        return result;\n    }\n    int64_t result2 = result; // 0x409029\n    if ((char)function_409210(0, v3) == 0) {\n        // 0x40902b\n        *(int32_t *)pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x408ff8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409040",
            "funcStartAddr": "409040",
            "funcEndAddr": "409144",
            "decompiledFuncCode": "int64_t function_409040(int64_t result, int32_t a2, int64_t a3) {\n    // 0x409040\n    if (a3 == 0) {\n        // 0x409079\n        return 0;\n    }\n    int64_t v1 = result; // 0x40904c\n    int64_t v2 = a3; // 0x40904c\n    int64_t result2; // 0x409040\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40904e\n        int64_t v4 = result; // 0x409051\n        if ((char)result == v3) {\n            // 0x409079\n            return result;\n        }\n        int64_t v5 = a3; // 0x409051\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x409060\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x409080;\n            }\n            // 0x409066\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x409079\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x409079\n        return result2;\n    }\n  lab_0x409080:;\n    int64_t result3 = v1; // 0x4090ad\n    int64_t v6 = v2; // 0x4090ad\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x40908f\n        int64_t v9 = 0x10000 * v8 | v8; // 0x40909c\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x4090a6\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x4090c6\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x4090f5\n            int64_t v13 = v1 + 8; // 0x4090f9\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x4090e3\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x40910c;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x409103\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x409079\n                return 0;\n            }\n        }\n    }\n  lab_0x40910c:;\n    char v15 = a2; // 0x40910c\n    if (*(char *)result3 == v15) {\n        // 0x409079\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x409120\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x409079\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x409079\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409150",
            "funcStartAddr": "409150",
            "funcEndAddr": "4091a9",
            "decompiledFuncCode": "int64_t function_409150(int64_t a1, char * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (v1 == a1) {\n        // 0x4091a8\n        return 0;\n    }\n    int64_t v2 = 0; // 0x409155\n    unsigned char v3 = *(char *)(v2 + a1); // 0x409168\n    int64_t v4 = v3; // 0x409168\n    uint64_t v5 = v3 == 90 | (int32_t)v3 < 90 ? v4 + 32 : v4;\n    unsigned char v6 = *(char *)(v2 + v1); // 0x409180\n    bool v7 = v6 == 90 | (int32_t)v6 < 90; // 0x409190\n    char v8 = v5; // 0x409199\n    while (v8 != 0) {\n        // 0x409160\n        v2++;\n        if ((v7 ? v6 + 32 : v6) != v8) {\n            // break -> 0x40919d\n            break;\n        }\n        v3 = *(char *)(v2 + a1);\n        v4 = v3;\n        v5 = v3 == 90 | (int32_t)v3 < 90 ? v4 + 32 : v4;\n        v6 = *(char *)(v2 + v1);\n        v7 = v6 == 90 | (int32_t)v6 < 90;\n        v8 = v5;\n    }\n    int64_t v9 = v6; // 0x409180\n    // 0x4091a8\n    return v5 % 256 - (v7 ? v9 + 32 : v9) % 256 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4091b0",
            "funcStartAddr": "4091b0",
            "funcEndAddr": "40920d",
            "decompiledFuncCode": "int64_t function_4091b0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4091b7\n    int64_t v2; // 0x4091b0\n    int64_t result = function_40b800(a1, v2); // 0x4091c8\n    if ((v2 & 32) != 0) {\n        // 0x4091f0\n        if ((int32_t)result == 0) {\n            // 0x4091f4\n            *__errno_location() = 0;\n        }\n        // 0x4091ea\n        return 0xffffffff;\n    }\n    // 0x4091d1\n    if ((int32_t)result == 0) {\n        // 0x4091ea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4091d8\n    if (v1 == 0) {\n        // 0x4091da\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4091ea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409210",
            "funcStartAddr": "409210",
            "funcEndAddr": "40926e",
            "decompiledFuncCode": "int64_t function_409210(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x409216\n    if (locale == NULL) {\n        // 0x409243\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x409216\n    bool v2; // 0x409210\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g19; // 0x409210\n    int64_t v5 = v1; // 0x409210\n    int64_t v6 = 2; // 0x409235\n    unsigned char v7 = *(char *)v5; // 0x409235\n    char v8 = *(char *)v4; // 0x409235\n    char v9 = v8; // 0x409235\n    bool v10 = false; // 0x409235\n    while (v7 == v8) {\n        // 0x409228\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409241\n    int64_t v13 = v1; // 0x409241\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409243\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409241\n    unsigned char v15 = *(char *)v13; // 0x40925d\n    char v16 = *(char *)v12; // 0x40925d\n    char v17 = v16; // 0x40925d\n    bool v18 = false; // 0x40925d\n    while (v15 == v16) {\n        // 0x409250\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_409270",
            "funcStartAddr": "409270",
            "funcEndAddr": "4097d2",
            "decompiledFuncCode": "int64_t function_409270(void) {\n    char * v1 = nl_langinfo(14); // 0x409286\n    char * v2 = g58; // 0x40928b\n    char * v3; // 0x409270\n    int64_t v4; // 0x409270\n    int64_t v5; // 0x409270\n    int64_t v6; // 0x409270\n    int64_t v7; // 0x409270\n    int32_t size; // 0x409270\n    int32_t size2; // 0x409270\n    int32_t len; // 0x409342\n    int64_t v8; // 0x409342\n    char * env_val; // 0x40932d\n    if (v2 == NULL) {\n        // 0x409328\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x409395;\n        } else {\n            // 0x40933a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x409395;\n            } else {\n                // 0x40933f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40932d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4097c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x409395;\n                    } else {\n                        // 0x409739\n                        size2 = len + 14;\n                        goto lab_0x40935b;\n                    }\n                } else {\n                    goto lab_0x40935b;\n                }\n            }\n        }\n    } else {\n        // 0x409270\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4092aa;\n    }\n  lab_0x4095dc:;\n    // 0x4095dc\n    struct _IO_FILE * stream; // 0x40941b\n    int32_t v10 = __uflow(stream); // 0x4095df\n    int64_t v11; // 0x409270\n    int64_t v12 = v11; // 0x4095e9\n    int64_t v13; // 0x409270\n    int64_t v14 = v13; // 0x4095e9\n    int32_t v15 = v10; // 0x4095e9\n    int64_t v16; // 0x409270\n    int64_t v17 = v16; // 0x4095e9\n    int64_t v18 = v11; // 0x4095e9\n    int64_t v19 = v13; // 0x4095e9\n    int64_t v20 = v16; // 0x4095e9\n    if (v10 == -1) {\n        // break -> 0x4095ef\n        goto lab_0x4095ef;\n    }\n    goto lab_0x409469;\n  lab_0x40945e:;\n    // 0x40945e\n    int64_t v90; // 0x409270\n    int64_t * v32; // 0x409450\n    *v32 = v90 + 1;\n    int64_t v89; // 0x409270\n    v12 = v89;\n    int64_t v91; // 0x409270\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x409270\n    v17 = v92;\n    goto lab_0x409469;\n  lab_0x409469:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x409270\n    int32_t v25; // bp-120, 0x409270\n    int32_t v26; // bp-184, 0x409270\n    int64_t v27; // 0x40941b\n    int64_t v28; // 0x409438\n    int64_t v29; // 0x40943d\n    int64_t * v30; // 0x409454\n    switch (c) {\n        case 32: {\n            goto lab_0x409450;\n        }\n        case 10: {\n            goto lab_0x409450;\n        }\n        case 9: {\n            goto lab_0x409450;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409641\n            int32_t v33; // 0x409270\n            char v34; // 0x409270\n            int32_t v35; // 0x40964e\n            if (v31 < *v30) {\n                // 0x409620\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40964b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409641\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409620\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40964b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409630\n                v36 = v33;\n            }\n            // 0x40971f\n            if (v36 == -1) {\n                // break -> 0x4095ef\n                break;\n            }\n            goto lab_0x409450;\n        }\n        default: {\n            // 0x40947f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4095ef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4094a8\n            int64_t v39 = v37 + 4; // 0x4094aa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4094b6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4094b8\n            while (v41 == 0) {\n                // 0x4094a8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4094d6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4094e2\n            int64_t v45 = v43 + 4; // 0x4094e4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4094f0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4094f2\n            while (v47 == 0) {\n                // 0x4094e2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4094df\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x409508\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x409518\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40951c\n            int64_t v52 = v51 + v48; // 0x409525\n            int64_t * mem; // 0x409270\n            int64_t v53; // 0x409270\n            int64_t v54; // 0x409270\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40965b\n                int64_t v56 = v55 + 3; // 0x409667\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409541\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409550\n            if (mem == NULL) {\n                // 0x40977c\n                free((int64_t *)v21);\n                function_40b800(v27, v53);\n                v24 = (int64_t)&g18;\n                goto lab_0x4093f4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409568\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x409572\n            uint32_t v62 = (int32_t)v59; // 0x409575\n            int64_t v63; // 0x409270\n            if (v62 >= 8) {\n                // 0x409684\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40969e\n                int64_t v66 = v61 - v65; // 0x4096a2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4096ad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4096be\n                    int64_t v70 = v69 & 0xffffffff; // 0x4096be\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4096bb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40974f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x409587\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40958b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40959b\n            int64_t v74 = v60 - 1; // 0x40959f\n            uint32_t v75 = (int32_t)v73; // 0x4095a4\n            int64_t v76; // 0x409270\n            if (v75 >= 8) {\n                // 0x4096d2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4096dc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4096ec\n                int64_t v80 = v74 - v79; // 0x4096f0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4096fb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40970b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409709\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409766\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40976e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4095b6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4095ba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4097b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4095ce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40945e;\n            } else {\n                goto lab_0x4095dc;\n            }\n        }\n    }\n  lab_0x409450:;\n    int64_t v93 = v23; // 0x409270\n    int64_t v94 = v22; // 0x409270\n    int64_t v95 = v21; // 0x409270\n    goto lab_0x409450_2;\n  lab_0x409395:;\n    int64_t * mem3 = malloc(size); // 0x409395\n    int64_t v97 = (int64_t)&g18; // 0x4093a0\n    int64_t v98; // 0x409270\n    int64_t path; // 0x409270\n    if (mem3 == NULL) {\n        goto lab_0x409372;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x409395\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4093b6;\n    }\n  lab_0x4092aa:;\n    int64_t str = v1 == NULL ? (int64_t)&g18 : (int64_t)v1; // 0x40929d\n    char v100 = *v3; // 0x4092aa\n    int64_t v101; // 0x409270\n    if (v100 == 0) {\n        // 0x409304\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x409270\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x409270\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4092f0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4092f7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4092c0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4092cd\n        char v107 = *(char *)v106; // 0x4092d2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x409304\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4092db\n    v104 = v103 + 1;\n  lab_0x4092f7:\n    // 0x409304\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x409372:;\n    char * v108 = (char *)v97;\n    g58 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4092aa;\n  lab_0x4093b6:;\n    int64_t v109 = v98 + path; // 0x4093b6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4093e2\n    v24 = (int64_t)&g18;\n    if (fd >= 0) {\n        // 0x409411\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409742\n            close(fd);\n            v24 = (int64_t)&g18;\n        } else {\n            // 0x409435\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409450_2:;\n                uint64_t v96 = *v32; // 0x409450\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4095dc;\n                } else {\n                    goto lab_0x40945e;\n                }\n            }\n          lab_0x4095ef:\n            // 0x4095ef\n            function_40b800(v27, v19);\n            v24 = (int64_t)&g18;\n            if (v18 != 0) {\n                // 0x40960e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4093f4;\n  lab_0x40935b:;\n    int64_t * mem4 = malloc(size2); // 0x40935b\n    v97 = (int64_t)&g18;\n    if (mem4 != NULL) {\n        // 0x409401\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4093b6;\n    } else {\n        goto lab_0x409372;\n    }\n  lab_0x4093f4:\n    // 0x4093f4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x409372;\n}\n"
        },
        {
            "funcName": "function_4097e0",
            "funcStartAddr": "4097e0",
            "funcEndAddr": "409801",
            "decompiledFuncCode": "int64_t function_4097e0(int64_t a1) {\n    int32_t wc = a1; // 0x4097e3\n    int32_t result = wcwidth(wc); // 0x4097e3\n    if (result < 0) {\n        // 0x4097f0\n        return iswcntrl(wc) == 0;\n    }\n    // 0x4097ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_409810",
            "funcStartAddr": "409810",
            "funcEndAddr": "409866",
            "decompiledFuncCode": "int64_t function_409810(int64_t a1, int64_t a2) {\n    // 0x409810\n    *(int64_t *)a1 = a2;\n    char v1 = *(char *)(a2 + 16); // 0x40982f\n    *(int64_t *)(a1 + 8) = *(int64_t *)(a2 + 8);\n    *(char *)(a1 + 16) = v1;\n    int64_t result = 0; // 0x40983c\n    if (v1 != 0) {\n        uint32_t v2 = *(int32_t *)(a2 + 20); // 0x40983e\n        *(int32_t *)(a1 + 20) = v2;\n        result = v2;\n    }\n    // 0x409844\n    return result;\n}\n"
        },
        {
            "funcName": "function_409870",
            "funcStartAddr": "409870",
            "funcEndAddr": "409887",
            "decompiledFuncCode": "int64_t function_409870(uint64_t a1) {\n    uint32_t v1 = *(int32_t *)((a1 / 8 & 28) + (int64_t)&g20); // 0x40987a\n    return (v1 >> (int32_t)a1 % 32) % 2;\n}\n"
        },
        {
            "funcName": "function_409890",
            "funcStartAddr": "409890",
            "funcEndAddr": "409a13",
            "decompiledFuncCode": "int64_t function_409890(int64_t a1, int64_t a2, uint64_t a3, int64_t * a4, int64_t a5) {\n    int64_t v1 = 8 * a3; // 0x4098a9\n    int64_t v2 = v1; // 0x4098a9\n    if (v1 < 0) {\n        // 0x4099b0\n        return 0;\n    }\n    if (a3 >= 0x2000000000000000) {\n        // 0x4099b0\n        return 0;\n    }\n    int64_t v3; // 0x409890\n    if (v1 < 4016) {\n        // 0x4098cc\n        int64_t v4; // bp-56, 0x409890\n        int64_t v5 = 31 - (v1 + 39 & -16) + (int64_t)&v4 & -16; // 0x4098e0\n        v2 = v5;\n        v3 = v5;\n        if (v5 == 0) {\n            // 0x4099b0\n            return 0;\n        }\n    } else {\n        int64_t v6 = function_40b920(v1, a2, a3, (int64_t)a4); // 0x409993\n        v2 = v6;\n        v3 = v6;\n        if (v6 == 0) {\n            // 0x4099b0\n            return 0;\n        }\n    }\n    // 0x4098ed\n    *(int64_t *)(v3 + 8) = 1;\n    if (a3 >= 3) {\n        int64_t v7 = 0;\n        int64_t v8 = 2;\n        char v9 = *(char *)(a2 - 1 + v8); // 0x409908\n        int64_t v10 = v7; // 0x409912\n        int64_t v11 = v7; // 0x409912\n        int64_t v12; // 0x409890\n        int64_t v13; // 0x409890\n        int64_t v14; // 0x4099f8\n        int64_t v15; // 0x409920\n        if (v9 != *(char *)(v7 + a2)) {\n            v12 = v10;\n            while (v12 != 0) {\n                // 0x409920\n                v15 = v12 - *(int64_t *)(8 * v12 + v2);\n                if (*(char *)(v15 + a2) == v9) {\n                    goto lab_0x4099f8;\n                }\n                v12 = v15;\n            }\n            // 0x409933\n            *(int64_t *)(v2 + 8 * v8) = v8;\n            v13 = 0;\n        } else {\n            // 0x4099f8\n            v14 = v11 + 1;\n            *(int64_t *)(v2 + 8 * v8) = v8 - v14;\n            v13 = v14;\n        }\n        // 0x40993a\n        v7 = v13;\n        int64_t v16 = v8 + 1; // 0x40993a\n        while (v16 != a3) {\n            // 0x409908\n            v8 = v16;\n            v9 = *(char *)(a2 - 1 + v8);\n            v10 = v7;\n            v11 = v7;\n            if (v9 != *(char *)(v7 + a2)) {\n                v12 = v10;\n                while (v12 != 0) {\n                    // 0x409920\n                    v15 = v12 - *(int64_t *)(8 * v12 + v2);\n                    if (*(char *)(v15 + a2) == v9) {\n                        goto lab_0x4099f8;\n                    }\n                    v12 = v15;\n                }\n                // 0x409933\n                *(int64_t *)(v2 + 8 * v8) = v8;\n                v13 = 0;\n            } else {\n                // 0x4099f8\n                v14 = v11 + 1;\n                *(int64_t *)(v2 + 8 * v8) = v8 - v14;\n                v13 = v14;\n            }\n            // 0x40993a\n            v7 = v13;\n            v16 = v8 + 1;\n        }\n    }\n    // 0x409943\n    *a4 = 0;\n    char v17 = *(char *)&v2;\n    char v18 = v17; // 0x40995b\n    int64_t v19 = a1; // 0x40995b\n    int64_t v20 = a1; // 0x40995b\n    int64_t v21 = 0; // 0x40995b\n    if (v17 == 0) {\n        // 0x409977\n        function_40b990(v2);\n        return 1;\n    }\n    int64_t v22; // 0x409890\n    while (true) {\n        char v23 = v18;\n        int64_t v24 = v20; // 0x409961\n        int64_t v25 = v21; // 0x409961\n        int64_t v26 = v21; // 0x409961\n        int64_t v27 = v20; // 0x409961\n        if (*(char *)(v21 + a2) == v23) {\n          lab_0x4099c0:\n            // 0x4099c0\n            v22 = v27;\n            int64_t v28 = v26 + 1; // 0x4099c0\n            v21 = v28;\n            v20 = v22;\n            if (v28 == a3) {\n                // break -> 0x409a0b\n                break;\n            }\n        } else {\n            int64_t v29 = v25;\n            int64_t v30 = v24;\n            while (v29 != 0) {\n                int64_t v31 = *(int64_t *)(8 * v29 + v2); // 0x409968\n                int64_t v32 = v31 + v30; // 0x40996c\n                int64_t v33 = v29 - v31; // 0x40996f\n                v24 = v32;\n                v25 = v33;\n                v26 = v33;\n                v27 = v32;\n                if (*(char *)(v33 + a2) == v23) {\n                    goto lab_0x4099c0;\n                }\n                v29 = v25;\n                v30 = v24;\n            }\n            // 0x4099e0\n            v21 = 0;\n            v20 = v30 + 1;\n        }\n        // 0x409958\n        v19++;\n        v18 = *(char *)v19;\n        if (v18 == 0) {\n            // 0x409977\n            function_40b990(v2);\n            return 1;\n        }\n    }\n    // 0x409a0b\n    *a4 = v22;\n    // 0x409977\n    function_40b990(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_409a20",
            "funcStartAddr": "409a20",
            "funcEndAddr": "409a40",
            "decompiledFuncCode": "int64_t function_409a20(void) {\n    // 0x409a20\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g62;\n}\n"
        },
        {
            "funcName": "function_409a40",
            "funcStartAddr": "409a40",
            "funcEndAddr": "40a420",
            "decompiledFuncCode": "int64_t function_409a40(int64_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3; // bp-280, 0x409a61\n    uint64_t v2 = function_40ba20(a2); // 0x409a68\n    uint128_t v3 = 56 * (int128_t)v2; // 0x409a7f\n    if ((int64_t)v3 < 0 || v3 % 0x3f0000000000000001 != 0) {\n        // 0x409e51\n        return 0;\n    }\n    int64_t v4 = 0x100000000 * v2 / 0x100000000; // 0x409a9a\n    uint64_t v5 = 56 * v4; // 0x409aac\n    int64_t v6; // 0x409a40\n    if (v5 < 4015) {\n        // 0x409abd\n        v6 = (int64_t)&v1 + 31 - (v5 + 39 & -16) & -16;\n    } else {\n        // 0x409f2e\n        v6 = function_40b920(v5, a2, (int64_t)(v3 % 0x3f0000000000000001 != 0), v2);\n    }\n    int64_t len3 = 0; // 0x409ad8\n    if (v6 == 0) {\n      lab_0x409e51:\n        // 0x409e51\n        return len3;\n    }\n    int64_t ps = 0; // bp-244, 0x409b01\n    int64_t v7 = v6 + 48 * v4; // 0x409b10\n    int64_t v8 = a2; // 0x409b13\n    char v9 = 0; // 0x409b13\n    int64_t v10 = v6; // 0x409b13\n    int64_t v11; // 0x409a40\n    int32_t v12; // bp-212, 0x409a40\n    char v13; // 0x409a40\n    int32_t len; // 0x409a40\n    int64_t str; // 0x409a40\n    char v14; // 0x409a40\n    while (true) {\n      lab_0x409bc5:\n        // 0x409bc5\n        v11 = v10;\n        str = v8;\n        v14 = v9;\n        if (v9 == 0) {\n            unsigned char v15 = *(char *)str; // 0x409b27\n            int32_t v16 = *(int32_t *)((int64_t)(4 * v15 / 32) + (int64_t)&g20); // 0x409b32\n            if ((1 << (int32_t)(v15 % 32) & v16) == 0) {\n                int32_t v17 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x409f4b\n                v14 = 1;\n                if (v17 == 0) {\n                    // break -> 0x40a3df\n                    break;\n                }\n                goto lab_0x409bd2;\n            } else {\n                // 0x409b43\n                v12 = v15;\n                v9 = 0;\n                len = 1;\n                v13 = 1;\n                if (v15 == 0) {\n                    goto lab_0x409c87_2;\n                }\n                goto lab_0x409b7a;\n            }\n        } else {\n            goto lab_0x409bd2;\n        }\n    }\n  lab_0x40a3df:\n    // 0x40a3df\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x40a3f8\n    function_409a20();\n    // 0x40a3fd\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g62;\n  lab_0x409c87_2:\n    // 0x409c87\n    *(int64_t *)(v7 + 8) = 1;\n    struct _TYPEDEF___mbstate_t * v18 = (struct _TYPEDEF___mbstate_t *)2; // 0x409caa\n    int64_t v19 = v6; // 0x409caa\n    int64_t v20 = 0; // 0x409caa\n    if ((int32_t)v2 < 3) {\n        goto lab_0x409d3b;\n    } else {\n        goto lab_0x409cb0;\n    }\n  lab_0x409bd2:;\n    char v21 = v14;\n    int64_t v22 = function_407340(str, (int64_t)__ctype_get_mb_cur_max()); // 0x409be4\n    int64_t v23 = function_408fc0((int64_t *)&v12, str, v22); // 0x409bfe\n    v9 = v21;\n    len = 1;\n    v13 = 0;\n    switch (v23) {\n        case -1: {\n            goto lab_0x409b7a;\n        }\n        case -2: {\n            // 0x409fb0\n            v9 = v21;\n            len = strlen((char *)str);\n            v13 = 0;\n            goto lab_0x409b7a;\n        }\n        default: {\n            int32_t v24 = v23; // 0x409c21\n            if (v23 == 0) {\n                // 0x409c23\n                if (*(char *)str != 0) {\n                    // 0x40a3c6\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40a3df;\n                }\n                // 0x409c3e\n                v24 = 1;\n                if (v12 != 0) {\n                    // 0x40a3f8\n                    function_409a20();\n                    // 0x40a3fd\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return &g62;\n                }\n            }\n            int32_t v25 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x409c60\n            v9 = v25 == 0 ? v21 : 0;\n            len = v24;\n            v13 = 1;\n            if (v12 == 0) {\n                goto lab_0x409c87_2;\n            }\n            goto lab_0x409b7a;\n        }\n    }\n  lab_0x409b7a:;\n    int32_t v26 = len;\n    int64_t v27; // bp-208, 0x409a40\n    if (str == (int64_t)&v27) {\n        int64_t * dest_mem = memcpy((int64_t *)(v11 + 24), &v27, v26); // 0x409f6f\n        *(int64_t *)v11 = (int64_t)dest_mem;\n    } else {\n        // 0x409b9c\n        *(int64_t *)v11 = str;\n    }\n    int64_t v28 = v26;\n    *(int64_t *)(v11 + 8) = v28;\n    *(char *)(v11 + 16) = v13;\n    if (v13 != 0) {\n        // 0x409baa\n        *(int32_t *)(v11 + 20) = v12;\n    }\n    // 0x409bb3\n    v8 = str + v28;\n    v10 = v11 + 48;\n    goto lab_0x409bc5;\n  lab_0x409d3b:\n    // 0x409d3b\n    *(int64_t *)v1 = 0;\n    int64_t ps3 = 0; // bp-180, 0x409d7f\n    int64_t ps2 = 0; // bp-116, 0x409d8a\n    char v29 = 0; // 0x409daa\n    char v30 = 0; // 0x409daa\n    char v31 = 0; // 0x409daa\n    int64_t v32 = a1; // 0x409daa\n    int64_t v33 = a1; // 0x409daa\n    int64_t v34 = 0; // 0x409daa\n    goto lab_0x409db0;\n  lab_0x409cb0:;\n    struct _TYPEDEF___mbstate_t * v137 = v18;\n    int64_t v142 = v19 + 48;\n    int32_t * v67 = (int32_t *)(v19 + 68);\n    int64_t * v77 = (int64_t *)(v19 + 56);\n    int64_t * str2 = (int64_t *)v142;\n    int64_t v65 = v20; // 0x409cb5\n    goto lab_0x409cdd;\n  lab_0x409db0:;\n    int64_t v35 = v34;\n    int64_t v36 = v33;\n    int64_t v37 = v32;\n    char v38 = v31;\n    char v39 = v30;\n    char v40 = v29;\n    char v41 = v40; // 0x409db2\n    char v42 = v39; // 0x409db2\n    int64_t v43 = v37; // 0x409db2\n    int64_t v44 = v36; // 0x409db2\n    int64_t v45 = v35; // 0x409db2\n    int64_t v46; // 0x409a40\n    int64_t v47; // 0x409a40\n    int64_t v48; // 0x409a40\n    int64_t v49; // 0x409a40\n    char v50; // 0x409a40\n    char v51; // 0x409a40\n    char v52; // 0x409a40\n    char v53; // 0x409a40\n    int64_t v54; // 0x409a40\n    int64_t v55; // 0x409a40\n    char v56; // 0x409a40\n    char v57; // 0x409a40\n    char v58; // 0x409a40\n    char v59; // 0x409a40\n    char v60; // 0x409a40\n    int64_t v61; // 0x409a40\n    int64_t v62; // 0x409a40\n    int64_t v63; // 0x409a40\n    if (v38 == 0) {\n        goto lab_0x409e72;\n    } else {\n        // 0x409db8\n        v52 = v40;\n        v56 = v39;\n        v50 = v38;\n        v54 = v37;\n        v48 = v36;\n        v59 = v58;\n        v62 = v61;\n        v46 = v35;\n        v53 = v40;\n        v57 = v39;\n        v51 = v38;\n        v55 = v37;\n        v49 = v36;\n        v60 = v58;\n        v63 = v61;\n        v47 = v35;\n        if (v58 != 0) {\n            goto lab_0x409eb2;\n        } else {\n            goto lab_0x409dc2;\n        }\n    }\n  lab_0x409cdd:;\n    int64_t v64 = v65;\n    int64_t v66 = 48 * v64 + v6; // 0x409ce5\n    if (*(char *)(v19 + 64) != 0) {\n        // 0x409cc0\n        if (*(char *)(v66 + 16) == 0) {\n            goto lab_0x409cec;\n        } else {\n            // 0x409cc6\n            if (*v67 == *(int32_t *)(v66 + 20)) {\n                goto lab_0x409d05;\n            } else {\n                goto lab_0x409ccf;\n            }\n        }\n    } else {\n        goto lab_0x409cec;\n    }\n  lab_0x409e72:;\n    int64_t v68 = v45;\n    int64_t str4 = v44;\n    int64_t v69 = v43;\n    char v70 = v42;\n    char v71 = v41;\n    char v72 = v71; // 0x409e76\n    int32_t v73; // bp-84, 0x409a40\n    if (v71 != 0) {\n        goto lab_0x409ff8;\n    } else {\n        unsigned char v74 = *(char *)str4; // 0x409e80\n        int32_t v75 = *(int32_t *)((int64_t)(4 * v74 / 32) + (int64_t)&g20); // 0x409e8b\n        if ((1 << (int32_t)(v74 % 32) & v75) == 0) {\n            int32_t v76 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x409fe7\n            v72 = 1;\n            if (v76 == 0) {\n                goto lab_0x40a3df;\n            } else {\n                goto lab_0x409ff8;\n            }\n        } else {\n            // 0x409e9c\n            v73 = v74;\n            v53 = v71;\n            v57 = v70;\n            v51 = 1;\n            v55 = v69;\n            v49 = str4;\n            v60 = 1;\n            v63 = 1;\n            v47 = v68;\n            goto lab_0x409eb2;\n        }\n    }\n  lab_0x409cec:;\n    int64_t n = *v77; // 0x409cec\n    if (n != *(int64_t *)(v66 + 8)) {\n        goto lab_0x409ccf;\n    } else {\n        int64_t str3 = *(int64_t *)v66; // 0x409cf6\n        if (memcmp((int64_t *)*str2, (int64_t *)str3, (int32_t)n) != 0) {\n            goto lab_0x409ccf;\n        } else {\n            goto lab_0x409d05;\n        }\n    }\n  lab_0x409ff8:;\n    char v78 = v72;\n    int64_t v79 = function_407340(str4, (int64_t)__ctype_get_mb_cur_max()); // 0x40a007\n    int64_t v80 = function_408fc0((int64_t *)&v73, str4, v79); // 0x40a01e\n    v52 = v78;\n    v56 = v70;\n    v50 = 1;\n    v54 = v69;\n    v48 = str4;\n    v59 = 0;\n    v62 = 1;\n    v46 = v68;\n    int64_t v81; // 0x409a40\n    switch (v80) {\n        case -1: {\n            goto lab_0x409dc2;\n        }\n        case -2: {\n            int32_t len2 = strlen((char *)str4); // 0x40a35c\n            v52 = v78;\n            v56 = v70;\n            v50 = 1;\n            v54 = v69;\n            v48 = str4;\n            v59 = 0;\n            v62 = len2;\n            v46 = v68;\n            goto lab_0x409dc2;\n        }\n        default: {\n            // 0x40a03b\n            v81 = v80;\n            if (v80 != 0) {\n                goto lab_0x40a060;\n            } else {\n                // 0x40a040\n                if (*(char *)str4 != 0) {\n                    // 0x40a3c6\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40a3df;\n                } else {\n                    // 0x40a055\n                    v81 = 1;\n                    if (v73 != 0) {\n                        goto lab_0x40a3f8;\n                    } else {\n                        goto lab_0x40a060;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x409eb2:;\n    int32_t v82 = v73; // 0x409eb2\n    if (v82 == 0) {\n        // 0x409f01\n        function_40b990(v6);\n        return 1;\n    }\n    int64_t v83 = v47;\n    int64_t v84 = v63;\n    char v85 = v60;\n    int64_t v86 = v49;\n    int64_t v87 = v55;\n    char v88 = v51;\n    char v89 = v57;\n    char v90 = v53;\n    int64_t v91 = 48 * v83 + v6; // 0x409ec1\n    char v92 = v90; // 0x409ec8\n    char v93 = v89; // 0x409ec8\n    char v94 = v88; // 0x409ec8\n    int64_t v95 = v87; // 0x409ec8\n    int64_t v96 = v86; // 0x409ec8\n    char v97 = v85; // 0x409ec8\n    int64_t v98 = v84; // 0x409ec8\n    int64_t v99 = v91; // 0x409ec8\n    int64_t v100 = v83; // 0x409ec8\n    int64_t v101; // 0x409a40\n    int64_t v102; // 0x409a40\n    int64_t v103; // 0x409a40\n    int64_t v104; // 0x409a40\n    char v105; // 0x409a40\n    char v106; // 0x409a40\n    char v107; // 0x409a40\n    int64_t v108; // 0x409a40\n    int64_t v109; // 0x409a40\n    char v110; // 0x409a40\n    char v111; // 0x409a40\n    char v112; // 0x409a40\n    int64_t v113; // 0x409a40\n    int64_t v114; // 0x409a40\n    if (*(char *)(v91 + 16) == 0) {\n        goto lab_0x409dcd;\n    } else {\n        // 0x409ece\n        v106 = v90;\n        v110 = v89;\n        v105 = v88;\n        v108 = v87;\n        v103 = v86;\n        v112 = v85;\n        v113 = v84;\n        v102 = v83;\n        v107 = v90;\n        v111 = v89;\n        v109 = v87;\n        v104 = v86;\n        v114 = v84;\n        v101 = v83;\n        if (*(int32_t *)(v91 + 20) != v82) {\n            goto lab_0x409ddb;\n        } else {\n            goto lab_0x409ed7;\n        }\n    }\n  lab_0x409dc2:\n    // 0x409dc2\n    v92 = v52;\n    v93 = v56;\n    v94 = v50;\n    v95 = v54;\n    v96 = v48;\n    v97 = v59;\n    v98 = v62;\n    v99 = 48 * v46 + v6;\n    v100 = v46;\n    goto lab_0x409dcd;\n  lab_0x409ccf:;\n    int64_t v139; // 0x409a40\n    int64_t v140; // 0x409a40\n    if (v64 == 0) {\n        int64_t v184 = (int64_t)v137;\n        *(int64_t *)(8 * v184 + v7) = v184;\n        v139 = v184;\n        v140 = 0;\n        goto lab_0x409d1b;\n    } else {\n        // 0x409cd8\n        v65 = v64 - *(int64_t *)(8 * v64 + v7);\n        goto lab_0x409cdd;\n    }\n  lab_0x409dcd:;\n    int64_t v115 = v100;\n    int64_t v116 = v99;\n    int64_t n2 = v98;\n    char v117 = v97;\n    int64_t str6 = v96;\n    int64_t v118 = v95;\n    char v119 = v94;\n    char v120 = v93;\n    char v121 = v92;\n    v106 = v121;\n    v110 = v120;\n    v105 = v119;\n    v108 = v118;\n    v103 = str6;\n    v112 = v117;\n    v113 = n2;\n    v102 = v115;\n    int64_t v122; // 0x409a40\n    int64_t v123; // 0x409a40\n    int64_t v124; // 0x409a40\n    int64_t v125; // 0x409a40\n    char v126; // 0x409a40\n    char v127; // 0x409a40\n    char v128; // 0x409a40\n    int64_t v129; // 0x409a40\n    int64_t v130; // 0x409a40\n    char v131; // 0x409a40\n    char v132; // 0x409a40\n    char v133; // 0x409a40\n    int64_t v134; // 0x409a40\n    int64_t v135; // 0x409a40\n    if (*(int64_t *)(v116 + 8) == n2) {\n        int64_t str5 = *(int64_t *)v116; // 0x40a08c\n        int32_t memcmp_rc = memcmp((int64_t *)str5, (int64_t *)str6, (int32_t)n2); // 0x40a08f\n        v107 = v121;\n        v111 = v120;\n        v109 = v118;\n        v104 = str6;\n        v114 = n2;\n        v101 = v115;\n        if (memcmp_rc == 0) {\n            goto lab_0x409ed7;\n        } else {\n            // 0x40a09c\n            v128 = v121;\n            v131 = v120;\n            v129 = v118;\n            v124 = str6;\n            v134 = n2;\n            v123 = 0;\n            v127 = v121;\n            v132 = v120;\n            v126 = v119;\n            v130 = v118;\n            v125 = str6;\n            v133 = v117;\n            v135 = n2;\n            v122 = v115;\n            if (v115 == 0) {\n                goto lab_0x409df1;\n            } else {\n                goto lab_0x40a0a5;\n            }\n        }\n    } else {\n        goto lab_0x409ddb;\n    }\n  lab_0x409d05:;\n    int64_t v136 = (int64_t)v137;\n    int64_t v138 = v64 + 1; // 0x409d0c\n    *(int64_t *)(8 * v136 + v7) = v136 - v138;\n    v139 = v136;\n    v140 = v138;\n    goto lab_0x409d1b;\n  lab_0x40a060:;\n    int32_t v183 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x40a06c\n    v53 = v183 == 0 ? v78 : 0;\n    v57 = v70;\n    v51 = 1;\n    v55 = v69;\n    v49 = str4;\n    v60 = 1;\n    v63 = v81;\n    v47 = v68;\n    goto lab_0x409eb2;\n  lab_0x409ddb:\n    // 0x409ddb\n    v128 = v106;\n    v131 = v110;\n    v129 = v108;\n    v124 = v103;\n    v134 = v113;\n    v123 = v102;\n    v127 = v106;\n    v132 = v110;\n    v126 = v105;\n    v130 = v108;\n    v125 = v103;\n    v133 = v112;\n    v135 = v113;\n    v122 = v102;\n    if (v102 != 0) {\n        goto lab_0x40a0a5;\n    } else {\n        goto lab_0x409df1;\n    }\n  lab_0x409d1b:;\n    int64_t v141 = v139 + 1; // 0x409d1b\n    v18 = (struct _TYPEDEF___mbstate_t *)v141;\n    v19 = v142;\n    v20 = v140;\n    if (v141 != v4) {\n        goto lab_0x409cb0;\n    } else {\n        goto lab_0x409d3b;\n    }\n  lab_0x409ed7:;\n    int64_t v143 = v109;\n    int64_t v144 = v101 + 1; // 0x409edb\n    v41 = v107;\n    v42 = v111;\n    v43 = v143;\n    v44 = v114 + v104;\n    v45 = v144;\n    if (v144 == v4) {\n        // 0x409ef0\n        *(int64_t *)v1 = v143;\n        // 0x409f01\n        function_40b990(v6);\n        return 1;\n    }\n    goto lab_0x409e72;\n  lab_0x40a0a5:;\n    int64_t v145 = *(int64_t *)(8 * v122 + v7); // 0x40a0a5\n    int64_t v146 = v122 - v145; // 0x40a0b1\n    char v147 = v132; // 0x40a0b7\n    int64_t v148 = v130; // 0x40a0b7\n    int64_t v149 = v122; // 0x40a0b7\n    char v150 = v132; // 0x40a0b7\n    int64_t v151 = v130; // 0x40a0b7\n    int64_t v152 = v145; // 0x40a0b7\n    if (v145 == 0) {\n        goto lab_0x409db0_2;\n    } else {\n        goto lab_0x40a0ee;\n    }\n  lab_0x409df1:;\n    int64_t str7 = v129;\n    char v153 = v131;\n    char v154 = v153; // 0x409df8\n    int32_t v155; // bp-148, 0x409a40\n    int64_t v156; // 0x409a40\n    char v157; // 0x409a40\n    if (v153 != 0) {\n        goto lab_0x40a293;\n    } else {\n        unsigned char v158 = *(char *)str7; // 0x409e05\n        int32_t v159 = *(int32_t *)((int64_t)(4 * v158 / 32) + (int64_t)&g20); // 0x409e10\n        if ((1 << (int32_t)(v158 % 32) & v159) == 0) {\n            int32_t v160 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x40a27f\n            v154 = 1;\n            if (v160 == 0) {\n                goto lab_0x40a3df;\n            } else {\n                goto lab_0x40a293;\n            }\n        } else {\n            // 0x409e21\n            v155 = v158;\n            v157 = v153;\n            v156 = 1;\n            goto lab_0x409e43;\n        }\n    }\n  lab_0x409db0_2:\n    // 0x409db0\n    v29 = v127;\n    v30 = v147;\n    v31 = v126;\n    v32 = v148;\n    v33 = v125;\n    v58 = v133;\n    v61 = v135;\n    v34 = v149;\n    goto lab_0x409db0;\n  lab_0x40a0ee:;\n    int64_t str8 = v151;\n    char v161 = v150;\n    char v162 = v161; // 0x40a0f5\n    int32_t v163; // 0x409a40\n    int64_t v164; // 0x409a40\n    int64_t v165; // 0x409a40\n    char v166; // 0x409a40\n    if (v161 != 0) {\n        goto lab_0x40a16b;\n    } else {\n        unsigned char v167 = *(char *)str8; // 0x40a0fe\n        int32_t v168 = *(int32_t *)((int64_t)(4 * v167 / 32) + (int64_t)&g20); // 0x40a109\n        if ((1 << (int32_t)(v167 % 32) & v168) == 0) {\n            int32_t v169 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x40a157\n            v162 = 1;\n            if (v169 == 0) {\n                goto lab_0x40a3df;\n            } else {\n                goto lab_0x40a16b;\n            }\n        } else {\n            int32_t v170 = v167; // 0x40a12b\n            v155 = v170;\n            v163 = v170;\n            v166 = v161;\n            v165 = 1;\n            v164 = v167;\n            goto lab_0x40a138;\n        }\n    }\n  lab_0x40a293:;\n    int64_t v171 = function_407340(str7, (int64_t)__ctype_get_mb_cur_max()); // 0x40a2a5\n    int64_t v172 = function_408fc0((int64_t *)&v155, str7, v171); // 0x40a2c2\n    len3 = -1;\n    int64_t v173; // 0x409a40\n    switch (v172) {\n        case -1: {\n            goto lab_0x409e51;\n        }\n        case -2: {\n            // 0x40a3a7\n            len3 = strlen((char *)str7);\n            goto lab_0x409e51;\n        }\n        default: {\n            // 0x40a2e2\n            v173 = v172;\n            if (v172 != 0) {\n                goto lab_0x40a310;\n            } else {\n                // 0x40a2e7\n                if (*(char *)str7 != 0) {\n                    // 0x40a3c6\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40a3df;\n                } else {\n                    // 0x40a302\n                    v173 = 1;\n                    if (v155 != 0) {\n                        goto lab_0x40a3f8;\n                    } else {\n                        goto lab_0x40a310;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40a16b:;\n    char v174 = v162;\n    int64_t v175 = function_407340(str8, (int64_t)__ctype_get_mb_cur_max()); // 0x40a17d\n    int64_t v176 = function_408fc0((int64_t *)&v155, str8, v175); // 0x40a197\n    char v177 = v174; // 0x409a40\n    int64_t len4 = 1; // 0x409a40\n    int64_t v178; // 0x409a40\n    switch (v176) {\n        case -1: {\n            goto lab_0x40a0cf;\n        }\n        case -2: {\n            // 0x40a230\n            v177 = v174;\n            len4 = strlen((char *)str8);\n            goto lab_0x40a0cf;\n        }\n        default: {\n            // 0x40a1b3\n            v178 = v176;\n            if (v176 != 0) {\n                goto lab_0x40a1e1;\n            } else {\n                // 0x40a1b8\n                if (*(char *)str8 != 0) {\n                    // 0x40a3c6\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40a3df;\n                } else {\n                    // 0x40a1d3\n                    v178 = 1;\n                    if (v155 != 0) {\n                        goto lab_0x40a3fd;\n                    } else {\n                        goto lab_0x40a1e1;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40a0cf:;\n    int64_t v179 = len4 + str8; // 0x40a0dd\n    int64_t v180 = v152 - 1; // 0x40a0e4\n    v147 = v177;\n    v148 = v179;\n    v149 = v146;\n    v150 = v177;\n    v151 = v179;\n    v152 = v180;\n    if (v180 == 0) {\n        goto lab_0x409db0_2;\n    } else {\n        goto lab_0x40a0ee;\n    }\n  lab_0x40a310:;\n    int32_t v181 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x40a322\n    v157 = v181 == 0 ? v154 : 0;\n    v156 = v173;\n    goto lab_0x409e43;\n  lab_0x409e43:\n    // 0x409e43\n    v41 = v128;\n    v42 = v157;\n    v43 = v156 + str7;\n    v44 = v134 + v124;\n    v45 = v123;\n    goto lab_0x409e72;\n  lab_0x40a1e1:;\n    int32_t v182 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x40a1f3\n    v163 = v155;\n    v166 = v182 == 0 ? v174 : 0;\n    v165 = v178;\n    v164 = v182;\n    goto lab_0x40a138;\n  lab_0x40a138:\n    // 0x40a138\n    len3 = v164;\n    v177 = v166;\n    len4 = v165;\n    if (v163 != 0) {\n        goto lab_0x40a0cf;\n    } else {\n        goto lab_0x409e51;\n    }\n}\n"
        },
        {
            "funcName": "function_40a420",
            "funcStartAddr": "40a420",
            "funcEndAddr": "40b2f0",
            "decompiledFuncCode": "int64_t function_40a420(int64_t result, int64_t str2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40a420\n    int64_t v1; // 0x40a420\n    char v2 = v1;\n    int64_t v3; // 0x40a420\n    int64_t v4; // 0x40a420\n    int64_t v5; // 0x40a420\n    int64_t v6; // 0x40a420\n    int64_t v7; // 0x40a420\n    int64_t v8; // 0x40a420\n    int64_t v9; // 0x40a420\n    int64_t v10; // 0x40a420\n    int64_t result2; // 0x40a420\n    int64_t v11; // 0x40a420\n    int64_t v12; // 0x40a420\n    char v13; // 0x40a420\n    int64_t v14; // 0x40a420\n    int64_t v15; // 0x40a4e2\n    int64_t v16; // 0x40a4da\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x40a446\n        if (v2 == 0) {\n            // 0x40a57d\n            return result;\n        }\n        char v17 = v1;\n        if (v17 == 0) {\n            // 0x40a57d\n            return 0;\n        }\n        // 0x40a4da\n        v10 = 1;\n        v13 = v17;\n        v14 = 0;\n        v11 = result;\n        v6 = 0;\n        v8 = str2;\n        v3 = 0;\n        while (true) {\n          lab_0x40a4da:;\n            int64_t str = v8;\n            int64_t v18 = v6;\n            int64_t v19 = v11;\n            int64_t v20 = v14;\n            v15 = v19 + 1;\n            int64_t v21; // 0x40a420\n            if (v13 == v2) {\n                char v22 = *(char *)(str2 + 1); // 0x40a590\n                result2 = v19;\n                if (v22 == 0) {\n                    // break -> 0x40a57d\n                    break;\n                }\n                char v23 = *(char *)v15; // 0x40a599\n                result2 = 0;\n                if (v23 == 0) {\n                    // break -> 0x40a57d\n                    break;\n                }\n                int64_t v24 = v20 + 2; // 0x40a5a6\n                v21 = v24;\n                if (v22 == v23) {\n                    int64_t v25 = v24; // 0x40a5be\n                    char v26 = *(char *)(str2 - v20 + v25); // 0x40a5da\n                    result2 = v19;\n                    if (v26 == 0) {\n                        return result2;\n                    }\n                    char v27 = *(char *)(v19 - v20 + v25); // 0x40a5c0\n                    result2 = 0;\n                    if (v27 == 0) {\n                        return result2;\n                    }\n                    // 0x40a5cd\n                    v25++;\n                    v21 = v25;\n                    while (v26 == v27) {\n                        // 0x40a5da\n                        v26 = *(char *)(str2 - v20 + v25);\n                        result2 = v19;\n                        if (v26 == 0) {\n                            return result2;\n                        }\n                        // 0x40a5c0\n                        v27 = *(char *)(v19 - v20 + v25);\n                        result2 = 0;\n                        if (v27 == 0) {\n                            return result2;\n                        }\n                        // 0x40a5cd\n                        v25++;\n                        v21 = v25;\n                    }\n                }\n            } else {\n                // 0x40a4ef\n                v21 = v20 + 1;\n                result2 = 0;\n                if (*(char *)v15 == 0) {\n                    // break -> 0x40a57d\n                    break;\n                }\n            }\n            // 0x40a4f9\n            v16 = v3 + 1;\n            v12 = v21;\n            unsigned char v28 = (char)(v16 >= 10) & (char)v10; // 0x40a500\n            v9 = v10;\n            v5 = v18;\n            v7 = str;\n            if (v28 == 0) {\n                goto lab_0x40a4d0;\n            } else {\n                int64_t v29 = v28; // 0x40a500\n                v9 = v29;\n                v5 = v18;\n                v7 = str;\n                if (v12 >= 5 * v16) {\n                    // 0x40a478\n                    v4 = v18;\n                    if (str == 0) {\n                        goto lab_0x40a49f;\n                    } else {\n                        int64_t v30 = str + (int64_t)strnlen((char *)str, (int32_t)(v12 - v18)); // 0x40a496\n                        v4 = v12;\n                        v9 = v29;\n                        v5 = v12;\n                        v7 = v30;\n                        if (*(char *)v30 != 0) {\n                            goto lab_0x40a4d0;\n                        } else {\n                            goto lab_0x40a49f;\n                        }\n                    }\n                } else {\n                    goto lab_0x40a4d0;\n                }\n            }\n        }\n      lab_0x40a57d_2:\n        // 0x40a57d\n        return result2;\n    }\n    int64_t ps = 0; // bp-372, 0x40a53b\n    int32_t * v31 = (int32_t *)((v1 / 8 & 28) + (int64_t)&g20); // 0x40a54a\n    int32_t v32 = 1 << (int32_t)(v2 % 32);\n    int32_t v33; // 0x40a420\n    int32_t v34; // 0x40a420\n    char v35; // 0x40a420\n    int64_t v36; // 0x40a420\n    int32_t v37; // bp-340, 0x40a420\n    bool v38; // 0x40a420\n    int64_t v39; // 0x40a420\n    int64_t len; // 0x40a420\n    if ((*v31 & v32) == 0) {\n        // 0x40b160\n        if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n          lab_0x40b2bc_5:\n            // 0x40b2bc\n            __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n            // 0x40b2d5\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n            return &g62;\n        }\n        int64_t v40 = function_407340(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x40b185\n        int64_t v41 = function_408fc0((int64_t *)&v37, str2, v40); // 0x40b198\n        len = 1;\n        v38 = true;\n        switch (v41) {\n            case -1: {\n                goto lab_0x40a5f7;\n            }\n            case -2: {\n                // 0x40b26e\n                len = strlen((char *)str2);\n                v38 = true;\n                goto lab_0x40a5f7;\n            }\n            default: {\n                // 0x40b1b6\n                if (v41 == 0) {\n                    if (v2 != 0) {\n                        // 0x40b2d5\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    }\n                    int32_t v42; // 0x40b1d2\n                    if (v42 != 0) {\n                      lab_0x40b1da_6:\n                        // 0x40b1da\n                        function_409a20();\n                    }\n                }\n                // 0x40b1e0\n                mbsinit((struct _TYPEDEF___mbstate_t *)&ps);\n                v33 = v37;\n                v39 = v41;\n                int32_t v43; // 0x40a420\n                v34 = v43;\n                char v44; // 0x40a420\n                v35 = v44;\n                int64_t v45; // 0x40a420\n                v36 = v45;\n                goto lab_0x40a572;\n            }\n        }\n    } else {\n        int32_t v46 = v2; // 0x40a564\n        v37 = v46;\n        v33 = v46;\n        v39 = 1;\n        goto lab_0x40a572;\n    }\n  lab_0x40a4d0:\n    // 0x40a4d0\n    v10 = v9;\n    v13 = *(char *)v15;\n    v14 = v12;\n    v11 = v15;\n    v6 = v5;\n    v8 = v7;\n    v3 = v16;\n    goto lab_0x40a4da;\n  lab_0x40a49f:;\n    int32_t len2 = strlen((char *)str2); // 0x40a4a6\n    char v47; // bp-120, 0x40a420\n    int64_t v48 = function_409890(v15, str2, (int64_t)len2, (int64_t *)&v47, v4); // 0x40a4bc\n    v9 = v48;\n    v5 = v4;\n    v7 = 0;\n    if ((char)v48 != 0) {\n        // 0x40b261\n        result2 = v47;\n        goto lab_0x40a57d_2;\n    }\n    goto lab_0x40a4d0;\n  lab_0x40a933:;\n    // 0x40a933\n    int64_t str3; // 0x40a420\n    int64_t v49 = function_407340(str3, (int64_t)__ctype_get_mb_cur_max()); // 0x40a946\n    int32_t v50; // bp-84, 0x40a420\n    int64_t v51 = function_408fc0((int64_t *)&v50, str3, v49); // 0x40a965\n    int64_t len3 = 1; // 0x40a420\n    char v52 = 0; // 0x40a420\n    int64_t ps2; // bp-116, 0x40a420\n    int64_t str6; // 0x40a420\n    switch (v51) {\n        case -1: {\n            goto lab_0x40a867;\n        }\n        case -2: {\n            // 0x40ad18\n            len3 = strlen((char *)str3);\n            v52 = 0;\n            goto lab_0x40a867;\n        }\n        default: {\n            // 0x40a986\n            if (v51 == 0) {\n                char v53 = *(char *)str3; // 0x40a99f\n                if (v53 != 0) {\n                    // 0x40b2d5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g62;\n                }\n                int32_t v54 = v50; // 0x40a9a8\n                if (v54 != 0) {\n                    goto lab_0x40b1da_6;\n                }\n            }\n            // 0x40a9b7\n            if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) != 0) {\n                // 0x40a9d0\n                v47 = 0;\n            }\n            // 0x40a9d8\n            result2 = str6;\n            len3 = v51;\n            v52 = 1;\n            if (v50 == 0) {\n                // 0x40a57d\n                return result2;\n            }\n            goto lab_0x40a867;\n        }\n    }\n  lab_0x40a867:;\n    // 0x40a867\n    int64_t v55; // 0x40a420\n    int64_t v56 = v55 + 1;\n    int64_t str5; // 0x40a420\n    char * str4 = (char *)str5;\n    char v57 = v52;\n    int64_t v58 = len3;\n    char v59; // 0x40a420\n    char v60 = v59; // 0x40a86f\n    int32_t v61; // 0x40a420\n    int32_t v62; // bp-148, 0x40a420\n    int32_t v63; // 0x40a420\n    int64_t ps3; // bp-180, 0x40a420\n    char v64; // 0x40a420\n    if (v59 != 0) {\n        goto lab_0x40aa75;\n    } else {\n        unsigned char v65 = *str4; // 0x40a87d\n        int32_t v66 = *(int32_t *)((int64_t)(4 * v65 / 32) + (int64_t)&g20); // 0x40a888\n        if ((1 << (int32_t)(v65 % 32) & v66) == 0) {\n            int32_t v67 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x40aa60\n            v60 = 1;\n            if (v67 == 0) {\n                // break (via goto) -> 0x40b2bc\n                goto lab_0x40b2bc_5;\n            }\n            goto lab_0x40aa75;\n        } else {\n            int32_t v68 = v65; // 0x40a8b0\n            v62 = v68;\n            v63 = 1;\n            v64 = v59;\n            v61 = v68;\n            if (v65 == 0) {\n                // 0x40a57d\n                return 0;\n            }\n            goto lab_0x40a8ce;\n        }\n    }\n  lab_0x40aa75:;\n    char v69 = v60;\n    int64_t v70 = function_407340(str5, (int64_t)__ctype_get_mb_cur_max()); // 0x40aa88\n    int64_t v71 = function_408fc0((int64_t *)&v62, str5, v70); // 0x40aaa7\n    int32_t len4 = 1; // 0x40a420\n    char v72 = v69; // 0x40a420\n    switch (v71) {\n        case -1: {\n            goto lab_0x40aa1c;\n        }\n        case -2: {\n            // 0x40ad48\n            len4 = strlen(str4);\n            v72 = v69;\n            goto lab_0x40aa1c;\n        }\n        default: {\n            int32_t v73 = v71; // 0x40aacb\n            if (v71 == 0) {\n                // 0x40aacd\n                if (*str4 != 0) {\n                    // 0x40b2d5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g62;\n                }\n                // 0x40aaea\n                v73 = 1;\n                if (v62 != 0) {\n                    goto lab_0x40b1da_6;\n                }\n            }\n            int32_t v74 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x40ab09\n            v63 = v73;\n            v64 = v74 == 0 ? v69 : 0;\n            v61 = v62;\n            if (v62 == 0) {\n                // 0x40a57d\n                return 0;\n            }\n            goto lab_0x40a8ce;\n        }\n    }\n  lab_0x40aa1c:;\n    int32_t n = len4;\n    int64_t v75; // 0x40a420\n    int64_t v76 = v75; // 0x40aa2c\n    char v77; // 0x40a420\n    char v78 = v77; // 0x40aa2c\n    char v79; // 0x40a420\n    char v80 = v79; // 0x40aa2c\n    int128_t v81; // 0x40a420\n    int128_t v82 = v81; // 0x40aa2c\n    int64_t v83; // 0x40a420\n    int64_t v84 = v83; // 0x40aa2c\n    int32_t v85; // 0x40a420\n    int32_t v86 = v85; // 0x40aa2c\n    int32_t v87 = n; // 0x40aa2c\n    char v88; // 0x40a420\n    char v89 = v88; // 0x40aa2c\n    int64_t v90; // 0x40a420\n    int64_t v91 = v90; // 0x40aa2c\n    int64_t v92 = v56; // 0x40aa2c\n    int64_t v93; // 0x40a420\n    int64_t v94 = v93; // 0x40aa2c\n    if (v58 != (int64_t)n) {\n        // break -> 0x40aa32\n        goto lab_0x40aa32_3;\n    }\n    int32_t memcmp_rc = memcmp((int64_t *)str5, (int64_t *)str3, n); // 0x40ab68\n    int32_t v95 = n; // 0x40ab72\n    char v96 = v72; // 0x40ab72\n    bool v97 = memcmp_rc == 0; // 0x40ab72\n    goto lab_0x40a8e6;\n  lab_0x40a8ce:;\n    char v305 = v64;\n    int32_t v306 = v63;\n    len4 = v306;\n    v72 = v305;\n    if (v57 == 0) {\n        goto lab_0x40aa1c;\n    } else {\n        // 0x40a8dc\n        v95 = v306;\n        v96 = v305;\n        v97 = v50 == v61;\n        goto lab_0x40a8e6;\n    }\n  lab_0x40a8e6:;\n    int32_t v98 = v95;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v82 = v81;\n    v84 = v83;\n    v86 = v85;\n    v87 = v98;\n    v89 = v88;\n    v91 = v90;\n    v92 = v56;\n    v94 = v93;\n    if (!v97) {\n        // break -> 0x40aa32\n        goto lab_0x40aa32_3;\n    }\n    int64_t v99 = v58 + str3; // 0x40a91d\n    int64_t v100 = str5 + (int64_t)v98; // 0x40a91d\n    char v101 = v96; // 0x40a91d\n    v55 = v56;\n    goto lab_0x40a925;\n  lab_0x40ac69:;\n    // 0x40ac69\n    int128_t v104; // 0x40a420\n    int128_t v105 = v104;\n    int64_t v106 = function_407340(str6, (int64_t)__ctype_get_mb_cur_max()); // 0x40ac80\n    int32_t v107; // bp-212, 0x40a420\n    int64_t v108 = function_408fc0((int64_t *)&v107, str6, v106); // 0x40ac97\n    int32_t len5 = 1; // 0x40a420\n    int32_t v109; // 0x40a420\n    int32_t v110; // 0x40a420\n    int64_t ps4; // bp-244, 0x40a420\n    int128_t v111; // 0x40a420\n    switch (v108) {\n        case -1: {\n            goto lab_0x40abc4;\n        }\n        case -2: {\n            // 0x40af38\n            len5 = strlen((char *)str6);\n            goto lab_0x40abc4;\n        }\n        default: {\n            int32_t v112 = v108; // 0x40acbb\n            if (v108 == 0) {\n                // 0x40acbd\n                if (*(char *)str6 != 0) {\n                    // 0x40b2d5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g62;\n                }\n                // 0x40acda\n                v112 = 1;\n                if (v107 != 0) {\n                    goto lab_0x40b1da_6;\n                }\n            }\n            int32_t v113 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps4); // 0x40acf5\n            v109 = v107;\n            v111 = v113 == 0 ? v105 : 0;\n            v110 = v112;\n            goto lab_0x40a6b0;\n        }\n    }\n  lab_0x40abc4:;\n    int32_t v114 = len5;\n    uint64_t v115; // 0x40a420\n    int64_t v116; // 0x40a420\n    unsigned char v117 = (char)(v115 >= 10) & (char)v116; // 0x40abcb\n    int64_t v118; // 0x40a420\n    int64_t v119; // 0x40a420\n    int64_t v120; // 0x40a420\n    int128_t v121; // 0x40a420\n    int128_t v122; // 0x40a420\n    int32_t v123; // 0x40a420\n    int32_t v124; // 0x40a420\n    int128_t v125; // 0x40a420\n    int128_t v126; // 0x40a420\n    char v127; // 0x40a420\n    char v128; // 0x40a420\n    int64_t v129; // 0x40a420\n    int64_t v130; // 0x40a420\n    int64_t v131; // 0x40a420\n    int64_t v132; // 0x40a420\n    char v133; // 0x40a420\n    char v134; // 0x40a420\n    char v135; // 0x40a420\n    char v136; // 0x40a420\n    int64_t v137; // 0x40a420\n    int64_t v138; // 0x40a420\n    if (v117 == 0) {\n        // 0x40ad88\n        v132 = v131;\n        v136 = v135;\n        v134 = v133;\n        v125 = v105;\n        v138 = v137;\n        v123 = v114;\n        v121 = 0;\n        v128 = v127;\n        v130 = v129;\n        v120 = v119 + 1;\n        v118 = v116;\n        goto lab_0x40abe8;\n    } else {\n        // 0x40abd4\n        v126 = v105;\n        v124 = v114;\n        v122 = 0;\n        if (v119 >= 5 * v115) {\n            goto lab_0x40ad98;\n        } else {\n            // 0x40abe1\n            v132 = v131;\n            v136 = v135;\n            v134 = v133;\n            v125 = v105;\n            v138 = v137;\n            v123 = v114;\n            v121 = 0;\n            v128 = v127;\n            v130 = v129;\n            v120 = v119 + 1;\n            v118 = v117;\n            goto lab_0x40abe8;\n        }\n    }\n  lab_0x40a6b0:\n    // 0x40a6b0\n    if (v109 == 0) {\n        // 0x40a57d\n        return 0;\n    }\n    int32_t v139 = v110;\n    int128_t v140 = v111;\n    unsigned char v141 = (char)(v115 >= 10) & (char)v116; // 0x40a6c8\n    int64_t v142; // 0x40a420\n    int64_t v143; // 0x40a420\n    int128_t v144; // 0x40a420\n    int32_t v145; // 0x40a420\n    int128_t v146; // 0x40a420\n    char v147; // 0x40a420\n    int64_t v148; // 0x40a420\n    int64_t v149; // 0x40a420\n    char v150; // 0x40a420\n    char v151; // 0x40a420\n    int64_t v152; // 0x40a420\n    if (v141 == 0) {\n        // 0x40ad78\n        v149 = v131;\n        v151 = v135;\n        v150 = v133;\n        v146 = v140;\n        v152 = v137;\n        v145 = v139;\n        v144 = 1;\n        v147 = v127;\n        v148 = v129;\n        v143 = v119 + 1;\n        v142 = v116;\n        goto lab_0x40a6e5;\n    } else {\n        // 0x40a6d1\n        v126 = v140;\n        v124 = v139;\n        v122 = 1;\n        if (v119 >= 5 * v115) {\n            goto lab_0x40ad98;\n        } else {\n            // 0x40a6de\n            v149 = v131;\n            v151 = v135;\n            v150 = v133;\n            v146 = v140;\n            v152 = v137;\n            v145 = v139;\n            v144 = 1;\n            v147 = v127;\n            v148 = v129;\n            v143 = v119 + 1;\n            v142 = v141;\n            goto lab_0x40a6e5;\n        }\n    }\n  lab_0x40abe8:;\n    int64_t v153 = v118;\n    int64_t v154 = v120;\n    int64_t v155 = v130;\n    char v156 = v128;\n    int32_t n2 = v123;\n    int64_t v157 = v138;\n    int128_t v158 = v125;\n    char v159 = v134;\n    char v160 = v136;\n    int64_t v161 = v132;\n    int64_t v162 = n2; // 0x40abe8\n    int64_t v163 = v161; // 0x40abf5\n    char v164 = v160; // 0x40abf5\n    char v165 = v159; // 0x40abf5\n    int128_t v166 = v158; // 0x40abf5\n    int64_t v167 = v157; // 0x40abf5\n    int32_t v168; // 0x40a420\n    int32_t v169 = v168; // 0x40abf5\n    char v170 = v156; // 0x40abf5\n    int64_t v171 = v155; // 0x40abf5\n    int64_t v172 = v154; // 0x40abf5\n    int64_t v173 = v153; // 0x40abf5\n    int64_t v174 = v162; // 0x40abf5\n    int64_t v175; // 0x40a420\n    int64_t v176; // 0x40a420\n    int128_t v177; // 0x40a420\n    int32_t v178; // 0x40a420\n    int128_t v179; // 0x40a420\n    char v180; // 0x40a420\n    int64_t v181; // 0x40a420\n    int64_t v182; // 0x40a420\n    char v183; // 0x40a420\n    char v184; // 0x40a420\n    int64_t v185; // 0x40a420\n    int64_t v186; // 0x40a420\n    if (v185 != v162) {\n        goto lab_0x40aa3a;\n    } else {\n        int32_t memcmp_rc2 = memcmp((int64_t *)str6, (int64_t *)str2, n2); // 0x40ac0b\n        v182 = v161;\n        v184 = v160;\n        v183 = v159;\n        v179 = v158;\n        v186 = v157;\n        v178 = n2;\n        v177 = v121;\n        v180 = v156;\n        v181 = v155;\n        v176 = v154;\n        v175 = v153;\n        v163 = v161;\n        v164 = v160;\n        v165 = v159;\n        v166 = v158;\n        v167 = v157;\n        v169 = v168;\n        v170 = v156;\n        v171 = v155;\n        v172 = v154;\n        v173 = v153;\n        v174 = v162;\n        if (memcmp_rc2 != 0) {\n            goto lab_0x40aa3a;\n        } else {\n            goto lab_0x40a701;\n        }\n    }\n  lab_0x40ad98:;\n    int128_t v187 = v122;\n    int32_t v188 = v124;\n    int128_t v189 = v126;\n    int64_t v190 = v119 - v137; // 0x40ada0\n    int64_t v191; // 0x40a420\n    int64_t v192; // 0x40a420\n    char v193; // 0x40a420\n    char v194; // 0x40a420\n    char v195; // 0x40a420\n    int64_t v196; // 0x40a420\n    int64_t v197; // 0x40a420\n    int64_t v198; // 0x40a420\n    int64_t v199; // 0x40a420\n    int64_t v200; // 0x40a420\n    int64_t v201; // 0x40a420\n    int64_t v202; // 0x40a420\n    int64_t v203; // 0x40a420\n    int64_t v204; // 0x40a420\n    int64_t v205; // 0x40a420\n    char v206; // 0x40a420\n    char v207; // 0x40a420\n    char v208; // 0x40a420\n    char v209; // 0x40a420\n    char v210; // 0x40a420\n    char v211; // 0x40a420\n    char v212; // 0x40a420\n    char v213; // 0x40a420\n    char v214; // 0x40a420\n    if (v190 == 0) {\n        // 0x40b2a4\n        v200 = v131;\n        v209 = v135;\n        if (v133 == 0) {\n            goto lab_0x40af68;\n        } else {\n            // 0x40b2ac\n            v201 = v131;\n            v210 = v135;\n            v207 = v133;\n            v194 = v127;\n            v196 = v129;\n            v202 = v131;\n            v211 = v135;\n            v208 = v133;\n            v195 = 0;\n            v197 = v129;\n            if (v127 == 0) {\n                goto lab_0x40afbc;\n            } else {\n                goto lab_0x40afae;\n            }\n        }\n    } else {\n        // 0x40adab\n        v204 = v131;\n        v213 = v135;\n        v192 = v190;\n        if (v133 == 0) {\n            goto lab_0x40adcf;\n        } else {\n            // 0x40adaf\n            v203 = v131;\n            v212 = v135;\n            v198 = v129;\n            v191 = v190;\n            v205 = v131;\n            v214 = v135;\n            v206 = v133;\n            v193 = v127;\n            v199 = v129;\n            if (v127 != 0) {\n                goto lab_0x40ae11;\n            } else {\n                goto lab_0x40adb6;\n            }\n        }\n    }\n  lab_0x40a6e5:;\n    int64_t v215 = v142;\n    int64_t v216 = v143;\n    int64_t v217 = v148;\n    char v218 = v147;\n    int128_t v219 = v144;\n    int32_t v220 = v145;\n    int64_t v221 = v152;\n    int128_t v222 = v146;\n    char v223 = v150;\n    char v224 = v151;\n    int64_t v225 = v149;\n    v132 = v225;\n    v136 = v224;\n    v134 = v223;\n    v125 = v222;\n    v138 = v221;\n    v123 = v220;\n    v121 = v219;\n    v128 = v218;\n    v130 = v217;\n    v120 = v216;\n    v118 = v215;\n    bool v226; // 0x40a420\n    if (v226) {\n        goto lab_0x40abe8;\n    } else {\n        // 0x40a6f0\n        v182 = v225;\n        v184 = v224;\n        v183 = v223;\n        v179 = v222;\n        v186 = v221;\n        v178 = v220;\n        v177 = v219;\n        v180 = v218;\n        v181 = v217;\n        v176 = v216;\n        v175 = v215;\n        v76 = v225;\n        v78 = v224;\n        v80 = v223;\n        v82 = v222;\n        v84 = v221;\n        v86 = v220;\n        v87 = v168;\n        v89 = v218;\n        v91 = v217;\n        v92 = v216;\n        v94 = v215;\n        if (v107 != v37) {\n            goto lab_0x40aa32_3;\n        } else {\n            goto lab_0x40a701;\n        }\n    }\n  lab_0x40aa3a:;\n    int64_t v227 = v163; // 0x40aa4e\n    char v228 = v164; // 0x40aa4e\n    char v229 = v165; // 0x40aa4e\n    int64_t v230 = v174 + str6; // 0x40aa4e\n    int128_t v231 = v166; // 0x40aa4e\n    int64_t v232 = v167; // 0x40aa4e\n    int32_t v233 = v169; // 0x40aa4e\n    char v234 = v170; // 0x40aa4e\n    int64_t v235 = v171; // 0x40aa4e\n    int64_t v236 = v172; // 0x40aa4e\n    int64_t v237 = v115 + 1; // 0x40aa4e\n    int64_t v238 = v173; // 0x40aa4e\n    goto lab_0x40a650;\n  lab_0x40a701:\n    // 0x40a701\n    v93 = v175;\n    int64_t v244 = v176;\n    v90 = v181;\n    v88 = v180;\n    v85 = v178;\n    v83 = v186;\n    v81 = v179;\n    v79 = v183;\n    v77 = v184;\n    v75 = v182;\n    int128_t v245 = __asm_movdqa((int128_t)str6); // 0x40a706\n    int128_t v246 = __asm_movdqa(0); // 0x40a71f\n    v47 = 0;\n    int64_t v247 = __asm_movaps(v245); // 0x40a730\n    int128_t v248 = __asm_movdqa(v177); // 0x40a740\n    int128_t v249; // 0x40a420\n    int128_t v250 = __asm_movdqa(v249); // 0x40a753\n    int64_t v251 = __asm_movaps(v246); // 0x40a75f\n    __asm_movaps(v248);\n    __asm_movaps(v250);\n    ps2 = 0;\n    int64_t v252; // 0x40a420\n    if ((*v31 & v32) == 0) {\n        // 0x40afe8\n        if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) == 0) {\n            // break -> 0x40b2bc\n            goto lab_0x40b2bc_5;\n        }\n        // 0x40aff8\n        v47 = 1;\n        int64_t v253 = function_407340(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x40b017\n        int64_t v254 = function_408fc0((int64_t *)&v50, str2, v253); // 0x40b031\n        result2 = -1;\n        switch (v254) {\n            case -1: {\n                goto lab_0x40a57d_2;\n            }\n            case -2: {\n                // 0x40a57d\n                return strlen((char *)str2);\n            }\n            default: {\n                int64_t v255 = v254; // 0x40b055\n                if (v254 == 0) {\n                    if (v2 != 0) {\n                        // 0x40b2d5\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                        return &g62;\n                    }\n                    // 0x40b074\n                    v255 = 1;\n                    if (v50 != 0) {\n                        goto lab_0x40b1da_6;\n                    }\n                }\n                int64_t v256 = v255;\n                int32_t v257 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x40b093\n                v252 = v256;\n                if (v257 != 0) {\n                    // 0x40b09c\n                    v47 = 0;\n                    v252 = v256;\n                }\n                goto lab_0x40a7ca;\n            }\n        }\n    } else {\n        // 0x40a7a7\n        v50 = v2;\n        v252 = 1;\n        goto lab_0x40a7ca;\n    }\n  lab_0x40af68:;\n    char v258 = v209;\n    int64_t str7 = v200;\n    char v259 = v258; // 0x40af6d\n    int32_t v260; // 0x40a420\n    int32_t v261; // bp-276, 0x40a420\n    char v262; // 0x40a420\n    int64_t v263; // 0x40a420\n    int64_t v264; // 0x40a420\n    char v265; // 0x40a420\n    int64_t ps5; // bp-308, 0x40a420\n    char v266; // 0x40a420\n    if (v258 != 0) {\n        goto lab_0x40b0c8;\n    } else {\n        unsigned char v267 = *(char *)str7; // 0x40af78\n        int32_t v268 = *(int32_t *)((int64_t)(4 * v267 / 32) + (int64_t)&g20); // 0x40af83\n        if ((1 << (int32_t)(v267 % 32) & v268) == 0) {\n            int32_t v269 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x40b0b6\n            v259 = 1;\n            if (v269 == 0) {\n                // break -> 0x40b2bc\n                goto lab_0x40b2bc_5;\n            }\n            goto lab_0x40b0c8;\n        } else {\n            int32_t v270 = v267; // 0x40afa5\n            v261 = v270;\n            v260 = v270;\n            v264 = str7;\n            v266 = v258;\n            v265 = 1;\n            v262 = 1;\n            v263 = 1;\n            goto lab_0x40afae_2;\n        }\n    }\n  lab_0x40adcf:;\n    int64_t v271 = v192;\n    char v272 = v213;\n    int64_t str8 = v204;\n    char v273 = v272; // 0x40add4\n    if (v272 != 0) {\n        goto lab_0x40ae6f;\n    } else {\n        unsigned char v274 = *(char *)str8; // 0x40addf\n        int32_t v275 = *(int32_t *)((int64_t)(4 * v274 / 32) + (int64_t)&g20); // 0x40adea\n        if ((1 << (int32_t)(v274 % 32) & v275) == 0) {\n            int32_t v276 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x40ae5d\n            v273 = 1;\n            if (v276 == 0) {\n                // break -> 0x40b2bc\n                goto lab_0x40b2bc_5;\n            }\n            goto lab_0x40ae6f;\n        } else {\n            // 0x40adf7\n            v261 = v274;\n            v205 = str8;\n            v214 = v272;\n            v206 = 1;\n            v193 = 1;\n            v199 = 1;\n            goto lab_0x40ae11;\n        }\n    }\n  lab_0x40aa32_3:\n    // 0x40aa32\n    v163 = v76;\n    v164 = v78;\n    v165 = v80;\n    v166 = v82;\n    v167 = v84;\n    v169 = v87;\n    v170 = v89;\n    v171 = v91;\n    v172 = v92;\n    v173 = v94;\n    v174 = v86;\n    goto lab_0x40aa3a;\n  lab_0x40b0c8:;\n    char v277 = v259;\n    int64_t v278 = function_407340(str7, (int64_t)__ctype_get_mb_cur_max()); // 0x40b0d8\n    int64_t v279 = function_408fc0((int64_t *)&v261, str7, v278); // 0x40b0f1\n    v202 = str7;\n    v211 = v277;\n    v208 = 1;\n    v195 = 0;\n    v197 = 1;\n    switch (v279) {\n        case -1: {\n            goto lab_0x40afbc;\n        }\n        case -2: {\n            int32_t len6 = strlen((char *)str7); // 0x40b248\n            v202 = str7;\n            v211 = v277;\n            v208 = 1;\n            v195 = 0;\n            v197 = len6;\n            goto lab_0x40afbc;\n        }\n        default: {\n            int64_t v280 = v279; // 0x40b112\n            if (v279 == 0) {\n                // 0x40b114\n                if (*(char *)str7 != 0) {\n                    // 0x40b2d5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g62;\n                }\n                // 0x40b12b\n                v280 = 1;\n                if (v261 != 0) {\n                    goto lab_0x40b1da_6;\n                }\n            }\n            int32_t v281 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x40b143\n            v201 = str7;\n            v210 = v281 == 0 ? v277 : 0;\n            v207 = 1;\n            v194 = 1;\n            v196 = v280;\n            goto lab_0x40afae;\n        }\n    }\n  lab_0x40afbc:;\n    int64_t v282 = v202; // 0x40afc4\n    char v283 = v211; // 0x40afc4\n    char v284 = v208; // 0x40afc4\n    char v285 = v195; // 0x40afc4\n    int64_t v286 = v197; // 0x40afc4\n    int64_t v287 = 1; // 0x40afc4\n    goto lab_0x40afca;\n  lab_0x40afae:\n    // 0x40afae\n    v260 = v261;\n    v264 = v201;\n    v266 = v210;\n    v265 = v207;\n    v262 = v194;\n    v263 = v196;\n    goto lab_0x40afae_2;\n  lab_0x40ae6f:;\n    char v298 = v273;\n    int64_t v299 = function_407340(str8, (int64_t)__ctype_get_mb_cur_max()); // 0x40ae7f\n    int64_t v300 = function_408fc0((int64_t *)&v261, str8, v299); // 0x40ae98\n    v203 = str8;\n    v212 = v298;\n    v198 = 1;\n    v191 = v271;\n    switch (v300) {\n        case -1: {\n            goto lab_0x40adb6;\n        }\n        case -2: {\n            int32_t len7 = strlen((char *)str8); // 0x40af1d\n            v203 = str8;\n            v212 = v298;\n            v198 = len7;\n            v191 = v271;\n            goto lab_0x40adb6;\n        }\n        default: {\n            int64_t v301 = v300; // 0x40aeb1\n            if (v300 == 0) {\n                // 0x40aeb3\n                if (*(char *)str8 != 0) {\n                    // 0x40b2d5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g62;\n                }\n                // 0x40aeca\n                v301 = 1;\n                if (v261 != 0) {\n                    goto lab_0x40b1da_6;\n                }\n            }\n            int32_t v302 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x40aee2\n            v205 = str8;\n            v214 = v302 == 0 ? v298 : 0;\n            v206 = 1;\n            v193 = 1;\n            v199 = v301;\n            goto lab_0x40ae11;\n        }\n    }\n  lab_0x40ae11:;\n    int64_t v289 = v205; // 0x40ae19\n    char v290 = v214; // 0x40ae19\n    char v291 = v206; // 0x40ae19\n    char v292 = v193; // 0x40ae19\n    int64_t v293 = v199; // 0x40ae19\n    if (v261 != 0) {\n        goto lab_0x40adb6;\n    } else {\n        goto lab_0x40ae26;\n    }\n  lab_0x40adb6:;\n    int64_t v303 = v198 + v203; // 0x40adc0\n    int64_t v304 = v191 - 1; // 0x40adc5\n    v204 = v303;\n    v213 = v212;\n    v192 = v304;\n    v200 = v303;\n    v209 = v212;\n    if (v304 == 0) {\n        goto lab_0x40af68;\n    } else {\n        goto lab_0x40adcf;\n    }\n  lab_0x40a7ca:\n    // 0x40a7ca\n    v99 = v252 + str2;\n    v100 = v247 + (int64_t)v168;\n    v101 = v251;\n    v55 = v244;\n    while (true) {\n      lab_0x40a925:\n        // 0x40a925\n        v59 = v101;\n        str5 = v100;\n        str3 = v99;\n        if (v47 == 0) {\n            unsigned char v102 = *(char *)str3; // 0x40a808\n            int32_t v103 = *(int32_t *)((int64_t)(4 * v102 / 32) + (int64_t)&g20); // 0x40a813\n            if ((1 << (int32_t)(v102 % 32) & v103) == 0) {\n                // 0x40ab80\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) == 0) {\n                    // break (via goto) -> 0x40b2bc\n                    goto lab_0x40b2bc_5;\n                }\n                // 0x40ab95\n                v47 = 1;\n                goto lab_0x40a933;\n            } else {\n                // 0x40a824\n                v50 = v102;\n                result2 = str6;\n                len3 = 1;\n                v52 = 1;\n                if (v102 == 0) {\n                    // 0x40a57d\n                    return result2;\n                }\n                goto lab_0x40a867;\n            }\n        } else {\n            goto lab_0x40a933;\n        }\n    }\n    goto lab_0x40aa32_3;\n  lab_0x40afca:;\n    int64_t v288 = v119 + 1; // 0x40afca\n    v149 = v282;\n    v151 = v283;\n    v150 = v284;\n    v146 = v189;\n    v152 = v119;\n    v145 = v188;\n    v144 = v187;\n    v147 = v285;\n    v148 = v286;\n    v143 = v288;\n    v142 = v287;\n    v132 = v282;\n    v136 = v283;\n    v134 = v284;\n    v125 = v189;\n    v138 = v119;\n    v123 = v188;\n    v121 = v187;\n    v128 = v285;\n    v130 = v286;\n    v120 = v288;\n    v118 = v287;\n    if ((char)v187 != 0) {\n        goto lab_0x40a6e5;\n    } else {\n        goto lab_0x40abe8;\n    }\n  lab_0x40afae_2:\n    // 0x40afae\n    v289 = v264;\n    v290 = v266;\n    v291 = v265;\n    v292 = v262;\n    v293 = v263;\n    v202 = v264;\n    v211 = v266;\n    v208 = v265;\n    v195 = v262;\n    v197 = v263;\n    if (v260 == 0) {\n        goto lab_0x40ae26;\n    } else {\n        goto lab_0x40afbc;\n    }\n  lab_0x40ae26:;\n    int64_t v294 = function_409a40(result, str2, (int64_t *)&v47); // 0x40ae34\n    if ((char)v294 != 0) {\n        // 0x40b261\n        result2 = v47;\n        goto lab_0x40a57d_2;\n    }\n    // 0x40ae44\n    v282 = v289;\n    v283 = v290;\n    v284 = v291;\n    v285 = v292;\n    v286 = v293;\n    v287 = v294 & 0xffffffff;\n    goto lab_0x40afca;\n  lab_0x40a5f7:\n    // 0x40a5f7\n    v226 = v38;\n    v185 = len;\n    ps5 = 0;\n    ps4 = 0;\n    v227 = str2;\n    v228 = 0;\n    v229 = 0;\n    v230 = result;\n    v231 = 0;\n    v232 = 0;\n    int32_t v295; // 0x40a420\n    v233 = v295;\n    char v296; // 0x40a420\n    v234 = v296;\n    int64_t v297; // 0x40a420\n    v235 = v297;\n    v236 = 0;\n    v237 = 0;\n    v238 = 1;\n    while (true) {\n      lab_0x40a650:\n        // 0x40a650\n        v116 = v238;\n        v115 = v237;\n        v119 = v236;\n        v129 = v235;\n        v127 = v234;\n        v168 = v233;\n        v137 = v232;\n        int128_t v239 = v231;\n        str6 = v230;\n        v133 = v229;\n        v135 = v228;\n        v131 = v227;\n        v104 = v239;\n        if ((char)v239 != 0) {\n            goto lab_0x40ac69;\n        } else {\n            unsigned char v240 = *(char *)str6; // 0x40a66e\n            int32_t v241 = *(int32_t *)((int64_t)(4 * v240 / 32) + (int64_t)&g20); // 0x40a679\n            if ((1 << (int32_t)(v240 % 32) & v241) == 0) {\n                int32_t v242 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps4); // 0x40ac54\n                v104 = 1;\n                if (v242 == 0) {\n                    // break -> 0x40b2bc\n                    break;\n                }\n                goto lab_0x40ac69;\n            } else {\n                int32_t v243 = v240; // 0x40a6a1\n                v107 = v243;\n                v109 = v243;\n                v111 = v239;\n                v110 = 1;\n                goto lab_0x40a6b0;\n            }\n        }\n    }\n  lab_0x40b2bc_5:\n    // 0x40b2bc\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x40b2d5\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    return &g62;\n  lab_0x40a572:\n    // 0x40a572\n    len = v39;\n    v38 = false;\n    v295 = v34;\n    v296 = v35;\n    v297 = v36;\n    if (v33 == 0) {\n        // 0x40a57d\n        return result;\n    }\n    goto lab_0x40a5f7;\n}\n"
        },
        {
            "funcName": "function_40b2f0",
            "funcStartAddr": "40b2f0",
            "funcEndAddr": "40b539",
            "decompiledFuncCode": "int64_t function_40b2f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40b2f0\n    int64_t outbytesleft3; // bp-4152, 0x40b2f0\n    int64_t v1 = &outbytesleft3; // 0x40b316\n    int64_t * cd = (int64_t *)a3; // 0x40b334\n    iconv(cd, NULL, NULL, NULL, NULL);\n    int64_t inbuf = a1; // bp-4184, 0x40b339\n    int64_t inbytesleft = a2; // bp-4176, 0x40b341\n    char ** outbuf2; // 0x40b2f0\n    int32_t * outbytesleft2; // 0x40b2f0\n    int64_t v2; // 0x40b2f0\n    int64_t outbytesleft; // bp-4160, 0x40b2f0\n    int64_t outbuf; // bp-4168, 0x40b2f0\n    if (a2 != 0) {\n        int64_t v3 = 0; // 0x40b358\n        outbuf = v1;\n        outbytesleft = 0x1000;\n        int32_t v4 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, (char **)&outbuf, (int32_t *)&outbytesleft); // 0x40b384\n        if (v4 == -1) {\n            // 0x40b38f\n            if (*__errno_location() != 7) {\n                // 0x40b39b\n            }\n        }\n        // 0x40b350\n        v3 += outbuf - v1;\n        outbytesleft2 = (int32_t *)&outbytesleft;\n        outbuf2 = (char **)&outbuf;\n        v2 = v3;\n        while (inbytesleft != 0) {\n            // 0x40b363\n            outbuf = v1;\n            outbytesleft = 0x1000;\n            v4 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, (char **)&outbuf, (int32_t *)&outbytesleft);\n            if (v4 == -1) {\n                // 0x40b38f\n                if (*__errno_location() != 7) {\n                    // 0x40b39b\n                    outbytesleft2 = (int32_t *)&outbytesleft;\n                }\n            }\n            // 0x40b350\n            v3 += outbuf - v1;\n            outbytesleft2 = (int32_t *)&outbytesleft;\n            outbuf2 = (char **)&outbuf;\n            v2 = v3;\n        }\n    } else {\n        // 0x40b2f0\n        outbytesleft2 = (int32_t *)&outbytesleft;\n        outbuf2 = (char **)&outbuf;\n        v2 = 0;\n    }\n    goto lab_0x40b3a4;\n  lab_0x40b46a:;\n    // 0x40b46a\n    int64_t v8; // 0x40b2f0\n    int64_t v5; // 0x40b3f9\n    if (iconv(cd, NULL, NULL, (char **)&outbytesleft, (int32_t *)&outbytesleft3) != -1) {\n        // 0x40b486\n        *(int64_t *)a4 = v8;\n        *(int64_t *)a5 = v5;\n        // 0x40b4a8\n        return 0;\n    }\n    goto lab_0x40b50e;\n  lab_0x40b3a4:\n    // 0x40b3a4\n    outbuf = v1;\n    outbytesleft = 0x1000;\n    if (iconv(cd, NULL, NULL, outbuf2, outbytesleft2) == -1) {\n        // 0x40b4a8\n        return 0xffffffff;\n    }\n    int64_t size = outbuf - v1 + v2; // 0x40b3d6\n    if (size == 0) {\n        // 0x40b4f0\n        *(int64_t *)a5 = 0;\n        // 0x40b4a8\n        return 0;\n    }\n    // 0x40b3f4\n    v5 = 0x100000000 * size >> 32;\n    int64_t * v6 = &outbuf; // 0x40b400\n    if (v5 > (int64_t)&outbytesleft) {\n        int64_t * mem = malloc((int32_t)size); // 0x40b4c4\n        v6 = mem;\n        if (mem == NULL) {\n            // 0x40b4d5\n            *__errno_location() = 12;\n            // 0x40b4a8\n            return 0xffffffff;\n        }\n    }\n    int64_t * v7 = v6;\n    v8 = (int64_t)v7;\n    iconv(cd, NULL, NULL, NULL, NULL);\n    outbuf = a2;\n    outbytesleft = v8;\n    inbytesleft = a1;\n    outbytesleft3 = v5;\n    if (a2 != 0) {\n        while (iconv(cd, (char **)&inbytesleft, (int32_t *)&outbuf, (char **)&outbytesleft, (int32_t *)&outbytesleft3) != -1) {\n            // 0x40b460\n            if (outbuf == 0) {\n                goto lab_0x40b46a;\n            }\n        }\n        // 0x40b500\n        if (*__errno_location() == 22) {\n            goto lab_0x40b46a;\n        } else {\n            goto lab_0x40b50e;\n        }\n    } else {\n        // 0x40b406\n        goto lab_0x40b46a;\n    }\n  lab_0x40b50e:\n    // 0x40b50e\n    if (&outbytesleft != v7) {\n        int32_t * v9 = __errno_location(); // 0x40b51d\n        free(v7);\n    }\n    // 0x40b4a8\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40b540",
            "funcStartAddr": "40b540",
            "funcEndAddr": "40b705",
            "decompiledFuncCode": "int64_t function_40b540(int64_t str, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t inbuf = str; // bp-88, 0x40b551\n    int32_t len = strlen((char *)str); // 0x40b555\n    int64_t v1 = len; // 0x40b555\n    int64_t inbytesleft = v1; // bp-80, 0x40b55d\n    int64_t v2 = len >= 0x10000000 ? v1 : 16 * v1; // 0x40b56c\n    int64_t size = v2 + 1; // 0x40b570\n    int64_t * mem = malloc((int32_t)size); // 0x40b577\n    int64_t result = (int64_t)mem; // 0x40b577\n    if (mem == NULL) {\n        // 0x40b6f8\n        *__errno_location() = 12;\n        // 0x40b6e2\n        return result;\n    }\n    int64_t * cd = (int64_t *)a2; // 0x40b594\n    iconv(cd, NULL, NULL, NULL, NULL);\n    char * outbuf = (char *)mem; // bp-72, 0x40b599\n    int64_t outbytesleft = v2;\n    int32_t v3 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, &outbuf, (int32_t *)&outbytesleft); // 0x40b61e\n    int64_t v4 = result; // 0x40b627\n    int64_t v5 = result; // 0x40b627\n    int64_t v6 = size; // 0x40b627\n    int64_t v7; // 0x40b540\n    int64_t v8; // 0x40b540\n    int32_t * v9; // 0x40b540\n    if (v3 == -1) {\n        int64_t v10 = size;\n        int32_t * v11 = __errno_location(); // 0x40b5a8\n        int32_t v12 = *v11; // 0x40b5b0\n        v5 = v4;\n        v6 = v10;\n        while (v12 != 22) {\n            // 0x40b5bb\n            v8 = v4;\n            if (v12 != 7) {\n                goto lab_0x40b6d7;\n            }\n            int64_t v13 = 2 * v10; // 0x40b5c9\n            v7 = v4;\n            v9 = v11;\n            if (v10 >= v13) {\n                goto lab_0x40b6d0_4;\n            }\n            int64_t * mem2 = realloc((int64_t *)v4, (int32_t)v13); // 0x40b5e0\n            v7 = v4;\n            v9 = v11;\n            if (mem2 == NULL) {\n                goto lab_0x40b6d0_4;\n            }\n            int64_t v14 = (int64_t)outbuf - v4; // 0x40b5ce\n            v4 = (int64_t)mem2;\n            outbuf = (char *)(v14 + v4);\n            outbytesleft = v13 + -1 - v14;\n            int32_t v15 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, &outbuf, (int32_t *)&outbytesleft); // 0x40b61e\n            v5 = v4;\n            v6 = v13;\n            if (v15 != -1) {\n                // break -> 0x40b67e\n                break;\n            }\n            v10 = v13;\n            v11 = __errno_location();\n            v12 = *v11;\n            v5 = v4;\n            v6 = v10;\n        }\n    }\n    int32_t v16 = iconv(cd, NULL, NULL, &outbuf, (int32_t *)&outbytesleft); // 0x40b68f\n    int64_t v17 = v6; // 0x40b698\n    int64_t v18 = v5; // 0x40b698\n    int64_t v19 = v5; // 0x40b698\n    int64_t v20 = v6; // 0x40b698\n    if (v16 == -1) {\n        int32_t * v21 = __errno_location(); // 0x40b630\n        v8 = v18;\n        while (*v21 == 7) {\n            uint64_t v22 = v17;\n            v17 = 2 * v22;\n            v7 = v18;\n            v9 = v21;\n            if (v22 >= v17) {\n                goto lab_0x40b6d0_4;\n            }\n            int64_t * mem3 = realloc((int64_t *)v18, (int32_t)v17); // 0x40b659\n            v7 = v18;\n            v9 = v21;\n            if (mem3 == NULL) {\n                goto lab_0x40b6d0_4;\n            }\n            int64_t v23 = (int64_t)outbuf - v18; // 0x40b64b\n            v18 = (int64_t)mem3;\n            outbuf = (char *)(v23 + v18);\n            outbytesleft = v17 + -1 - v23;\n            int32_t v24 = iconv(cd, NULL, NULL, &outbuf, (int32_t *)&outbytesleft); // 0x40b68f\n            v19 = v18;\n            v20 = v17;\n            if (v24 != -1) {\n                goto lab_0x40b69a;\n            }\n            v21 = __errno_location();\n            v8 = v18;\n        }\n      lab_0x40b6d7:\n        // 0x40b6d7\n        free((int64_t *)v8);\n        // 0x40b6e2\n        return 0;\n    }\n  lab_0x40b69a:;\n    char * v25 = outbuf; // 0x40b69a\n    outbuf = (char *)((int64_t)v25 + 1);\n    *v25 = 0;\n    uint64_t v26 = (int64_t)outbuf - v19; // 0x40b6b0\n    int64_t result2 = v19; // 0x40b6b6\n    if (v20 > v26) {\n        int64_t * mem4 = realloc((int64_t *)v19, (int32_t)v26); // 0x40b6bb\n        result2 = mem4 != NULL ? (int64_t)mem4 : v19;\n    }\n    // 0x40b6e2\n    return result2;\n  lab_0x40b6d0_4:\n    // 0x40b6d0\n    *v9 = 12;\n    v8 = v7;\n    goto lab_0x40b6d7;\n}\n"
        },
        {
            "funcName": "function_40b710",
            "funcStartAddr": "40b710",
            "funcEndAddr": "40b7fc",
            "decompiledFuncCode": "int64_t function_40b710(int64_t str, int64_t fromcode, int64_t a3) {\n    // 0x40b710\n    int64_t v1; // 0x40b710\n    if ((char)v1 != 0) {\n        char * tocode = (char *)a3; // 0x40b72e\n        if ((int32_t)function_409150(fromcode, tocode, a3) != 0) {\n            int64_t * cd = iconv_open(tocode, (char *)fromcode); // 0x40b75e\n            if (cd == (int64_t *)-1) {\n                // 0x40b747\n                return 0;\n            }\n            int64_t v2 = function_40b540(str, (int64_t)cd, a3, v1, v1); // 0x40b772\n            if (v2 == 0) {\n                int32_t * v3 = __errno_location(); // 0x40b7e0\n                iconv_close(cd);\n                // 0x40b747\n                return 0;\n            }\n            int64_t result = v2; // 0x40b789\n            if (iconv_close(cd) < 0) {\n                int32_t * v4 = __errno_location(); // 0x40b78b\n                free((int64_t *)v2);\n                result = 0;\n            }\n            // 0x40b747\n            return result;\n        }\n    }\n    char * v5 = strdup((char *)str); // 0x40b73a\n    int64_t result2 = (int64_t)v5; // 0x40b73a\n    if (v5 != NULL) {\n        // 0x40b747\n        return result2;\n    }\n    // 0x40b7b0\n    *__errno_location() = 12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b800",
            "funcStartAddr": "40b800",
            "funcEndAddr": "40b87b",
            "decompiledFuncCode": "int64_t function_40b800(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40b807\n    if (fileno(stream) < 0) {\n        // 0x40b867\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40b81a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40b84b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40b867\n            return fclose(stream);\n        }\n    }\n    // 0x40b81c\n    if ((int32_t)function_40b880(a1, v1) == 0) {\n        // 0x40b867\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40b828\n    int32_t v3 = *v2; // 0x40b830\n    int64_t result = fclose(stream); // 0x40b83e\n    if (v3 != 0) {\n        // 0x40b870\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40b840\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b880",
            "funcStartAddr": "40b880",
            "funcEndAddr": "40b8c0",
            "decompiledFuncCode": "int64_t function_40b880(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40b89a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40b89a\n        return fflush(stream);\n    }\n    // 0x40b8a8\n    function_40b8c0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40b8c0",
            "funcStartAddr": "40b8c0",
            "funcEndAddr": "40b917",
            "decompiledFuncCode": "int64_t function_40b8c0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40b8c0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40b8ca\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40b8fb\n    int64_t result = -1; // 0x40b904\n    if (v1 != -1) {\n        // 0x40b906\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40b912\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b920",
            "funcStartAddr": "40b920",
            "funcEndAddr": "40b98c",
            "decompiledFuncCode": "int64_t function_40b920(uint64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40b920\n    if (a1 > 0xffffffffffffffef) {\n        // 0x40b97e\n        return 0;\n    }\n    int64_t * mem = malloc((int32_t)a1 + 16); // 0x40b92a\n    int64_t result = 0; // 0x40b937\n    if (mem != NULL) {\n        int64_t v1 = (int64_t)mem; // 0x40b92a\n        result = v1 + 16;\n        *(int32_t *)(v1 + 12) = 0x1415fb4a;\n        int64_t v2 = g59; // 0x40b96b\n        g59 = result;\n        *mem = v2;\n    }\n    // 0x40b97e\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b990",
            "funcStartAddr": "40b990",
            "funcEndAddr": "40ba16",
            "decompiledFuncCode": "int64_t function_40b990(int64_t a1) {\n    if (a1 == 0 || *(int32_t *)(a1 - 4) != 0x1415fb4a) {\n        // 0x40b99e\n        int64_t result; // 0x40b990\n        return result;\n    }\n    // 0x40b9a0\n    if (g59 == 0) {\n        // 0x40b99e\n        return 0;\n    }\n    int64_t * v1 = &g59; // 0x40b9d4\n    if (g59 == a1) {\n      lab_0x40b9fc:;\n        int64_t * v2 = (int64_t *)(a1 - 16); // 0x40b9fc\n        *v1 = *v2;\n        free(v2);\n        return &g62;\n    }\n    int64_t * v3 = (int64_t *)(g59 - 16);\n    int64_t result2 = *v3; // 0x40b9e8\n    while (result2 != 0) {\n        // 0x40b9e0\n        v1 = v3;\n        if (result2 == a1) {\n            goto lab_0x40b9fc;\n        }\n        v3 = (int64_t *)(result2 - 16);\n        result2 = *v3;\n    }\n    // 0x40b99e\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ba20",
            "funcStartAddr": "40ba20",
            "funcEndAddr": "40bc4d",
            "decompiledFuncCode": "int64_t function_40ba20(int64_t str) {\n    // 0x40ba20\n    if ((uint32_t)__ctype_get_mb_cur_max() < 2) {\n        // 0x40ba3f\n        return strlen((char *)str);\n    }\n    int64_t ps = 0; // bp-84, 0x40ba5b\n    char v1 = 0; // 0x40ba69\n    int64_t v2 = str; // 0x40ba69\n    int64_t v3 = 0; // 0x40ba69\n    int32_t v4; // 0x40ba20\n    int64_t v5; // 0x40ba20\n    int32_t v6; // bp-52, 0x40ba20\n    int64_t v7; // 0x40ba20\n    int64_t str2; // 0x40ba20\n    char v8; // 0x40ba20\n    char v9; // 0x40ba20\n    while (true) {\n      lab_0x40bac1:\n        // 0x40bac1\n        v5 = v3;\n        str2 = v2;\n        v9 = v1;\n        if (v1 == 0) {\n            unsigned char v10 = *(char *)str2; // 0x40ba75\n            int32_t v11 = *(int32_t *)((int64_t)(4 * v10 / 32) + (int64_t)&g20); // 0x40ba80\n            if ((1 << (int32_t)(v10 % 32) & v11) == 0) {\n                int32_t v12 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40bb55\n                v9 = 1;\n                if (v12 == 0) {\n                    // break -> 0x40bba1\n                    break;\n                }\n                goto lab_0x40bac7;\n            } else {\n                int32_t v13 = v10; // 0x40baa2\n                v6 = v13;\n                v4 = v13;\n                v8 = 0;\n                v7 = 1;\n                goto lab_0x40baa6;\n            }\n        } else {\n            goto lab_0x40bac7;\n        }\n    }\n    // 0x40bba1\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x40bbba\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    // 0x40bbd3\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return function_401610();\n  lab_0x40bac7:;\n    char v14 = v9;\n    int64_t v15 = function_407340(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x40bad7\n    int64_t v16 = function_408fc0((int64_t *)&v6, str2, v15); // 0x40baec\n    v1 = v14;\n    int64_t len = 1; // 0x40ba20\n    switch (v16) {\n        case -1: {\n            goto lab_0x40baae;\n        }\n        case -2: {\n            // 0x40bb88\n            v1 = v14;\n            len = strlen((char *)str2);\n            goto lab_0x40baae;\n        }\n        default: {\n            int64_t v17 = v16; // 0x40bb09\n            if (v16 == 0) {\n                // 0x40bb0b\n                if (*(char *)str2 != 0) {\n                    // 0x40bbba\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    // 0x40bbd3\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return function_401610();\n                }\n                // 0x40bb22\n                v17 = 1;\n                if (v6 != 0) {\n                    // 0x40bbd3\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return function_401610();\n                }\n            }\n            int32_t v18 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40bb38\n            v4 = v6;\n            v8 = v18 == 0 ? v14 : 0;\n            v7 = v17;\n            goto lab_0x40baa6;\n        }\n    }\n  lab_0x40baae:\n    // 0x40baae\n    v2 = len + str2;\n    v3 = v5 + 1;\n    goto lab_0x40bac1;\n  lab_0x40baa6:;\n    int64_t result = v5; // 0x40baac\n    v1 = v8;\n    len = v7;\n    if (v4 == 0) {\n        // 0x40ba3f\n        return result;\n    }\n    goto lab_0x40baae;\n}\n"
        },
        {
            "funcName": "function_40bc50",
            "funcStartAddr": "40bc50",
            "funcEndAddr": "40bc51",
            "decompiledFuncCode": "int64_t function_40bc50(void) {\n    // 0x40bc50\n    int64_t result; // 0x40bc50\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bc60",
            "funcStartAddr": "40bc60",
            "funcEndAddr": "40bc78",
            "decompiledFuncCode": "int64_t function_40bc60(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bc60\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g25);\n}\n"
        },
        {
            "funcName": "function_40bc78",
            "funcStartAddr": "40bc78",
            "funcEndAddr": "40bc98",
            "decompiledFuncCode": "int64_t function_40bc78(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g21; // 0x40bc82\n    while (*(int64_t *)v1 != -1) {\n        // 0x40bc83\n        v1 -= 8;\n    }\n    // 0x40bc94\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_factor.elf"
}