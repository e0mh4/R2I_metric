{
    "funcInfo": [
        {
            "funcName": "function_402a50",
            "funcStartAddr": "402a50",
            "funcEndAddr": "402a55",
            "decompiledFuncCode": "int64_t function_402a50(void) {\n    // 0x402a50\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a55",
            "funcStartAddr": "402a55",
            "funcEndAddr": "402a5a",
            "decompiledFuncCode": "int64_t function_402a55(void) {\n    // 0x402a55\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a5a",
            "funcStartAddr": "402a5a",
            "funcEndAddr": "402a5f",
            "decompiledFuncCode": "int64_t function_402a5a(void) {\n    // 0x402a5a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a5f",
            "funcStartAddr": "402a5f",
            "funcEndAddr": "402a64",
            "decompiledFuncCode": "int64_t function_402a5f(void) {\n    // 0x402a5f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a64",
            "funcStartAddr": "402a64",
            "funcEndAddr": "402a69",
            "decompiledFuncCode": "int64_t function_402a64(void) {\n    // 0x402a64\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a69",
            "funcStartAddr": "402a69",
            "funcEndAddr": "402a6e",
            "decompiledFuncCode": "int64_t function_402a69(void) {\n    // 0x402a69\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a6e",
            "funcStartAddr": "402a6e",
            "funcEndAddr": "402a73",
            "decompiledFuncCode": "int64_t function_402a6e(void) {\n    // 0x402a6e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a73",
            "funcStartAddr": "402a73",
            "funcEndAddr": "402a78",
            "decompiledFuncCode": "int64_t function_402a73(void) {\n    // 0x402a73\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a78",
            "funcStartAddr": "402a78",
            "funcEndAddr": "402a7d",
            "decompiledFuncCode": "int64_t function_402a78(void) {\n    // 0x402a78\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a7d",
            "funcStartAddr": "402a7d",
            "funcEndAddr": "402a82",
            "decompiledFuncCode": "int64_t function_402a7d(void) {\n    // 0x402a7d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a82",
            "funcStartAddr": "402a82",
            "funcEndAddr": "402a87",
            "decompiledFuncCode": "int64_t function_402a82(void) {\n    // 0x402a82\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a87",
            "funcStartAddr": "402a87",
            "funcEndAddr": "402a8c",
            "decompiledFuncCode": "int64_t function_402a87(void) {\n    // 0x402a87\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a90",
            "funcStartAddr": "402a90",
            "funcEndAddr": "4031a0",
            "decompiledFuncCode": "int64_t function_402a90(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 & 0xffffffff; // 0x402a99\n    function_40c3a0(a2);\n    setlocale(LC_ALL, (char *)&g23);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_4128f0(0x40a800, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g53 = 0;\n    int64_t v2; // bp-280, 0x402a90\n    function_405170(&v2);\n    getenv(\"POSIXLY_CORRECT\");\n    int64_t v3; // 0x402a90\n    int64_t v4 = function_411340(v1, a2, \"abdfHilLnprst:uvxPRS:TZ\", &g5, 0, v3); // 0x402b9a\n    int32_t v5 = 1; // 0x402ba2\n    char v6 = 0; // 0x402ba2\n    char * v7 = NULL; // 0x402ba2\n    int32_t v8 = 0; // 0x402ba2\n    int32_t v9 = 4; // 0x402ba2\n    int64_t v10 = a2; // 0x402ba2\n    int64_t v11 = 0; // 0x402ba2\n    int64_t v12 = 0; // 0x402ba2\n    int64_t v13 = 0; // 0x402ba2\n    int64_t v14 = 0; // 0x402ba2\n    int64_t v15; // 0x402a90\n    int64_t v16; // 0x402a90\n    int64_t v17; // 0x402a90\n    int64_t v18; // 0x402a90\n    int64_t v19; // 0x402a90\n    int64_t v20; // 0x402a90\n    int64_t v21; // 0x402a90\n    int64_t v22; // 0x402a90\n    int64_t v23; // 0x402a90\n    int64_t v24; // 0x402a90\n    int64_t v25; // 0x402a90\n    int64_t v26; // 0x402a90\n    int64_t v27; // 0x402a90\n    int64_t v28; // 0x402a90\n    int64_t v29; // 0x402a90\n    int64_t v30; // 0x402a90\n    int64_t v31; // 0x402a90\n    int64_t v32; // 0x402a90\n    int64_t v33; // 0x402a90\n    int64_t v34; // 0x402a90\n    int64_t v35; // 0x402a90\n    int32_t v36; // 0x402a90\n    int32_t v37; // 0x402a90\n    int32_t v38; // 0x402a90\n    char v39; // 0x402a90\n    char v40; // 0x402a90\n    char v41; // 0x402a90\n    char v42; // 0x402a90\n    char v43; // 0x402a90\n    char v44; // 0x402a90\n    char v45; // 0x402a90\n    char v46; // 0x402a90\n    char v47; // 0x402a90\n    char v48; // 0x402a90\n    char v49; // 0x402a90\n    char v50; // 0x402a90\n    char v51; // 0x402a90\n    char v52; // 0x402a90\n    char v53; // 0x402a90\n    int32_t v54; // 0x402a90\n    int32_t v55; // 0x402a90\n    int32_t v56; // 0x402a90\n    int32_t v57; // 0x402a90\n    int32_t v58; // 0x402a90\n    int32_t v59; // 0x402a90\n    int32_t v60; // 0x402a90\n    int32_t v61; // 0x402a90\n    int32_t v62; // 0x402a90\n    char * v63; // 0x402a90\n    char * v64; // 0x402a90\n    char * v65; // 0x402a90\n    char v66; // 0x402a90\n    char v67; // 0x402a90\n    char v68; // 0x402a90\n    char * format; // 0x403183\n    if ((int32_t)v4 != -1) {\n        // 0x402ba8\n        v15 = v4;\n        v26 = 0;\n        v23 = 0;\n        v20 = 0;\n        v16 = 0;\n        v32 = a2;\n        v57 = 4;\n        v36 = 0;\n        v63 = NULL;\n        v66 = 0;\n        v60 = 1;\n        while (true) {\n          lab_0x402ba8:\n            // 0x402ba8\n            v61 = v60;\n            v67 = v66;\n            v64 = v63;\n            v52 = v51;\n            v46 = v45;\n            v43 = v42;\n            v55 = v54;\n            v37 = v36;\n            v40 = v39;\n            v49 = v48;\n            v58 = v57;\n            v33 = v32;\n            v30 = v29;\n            v17 = v16;\n            v21 = v20;\n            v24 = v23;\n            v27 = v26;\n            int64_t v69 = v15 + 131; // 0x402ba8\n            g81 = v69 & 0xffffffff;\n            v62 = v61;\n            v68 = v67;\n            v65 = v64;\n            v53 = v52;\n            v47 = v46;\n            v44 = v43;\n            v56 = v55;\n            v38 = v37;\n            v41 = v40;\n            v50 = v49;\n            v59 = v58;\n            v34 = v33;\n            v31 = v30;\n            v18 = v17;\n            v22 = v21;\n            v25 = v24;\n            v28 = v27;\n            v35 = v33;\n            v19 = v17;\n            switch ((int32_t)v69) {\n                case 0: {\n                    // 0x402ce3\n                    function_40ff60((int64_t)g44, \"cp\", \"GNU coreutils\", (int64_t)g32, \"Torbjorn Granlund\", \"David MacKenzie\");\n                    exit(0);\n                    // UNREACHABLE\n                }\n                case 1: {\n                    // 0x4030a4\n                    function_403c80(0);\n                    // UNREACHABLE\n                }\n                case 203: {\n                    // 0x402cd6\n                    v62 = 3;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 207: {\n                    // 0x402cc9\n                    v62 = 4;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 211: {\n                    // 0x402cbc\n                    v62 = 2;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 213: {\n                    goto lab_0x402cb2;\n                }\n                case 214: {\n                    // 0x402ca0\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = 1;\n                    v25 = v24;\n                    v28 = (int64_t)g80;\n                    goto lab_0x402b88;\n                }\n                case 215: {\n                    // 0x402c96\n                    v62 = v61;\n                    v68 = 1;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 221: {\n                    char * v70 = g80; // 0x402c76\n                    if (g53 == 0) {\n                        // 0x402e9b\n                        v62 = v61;\n                        v68 = v67;\n                        v65 = v64;\n                        v53 = v52;\n                        v47 = v46;\n                        v44 = v43;\n                        v56 = v55;\n                        v38 = v37;\n                        v41 = v40;\n                        v50 = v49;\n                        v59 = v58;\n                        v34 = v33;\n                        v31 = v30;\n                        v18 = v17;\n                        v22 = v21;\n                        v25 = v24;\n                        v28 = v27;\n                        if (v70 != NULL) {\n                            // 0x402ea4\n                            error(0, (int32_t)\"warning: ignoring --context; it requires an SELinux-enabled kernel\" ^ (int32_t)\"warning: ignoring --context; it requires an SELinux-enabled kernel\", dcgettext(NULL, \"warning: ignoring --context; it requires an SELinux-enabled kernel\", 5));\n                            v62 = v61;\n                            v68 = v67;\n                            v65 = v64;\n                            v53 = v52;\n                            v47 = v46;\n                            v44 = v43;\n                            v56 = v55;\n                            v38 = v37;\n                            v41 = v40;\n                            v50 = v49;\n                            v59 = v58;\n                            v34 = v33;\n                            v31 = v30;\n                            v18 = v17;\n                            v22 = v21;\n                            v25 = v24;\n                            v28 = v27;\n                        }\n                    } else {\n                        // 0x402c83\n                        v62 = v61;\n                        v68 = v67;\n                        v65 = v70 == NULL ? v64 : v70;\n                        v53 = v52;\n                        v47 = v46;\n                        v44 = v43;\n                        v56 = v55;\n                        v38 = v37;\n                        v41 = v40;\n                        v50 = v70 == NULL ? 1 : v49;\n                        v59 = v58;\n                        v34 = v33;\n                        v31 = v30;\n                        v18 = v17;\n                        v22 = v21;\n                        v25 = v24;\n                        v28 = v27;\n                    }\n                    goto lab_0x402b88;\n                }\n                case 228: {\n                    // 0x402c32\n                    v62 = 2;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = g53 == 0 ? v46 : 1;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 229: {\n                    char * v71 = g80; // 0x402c19\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = 1;\n                    v25 = v71 != NULL ? (int64_t)v71 : v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 231: {\n                    // 0x402c07\n                    v62 = 2;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 233: {\n                    goto lab_0x402b88;\n                }\n                case 236: {\n                    // 0x402bf6\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = 3;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 239: {\n                    // 0x402bef\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = 1;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 241: {\n                    // 0x402be5\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = 2;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 243: {\n                    goto lab_0x402b88;\n                }\n                case 245: {\n                    goto lab_0x402cb2;\n                }\n                case 246: {\n                    goto lab_0x402e78;\n                }\n                case 247: {\n                    if (v17 != 0) {\n                        // 0x403177\n                        format = dcgettext(NULL, \"multiple target directories specified\", 5);\n                        error(1, (int32_t)\"multiple target directories specified\" ^ (int32_t)\"multiple target directories specified\", format);\n                        return &g83;\n                    }\n                    // 0x402e0a\n                    int64_t v72; // bp-200, 0x402a90\n                    if (__xstat(1, g80, (struct stat *)&v72) != 0) {\n                        goto lab_0x403136;\n                    }\n                    int64_t v73 = (int64_t)g80; // 0x402e2c\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v73;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    int32_t v74; // 0x402a90\n                    if ((v74 & 0xf000) == 0x4000) {\n                        goto lab_0x402b88;\n                    } else {\n                        int64_t v75 = function_40ddd0(4, v73); // 0x402e4b\n                        error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", dcgettext(NULL, \"target %s is not a directory\", 5));\n                        v35 = v75;\n                        v19 = v73;\n                        goto lab_0x402e78;\n                    }\n                }\n                case 248: {\n                    goto lab_0x402b88;\n                }\n                case 249: {\n                    goto lab_0x402b88;\n                }\n                case 251: {\n                    goto lab_0x402b88;\n                }\n                case 259: {\n                    goto lab_0x402b88;\n                }\n                case 260: {\n                    goto lab_0x402b88;\n                }\n                case 261: {\n                    // 0x402db7\n                    function_403280((int64_t)g80, &v2, 0);\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 262: {\n                    // 0x402dab\n                    g52 = 1;\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 263: {\n                    // 0x402bbf\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    if (g80 != NULL) {\n                        // 0x402e82\n                        function_403280((int64_t)g80, &v2, 1);\n                        v62 = v61;\n                        v68 = v67;\n                        v65 = v64;\n                        v53 = v52;\n                        v47 = v46;\n                        v44 = v43;\n                        v56 = v55;\n                        v38 = v37;\n                        v41 = v40;\n                        v50 = v49;\n                        v59 = v58;\n                        v34 = v33;\n                        v31 = v30;\n                        v18 = v17;\n                        v22 = v21;\n                        v25 = v24;\n                        v28 = v27;\n                    }\n                    goto lab_0x402b88;\n                }\n                case 264: {\n                    // 0x402d6a\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = 2;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    if (g80 != NULL) {\n                        int64_t v76 = function_409ff0(\"--reflink\", (int64_t)g80, g7, (int64_t *)&g6, 4, g33); // 0x402d96\n                        v62 = v61;\n                        v68 = v67;\n                        v65 = v64;\n                        v53 = v52;\n                        v47 = v46;\n                        v44 = v43;\n                        v56 = v55;\n                        v38 = *(int32_t *)(4 * v76 + (int64_t)&g6);\n                        v41 = v40;\n                        v50 = v49;\n                        v59 = v58;\n                        v34 = v33;\n                        v31 = g33;\n                        v18 = v17;\n                        v22 = v21;\n                        v25 = v24;\n                        v28 = v27;\n                    }\n                    goto lab_0x402b88;\n                }\n                case 265: {\n                    int64_t v77 = function_409ff0(\"--sparse\", (int64_t)g80, g9, (int64_t *)&g8, 4, g33); // 0x402d55\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = *(int32_t *)(4 * v77 + (int64_t)&g8);\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = g33;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 266: {\n                    // 0x402d26\n                    g51 = 1;\n                    v62 = v61;\n                    v68 = v67;\n                    v65 = v64;\n                    v53 = v52;\n                    v47 = v46;\n                    v44 = v43;\n                    v56 = v55;\n                    v38 = v37;\n                    v41 = v40;\n                    v50 = v49;\n                    v59 = v58;\n                    v34 = v33;\n                    v31 = v30;\n                    v18 = v17;\n                    v22 = v21;\n                    v25 = v24;\n                    v28 = v27;\n                    goto lab_0x402b88;\n                }\n                case 267: {\n                    goto lab_0x402b88;\n                }\n                default: {\n                    goto lab_0x4030ca;\n                }\n            }\n        }\n    }\n  lab_0x402ed5:;\n    // 0x402ed5\n    char v78; // 0x402a90\n    char v79 = v78;\n    char v80; // 0x402a90\n    if (v79 != 0 == (v80 != 0)) {\n        // 0x4030b5\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"cannot make both hard and symbolic links\", 5));\n      lab_0x4030ca:\n        // 0x4030ca\n        function_403c80(1);\n        // UNREACHABLE\n    }\n    int64_t v81 = v11;\n    int64_t v82; // 0x402a90\n    int64_t v83 = v82;\n    int64_t v84 = v10;\n    char v85; // 0x402a90\n    char v86 = v85;\n    char v87; // 0x402a90\n    char v88 = v87;\n    char v89; // 0x402a90\n    char v90 = v89;\n    char * v91 = v7;\n    char v92 = v6;\n    int64_t v93; // 0x402a90\n    int64_t v94; // 0x402a90\n    int32_t v95; // 0x402a90\n    if (v12 == 0) {\n        // 0x402fc8\n        v93 = 0;\n        v94 = v84;\n        if (v8 == 2 == (v95 != 2)) {\n            // 0x4030b5\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--reflink can be used only with --sparse=auto\", 5));\n            // 0x4030ca\n            function_403c80(1);\n            // UNREACHABLE\n        }\n    } else {\n        // 0x402ef0\n        if (v9 == 2) {\n            // 0x4030b5\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"options --backup and --no-clobber are mutually exclusive\", 5));\n            // 0x4030ca\n            function_403c80(1);\n            // UNREACHABLE\n        }\n        // 0x402f05\n        if (v95 != 2 && v8 == 2) {\n            // 0x4030b5\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--reflink can be used only with --sparse=auto\", 5));\n            // 0x4030ca\n            function_403c80(1);\n            // UNREACHABLE\n        }\n        char * v96 = dcgettext(NULL, \"backup type\", 5); // 0x402f1c\n        v93 = 0x100000000 * function_40a730((int64_t)v96, v13) >> 32;\n        v94 = v13;\n    }\n    // 0x402f2c\n    v2 = v93;\n    function_40a180(v14);\n    int64_t v97 = v94; // 0x402f3d\n    int64_t v98 = v14; // 0x402f3d\n    int64_t v99 = v94; // 0x402f3d\n    int64_t v100 = v14; // 0x402f3d\n    if (v5 == 1) {\n        goto lab_0x403017;\n    } else {\n        goto lab_0x402f4e;\n    }\n  lab_0x402cb2:\n    // 0x402cb2\n    v62 = v61;\n    v68 = v67;\n    v65 = v64;\n    v53 = v52;\n    v47 = v46;\n    v44 = 1;\n    v56 = v55;\n    v38 = v37;\n    v41 = v40;\n    v50 = v49;\n    v59 = v58;\n    v34 = v33;\n    v31 = v30;\n    v18 = v17;\n    v22 = v21;\n    v25 = v24;\n    v28 = v27;\n    goto lab_0x402b88;\n  lab_0x402b88:;\n    int64_t v101 = function_411340(v1, v34, \"abdfHilLnprst:uvxPRS:TZ\", &g5, 0, v31); // 0x402b9a\n    v15 = v101;\n    v26 = v28;\n    v23 = v25;\n    v20 = v22;\n    v16 = v18;\n    v29 = v31;\n    v32 = v34;\n    v57 = v59;\n    v48 = v50;\n    v39 = v41;\n    v36 = v38;\n    v54 = v56;\n    v42 = v44;\n    v45 = v47;\n    v51 = v53;\n    v63 = v65;\n    v66 = v68;\n    v60 = v62;\n    v5 = v62;\n    v6 = v68;\n    v7 = v65;\n    v78 = v53;\n    v89 = v47;\n    v87 = v44;\n    v95 = v56;\n    v8 = v38;\n    v80 = v41;\n    v85 = v50;\n    v9 = v59;\n    v10 = v34;\n    v82 = v31;\n    v11 = v18;\n    v12 = v22;\n    v13 = v25;\n    v14 = v28;\n    if ((int32_t)v101 == -1) {\n        goto lab_0x402ed5;\n    }\n    goto lab_0x402ba8;\n  lab_0x402e78:\n    // 0x402e78\n    v62 = v61;\n    v68 = v67;\n    v65 = v64;\n    v53 = v52;\n    v47 = v46;\n    v44 = v43;\n    v56 = v55;\n    v38 = v37;\n    v41 = 1;\n    v50 = v49;\n    v59 = v58;\n    v34 = v35;\n    v31 = v30;\n    v18 = v19;\n    v22 = v21;\n    v25 = v24;\n    v28 = v27;\n    goto lab_0x402b88;\n  lab_0x403017:\n    // 0x403017\n    v97 = v99;\n    v98 = v100;\n    int64_t v102 = v99; // 0x40301c\n    int64_t v103 = v100; // 0x40301c\n    if (v79 != 0 || v88 == 0) {\n        goto lab_0x403064;\n    } else {\n        goto lab_0x402f4e;\n    }\n  lab_0x402f4e:;\n    int64_t v104 = v98;\n    int64_t v105 = v97;\n    char v106; // 0x402a90\n    uint32_t v107; // 0x402f8f\n    uint64_t v108; // 0x402fab\n    if (v91 == NULL == v86 == 0) {\n        if (v106 == 0 || g53 != 0) {\n            // 0x402f8a\n            function_409500(v104, v105);\n            v107 = *(int32_t *)0x61b43c;\n            v108 = function_4041b0((int32_t)a1 - v107, 8 * (int64_t)v107 + v84, v81, v92, &v2, v83);\n            return v108 % 256 ^ 1;\n        }\n        goto lab_0x402ff5;\n    } else {\n        if (v106 != 0) {\n            if (v90 == 0) {\n                // 0x40307b\n                if (g53 != 0) {\n                    goto lab_0x402f73;\n                } else {\n                    goto lab_0x402ff5;\n                }\n            } else {\n                // 0x403042\n                error(1, (int32_t)\"cannot set target context and preserve it\" ^ (int32_t)\"cannot set target context and preserve it\", dcgettext(NULL, \"cannot set target context and preserve it\", 5));\n                v102 = (int32_t)\"cannot set target context and preserve it\" ^ (int32_t)\"cannot set target context and preserve it\";\n                v103 = 1;\n                goto lab_0x403064;\n            }\n        } else {\n            goto lab_0x402f73;\n        }\n    }\n  lab_0x403064:\n    // 0x403064\n    v97 = v102;\n    v98 = v103;\n    goto lab_0x402f4e;\n  lab_0x402ff5:\n    // 0x402ff5\n    error(1, (int32_t)\"cannot preserve security context without an SELinux-enabled kernel\" ^ (int32_t)\"cannot preserve security context without an SELinux-enabled kernel\", dcgettext(NULL, \"cannot preserve security context without an SELinux-enabled kernel\", 5));\n    v99 = (int32_t)\"cannot preserve security context without an SELinux-enabled kernel\" ^ (int32_t)\"cannot preserve security context without an SELinux-enabled kernel\";\n    v100 = 1;\n    goto lab_0x403017;\n  lab_0x402f73:\n    if (v91 == NULL) {\n        // 0x402f8a\n        function_409500(v104, v105);\n        v107 = *(int32_t *)0x61b43c;\n        v108 = function_4041b0((int32_t)a1 - v107, 8 * (int64_t)v107 + v84, v81, v92, &v2, v83);\n        return v108 % 256 ^ 1;\n    }\n    int32_t * err_num = __errno_location(); // 0x4030d4\n    *err_num = 95;\n    function_40e020((int64_t)v91);\n    error(1, *err_num, dcgettext(NULL, \"failed to set default file creation context to %s\", 5));\n    error(1, (int32_t)\"cannot preserve extended attributes, cp is built without xattr support\" ^ (int32_t)\"cannot preserve extended attributes, cp is built without xattr support\", dcgettext(NULL, \"cannot preserve extended attributes, cp is built without xattr support\", 5));\n  lab_0x403136:\n    // 0x403136\n    function_40ddd0(4, (int64_t)g80);\n    error(1, *__errno_location(), dcgettext(NULL, \"failed to access %s\", 5));\n    // 0x403177\n    format = dcgettext(NULL, \"multiple target directories specified\", 5);\n    error(1, (int32_t)\"multiple target directories specified\" ^ (int32_t)\"multiple target directories specified\", format);\n    return &g83;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4031a0",
            "funcEndAddr": "4031cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4031a0\n    int64_t v1; // 0x4031a0\n    __libc_start_main(0x402a90, (int32_t)a4, (char **)&v1, (void (*)())0x412880, (void (*)())0x4128e0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4031cb",
            "funcStartAddr": "4031cb",
            "funcEndAddr": "4031ea",
            "decompiledFuncCode": "int64_t function_4031cb(void) {\n    // 0x4031cb\n    return &g43;\n}\n"
        },
        {
            "funcName": "function_4031ea",
            "funcStartAddr": "4031ea",
            "funcEndAddr": "403221",
            "decompiledFuncCode": "int64_t function_4031ea(void) {\n    // 0x4031ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403221",
            "funcStartAddr": "403221",
            "funcEndAddr": "403278",
            "decompiledFuncCode": "int64_t function_403221(void) {\n    // 0x403221\n    if (g48 != 0) {\n        // 0x403277\n        int64_t result; // 0x403221\n        return result;\n    }\n    int64_t v1 = g49; // 0x403254\n    int64_t result2; // 0x403266\n    if (g49 >= ((int64_t)&g27 - (int64_t)&g26 >> 3) - 1) {\n        // 0x403266\n        result2 = function_4031cb();\n        g48 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g27 - (int64_t)&g26 >> 3) - 1) {\n        // 0x403256\n        v1++;\n    }\n    // 0x40324a\n    g49 = v1;\n    // 0x403266\n    result2 = function_4031cb();\n    g48 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403278",
            "funcStartAddr": "403278",
            "funcEndAddr": "40327d",
            "decompiledFuncCode": "int64_t function_403278(void) {\n    // 0x403278\n    return function_4031ea();\n}\n"
        },
        {
            "funcName": "function_403280",
            "funcStartAddr": "403280",
            "funcEndAddr": "403312",
            "decompiledFuncCode": "int64_t function_403280(int64_t a1, int64_t * a2, int32_t a3) {\n    int64_t str = function_410310(a1); // 0x40329b\n    char * found_char_pos = strchr((char *)str, 44); // 0x4032c3\n    if (found_char_pos != NULL) {\n        // 0x4032cd\n        *found_char_pos = 0;\n    }\n    char * v1 = (char)a3 == 0 ? \"--no-preserve\" : \"--preserve\"; // 0x4032f1\n    int64_t v2 = function_409ff0(v1, str, g4, (int64_t *)&g3, 4, g33); // 0x4032f1\n    uint32_t result = *(int32_t *)(4 * v2 + (int64_t)&g3); // 0x4032f6\n    if (result < 7) {\n        // 0x403304\n        return result;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403318",
            "funcStartAddr": "403318",
            "funcEndAddr": "403346",
            "decompiledFuncCode": "int64_t function_403318(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403318\n    int64_t v1; // 0x403318\n    char v2 = v1; // 0x403318\n    *(char *)(v1 + 39) = v2;\n    *(char *)(v1 + 40) = v2;\n    free((int64_t *)v1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_403350",
            "funcStartAddr": "403350",
            "funcEndAddr": "40335c",
            "decompiledFuncCode": "int64_t function_403350(void) {\n    // 0x403350\n    int64_t result; // 0x403350\n    char v1 = result; // 0x403350\n    *(char *)(result + 38) = v1;\n    *(char *)(result + 37) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403360",
            "funcStartAddr": "403360",
            "funcEndAddr": "403367",
            "decompiledFuncCode": "int64_t function_403360(void) {\n    // 0x403360\n    int64_t result; // 0x403360\n    *(char *)(result + 34) = (char)result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403370",
            "funcStartAddr": "403370",
            "funcEndAddr": "403377",
            "decompiledFuncCode": "int64_t function_403370(void) {\n    // 0x403370\n    int64_t result; // 0x403370\n    *(char *)(result + 29) = (char)result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403380",
            "funcStartAddr": "403380",
            "funcEndAddr": "403387",
            "decompiledFuncCode": "int64_t function_403380(void) {\n    // 0x403380\n    int64_t result; // 0x403380\n    *(char *)(result + 31) = (char)result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403390",
            "funcStartAddr": "403390",
            "funcEndAddr": "4033a1",
            "decompiledFuncCode": "int64_t function_403390(void) {\n    // 0x403390\n    int64_t v1; // 0x403390\n    *(char *)(v1 + 30) = (char)v1;\n    int64_t result = v1 & 0xffffffff ^ 1; // 0x403397\n    *(char *)(v1 + 32) = (char)result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4033a8",
            "funcStartAddr": "4033a8",
            "funcEndAddr": "4033de",
            "decompiledFuncCode": "int64_t function_4033a8(void) {\n    // 0x4033a8\n    int64_t v1; // 0x4033a8\n    char v2 = v1; // 0x4033aa\n    *(char *)(v1 + 30) = v2;\n    int64_t result = v1 & 0xffffffff ^ 1; // 0x4033af\n    *(char *)(v1 + 31) = v2;\n    *(char *)(v1 + 29) = v2;\n    *(char *)(v1 + 34) = v2;\n    *(char *)(v1 + 32) = (char)result;\n    if (g53 != 0) {\n        // 0x4033cf\n        *(char *)(v1 + 37) = v2;\n    }\n    // 0x4033d4\n    *(char *)(v1 + 39) = v2;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4033e0",
            "funcStartAddr": "4033e0",
            "funcEndAddr": "4034a0",
            "decompiledFuncCode": "int64_t function_4033e0(int64_t a1, int64_t * a2, char * a3) {\n    int64_t v1 = (int64_t)a2;\n    int32_t v2 = __xstat(1, (char *)a1, (struct stat *)a2); // 0x4033fe\n    if (v2 == 0) {\n        // 0x403407\n        if ((*(int32_t *)(v1 + 24) & 0xf000) == 0x4000) {\n            // 0x40341b\n            return 1;\n        }\n        // 0x40341b\n        return (int64_t)v2 % 2;\n    }\n    int32_t err_num = *__errno_location(); // 0x40342b\n    if (err_num == 0) {\n        // 0x40341b\n        return (int64_t)((*(int32_t *)(v1 + 24) & 0xf000) == 0x4000) % 2;\n    }\n    if (err_num == 2) {\n        // 0x40344e\n        *a3 = 1;\n        // 0x40341b\n        return 0;\n    }\n    // 0x40345e\n    function_40ddd0(4, a1);\n    error(1, err_num, dcgettext(NULL, \"failed to access %s\", 5));\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_4034a0",
            "funcStartAddr": "4034a0",
            "funcEndAddr": "403a45",
            "decompiledFuncCode": "int64_t function_4034a0(int64_t str, int64_t a2, int64_t a3, int64_t * a4, char * a5, int64_t a6) {\n    int64_t v1 = a3; // bp-376, 0x4034cb\n    int32_t len = strlen((char *)str); // 0x4034d2\n    int64_t v2 = (int64_t)&v1 - ((int64_t)len + 24 & -16); // 0x4034e6\n    int64_t * dest_mem = memcpy((int64_t *)(v2 + 15 & -16), (int64_t *)str, len + 1); // 0x4034f2\n    int64_t v3 = (int64_t)dest_mem; // 0x4034f2\n    int64_t v4 = function_40aa80(v3); // 0x4034fd\n    int64_t v5 = 15 - (v4 + 24 & -16) + v2 & -16; // 0x40351b\n    memcpy((int64_t *)v5, dest_mem, (int32_t)v4);\n    *(char *)(v5 + v4) = 0;\n    *a4 = 0;\n    int64_t v6; // bp-344, 0x4034a0\n    int64_t v7; // 0x4034a0\n    int32_t v8; // 0x4034a0\n    if (__xstat(1, (char *)v5, (struct stat *)&v6) == 0) {\n        // 0x403948\n        v7 = v5;\n        if ((v8 & 0xf000) == 0x4000) {\n            // 0x40395a\n            *a5 = 0;\n            // 0x4038ff\n            return 1;\n        }\n      lab_0x40397b:\n        // 0x40397b\n        function_40ddd0(4, v7);\n        error(0, (int32_t)\"%s exists but is not a directory\" ^ (int32_t)\"%s exists but is not a directory\", dcgettext(NULL, \"%s exists but is not a directory\", 5));\n        // 0x4038ff\n        return (int32_t)&g83 ^ (int32_t)&g83;\n    }\n    int64_t v9 = v3 + a2; // 0x403556\n    char * v10 = (char *)v9;\n    int64_t v11 = v9; // 0x403564\n    char * str2 = v10; // 0x403564\n    if (*v10 == 47) {\n        v11++;\n        char * v12 = (char *)v11;\n        str2 = v12;\n        while (*v12 == 47) {\n            // 0x403570\n            v11++;\n            v12 = (char *)v11;\n            str2 = v12;\n        }\n    }\n    char * found_char_pos = strchr(str2, 47); // 0x403585\n    if (found_char_pos == NULL) {\n        // 0x4038ff\n        return 1;\n    }\n    char * v13 = (char *)(a6 + 30);\n    int64_t v14 = a6 + 32;\n    int32_t v15 = v8 ^ 63;\n    char * found_char_pos2 = found_char_pos; // 0x403585\n    int64_t v16; // 0x4034a0\n    int32_t v17; // 0x4035a8\n    while (true) {\n      lab_0x403596:\n        // 0x403596\n        v16 = (int64_t)found_char_pos2;\n        *found_char_pos2 = 0;\n        v17 = __xstat(1, (char *)dest_mem, (struct stat *)&v6);\n        if (v17 != 0) {\n            goto lab_0x403640;\n        } else {\n            // 0x4035b8\n            if (*(int32_t *)(a6 + 28) >= 256) {\n                goto lab_0x403640;\n            } else {\n                goto lab_0x4035c2;\n            }\n        }\n    }\n  lab_0x403856:;\n    int64_t v18 = 20; // 0x403856\n    int32_t err_num = 20; // 0x403856\n  lab_0x40385c:\n    // 0x40385c\n    function_40ddd0(4, v9);\n    error(0, err_num, dcgettext(NULL, \"failed to get attributes of %s\", 5));\n    // 0x4038ff\n    return (int32_t)&g83 ^ (int32_t)&g83;\n  lab_0x403640:;\n    // 0x403640\n    int128_t v19; // bp-200, 0x4034a0\n    if (__xstat(1, v10, (struct stat *)&v19) == 0) {\n        if ((v8 & 0xf000) != 0x4000) {\n            // break -> 0x403856\n            goto lab_0x403856;\n        }\n    } else {\n        uint32_t v20 = *__errno_location(); // 0x403665\n        v18 = v20;\n        err_num = v20;\n        if (v20 != 0) {\n            goto lab_0x40385c;\n        }\n    }\n    int64_t v21 = function_4100e0(168); // 0x403676\n    int128_t v22 = __asm_movdqa(0); // 0x40367b\n    int128_t v23; // 0x4034a0\n    int128_t v24 = __asm_movdqa(v23); // 0x403683\n    int128_t v25 = __asm_movdqa(v23); // 0x40368b\n    int128_t v26 = __asm_movdqa(v23); // 0x403693\n    __asm_movups(*(int128_t *)v21, v22);\n    int128_t v27 = __asm_movdqa(v23); // 0x4036a1\n    int128_t v28 = __asm_movdqa(v23); // 0x4036a6\n    int128_t v29 = __asm_movdqa(v23); // 0x4036ab\n    int128_t v30 = __asm_movdqa(v23); // 0x4036b0\n    __asm_movups(*(int128_t *)(v21 + 16), v24);\n    int128_t v31 = __asm_movdqa(v23); // 0x4036b9\n    __asm_movups(*(int128_t *)(v21 + 32), v25);\n    __asm_movups(*(int128_t *)(v21 + 48), v26);\n    __asm_movups(*(int128_t *)(v21 + 64), v27);\n    __asm_movups(*(int128_t *)(v21 + 80), v28);\n    __asm_movups(*(int128_t *)(v21 + 96), v29);\n    __asm_movups(*(int128_t *)(v21 + 112), v30);\n    __asm_movups(*(int128_t *)(v21 + 128), v31);\n    char * v32 = (char *)(v21 + 144); // 0x4036ea\n    *v32 = 0;\n    *(int64_t *)(v21 + 152) = v16 - v3;\n    *a4 = v21;\n    *(int64_t *)(v21 + 160) = (int64_t)a4;\n    int64_t v33; // 0x4034a0\n    int64_t v34; // 0x4034a0\n    int32_t * v35; // 0x40370f\n    if (v17 == 0) {\n        goto lab_0x4035c2;\n    } else {\n        // 0x40370f\n        v35 = (int32_t *)(v21 + 24);\n        if ((char)function_404fc0(v9, v3, *v35, 1, a6) == 0) {\n            // 0x4038ff\n            return 0;\n        }\n        uint32_t v36 = *v35; // 0x403739\n        uint64_t v37 = (int64_t)v36; // 0x403739\n        *a5 = 1;\n        int64_t v38; // 0x4034a0\n        int64_t v39; // 0x4034a0\n        if (*(char *)(a6 + 29) == 0) {\n            // 0x4038b0\n            v39 = 0xffffffff;\n            v38 = 0;\n            if (*v13 != 0) {\n                int64_t v40 = v37 & 18; // 0x4038c6\n                v39 = v40 ^ 0xffffffff;\n                v38 = v40;\n            }\n        } else {\n            int64_t v41 = v37 % 64; // 0x40374e\n            v39 = v41 ^ 0xffffffff;\n            v38 = v41;\n        }\n        int32_t v42 = *(char *)v14 != 0 ? 511 : v36; // 0x403764\n        if (mkdir((char *)dest_mem, (int32_t)v39 % 0x1000 & v42) != 0) {\n            // 0x403a0d\n            function_40ddd0(4, v3);\n            v34 = (int64_t)\"cannot make directory %s\";\n            goto lab_0x4039dc;\n        }\n        int64_t v43 = v38;\n        if (v1 != 0) {\n            // 0x403788\n            __printf_chk(1, (char *)v1);\n        }\n        // 0x4037a1\n        if (__lxstat(1, (char *)dest_mem, (struct stat *)&v6) != 0) {\n            // 0x4039c2\n            function_40ddd0(4, v3);\n            v34 = (int64_t)\"failed to get attributes of %s\";\n            goto lab_0x4039dc;\n        }\n        // 0x4037bd\n        if (*v13 != 0) {\n            goto lab_0x403800;\n        } else {\n            // 0x4037ca\n            v33 = v43;\n            if ((v15 & (int32_t)v43) != 0) {\n                int64_t v44 = (function_4053d0(1) ^ 63) & v43; // 0x40391d\n                int32_t v45 = v44; // 0x403924\n                v33 = v44;\n                if ((v15 & v45) == 0) {\n                    goto lab_0x4037d7;\n                } else {\n                    // 0x40392d\n                    *v32 = 1;\n                    *v35 = v8 | v45;\n                    goto lab_0x403800;\n                }\n            } else {\n                goto lab_0x4037d7;\n            }\n        }\n    }\n  lab_0x4035c2:\n    // 0x4035c2\n    if ((char)function_404fc0(v9, v3, 0, 0, a6) == 0) {\n        // 0x4038ff\n        return 0;\n    }\n    // 0x4035e0\n    v7 = v3;\n    if ((v8 & 0xf000) != 0x4000) {\n        goto lab_0x40397b;\n    }\n    // 0x4035f6\n    *a5 = 0;\n    goto lab_0x403600;\n  lab_0x403600:\n    // 0x403600\n    if ((*(int64_t *)v14 & 0xff000000ff00) != 0) {\n        // 0x4038d8\n        if ((char)function_405090(v3, *(char *)(a6 + 37), 0, a6) == 0) {\n            // 0x4038f2\n            if (*(char *)(a6 + 38) != 0) {\n                // 0x4038ff\n                return 0;\n            }\n        }\n    }\n    goto lab_0x403614;\n  lab_0x403800:\n    if ((v8 & 448) == 448) {\n        goto lab_0x403824;\n    } else {\n        goto lab_0x40380e;\n    }\n  lab_0x403614:;\n    int64_t v46 = v16 + 1; // 0x403614\n    char * v47 = (char *)v46;\n    *found_char_pos2 = 47;\n    char * str3 = v47; // 0x40361f\n    int64_t v48 = v46; // 0x40361f\n    if (*v47 == 47) {\n        int64_t v49 = v48 + 1; // 0x403628\n        char * v50 = (char *)v49;\n        str3 = v50;\n        v48 = v49;\n        while (*v50 == 47) {\n            // 0x403628\n            v49 = v48 + 1;\n            v50 = (char *)v49;\n            str3 = v50;\n            v48 = v49;\n        }\n    }\n    // 0x403580\n    found_char_pos2 = strchr(str3, 47);\n    if (found_char_pos2 == NULL) {\n        // 0x4038ff\n        return 1;\n    }\n    goto lab_0x403596;\n  lab_0x403824:\n    // 0x403824\n    if (*(char *)&v18 != 0) {\n        goto lab_0x403614;\n    } else {\n        goto lab_0x403600;\n    }\n  lab_0x40380e:\n    // 0x40380e\n    if (chmod((char *)dest_mem, v8 || 448) != 0) {\n        // 0x403a29\n        function_40ddd0(4, v3);\n        v34 = (int64_t)\"setting permissions for %s\";\n        goto lab_0x4039dc;\n    }\n    goto lab_0x403824;\n  lab_0x4037d7:\n    if ((v8 & 448) == 448) {\n        goto lab_0x403824;\n    } else {\n        // 0x403800\n        *v32 = 1;\n        *v35 = v8 | (int32_t)v33;\n        goto lab_0x40380e;\n    }\n  lab_0x4039dc:\n    // 0x4039dc\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v34, 5));\n    return (int32_t)&g83 ^ (int32_t)&g83;\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403c74",
            "decompiledFuncCode": "int64_t function_403a50(int64_t str, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t len = strlen((char *)str); // 0x403a6d\n    int64_t v1; // bp-88, 0x403a50\n    int64_t * dest_mem = memcpy((int64_t *)((int64_t)&v1 + 15 - ((int64_t)len + 24 & -16) & -16), (int64_t *)str, len + 1); // 0x403a8d\n    if (a3 == 0) {\n        // 0x403c46\n        return 1;\n    }\n    int64_t v2 = (int64_t)dest_mem; // 0x403a8d\n    char * v3 = (char *)(a4 + 30);\n    int64_t v4 = a3; // 0x403ada\n    char v5; // 0x403a50\n    int64_t v6; // 0x403a50\n    int64_t v7; // 0x403a50\n    int64_t v8; // 0x403a50\n    int64_t * v9; // 0x403aea\n    while (true) {\n      lab_0x403aea:\n        // 0x403aea\n        v7 = v4;\n        v9 = (int64_t *)(v7 + 152);\n        *(char *)(*v9 + v2) = 0;\n        if (*(char *)(a4 + 31) != 0) {\n            // 0x403afd\n            v1 = *(int64_t *)(v7 + 72);\n            if ((int32_t)function_40f8a0(v2, &v1) != 0) {\n                // break -> 0x403b31\n                break;\n            }\n        }\n        // 0x403aa8\n        if (*(char *)(a4 + 29) != 0) {\n            int32_t * group = (int32_t *)(v7 + 32); // 0x403b78\n            if (lchown((char *)dest_mem, *(int32_t *)(v7 + 28), *group) == 0) {\n                goto lab_0x403ab3;\n            } else {\n                int64_t v10 = function_4051b0(a4); // 0x403b91\n                if ((char)v10 == 0) {\n                    // 0x403c58\n                    function_40ddd0(4, v2);\n                    v6 = v10 & 0xffffffff;\n                    v8 = (int64_t)\"failed to preserve ownership for %s\";\n                    goto lab_0x403c15;\n                }\n                // 0x403ba1\n                lchown((char *)dest_mem, -1, *group);\n                v5 = 0;\n                if (*v3 == 0) {\n                    goto lab_0x403ac1;\n                } else {\n                    goto lab_0x403bc0;\n                }\n            }\n        } else {\n            goto lab_0x403ab3;\n        }\n    }\n    // 0x403b31\n    function_40ddd0(4, v2);\n    error(0, *__errno_location(), dcgettext(NULL, \"failed to preserve times for %s\", 5));\n    // 0x403c46\n    return 0;\n  lab_0x403ab3:;\n    char v11 = *v3; // 0x403ab3\n    v5 = v11;\n    if (v11 != 0) {\n        goto lab_0x403bc0;\n    } else {\n        goto lab_0x403ac1;\n    }\n  lab_0x403bc0:\n    // 0x403bc0\n    if ((int32_t)function_409b40(v2 + a2, 0xffffffff, v2) != 0) {\n        // 0x403c46\n        return 0;\n    }\n    goto lab_0x403ace;\n  lab_0x403ac1:\n    // 0x403ac1\n    if (*(char *)(v7 + 144) != 0) {\n        // 0x403be8\n        if (chmod((char *)dest_mem, *(int32_t *)(v7 + 24)) != 0) {\n            // 0x403bfb\n            function_40ddd0(4, v2);\n            v6 = v5;\n            v8 = (int64_t)\"failed to preserve permissions for %s\";\n            goto lab_0x403c15;\n        }\n    }\n    goto lab_0x403ace;\n  lab_0x403ace:\n    // 0x403ace\n    *(char *)(*v9 + v2) = 47;\n    v4 = *(int64_t *)(v7 + 160);\n    int64_t v12 = 1; // 0x403ae4\n    if (v4 == 0) {\n      lab_0x403c46:\n        // 0x403c46\n        return v12 & 0xffffffff;\n    }\n    goto lab_0x403aea;\n  lab_0x403c15:\n    // 0x403c15\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v8, 5));\n    v12 = v6;\n    goto lab_0x403c46;\n}\n"
        },
        {
            "funcName": "function_403c80",
            "funcStartAddr": "403c80",
            "funcEndAddr": "4041a5",
            "decompiledFuncCode": "int64_t function_403c80(int32_t status) {\n    // 0x403c80\n    if (status != 0) {\n        // 0x403c9a\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x403cbf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x403cc6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [-T] SOURCE DEST\\n  or:  %s [OPTION]... SOURCE... DIRECTORY\\n  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -a, --archive                same as -dR --preserve=all\\n      --attributes-only        don't copy the file data, just the attributes\\n      --backup[=CONTROL]       make a backup of each existing destination file\\n  -b                           like --backup but does not accept an argument\\n      --copy-contents          copy contents of special files when recursive\\n  -d                           same as --no-dereference --preserve=links\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -f, --force                  if an existing destination file cannot be\\n                                 opened, remove it and try again (this option\\n                                 is ignored when the -n option is also used)\\n  -i, --interactive            prompt before overwrite (overrides a previous -n\\n                                  option)\\n  -H                           follow command-line symbolic links in SOURCE\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -l, --link                   hard link files instead of copying\\n  -L, --dereference            always follow symbolic links in SOURCE\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -n, --no-clobber             do not overwrite an existing file (overrides\\n                                 a previous -i option)\\n  -P, --no-dereference         never follow symbolic links in SOURCE\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -p                           same as --preserve=mode,ownership,timestamps\\n      --preserve[=ATTR_LIST]   preserve the specified attributes (default:\\n                                 mode,ownership,timestamps), if possible\\n                                 additional attributes: context, links, xattr,\\n                                 all\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --no-preserve=ATTR_LIST  don't preserve the specified attributes\\n      --parents                use full source file name under DIRECTORY\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -R, -r, --recursive          copy directories recursively\\n      --reflink[=WHEN]         control clone/CoW copies. See below\\n      --remove-destination     remove each existing destination file before\\n                                 attempting to open it (contrast with --force)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --sparse=WHEN            control creation of sparse files. See below\\n      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\\n                                 argument\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -s, --symbolic-link          make symbolic links instead of copying\\n  -S, --suffix=SUFFIX          override the usual backup suffix\\n  -t, --target-directory=DIRECTORY  copy all SOURCE arguments into DIRECTORY\\n  -T, --no-target-directory    treat DEST as a normal file\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -u, --update                 copy only when the SOURCE file is newer\\n                                 than the destination file or when the\\n                                 destination file is missing\\n  -v, --verbose                explain what is being done\\n  -x, --one-file-system        stay on this file system\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -Z                           set SELinux security context of destination\\n                                 file to default type\\n      --context[=CTX]          like -Z, or if CTX is specified then set the\\n                                 SELinux or SMACK security context to CTX\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nBy default, sparse SOURCE files are detected by a crude heuristic and the\\ncorresponding DEST file is made sparse as well.  That is the behavior\\nselected by --sparse=auto.  Specify --sparse=always to create a sparse DEST\\nfile whenever the SOURCE file contains a long enough sequence of zero bytes.\\nUse --sparse=never to inhibit creation of sparse files.\\n\\nWhen --reflink[=always] is specified, perform a lightweight copy, where the\\ndata blocks are copied only when modified.  If this is not possible the copy\\nfails, or if --reflink=auto is specified, fall back to a standard copy.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\nThe version control method may be selected via the --backup option or through\\nthe VERSION_CONTROL environment variable.  Here are the values:\\n\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  none, off       never make backups (even if --backup is given)\\n  numbered, t     make numbered backups\\n  existing, nil   numbered if numbered backups exist, simple otherwise\\n  simple, never   always make simple backups\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nAs a special case, cp makes a backup of SOURCE when the force and backup\\noptions are given and SOURCE and DEST are the same name for an existing,\\nregular file.\\n\", 5), g44);\n    int64_t v1 = &g1; // bp-136, 0x403f83\n    bool v2; // 0x403c80\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x404008\n    int64_t v6 = *(int64_t *)v5; // 0x40400c\n    int64_t v7 = 3; // 0x404012\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"cp\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x40401e\n        char v11 = *(char *)v9; // 0x40401e\n        char v12 = v11; // 0x40401e\n        bool v13 = false; // 0x40401e\n        while (v10 == v11) {\n            // 0x404014\n            v7--;\n            int64_t v14 = v9 + v3; // 0x40401e\n            int64_t v15 = v8 + v3; // 0x40401e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x40402a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x40402a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40413c;\n        } else {\n            // 0x404126\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40417b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40408c;\n            } else {\n                goto lab_0x40413c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40408c;\n        } else {\n            // 0x404072\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40417b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40408c;\n            } else {\n                goto lab_0x40408c;\n            }\n        }\n    }\n  lab_0x40413c:\n    // 0x40413c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4040cc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x403cbf\n    exit(status);\n    // UNREACHABLE\n  lab_0x40408c:\n    // 0x40408c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4040cc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x403cbf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4041b0",
            "funcStartAddr": "4041b0",
            "funcEndAddr": "40463c",
            "decompiledFuncCode": "int64_t function_4041b0(int32_t a1, int64_t a2, int64_t a3, char a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = a1;\n    char v2 = 0; // bp-218, 0x4041d9\n    if ((int64_t)(a3 == 0) >= v1) {\n        // 0x4045ed\n        if (a1 != 1) {\n            // 0x404619\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing file operand\", 5));\n            // 0x4045e3\n            function_403c80(1);\n            // UNREACHABLE\n        }\n        // 0x4045f3\n        function_40ddd0(4, a2);\n        // 0x4045cb\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing destination file operand after %s\", 5));\n        // 0x4045e3\n        function_403c80(1);\n        // UNREACHABLE\n    }\n    int64_t v3 = (int64_t)a5;\n    int64_t v4; // 0x4041b0\n    int64_t v5; // 0x4041b0\n    int64_t v6; // 0x4041b0\n    int64_t v7; // 0x4041b0\n    int64_t v8; // 0x4041b0\n    int64_t v9; // 0x4041b0\n    int64_t v10; // 0x4041b0\n    int64_t v11; // 0x4041b0\n    int64_t v12; // 0x4041b0\n    int64_t v13; // bp-200, 0x4041b0\n    int64_t v14; // 0x4041b0\n    if (a4 != 0) {\n        if (a3 != 0) {\n            // 0x40458e\n            error(1, (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\" ^ (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\", dcgettext(NULL, \"cannot combine --target-directory (-t) and --no-target-directory (-T)\", 5));\n            v12 = (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\" ^ (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\";\n            goto lab_0x4045b0;\n        } else {\n            // 0x4043cf\n            v12 = a2;\n            if (a1 > 2) {\n                goto lab_0x4045b0;\n            } else {\n                // 0x4043d9\n                function_4033e0(*(int64_t *)(a2 - 8 + 8 * v1), &v13, &v2);\n                v8 = &v2;\n                v6 = a2;\n                goto lab_0x4043f1;\n            }\n        }\n    } else {\n        // 0x4041f4\n        v14 = a3;\n        v5 = a2;\n        v10 = a2;\n        v4 = v1;\n        if (a3 == 0) {\n            // 0x404501\n            v8 = 0;\n            v6 = a2;\n            if (a1 == 1) {\n                goto lab_0x4043f1;\n            } else {\n                int64_t v15 = &v2; // 0x40450e\n                int64_t * v16 = (int64_t *)(a2 - 8 + 8 * v1); // 0x404521\n                int64_t v17 = function_4033e0(*v16, &v13, &v2); // 0x404525\n                v9 = v15;\n                v7 = a2;\n                v11 = &v13;\n                if ((char)v17 != 0) {\n                    goto lab_0x40456e;\n                } else {\n                    // 0x40452e\n                    v8 = v15;\n                    v6 = a2;\n                    if (a1 == 2) {\n                        goto lab_0x4043f1;\n                    } else {\n                        int64_t v18 = function_40ddd0(4, *v16); // 0x404541\n                        char * format = dcgettext(NULL, \"target %s is not a directory\", 5); // 0x404555\n                        error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", format);\n                        v9 = (int64_t)format;\n                        v7 = v18;\n                        v11 = (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\";\n                        goto lab_0x40456e;\n                    }\n                }\n            }\n        } else {\n            goto lab_0x404202;\n        }\n    }\n  lab_0x404367:;\n    // 0x404367\n    int64_t v19; // 0x4041b0\n    int64_t v20 = v19;\n    int64_t v21; // 0x4041b0\n    int64_t v22; // bp-217, 0x4041b0\n    int64_t str; // 0x4042e0\n    int64_t v23 = function_409280(str, v20, v2, v3, &v22, 0) & v21; // 0x404386\n    int64_t v24 = v20; // 0x404390\n    int64_t v25 = v23; // 0x404390\n    int64_t v26; // 0x4041b0\n    int64_t v27; // 0x4041b0\n    int64_t v28; // bp-208, 0x4041b0\n    int64_t v29; // bp-216, 0x4041b0\n    if (g52 == 0) {\n        goto lab_0x4042c0;\n    } else {\n        int64_t v30 = function_403a50(v20, v28 - v20, v29, v3); // 0x4043ad\n        v26 = v20;\n        v27 = v30 & v23;\n        goto lab_0x4042b8;\n    }\n  lab_0x4042b8:;\n    int64_t v31 = v27;\n    int64_t v32 = v26;\n    v24 = v32;\n    v25 = v31;\n    if (g52 != 0) {\n        // 0x4044b0\n        v24 = v32;\n        v25 = v31;\n        if (v29 != 0) {\n            int64_t v33 = v29;\n            v29 = *(int64_t *)(v33 + 160);\n            free((int64_t *)v33);\n            v24 = v32;\n            v25 = v31;\n            while (v29 != 0) {\n                // 0x4044c0\n                v33 = v29;\n                v29 = *(int64_t *)(v33 + 160);\n                free((int64_t *)v33);\n                v24 = v32;\n                v25 = v31;\n            }\n        }\n    }\n    goto lab_0x4042c0;\n  lab_0x4042c0:;\n    // 0x4042c0\n    int64_t v34; // 0x4041b0\n    int64_t v35 = v34 + 8; // 0x4042c3\n    free((int64_t *)v24);\n    v34 = v35;\n    int64_t v36; // 0x4041b0\n    int64_t v37 = v36; // 0x4042d3\n    int64_t v38 = v25; // 0x4042d3\n    int64_t v39 = v25; // 0x4042d3\n    int64_t v40; // bp-248, 0x4041b0\n    if (v40 == v35) {\n        // break -> 0x404488\n        goto lab_0x404488;\n    }\n    goto lab_0x4042d9;\n  lab_0x404202:\n    // 0x404202\n    if ((int32_t)v4 != 1) {\n        // 0x404208\n        function_405110(v3, v10);\n        function_405140(v3, v10);\n    }\n    // 0x404218\n    v40 = v5 + 8 + (8 * v4 + 0x7fffffff8 & 0x7fffffff8);\n    bool v56; // 0x4041b0\n    int64_t v53 = v56 ? -1 : 1;\n    v34 = v5;\n    v37 = &v40;\n    v38 = 1;\n    while (true) {\n      lab_0x4042d9:\n        // 0x4042d9\n        v21 = v38;\n        str = *(int64_t *)v34;\n        v28 = 0;\n        if (g51 != 0) {\n            // 0x4044a0\n            function_40abd0(str);\n        }\n        int32_t len = strlen((char *)str); // 0x4042f7\n        v36 = v37 - ((int64_t)len + 24 & -16);\n        int64_t dest_mem = (int64_t)memcpy((int64_t *)(v36 + 15 & -16), (int64_t *)str, len + 1);\n        if (g52 != 0) {\n            // 0x404238\n            function_40abd0(dest_mem);\n            int64_t v41 = function_40af00(); // 0x404268\n            int64_t v42 = *(char *)(v3 + 46) == 0 ? 0 : (int64_t)\"%s -> %s\\n\"; // 0x404290\n            int64_t v43 = function_4034a0(v41, v28 - v41, v42, &v29, &v2, v3); // 0x4042a1\n            v26 = v41;\n            v27 = 0;\n            v19 = v41;\n            if ((char)v43 != 0) {\n                goto lab_0x404367;\n            } else {\n                goto lab_0x4042b8;\n            }\n        } else {\n            int64_t v44 = function_40ab40(dest_mem, str); // 0x40432c\n            function_40abd0(v44);\n            int64_t v45 = 3; // 0x404349\n            int64_t v46 = v44;\n            int64_t v47 = (int64_t)\"..\";\n            unsigned char v48 = *(char *)v46; // 0x404349\n            char v49 = *(char *)v47; // 0x404349\n            char v50 = v49; // 0x404349\n            bool v51 = false; // 0x404349\n            while (v48 == v49) {\n                v45--;\n                int64_t v52 = v47 + v53; // 0x404349\n                int64_t v54 = v46 + v53; // 0x404349\n                v50 = v48;\n                v51 = true;\n                if (v45 == 0) {\n                    // break -> \n                    break;\n                }\n                v46 = v54;\n                v47 = v52;\n                v48 = *(char *)v46;\n                v49 = *(char *)v47;\n                v50 = v49;\n                v51 = false;\n            }\n            unsigned char v55 = v50;\n            if ((v48 >= v55 && !v51) != v48 < v55) {\n                // 0x4044e8\n                v19 = function_40af00();\n            } else {\n                // 0x404358\n                v19 = function_410310(v14);\n            }\n            goto lab_0x404367;\n        }\n    }\n  lab_0x404488:\n    // 0x404488\n    return v39 & 0xffffffff;\n  lab_0x4045b0:\n    // 0x4045b0\n    function_40ddd0(4, *(int64_t *)(v12 + 16));\n    // 0x4045cb\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"extra operand %s\", 5));\n    // 0x4045e3\n    function_403c80(1);\n    // UNREACHABLE\n  lab_0x4043f1:;\n    int64_t str2 = *(int64_t *)v6; // 0x4043f8\n    int64_t str3 = *(int64_t *)(v6 + 8); // 0x4043fb\n    if (g52 != 0) {\n        // 0x404619\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"with --parents, the destination must be a directory\", 5));\n        // 0x4045e3\n        function_403c80(1);\n        // UNREACHABLE\n    }\n    int64_t v57 = str3; // 0x40440a\n    int64_t v58 = v3; // 0x40440a\n    if (*(char *)(v3 + 22) != 0) {\n        // 0x40440c\n        v57 = str3;\n        v58 = v3;\n        if ((int32_t)v3 != 0) {\n            int32_t strcmp_rc = strcmp((char *)str2, (char *)str3); // 0x40441a\n            v57 = str3;\n            v58 = v3;\n            if (strcmp_rc == 0) {\n                // 0x404423\n                v57 = str3;\n                v58 = v3;\n                if (v2 == 0) {\n                    // 0x40442c\n                    v57 = str3;\n                    v58 = v3;\n                    int32_t v59; // 0x4041b0\n                    if ((v59 & 0xf000) == 0x8000) {\n                        int64_t v60 = function_40a6f0(str3, v3 & 0xffffffff, v8); // 0x404444\n                        __asm_rep_movsd_memcpy((char *)&g50, (char *)a5, 18);\n                        *(int32_t *)&g50 = 0;\n                        v57 = v60;\n                        v58 = (int64_t)&g50;\n                    }\n                }\n            }\n        }\n    }\n    // 0x404488\n    return function_409280(str2, v57, 0, v58, &v28, 0) & 0xffffffff & 0xffffffff;\n  lab_0x40456e:;\n    int64_t v61 = v1 + 0xffffffff; // 0x40456e\n    int64_t v62 = *(int64_t *)(v7 + (0x100000000 * v61 >> 29)); // 0x404575\n    v14 = v62;\n    v5 = v7;\n    v10 = v11;\n    v4 = v61 & 0xffffffff;\n    v8 = v9;\n    v6 = v7;\n    if (v62 != 0) {\n        goto lab_0x404202;\n    } else {\n        goto lab_0x4043f1;\n    }\n}\n"
        },
        {
            "funcName": "function_404640",
            "funcStartAddr": "404640",
            "funcEndAddr": "404684",
            "decompiledFuncCode": "int64_t function_404640(int64_t a1, int32_t a2) {\n    if ((a2 & 0xf000) == 0xa000 || (char)function_4100a0() != 0) {\n        // 0x40464e\n        return 1;\n    }\n    int32_t v1 = euidaccess((char *)a1, 2); // 0x404678\n    return (int64_t)(v1 & -256) | (int64_t)(v1 == 0);\n}\n"
        },
        {
            "funcName": "function_404690",
            "funcStartAddr": "404690",
            "funcEndAddr": "404732",
            "decompiledFuncCode": "int64_t function_404690(int64_t a1, uint64_t a2) {\n    int64_t v1 = g55; // 0x4046a2\n    if (g55 == 0) {\n        int64_t * mem = calloc(g31, 1); // 0x404704\n        if (mem == NULL) {\n            // 0x404717\n            g55 = &g54;\n            g31 = 1024;\n            v1 = &g54;\n        } else {\n            int64_t v2 = (int64_t)mem; // 0x404704\n            g55 = v2;\n            v1 = v2;\n        }\n    }\n    // 0x4046a4\n    if (a2 == 0) {\n        // 0x4046de\n        return 1;\n    }\n    int64_t v3 = a1 & 0xffffffff; // 0x40469a\n    uint64_t v4 = (int64_t)g31; // 0x4046b5\n    int64_t v5 = v4 > a2 ? a2 : v4; // 0x4046c9\n    if (function_40b000(v3, v1, v5) != v5) {\n        // 0x4046de\n        return 0;\n    }\n    int64_t v6 = a2; // 0x4046dc\n    v6 -= v5;\n    int64_t result = 1; // 0x4046b3\n    while (v6 != 0) {\n        uint64_t v7 = (int64_t)g31; // 0x4046b5\n        int64_t v8 = v6 < v7 ? v6 : v7; // 0x4046c9\n        result = 0;\n        if (function_40b000(v3, g55, v8) != v8) {\n            // break -> 0x4046de\n            break;\n        }\n        v6 -= v8;\n        result = 1;\n    }\n    // 0x4046de\n    return result;\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "404777",
            "decompiledFuncCode": "int64_t function_404740(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = fallocate((int32_t)a1, 3, (int32_t)a2, (int32_t)a3); // 0x40474c\n    int64_t result = v1; // 0x404751\n    if (v1 >= 0) {\n        // 0x404757\n        return result;\n    }\n    int32_t v2 = *__errno_location(); // 0x404765\n    return v2 != 38 == (v2 != 95) ? result : 0;\n}\n"
        },
        {
            "funcName": "function_404780",
            "funcStartAddr": "404780",
            "funcEndAddr": "40479d",
            "decompiledFuncCode": "int64_t function_404780(int64_t a1, int64_t path, int64_t mode) {\n    int32_t fd = a1; // 0x404785\n    if (fd >= 0) {\n        // 0x404798\n        return fchmod(fd, (int32_t)mode);\n    }\n    // 0x404789\n    return chmod((char *)path, (int32_t)mode);\n}\n"
        },
        {
            "funcName": "function_4047a0",
            "funcStartAddr": "4047a0",
            "funcEndAddr": "4047e0",
            "decompiledFuncCode": "int64_t function_4047a0(int64_t a1) {\n    int32_t * err_num = __errno_location(); // 0x4047a1\n    *err_num = 95;\n    error(1, *err_num, dcgettext(NULL, \"failed to restore the default file creation context\", 5));\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_4047e0",
            "funcStartAddr": "4047e0",
            "funcEndAddr": "40488e",
            "decompiledFuncCode": "int64_t function_4047e0(int64_t a1, int64_t a2, char a3) {\n    int64_t v1 = function_40dcf0(1, 4, a2); // 0x4047f7\n    __printf_chk(1, \"%s -> %s\", (char *)function_40dcf0(0, 4, a1), (char *)v1);\n    if (a3 != 0) {\n        // 0x40482a\n        function_40ddd0(4, (int64_t)a3);\n        __printf_chk(1, dcgettext(NULL, \" (backup: %s)\", 5));\n    }\n    int64_t v2 = (int64_t)g44; // 0x40485d\n    int64_t * v3 = (int64_t *)(v2 + 40); // 0x404864\n    uint64_t result = *v3; // 0x404864\n    if (result >= *(int64_t *)(v2 + 48)) {\n        // 0x404880\n        return __overflow(g44, 10);\n    }\n    // 0x40486e\n    *v3 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404890",
            "funcStartAddr": "404890",
            "funcEndAddr": "4049bc",
            "decompiledFuncCode": "int64_t function_404890(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404890\n    int64_t v1; // 0x404890\n    int32_t v2 = v1;\n    if ((char)function_404640(a2, v2) != 0) {\n        // 0x404950\n        function_40ddd0(4, a2);\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: overwrite %s? \", 5));\n        return function_410370();\n    }\n    // 0x4048b5\n    int64_t v3; // bp-52, 0x404890\n    function_40ad70(v2, &v3);\n    function_40ddd0(4, a2);\n    if (*(char *)(a1 + 24) == 0) {\n        // 0x4048f4\n        if ((*(int32_t *)(a1 + 20) & 0xffff00) == 0) {\n            // 0x404912\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: unwritable %s (mode %04lo, %s); try anyway? \", 5));\n            return function_410370();\n        }\n    }\n    // 0x404912\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: replace %s, overriding mode %04lo (%s)? \", 5));\n    return function_410370();\n}\n"
        },
        {
            "funcName": "function_4049c0",
            "funcStartAddr": "4049c0",
            "funcEndAddr": "404ac3",
            "decompiledFuncCode": "int64_t function_4049c0(int64_t a1, int64_t a2, uint64_t a3, char a4, int32_t a5) {\n    int32_t v1 = function_409900(0xffffff9c, a1, 0xffffff9c, a2, 1024 * (int32_t)(bool)((char)a5 != 0), a3 % 256); // 0x4049f7\n    if (v1 < 0) {\n        // 0x404a60\n        function_40dcf0(1, 4, a1);\n        function_40dcf0(0, 4, a2);\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot create hard link %s to %s\", 5));\n        return 0;\n    }\n    unsigned char v2 = (char)(v1 != 0) & a4; // 0x4049fe\n    if (v2 == 0) {\n        // 0x404a03\n        return 1;\n    }\n    // 0x404a18\n    function_40ddd0(4, a2);\n    __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n    return a1 & 0xffffff00 | (int64_t)v2;\n}\n"
        },
        {
            "funcName": "function_404ad0",
            "funcStartAddr": "404ad0",
            "funcEndAddr": "404b87",
            "decompiledFuncCode": "int64_t function_404ad0(uint32_t fd, int64_t a2, char a3, int64_t offset) {\n    int32_t v1 = lseek(fd, (int32_t)offset, SEEK_CUR); // 0x404aed\n    int64_t v2; // 0x404ad0\n    if (v1 < 0) {\n        // 0x404b40\n        function_40ddd0(4, a2);\n        v2 = (int64_t)\"cannot lseek %s\";\n    } else {\n        if (a3 == 0 || (int32_t)function_404740((int64_t)fd, (int64_t)v1 - offset, offset) >= 0) {\n            // 0x404afc\n            return 1;\n        }\n        // 0x404b24\n        function_40ddd0(4, a2);\n        v2 = (int64_t)\"error deallocating %s\";\n    }\n    // 0x404b5a\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v2, 5));\n    return (int32_t)&g83 ^ (int32_t)&g83;\n}\n"
        },
        {
            "funcName": "function_404b90",
            "funcStartAddr": "404b90",
            "funcEndAddr": "404fb3",
            "decompiledFuncCode": "int64_t function_404b90(char fd, int64_t a2, int64_t buf, uint64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10, int64_t a11) {\n    char * v1 = (char *)a11; // 0x404bc8\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)a10; // 0x404be8\n    *v2 = 0;\n    if (a9 == 0) {\n        // 0x404c99\n        return 1;\n    }\n    int64_t v3 = 0x100000000 * a2 >> 32; // 0x404c1f\n    int32_t v4 = v3;\n    char v5 = a6;\n    int64_t v6 = a9; // 0x404c27\n    int64_t v7 = 0; // 0x404c27\n    int64_t v8 = 0; // 0x404c27\n    char v9; // 0x404b90\n    int64_t v10; // 0x404b90\n    int64_t v11; // 0x404b90\n    int64_t v12; // 0x404b90\n    uint64_t v13; // 0x404b90\n    int64_t v14; // 0x404b90\n    int64_t v15; // 0x404b90\n    int64_t v16; // 0x404b90\n    int64_t v17; // 0x404b90\n    int64_t v18; // 0x404b90\n    int64_t result; // 0x404b90\n    int64_t v19; // 0x404b90\n    int64_t v20; // 0x404b90\n    int64_t v21; // 0x404b90\n    int64_t v22; // 0x404b90\n    int64_t v23; // 0x404b90\n    int64_t v24; // 0x404b90\n    int64_t v25; // 0x404b90\n    int64_t v26; // 0x404b90\n    int64_t v27; // 0x404b90\n    int64_t v28; // 0x404b90\n    int64_t v29; // 0x404b90\n    int64_t v30; // 0x404b90\n    int64_t v31; // 0x404b90\n    int64_t v32; // 0x404b90\n    int64_t v33; // 0x404b90\n    uint64_t v34; // 0x404b90\n    int64_t v35; // 0x404b90\n    uint64_t v36; // 0x404b90\n    int64_t v37; // 0x404c46\n    int64_t v38; // 0x404ce3\n    while (true) {\n      lab_0x404c2c:\n        // 0x404c2c\n        v18 = v8;\n        v15 = v7;\n        v36 = v6;\n        int32_t nbyte = v36 < a4 ? v36 : a4; // 0x404c46\n        int32_t v39 = read((int32_t)fd, (int64_t *)buf, nbyte); // 0x404c46\n        while (v39 < 0) {\n            int32_t * err_num = __errno_location(); // 0x404c55\n            if (*err_num != 4) {\n                // 0x404c5f\n                function_40ddd0(4, a7);\n                error(0, *err_num, dcgettext(NULL, \"error reading %s\", 5));\n                result = 0;\n                return result;\n            }\n            v39 = read((int32_t)fd, (int64_t *)buf, nbyte);\n        }\n        if (v39 == 0) {\n            // break -> 0x404cb0\n            break;\n        }\n        // 0x404cb6\n        v37 = v39;\n        *v2 = *v2 + v37;\n        int64_t v40 = a5 == 0 ? a4 : a5; // 0x404cdb\n        int64_t v41 = v25; // 0x404cdb\n        int64_t v42 = buf; // 0x404cdb\n        int64_t v43 = v37; // 0x404cdb\n        int64_t v44 = buf; // 0x404cdb\n        int64_t v45 = v15; // 0x404cdb\n        int64_t v46 = v18; // 0x404cdb\n        while (true) {\n            // 0x404ce0\n            v14 = v44;\n            v13 = v43;\n            int64_t * str = (int64_t *)v14;\n            v33 = v40;\n            v28 = v41;\n            v10 = v42;\n            v16 = v45;\n            v19 = v46;\n            while (true) {\n              lab_0x404ce0:\n                // 0x404ce0\n                v20 = v19;\n                v17 = v16;\n                v11 = v10;\n                v34 = v33;\n                v38 = v34 > v13 ? v13 : v34;\n                int64_t v47 = v28 & -256; // 0x404cea\n                int64_t v48 = v47 | (int64_t)!((a5 == 0 | v38 == 0)); // 0x404cee\n                int64_t v49 = v38; // 0x404cf3\n                int64_t v50 = v14; // 0x404cf3\n                if (a5 == 0 || v38 == 0) {\n                    char v51 = v17;\n                    int64_t v52 = v17 & 0xffffffff; // 0x404dce\n                    v9 = v51;\n                    v30 = v52;\n                    v32 = v52;\n                    if (v38 != 0 == ((v51 ^ 1) & (char)(v13 <= v34)) == 0) {\n                        // break -> 0x404e49\n                        break;\n                    }\n                    goto lab_0x404de0;\n                } else {\n                    int64_t v53 = v50;\n                    while (*(char *)v53 == 0) {\n                        int64_t n = v49 - 1; // 0x404d0c\n                        if (n == 0) {\n                            // 0x404e30\n                            v31 = v48;\n                            v23 = (v17 ^ 1) & (int64_t)(v20 != 0);\n                            goto lab_0x404e40;\n                        }\n                        int64_t str2 = v53 + 1; // 0x404d08\n                        v49 = n;\n                        v50 = str2;\n                        if (n % 16 == 0) {\n                            int32_t memcmp_rc = memcmp(str, (int64_t *)str2, (int32_t)n); // 0x404d23\n                            int64_t v54 = v47 | (int64_t)(memcmp_rc == 0); // 0x404d2f\n                            v24 = memcmp_rc != 0;\n                            v35 = v54 ^ v17;\n                            v29 = v54;\n                            goto lab_0x404d3d;\n                        }\n                        v53 = v50;\n                    }\n                    // 0x404f10\n                    v24 = v48 & 0xffffff01;\n                    v35 = v17;\n                    v29 = 0;\n                    goto lab_0x404d3d;\n                }\n            }\n          lab_0x404e49:\n            if (0x7fffffffffffffff - v38 < v20) {\n                // 0x404ed0\n                function_40ddd0(4, a7);\n                error(0, (int32_t)\"overflow reading %s\" ^ (int32_t)\"overflow reading %s\", dcgettext(NULL, \"overflow reading %s\", 5));\n                result = 0;\n                return result;\n            }\n            // 0x404e5b\n            v26 = v32;\n            v12 = v11;\n            v21 = v20 + v38;\n          lab_0x404e67_2:\n            // 0x404e67\n            v46 = v21;\n            v42 = v12;\n            v41 = v26;\n            v45 = v41 & 0xffffffff;\n            v43 = v13 - v38;\n            v40 = v38;\n            v44 = v38 + v14;\n            v7 = v45;\n            v27 = v41;\n            v22 = v46;\n            if (v43 == 0) {\n                // break -> 0x404e93\n                break;\n            }\n        }\n        goto lab_0x404e93_2;\n    }\n    char v55 = v15; // 0x404b90\n    int64_t v56 = v18; // 0x404b90\n  lab_0x404f63:\n    // 0x404f63\n    result = 1;\n    if (v55 != 0) {\n        // 0x404f68\n        return function_404ad0(v4, a8, v5, v56);\n    }\n  lab_0x404c99:\n    // 0x404c99\n    return result;\n  lab_0x404de0:;\n    int64_t v57 = v20 + v38; // 0x404de3\n    int32_t v58 = 1; // 0x404df6\n    int64_t v59 = 0; // 0x404df6\n    int64_t v60 = v30; // 0x404df6\n    int64_t v61 = v57; // 0x404df6\n    int32_t v62 = 1; // 0x404df6\n    int64_t v63 = 0; // 0x404df6\n    int64_t v64 = v30; // 0x404df6\n    int64_t v65 = v57; // 0x404df6\n    if (v9 == 0) {\n        goto lab_0x404d79;\n    } else {\n        goto lab_0x404dfc;\n    }\n  lab_0x404d3d:;\n    int64_t v66 = v35 & (int64_t)(v20 != 0);\n    v31 = v29;\n    v23 = v66;\n    int64_t v67; // 0x404b90\n    int64_t v68; // 0x404b90\n    int32_t v69; // 0x404b90\n    if (v13 > v34 || (char)v24 == 0) {\n        goto lab_0x404e40;\n    } else {\n        // 0x404d58\n        v69 = 1;\n        v68 = 0;\n        v67 = 1;\n        if (v66 == 0) {\n            // 0x404d58\n            v9 = v17;\n            v30 = 0;\n            goto lab_0x404de0;\n        } else {\n            goto lab_0x404d6b;\n        }\n    }\n  lab_0x404d79:;\n    int64_t v70 = v61;\n    int32_t v71 = v58; // 0x404d91\n    int64_t v72 = v60; // 0x404d91\n    int64_t v73 = v59; // 0x404d91\n    if (v70 != function_40b000(v3 & 0xffffffff, v11, v70)) {\n        // 0x404f1c\n        function_40ddd0(4, a8);\n        error(0, *__errno_location(), dcgettext(NULL, \"error writing %s\", 5));\n        result = v17 & 0xffffffff;\n        return result;\n    }\n    goto lab_0x404d97;\n  lab_0x404dfc:;\n    int64_t v76 = function_404ad0(v4, a8, v5, v65); // 0x404e0d\n    v71 = v62;\n    v72 = v64;\n    v73 = v63;\n    if ((char)v76 == 0) {\n        // 0x404e20\n        result = v76 & 0xffffffff;\n        goto lab_0x404c99;\n    }\n    goto lab_0x404d97;\n  lab_0x404e40:\n    // 0x404e40\n    v69 = 0;\n    v68 = v31;\n    v67 = v23;\n    v32 = v31;\n    if ((char)v23 == 0) {\n        // break -> 0x404e49\n        goto lab_0x404e49;\n    }\n    goto lab_0x404d6b;\n  lab_0x404d97:;\n    int64_t v74 = v72;\n    v26 = v74;\n    v12 = v14;\n    v21 = v38;\n    if (v71 == 0) {\n        goto lab_0x404e67_2;\n    }\n    if (v38 == 0) {\n        // 0x404e93\n        v7 = v74 & 0xffffffff;\n        v27 = v74;\n        v22 = 0;\n        goto lab_0x404e93_2;\n    }\n    // 0x404dac\n    v26 = v74;\n    v12 = v14;\n    v21 = 0;\n    if (v73 % 256 == 0) {\n        goto lab_0x404e67_2;\n    }\n    // 0x404db5\n    v33 = 0;\n    v28 = v74;\n    v10 = v14;\n    v16 = v74 & 0xffffffff;\n    v19 = v38;\n    goto lab_0x404ce0;\n  lab_0x404d6b:\n    // 0x404d6b\n    v58 = v69;\n    v59 = v67;\n    v60 = v68;\n    v61 = v20;\n    v62 = v69;\n    v63 = v67;\n    v64 = v68;\n    v65 = v20;\n    if ((char)v17 != 0) {\n        goto lab_0x404dfc;\n    } else {\n        goto lab_0x404d79;\n    }\n  lab_0x404e93_2:\n    // 0x404e93\n    v8 = v22;\n    v6 = v36 - v37;\n    char v75 = v27;\n    *v1 = v75;\n    v25 = v27;\n    v55 = v75;\n    v56 = v8;\n    if (v6 == 0) {\n        goto lab_0x404f63;\n    }\n    goto lab_0x404c2c;\n}\n"
        },
        {
            "funcName": "function_404fc0",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "405088",
            "decompiledFuncCode": "int64_t function_404fc0(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int64_t a5) {\n    // 0x404fc0\n    if (*(char *)(a5 + 37) == 0) {\n        unsigned char v1 = *(char *)(a5 + 33) & (char)a4; // 0x405052\n        if (v1 == 0) {\n            // 0x405058\n            return 1;\n        }\n        // 0x405070\n        *__errno_location() = 95;\n        return (int64_t)v1 | (int64_t)(a4 & -256);\n    }\n    int32_t * err_num = __errno_location(); // 0x404fd7\n    char * v2 = (char *)(a5 + 38);\n    if (*(char *)(a5 + 35) != 0) {\n        char v3 = *v2; // 0x405038\n        if (v3 == 0) {\n            // 0x405040\n            *err_num = 95;\n            // 0x405025\n            return v3 ^ 1;\n        }\n    }\n    // 0x404fe5\n    *err_num = 95;\n    function_40ddd0(4, a1);\n    error(0, *err_num, dcgettext(NULL, \"failed to get security context of %s\", 5));\n    // 0x405025\n    return (int64_t)(*v2 ^ 1);\n}\n"
        },
        {
            "funcName": "function_405090",
            "funcStartAddr": "405090",
            "funcEndAddr": "405103",
            "decompiledFuncCode": "int64_t function_405090(int64_t a1, char a2, int32_t a3, int64_t a4) {\n    int32_t * err_num = __errno_location(); // 0x40509a\n    if (*(char *)(a4 + 35) != 0) {\n        // 0x4050f0\n        if (*(char *)(a4 + 38) == 0) {\n            // 0x4050f6\n            *err_num = 95;\n            return 0;\n        }\n    }\n    // 0x4050a8\n    *err_num = 95;\n    function_40dcf0(0, 4, a1);\n    error(0, *err_num, dcgettext(NULL, \"failed to set the security context of %s\", 5));\n    return (int32_t)&g83 ^ (int32_t)&g83;\n}\n"
        },
        {
            "funcName": "function_405110",
            "funcStartAddr": "405110",
            "funcEndAddr": "405136",
            "decompiledFuncCode": "int64_t function_405110(int64_t a1, int64_t a2) {\n    int64_t result = function_40b910(61, 0, 0x40c2d0, 0x40c310, 0x40c380); // 0x40512b\n    *(int64_t *)(a1 + 56) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "405166",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1, int64_t a2) {\n    int64_t result = function_40b910(61, 0, 0x40c300, 0x40c310, 0x40c380); // 0x40515b\n    *(int64_t *)(a1 + 64) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "4051a1",
            "decompiledFuncCode": "int64_t function_405170(int64_t * a1) {\n    // 0x405170\n    int128_t v1; // 0x405170\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    int128_t v4 = __asm_pxor(v2, v2); // 0x405171\n    *(int64_t *)(v3 + 64) = 0;\n    int64_t v5; // 0x405170\n    __asm_movups(*(int128_t *)&v5, v4);\n    __asm_movups(*(int128_t *)(v3 + 16), v4);\n    __asm_movups(*(int128_t *)(v3 + 32), v4);\n    __asm_movups(*(int128_t *)(v3 + 48), v4);\n    int32_t v6 = geteuid(); // 0x40518f\n    char v7 = v6 == 0; // 0x405199\n    *(char *)(v3 + 27) = v7;\n    *(char *)(v3 + 26) = v7;\n    return (int64_t)(v6 & -256) | (int64_t)(v6 == 0);\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "4051d4",
            "decompiledFuncCode": "int64_t function_4051b0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4051b4\n    int32_t v2 = *v1; // 0x4051b9\n    bool v3 = v2 == 1 | v2 == 22;\n    int64_t result = (int64_t)v1 & -256 | (int64_t)v3; // 0x4051c9\n    if (v3) {\n        // 0x4051cb\n        result = (int64_t)(*(char *)(a1 + 26) ^ 1);\n    }\n    // 0x4051d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "4053cb",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, char a5, int64_t * a6) {\n    int32_t owner = *(int32_t *)(a4 + 28); // 0x4051f6\n    int32_t group = *(int32_t *)(a4 + 32); // 0x4051fa\n    int64_t v1; // 0x4051e0\n    if (a5 != 0) {\n        goto lab_0x405250;\n    } else {\n        // 0x405203\n        if (*(int64_t *)(a1 + 24) % 0xff000000000100 == 0) {\n            // 0x4052a8\n            if (*(char *)(a1 + 43) == 0) {\n                goto lab_0x405250;\n            } else {\n                // 0x4052ae\n                v1 = a1 + 16;\n                goto lab_0x40521e;\n            }\n        } else {\n            // 0x405217\n            v1 = a4 + 24;\n            goto lab_0x40521e;\n        }\n    }\n  lab_0x405250:;\n    int32_t fd = a3; // 0x405256\n    if (fd == -1) {\n        char * path = (char *)a2; // 0x4052d3\n        if (lchown(path, owner, group) == 0) {\n            // 0x405293\n            return 1;\n        }\n        int32_t * v2 = __errno_location(); // 0x4052dc\n        int32_t v3 = *v2; // 0x4052e1\n        if (v3 != 1 != v3 != 22) {\n            // 0x4052f0\n            lchown(path, -1, group);\n            *v2 = v3;\n        }\n    } else {\n        // 0x40525b\n        if (fchown(fd, owner, group) == 0) {\n            // 0x405293\n            return 1;\n        }\n        int32_t * v4 = __errno_location(); // 0x405266\n        int32_t v5 = *v4; // 0x40526b\n        switch (v5) {\n            case 1: {\n            }\n            case 22: {\n                // 0x405350\n                fchown(fd, -1, group);\n                *v4 = v5;\n                // break -> 0x405285\n                break;\n            }\n        }\n    }\n    // 0x405285\n    if ((char)function_4051b0(a1) != 0) {\n        // 0x405293\n        return 0;\n    }\n    // 0x405308\n    function_40ddd0(4, a2);\n    error(0, *__errno_location(), dcgettext(NULL, \"failed to preserve ownership for %s\", 5));\n    // 0x405293\n    return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n  lab_0x40521e:;\n    int32_t v6 = *(int32_t *)((int64_t)a6 + 24);\n    uint32_t v7 = *(int32_t *)v1;\n    if (((v7 % 512 ^ 4095) & v6) != 0) {\n        // 0x40522e\n        if ((int32_t)function_40c480(a2, a3 & 0xffffffff, v6 & 448 & v7) != 0) {\n            int32_t * err_num = __errno_location(); // 0x405370\n            switch (*err_num) {\n                case 1: {\n                }\n                case 22: {\n                    // 0x4053c0\n                    if (*(char *)(a1 + 27) == 0) {\n                        // 0x405293\n                        return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n                    }\n                    // break -> 0x405384\n                    break;\n                }\n            }\n            // 0x405384\n            function_40ddd0(4, a2);\n            error(0, *err_num, dcgettext(NULL, \"clearing permissions for %s\", 5));\n            // 0x405293\n            return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n        }\n    }\n    goto lab_0x405250;\n}\n"
        },
        {
            "funcName": "function_4053d0",
            "funcStartAddr": "4053d0",
            "funcEndAddr": "4053fa",
            "decompiledFuncCode": "int64_t function_4053d0(int64_t a1) {\n    uint32_t result = g30; // 0x4053d1\n    if (result != -1) {\n        // 0x4053dc\n        return result;\n    }\n    int32_t cmask = umask(0); // 0x4053e2\n    g30 = cmask;\n    umask(cmask);\n    return cmask;\n}\n"
        },
        {
            "funcName": "function_405400",
            "funcStartAddr": "405400",
            "funcEndAddr": "40927c",
            "decompiledFuncCode": "int64_t function_405400(int64_t a1, int64_t str3, char a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    // 0x405400\n    int64_t v1; // 0x405400\n    int64_t v2 = v1;\n    int64_t v3 = a6 + 24; // 0x405430\n    char * v4 = (char *)v3; // 0x405430\n    if (!((a10 == 0 | *v4 == 0))) {\n        // 0x405453\n        *(char *)a10 = 0;\n    }\n    int32_t * v5 = (int32_t *)(a6 + 4); // 0x40545e\n    int64_t v6 = 1; // 0x405466\n    char * v7 = (char *)a9; // 0x40546b\n    *v7 = 0;\n    int32_t v8 = v6;\n    char * file_path = (char *)a1;\n    int64_t v9; // 0x405400\n    int64_t v10; // 0x405400\n    int64_t v11; // bp-632, 0x405400\n    if (*v5 == 2) {\n        int32_t v12 = __lxstat(v8, file_path, (struct stat *)&v11); // 0x405c90\n        v10 = v1 & -256 | (int64_t)(v12 != 0);\n        v9 = a1;\n        if (v12 == 0) {\n            goto lab_0x40549c;\n        } else {\n            goto lab_0x405ca7;\n        }\n    } else {\n        int32_t v13 = __xstat(v8, file_path, (struct stat *)&v11); // 0x405485\n        v10 = v1 & -256 | (int64_t)(v13 != 0);\n        v9 = a1;\n        if (v13 != 0) {\n            goto lab_0x405ca7;\n        } else {\n            goto lab_0x40549c;\n        }\n    }\n  lab_0x408a34:;\n    // 0x408a34\n    int64_t v14; // 0x405400\n    free((int64_t *)v14);\n    int32_t fd3; // 0x405400\n    int32_t fd = fd3; // 0x408a40\n    int64_t v15; // 0x405400\n    int64_t v16 = v15; // 0x408a40\n    int64_t v17; // 0x405400\n    int64_t v18 = v17; // 0x408a40\n    int64_t v19; // 0x405400\n    int64_t v20 = v19; // 0x408a40\n    int64_t v21; // 0x408869\n    int64_t v22 = v21 & 0xffffffff; // 0x408a40\n    int64_t v23 = 0; // 0x408a40\n    int64_t v24; // 0x405400\n    int64_t v25 = v24; // 0x408a40\n    int64_t v26 = v10 % 256; // 0x408a40\n    goto lab_0x4083b0;\n  lab_0x40549c:;\n    int64_t v190 = &v11; // 0x405475\n    int32_t owner; // 0x405400\n    int32_t v138 = owner & 0xf000; // 0x4054a8\n    int64_t * v469; // 0x405400\n    int64_t v89; // 0x405400\n    int64_t v472; // 0x405400\n    int64_t v240; // 0x405400\n    if (v138 == 0x4000) {\n        // 0x405cf8\n        if (*(char *)(a6 + 42) == 0) {\n            // 0x406720\n            v6 = 4;\n            function_40ddd0(4, a1);\n            v240 = (int64_t)\"omitting directory %s\";\n            v472 = 5;\n            if (*(char *)(a6 + 25) == 0) {\n                goto lab_0x406888;\n            } else {\n                goto lab_0x406742;\n            }\n        } else {\n            if ((char)a7 == 0) {\n                goto lab_0x4054e2;\n            } else {\n                // 0x405d03\n                v469 = (int64_t *)(a6 + 64);\n                goto lab_0x40610f;\n            }\n        }\n    } else {\n        if ((char)a7 == 0) {\n            goto lab_0x4054e2;\n        } else {\n            int64_t * v693 = (int64_t *)(a6 + 64);\n            int64_t v694 = *v693; // 0x4054c6\n            v6 = v694;\n            if (*(int32_t *)&v89 == 0) {\n                uint64_t v695 = function_40ad30(v694, a1, v190); // 0x406102\n                v469 = v693;\n                if ((char)v695 != 0) {\n                    // 0x4070e0\n                    function_40ddd0(4, a1);\n                    error(0, (int32_t)\"warning: source file %s specified more than once\" ^ (int32_t)\"warning: source file %s specified more than once\", dcgettext(NULL, \"warning: source file %s specified more than once\", 5));\n                    // 0x405ce1\n                    return v695 % 256 & 0xffffffff;\n                }\n                goto lab_0x40610f;\n            } else {\n                // 0x4054d3\n                function_40aca0(v694, a1, v190);\n                goto lab_0x4054e2;\n            }\n        }\n    }\n  lab_0x405ca7:\n    // 0x405ca7\n    function_40ddd0(4, v9);\n    error(0, *__errno_location(), dcgettext(NULL, \"cannot stat %s\", 5));\n    // 0x405ce1\n    return 0;\n  lab_0x4054e2:;\n    // 0x4054e2\n    int64_t v470; // bp-888, 0x405400\n    int64_t v135 = &v470; // 0x405416\n    int64_t v79 = a7 & 0xffffffff; // 0x405435\n    int32_t v471 = *v5; // 0x4054ec\n    int32_t v396 = v471 == 4 ? 1 : (int32_t)((int64_t)(v471 == 3) & a7);\n    int64_t v276; // 0x405412\n    if (a3 != 0) {\n        goto lab_0x405840;\n    } else {\n        // 0x40550f\n        v276 = (int64_t)a3 & 0xffffffff;\n        if (v138 == 0x8000) {\n            goto lab_0x40553d;\n        } else {\n            // 0x40551c\n            if (*(char *)(a6 + 20) == 0) {\n                goto lab_0x405fb0;\n            } else {\n                switch ((int16_t)v138) {\n                    case -0x6000: {\n                        goto lab_0x405fb0;\n                    }\n                    case 0x4000: {\n                        goto lab_0x405fb0;\n                    }\n                    default: {\n                        goto lab_0x40553d;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406888:\n    // 0x406888\n    v6 = 0;\n    // 0x406749\n    error(0, 0, dcgettext(NULL, \"-r not specified; omitting directory %s\", (int32_t)v472));\n    // 0x405ce1\n    return 0;\n  lab_0x406742:\n    // 0x406742\n    v6 = 0;\n    // 0x406749\n    error(0, 0, dcgettext(NULL, (char *)v240, 5));\n    // 0x405ce1\n    return 0;\n  lab_0x405840:;\n    // 0x405840\n    int128_t v93; // 0x405400\n    int32_t v123 = v93; // 0x405849\n    char v125 = 0; // 0x405849\n    int64_t v126 = 1; // 0x405849\n    int64_t v130 = v93; // 0x405849\n    int64_t v132 = 0; // 0x405849\n    int64_t v134 = v135; // 0x405849\n    goto lab_0x405854;\n  lab_0x40610f:\n    // 0x40610f\n    function_40aca0(*v469, a1, v190);\n    goto lab_0x4054e2;\n  lab_0x405854:;\n    int32_t v241 = v123; // 0x405856\n    char v242 = v125; // 0x405856\n    int64_t v243 = v126; // 0x405856\n    int128_t v128; // 0x405400\n    int128_t v244 = v128; // 0x405856\n    int64_t v245 = v130; // 0x405856\n    int64_t v246 = v134; // 0x405856\n    int64_t v247; // 0x405400\n    int64_t v248; // 0x405400\n    int32_t v249; // 0x405400\n    int64_t v250; // 0x405400\n    int128_t v251; // 0x405400\n    int64_t v252; // 0x405400\n    char v253; // 0x405400\n    if ((char)a7 != 0) {\n        // 0x405c80\n        v249 = v123;\n        v253 = v125;\n        v252 = v126;\n        v251 = v128;\n        v250 = v130;\n        v247 = v132;\n        v248 = v134;\n        v241 = v123;\n        v242 = v125;\n        v243 = v126;\n        v244 = v128;\n        v245 = v130;\n        v246 = v134;\n        if (*(int64_t *)(a6 + 56) != 0) {\n            goto lab_0x405790;\n        } else {\n            goto lab_0x40585c;\n        }\n    } else {\n        goto lab_0x40585c;\n    }\n  lab_0x40553d:;\n    // 0x40553d\n    int64_t v254; // 0x405400\n    int32_t v165; // bp-488, 0x405400\n    bool v255; // 0x405400\n    if (*v4 != 0) {\n        goto lab_0x405fb0;\n    } else {\n        // 0x405548\n        if (*(char *)(a6 + 44) != 0) {\n            goto lab_0x405fb0;\n        } else {\n            // 0x405553\n            if (*(char *)(a6 + 23) != 0) {\n                goto lab_0x405fb0;\n            } else {\n                // 0x40555e\n                if (*(int32_t *)&v89 != 0) {\n                    goto lab_0x405fb0;\n                } else {\n                    // 0x40556b\n                    if (*(char *)(a6 + 21) != 0) {\n                        goto lab_0x405fb0;\n                    } else {\n                        // 0x405576\n                        v6 = 1;\n                        int32_t v256 = __xstat(1, (char *)str3, (struct stat *)&v165); // 0x405593\n                        v255 = v256 != 0;\n                        v254 = 1;\n                        if (v256 != 0) {\n                            goto lab_0x405feb;\n                        } else {\n                            goto lab_0x4055b4;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40585c:;\n    int32_t v257 = v241; // 0x405861\n    char v258 = v242; // 0x405861\n    int64_t v259 = v243; // 0x405861\n    int128_t v260 = v244; // 0x405861\n    int64_t v261 = v245; // 0x405861\n    int64_t v262 = v246; // 0x405861\n    int64_t v263; // 0x405400\n    int64_t v264; // 0x405400\n    int32_t v265; // 0x405400\n    int32_t v266; // 0x405400\n    int64_t v267; // 0x405400\n    int64_t v268; // 0x405400\n    int128_t v269; // 0x405400\n    int128_t v270; // 0x405400\n    int64_t v271; // 0x405400\n    int64_t v272; // 0x405400\n    char v273; // 0x405400\n    char v274; // 0x405400\n    if (*(char *)(a6 + 46) == 0) {\n        goto lab_0x405d20;\n    } else {\n        // 0x405867\n        v266 = v241;\n        v274 = v242;\n        v272 = v243;\n        v270 = v244;\n        v268 = v245;\n        v264 = v246;\n        v265 = v241;\n        v273 = v242;\n        v271 = v243;\n        v269 = v244;\n        v267 = v245;\n        v263 = v246;\n        if (*v4 != 0) {\n            goto lab_0x405ee0;\n        } else {\n            goto lab_0x405872;\n        }\n    }\n  lab_0x405fb0:\n    // 0x405fb0\n    v6 = 1;\n    int32_t v275 = __lxstat(1, (char *)str3, (struct stat *)&v165); // 0x405fcd\n    v255 = false;\n    v254 = v276;\n    if (v275 == 0) {\n        goto lab_0x4055b4;\n    } else {\n        goto lab_0x405feb;\n    }\n  lab_0x405790:;\n    // 0x405790\n    int64_t v277; // 0x405400\n    int64_t v278; // 0x405400\n    int64_t v279; // 0x405400\n    int32_t v280; // 0x405400\n    int32_t v281; // 0x405400\n    int64_t v86; // bp-200, 0x405400\n    int64_t v282; // 0x405400\n    int64_t v283; // 0x405400\n    int128_t v284; // 0x405400\n    int128_t v285; // 0x405400\n    int64_t v286; // 0x405400\n    int64_t v287; // 0x405400\n    char v288; // 0x405400\n    char v289; // 0x405400\n    if (*v4 != 0) {\n        // 0x405d10\n        v257 = v249;\n        v258 = v253;\n        v259 = v252;\n        v260 = v251;\n        v261 = v250;\n        v262 = v248;\n        v265 = v249;\n        v273 = v253;\n        v271 = v252;\n        v269 = v251;\n        v267 = v250;\n        v263 = v248;\n        if (*(char *)(a6 + 46) != 0) {\n            goto lab_0x405ee0;\n        } else {\n            goto lab_0x405d20;\n        }\n    } else {\n        // 0x40579b\n        if (*(int32_t *)&v89 != 0) {\n            // 0x406240\n            v266 = v249;\n            v274 = v253;\n            v272 = v252;\n            v270 = v251;\n            v268 = v250;\n            v264 = v248;\n            if (*(char *)(a6 + 46) != 0) {\n                goto lab_0x405872;\n            } else {\n                // 0x40624b\n                v281 = v249;\n                v289 = v253;\n                v287 = v252;\n                v285 = v251;\n                v283 = v250;\n                v279 = v248;\n                v280 = v249;\n                v288 = v253;\n                v286 = v252;\n                v284 = v251;\n                v282 = v250;\n                v278 = v248;\n                if (v138 != 0x4000) {\n                    goto lab_0x4058a3;\n                } else {\n                    goto lab_0x406260;\n                }\n            }\n        } else {\n            // 0x4057a7\n            v277 = &v165;\n            if ((char)v247 == 0) {\n                int32_t v290 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x4071c1\n                v241 = v249;\n                v242 = v253;\n                v243 = v252;\n                v244 = v251;\n                v245 = v250;\n                v246 = v248;\n                if (v290 != 0) {\n                    goto lab_0x40585c;\n                } else {\n                    // 0x4071ce\n                    v277 = &v86;\n                    goto lab_0x4057b6;\n                }\n            } else {\n                goto lab_0x4057b6;\n            }\n        }\n    }\n  lab_0x405d20:;\n    int32_t v291 = v257; // 0x405d25\n    char v292 = v258; // 0x405d25\n    int64_t v293 = v259; // 0x405d25\n    int128_t v294 = v260; // 0x405d25\n    int64_t v295 = v261; // 0x405d25\n    int64_t v296 = v262; // 0x405d25\n    int32_t v297 = v257; // 0x405d25\n    char v298 = v258; // 0x405d25\n    int64_t v299 = v259; // 0x405d25\n    int128_t v300 = v260; // 0x405d25\n    int64_t v301 = v261; // 0x405d25\n    int64_t v302 = v262; // 0x405d25\n    if (v138 != 0x4000 | *(char *)(a6 + 42) == 0) {\n        goto lab_0x405898;\n    } else {\n        goto lab_0x405d3b;\n    }\n  lab_0x4055b4:;\n    int64_t v303 = &v165;\n    int64_t v97 = v255;\n    int64_t v150 = owner; // 0x4055bb\n    int64_t v304; // 0x405400\n    int32_t v305; // 0x405400\n    int64_t v306; // 0x405400\n    int64_t v99; // 0x405400\n    int64_t v307; // 0x405400\n    int64_t v308; // 0x405400\n    int64_t v94; // 0x405400\n    int64_t v309; // 0x405400\n    int32_t v95; // 0x405400\n    int64_t v98; // 0x405400\n    char v70; // bp-344, 0x405400\n    int64_t v96; // 0x405400\n    int64_t v310; // 0x405400\n    if (v1 == v150) {\n        // 0x406a78\n        if (v11 != (int64_t)v165) {\n            goto lab_0x4055c8;\n        } else {\n            unsigned char v311 = *(char *)(a6 + 23); // 0x406a8c\n            int32_t v312 = v93;\n            v94 = str3;\n            v95 = v312;\n            v96 = 1;\n            v98 = v93;\n            v99 = v254;\n            if (v311 != 0) {\n                goto lab_0x4055d3;\n            } else {\n                // 0x406a9a\n                v310 = 1;\n                if (*v5 == 2) {\n                    goto lab_0x4068a5;\n                } else {\n                    // 0x406aa5\n                    v6 = 1;\n                    int32_t v313 = __lxstat(1, (char *)str3, (struct stat *)&v70); // 0x406ac9\n                    int64_t v314 = v254 % 256; // 0x406ace\n                    v94 = str3;\n                    v95 = v312;\n                    v96 = v97;\n                    v98 = v93;\n                    v99 = v314;\n                    if (v313 != 0) {\n                        goto lab_0x4055d3;\n                    } else {\n                        // 0x406ade\n                        v6 = 1;\n                        int32_t v315 = __lxstat(1, file_path, (struct stat *)&v86); // 0x406af7\n                        v94 = a1;\n                        v95 = v312;\n                        v96 = v97;\n                        v98 = v93;\n                        v99 = v314;\n                        if (v315 != 0) {\n                            goto lab_0x4055d3;\n                        } else {\n                            int64_t v316 = v311; // 0x406b1a\n                            // 0x406b1c\n                            v316 = v86 == (int64_t)v70;\n                            int64_t v317 = &v70; // 0x406b34\n                            v89 = v317;\n                            int64_t v318 = &v86; // 0x406b3b\n                            int32_t v319 = v317;\n                            v309 = a1;\n                            v304 = v317;\n                            v305 = v319;\n                            v308 = v318;\n                            v307 = v314;\n                            v306 = v316;\n                            if ((owner & 0xf000) != 0xa000) {\n                                goto lab_0x4068c9;\n                            } else {\n                                // 0x406b52\n                                v309 = a1;\n                                v304 = v317;\n                                v305 = v319;\n                                v308 = v318;\n                                v307 = v314;\n                                v306 = v316;\n                                if ((owner & 0xf000) != 0xa000) {\n                                    goto lab_0x4068c9;\n                                } else {\n                                    // 0x406b68\n                                    v94 = a1;\n                                    v95 = v312;\n                                    v96 = v97;\n                                    v98 = v93;\n                                    v99 = v314;\n                                    v309 = a1;\n                                    v304 = v317;\n                                    v305 = v319;\n                                    v308 = v318;\n                                    v307 = v314;\n                                    v306 = v316;\n                                    if (*(char *)(a6 + 21) == 0) {\n                                        goto lab_0x4068c9;\n                                    } else {\n                                        goto lab_0x4055d3;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4055c8;\n    }\n  lab_0x405feb:;\n    int32_t * v320 = __errno_location(); // 0x405feb\n    if (*v320 != 2) {\n        // 0x405ff9\n        function_40ddd0(4, str3);\n        char * format7 = dcgettext(NULL, \"cannot stat %s\", 5); // 0x406023\n        error(0, *(int32_t *)(0x100000000000000 * (int64_t)v320 >> 56), format7);\n        // 0x405ce1\n        return v276 & 0xffffffff;\n    }\n    goto lab_0x405840;\n  lab_0x405898:\n    // 0x405898\n    v281 = v291;\n    v289 = v292;\n    v287 = v293;\n    v285 = v294;\n    v283 = v295;\n    v279 = v296;\n    int32_t v321 = v291; // 0x40589d\n    char v322 = v292; // 0x40589d\n    int64_t v323 = v293; // 0x40589d\n    int128_t v324 = v294; // 0x40589d\n    int64_t v325 = v295; // 0x40589d\n    int64_t v326 = v296; // 0x40589d\n    if (*v4 != 0) {\n        goto lab_0x405ef7;\n    } else {\n        goto lab_0x4058a3;\n    }\n  lab_0x405d3b:;\n    int64_t v327 = owner; // 0x405d42\n    v6 = v327;\n    int64_t v328 = v327; // 0x405d4b\n    int32_t v329 = v297; // 0x405d4b\n    char v330 = v298; // 0x405d4b\n    int64_t v331 = v299; // 0x405d4b\n    int128_t v332 = v300; // 0x405d4b\n    int64_t v333 = v301; // 0x405d4b\n    int64_t v334 = v302; // 0x405d4b\n    int64_t v335; // 0x405400\n    int32_t v336; // 0x405400\n    int64_t v337; // 0x405400\n    int128_t v338; // 0x405400\n    int64_t v339; // 0x405400\n    char v340; // 0x405400\n    int64_t v341; // 0x405400\n    if ((char)a7 == 0) {\n        goto lab_0x406780;\n    } else {\n        // 0x405d51\n        v336 = v297;\n        v340 = v298;\n        v339 = v299;\n        v338 = v300;\n        v337 = v301;\n        v335 = v302;\n        v341 = function_409480(str3, v327, v11);\n        goto lab_0x405d67;\n    }\n  lab_0x405ee0:\n    // 0x405ee0\n    v321 = v265;\n    v322 = v273;\n    v323 = v271;\n    v324 = v269;\n    v325 = v267;\n    v326 = v263;\n    if (v138 != 0x4000) {\n        goto lab_0x405ef7;\n    } else {\n        // 0x405eec\n        v297 = v265;\n        v298 = v273;\n        v299 = v271;\n        v300 = v269;\n        v301 = v267;\n        v302 = v263;\n        v321 = v265;\n        v322 = v273;\n        v323 = v271;\n        v324 = v269;\n        v325 = v267;\n        v326 = v263;\n        if (*(char *)(a6 + 42) != 0) {\n            goto lab_0x405d3b;\n        } else {\n            goto lab_0x405ef7;\n        }\n    }\n  lab_0x405872:\n    // 0x405872\n    v280 = v266;\n    v288 = v274;\n    v286 = v272;\n    v284 = v270;\n    v282 = v268;\n    v278 = v264;\n    if (v138 == 0x4000) {\n        goto lab_0x406260;\n    } else {\n        // 0x405882\n        function_4047e0(a1, str3, v274);\n        v291 = v266;\n        v292 = v274;\n        v293 = v272;\n        v294 = v270;\n        v295 = v268;\n        v296 = v264;\n        goto lab_0x405898;\n    }\n  lab_0x4055c8:\n    // 0x4055c8\n    v94 = str3;\n    v95 = v93;\n    v96 = v97;\n    v98 = v93;\n    v99 = v254;\n    v310 = 0;\n    if (*v5 == 2) {\n        goto lab_0x4068a5;\n    } else {\n        goto lab_0x4055d3;\n    }\n  lab_0x405ef7:;\n    // 0x405ef7\n    int64_t v342; // 0x405400\n    int64_t v343; // 0x405400\n    int64_t v344; // 0x405400\n    int32_t v345; // 0x405400\n    int32_t v346; // 0x405400\n    int32_t v347; // 0x405400\n    int64_t v348; // 0x405400\n    int64_t v349; // 0x405400\n    int64_t v350; // 0x405400\n    int128_t v351; // 0x405400\n    int128_t v352; // 0x405400\n    int128_t v353; // 0x405400\n    int64_t v354; // 0x405400\n    int64_t v355; // 0x405400\n    int64_t v356; // 0x405400\n    char v357; // 0x405400\n    char v358; // 0x405400\n    char v359; // 0x405400\n    int64_t v360; // 0x405400\n    if (v1 == 1) {\n        // 0x406798\n        v347 = v321;\n        v359 = v322;\n        v355 = v323;\n        v353 = v324;\n        v350 = v325;\n        v344 = v326;\n        v360 = function_409440((int64_t)owner, v11);\n        goto lab_0x40609c;\n    } else {\n        // 0x405f05\n        v345 = v321;\n        v357 = v322;\n        v354 = v323;\n        v351 = v324;\n        v348 = v325;\n        v342 = v326;\n        v346 = v321;\n        v358 = v322;\n        v352 = v324;\n        v349 = v325;\n        v356 = 0;\n        v343 = v326;\n        if (*(char *)(a6 + 34) != 0) {\n            goto lab_0x405eb0;\n        } else {\n            goto lab_0x405f17;\n        }\n    }\n  lab_0x4058a3:\n    // 0x4058a3\n    v345 = v281;\n    v357 = v289;\n    v354 = v287;\n    v351 = v285;\n    v348 = v283;\n    v342 = v279;\n    int64_t v188; // 0x405400\n    int32_t v361; // 0x405400\n    int64_t v362; // 0x405400\n    int128_t v363; // 0x405400\n    int64_t v364; // 0x405400\n    int64_t v72; // 0x405400\n    int64_t v365; // 0x405400\n    char v366; // 0x405400\n    if (*(char *)(a6 + 34) != 0) {\n        goto lab_0x405eb0;\n    } else {\n        // 0x4058ae\n        v361 = v281;\n        v366 = v289;\n        v72 = v287;\n        v363 = v285;\n        v362 = v283;\n        v365 = 0;\n        v364 = 0x100000000000000 * v287 >> 56;\n        v188 = v279;\n        goto lab_0x4058c6;\n    }\n  lab_0x406780:\n    // 0x406780\n    v336 = v329;\n    v340 = v330;\n    v339 = v331;\n    v338 = v332;\n    v337 = v333;\n    v335 = v334;\n    v341 = function_409440(v328, v11);\n    goto lab_0x405d67;\n  lab_0x406260:\n    // 0x406260\n    v281 = v280;\n    v289 = v288;\n    v287 = v286;\n    v285 = v284;\n    v283 = v282;\n    v279 = v278;\n    v297 = v280;\n    v298 = v288;\n    v299 = v286;\n    v300 = v284;\n    v301 = v282;\n    v302 = v278;\n    if (*(char *)(a6 + 42) == 0) {\n        goto lab_0x4058a3;\n    } else {\n        goto lab_0x405d3b;\n    }\n  lab_0x4068a5:\n    // 0x4068a5\n    v89 = v303;\n    int32_t v461 = v303;\n    v309 = str3;\n    v304 = v303;\n    v305 = v461;\n    v308 = v190;\n    v307 = v254;\n    v306 = v310;\n    int64_t v220; // 0x405400\n    int64_t v219; // 0x405400\n    int64_t v218; // 0x405400\n    int64_t v217; // 0x405400\n    if (v138 == 0xa000) {\n        // 0x407640\n        v309 = str3;\n        v304 = v303;\n        v305 = v461;\n        v308 = v190;\n        v307 = v254;\n        v306 = v310;\n        if ((owner & 0xf000) != 0xa000) {\n            goto lab_0x4068c9;\n        } else {\n            // 0x407656\n            v6 = a1;\n            if ((char)function_40e2f0(a1, str3) != 0) {\n                goto lab_0x406920;\n            } else {\n                int64_t v462 = v254 % 256; // 0x407681\n                v94 = str3;\n                v95 = v93;\n                v96 = v97;\n                v98 = v93;\n                v99 = v462;\n                if (v310 == 0 | *(int32_t *)&v89 != 0) {\n                    goto lab_0x4055d3;\n                } else {\n                    // 0x40769d\n                    v217 = str3;\n                    v218 = 1;\n                    v219 = v462;\n                    v220 = (int64_t)(*v4 ^ 1);\n                    goto lab_0x4076ab;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4068c9;\n    }\n  lab_0x4055d3:;\n    int64_t v131 = v98;\n    int128_t v463; // 0x405400\n    int128_t v129 = v463;\n    int64_t v127 = v96;\n    int32_t v124 = v95;\n    int64_t v418; // 0x405400\n    int64_t v408; // 0x405400\n    int64_t v417; // 0x405400\n    int32_t v416; // 0x405400\n    int64_t v51; // 0x405400\n    int64_t v415; // 0x405400\n    int64_t v103; // 0x405400\n    int64_t v414; // 0x405400\n    if (v138 == 0x4000) {\n        // 0x406b80\n        v103 = v94;\n        v408 = v99;\n        if (*v4 == 0) {\n            goto lab_0x40560f;\n        } else {\n            // 0x406b8b\n            v414 = v94;\n            v416 = *(int32_t *)(a6 + 8);\n            v417 = v99;\n            goto lab_0x406b8f;\n        }\n    } else {\n        // 0x4055e3\n        v415 = v94;\n        v418 = v99;\n        if (*(char *)(a6 + 45) != 0) {\n            int64_t v464 = 0; // 0x4067c7\n            if (*(char *)(a6 + 31) != 0) {\n                // 0x4067c9\n                v464 = 1;\n                if (*v4 != 0) {\n                    // 0x4067d5\n                    v464 = v11 != (int64_t)v165;\n                }\n            }\n            // 0x4067e8\n            v6 = str3;\n            int64_t v465 = function_40eb60(str3, v303, v190, v464); // 0x406804\n            v415 = v303;\n            v418 = v99 % 256;\n            if ((int32_t)v465 < 0) {\n                goto lab_0x4055ee;\n            } else {\n                if (a10 != 0) {\n                    // 0x406820\n                    *(char *)a10 = 1;\n                }\n                int64_t v466 = function_409480(str3, v150, v11); // 0x40683c\n                if (v466 == 0) {\n                    // 0x405ce1\n                    return 1;\n                }\n                char v467 = *(char *)(a6 + 46); // 0x40684a\n                v6 = v466;\n                if ((char)function_4049c0(v466, str3, 1, v467, v396) != 0) {\n                    // 0x405ce1\n                    return 1;\n                }\n                // 0x406872\n                v51 = 1;\n                if (*(char *)(a6 + 37) == 0) {\n                    // 0x405ce1\n                    return v10 & 0xffffffff;\n                }\n                goto lab_0x40687d;\n            }\n        } else {\n            goto lab_0x4055ee;\n        }\n    }\n  lab_0x4057b6:\n    // 0x4057b6\n    v241 = v249;\n    v242 = v253;\n    v243 = v252;\n    v244 = v251;\n    v245 = v250;\n    v246 = v248;\n    int64_t v108; // 0x405400\n    if ((*(int32_t *)(v277 + 24) & 0xf000) != 0xa000) {\n        goto lab_0x40585c;\n    } else {\n        // 0x4057c9\n        v241 = v249;\n        v242 = v253;\n        v243 = v252;\n        v244 = v251;\n        v245 = v250;\n        v246 = v248;\n        if ((char)function_40ad30(*(int64_t *)(a6 + 56), str3, v277) == 0) {\n            goto lab_0x40585c;\n        } else {\n            // 0x4057dd\n            function_40dcf0(1, 4, str3);\n            v6 = 0;\n            function_40dcf0(0, 4, a1);\n            v108 = (int64_t)\"will not copy %s through just-created symlink %s\";\n            goto lab_0x405818;\n        }\n    }\n  lab_0x405eb0:;\n    int32_t v374 = v345; // 0x405eb5\n    char v375 = v357; // 0x405eb5\n    int64_t v376 = v354; // 0x405eb5\n    int128_t v377 = v351; // 0x405eb5\n    int64_t v378 = v348; // 0x405eb5\n    int64_t v379 = 0; // 0x405eb5\n    int64_t v380 = v342; // 0x405eb5\n    if (*(char *)(a6 + 23) == 0) {\n        if (v1 < 2) {\n            int32_t v468 = *v5; // 0x40605a\n            v374 = v345;\n            v375 = v357;\n            v376 = v354;\n            v377 = v351;\n            v378 = v348;\n            v379 = 0;\n            v380 = v342;\n            if (((char)a7 == 0 || v468 != 3) == (v468 != 4)) {\n                goto lab_0x405ec6;\n            } else {\n                goto lab_0x40607b;\n            }\n        } else {\n            goto lab_0x40607b;\n        }\n    } else {\n        goto lab_0x405ec6;\n    }\n  lab_0x405d67:;\n    int32_t v367 = v336; // 0x405d6f\n    char v368 = v340; // 0x405d6f\n    int64_t v369 = v339; // 0x405d6f\n    int128_t v370 = v338; // 0x405d6f\n    int64_t v371 = v337; // 0x405d6f\n    int64_t v372 = v341; // 0x405d6f\n    int64_t v373 = v335; // 0x405d6f\n    v374 = v336;\n    v375 = v340;\n    v376 = v339;\n    v377 = v338;\n    v378 = v337;\n    v379 = 0;\n    v380 = v335;\n    if (v341 == 0) {\n        goto lab_0x405ec6;\n    } else {\n        goto lab_0x405d75;\n    }\n  lab_0x4068c9:;\n    int64_t v381 = v306;\n    int64_t v382 = v307;\n    int64_t v383 = v308;\n    int64_t v384 = v304; // 0x407d82\n    int64_t v385 = v309;\n    v6 = v305;\n    int64_t v386; // 0x405400\n    int64_t v207; // 0x405400\n    int64_t v387; // 0x405400\n    int64_t v209; // 0x405400\n    int64_t v388; // 0x405400\n    int64_t v208; // 0x405400\n    int64_t v206; // 0x405400\n    int64_t v389; // 0x405400\n    char v390; // 0x406f10\n    if (v305 == 0) {\n        // 0x406f10\n        v390 = *v4;\n        if (v390 != 0) {\n            goto lab_0x407280;\n        } else {\n            // 0x406f1d\n            if (*(char *)(a6 + 21) != 0) {\n                goto lab_0x407280;\n            } else {\n                // 0x406f28\n                v389 = v385;\n                v386 = v384;\n                v388 = v383;\n                v387 = v382;\n                v206 = v385;\n                v207 = v384;\n                v208 = v383;\n                v209 = v382;\n                if ((*(int32_t *)(v383 + 24) & 0xf000) == 0xa000) {\n                    goto lab_0x406f6a;\n                } else {\n                    goto lab_0x406f37;\n                }\n            }\n        }\n    } else {\n        if ((char)v381 != 0) {\n            // 0x407b75\n            v6 = a1;\n            int64_t v391 = function_40e2f0(a1, str3); // 0x407b86\n            v217 = str3;\n            v218 = 0;\n            v219 = v382 % 256;\n            v220 = v391 & 0xffffffff ^ 1;\n            goto lab_0x4076ab;\n        } else {\n            int32_t v392 = v93;\n            v94 = v385;\n            v95 = v392;\n            v96 = v97;\n            v98 = v93;\n            v99 = v382;\n            if (*v4 != 0) {\n                goto lab_0x4055d3;\n            } else {\n                // 0x4068e9\n                v94 = v385;\n                v95 = v392;\n                v96 = v97;\n                v98 = v93;\n                v99 = v382;\n                if (*v5 == 2) {\n                    goto lab_0x4055d3;\n                } else {\n                    // 0x4068f4\n                    v94 = v385;\n                    v95 = v392;\n                    v96 = v97;\n                    v98 = v93;\n                    v99 = v382;\n                    if ((*(int32_t *)(v383 + 24) & 0xf000) != 0xa000) {\n                        goto lab_0x4055d3;\n                    } else {\n                        // 0x406907\n                        v94 = v385;\n                        v95 = v392;\n                        v96 = v97;\n                        v98 = v93;\n                        v99 = v382;\n                        if ((*(int32_t *)(v384 + 24) & 0xf000) == 0xa000) {\n                            goto lab_0x4055d3;\n                        } else {\n                            goto lab_0x406920;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40609c:\n    // 0x40609c\n    v374 = v347;\n    v375 = v359;\n    v376 = v355;\n    v377 = v353;\n    v378 = v350;\n    v379 = 0;\n    v380 = v344;\n    int64_t v393; // 0x405400\n    char v394; // 0x405400\n    if (v360 == 0) {\n        goto lab_0x405ec6;\n    } else {\n        // 0x4060aa\n        v367 = v347;\n        v368 = v359;\n        v369 = v355;\n        v370 = v353;\n        v371 = v350;\n        v372 = v360;\n        v373 = v344;\n        if (v138 == 0x4000) {\n            goto lab_0x405d75;\n        } else {\n            char v395 = *(char *)(a6 + 46); // 0x4060ba\n            v6 = v360;\n            v394 = v359;\n            v393 = 1;\n            if ((char)function_4049c0(v360, str3, 1, v395, v396) != 0) {\n                // 0x405ce1\n                return 1;\n            }\n            goto lab_0x405e18;\n        }\n    }\n  lab_0x405f17:\n    // 0x405f17\n    v6 = a1;\n    char * file_path2 = (char *)str3; // 0x405f21\n    int64_t v397; // 0x405400\n    if (rename(file_path, file_path2) == 0) {\n        // 0x406a28\n        if (*(char *)(a6 + 46) != 0) {\n            // 0x407308\n            __printf_chk(1, dcgettext(NULL, \"renamed \", 5));\n            function_4047e0(a1, str3, v358);\n        }\n        // 0x406a33\n        if (*(char *)(a6 + 33) != 0) {\n            // 0x4072e8\n            function_405090(str3, 0, 1, a6);\n        }\n        if (a10 != 0) {\n            // 0x406a45\n            *(char *)a10 = 1;\n        }\n        // 0x406a4c\n        v397 = 1;\n        if ((char)a7 != 0) {\n            // 0x406a54\n            function_40aca0(*(int64_t *)(a6 + 56), str3, v190);\n            v397 = v79;\n        }\n        // 0x405ce1\n        return v397 & 0xffffffff;\n    }\n    int32_t * err_num3 = __errno_location(); // 0x405f2e\n    int32_t v398 = *err_num3; // 0x405f36\n    if (v398 == 22) {\n        // 0x407708\n        function_40dcf0(1, 4, g56);\n        function_40dcf0(0, 4, g57);\n        error(0, (int32_t)\"cannot move %s to a subdirectory of itself, %s\" ^ (int32_t)\"cannot move %s to a subdirectory of itself, %s\", dcgettext(NULL, \"cannot move %s to a subdirectory of itself, %s\", 5));\n        *v7 = 1;\n        // 0x405ce1\n        return 1;\n    }\n    int64_t v399; // 0x405400\n    if (v398 != 18) {\n        // 0x406c78\n        function_40dcf0(1, 4, str3);\n        v6 = 0;\n        function_40dcf0(0, 4, a1);\n        v399 = (int64_t)\"cannot move %s to %s\";\n        goto lab_0x4069ed;\n    } else {\n        // 0x405f4a\n        v6 = str3;\n        if (v138 == 0x4000) {\n            // 0x4069a0\n            v361 = v346;\n            v366 = v358;\n            v72 = 1;\n            v363 = v352;\n            v362 = v349;\n            v365 = v356;\n            v364 = 1;\n            v188 = v343;\n            if (rmdir(file_path2) == 0) {\n                goto lab_0x4058c6;\n            } else {\n                // 0x4069ad\n                v361 = v346;\n                v366 = v358;\n                v72 = 1;\n                v363 = v352;\n                v362 = v349;\n                v365 = v356;\n                v364 = 1;\n                v188 = v343;\n                if (*err_num3 == 2) {\n                    goto lab_0x4058c6;\n                } else {\n                    goto lab_0x4069b8;\n                }\n            }\n        } else {\n            // 0x405f61\n            if (unlink(file_path2) == 0) {\n                goto lab_0x405f75;\n            } else {\n                // 0x405f6a\n                if (*err_num3 != 2) {\n                    goto lab_0x4069b8;\n                } else {\n                    goto lab_0x405f75;\n                }\n            }\n        }\n    }\n  lab_0x405ec6:\n    // 0x405ec6\n    v346 = v374;\n    v358 = v375;\n    v352 = v377;\n    v349 = v378;\n    v356 = v379;\n    v343 = v380;\n    if (*v4 != 0) {\n        goto lab_0x405f17;\n    } else {\n        // 0x405ecd\n        v361 = v374;\n        v366 = v375;\n        v72 = v376;\n        v363 = v377;\n        v362 = v378;\n        v365 = v379;\n        v364 = 0x100000000000000 * v376 >> 56;\n        v188 = v380;\n        goto lab_0x4058c6;\n    }\n  lab_0x4058c6:;\n    int64_t v55 = v365;\n    char v53 = v366;\n    char * v400 = (char *)(a6 + 43); // 0x4058d4\n    int32_t v73; // 0x405400\n    if (*v400 != 0) {\n        // 0x4058db\n        v73 = *(int32_t *)(a6 + 16);\n    }\n    uint32_t v401 = v73 % 0x1000;\n    uint64_t v402 = (int64_t)v401;\n    char * v403 = (char *)(a6 + 29); // 0x4058e6\n    uint32_t v74 = 0x1000000 * (int32_t)v364 >> 24;\n    v6 = a1;\n    int64_t v404 = function_404fc0(a1, str3, owner, v74, a6);\n    int64_t * v405; // 0x405400\n    int64_t * v171; // 0x405400\n    if (*v403 != 0) {\n        // 0x406180\n        if ((char)v404 == 0) {\n            // 0x405ce1\n            return v10 & 0xffffffff;\n        }\n        int64_t * v406 = (int64_t *)(v402 % 64); // 0x4061b6\n        v405 = v406;\n        v171 = v406;\n        if (v138 != 0x4000) {\n            goto lab_0x405931;\n        } else {\n            goto lab_0x4061c2;\n        }\n    } else {\n        if (v138 == 0x4000) {\n            // 0x4066e0\n            if ((char)v404 == 0) {\n                // 0x405ce1\n                return v10 & 0xffffffff;\n            }\n            // 0x406706\n            v171 = (int64_t *)(v402 & 18);\n            goto lab_0x4061c2;\n        } else {\n            // 0x405901\n            v405 = NULL;\n            if ((char)v404 == 0) {\n                // 0x405ce1\n                return v10 & 0xffffffff;\n            }\n            goto lab_0x405931;\n        }\n    }\n  lab_0x405d75:\n    // 0x405d75\n    if ((char)function_40e2f0(a1, v372) != 0) {\n        // 0x407130\n        function_40dcf0(1, 4, g56);\n        function_40dcf0(0, 4, g57);\n        char * format8 = dcgettext(NULL, \"cannot copy a directory, %s, into itself, %s\", 5); // 0x40716b\n        v6 = 0;\n        error(0, (int32_t)\"cannot copy a directory, %s, into itself, %s\" ^ (int32_t)\"cannot copy a directory, %s, into itself, %s\", format8);\n        *v7 = 1;\n        v394 = v368;\n        v393 = (int64_t)format8;\n        goto lab_0x405e18;\n    } else {\n        // 0x405d8c\n        if ((char)function_40e2f0(str3, v372) != 0) {\n            // 0x407980\n            function_40ddd0(4, g57);\n            error(0, (int32_t)\"warning: source directory %s specified more than once\" ^ (int32_t)\"warning: source directory %s specified more than once\", dcgettext(NULL, \"warning: source directory %s specified more than once\", 5));\n            if (a10 != 0 != *v4 != 0) {\n                // 0x405ce1\n                return 1;\n            }\n            // 0x406c1b\n            *(char *)a10 = 1;\n            // 0x405ce1\n            return 1;\n        }\n        int32_t v407 = *v5; // 0x405da7\n        v374 = v367;\n        v375 = v368;\n        v376 = v369;\n        v377 = v370;\n        v378 = v371;\n        v379 = v372;\n        v380 = v373;\n        if (v407 == 4) {\n            goto lab_0x405ec6;\n        } else {\n            if (v407 != 3) {\n                goto lab_0x405dc1;\n            } else {\n                // 0x405db9\n                v374 = v367;\n                v375 = v368;\n                v376 = v369;\n                v377 = v370;\n                v378 = v371;\n                v379 = v372;\n                v380 = v373;\n                if ((char)a7 != 0) {\n                    goto lab_0x405ec6;\n                } else {\n                    goto lab_0x405dc1;\n                }\n            }\n        }\n    }\n  lab_0x40560f:\n    // 0x40560f\n    if ((char)v127 != 0) {\n        // 0x405ce1\n        return 1;\n    }\n    int64_t v105 = v408 & 0xffffffff ^ 1; // 0x405625\n    int64_t v409; // 0x405400\n    int64_t v106; // 0x405400\n    int64_t v234; // 0x405400\n    int64_t v233; // 0x405400\n    int64_t v104; // 0x405400\n    int64_t v232; // 0x405400\n    int64_t v102; // 0x405400\n    int64_t v231; // 0x405400\n    int64_t v230; // 0x405400\n    int64_t v107; // 0x407865\n    if ((owner & 0xf000) == 0x4000) {\n        // 0x407370\n        v231 = v103;\n        v233 = v105;\n        if (v138 == 0x4000) {\n            goto lab_0x4056b0;\n        } else {\n            // 0x407380\n            if (*v4 == 0) {\n                goto lab_0x407c95;\n            } else {\n                uint32_t v410 = *(int32_t *)&v89; // 0x40738b\n                v102 = v103;\n                v104 = v105;\n                v106 = v410;\n                if (v410 == 0) {\n                    goto lab_0x407c95;\n                } else {\n                    goto lab_0x4073b0;\n                }\n            }\n        }\n    } else {\n        if (v138 == 0x4000) {\n            // 0x40785a\n            if (*v4 == 0) {\n                goto lab_0x407bb1;\n            } else {\n                uint32_t v411 = *(int32_t *)&v89; // 0x407865\n                if (v411 == 0) {\n                    goto lab_0x407bb1;\n                } else {\n                    // 0x407872\n                    v107 = v411;\n                    v409 = v107;\n                    if ((char)a7 != 0) {\n                        goto lab_0x405654;\n                    } else {\n                        goto lab_0x407ae8;\n                    }\n                }\n            }\n        } else {\n            int64_t v412 = (int64_t)*(int32_t *)&v89; // 0x40564c\n            v409 = v412;\n            v230 = v103;\n            v232 = v105;\n            v234 = v412;\n            if ((char)a7 == 0) {\n                goto lab_0x4056b4;\n            } else {\n                goto lab_0x405654;\n            }\n        }\n    }\n  lab_0x4055ee:;\n    int32_t v413 = *(int32_t *)(a6 + 8); // 0x4055f3\n    v414 = v415;\n    v416 = v413;\n    v417 = v418;\n    if (*v4 != 0) {\n        goto lab_0x406b8f;\n    } else {\n        // 0x4055fd\n        v103 = v415;\n        v408 = v418;\n        switch (v413) {\n            case 2: {\n                int64_t v419 = v397;\n                return v419 & 0xffffffff;\n            }\n            case 3: {\n                // 0x407a29\n                v6 = a6;\n                int64_t v420 = function_404890(a6, str3, v303 + 24); // 0x407a45\n                v103 = str3;\n                v408 = v418 % 256;\n                if ((char)v420 == 0) {\n                    // 0x405ce1\n                    return 1;\n                }\n                // break -> 0x40560f\n                break;\n            }\n        }\n        goto lab_0x40560f;\n    }\n  lab_0x40607b:\n    // 0x40607b\n    v347 = v345;\n    v359 = v357;\n    v355 = v354;\n    v353 = v351;\n    v350 = v348;\n    v344 = v342;\n    v360 = function_409480(str3, (int64_t)owner, v11);\n    goto lab_0x40609c;\n  lab_0x406920:\n    // 0x406920\n    function_40dcf0(1, 4, str3);\n    v6 = 0;\n    function_40dcf0(0, 4, a1);\n    v108 = (int64_t)\"%s and %s are the same file\";\n    goto lab_0x405818;\n  lab_0x407280:;\n    int32_t v453 = v93;\n    v94 = v385;\n    v95 = v453;\n    v96 = v97;\n    v98 = v93;\n    v99 = v382;\n    int64_t v227; // 0x405400\n    int64_t v229; // 0x405400\n    int64_t v228; // 0x405400\n    int64_t v226; // 0x405400\n    if ((*(int32_t *)(v384 + 24) & 0xf000) == 0xa000) {\n        goto lab_0x4055d3;\n    } else {\n        if ((char)v381 == 0) {\n            goto lab_0x4072a4;\n        } else {\n            // 0x407299\n            if (*(int64_t *)(v384 + 16) < 2) {\n                goto lab_0x4072a4;\n            } else {\n                // 0x407d71\n                v6 = a1;\n                int64_t v454 = function_40e2f0(a1, str3); // 0x407d90\n                int64_t v455 = 0x100000000 * v384 >> 32; // 0x407d9c\n                v89 = v455;\n                int64_t v456 = v382 % 256; // 0x407da5\n                if ((char)v454 == 0) {\n                    // 0x408552\n                    v217 = str3;\n                    v218 = v454;\n                    v219 = v456;\n                    v220 = (int64_t)(*v4 ^ 1);\n                    goto lab_0x4076ab;\n                } else {\n                    int64_t v457 = 0x100000000000000 * v383 >> 56; // 0x407d95\n                    v389 = str3;\n                    v386 = v455;\n                    v388 = v457;\n                    v387 = v456;\n                    v226 = str3;\n                    v227 = v455;\n                    v228 = v457;\n                    v229 = v456;\n                    if ((*(int32_t *)(v457 + 24) & 0xf000) != 0xa000) {\n                        goto lab_0x406f37;\n                    } else {\n                        goto lab_0x406f4b;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406b8f:;\n    int64_t v458 = v417; // 0x405400\n    switch (v416) {\n        case 2: {\n            goto lab_0x406c10;\n        }\n        case 3: {\n            goto lab_0x406bd6;\n        }\n        default: {\n            // 0x406b99\n            v103 = v414;\n            v408 = v417;\n            if (v416 != 4) {\n                goto lab_0x40560f;\n            } else {\n                // 0x406ba2\n                v103 = v414;\n                v408 = v417;\n                if (*(char *)(a6 + 47) == 0) {\n                    goto lab_0x40560f;\n                } else {\n                    // 0x406bad\n                    v6 = str3;\n                    int64_t v459 = function_404640(str3, owner); // 0x406bc1\n                    int64_t v460 = v417 % 256; // 0x406bc6\n                    v103 = owner;\n                    v408 = v460;\n                    v458 = v460;\n                    if ((char)v459 != 0) {\n                        goto lab_0x40560f;\n                    } else {\n                        goto lab_0x406bd6;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x405818:\n    // 0x405818\n    v6 = 0;\n    // 0x405828\n    error(0, 0, dcgettext(NULL, (char *)v108, 5));\n    // 0x405ce1\n    return 0;\n  lab_0x4069ed:\n    // 0x4069ed\n    error(0, *err_num3, dcgettext(NULL, (char *)v399, 5));\n    function_4093f0((int64_t)owner, v11);\n    // 0x405ce1\n    return v10 & 0xffffffff;\n  lab_0x405931:;\n    int64_t * v41 = v405;\n    char v421 = *(char *)(a6 + 44); // 0x405931\n    int64_t v50; // 0x405400\n    int64_t v69; // 0x405400\n    int64_t v48; // 0x405400\n    int64_t v49; // 0x405400\n    int64_t v36; // 0x405400\n    int64_t v47; // 0x405400\n    int64_t v46; // 0x405400\n    int64_t v59; // 0x405400\n    int64_t v422; // 0x405400\n    int64_t v45; // 0x405400\n    int64_t v35; // 0x405400\n    int64_t v42; // 0x405400\n    int64_t v43; // 0x405400\n    int64_t v44; // 0x405400\n    int64_t * v40; // 0x405400\n    int64_t v38; // 0x405400\n    char v39; // 0x406270\n    int64_t v423; // 0x405951\n    bool v424; // 0x405400\n    int64_t str7; // 0x4077e5\n    int32_t v425; // 0x407f29\n    if (v421 == 0) {\n        // 0x406270\n        v39 = *(char *)(a6 + 23);\n        if (v39 != 0) {\n            int64_t v426 = (int64_t)*(char *)(a6 + 22); // 0x406967\n            v6 = a1;\n            int64_t v427 = function_4049c0(a1, str3, v426, 0, v396); // 0x406978\n            v38 = 0;\n            v40 = v41;\n            v42 = v72;\n            v43 = 0x100000000000000 * v427 >> 56;\n            v44 = 0;\n            v45 = v426;\n            v46 = v79;\n            v47 = 0;\n            v48 = a1;\n            v49 = v10;\n            v35 = v426;\n            v36 = v10;\n            if ((char)v427 != 0) {\n                goto lab_0x4059b5;\n            } else {\n                goto lab_0x406380;\n            }\n        } else {\n            // 0x406283\n            v59 = owner;\n            if (v138 == 0x8000) {\n                goto lab_0x406cb8;\n            } else {\n                unsigned char v428 = *(char *)(a6 + 20) & (char)(v138 != 0xa000); // 0x40629d\n                if (v428 != 0) {\n                    goto lab_0x406cb8;\n                } else {\n                    int64_t v429 = v428; // 0x40629d\n                    if (v138 == 0x1000) {\n                        // 0x407a75\n                        v6 = 0;\n                        v86 = 0;\n                        uint32_t v430 = owner & -1 - (int32_t)(int64_t)v41; // 0x407a98\n                        int64_t v431 = v430; // 0x407a9e\n                        char * pathname = (char *)str3; // 0x407aa3\n                        int32_t v432 = __xmknod(0, pathname, v430, (int32_t *)&v86); // 0x407aa3\n                        v38 = v429;\n                        v40 = v41;\n                        v42 = v72;\n                        v43 = 1;\n                        v44 = v429;\n                        v45 = v431;\n                        v46 = v79;\n                        v47 = v429;\n                        v48 = a1;\n                        v49 = v10;\n                        if (v432 != 0) {\n                            // 0x407edc\n                            v6 = str3;\n                            v38 = v429;\n                            v40 = v41;\n                            v42 = v72;\n                            v43 = 1;\n                            v44 = v429;\n                            v45 = v431;\n                            v46 = v79;\n                            v47 = v429;\n                            v48 = a1;\n                            v49 = v10;\n                            if (mkfifo(pathname, v430 & -0x1001) == 0) {\n                                goto lab_0x4059b5;\n                            } else {\n                                // 0x407f01\n                                v6 = 4;\n                                function_40ddd0(4, str3);\n                                v69 = (int64_t)\"cannot create fifo %s\";\n                                goto lab_0x406360;\n                            }\n                        } else {\n                            goto lab_0x4059b5;\n                        }\n                    } else {\n                        if ((owner & 0xb000) != 0x2000 && v138 != 0xc000) {\n                            if (v138 != 0xa000) {\n                                // 0x407b28\n                                v6 = 4;\n                                function_40ddd0(4, a1);\n                                v50 = (int64_t)\"%s has unknown file type\";\n                                goto lab_0x406222;\n                            } else {\n                                // 0x4077db\n                                str7 = function_409c30(a1, v1);\n                                if (str7 == 0) {\n                                    // 0x408570\n                                    v6 = 4;\n                                    function_40ddd0(4, a1);\n                                    v69 = (int64_t)\"cannot read symbolic link %s\";\n                                    goto lab_0x406360;\n                                } else {\n                                    int64_t v433 = function_409a40(str7, 0xffffff9c, str3, *(char *)(a6 + 22)); // 0x40780a\n                                    v422 = str3;\n                                    if ((int32_t)v433 < 0) {\n                                        // 0x407f24\n                                        v425 = *__errno_location();\n                                        v422 = str3;\n                                        if (v425 == 0) {\n                                            goto lab_0x407817;\n                                        } else {\n                                            // 0x407f39\n                                            if ((char)v72 == 0 == *(char *)(a6 + 45) == 1) {\n                                                if ((owner & 0xf000) != 0xa000) {\n                                                    goto lab_0x407f4d;\n                                                } else {\n                                                    // 0x408e5b\n                                                    v6 = str7;\n                                                    int64_t v434 = str7; // 0x408e70\n                                                    int64_t v435 = -1; // 0x408e70\n                                                    int64_t v436 = 0; // 0x408e70\n                                                    while (v435 != 0) {\n                                                        int64_t v437 = v434;\n                                                        v434 = v437 + (v424 ? -1 : 1);\n                                                        v6 = v434;\n                                                        v435--;\n                                                        v436 = v435;\n                                                        if (*(char *)v437 == 0) {\n                                                            // break -> \n                                                            break;\n                                                        }\n                                                        v436 = 0;\n                                                    }\n                                                    if (v1 != -2 - v436) {\n                                                        goto lab_0x407f4d;\n                                                    } else {\n                                                        int64_t str6 = function_409c30(str3, v1); // 0x408e89\n                                                        if (str6 == 0) {\n                                                            goto lab_0x407f4d;\n                                                        } else {\n                                                            int32_t strcmp_rc = strcmp((char *)str6, (char *)str7); // 0x408ea4\n                                                            int64_t v438 = 0x100000000 * str6 >> 32; // 0x408ea9\n                                                            v6 = v438;\n                                                            free((int64_t *)v438);\n                                                            v422 = v438;\n                                                            if (strcmp_rc != 0) {\n                                                                goto lab_0x407f4d;\n                                                            } else {\n                                                                goto lab_0x407817;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            } else {\n                                                goto lab_0x407f4d;\n                                            }\n                                        }\n                                    } else {\n                                        goto lab_0x407817;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x4062f1\n                            v6 = 0;\n                            int64_t v439 = ((int64_t)v41 ^ 0xffffffff) & v59; // 0x406310\n                            int32_t v440 = __xmknod(0, (char *)str3, (int32_t)v439, (int32_t *)&v86); // 0x406319\n                            v38 = v429;\n                            v40 = v41;\n                            v42 = v72;\n                            v43 = 1;\n                            v44 = v429;\n                            v45 = v439;\n                            v46 = v79;\n                            v47 = v429;\n                            v48 = a1;\n                            v49 = v10;\n                            if (v440 == 0) {\n                                goto lab_0x4059b5;\n                            } else {\n                                // 0x40633c\n                                v6 = 4;\n                                function_40ddd0(4, str3);\n                                v69 = (int64_t)\"cannot create special file %s\";\n                                goto lab_0x406360;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x405944\n        if (*(char *)&v6 == 47) {\n            goto lab_0x40597d;\n        } else {\n            // 0x40594a\n            v423 = function_40aa60();\n            v6 = v423;\n            int64_t v441 = v424 ? -1 : 1; // 0x405966\n            int64_t v442 = v423; // 0x405966\n            int64_t v443 = (int64_t)\".\"; // 0x405400\n            int64_t v444 = 2; // 0x405966\n            unsigned char v445 = *(char *)v443; // 0x405966\n            char v446 = *(char *)v442; // 0x405966\n            v442 += v441;\n            v6 = v442;\n            char v447 = v446; // 0x405966\n            bool v448 = false; // 0x405966\n            while (v445 == v446) {\n                v444--;\n                v443 += v441;\n                v447 = v445;\n                v448 = true;\n                if (v444 == 0) {\n                    // break -> \n                    break;\n                }\n                v445 = *(char *)v443;\n                v446 = *(char *)v442;\n                v442 += v441;\n                v6 = v442;\n                v447 = v446;\n                v448 = false;\n            }\n            unsigned char v449 = v447;\n            if ((v445 >= v449 && !v448) != v445 < v449) {\n                // 0x407200\n                if (__xstat(1, \".\", (struct stat *)&v70) != 0) {\n                    // 0x405975\n                    free((int64_t *)v423);\n                    goto lab_0x40597d;\n                } else {\n                    // 0x40721e\n                    if (__xstat(1, (char *)v423, (struct stat *)&v86) != 0) {\n                        // 0x405975\n                        free((int64_t *)v423);\n                        goto lab_0x40597d;\n                    } else {\n                        // 0x40847a\n                        if (v86 != (int64_t)v70) {\n                            goto lab_0x40724e;\n                        } else {\n                            // 0x405975\n                            free((int64_t *)v423);\n                            goto lab_0x40597d;\n                        }\n                    }\n                }\n            } else {\n                // 0x405975\n                free((int64_t *)v423);\n                goto lab_0x40597d;\n            }\n        }\n    }\n  lab_0x4061c2:;\n    int64_t v450 = owner; // 0x4061ca\n    if (a5 != 0) {\n        if (*(int64_t *)(a5 + 8) == v450) {\n            // 0x406202\n            if (*(int64_t *)(a5 + 16) == v11) {\n                // 0x406208\n                v6 = 4;\n                function_40ddd0(4, a1);\n                v50 = (int64_t)\"cannot copy cyclic symbolic link %s\";\n                goto lab_0x406222;\n            }\n        }\n        int64_t v451 = *(int64_t *)a5; // 0x4061f0\n        while (v451 != 0) {\n            int64_t v452 = v451;\n            if (*(int64_t *)(v452 + 8) == v450) {\n                // 0x406202\n                if (*(int64_t *)(v452 + 16) == v11) {\n                    // 0x406208\n                    v6 = 4;\n                    function_40ddd0(4, a1);\n                    v50 = (int64_t)\"cannot copy cyclic symbolic link %s\";\n                    goto lab_0x406222;\n                }\n            }\n            // 0x4061f0\n            v451 = *(int64_t *)v452;\n        }\n    }\n    int64_t v183 = v188 - 17 & -16; // 0x4063c8\n    *(int64_t *)v183 = a5;\n    *(int64_t *)(v183 | 8) = v450;\n    *(int64_t *)(v183 + 16) = v11;\n    int64_t * v170; // 0x405400\n    int64_t v169; // 0x405400\n    int64_t v168; // 0x405400\n    if ((owner & 0xf000) == 0x4000 == (char)v72 == 0) {\n        // 0x4075e0\n        v168 = 0;\n        v170 = NULL;\n        if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) != 0) {\n            // 0x407b47\n            v6 = str3;\n            v168 = 0;\n            v170 = NULL;\n            if ((char)function_405090(str3, *(char *)(a6 + 37), 0, a6) != 0) {\n                goto lab_0x4064ff;\n            } else {\n                // 0x407b65\n                v35 = 0;\n                v36 = v10;\n                v168 = 0;\n                v170 = NULL;\n                if (*(char *)(a6 + 38) == 0) {\n                    goto lab_0x4064ff;\n                } else {\n                    goto lab_0x406380;\n                }\n            }\n        } else {\n            goto lab_0x4064ff;\n        }\n    } else {\n        char * path = (char *)str3; // 0x40640f\n        if (mkdir(path, v401 & -1 - (int32_t)(int64_t)v171) != 0) {\n            // 0x407348\n            v6 = 4;\n            function_40ddd0(4, str3);\n            v69 = (int64_t)\"cannot create directory %s\";\n            goto lab_0x406360;\n        } else {\n            // 0x40641c\n            v6 = 1;\n            if (__lxstat(1, path, (struct stat *)&v165) != 0) {\n                // 0x4079d3\n                v6 = 4;\n                function_40ddd0(4, str3);\n                v69 = (int64_t)\"cannot stat %s\";\n                goto lab_0x406360;\n            } else {\n                // 0x40643c\n                v169 = 0;\n                if ((owner & 448) == 448) {\n                    goto lab_0x406484;\n                } else {\n                    // 0x406459\n                    v6 = str3;\n                    v169 = 1;\n                    if (chmod(path, owner || 448) != 0) {\n                        // 0x407e20\n                        v6 = 4;\n                        function_40ddd0(4, str3);\n                        v69 = (int64_t)\"setting permissions for %s\";\n                        goto lab_0x406360;\n                    } else {\n                        goto lab_0x406484;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x405e18:;\n    char v52 = v394; // 0x405e1d\n    int64_t v54 = v10; // 0x405e1d\n    v51 = v393;\n    if (*(char *)(a6 + 37) != 0) {\n        goto lab_0x40687d;\n    } else {\n        goto lab_0x405e23;\n    }\n  lab_0x4076ab:\n    // 0x4076ab\n    if ((char)v220 == 0) {\n        goto lab_0x406920;\n    } else {\n        // 0x4076b4\n        v94 = v217;\n        v95 = v93;\n        v96 = 0x100000000000000 * v218 >> 56;\n        v98 = v93;\n        v99 = v219;\n        goto lab_0x4055d3;\n    }\n  lab_0x4056b0:\n    // 0x4056b0\n    v230 = v231;\n    v232 = v233;\n    v234 = (int64_t)*(int32_t *)&v89;\n    goto lab_0x4056b4;\n  lab_0x406c10:\n    // 0x406c10\n    if (a10 == 0) {\n        // 0x405ce1\n        return 1;\n    }\n    // 0x406c1b\n    *(char *)a10 = 1;\n    // 0x405ce1\n    return 1;\n  lab_0x406bd6:\n    // 0x406bd6\n    v6 = a6;\n    int64_t v477 = function_404890(a6, str3, v303 + 24); // 0x406bf2\n    v103 = str3;\n    v408 = v458 % 256;\n    if ((char)v477 != 0) {\n        goto lab_0x40560f;\n    } else {\n        goto lab_0x406c10;\n    }\n  lab_0x40687d:\n    // 0x40687d\n    function_4047a0(v6);\n    v472 = v51;\n    goto lab_0x406888;\n  lab_0x405f75:;\n    unsigned char v478 = *(char *)(a6 + 46) % 2; // 0x405f82\n    v361 = v346;\n    v366 = v358;\n    v72 = 1;\n    v363 = v352;\n    v362 = v349;\n    v365 = v356;\n    v364 = 1;\n    v188 = v343;\n    if (v478 != 0) {\n        // 0x4076c0\n        __printf_chk(1, dcgettext(NULL, \"copied \", 5));\n        function_4047e0(a1, str3, v358);\n        v361 = v346;\n        v366 = v358;\n        v72 = v478;\n        v363 = v352;\n        v362 = v349;\n        v365 = v356;\n        v364 = 1;\n        v188 = v343;\n    }\n    goto lab_0x4058c6;\n  lab_0x405e23:;\n    int64_t file_path3 = v52; // 0x405e23\n    v6 = file_path3;\n    if (v52 == 0) {\n        // 0x405ce1\n        return v54 & 0xffffffff;\n    }\n    // 0x405e33\n    if (rename((char *)file_path3, (char *)str3) != 0) {\n        // 0x406c30\n        function_40ddd0(4, str3);\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot un-backup %s\", 5));\n        // 0x405ce1\n        return v54 & 0xffffffff;\n    }\n    // 0x405e47\n    if (*(char *)(a6 + 46) != 0) {\n        // 0x405e52\n        function_40dcf0(1, 4, str3);\n        function_40dcf0(0, 4, file_path3);\n        __printf_chk(1, dcgettext(NULL, \"%s -> %s (unbackup)\\n\", 5));\n    }\n    // 0x405ce1\n    return v54 & 0xffffffff;\n  lab_0x405dc1:\n    // 0x405dc1\n    function_40dcf0(1, 4, v372);\n    function_40dcf0(0, 4, str3);\n    char * format10 = dcgettext(NULL, \"will not create hard link %s to directory %s\", 5); // 0x405dfc\n    v6 = 0;\n    error(0, (int32_t)\"will not create hard link %s to directory %s\" ^ (int32_t)\"will not create hard link %s to directory %s\", format10);\n    v394 = v368;\n    v393 = (int64_t)format10;\n    goto lab_0x405e18;\n  lab_0x4072a4:;\n    int64_t v205 = v385; // 0x4072b1\n    int64_t v203 = v384; // 0x4072b1\n    char v210 = v390; // 0x4072b1\n    int64_t v201 = v383; // 0x4072b1\n    int64_t v199 = v382; // 0x4072b1\n    int64_t v221 = v385; // 0x4072b1\n    int32_t v222 = v453; // 0x4072b1\n    int64_t v225 = v384; // 0x4072b1\n    int64_t v224 = v383; // 0x4072b1\n    int64_t v223 = v382; // 0x4072b1\n    if ((*(int32_t *)(v383 + 24) & 0xf000) == 0xa000) {\n        goto lab_0x406f50;\n    } else {\n        goto lab_0x4072b7;\n    }\n  lab_0x406f6a:;\n    int64_t v91 = v209;\n    int64_t v84 = v208;\n    int64_t v88 = v207; // 0x407ba3\n    int64_t v101 = v206;\n    if (*(char *)(a6 + 44) != 0) {\n        goto lab_0x407ba0;\n    } else {\n        // 0x406f75\n        if ((*(int32_t *)(a6 + 20) & -0xff0100) == 0) {\n            goto lab_0x406f93;\n        } else {\n            // 0x406f7f\n            if ((*(int32_t *)(v88 + 24) & 0xf000) == 0xa000) {\n                goto lab_0x407ba0;\n            } else {\n                goto lab_0x406f93;\n            }\n        }\n    }\n  lab_0x406f37:;\n    int64_t v479 = v387;\n    int64_t v480 = v388;\n    int64_t v481 = v386; // 0x406f37\n    int64_t v482 = v389;\n    v226 = v482;\n    v227 = v481;\n    v228 = v480;\n    v229 = v479;\n    if ((*(int32_t *)(v481 + 24) & 0xf000) != 0xa000) {\n        // 0x406f37\n        v221 = v482;\n        v222 = v93;\n        v225 = v481;\n        v224 = v480;\n        v223 = v479;\n        goto lab_0x4072b7;\n    } else {\n        goto lab_0x406f4b;\n    }\n  lab_0x4056b4:;\n    unsigned char v235 = *v4; // 0x4056b4\n    int64_t v117; // 0x405400\n    int64_t v136; // 0x405400\n    int64_t v112; // 0x405400\n    int64_t v133; // 0x405400\n    int64_t v110; // 0x405400\n    if (v235 != 0) {\n        // 0x40795f\n        uint32_t v236; // 0x405400\n        if ((v236 & 0xf000) == 0x4000 || v138 != 0x4000) {\n            // 0x407975\n            v123 = v124;\n            v125 = 0;\n            v126 = v127;\n            v128 = v129;\n            v130 = v131;\n            int64_t v237; // 0x405400\n            v132 = v237;\n            v134 = v135;\n            int64_t v238; // 0x405400\n            v102 = v238;\n            v104 = v237;\n            int64_t v239; // 0x405400\n            v106 = v239;\n            if (v239 == 0) {\n                goto lab_0x405854;\n            } else {\n                goto lab_0x4073b0;\n            }\n        } else {\n            goto lab_0x407ae8;\n        }\n    } else {\n        // 0x4056c1\n        v136 = v235;\n        v133 = v232;\n        v110 = v230;\n        v112 = v232;\n        v117 = v234;\n        if (v234 != 0) {\n            goto lab_0x407918;\n        } else {\n            goto lab_0x4056ca;\n        }\n    }\n  lab_0x407c95:\n    // 0x407c95\n    v6 = 4;\n    function_40ddd0(4, str3);\n    v240 = (int64_t)\"cannot overwrite directory %s with non-directory\";\n    goto lab_0x406742;\n  lab_0x407bb1:\n    // 0x407bb1\n    function_40dcf0(1, 4, a1);\n    v6 = 0;\n    function_40dcf0(0, 4, str3);\n    v108 = (int64_t)\"cannot overwrite non-directory %s with directory %s\";\n    goto lab_0x405818;\n  lab_0x405654:\n    // 0x405654\n    if (v409 == 3) {\n        // 0x40790d\n        v102 = v103;\n        v104 = v105;\n        v106 = 3;\n        v110 = v103;\n        v112 = v105;\n        v117 = 3;\n        if (*v4 != 0) {\n            goto lab_0x4073b0;\n        } else {\n            goto lab_0x407918;\n        }\n    } else {\n        int64_t v473 = *(int64_t *)(a6 + 56); // 0x40565e\n        v6 = v473;\n        int64_t v474 = function_40ad30(v473, str3, v303); // 0x405676\n        v231 = str3;\n        v233 = v105 % 256;\n        if ((char)v474 != 0) {\n            // 0x407fa3\n            function_40dcf0(1, 4, a1);\n            v6 = 0;\n            function_40dcf0(0, 4, str3);\n            v108 = (int64_t)\"will not overwrite just-created %s with %s\";\n            goto lab_0x405818;\n        } else {\n            goto lab_0x4056b0;\n        }\n    }\n  lab_0x4069b8:\n    // 0x4069b8\n    function_40dcf0(1, 4, str3);\n    v6 = 0;\n    function_40dcf0(0, 4, a1);\n    v399 = (int64_t)\"inter-device move failed: %s to %s; unable to remove target\";\n    goto lab_0x4069ed;\n  lab_0x40597d:;\n    int64_t v475 = v421; // 0x405936\n    v6 = a1;\n    int64_t v476 = function_409a40(a1, 0xffffff9c, str3, *(char *)(a6 + 22)); // 0x405991\n    v38 = 0;\n    v40 = v41;\n    v42 = v72;\n    v43 = v475;\n    v44 = v475;\n    v45 = str3;\n    v46 = v79;\n    v47 = 0;\n    v48 = a1;\n    v49 = v10;\n    if ((int32_t)v476 < 0) {\n        // 0x40776e\n        function_40dcf0(1, 4, a1);\n        function_40dcf0(0, 4, str3);\n        char * format9 = dcgettext(NULL, \"cannot create symbolic link %s to %s\", 5); // 0x4077a5\n        int32_t err_num4 = *__errno_location(); // 0x4077bb\n        v6 = 0;\n        error(0, err_num4, format9);\n        v35 = (int64_t)format9;\n        v36 = v10;\n        goto lab_0x406380;\n    } else {\n        goto lab_0x4059b5;\n    }\n  lab_0x4064ff:;\n    int128_t v172 = __asm_movdqu(*(int128_t *)&v89); // 0x4064ff\n    int128_t v173 = __asm_movdqu(*(int128_t *)(a6 + 16)); // 0x406505\n    int128_t v174 = __asm_movdqu(*(int128_t *)(a6 + 32)); // 0x406513\n    int128_t v175 = __asm_movdqu(*(int128_t *)(a6 + 48)); // 0x406519\n    v86 = __asm_movaps(v172);\n    __asm_movaps(v173);\n    __asm_movaps(v174);\n    __asm_movaps(v175);\n    int64_t v176 = function_40e7f0(a1, 2); // 0x406543\n    int32_t length2; // bp-680, 0x405400\n    int32_t v177; // 0x405400\n    int32_t v167; // 0x405400\n    if (v176 == 0) {\n        // 0x407dd2\n        function_40ddd0(4, a1);\n        char * format6 = dcgettext(NULL, \"cannot access %s\", 5); // 0x407df2\n        int32_t * err_num2 = __errno_location(); // 0x407dfa\n        v6 = 0;\n        error(0, *err_num2, format6);\n        v177 = v167;\n        v38 = v168;\n        v40 = v170;\n        v42 = v72;\n        v43 = 0;\n        v44 = 0;\n        v45 = (int64_t)format6;\n        v46 = v79;\n        v47 = 0;\n        v48 = a1;\n        v49 = v10;\n    } else {\n        // 0x406558\n        int64_t v178; // 0x405400\n        char * v179; // 0x405400\n        int64_t v180; // 0x40666a\n        if (*(char *)v176 == 0) {\n            // branch -> 0x4066bb\n        } else {\n            int64_t v181 = &v86;\n            int64_t v182 = 0x100000000 * v183 >> 32;\n            v179 = (char *)a8;\n            int64_t v184 = 0; // 0x4065d5\n            int64_t str5 = v176; // 0x4065ef\n            int64_t v185 = function_40af00(); // 0x40660b\n            int64_t v186 = function_40af00(); // 0x40661f\n            char v187 = *v179; // 0x40664c\n            *(int64_t *)(v188 - 40) = 0;\n            *(int64_t *)(v188 - 48) = (int64_t)&length2;\n            *(int64_t *)(v188 - 56) = (int64_t)&v70;\n            *(int64_t *)(v188 - 64) = 0;\n            v70 = v187;\n            int64_t v189 = function_405400(v185, v186, (char)v74, v190, v182, v181, (int64_t)v187, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83); // 0x406665\n            v180 = 0x100000000000000 * (v189 & 1) >> 56;\n            *v7 = *v7 | (char)length2;\n            free((int64_t *)v186);\n            free((int64_t *)v185);\n            while ((char)length2 == 0) {\n                // 0x4065e0\n                v184 = v70 | (char)v184;\n                str5 = str5 + 1 + (int64_t)strlen((char *)str5);\n                v178 = v184;\n                if (*(char *)str5 == 0) {\n                    // break -> 0x40669c\n                    break;\n                }\n                v185 = function_40af00();\n                v186 = function_40af00();\n                v187 = *v179;\n                *(int64_t *)(v188 - 40) = 0;\n                *(int64_t *)(v188 - 48) = (int64_t)&length2;\n                *(int64_t *)(v188 - 56) = (int64_t)&v70;\n                *(int64_t *)(v188 - 64) = 0;\n                v70 = v187;\n                v189 = function_405400(v185, v186, (char)v74, v190, v182, v181, (int64_t)v187, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n                v180 = 0x100000000000000 * (v189 & v180) >> 56;\n                *v7 = *v7 | (char)length2;\n                free((int64_t *)v186);\n                free((int64_t *)v185);\n            }\n        }\n        // 0x4066bb\n        v6 = v176;\n        free((int64_t *)v176);\n        *v179 = (char)(v178 & 0xffffffff);\n        v177 = v167;\n        v38 = v168;\n        v40 = v170;\n        v42 = v72;\n        v43 = v180;\n        v44 = 0;\n        v45 = v74;\n        v46 = v79;\n        v47 = 0;\n        v48 = a1;\n        v49 = v10 % 256;\n    }\n    goto lab_0x4059b5;\n  lab_0x406f50:;\n    int64_t v198 = v199;\n    int64_t v200 = v201;\n    int64_t v202 = v203; // 0x407e69\n    int64_t v204 = v205;\n    v206 = v204;\n    v207 = v202;\n    v208 = v200;\n    v209 = v198;\n    if (v138 == 0xa000 == (v210 != 0)) {\n        // 0x407e54\n        v206 = v204;\n        v207 = v202;\n        v208 = v200;\n        v209 = v198;\n        if (*(int64_t *)(v202 + 16) < 2) {\n            goto lab_0x406f6a;\n        } else {\n            // 0x407e5f\n            v6 = a1;\n            char * v211 = canonicalize_file_name(file_path); // 0x407e77\n            int64_t v212 = 0x100000000 * v202 >> 32; // 0x407e83\n            v89 = v212;\n            int64_t v213 = v198 % 256; // 0x407e8d\n            v206 = v204;\n            v207 = v212;\n            v208 = 0x100000000000000 * v200 >> 56;\n            v209 = v213;\n            if (v211 == NULL) {\n                goto lab_0x406f6a;\n            } else {\n                int64_t v214 = (int64_t)v211; // 0x407e77\n                int64_t v215 = function_40e2f0(v214, str3); // 0x407eb3\n                int64_t v216 = 0x100000000000000 * v214 >> 56; // 0x407eb8\n                v6 = v216;\n                free((int64_t *)v216);\n                v217 = str3;\n                v218 = (int32_t)&g83 ^ (int32_t)&g83;\n                v219 = v213;\n                v220 = v215 & 0xffffffff ^ 1;\n                goto lab_0x4076ab;\n            }\n        }\n    } else {\n        goto lab_0x406f6a;\n    }\n  lab_0x4072b7:\n    // 0x4072b7\n    v94 = v221;\n    v95 = v222;\n    v96 = v97;\n    v98 = v93;\n    v99 = v223;\n    if (*(int64_t *)(v224 + 8) != *(int64_t *)(v225 + 8)) {\n        goto lab_0x4055d3;\n    } else {\n        // 0x4072c5\n        v94 = v221;\n        v95 = v222;\n        v96 = v97;\n        v98 = v93;\n        v99 = v223;\n        if (*(int64_t *)v224 != *(int64_t *)v225) {\n            goto lab_0x4055d3;\n        } else {\n            // 0x4072d1\n            v94 = v221;\n            v95 = v222;\n            v96 = 1;\n            v98 = v93;\n            v99 = v223;\n            v226 = v221;\n            v227 = v225;\n            v228 = v224;\n            v229 = v223;\n            if (*(char *)(a6 + 23) == 0) {\n                goto lab_0x406f4b;\n            } else {\n                goto lab_0x4055d3;\n            }\n        }\n    }\n  lab_0x407ba0:\n    // 0x407ba0\n    v217 = v101;\n    v218 = 0;\n    v219 = v91;\n    v220 = *(int64_t *)v88 == *(int64_t *)v84;\n    goto lab_0x4076ab;\n  lab_0x406f4b:\n    // 0x406f4b\n    v205 = v226;\n    v203 = v227;\n    v210 = *v4;\n    v201 = v228;\n    v199 = v229;\n    goto lab_0x406f50;\n  lab_0x4073b0:;\n    int64_t v483 = function_40ab40(a1, v102); // 0x4073b9\n    int64_t v484 = v104 % 256; // 0x4073be\n    int64_t v141 = v102; // 0x4073cb\n    int64_t v142 = v484; // 0x4073cb\n    int64_t str = v483; // 0x4073cb\n    int64_t v143 = v106; // 0x4073cb\n    int64_t v118 = v102; // 0x4073cb\n    int64_t v119 = v484; // 0x4073cb\n    int64_t v120 = v483; // 0x4073cb\n    int64_t v121 = v106; // 0x4073cb\n    int64_t v122 = 1; // 0x4073cb\n    if (*(char *)v483 == 46) {\n        goto lab_0x407d43;\n    } else {\n        goto lab_0x4073d1;\n    }\n  lab_0x4059b5:;\n    int64_t v191 = v49;\n    int64_t v192 = v48;\n    int64_t v193 = v45;\n    uint64_t v162 = v43;\n    int64_t * v194 = v40;\n    int64_t v195 = v38;\n    int32_t v196 = v177;\n    char v197 = v42; // 0x4059c3\n    int64_t v156 = v193; // 0x4059ca\n    if (v197 != 0) {\n        goto lab_0x405a20;\n    } else {\n        // 0x4059cc\n        v156 = v193;\n        if (v138 == 0x4000 | *(char *)(a6 + 20) == 1) {\n            goto lab_0x405a20;\n        } else {\n            // 0x4059d8\n            v156 = v193;\n            if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) == 0) {\n                goto lab_0x405a20;\n            } else {\n                // 0x4059e8\n                v6 = str3;\n                v156 = 0;\n                if ((char)function_405090(str3, *(char *)(a6 + 37), 0, a6) != 0) {\n                    goto lab_0x405a20;\n                } else {\n                    // 0x405a11\n                    v156 = 0;\n                    v35 = 0;\n                    v36 = v191;\n                    if (*(char *)(a6 + 38) != 0) {\n                        goto lab_0x406380;\n                    } else {\n                        goto lab_0x405a20;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406380:\n    // 0x406380\n    v51 = v35;\n    if (*(char *)(a6 + 37) != 0) {\n        goto lab_0x40687d;\n    } else {\n        // 0x40638b\n        v52 = v53;\n        v54 = v36;\n        if (v55 == 0) {\n            // 0x406399\n            function_4093f0((int64_t)owner, v11);\n            v52 = v53;\n            v54 = v36;\n        }\n        goto lab_0x405e23;\n    }\n  lab_0x406cb8:;\n    char * v56 = (char *)(a6 + 35); // 0x406cd2\n    unsigned char v57 = *v56; // 0x406cd2\n    int64_t v58 = function_40ac50(a1, 0x20000 * (int32_t)(*v5 == 2), v59); // 0x406ce2\n    int32_t v60 = v58; // 0x406ced\n    int32_t err_num5; // 0x405400\n    int64_t v61; // 0x405400\n    int64_t v62; // 0x405400\n    int64_t v63; // 0x405400\n    char * format11; // 0x405400\n    int64_t v64; // 0x405400\n    int64_t v65; // 0x405400\n    int32_t v66; // 0x405400\n    int32_t v67; // 0x405400\n    uint32_t fd2; // 0x406cf5\n    uint32_t v68; // 0x406d3c\n    if (v60 < 0) {\n        // 0x4079f6\n        v6 = 4;\n        function_40ddd0(4, a1);\n        v69 = (int64_t)\"cannot open %s for reading\";\n        goto lab_0x406360;\n    } else {\n        // 0x406cf5\n        fd2 = 0x1000000 * v60 >> 24;\n        if (__fxstat(1, fd2, (struct stat *)&v70) != 0) {\n            // 0x407ccf\n            function_40ddd0(4, a1);\n            v6 = 0;\n            char * v71 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x407cef\n            err_num5 = *__errno_location();\n            v64 = v72;\n            format11 = v71;\n            goto lab_0x406ea0;\n        } else {\n            if (v1 != (int64_t)owner) {\n                goto lab_0x40787f;\n            } else {\n                // 0x406d28\n                if (v11 != (int64_t)v70) {\n                    goto lab_0x40787f;\n                } else {\n                    // 0x406d3c\n                    v68 = v73 % 512;\n                    if ((char)v72 != 0) {\n                        // 0x406d3c\n                        v66 = (int64_t)v41;\n                        v61 = v74;\n                        goto lab_0x406df0;\n                    } else {\n                        int64_t v75 = function_40ac50(str3, *v56 == 0 ? 1 : 513, (int64_t)&v70); // 0x406d76\n                        int64_t v76 = 0x100000000 * v75 >> 32; // 0x406d7d\n                        if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) == 0) {\n                            int64_t v77 = v76 & 0xffffffff; // 0x408065\n                            v63 = v77;\n                            v15 = v72;\n                            v67 = 0;\n                            v65 = v76;\n                            v62 = v77;\n                            if ((int32_t)v76 < 0) {\n                                goto lab_0x406d9f;\n                            } else {\n                                goto lab_0x40807d;\n                            }\n                        } else {\n                            // 0x406d97\n                            v63 = v75 & 0xffffffff;\n                            if ((int32_t)v75 >= 0) {\n                                int64_t v78 = function_405090(str3, *(char *)(a6 + 37), 0, a6); // 0x4086b3\n                                v15 = v72;\n                                v67 = 0;\n                                v65 = v76;\n                                v62 = a6;\n                                if ((char)v78 != 0) {\n                                    goto lab_0x40807d;\n                                } else {\n                                    // 0x4086c3\n                                    v15 = 0;\n                                    v67 = 0;\n                                    v65 = v76;\n                                    v62 = a6;\n                                    if (*(char *)(a6 + 38) == 0) {\n                                        goto lab_0x40807d;\n                                    } else {\n                                        // 0x4086c3\n                                        fd = v76;\n                                        v16 = 0;\n                                        v18 = 0;\n                                        v20 = 0;\n                                        v22 = v79;\n                                        v23 = v78 & 0xffffffff;\n                                        v25 = a1;\n                                        v26 = v10;\n                                        goto lab_0x4083b0;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x406d9f;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406360:;\n    char * format4 = dcgettext(NULL, (char *)v69, 5); // 0x406362\n    int32_t * err_num = __errno_location(); // 0x40636a\n    v6 = 0;\n    error(0, *err_num, format4);\n    v35 = (int64_t)format4;\n    v36 = v10;\n    goto lab_0x406380;\n  lab_0x406f93:;\n    // 0x406f93\n    int64_t v80; // 0x405400\n    int64_t v81; // 0x405400\n    int64_t v82; // 0x405400\n    int32_t v83; // 0x405400\n    if (*v5 != 2) {\n        goto lab_0x406920;\n    } else {\n        // 0x406f9e\n        if ((*(int32_t *)(v84 + 24) & 0xf000) == 0xa000) {\n            // 0x408724\n            v6 = 1;\n            int32_t v85 = __xstat(1, file_path, (struct stat *)&v86); // 0x408744\n            int64_t v87 = 0x100000000000000 * v88 >> 56; // 0x408749\n            v89 = v87;\n            int64_t v90 = v91 % 256; // 0x408750\n            int32_t v92 = v93;\n            v94 = a1;\n            v95 = v92;\n            v96 = v97;\n            v98 = v93;\n            v99 = v90;\n            v82 = a1;\n            v80 = v87;\n            v83 = v92;\n            v81 = v90;\n            if (v85 == 0) {\n                goto lab_0x407010;\n            } else {\n                goto lab_0x4055d3;\n            }\n        } else {\n            // 0x406fb1\n            v86 = __asm_movaps(__asm_movdqa(*(int128_t *)v84));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 16)));\n            int64_t v100 = __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 32))); // 0x406fcd\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 48)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 64)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 80)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 96)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 112)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 128)));\n            v82 = v101;\n            v80 = v89;\n            v83 = v100;\n            v81 = v91;\n            goto lab_0x407010;\n        }\n    }\n  lab_0x407ae8:\n    // 0x407ae8\n    v102 = v103;\n    v104 = v105;\n    v106 = v107;\n    if ((int32_t)v107 != 0) {\n        goto lab_0x4073b0;\n    } else {\n        // 0x407af1\n        function_40dea0(0, 3, str3);\n        v6 = 0;\n        function_40dea0(0, 3, a1);\n        v108 = (int64_t)\"cannot move directory onto non-directory: %s -> %s\";\n        goto lab_0x405818;\n    }\n  lab_0x407918:;\n    int64_t v109 = function_40ab40(a1, v110); // 0x407921\n    int64_t v111 = v112 % 256; // 0x407926\n    int64_t v113 = v110; // 0x407933\n    int64_t v114 = v111; // 0x407933\n    int64_t v115 = v109; // 0x407933\n    int64_t v116 = v117; // 0x407933\n    v118 = v110;\n    v119 = v111;\n    v120 = v109;\n    v121 = v117;\n    v122 = 0;\n    if (*(char *)v109 == 46) {\n        goto lab_0x407d43;\n    } else {\n        goto lab_0x407939;\n    }\n  lab_0x4056ca:\n    // 0x4056ca\n    v123 = v124;\n    v125 = 0;\n    v126 = v127;\n    v128 = v129;\n    v130 = v131;\n    v132 = v133;\n    v134 = v135;\n    if (((char)v136 || (char)((owner & 0xf000) == 0x4000)) != 0) {\n        goto lab_0x405854;\n    } else {\n        char v137 = *(char *)(a6 + 21); // 0x4056f2\n        if (v137 != 0) {\n            goto lab_0x40571a;\n        } else {\n            // 0x405701\n            if (v1 < 2 | *(char *)(a6 + 34) == 0) {\n                // 0x407d0d\n                v123 = v124;\n                v125 = 0;\n                v126 = v137;\n                v128 = v129;\n                v130 = v131;\n                v132 = v133;\n                v134 = v135;\n                if (v138 != 0x8000 == *v5 == 2) {\n                    goto lab_0x40571a;\n                } else {\n                    goto lab_0x405854;\n                }\n            } else {\n                goto lab_0x40571a;\n            }\n        }\n    }\n  lab_0x407d43:;\n    int64_t v139 = v120 + 1; // 0x407d45\n    char v140 = *(char *)(v139 + (int64_t)(*(char *)v139 == 46)); // 0x407d4d\n    v136 = v122;\n    v133 = v119;\n    switch (v140) {\n        case 0: {\n            goto lab_0x4056ca;\n        }\n        case 47: {\n            goto lab_0x4056ca;\n        }\n        default: {\n            // 0x407d64\n            v141 = v118;\n            v142 = v119;\n            str = v120;\n            v143 = v121;\n            v113 = v118;\n            v114 = v119;\n            v115 = v120;\n            v116 = v121;\n            if (v122 == 0) {\n                goto lab_0x407939;\n            } else {\n                goto lab_0x4073d1;\n            }\n        }\n    }\n  lab_0x4073d1:;\n    int64_t v144 = v142; // 0x4073d5\n    if ((int32_t)v143 != 3) {\n        uint32_t len = strlen((char *)str); // 0x4073eb\n        int64_t str2 = function_40ab40(str3, v141); // 0x4073fe\n        int32_t len2 = strlen((char *)str2); // 0x40740d\n        int64_t v145 = len2; // 0x40740d\n        int64_t len3 = strlen(g59); // 0x407426\n        int64_t v146 = v142 % 256; // 0x40742b\n        v144 = v146;\n        if (0x100000000000000 * (int64_t)len >> 56 == len3 + v145) {\n            // 0x40744d\n            v144 = v146;\n            if (memcmp((int64_t *)(str & 0xffffffff), (int64_t *)(0x100000000000000 * str2 >> 56), len2) == 0) {\n                // 0x407482\n                v144 = v146;\n                if (strcmp((char *)((0x100000000 * str >> 32) + v145), g59) == 0) {\n                    int32_t len4 = strlen((char *)str3); // 0x4074b5\n                    int64_t v147 = function_4100e0(len3 + 1 + (int64_t)len4); // 0x4074cd\n                    int64_t * v148 = (int64_t *)v147; // 0x4074f4\n                    strcpy((char *)mempcpy(v148, (int64_t *)str3, len4), g59);\n                    uint32_t v149 = __xstat(1, (char *)v147, (struct stat *)&v86); // 0x40751a\n                    v6 = v147;\n                    free(v148);\n                    v144 = v146;\n                    if (v1 == v150 == v149 % 256 == 0) {\n                        // 0x408bd4\n                        v144 = v146;\n                        if (v11 == v86) {\n                            // 0x408be8\n                            char * format5; // 0x405400\n                            if (*v4 == 0) {\n                                // 0x408c39\n                                format5 = dcgettext(NULL, \"backing up %s might destroy source;  %s not copied\", 5);\n                            } else {\n                                // 0x408bef\n                                format5 = dcgettext(NULL, \"backing up %s might destroy source;  %s not moved\", 5);\n                            }\n                            // 0x408c03\n                            function_40dcf0(1, 4, a1);\n                            v6 = 0;\n                            function_40dcf0(0, 4, str3);\n                            // 0x405828\n                            error(0, 0, format5);\n                            // 0x405ce1\n                            return 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int64_t str4 = function_40a6b0(str3, *(int32_t *)&v89); // 0x407569\n    uint64_t v151 = 0x100000000000000 * v144 >> 56; // 0x407582\n    int32_t * err_num6; // 0x405400\n    int64_t v152; // 0x405400\n    if (str4 == 0) {\n        int32_t * v153 = __errno_location(); // 0x407c36\n        v123 = v124;\n        v125 = 0;\n        v126 = 1;\n        v128 = v129;\n        v130 = v131;\n        v132 = v151 % 256;\n        v134 = v135;\n        if (*v153 == 2) {\n            goto lab_0x405854;\n        } else {\n            // 0x407c55\n            v6 = 4;\n            function_40ddd0(4, str3);\n            err_num6 = v153;\n            v152 = (int64_t)\"cannot backup %s\";\n            goto lab_0x407c73;\n        }\n    } else {\n        int32_t len5 = strlen((char *)str4); // 0x407591\n        int64_t v154 = v135 - ((int64_t)len5 + 24 & -16); // 0x4075a5\n        int64_t * dest_mem = memcpy((int64_t *)(v154 + 15 & -16), (int64_t *)str4, len5 + 1); // 0x4075b1\n        free((int64_t *)(0x100000000000000 * str4 >> 56));\n        v123 = v124;\n        v125 = (int64_t)dest_mem;\n        v126 = 1;\n        v128 = v129;\n        v130 = v131;\n        v132 = v151 % 256;\n        v134 = v154;\n        goto lab_0x405854;\n    }\n  lab_0x405a20:;\n    int64_t v155 = v156;\n    int64_t v157 = v155; // 0x405a22\n    if ((char)v46 != 0) {\n        int64_t * v158 = (int64_t *)(a6 + 56); // 0x405a24\n        v157 = v155;\n        if (*v158 != 0) {\n            int64_t v159 = &v86; // 0x405a32\n            v6 = 1;\n            int32_t v160 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x405a45\n            v157 = v159;\n            if (v160 == 0) {\n                int64_t v161 = *v158; // 0x405a56\n                v6 = v161;\n                function_40aca0(v161, str3, v159);\n                v157 = v159;\n            }\n        }\n    }\n    // 0x405a78\n    if (v47 != 0 || v138 != 0x4000 == (*(char *)(a6 + 23) != 0)) {\n        // 0x405ce1\n        return v162 % 256 & 0xffffffff;\n    }\n    char v163 = v44;\n    if (*(char *)(a6 + 31) == 0) {\n        goto lab_0x405b50;\n    } else {\n        // 0x405a9c\n        v6 = str3;\n        if (v163 == 0) {\n            // 0x407190\n            if ((int32_t)function_40f8a0(str3, &v86) == 0) {\n                goto lab_0x405b5d;\n            } else {\n                goto lab_0x405b02;\n            }\n        } else {\n            // 0x405aef\n            if ((int32_t)function_40f8b0(str3, &v86, v157) == 0 || *__errno_location() == 38) {\n                // 0x405ce1\n                return v162 % 256 & 0xffffffff;\n            }\n            goto lab_0x405b02;\n        }\n    }\n  lab_0x406484:;\n    char * v164 = (char *)a8; // 0x406488\n    if (*v164 == 0) {\n        // 0x4078e7\n        v6 = str3;\n        function_409480(str3, v1, (int64_t)v165);\n        *v164 = 1;\n    }\n    // 0x406491\n    int32_t v166; // 0x405400\n    v167 = v166;\n    v168 = v169;\n    v170 = v171;\n    if (*(char *)(a6 + 46) != 0) {\n        // 0x406498\n        if (*v4 == 0) {\n            // 0x407a5f\n            v6 = a1;\n            function_4047e0(a1, str3, 0);\n            v167 = v166;\n            v168 = v169;\n            v170 = v171;\n        } else {\n            // 0x4064a3\n            function_40ddd0(4, str3);\n            v6 = 1;\n            __printf_chk(1, dcgettext(NULL, \"created directory %s\\n\", 5));\n            v167 = v166;\n            v168 = v169;\n            v170 = v171;\n        }\n    }\n    goto lab_0x4064ff;\n  lab_0x407939:\n    // 0x407939\n    v123 = v124;\n    v125 = 0;\n    v126 = v127;\n    v128 = v129;\n    v130 = v131;\n    v132 = v114;\n    v134 = v135;\n    v141 = v113;\n    v142 = v114;\n    str = v115;\n    v143 = v116;\n    if ((owner & 0xf000) != 0x4000) {\n        goto lab_0x4073d1;\n    } else {\n        goto lab_0x405854;\n    }\n  lab_0x405b50:\n    if (v163 != 0) {\n        // 0x405ce1\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x405b5d;\n  lab_0x40571a:\n    // 0x40571a\n    if (unlink((char *)str3) == 0) {\n        goto lab_0x40574f;\n    } else {\n        int32_t * v554 = __errno_location(); // 0x405737\n        if (*v554 != 2) {\n            // 0x40858f\n            v6 = 4;\n            function_40ddd0(4, str3);\n            err_num6 = v554;\n            v152 = (int64_t)\"cannot remove %s\";\n            goto lab_0x407c73;\n        } else {\n            goto lab_0x40574f;\n        }\n    }\n  lab_0x405b5d:\n    // 0x405b5d\n    if (*v403 != 0) {\n        if (true != (true == v197 == 0)) {\n            // 0x405b7f\n            v6 = a6;\n            int64_t v485 = function_4051e0(a6, str3, 0xffffffff, v190, v197, (int64_t *)&v165); // 0x405ba4\n            if ((int32_t)v485 == -1) {\n                // 0x405ce1\n                return 0;\n            }\n        }\n    }\n    // 0x405bc8\n    char v486; // 0x405c72\n    if (*(int64_t *)v3 % 0xff000000000100 != 0) {\n        // 0x407610\n        if ((int32_t)function_409b40(v192, 0xffffffff, str3) == 0) {\n            // 0x405ce1\n            return v162 % 256 & 0xffffffff;\n        }\n        // 0x405c6b\n        v486 = *(char *)(a6 + 36);\n        // 0x405ce1\n        return (v486 != 0 ? v191 : v162 % 256) & 0xffffffff & 0xffffffff;\n    }\n    // 0x405bdc\n    int64_t v487; // 0x4078cb\n    if (*v400 != 0) {\n        // 0x4078b1\n        v487 = (int32_t)function_409bd0(str3) != 0 ? v191 : v162 % 256;\n        // 0x405ce1\n        return v487 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405be7\n    if (*(char *)(a6 + 32) != 0) {\n        // 0x407a15\n        function_4053d0(v6);\n        // 0x4078b1\n        v487 = (int32_t)function_409bd0(str3) != 0 ? v191 : v162 % 256;\n        // 0x405ce1\n        return v487 & 0xffffffff & 0xffffffff;\n    }\n    int32_t v488 = (int64_t)v194; // 0x405bf8\n    int64_t * v489 = v194; // 0x405bfa\n    int64_t * v490; // 0x405400\n    int32_t v491; // 0x405400\n    uint32_t v492; // 0x40612e\n    int64_t * v493; // 0x40612e\n    if (v488 != 0) {\n        // 0x406127\n        v492 = -1 - (int32_t)function_4053d0(v6) & v488;\n        v493 = (int64_t *)(int64_t)v492;\n        v489 = v493;\n        if (v492 == 0) {\n            goto lab_0x405c00;\n        } else {\n            // 0x40613a\n            v491 = v196;\n            v490 = v493;\n            if ((char)v195 == 1) {\n                goto lab_0x405c0d;\n            } else {\n                if (v197 != 0) {\n                    int32_t v494 = __lxstat(1, (char *)str3, (struct stat *)&v165); // 0x4085c5\n                    v9 = str3;\n                    if (v494 == 0) {\n                        goto lab_0x406154;\n                    } else {\n                        goto lab_0x405ca7;\n                    }\n                } else {\n                    goto lab_0x406154;\n                }\n            }\n        }\n    } else {\n        goto lab_0x405c00;\n    }\n  lab_0x406ea0:\n    // 0x406ea0\n    error(0, err_num5, format11);\n    int64_t v27 = v64; // 0x406eac\n    int64_t v28 = 0; // 0x406eac\n    int64_t v29 = (int64_t)format11; // 0x406eac\n    int64_t v30 = v79; // 0x406eac\n    int64_t v31 = 0; // 0x406eac\n    int64_t v32 = a1; // 0x406eac\n    int64_t v33 = v10; // 0x406eac\n    goto lab_0x406eb7;\n  lab_0x40787f:\n    // 0x40787f\n    function_40ddd0(4, a1);\n    v6 = 0;\n    err_num5 = (int32_t)\"skipping file %s, as it was replaced while being copied\" ^ (int32_t)\"skipping file %s, as it was replaced while being copied\";\n    v64 = v72;\n    format11 = dcgettext(NULL, \"skipping file %s, as it was replaced while being copied\", 5);\n    goto lab_0x406ea0;\n  lab_0x40724e:\n    // 0x40724e\n    free((int64_t *)v423);\n    v6 = 0;\n    function_40dea0(0, 3, str3);\n    v50 = (int64_t)\"%s: can make relative symbolic links only in current directory\";\n    goto lab_0x406222;\n  lab_0x407010:;\n    // 0x407010\n    int64_t v495; // 0x405400\n    int64_t v496; // 0x405400\n    int64_t v497; // 0x405400\n    int128_t v498; // 0x405400\n    if ((*(int32_t *)(v80 + 24) & 0xf000) == 0xa000) {\n        // 0x4086ed\n        v6 = 1;\n        int32_t v499 = __xstat(1, (char *)str3, (struct stat *)&v70); // 0x40870a\n        int64_t v500 = v81 % 256; // 0x40870f\n        v94 = str3;\n        v95 = v83;\n        v96 = v97;\n        v98 = v93;\n        v99 = v500;\n        v496 = str3;\n        v497 = v93;\n        v495 = v500;\n        if (v499 == 0) {\n            goto lab_0x40709b;\n        } else {\n            goto lab_0x4055d3;\n        }\n    } else {\n        // 0x407024\n        v70 = __asm_movaps(__asm_movdqa(*(int128_t *)v80));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 16)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 32)));\n        int64_t v501 = __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 48))); // 0x407050\n        int64_t v502 = __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 64))); // 0x40705d\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 80)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 96)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 112)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 128)));\n        v496 = v82;\n        v498 = v501;\n        v497 = v502;\n        v495 = v81;\n        goto lab_0x40709b;\n    }\n  lab_0x40574f:;\n    int64_t v503 = v133 % 256;\n    char v504 = *(char *)(a6 + 46); // 0x40574f\n    if (v504 != 0) {\n        // 0x408011\n        function_40ddd0(4, str3);\n        __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n        v123 = v124;\n        v125 = 0;\n        v126 = v504;\n        v128 = v129;\n        v130 = v131;\n        v132 = v503;\n        v134 = v135;\n        goto lab_0x405854;\n    } else {\n        if ((char)a7 == 0) {\n            unsigned char v505 = *(char *)(a6 + 42) & (char)(v138 == 0x4000); // 0x407fea\n            v291 = v124;\n            v292 = 0;\n            v293 = 1;\n            v294 = v129;\n            v295 = v131;\n            v296 = v135;\n            if (v505 != 0) {\n                // 0x406762\n                v6 = v150;\n                v328 = v150;\n                v329 = v124;\n                v330 = 0;\n                v331 = v505;\n                v332 = v129;\n                v333 = v131;\n                v334 = v135;\n                goto lab_0x406780;\n            } else {\n                goto lab_0x405898;\n            }\n        } else {\n            int64_t v506 = 0x100000000000000 * a7 >> 56; // 0x40576f\n            v249 = v124;\n            v253 = 0;\n            v252 = v506;\n            v251 = v129;\n            v250 = v131;\n            v247 = v503;\n            v248 = v135;\n            v257 = v124;\n            v258 = 0;\n            v259 = v506;\n            v260 = v129;\n            v261 = v131;\n            v262 = v135;\n            if (*(int64_t *)(a6 + 56) == 0) {\n                goto lab_0x405d20;\n            } else {\n                goto lab_0x405790;\n            }\n        }\n    }\n  lab_0x407c73:\n    // 0x407c73\n    error(0, *err_num6, dcgettext(NULL, (char *)v152, 5));\n    // 0x405ce1\n    return 0;\n  lab_0x405c00:\n    // 0x405c00\n    v491 = v196;\n    v490 = v489;\n    if ((char)v195 == 0) {\n        // 0x405ce1\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x405c0d;\n  lab_0x405b02:\n    // 0x405b02\n    function_40ddd0(4, str3);\n    char * format17 = dcgettext(NULL, \"preserving times for %s\", 5); // 0x405b22\n    int32_t * err_num8 = __errno_location(); // 0x405b2a\n    v6 = 0;\n    error(0, *err_num8, format17);\n    if (*(char *)(a6 + 36) != 0) {\n        // 0x405ce1\n        return 0;\n    }\n    goto lab_0x405b50;\n  lab_0x406eb7:\n    // 0x406eb7\n    if (close(fd2) < 0) {\n        // 0x407beb\n        function_40ddd0(4, v32);\n        char * format2 = dcgettext(NULL, \"failed to close %s\", 5); // 0x407c07\n        error(0, *__errno_location(), format2);\n        int64_t v34 = 0x100000000 * v28 >> 32; // 0x407c25\n        v6 = v34;\n        free((int64_t *)v34);\n        v35 = (int64_t)format2;\n        v36 = v33;\n        goto lab_0x406380;\n    } else {\n        int64_t v37 = 0x100000000 * v28 >> 32; // 0x406ed9\n        v6 = v37;\n        free((int64_t *)v37);\n        v38 = v39;\n        v40 = v41;\n        v42 = v27;\n        v43 = 0x100000000000000 * v31 >> 56;\n        v44 = 0;\n        v45 = v29;\n        v46 = v30;\n        v47 = v31 % 256;\n        v48 = v32;\n        v49 = v33;\n        v35 = v29;\n        v36 = v33;\n        if ((char)v31 != 0) {\n            goto lab_0x4059b5;\n        } else {\n            goto lab_0x406380;\n        }\n    }\n  lab_0x406222:;\n    char * format3 = dcgettext(NULL, (char *)v50, 5); // 0x406224\n    v6 = 0;\n    error(0, 0, format3);\n    v35 = (int64_t)format3;\n    v36 = v10;\n    goto lab_0x406380;\n  lab_0x405c0d:\n    // 0x405c0d\n    if (chmod((char *)str3, v491 || (int32_t)(int64_t)v490) == 0) {\n        // 0x405ce1\n        return v162 % 256 & 0xffffffff;\n    }\n    // 0x405c2d\n    function_40ddd0(4, str3);\n    error(0, *__errno_location(), dcgettext(NULL, \"preserving permissions for %s\", 5));\n    // 0x405c6b\n    v486 = *(char *)(a6 + 36);\n    // 0x405ce1\n    return (v486 != 0 ? v191 : v162 % 256) & 0xffffffff & 0xffffffff;\n  lab_0x40709b:\n    // 0x40709b\n    v94 = v496;\n    v95 = v83;\n    v96 = v97;\n    v463 = v498;\n    v98 = v497;\n    v99 = v495;\n    // 0x4070af\n    v94 = v496;\n    v95 = v83;\n    v96 = v97;\n    v463 = v498;\n    v98 = v497;\n    v99 = v495;\n    if (v86 != (int64_t)v70) {\n        goto lab_0x4055d3;\n    } else {\n        // 0x4070c3\n        v94 = v496;\n        v95 = v83;\n        v96 = 1;\n        v463 = v498;\n        v98 = v497;\n        v99 = v495;\n        if (*(char *)(a6 + 23) == 0) {\n            goto lab_0x406920;\n        } else {\n            goto lab_0x4055d3;\n        }\n    }\n  lab_0x406df0:;\n    int64_t v507 = v68 & -1 - v66; // 0x406e0f\n    int64_t v508 = 0x100000000 * function_40ac50(str3, 193, v507);\n    int64_t v509 = v508 >> 32; // 0x406e1e\n    int32_t * v510 = __errno_location(); // 0x406e24\n    int32_t v511 = *v510; // 0x406e2f\n    char v512 = v508 < 0;\n    char v513 = v512; // 0x406e4b\n    int64_t v514 = v509; // 0x406e4b\n    int32_t v515 = v511; // 0x406e4b\n    int32_t v516; // 0x405400\n    int64_t v517; // 0x405400\n    if (v508 < 0 != (v511 == 17)) {\n        goto lab_0x4084f8;\n    } else {\n        char v518 = *v4; // 0x406e51\n        v517 = v518;\n        v516 = 17;\n        if (v518 == 0) {\n            int32_t v519 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x4084a6\n            v513 = v512;\n            v514 = v509;\n            v515 = 17;\n            if (v519 != 0) {\n                goto lab_0x4084f8;\n            } else {\n                // 0x4084af\n                v513 = v512;\n                v514 = v509;\n                v515 = 17;\n                if ((owner & 0xf000) != 0xa000) {\n                    goto lab_0x4084f8;\n                } else {\n                    // 0x4084c1\n                    if (*(char *)(a6 + 48) == 0) {\n                        // 0x40921a\n                        function_40ddd0(4, str3);\n                        char * format12 = dcgettext(NULL, \"not writing through dangling symlink %s\", 5); // 0x409241\n                        error(0, (int32_t)\"not writing through dangling symlink %s\" ^ (int32_t)\"not writing through dangling symlink %s\", format12);\n                        v27 = v508 < 0 == v511 == 17;\n                        v28 = 0;\n                        v29 = (int64_t)format12;\n                        v30 = v79;\n                        v31 = 0;\n                        v32 = a1;\n                        v33 = v10;\n                        goto lab_0x406eb7;\n                    } else {\n                        int64_t v520 = 0x100000000 * function_40ac50(str3, 65, v507);\n                        v513 = v520 < 0;\n                        v514 = v520 >> 32;\n                        v515 = *v510;\n                        goto lab_0x4084f8;\n                    }\n                }\n            }\n        } else {\n            goto lab_0x406e6a;\n        }\n    }\n  lab_0x407817:\n    // 0x407817\n    v6 = str7;\n    free((int64_t *)str7);\n    char v521 = *(char *)(a6 + 37); // 0x40781f\n    v51 = v422;\n    if (v521 != 0) {\n        goto lab_0x40687d;\n    } else {\n        char v522 = *v403; // 0x407832\n        if (v522 != 0) {\n            int64_t v523 = v521; // 0x407824\n            int64_t v524 = owner; // 0x408420\n            v6 = str3;\n            if (lchown((char *)str3, owner, owner) == 0) {\n                int64_t v525 = v522; // 0x4085de\n                v38 = v523;\n                v40 = v41;\n                v42 = v72;\n                v43 = v525;\n                v44 = v525;\n                v45 = v524;\n                v46 = v79;\n                v47 = 0;\n                v48 = a1;\n                v49 = v10;\n                goto lab_0x4059b5;\n            } else {\n                // 0x40844f\n                v6 = a6;\n                int64_t v526 = function_4051b0(a6); // 0x408452\n                int64_t v527 = 0x100000000000000 * v526 >> 56; // 0x408457\n                v38 = v523;\n                v40 = v41;\n                v42 = v72;\n                v43 = v527;\n                v44 = v527;\n                v45 = v524;\n                v46 = v79;\n                v47 = 0;\n                v48 = a1;\n                v49 = v10;\n                if ((char)v526 == 0) {\n                    char * format13 = dcgettext(NULL, \"failed to preserve ownership for %s\", 5); // 0x408df2\n                    int64_t v528 = (int64_t)format13; // 0x408df2\n                    int32_t * err_num7 = __errno_location(); // 0x408dfa\n                    v6 = 0;\n                    error(0, *err_num7, format13);\n                    char v529 = *(char *)(a6 + 36); // 0x408e14\n                    v35 = v528;\n                    v36 = v10;\n                    if (v529 != 0) {\n                        goto lab_0x406380;\n                    } else {\n                        int64_t v530 = v522; // 0x408e2f\n                        v38 = v529;\n                        v40 = v41;\n                        v42 = v72;\n                        v43 = v530;\n                        v44 = v530;\n                        v45 = v528;\n                        v46 = v79;\n                        v47 = 0;\n                        v48 = a1;\n                        v49 = v10;\n                        goto lab_0x4059b5;\n                    }\n                } else {\n                    goto lab_0x4059b5;\n                }\n            }\n        } else {\n            // 0x407840\n            v38 = v522;\n            v40 = v41;\n            v42 = v72;\n            v43 = 1;\n            v44 = 1;\n            v45 = v422;\n            v46 = v79;\n            v47 = v522;\n            v48 = a1;\n            v49 = v10;\n            goto lab_0x4059b5;\n        }\n    }\n  lab_0x406154:\n    // 0x406154\n    v490 = v493;\n    if ((v492 & -1 - owner) == 0) {\n        // 0x405ce1\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x405c0d;\n  lab_0x4084f8:;\n    unsigned char v531 = v513 & (char)(v515 == 21); // 0x408508\n    if (v531 == 0) {\n        // 0x408b9a\n        v517 = 1;\n        v516 = v515;\n        v15 = 1;\n        v67 = v66;\n        v65 = v514;\n        v62 = v61;\n        if ((int32_t)v514 < 0) {\n            goto lab_0x406e6a;\n        } else {\n            goto lab_0x40807d;\n        }\n    } else {\n        int64_t v532 = v531;\n        v6 = str3;\n        v517 = v532;\n        v516 = 21;\n        if ((char)str3 != 0) {\n            int64_t v533 = str3; // 0x408538\n            int64_t v534 = -1; // 0x408538\n            int64_t v535 = 0; // 0x408538\n            while (v534 != 0) {\n                int64_t v536 = v533;\n                v533 = v536 + (v424 ? -1 : 1);\n                v6 = v533;\n                v534--;\n                v535 = v534;\n                if (*(char *)v536 == 0) {\n                    // break -> \n                    break;\n                }\n                v535 = 0;\n            }\n            v517 = v532;\n            v516 = (int32_t)(*(char *)(str3 - 3 - v535) != 47) | 20;\n        }\n        goto lab_0x406e6a;\n    }\n  lab_0x406d9f:;\n    int32_t * v537 = __errno_location(); // 0x406d9f\n    if (*(char *)(a6 + 22) == 0) {\n        int32_t v538 = *v537; // 0x4087fc\n        v517 = 0;\n        v516 = v538;\n        if (v538 != 2) {\n            goto lab_0x406e6a;\n        } else {\n            // 0x408806\n            v66 = 0;\n            v61 = v63;\n            v517 = 0;\n            v516 = v538;\n            if (*v4 == 0) {\n                goto lab_0x406df0;\n            } else {\n                goto lab_0x406e6a;\n            }\n        }\n    } else {\n        // 0x406db2\n        if (unlink((char *)str3) != 0) {\n            // 0x40903a\n            function_40ddd0(4, str3);\n            v6 = 0;\n            char * v539 = dcgettext(NULL, \"cannot remove %s\", 5); // 0x40905e\n            err_num5 = *v537;\n            v64 = v72;\n            format11 = v539;\n            goto lab_0x406ea0;\n        } else {\n            // 0x406dc6\n            if (*(char *)(a6 + 46) != 0) {\n                // 0x408f9b\n                function_40ddd0(4, str3);\n                __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n            }\n            char v540 = *(char *)(a6 + 33); // 0x406dd1\n            int64_t v541 = (int64_t)v41;\n            int32_t v542 = v541;\n            v66 = v542;\n            v61 = v541 & 0xffffffff;\n            if (v540 != 0) {\n                int64_t v543 = function_404fc0(a1, str3, v68, 1, a6); // 0x408edd\n                v66 = v542;\n                v61 = 1;\n                if ((char)v543 != 0) {\n                    goto lab_0x406df0;\n                } else {\n                    // 0x408eed\n                    v27 = v540;\n                    v28 = 0;\n                    v29 = v68;\n                    v30 = v79;\n                    v31 = v543 & 0xffffffff;\n                    v32 = a1;\n                    v33 = v10;\n                    goto lab_0x406eb7;\n                }\n            } else {\n                goto lab_0x406df0;\n            }\n        }\n    }\n  lab_0x40807d:\n    // 0x40807d\n    v6 = 1;\n    fd3 = v65;\n    int32_t v544 = __fxstat(1, fd3, (struct stat *)&v86); // 0x408099\n    int64_t v545; // 0x405400\n    int64_t v546; // 0x405400\n    int64_t v547; // 0x405400\n    int64_t v548; // 0x405400\n    int64_t v549; // 0x405400\n    int64_t v550; // 0x405400\n    int64_t v551; // 0x406cf5\n    int64_t v552; // 0x408084\n    if (v544 != 0) {\n        // 0x408765\n        function_40ddd0(4, str3);\n        char * format14 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x408789\n        error(0, *__errno_location(), format14);\n        fd = fd3;\n        v16 = v15;\n        v18 = 0;\n        v20 = (int64_t)format14;\n        v22 = v79;\n        v23 = 0;\n        v25 = a1;\n        v26 = v10;\n        goto lab_0x4083b0;\n    } else {\n        // 0x4080ac\n        v551 = fd2;\n        v552 = v65 & 0xffffffff;\n        v550 = 0;\n        v548 = v62;\n        v549 = &v86;\n        v547 = v79;\n        v545 = a1;\n        v546 = v10;\n        if (v57 == 0) {\n            goto lab_0x4082ef;\n        } else {\n            int32_t * v553 = (int32_t *)(a6 + 52); // 0x4080b9\n            if (*v553 != 0) {\n                // 0x408d40\n                v6 = v552;\n                v550 = 0;\n                v548 = v62;\n                v549 = v551;\n                v547 = v79;\n                v545 = a1;\n                v546 = v10;\n                if (ioctl(fd3, 0x40049409) == 0) {\n                    goto lab_0x4082ef;\n                } else {\n                    // 0x408d60\n                    if (*v553 != 2) {\n                        goto lab_0x4080c4;\n                    } else {\n                        // 0x408d6b\n                        function_40dcf0(1, 4, a1);\n                        function_40dcf0(0, 4, str3);\n                        char * format15 = dcgettext(NULL, \"failed to clone %s from %s\", 5); // 0x408da6\n                        error(0, *__errno_location(), format15);\n                        fd = fd3;\n                        v16 = v15;\n                        v18 = 0;\n                        v20 = 0x100000000 * (int64_t)format15 >> 32;\n                        v22 = v79;\n                        v23 = 0;\n                        v25 = a1;\n                        v26 = v10;\n                        goto lab_0x4083b0;\n                    }\n                }\n            } else {\n                goto lab_0x4080c4;\n            }\n        }\n    }\n  lab_0x406e6a:\n    // 0x406e6a\n    function_40ddd0(4, str3);\n    v6 = 0;\n    err_num5 = v516;\n    v64 = v517;\n    format11 = dcgettext(NULL, \"cannot create regular file %s\", 5);\n    goto lab_0x406ea0;\n  lab_0x407f4d:\n    // 0x407f4d\n    free((int64_t *)str7);\n    function_40ddd0(4, str3);\n    char * format16 = dcgettext(NULL, \"cannot create symbolic link %s\", 5); // 0x407f75\n    v6 = 0;\n    error(0, 0x1000000 * v425 >> 24, format16);\n    v35 = (int64_t)format16;\n    v36 = v10;\n    goto lab_0x406380;\n  lab_0x4083b0:\n    // 0x4083b0\n    v27 = v16;\n    v28 = v18;\n    v29 = v20;\n    v30 = v22;\n    v31 = v23 % 256;\n    v32 = v25;\n    v33 = v26;\n    if (close(fd) < 0) {\n        // 0x4083d2\n        function_40ddd0(4, str3);\n        char * format = dcgettext(NULL, \"failed to close %s\", 5); // 0x4083f6\n        error(0, *__errno_location(), format);\n        v27 = v16;\n        v28 = v18;\n        v29 = (int64_t)format;\n        v30 = v22;\n        v31 = 0;\n        v32 = v25;\n        v33 = v26;\n    }\n    goto lab_0x406eb7;\n  lab_0x4082ef:;\n    int64_t v555 = v549; // 0x4082f4\n    if (*(char *)(a6 + 31) != 0) {\n        // 0x4085f4\n        v6 = v552;\n        length2 = v1;\n        int64_t v556 = function_40f460(v552, str3, (int64_t *)&length2, v548); // 0x408640\n        v555 = &length2;\n        if ((int32_t)v556 == 0) {\n            goto lab_0x4082fa;\n        } else {\n            // 0x40864d\n            function_40ddd0(4, str3);\n            char * format18 = dcgettext(NULL, \"preserving times for %s\", 5); // 0x408671\n            int64_t v557 = (int64_t)format18; // 0x408671\n            int32_t * err_num9 = __errno_location(); // 0x408679\n            v6 = 0;\n            error(0, *err_num9, format18);\n            v555 = v557;\n            fd = fd3;\n            v16 = v15;\n            v18 = v550;\n            v20 = v557;\n            v22 = v547;\n            v23 = 0;\n            v25 = v545;\n            v26 = v546;\n            if (*(char *)(a6 + 36) == 0) {\n                goto lab_0x4082fa;\n            } else {\n                goto lab_0x4083b0;\n            }\n        }\n    } else {\n        goto lab_0x4082fa;\n    }\n  lab_0x4082fa:;\n    int64_t v558 = v555; // 0x4082ff\n    if (*v403 == 0) {\n        goto lab_0x40835f;\n    } else {\n        // 0x408301\n        v558 = v555;\n        if (true == owner == v361) {\n            goto lab_0x40835f;\n        } else {\n            // 0x40831d\n            v6 = a6;\n            int64_t v559 = function_4051e0(a6, str3, v552, v190, (char)v15, &v86); // 0x408343\n            v558 = v552;\n            fd = fd3;\n            v16 = v15;\n            v18 = v550;\n            v20 = v552;\n            v22 = v547;\n            v23 = 0;\n            v25 = v545;\n            v26 = v546;\n            if ((int32_t)v559 == -1) {\n                goto lab_0x4083b0;\n            } else {\n                goto lab_0x40835f;\n            }\n        }\n    }\n  lab_0x4080c4:;\n    int32_t v560 = getpagesize(); // 0x4080c4\n    char * v561; // 0x405400\n    int64_t v562 = (int64_t)v561; // 0x4080cc\n    int64_t v563 = v562; // 0x4080f5\n    char * v564; // 0x405400\n    if (v561 != (char *)0x2000000000000000 && v562 >= 0x2000000000000000) {\n        // 0x4080f7\n        v564 = (char *)0x20000;\n        v563 = v562 < 0x2000000000000001 ? v562 : 512;\n    }\n    // 0x40812a\n    posix_fadvise(fd2, 0, 0, POSIX_FADV_SEQUENTIAL);\n    uint32_t v565 = owner & 0xf000; // 0x408145\n    v89 = v565;\n    int64_t v566 = v544; // 0x408153\n    if (v565 == 0x8000) {\n        int64_t v567 = v362 - (int64_t)((v363 & 0xfffffffffffffe00) / 512); // 0x408166\n        v566 = v567 < 0 != (v362 & (v567 ^ -0x8000000000000000)) < 0;\n    }\n    uint64_t v568 = (int64_t)v560; // 0x4080c9\n    int64_t v569; // 0x405400\n    int64_t v570; // 0x405400\n    int64_t v571; // 0x405400\n    int64_t v572; // 0x405400\n    int64_t v573; // 0x405400\n    int64_t v574; // 0x405400\n    int64_t v575; // 0x405400\n    int64_t v576; // 0x405400\n    int64_t v577; // 0x405400\n    int64_t v578; // 0x405400\n    int64_t v579; // 0x405400\n    int32_t * v580; // 0x408cd0\n    int64_t v581; // 0x405400\n    if ((owner & 0xf000) == 0x8000) {\n        // 0x408cd0\n        v580 = (int32_t *)(a6 + 12);\n        int32_t v582 = *v580; // 0x408cd0\n        if (v582 == 3) {\n            int64_t v583 = (int64_t)v564;\n            int64_t v584 = function_4100e0(v583 + v568); // 0x408f08\n            uint64_t v585 = v568 - 1 + v584; // 0x408f14\n            int64_t v586 = 0x100000000 * v584 >> 32; // 0x408f17\n            int64_t v587 = v585 % v568;\n            int64_t v588 = v585 - v587; // 0x408f24\n            v574 = v586;\n            v579 = v588;\n            v581 = v587;\n            if ((int32_t)v566 != 0) {\n                goto lab_0x408d24;\n            } else {\n                // 0x408f3b\n                v89 = *v580 == 3;\n                v569 = v583;\n                v577 = v563;\n                v575 = v586;\n                v578 = v588;\n                v576 = &length2;\n                v573 = v587;\n                v572 = v79;\n                v570 = a1;\n                v571 = v10;\n                goto lab_0x408297;\n            }\n        } else {\n            if (v566 % 2 == 0 || v582 != 2) {\n                goto lab_0x40819b;\n            } else {\n                int64_t v589 = function_4100e0((int64_t)v564 + v568); // 0x408cfe\n                uint64_t v590 = v568 - 1 + v589; // 0x408d0a\n                v581 = v590 % v568;\n                v574 = 0x100000000 * v589 >> 32;\n                v579 = v590 - v581;\n                goto lab_0x408d24;\n            }\n        }\n    } else {\n        goto lab_0x40819b;\n    }\n  lab_0x40835f:;\n    int64_t v591 = v558; // 0x408364\n    if ((char)owner > -1 == (*(char *)(a6 + 39) != 0)) {\n        // 0x408c4f\n        v591 = v558;\n        if (geteuid() != 0) {\n            // 0x408c5c\n            v6 = v552;\n            v591 = 384;\n            if ((int32_t)function_404780(v552, str3, 384) == 0) {\n                // 0x408c7b\n                v6 = v552;\n                int64_t v592 = v68 & -1 - v67; // 0x408c90\n                function_404780(v552, str3, v592);\n                v591 = v592;\n            }\n        }\n    }\n    // 0x408373\n    int64_t v593; // 0x405400\n    if (*(int64_t *)v3 % 0xff000000000100 != 0) {\n        int64_t v594 = function_409b40(v545, v551, str3); // 0x4087db\n        fd = fd3;\n        v16 = v15;\n        v18 = v550;\n        v20 = str3;\n        v22 = v547;\n        v23 = 1;\n        v25 = v545;\n        v26 = v546;\n        if ((int32_t)v594 == 0) {\n            goto lab_0x4083b0;\n        } else {\n            goto lab_0x4087ee;\n        }\n    } else {\n        // 0x408387\n        if (*v400 != 0) {\n            // 0x408bb3\n            v593 = (int64_t)*(int32_t *)(a6 + 16);\n            goto lab_0x408bb7;\n        } else {\n            // 0x408392\n            if (*(char *)(a6 + 32) != 0) {\n                // 0x40910b\n                v593 = function_4053d0(v6) & 438 ^ 438;\n                goto lab_0x408bb7;\n            } else {\n                // 0x40839d\n                fd = fd3;\n                v16 = v15;\n                v18 = v550;\n                v20 = v591;\n                v22 = v547;\n                v23 = 1;\n                v25 = v545;\n                v26 = v546;\n                if (v67 != 0) {\n                    int64_t v595 = v6; // 0x40907d\n                    fd = fd3;\n                    int64_t v596; // 0x405400\n                    v16 = v596;\n                    int64_t v597; // 0x405400\n                    v18 = v597;\n                    int64_t v598; // 0x405400\n                    v20 = v598;\n                    int64_t v599; // 0x405400\n                    v22 = v599;\n                    v23 = 1;\n                    int64_t v600; // 0x405400\n                    v25 = v600;\n                    int64_t v601; // 0x405400\n                    v26 = v601;\n                    int32_t v602; // 0x405400\n                    if ((v602 & -1 - (int32_t)function_4053d0(v595)) == 0) {\n                        goto lab_0x4083b0;\n                    } else {\n                        int64_t v603 = v68; // 0x409098\n                        int64_t v604 = function_404780(v552, str3, v603); // 0x4090ab\n                        fd = fd3;\n                        v16 = v596;\n                        v18 = v597;\n                        v20 = v603;\n                        v22 = v599;\n                        v23 = 1;\n                        v25 = v600;\n                        v26 = v601;\n                        if ((int32_t)v604 == 0) {\n                            goto lab_0x4083b0;\n                        } else {\n                            // 0x4090c0\n                            function_40ddd0(4, str3);\n                            char * format19 = dcgettext(NULL, \"preserving permissions for %s\", 5); // 0x4090e4\n                            int32_t * v605 = __errno_location(); // 0x4090ec\n                            int32_t err_num10 = *v605; // 0x4090fd\n                            error(0, err_num10, format19);\n                            goto lab_0x4087ee;\n                        }\n                    }\n                } else {\n                    goto lab_0x4083b0;\n                }\n            }\n        }\n    }\n  lab_0x40819b:;\n    int64_t v606 = (int64_t)v564; // 0x4081a2\n    int64_t v607 = 0x7fffffffffffffff - v568; // 0x4081bd\n    uint64_t v608 = function_40a780(v2 < 0x2000000000000001 ? v2 : 0x20000, v606, v607); // 0x4081e4\n    v89 = 0;\n    uint64_t v609 = v606 - 1 + v608; // 0x408210\n    int64_t v610 = v609 - v609 % v608; // 0x40821b\n    int64_t v611 = v610 - 1 < 0x100000000 * v607 >> 32 ? v610 : v608;\n    int64_t v612 = function_4100e0(v611 + v568); // 0x40823f\n    uint64_t v613 = v568 - 1 + v612; // 0x40824b\n    int64_t v614 = 0x100000000 * v612 >> 32; // 0x40824e\n    int64_t v615 = v613 % v568;\n    int64_t v616 = v613 - v615; // 0x40825b\n    char * v617 = (char *)v611; // 0x40826c\n    int32_t v618 = 1; // 0x40826c\n    int64_t v619 = v614; // 0x40826c\n    int64_t v620 = v616; // 0x40826c\n    char v621 = 0; // 0x40826c\n    int64_t v622 = v615; // 0x40826c\n    if ((int32_t)v566 != 0) {\n        goto lab_0x408839;\n    } else {\n        // 0x408272\n        v89 = *(int32_t *)(a6 + 12) == 3;\n        v569 = v611;\n        v577 = 0;\n        v575 = v614;\n        v578 = v616;\n        v576 = &length2;\n        v573 = v615;\n        v572 = v79;\n        v570 = a1;\n        v571 = v10;\n        goto lab_0x408297;\n    }\n  lab_0x408839:\n    // 0x408839\n    v17 = v619;\n    int32_t v623 = v618;\n    int64_t v624 = v363; // 0x408840\n    int64_t v625 = &length2; // 0x408853\n    int32_t length = v363; // 0x40885a\n    char v626 = v58; // 0x408861\n    function_409550(v626, (int64_t *)&length2);\n    v21 = 0x100000000 * a7 >> 32;\n    int64_t v627 = v623 == 3 ? v563 : 0;\n    int64_t v628 = (int64_t)v617;\n    v24 = 0x100000000000000 * a1 >> 56;\n    int64_t v629 = 0; // 0x408895\n    int64_t v630 = 0; // 0x408895\n    int64_t v631 = v57;\n    int64_t v632 = v622;\n    int64_t v633 = 0;\n    char v634; // 0x405400\n    char v635 = v634;\n    v6 = v625;\n    int64_t v636; // 0x405400\n    int64_t v637; // 0x405400\n    int64_t v638; // 0x405400\n    int64_t v639; // 0x405400\n    char v640; // bp-688, 0x405400\n    int64_t v641; // 0x405400\n    int64_t v642; // 0x405400\n    while ((char)function_409580(v625) != 0) {\n        // 0x4088ba\n        int64_t v643; // 0x405400\n        v14 = v643;\n        int64_t v644; // 0x405400\n        uint64_t v645 = v644;\n        int64_t v646 = v629; // 0x4088c2\n        int64_t v647 = v630; // 0x4088c2\n        char v648 = v635; // 0x4088c2\n        int64_t v649 = v633; // 0x4088c2\n        int64_t v650 = v632; // 0x4088c2\n        int64_t v651 = v629; // 0x4088c2\n        int64_t v652 = v630; // 0x4088c2\n        int64_t v653 = v631; // 0x4088c2\n        if (v645 != 0) {\n            int64_t v654 = 0;\n            int64_t v655 = 24 * v654 + v14; // 0x40898e\n            int64_t v656 = *(int64_t *)v655; // 0x408992\n            int64_t v657 = *(int64_t *)(v655 + 8); // 0x408995\n            int64_t v658 = v656; // 0x4089a0\n            int64_t v659 = v657; // 0x4089a0\n            int64_t v660; // 0x4089a2\n            if (v657 + v656 > v624) {\n                // 0x4089a2\n                v660 = v656 - v624;\n                v658 = v660 < 0 == ((v660 ^ v656) & (v656 ^ v624)) < 0 == (v660 != 0) ? v624 : v656;\n                v659 = v624 - v658;\n            }\n            int64_t v661 = v659;\n            int64_t offset = v658;\n            int64_t v662 = offset - v646 - v647; // 0x4089b8\n            int64_t v663 = 0; // 0x4089bb\n            int64_t v664 = v627; // 0x4089bb\n            int64_t v665; // 0x408a08\n            if (v662 != 0) {\n                // 0x4089c1\n                if (lseek(fd2, (int32_t)offset, SEEK_SET) < 0) {\n                    // 0x408fd7\n                    v6 = 4;\n                    function_40ddd0(4, v24);\n                    v642 = (int64_t)\"cannot lseek %s\";\n                    goto lab_0x409011;\n                }\n                if (v623 == 1) {\n                    // 0x408a45\n                    v6 = v552;\n                    v663 = 0;\n                    v664 = 0;\n                    if ((char)function_404690(v552, v662) == 0) {\n                        // 0x409184\n                        v6 = 0;\n                        function_40dea0(0, 3, str3);\n                        v642 = (int64_t)\"%s: write failed\";\n                        goto lab_0x409011;\n                    }\n                } else {\n                    // 0x4089f3\n                    v665 = function_404ad0(fd3, str3, (char)(v623 == 3), v662);\n                    v663 = v665 & 0xffffffff;\n                    v664 = v627;\n                    if ((char)v665 == 0) {\n                        // 0x408a18\n                        v19 = v623 == 3;\n                        goto lab_0x408a34;\n                    }\n                }\n            }\n            int64_t v666 = v663;\n            char v667; // bp-689, 0x405400\n            *(int64_t *)(v188 - 16) = (int64_t)&v667;\n            v89 = 1;\n            *(int64_t *)(v188 - 24) = (int64_t)&v640;\n            *(int64_t *)(v188 - 32) = v661;\n            *(int64_t *)(v188 - 40) = str3;\n            *(int64_t *)(v188 - 48) = v24;\n            int64_t v668 = function_404b90(v626, v552, v620, v628, v664, 1, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83); // 0x408937\n            v19 = v620;\n            if ((char)v668 == 0) {\n                goto lab_0x408a34;\n            }\n            int64_t v669 = offset + (int64_t)v640; // 0x40894f\n            int64_t v670 = v624; // 0x408963\n            char v671 = 1; // 0x408963\n            int64_t v672 = v620; // 0x408963\n            while (v669 != v624) {\n                int64_t v673 = v654 + 1 & 0xffffffff; // 0x408969\n                v646 = offset;\n                int64_t v674 = v673; // 0x40897d\n                v647 = v661;\n                v670 = v669;\n                v671 = v635;\n                v672 = v661;\n                if (v673 >= v645) {\n                    // break -> 0x408a6a\n                    break;\n                }\n                v654 = v674;\n                v655 = 24 * v654 + v14;\n                v656 = *(int64_t *)v655;\n                v657 = *(int64_t *)(v655 + 8);\n                v658 = v656;\n                v659 = v657;\n                if (v657 + v656 > v624) {\n                    // 0x4089a2\n                    v660 = v656 - v624;\n                    v658 = v660 < 0 == ((v660 ^ v656) & (v656 ^ v624)) < 0 == (v660 != 0) ? v624 : v656;\n                    v659 = v624 - v658;\n                }\n                // 0x4089af\n                v661 = v659;\n                offset = v658;\n                v662 = offset - v646 - v647;\n                v663 = 0;\n                v664 = v627;\n                if (v662 != 0) {\n                    // 0x4089c1\n                    if (lseek(fd2, (int32_t)offset, SEEK_SET) < 0) {\n                        // 0x408fd7\n                        v6 = 4;\n                        function_40ddd0(4, v24);\n                        v642 = (int64_t)\"cannot lseek %s\";\n                        goto lab_0x409011;\n                    }\n                    if (v623 == 1) {\n                        // 0x408a45\n                        v6 = v552;\n                        v663 = 0;\n                        v664 = 0;\n                        if ((char)function_404690(v552, v662) == 0) {\n                            // 0x409184\n                            v6 = 0;\n                            function_40dea0(0, 3, str3);\n                            v642 = (int64_t)\"%s: write failed\";\n                            goto lab_0x409011;\n                        }\n                    } else {\n                        // 0x4089f3\n                        v665 = function_404ad0(fd3, str3, (char)(v623 == 3), v662);\n                        v663 = v665 & 0xffffffff;\n                        v664 = v627;\n                        if ((char)v665 == 0) {\n                            // 0x408a18\n                            v19 = v623 == 3;\n                            goto lab_0x408a34;\n                        }\n                    }\n                }\n                // 0x4088f5\n                v666 = v663;\n                *(int64_t *)(v188 - 16) = (int64_t)&v667;\n                v89 = 1;\n                *(int64_t *)(v188 - 24) = (int64_t)&v640;\n                *(int64_t *)(v188 - 32) = v661;\n                *(int64_t *)(v188 - 40) = str3;\n                *(int64_t *)(v188 - 48) = v24;\n                v668 = function_404b90(v626, v552, v620, v628, v664, 1, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n                v19 = v620;\n                if ((char)v668 == 0) {\n                    goto lab_0x408a34;\n                }\n                // 0x408948\n                v669 = offset + (int64_t)v640;\n                v670 = v624;\n                v671 = 1;\n                v672 = v620;\n            }\n            // 0x408a6a\n            v648 = v671;\n            v649 = v670;\n            v650 = v672;\n            v651 = offset;\n            v652 = v661;\n            v653 = v640 == 0 ? v666 : (int64_t)v667;\n        }\n        int64_t v675 = v653;\n        int64_t v676 = v650;\n        int64_t v677 = v649;\n        v6 = v14;\n        free((int64_t *)v14);\n        v644 = 0;\n        v643 = 0;\n        v629 = v651;\n        v630 = v652;\n        if (v648 != 0) {\n            // 0x408aa7\n            v641 = v675;\n            v638 = v677;\n            v639 = v676;\n            v637 = v21 & 0xffffffff;\n            v636 = v10 % 256;\n            goto lab_0x408aca;\n        }\n        v631 = v675;\n        v632 = v676;\n        v633 = v677;\n        v635 = 0;\n        v6 = v625;\n    }\n    int64_t v678 = v10 % 256; // 0x409134\n    int64_t v679 = v21 & 0xffffffff; // 0x409143\n    v641 = v631;\n    v638 = v633;\n    v639 = v632;\n    v637 = v679;\n    v636 = v678;\n    int64_t v680; // 0x405400\n    int64_t v681; // 0x405400\n    int64_t v682; // 0x405400\n    int64_t v683; // 0x405400\n    int64_t v684; // 0x405400\n    if (v635 != 0) {\n        goto lab_0x408aca;\n    } else {\n        char v685; // 0x405400\n        if (v685 == 0) {\n            // 0x4091c9\n            v6 = 0;\n            function_40dea0(0, 3, v24);\n            v680 = (int64_t)\"%s: failed to get extents info\";\n            v684 = v17;\n            v683 = v679;\n            v681 = v24;\n            v682 = v678;\n            goto lab_0x408b71;\n        } else {\n            // 0x409158\n            v89 = *(int32_t *)(a6 + 12) == 3;\n            v569 = v628;\n            v577 = v621 != 0 ? v563 : 0;\n            v575 = v17;\n            v578 = v620;\n            v576 = v625;\n            v573 = v632;\n            v572 = v679;\n            v570 = v24;\n            v571 = v678;\n            goto lab_0x408297;\n        }\n    }\n  lab_0x4087ee:\n    // 0x4087ee\n    fd = fd3;\n    v16 = v15;\n    v18 = v550;\n    v20 = str3;\n    v22 = v547;\n    v23 = (int64_t)(*(char *)(a6 + 36) ^ 1);\n    v25 = v545;\n    v26 = v546;\n    goto lab_0x4083b0;\n  lab_0x408d24:\n    // 0x408d24\n    v617 = v564;\n    v618 = *v580;\n    v619 = v574;\n    v620 = v579;\n    v621 = v57;\n    v622 = v581;\n    goto lab_0x408839;\n  lab_0x408aca:;\n    int64_t v686 = length; // 0x408aca\n    v550 = v17;\n    v548 = v638;\n    v549 = v639;\n    v547 = v637;\n    v545 = v24;\n    v546 = v636;\n    int64_t v687; // 0x405400\n    int64_t v688; // 0x405400\n    int64_t v689; // 0x405400\n    int64_t v690; // 0x405400\n    if (v638 >= v686 == v641 % 256 == 0) {\n        goto lab_0x4082ef;\n    } else {\n        int64_t v691 = v686 - v638; // 0x408aca\n        v6 = v552;\n        if (v623 == 1) {\n            // 0x4091ee\n            v550 = v17;\n            v548 = v638;\n            v549 = v639;\n            v547 = v637;\n            v545 = v24;\n            v546 = v636;\n            v690 = v17;\n            v689 = v637;\n            v687 = v24;\n            v688 = v636;\n            if ((char)function_404690(v552, v691) != 0) {\n                goto lab_0x4082ef;\n            } else {\n                goto lab_0x408f74;\n            }\n        } else {\n            // 0x408af1\n            v690 = v17;\n            v689 = v637;\n            v687 = v24;\n            v688 = v636;\n            if (ftruncate(fd3, length) != 0) {\n                goto lab_0x408f74;\n            } else {\n                // 0x408b19\n                v550 = v17;\n                v548 = v638;\n                v549 = v639;\n                v547 = v637;\n                v545 = v24;\n                v546 = v636;\n                if (v623 == 3 == v691 < 0 == ((v691 ^ v686) & (v638 ^ v686)) < 0 == (v691 != 0)) {\n                    // 0x408b2f\n                    v6 = v552;\n                    if ((int32_t)function_404740(v552, v638, v691) >= 0) {\n                        goto lab_0x4082ef;\n                    } else {\n                        // 0x408b4f\n                        v6 = 4;\n                        function_40ddd0(4, str3);\n                        v680 = (int64_t)\"error deallocating %s\";\n                        v684 = v17;\n                        v683 = v637;\n                        v681 = v24;\n                        v682 = v636;\n                        goto lab_0x408b71;\n                    }\n                } else {\n                    goto lab_0x4082ef;\n                }\n            }\n        }\n    }\n  lab_0x408297:\n    // 0x408297\n    *(int64_t *)(v188 - 8) = v573;\n    *(int64_t *)(v188 - 16) = (int64_t)&v640;\n    *(int64_t *)(v188 - 24) = v576;\n    v6 = v551;\n    *(int64_t *)(v188 - 32) = -1;\n    *(int64_t *)(v188 - 40) = str3;\n    *(int64_t *)(v188 - 48) = v570;\n    int64_t v692 = function_404b90((char)fd2, v552, v578, v569, v577, v89, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83); // 0x4082d1\n    fd = fd3;\n    v16 = v15;\n    v18 = v575;\n    v20 = v578;\n    v22 = v572;\n    v23 = 0;\n    v25 = v570;\n    v26 = v571;\n    if ((char)v692 == 0) {\n        goto lab_0x4083b0;\n    } else {\n        // 0x4082e2\n        v550 = v575;\n        v548 = v569;\n        v549 = v578;\n        v547 = v572;\n        v545 = v570;\n        v546 = v571;\n        if (v640 != 0) {\n            // 0x408f5a\n            v6 = v552;\n            v550 = v575;\n            v548 = v569;\n            v549 = v578;\n            v547 = v572;\n            v545 = v570;\n            v546 = v571;\n            v690 = v575;\n            v689 = v572;\n            v687 = v570;\n            v688 = v571;\n            if (ftruncate(fd3, length2) >= 0) {\n                goto lab_0x4082ef;\n            } else {\n                goto lab_0x408f74;\n            }\n        } else {\n            goto lab_0x4082ef;\n        }\n    }\n  lab_0x408bb7:\n    // 0x408bb7\n    fd = fd3;\n    v16 = v15;\n    v18 = v550;\n    v20 = v593;\n    v22 = v547;\n    v23 = (int32_t)function_409bd0(str3) == 0;\n    v25 = v545;\n    v26 = v546;\n    goto lab_0x4083b0;\n  lab_0x408b71:;\n    char * format20 = dcgettext(NULL, (char *)v680, 5); // 0x408b73\n    error(0, *__errno_location(), format20);\n    fd = fd3;\n    v16 = v15;\n    v18 = v684;\n    v20 = (int64_t)format20;\n    v22 = v683;\n    v23 = 0;\n    v25 = v681;\n    v26 = v682;\n    goto lab_0x4083b0;\n  lab_0x408f74:\n    // 0x408f74\n    v6 = 4;\n    function_40ddd0(4, str3);\n    v680 = (int64_t)\"failed to extend %s\";\n    v684 = v690;\n    v683 = v689;\n    v681 = v687;\n    v682 = v688;\n    goto lab_0x408b71;\n  lab_0x409011:;\n    char * format21 = dcgettext(NULL, (char *)v642, 5); // 0x409013\n    error(0, *__errno_location(), format21);\n    v19 = (int64_t)format21;\n    goto lab_0x408a34;\n}\n"
        },
        {
            "funcName": "function_409280",
            "funcStartAddr": "409280",
            "funcEndAddr": "4093ac",
            "decompiledFuncCode": "int64_t function_409280(int64_t a1, int64_t a2, char a3, int64_t a4, int64_t * a5, int32_t a6) {\n    if (a4 == 0) {\n        // 0x409351\n        __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n        // 0x40936a\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x409383\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (uint128_t)(int128_t)(uint64_t)(int64_t)\"src/copy.c\";\n    }\n    if ((uint32_t)(int32_t)a4 >= 4) {\n        // 0x409383\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (uint128_t)(int128_t)(uint64_t)(int64_t)\"src/copy.c\";\n    }\n    int32_t v1 = *(int32_t *)(a4 + 12); // 0x409296\n    if (v1 >= 4) {\n        // 0x40936a\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x409383\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n    }\n    uint32_t v2 = *(int32_t *)(a4 + 52); // 0x4092a7\n    if (v2 >= 3) {\n        // 0x409338\n        __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 2915, \"valid_options\");\n        // 0x409351\n        __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n        // 0x40936a\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x409383\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n    }\n    // 0x4092b5\n    if (*(char *)(a4 + 23) != 0) {\n        // 0x409300\n        if (*(char *)(a4 + 44) == 0) {\n            goto lab_0x4092bb;\n        } else {\n            // 0x409306\n            __assert_fail(\"!(co->hard_link && co->symbolic_link)\", \"src/copy.c\", 2916, \"valid_options\");\n            goto lab_0x40931f;\n        }\n    } else {\n        goto lab_0x4092bb;\n    }\n  lab_0x4092bb:\n    if (v1 != 2 != (v2 == 2)) {\n        char v3 = 0; // bp-9, 0x4092c6\n        g57 = a1;\n        g56 = a2;\n        int64_t result = function_405400(a1, a2, a3, 0, 0, a4, 1, (int64_t)&v3, (int64_t)a5, (int64_t)a6); // 0x4092f0\n        return result;\n    }\n    goto lab_0x40931f;\n  lab_0x40931f:\n    // 0x40931f\n    __assert_fail(\"! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)\", \"src/copy.c\", 2919, \"valid_options\");\n    // 0x409338\n    __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 2915, \"valid_options\");\n    // 0x409351\n    __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n    // 0x40936a\n    __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n    // 0x409383\n    __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n    return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n}\n"
        },
        {
            "funcName": "function_4093b0",
            "funcStartAddr": "4093b0",
            "funcEndAddr": "4093cc",
            "decompiledFuncCode": "int64_t function_4093b0(int64_t a1, int64_t a2) {\n    if (a1 == a2) {\n        // 0x4093c0\n        return *(int64_t *)(a1 + 8) & -256 | 1;\n    }\n    // 0x4093ba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4093d0",
            "funcStartAddr": "4093d0",
            "funcEndAddr": "4093e6",
            "decompiledFuncCode": "int64_t function_4093d0(int64_t a1) {\n    // 0x4093d0\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)a1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_4093f0",
            "funcStartAddr": "4093f0",
            "funcEndAddr": "409435",
            "decompiledFuncCode": "int64_t function_4093f0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40c0f0(g58); // 0x409411\n    int64_t result = 0; // 0x409419\n    if (v1 != 0) {\n        // 0x40941b\n        free((int64_t *)*(int64_t *)(v1 + 16));\n        free((int64_t *)v1);\n        result = &g83;\n    }\n    // 0x40942f\n    return result;\n}\n"
        },
        {
            "funcName": "function_409440",
            "funcStartAddr": "409440",
            "funcEndAddr": "409477",
            "decompiledFuncCode": "int64_t function_409440(int64_t a1, int64_t a2) {\n    int64_t v1 = a1; // bp-40, 0x409444\n    int64_t v2 = function_40b6a0(g58, &v1); // 0x409457\n    if (v2 == 0) {\n        // 0x409470\n        return 0;\n    }\n    // 0x409461\n    return *(int64_t *)(v2 + 16);\n}\n"
        },
        {
            "funcName": "function_409480",
            "funcStartAddr": "409480",
            "funcEndAddr": "4094f6",
            "decompiledFuncCode": "int64_t function_409480(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_4100e0(24); // 0x409498\n    int64_t v2 = function_410310(a1); // 0x4094a3\n    int64_t * v3 = (int64_t *)v1; // 0x4094b2\n    *v3 = a2;\n    int64_t * v4 = (int64_t *)(v1 + 16); // 0x4094b5\n    *v4 = v2;\n    *(int64_t *)(v1 + 8) = a3;\n    int64_t v5 = function_40c0b0(g58, v1); // 0x4094bd\n    if (v5 == 0) {\n        // 0x4094f1\n        function_410330(g58);\n        // UNREACHABLE\n    }\n    int64_t result = 0; // 0x4094cf\n    if (v1 != v5) {\n        // 0x4094d1\n        free((int64_t *)*v4);\n        free(v3);\n        result = *(int64_t *)(v5 + 16);\n    }\n    // 0x4094e6\n    return result;\n}\n"
        },
        {
            "funcName": "function_409500",
            "funcStartAddr": "409500",
            "funcEndAddr": "409536",
            "decompiledFuncCode": "int64_t function_409500(int64_t a1, int64_t a2) {\n    int64_t result = function_40b910(103, 0, 0x4093a0, 0x4093b0, 0x4093d0); // 0x40951b\n    g58 = result;\n    if (result != 0) {\n        // 0x40952c\n        return result;\n    }\n    // 0x409531\n    function_410330(103);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409540",
            "funcStartAddr": "409540",
            "funcEndAddr": "40954c",
            "decompiledFuncCode": "int64_t function_409540(void) {\n    // 0x409540\n    return function_40bb50(g58);\n}\n"
        },
        {
            "funcName": "function_409550",
            "funcStartAddr": "409550",
            "funcEndAddr": "409578",
            "decompiledFuncCode": "int64_t function_409550(char a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    *(int32_t *)a2 = (int32_t)a1;\n    *(int64_t *)(v1 + 40) = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(int64_t *)(v1 + 24) = 0;\n    *(int16_t *)(v1 + 32) = 0;\n    *(int32_t *)(v1 + 16) = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409580",
            "funcStartAddr": "409580",
            "funcEndAddr": "409868",
            "decompiledFuncCode": "int64_t function_409580(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 40); // 0x4095a1\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x4095a5\n    int64_t v3; // bp-4120, 0x409580\n    int64_t v4 = &v3; // 0x4095ac\n    int32_t v5; // 0x409580\n    int64_t v6 = v5;\n    int64_t * v7 = (int64_t *)(a1 + 24);\n    int64_t v8 = v5;\n    char * v9 = (char *)(a1 + 33);\n    int64_t v10; // bp-4152, 0x409580\n    __asm_rep_stosq_memset((char *)&v10, 0, 512);\n    v10 = *v2;\n    int64_t v11 = 0; // 0x4095ef\n    int64_t v12 = *v1; // 0x4095ef\n    int64_t result; // 0x409580\n    int64_t fd; // 0x409580\n    if (ioctl((int32_t)fd, -0x3fdf99f5) < 0) {\n      lab_0x4097a0_2:\n        // 0x4097a0\n        result = 0;\n        if (*v2 == 0) {\n            // 0x4097aa\n            *(char *)(a1 + 32) = 1;\n            result = 0;\n        }\n      lab_0x409789:\n        // 0x409789\n        return result;\n    }\n    int64_t v13; // 0x409580\n    int64_t v14; // 0x409580\n    int64_t v15; // 0x409580\n    int64_t v16; // 0x409580\n    int64_t v17; // 0x409580\n    int64_t v18; // 0x409580\n    int64_t v19; // 0x409580\n    int64_t fd2; // 0x409580\n    int64_t v20; // 0x409580\n    while (true) {\n      lab_0x4095f5:\n        if (v5 == 0) {\n            // break -> 0x409813\n            break;\n        }\n        uint64_t v21 = *v7; // 0x409604\n        if (v21 > -1 - v6) {\n            // 0x40982c\n            __assert_fail(\"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\", \"src/extent-scan.c\", 126, \"extent_scan_read\");\n            return linkat(0x2f637273, (char *)0x2e6e6163732d746e, 0x63730063, \"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\", 0x3e2d6e61);\n        }\n        int64_t v22 = v11;\n        int64_t v23 = *v1; // 0x40961a\n        fd2 = v23;\n        uint64_t v24 = v21 + v6; // 0x40961f\n        *v7 = v24;\n        uint128_t v25 = 24 * (int128_t)v24; // 0x40962d\n        if ((int64_t)v25 < 0) {\n            // 0x409827\n            function_410330(fd2);\n            // UNREACHABLE\n        }\n        if (v25 % 0x1f0000000000000001 != 0) {\n            // 0x409827\n            function_410330(fd2);\n            // UNREACHABLE\n        }\n        int64_t v26 = function_410140(fd2, 24 * v24); // 0x409650\n        *v1 = v26;\n        int64_t v27 = v26 + v12 - v23; // 0x40965f\n        v18 = v27;\n        v15 = v22;\n        if (v3 > 0x7fffffffffffffff - v8) {\n            goto lab_0x4096f6;\n        } else {\n            // 0x409680\n            fd2 = 0;\n            v13 = 0;\n            v16 = v8;\n            v19 = v4;\n            v20 = v3;\n            v17 = v27;\n            v14 = v22;\n            goto lab_0x409685;\n        }\n    }\n    // 0x409813\n    *v9 = 1;\n    // 0x409789\n    return v6 & 0xffffff00 | (int64_t)(*v2 != 0);\n  lab_0x4096f6:\n    // 0x4096f6\n    fd2 = (int64_t)\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\";\n    __assert_fail(\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\", \"src/extent-scan.c\", 141, \"extent_scan_read\");\n    int64_t v28 = (int64_t)\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\"; // 0x40970f\n    int64_t v29 = &g83; // 0x40970f\n    int64_t v30 = (int64_t)\"extent_scan_read\"; // 0x40970f\n    int64_t v31 = 141; // 0x40970f\n    int64_t v32 = v18; // 0x40970f\n    int64_t v33 = v15; // 0x40970f\n    goto lab_0x409710;\n  lab_0x409710:;\n    int64_t v34 = v33;\n    int64_t v35 = v31;\n    int64_t v36 = v30;\n    int64_t v37 = v29;\n    uint64_t v38 = *v2; // 0x409710\n    int64_t v39 = v37; // 0x409718\n    int64_t v40 = v36; // 0x409718\n    int64_t v41 = v35; // 0x409718\n    int64_t v42 = v32; // 0x409718\n    int64_t v43 = v38; // 0x409718\n    int64_t v44 = v34; // 0x409718\n    int64_t v45; // 0x409580\n    int64_t v46; // 0x409580\n    int32_t v47; // 0x409580\n    int64_t v48; // 0x409580\n    int64_t v49; // 0x409580\n    if (v38 > v35) {\n        goto lab_0x4096b2;\n    } else {\n        // 0x40971a\n        v45 = v28;\n        v48 = v37;\n        v49 = v35;\n        v47 = *(int32_t *)(v36 + 40);\n        v46 = v34;\n        goto lab_0x40971e;\n    }\n  lab_0x409685:;\n    int64_t v50 = v14;\n    int64_t v51 = v17;\n    int64_t v52 = v20;\n    int64_t v53 = v19;\n    int64_t v54 = v16;\n    int64_t v55 = v13;\n    v28 = v55;\n    v29 = v54;\n    v30 = v53;\n    v31 = v52;\n    v32 = v51;\n    v33 = v50;\n    int64_t v56; // 0x409580\n    int64_t v57; // 0x409580\n    if ((int32_t)v50 == 0) {\n        goto lab_0x409710;\n    } else {\n        int32_t v58 = *(int32_t *)(v53 + 40); // 0x40968e\n        int64_t * v59 = (int64_t *)(v51 + 8); // 0x409692\n        int64_t v60 = *v59; // 0x409692\n        int64_t v61 = *(int64_t *)v51 + v60; // 0x40969c\n        int32_t * v62 = (int32_t *)(v51 + 16); // 0x4096a3\n        if (*v62 != (v58 & -2) || v52 != v61) {\n            // 0x4096ad\n            v39 = v54;\n            v40 = v53;\n            v41 = v52;\n            v42 = v51;\n            v43 = v61;\n            v44 = v50;\n            v45 = v55;\n            v48 = v54;\n            v49 = v52;\n            v47 = v58;\n            v46 = v50;\n            if (v61 > v52) {\n                goto lab_0x4096b2;\n            } else {\n                goto lab_0x40971e;\n            }\n        } else {\n            // 0x4097c1\n            *v62 = v58;\n            fd2 = fd2 + 1 & 0xffffffff;\n            *v59 = v60 + v54;\n            v57 = v51;\n            v56 = v50;\n            goto lab_0x4096ce;\n        }\n    }\n  lab_0x4096b2:\n    // 0x4096b2\n    if (v43 - v41 < v39) {\n        goto lab_0x4097a0_2;\n    }\n    // 0x4096c1\n    *(int64_t *)v40 = v43;\n    *(int64_t *)(v40 + 16) = v41 + v39 - v43;\n    v57 = v42;\n    v56 = v44;\n    goto lab_0x4096ce;\n  lab_0x4096ce:;\n    int64_t v63 = v56;\n    int64_t v64 = v57;\n    int64_t v65 = fd2; // 0x4096d1\n    int64_t v66 = v64; // 0x4096d1\n    int64_t v67 = v63; // 0x4096d1\n    int64_t v68; // 0x409580\n    int64_t v69; // 0x409580\n    int64_t v70; // 0x409580\n    if (v5 <= (int32_t)fd2) {\n        // 0x4096ce\n        v68 = v64 + 16;\n        v70 = v64;\n        v69 = v63;\n        goto lab_0x409745;\n    } else {\n        goto lab_0x4096d3;\n    }\n  lab_0x40971e:;\n    int64_t v71 = v45 + 1; // 0x409721\n    fd2 = v71 & 0xffffffff;\n    int64_t v72 = v46 + 1 & 0xffffffff; // 0x409724\n    int64_t v73 = *v1 + 24 * (v46 & 0xffffffff); // 0x409731\n    *(int64_t *)v73 = v49;\n    *(int64_t *)(v73 + 8) = v48;\n    int64_t v74 = v73 + 16;\n    *(int32_t *)v74 = v47;\n    v68 = v74;\n    v70 = v73;\n    v69 = v72;\n    if (v5 > (int32_t)v71) {\n        // 0x40971e\n        v65 = fd2;\n        v66 = v73;\n        v67 = v72;\n        goto lab_0x4096d3;\n    } else {\n        goto lab_0x409745;\n    }\n  lab_0x4096d3:;\n    int64_t v75 = 56 * (v65 & 0xffffffff) + v4; // 0x4096e3\n    int64_t v76 = *(int64_t *)(v75 + 16); // 0x4096e7\n    uint64_t v77 = *(int64_t *)v75; // 0x4096eb\n    v13 = v65;\n    v16 = v76;\n    v19 = v75;\n    v20 = v77;\n    v17 = v66;\n    v14 = v67;\n    v18 = v66;\n    v15 = v67;\n    if (v77 > 0x7fffffffffffffff - v76) {\n        goto lab_0x4096f6;\n    } else {\n        goto lab_0x409685;\n    }\n  lab_0x409745:\n    // 0x409745\n    v11 = v69;\n    if (*(char *)v68 % 2 != 0) {\n        // 0x409800\n        *v9 = 1;\n        // 0x409806\n        *v7 = v11 & 0xffffffff;\n        result = 1;\n        goto lab_0x409789;\n    }\n    char v78 = *v9; // 0x40974f\n    uint32_t v79 = (int32_t)v11; // 0x409755\n    if (v79 >= 73) {\n        if (v78 != 0) {\n            // 0x409806\n            *v7 = v11 & 0xffffffff;\n            result = 1;\n            goto lab_0x409789;\n        } else {\n            int64_t v80 = v11 + 0xffffffff & 0xffffffff; // 0x409763\n            *v7 = v80;\n            int64_t v81 = *v1 + 24 * v80;\n            *v2 = *(int64_t *)(v81 - 24) + *(int64_t *)(v81 - 16);\n            result = 1;\n            goto lab_0x409789;\n        }\n    }\n    // 0x4097d4\n    v12 = v70;\n    *v7 = v11 & 0xffffffff;\n    if (v78 != 0) {\n        // 0x409789\n        return 1;\n    }\n    int64_t v82 = *(int64_t *)v12 + *(int64_t *)(v12 + 8); // 0x4097e4\n    *v2 = v82;\n    if (v79 == 72) {\n        // 0x409789\n        return 1;\n    }\n    // 0x4097e0\n    __asm_rep_stosq_memset((char *)&v10, 0, 512);\n    v10 = v82;\n    if (ioctl(*(int32_t *)&fd2, -0x3fdf99f5) < 0) {\n        goto lab_0x4097a0_2;\n    }\n    goto lab_0x4095f5;\n}\n"
        },
        {
            "funcName": "function_409870",
            "funcStartAddr": "409870",
            "funcEndAddr": "4098d4",
            "decompiledFuncCode": "int64_t function_409870(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = function_40ab40(a1, v1) - a1; // 0x40987f\n    uint64_t size = v2 + 9; // 0x409882\n    int64_t result = v1; // 0x409890\n    if (size >= 257) {\n        int64_t * mem = malloc((int32_t)size); // 0x409892\n        result = (int64_t)mem;\n        if (mem == NULL) {\n            // 0x4098c4\n            return 0;\n        }\n    }\n    int64_t * v3 = mempcpy((int64_t *)result, (int64_t *)a1, (int32_t)v2); // 0x4098a8\n    *v3 = 0x5858585858587543;\n    *(char *)((int64_t)v3 + 8) = 0;\n    // 0x4098c4\n    return result;\n}\n"
        },
        {
            "funcName": "function_4098e0",
            "funcStartAddr": "4098e0",
            "funcEndAddr": "4098f1",
            "decompiledFuncCode": "int64_t function_4098e0(int64_t path2, int64_t a2) {\n    uint32_t path1 = *(int32_t *)(a2 + 8); // 0x4098e6\n    return symlinkat((char *)(int64_t)path1, path1, (char *)path2);\n}\n"
        },
        {
            "funcName": "function_409900",
            "funcStartAddr": "409900",
            "funcEndAddr": "409a35",
            "decompiledFuncCode": "int64_t function_409900(int64_t fd, int64_t path1, int64_t a3, int64_t a4, int32_t flag, int64_t a6) {\n    int32_t fd2 = a3; // 0x409924\n    char * path2 = (char *)a4; // 0x409924\n    uint32_t v1 = linkat((int32_t)fd, (char *)path1, fd2, path2, flag); // 0x409924\n    int64_t result = v1; // 0x40992e\n    if ((char)a6 != 1 || v1 == 0) {\n        // 0x409944\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x40993a\n    if (*v2 != 17) {\n        // 0x409944\n        return result;\n    }\n    // 0x409960\n    int64_t v3; // bp-312, 0x409900\n    int64_t v4 = function_409870(a4, &v3); // 0x40996d\n    if (v4 == 0) {\n        // 0x409944\n        return 0xffffffff;\n    }\n    int64_t v5 = 0x100000000 * fd >> 32; // bp-344, 0x409993\n    int64_t v6 = function_40e910(v4, 0, &v5, 0x409850, 6); // 0x4099a6\n    int64_t v7 = 0x100000000 * (int64_t)v2 >> 32; // 0x4099ab\n    int32_t v8; // 0x409900\n    if ((int32_t)v6 == 0) {\n        char * path = (char *)v4; // 0x4099ff\n        int32_t v9 = 0; // 0x409a0e\n        if (renameat(fd2, path, fd2, path2) != 0) {\n            // 0x409a10\n            v9 = *(int32_t *)v7;\n        }\n        // 0x409a13\n        unlinkat(fd2, path, 0);\n        v8 = v9;\n    } else {\n        // 0x4099b4\n        v8 = *(int32_t *)v7;\n    }\n    // 0x4099b7\n    if (v4 != (int64_t)&v3) {\n        // 0x4099c1\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x4099db\n    if (v8 != 0) {\n        // 0x4099e1\n        *(int32_t *)v7 = v8;\n        result2 = 0xffffffff;\n    }\n    // 0x409944\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409a40",
            "funcStartAddr": "409a40",
            "funcEndAddr": "409b40",
            "decompiledFuncCode": "int64_t function_409a40(int64_t path1, int64_t a2, int64_t a3, char a4) {\n    int32_t fd = a2; // 0x409a5c\n    char * path2 = (char *)a3; // 0x409a5c\n    uint32_t v1 = symlinkat((char *)path1, fd, path2); // 0x409a5c\n    int64_t result = v1; // 0x409a61\n    if (a4 != 1 || v1 == 0) {\n        // 0x409a7a\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x409a6d\n    if (*v2 != 17) {\n        // 0x409a7a\n        return result;\n    }\n    // 0x409a90\n    int64_t v3; // bp-312, 0x409a40\n    int64_t v4 = function_409870(a3, &v3); // 0x409a9b\n    if (v4 == 0) {\n        // 0x409a7a\n        return 0xffffffff;\n    }\n    int64_t v5 = &v3; // 0x409a90\n    int64_t v6 = path1; // bp-328, 0x409abf\n    int32_t v7; // 0x409a40\n    if ((int32_t)function_40e910(v4, 0, &v6, 0x4098e0, 6) == 0) {\n        char * path = (char *)v4; // 0x409afa\n        if (renameat(fd, path, fd, path2) == 0) {\n            // 0x409b03\n            if (v4 != v5) {\n                // 0x409b08\n                free((int64_t *)v4);\n            }\n            // 0x409a7a\n            return 1;\n        }\n        // 0x409b18\n        unlinkat(fd, path, 0);\n        v7 = *v2;\n    } else {\n        // 0x409ad0\n        v7 = *v2;\n    }\n    // 0x409ad3\n    if (v4 != v5) {\n        // 0x409ad8\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x409ae3\n    if (v7 != 0) {\n        // 0x409b29\n        *v2 = v7;\n        result2 = 0xffffffff;\n    }\n    // 0x409a7a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409b40",
            "funcStartAddr": "409b40",
            "funcEndAddr": "409bca",
            "decompiledFuncCode": "int64_t function_409b40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409b40\n    int64_t v1; // 0x409b40\n    int64_t v2 = function_40c440(a1, a2, a3, v1, v1); // 0x409b4a\n    int64_t result = v2 & 0xffffffff; // 0x409b4f\n    int32_t v3 = v2; // 0x409b51\n    if (v3 == -2) {\n        // 0x409ba0\n        error(0, *__errno_location(), \"%s\", (char *)function_40e020(a1));\n        return result;\n    }\n    if (v3 == -1) {\n        // 0x409b5b\n        function_40e020(a3);\n        error(0, *__errno_location(), dcgettext(NULL, \"preserving permissions for %s\", 5));\n    }\n    // 0x409b90\n    return result;\n}\n"
        },
        {
            "funcName": "function_409bd0",
            "funcStartAddr": "409bd0",
            "funcEndAddr": "409c2c",
            "decompiledFuncCode": "int64_t function_409bd0(int64_t a1) {\n    // 0x409bd0\n    int64_t v1; // 0x409bd0\n    int64_t v2 = function_40c480(a1, v1, (int32_t)v1); // 0x409bd7\n    int64_t result = v2 & 0xffffffff; // 0x409bdc\n    if ((int32_t)v2 == 0) {\n        // 0x409be2\n        return result;\n    }\n    // 0x409bf0\n    function_40e020(a1);\n    error(0, *__errno_location(), dcgettext(NULL, \"setting permissions for %s\", 5));\n    return result;\n}\n"
        },
        {
            "funcName": "function_409c30",
            "funcStartAddr": "409c30",
            "funcEndAddr": "409d1f",
            "decompiledFuncCode": "int64_t function_409c30(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x409c69\n    int64_t * mem = malloc((int32_t)size); // 0x409c73\n    int64_t result = 0; // 0x409c7e\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x409c89\n        if (v1 < 0) {\n            // 0x409ce8\n            if (*__errno_location() != 34) {\n                // 0x409cf2\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x409c89\n        int64_t v3; // 0x409c30\n        if (buf_size > v2) {\n            // 0x409d00\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x409c9b\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x409ca8\n            int64_t * mem2 = malloc((int32_t)size2); // 0x409cae\n            if (mem2 == NULL) {\n                // 0x409cbb\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x409ce8\n                if (*__errno_location() != 34) {\n                    // 0x409cf2\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x409c96\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x409d00\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x409c9b\n            free(buf);\n        }\n        // 0x409cd0\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x409d10\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x409cbb_2:\n    // 0x409cbb\n    return result;\n}\n"
        },
        {
            "funcName": "function_409d20",
            "funcStartAddr": "409d20",
            "funcEndAddr": "409d2a",
            "decompiledFuncCode": "int64_t function_409d20(void) {\n    // 0x409d20\n    return function_403c80(1);\n}\n"
        },
        {
            "funcName": "function_409d30",
            "funcStartAddr": "409d30",
            "funcEndAddr": "409e46",
            "decompiledFuncCode": "int64_t function_409d30(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x409d51\n    int32_t len = strlen(str); // 0x409d51\n    if (a2 == 0) {\n        // 0x409e1d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x409db7\n    int64_t v4 = a3; // 0x409d30\n    int64_t v5 = a2; // 0x409dbe\n    int64_t str4; // 0x409d30\n    int64_t v6; // 0x409d30\n    int32_t v7; // 0x409d30\n    int32_t v8; // 0x409d30\n    int32_t v9; // 0x409d30\n    int64_t v10; // 0x409d30\n    int64_t result; // 0x409d30\n    int32_t v11; // 0x409db3\n    char * str2; // 0x409dd2\n    while (true) {\n        // 0x409dc7\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x409ddb\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x409e1d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x409def\n                break;\n            }\n            // 0x409d80\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x409d8e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x409db7\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x409df3\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x409dfa\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x409dc7\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x409dc7\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x409ddb\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x409e1d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x409def\n                    break;\n                }\n                // 0x409d80\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x409d8e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x409db7\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x409def\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x409e08:\n    // 0x409e1d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_409e50",
            "funcStartAddr": "409e50",
            "funcEndAddr": "409ec1",
            "decompiledFuncCode": "int64_t function_409e50(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x409e50\n    if (a3 == -1) {\n        // 0x409eb0\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x409e65\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x409e74\n    function_40e000(1, a1);\n    function_40dcf0(0, 8, a2);\n    error(0, 0, format);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_409ed0",
            "funcStartAddr": "409ed0",
            "funcEndAddr": "409fe8",
            "decompiledFuncCode": "int64_t function_409ed0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x409efd\n    fputs_unlocked(v1, g47);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x409f70\n        int64_t v5; // 0x409f77\n        int64_t v6; // 0x409f97\n        while (v3 != 0) {\n            // 0x409f5b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x409f20\n                break;\n            }\n            // 0x409f6d\n            v4 = v3 + 1;\n            v5 = function_40e020(v2);\n            __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x409fa0\n                goto lab_0x409fa0;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x409f23\n        int64_t v8 = function_40e020(v2); // 0x409f2d\n        __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x409f4d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x409f5b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x409f20\n                    break;\n                }\n                // 0x409f6d\n                v4 = v3 + 1;\n                v5 = function_40e020(v2);\n                __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x409fa0\n                    goto lab_0x409fa0;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x409f20\n            v7 = v3 + 1;\n            v8 = function_40e020(v2);\n            __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x409fa0:;\n    int64_t v10 = (int64_t)g47; // 0x409fa0\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x409fa7\n    uint64_t result = *v11; // 0x409fa7\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x409fd0\n        return __overflow(g47, 10);\n    }\n    // 0x409fb1\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409ff0",
            "funcStartAddr": "409ff0",
            "funcEndAddr": "40a060",
            "decompiledFuncCode": "int64_t function_409ff0(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_409d30(a2, v2, v1, a5); // 0x40a01c\n    int64_t result = v3; // 0x40a024\n    if (v3 < 0) {\n        // 0x40a038\n        function_409e50((int64_t)a1, a2, v3);\n        function_409ed0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x40a026\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a060",
            "funcStartAddr": "40a060",
            "funcEndAddr": "40a0ad",
            "decompiledFuncCode": "int64_t function_40a060(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x40a060\n    if (result == 0) {\n        // 0x40a0a1\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x40a098\n    int32_t n = a4; // 0x40a098\n    int64_t v1 = result; // 0x40a09f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x40a0a1\n        return result;\n    }\n    int64_t str3 = str2; // 0x40a09f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x40a080\n    int64_t result2 = 0; // 0x40a08d\n    while (v2 != 0) {\n        // 0x40a08f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x40a0a1\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x40a0a1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a0b0",
            "funcStartAddr": "40a0b0",
            "funcEndAddr": "40a17e",
            "decompiledFuncCode": "int64_t function_40a0b0(int64_t path, int64_t a2) {\n    int64_t v1 = function_40ab40(path, a2); // 0x40a0c4\n    uint64_t result = function_40aba0(v1); // 0x40a0cf\n    if (result < 15) {\n        // 0x40a0da\n        return result;\n    }\n    int16_t * v2 = (int16_t *)v1; // 0x40a0f5\n    *v2 = 46;\n    int32_t * v3 = __errno_location(); // 0x40a101\n    *v3 = 0;\n    int32_t v4 = pathconf((char *)path, _PC_NAME_MAX); // 0x40a117\n    int64_t result2 = v4; // 0x40a117\n    int64_t v5; // 0x40a0b0\n    if (v4 < 0) {\n        // 0x40a170\n        v5 = 255;\n        if (*v3 != 0) {\n            goto lab_0x40a124;\n        } else {\n            // 0x40a121\n            v5 = result2;\n            goto lab_0x40a124;\n        }\n    } else {\n        // 0x40a121\n        v5 = result2;\n        goto lab_0x40a124;\n    }\n  lab_0x40a124:;\n    uint64_t v6 = v5;\n    if (result <= v6) {\n        // 0x40a0da\n        return result2;\n    }\n    int64_t v7 = a2 + path; // 0x40a12e\n    uint64_t result3 = v7 - v1; // 0x40a135\n    *(char *)(result3 >= v6 ? v1 - 1 + v6 : v7) = 126;\n    *(char *)((result3 >= v6 ? v6 : result3 + 1) + v1) = 0;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40a180",
            "funcStartAddr": "40a180",
            "funcEndAddr": "40a1d4",
            "decompiledFuncCode": "int64_t function_40a180(int64_t a1) {\n    int64_t result = a1; // 0x40a187\n    int64_t result2; // 0x40a180\n    if (a1 == 0) {\n        char * env_val = getenv(\"SIMPLE_BACKUP_SUFFIX\"); // 0x40a1c5\n        result = (int64_t)env_val;\n        result2 = result;\n        if (env_val == NULL) {\n            // 0x40a18e\n            g59 = (char *)&g10;\n            return result;\n        }\n    }\n    char * v1 = (char *)result; // 0x40a189\n    if (*v1 == 0) {\n        // 0x40a18e\n        g59 = (char *)&g10;\n        return result2;\n    }\n    // 0x40a1a0\n    int64_t v2; // 0x40a180\n    int64_t result3 = function_40ab40(result, v2); // 0x40a1a3\n    if (result3 != result) {\n        // 0x40a18e\n        g59 = (char *)&g10;\n        return result3;\n    }\n    // 0x40a1ad\n    g59 = v1;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40a1e0",
            "funcStartAddr": "40a1e0",
            "funcEndAddr": "40a6a1",
            "decompiledFuncCode": "int64_t function_40a1e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t str = function_40ab40(a1, a2); // 0x40a1fe\n    int32_t len = strlen((char *)str); // 0x40a209\n    int64_t v1 = (int64_t)g59; // 0x40a211\n    int64_t str2 = v1; // 0x40a223\n    if (g59 == NULL) {\n        // 0x40a690\n        function_40a180(v1);\n        str2 = (int64_t)g59;\n    }\n    int64_t v2 = str - a1; // 0x40a20e\n    int64_t v3 = len + (int32_t)v2; // 0x40a22e\n    uint64_t v4 = (int64_t)strlen((char *)str2) + 1; // 0x40a233\n    int64_t v5 = v3 + 1; // 0x40a23b\n    int32_t size = (int32_t)((v4 >= 9 ? v4 : 9) + v5); // 0x40a260\n    int64_t * mem = malloc(size); // 0x40a260\n    int64_t result = (int64_t)mem; // 0x40a260\n    if (mem == NULL) {\n        // 0x40a53d\n        return result;\n    }\n    int32_t v6 = v4; // 0x40a23f\n    int64_t v7 = v3 + 2;\n    int64_t v8 = 0x100000000 * a2 >> 32;\n    int64_t dirp2 = 0;\n    int64_t v9 = v2; // 0x40a1e0\n    int64_t result2 = result;\n    struct __dirstream * v10; // 0x40a1e0\n    int64_t v11; // 0x40a1e0\n    int64_t v12; // 0x40a1e0\n    int64_t v13; // 0x40a1e0\n    int64_t v14; // 0x40a1e0\n    int64_t v15; // 0x40a1e0\n    int64_t v16; // 0x40a1e0\n    int64_t v17; // 0x40a1e0\n    int64_t v18; // 0x40a1e0\n    int64_t v19; // 0x40a1e0\n    int32_t v20; // 0x40a286\n    int64_t v21; // 0x40a298\n    while (true) {\n      lab_0x40a274:\n        // 0x40a274\n        v15 = result2;\n        v14 = v9;\n        int64_t v22 = dirp2;\n        v18 = v8;\n        memcpy((int64_t *)v15, (int64_t *)a1, (int32_t)v5);\n        v20 = v18;\n        if (v20 == 1) {\n            // 0x40a560\n            memcpy((int64_t *)(v15 + v3), (int64_t *)g59, v6);\n            v19 = v18;\n            v13 = v22;\n            v17 = v15;\n            goto lab_0x40a4cb;\n        } else {\n            int64_t v23 = v15 + v14; // 0x40a291\n            v21 = function_40aba0(v23);\n            if (v22 == 0) {\n                int16_t * v24 = (int16_t *)v23; // 0x40a5cd\n                int16_t v25 = *v24; // 0x40a5cd\n                *v24 = 46;\n                int64_t v26 = function_40a9c0(); // 0x40a5db\n                int64_t v27 = v21 + v23; // 0x40a5e0\n                if (v26 == 0) {\n                    // 0x40a640\n                    __errno_location();\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v12 = 0;\n                    v16 = v15;\n                    goto lab_0x40a4b0;\n                } else {\n                    // 0x40a5ec\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v10 = (struct __dirstream *)v26;\n                    v11 = v26;\n                    goto lab_0x40a2b1;\n                }\n            } else {\n                struct __dirstream * dirp = (struct __dirstream *)v22;\n                rewinddir(dirp);\n                v10 = dirp;\n                v11 = v22;\n                goto lab_0x40a2b1;\n            }\n        }\n    }\n  lab_0x40a678_2:\n    // 0x40a678\n    if (dirp2 != 0) {\n        // 0x40a681\n        closedir((struct __dirstream *)dirp2);\n    }\n    // 0x40a53d\n    return result2;\n  lab_0x40a4b0:;\n    int64_t v28 = v16;\n    v19 = v18;\n    v13 = v12;\n    v17 = v28;\n    int64_t v29 = v28; // 0x40a1e0\n    int64_t v30 = v12; // 0x40a1e0\n    int64_t v31 = v28; // 0x40a1e0\n    int64_t v32 = v12; // 0x40a1e0\n    int64_t v33 = v18; // 0x40a1e0\n    int64_t * v34; // 0x40a1e0\n    int64_t v35; // 0x40a1e0\n    switch ((int32_t)v35) {\n        case 2: {\n            goto lab_0x40a580;\n        }\n        case 3: {\n            // 0x40a608\n            v34 = (int64_t *)v28;\n          lab_0x40a608:\n            // 0x40a608\n            free(v34);\n            *__errno_location() = 12;\n            // 0x40a53d\n            return 0;\n        }\n        case 1: {\n            goto lab_0x40a5b0;\n        }\n        default: {\n            goto lab_0x40a4cb;\n        }\n    }\n  lab_0x40a42a:;\n    // 0x40a42a\n    int64_t v36; // 0x40a1e0\n    int64_t v37 = v36;\n    int32_t v38; // 0x40a1e0\n    int32_t v39 = v38;\n    int64_t v40 = v37 + v3; // 0x40a43e\n    *(int16_t *)v40 = 0x7e2e;\n    int64_t v41 = v40 + 2; // 0x40a444\n    *(char *)v41 = 48;\n    uint64_t v42; // 0x40a1e0\n    int64_t str4; // 0x40a31d\n    int64_t v43; // 0x40a3b4\n    int64_t v44 = v42 - 1 + (int64_t)memcpy((int64_t *)(v41 + v43), (int64_t *)str4, (int32_t)v42 + 2); // 0x40a469\n    char * v45 = (char *)v44;\n    char v46 = *v45; // 0x40a469\n    int64_t v47 = v44; // 0x40a474\n    char * v48 = v45; // 0x40a474\n    char v49 = v46; // 0x40a474\n    if (v46 == 57) {\n        *(char *)v47 = 48;\n        int64_t v50 = v47 - 1; // 0x40a483\n        char * v51 = (char *)v50;\n        char v52 = *v51; // 0x40a487\n        v47 = v50;\n        v48 = v51;\n        v49 = v52;\n        while (v52 == 57) {\n            // 0x40a480\n            *(char *)v47 = 48;\n            v50 = v47 - 1;\n            v51 = (char *)v50;\n            v52 = *v51;\n            v47 = v50;\n            v48 = v51;\n            v49 = v52;\n        }\n    }\n    // 0x40a48f\n    *v48 = v49 + 1;\n    struct __dirstream * dirp3; // 0x40a1e0\n    struct dirent * v53 = readdir(dirp3); // 0x40a49a\n    int64_t v54; // 0x40a1e0\n    v12 = v54;\n    v16 = v37;\n    if (v53 == NULL) {\n        // break (via goto) -> 0x40a4b0\n        goto lab_0x40a4b0;\n    }\n    // 0x40a2e9\n    int64_t v55; // 0x40a3c1\n    int32_t v56 = v55;\n    int64_t str3 = (int64_t)v53 + 19; // 0x40a2e9\n    int32_t v57 = v56; // 0x40a2fa\n    int32_t v58 = v39; // 0x40a2fa\n    int64_t v59 = v43; // 0x40a2fa\n    int64_t v60 = v37; // 0x40a2fa\n    uint64_t v61; // 0x40a2c9\n    if (v61 > (int64_t)strlen((char *)str3)) {\n        // break -> 0x40a2d8\n        goto lab_0x40a2d8_2;\n    }\n    // 0x40a2fc\n    int32_t n; // 0x40a1e0\n    int32_t memcmp_rc = memcmp((int64_t *)(v37 + v14), (int64_t *)str3, n); // 0x40a30f\n    v57 = v56;\n    v58 = v39;\n    v59 = v43;\n    v60 = v37;\n    int32_t v62 = v56; // 0x40a316\n    int32_t v63 = v39; // 0x40a316\n    int64_t v64 = v43; // 0x40a316\n    int64_t v65 = v37; // 0x40a316\n    int64_t v66 = str3; // 0x40a316\n    if (memcmp_rc != 0) {\n        // break -> 0x40a2d8\n        goto lab_0x40a2d8_2;\n    }\n    goto lab_0x40a318;\n  lab_0x40a3fd:;\n    // 0x40a3fd\n    int64_t v91; // 0x40a1e0\n    int32_t v92 = v91;\n    int64_t v67; // 0x40a1e0\n    int64_t * v93 = (int64_t *)v67;\n    int64_t * mem2 = realloc(v93, v92); // 0x40a40f\n    v38 = v92;\n    v36 = (int64_t)mem2;\n    v34 = v93;\n    if (mem2 == NULL) {\n        goto lab_0x40a608;\n    }\n    goto lab_0x40a42a;\n  lab_0x40a4cb:\n    // 0x40a4cb\n    result2 = v17;\n    dirp2 = v13;\n    if ((char)a3 == 0) {\n        // break -> 0x40a678\n        goto lab_0x40a678_2;\n    }\n    // 0x40a4d6\n    v8 = v19;\n    int64_t v94; // 0x40a1e0\n    int64_t v95; // 0x40a1e0\n    if (dirp2 == 0) {\n        goto lab_0x40a550;\n    } else {\n        int32_t v96 = dirfd((struct __dirstream *)dirp2); // 0x40a4de\n        v94 = result2 + v14;\n        v95 = v96;\n        v9 = v14;\n        if (v96 < 0) {\n            goto lab_0x40a550;\n        } else {\n            goto lab_0x40a4ed;\n        }\n    }\n  lab_0x40a550:\n    // 0x40a550\n    v94 = result2;\n    v95 = 0xffffff9c;\n    v9 = 0;\n    goto lab_0x40a4ed;\n  lab_0x40a2b1:\n    // 0x40a2b1\n    v54 = v11;\n    dirp3 = v10;\n    struct dirent * v101 = readdir(dirp3); // 0x40a2db\n    v29 = v15;\n    v30 = v54;\n    if (v101 == NULL) {\n        goto lab_0x40a580;\n    } else {\n        // 0x40a2e9\n        v61 = v21 + 4;\n        n = (int32_t)v21 + 2;\n        int64_t v70 = n;\n        struct dirent * v102 = v101; // 0x40a2db\n        int64_t v103 = v15;\n        int64_t v104 = 2;\n        int32_t v105 = size;\n        int32_t v106 = 1;\n        while (true) {\n            int32_t v107 = v106;\n            int32_t v108 = v105;\n            int64_t v109 = v104;\n            int64_t v110 = v103;\n            int64_t str5 = (int64_t)v102 + 19; // 0x40a2e9\n            v57 = v107;\n            v58 = v108;\n            v59 = v109;\n            v60 = v110;\n            if (v61 <= (int64_t)strlen((char *)str5)) {\n                int32_t memcmp_rc3 = memcmp((int64_t *)(v110 + v14), (int64_t *)str5, n); // 0x40a30f\n                v57 = v107;\n                v58 = v108;\n                v59 = v109;\n                v60 = v110;\n                v62 = v107;\n                v63 = v108;\n                v64 = v109;\n                v65 = v110;\n                v66 = str5;\n                if (memcmp_rc3 == 0) {\n                    while (true) {\n                      lab_0x40a318:\n                        // 0x40a318\n                        v67 = v65;\n                        int64_t v68 = v64;\n                        int32_t v69 = v63;\n                        int32_t n2 = v62;\n                        str4 = v66 + v70;\n                        char v71 = *(char *)str4; // 0x40a320\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (v71 >= 58) {\n                            // break -> 0x40a2d8\n                            break;\n                        }\n                        int64_t v72 = str4 + 1; // 0x40a32b\n                        char v73 = *(char *)v72; // 0x40a32b\n                        int64_t v74 = v71 == 57; // 0x40a336\n                        int64_t v75 = (int64_t)v73 & 0xffffffff; // 0x40a33a\n                        int64_t v76 = v75; // 0x40a342\n                        int64_t v77 = v74; // 0x40a342\n                        int64_t v78 = v75; // 0x40a342\n                        int64_t v79 = 1; // 0x40a342\n                        int64_t v80 = v74; // 0x40a342\n                        if (v73 == 57 || (int32_t)v73 < 57) {\n                            int64_t v81 = 2; // 0x40a34d\n                            char v82 = *(char *)(v81 + str4); // 0x40a351\n                            int64_t v83 = v77 & (int64_t)((char)v76 == 57);\n                            int64_t v84 = (int64_t)v82 & 0xffffffff; // 0x40a358\n                            int64_t v85 = v81; // 0x40a360\n                            v77 = v83;\n                            v78 = v84;\n                            v79 = v81;\n                            v80 = v83;\n                            while (v82 == 57 || (int32_t)v82 < 57) {\n                                // 0x40a348\n                                v81 = v85 + 1;\n                                v82 = *(char *)(v81 + str4);\n                                v83 = v77 & (int64_t)((char)v84 == 57);\n                                v84 = (int64_t)v82 & 0xffffffff;\n                                v85 = v81;\n                                v77 = v83;\n                                v78 = v84;\n                                v79 = v81;\n                                v80 = v83;\n                            }\n                        }\n                        // 0x40a362\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if ((char)v78 != 126) {\n                            // break -> 0x40a2d8\n                            break;\n                        }\n                        // 0x40a36a\n                        v42 = v79;\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (*(char *)(v42 + v72) != 0) {\n                            // break -> 0x40a2d8\n                            break;\n                        }\n                        int64_t v86 = v80;\n                        uint64_t v87 = (int64_t)n2; // 0x40a375\n                        int64_t v88 = v86; // 0x40a37d\n                        if (v42 <= v87) {\n                            // 0x40a37f\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            if (v42 != v87) {\n                                // break -> 0x40a2d8\n                                break;\n                            }\n                            int32_t memcmp_rc2 = memcmp((int64_t *)(v7 + v67), (int64_t *)str4, n2); // 0x40a39c\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            v88 = v86 % 256;\n                            if (memcmp_rc2 >= 0 == (memcmp_rc2 != 0)) {\n                                // break -> 0x40a2d8\n                                break;\n                            }\n                        }\n                        // 0x40a3b4\n                        v43 = v88 % 256;\n                        v55 = v43 + v42;\n                        int64_t v89 = v3 + 4 + v55; // 0x40a3ca\n                        v38 = v69;\n                        v36 = v67;\n                        if (v89 > (int64_t)v69) {\n                            int64_t v90 = 2 * v89; // 0x40a3e6\n                            if (v90 < 0) {\n                                // 0x40a628\n                                v91 = v89;\n                                goto lab_0x40a3fd;\n                            } else {\n                                // 0x40a3ef\n                                v91 = v90;\n                                if (v89 < 0) {\n                                    // 0x40a628\n                                    v91 = v89;\n                                    goto lab_0x40a3fd;\n                                } else {\n                                    goto lab_0x40a3fd;\n                                }\n                            }\n                        } else {\n                            goto lab_0x40a42a;\n                        }\n                    }\n                }\n            }\n          lab_0x40a2d8_2:\n            // 0x40a2d8\n            v103 = v60;\n            v104 = v59;\n            v105 = v58;\n            v106 = v57;\n            v102 = readdir(dirp3);\n            v12 = v54;\n            v16 = v103;\n            if (v102 == NULL) {\n                // break -> 0x40a4b0\n                break;\n            }\n        }\n        goto lab_0x40a4b0;\n    }\n  lab_0x40a4ed:\n    // 0x40a4ed\n    if ((int32_t)function_40e040(0xffffff9c, a1, v95, v94, (int64_t)((int32_t)v8 != 1)) == 0) {\n        // break -> 0x40a678\n        goto lab_0x40a678_2;\n    }\n    int32_t * v97 = __errno_location(); // 0x40a510\n    int32_t v98 = *v97; // 0x40a515\n    if (v98 != 17) {\n        if (dirp2 != 0) {\n            // 0x40a528\n            closedir((struct __dirstream *)dirp2);\n        }\n        // 0x40a530\n        free((int64_t *)result2);\n        *v97 = v98;\n        // 0x40a53d\n        return 0;\n    }\n    goto lab_0x40a274;\n  lab_0x40a580:;\n    int64_t v99 = v30;\n    int64_t v100 = v29;\n    v31 = v100;\n    v32 = v99;\n    v33 = v18;\n    if (v20 == 2) {\n        // 0x40a587\n        memcpy((int64_t *)(v100 + v3), (int64_t *)g59, v6);\n        v31 = v100;\n        v32 = v99;\n        v33 = 1;\n    }\n    goto lab_0x40a5b0;\n  lab_0x40a5b0:\n    // 0x40a5b0\n    function_40a0b0(v31, v3);\n    v19 = v33;\n    v13 = v32;\n    v17 = v31;\n    goto lab_0x40a4cb;\n}\n"
        },
        {
            "funcName": "function_40a6b0",
            "funcStartAddr": "40a6b0",
            "funcEndAddr": "40a6ba",
            "decompiledFuncCode": "int64_t function_40a6b0(int64_t a1, int32_t a2) {\n    // 0x40a6b0\n    return function_40a1e0(a1, (int64_t)a2, 1);\n}\n"
        },
        {
            "funcName": "function_40a6c0",
            "funcStartAddr": "40a6c0",
            "funcEndAddr": "40a6ec",
            "decompiledFuncCode": "int64_t function_40a6c0(void) {\n    // 0x40a6c0\n    int64_t v1; // 0x40a6c0\n    int64_t v2 = function_409ff0((char *)v1, v1, g12, (int64_t *)&g11, 4, g33); // 0x40a6db\n    return (int64_t)*(int32_t *)(4 * v2 + (int64_t)&g11);\n}\n"
        },
        {
            "funcName": "function_40a6f0",
            "funcStartAddr": "40a6f0",
            "funcEndAddr": "40a70a",
            "decompiledFuncCode": "int64_t function_40a6f0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t result = function_40a1e0(a1, a2, 0); // 0x40a6f6\n    if (result != 0) {\n        // 0x40a700\n        return result;\n    }\n    // 0x40a705\n    function_410330(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a710",
            "funcStartAddr": "40a710",
            "funcEndAddr": "40a722",
            "decompiledFuncCode": "int64_t function_40a710(int64_t a1, int64_t a2) {\n    // 0x40a710\n    if (a2 == 0) {\n        // 0x40a71a\n        return 2;\n    }\n    int64_t v1; // 0x40a710\n    if ((char)v1 != 0) {\n        // 0x40a720\n        return function_40a6c0();\n    }\n    // 0x40a71a\n    return 2;\n}\n"
        },
        {
            "funcName": "function_40a730",
            "funcStartAddr": "40a730",
            "funcEndAddr": "40a771",
            "decompiledFuncCode": "int64_t function_40a730(int64_t a1, int64_t a2) {\n    // 0x40a730\n    if (a2 != 0) {\n        int64_t v1; // 0x40a730\n        if ((char)v1 != 0) {\n            // 0x40a76c\n            return function_40a6c0();\n        }\n    }\n    char * env_val = getenv(\"VERSION_CONTROL\"); // 0x40a743\n    if (env_val == NULL) {\n        // 0x40a752\n        return 2;\n    }\n    // 0x40a74d\n    if (*env_val != 0) {\n        // 0x40a76c\n        return function_40a6c0();\n    }\n    // 0x40a752\n    return 2;\n}\n"
        },
        {
            "funcName": "function_40a780",
            "funcStartAddr": "40a780",
            "funcEndAddr": "40a7f0",
            "decompiledFuncCode": "int64_t function_40a780(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint64_t v1; // 0x40a780\n    if (a1 == 0) {\n        // 0x40a794\n        v1 = a2 != 0 ? a2 : 0x2000;\n        // 0x40a79e\n        return v1 > a3 ? a3 : v1;\n    }\n    // 0x40a7a8\n    if (a2 == 0) {\n        // 0x40a794\n        v1 = a1;\n        // 0x40a79e\n        return v1 > a3 ? a3 : v1;\n    }\n    uint64_t v2 = a2;\n    int64_t v3 = a1 % v2;\n    int64_t v4 = v2; // 0x40a7bb\n    while (v3 != 0) {\n        // 0x40a7b3\n        v2 = v3;\n        v3 = v4 % v2;\n        v4 = v2;\n    }\n    uint64_t v5 = a1 / v2; // 0x40a7c2\n    uint64_t result = v5 * a2; // 0x40a7c8\n    if (result > a3) {\n        // 0x40a794\n        v1 = a1;\n        // 0x40a79e\n        return v1 > a3 ? a3 : v1;\n    }\n    // 0x40a7d4\n    if (result / a2 == v5) {\n        // 0x40a79e\n        return result;\n    }\n    // 0x40a794\n    v1 = a1;\n    // 0x40a79e\n    return v1 > a3 ? a3 : v1;\n}\n"
        },
        {
            "funcName": "function_40a7f0",
            "funcStartAddr": "40a7f0",
            "funcEndAddr": "40a7f8",
            "decompiledFuncCode": "int64_t function_40a7f0(int64_t a1) {\n    // 0x40a7f0\n    g60 = a1;\n    int64_t result; // 0x40a7f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a800",
            "funcStartAddr": "40a800",
            "funcEndAddr": "40a8fd",
            "decompiledFuncCode": "int64_t function_40a800(int64_t a1, int64_t a2) {\n    int64_t v1 = (int64_t)g45; // 0x40a804\n    int64_t v2; // 0x40a800\n    if (function_410560(v1) != 0) {\n        int64_t v3 = function_410590(v1, 0, 1); // 0x40a8ba\n        int64_t v4 = (int64_t)g45; // 0x40a8bf\n        v2 = v4;\n        if ((int32_t)v3 == 0) {\n            int64_t v5 = function_410520(v4, 0); // 0x40a838\n            int64_t v6 = (int64_t)g45; // 0x40a83d\n            v2 = v6;\n            if ((int32_t)v5 == 0) {\n                goto lab_0x40a8ce;\n            } else {\n                // 0x40a84c\n                function_4114a0(v6);\n                goto lab_0x40a858;\n            }\n        } else {\n            goto lab_0x40a8ce;\n        }\n    } else {\n        // 0x40a81c\n        if ((int32_t)function_4114a0(v1) == 0) {\n            // 0x40a828\n            return function_40a920();\n        }\n        goto lab_0x40a858;\n    }\n  lab_0x40a8ce:\n    // 0x40a8ce\n    if ((int32_t)function_4114a0(v2) == 0) {\n        // 0x40a8db\n        return function_40a920();\n    }\n    goto lab_0x40a858;\n  lab_0x40a858:;\n    char * v7 = dcgettext(NULL, \"error closing file\", 5); // 0x40a864\n    int32_t * err_num = __errno_location(); // 0x40a873\n    if (g60 == 0) {\n        // 0x40a8e8\n        error(0, *err_num, \"%s\", v7);\n    } else {\n        // 0x40a880\n        error(0, *err_num, \"%s: %s\", (char *)function_40de70((int64_t)g60), v7);\n    }\n    // 0x40a89f\n    function_40a920();\n    _exit(g34);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a900",
            "funcStartAddr": "40a900",
            "funcEndAddr": "40a908",
            "decompiledFuncCode": "int64_t function_40a900(int64_t a1) {\n    // 0x40a900\n    g62 = a1;\n    int64_t result; // 0x40a900\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a910",
            "funcStartAddr": "40a910",
            "funcEndAddr": "40a918",
            "decompiledFuncCode": "int64_t function_40a910(int64_t a1) {\n    // 0x40a910\n    g61 = a1;\n    int64_t result; // 0x40a910\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a920",
            "funcStartAddr": "40a920",
            "funcEndAddr": "40a9be",
            "decompiledFuncCode": "int64_t function_40a920(void) {\n    // 0x40a920\n    int32_t * err_num; // 0x40a936\n    if ((int32_t)function_4114a0((int64_t)g44) == 0) {\n        goto lab_0x40a94c;\n    } else {\n        // 0x40a936\n        err_num = __errno_location();\n        if (g61 == 0) {\n            goto lab_0x40a963;\n        } else {\n            // 0x40a947\n            if (*err_num != 32) {\n                goto lab_0x40a963;\n            } else {\n                goto lab_0x40a94c;\n            }\n        }\n    }\n  lab_0x40a94c:;\n    int64_t result = function_4114a0((int64_t)g47); // 0x40a953\n    if ((int32_t)result == 0) {\n        // 0x40a95c\n        return result;\n    }\n    // 0x40a99e\n    _exit(g34);\n    // UNREACHABLE\n  lab_0x40a963:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40a96f\n    if (g62 == 0) {\n        // 0x40a9a9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x40a983\n        error(0, *err_num, \"%s: %s\", (char *)function_40de70((int64_t)g62), v1);\n    }\n    // 0x40a99e\n    _exit(g34);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a9c0",
            "funcStartAddr": "40a9c0",
            "funcEndAddr": "40aa56",
            "decompiledFuncCode": "int64_t function_40a9c0(void) {\n    // 0x40a9c0\n    int64_t name; // 0x40a9c0\n    struct __dirstream * dirp = opendir((char *)name); // 0x40a9c8\n    if (dirp == NULL) {\n        // 0x40a9e2\n        return (int64_t)dirp;\n    }\n    uint32_t v1 = dirfd(dirp); // 0x40a9d8\n    if (v1 >= 3) {\n        // 0x40a9e2\n        return (int64_t)dirp;\n    }\n    int64_t v2 = function_4103e0((int64_t)v1, 1030, 3, name); // 0x40a9fe\n    int32_t * v3 = __errno_location(); // 0x40aa06\n    int32_t fd = v2; // 0x40aa0e\n    if (fd < 0) {\n        // 0x40aa19\n        closedir(dirp);\n        return 0;\n    }\n    struct __dirstream * v4 = fdopendir(fd); // 0x40aa3b\n    if (v4 == NULL) {\n        // 0x40aa4c\n        close(fd);\n    }\n    // 0x40aa19\n    closedir(dirp);\n    return (int64_t)v4;\n}\n"
        },
        {
            "funcName": "function_40aa60",
            "funcStartAddr": "40aa60",
            "funcEndAddr": "40aa78",
            "decompiledFuncCode": "int64_t function_40aa60(void) {\n    // 0x40aa60\n    int64_t v1; // 0x40aa60\n    int64_t result = function_40aae0(v1); // 0x40aa64\n    if (result != 0) {\n        // 0x40aa6e\n        return result;\n    }\n    // 0x40aa73\n    function_410330(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40aa80",
            "funcStartAddr": "40aa80",
            "funcEndAddr": "40aadd",
            "decompiledFuncCode": "int64_t function_40aa80(int64_t a1) {\n    // 0x40aa80\n    int64_t v1; // 0x40aa80\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x40aa8e\n    int64_t v3 = function_40ab40(a1, v1); // 0x40aa92\n    int64_t result = v3 - a1; // 0x40aa9a\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x40aac3\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x40aab0\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x40aac3\n            break;\n        }\n        result2--;\n    }\n    // 0x40aac3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40aae0",
            "funcStartAddr": "40aae0",
            "funcEndAddr": "40ab3a",
            "decompiledFuncCode": "int64_t function_40aae0(int64_t a1) {\n    int64_t v1 = function_40aa80(a1); // 0x40aae9\n    int64_t * mem = malloc((int32_t)(v1 + 1 + (int64_t)(v1 == 0))); // 0x40aaff\n    if (mem == NULL) {\n        // 0x40ab26\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v1); // 0x40ab15\n    int64_t v2 = v1; // 0x40ab20\n    if (v1 == 0) {\n        // 0x40ab30\n        *(char *)dest_mem = 46;\n        v2 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x40ab15\n    *(char *)(v2 + result) = 0;\n    // 0x40ab26\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ab40",
            "funcStartAddr": "40ab40",
            "funcEndAddr": "40ab9b",
            "decompiledFuncCode": "int64_t function_40ab40(int64_t a1, int64_t a2) {\n    // 0x40ab40\n    int64_t v1; // 0x40ab40\n    char v2 = v1;\n    int64_t v3 = a1; // 0x40ab49\n    int64_t v4 = a1; // 0x40ab49\n    char v5 = v2; // 0x40ab49\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x40ab54\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x40ab50\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40ab5e\n    if (v5 == 0) {\n      lab_0x40ab9a:\n        // 0x40ab9a\n        return result;\n    }\n    int64_t v7 = v4; // 0x40ab88\n    int64_t v8 = 0; // 0x40ab88\n    int64_t v9; // 0x40ab40\n    int64_t v10; // 0x40ab8a\n    char v11; // 0x40ab8e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x40ab85\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x40ab8a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40ab85\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40ab7a\n    char v14 = *(char *)v13; // 0x40ab7e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40ab85\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x40ab8a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x40ab85\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x40ab70\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x40ab9a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40aba0",
            "funcStartAddr": "40aba0",
            "funcEndAddr": "40abcb",
            "decompiledFuncCode": "int64_t function_40aba0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x40aba4\n    int64_t result = len; // 0x40aba4\n    if (len < 2) {\n        // 0x40abba\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x40abb8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x40abc0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40abba\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40abba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40abd0",
            "funcStartAddr": "40abd0",
            "funcEndAddr": "40ac03",
            "decompiledFuncCode": "int64_t function_40abd0(int64_t a1) {\n    // 0x40abd0\n    int64_t v1; // 0x40abd0\n    int64_t v2 = function_40ab40(a1, v1); // 0x40abd9\n    int64_t v3 = *(char *)v2 == 0 ? a1 : v2; // 0x40abe4\n    int64_t v4 = function_40aba0(v3); // 0x40abeb\n    char * v5 = (char *)(v3 + v4); // 0x40abf3\n    *v5 = 0;\n    return v4 & -256 | (int64_t)(*v5 != 0);\n}\n"
        },
        {
            "funcName": "function_40ac10",
            "funcStartAddr": "40ac10",
            "funcEndAddr": "40ac15",
            "decompiledFuncCode": "int64_t function_40ac10(char fd, int32_t offset, int32_t length, int64_t advice) {\n    // 0x40ac10\n    return posix_fadvise((int32_t)fd, offset, length, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_40ac20",
            "funcStartAddr": "40ac20",
            "funcEndAddr": "40ac41",
            "decompiledFuncCode": "int64_t function_40ac20(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x40ac20\n    if (stream == 0) {\n        // 0x40ac40\n        int64_t result; // 0x40ac20\n        return result;\n    }\n    // 0x40ac25\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_40ac50",
            "funcStartAddr": "40ac50",
            "funcEndAddr": "40ac9a",
            "decompiledFuncCode": "int64_t function_40ac50(int64_t path, int32_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, oflag); // 0x40ac63\n    return function_40eaf0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_40aca0",
            "funcStartAddr": "40aca0",
            "funcEndAddr": "40ad26",
            "decompiledFuncCode": "int64_t function_40aca0(int64_t a1, int64_t a2, int64_t a3) {\n    if (a1 == 0) {\n        // 0x40ad10\n        int64_t result; // 0x40aca0\n        return result;\n    }\n    int64_t result2 = function_4100e0(24); // 0x40acbd\n    *(int64_t *)result2 = function_410310(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(a3 + 8);\n    *(int64_t *)(result2 + 16) = a3;\n    int64_t v1 = function_40c0b0(a1, result2); // 0x40ace6\n    if (v1 == 0) {\n        // 0x40ad21\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    // 0x40acf0\n    if (result2 == v1) {\n        // 0x40ad10\n        return result2;\n    }\n    // 0x40acf5\n    return function_40c380(result2);\n}\n"
        },
        {
            "funcName": "function_40ad30",
            "funcStartAddr": "40ad30",
            "funcEndAddr": "40ad6b",
            "decompiledFuncCode": "int64_t function_40ad30(int64_t a1, int64_t a2, int64_t a3) {\n    if (a1 == 0) {\n        // 0x40ad68\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x40ad3d\n    int64_t v2 = function_40b6a0(a1, &v1); // 0x40ad51\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_40ad70",
            "funcStartAddr": "40ad70",
            "funcEndAddr": "40aee3",
            "decompiledFuncCode": "int64_t function_40ad70(int32_t a1, int64_t * a2) {\n    int32_t v1 = a1 & 0xf000; // 0x40ad77\n    char v2 = 45; // 0x40ad70\n    int64_t v3; // 0x40ad70\n    int64_t v4; // 0x40ad70\n    uint64_t v5; // 0x40ad70\n    switch ((v1 - 0x1000) / 0x1000) {\n        case 3: {\n            // 0x40add9\n            v2 = 100;\n        }\n        case 7: {\n          lab_0x40add9:\n            // 0x40add9\n            v4 = (int64_t)a2;\n            v5 = (int64_t)a1;\n            *(char *)a2 = v2;\n            *(char *)(v4 + 1) = (v5 & 256) == 0 ? 45 : 114;\n            int64_t v6 = v5 & 128; // 0x40adf2\n            char v7 = v6; // 0x40adfa\n            *(char *)(v4 + 2) = (v7 - ((char)(v6 == 0) | v7) & -74) + 119;\n            int64_t v8 = v5 & 64; // 0x40ae07\n            int64_t v9 = v8 - (v8 | (int64_t)(v8 == 0)); // 0x40ae0d\n            if ((v5 & 2048) == 0) {\n                // 0x40aeb0\n                v3 = (v9 & 0xffffffb5) + 120 & 0xfffffffd;\n            } else {\n                // 0x40ae1b\n                v3 = (v9 & 0xffffffe0) + 115 & 0xfffffff3;\n            }\n            // break -> 0x40ae21\n            break;\n        }\n        case 5: {\n            // 0x40add9\n            v2 = 98;\n            // branch (via goto) -> 0x40add9\n            goto lab_0x40add9;\n        }\n        case 1: {\n            // 0x40add9\n            v2 = 99;\n            // branch (via goto) -> 0x40add9\n            goto lab_0x40add9;\n        }\n        case 9: {\n            // 0x40add9\n            v2 = 108;\n            // branch (via goto) -> 0x40add9\n            goto lab_0x40add9;\n        }\n        case 0: {\n            // 0x40add9\n            v2 = 112;\n            // branch (via goto) -> 0x40add9\n            goto lab_0x40add9;\n        }\n        default: {\n            // 0x40adc6\n            v2 = v1 != 0xc000 ? 63 : 115;\n            // branch (via goto) -> 0x40add9\n            goto lab_0x40add9;\n        }\n    }\n    // 0x40ae21\n    *(char *)(v4 + 3) = (char)v3;\n    int64_t v10 = v5 & 32; // 0x40ae26\n    char v11 = v10; // 0x40ae2c\n    *(char *)(v4 + 4) = (v11 - ((char)(v10 == 0) | v11) & -69) + 114;\n    int64_t v12 = v5 & 16; // 0x40ae39\n    char v13 = v12; // 0x40ae3f\n    *(char *)(v4 + 5) = (v13 - ((char)(v12 == 0) | v13) & -74) + 119;\n    int64_t v14 = v5 & 8; // 0x40ae4c\n    int64_t v15 = v14 - (v14 | (int64_t)(v14 == 0)); // 0x40ae52\n    int64_t v16; // 0x40ad70\n    if ((v5 & 1024) == 0) {\n        // 0x40aec0\n        v16 = (v15 & 0xffffffb5) + 120 & 0xfffffffd;\n    } else {\n        // 0x40ae5c\n        v16 = (v15 & 0xffffffe0) + 115 & 0xfffffff3;\n    }\n    // 0x40ae62\n    *(char *)(v4 + 6) = (char)v16;\n    int64_t v17 = v5 & 4; // 0x40ae67\n    char v18 = v17; // 0x40ae6d\n    *(char *)(v4 + 7) = (v18 - ((char)(v17 == 0) | v18) & -69) + 114;\n    int64_t v19 = v5 & 2; // 0x40ae7a\n    char v20 = v19; // 0x40ae80\n    *(char *)(v4 + 8) = (v20 - ((char)(v19 == 0) | v20) & -74) + 119;\n    char v21 = v5 % 2 == 0; // 0x40ae93\n    if ((v5 & 512) == 0) {\n        // 0x40aed0\n        *(char *)(v4 + 9) = (v21 & -75) + 120;\n        *(int16_t *)(v4 + 10) = 32;\n        return 32;\n    }\n    // 0x40ae9d\n    *(char *)(v4 + 9) = (v21 & -32) + 116;\n    *(int16_t *)(v4 + 10) = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "function_40aef0",
            "funcStartAddr": "40aef0",
            "funcEndAddr": "40aef8",
            "decompiledFuncCode": "int64_t function_40aef0(int64_t a1) {\n    // 0x40aef0\n    int64_t v1; // 0x40aef0\n    return function_40ad70(*(int32_t *)(a1 + 24), (int64_t *)v1);\n}\n"
        },
        {
            "funcName": "function_40af00",
            "funcStartAddr": "40af00",
            "funcEndAddr": "40af18",
            "decompiledFuncCode": "int64_t function_40af00(void) {\n    // 0x40af00\n    int64_t v1; // 0x40af00\n    int64_t result = function_40af20(v1, v1, v1); // 0x40af04\n    if (result != 0) {\n        // 0x40af0e\n        return result;\n    }\n    // 0x40af13\n    function_410330(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40af20",
            "funcStartAddr": "40af20",
            "funcEndAddr": "40aff9",
            "decompiledFuncCode": "int64_t function_40af20(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_40ab40(a1, a2); // 0x40af38\n    int64_t v2 = function_40aba0(v1); // 0x40af43\n    int64_t v3 = 0; // 0x40af57\n    if (v2 != 0) {\n        // 0x40af59\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x40af70\n    int64_t v4 = a2; // 0x40af70\n    int64_t v5; // 0x40af20\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x40afe8\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x40af51\n    int32_t len = strlen((char *)str); // 0x40af75\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x40af85\n    if (mem == NULL) {\n        // 0x40afd1\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x40af9b\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x40afa7\n    if (a3 != 0) {\n        // 0x40afb0\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x40afc3\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x40afd1\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_40b000",
            "funcStartAddr": "40b000",
            "funcEndAddr": "40b076",
            "decompiledFuncCode": "int64_t function_40b000(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40b000\n    if (a3 == 0) {\n        // 0x40b044\n        return 0;\n    }\n    int64_t v1 = a3; // 0x40b01b\n    int64_t v2 = a2; // 0x40b01b\n    int64_t result = 0;\n    int64_t v3 = function_40e290(a1 & 0xffffffff, v2, v1); // 0x40b039\n    int64_t result2 = result; // 0x40b042\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x40b058\n            *__errno_location() = 28;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x40b025\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x40b044\n            break;\n        }\n        result = v4;\n        v3 = function_40e290(a1 & 0xffffffff, v2, v1);\n        result2 = result;\n    }\n    // 0x40b044\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b080",
            "funcStartAddr": "40b080",
            "funcEndAddr": "40b113",
            "decompiledFuncCode": "int64_t function_40b080(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x40b097\n    if (v1 == -1) {\n        // 0x40b10f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x40b09f\n    int64_t v3; // 0x40b080\n    while (true) {\n      lab_0x40b0a8:\n        // 0x40b0a8\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x40b100;\n        } else {\n            goto lab_0x40b105;\n        }\n    }\n  lab_0x40b10f_2:;\n    // 0x40b10f\n    int64_t result; // 0x40b080\n    return result;\n  lab_0x40b105:;\n    int64_t v4 = v3 + 2; // 0x40b105\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40b10f\n        goto lab_0x40b10f_2;\n    }\n    goto lab_0x40b0a8;\n  lab_0x40b100:\n    // 0x40b100\n    result = v3;\n    goto lab_0x40b105;\n}\n"
        },
        {
            "funcName": "function_40b120",
            "funcStartAddr": "40b120",
            "funcEndAddr": "40b130",
            "decompiledFuncCode": "int64_t function_40b120(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40b120\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_40b130",
            "funcStartAddr": "40b130",
            "funcEndAddr": "40b137",
            "decompiledFuncCode": "int64_t function_40b130(int64_t a1, int64_t a2) {\n    // 0x40b130\n    int64_t v1; // 0x40b130\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40b140",
            "funcStartAddr": "40b140",
            "funcEndAddr": "40b161",
            "decompiledFuncCode": "int64_t function_40b140(int64_t a1, int64_t a2) {\n    // 0x40b140\n    int64_t v1; // 0x40b140\n    return 16 * v1 + a2;\n}\n"
        },
        {
            "funcName": "function_40b170",
            "funcStartAddr": "40b170",
            "funcEndAddr": "40b289",
            "decompiledFuncCode": "int64_t function_40b170(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_40b140(a1, a2); // 0x40b184\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40b18c\n    int64_t result2 = *v2; // 0x40b18c\n    if (result2 == 0) {\n        // 0x40b21e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x40b1b4\n            if (v3 == 0) {\n                // 0x40b21e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x40b1c1\n            int64_t v5 = v3; // 0x40b1c7\n            int64_t v6 = v1; // 0x40b1c7\n            int64_t result = v4; // 0x40b1c7\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40b1fc_2:\n                // 0x40b1fc\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40b201\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x40b210\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40b21e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x40b1d4\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x40b1e1\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40b1fc_2;\n                }\n                // 0x40b1e9\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40b1fc_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40b21e\n            return 0;\n        }\n    }\n    // 0x40b233\n    if ((char)a4 == 0) {\n        // 0x40b21e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x40b238\n    if (v12 == 0) {\n        // 0x40b280\n        *v2 = 0;\n        // 0x40b21e\n        return result2;\n    }\n    // 0x40b241\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40b24f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b290",
            "funcStartAddr": "40b290",
            "funcEndAddr": "40b30e",
            "decompiledFuncCode": "int64_t function_40b290(uint64_t a1) {\n    if (a1 == (int64_t)&g13) {\n        // 0x40b30d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40b29b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g13) {\n        // 0x40b2fa\n        *(int64_t *)a1 = (int64_t)&g13;\n        return 0;\n    }\n    // 0x40b2a9\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x40b2c4\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x40b2d1\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x40b2d9\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x40b30d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40b310",
            "funcStartAddr": "40b310",
            "funcEndAddr": "40b45a",
            "decompiledFuncCode": "int64_t function_40b310(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40b32a\n    uint64_t v2 = *v1; // 0x40b32a\n    if (v2 <= a2) {\n        // 0x40b414\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x40b310\n    int64_t v8 = a2; // 0x40b310\n    int64_t v9; // 0x40b310\n    int64_t result; // 0x40b310\n    int64_t v10; // 0x40b310\n    while (true) {\n      lab_0x40b346_2:\n        // 0x40b346\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x40b346\n        int64_t v12 = *v11; // 0x40b346\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x40b338;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40b34f\n            int64_t v14 = *v13; // 0x40b34f\n            int64_t v15 = v14; // 0x40b357\n            int64_t v16 = v12; // 0x40b357\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x40b374\n                    int64_t v19 = *v18; // 0x40b374\n                    int64_t v20 = function_40b140(v3, v19); // 0x40b37d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x40b382\n                    int64_t v22 = *v21; // 0x40b382\n                    int64_t * v23 = (int64_t *)v20; // 0x40b386\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x40b360\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40b3af\n                            break;\n                        }\n                    } else {\n                        // 0x40b38c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40b3af\n                            break;\n                        }\n                    }\n                    // 0x40b374\n                    v15 = v22;\n                }\n                // 0x40b3af\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x40b3b3\n                v9 = *v1;\n                goto lab_0x40b338;\n            } else {\n                int64_t v26 = function_40b140(v3, v25); // 0x40b3cb\n                int64_t * v27 = (int64_t *)v26; // 0x40b3d0\n                if (*v27 == 0) {\n                    // 0x40b430\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x40b3d9\n                    int64_t * v29; // 0x40b310\n                    int64_t v30; // 0x40b310\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x40b43f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x40b414\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x40b43f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40b3ea\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x40b3f9\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x40b401\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40b40a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x40b414\n                    break;\n                }\n                goto lab_0x40b346_2;\n            }\n        }\n    }\n    // 0x40b414\n    return result;\n  lab_0x40b338:;\n    int64_t v36 = v10 + 16; // 0x40b338\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x40b346_2;\n    // 0x40b346\n    goto lab_0x40b346_2;\n}\n"
        },
        {
            "funcName": "function_40b460",
            "funcStartAddr": "40b460",
            "funcEndAddr": "40b465",
            "decompiledFuncCode": "int64_t function_40b460(int64_t a1) {\n    // 0x40b460\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_40b470",
            "funcStartAddr": "40b470",
            "funcEndAddr": "40b475",
            "decompiledFuncCode": "int64_t function_40b470(int64_t a1) {\n    // 0x40b470\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_40b480",
            "funcStartAddr": "40b480",
            "funcEndAddr": "40b485",
            "decompiledFuncCode": "int64_t function_40b480(int64_t a1) {\n    // 0x40b480\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_40b490",
            "funcStartAddr": "40b490",
            "funcEndAddr": "40b4df",
            "decompiledFuncCode": "int64_t function_40b490(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b493\n    int64_t result = 0; // 0x40b49c\n    if (v1 <= a1) {\n      lab_0x40b4dd:\n        // 0x40b4dd\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x40b4a0\n    while (*(int64_t *)v3 == 0) {\n        // 0x40b4a0\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40b4af\n    int64_t v6 = v5; // 0x40b4bb\n    int64_t v7 = 1; // 0x40b4bb\n    int64_t v8; // 0x40b490\n    int64_t v9; // 0x40b4c0\n    int64_t v10; // 0x40b4c4\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x40b4c0\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x40b4d0\n    int64_t v12 = v3 + 16; // 0x40b4d4\n    while (v12 < v1) {\n        // 0x40b4a9\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x40b4a0\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40b4af\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x40b4c0\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40b4cd\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40b4dd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b4e0",
            "funcStartAddr": "40b4e0",
            "funcEndAddr": "40b547",
            "decompiledFuncCode": "int64_t function_40b4e0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b4e3\n    int64_t v2 = a1; // 0x40b4ef\n    int64_t v3 = 0; // 0x40b4ef\n    int64_t v4 = 0; // 0x40b4ef\n    int64_t v5 = 0; // 0x40b4ef\n    int64_t v6 = 0; // 0x40b4ef\n    int64_t v7; // 0x40b4e0\n    int64_t v8; // 0x40b4e0\n    int64_t v9; // 0x40b4e0\n    if (v1 > a1) {\n        while (true) {\n          lab_0x40b501_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x40b4f8;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x40b507\n                int64_t v13 = v10 + 1; // 0x40b50b\n                int64_t v14 = v11 + 1; // 0x40b50f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x40b516\n                int64_t v16 = v14; // 0x40b516\n                if (v12 == 0) {\n                    goto lab_0x40b4f8;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x40b520\n                    int64_t v18 = v16 + 1; // 0x40b524\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x40b520\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40b52d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x40b536\n                        break;\n                    }\n                    goto lab_0x40b501_2;\n                }\n            }\n        }\n    }\n  lab_0x40b536:\n    // 0x40b536\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40b53f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40b53e\n    return 0;\n  lab_0x40b4f8:;\n    int64_t v20 = v8 + 16; // 0x40b4f8\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x40b536\n        goto lab_0x40b536;\n    }\n    goto lab_0x40b501_2;\n    // 0x40b501\n    goto lab_0x40b501_2;\n}\n"
        },
        {
            "funcName": "function_40b550",
            "funcStartAddr": "40b550",
            "funcEndAddr": "40b698",
            "decompiledFuncCode": "int64_t function_40b550(uint64_t a1, int64_t a2) {\n    // 0x40b550\n    int128_t v1; // 0x40b550\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x40b563\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x40b567\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40b56e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x40b580\n            while (*(int64_t *)v7 == 0) {\n                // 0x40b580\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40b5bd\n                    goto lab_0x40b5bd;\n                }\n            }\n        }\n    }\n  lab_0x40b5bd:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40b5cc\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x40b550\n    int128_t v10; // 0x40b550\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x40b663\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40b66c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x40b603;\n        } else {\n            goto lab_0x40b679;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x40b5f6\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x40b679;\n        } else {\n            goto lab_0x40b603;\n        }\n    }\n  lab_0x40b603:\n    // 0x40b603\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x40b607\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x40b607\n    goto lab_0x40b60c;\n  lab_0x40b679:\n    // 0x40b679\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40b68a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40b60c;\n  lab_0x40b60c:\n    // 0x40b60c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_40b6a0",
            "funcStartAddr": "40b6a0",
            "funcEndAddr": "40b6f3",
            "decompiledFuncCode": "int64_t function_40b6a0(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_40b140(a1, result); // 0x40b6aa\n    int64_t v2 = *(int64_t *)v1; // 0x40b6af\n    if (v2 == 0) {\n        // 0x40b6dd\n        return 0;\n    }\n    // 0x40b6c3\n    if (v2 == result) {\n        // 0x40b6dd\n        return result;\n    }\n    int64_t v3 = v1; // 0x40b6d4\n    int64_t result2 = v2; // 0x40b6d2\n    while ((char)v1 == 0) {\n        // 0x40b6d4\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40b6dd\n            break;\n        }\n        // 0x40b6c0\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40b6dd\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40b6dd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b700",
            "funcStartAddr": "40b700",
            "funcEndAddr": "40b748",
            "decompiledFuncCode": "int64_t function_40b700(uint64_t a1) {\n    int64_t result = 0; // 0x40b705\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x40b717\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b70e\n    if (v1 <= a1) {\n        // 0x40b717\n        return result;\n    }\n    int64_t v2 = a1; // 0x40b715\n    int64_t v3 = *(int64_t *)v2; // 0x40b729\n    result = v3;\n    while (v3 == 0) {\n        // 0x40b720\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x40b717\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x40b717\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b750",
            "funcStartAddr": "40b750",
            "funcEndAddr": "40b7ba",
            "decompiledFuncCode": "int64_t function_40b750(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40b140(a1, a2); // 0x40b75c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x40b778\n    while (*(int64_t *)v2 != a2) {\n        // 0x40b770\n        if (v3 == 0) {\n            goto lab_0x40b786;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x40b7b0\n        return *(int64_t *)v3;\n    }\n  lab_0x40b786:;\n    int64_t v4 = v1 + 16; // 0x40b798\n    int64_t result = 0; // 0x40b79f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x40b790\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x40b7a3\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x40b7a3\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b7c0",
            "funcStartAddr": "40b7c0",
            "funcEndAddr": "40b824",
            "decompiledFuncCode": "int64_t function_40b7c0(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40b7c6\n    int64_t result = 0; // 0x40b7ca\n    if (*v1 <= a1) {\n      lab_0x40b7e1:\n        // 0x40b7e1\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40b7cf\n    int64_t v4 = v2; // 0x40b7d5\n    int64_t v5; // 0x40b7c0\n    int64_t v6; // 0x40b7c0\n    int64_t v7; // 0x40b808\n    int64_t v8; // 0x40b811\n    int64_t v9; // 0x40b7f1\n    int64_t v10; // 0x40b7f5\n    if (v3 != 0) {\n        // 0x40b7e8\n        if (v2 >= a3) {\n            // break -> 0x40b7e1\n            break;\n        }\n        // 0x40b7ed\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x40b805\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x40b800\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40b805\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x40b7d7\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40b7cf\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x40b7e8\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x40b7e1\n                break;\n            }\n            // 0x40b7ed\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40b805\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x40b800\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x40b805\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x40b7d7\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x40b7e1\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b830",
            "funcStartAddr": "40b830",
            "funcEndAddr": "40b8a8",
            "decompiledFuncCode": "int64_t function_40b830(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b841\n    int64_t result = 0; // 0x40b845\n    if (v1 <= a1) {\n      lab_0x40b864:\n        // 0x40b864\n        return result;\n    }\n    int64_t v2 = a1; // 0x40b85a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x40b858\n    int64_t v5 = v2; // 0x40b858\n    int64_t v6 = v3; // 0x40b858\n    int64_t v7; // 0x40b830\n    int64_t v8; // 0x40b888\n    int64_t v9; // 0x40b88c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x40b888\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x40b898\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40b888\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x40b852\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40b888\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x40b898\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x40b888\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40b85a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x40b864\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b8b0",
            "funcStartAddr": "40b8b0",
            "funcEndAddr": "40b8e1",
            "decompiledFuncCode": "int64_t function_40b8b0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40b8b7\n    if (v1 == 0) {\n        // 0x40b8dd\n        return 0;\n    }\n    int64_t result = 0; // 0x40b8b7\n    v2++;\n    char v3 = *(char *)v2; // 0x40b8d3\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40b8dd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b8f0",
            "funcStartAddr": "40b8f0",
            "funcEndAddr": "40b910",
            "decompiledFuncCode": "int64_t function_40b8f0(int64_t a1) {\n    // 0x40b8f0\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_40b910",
            "funcStartAddr": "40b910",
            "funcEndAddr": "40ba9a",
            "decompiledFuncCode": "int64_t function_40b910(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40b910\n    int128_t v1; // 0x40b910\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40b94a\n    int64_t result = (int64_t)mem; // 0x40b94a\n    if (mem == NULL) {\n        // 0x40b9fa\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40b95b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x40b910\n    int128_t v6; // 0x40b910\n    if (a2 == 0) {\n        // 0x40ba10\n        *v4 = (int64_t)&g13;\n        int64_t v7 = function_40b290(v3); // 0x40ba18\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40ba1d\n        if ((char)v7 == 0) {\n            // 0x40b9f0\n            free(mem);\n            // 0x40b9fa\n            return 0;\n        }\n        // 0x40ba29\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40ba73;\n        } else {\n            goto lab_0x40ba2e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_40b290(v3) == 0) {\n            // 0x40b9f0\n            free(mem);\n            // 0x40b9fa\n            return 0;\n        }\n        // 0x40b975\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_40b080(a1); // 0x40b983\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40b9f0\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40b9f0\n                free(mem);\n                // 0x40b9fa\n                return 0;\n            }\n            // 0x40b9a1\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40b9f0\n                free(mem);\n                // 0x40b9fa\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x40b9b2\n            int64_t v10 = (int64_t)mem2; // 0x40b9b2\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40b9f0\n                free(mem);\n                // 0x40b9fa\n                return 0;\n            }\n            // 0x40b9bf\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x40b120 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x40b130 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40b9fa\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40ba68\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40ba2e;\n        } else {\n            goto lab_0x40ba73;\n        }\n    }\n  lab_0x40ba73:\n    // 0x40ba73\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40ba83\n    int128_t v13 = v6; // 0x40ba8c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40ba8c\n    goto lab_0x40ba37;\n  lab_0x40ba2e:\n    // 0x40ba2e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40ba37;\n  lab_0x40ba37:\n    // 0x40ba37\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40b9f0\n    free(mem);\n    // 0x40b9fa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40baa0",
            "funcStartAddr": "40baa0",
            "funcEndAddr": "40bb48",
            "decompiledFuncCode": "int64_t function_40baa0(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40baaa\n    uint64_t v2 = *v1; // 0x40baaa\n    int64_t result; // 0x40baa0\n    if (v2 <= a1) {\n      lab_0x40bb33:\n        // 0x40bb33\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40bab8\n    while (*v6 == 0) {\n        // 0x40bab8\n        v7 = v5 + 16;\n        int64_t v8; // 0x40baa0\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40bb33\n            goto lab_0x40bb33;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40bac9\n    int64_t v10 = *v9; // 0x40bac9\n    int64_t v11 = *v3; // 0x40bace\n    int64_t v12 = v11; // 0x40bad5\n    int64_t v13 = v10; // 0x40bad5\n    int64_t result2 = v11; // 0x40bad5\n    int64_t * v14; // 0x40baee\n    int64_t v15; // 0x40baee\n    int64_t v16; // 0x40baea\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40bae5\n            v16 = *v3;\n        }\n        // 0x40baee\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40bae0\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40bae5\n                v16 = *v3;\n            }\n            // 0x40baee\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40bb0d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40bb20\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40bb2d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40babc\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40bab8\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40bb33\n                goto lab_0x40bb33;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40bac9\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40bae5\n                v16 = *v3;\n            }\n            // 0x40baee\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40bae0\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40bae5\n                    v16 = *v3;\n                }\n                // 0x40baee\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40bb0d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40bb33\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40bb50",
            "funcStartAddr": "40bb50",
            "funcEndAddr": "40bc26",
            "decompiledFuncCode": "int64_t function_40bb50(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40bb5f\n    uint64_t v2 = *v1; // 0x40bb5f\n    int64_t v3 = a1; // 0x40bb63\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40bbb3;\n    } else {\n        // 0x40bb65\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40bbb3;\n        } else {\n            // 0x40bb6c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40bb81\n                int64_t v6; // 0x40bb78\n                while (v5 == 0) {\n                    // 0x40bb78\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40bbb3\n                        goto lab_0x40bbb3;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40bb98\n                int64_t v8 = v7; // 0x40bb9f\n                int64_t v9 = v5; // 0x40bb9f\n                int64_t v10; // 0x40bb50\n                int64_t v11; // 0x40bb98\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40bb90\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40bb93\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40bba6\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40bb81\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40bb78\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40bbb3\n                            goto lab_0x40bbb3;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40bb93\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40bb90\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40bb93\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40bba1\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40bbb3;\n            } else {\n                goto lab_0x40bbec;\n            }\n        }\n    }\n  lab_0x40bbb3:\n    // 0x40bbb3\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40bbc0\n        int64_t v14 = v13; // 0x40bbc7\n        int64_t v15 = v2; // 0x40bbc7\n        int64_t v16; // 0x40bbd0\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40bbd0\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40bbe1\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40bbe1\n        int64_t v18 = v15; // 0x40bbea\n        int64_t v19 = v17; // 0x40bbea\n        while (v15 > v17) {\n            // 0x40bbc0\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40bbd0\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40bbe1\n                v15 = *v1;\n            }\n            // 0x40bbe1\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40bbec;\n  lab_0x40bbec:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40bbec\n    if (v20 == 0) {\n        // 0x40bc11\n        free(NULL);\n        free((int64_t *)a1);\n        return &g83;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40bc00\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40bc0f\n    while (v21 != 0) {\n        // 0x40bc00\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40bc11\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_40bc30",
            "funcStartAddr": "40bc30",
            "funcEndAddr": "40be2a",
            "decompiledFuncCode": "int64_t function_40bc30(int64_t a1, uint64_t a2) {\n    // 0x40bc30\n    int128_t v1; // 0x40bc30\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40bc3b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40bc30\n        if (a2 < 0) {\n            // 0x40bdb0\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40bdc0\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40bc50\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40bc59\n        __asm_comiss(__asm_divss_6(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40bda2\n        return 0;\n    }\n    uint64_t nmemb = function_40b080(a2); // 0x40bc93\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40bda2\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40bccb\n    if (*v6 == nmemb) {\n        // 0x40bda2\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40bcdd\n    int64_t v7 = (int64_t)mem; // 0x40bcdd\n    int64_t v8 = v7; // bp-104, 0x40bce2\n    if (mem == NULL) {\n        // 0x40bda2\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40bd3a\n    int64_t v10 = *v9; // 0x40bd3a\n    int64_t v11 = function_40b310(&v8, a1, 0); // 0x40bd43\n    int64_t result = v11 & 0xffffffff; // 0x40bd48\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40bd04\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40bd66\n        function_40b310(v13, v12, 1);\n        function_40b310(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40bdf0\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40bda2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40be30",
            "funcStartAddr": "40be30",
            "funcEndAddr": "40c0a4",
            "decompiledFuncCode": "int64_t function_40be30(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40be30\n    int128_t v1; // 0x40be30\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40be30\n    int64_t v5 = function_40b170(a1, a2, &v4, 0); // 0x40be51\n    if (v5 != 0) {\n        // 0x40be5e\n        if (a3 != NULL) {\n            // 0x40be65\n            *a3 = v5;\n        }\n        // 0x40be69\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40be78\n    uint64_t v7 = *v6; // 0x40be78\n    int64_t v8; // 0x40be30\n    int64_t v9; // 0x40be30\n    int64_t v10; // 0x40be30\n    int128_t v11; // 0x40be30\n    int128_t v12; // 0x40be30\n    int64_t v13; // 0x40be30\n    if (v7 < 0) {\n        // 0x40bf00\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40bf10\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40bf14\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40bf19\n        int128_t v17 = __asm_addss(v15, v15); // 0x40bf1d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40be9b;\n        } else {\n            goto lab_0x40bf2a;\n        }\n    } else {\n        // 0x40be81\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40be85\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40be89\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40be8e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40bf2a;\n        } else {\n            goto lab_0x40be9b;\n        }\n    }\n  lab_0x40be9b:\n    // 0x40be9b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40bea4\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x40beac\n    int128_t v23 = v11; // 0x40beac\n    if (v13 == 0) {\n        goto lab_0x40beb2;\n    } else {\n        goto lab_0x40bf51;\n    }\n  lab_0x40bf2a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40bf37\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40bf3a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40bf43\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40beb2;\n    } else {\n        goto lab_0x40bf51;\n    }\n  lab_0x40beb2:;\n    int64_t * v28 = (int64_t *)v4; // 0x40beb7\n    if (*v28 == 0) {\n        // 0x40bfc8\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40bfd1\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40bec2\n    int64_t v31 = *v30; // 0x40bec2\n    int64_t * v32; // 0x40be30\n    int64_t v33; // 0x40be30\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40bfed\n        if (mem == NULL) {\n            // 0x40be69\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40bfed\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40bed7\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40beed\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40bf51:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40bf51\n    function_40b290(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40bf5a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40bf5e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40bf62\n    int128_t v44; // 0x40be30\n    if (v42 < 0) {\n        // 0x40c020\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40c030\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40bf70\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40bf79\n    int128_t v47; // 0x40be30\n    int64_t v48; // 0x40be30\n    if (v46 < 0) {\n        // 0x40c000\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40c00d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40c010\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40bf82\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40bf86\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40bf8b\n    __asm_comiss_2(v47, __asm_mulss_5(__asm_movaps_4(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40bf9b\n        int128_t v53 = v52; // 0x40bfa4\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40c040\n            v53 = __asm_mulss_5(v52, v43);\n        }\n        // 0x40bfaa\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40be69\n        return 0xffffffff;\n    }\n    goto lab_0x40beb2;\n}\n"
        },
        {
            "funcName": "function_40c0b0",
            "funcStartAddr": "40c0b0",
            "funcEndAddr": "40c0eb",
            "decompiledFuncCode": "int64_t function_40c0b0(int64_t a1, int64_t a2) {\n    // 0x40c0b0\n    int64_t v1; // bp-16, 0x40c0b0\n    int64_t v2; // 0x40c0b0\n    int32_t v3 = function_40be30(a1, a2, &v1, v2); // 0x40c0c2\n    if (v3 == -1) {\n        // 0x40c0d0\n        return 0;\n    }\n    // 0x40c0c7\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40c0f0",
            "funcStartAddr": "40c0f0",
            "funcEndAddr": "40c2c7",
            "decompiledFuncCode": "int64_t function_40c0f0(int64_t a1) {\n    // 0x40c0f0\n    int128_t v1; // 0x40c0f0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40c0f0\n    int64_t v5; // 0x40c0f0\n    int64_t result = function_40b170(a1, v5, &v4, 1); // 0x40c105\n    if (result == 0) {\n        // 0x40c122\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40c117\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40c122\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40c130\n    uint64_t v8 = *v7 - 1; // 0x40c134\n    *v7 = v8;\n    int64_t v9; // 0x40c0f0\n    int64_t v10; // 0x40c0f0\n    int64_t v11; // 0x40c0f0\n    int128_t v12; // 0x40c0f0\n    int128_t v13; // 0x40c0f0\n    int64_t v14; // 0x40c0f0\n    if (v8 < 0) {\n        // 0x40c220\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40c230\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40c234\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40c239\n        int128_t v18 = __asm_addss(v16, v16); // 0x40c23d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40c15c;\n        } else {\n            goto lab_0x40c24a;\n        }\n    } else {\n        // 0x40c142\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40c146\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40c14a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40c14f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40c24a;\n        } else {\n            goto lab_0x40c15c;\n        }\n    }\n  lab_0x40c15c:\n    // 0x40c15c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40c160\n    int64_t v23 = v14; // 0x40c160\n    int128_t v24 = v12; // 0x40c160\n    int64_t v25 = v10; // 0x40c160\n    int128_t v26 = v22; // 0x40c160\n    goto lab_0x40c165;\n  lab_0x40c24a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40c257\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40c25a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40c165;\n  lab_0x40c165:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40c165\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x40c122\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40c16e\n    function_40b290(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40c177\n    int64_t v31 = *(int64_t *)v29; // 0x40c17b\n    int128_t v32; // 0x40c0f0\n    if (v30 < 0) {\n        // 0x40c290\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40c2a0\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40c188\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40c191\n    int128_t v35; // 0x40c0f0\n    int64_t v36; // 0x40c0f0\n    if (v34 < 0) {\n        // 0x40c270\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40c27d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40c280\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40c19e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40c1a2\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40c1a7\n    __asm_comiss_2(__asm_mulss_5(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40c122\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40c1b8\n    int128_t v41 = v40; // 0x40c1c1\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40c1c3\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40c1c8\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40c2b8\n    if ((char)function_40bc30(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40c122\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40c1ea\n    if (*v43 != 0) {\n        int64_t v44; // 0x40c0f0\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40c1f8\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40c209\n    *v43 = 0;\n    // 0x40c122\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c2d0",
            "funcStartAddr": "40c2d0",
            "funcEndAddr": "40c2f7",
            "decompiledFuncCode": "int64_t function_40c2d0(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40c2d0\n    return (*(int64_t *)(a1 + 8) ^ function_4115a0(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_40c300",
            "funcStartAddr": "40c300",
            "funcEndAddr": "40c30d",
            "decompiledFuncCode": "int64_t function_40c300(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40c300\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_40c310",
            "funcStartAddr": "40c310",
            "funcEndAddr": "40c335",
            "decompiledFuncCode": "int64_t function_40c310(int64_t a1, int64_t a2) {\n    // 0x40c310\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x40c31a\n        return 0;\n    }\n    // 0x40c32a\n    return function_40e2f0(a1, a2);\n}\n"
        },
        {
            "funcName": "function_40c340",
            "funcStartAddr": "40c340",
            "funcEndAddr": "40c373",
            "decompiledFuncCode": "int64_t function_40c340(int64_t str, int64_t str2) {\n    // 0x40c340\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x40c34c\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x40c364\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_40c380",
            "funcStartAddr": "40c380",
            "funcEndAddr": "40c395",
            "decompiledFuncCode": "int64_t function_40c380(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40c387\n    free(v1);\n    free(v1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_40c3a0",
            "funcStartAddr": "40c3a0",
            "funcEndAddr": "40c439",
            "decompiledFuncCode": "int64_t function_40c3a0(int64_t str) {\n    // 0x40c3a0\n    if (str == 0) {\n        // 0x40c419\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g47);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40c3ae\n    int64_t result = (int64_t)found_char_pos; // 0x40c3ae\n    if (found_char_pos == NULL) {\n        // 0x40c409\n        g63 = str;\n        g46 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x40c3b8\n    if (v1 - str < 7) {\n        // 0x40c409\n        g63 = str;\n        g46 = str;\n        return result;\n    }\n    // 0x40c3c8\n    bool v2; // 0x40c3a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x40c3a0\n    int64_t v5 = result - 6; // 0x40c3a0\n    int64_t v6 = 7; // 0x40c3d6\n    unsigned char v7 = *(char *)v5; // 0x40c3d6\n    char v8 = *(char *)v4; // 0x40c3d6\n    char v9 = v8; // 0x40c3d6\n    bool v10 = false; // 0x40c3d6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x40c3e0\n    int64_t v13 = v1; // 0x40c3e0\n    int64_t v14 = 3; // 0x40c3e0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x40c409\n        g63 = str;\n        g46 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x40c3f2\n    char v16 = *(char *)v12; // 0x40c3f2\n    char v17 = v16; // 0x40c3f2\n    bool v18 = false; // 0x40c3f2\n    while (v15 == v16) {\n        // 0x40c3e2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40c3fc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40c3fe\n        v20 = result + 4;\n        g43 = v20;\n    }\n    // 0x40c409\n    g63 = v20;\n    g46 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c440",
            "funcStartAddr": "40c440",
            "funcEndAddr": "40c47f",
            "decompiledFuncCode": "int64_t function_40c440(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40c440\n    int64_t v1; // bp-28, 0x40c440\n    int64_t v2 = function_411440(a1, a2, a5 & 0xffffffff, &v1); // 0x40c453\n    int64_t result = 0xfffffffe; // 0x40c45a\n    if ((int32_t)v2 == 0) {\n        // 0x40c45c\n        result = function_411470(&v1, a3, a4 & 0xffffffff);\n    }\n    // 0x40c46b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c480",
            "funcStartAddr": "40c480",
            "funcEndAddr": "40c49c",
            "decompiledFuncCode": "int64_t function_40c480(int64_t a1, int64_t a2, int32_t a3) {\n    int32_t v1 = a3; // bp-12, 0x40c484\n    return function_411470((int64_t *)&v1, a1, a2 & 0xffffffff);\n}\n"
        },
        {
            "funcName": "function_40c4a0",
            "funcStartAddr": "40c4a0",
            "funcEndAddr": "40c592",
            "decompiledFuncCode": "int64_t function_40c4a0(int64_t * a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x40c4b4\n    if ((int64_t *)v1 != a1) {\n        // 0x40c4c1\n        return (int64_t)v1;\n    }\n    int64_t v2 = function_4115e0(); // 0x40c4d0\n    char v3 = *(char *)v2 & -33;\n    int64_t result; // 0x40c586\n    if (v3 == 85) {\n        // 0x40c4e0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x40c578\n            result = (int32_t)a2 != 9 ? (int64_t)&g21 : (int64_t)&g14;\n            return result;\n        }\n        char v4 = *v1; // 0x40c50e\n        int64_t result2 = v4 != 96 ? (int64_t)&g15 : (int64_t)&g18; // 0x40c51b\n        // 0x40c4c1\n        return result2;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x40c578\n        result = (int32_t)a2 != 9 ? (int64_t)&g21 : (int64_t)&g14;\n        return result;\n    }\n    char v5 = *v1; // 0x40c55d\n    int64_t result3 = v5 != 96 ? (int64_t)&g16 : (int64_t)&g17; // 0x40c56a\n    // 0x40c4c1\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40c5a0",
            "funcStartAddr": "40c5a0",
            "funcEndAddr": "40c5f7",
            "decompiledFuncCode": "int64_t function_40c5a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x40c5a0\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40c5f7",
            "funcStartAddr": "40c5f7",
            "funcEndAddr": "40d7c1",
            "decompiledFuncCode": "int64_t function_40c5f7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x40c641\n    int64_t v3 = 0; // 0x40c641\n    int64_t v4; // 0x40c5f7\n    int64_t v5; // 0x40c5f7\n    int64_t v6; // 0x40c5f7\n    int64_t v7; // 0x40c5f7\n    int64_t v8; // 0x40c5f7\n    int64_t v9; // 0x40c5f7\n    int64_t v10; // 0x40c5f7\n    int64_t v11; // 0x40c5f7\n    int64_t v12; // 0x40c5f7\n    int64_t v13; // 0x40c5f7\n    int64_t v14; // 0x40c5f7\n    int64_t v15; // 0x40c5f7\n    int64_t v16; // 0x40c5f7\n    int64_t v17; // 0x40c5f7\n    int64_t v18; // 0x40c5f7\n    int64_t result; // 0x40c5f7\n    int64_t v19; // 0x40c5f7\n    int32_t wc; // bp+132, 0x40c5f7\n    int64_t ps; // bp+136, 0x40c5f7\n    char v20; // 0x40cbb0\n    int64_t v21; // 0x40cbb0\n    int64_t v22; // 0x40cf58\n    int64_t v23; // 0x40c5f7\n    int64_t v24; // 0x40cf77\n    int32_t v25; // 0x40c5f7\n    while (true) {\n      lab_0x40c648_2:\n        // 0x40c648\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x40c5f7\n        int64_t v27; // 0x40c67c\n        while (true) {\n          lab_0x40c648:\n            // 0x40c648\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x40c653\n            if (v15 == -1) {\n                // 0x40c655\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x40c663\n            if (v28) {\n                // break (via goto) -> 0x40cdc8\n                goto lab_0x40cdc8;\n            }\n            // 0x40c66c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g82 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40cc5b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x40c7a1;\n                    }\n                    // 0x40d07d\n                    v26 = v5 + 1;\n                    goto lab_0x40c648;\n                }\n                case 7: {\n                    goto lab_0x40c7a1;\n                }\n                case 8: {\n                    goto lab_0x40c7a1;\n                }\n                case 9: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 10: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 11: {\n                    goto lab_0x40c7a1;\n                }\n                case 12: {\n                    goto lab_0x40c7a1;\n                }\n                case 13: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 32: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 33: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 34: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 35: {\n                    goto lab_0x40c76d;\n                }\n                case 36: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 37: {\n                    goto lab_0x40c7a1;\n                }\n                case 38: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 39: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 40: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 41: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 42: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 43: {\n                    goto lab_0x40c7a1;\n                }\n                case 44: {\n                    goto lab_0x40c7a1;\n                }\n                case 45: {\n                    goto lab_0x40c7a1;\n                }\n                case 46: {\n                    goto lab_0x40c7a1;\n                }\n                case 47: {\n                    goto lab_0x40c7a1;\n                }\n                case 48: {\n                    goto lab_0x40c7a1;\n                }\n                case 49: {\n                    goto lab_0x40c7a1;\n                }\n                case 50: {\n                    goto lab_0x40c7a1;\n                }\n                case 51: {\n                    goto lab_0x40c7a1;\n                }\n                case 52: {\n                    goto lab_0x40c7a1;\n                }\n                case 53: {\n                    goto lab_0x40c7a1;\n                }\n                case 54: {\n                    goto lab_0x40c7a1;\n                }\n                case 55: {\n                    goto lab_0x40c7a1;\n                }\n                case 56: {\n                    goto lab_0x40c7a1;\n                }\n                case 57: {\n                    goto lab_0x40c7a1;\n                }\n                case 58: {\n                    goto lab_0x40c7a1;\n                }\n                case 59: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 60: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 61: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 62: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 63: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 65: {\n                    goto lab_0x40c7a1;\n                }\n                case 66: {\n                    goto lab_0x40c7a1;\n                }\n                case 67: {\n                    goto lab_0x40c7a1;\n                }\n                case 68: {\n                    goto lab_0x40c7a1;\n                }\n                case 69: {\n                    goto lab_0x40c7a1;\n                }\n                case 70: {\n                    goto lab_0x40c7a1;\n                }\n                case 71: {\n                    goto lab_0x40c7a1;\n                }\n                case 72: {\n                    goto lab_0x40c7a1;\n                }\n                case 73: {\n                    goto lab_0x40c7a1;\n                }\n                case 74: {\n                    goto lab_0x40c7a1;\n                }\n                case 75: {\n                    goto lab_0x40c7a1;\n                }\n                case 76: {\n                    goto lab_0x40c7a1;\n                }\n                case 77: {\n                    goto lab_0x40c7a1;\n                }\n                case 78: {\n                    goto lab_0x40c7a1;\n                }\n                case 79: {\n                    goto lab_0x40c7a1;\n                }\n                case 80: {\n                    goto lab_0x40c7a1;\n                }\n                case 81: {\n                    goto lab_0x40c7a1;\n                }\n                case 82: {\n                    goto lab_0x40c7a1;\n                }\n                case 83: {\n                    goto lab_0x40c7a1;\n                }\n                case 84: {\n                    goto lab_0x40c7a1;\n                }\n                case 85: {\n                    goto lab_0x40c7a1;\n                }\n                case 86: {\n                    goto lab_0x40c7a1;\n                }\n                case 87: {\n                    goto lab_0x40c7a1;\n                }\n                case 88: {\n                    goto lab_0x40c7a1;\n                }\n                case 89: {\n                    goto lab_0x40c7a1;\n                }\n                case 90: {\n                    goto lab_0x40c7a1;\n                }\n                case 91: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 92: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 93: {\n                    goto lab_0x40c7a1;\n                }\n                case 94: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 95: {\n                    goto lab_0x40c7a1;\n                }\n                case 96: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 97: {\n                    goto lab_0x40c7a1;\n                }\n                case 98: {\n                    goto lab_0x40c7a1;\n                }\n                case 99: {\n                    goto lab_0x40c7a1;\n                }\n                case 100: {\n                    goto lab_0x40c7a1;\n                }\n                case 101: {\n                    goto lab_0x40c7a1;\n                }\n                case 102: {\n                    goto lab_0x40c7a1;\n                }\n                case 103: {\n                    goto lab_0x40c7a1;\n                }\n                case 104: {\n                    goto lab_0x40c7a1;\n                }\n                case 105: {\n                    goto lab_0x40c7a1;\n                }\n                case 106: {\n                    goto lab_0x40c7a1;\n                }\n                case 107: {\n                    goto lab_0x40c7a1;\n                }\n                case 108: {\n                    goto lab_0x40c7a1;\n                }\n                case 109: {\n                    goto lab_0x40c7a1;\n                }\n                case 110: {\n                    goto lab_0x40c7a1;\n                }\n                case 111: {\n                    goto lab_0x40c7a1;\n                }\n                case 112: {\n                    goto lab_0x40c7a1;\n                }\n                case 113: {\n                    goto lab_0x40c7a1;\n                }\n                case 114: {\n                    goto lab_0x40c7a1;\n                }\n                case 115: {\n                    goto lab_0x40c7a1;\n                }\n                case 116: {\n                    goto lab_0x40c7a1;\n                }\n                case 117: {\n                    goto lab_0x40c7a1;\n                }\n                case 118: {\n                    goto lab_0x40c7a1;\n                }\n                case 119: {\n                    goto lab_0x40c7a1;\n                }\n                case 120: {\n                    goto lab_0x40c7a1;\n                }\n                case 121: {\n                    goto lab_0x40c7a1;\n                }\n                case 122: {\n                    goto lab_0x40c7a1;\n                }\n                case 123: {\n                    goto lab_0x40c745;\n                }\n                case 124: {\n                    goto lab_0x40c9ba_2;\n                }\n                case 125: {\n                    goto lab_0x40c745;\n                }\n                case 126: {\n                    goto lab_0x40c76d;\n                }\n                default: {\n                    goto lab_0x40cb45;\n                }\n            }\n        }\n      lab_0x40cb45:\n        if (v23 != 1) {\n            // 0x40ceb0\n            ps = 0;\n            int64_t len = v15; // 0x40cec0\n            if (v15 == -1) {\n                // 0x40cec2\n                len = strlen((char *)str);\n            }\n            // 0x40ceee\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40cf4f:\n                // 0x40cf4f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x40cf54\n                int64_t v30 = v29 + str;\n                v24 = function_4113c0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40d4ca_2;\n                    }\n                    case -1: {\n                        goto lab_0x40d4ca_2;\n                    }\n                    case -2: {\n                        // 0x40d5ad\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x40d5e7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40d5ea\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x40d5f7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x40d5f0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40d4ca\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40d4ca_2;\n                    }\n                    case 1: {\n                        goto lab_0x40cf20;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40cfcc\n                        char v34 = *(char *)v33; // 0x40cfdd\n                        unsigned char v35; // 0x40c5f7\n                        if (v34 < 125) {\n                            // 0x40cfe8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40cfff\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40c9ba_2;\n                            }\n                        }\n                        // 0x40cfd0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40cfdd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x40cfe8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40cfff\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40c9ba_2;\n                                }\n                            }\n                            // 0x40cfd0\n                            v33++;\n                        }\n                        goto lab_0x40cf20;\n                    }\n                }\n            }\n            goto lab_0x40d4ca_2;\n        } else {\n            // 0x40cb94\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x40c7a1;\n        }\n    }\n  lab_0x40cdc8:\n    // 0x40cdc8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40d6ca\n        if (v8 > result) {\n            // 0x40d6d3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x40c9f7\n        return result;\n    }\n    goto lab_0x40c9ba_2;\n  lab_0x40c7a1:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x40c7b0\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40c9ba_2;\n        }\n    }\n    int64_t v42 = result; // 0x40c8b1\n    char v43 = v20; // 0x40c8b1\n    int64_t v44 = v58; // 0x40c8b1\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x40c8b1\n    int64_t v46 = v56; // 0x40c8b1\n    goto lab_0x40c82d;\n  lab_0x40c9ba_2:;\n    // 0x40c9f7\n    char * v36; // 0x40c5f7\n    return function_40c5a0(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x40d4ca_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x40c7a1;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x40d09e\n        int64_t v41 = v5 + 1; // 0x40d181\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x40d188\n        char v48 = v20; // 0x40d188\n        int64_t v49 = result; // 0x40d188\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x40d151\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x40d155\n            int64_t v52 = v50 + 1; // 0x40d15a\n            int64_t v53 = v47 + 1; // 0x40d181\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40d14c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x40d151\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x40d155\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x40c82d;\n    }\n  lab_0x40cf20:\n    // 0x40cf20\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40cf3f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40cf42\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x40d4ca\n        goto lab_0x40d4ca_2;\n    }\n    goto lab_0x40cf4f;\n  lab_0x40c76d:\n    // 0x40c76d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40c9ba_2;\n    }\n    goto lab_0x40c7a1;\n  lab_0x40c745:;\n    bool v61 = v15 == 1; // 0x40c750\n    if (v15 == -1) {\n        // 0x40c752\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x40c75e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x40c7a1;\n    } else {\n        goto lab_0x40c76d;\n    }\n  lab_0x40c82d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x40c832\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x40c836\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x40c648_2;\n}\n"
        },
        {
            "funcName": "function_40d7d0",
            "funcStartAddr": "40d7d0",
            "funcEndAddr": "40d96e",
            "decompiledFuncCode": "int64_t function_40d7d0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x40d7d2\n    int32_t * v3 = __errno_location(); // 0x40d7ec\n    int64_t v4 = (int64_t)g36; // 0x40d7f1\n    int32_t v5 = *v3; // 0x40d7fb\n    int64_t v6 = v4; // 0x40d811\n    if (v2 >= (int64_t)*(int32_t *)&g39) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x40d969\n            function_410330(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x40d820\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x40d827\n        int64_t v9; // 0x40d7d0\n        if (g36 == &g37) {\n            int64_t v10 = function_410140(0, v8); // 0x40d94a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g37); // 0x40d94f\n            *(int64_t *)&g36 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_410140(v4, v8); // 0x40d83b\n            *(int64_t *)&g36 = v12;\n            v9 = v12;\n        }\n        // 0x40d84a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g39; // 0x40d84a\n        int32_t v14 = v7; // 0x40d851\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g39 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x40d881\n    int64_t v17 = v15 + 8; // 0x40d884\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x40d88b\n    int64_t * v19 = (int64_t *)v16; // 0x40d88e\n    uint64_t v20 = *v19; // 0x40d88e\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x40d891\n    int64_t result = *v21; // 0x40d891\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x40d89c\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x40d8a5\n    int64_t v24; // 0x40d7d0\n    uint64_t v25 = function_40c5a0(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x40d8b4\n    if (v20 > v25) {\n        // 0x40d92b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x40d8c7\n    *v19 = v26;\n    if (result != (int64_t)&g64) {\n        // 0x40d8d7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4100e0(v26); // 0x40d8f1\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40d90b\n    int64_t v28 = *v23; // 0x40d90e\n    int64_t v29; // 0x40d7d0\n    function_40c5a0(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40d92b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40d970",
            "funcStartAddr": "40d970",
            "funcEndAddr": "40d9a4",
            "decompiledFuncCode": "int64_t function_40d970(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40d977\n    int64_t result = function_4102e0(a1 == 0 ? (int64_t)&g65 : a1, 56); // 0x40d996\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d9b0",
            "funcStartAddr": "40d9b0",
            "funcEndAddr": "40d9bf",
            "decompiledFuncCode": "int64_t function_40d9b0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g65 : a1); // 0x40d9bc\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d9c0",
            "funcStartAddr": "40d9c0",
            "funcEndAddr": "40d9cf",
            "decompiledFuncCode": "int64_t function_40d9c0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g65 : a1; // 0x40d9c8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g65;\n}\n"
        },
        {
            "funcName": "function_40d9d0",
            "funcStartAddr": "40d9d0",
            "funcEndAddr": "40da03",
            "decompiledFuncCode": "int64_t function_40d9d0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g65 + 8 : a1 + 8; // 0x40d9e9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40d9ee\n    uint32_t v3 = *v2; // 0x40d9ee\n    uint32_t v4 = (int32_t)a2 % 32; // 0x40d9f2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_40da10",
            "funcStartAddr": "40da10",
            "funcEndAddr": "40da23",
            "decompiledFuncCode": "int64_t function_40da10(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g65 + 4 : a1 + 4); // 0x40da1c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_40da30",
            "funcStartAddr": "40da30",
            "funcEndAddr": "40da5b",
            "decompiledFuncCode": "int64_t function_40da30(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g65 : a1; // 0x40da38\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x40da55\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40da4c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g65;\n}\n"
        },
        {
            "funcName": "function_40da60",
            "funcStartAddr": "40da60",
            "funcEndAddr": "40dad2",
            "decompiledFuncCode": "int64_t function_40da60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g65 : a5; // 0x40da82\n    int32_t * v2 = __errno_location(); // 0x40da8b\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x40daa4\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x40daa8\n    uint32_t v5 = *(int32_t *)v1; // 0x40daab\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x40dab1\n    int64_t result = function_40c5a0(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40daba\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dae0",
            "funcStartAddr": "40dae0",
            "funcEndAddr": "40dbc1",
            "decompiledFuncCode": "int64_t function_40dae0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g65 : a4; // 0x40db02\n    int32_t * v2 = __errno_location(); // 0x40db08\n    int64_t v3 = v1 + 8; // 0x40db1f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x40db27\n    int32_t * v5 = (int32_t *)v1; // 0x40db2a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x40db38\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40db3b\n    int64_t v8 = function_40c5a0(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x40db45\n    int64_t v9 = v8 + 1; // 0x40db4a\n    int64_t result = function_4100e0(v9); // 0x40db5f\n    function_40c5a0(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x40dba4\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x40dbad\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dbd0",
            "funcStartAddr": "40dbd0",
            "funcEndAddr": "40dbda",
            "decompiledFuncCode": "int64_t function_40dbd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40dbd0\n    return function_40dae0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_40dbe0",
            "funcStartAddr": "40dbe0",
            "funcEndAddr": "40dc75",
            "decompiledFuncCode": "int64_t function_40dbe0(void) {\n    uint32_t v1 = *(int32_t *)&g39; // 0x40dbe0\n    int64_t v2 = v1; // 0x40dbe0\n    int64_t v3 = v2; // 0x40dbf4\n    if (v1 >= 2) {\n        int64_t v4 = &g39;\n        int64_t v5 = v4 + 16; // 0x40dc13\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g83;\n        while (v5 != (int64_t)g36 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x40dc10\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g83;\n        }\n    }\n    int64_t v6 = v3; // 0x40dc2d\n    if (g37 != 0x61b940) {\n        // 0x40dc2f\n        free((int64_t *)g37);\n        g37 = 256;\n        *(int64_t *)&g38 = (int64_t)&g64;\n        v6 = &g83;\n    }\n    int64_t result = v6; // 0x40dc51\n    if (g36 != &g37) {\n        // 0x40dc53\n        free(g36);\n        *(int64_t *)&g36 = (int64_t)&g37;\n        result = &g83;\n    }\n    // 0x40dc66\n    *(int32_t *)&g39 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dc80",
            "funcStartAddr": "40dc80",
            "funcEndAddr": "40dc91",
            "decompiledFuncCode": "int64_t function_40dc80(void) {\n    // 0x40dc80\n    int64_t v1; // 0x40dc80\n    return function_40d7d0(v1, v1, -1, (int64_t *)&g65);\n}\n"
        },
        {
            "funcName": "function_40dca0",
            "funcStartAddr": "40dca0",
            "funcEndAddr": "40dcaa",
            "decompiledFuncCode": "int64_t function_40dca0(void) {\n    // 0x40dca0\n    int64_t v1; // 0x40dca0\n    return function_40d7d0(v1, v1, v1, (int64_t *)&g65);\n}\n"
        },
        {
            "funcName": "function_40dcb0",
            "funcStartAddr": "40dcb0",
            "funcEndAddr": "40dcc6",
            "decompiledFuncCode": "int64_t function_40dcb0(int64_t a1) {\n    // 0x40dcb0\n    return function_40d7d0(0, a1, -1, (int64_t *)&g65);\n}\n"
        },
        {
            "funcName": "function_40dcd0",
            "funcStartAddr": "40dcd0",
            "funcEndAddr": "40dce2",
            "decompiledFuncCode": "int64_t function_40dcd0(int64_t a1, int64_t a2) {\n    // 0x40dcd0\n    return function_40d7d0(0, a1, a2, (int64_t *)&g65);\n}\n"
        },
        {
            "funcName": "function_40dcf0",
            "funcStartAddr": "40dcf0",
            "funcEndAddr": "40dd58",
            "decompiledFuncCode": "int64_t function_40dcf0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40dd00\n    return function_40d7d0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40dd60",
            "funcStartAddr": "40dd60",
            "funcEndAddr": "40ddc4",
            "decompiledFuncCode": "int64_t function_40dd60(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40dd70\n    return function_40d7d0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_40ddd0",
            "funcStartAddr": "40ddd0",
            "funcEndAddr": "40dddc",
            "decompiledFuncCode": "int64_t function_40ddd0(int64_t a1, int64_t a2) {\n    // 0x40ddd0\n    return function_40dcf0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_40dde0",
            "funcStartAddr": "40dde0",
            "funcEndAddr": "40ddef",
            "decompiledFuncCode": "int64_t function_40dde0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40dde0\n    return function_40dd60(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_40ddf0",
            "funcStartAddr": "40ddf0",
            "funcEndAddr": "40de60",
            "decompiledFuncCode": "int64_t function_40ddf0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g65); // 0x40ddfd\n    int128_t v2 = __asm_movdqa(g66); // 0x40de05\n    int128_t v3 = __asm_movdqa(g67); // 0x40de0d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x40de22\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x40de38\n    uint32_t v6 = *v5; // 0x40de38\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40de3d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_40d7d0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_40de60",
            "funcStartAddr": "40de60",
            "funcEndAddr": "40de6d",
            "decompiledFuncCode": "int64_t function_40de60(int64_t a1, int64_t a2) {\n    // 0x40de60\n    return function_40ddf0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_40de70",
            "funcStartAddr": "40de70",
            "funcEndAddr": "40de81",
            "decompiledFuncCode": "int64_t function_40de70(int64_t a1) {\n    // 0x40de70\n    return function_40ddf0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_40de90",
            "funcStartAddr": "40de90",
            "funcEndAddr": "40de9a",
            "decompiledFuncCode": "int64_t function_40de90(void) {\n    // 0x40de90\n    int64_t v1; // 0x40de90\n    return function_40ddf0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_40dea0",
            "funcStartAddr": "40dea0",
            "funcEndAddr": "40df0e",
            "decompiledFuncCode": "int64_t function_40dea0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40deba\n    return function_40d7d0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40df10",
            "funcStartAddr": "40df10",
            "funcEndAddr": "40df7c",
            "decompiledFuncCode": "int64_t function_40df10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g65); // 0x40df17\n    int128_t v2 = __asm_movdqa(g66); // 0x40df1f\n    int128_t v3 = __asm_movdqa(g67); // 0x40df27\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x40df49\n    if (a2 == 0 || a3 == 0) {\n        // 0x40df77\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40df5a\n    return function_40d7d0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_40df80",
            "funcStartAddr": "40df80",
            "funcEndAddr": "40df89",
            "decompiledFuncCode": "int64_t function_40df80(void) {\n    // 0x40df80\n    int64_t v1; // 0x40df80\n    return function_40df10(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_40df90",
            "funcStartAddr": "40df90",
            "funcEndAddr": "40dfa7",
            "decompiledFuncCode": "int64_t function_40df90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40df90\n    return function_40df10(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_40dfb0",
            "funcStartAddr": "40dfb0",
            "funcEndAddr": "40dfc3",
            "decompiledFuncCode": "int64_t function_40dfb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40dfb0\n    return function_40df10(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_40dfd0",
            "funcStartAddr": "40dfd0",
            "funcEndAddr": "40dfda",
            "decompiledFuncCode": "int64_t function_40dfd0(void) {\n    // 0x40dfd0\n    int64_t v1; // 0x40dfd0\n    return function_40d7d0(v1, v1, v1, &g35);\n}\n"
        },
        {
            "funcName": "function_40dfe0",
            "funcStartAddr": "40dfe0",
            "funcEndAddr": "40dff2",
            "decompiledFuncCode": "int64_t function_40dfe0(int64_t a1, int64_t a2) {\n    // 0x40dfe0\n    return function_40d7d0(0, a1, a2, &g35);\n}\n"
        },
        {
            "funcName": "function_40e000",
            "funcStartAddr": "40e000",
            "funcEndAddr": "40e011",
            "decompiledFuncCode": "int64_t function_40e000(int64_t a1, int64_t a2) {\n    // 0x40e000\n    return function_40d7d0(a1, a2, -1, &g35);\n}\n"
        },
        {
            "funcName": "function_40e020",
            "funcStartAddr": "40e020",
            "funcEndAddr": "40e036",
            "decompiledFuncCode": "int64_t function_40e020(int64_t a1) {\n    // 0x40e020\n    return function_40d7d0(0, a1, -1, &g35);\n}\n"
        },
        {
            "funcName": "function_40e040",
            "funcStartAddr": "40e040",
            "funcEndAddr": "40e282",
            "decompiledFuncCode": "int64_t function_40e040(int64_t fd, int64_t a2, int64_t fd2, int64_t a4, int64_t a5) {\n    int32_t result = syscall(SYS_vmsplice); // 0x40e074\n    if (result >= 0) {\n        // 0x40e0bb\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x40e083\n    int32_t v2 = *v1; // 0x40e08f\n    if (v2 != 95 && (v2 - 22 & -17) != 0) {\n        // 0x40e0bb\n        return result;\n    }\n    int64_t v3 = (int64_t)v1; // 0x40e083\n    char * str2; // 0x40e040\n    char v4; // 0x40e040\n    int64_t v5; // 0x40e040\n    int64_t v6; // bp-200, 0x40e040\n    if ((int32_t)a5 == 0) {\n        // 0x40e0a6\n        str2 = (char *)a4;\n        v5 = v3;\n        v4 = !((v2 == 95 | (v2 - 22 & -17) == 0));\n    } else {\n        if ((a5 & 0xfffffffe) != 0) {\n            // 0x40e0af\n            *v1 = 95;\n            // 0x40e0bb\n            return -1;\n        }\n        char * v7 = (char *)a4;\n        int32_t v8 = __fxstatat(1, (int32_t)fd2, v7, (struct stat *)&v6, 256); // 0x40e0ee\n        int64_t v9 = 0x100000000 * v3 >> 32; // 0x40e0f3\n        int32_t * v10 = (int32_t *)v9;\n        if (v8 == 0) {\n            // 0x40e250\n            *v10 = 17;\n            // 0x40e0bb\n            return -1;\n        }\n        int32_t v11 = *v10; // 0x40e100\n        if (v11 == 75) {\n            // 0x40e250\n            *v10 = 17;\n            // 0x40e0bb\n            return -1;\n        }\n        // 0x40e10c\n        str2 = v7;\n        v5 = v9;\n        v4 = 1;\n        if (v11 != 2) {\n            // 0x40e0bb\n            return -1;\n        }\n    }\n    char * str = (char *)a2; // 0x40e128\n    int32_t len = strlen(str); // 0x40e128\n    int32_t len2 = strlen(str2); // 0x40e133\n    if (len == 0 || len2 == 0) {\n        // 0x40e0bb\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x40e14f\n    if (*(char *)(a2 - 1 + (int64_t)len) != 47) {\n        // 0x40e156\n        if (*(char *)(a4 - 1 + (int64_t)len2) != 47) {\n            // 0x40e0bb\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n    }\n    // 0x40e162\n    int64_t v12; // bp-344, 0x40e040\n    if (__fxstatat(1, (int32_t)fd, str, (struct stat *)&v12, 256) != 0) {\n        // 0x40e0bb\n        return -1;\n    }\n    int64_t v13 = 0x100000000 * v5 >> 32; // 0x40e189\n    int32_t v14; // 0x40e040\n    if (v4 != 0) {\n        if ((v14 & 0xf000) == 0x4000) {\n            // 0x40e0bb\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n        // 0x40e1a4\n        *(int32_t *)v13 = 2;\n        // 0x40e0bb\n        return -1;\n    }\n    // 0x40e1f0\n    if (__fxstatat(1, (int32_t)fd2, str2, (struct stat *)&v6, 256) != 0) {\n        // 0x40e21c\n        if (*(int32_t *)v13 != 2 || (v14 & 0xf000) != 0x4000) {\n            // 0x40e0bb\n            return -1;\n        }\n        // 0x40e0bb\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    if ((v14 & 0xf000) != 0x4000) {\n        // 0x40e1cf\n        *(int32_t *)v13 = 20;\n        // 0x40e0bb\n        return -1;\n    }\n    if ((v14 & 0xf000) == 0x4000) {\n        // 0x40e0bb\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x40e271\n    *(int32_t *)v13 = 21;\n    // 0x40e0bb\n    return -1;\n}\n"
        },
        {
            "funcName": "function_40e290",
            "funcStartAddr": "40e290",
            "funcEndAddr": "40e2ee",
            "decompiledFuncCode": "int64_t function_40e290(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x40e2b1\n    while (result < 0) {\n        // 0x40e2be\n        if (*__errno_location() != 4) {\n            // break -> 0x40e2ca\n            break;\n        }\n        result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e2f0",
            "funcStartAddr": "40e2f0",
            "funcEndAddr": "40e420",
            "decompiledFuncCode": "int64_t function_40e2f0(int64_t a1, int64_t a2) {\n    int64_t str = function_40ab40(a1, a2); // 0x40e309\n    int64_t str2 = function_40ab40(a2, a2); // 0x40e314\n    int64_t n = function_40aba0(str); // 0x40e31f\n    if (n != function_40aba0(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x40e334\n        return 0;\n    }\n    int64_t v1 = function_40aa60(); // 0x40e365\n    int64_t v2 = function_40aa60(); // 0x40e370\n    char * v3 = (char *)v1; // 0x40e383\n    int64_t v4; // bp-344, 0x40e2f0\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x40e400\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x40e39c\n    int64_t v6; // bp-200, 0x40e2f0\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x40e3e0\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x40e3b4\n    // 0x40e3b6\n    v7 = v4 == v6;\n    // 0x40e3c5\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x40e334\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40e420",
            "funcStartAddr": "40e420",
            "funcEndAddr": "40e436",
            "decompiledFuncCode": "int64_t function_40e420(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 8); // 0x40e425\n    uint64_t v2 = *(int64_t *)(a1 + 8); // 0x40e429\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_40e440",
            "funcStartAddr": "40e440",
            "funcEndAddr": "40e44b",
            "decompiledFuncCode": "int64_t function_40e440(int64_t str, int64_t str2) {\n    // 0x40e440\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_40e450",
            "funcStartAddr": "40e450",
            "funcEndAddr": "40e7e4",
            "decompiledFuncCode": "int64_t function_40e450(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)((8 * a2 & 0x7fffffff8) + (int64_t)&g19); // 0x40e460\n    if (a1 == 0) {\n        // 0x40e619\n        return 0;\n    }\n    int32_t * v2 = __errno_location(); // 0x40e482\n    *v2 = 0;\n    struct __dirstream * dirp = (struct __dirstream *)a1; // 0x40e4b6\n    struct dirent * v3 = readdir(dirp); // 0x40e4b6\n    int64_t nmemb = 0; // 0x40e4c1\n    int64_t v4 = 0; // 0x40e4c1\n    int64_t v5 = 0; // 0x40e4c1\n    int64_t v6 = 0; // 0x40e4c1\n    int64_t v7 = 0; // 0x40e4c1\n    struct dirent * v8; // 0x40e450\n    int64_t v9; // 0x40e450\n    int64_t v10; // 0x40e450\n    int64_t v11; // 0x40e450\n    int64_t v12; // 0x40e450\n    char v13; // 0x40e450\n    int64_t v14; // 0x40e450\n    if (v3 != NULL) {\n        struct dirent * v15 = v3; // 0x40e4b6\n        int32_t v16 = 0;\n        v9 = 0;\n        v11 = 0;\n        struct dirent * v17 = v15; // 0x40e4b6\n        int64_t v18 = 0; // 0x40e6b9\n        int64_t v19 = 0;\n        int64_t v20 = 0;\n        struct dirent * v21; // 0x40e450\n        int64_t v22; // 0x40e450\n        int64_t v23; // 0x40e450\n        int64_t v24; // 0x40e450\n        int64_t v25; // 0x40e4c7\n        char * str; // 0x40e450\n        char v26; // 0x40e4cb\n        uint64_t v27; // 0x40e502\n        int64_t v28; // 0x40e63b\n        int64_t v29; // 0x40e69a\n        uint64_t v30; // 0x40e66a\n        while (true) {\n            // 0x40e4c7\n            v14 = v20;\n            v10 = v19;\n            v12 = v18;\n            v8 = v17;\n            while (true) {\n                // 0x40e4c7\n                v21 = v8;\n                v24 = (int64_t)v21;\n                v25 = v24 + 19;\n                str = (char *)v25;\n                v26 = *str;\n                v13 = v26;\n                if (v26 != 46) {\n                    goto lab_0x40e4a8;\n                } else {\n                    // 0x40e4d3\n                    switch (*(char *)(v24 + 20)) {\n                        case 46: {\n                            // 0x40e568\n                            v13 = *(char *)(v24 + 21);\n                            goto lab_0x40e4a8;\n                        }\n                        case 0: {\n                            goto lab_0x40e4ac;\n                        }\n                        default: {\n                            goto lab_0x40e4e5_2;\n                        }\n                    }\n                }\n            }\n            // 0x40e4e5\n            v27 = (int64_t)strlen(str) + 1;\n            if (v1 != 0) {\n                // break -> 0x40e50c\n                break;\n            }\n            // 0x40e630\n            v28 = v27 + v12;\n            v23 = v14;\n            v29 = v10;\n            if (v14 - v12 <= v27) {\n                if (v28 < v12) {\n                    // 0x40e788\n                    function_410330(v25);\n                    // UNREACHABLE\n                }\n                if (v10 == 0) {\n                    // 0x40e77a\n                    v22 = 128;\n                    if (v28 != 0) {\n                        // 0x40e782\n                        v22 = v28;\n                        if (v28 < 0) {\n                            // 0x40e788\n                            function_410330(v25);\n                            // UNREACHABLE\n                        }\n                    }\n                } else {\n                    if ((int32_t)v28 <= 0xffffffff) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                    // 0x40e678\n                    v30 = 0x100000000 * v28 >> 32;\n                    v22 = v30 + 1 + v30 / 2;\n                }\n                // 0x40e688\n                v23 = v22;\n                v29 = function_410140(v10, v23);\n            }\n            // 0x40e6ac\n            v19 = v29;\n            v20 = v23;\n            memcpy((int64_t *)(v19 + v12), (int64_t *)v25, (int32_t)v27);\n            v18 = 0x100000000 * v28 >> 32;\n            *v2 = 0;\n            v17 = readdir(dirp);\n            nmemb = v9;\n            v4 = v11;\n            v5 = v20;\n            v6 = v19;\n            v7 = v18;\n            if (v17 == NULL) {\n                // break (via goto) -> 0x40e578\n                goto lab_0x40e578_2;\n            }\n        }\n        int32_t v31 = (int32_t)v9 + 1; // 0x40e51b\n        int32_t v32 = v16; // 0x40e520\n        int32_t v33 = v31; // 0x40e520\n        int64_t v34 = v11; // 0x40e520\n        int64_t v35; // 0x40e450\n        int32_t v36; // 0x40e450\n        int32_t v37; // 0x40e450\n        int64_t v38; // 0x40e6fb\n        if (v9 == (int64_t)v16) {\n            if (v11 == 0) {\n                // 0x40e79e\n                v36 = 8;\n                v37 = 1;\n                v35 = 128;\n                if (v9 != 0) {\n                    // 0x40e7a3\n                    v36 = v16;\n                    v37 = v31;\n                    v35 = 16 * v9;\n                    if (v9 > -1 != v9 < 0x1000000000000000) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                }\n            } else {\n                if (v9 >= 0x555555555555555) {\n                    // 0x40e788\n                    function_410330(v25);\n                    // UNREACHABLE\n                }\n                // 0x40e6f5\n                v38 = v9 / 2 + (int64_t)v31;\n                v36 = v38;\n                v37 = v31;\n                v35 = 16 * v38;\n            }\n            // 0x40e70c\n            v33 = v37;\n            v32 = v36;\n            v34 = function_410140(v11, v35);\n        }\n        int64_t v39 = v34;\n        int32_t v40 = v32;\n        int64_t v41 = v39 + 16 * v9; // 0x40e537\n        *(int64_t *)v41 = function_410310(v25);\n        int64_t v42 = v27 + v12; // 0x40e550\n        *(int64_t *)(v41 + 8) = *(int64_t *)v21;\n        int64_t v43 = v33; // 0x40e558\n        *v2 = 0;\n        v15 = readdir(dirp);\n        int64_t v44 = v10; // 0x40e4c1\n        int64_t v45 = v14; // 0x40e4c1\n        nmemb = v43;\n        v4 = v39;\n        v5 = v14;\n        v6 = v10;\n        v7 = v42;\n        while (v15 != NULL) {\n            // 0x40e4c7\n            v16 = v40;\n            v9 = v43;\n            v11 = v39;\n            v17 = v15;\n            v18 = v42;\n            v19 = v44;\n            v20 = v45;\n            while (true) {\n                // 0x40e4c7\n                v14 = v20;\n                v10 = v19;\n                v12 = v18;\n                v8 = v17;\n                while (true) {\n                    // 0x40e4c7\n                    v21 = v8;\n                    v24 = (int64_t)v21;\n                    v25 = v24 + 19;\n                    str = (char *)v25;\n                    v26 = *str;\n                    v13 = v26;\n                    if (v26 != 46) {\n                        goto lab_0x40e4a8;\n                    } else {\n                        // 0x40e4d3\n                        switch (*(char *)(v24 + 20)) {\n                            case 46: {\n                                // 0x40e568\n                                v13 = *(char *)(v24 + 21);\n                                goto lab_0x40e4a8;\n                            }\n                            case 0: {\n                                goto lab_0x40e4ac;\n                            }\n                            default: {\n                                goto lab_0x40e4e5_2;\n                            }\n                        }\n                    }\n                }\n                // 0x40e4e5\n                v27 = (int64_t)strlen(str) + 1;\n                if (v1 != 0) {\n                    // break -> 0x40e50c\n                    break;\n                }\n                // 0x40e630\n                v28 = v27 + v12;\n                v23 = v14;\n                v29 = v10;\n                if (v14 - v12 <= v27) {\n                    if (v28 < v12) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                    if (v10 == 0) {\n                        // 0x40e77a\n                        v22 = 128;\n                        if (v28 != 0) {\n                            // 0x40e782\n                            v22 = v28;\n                            if (v28 < 0) {\n                                // 0x40e788\n                                function_410330(v25);\n                                // UNREACHABLE\n                            }\n                        }\n                    } else {\n                        if ((int32_t)v28 <= 0xffffffff) {\n                            // 0x40e788\n                            function_410330(v25);\n                            // UNREACHABLE\n                        }\n                        // 0x40e678\n                        v30 = 0x100000000 * v28 >> 32;\n                        v22 = v30 + 1 + v30 / 2;\n                    }\n                    // 0x40e688\n                    v23 = v22;\n                    v29 = function_410140(v10, v23);\n                }\n                // 0x40e6ac\n                v19 = v29;\n                v20 = v23;\n                memcpy((int64_t *)(v19 + v12), (int64_t *)v25, (int32_t)v27);\n                v18 = 0x100000000 * v28 >> 32;\n                *v2 = 0;\n                v17 = readdir(dirp);\n                nmemb = v9;\n                v4 = v11;\n                v5 = v20;\n                v6 = v19;\n                v7 = v18;\n                if (v17 == NULL) {\n                    // break (via goto) -> 0x40e578\n                    goto lab_0x40e578_2;\n                }\n            }\n            // 0x40e50c\n            v31 = (int32_t)v9 + 1;\n            v32 = v16;\n            v33 = v31;\n            v34 = v11;\n            if (v9 == (int64_t)v16) {\n                if (v11 == 0) {\n                    // 0x40e79e\n                    v36 = 8;\n                    v37 = 1;\n                    v35 = 128;\n                    if (v9 != 0) {\n                        // 0x40e7a3\n                        v36 = v16;\n                        v37 = v31;\n                        v35 = 16 * v9;\n                        if (v9 > -1 != v9 < 0x1000000000000000) {\n                            // 0x40e788\n                            function_410330(v25);\n                            // UNREACHABLE\n                        }\n                    }\n                } else {\n                    if (v9 >= 0x555555555555555) {\n                        // 0x40e788\n                        function_410330(v25);\n                        // UNREACHABLE\n                    }\n                    // 0x40e6f5\n                    v38 = v9 / 2 + (int64_t)v31;\n                    v36 = v38;\n                    v37 = v31;\n                    v35 = 16 * v38;\n                }\n                // 0x40e70c\n                v33 = v37;\n                v32 = v36;\n                v34 = function_410140(v11, v35);\n            }\n            // 0x40e526\n            v39 = v34;\n            v40 = v32;\n            v41 = v39 + 16 * v9;\n            *(int64_t *)v41 = function_410310(v25);\n            v42 = v27 + v12;\n            *(int64_t *)(v41 + 8) = *(int64_t *)v21;\n            v43 = v33;\n            *v2 = 0;\n            v15 = readdir(dirp);\n            v44 = v10;\n            v45 = v14;\n            nmemb = v43;\n            v4 = v39;\n            v5 = v14;\n            v6 = v10;\n            v7 = v42;\n        }\n    }\n  lab_0x40e578_2:;\n    int32_t v46 = *v2; // 0x40e578\n    if (v46 != 0) {\n        // 0x40e757\n        free((int64_t *)v4);\n        free((int64_t *)v6);\n        *v2 = v46;\n        // 0x40e619\n        return 0;\n    }\n    // 0x40e583\n    int64_t result; // 0x40e450\n    int64_t v47; // 0x40e450\n    if (v1 == 0) {\n        // 0x40e6c8\n        if (v5 == v7) {\n            int64_t v48 = function_410140(v6, v5 + 1); // 0x40e746\n            v47 = v48 + v5;\n            result = v48;\n        } else {\n            // 0x40e6cf\n            v47 = v7 + v6;\n            result = v6;\n        }\n    } else {\n        int64_t v49 = v7 + 1; // 0x40e58f\n        int64_t * v50; // 0x40e450\n        int64_t v51; // 0x40e450\n        int64_t v52; // 0x40e450\n        if (nmemb != 0) {\n            int64_t * base = (int64_t *)v4;\n            qsort(base, (int32_t)nmemb, 16, (int32_t (*)(int64_t *, int64_t *))v1);\n            int64_t v53 = function_4100e0(v49); // 0x40e5d4\n            int64_t v54 = v4; // 0x40e5dc\n            int64_t v55 = 0; // 0x40e5dc\n            int64_t str2 = v55 + v53; // 0x40e5e0\n            int64_t * str3 = (int64_t *)v54; // 0x40e5e5\n            v54 += 16;\n            char * v56 = stpcpy((char *)str2, (char *)*str3); // 0x40e5ef\n            int64_t v57 = v55 + 1 + (int64_t)v56 - str2; // 0x40e5fb\n            free((int64_t *)*str3);\n            v55 = v57;\n            while (v54 != v4 + 16 * nmemb) {\n                // 0x40e5e0\n                str2 = v55 + v53;\n                str3 = (int64_t *)v54;\n                v54 += 16;\n                v56 = stpcpy((char *)str2, (char *)*str3);\n                v57 = v55 + 1 + (int64_t)v56 - str2;\n                free((int64_t *)*str3);\n                v55 = v57;\n            }\n            // 0x40e60a\n            v50 = base;\n            v51 = v53;\n            v52 = v57 + v53;\n        } else {\n            int64_t v58 = function_4100e0(v49); // 0x40e59b\n            v50 = (int64_t *)v4;\n            v51 = v58;\n            v52 = v58;\n        }\n        // 0x40e60d\n        free(v50);\n        v47 = v52;\n        result = v51;\n    }\n    // 0x40e615\n    *(char *)v47 = 0;\n    // 0x40e619\n    return result;\n  lab_0x40e4a8:\n    // 0x40e4a8\n    if (v13 != 0) {\n        // break -> 0x40e4e5\n        goto lab_0x40e4e5_2;\n    }\n    goto lab_0x40e4ac;\n  lab_0x40e4ac:\n    // 0x40e4ac\n    *v2 = 0;\n    struct dirent * v59 = readdir(dirp); // 0x40e4b6\n    v8 = v59;\n    nmemb = v9;\n    v4 = v11;\n    v5 = v14;\n    v6 = v10;\n    v7 = v12;\n    if (v59 == NULL) {\n        // break (via goto) -> 0x40e578\n        goto lab_0x40e578_2;\n    }\n    goto lab_0x40e4c7;\n}\n"
        },
        {
            "funcName": "function_40e7f0",
            "funcStartAddr": "40e7f0",
            "funcEndAddr": "40e858",
            "decompiledFuncCode": "int64_t function_40e7f0(int64_t a1, int64_t a2) {\n    int64_t dirp = function_40a9c0(); // 0x40e7f6\n    if (dirp == 0) {\n        // 0x40e81c\n        return 0;\n    }\n    int64_t result = function_40e450(dirp, a2 & 0xffffffff); // 0x40e808\n    if (closedir((struct __dirstream *)dirp) == 0) {\n        // 0x40e81c\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x40e838\n    free((int64_t *)result);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40e860",
            "funcStartAddr": "40e860",
            "funcEndAddr": "40e8b4",
            "decompiledFuncCode": "int64_t function_40e860(int64_t a1) {\n    // 0x40e860\n    int64_t v1; // bp-152, 0x40e860\n    int32_t v2 = __lxstat(1, (char *)a1, (struct stat *)&v1); // 0x40e873\n    int32_t * v3 = __errno_location(); // 0x40e87a\n    if (v2 == 0) {\n        // 0x40e8a0\n        *v3 = 17;\n        return 0xffffffff;\n    }\n    int32_t v4 = *v3; // 0x40e883\n    if (v4 != 75) {\n        // 0x40e88a\n        return v4 != 2 ? 0xffffffff : 0;\n    }\n    // 0x40e8a0\n    *v3 = 17;\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40e8c0",
            "funcStartAddr": "40e8c0",
            "funcEndAddr": "40e8ca",
            "decompiledFuncCode": "int64_t function_40e8c0(void) {\n    // 0x40e8c0\n    int64_t path; // 0x40e8c0\n    return mkdir((char *)path, 448);\n}\n"
        },
        {
            "funcName": "function_40e8d0",
            "funcStartAddr": "40e8d0",
            "funcEndAddr": "40e8e6",
            "decompiledFuncCode": "int64_t function_40e8d0(void) {\n    // 0x40e8d0\n    int64_t path; // 0x40e8d0\n    return open((char *)path, (int32_t)path & -196 | 194);\n}\n"
        },
        {
            "funcName": "function_40e8f0",
            "funcStartAddr": "40e8f0",
            "funcEndAddr": "40e8f1",
            "decompiledFuncCode": "int64_t function_40e8f0(void) {\n    // 0x40e8f0\n    int64_t result; // 0x40e8f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e910",
            "funcStartAddr": "40e910",
            "funcEndAddr": "40ea6d",
            "decompiledFuncCode": "int64_t function_40e910(int64_t str, int32_t a2, int64_t * a3, int64_t a4, uint64_t a5) {\n    int32_t * v1 = __errno_location(); // 0x40e935\n    int32_t v2 = *v1; // 0x40e940\n    uint64_t len = (int64_t)strlen((char *)str); // 0x40e946\n    uint64_t v3 = (int64_t)a2 + a5; // 0x40e94e\n    if (v3 > len) {\n        // 0x40ea58\n        *v1 = 22;\n        // 0x40ea40\n        return 0xffffffff;\n    }\n    int64_t str2 = len - v3 + str;\n    if ((int64_t)strspn((char *)str2, \"X\") < a5) {\n        // 0x40ea58\n        *v1 = 22;\n        // 0x40ea40\n        return 0xffffffff;\n    }\n    int64_t v4 = function_411b80(); // 0x40e984\n    if (v4 == 0) {\n        // 0x40ea40\n        return 0xffffffff;\n    }\n    int32_t v5 = 0x3a2f8; // 0x40e9a6\n    int64_t v6; // 0x40e910\n    int64_t v7; // 0x40e9c8\n    int64_t v8; // 0x40e9cc\n    char v9; // 0x40e9d1\n    if (a5 != 0) {\n        v7 = str2 + 1;\n        v8 = function_411bc0(v4, 61);\n        v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n        *(char *)str2 = v9;\n        v6 = v7;\n        while (v7 != str2 + a5) {\n            // 0x40e9c0\n            v7 = v6 + 1;\n            v8 = function_411bc0(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)v6 = v9;\n            v6 = v7;\n        }\n    }\n    int32_t v10; // 0x40e910\n    int64_t v11; // 0x40e910\n    int64_t result; // 0x40e910\n    while ((int32_t)a4 < 0) {\n        int32_t v12 = *v1; // 0x40e9f8\n        v10 = v12;\n        v11 = 0xffffffff;\n        if (v12 != 17) {\n            goto lab_0x40ea25;\n        }\n        // 0x40ea00\n        v5--;\n        if (v5 == 0) {\n            // 0x40ea06\n            function_411ce0(v4);\n            *v1 = 17;\n            result = 0xffffffff;\n            return result;\n        }\n        if (a5 != 0) {\n            v7 = str2 + 1;\n            v8 = function_411bc0(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)str2 = v9;\n            v6 = v7;\n            while (v7 != str2 + a5) {\n                // 0x40e9c0\n                v7 = v6 + 1;\n                v8 = function_411bc0(v4, 61);\n                v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n                *(char *)v6 = v9;\n                v6 = v7;\n            }\n        }\n    }\n    // 0x40ea1c\n    *v1 = v2;\n    v10 = v2;\n    v11 = a4 & 0xffffffff;\n  lab_0x40ea25:\n    // 0x40ea25\n    function_411ce0(v4);\n    *v1 = v10;\n    result = v11;\n  lab_0x40ea40:\n    // 0x40ea40\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ea70",
            "funcStartAddr": "40ea70",
            "funcEndAddr": "40eaeb",
            "decompiledFuncCode": "int64_t function_40ea70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a3 >> 32; // bp-12, 0x40ea74\n    if ((int32_t)a4 < 3) {\n        int64_t v2 = *(int64_t *)((8 * a4 & 0x7fffffff8) + (int64_t)&g20); // 0x40ea84\n        int64_t v3; // 0x40ea70\n        return function_40e910(a1, (int32_t)a2, &v1, v2, v3);\n    }\n    // 0x40eacc\n    function_40e8f0();\n    function_40e8f0();\n    return function_40e910(a1, (int32_t)a2, (int64_t *)a3, a4, 6);\n}\n"
        },
        {
            "funcName": "function_40eaf0",
            "funcStartAddr": "40eaf0",
            "funcEndAddr": "40eb3e",
            "decompiledFuncCode": "int64_t function_40eaf0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40eafc\n    if (fd >= 3) {\n        // 0x40eb01\n        return a1 & 0xffffffff;\n    }\n    // 0x40eb10\n    int64_t v1; // 0x40eaf0\n    int64_t v2 = function_412750(a1, v1); // 0x40eb10\n    int32_t * v3 = __errno_location(); // 0x40eb18\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40eb40",
            "funcStartAddr": "40eb40",
            "funcEndAddr": "40eb4c",
            "decompiledFuncCode": "int64_t function_40eb40(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40eb40\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_40eb50",
            "funcStartAddr": "40eb50",
            "funcEndAddr": "40eb5a",
            "decompiledFuncCode": "int64_t function_40eb50(int64_t a1, int64_t a2) {\n    // 0x40eb50\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40eb60",
            "funcStartAddr": "40eb60",
            "funcEndAddr": "40f2c9",
            "decompiledFuncCode": "int64_t function_40eb60(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a3 + 96); // 0x40eb73\n    int64_t v2 = *(int64_t *)(a2 + 88); // 0x40eb77\n    int64_t v3 = *(int64_t *)(a3 + 88); // 0x40eb7b\n    int64_t v4 = *(int64_t *)(a2 + 96); // 0x40eb7f\n    int64_t v5 = v1 & 0xffffffff; // 0x40eb83\n    uint32_t v6 = (int32_t)a4 % 2; // 0x40eb86\n    int64_t v7 = v3; // 0x40eb89\n    int64_t v8 = v5; // 0x40eb89\n    int64_t v9; // 0x40eb60\n    int64_t v10; // bp-248, 0x40eb60\n    int32_t v11; // 0x40eb60\n    int32_t v12; // 0x40eb96\n    int32_t v13; // 0x40eb60\n    int64_t result; // 0x40eb86\n    int64_t v14; // 0x40ecc7\n    if (v6 == 0) {\n        goto lab_0x40ec50;\n    } else {\n        // 0x40eb8f\n        v12 = v4;\n        v13 = v1;\n        if (v2 == v3 == v12 == v13) {\n            // 0x40ec67\n            return 0;\n        }\n        // 0x40ebac\n        if (v3 - 1 > v2) {\n            // 0x40ec67\n            return 0xffffffff;\n        }\n        // 0x40ebb9\n        result = v6;\n        if (v2 - 1 > v3) {\n            // 0x40ec67\n            return result;\n        }\n        // 0x40ebc7\n        v14 = g69;\n        if (g69 == 0) {\n            // 0x40ecb0\n            v14 = function_40b910(16, 0, 0x40eb40, 0x40eb50, 0x402380);\n            g69 = v14;\n            if (v14 != 0) {\n                goto lab_0x40ebe1;\n            } else {\n                // 0x40ecdf\n                v11 = 0x77359400;\n                v9 = &v10;\n                goto lab_0x40ecfc;\n            }\n        } else {\n            goto lab_0x40ebe1;\n        }\n    }\n  lab_0x40ec50:\n    // 0x40ec50\n    if (v7 > v2) {\n        // 0x40ec67\n        return 0xffffffff;\n    }\n    // 0x40ec55\n    if (v7 != v2) {\n        // 0x40ec67\n        return 1;\n    }\n    int64_t result2 = 0xffffffff; // 0x40ec5f\n    if (v8 <= v4) {\n        int32_t v15 = v8; // 0x40ec5c\n        int32_t v16 = v15 - (int32_t)v4; // 0x40ec5c\n        result2 = v16 < 0 != ((v16 ^ v15) & (int32_t)(v8 ^ v4)) < 0;\n    }\n    // 0x40ec67\n    return result2;\n  lab_0x40ebe1:;\n    int64_t v17 = v14; // 0x40ebeb\n    int64_t v18 = g68; // 0x40ebeb\n    int32_t v19; // 0x40eb60\n    if (g68 == 0) {\n        int64_t * mem = malloc(16); // 0x40f14a\n        int64_t v20 = (int64_t)mem; // 0x40f14a\n        g68 = v20;\n        if (mem == NULL) {\n            // 0x40f22f\n            v19 = g69;\n            goto lab_0x40f190;\n        } else {\n            // 0x40f162\n            *(int32_t *)(v20 + 8) = 0x77359400;\n            *(char *)(v20 + 12) = 0;\n            v17 = 0x100000000 * v14 >> 32;\n            v18 = v20;\n            goto lab_0x40ebf1;\n        }\n    } else {\n        goto lab_0x40ebf1;\n    }\n  lab_0x40ebf1:;\n    int64_t v21 = v18;\n    *(int64_t *)v21 = v21;\n    int64_t v22 = function_40c0b0(v17, v21); // 0x40ebff\n    int64_t v23; // 0x40eb60\n    if (v22 == 0) {\n        // 0x40f180\n        v19 = g69;\n        if (g69 == 0) {\n            // 0x40ecdf\n            v11 = 0x77359400;\n            v9 = &v10;\n            goto lab_0x40ecfc;\n        } else {\n            goto lab_0x40f190;\n        }\n    } else {\n        // 0x40ec10\n        v23 = v22;\n        if (g68 == v22) {\n            // 0x40f1c8\n            g68 = 0;\n            v23 = v22;\n        }\n        goto lab_0x40ec1d;\n    }\n  lab_0x40ecfc:;\n    int64_t v24 = *(int64_t *)(a2 + 80); // 0x40ed07\n    int64_t v25 = *(int64_t *)(a2 + 112); // 0x40ed0b\n    int32_t v26 = v24; // 0x40ed11\n    int32_t v27 = ((int32_t)(0x66666667 * (0x100000000 * v24 >> 32) / 0x100000000) >> 2) - (v26 >> 31); // 0x40ed21\n    int32_t v28 = v25; // 0x40ed25\n    int32_t v29 = ((int32_t)(0x66666667 * (0x100000000 * v25 >> 32) / 0x100000000) >> 2) - (v28 >> 31); // 0x40ed3c\n    int64_t v30 = 0x100000000 * v4 >> 32; // 0x40ed51\n    int32_t v31 = ((int32_t)(0x66666667 * v30 / 0x100000000) >> 2) - (v12 >> 31); // 0x40ed5c\n    int64_t v32 = result; // 0x40ed6d\n    int64_t v33 = v3; // 0x40ed6d\n    int64_t v34 = v9; // 0x40ed6d\n    int64_t v35 = v5; // 0x40ed6d\n    int64_t v36; // 0x40eb60\n    int64_t v37; // 0x40eb60\n    int64_t v38; // 0x40eb60\n    int64_t v39; // 0x40eb60\n    int64_t v40; // 0x40ed83\n    if ((-10 * v27 + v26 || -10 * v31 + v12 || -10 * v29 + v28) != 0) {\n        goto lab_0x40f130;\n    } else {\n        // 0x40ed73\n        v40 = *(int64_t *)(a2 + 72);\n        if (v11 < 11) {\n            // 0x40f263\n            *(int32_t *)(v9 + 8) = 10;\n            v38 = v3;\n            v39 = v3;\n            v36 = 10;\n            v37 = v9;\n        } else {\n            if ((v27 % 10 || v31 % 10 || v29 % 10) != 0) {\n                // 0x40f253\n                *(int32_t *)(v9 + 8) = 10;\n                v38 = v3;\n                v39 = v3;\n                v36 = 10;\n                v37 = v9;\n            } else {\n                int32_t v41 = v27; // 0x40ee19\n                int32_t v42 = v29; // 0x40ee19\n                int32_t v43 = v31; // 0x40ee19\n                int32_t v44 = 8; // 0x40ee19\n                int64_t v45 = 100; // 0x40ee31\n                int64_t v46 = v45 & 0xfffffffc; // 0x40ee31\n                while (v46 < (int64_t)v11) {\n                    int32_t v47 = v43;\n                    int32_t v48 = v42;\n                    int32_t v49 = v41;\n                    v41 = v49 / 10;\n                    v42 = v48 / 10;\n                    v43 = v47 / 10;\n                    if ((-10 * v48 / 100 + v42 || -10 * v49 / 100 + v41 || -10 * v47 / 100 + v43) != 0) {\n                        // break -> 0x40f1e0\n                        break;\n                    }\n                    // 0x40eeb2\n                    v44--;\n                    if (v44 == 0) {\n                        int64_t v50 = 0x100000000 * v3 >> 32; // 0x40eec6\n                        int64_t v51 = 0x100000000000000 * v9 >> 56; // 0x40eed7\n                        int32_t * v52 = (int32_t *)(v51 + 8);\n                        if ((v40 | v2 | *(int64_t *)(a2 + 104)) % 2 == 0) {\n                            // 0x40f210\n                            *v52 = 0x77359400;\n                            v38 = v50 & -2;\n                            v39 = v50;\n                            v36 = 0x77359400;\n                            v37 = v51;\n                            goto lab_0x40eef5;\n                        } else {\n                            // 0x40eee4\n                            *v52 = 0x3b9aca00;\n                            v38 = v50;\n                            v39 = v50;\n                            v36 = 0x3b9aca00;\n                            v37 = v51;\n                            goto lab_0x40eef5;\n                        }\n                    }\n                    v45 = 10 * v46;\n                    v46 = v45 & 0xfffffffc;\n                }\n                int32_t v53 = v45; // 0x40f1e0\n                int64_t v54 = 0x100000000 * v3 >> 32; // 0x40f1e7\n                int64_t v55 = 0x100000000000000 * v9 >> 56; // 0x40f1ec\n                *(int32_t *)(v55 + 8) = v53;\n                v38 = v54 & (int64_t)(v53 == 0x77359400) - 1;\n                v39 = v54;\n                v36 = v46;\n                v37 = v55;\n            }\n        }\n        goto lab_0x40eef5;\n    }\n  lab_0x40f130:\n    // 0x40f130\n    *(int32_t *)(v34 + 8) = (int32_t)v32;\n    *(char *)(v34 + 12) = 1;\n    v7 = v33;\n    v8 = v35;\n    goto lab_0x40ec50;\n  lab_0x40f190:;\n    int64_t v56 = &v10; // 0x40f19a\n    v10 = v56;\n    int64_t v57 = function_40b6a0((int64_t)v19, &v10); // 0x40f1aa\n    v23 = v57;\n    v11 = 0x77359400;\n    v9 = 0x100000000 * v56 >> 32;\n    if (v57 != 0) {\n        goto lab_0x40ec1d;\n    } else {\n        goto lab_0x40ecfc;\n    }\n  lab_0x40ec1d:;\n    uint32_t v58 = *(int32_t *)(v23 + 8); // 0x40ec1d\n    v11 = v58;\n    v9 = v23;\n    if (*(char *)(v23 + 12) == 0) {\n        goto lab_0x40ecfc;\n    } else {\n        // 0x40ec30\n        v7 = v3 & (int64_t)(v58 == 0x77359400) - 1;\n        v8 = v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % (int64_t)v58 & 0xffffffff;\n        goto lab_0x40ec50;\n    }\n  lab_0x40eef5:\n    // 0x40eef5\n    if (v2 > v39 || v4 >= v1 == v2 == v3) {\n        // 0x40ec67\n        return result;\n    }\n    // 0x40ef0d\n    if (v2 < v38) {\n        // 0x40ec67\n        return 0xffffffff;\n    }\n    // 0x40ef16\n    if (v2 == v38) {\n        // 0x40ec84\n        if ((v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % v36 & 0xffffffff) > v4) {\n            // 0x40ec67\n            return 0xffffffff;\n        }\n    }\n    int64_t v59 = v40; // bp-232, 0x40ef30\n    int32_t * v60 = (int32_t *)(a2 + 24); // 0x40ef63\n    int64_t v61; // 0x40eb60\n    if ((*v60 & 0xf000) == 0xa000) {\n        // 0x40f23b\n        v61 = function_40f8b0(a1, &v59, 0x38e38e39 * v36 / 0x200000000);\n    } else {\n        // 0x40ef8a\n        v61 = function_40f8a0(a1, &v59);\n    }\n    // 0x40ef9d\n    if ((int32_t)v61 != 0) {\n        // 0x40ec67\n        return 0xfffffffe;\n    }\n    char * v62 = (char *)a1;\n    int64_t v63; // bp-200, 0x40eb60\n    int32_t v64; // 0x40eb60\n    if ((*v60 & 0xf000) == 0xa000) {\n        // 0x40f279\n        v64 = __lxstat(1, v62, (struct stat *)&v63);\n    } else {\n        // 0x40efdb\n        v64 = __xstat(1, v62, (struct stat *)&v63);\n    }\n    // 0x40efec\n    int32_t v65; // 0x40eb60\n    uint64_t v66 = (int64_t)v65; // 0x40efec\n    int64_t v67 = v65; // 0x40eff4\n    int64_t v68 = v30 ^ v67 | v2 ^ v66 | (int64_t)v64; // 0x40f011\n    if (v68 != 0) {\n        int64_t * v69 = (int64_t *)(0x100000000000000 * (int64_t)&v59 >> 56);\n        if ((*v60 & 0xf000) == 0xa000) {\n            // 0x40f2a3\n            function_40f8b0(a1, v69, v68);\n        } else {\n            // 0x40f050\n            function_40f8a0(a1, v69);\n        }\n        // 0x40f063\n        if (v64 != 0) {\n            // 0x40ec67\n            return 0xfffffffe;\n        }\n    }\n    int64_t v70 = 0x3b9aca00 * (v66 % 2) + v67; // 0x40f090\n    int32_t v71 = v70; // 0x40f098\n    int64_t v72 = -1; // 0x40f0a9\n    int64_t v73 = result; // 0x40f0a9\n    if (10 * (((int32_t)(0x66666667 * (0x100000000 * v70 >> 32) / 0x100000000) >> 2) - (v71 >> 31)) == v71) {\n        // 0x40f0af\n        v72 = -1;\n        v73 = 10;\n        if (v36 != 10) {\n            int64_t v74 = 10; // 0x40f0d3\n            int32_t v75 = 9; // 0x40f107\n            int64_t v76 = v70 & 0xffffffff;\n            int32_t v77 = ((int32_t)(0x66666667 * (0x100000000 * v76 >> 32) / 0x100000000) >> 2) - ((int32_t)v76 >> 31); // 0x40f0e8\n            int64_t v78 = v74; // 0x40f101\n            while (v77 % 10 == 0) {\n                // 0x40f107\n                v75--;\n                v72 = -2;\n                v73 = 0x77359400;\n                if (v75 == 0) {\n                    goto lab_0x40f118;\n                }\n                int64_t v79 = 10 * v74; // 0x40f0d3\n                v74 = v79 & 0xfffffffc;\n                v78 = v74;\n                if ((int32_t)v79 == (int32_t)v36) {\n                    // break -> 0x40f28f\n                    break;\n                }\n                v76 = v77;\n                v77 = ((int32_t)(0x66666667 * (0x100000000 * v76 >> 32) / 0x100000000) >> 2) - ((int32_t)v76 >> 31);\n                v78 = v74;\n            }\n            // 0x40f28f\n            v72 = (int64_t)((int32_t)v78 == 0x77359400) - 1;\n            v73 = v78;\n        }\n    }\n  lab_0x40f118:\n    // 0x40f118\n    v32 = v73;\n    v33 = v72 & v39;\n    v34 = 0x100000000000000 * v37 >> 56;\n    v35 = v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % (v73 & 0xffffffff) & 0xffffffff;\n    goto lab_0x40f130;\n}\n"
        },
        {
            "funcName": "function_40f2d0",
            "funcStartAddr": "40f2d0",
            "funcEndAddr": "40f39e",
            "decompiledFuncCode": "int64_t function_40f2d0(int64_t * a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = (int64_t)a1;\n    int64_t * v3 = (int64_t *)(v1 + 8); // 0x40f2dc\n    int64_t * v4 = (int64_t *)(v1 + 24); // 0x40f2e0\n    int64_t v5 = *v4; // 0x40f2e0\n    int64_t v6; // 0x40f2d0\n    switch (*v3) {\n        case 0x3ffffffe: {\n            // 0x40f320\n            if (v5 == 0x3ffffffe) {\n                // 0x40f30f\n                return 1;\n            }\n            // 0x40f32e\n            *a2 = *(int64_t *)(v2 + 72);\n            *v3 = *(int64_t *)(v2 + 80);\n            v6 = v5;\n            goto lab_0x40f33d;\n        }\n        case 0x3fffffff: {\n            if (v5 == 0x3fffffff) {\n                // 0x40f390\n                *a2 = 0;\n                // 0x40f30f\n                return 0;\n            }\n            // 0x40f371\n            function_411500(v1);\n            int64_t v7 = *v4; // 0x40f379\n            v6 = v7;\n            if (v7 == 0x3ffffffe) {\n                goto lab_0x40f2fd;\n            } else {\n                goto lab_0x40f33d;\n            }\n        }\n        default: {\n            // 0x40f2f4\n            v6 = v5;\n            if (v5 != 0x3ffffffe) {\n                goto lab_0x40f33d;\n            } else {\n                goto lab_0x40f2fd;\n            }\n        }\n    }\n  lab_0x40f33d:\n    // 0x40f33d\n    if (v6 == 0x3fffffff) {\n        // 0x40f348\n        function_411500(v1 + 16);\n        return 0;\n    }\n    // 0x40f30f\n    return 0;\n  lab_0x40f2fd:\n    // 0x40f2fd\n    *(int64_t *)(v1 + 16) = *(int64_t *)(v2 + 88);\n    *v4 = *(int64_t *)(v2 + 96);\n    // 0x40f30f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40f3a0",
            "funcStartAddr": "40f3a0",
            "funcEndAddr": "40f449",
            "decompiledFuncCode": "int64_t function_40f3a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40f3a0\n    uint64_t v2 = v1 - 0x3ffffffe; // 0x40f3a4\n    if (v1 >= 0x3b9aca00 && v1 != 0x3fffffff && v2 != 0) {\n        // 0x40f430\n        *__errno_location() = 22;\n        return 0xffffffff;\n    }\n    uint64_t v3 = *(int64_t *)(a1 + 24); // 0x40f3ba\n    uint64_t v4 = v3 - 0x3ffffffe; // 0x40f3be\n    if (v3 >= 0x3b9aca00 && v3 != 0x3fffffff && v4 != 0) {\n        // 0x40f430\n        *__errno_location() = 22;\n        return 0xffffffff;\n    }\n    int64_t v5 = 0; // 0x40f3dd\n    int64_t v6 = 0; // 0x40f3dd\n    if (v2 < 2) {\n        // 0x40f3df\n        *(int64_t *)a1 = 0;\n        v5 = v1 == 0x3ffffffe;\n        v6 = 1;\n    }\n    int64_t v7 = v5; // 0x40f3fc\n    int64_t v8 = v6; // 0x40f3fc\n    if (v4 < 2) {\n        // 0x40f3fe\n        *(int64_t *)(a1 + 16) = 0;\n        v7 = v5 + (int64_t)(v3 == 0x3ffffffe);\n        v8 = 1;\n    }\n    // 0x40f41a\n    return v8 + (int64_t)((int32_t)v7 == 1) & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40f450",
            "funcStartAddr": "40f450",
            "funcEndAddr": "40f45a",
            "decompiledFuncCode": "int64_t function_40f450(void) {\n    struct timespec v1; // 0x40f455\n    struct timespec times[2]; // 0x40f455\n    // 0x40f450\n    v1 = (struct {int64_t e0; int32_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    int64_t fd; // 0x40f450\n    v1.e0 = fd;\n    times[0] = v1;\n    return utimensat((int32_t)fd, (char *)fd, times, AT_SYMLINK_NOFOLLOW);\n}\n"
        },
        {
            "funcName": "function_40f460",
            "funcStartAddr": "40f460",
            "funcEndAddr": "40f89e",
            "decompiledFuncCode": "int64_t function_40f460(int64_t a1, int64_t path, int64_t * a3, int64_t a4) {\n    struct timeval v1; // 0x40f5d0\n    struct timeval v2[2]; // 0x40f5d0\n    struct timeval v3; // 0x40f642\n    struct timeval v4[2]; // 0x40f642\n    struct timespec v5; // 0x40f6fd\n    struct timespec times[2]; // 0x40f6fd\n    struct timespec v6; // 0x40f4da\n    struct timespec times2[2]; // 0x40f4da\n    struct timeval v7; // 0x40f7f0\n    struct timeval v8[2]; // 0x40f7f0\n    int64_t v9 = (int64_t)a3;\n    int64_t v10; // 0x40f460\n    int64_t v11; // bp-288, 0x40f460\n    if (a3 == NULL) {\n        // 0x40f650\n        v11 = 0;\n        v10 = 0;\n    } else {\n        int128_t v12 = *(int128_t *)&v9; // 0x40f47d\n        int128_t v13 = __asm_movdqu(v12); // 0x40f47d\n        int64_t v14 = v12;\n        int128_t v15 = __asm_movdqu(*(int128_t *)(v14 + 16)); // 0x40f481\n        int64_t v16; // bp-280, 0x40f460\n        int64_t v17 = &v16; // 0x40f486\n        v11 = v17;\n        v16 = __asm_movaps(v13);\n        __asm_movaps(v15);\n        int64_t v18 = function_40f3a0(v17, path, v14, a4); // 0x40f49a\n        v10 = v18 & 0xffffffff;\n        if ((int32_t)v18 < 0) {\n            // 0x40f618\n            return -1;\n        }\n    }\n    int32_t fd = a1; // 0x40f4aa\n    if (fd < 0 == path == 0) {\n        // 0x40f848\n        *__errno_location() = 9;\n        // 0x40f618\n        return -1;\n    }\n    // 0x40f4b7\n    int32_t result; // 0x40f460\n    int64_t v19; // bp-184, 0x40f460\n    bool v20; // 0x40f460\n    if (g71 < 0) {\n        goto lab_0x40f4f5;\n    } else {\n        int64_t v21; // 0x40f460\n        if (v10 == 2) {\n            // 0x40f668\n            v9 = &v19;\n            int32_t v22; // 0x40f460\n            if (fd < 0) {\n                // 0x40f800\n                v22 = __xstat(1, (char *)path, (struct stat *)&v19);\n            } else {\n                // 0x40f675\n                v22 = __fxstat(1, fd, (struct stat *)&v19);\n            }\n            // 0x40f686\n            if (v22 != 0) {\n                // 0x40f618\n                return -1;\n            }\n            // 0x40f68e\n            if (*(int64_t *)(v11 + 8) == 0x3ffffffe) {\n                // 0x40f820\n                v21 = v11;\n            } else {\n                // 0x40f6a1\n                v21 = v11;\n                if (*(int64_t *)(v11 + 24) == 0x3ffffffe) {\n                    // 0x40f6b5\n                    v21 = v11;\n                }\n            }\n        } else {\n            // 0x40f4cb\n            v21 = v11;\n        }\n        // 0x40f4d0\n        if (fd < 0) {\n            // 0x40f6f0\n            v5 = (struct {int64_t e0; int32_t e1;}){\n                .e0 = 0,\n                .e1 = 0\n            };\n            v5.e0 = v21;\n            times[0] = v5;\n            int32_t v23 = utimensat(-100, (char *)path, times, 0); // 0x40f6fd\n            v20 = v23 == 0;\n            result = v23;\n            if (v23 >= 0 == (v23 != 0)) {\n                goto lab_0x40f4ea;\n            } else {\n                goto lab_0x40f70d;\n            }\n        } else {\n            // 0x40f4d8\n            v6 = (struct {int64_t e0; int32_t e1;}){\n                .e0 = 0,\n                .e1 = 0\n            };\n            v6.e0 = v21;\n            times2[0] = v6;\n            int32_t v24 = futimens(fd, times2); // 0x40f4da\n            v20 = v24 == 0;\n            result = v24;\n            if (v24 < 1) {\n                goto lab_0x40f70d;\n            } else {\n                goto lab_0x40f4ea;\n            }\n        }\n    }\n  lab_0x40f4f5:\n    // 0x40f4f5\n    g71 = -1;\n    g70 = -1;\n    int64_t v25; // 0x40f460\n    switch ((int32_t)v25) {\n        case 0: {\n            goto lab_0x40f560;\n        }\n        case 3: {\n            goto lab_0x40f53a;\n        }\n        default: {\n            // 0x40f514\n            v9 = &v19;\n            int32_t v26; // 0x40f460\n            if (fd < 0) {\n                // 0x40f6d8\n                v26 = __xstat(1, (char *)path, (struct stat *)&v19);\n            } else {\n                // 0x40f521\n                v26 = __fxstat(1, fd, (struct stat *)&v19);\n            }\n            // 0x40f532\n            if (v26 != 0) {\n                // 0x40f618\n                return -1;\n            }\n            goto lab_0x40f53a;\n        }\n    }\n  lab_0x40f560:;\n    // 0x40f560\n    int64_t v27; // 0x40f460\n    int64_t v28; // 0x40f460\n    if (v11 == 0) {\n        goto lab_0x40f630;\n    } else {\n        // 0x40f56e\n        int64_t v29; // bp-248, 0x40f460\n        int64_t v30 = &v29; // 0x40f575\n        v29 = *(int64_t *)v11;\n        v9 = v30;\n        v27 = v30;\n        v28 = v30;\n        if (fd < 0) {\n            goto lab_0x40f63a;\n        } else {\n            goto lab_0x40f5cc;\n        }\n    }\n  lab_0x40f53a:\n    // 0x40f53a\n    if (v11 == 0) {\n        goto lab_0x40f630;\n    } else {\n        // 0x40f546\n        if ((char)function_40f2d0(&v19, &v11) != 0) {\n            // 0x40f618\n            return 0;\n        }\n        goto lab_0x40f560;\n    }\n  lab_0x40f630:\n    // 0x40f630\n    v9 = 0;\n    v27 = 0;\n    v28 = 0;\n    if (fd >= 0) {\n        goto lab_0x40f5cc;\n    } else {\n        goto lab_0x40f63a;\n    }\n  lab_0x40f4ea:\n    // 0x40f4ea\n    *__errno_location() = 38;\n    goto lab_0x40f4f5;\n  lab_0x40f70d:\n    // 0x40f70d\n    if (v20 || *__errno_location() != 38) {\n        // 0x40f713\n        g71 = 1;\n        // 0x40f618\n        return result;\n    }\n    goto lab_0x40f4f5;\n  lab_0x40f5cc:\n    // 0x40f5cc\n    v1 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v1.e0 = v27;\n    v2[0] = v1;\n    int64_t v31; // bp-216, 0x40f460\n    if (futimesat(fd, NULL, v2) != 0) {\n        // 0x40f5e0\n        if (path == 0) {\n            // 0x40f618\n            int32_t v32; // 0x40f460\n            uint32_t result2 = v32;\n            return result2;\n        }\n        struct utimbuf * times3 = NULL; // 0x40f5f5\n        if (v11 != 0) {\n            // 0x40f5f7\n            v31 = *(int64_t *)v11;\n            times3 = (struct utimbuf *)&v31;\n        }\n        // 0x40f618\n        return utime((char *)path, times3);\n    }\n    // 0x40f728\n    if (v27 == 0) {\n        // 0x40f618\n        return 0;\n    }\n    int64_t v33 = *(int64_t *)(v27 + 8); // 0x40f731\n    int64_t v34 = v33 - 0x7a11f; // 0x40f731\n    int64_t v35 = *(int64_t *)(v27 + 24); // 0x40f73d\n    int64_t v36 = v35 - 0x7a11f; // 0x40f73d\n    if (v34 < 0 == (0x7a11e - v33 & v33) < 0 != v34 != 0 && v36 < 0 == (0x7a11e - v35 & v35) < 0 != v36 != 0 || __fxstat(1, fd, (struct stat *)&v19) != 0) {\n        // 0x40f618\n        return 0;\n    }\n    int64_t v37 = v27 + 16; // 0x40f778\n    int64_t v38 = *(int64_t *)v37; // 0x40f778\n    int128_t v39 = __asm_movdqa(*(int128_t *)v27); // 0x40f784\n    int64_t v40 = *(int64_t *)v27; // 0x40f78a\n    int128_t v41 = __asm_movdqa(*(int128_t *)v37); // 0x40f78e\n    v31 = __asm_movaps(v39);\n    __asm_movaps(v41);\n    int64_t v42; // 0x40f460\n    if (v42 == 0 != (v34 < 0 == (0x7a11e - v33 & v33) < 0 == (v34 != 0) == v42 == v40 + 1)) {\n        // 0x40f878\n        if (v42 == 0 != (v36 < 0 == (0x7a11e - v35 & v35) < 0 == (v36 != 0) == v42 - v38 == 1)) {\n            // 0x40f618\n            return 0;\n        }\n    }\n    // 0x40f7e7\n    v7 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v7.e0 = &v31;\n    v8[0] = v7;\n    futimesat(fd, NULL, v8);\n    // 0x40f618\n    return 0;\n  lab_0x40f63a:\n    // 0x40f63a\n    v3 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v3.e0 = v28;\n    v4[0] = v3;\n    // 0x40f618\n    return futimesat(-100, (char *)path, v4);\n}\n"
        },
        {
            "funcName": "function_40f8a0",
            "funcStartAddr": "40f8a0",
            "funcEndAddr": "40f8b0",
            "decompiledFuncCode": "int64_t function_40f8a0(int64_t a1, int64_t * a2) {\n    // 0x40f8a0\n    int64_t v1; // 0x40f8a0\n    return function_40f460(0xffffffff, a1, a2, v1);\n}\n"
        },
        {
            "funcName": "function_40f8b0",
            "funcStartAddr": "40f8b0",
            "funcEndAddr": "40faf8",
            "decompiledFuncCode": "int64_t function_40f8b0(int64_t path, int64_t * a2, int64_t a3) {\n    struct timespec v1; // 0x40f918\n    struct timespec times[2]; // 0x40f918\n    int64_t v2 = (int64_t)a2;\n    int64_t v3; // 0x40f8b0\n    int64_t v4; // 0x40f8b0\n    int64_t v5; // 0x40f8b0\n    int64_t v6; // 0x40f8b0\n    int64_t v7; // bp-168, 0x40f8b0\n    int64_t v8; // bp-208, 0x40f8b0\n    if (a2 == NULL) {\n        int32_t v9 = g70; // 0x40f9a0\n        v8 = 0;\n        v6 = 0;\n        v3 = 0;\n        if (v9 >= 0) {\n            goto lab_0x40f90b;\n        } else {\n            // 0x40f9bb\n            g70 = -1;\n            v5 = v9;\n            goto lab_0x40f9c5;\n        }\n    } else {\n        int128_t v10 = *(int128_t *)&v2; // 0x40f8c7\n        int128_t v11 = __asm_movdqu(v10); // 0x40f8c7\n        int64_t v12 = v10;\n        int128_t v13 = __asm_movdqu(*(int128_t *)(v12 + 16)); // 0x40f8cb\n        int64_t v14; // bp-200, 0x40f8b0\n        int64_t v15 = &v14; // 0x40f8d0\n        v8 = v15;\n        v14 = __asm_movaps(v11);\n        __asm_movaps(v13);\n        int64_t v16; // 0x40f8b0\n        int64_t v17 = function_40f3a0(v15, v12, a3, v16); // 0x40f8e4\n        int32_t v18 = v17; // 0x40f8eb\n        if (v18 < 0) {\n            // 0x40f992\n            return 0xffffffff;\n        }\n        int64_t v19 = v17 & 0xffffffff; // 0x40f8e9\n        v4 = v19;\n        if (g70 < 0) {\n            goto lab_0x40f932;\n        } else {\n            if (v18 == 2) {\n                // 0x40fa50\n                if (__lxstat(1, (char *)path, (struct stat *)&v7) != 0) {\n                    // 0x40f992\n                    return 0xffffffff;\n                }\n                // 0x40fa6a\n                if (*(int64_t *)(v8 + 8) == 0x3ffffffe) {\n                    // 0x40fab0\n                    v6 = v8;\n                    v3 = 3;\n                } else {\n                    // 0x40fa79\n                    v6 = v8;\n                    v3 = 3;\n                    if (*(int64_t *)(v8 + 24) == 0x3ffffffe) {\n                        // 0x40fa8c\n                        v6 = v8;\n                        v3 = 3;\n                    }\n                }\n            } else {\n                // 0x40f906\n                v6 = v8;\n                v3 = v19;\n            }\n            goto lab_0x40f90b;\n        }\n    }\n  lab_0x40f90b:\n    // 0x40f90b\n    v1 = (struct {int64_t e0; int32_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v1.e0 = v6;\n    times[0] = v1;\n    uint32_t result = utimensat(-100, (char *)path, times, AT_SYMLINK_NOFOLLOW); // 0x40f918\n    int64_t v20; // 0x40f8b0\n    if (result < 1) {\n        if (result == 0) {\n            // 0x40f9f6\n            g71 = 1;\n            g70 = 1;\n            return result;\n        }\n        int32_t v21 = *__errno_location(); // 0x40fad5\n        v20 = 256;\n        v4 = v3;\n        if (v21 != 38) {\n            // 0x40f9f6\n            g71 = 1;\n            g70 = 1;\n            return result;\n        }\n    } else {\n        // 0x40f927\n        *__errno_location() = 38;\n        v20 = 256;\n        v4 = v3;\n    }\n    goto lab_0x40f932;\n  lab_0x40f932:\n    // 0x40f932\n    g70 = -1;\n    int32_t v22 = v4; // 0x40f93c\n    v5 = v20;\n    int64_t v23; // 0x40f8b0\n    if (v22 == 0) {\n        goto lab_0x40f9c5;\n    } else {\n        if (v22 != 3) {\n            // 0x40fa20\n            if (__lxstat(1, (char *)path, (struct stat *)&v7) != 0) {\n                // 0x40f992\n                return 0xffffffff;\n            }\n            // 0x40fa36\n            v23 = v20;\n            if (v8 != 0) {\n                goto lab_0x40f955;\n            } else {\n                goto lab_0x40f96a;\n            }\n        } else {\n            // 0x40f94d\n            v23 = v20;\n            if (v8 == 0) {\n                goto lab_0x40f96a;\n            } else {\n                goto lab_0x40f955;\n            }\n        }\n    }\n  lab_0x40f9c5:;\n    int32_t v24 = __lxstat(1, (char *)path, (struct stat *)&v7); // 0x40f9d2\n    v23 = v5;\n    if (v24 != 0) {\n        // 0x40f992\n        return 0xffffffff;\n    }\n    goto lab_0x40f96a;\n  lab_0x40f96a:;\n    int64_t result2; // 0x40f8b0\n    int32_t v25; // 0x40f8b0\n    if ((v25 & 0xf000) == 0xa000) {\n        // 0x40fae8\n        *__errno_location() = 38;\n        result2 = 0xffffffff;\n    } else {\n        // 0x40f97e\n        result2 = function_40f460(0xffffffff, path, (int64_t *)v8, v23) & 0xffffffff;\n    }\n    // 0x40f992\n    return result2;\n  lab_0x40f955:;\n    int64_t v26 = function_40f2d0(&v7, &v8); // 0x40f961\n    v23 = v20;\n    if ((char)v26 != 0) {\n        // 0x40f992\n        return 0;\n    }\n    goto lab_0x40f96a;\n}\n"
        },
        {
            "funcName": "function_40fb00",
            "funcStartAddr": "40fb00",
            "funcEndAddr": "40fedd",
            "decompiledFuncCode": "int64_t function_40fb00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x40fb98\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40fb1c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x40fb36\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40fb7b\n    if (a6 < 10) {\n        // 0x40fb8a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x40fc82\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_40fee0",
            "funcStartAddr": "40fee0",
            "funcEndAddr": "40ff00",
            "decompiledFuncCode": "int64_t function_40fee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40fee0\n    if (a5 == 0) {\n        // 0x40fefb\n        return function_40fb00(a1, a2, a3, a4, a5, 0, (int64_t)&g83);\n    }\n    int64_t v1 = 0; // 0x40fee7\n    v1++;\n    int64_t v2 = v1; // 0x40fef9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x40fef0\n        v1++;\n        v2 = v1;\n    }\n    // 0x40fefb\n    return function_40fb00(a1, a2, a3, a4, a5, v2, (int64_t)&g83);\n}\n"
        },
        {
            "funcName": "function_40ff00",
            "funcStartAddr": "40ff00",
            "funcEndAddr": "40ff60",
            "decompiledFuncCode": "int64_t function_40ff00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x40ff00\n    int64_t v3 = &v2; // 0x40ff00\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x40ff33\n    int64_t v6; // 0x40ff1d\n    int64_t * v7; // 0x40ff3b\n    int64_t v8; // 0x40ff3b\n    int64_t v9; // 0x40ff47\n    if (v5 < 48) {\n        // 0x40ff10\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x40ff53\n            break;\n        }\n    } else {\n        // 0x40ff3b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x40ff53\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x40ff31\n    while (v4 != 9) {\n        // 0x40ff29\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x40ff10\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x40ff53\n                break;\n            }\n        } else {\n            // 0x40ff3b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x40ff53\n                break;\n            }\n        }\n        // 0x40ff29\n        v10 = 10;\n    }\n    // 0x40ff53\n    return function_40fb00(a1, a2, a3, a4, v3, v10, (int64_t)&g83);\n}\n"
        },
        {
            "funcName": "function_40ff60",
            "funcStartAddr": "40ff60",
            "funcEndAddr": "41001c",
            "decompiledFuncCode": "int64_t function_40ff60(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x40ff60\n    int64_t v1; // bp-168, 0x40ff60\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x40ff60\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x40ff60\n    int64_t v8; // 0x40ff60\n    int64_t v9; // bp-56, 0x40ff60\n    int64_t v10; // 0x40ffc5\n    int64_t v11; // 0x40ffe9\n    if ((int32_t)v6 < 48) {\n        // 0x40ffb0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x410000\n            break;\n        }\n    } else {\n        // 0x40ffe2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x410000\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40ffda\n    int64_t v13 = 10; // 0x40ffda\n    while (v5 != 9) {\n        // 0x40ffdc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x40ffb0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x410000\n                break;\n            }\n        } else {\n            // 0x40ffe2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x410000\n                break;\n            }\n        }\n        // 0x40ffd2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x410000\n    int64_t v14; // bp-136, 0x40ff60\n    int64_t result = function_40fb00(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g83); // 0x41000f\n    return result;\n}\n"
        },
        {
            "funcName": "function_410020",
            "funcStartAddr": "410020",
            "funcEndAddr": "410094",
            "decompiledFuncCode": "int64_t function_410020(int64_t a1) {\n    // 0x410020\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x410083\n    return fputs_unlocked(v1, g44);\n}\n"
        },
        {
            "funcName": "function_4100a0",
            "funcStartAddr": "4100a0",
            "funcEndAddr": "4100d8",
            "decompiledFuncCode": "int64_t function_4100a0(void) {\n    // 0x4100a0\n    if (g73 != 0) {\n        // 0x4100a9\n        return g72;\n    }\n    int32_t v1 = geteuid(); // 0x4100bc\n    g73 = 1;\n    g72 = v1 == 0;\n    return (int64_t)(v1 & -256) | (int64_t)(v1 == 0);\n}\n"
        },
        {
            "funcName": "function_4100e0",
            "funcStartAddr": "4100e0",
            "funcEndAddr": "4100fa",
            "decompiledFuncCode": "int64_t function_4100e0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4100e4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4100f3\n        return (int64_t)mem;\n    }\n    // 0x4100f5\n    function_410330(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410100",
            "funcStartAddr": "410100",
            "funcEndAddr": "410121",
            "decompiledFuncCode": "int64_t function_410100(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x410103\n    int64_t v2 = v1; // 0x410103\n    if (v2 < 0) {\n        // 0x41011b\n        function_410330(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x410119\n        return function_4100e0(v2);\n    }\n    // 0x41011b\n    function_410330(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410130",
            "funcStartAddr": "410130",
            "funcEndAddr": "410132",
            "decompiledFuncCode": "int64_t function_410130(void) {\n    // 0x410130\n    int64_t v1; // 0x410130\n    return function_4100e0(v1);\n}\n"
        },
        {
            "funcName": "function_410140",
            "funcStartAddr": "410140",
            "funcEndAddr": "410176",
            "decompiledFuncCode": "int64_t function_410140(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x410168\n        free(v1);\n        return (int32_t)&g83 ^ (int32_t)&g83;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x410151\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x410160\n        return (int64_t)mem;\n    }\n    // 0x410171\n    function_410330(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410180",
            "funcStartAddr": "410180",
            "funcEndAddr": "4101a1",
            "decompiledFuncCode": "int64_t function_410180(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x410183\n    int64_t v2 = v1; // 0x410183\n    if (v2 < 0) {\n        // 0x41019b\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x410199\n        return function_410140(a1, v2);\n    }\n    // 0x41019b\n    function_410330(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4101b0",
            "funcStartAddr": "4101b0",
            "funcEndAddr": "410236",
            "decompiledFuncCode": "int64_t function_4101b0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x41020b\n            function_410330(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_410140(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4101f3\n    if (a2 == 0) {\n        // 0x410218\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4101f8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x41020b\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    // 0x4101da\n    *(int64_t *)a2 = v2;\n    return function_410140(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_410240",
            "funcStartAddr": "410240",
            "funcEndAddr": "410290",
            "decompiledFuncCode": "int64_t function_410240(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x410240\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x41028a\n            function_410330(a1);\n            // UNREACHABLE\n        }\n        // 0x410262\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_410140(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x410275\n        *(int64_t *)a2 = 128;\n        return function_410140(0, 128);\n    }\n    // 0x410288\n    if (a2 < 0) {\n        // 0x41028a\n        function_410330(a1);\n        // UNREACHABLE\n    }\n    // 0x410262\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_410140(a1, v1);\n}\n"
        },
        {
            "funcName": "function_410290",
            "funcStartAddr": "410290",
            "funcEndAddr": "4102a7",
            "decompiledFuncCode": "int64_t function_410290(int64_t a1, int64_t a2) {\n    // 0x410290\n    return (int64_t)memset((int64_t *)function_4100e0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4102b0",
            "funcStartAddr": "4102b0",
            "funcEndAddr": "4102de",
            "decompiledFuncCode": "int64_t function_4102b0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4102b7\n    if ((int64_t)v1 < 0) {\n        // 0x4102d9\n        function_410330(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4102d9\n        function_410330(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4102ca\n    if (mem != NULL) {\n        // 0x4102d4\n        return (int64_t)mem;\n    }\n    // 0x4102d9\n    function_410330(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4102e0",
            "funcStartAddr": "4102e0",
            "funcEndAddr": "410308",
            "decompiledFuncCode": "int64_t function_4102e0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4100e0(a2); // 0x4102ef\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_410310",
            "funcStartAddr": "410310",
            "funcEndAddr": "410323",
            "decompiledFuncCode": "int64_t function_410310(int64_t str) {\n    // 0x410310\n    return function_4102e0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_410330",
            "funcStartAddr": "410330",
            "funcEndAddr": "410361",
            "decompiledFuncCode": "int64_t function_410330(int64_t a1) {\n    // 0x410330\n    error(g34, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_410370",
            "funcStartAddr": "410370",
            "funcEndAddr": "4103d9",
            "decompiledFuncCode": "int64_t function_410370(void) {\n    char * v1 = NULL; // bp-24, 0x41038b\n    int64_t v2 = 0; // bp-16, 0x410393\n    int32_t v3 = __getdelim(&v1, (int32_t *)&v2, 10, g45); // 0x41039c\n    if (v3 < 1) {\n        // 0x4103be\n        free((int64_t *)v1);\n        return 0;\n    }\n    int64_t v4 = (int64_t)v1; // 0x4103a6\n    char * v5 = (char *)((int64_t)v3 - 1 + v4); // 0x4103af\n    int64_t response = v4; // 0x4103b2\n    if (*v5 == 10) {\n        // 0x4103d0\n        *v5 = 0;\n        response = (int64_t)v1;\n    }\n    int32_t v6 = rpmatch((char *)response); // 0x4103b4\n    // 0x4103be\n    free((int64_t *)v1);\n    return v6 >= 0 == (v6 != 0);\n}\n"
        },
        {
            "funcName": "function_4103e0",
            "funcStartAddr": "4103e0",
            "funcEndAddr": "410515",
            "decompiledFuncCode": "int64_t function_4103e0(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x410410\n    if (cmd != 1030) {\n        // 0x4104c0\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x41041c\n    int64_t v2; // 0x4103e0\n    if (g74 < 0) {\n        int64_t v3 = function_4103e0(fd, 0, v1, a4); // 0x410464\n        int64_t v4 = v3 & 0xffffffff; // 0x410469\n        if ((int32_t)v3 < 0) {\n            // 0x410450\n            return v4 & 0xffffffff;\n        }\n        // 0x41046f\n        v2 = v4;\n        if (g74 != -1) {\n            // 0x410450\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x410437\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x410446\n            g74 = 1;\n            // 0x410450\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_4103e0(fd & 0xffffffff, 0, v1, a4); // 0x4104f7\n        int64_t v7 = v6 & 0xffffffff; // 0x4104fc\n        if ((int32_t)v6 < 0) {\n            // 0x410450\n            return v7 & 0xffffffff;\n        }\n        // 0x410506\n        g74 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x41047f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x41048a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x410450\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x4104a2\n    close(fd2);\n    // 0x410450\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_410520",
            "funcStartAddr": "410520",
            "funcEndAddr": "410560",
            "decompiledFuncCode": "int64_t function_410520(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x41053a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x41053a\n        return fflush(stream);\n    }\n    // 0x410548\n    function_410590(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_410560",
            "funcStartAddr": "410560",
            "funcEndAddr": "410588",
            "decompiledFuncCode": "int64_t function_410560(int64_t a1) {\n    // 0x410560\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x410587\n        return 0;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 16) - *(int64_t *)(a1 + 8); // 0x410570\n    int64_t result = v1; // 0x41057a\n    if ((a1 & 256) != 0) {\n        // 0x41057c\n        result = *(int64_t *)(a1 + 88) + v1 - *(int64_t *)(a1 + 72);\n    }\n    // 0x410587\n    return result;\n}\n"
        },
        {
            "funcName": "function_410590",
            "funcStartAddr": "410590",
            "funcEndAddr": "4105e7",
            "decompiledFuncCode": "int64_t function_410590(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x410590\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x41059a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4105cb\n    int64_t result = -1; // 0x4105d4\n    if (v1 != -1) {\n        // 0x4105d6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4105e2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4105f0",
            "funcStartAddr": "4105f0",
            "funcEndAddr": "4106cf",
            "decompiledFuncCode": "int64_t function_4105f0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4105fc\n    uint32_t v2 = *v1; // 0x4105fc\n    int64_t v3 = a2 & 0xffffffff; // 0x410601\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x410604\n    uint64_t v5 = (int64_t)*v4; // 0x410604\n    int64_t v6; // 0x410672\n    if (v3 <= v5) {\n      lab_0x41066c_2:\n        // 0x41066c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4105f2\n    int64_t v8 = v2; // 0x4105f0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x41066c\n        goto lab_0x41066c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x410628\n    int64_t v17; // 0x410636\n    int64_t * v18; // 0x410650\n    int64_t * v19; // 0x410653\n    int64_t v20; // 0x41065e\n    int64_t v21; // 0x410636\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x410633\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x410650\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x410667\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x41066c\n            goto lab_0x41066c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x41066c\n            goto lab_0x41066c_2;\n        }\n        // 0x410622\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4106ab\n    int64_t * v23 = (int64_t *)v22; // 0x4106b0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4106b3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4106b0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4106c7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x41061d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x41066c\n            goto lab_0x41066c_2;\n        }\n        // 0x410622\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x410633\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x410650\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x410667\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x41066c\n                goto lab_0x41066c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x41066c\n                goto lab_0x41066c_2;\n            }\n            // 0x410622\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x410690\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4106b0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4106c7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x41066c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4106d0",
            "funcStartAddr": "4106d0",
            "funcEndAddr": "410cec",
            "decompiledFuncCode": "int64_t function_4106d0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4106ef\n    int64_t v2 = *v1; // 0x4106ef\n    char * str2 = (char *)v2; // 0x4106fc\n    char c = *str2; // 0x4106fc\n    int64_t v3 = v2; // 0x410728\n    int64_t v4 = 0; // 0x4106d0\n    int32_t v5; // 0x4106d0\n    int64_t v6; // 0x4106d0\n    int64_t v7; // 0x4106d0\n    int64_t v8; // 0x4106d0\n    int64_t v9; // 0x4106d0\n    int64_t v10; // 0x4106d0\n    int64_t v11; // 0x4106d0\n    int64_t v12; // 0x4106d0\n    int64_t v13; // 0x4106d0\n    int64_t str3; // 0x4106d0\n    int64_t v14; // 0x4106d0\n    int64_t v15; // 0x4106d0\n    int64_t v16; // 0x4106d0\n    int64_t v17; // 0x4106d0\n    int32_t v18; // 0x4106d0\n    int32_t v19; // 0x4106d0\n    int32_t v20; // 0x4106d0\n    int32_t v21; // 0x4106d0\n    int32_t v22; // 0x4106d0\n    int32_t v23; // 0x4106d0\n    int32_t v24; // 0x4106d0\n    int32_t v25; // 0x4106d0\n    int32_t v26; // 0x4106d0\n    int32_t v27; // 0x4106d0\n    int32_t v28; // 0x4106d0\n    int32_t v29; // 0x4106d0\n    int64_t nmemb; // 0x4106d0\n    int64_t v30; // 0x4106d0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x41072c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x410728\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x410738\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x41073e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x410708\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x41076c\n                int64_t v34; // 0x4106d0\n                int64_t v35; // 0x4106d0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x410775\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4108f0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x410786\n                int64_t v37 = *(int64_t *)v36; // 0x41078a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x410760\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x410775\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4108f0;\n                        }\n                    }\n                    // 0x410786\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4107d6:\n                    // 0x4107d6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x410830;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4109a0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x410830;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x410950\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4107fa;\n                                } else {\n                                    // 0x41095c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4107fa;\n                                    } else {\n                                        // 0x41096a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4107fa;\n                                        } else {\n                                            goto lab_0x410830;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4107fa;\n                            }\n                        }\n                    }\n                }\n              lab_0x410841:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x410a16\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x410bc2\n                            flockfile(g47);\n                            int64_t v41 = *v1; // 0x410be2\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x410c2f\n                            int64_t v43 = (int64_t)g47;\n                            int64_t v44 = v43; // 0x410c49\n                            int64_t v45; // 0x410c4b\n                            if (*(char *)v42 != 0) {\n                                // 0x410c4b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g47;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x410c43\n                            while (v17 + nmemb != v42) {\n                                // 0x410c45\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x410c4b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g47;\n                                }\n                                // 0x410c38\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x410c70\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g47);\n                            v40 = *v1;\n                        } else {\n                            // 0x410a24\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x410b7f\n                        free((int64_t *)v17);\n                    }\n                    // 0x410a79\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x410a90\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x41093e\n                    return 63;\n                }\n                // 0x410860\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4108e4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4108f0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x410900\n                    uint32_t v50 = *v49; // 0x410900\n                    int64_t v51 = v50; // 0x410900\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x41090a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x410913\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x410b3f\n                                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x410aea\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x41093e\n                            return 63;\n                        }\n                        // 0x410988\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x410c9f\n                                    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x410b9d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x410bb0\n                                // 0x41093e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x410aae\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x410ac2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x41092b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x41092e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x410932\n                    int64_t result = v59; // 0x410938\n                    if (v58 != 0) {\n                        // 0x41093a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x41093e\n                    return result;\n                }\n            } else {\n                // 0x41073e\n                v5 = v32;\n            }\n            // break -> 0x410865\n            break;\n        }\n    }\n    // 0x410865\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x41087d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x410887\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x41093e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4109c9\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4108b6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4108c6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x410830:\n    // 0x410830\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x410830\n    int64_t v63 = *(int64_t *)v62; // 0x410834\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x410841\n        goto lab_0x410841;\n    }\n    goto lab_0x4107d6;\n  lab_0x4107fa:\n    // 0x4107fa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4106d0\n    int32_t v65; // 0x4106d0\n    int32_t v66; // 0x4106d0\n    if (v27 != 0) {\n        goto lab_0x410830;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4109b0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x410830;\n            } else {\n                goto lab_0x410821;\n            }\n        } else {\n            // 0x410815\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x410b0c\n                int64_t v67 = (int64_t)mem; // 0x410b0c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x410830;\n                } else {\n                    // 0x410b1f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x410821;\n                }\n            } else {\n                goto lab_0x410821;\n            }\n        }\n    }\n  lab_0x410821:\n    // 0x410821\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x410830;\n}\n"
        },
        {
            "funcName": "function_410cf0",
            "funcStartAddr": "410cf0",
            "funcEndAddr": "4112b6",
            "decompiledFuncCode": "int64_t function_410cf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x410d11\n    if (v3 < 1) {\n        // 0x410ece\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x410d0d\n    int32_t v5 = *(int32_t *)a7; // 0x410d19\n    uint64_t v6 = a1 & 0xffffffff; // 0x410d1b\n    int64_t v7 = v2; // 0x410d20\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x410d23\n    *v8 = 0;\n    int64_t v9; // 0x410cf0\n    int64_t v10; // 0x410cf0\n    int64_t v11; // 0x410cf0\n    int64_t v12; // 0x410cf0\n    int64_t str; // 0x410cf0\n    int64_t v13; // 0x410cf0\n    int64_t v14; // 0x410cf0\n    int64_t v15; // 0x410cf0\n    int64_t v16; // 0x410cf0\n    int64_t v17; // 0x410cf0\n    int32_t v18; // 0x410cf0\n    char v19; // 0x410cf0\n    if (v5 == 0) {\n        // 0x410f08\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x410d3a;\n    } else {\n        // 0x410d33\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x410d80\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x410d83\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x410e48;\n            } else {\n                int64_t v22 = v7 + 1; // 0x410d96\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x410da6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x410e5c;\n                } else {\n                    goto lab_0x410db8;\n                }\n            }\n        } else {\n            goto lab_0x410d3a;\n        }\n    }\n  lab_0x410d3a:\n    // 0x410d3a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x410d40\n    *v24 = 0;\n    int64_t v25; // 0x410cf0\n    int64_t v26; // 0x410cf0\n    int64_t v27; // 0x410cf0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x410e30\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x410e3d;\n        }\n        case 43: {\n            // 0x411140\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x410e3d;\n        }\n        default: {\n            // 0x410d5c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4110bf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4111d8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x410e3d;\n                } else {\n                    // 0x4110cd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x410d6a;\n                }\n            } else {\n                goto lab_0x410d6a;\n            }\n        }\n    }\n  lab_0x410e48:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x410e4f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x410db8;\n    } else {\n        goto lab_0x410e5c;\n    }\n  lab_0x410d6a:\n    // 0x410d6a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x410e3d;\n  lab_0x410e3d:\n    // 0x410e3d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x410e48;\n  lab_0x410db8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x410db8\n    int64_t v31 = v30; // 0x410db8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x410dba\n    if ((int64_t)*v32 > v31) {\n        // 0x410dbf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x410dc2\n    if (*v33 > v30) {\n        // 0x410dc7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x410dca\n    int64_t v35 = v31; // 0x410dce\n    int64_t v36 = v15; // 0x410dce\n    int64_t v37; // 0x410cf0\n    int64_t v38; // 0x410cf0\n    int64_t v39; // 0x410cf0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x410f38\n        int64_t v41 = v40; // 0x410f38\n        v2 = v41;\n        int64_t v42; // 0x410cf0\n        if (*v33 == v40) {\n            // 0x411120\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x411128\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x410f44\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x410f48\n                function_4105f0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x410f58\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x410f61\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x410f6a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x410f81\n            int64_t v47 = v45 & 0xffffffff; // 0x410f85\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x410f8e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x410f94\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x410f96;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x410f70\n            int64_t v49 = v48 & 0xffffffff; // 0x410f70\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x410f81\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x410f8e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x410f94\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x410f96;\n                    }\n                }\n                // 0x410f70\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x411138\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x410f96;\n    } else {\n        goto lab_0x410dd4;\n    }\n  lab_0x410e5c:\n    // 0x410e5c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x410e5f\n    int64_t v51 = v12; // 0x410e5f\n    int64_t v52 = v14; // 0x410e5f\n    if (*(char *)v10 == 0) {\n        goto lab_0x410db8;\n    } else {\n        goto lab_0x410e65;\n    }\n  lab_0x410dd4:;\n    int32_t v53 = v35; // 0x410dd4\n    int64_t v54; // 0x410cf0\n    int64_t v55; // 0x410cf0\n    int64_t v56; // 0x410cf0\n    int64_t v57; // 0x410cf0\n    int64_t v58; // 0x410cf0\n    int64_t v59; // 0x410cf0\n    char * v60; // 0x410cf0\n    int64_t v61; // 0x410cf0\n    int64_t v62; // 0x410de9\n    int64_t v63; // 0x410cf0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x410f23\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x410f26;\n    } else {\n        // 0x410ddc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x410cf0\n        int64_t v66 = v65 ? -1 : 1; // 0x410df0\n        int64_t v67 = (int64_t)\"--\"; // 0x410cf0\n        int64_t v68 = v62; // 0x410cf0\n        int64_t v69 = 3; // 0x410df0\n        unsigned char v70 = *(char *)v68; // 0x410df0\n        char v71 = *(char *)v67; // 0x410df0\n        char v72 = v71; // 0x410df0\n        bool v73 = false; // 0x410df0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x410ee0\n            if (*(char *)v62 == 45) {\n                // 0x410fa0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x410fa0\n                if (c == 0) {\n                    goto lab_0x410eea;\n                } else {\n                    // 0x410fad\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x411030;\n                    } else {\n                        if (c == 45) {\n                            // 0x411213\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x411085;\n                        } else {\n                            // 0x410fbe\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x411030;\n                            } else {\n                                // 0x410fc3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x410fe4;\n                                } else {\n                                    // 0x410fca\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x411030;\n                                    } else {\n                                        goto lab_0x410fe4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x410eea;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x410e00\n            v2 = v75;\n            int32_t v76 = *v32; // 0x410e03\n            int64_t v77 = v35 + 1; // 0x410e06\n            int32_t v78 = v77; // 0x410e09\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x411170\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x410e17\n                    function_4105f0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x410e25\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x410f26;\n        }\n    }\n  lab_0x410e65:;\n    // 0x410e65\n    int64_t v79; // bp-104, 0x410cf0\n    int64_t v80 = &v79; // 0x410cfa\n    int64_t v81 = v50 + 1; // 0x410e65\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x410e6c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x410e71\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x410e75\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x410e79\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x410e81\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x410e86\n    int32_t c2 = v84; // 0x410e86\n    char * found_char_pos = strchr(str2, c2); // 0x410e86\n    int64_t v87 = *v82; // 0x410e8b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x410e95\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x410ea0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x411190\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x41115d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x410ece\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x410e86\n    char v91 = *(char *)(v90 + 1); // 0x410ebb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x410e75\n        if (v91 != 58) {\n            // 0x410ece\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4110e4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4111e8\n                *v8 = 0;\n            } else {\n                // 0x4111cc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x41110e\n            *v83 = 0;\n            // 0x410ece\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4110ee\n        if (v93 != 0) {\n            // 0x411180\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x41110e\n            *v83 = 0;\n            // 0x410ece\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x411101\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x41110e\n            *v83 = 0;\n            // 0x410ece\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x41124a\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4111fa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x411201\n        // 0x41110e\n        *v83 = 0;\n        // 0x410ece\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x411059\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x41105b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x411280\n                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x411231\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x411238\n            // 0x410ece\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x411066\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x41106a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x411085;\n  lab_0x410f96:\n    // 0x410f96\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x410dd4;\n  lab_0x411085:;\n    int64_t v99 = function_4106d0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4110a3\n    // 0x410ece\n    return v99 & 0xffffffff;\n  lab_0x410f26:;\n    int32_t v100 = v55; // 0x410f26\n    if (v100 != (int32_t)v59) {\n        // 0x410f2a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x410ece\n    return 0xffffffff;\n  lab_0x410eea:\n    // 0x410eea\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x410ef1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x410ece\n    return v99 & 0xffffffff;\n  lab_0x411030:\n    // 0x411030\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x410e65;\n  lab_0x410fe4:\n    // 0x410fe4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4106d0(v6, a2, str, a4, a5, v57, v1, v11, &g22); // 0x41100a\n    if ((int32_t)v101 != -1) {\n        // 0x410ece\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x41101f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x411030;\n}\n"
        },
        {
            "funcName": "function_4112c0",
            "funcStartAddr": "4112c0",
            "funcEndAddr": "411316",
            "decompiledFuncCode": "int64_t function_4112c0(int64_t a1) {\n    // 0x4112c0\n    *(int32_t *)&g75 = g42;\n    *(int32_t *)&g76 = g41;\n    int64_t v1; // 0x4112c0\n    int64_t result = function_410cf0(v1, v1, v1, v1, v1, v1, &g75, a1 & 0xffffffff); // 0x4112e6\n    g42 = *(int32_t *)&g75;\n    g80 = (char *)g78;\n    *(int32_t *)&g40 = g77;\n    return result;\n}\n"
        },
        {
            "funcName": "function_411320",
            "funcStartAddr": "411320",
            "funcEndAddr": "411338",
            "decompiledFuncCode": "int64_t function_411320(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x411320\n    return function_4112c0(1);\n}\n"
        },
        {
            "funcName": "function_411340",
            "funcStartAddr": "411340",
            "funcEndAddr": "411353",
            "decompiledFuncCode": "int64_t function_411340(int64_t a1, int64_t a2, char * a3, char (**a4)[8], int32_t a5, int64_t a6) {\n    // 0x411340\n    return function_4112c0(0);\n}\n"
        },
        {
            "funcName": "function_411360",
            "funcStartAddr": "411360",
            "funcEndAddr": "411375",
            "decompiledFuncCode": "int64_t function_411360(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x411360\n    return function_410cf0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_411380",
            "funcStartAddr": "411380",
            "funcEndAddr": "411396",
            "decompiledFuncCode": "int64_t function_411380(void) {\n    // 0x411380\n    return function_4112c0(0);\n}\n"
        },
        {
            "funcName": "function_4113a0",
            "funcStartAddr": "4113a0",
            "funcEndAddr": "4113b8",
            "decompiledFuncCode": "int64_t function_4113a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4113a0\n    return function_410cf0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4113c0",
            "funcStartAddr": "4113c0",
            "funcEndAddr": "41143a",
            "decompiledFuncCode": "int64_t function_4113c0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4113cb\n    int64_t v2 = (int64_t)&g23; // 0x4113cb\n    int32_t * pwc; // 0x4113c0\n    int64_t v3; // 0x4113c0\n    int64_t n; // 0x4113c0\n    if (a2 == 0) {\n        goto lab_0x411412;\n    } else {\n        // 0x4113cd\n        if (a3 == 0) {\n            // 0x4113f8\n            return -2;\n        }\n        // 0x4113d9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x411412;\n        } else {\n            goto lab_0x4113e4;\n        }\n    }\n  lab_0x411412:\n    // 0x411412\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4113c0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4113e4;\n  lab_0x4113e4:;\n    char * wstr = (char *)v3; // 0x4113ea\n    int64_t ps; // 0x4113c0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4113ea\n    int64_t result = v5; // 0x4113ea\n    if (v5 < 0xfffffffe) {\n        // 0x4113f8\n        return result;\n    }\n    int64_t result2 = result; // 0x411429\n    if ((char)function_411540(0, v3) == 0) {\n        // 0x41142b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4113f8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_411440",
            "funcStartAddr": "411440",
            "funcEndAddr": "411445",
            "decompiledFuncCode": "int64_t function_411440(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    // 0x411440\n    *(int32_t *)a4 = (int32_t)a3;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_411450",
            "funcStartAddr": "411450",
            "funcEndAddr": "411465",
            "decompiledFuncCode": "int64_t function_411450(int64_t path, int64_t a2, int32_t mode) {\n    int32_t fd = a2; // 0x411454\n    if (fd == -1) {\n        // 0x411460\n        return chmod((char *)path, mode);\n    }\n    // 0x411459\n    return fchmod(fd, mode);\n}\n"
        },
        {
            "funcName": "function_411470",
            "funcStartAddr": "411470",
            "funcEndAddr": "411492",
            "decompiledFuncCode": "int64_t function_411470(int64_t * a1, int64_t a2, int64_t a3) {\n    // 0x411470\n    int64_t v1; // 0x411470\n    int64_t result = (int32_t)function_411450(a2, a3 & 0xffffffff, (int32_t)v1) != 0 ? 0xffffffff : 0; // 0x41148f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4114a0",
            "funcStartAddr": "4114a0",
            "funcEndAddr": "4114fd",
            "decompiledFuncCode": "int64_t function_4114a0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4114a7\n    int64_t v2; // 0x4114a0\n    int64_t result = function_412760(a1, v2); // 0x4114b8\n    if ((v2 & 32) != 0) {\n        // 0x4114e0\n        if ((int32_t)result == 0) {\n            // 0x4114e4\n            *__errno_location() = 0;\n        }\n        // 0x4114da\n        return 0xffffffff;\n    }\n    // 0x4114c1\n    if ((int32_t)result == 0) {\n        // 0x4114da\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4114c8\n    if (v1 == 0) {\n        // 0x4114ca\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4114da\n    return result2;\n}\n"
        },
        {
            "funcName": "function_411500",
            "funcStartAddr": "411500",
            "funcEndAddr": "41153a",
            "decompiledFuncCode": "int64_t function_411500(int64_t tp) {\n    int64_t result = 0; // 0x411514\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x411516\n        int64_t tp2; // bp-24, 0x411500\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *(int64_t *)tp = tp2;\n        int128_t v1; // 0x411500\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)(tp + 8) = result;\n    }\n    // 0x411534\n    return result;\n}\n"
        },
        {
            "funcName": "function_411540",
            "funcStartAddr": "411540",
            "funcEndAddr": "41159e",
            "decompiledFuncCode": "int64_t function_411540(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x411546\n    if (locale == NULL) {\n        // 0x411573\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x411546\n    bool v2; // 0x411540\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g24; // 0x411540\n    int64_t v5 = v1; // 0x411540\n    int64_t v6 = 2; // 0x411565\n    unsigned char v7 = *(char *)v5; // 0x411565\n    char v8 = *(char *)v4; // 0x411565\n    char v9 = v8; // 0x411565\n    bool v10 = false; // 0x411565\n    while (v7 == v8) {\n        // 0x411558\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x411571\n    int64_t v13 = v1; // 0x411571\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x411573\n        return 0;\n    }\n    int64_t v14 = 6; // 0x411571\n    unsigned char v15 = *(char *)v13; // 0x41158d\n    char v16 = *(char *)v12; // 0x41158d\n    char v17 = v16; // 0x41158d\n    bool v18 = false; // 0x41158d\n    while (v15 == v16) {\n        // 0x411580\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4115a0",
            "funcStartAddr": "4115a0",
            "funcEndAddr": "4115d6",
            "decompiledFuncCode": "int64_t function_4115a0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x4115a6\n    if (v1 == 0) {\n        // 0x4115d0\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x4115b8\n    char v5 = *(char *)v2; // 0x4115bb\n    while (v5 != 0) {\n        // 0x4115b0\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x4115c3\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_4115e0",
            "funcStartAddr": "4115e0",
            "funcEndAddr": "411b42",
            "decompiledFuncCode": "int64_t function_4115e0(void) {\n    char * v1 = nl_langinfo(14); // 0x4115f6\n    char * v2 = g79; // 0x4115fb\n    char * v3; // 0x4115e0\n    int64_t v4; // 0x4115e0\n    int64_t v5; // 0x4115e0\n    int64_t v6; // 0x4115e0\n    int64_t v7; // 0x4115e0\n    int32_t size; // 0x4115e0\n    int32_t size2; // 0x4115e0\n    int32_t len; // 0x4116b2\n    int64_t v8; // 0x4116b2\n    char * env_val; // 0x41169d\n    if (v2 == NULL) {\n        // 0x411698\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x411705;\n        } else {\n            // 0x4116aa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x411705;\n            } else {\n                // 0x4116af\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x41169d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x411b35\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x411705;\n                    } else {\n                        // 0x411aa9\n                        size2 = len + 14;\n                        goto lab_0x4116cb;\n                    }\n                } else {\n                    goto lab_0x4116cb;\n                }\n            }\n        }\n    } else {\n        // 0x4115e0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x41161a;\n    }\n  lab_0x41194c:;\n    // 0x41194c\n    struct _IO_FILE * stream; // 0x41178b\n    int32_t v10 = __uflow(stream); // 0x41194f\n    int64_t v11; // 0x4115e0\n    int64_t v12 = v11; // 0x411959\n    int64_t v13; // 0x4115e0\n    int64_t v14 = v13; // 0x411959\n    int32_t v15 = v10; // 0x411959\n    int64_t v16; // 0x4115e0\n    int64_t v17 = v16; // 0x411959\n    int64_t v18 = v11; // 0x411959\n    int64_t v19 = v13; // 0x411959\n    int64_t v20 = v16; // 0x411959\n    if (v10 == -1) {\n        // break -> 0x41195f\n        goto lab_0x41195f;\n    }\n    goto lab_0x4117d9;\n  lab_0x4117ce:;\n    // 0x4117ce\n    int64_t v90; // 0x4115e0\n    int64_t * v32; // 0x4117c0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4115e0\n    v12 = v89;\n    int64_t v91; // 0x4115e0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4115e0\n    v17 = v92;\n    goto lab_0x4117d9;\n  lab_0x4117d9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4115e0\n    int32_t v25; // bp-120, 0x4115e0\n    int32_t v26; // bp-184, 0x4115e0\n    int64_t v27; // 0x41178b\n    int64_t v28; // 0x4117a8\n    int64_t v29; // 0x4117ad\n    int64_t * v30; // 0x4117c4\n    switch (c) {\n        case 32: {\n            goto lab_0x4117c0;\n        }\n        case 10: {\n            goto lab_0x4117c0;\n        }\n        case 9: {\n            goto lab_0x4117c0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4119b1\n            int32_t v33; // 0x4115e0\n            char v34; // 0x4115e0\n            int32_t v35; // 0x4119be\n            if (v31 < *v30) {\n                // 0x411990\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4119bb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4119b1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x411990\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4119bb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4119a0\n                v36 = v33;\n            }\n            // 0x411a8f\n            if (v36 == -1) {\n                // break -> 0x41195f\n                break;\n            }\n            goto lab_0x4117c0;\n        }\n        default: {\n            // 0x4117ef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x41195f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x411818\n            int64_t v39 = v37 + 4; // 0x41181a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x411826\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x411828\n            while (v41 == 0) {\n                // 0x411818\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x411846\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x411852\n            int64_t v45 = v43 + 4; // 0x411854\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x411860\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x411862\n            while (v47 == 0) {\n                // 0x411852\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x41184f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x411878\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x411888\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x41188c\n            int64_t v52 = v51 + v48; // 0x411895\n            int64_t * mem; // 0x4115e0\n            int64_t v53; // 0x4115e0\n            int64_t v54; // 0x4115e0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4119cb\n                int64_t v56 = v55 + 3; // 0x4119d7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4118b1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4118c0\n            if (mem == NULL) {\n                // 0x411aec\n                free((int64_t *)v21);\n                function_412760(v27, v53);\n                v24 = (int64_t)&g23;\n                goto lab_0x411764;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4118d8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4118e2\n            uint32_t v62 = (int32_t)v59; // 0x4118e5\n            int64_t v63; // 0x4115e0\n            if (v62 >= 8) {\n                // 0x4119f4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x411a0e\n                int64_t v66 = v61 - v65; // 0x411a12\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x411a1d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x411a2e\n                    int64_t v70 = v69 & 0xffffffff; // 0x411a2e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x411a2b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x411abf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4118f7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4118fb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x41190b\n            int64_t v74 = v60 - 1; // 0x41190f\n            uint32_t v75 = (int32_t)v73; // 0x411914\n            int64_t v76; // 0x4115e0\n            if (v75 >= 8) {\n                // 0x411a42\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x411a4c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x411a5c\n                int64_t v80 = v74 - v79; // 0x411a60\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x411a6b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x411a7b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x411a79\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x411ad6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x411ade\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x411926\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x41192a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x411b23\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x41193e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4117ce;\n            } else {\n                goto lab_0x41194c;\n            }\n        }\n    }\n  lab_0x4117c0:;\n    int64_t v93 = v23; // 0x4115e0\n    int64_t v94 = v22; // 0x4115e0\n    int64_t v95 = v21; // 0x4115e0\n    goto lab_0x4117c0_2;\n  lab_0x411705:;\n    int64_t * mem3 = malloc(size); // 0x411705\n    int64_t v97 = (int64_t)&g23; // 0x411710\n    int64_t v98; // 0x4115e0\n    int64_t path; // 0x4115e0\n    if (mem3 == NULL) {\n        goto lab_0x4116e2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x411705\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x411726;\n    }\n  lab_0x41161a:;\n    int64_t str = v1 == NULL ? (int64_t)&g23 : (int64_t)v1; // 0x41160d\n    char v100 = *v3; // 0x41161a\n    int64_t v101; // 0x4115e0\n    if (v100 == 0) {\n        // 0x411674\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4115e0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4115e0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x411660\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x411667;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x411630\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x41163d\n        char v107 = *(char *)v106; // 0x411642\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x411674\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x41164b\n    v104 = v103 + 1;\n  lab_0x411667:\n    // 0x411674\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4116e2:;\n    char * v108 = (char *)v97;\n    g79 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x41161a;\n  lab_0x411726:;\n    int64_t v109 = v98 + path; // 0x411726\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x411752\n    v24 = (int64_t)&g23;\n    if (fd >= 0) {\n        // 0x411781\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x411ab2\n            close(fd);\n            v24 = (int64_t)&g23;\n        } else {\n            // 0x4117a5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4117c0_2:;\n                uint64_t v96 = *v32; // 0x4117c0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x41194c;\n                } else {\n                    goto lab_0x4117ce;\n                }\n            }\n          lab_0x41195f:\n            // 0x41195f\n            function_412760(v27, v19);\n            v24 = (int64_t)&g23;\n            if (v18 != 0) {\n                // 0x41197e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x411764;\n  lab_0x4116cb:;\n    int64_t * mem4 = malloc(size2); // 0x4116cb\n    v97 = (int64_t)&g23;\n    if (mem4 != NULL) {\n        // 0x411771\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x411726;\n    } else {\n        goto lab_0x4116e2;\n    }\n  lab_0x411764:\n    // 0x411764\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4116e2;\n}\n"
        },
        {
            "funcName": "function_411b50",
            "funcStartAddr": "411b50",
            "funcEndAddr": "411b73",
            "decompiledFuncCode": "int64_t function_411b50(int64_t a1) {\n    int64_t result = function_4100e0(24); // 0x411b59\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_411b80",
            "funcStartAddr": "411b80",
            "funcEndAddr": "411baf",
            "decompiledFuncCode": "int64_t function_411b80(void) {\n    // 0x411b80\n    int64_t v1; // 0x411b80\n    int64_t v2 = function_411da0(v1, v1, v1); // 0x411b81\n    int64_t result = 0; // 0x411b8e\n    if (v2 != 0) {\n        // 0x411b90\n        result = function_4100e0(24);\n        *(int64_t *)result = v2;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 8) = 0;\n    }\n    // 0x411bad\n    return result;\n}\n"
        },
        {
            "funcName": "function_411bb0",
            "funcStartAddr": "411bb0",
            "funcEndAddr": "411bb4",
            "decompiledFuncCode": "int64_t function_411bb0(int64_t result) {\n    // 0x411bb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_411bc0",
            "funcStartAddr": "411bc0",
            "funcEndAddr": "411cb5",
            "decompiledFuncCode": "int64_t function_411bc0(int64_t a1, uint64_t a2) {\n    uint64_t v1 = a2 + 1; // 0x411bc7\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x411bdb\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x411bdf\n    int64_t v4 = *v3; // 0x411be3\n    int64_t result = *v2; // 0x411be3\n    int64_t v5; // 0x411bc0\n    while (true) {\n        int64_t v6 = result;\n        int64_t v7 = v4;\n        int64_t v8 = v7; // 0x411c20\n        int64_t v9; // 0x411bc0\n        int64_t v10; // 0x411bc0\n        if (v7 >= a2) {\n            // 0x411be8\n            v10 = v7;\n            v9 = v6;\n            v5 = v6;\n            if (v7 == a2) {\n                // break -> 0x411c7f\n                break;\n            }\n        } else {\n            int64_t v11 = 1; // 0x411c34\n            int64_t v12 = 256 * v8 | 255; // 0x411c38\n            v8 = v12;\n            int64_t v13 = v11; // 0x411c41\n            while (v12 < a2) {\n                // 0x411c30\n                v11 = v13 + 1;\n                v12 = 256 * v8 | 255;\n                v8 = v12;\n                v13 = v11;\n            }\n            // 0x411c43\n            int64_t v14; // bp-64, 0x411bc0\n            function_4120b0(a1, &v14, v11);\n            int64_t v15 = &v14; // 0x411c55\n            int64_t v16 = 256 * v7 | 255; // 0x411c67\n            int64_t v17 = 256 * v6 | (int64_t)*(char *)v15; // 0x411c6e\n            v15++;\n            int64_t v18 = v16; // 0x411c74\n            int64_t v19 = v17; // 0x411c74\n            while (v16 < a2) {\n                // 0x411c58\n                v16 = 256 * v18 | 255;\n                v17 = 256 * v19 | (int64_t)*(char *)v15;\n                v15++;\n                v18 = v16;\n                v19 = v17;\n            }\n            // 0x411c76\n            v10 = v16;\n            v9 = v17;\n            v5 = v17;\n            if (v16 == a2) {\n                // break -> 0x411c7f\n                break;\n            }\n        }\n        uint64_t v20 = v9;\n        uint64_t v21 = v10 - a2; // 0x411bf6\n        uint64_t v22 = v21 % v1;\n        result = v20 % v1;\n        v4 = v22 - 1;\n        if (v20 <= v10 - v22) {\n            // 0x411ca8\n            *v2 = v20 / v1;\n            *v3 = v21 / v1;\n            return result;\n        }\n    }\n    // 0x411c7f\n    *v3 = 0;\n    *v2 = 0;\n    result = v5;\n  lab_0x411c8f:\n    // 0x411c8f\n    return result;\n}\n"
        },
        {
            "funcName": "function_411cc0",
            "funcStartAddr": "411cc0",
            "funcEndAddr": "411cde",
            "decompiledFuncCode": "int64_t function_411cc0(int64_t a1) {\n    // 0x411cc0\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_411ce0",
            "funcStartAddr": "411ce0",
            "funcEndAddr": "411d31",
            "decompiledFuncCode": "int64_t function_411ce0(int64_t a1) {\n    int64_t v1 = function_412210(a1); // 0x411cf0\n    int32_t * v2 = __errno_location(); // 0x411cf8\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_411d40",
            "funcStartAddr": "411d40",
            "funcEndAddr": "411d9d",
            "decompiledFuncCode": "int64_t function_411d40(int64_t a1) {\n    // 0x411d40\n    function_40e020(a1);\n    int32_t * err_num = __errno_location(); // 0x411d57\n    char * format; // 0x411d40\n    if (*err_num == 0) {\n        // 0x411d8f\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x411d69\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x411d75\n    error(g34, *err_num, format);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_411da0",
            "funcStartAddr": "411da0",
            "funcEndAddr": "41208f",
            "decompiledFuncCode": "int64_t function_411da0(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_4100e0(0x1038); // 0x411ebd\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x411d40;\n        *(int64_t *)(result + 16) = 0;\n        // 0x411e12\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_4127e0(a1, \"rb\"); // 0x411dc7\n        int64_t result2 = 0; // 0x411dd2\n        if (stream != 0) {\n            // 0x411dd8\n            result2 = function_4100e0(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x411df4\n            *(int64_t *)(result2 + 8) = 0x411d40;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x411e12\n        return result2;\n    }\n    int64_t result3 = function_4100e0(0x1038); // 0x411e2d\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x411e43\n    *(int64_t *)(result3 + 8) = 0x411d40;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x411e61\n    int64_t v2; // 0x411da0\n    int128_t pid2; // bp-72, 0x411da0\n    if (fd < 0) {\n        // 0x411ee8\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x411f07\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x411e8b\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x411ea8\n            function_412510(v1);\n            // 0x411e12\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x412016\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x412022\n        uint64_t v7 = v6 + v4; // 0x412028\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x411ea8\n            function_412510(v1);\n            // 0x411e12\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x412051\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x41205d\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x412075\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x411ea8\n            function_412510(v1);\n            // 0x411e12\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x411f1d\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x411f24\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x411f40\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x411f3e\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x411f4f\n    if (v16 >= 2048) {\n        // 0x411ea8\n        function_412510(v1);\n        // 0x411e12\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x411f6a\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x411f71\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x411f8f\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x411f8d\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x411f9e\n    if (v21 >= 2048) {\n        // 0x411ea8\n        function_412510(v1);\n        // 0x411e12\n        return result3;\n    }\n    // 0x411fae\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x411fc6\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x411fcd\n    if (v23 == 0) {\n        // 0x411ea8\n        function_412510(v1);\n        // 0x411e12\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x411fdf\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x411fdd\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x411ea8\n    function_412510(v1);\n    // 0x411e12\n    return result3;\n}\n"
        },
        {
            "funcName": "function_412090",
            "funcStartAddr": "412090",
            "funcEndAddr": "412095",
            "decompiledFuncCode": "int64_t function_412090(int64_t a1, int64_t a2) {\n    // 0x412090\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x412090\n    return result;\n}\n"
        },
        {
            "funcName": "function_4120a0",
            "funcStartAddr": "4120a0",
            "funcEndAddr": "4120a5",
            "decompiledFuncCode": "int64_t function_4120a0(int64_t a1, int64_t a2) {\n    // 0x4120a0\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x4120a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4120b0",
            "funcStartAddr": "4120b0",
            "funcEndAddr": "41220c",
            "decompiledFuncCode": "int64_t function_4120b0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        int32_t * v2 = __errno_location(); // 0x4120cf\n        int64_t result = fread_unlocked(a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x41210a\n        int64_t v3 = a3 - result; // 0x412115\n        if (v3 == 0) {\n            // 0x41211a\n            return result;\n        }\n        int64_t v4 = v3; // 0x412115\n        int64_t v5 = result + v1; // 0x412112\n        int64_t v6 = *(int64_t *)(a1 + 16); // 0x4120e4\n        *v2 = (v1 & 32) == 0 ? 0 : *v2;\n        int64_t result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6); // 0x41210a\n        v4 -= result2;\n        while (v4 != 0) {\n            int64_t v7 = v5;\n            v5 = result2 + v7;\n            v6 = *(int64_t *)(a1 + 16);\n            *v2 = (v7 & 32) == 0 ? 0 : *v2;\n            result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6);\n            v4 -= result2;\n        }\n        // 0x41211a\n        return result2;\n    }\n    int64_t v8 = *(int64_t *)24; // 0x412130\n    int64_t v9 = a3; // 0x412142\n    int64_t * v10; // 0x4120b0\n    int64_t v11; // 0x4120b0\n    int64_t v12; // 0x4120b0\n    int64_t v13; // 0x4120b0\n    if (v8 < a3) {\n        int64_t v14 = v8;\n        int64_t v15 = v14 + v1; // 0x412153\n        v9 -= v14;\n        memcpy((int64_t *)v1, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        while (v15 % 8 != 0) {\n            // 0x41216a\n            function_412260(32, 2104);\n            v13 = v9;\n            v12 = v15;\n            v10 = (int64_t *)2104;\n            v11 = 2048;\n            if (v9 < 2049) {\n                goto lab_0x4121c5;\n            }\n            v14 = 2048;\n            int64_t v16 = v15;\n            v15 = v14 + v16;\n            v9 -= v14;\n            memcpy((int64_t *)v16, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        }\n        int64_t v17 = v15;\n        int64_t v18 = v9;\n        while (v18 >= 2048) {\n            int64_t result3 = function_412260(32, v17); // 0x41219d\n            int64_t v19 = v18 - 2048; // 0x4121a2\n            if (v19 == 0) {\n                // 0x4121e8\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v17 += 2048;\n            v18 = v19;\n        }\n        // 0x4121b4\n        function_412260(32, 2104);\n        v13 = v18;\n        v12 = v17;\n        v10 = (int64_t *)2104;\n        v11 = 2048;\n    } else {\n        // 0x412200\n        v13 = a3;\n        v12 = v1;\n        v10 = (int64_t *)(0x1038 - v8);\n        v11 = v8;\n    }\n  lab_0x4121c5:;\n    int64_t * dest_mem = memcpy((int64_t *)v12, v10, (int32_t)v13); // 0x4121ce\n    *(int64_t *)24 = v11 - v13;\n    // 0x41211a\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_412210",
            "funcStartAddr": "412210",
            "funcEndAddr": "412259",
            "decompiledFuncCode": "int64_t function_412210(int64_t a1) {\n    // 0x412210\n    __explicit_bzero_chk(a1, 0x1038, -1);\n    free((int64_t *)a1);\n    if (a1 == 0) {\n        // 0x412250\n        return 0;\n    }\n    // 0x41223a\n    return function_412760(a1, 0x1038);\n}\n"
        },
        {
            "funcName": "function_412260",
            "funcStartAddr": "412260",
            "funcEndAddr": "412505",
            "decompiledFuncCode": "int64_t function_412260(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x412260\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x412267\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x412276\n    int64_t v4 = *v1 + 1; // 0x412280\n    *v1 = v4;\n    int64_t v5 = a2; // 0x412291\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x4122a2\n    int64_t v9 = *v8; // 0x4122a2\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x4122a8\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x4122c3\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x4122e2\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x4122e8\n    int64_t v14 = *v13; // 0x4122e8\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x4122ec\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x412310\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x412325\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x41232c\n    int64_t v19 = *v18; // 0x41232c\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x412330\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x41234b\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x41235d\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x412368\n    int64_t v24 = *v23; // 0x412368\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x412379\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x412390\n    int64_t v27 = v7 + 32; // 0x412393\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x4123ad\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x412298\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x4123cb\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x4123da\n    int64_t v33 = *v32; // 0x4123da\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x4123e0\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x412405\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x412416\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x41241d\n    int64_t v38 = *v37; // 0x41241d\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x412424\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x412448\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x41245d\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x412464\n    int64_t v43 = *v42; // 0x412464\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x412468\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x412483\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x412495\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x4124a0\n    int64_t v48 = *v47; // 0x4124a0\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x4124b1\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x4124c8\n    int64_t result = v31 + 32; // 0x4124cb\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x4124e5\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x4123d0\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x4124f5\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_412510",
            "funcStartAddr": "412510",
            "funcEndAddr": "412744",
            "decompiledFuncCode": "int64_t function_412510(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x412557\n    int64_t v2 = a1; // 0x412573\n    int64_t * v3 = (int64_t *)v2; // 0x412578\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x41257b\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x41257b\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x41257f\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x41257f\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x412583\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x41258a\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x41258e\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x41259b\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x41259e\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x4125a5\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x4125b2\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x4125b5\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x4125bc\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x4125c9\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x4125cc\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x4125d3\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x4125e0\n    int64_t v21 = v5 - v20; // 0x4125e6\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x4125f0\n    uint64_t v23 = v11 - v22; // 0x4125f9\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x412604\n    int64_t v25 = v14 - v24; // 0x41260e\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x41261d\n    int64_t v27 = v23 + v25; // 0x412623\n    int64_t v28 = v17 - v26; // 0x412626\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x412631\n    int64_t v30 = v28 + v25; // 0x412634\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x41264a\n    while (v1 != v2) {\n        // 0x412578\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x412650\n    uint64_t v33 = *v32 + v28; // 0x412650\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x412654\n    int64_t v35 = *v34 + v29; // 0x412654\n    int64_t * v36 = (int64_t *)v31; // 0x412658\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x41265e\n    int64_t v38 = *v36 + v20 - v35; // 0x412662\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x412669\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x41266d\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x412671\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x412677\n    uint64_t v43 = *v39 + v22 - v41; // 0x41267e\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x412685\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x412689\n    int64_t v46 = *v42 + v24 - v45; // 0x412692\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x412699\n    uint64_t v48 = *v44 + v26 - v47; // 0x4126a2\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x4126a9\n    int64_t v50 = v35 - v49; // 0x4126b2\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x4126bc\n    uint64_t v52 = v41 - v51; // 0x4126c5\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x4126d0\n    int64_t result = v52 + v50; // 0x4126d3\n    int64_t v54 = v45 - v53; // 0x4126da\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x4126e5\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x4126e9\n    int64_t v57 = v54 + v52; // 0x4126ef\n    int64_t v58 = v47 - v56; // 0x4126f2\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x4126fd\n    int64_t v60 = v58 + v54; // 0x412700\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x412650\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x41271c\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_412750",
            "funcStartAddr": "412750",
            "funcEndAddr": "41275e",
            "decompiledFuncCode": "int64_t function_412750(int64_t a1, int64_t a2) {\n    // 0x412750\n    int64_t v1; // 0x412750\n    return function_4103e0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_412760",
            "funcStartAddr": "412760",
            "funcEndAddr": "4127db",
            "decompiledFuncCode": "int64_t function_412760(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x412767\n    if (fileno(stream) < 0) {\n        // 0x4127c7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x41277a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4127ab\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4127c7\n            return fclose(stream);\n        }\n    }\n    // 0x41277c\n    if ((int32_t)function_410520(a1, v1) == 0) {\n        // 0x4127c7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x412788\n    int32_t v3 = *v2; // 0x412790\n    int64_t result = fclose(stream); // 0x41279e\n    if (v3 != 0) {\n        // 0x4127d0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4127a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4127e0",
            "funcStartAddr": "4127e0",
            "funcEndAddr": "412873",
            "decompiledFuncCode": "int64_t function_4127e0(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x4127e7\n    int64_t result = (int64_t)file; // 0x4127e7\n    if (file == NULL) {\n        // 0x412801\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x4127f7\n    if (v1 >= 3) {\n        // 0x412801\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_412750((int64_t)v1, v2); // 0x41281a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x412858\n        function_412760(result, v2);\n        // 0x412801\n        return 0;\n    }\n    // 0x41281e\n    if ((int32_t)function_412760(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, mode); // 0x412830\n        if (v4 != NULL) {\n            // 0x412801\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x41283d\n    close(fd);\n    // 0x412801\n    return 0;\n}\n"
        },
        {
            "funcName": "function_412880",
            "funcStartAddr": "412880",
            "funcEndAddr": "4128dd",
            "decompiledFuncCode": "int64_t function_412880(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x412880\n    return function_402310();\n}\n"
        },
        {
            "funcName": "function_4128e0",
            "funcStartAddr": "4128e0",
            "funcEndAddr": "4128e1",
            "decompiledFuncCode": "int64_t function_4128e0(void) {\n    // 0x4128e0\n    int64_t result; // 0x4128e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4128f0",
            "funcStartAddr": "4128f0",
            "funcEndAddr": "412908",
            "decompiledFuncCode": "int64_t function_4128f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4128f0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g29);\n}\n"
        },
        {
            "funcName": "function_412908",
            "funcStartAddr": "412908",
            "funcEndAddr": "412928",
            "decompiledFuncCode": "int64_t function_412908(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g25; // 0x412912\n    while (*(int64_t *)v1 != -1) {\n        // 0x412913\n        v1 -= 8;\n    }\n    // 0x412924\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_cp.elf"
}