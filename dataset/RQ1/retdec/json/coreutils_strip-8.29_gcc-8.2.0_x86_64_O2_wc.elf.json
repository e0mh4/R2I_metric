{
    "funcInfo": [
        {
            "funcName": "function_401d50",
            "funcStartAddr": "401d50",
            "funcEndAddr": "401d55",
            "decompiledFuncCode": "int64_t function_401d50(void) {\n    // 0x401d50\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d55",
            "funcStartAddr": "401d55",
            "funcEndAddr": "401d5a",
            "decompiledFuncCode": "int64_t function_401d55(void) {\n    // 0x401d55\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d5a",
            "funcStartAddr": "401d5a",
            "funcEndAddr": "401d5f",
            "decompiledFuncCode": "int64_t function_401d5a(void) {\n    // 0x401d5a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d5f",
            "funcStartAddr": "401d5f",
            "funcEndAddr": "401d64",
            "decompiledFuncCode": "int64_t function_401d5f(void) {\n    // 0x401d5f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d64",
            "funcStartAddr": "401d64",
            "funcEndAddr": "401d69",
            "decompiledFuncCode": "int64_t function_401d64(void) {\n    // 0x401d64\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d69",
            "funcStartAddr": "401d69",
            "funcEndAddr": "401d6e",
            "decompiledFuncCode": "int64_t function_401d69(void) {\n    // 0x401d69\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d6e",
            "funcStartAddr": "401d6e",
            "funcEndAddr": "401d73",
            "decompiledFuncCode": "int64_t function_401d6e(void) {\n    // 0x401d6e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d80",
            "funcStartAddr": "401d80",
            "funcEndAddr": "402770",
            "decompiledFuncCode": "int64_t function_401d80(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401d8f\n    function_403bb0(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_407e80(0x403810, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g35 = getpagesize();\n    setvbuf(g28, (char *)((int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\" ^ (int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"), 1, 0);\n    *(char *)&g39 = 0;\n    *(char *)&g40 = 0;\n    *(char *)&g41 = 0;\n    *(char *)&g42 = 0;\n    *(char *)&g38 = 0;\n    g43 = 0;\n    g44 = 0;\n    g45 = 0;\n    g46 = 0;\n    g47 = 0;\n    int64_t v2; // 0x401d80\n    int64_t v3; // 0x401d80\n    while (true) {\n        // 0x401e50\n        v2 = 0;\n        while (true) {\n          lab_0x401e50_2:;\n            int32_t v4 = function_4072a0(v1, a2, \"clLmw\", &g2, 0, v3);\n            switch (v4) {\n                case -1: {\n                    goto lab_0x401f40;\n                }\n                case 99: {\n                    // 0x401ef8\n                    *(char *)&g39 = 1;\n                    goto lab_0x401e50_2;\n                }\n                default: {\n                    if (v4 > 99) {\n                        if (v4 == 109) {\n                            // 0x401ee8\n                            *(char *)&g40 = 1;\n                        } else {\n                            if (v4 > 109) {\n                                if (v4 != 119) {\n                                    // break -> 0x401eb0\n                                    break;\n                                }\n                                // 0x401e87\n                                *(char *)&g41 = 1;\n                            } else {\n                                if (v4 != 108) {\n                                    // 0x401ed7\n                                    function_403350(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401ec5\n                                *(char *)&g42 = 1;\n                            }\n                        }\n                    } else {\n                        if (v4 == -130) {\n                            // 0x4026c6\n                            function_403350(0);\n                            // UNREACHABLE\n                        }\n                        if (v4 != 76) {\n                            if (v4 == -131) {\n                                // 0x401f08\n                                function_406060((int64_t)g28, \"wc\", \"GNU coreutils\", (int64_t)g17, \"Paul Rubin\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x401ed7;\n                        }\n                        // 0x401ea0\n                        *(char *)&g38 = 1;\n                    }\n                    goto lab_0x401e50_2;\n                }\n            }\n        }\n    }\n  lab_0x401f40:;\n    int64_t v5 = (int64_t)\"clLmw\"; // 0x401f47\n    int64_t v6 = v1; // 0x401f47\n    int64_t v7 = v2; // 0x401f47\n    int64_t v8 = a2; // 0x401f47\n    int64_t v9 = (int64_t)\"clLmw\"; // 0x401f47\n    int64_t v10 = v1; // 0x401f47\n    int64_t v11 = v2; // 0x401f47\n    int64_t v12 = a2; // 0x401f47\n    if ((*(char *)&g41 | *(char *)&g42) == 0) {\n        goto lab_0x40239b;\n    } else {\n        goto lab_0x401f56;\n    }\n  lab_0x4020e0:;\n    int64_t v13 = 0; // 0x4020e5\n    int64_t v14; // 0x401d80\n    int64_t v15; // 0x401d80\n    if (v15 == 0) {\n        goto lab_0x4020ee;\n    } else {\n        // 0x4020e7\n        v13 = 152 * v14;\n        goto lab_0x4020ee;\n    }\n  lab_0x4020ee:;\n    // 0x4020ee\n    int64_t v16; // 0x401d80\n    int64_t v17 = v13 + v16; // 0x4020ee\n    int64_t v18; // 0x401d80\n    char * str = (char *)v18;\n    int32_t strcmp_rc = strcmp(str, \"-\"); // 0x402100\n    char * path = str; // 0x402107\n    int64_t v19 = v17; // 0x402107\n    int64_t v20; // 0x401d80\n    if (strcmp_rc != 0) {\n        goto lab_0x40203a;\n    } else {\n        // 0x40210d\n        g36 = 1;\n        v20 = function_402a20(0, v18, 0x100000000 * v17 >> 32, -1) & 0xffffffff;\n        goto lab_0x402082;\n    }\n  lab_0x402085:;\n    // 0x402085\n    int32_t * v21; // 0x401d80\n    if (v15 == 0) {\n        // 0x40208a\n        *v21 = 1;\n    }\n    int64_t v22 = v14 + 1; // 0x402095\n    int64_t v23; // 0x401d80\n    int64_t v24; // 0x401d80\n    int64_t v25; // 0x401d80\n    int64_t v26 = function_403720(v23, v25, v24); // 0x4020a0\n    int64_t v27 = v26; // 0x4020ab\n    int64_t v28; // 0x401d80\n    int64_t v29 = v28; // 0x4020ab\n    int64_t v30 = v22; // 0x4020ab\n    int64_t v31 = v22; // 0x4020ab\n    int64_t v32 = v28; // 0x4020ab\n    if (v26 == 0) {\n        // break -> 0x4021ea\n        goto lab_0x4021ea;\n    }\n    goto lab_0x4020b1;\n  lab_0x402166:;\n    int64_t v47 = function_4037b0(v23); // 0x402169\n    char * v48 = dcgettext(NULL, \"invalid zero-length file name\", 5); // 0x40217d\n    int64_t v35; // 0x401d80\n    error(0, 0, \"%s:%lu: %s\", (char *)function_405650(0, 3, v35), (int32_t)v47, v48);\n    v24 = (int64_t)\"%s:%lu: %s\";\n    v28 = 0;\n    goto lab_0x402085;\n  lab_0x40203a:;\n    uint32_t fd = open(path, O_RDONLY); // 0x402041\n    if (fd == -1) {\n        goto lab_0x402331;\n    } else {\n        // 0x40204f\n        v20 = function_402a20((int64_t)fd, v18, 0x100000000 * v19 >> 32, 0) % 256;\n        if (close(fd) != 0) {\n            goto lab_0x402331;\n        } else {\n            goto lab_0x402082;\n        }\n    }\n  lab_0x402331:\n    // 0x402331\n    error(0, *__errno_location(), \"%s\", (char *)function_405650(0, 3, v18));\n    v20 = (int32_t)\"%s\" ^ (int32_t)\"%s\";\n    goto lab_0x402082;\n  lab_0x402082:\n    // 0x402082\n    v24 = v20;\n    int64_t v33; // 0x401d80\n    v28 = v20 & v33;\n    goto lab_0x402085;\n  lab_0x40244c:;\n    // 0x40244c\n    int64_t v49; // 0x401d80\n    int64_t v50 = v49 + 1; // 0x40244c\n    int64_t v51; // 0x401d80\n    int32_t v52; // 0x401d80\n    *(int32_t *)(v51 - 8) = v52;\n    v49 = v50;\n    int64_t v53 = v51 + 152; // 0x40245e\n    int64_t v54; // 0x401d80\n    if (v54 == v50) {\n        // break -> 0x402491\n        goto lab_0x402491;\n    }\n    goto lab_0x402460;\n  lab_0x40239b:;\n    // 0x40239b\n    int64_t v57; // 0x401d80\n    int64_t v58 = v57;\n    int64_t v59 = v12;\n    int64_t v60 = v11;\n    int64_t v61 = v10;\n    int64_t v62 = v9;\n    int128_t v63; // 0x401d80\n    int128_t v64 = v63;\n    int128_t v65; // 0x401d80\n    int128_t v66 = v65;\n    int64_t v67; // 0x401d80\n    int64_t v68 = v67;\n    char v69; // 0x401d80\n    char v70 = v69;\n    int64_t v71; // 0x401d80\n    int64_t v72 = v71;\n    int64_t v73 = v72; // 0x4023a2\n    char v74 = v70; // 0x4023a2\n    int64_t v75 = v68; // 0x4023a2\n    int128_t v76 = v66; // 0x4023a2\n    int128_t v77 = v64; // 0x4023a2\n    v5 = v62;\n    v6 = v61;\n    v7 = v60;\n    v8 = v59;\n    int64_t v78 = v58; // 0x4023a2\n    if (*(char *)&g40 == 0) {\n        // 0x4023a8\n        v73 = v72;\n        v74 = v70;\n        v75 = v68;\n        v76 = v66;\n        v77 = v64;\n        v5 = v62;\n        v6 = v61;\n        v7 = v60;\n        v8 = v59;\n        v78 = v58;\n        if (*(char *)&g39 == 0) {\n            // 0x4023b5\n            v73 = v72;\n            v74 = v70;\n            v75 = v68;\n            v76 = v66;\n            v77 = v64;\n            v5 = v62;\n            v6 = v61;\n            v7 = v60;\n            v8 = v59;\n            v78 = v58;\n            if (*(char *)&g38 == 0) {\n                // 0x4023c2\n                *(char *)&g39 = 1;\n                *(char *)&g41 = 1;\n                *(char *)&g42 = 1;\n                v73 = v72;\n                v74 = v70;\n                v75 = v68;\n                v76 = v66;\n                v77 = v64;\n                v5 = v62;\n                v6 = v61;\n                v7 = v60;\n                v8 = v59;\n                v78 = v58;\n            }\n        }\n    }\n    goto lab_0x401f56;\n  lab_0x401f56:;\n    int64_t v79 = v8;\n    int64_t v80 = v7;\n    int64_t v81 = v6;\n    int128_t v82 = v77;\n    int128_t v83 = v76;\n    int64_t v84 = g26; // 0x401f56\n    int64_t v85; // 0x401d80\n    int64_t v86; // 0x401d80\n    int64_t v87; // 0x401d80\n    int64_t v88; // 0x401d80\n    int64_t v89; // 0x401d80\n    struct _IO_FILE * stream; // 0x401d80\n    int64_t v90; // 0x401d80\n    int64_t v91; // 0x401d80\n    int64_t v92; // 0x401d80\n    int64_t v93; // 0x401d80\n    int64_t v94; // 0x401d80\n    int64_t v95; // 0x401d80\n    int64_t v96; // 0x401d80\n    int32_t v97; // bp-488, 0x401d80\n    char v98; // 0x401d80\n    char v99; // 0x401d80\n    char v100; // 0x401d80\n    int64_t v101; // 0x401d80\n    int64_t v102; // 0x401d80\n    int64_t v103; // 0x401d80\n    int64_t v104; // 0x401d80\n    int64_t v105; // 0x401d80\n    int64_t v106; // 0x401d80\n    int64_t v107; // 0x401d80\n    int128_t v108; // 0x401d80\n    int128_t v109; // 0x401d80\n    int128_t v110; // 0x401d80\n    int128_t v111; // 0x401d80\n    int128_t v112; // 0x401d80\n    int128_t v113; // 0x401d80\n    if (v80 == 0) {\n        if (v81 > v84) {\n            int64_t v114 = 8 * v84 + v79; // 0x4023e9\n            int64_t v115 = function_4036b0(v114); // 0x4023f5\n            v93 = v114;\n            if (v115 == 0) {\n                // 0x402696\n                function_4063f0(v93);\n                // UNREACHABLE\n            }\n            // 0x402406\n            v105 = &v97;\n            v98 = 0;\n            v101 = v114;\n            v108 = v83;\n            v111 = v82;\n            v95 = v84;\n            v90 = 0x100000000 * (v81 - v84) >> 32;\n            v85 = v115;\n            goto lab_0x402414;\n        } else {\n            int64_t v116 = function_4036b0((int64_t)&g34); // 0x40255f\n            v93 = &g34;\n            if (v116 == 0) {\n                // 0x402696\n                function_4063f0(v93);\n                // UNREACHABLE\n            }\n            int64_t v117 = function_4061a0(152); // 0x402575\n            v107 = &v97;\n            v100 = 0;\n            v104 = v117;\n            v102 = &g34;\n            v110 = v83;\n            v113 = v82;\n            v94 = v5;\n            v87 = v116;\n            goto lab_0x402596;\n        }\n    } else {\n        if (v81 > v84) {\n            // 0x4026cd\n            function_405580(4, *(int64_t *)(8 * v84 + v79));\n            error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n            __fprintf_chk(g31, 1, \"%s\\n\", dcgettext(NULL, \"file operands cannot be combined with --files0-from\", 5));\n          lab_0x401ed7:\n            // 0x401ed7\n            function_403350(1);\n            // UNREACHABLE\n        }\n        char * str4 = (char *)v80; // 0x401f76\n        if (strcmp(str4, \"-\") != 0) {\n            struct _IO_FILE * file = fopen(str4, \"r\"); // 0x4024e8\n            stream = file;\n            if (file != NULL) {\n                goto lab_0x401f8a;\n            } else {\n                int64_t v118 = function_405580(4, v80); // 0x402501\n                char * format2 = dcgettext(NULL, \"cannot open %s for reading\", 5); // 0x402515\n                int64_t v119 = (int64_t)format2; // 0x402515\n                error(1, *__errno_location(), format2);\n                v106 = v73;\n                v99 = v74;\n                v103 = v75;\n                v109 = v83;\n                v112 = v82;\n                v88 = &g64;\n                v96 = v119;\n                v91 = v119;\n                v89 = v118;\n                v92 = 1;\n                v86 = v78;\n                goto lab_0x402536;\n            }\n        } else {\n            // 0x401f83\n            stream = g29;\n            goto lab_0x401f8a;\n        }\n    }\n  lab_0x402414:;\n    int64_t v120 = function_4061a0(152 * v90); // 0x40241b\n    int64_t v121 = v105; // 0x402429\n    char v122 = v98; // 0x402429\n    int64_t v123 = v120; // 0x402429\n    int64_t v56 = v101; // 0x402429\n    int128_t v124 = v108; // 0x402429\n    int128_t v125 = v111; // 0x402429\n    int64_t v126 = v90; // 0x402429\n    int64_t v127 = v85; // 0x402429\n    v107 = v105;\n    v100 = v98;\n    v104 = v120;\n    v102 = v101;\n    v110 = v108;\n    v113 = v111;\n    v94 = v95;\n    v87 = v85;\n    if (v90 == 1) {\n        goto lab_0x402596;\n    } else {\n        goto lab_0x40242f;\n    }\n  lab_0x402596:;\n    int64_t v128 = v87;\n    int128_t v129 = v113;\n    int128_t v130 = v110;\n    int64_t v131 = v104;\n    char v132 = v100;\n    int64_t v133 = v107;\n    unsigned char v134 = *(char *)&g41; // 0x402596\n    unsigned char v135 = *(char *)&g42; // 0x40259d\n    unsigned char v136 = *(char *)&g40; // 0x4025a6\n    unsigned char v137 = *(char *)&g39; // 0x4025af\n    unsigned char v138 = *(char *)&g38; // 0x4025b8\n    v121 = v133;\n    v122 = v132;\n    v123 = v131;\n    v56 = v102;\n    v124 = v130;\n    v125 = v129;\n    v126 = 1;\n    v127 = v128;\n    int64_t v139; // 0x401d80\n    int64_t v140; // 0x401d80\n    int64_t v141; // 0x401d80\n    int64_t v142; // 0x401d80\n    int64_t v143; // 0x401d80\n    char v144; // 0x401d80\n    int64_t v145; // 0x401d80\n    int64_t v146; // 0x401d80\n    int128_t v147; // 0x401d80\n    int128_t v148; // 0x401d80\n    if ((int64_t)v135 + (int64_t)v134 + (int64_t)v136 + (int64_t)v137 + (int64_t)v138 == 1) {\n        // 0x40269b\n        *(int32_t *)v131 = 1;\n        v146 = v133;\n        v144 = v132;\n        v145 = v131;\n        v147 = v130;\n        v148 = v129;\n        v142 = 1;\n        v143 = v94;\n        v141 = 1;\n        v140 = v80;\n        v139 = v128;\n        goto lab_0x401ff4;\n    } else {\n        goto lab_0x40242f;\n    }\n  lab_0x401f8a:;\n    int64_t v149 = (int64_t)stream;\n    uint32_t v150 = fileno(stream); // 0x401f8d\n    int64_t v151 = &v97; // 0x401f92\n    int64_t v152; // 0x401d80\n    int128_t v153; // bp-344, 0x401d80\n    char v154; // 0x401d80\n    int32_t v155; // 0x401d80\n    int128_t v156; // 0x401d80\n    int128_t v157; // 0x401d80\n    if ((v155 & 0xf000) == 0x8000 == __fxstat(1, v150, (struct stat *)&v97) == 0) {\n        // 0x4025d4\n        __asm_pxor(v82, v82);\n        int128_t v158 = __asm_cvtsi2sd(v3); // 0x4025d8\n        int64_t v159 = __asm_movsd(v158); // 0x4025df\n        function_403ab0();\n        int128_t v160 = __asm_mulsd(v83, 0x3fe0000000000000); // 0x4025ea\n        __asm_comisd(v160, __asm_movsd_3(0x4164000000000000));\n        function_403ab0();\n        __asm_comisd(__asm_mulsd_4(__asm_movsd_3(0x3fe0000000000000), v160), (int128_t)v159);\n        function_4058e0((int64_t *)&v153, (int64_t)v150, v151);\n        char v161 = function_405980(v149, (int64_t *)&v153); // 0x40262d\n        if (v161 == 0 || (int32_t)function_406430(v149, (int64_t)&v153) != 0) {\n            // 0x402731\n            function_405580(4, v80);\n            error(1, (int32_t)\"cannot read file names from %s\" ^ (int32_t)\"cannot read file names from %s\", dcgettext(NULL, \"cannot read file names from %s\", 5));\n            return &g64;\n        }\n        int64_t v162 = function_4036b0(v3); // 0x402661\n        if (v162 == 0) {\n            // 0x402696\n            function_4063f0(v93);\n            // UNREACHABLE\n        }\n        int64_t v163 = v153; // 0x402651\n        v154 = v161;\n        v156 = v160;\n        v157 = v158;\n        v152 = v162;\n        if (v163 == 0) {\n            goto lab_0x401fd8;\n        } else {\n            uint128_t v164 = 152 * (v153 & 0xffffffffffffffff); // 0x40267f\n            v105 = v151;\n            v98 = v161;\n            v108 = v160;\n            v111 = v158;\n            v95 = 0;\n            v90 = v163;\n            v85 = v162;\n            if ((int64_t)v164 > -1 != (v164 % 0xff0000000000000001 == 0)) {\n                // 0x402696\n                function_4063f0(v93);\n                // UNREACHABLE\n            }\n            goto lab_0x402414;\n        }\n    } else {\n        int64_t v165 = function_4036e0(v149); // 0x401fc2\n        v154 = 0;\n        v156 = v83;\n        v157 = v82;\n        v152 = v165;\n        v93 = v149;\n        if (v165 == 0) {\n            // 0x402696\n            function_4063f0(v93);\n            // UNREACHABLE\n        }\n        goto lab_0x401fd8;\n    }\n  lab_0x40242f:;\n    int64_t v166 = v127;\n    v54 = v126;\n    int128_t v167 = v125;\n    int128_t v168 = v124;\n    int64_t v169 = v123;\n    char v170 = v122;\n    int64_t v171 = v121;\n    v49 = 0;\n    v53 = v169 + 8;\n    while (true) {\n      lab_0x402460:\n        // 0x402460\n        v51 = v53;\n        int64_t v55 = *(int64_t *)(8 * v49 + (0x100000000 * v56 >> 32)); // 0x402465\n        if (v55 == 0) {\n            // 0x40243d\n            v52 = __fxstat(1, 0, (struct stat *)v51);\n            goto lab_0x40244c;\n        } else {\n            char * str3 = (char *)v55; // 0x402476\n            if (strcmp(str3, \"-\") == 0) {\n                // 0x40243d\n                v52 = __fxstat(1, 0, (struct stat *)v51);\n                goto lab_0x40244c;\n            } else {\n                // 0x40247f\n                v52 = __xstat(1, str3, (struct stat *)v51);\n                goto lab_0x40244c;\n            }\n        }\n    }\n  lab_0x402491:;\n    int32_t v172 = *(int32_t *)v169; // 0x40249b\n    v146 = v171;\n    v144 = v170;\n    v145 = v169;\n    v147 = v168;\n    v148 = v167;\n    v142 = 1;\n    v143 = v169;\n    v141 = v54;\n    v140 = v80;\n    v139 = v166;\n    int32_t v173 = v172; // 0x40249e\n    int64_t v174 = v169; // 0x40249e\n    if (v172 >= 0 == (v172 != 0)) {\n        goto lab_0x401ff4;\n    } else {\n        int64_t v175 = 1;\n        int64_t v176 = v174;\n        int64_t v177 = 0;\n        int64_t v178 = v177; // 0x4024c7\n        int64_t v179 = v175; // 0x4024c7\n        if (v173 == 0) {\n            // 0x4024c9\n            v178 = v177;\n            v179 = 7;\n            if ((*(int32_t *)(v176 + 32) & 0xf000) == 0x8000) {\n                // 0x4024da\n                v178 = *(int64_t *)(v176 + 56) + v177;\n                v179 = v175;\n            }\n        }\n        int64_t v180 = v179;\n        int64_t v181 = v178;\n        int64_t v182 = 1; // 0x4024b4\n        while (v54 != v182) {\n            int64_t v183 = v176 + 152; // 0x4024b8\n            v175 = v180;\n            v176 = v183;\n            v177 = v181;\n            v178 = v177;\n            v179 = v175;\n            if (*(int32_t *)v183 == 0) {\n                // 0x4024c9\n                v178 = v177;\n                v179 = 7;\n                if ((*(int32_t *)(v176 + 32) & 0xf000) == 0x8000) {\n                    // 0x4024da\n                    v178 = *(int64_t *)(v176 + 56) + v177;\n                    v179 = v175;\n                }\n            }\n            // 0x4024b4\n            v180 = v179;\n            v181 = v178;\n            v182++;\n        }\n        // 0x402536\n        v106 = v171;\n        v99 = v170;\n        v103 = v169;\n        v109 = v168;\n        v112 = v167;\n        v88 = v181;\n        v96 = 152 * v54 + v169;\n        v91 = v54;\n        v89 = v80;\n        v92 = v180;\n        v86 = v166;\n        goto lab_0x402536;\n    }\n  lab_0x402536:;\n    int64_t v184 = v92;\n    int64_t v185 = v88; // 0x40254e\n    int64_t v186 = 1; // 0x40254e\n    int64_t v187 = v96; // 0x40254e\n    if (v88 >= 10) {\n        uint64_t v188 = v185;\n        int64_t v189 = 2; // 0x402544\n        int64_t v190 = v189; // 0x40254e\n        v185 = v188 / 10;\n        while (v188 >= 100) {\n            // 0x402542\n            v188 = v185;\n            v189 = v190 + 1 & 0xffffffff;\n            v190 = v189;\n            v185 = v188 / 10;\n        }\n        // 0x40254a\n        v186 = v189;\n        v187 = (char)v188 % 10;\n    }\n    int64_t v191 = v186;\n    int32_t v192 = v191; // 0x402550\n    int32_t v193 = v192 - (int32_t)v184; // 0x402550\n    int64_t v194 = v193 < 0 == ((v193 ^ v192) & (int32_t)(v191 ^ v184)) < 0 ? v191 : v184;\n    v146 = v106;\n    v144 = v99;\n    v145 = v103;\n    v147 = v109;\n    v148 = v112;\n    v142 = v194 & 0xffffffff;\n    v143 = v187;\n    v141 = v91;\n    v140 = v89;\n    v139 = v86;\n    goto lab_0x401ff4;\n  lab_0x401ff4:\n    // 0x401ff4\n    v23 = v139;\n    v35 = v140;\n    v16 = v145;\n    v25 = v146;\n    g37 = v142;\n    int64_t v195 = function_403720(v23, v25, v143); // 0x4020a0\n    v31 = 0;\n    v32 = 1;\n    if (v195 != 0) {\n        // 0x4020b1\n        v15 = v141;\n        bool v196; // 0x401d80\n        int64_t v45 = v196 ? -1 : 1;\n        v21 = (int32_t *)v16;\n        v27 = v195;\n        v29 = 1;\n        v30 = 0;\n        while (true) {\n          lab_0x4020b1:\n            // 0x4020b1\n            v14 = v30;\n            v33 = v29;\n            v18 = v27;\n            int64_t v34 = v35; // 0x4020b4\n            int64_t v36 = 2; // 0x4020b4\n            if (v35 == 0) {\n                // 0x4021b5\n                if (*(char *)v18 != 0) {\n                    goto lab_0x4020e0;\n                } else {\n                    // 0x4021be\n                    error(0, (int32_t)\"invalid zero-length file name\" ^ (int32_t)\"invalid zero-length file name\", \"%s\", dcgettext(NULL, \"invalid zero-length file name\", 5));\n                    v24 = (int64_t)\"%s\";\n                    v28 = 0;\n                    goto lab_0x402085;\n                }\n            } else {\n                int64_t v37 = v34;\n                int64_t v38 = (int64_t)\"-\";\n                unsigned char v39 = *(char *)v37; // 0x4020c7\n                char v40 = *(char *)v38; // 0x4020c7\n                char v41 = v40; // 0x4020c7\n                bool v42 = false; // 0x4020c7\n                while (v39 == v40) {\n                    int64_t v43 = v36 - 1; // 0x4020c7\n                    int64_t v44 = v38 + v45; // 0x4020c7\n                    v34 = v37 + v45;\n                    v36 = v43;\n                    v41 = v39;\n                    v42 = true;\n                    if (v43 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v37 = v34;\n                    v38 = v44;\n                    v39 = *(char *)v37;\n                    v40 = *(char *)v38;\n                    v41 = v40;\n                    v42 = false;\n                }\n                unsigned char v46 = v41;\n                char * str2 = (char *)v18;\n                if ((v39 >= v46 && !v42) == v39 < v46) {\n                    // 0x402008\n                    if (strcmp(str2, \"-\") == 0) {\n                        // 0x40212e\n                        function_405580(4, v18);\n                        char * format = dcgettext(NULL, \"when reading file names from stdin, no file name of %s allowed\", 5); // 0x40214a\n                        error(0, (int32_t)\"when reading file names from stdin, no file name of %s allowed\" ^ (int32_t)\"when reading file names from stdin, no file name of %s allowed\", format);\n                        v24 = (int64_t)format;\n                        v28 = 0;\n                        if (*str2 != 0) {\n                            goto lab_0x402085;\n                        } else {\n                            goto lab_0x402166;\n                        }\n                    } else {\n                        // 0x40201d\n                        if (*str2 == 0) {\n                            goto lab_0x402166;\n                        } else {\n                            // 0x402027\n                            path = str2;\n                            v19 = v16;\n                            if (v15 != 0) {\n                                // 0x4020e7\n                                v13 = 152 * v14;\n                                goto lab_0x4020ee;\n                            } else {\n                                goto lab_0x40203a;\n                            }\n                        }\n                    }\n                } else {\n                    // 0x4020d6\n                    if (*str2 == 0) {\n                        goto lab_0x402166;\n                    } else {\n                        goto lab_0x4020e0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4021ea:\n    // 0x4021ea\n    v93 = v23;\n    if (v97 == 3) {\n        // 0x402696\n        function_4063f0(v93);\n        // UNREACHABLE\n    }\n    // 0x4021f7\n    int64_t v197; // 0x401d80\n    int64_t v198; // 0x401d80\n    int64_t v199; // 0x401d80\n    int64_t v200; // 0x401d80\n    if (v97 != 4) {\n        int64_t v201 = 2; // 0x4022d0\n        int64_t v202 = v25; // 0x4022d0\n        if (v97 != 2) {\n            // 0x4022d2\n            __assert_fail(\"!\\\"unexpected error code from argv_iter\\\"\", \"src/wc.c\", 794, \"main\");\n            v201 = &g64;\n            v202 = (int64_t)\"src/wc.c\";\n        }\n        int64_t v203 = v202;\n        unsigned char v204 = (char)v32 & (char)(v35 == 0); // 0x4022f1\n        int64_t v205 = v201 & 0xffffff00 | (int64_t)v204; // 0x4022f1\n        v199 = v205;\n        v198 = v35;\n        v200 = v203;\n        v197 = v32;\n        if (v204 != 0) {\n            // 0x4022fc\n            v199 = v205;\n            v198 = v35;\n            v200 = v203;\n            v197 = v205;\n            if (function_4037b0(v23) == 0) {\n                // 0x402310\n                g36 = 1;\n                v199 = v205;\n                v198 = v35;\n                v200 = 0;\n                v197 = function_402a20(0, 0, v16, -1) & 0xffffffff;\n            }\n        }\n    } else {\n        int64_t v206 = function_405650(0, 3, v35); // 0x40220d\n        char * format3 = dcgettext(NULL, \"%s: read error\", 5); // 0x402221\n        uint32_t err_num = *__errno_location(); // 0x402236\n        error(0, err_num, format3);\n        v199 = (int64_t)format3;\n        v198 = v206;\n        v200 = err_num;\n        v197 = 0;\n    }\n    uint64_t v207 = v197;\n    if (v144 != 0) {\n        // 0x402362\n        function_405950((int64_t *)&v153, v200);\n    }\n    // 0x40224a\n    if (function_4037b0(v23) >= 2) {\n        // 0x402258\n        function_402850(g47, g46, g45, g44, g43, (int64_t)dcgettext(NULL, \"total\", 5));\n    }\n    // 0x402294\n    function_4037d0(v23);\n    free((int64_t *)v16);\n    if (g36 == 0 || close(0) == 0) {\n        // 0x4022b3\n        return v207 % 256 ^ 1;\n    }\n    // 0x402383\n    error(1, *__errno_location(), \"-\");\n    v71 = v25;\n    v69 = v144;\n    v67 = v16;\n    v65 = v147;\n    v63 = v148;\n    v9 = (int64_t)\"-\";\n    v10 = v199;\n    v11 = v198;\n    v12 = v31;\n    v57 = v23;\n    goto lab_0x40239b;\n  lab_0x401fd8:;\n    int64_t v208 = function_4061a0(152); // 0x401fdf\n    *(int32_t *)v208 = 1;\n    v146 = v151;\n    v144 = v154;\n    v145 = v208;\n    v147 = v156;\n    v148 = v157;\n    v142 = 1;\n    v143 = v151;\n    v141 = 0;\n    v140 = v80;\n    v139 = v152;\n    goto lab_0x401ff4;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402770",
            "funcEndAddr": "40279b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402770\n    int64_t v1; // 0x402770\n    __libc_start_main(0x401d80, (int32_t)a4, (char **)&v1, (void (*)())0x407e10, (void (*)())0x407e70, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40279b",
            "funcStartAddr": "40279b",
            "funcEndAddr": "4027ba",
            "decompiledFuncCode": "int64_t function_40279b(void) {\n    // 0x40279b\n    return 0x60c2c8;\n}\n"
        },
        {
            "funcName": "function_4027ba",
            "funcStartAddr": "4027ba",
            "funcEndAddr": "4027f1",
            "decompiledFuncCode": "int64_t function_4027ba(void) {\n    // 0x4027ba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4027f1",
            "funcStartAddr": "4027f1",
            "funcEndAddr": "402848",
            "decompiledFuncCode": "int64_t function_4027f1(void) {\n    // 0x4027f1\n    if (g32 != 0) {\n        // 0x402847\n        int64_t result; // 0x4027f1\n        return result;\n    }\n    int64_t v1 = g33; // 0x402824\n    int64_t result2; // 0x402836\n    if (g33 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x402836\n        result2 = function_40279b();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x402826\n        v1++;\n    }\n    // 0x40281a\n    g33 = v1;\n    // 0x402836\n    result2 = function_40279b();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402848",
            "funcStartAddr": "402848",
            "funcEndAddr": "40284d",
            "decompiledFuncCode": "int64_t function_402848(void) {\n    // 0x402848\n    return function_4027ba();\n}\n"
        },
        {
            "funcName": "function_402850",
            "funcStartAddr": "402850",
            "funcEndAddr": "402a1f",
            "decompiledFuncCode": "int64_t function_402850(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)\"%*s\"; // 0x402879\n    int64_t v2; // bp-88, 0x402850\n    if (*(char *)&g42 != 0) {\n        int64_t v3 = function_4038f0(a1, &v2); // 0x4029e3\n        __printf_chk(1, \"%*s\", (int64_t)g37, (char *)v3);\n        v1 = (int64_t)\" %*s\";\n    }\n    int64_t v4 = v1; // 0x402886\n    if (*(char *)&g41 != 0) {\n        // 0x4029b0\n        function_4038f0(a2, &v2);\n        __printf_chk(1, (char *)v1);\n        v4 = (int64_t)\" %*s\";\n    }\n    int64_t v5 = v4; // 0x402893\n    if (*(char *)&g40 != 0) {\n        // 0x402980\n        function_4038f0(a3, &v2);\n        __printf_chk(1, (char *)v4);\n        v5 = (int64_t)\" %*s\";\n    }\n    int64_t v6 = v5; // 0x4028a0\n    if (*(char *)&g39 != 0) {\n        // 0x402950\n        function_4038f0(a4, &v2);\n        __printf_chk(1, (char *)v5);\n        v6 = (int64_t)\" %*s\";\n    }\n    // 0x4028a6\n    if (*(char *)&g38 != 0) {\n        // 0x402920\n        function_4038f0(a5, &v2);\n        __printf_chk(1, (char *)v6);\n    }\n    if (a6 != 0) {\n        char * str = (char *)a6;\n        char * found_char_pos = strchr(str, 10); // 0x4028bc\n        char * v7 = str; // 0x4028c4\n        if (found_char_pos != NULL) {\n            // 0x4028c6\n            v7 = (char *)function_405650(0, 3, a6);\n        }\n        // 0x4028d8\n        __printf_chk(1, \" %s\", v7);\n    }\n    int64_t v8 = (int64_t)g28; // 0x4028ec\n    int64_t * v9 = (int64_t *)(v8 + 40); // 0x4028f3\n    uint64_t v10 = *v9; // 0x4028f3\n    int64_t result; // 0x402850\n    if (v10 >= *(int64_t *)(v8 + 48)) {\n        // 0x402a10\n        result = __overflow(g28, 10);\n    } else {\n        // 0x402901\n        *v9 = v10 + 1;\n        *(char *)v10 = 10;\n        result = v10;\n    }\n    // 0x40290c\n    return result;\n}\n"
        },
        {
            "funcName": "function_402a20",
            "funcStartAddr": "402a20",
            "funcEndAddr": "403342",
            "decompiledFuncCode": "int64_t function_402a20(int64_t a1, int64_t a2, int64_t a3, int32_t a4) {\n    int64_t v1 = a2; // 0x402a48\n    if (a2 == 0) {\n        // 0x402f5d\n        v1 = (int64_t)dcgettext(NULL, \"standard input\", 5);\n    }\n    int64_t fd = 0x100000000 * a1 >> 32; // 0x402a37\n    uint32_t v2 = __ctype_get_mb_cur_max(); // 0x402a4e\n    char v3 = *(char *)&g40;\n    unsigned char v4 = v2 < 2 ? 0 : v3;\n    int32_t v5; // 0x402a20\n    int64_t v6; // 0x402a79\n    if (*(char *)&g41 != 0) {\n        // 0x402af0\n        posix_fadvise((int32_t)fd, 0, 0, POSIX_FADV_SEQUENTIAL);\n        goto lab_0x402b02;\n    } else {\n        unsigned char v7 = *(char *)&g38; // 0x402a79\n        if (v7 != 0) {\n            // 0x402af0\n            posix_fadvise((int32_t)fd, 0, 0, POSIX_FADV_SEQUENTIAL);\n            goto lab_0x402b02;\n        } else {\n            char v8 = *(char *)&g39; // 0x402a53\n            char v9 = v2 < 2 == v8 == 0 ? v3 : v8;\n            v6 = v7;\n            if (v4 == 0 == v9 == 1) {\n                // 0x402a9b\n            } else {\n                int32_t fd2 = fd;\n                posix_fadvise(fd2, 0, 0, POSIX_FADV_SEQUENTIAL);\n                if (v4 == 1) {\n                    goto lab_0x402b02;\n                } else {\n                    if (v9 == 0) {\n                        // 0x4032a6\n                        v5 = fd2;\n                        if (v4 == 0) {\n                            goto lab_0x4031b0;\n                        } else {\n                            goto lab_0x402b02;\n                        }\n                    } else {\n                        goto lab_0x40319a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402da8:;\n    // 0x402da8\n    int64_t v10; // 0x402a20\n    int64_t v11 = v10; // 0x402dab\n    int64_t v12; // 0x402a20\n    int64_t v13 = v12; // 0x402dab\n    int64_t v14; // 0x402a20\n    int64_t v15; // 0x402a20\n    int64_t v16 = v14 + v15; // 0x402dab\n    int64_t v17 = 0; // 0x402dab\n    int64_t v18; // 0x402a20\n    int64_t v19 = v18; // 0x402dab\n    goto lab_0x402dae;\n  lab_0x402d9e:;\n    // 0x402d9e\n    int64_t v38; // 0x402a20\n    v10 = v38;\n    int64_t v34; // 0x402a20\n    int64_t v35; // 0x402a20\n    v12 = v35 < v34 ? v34 : v35;\n    v18 = 0;\n    goto lab_0x402da8;\n  lab_0x402dae:;\n    // 0x402dae\n    int64_t v20; // 0x402a20\n    int64_t v21 = v20 + 1; // 0x402d78\n    int64_t v22 = v19;\n    int64_t v23 = v17;\n    int64_t v24 = v16;\n    int64_t v25 = v13;\n    int64_t v26 = v11;\n    int64_t v27 = v26; // 0x402db1\n    int64_t v28 = v25; // 0x402db1\n    int64_t v29 = v24; // 0x402db1\n    v20 = v21;\n    int64_t v30 = v23; // 0x402db1\n    int64_t v31 = v22; // 0x402db1\n    int64_t v32; // 0x402d2e\n    int64_t v33; // 0x402d4e\n    if (v21 == v33 + v32) {\n        // break -> 0x402d40\n        goto lab_0x402d40_2;\n    }\n    goto lab_0x402d78;\n  lab_0x403053:;\n    // 0x403053\n    int64_t v41; // 0x402a20\n    int64_t v42 = v41; // 0x403064\n    int64_t v43; // 0x402a20\n    int64_t v44 = v43; // 0x403064\n    int64_t v45; // 0x402a20\n    int64_t v46; // 0x402a20\n    int64_t v47 = v46 >= v45 ? v46 : v45; // 0x403064\n    int64_t v48 = 0; // 0x403064\n    int64_t v49; // 0x402a20\n    int64_t v50; // 0x402a20\n    int64_t v51 = v49 % 256 + v50; // 0x403064\n    int64_t v52; // 0x402a20\n    int64_t v53 = v52; // 0x403064\n    goto lab_0x402f98;\n  lab_0x402f7e:;\n    // 0x402f7e\n    int64_t v81; // 0x402a20\n    v42 = v81;\n    int64_t v78; // 0x402a20\n    v44 = v78;\n    int64_t v76; // 0x402a20\n    int64_t v80; // 0x402a20\n    v47 = v80 >= v76 ? v80 : v76;\n    int64_t v75; // 0x402a20\n    v48 = v75;\n    int64_t v77; // 0x402a20\n    int64_t v79; // 0x402a20\n    v51 = v77 + v79;\n    int64_t v83; // 0x402a20\n    v53 = v83;\n    goto lab_0x402f98;\n  lab_0x402c42:;\n    // 0x402c42\n    int64_t v101; // 0x402a20\n    int64_t v139 = v101;\n    int64_t v100; // 0x402a20\n    int64_t v140 = v100;\n    int64_t v99; // 0x402a20\n    int64_t v141 = v99;\n    int64_t v98; // 0x402a20\n    int64_t v142 = v98;\n    int64_t v97; // 0x402a20\n    int64_t v143 = v97;\n    int64_t v96; // 0x402a20\n    int64_t v144 = v96;\n    int64_t v95; // 0x402a20\n    int64_t v145 = v95;\n    int64_t v94; // 0x402a20\n    int64_t v146 = v94;\n    int64_t ps; // bp-16464, 0x402a20\n    int64_t v147 = ps; // 0x402c4d\n    int32_t wc2; // bp-16468, 0x402a20\n    int64_t v148 = function_407320(&wc2, v139, v140); // 0x402c57\n    int64_t v149; // 0x402a20\n    int64_t v150; // 0x402a20\n    int64_t v151; // 0x402a20\n    int64_t v152; // 0x402a20\n    int64_t v153; // 0x402a20\n    int64_t v154; // 0x402a20\n    int64_t v155; // 0x402a20\n    int64_t v156; // 0x402a20\n    int64_t v157; // 0x402a20\n    int64_t v158; // 0x402a20\n    int64_t v159; // 0x402a20\n    int64_t v160; // 0x402a20\n    int64_t v161; // 0x402a20\n    int64_t v162; // 0x402a20\n    int64_t v163; // 0x402a20\n    int64_t v164; // 0x402a20\n    int64_t v165; // 0x402a20\n    int64_t v166; // 0x402a20\n    int64_t v167; // 0x402a20\n    int64_t v168; // 0x402a20\n    int64_t v169; // 0x402a20\n    int64_t v170; // 0x402a20\n    int64_t v171; // 0x402a20\n    int64_t v172; // 0x402a20\n    int64_t v173; // 0x402a20\n    int64_t v174; // 0x402a20\n    int64_t wc; // 0x402a20\n    int64_t v57; // bp-16456, 0x402a20\n    int64_t v175; // 0x402a20\n    int64_t v176; // 0x402a20\n    int64_t v177; // 0x402a20\n    int64_t v178; // 0x402a20\n    int64_t v179; // 0x402a20\n    int64_t v180; // 0x402a20\n    int64_t v181; // 0x402a20\n    int64_t v182; // 0x402a20\n    int64_t v183; // 0x402a20\n    int64_t v184; // 0x402a20\n    int64_t v185; // 0x402a20\n    int64_t v186; // 0x402a20\n    switch (v148) {\n        case -2: {\n            // 0x402f20\n            ps = v147;\n            v175 = v146;\n            v179 = v145;\n            v183 = v144;\n            v169 = v143;\n            v165 = v142;\n            v150 = v141;\n            v154 = 0;\n            v161 = 1;\n            if (v140 != 0) {\n                int64_t v187 = v140 != 0x4000 ? v140 : 0x3fff;\n                __memmove_chk(&v57, (int64_t *)(v139 + (int64_t)(v140 == 0x4000)), (int32_t)v187, 0x4001);\n                v175 = v146;\n                v179 = v145;\n                v183 = v144;\n                v169 = v143;\n                v165 = v142;\n                v150 = v141;\n                v154 = v187;\n                v161 = 1;\n            }\n            goto lab_0x402b60;\n        }\n        case -1: {\n            // 0x402f08\n            v177 = v146;\n            v181 = v145;\n            v185 = v144;\n            v171 = v143;\n            v167 = v142;\n            v152 = v141;\n            v156 = v140 - 1;\n            v159 = v139 + 1;\n            v163 = 1;\n            goto lab_0x402c30;\n        }\n        default: {\n            int64_t v188 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0; // 0x402c86\n            int64_t v189 = v141 + 1; // 0x402c8a\n            if (v148 != 0) {\n                // 0x402ef8\n                v149 = v148;\n                v176 = v146;\n                v180 = v145;\n                v184 = v144;\n                v173 = wc2;\n                v170 = v143;\n                v166 = v142;\n                v151 = v189;\n                v155 = v140;\n                v158 = v139;\n                v162 = v188;\n                goto lab_0x402bd2;\n            } else {\n                // 0x402c97\n                wc2 = 0;\n                v178 = v146;\n                v182 = v145;\n                v186 = v144;\n                v174 = 0;\n                v172 = v143;\n                v168 = v142;\n                wc = 0;\n                v153 = v189;\n                v157 = v140 - 1;\n                v160 = v139 + 1;\n                v164 = v188;\n                goto lab_0x402cab;\n            }\n        }\n    }\n  lab_0x402ba8:;\n    // 0x402ba8\n    int64_t v92; // 0x402a20\n    int64_t v190 = v92;\n    int64_t v91; // 0x402a20\n    int64_t v191 = v91;\n    int64_t v90; // 0x402a20\n    int64_t v192 = v90;\n    int64_t v89; // 0x402a20\n    int64_t v193 = v89;\n    int64_t v88; // 0x402a20\n    int64_t v194 = v88;\n    int64_t v87; // 0x402a20\n    int64_t v195 = v87;\n    int64_t v86; // 0x402a20\n    int64_t v196 = v86;\n    int64_t v85; // 0x402a20\n    int64_t v197 = v85;\n    unsigned char v198 = *(char *)v190; // 0x402ba8\n    int32_t v199 = *(int32_t *)((int64_t)(4 * v198 / 32) + (int64_t)&g3); // 0x402bb4\n    v94 = v197;\n    v95 = v196;\n    v96 = v195;\n    v97 = v194;\n    v98 = v193;\n    v99 = v192;\n    v100 = v191;\n    v101 = v190;\n    int64_t v93; // 0x402a20\n    if ((1 << (int32_t)(v198 % 32) & v199) == 0) {\n        goto lab_0x402c42;\n    } else {\n        // 0x402bc5\n        wc2 = v198;\n        v149 = 1;\n        v176 = v197;\n        v180 = v196;\n        v184 = v195;\n        v173 = v198;\n        v170 = v194;\n        v166 = v193;\n        v151 = v192 + 1;\n        v155 = v191;\n        v158 = v190;\n        v162 = v93;\n        goto lab_0x402bd2;\n    }\n  lab_0x402b60:;\n    // 0x402b60\n    int64_t v82; // 0x402b75\n    int64_t v65 = v82 + v81; // 0x402a20\n    int64_t v66 = v175; // 0x402a20\n    int64_t v67 = v179; // 0x402a20\n    int64_t v68 = v183; // 0x402a20\n    int64_t v69 = v169; // 0x402a20\n    int64_t v70 = v165; // 0x402a20\n    int64_t v71 = v150; // 0x402a20\n    int64_t v72 = v154; // 0x402a20\n    int64_t v73 = v161; // 0x402a20\n    goto lab_0x402b60_2;\n  lab_0x402c30:;\n    int64_t v200 = v163;\n    int64_t v201 = v156;\n    int64_t v202 = v152;\n    int64_t v203 = v167;\n    int64_t v204 = v171;\n    int64_t v205 = v185;\n    int64_t v206 = v181;\n    int64_t v207 = v177;\n    v175 = v207;\n    v179 = v206;\n    v183 = v205;\n    v169 = v204;\n    v165 = v203;\n    v150 = v202;\n    v154 = 0;\n    v161 = v200;\n    if (v201 == 0) {\n        goto lab_0x402b60;\n    } else {\n        // 0x402c39\n        v85 = v207;\n        v86 = v206;\n        v87 = v205;\n        v88 = v204;\n        v89 = v203;\n        v90 = v202;\n        v91 = v201;\n        v92 = v159;\n        v93 = v200;\n        v94 = v207;\n        v95 = v206;\n        v96 = v205;\n        v97 = v204;\n        v98 = v203;\n        v99 = v202;\n        v100 = v201;\n        v101 = v159;\n        if ((char)v200 == 0) {\n            goto lab_0x402ba8;\n        } else {\n            goto lab_0x402c42;\n        }\n    }\n  lab_0x402bd2:;\n    int64_t v208 = v162;\n    int64_t v209 = v151;\n    int64_t v210 = v166;\n    int64_t v211 = v170;\n    int64_t v212 = v173;\n    int64_t v213 = v184;\n    int64_t v214 = v180;\n    int64_t v215 = v176;\n    int64_t v216 = v212 + 0xfffffff7; // 0x402bd2\n    int64_t v217 = v158 + v149; // 0x402bd5\n    int64_t v218 = v155 - v149; // 0x402bd8\n    g61 = v216 & 0xffffffff;\n    int64_t v219 = v213; // 0x402be4\n    int64_t v220 = v215; // 0x402be4\n    int64_t v221 = v213; // 0x402be4\n    int64_t v222 = v210; // 0x402be4\n    switch ((int32_t)v216) {\n        case 0: {\n            // 0x402d00\n            v220 = v215;\n            v221 = v213;\n            v222 = v210 + 8 & -8;\n            goto lab_0x402c29;\n        }\n        case 1: {\n            // 0x402c10\n            v219 = v213 + 1;\n            goto lab_0x402c16;\n        }\n        case 2: {\n            goto lab_0x402c29;\n        }\n        case 3: {\n            goto lab_0x402c16;\n        }\n        case 4: {\n            goto lab_0x402c16;\n        }\n        case 23: {\n            // 0x402cf0\n            v220 = v215;\n            v221 = v213;\n            v222 = v210 + 1;\n            goto lab_0x402c29;\n        }\n        default: {\n            // 0x403154\n            v178 = v215;\n            v182 = v214;\n            v186 = v213;\n            v174 = v212;\n            v172 = v211;\n            v168 = v210;\n            wc = v212 & 0xffffffff;\n            v153 = v209;\n            v157 = v218;\n            v160 = v217;\n            v164 = v208;\n            goto lab_0x402cab;\n        }\n    }\n  lab_0x402cab:;\n    int64_t v223 = v164;\n    int64_t v224 = v160;\n    int64_t v225 = v157;\n    int64_t v226 = v153;\n    int64_t v227 = v168;\n    int64_t v228 = v186;\n    int64_t v229 = v182;\n    int64_t v230 = v178;\n    v177 = v230;\n    v181 = v229;\n    v185 = v228;\n    v171 = v172;\n    v167 = v227;\n    v152 = v226;\n    v156 = v225;\n    v159 = v224;\n    v163 = v223;\n    if (iswprint((int32_t)wc) == 0) {\n        goto lab_0x402c30;\n    } else {\n        int32_t v231 = wcwidth((int32_t)v174); // 0x402cc2\n        v177 = v230;\n        v181 = v229;\n        v185 = v228;\n        v171 = 1;\n        v167 = (v231 >= 0 == (v231 != 0) ? (int64_t)v231 : 0) + v227;\n        v152 = v226;\n        v156 = v225;\n        v159 = v224;\n        v163 = v223;\n        if (iswspace(wc2) != 0) {\n            goto lab_0x402c29;\n        } else {\n            goto lab_0x402c30;\n        }\n    }\n  lab_0x402c29:\n    // 0x402c29\n    v177 = v220;\n    v181 = v211 + v214;\n    v185 = v221;\n    v171 = 0;\n    v167 = v222;\n    v152 = v209;\n    v156 = v218;\n    v159 = v217;\n    v163 = v208;\n    goto lab_0x402c30;\n  lab_0x402c16:;\n    int64_t v232 = v215 >= v210 ? v215 : v210; // 0x402c1e\n    v220 = v232;\n    v221 = v219;\n    v222 = 0;\n    goto lab_0x402c29;\n  lab_0x402f98:;\n    int64_t v54 = v47;\n    unsigned char v55 = *(char *)&g40; // 0x402fa8\n    int64_t v56 = v55 > v4 ? v42 : v48; // 0x402fb3\n    function_402850(v44, v51, v56, v42, v54, a2);\n    g47 += v44;\n    g46 += v51;\n    g45 += v56;\n    g44 += v42;\n    if (g43 < v54) {\n        // 0x402fef\n        g43 = v54;\n    }\n    // 0x402ff6\n    return v53 & 0xffffffff;\n  lab_0x402b02:\n    // 0x402b02\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x402d0d\n        v32 = &v57;\n        int64_t v58 = 0; // 0x402d3c\n        int64_t v59 = 0; // 0x402d3c\n        int64_t v60 = 0; // 0x402d3c\n        int64_t v61 = 0; // 0x402d3c\n        int64_t v62 = 0; // 0x402d3c\n        int64_t v63 = 0; // 0x402d3c\n        while (true) {\n          lab_0x402d40:\n            // 0x402d40\n            v45 = v63;\n            v49 = v62;\n            v50 = v61;\n            v46 = v60;\n            v43 = v59;\n            v41 = v58;\n            v33 = function_405ba0((int32_t)fd, v32, 0x4000);\n            v52 = 1;\n            switch (v33) {\n                case 0: {\n                    goto lab_0x403053;\n                }\n                case -1: {\n                    // 0x403069\n                    error(0, *__errno_location(), \"%s\", (char *)function_405650(0, 3, v1));\n                    v52 = 0;\n                    goto lab_0x403053;\n                }\n                default: {\n                    // 0x402d66\n                    v27 = v43;\n                    v28 = v46;\n                    v29 = v50;\n                    v20 = v32;\n                    v30 = v49;\n                    v31 = v45;\n                    while (true) {\n                      lab_0x402d78:\n                        // 0x402d78\n                        v34 = v31;\n                        v14 = v30;\n                        v15 = v29;\n                        v35 = v28;\n                        int64_t v36 = v27;\n                        unsigned char v37 = *(char *)v20; // 0x402d7c\n                        g62 = v37 - 9;\n                        v38 = v36;\n                        v10 = v36;\n                        v12 = v35;\n                        v18 = v34;\n                        switch (v37) {\n                            case 9: {\n                                // 0x402dc0\n                                v10 = v36;\n                                v12 = v35;\n                                v18 = v34 + 8 & -8;\n                                goto lab_0x402da8;\n                            }\n                            case 10: {\n                                // 0x402d98\n                                v38 = v36 + 1;\n                                goto lab_0x402d9e;\n                            }\n                            case 11: {\n                                goto lab_0x402da8;\n                            }\n                            case 12: {\n                                goto lab_0x402d9e;\n                            }\n                            case 13: {\n                                goto lab_0x402d9e;\n                            }\n                            case 32: {\n                                // 0x402db8\n                                v10 = v36;\n                                v12 = v35;\n                                v18 = v34 + 1;\n                                goto lab_0x402da8;\n                            }\n                            default: {\n                                int16_t v39 = *(int16_t *)(2 * (int64_t)v37 + (int64_t)*__ctype_b_loc()); // 0x402de2\n                                if ((v39 & 0x4000) == 0) {\n                                    goto lab_0x402dae;\n                                } else {\n                                    int64_t v40 = v34 + 1; // 0x402deb\n                                    v10 = v36;\n                                    v12 = v35;\n                                    v18 = v40;\n                                    v11 = v36;\n                                    v13 = v35;\n                                    v16 = v15;\n                                    v17 = 1;\n                                    v19 = v40;\n                                    if ((v39 & 0x2000) != 0) {\n                                        goto lab_0x402da8;\n                                    } else {\n                                        goto lab_0x402dae;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                  lab_0x402d40_2:\n                    // 0x402d40\n                    v58 = v33 + v41;\n                    v59 = v26;\n                    v60 = v25;\n                    v61 = v24;\n                    v62 = v23;\n                    v63 = v22;\n                    goto lab_0x402d40;\n                }\n            }\n        }\n        goto lab_0x403053;\n    } else {\n        // 0x402b11\n        ps = 0;\n        int64_t v64 = &v57; // 0x402b50\n        v65 = 0;\n        v66 = 0;\n        v67 = 0;\n        v68 = 0;\n        v69 = 0;\n        v70 = 0;\n        v71 = 0;\n        v72 = 0;\n        v73 = 0;\n        while (true) {\n          lab_0x402b60_2:;\n            int64_t v74 = v72;\n            v75 = v71;\n            v76 = v70;\n            v77 = v69;\n            v78 = v68;\n            v79 = v67;\n            v80 = v66;\n            v81 = v65;\n            v82 = function_405ba0((int32_t)fd, v74 + v64, 0x4000 - v74);\n            v83 = 1;\n            switch (v82) {\n                case 0: {\n                    goto lab_0x402f7e;\n                }\n                case -1: {\n                    // 0x40300b\n                    error(0, *__errno_location(), \"%s\", (char *)function_405650(0, 3, v1));\n                    v83 = 0;\n                    goto lab_0x402f7e;\n                }\n                default: {\n                    int64_t v84 = v82 + v74; // 0x402b92\n                    v85 = v80;\n                    v86 = v79;\n                    v87 = v78;\n                    v88 = v77;\n                    v89 = v76;\n                    v90 = v75;\n                    v91 = v84;\n                    v92 = v64;\n                    v93 = v73;\n                    v94 = v80;\n                    v95 = v79;\n                    v96 = v78;\n                    v97 = v77;\n                    v98 = v76;\n                    v99 = v75;\n                    v100 = v84;\n                    v101 = v64;\n                    if ((char)v73 != 0) {\n                        goto lab_0x402c42;\n                    } else {\n                        goto lab_0x402ba8;\n                    }\n                }\n            }\n        }\n        goto lab_0x402f7e;\n    }\n  lab_0x402aa8:;\n    int32_t v102 = 0; // 0x402aa8\n    int32_t v103 = v102; // 0x402aac\n    if (v102 >= 0 == (v102 != 0)) {\n        int32_t v104 = __fxstat(1, (int32_t)fd, (struct stat *)(a3 + 8)); // 0x4030b5\n        *(int32_t *)a3 = v104;\n        v103 = v104;\n    }\n    int64_t v105 = 0; // 0x402ab4\n    int64_t v106; // 0x402a20\n    bool v107; // 0x402a20\n    uint64_t v108; // 0x402e55\n    if (v103 == 0) {\n        // 0x402e42\n        v105 = 0;\n        if ((*(int32_t *)(a3 + 32) & 0xd000) != 0x8000) {\n            goto lab_0x402ac3;\n        } else {\n            // 0x402e55\n            v108 = *(int64_t *)(a3 + 56);\n            v105 = 0;\n            if (v108 < 0) {\n                goto lab_0x402ac3;\n            } else {\n                uint64_t v109 = (int64_t)g35; // 0x402e67\n                if (a4 == -1) {\n                    int32_t v110 = lseek((int32_t)fd, 0, SEEK_CUR); // 0x403113\n                    int64_t v111 = v110; // 0x403113\n                    if (v108 % v109 == 0) {\n                        // 0x403165\n                        v106 = v111;\n                        v107 = v110 < 0;\n                        goto lab_0x402e8c;\n                    } else {\n                        // 0x403128\n                        v42 = (v108 < v111 ? v111 : v108) - v111;\n                        v44 = 0;\n                        v47 = 0;\n                        v48 = 0;\n                        v51 = 0;\n                        v53 = 1;\n                        goto lab_0x402f98;\n                    }\n                } else {\n                    // 0x402e78\n                    v106 = 0;\n                    v107 = false;\n                    v42 = v108;\n                    v44 = 0;\n                    v47 = 0;\n                    v48 = 0;\n                    v51 = 0;\n                    v53 = 1;\n                    if (v108 % v109 != 0) {\n                        goto lab_0x402f98;\n                    } else {\n                        goto lab_0x402e8c;\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x402ac3;\n    }\n  lab_0x40319a:\n    // 0x40319a\n    if (*(char *)&g42 == 0) {\n        goto lab_0x402aa8;\n    } else {\n        // 0x40319a\n        v5 = fd;\n        goto lab_0x4031b0;\n    }\n  lab_0x402ac3:;\n    int64_t v112 = &v57; // 0x402ad0\n    int32_t fd3 = fd; // 0x402ad5\n    posix_fadvise(fd3, 0, 0, POSIX_FADV_SEQUENTIAL);\n    int64_t v113 = function_405ba0(fd3, v112, 0x4000); // 0x402e17\n    int64_t v114 = v113; // 0x402e1f\n    v42 = v105;\n    v44 = 0;\n    v47 = 0;\n    v48 = 0;\n    v51 = 0;\n    v53 = 1;\n    if (v113 != 0) {\n        int64_t v115 = v105;\n        while (v114 != -1) {\n            int64_t v116 = v115 + v114; // 0x402e0a\n            int64_t v117 = function_405ba0(fd3, v112, 0x4000); // 0x402e17\n            v114 = v117;\n            v42 = v116;\n            v44 = 0;\n            v47 = 0;\n            v48 = 0;\n            v51 = 0;\n            v53 = 1;\n            if (v117 == 0) {\n                goto lab_0x402f98;\n            }\n            v115 = v116;\n        }\n        // 0x4030c1\n        error(0, *__errno_location(), \"%s\", (char *)function_405650(0, 3, v1));\n        v42 = v115;\n        v44 = 0;\n        v47 = 0;\n        v48 = 0;\n        v51 = 0;\n        v53 = v6;\n    }\n    goto lab_0x402f98;\n  lab_0x4031b0:;\n    int64_t v118 = &v57; // 0x4031d3\n    int64_t v119 = 0; // 0x4031df\n    int64_t v120 = 0; // 0x4031df\n    char v121 = 0; // 0x4031df\n    while (true) {\n      lab_0x4031e0:;\n        int64_t v122 = v120;\n        int64_t v123 = v119;\n        int64_t v124 = function_405ba0(v5, v118, 0x4000); // 0x4031ec\n        v42 = v123;\n        v44 = v122;\n        v47 = 0;\n        v48 = 0;\n        v51 = 0;\n        v53 = 1;\n        switch (v124) {\n            case 0: {\n                goto lab_0x402f98;\n            }\n            case -1: {\n                // 0x4032d8\n                error(0, *__errno_location(), \"%s\", (char *)function_405650(0, 3, v1));\n                v42 = v123;\n                v44 = v122;\n                v47 = 0;\n                v48 = 0;\n                v51 = 0;\n                v53 = v6;\n                goto lab_0x402f98;\n            }\n            default: {\n                int64_t v125 = v124 + v118; // 0x403209\n                int64_t v126 = v122; // 0x40321b\n                int64_t v127; // 0x402a20\n                if (v121 != 0) {\n                    int64_t v128 = function_4073a0(v118, 10, v124); // 0x403283\n                    v127 = v122;\n                    int64_t v129 = v128; // 0x40328b\n                    int64_t v130 = v122; // 0x40328b\n                    if (v128 != 0) {\n                        int64_t v131 = v129 + 1; // 0x403270\n                        int64_t v132 = v130 + 1; // 0x403274\n                        int64_t v133 = function_4073a0(v131, 10, v125 - v131); // 0x403283\n                        v127 = v132;\n                        v130 = v132;\n                        while (v133 != 0) {\n                            // 0x403270\n                            v131 = v133 + 1;\n                            v132 = v130 + 1;\n                            v133 = function_4073a0(v131, 10, v125 - v131);\n                            v127 = v132;\n                            v130 = v132;\n                        }\n                    }\n                } else {\n                    int64_t v134 = v118 + 1; // 0x403230\n                    int64_t v135 = v126 + (int64_t)(*(char *)v118 == 10); // 0x40323d\n                    v126 = v135;\n                    int64_t v136 = v134; // 0x403243\n                    v127 = v135;\n                    while (v125 != v134) {\n                        // 0x403230\n                        v134 = v136 + 1;\n                        v135 = v126 + (int64_t)(*(char *)v136 == 10);\n                        v126 = v135;\n                        v136 = v134;\n                        v127 = v135;\n                    }\n                }\n                // 0x4031e0\n                v119 = v124 + v123;\n                v120 = v127;\n                v121 = 1;\n                goto lab_0x4031e0;\n            }\n        }\n    }\n    goto lab_0x402f98;\n  lab_0x402e8c:;\n    int64_t v137 = *(int64_t *)(a3 + 64); // 0x402e96\n    int64_t offset = v108 - v108 % (v137 < 0x2000000000000001 ? v137 + 1 : 513); // 0x402eb6\n    v105 = 0;\n    if (!v107 && offset > v106) {\n        int64_t v138 = lseek((int32_t)fd, (int32_t)offset, SEEK_CUR) < 0 ? 0 : offset - v106;\n        v105 = v138;\n    }\n    goto lab_0x402ac3;\n}\n"
        },
        {
            "funcName": "function_403350",
            "funcStartAddr": "403350",
            "funcEndAddr": "4036ad",
            "decompiledFuncCode": "int64_t function_403350(int64_t a1) {\n    int32_t status = a1; // 0x403366\n    if (status != 0) {\n        // 0x40336a\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40338f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x403396\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n  or:  %s [OPTION]... --files0-from=F\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print newline, word, and byte counts for each FILE, and a total line if\\nmore than one FILE is specified.  A word is a non-zero-length sequence of\\ncharacters delimited by white space.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe options below may be used to select which counts are printed, always in\\nthe following order: newline, word, character, byte, maximum line length.\\n  -c, --bytes            print the byte counts\\n  -m, --chars            print the character counts\\n  -l, --lines            print the newline counts\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --files0-from=F    read input from the files specified by\\n                           NUL-terminated names in file F;\\n                           If F is - then read names from standard input\\n  -L, --max-line-length  print the maximum display width\\n  -w, --words            print the word counts\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    int64_t v1 = &g1; // bp-136, 0x403489\n    bool v2; // 0x403350\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x403510\n    int64_t v6 = *(int64_t *)v5; // 0x403514\n    int64_t v7 = 3; // 0x40351a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"wc\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x403526\n        char v11 = *(char *)v9; // 0x403526\n        char v12 = v11; // 0x403526\n        bool v13 = false; // 0x403526\n        while (v10 == v11) {\n            // 0x40351c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x403526\n            int64_t v15 = v8 + v3; // 0x403526\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x403532\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x403532\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x403644;\n        } else {\n            // 0x40362e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403683\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403594;\n            } else {\n                goto lab_0x403644;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403594;\n        } else {\n            // 0x40357a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403683\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403594;\n            } else {\n                goto lab_0x403594;\n            }\n        }\n    }\n  lab_0x403644:\n    // 0x403644\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4035d4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40338f\n    exit(status);\n    // UNREACHABLE\n  lab_0x403594:\n    // 0x403594\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4035d4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40338f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "4036d4",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1) {\n    int64_t * mem = malloc(48); // 0x4036b9\n    int64_t result = (int64_t)mem; // 0x4036b9\n    if (mem != NULL) {\n        // 0x4036c3\n        *mem = 0;\n        *(int64_t *)(result + 32) = a1;\n        *(int64_t *)(result + 40) = a1;\n    }\n    // 0x4036d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4036e0",
            "funcStartAddr": "4036e0",
            "funcEndAddr": "403718",
            "decompiledFuncCode": "int64_t function_4036e0(int64_t a1) {\n    int64_t * mem = malloc(48); // 0x4036e9\n    int64_t result = (int64_t)mem; // 0x4036e9\n    if (mem != NULL) {\n        // 0x4036f3\n        *mem = a1;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 24) = 0;\n        *(int64_t *)(result + 8) = 0;\n        *(int64_t *)(result + 32) = 0;\n    }\n    // 0x403716\n    return result;\n}\n"
        },
        {
            "funcName": "function_403720",
            "funcStartAddr": "403720",
            "funcEndAddr": "4037a7",
            "decompiledFuncCode": "int64_t function_403720(int64_t stream, int64_t a2, int64_t a3) {\n    if (stream == 0) {\n        int64_t v1 = *(int64_t *)40; // 0x403760\n        int64_t result = *(int64_t *)v1; // 0x403764\n        if (result == 0) {\n            // 0x4037a0\n            *(int32_t *)a2 = 2;\n            return 0;\n        }\n        // 0x40376c\n        *(int32_t *)a2 = 1;\n        *(int64_t *)40 = v1 + 8;\n        return result;\n    }\n    int64_t lineptr = stream + 16; // 0x403736\n    int64_t result2; // 0x403720\n    if (getdelim((char **)lineptr, (int32_t *)(stream + 24), 0, (struct _IO_FILE *)stream) < 0) {\n        // 0x403780\n        *(int32_t *)a2 = feof((struct _IO_FILE *)lineptr) == 0 ? 4 : 2;\n        result2 = 0;\n    } else {\n        // 0x403748\n        *(int32_t *)a2 = 1;\n        int64_t * v2 = (int64_t *)(stream + 8); // 0x403753\n        *v2 = *v2 + 1;\n        result2 = *(int64_t *)lineptr;\n    }\n    // 0x403758\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4037b0",
            "funcStartAddr": "4037b0",
            "funcEndAddr": "4037cd",
            "decompiledFuncCode": "int64_t function_4037b0(int64_t a1) {\n    if (a1 == 0) {\n        // 0x4037c0\n        return *(int64_t *)40 - *(int64_t *)32 >> 3;\n    }\n    // 0x4037b6\n    return *(int64_t *)(a1 + 8);\n}\n"
        },
        {
            "funcName": "function_4037d0",
            "funcStartAddr": "4037d0",
            "funcEndAddr": "4037ec",
            "decompiledFuncCode": "int64_t function_4037d0(int64_t a1) {\n    if (a1 != 0) {\n        // 0x4037da\n        free((int64_t *)*(int64_t *)(a1 + 16));\n    }\n    // 0x4037e3\n    free((int64_t *)a1);\n    return &g64;\n}\n"
        },
        {
            "funcName": "function_4037f0",
            "funcStartAddr": "4037f0",
            "funcEndAddr": "4037f8",
            "decompiledFuncCode": "int64_t function_4037f0(int64_t a1) {\n    // 0x4037f0\n    g49 = a1;\n    int64_t result; // 0x4037f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_403800",
            "funcStartAddr": "403800",
            "funcEndAddr": "403808",
            "decompiledFuncCode": "int64_t function_403800(int64_t a1) {\n    // 0x403800\n    g48 = a1;\n    int64_t result; // 0x403800\n    return result;\n}\n"
        },
        {
            "funcName": "function_403810",
            "funcStartAddr": "403810",
            "funcEndAddr": "4038ae",
            "decompiledFuncCode": "int64_t function_403810(void) {\n    // 0x403810\n    int32_t * err_num; // 0x403826\n    if ((int32_t)function_4077e0((int64_t)g28) == 0) {\n        goto lab_0x40383c;\n    } else {\n        // 0x403826\n        err_num = __errno_location();\n        if (g48 == 0) {\n            goto lab_0x403853;\n        } else {\n            // 0x403837\n            if (*err_num != 32) {\n                goto lab_0x403853;\n            } else {\n                goto lab_0x40383c;\n            }\n        }\n    }\n  lab_0x40383c:;\n    int64_t result = function_4077e0((int64_t)g31); // 0x403843\n    if ((int32_t)result == 0) {\n        // 0x40384c\n        return result;\n    }\n    // 0x40388e\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x403853:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40385f\n    if (g49 == 0) {\n        // 0x403899\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403873\n        error(0, *err_num, \"%s: %s\", (char *)function_405620((int64_t)g49), v1);\n    }\n    // 0x40388e\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4038b0",
            "funcStartAddr": "4038b0",
            "funcEndAddr": "4038b5",
            "decompiledFuncCode": "int64_t function_4038b0(int64_t fd, int32_t offset, int32_t length, int64_t advice) {\n    // 0x4038b0\n    return posix_fadvise((int32_t)fd, offset, length, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_4038c0",
            "funcStartAddr": "4038c0",
            "funcEndAddr": "4038e1",
            "decompiledFuncCode": "int64_t function_4038c0(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x4038c0\n    if (stream == 0) {\n        // 0x4038e0\n        int64_t result; // 0x4038c0\n        return result;\n    }\n    // 0x4038c5\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "403938",
            "decompiledFuncCode": "int64_t function_4038f0(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x4038f0\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403902\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40390b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x403934\n    return result;\n}\n"
        },
        {
            "funcName": "function_403940",
            "funcStartAddr": "403940",
            "funcEndAddr": "403961",
            "decompiledFuncCode": "int64_t function_403940(int64_t a1) {\n    int32_t wc = a1; // 0x403943\n    int32_t result = wcwidth(wc); // 0x403943\n    if (result < 0) {\n        // 0x403950\n        return iswcntrl(wc) == 0;\n    }\n    // 0x40394c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403970",
            "funcStartAddr": "403970",
            "funcEndAddr": "4039c6",
            "decompiledFuncCode": "int64_t function_403970(int64_t a1, int64_t a2) {\n    // 0x403970\n    *(int64_t *)a1 = a2;\n    char v1 = *(char *)(a2 + 16); // 0x40398f\n    *(int64_t *)(a1 + 8) = *(int64_t *)(a2 + 8);\n    *(char *)(a1 + 16) = v1;\n    int64_t result = 0; // 0x40399c\n    if (v1 != 0) {\n        uint32_t v2 = *(int32_t *)(a2 + 20); // 0x40399e\n        *(int32_t *)(a1 + 20) = v2;\n        result = v2;\n    }\n    // 0x4039a4\n    return result;\n}\n"
        },
        {
            "funcName": "function_4039d0",
            "funcStartAddr": "4039d0",
            "funcEndAddr": "4039e7",
            "decompiledFuncCode": "int64_t function_4039d0(uint64_t a1) {\n    uint32_t v1 = *(int32_t *)((a1 / 8 & 28) + (int64_t)&g3); // 0x4039da\n    return (v1 >> (int32_t)a1 % 32) % 2;\n}\n"
        },
        {
            "funcName": "function_4039f0",
            "funcStartAddr": "4039f0",
            "funcEndAddr": "403aab",
            "decompiledFuncCode": "int64_t function_4039f0(void) {\n    // 0x4039f0\n    int128_t v1; // 0x4039f0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int128_t v4 = v1;\n    int32_t v5 = sysconf(_SC_NPROCESSORS_ONLN); // 0x4039fc\n    __asm_pxor(v4, v4);\n    int64_t v6 = __asm_movsd(__asm_cvtsi2sd((int64_t)v5)); // 0x403a0f\n    int32_t v7 = sysconf(_SC_PAGESIZE); // 0x403a15\n    int128_t v8 = __asm_movsd_3(v6); // 0x403a1a\n    int128_t v9 = __asm_pxor(v2, v2); // 0x403a20\n    __asm_comisd(v8, v9);\n    int64_t v10; // 0x4039f0\n    if ((uint64_t)v10 >= 136) {\n        int64_t result = v7; // 0x403a15\n        __asm_pxor(v3, v3);\n        int128_t v11 = __asm_cvtsi2sd(result); // 0x403a2e\n        __asm_comisd(v11, v9);\n        // 0x403a80\n        __asm_mulsd_4(v8, v11);\n        return result;\n    }\n    // 0x403a39\n    int64_t v12; // bp-120, 0x4039f0\n    int32_t result2 = sysinfo((struct sysinfo *)&v12); // 0x403a3e\n    int128_t v13 = __asm_movsd_3(0x4190000000000000); // 0x403a43\n    if (result2 != 0) {\n        // 0x403a4f\n        return result2;\n    }\n    // 0x403a60\n    int32_t v14; // 0x4039f0\n    uint64_t v15 = (int64_t)v14; // 0x403a60\n    int128_t v16; // 0x4039f0\n    if (v14 < 0) {\n        // 0x403a90\n        __asm_pxor(v13, v13);\n        int128_t v17 = __asm_cvtsi2sd(v15 / 2 | v15 % 2); // 0x403aa0\n        v16 = __asm_addsd(v17, v17);\n    } else {\n        // 0x403a6a\n        __asm_pxor(v13, v13);\n        v16 = __asm_cvtsi2sd(v15);\n    }\n    int64_t result3 = v14; // 0x403a73\n    __asm_pxor(v3, v3);\n    // 0x403a80\n    __asm_mulsd_4(v16, __asm_cvtsi2sd(result3));\n    return result3;\n}\n"
        },
        {
            "funcName": "function_403ab0",
            "funcStartAddr": "403ab0",
            "funcEndAddr": "403ba6",
            "decompiledFuncCode": "int64_t function_403ab0(void) {\n    // 0x403ab0\n    int128_t v1; // 0x403ab0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int128_t v4 = v1;\n    int32_t v5 = sysconf(_SC_PHYS_PAGES); // 0x403abc\n    __asm_pxor(v4, v4);\n    int64_t v6 = __asm_movsd(__asm_cvtsi2sd((int64_t)v5)); // 0x403acf\n    int32_t v7 = sysconf(_SC_PAGESIZE); // 0x403ad5\n    int128_t v8 = __asm_movsd_3(v6); // 0x403ada\n    int128_t v9 = __asm_pxor(v2, v2); // 0x403ae0\n    __asm_comisd(v8, v9);\n    int64_t v10; // 0x403ab0\n    if ((uint64_t)v10 >= 136) {\n        int64_t result = v7; // 0x403ad5\n        __asm_pxor(v3, v3);\n        int128_t v11 = __asm_cvtsi2sd(result); // 0x403aee\n        __asm_comisd(v11, v9);\n        // 0x403b3e\n        __asm_mulsd_4(v8, v11);\n        return result;\n    }\n    // 0x403af9\n    int64_t v12; // bp-120, 0x403ab0\n    if (sysinfo((struct sysinfo *)&v12) != 0) {\n        int64_t result2 = function_4039f0(); // 0x403b50\n        __asm_mulsd(v8, 0x3fd0000000000000);\n        return result2;\n    }\n    // 0x403b07\n    int32_t v13; // 0x403ab0\n    uint64_t v14 = (int64_t)v13; // 0x403b07\n    int64_t v15; // 0x403ab0\n    int64_t v16; // 0x403ab0\n    int128_t v17; // 0x403ab0\n    int128_t v18; // 0x403ab0\n    if (v13 < 0) {\n        // 0x403b68\n        __asm_pxor(v8, v8);\n        int64_t v19 = v13; // 0x403b78\n        int128_t v20 = __asm_cvtsi2sd(v14 / 2 | v14 % 2); // 0x403b7d\n        int128_t v21 = __asm_addsd(v20, v20); // 0x403b82\n        v17 = v21;\n        v15 = v19;\n        v18 = v21;\n        v16 = v19;\n        if (v13 >= 0) {\n            goto lab_0x403b24;\n        } else {\n            goto lab_0x403b8b;\n        }\n    } else {\n        // 0x403b11\n        __asm_pxor(v8, v8);\n        int128_t v22 = __asm_cvtsi2sd(v14); // 0x403b15\n        int64_t v23 = v13; // 0x403b1a\n        v17 = v22;\n        v15 = v23;\n        v18 = v22;\n        v16 = v23;\n        if (v13 < 0) {\n            goto lab_0x403b8b;\n        } else {\n            goto lab_0x403b24;\n        }\n    }\n  lab_0x403b24:\n    // 0x403b24\n    __asm_pxor(v3, v3);\n    int128_t v24 = v17; // 0x403b28\n    int128_t v25 = __asm_cvtsi2sd(v15); // 0x403b28\n    goto lab_0x403b2d;\n  lab_0x403b8b:;\n    uint64_t v28 = v16;\n    __asm_pxor(v3, v3);\n    int128_t v29 = __asm_cvtsi2sd(v28 / 2 | v28 % 2); // 0x403b9b\n    v24 = v18;\n    v25 = __asm_addsd(v29, v29);\n    goto lab_0x403b2d;\n  lab_0x403b2d:;\n    int128_t v26 = v25;\n    int64_t result3 = v13; // 0x403b2d\n    int128_t v27 = __asm_addsd(v24, v26); // 0x403b31\n    __asm_pxor(v26, v26);\n    // 0x403b3e\n    __asm_mulsd_4(v27, __asm_cvtsi2sd(result3));\n    return result3;\n}\n"
        },
        {
            "funcName": "function_403bb0",
            "funcStartAddr": "403bb0",
            "funcEndAddr": "403c49",
            "decompiledFuncCode": "int64_t function_403bb0(int64_t str) {\n    // 0x403bb0\n    if (str == 0) {\n        // 0x403c29\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x403bbe\n    int64_t result = (int64_t)found_char_pos; // 0x403bbe\n    if (found_char_pos == NULL) {\n        // 0x403c19\n        g50 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403bc8\n    if (v1 - str < 7) {\n        // 0x403c19\n        g50 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x403bd8\n    bool v2; // 0x403bb0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403bb0\n    int64_t v5 = result - 6; // 0x403bb0\n    int64_t v6 = 7; // 0x403be6\n    unsigned char v7 = *(char *)v5; // 0x403be6\n    char v8 = *(char *)v4; // 0x403be6\n    char v9 = v8; // 0x403be6\n    bool v10 = false; // 0x403be6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403bf0\n    int64_t v13 = v1; // 0x403bf0\n    int64_t v14 = 3; // 0x403bf0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403c19\n        g50 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403c02\n    char v16 = *(char *)v12; // 0x403c02\n    char v17 = v16; // 0x403c02\n    bool v18 = false; // 0x403c02\n    while (v15 == v16) {\n        // 0x403bf2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x403c0c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x403c0e\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x403c19\n    g50 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c50",
            "funcStartAddr": "403c50",
            "funcEndAddr": "403d42",
            "decompiledFuncCode": "int64_t function_403c50(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403c64\n    int64_t result = (int64_t)v1; // 0x403c64\n    if (result != a1) {\n        // 0x403c71\n        return result;\n    }\n    int64_t v2 = function_4078a0(); // 0x403c80\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403d36\n    if (v3 == 85) {\n        // 0x403c90\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403d28\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x403cbe\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x403ccb\n        // 0x403c71\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403d28\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x403d0d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x403d1a\n    // 0x403c71\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403d50",
            "funcStartAddr": "403d50",
            "funcEndAddr": "403da7",
            "decompiledFuncCode": "int64_t function_403d50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403d50\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403d98\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403da7",
            "funcStartAddr": "403da7",
            "funcEndAddr": "404f71",
            "decompiledFuncCode": "int64_t function_403da7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403df1\n    int64_t v3 = 0; // 0x403df1\n    int64_t v4; // 0x403da7\n    int64_t v5; // 0x403da7\n    int64_t v6; // 0x403da7\n    int64_t v7; // 0x403da7\n    int64_t v8; // 0x403da7\n    int64_t v9; // 0x403da7\n    int64_t v10; // 0x403da7\n    int64_t v11; // 0x403da7\n    int64_t v12; // 0x403da7\n    int64_t v13; // 0x403da7\n    int64_t v14; // 0x403da7\n    int64_t v15; // 0x403da7\n    int64_t v16; // 0x403da7\n    int64_t v17; // 0x403da7\n    int64_t v18; // 0x403da7\n    int64_t result; // 0x403da7\n    int64_t v19; // 0x403da7\n    int32_t wc; // bp+132, 0x403da7\n    int64_t ps; // bp+136, 0x403da7\n    char v20; // 0x404360\n    int64_t v21; // 0x404360\n    int64_t v22; // 0x404708\n    int64_t v23; // 0x403da7\n    int64_t v24; // 0x404727\n    int32_t v25; // 0x403da7\n    while (true) {\n      lab_0x403df8_2:\n        // 0x403df8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403da7\n        int64_t v27; // 0x403e2c\n        while (true) {\n          lab_0x403df8:\n            // 0x403df8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403e03\n            if (v15 == -1) {\n                // 0x403e05\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403e13\n            if (v28) {\n                // break (via goto) -> 0x404578\n                goto lab_0x404578;\n            }\n            // 0x403e1c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g63 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40440b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403f51;\n                    }\n                    // 0x40482d\n                    v26 = v5 + 1;\n                    goto lab_0x403df8;\n                }\n                case 7: {\n                    goto lab_0x403f51;\n                }\n                case 8: {\n                    goto lab_0x403f51;\n                }\n                case 9: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403f51;\n                }\n                case 12: {\n                    goto lab_0x403f51;\n                }\n                case 13: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x403f1d;\n                }\n                case 36: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403f51;\n                }\n                case 38: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403f51;\n                }\n                case 44: {\n                    goto lab_0x403f51;\n                }\n                case 45: {\n                    goto lab_0x403f51;\n                }\n                case 46: {\n                    goto lab_0x403f51;\n                }\n                case 47: {\n                    goto lab_0x403f51;\n                }\n                case 48: {\n                    goto lab_0x403f51;\n                }\n                case 49: {\n                    goto lab_0x403f51;\n                }\n                case 50: {\n                    goto lab_0x403f51;\n                }\n                case 51: {\n                    goto lab_0x403f51;\n                }\n                case 52: {\n                    goto lab_0x403f51;\n                }\n                case 53: {\n                    goto lab_0x403f51;\n                }\n                case 54: {\n                    goto lab_0x403f51;\n                }\n                case 55: {\n                    goto lab_0x403f51;\n                }\n                case 56: {\n                    goto lab_0x403f51;\n                }\n                case 57: {\n                    goto lab_0x403f51;\n                }\n                case 58: {\n                    goto lab_0x403f51;\n                }\n                case 59: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403f51;\n                }\n                case 66: {\n                    goto lab_0x403f51;\n                }\n                case 67: {\n                    goto lab_0x403f51;\n                }\n                case 68: {\n                    goto lab_0x403f51;\n                }\n                case 69: {\n                    goto lab_0x403f51;\n                }\n                case 70: {\n                    goto lab_0x403f51;\n                }\n                case 71: {\n                    goto lab_0x403f51;\n                }\n                case 72: {\n                    goto lab_0x403f51;\n                }\n                case 73: {\n                    goto lab_0x403f51;\n                }\n                case 74: {\n                    goto lab_0x403f51;\n                }\n                case 75: {\n                    goto lab_0x403f51;\n                }\n                case 76: {\n                    goto lab_0x403f51;\n                }\n                case 77: {\n                    goto lab_0x403f51;\n                }\n                case 78: {\n                    goto lab_0x403f51;\n                }\n                case 79: {\n                    goto lab_0x403f51;\n                }\n                case 80: {\n                    goto lab_0x403f51;\n                }\n                case 81: {\n                    goto lab_0x403f51;\n                }\n                case 82: {\n                    goto lab_0x403f51;\n                }\n                case 83: {\n                    goto lab_0x403f51;\n                }\n                case 84: {\n                    goto lab_0x403f51;\n                }\n                case 85: {\n                    goto lab_0x403f51;\n                }\n                case 86: {\n                    goto lab_0x403f51;\n                }\n                case 87: {\n                    goto lab_0x403f51;\n                }\n                case 88: {\n                    goto lab_0x403f51;\n                }\n                case 89: {\n                    goto lab_0x403f51;\n                }\n                case 90: {\n                    goto lab_0x403f51;\n                }\n                case 91: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403f51;\n                }\n                case 94: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403f51;\n                }\n                case 96: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403f51;\n                }\n                case 98: {\n                    goto lab_0x403f51;\n                }\n                case 99: {\n                    goto lab_0x403f51;\n                }\n                case 100: {\n                    goto lab_0x403f51;\n                }\n                case 101: {\n                    goto lab_0x403f51;\n                }\n                case 102: {\n                    goto lab_0x403f51;\n                }\n                case 103: {\n                    goto lab_0x403f51;\n                }\n                case 104: {\n                    goto lab_0x403f51;\n                }\n                case 105: {\n                    goto lab_0x403f51;\n                }\n                case 106: {\n                    goto lab_0x403f51;\n                }\n                case 107: {\n                    goto lab_0x403f51;\n                }\n                case 108: {\n                    goto lab_0x403f51;\n                }\n                case 109: {\n                    goto lab_0x403f51;\n                }\n                case 110: {\n                    goto lab_0x403f51;\n                }\n                case 111: {\n                    goto lab_0x403f51;\n                }\n                case 112: {\n                    goto lab_0x403f51;\n                }\n                case 113: {\n                    goto lab_0x403f51;\n                }\n                case 114: {\n                    goto lab_0x403f51;\n                }\n                case 115: {\n                    goto lab_0x403f51;\n                }\n                case 116: {\n                    goto lab_0x403f51;\n                }\n                case 117: {\n                    goto lab_0x403f51;\n                }\n                case 118: {\n                    goto lab_0x403f51;\n                }\n                case 119: {\n                    goto lab_0x403f51;\n                }\n                case 120: {\n                    goto lab_0x403f51;\n                }\n                case 121: {\n                    goto lab_0x403f51;\n                }\n                case 122: {\n                    goto lab_0x403f51;\n                }\n                case 123: {\n                    goto lab_0x403ef5;\n                }\n                case 124: {\n                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403ef5;\n                }\n                case 126: {\n                    goto lab_0x403f1d;\n                }\n                default: {\n                    goto lab_0x4042f5;\n                }\n            }\n        }\n      lab_0x4042f5:\n        if (v23 != 1) {\n            // 0x404660\n            ps = 0;\n            int64_t len = v15; // 0x404670\n            if (v15 == -1) {\n                // 0x404672\n                len = strlen((char *)str);\n            }\n            // 0x40469e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4046ff:\n                // 0x4046ff\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404704\n                int64_t v30 = v29 + str;\n                v24 = function_407320(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x404c7a_2;\n                    }\n                    case -1: {\n                        goto lab_0x404c7a_2;\n                    }\n                    case -2: {\n                        // 0x404d5d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404d97\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x404d9a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404da7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404da0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x404c7a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x404c7a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4046d0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40477c\n                        char v34 = *(char *)v33; // 0x40478d\n                        unsigned char v35; // 0x403da7\n                        if (v34 < 125) {\n                            // 0x404798\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4047af\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404780\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40478d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404798\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4047af\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404780\n                            v33++;\n                        }\n                        goto lab_0x4046d0;\n                    }\n                }\n            }\n            goto lab_0x404c7a_2;\n        } else {\n            // 0x404344\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403f51;\n        }\n    }\n  lab_0x404578:\n    // 0x404578\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x404e7a\n        if (v8 > result) {\n            // 0x404e83\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4041a7\n        return result;\n    }\n    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403f51:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403f60\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40416a_2;\n        }\n    }\n    int64_t v39 = result; // 0x404061\n    char v40 = v20; // 0x404061\n    int64_t v41 = v38; // 0x404061\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x404061\n    int64_t v43 = v36; // 0x404061\n    goto lab_0x403fdd;\n  lab_0x40416a_2:\n    // 0x4041a7\n    return function_403d50(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404c7a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403f51;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40484e\n        int64_t v50 = v5 + 1; // 0x404931\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404938\n        char v52 = v20; // 0x404938\n        int64_t v53 = result; // 0x404938\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404901\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404905\n            int64_t v56 = v54 + 1; // 0x40490a\n            int64_t v57 = v51 + 1; // 0x404931\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4048fc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404901\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404905\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x403fdd;\n    }\n  lab_0x4046d0:\n    // 0x4046d0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4046ef\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4046f2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x404c7a\n        goto lab_0x404c7a_2;\n    }\n    goto lab_0x4046ff;\n  lab_0x403f1d:\n    // 0x403f1d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40416a_2;\n    }\n    goto lab_0x403f51;\n  lab_0x403ef5:;\n    bool v60 = v15 == 1; // 0x403f00\n    if (v15 == -1) {\n        // 0x403f02\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x403f0e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403f51;\n    } else {\n        goto lab_0x403f1d;\n    }\n  lab_0x403fdd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403fe2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403fe6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403df8_2;\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "40511e",
            "decompiledFuncCode": "int64_t function_404f80(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404f82\n    int32_t * v3 = __errno_location(); // 0x404f9c\n    int32_t v4 = v2; // 0x404fb1\n    if (v4 < 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v5 = (int64_t)g20; // 0x404fa1\n    int32_t v6 = *v3; // 0x404fab\n    int64_t v7 = v5; // 0x404fc1\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if (v4 == 0x7fffffff) {\n            // 0x405119\n            function_4063f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v8 = v2 + 1; // 0x404fd0\n        int64_t v9 = 0x100000000 * v8 >> 28; // 0x404fd7\n        int64_t v10; // 0x404f80\n        if (g20 == &g21) {\n            int64_t v11 = function_406200(0, v9); // 0x4050fa\n            int128_t v12 = __asm_movdqa(*(int128_t *)&g21); // 0x4050ff\n            *(int64_t *)&g20 = v11;\n            __asm_movups(*(int128_t *)v11, v12);\n            v10 = v11;\n        } else {\n            int64_t v13 = function_406200(v5, v9); // 0x404feb\n            *(int64_t *)&g20 = v13;\n            v10 = v13;\n        }\n        // 0x404ffa\n        v7 = v10;\n        int32_t v14 = *(int32_t *)&g23; // 0x404ffa\n        int32_t v15 = v8; // 0x405001\n        memset((int64_t *)(16 * (int64_t)v14 + v7), 0, 16 * (v15 - v14));\n        *(int32_t *)&g23 = v15;\n    }\n    int64_t v16 = v7 + (v1 >> 28); // 0x405031\n    int32_t v17 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40503b\n    int64_t * v18 = (int64_t *)v16; // 0x40503e\n    uint64_t v19 = *v18; // 0x40503e\n    int64_t * v20 = (int64_t *)(v16 + 8); // 0x405041\n    int64_t result = *v20; // 0x405041\n    int64_t v21; // 0x404f80\n    uint64_t v22 = function_403d50(result, v19, a2, a3, v21 & 0xffffffff, v17); // 0x405064\n    if (v19 > v22) {\n        // 0x4050db\n        *v3 = v6;\n        return result;\n    }\n    int64_t v23 = v22 + 1; // 0x405077\n    *v18 = v23;\n    if (result != (int64_t)&g51) {\n        // 0x405087\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4061a0(v23); // 0x4050a1\n    *v20 = result2;\n    int64_t v24; // 0x404f80\n    function_403d50(result2, v23, a2, a3, (int64_t)*(int32_t *)&v24, v17);\n    // 0x4050db\n    *v3 = v6;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "405154",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405127\n    int64_t result = function_4063a0(a1 == 0 ? (int64_t)&g52 : a1, 56); // 0x405146\n    return result;\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "40516f",
            "decompiledFuncCode": "int64_t function_405160(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g52 : a1); // 0x40516c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "40517f",
            "decompiledFuncCode": "int64_t function_405170(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g52 : a1; // 0x405178\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g52;\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "4051b3",
            "decompiledFuncCode": "int64_t function_405180(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g52 + 8 : a1 + 8; // 0x405199\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40519e\n    uint32_t v3 = *v2; // 0x40519e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4051a2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "4051d3",
            "decompiledFuncCode": "int64_t function_4051c0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g52 + 4 : a1 + 4); // 0x4051cc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "40520b",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g52 : a1; // 0x4051e8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x405205\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4051fc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g52;\n}\n"
        },
        {
            "funcName": "function_405210",
            "funcStartAddr": "405210",
            "funcEndAddr": "405282",
            "decompiledFuncCode": "int64_t function_405210(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g52 : a5; // 0x405232\n    int32_t * v2 = __errno_location(); // 0x40523b\n    uint32_t v3 = *(int32_t *)v1; // 0x40525b\n    int64_t result = function_403d50(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40526a\n    return result;\n}\n"
        },
        {
            "funcName": "function_405290",
            "funcStartAddr": "405290",
            "funcEndAddr": "405371",
            "decompiledFuncCode": "int64_t function_405290(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g52 : a4; // 0x4052b2\n    int32_t * v2 = __errno_location(); // 0x4052b8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4052d7\n    int32_t * v4 = (int32_t *)v1; // 0x4052da\n    int64_t v5 = function_403d50(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4052f5\n    int64_t v6 = v5 + 1; // 0x4052fa\n    int64_t result = function_4061a0(v6); // 0x40530f\n    function_403d50(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x405354\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40535d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "40538a",
            "decompiledFuncCode": "int64_t function_405380(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405380\n    return function_405290(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "405425",
            "decompiledFuncCode": "int64_t function_405390(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x405390\n    int64_t v2 = v1; // 0x405390\n    int64_t v3 = v2; // 0x4053a4\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x4053c3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g64;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4053c0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g64;\n        }\n    }\n    int64_t v6 = v3; // 0x4053dd\n    if (g21 != 0x60c380) {\n        // 0x4053df\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g51;\n        v6 = &g64;\n    }\n    int64_t result = v6; // 0x405401\n    if (g20 != &g21) {\n        // 0x405403\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g64;\n    }\n    // 0x405416\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405430",
            "funcStartAddr": "405430",
            "funcEndAddr": "405441",
            "decompiledFuncCode": "int64_t function_405430(void) {\n    // 0x405430\n    int64_t v1; // 0x405430\n    return function_404f80(v1, v1, -1, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_405450",
            "funcStartAddr": "405450",
            "funcEndAddr": "40545a",
            "decompiledFuncCode": "int64_t function_405450(void) {\n    // 0x405450\n    int64_t v1; // 0x405450\n    return function_404f80(v1, v1, v1, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_405460",
            "funcStartAddr": "405460",
            "funcEndAddr": "405476",
            "decompiledFuncCode": "int64_t function_405460(int64_t a1) {\n    // 0x405460\n    return function_404f80(0, a1, -1, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "405492",
            "decompiledFuncCode": "int64_t function_405480(int64_t a1, int64_t a2) {\n    // 0x405480\n    return function_404f80(0, a1, a2, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_4054a0",
            "funcStartAddr": "4054a0",
            "funcEndAddr": "405508",
            "decompiledFuncCode": "int64_t function_4054a0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((int32_t)a2 == 10) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4054b0\n    return function_404f80((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405510",
            "funcStartAddr": "405510",
            "funcEndAddr": "405574",
            "decompiledFuncCode": "int64_t function_405510(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405520\n    return function_404f80((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "40558c",
            "decompiledFuncCode": "int64_t function_405580(int64_t a1, int64_t a2) {\n    // 0x405580\n    return function_4054a0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "40559f",
            "decompiledFuncCode": "int64_t function_405590(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405590\n    return function_405510(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "405610",
            "decompiledFuncCode": "int64_t function_4055a0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g52); // 0x4055ad\n    int128_t v2 = __asm_movdqa(g53); // 0x4055b5\n    int128_t v3 = __asm_movdqa(g54); // 0x4055bd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4055d2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4055e8\n    uint32_t v6 = *v5; // 0x4055e8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4055ed\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404f80(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405610",
            "funcStartAddr": "405610",
            "funcEndAddr": "40561d",
            "decompiledFuncCode": "int64_t function_405610(int64_t a1, int64_t a2) {\n    // 0x405610\n    return function_4055a0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405620",
            "funcStartAddr": "405620",
            "funcEndAddr": "405631",
            "decompiledFuncCode": "int64_t function_405620(int64_t a1) {\n    // 0x405620\n    return function_4055a0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405640",
            "funcStartAddr": "405640",
            "funcEndAddr": "40564a",
            "decompiledFuncCode": "int64_t function_405640(void) {\n    // 0x405640\n    int64_t v1; // 0x405640\n    return function_4055a0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "4056be",
            "decompiledFuncCode": "int64_t function_405650(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40566a\n    return function_404f80((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "40572c",
            "decompiledFuncCode": "int64_t function_4056c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g52); // 0x4056c7\n    int128_t v2 = __asm_movdqa(g53); // 0x4056cf\n    int128_t v3 = __asm_movdqa(g54); // 0x4056d7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4056f9\n    if (a2 == 0 || a3 == 0) {\n        // 0x405727\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40570a\n    return function_404f80(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "405739",
            "decompiledFuncCode": "int64_t function_405730(void) {\n    // 0x405730\n    int64_t v1; // 0x405730\n    return function_4056c0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "405757",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405740\n    return function_4056c0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "405773",
            "decompiledFuncCode": "int64_t function_405760(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405760\n    return function_4056c0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405780",
            "funcStartAddr": "405780",
            "funcEndAddr": "40578a",
            "decompiledFuncCode": "int64_t function_405780(void) {\n    // 0x405780\n    int64_t v1; // 0x405780\n    return function_404f80(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_405790",
            "funcStartAddr": "405790",
            "funcEndAddr": "4057a2",
            "decompiledFuncCode": "int64_t function_405790(int64_t a1, int64_t a2) {\n    // 0x405790\n    return function_404f80(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "4057c1",
            "decompiledFuncCode": "int64_t function_4057b0(void) {\n    // 0x4057b0\n    int64_t v1; // 0x4057b0\n    return function_404f80(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "4057e6",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1) {\n    // 0x4057d0\n    return function_404f80(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "4058d9",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 48); // 0x4057f4\n    int64_t v2 = *v1; // 0x4057f4\n    int64_t * v3 = (int64_t *)(a1 + 40); // 0x4057fb\n    int64_t v4 = *v3; // 0x4057fb\n    if (v2 == v4) {\n        char * v5 = (char *)(a1 + 104); // 0x4058d0\n        *v5 = *v5 | 2;\n    }\n    int64_t v6 = *(int64_t *)(a1 + 72); // 0x405812\n    int64_t v7 = *(int64_t *)(a1 + 56); // 0x40581d\n    int64_t v8 = v6 + v2 & -1 - v6; // 0x405821\n    int64_t v9 = *(int64_t *)(a1 + 32); // 0x405824\n    int64_t v10 = v7 - v9; // 0x405835\n    int64_t v11 = v8 - v9 > v10 ? v7 : v8;\n    *v1 = v11;\n    *v3 = v11;\n    int64_t * v12 = (int64_t *)(a1 + 136); // 0x405848\n    int64_t v13 = *v12; // 0x405848\n    int64_t v14 = v13; // 0x40585d\n    int64_t v15 = v10; // 0x40585d\n    if (*(int64_t *)(a1 + 144) - v13 < 8) {\n        // 0x405898\n        v15 = a1 + 112;\n        _obstack_newchunk(v15, 8, v13, v9);\n        v14 = *v12;\n    }\n    // 0x40585f\n    *(int64_t *)v14 = v4;\n    int64_t * v16 = (int64_t *)(a1 + 224); // 0x405862\n    int64_t v17 = *v16; // 0x405862\n    *v12 = *v12 + 8;\n    int64_t v18 = *(int64_t *)(a1 + 232) - v17; // 0x405878\n    int64_t result = v18; // 0x40587f\n    int64_t v19 = v17; // 0x40587f\n    int64_t v20 = v15; // 0x40587f\n    if (v18 < 8) {\n        // 0x4058b0\n        v20 = a1 + 200;\n        result = _obstack_newchunk(v20, 8, v17, v9);\n        v19 = *v16;\n    }\n    // 0x405881\n    *(int64_t *)v19 = v2 + -1 - v4;\n    *v16 = *v16 + 8;\n    *(int64_t *)a1 = v20 + 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "405947",
            "decompiledFuncCode": "int64_t function_4058e0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    *a1 = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(int64_t *)(v1 + 16) = 0;\n    _obstack_begin(v1 + 24, 0, 0, 0x401ba0, 0x401930);\n    _obstack_begin(v1 + 112, 0, 0, 0x401ba0, 0x401930);\n    return _obstack_begin(v1 + 200, 0, 0, 0x401ba0, 0x401930);\n}\n"
        },
        {
            "funcName": "function_405950",
            "funcStartAddr": "405950",
            "funcEndAddr": "405979",
            "decompiledFuncCode": "int64_t function_405950(int64_t * a1, int64_t a2) {\n    int64_t v1 = (int64_t)a1;\n    _obstack_free(v1 + 24, 0);\n    _obstack_free(v1 + 112, 0);\n    return _obstack_free(v1 + 200, 0);\n}\n"
        },
        {
            "funcName": "function_405980",
            "funcStartAddr": "405980",
            "funcEndAddr": "405b93",
            "decompiledFuncCode": "int64_t function_405980(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = v1 + 24; // 0x405982\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4059a9\n    int32_t c = fgetc(stream); // 0x4059a9\n    int64_t * v3 = (int64_t *)(v1 + 48);\n    int64_t v4; // 0x405980\n    int64_t v5; // 0x405980\n    if (c != -1) {\n        int32_t c2 = c; // 0x4059f3\n        int64_t v6; // 0x405980\n        int64_t v7 = v6; // 0x405980\n        int32_t v8; // 0x405980\n        int64_t v9; // 0x405980\n        int64_t v10; // 0x405980\n        int64_t v11; // 0x405980\n        int64_t v12; // 0x405980\n        int64_t v13; // 0x4059b3\n        int64_t v14; // 0x405998\n        int64_t v15; // 0x4059ce\n        int64_t v16; // 0x4059d6\n        while (true) {\n            // 0x4059b3\n            v8 = c2;\n            v13 = *v3;\n            if (*(int64_t *)(v1 + 56) != v13) {\n                // 0x405998\n                v14 = v13 + 1;\n                *v3 = v14;\n                *(char *)v13 = (char)v8;\n                v9 = v14;\n                v11 = v13;\n                v10 = v14;\n                v12 = v13;\n                if (v8 != 0) {\n                    // break -> 0x4059a6\n                    break;\n                }\n            } else {\n                // 0x4059bd\n                _obstack_newchunk(v2, 1, v13, v7);\n                v15 = *v3;\n                v16 = v15 + 1;\n                *v3 = v16;\n                *(char *)v15 = (char)v8;\n                v9 = v16;\n                v11 = v15;\n                v10 = v16;\n                v12 = v15;\n                if (v8 != 0) {\n                    // break -> 0x4059a6\n                    break;\n                }\n            }\n            // 0x4059e8\n            function_4057f0(v1);\n            c2 = fgetc(stream);\n            v7 = v10;\n            v4 = v10;\n            v5 = v12;\n            if (c2 == -1) {\n                // break (via goto) -> 0x405a00\n                goto lab_0x405a00;\n            }\n        }\n        int32_t c3 = fgetc(stream); // 0x4059a9\n        v4 = v9;\n        v5 = v11;\n        while (c3 != -1) {\n            // 0x4059b3\n            c2 = c3;\n            v7 = v9;\n            while (true) {\n                // 0x4059b3\n                v8 = c2;\n                v13 = *v3;\n                if (*(int64_t *)(v1 + 56) != v13) {\n                    // 0x405998\n                    v14 = v13 + 1;\n                    *v3 = v14;\n                    *(char *)v13 = (char)v8;\n                    v9 = v14;\n                    v11 = v13;\n                    v10 = v14;\n                    v12 = v13;\n                    if (v8 != 0) {\n                        // break -> 0x4059a6\n                        break;\n                    }\n                } else {\n                    // 0x4059bd\n                    _obstack_newchunk(v2, 1, v13, v7);\n                    v15 = *v3;\n                    v16 = v15 + 1;\n                    *v3 = v16;\n                    *(char *)v15 = (char)v8;\n                    v9 = v16;\n                    v11 = v15;\n                    v10 = v16;\n                    v12 = v15;\n                    if (v8 != 0) {\n                        // break -> 0x4059a6\n                        break;\n                    }\n                }\n                // 0x4059e8\n                function_4057f0(v1);\n                c2 = fgetc(stream);\n                v7 = v10;\n                v4 = v10;\n                v5 = v12;\n                if (c2 == -1) {\n                    // break (via goto) -> 0x405a00\n                    goto lab_0x405a00;\n                }\n            }\n            // 0x4059a6\n            c3 = fgetc(stream);\n            v4 = v9;\n            v5 = v11;\n        }\n    }\n  lab_0x405a00:;\n    int64_t v17 = *v3; // 0x405a00\n    if (v17 != *(int64_t *)(v1 + 40)) {\n        int64_t v18 = v17; // 0x405a0e\n        if (v17 == *(int64_t *)(v1 + 56)) {\n            // 0x405b7c\n            _obstack_newchunk(v2, 1, v5, v4);\n            v18 = *v3;\n        }\n        // 0x405a14\n        *v3 = v18 + 1;\n        *(char *)v18 = 0;\n        function_4057f0(v1);\n    }\n    int64_t * v19 = (int64_t *)(v1 + 136); // 0x405a27\n    int64_t v20 = *v19; // 0x405a27\n    int64_t * v21 = (int64_t *)(v1 + 144); // 0x405a2e\n    int64_t v22 = v20; // 0x405a3c\n    if (*v21 - v20 < 8) {\n        // 0x405b40\n        _obstack_newchunk(v1 + 112, 8, v20, v4);\n        v22 = *v19;\n    }\n    // 0x405a42\n    *(int64_t *)v22 = 0;\n    int64_t * v23 = (int64_t *)(v1 + 128); // 0x405a50\n    int64_t v24 = *v23; // 0x405a50\n    int64_t v25 = *v19 + 8; // 0x405a57\n    *v19 = v25;\n    if (v25 == v24) {\n        char * v26 = (char *)(v1 + 192); // 0x405b70\n        *v26 = *v26 | 2;\n    }\n    int64_t v27 = *(int64_t *)(v1 + 160); // 0x405a6b\n    int64_t v28 = *(int64_t *)(v1 + 120); // 0x405a79\n    int64_t v29 = v27 + v25 & -1 - v27; // 0x405a7d\n    int64_t v30 = *v21; // 0x405a80\n    int64_t v31 = v29 - v28 > v30 - v28 ? v30 : v29;\n    *v19 = v31;\n    *(int64_t *)(v1 + 8) = v24;\n    int64_t * v32 = (int64_t *)(v1 + 224); // 0x405aa7\n    int64_t v33 = *v32; // 0x405aa7\n    int64_t * v34 = (int64_t *)(v1 + 216); // 0x405aae\n    int64_t v35 = *v34; // 0x405aae\n    *v23 = v31;\n    if (v33 == v35) {\n        char * v36 = (char *)(v1 + 280); // 0x405b60\n        *v36 = *v36 | 2;\n    }\n    int64_t v37 = *(int64_t *)(v1 + 248); // 0x405ac5\n    int64_t v38 = *(int64_t *)(v1 + 208); // 0x405ad3\n    int64_t v39 = v37 + v33 & -1 - v37; // 0x405ada\n    int64_t v40 = *(int64_t *)(v1 + 232); // 0x405add\n    int64_t v41 = v39 - v38 > v40 - v38 ? v40 : v39;\n    *v32 = v41;\n    *v34 = v41;\n    *(int64_t *)(v1 + 16) = v35;\n    int32_t is_ferror = ferror(stream); // 0x405b14\n    return (int64_t)(is_ferror & -256) | (int64_t)(is_ferror == 0);\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405bfe",
            "decompiledFuncCode": "int64_t function_405ba0(int32_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read(fd, (int64_t *)buf, (int32_t)nbyte); // 0x405bc1\n    while (result < 0) {\n        // 0x405bce\n        if (*__errno_location() != 4) {\n            // break -> 0x405bda\n            break;\n        }\n        result = read(fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c00",
            "funcStartAddr": "405c00",
            "funcEndAddr": "405fdd",
            "decompiledFuncCode": "int64_t function_405c00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405c98\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405c1c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405c36\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405c7b\n    if (a6 < 10) {\n        // 0x405c8a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405d82\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405fe0",
            "funcStartAddr": "405fe0",
            "funcEndAddr": "406000",
            "decompiledFuncCode": "int64_t function_405fe0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405fe0\n    if (a5 == 0) {\n        // 0x405ffb\n        return function_405c00(a1, a2, a3, a4, a5, 0, (int64_t)&g64);\n    }\n    int64_t v1 = 0; // 0x405fe7\n    v1++;\n    int64_t v2 = v1; // 0x405ff9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405ff0\n        v1++;\n        v2 = v1;\n    }\n    // 0x405ffb\n    return function_405c00(a1, a2, a3, a4, a5, v2, (int64_t)&g64);\n}\n"
        },
        {
            "funcName": "function_406000",
            "funcStartAddr": "406000",
            "funcEndAddr": "406060",
            "decompiledFuncCode": "int64_t function_406000(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x406000\n    int64_t v3 = &v2; // 0x406000\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x406033\n    int64_t v6; // 0x40601d\n    int64_t * v7; // 0x40603b\n    int64_t v8; // 0x40603b\n    int64_t v9; // 0x406047\n    if (v5 < 48) {\n        // 0x406010\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x406053\n            break;\n        }\n    } else {\n        // 0x40603b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x406053\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x406031\n    while (v4 != 9) {\n        // 0x406029\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x406010\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x406053\n                break;\n            }\n        } else {\n            // 0x40603b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x406053\n                break;\n            }\n        }\n        // 0x406029\n        v10 = 10;\n    }\n    // 0x406053\n    return function_405c00(a1, a2, a3, a4, v3, v10, (int64_t)&g64);\n}\n"
        },
        {
            "funcName": "function_406060",
            "funcStartAddr": "406060",
            "funcEndAddr": "40611c",
            "decompiledFuncCode": "int64_t function_406060(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x406060\n    int64_t v1; // bp-168, 0x406060\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x406060\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x406060\n    int64_t v8; // 0x406060\n    int64_t v9; // bp-56, 0x406060\n    int64_t v10; // 0x4060c5\n    int64_t v11; // 0x4060e9\n    if ((int32_t)v6 < 48) {\n        // 0x4060b0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x406100\n            break;\n        }\n    } else {\n        // 0x4060e2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x406100\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4060da\n    int64_t v13 = 10; // 0x4060da\n    while (v5 != 9) {\n        // 0x4060dc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4060b0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x406100\n                break;\n            }\n        } else {\n            // 0x4060e2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x406100\n                break;\n            }\n        }\n        // 0x4060d2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x406100\n    int64_t v14; // bp-136, 0x406060\n    int64_t result = function_405c00(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g64); // 0x40610f\n    return result;\n}\n"
        },
        {
            "funcName": "function_406120",
            "funcStartAddr": "406120",
            "funcEndAddr": "406194",
            "decompiledFuncCode": "int64_t function_406120(int64_t a1) {\n    // 0x406120\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406183\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_4061a0",
            "funcStartAddr": "4061a0",
            "funcEndAddr": "4061ba",
            "decompiledFuncCode": "int64_t function_4061a0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4061a4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4061b3\n        return (int64_t)mem;\n    }\n    // 0x4061b5\n    function_4063f0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4061c0",
            "funcStartAddr": "4061c0",
            "funcEndAddr": "4061e1",
            "decompiledFuncCode": "int64_t function_4061c0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4061c3\n    int64_t v2 = v1; // 0x4061c3\n    if (v2 < 0) {\n        // 0x4061db\n        function_4063f0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4061d9\n        return function_4061a0(v2);\n    }\n    // 0x4061db\n    function_4063f0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4061f0",
            "funcStartAddr": "4061f0",
            "funcEndAddr": "4061f2",
            "decompiledFuncCode": "int64_t function_4061f0(void) {\n    // 0x4061f0\n    int64_t v1; // 0x4061f0\n    return function_4061a0(v1);\n}\n"
        },
        {
            "funcName": "function_406200",
            "funcStartAddr": "406200",
            "funcEndAddr": "406236",
            "decompiledFuncCode": "int64_t function_406200(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406228\n        free(v1);\n        return (int32_t)&g64 ^ (int32_t)&g64;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406211\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406220\n        return (int64_t)mem;\n    }\n    // 0x406231\n    function_4063f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406240",
            "funcStartAddr": "406240",
            "funcEndAddr": "406261",
            "decompiledFuncCode": "int64_t function_406240(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406243\n    int64_t v2 = v1; // 0x406243\n    if (v2 < 0) {\n        // 0x40625b\n        function_4063f0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406259\n        return function_406200(a1, v2);\n    }\n    // 0x40625b\n    function_4063f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406270",
            "funcStartAddr": "406270",
            "funcEndAddr": "4062f6",
            "decompiledFuncCode": "int64_t function_406270(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4062cb\n            function_4063f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406200(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4062b3\n    if (a2 == 0) {\n        // 0x4062d8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4062b8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4062cb\n        function_4063f0(a1);\n        // UNREACHABLE\n    }\n    // 0x40629a\n    *(int64_t *)a2 = v2;\n    return function_406200(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "406350",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406300\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40634a\n            function_4063f0(a1);\n            // UNREACHABLE\n        }\n        // 0x406322\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406200(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406335\n        *(int64_t *)a2 = 128;\n        return function_406200(0, 128);\n    }\n    // 0x406348\n    if (a2 < 0) {\n        // 0x40634a\n        function_4063f0(a1);\n        // UNREACHABLE\n    }\n    // 0x406322\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406200(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406350",
            "funcStartAddr": "406350",
            "funcEndAddr": "406367",
            "decompiledFuncCode": "int64_t function_406350(int64_t a1, int64_t a2) {\n    // 0x406350\n    return (int64_t)memset((int64_t *)function_4061a0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406370",
            "funcStartAddr": "406370",
            "funcEndAddr": "40639e",
            "decompiledFuncCode": "int64_t function_406370(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406377\n    if ((int64_t)v1 < 0) {\n        // 0x406399\n        function_4063f0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406399\n        function_4063f0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40638a\n    if (mem != NULL) {\n        // 0x406394\n        return (int64_t)mem;\n    }\n    // 0x406399\n    function_4063f0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4063a0",
            "funcStartAddr": "4063a0",
            "funcEndAddr": "4063c8",
            "decompiledFuncCode": "int64_t function_4063a0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4061a0(a2); // 0x4063af\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4063d0",
            "funcStartAddr": "4063d0",
            "funcEndAddr": "4063e3",
            "decompiledFuncCode": "int64_t function_4063d0(int64_t str) {\n    // 0x4063d0\n    return function_4063a0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4063f0",
            "funcStartAddr": "4063f0",
            "funcEndAddr": "406421",
            "decompiledFuncCode": "int64_t function_4063f0(int64_t a1) {\n    // 0x4063f0\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406430",
            "funcStartAddr": "406430",
            "funcEndAddr": "4064ab",
            "decompiledFuncCode": "int64_t function_406430(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406437\n    if (fileno(stream) < 0) {\n        // 0x406497\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40644a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40647b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406497\n            return fclose(stream);\n        }\n    }\n    // 0x40644c\n    if ((int32_t)function_4064b0(a1, v1) == 0) {\n        // 0x406497\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406458\n    int32_t v3 = *v2; // 0x406460\n    int64_t result = fclose(stream); // 0x40646e\n    if (v3 != 0) {\n        // 0x4064a0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406470\n    return result;\n}\n"
        },
        {
            "funcName": "function_4064b0",
            "funcStartAddr": "4064b0",
            "funcEndAddr": "4064f0",
            "decompiledFuncCode": "int64_t function_4064b0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4064ca\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4064ca\n        return fflush(stream);\n    }\n    // 0x4064d8\n    function_4064f0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4064f0",
            "funcStartAddr": "4064f0",
            "funcEndAddr": "406547",
            "decompiledFuncCode": "int64_t function_4064f0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4064f0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4064fa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40652b\n    int64_t result = -1; // 0x406534\n    if (v1 != -1) {\n        // 0x406536\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406542\n    return result;\n}\n"
        },
        {
            "funcName": "function_406550",
            "funcStartAddr": "406550",
            "funcEndAddr": "40662f",
            "decompiledFuncCode": "int64_t function_406550(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40655c\n    uint32_t v2 = *v1; // 0x40655c\n    int64_t v3 = a2 & 0xffffffff; // 0x406561\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x406564\n    uint64_t v5 = (int64_t)*v4; // 0x406564\n    int64_t v6; // 0x4065d2\n    if (v3 <= v5) {\n      lab_0x4065cc_2:\n        // 0x4065cc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x406552\n    int64_t v8 = v2; // 0x406550\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4065cc\n        goto lab_0x4065cc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x406588\n    int64_t v17; // 0x406596\n    int64_t * v18; // 0x4065b0\n    int64_t * v19; // 0x4065b3\n    int64_t v20; // 0x4065be\n    int64_t v21; // 0x406596\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x406593\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4065b0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4065c7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4065cc\n            goto lab_0x4065cc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4065cc\n            goto lab_0x4065cc_2;\n        }\n        // 0x406582\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40660b\n    int64_t * v23 = (int64_t *)v22; // 0x406610\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x406613\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x406610\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x406627\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40657d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4065cc\n            goto lab_0x4065cc_2;\n        }\n        // 0x406582\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x406593\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4065b0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4065c7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4065cc\n                goto lab_0x4065cc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4065cc\n                goto lab_0x4065cc_2;\n            }\n            // 0x406582\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4065f0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x406610\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x406627\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4065cc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406630",
            "funcStartAddr": "406630",
            "funcEndAddr": "406c4c",
            "decompiledFuncCode": "int64_t function_406630(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40664f\n    int64_t v2 = *v1; // 0x40664f\n    char * str2 = (char *)v2; // 0x40665c\n    char c = *str2; // 0x40665c\n    int64_t v3 = v2; // 0x406688\n    int64_t v4 = 0; // 0x406630\n    int32_t v5; // 0x406630\n    int64_t v6; // 0x406630\n    int64_t v7; // 0x406630\n    int64_t v8; // 0x406630\n    int64_t v9; // 0x406630\n    int64_t v10; // 0x406630\n    int64_t v11; // 0x406630\n    int64_t v12; // 0x406630\n    int64_t v13; // 0x406630\n    int64_t str3; // 0x406630\n    int64_t v14; // 0x406630\n    int64_t v15; // 0x406630\n    int64_t v16; // 0x406630\n    int64_t v17; // 0x406630\n    int32_t v18; // 0x406630\n    int32_t v19; // 0x406630\n    int32_t v20; // 0x406630\n    int32_t v21; // 0x406630\n    int32_t v22; // 0x406630\n    int32_t v23; // 0x406630\n    int32_t v24; // 0x406630\n    int32_t v25; // 0x406630\n    int32_t v26; // 0x406630\n    int32_t v27; // 0x406630\n    int32_t v28; // 0x406630\n    int32_t v29; // 0x406630\n    int64_t nmemb; // 0x406630\n    int64_t v30; // 0x406630\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40668c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x406688\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x406698\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40669e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x406668\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4066cc\n                int64_t v34; // 0x406630\n                int64_t v35; // 0x406630\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4066d5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x406850;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4066e6\n                int64_t v37 = *(int64_t *)v36; // 0x4066ea\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4066c0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4066d5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x406850;\n                        }\n                    }\n                    // 0x4066e6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x406736:\n                    // 0x406736\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x406790;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x406900\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x406790;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4068b0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40675a;\n                                } else {\n                                    // 0x4068bc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40675a;\n                                    } else {\n                                        // 0x4068ca\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40675a;\n                                        } else {\n                                            goto lab_0x406790;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40675a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4067a1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406976\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x406b22\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x406b42\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x406b8f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x406ba9\n                            int64_t v45; // 0x406bab\n                            if (*(char *)v42 != 0) {\n                                // 0x406bab\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406ba3\n                            while (v17 + nmemb != v42) {\n                                // 0x406ba5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x406bab\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x406b98\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406bd0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x406984\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x406adf\n                        free((int64_t *)v17);\n                    }\n                    // 0x4069d9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4069f0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40689e\n                    return 63;\n                }\n                // 0x4067c0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x406844\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x406850:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406860\n                    uint32_t v50 = *v49; // 0x406860\n                    int64_t v51 = v50; // 0x406860\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40686a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406873\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x406a9f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x406a4a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40689e\n                            return 63;\n                        }\n                        // 0x4068e8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x406bff\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x406afd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x406b10\n                                // 0x40689e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x406a0e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x406a22\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40688b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40688e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406892\n                    int64_t result = v59; // 0x406898\n                    if (v58 != 0) {\n                        // 0x40689a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40689e\n                    return result;\n                }\n            } else {\n                // 0x40669e\n                v5 = v32;\n            }\n            // break -> 0x4067c5\n            break;\n        }\n    }\n    // 0x4067c5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4067dd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4067e7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40689e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x406929\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x406816\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x406826\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x406790:\n    // 0x406790\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x406790\n    int64_t v63 = *(int64_t *)v62; // 0x406794\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4067a1\n        goto lab_0x4067a1;\n    }\n    goto lab_0x406736;\n  lab_0x40675a:\n    // 0x40675a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x406630\n    int32_t v65; // 0x406630\n    int32_t v66; // 0x406630\n    if (v27 != 0) {\n        goto lab_0x406790;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x406910\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x406790;\n            } else {\n                goto lab_0x406781;\n            }\n        } else {\n            // 0x406775\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x406a6c\n                int64_t v67 = (int64_t)mem; // 0x406a6c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x406790;\n                } else {\n                    // 0x406a7f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x406781;\n                }\n            } else {\n                goto lab_0x406781;\n            }\n        }\n    }\n  lab_0x406781:\n    // 0x406781\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x406790;\n}\n"
        },
        {
            "funcName": "function_406c50",
            "funcStartAddr": "406c50",
            "funcEndAddr": "407216",
            "decompiledFuncCode": "int64_t function_406c50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406c71\n    if (v3 < 1) {\n        // 0x406e2e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x406c6d\n    int32_t v5 = *(int32_t *)a7; // 0x406c79\n    uint64_t v6 = a1 & 0xffffffff; // 0x406c7b\n    int64_t v7 = v2; // 0x406c80\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406c83\n    *v8 = 0;\n    int64_t v9; // 0x406c50\n    int64_t v10; // 0x406c50\n    int64_t v11; // 0x406c50\n    int64_t v12; // 0x406c50\n    int64_t str; // 0x406c50\n    int64_t v13; // 0x406c50\n    int64_t v14; // 0x406c50\n    int64_t v15; // 0x406c50\n    int64_t v16; // 0x406c50\n    int64_t v17; // 0x406c50\n    int32_t v18; // 0x406c50\n    char v19; // 0x406c50\n    if (v5 == 0) {\n        // 0x406e68\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x406c9a;\n    } else {\n        // 0x406c93\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406ce0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406ce3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406da8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406cf6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406d06\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x406dbc;\n                } else {\n                    goto lab_0x406d18;\n                }\n            }\n        } else {\n            goto lab_0x406c9a;\n        }\n    }\n  lab_0x406c9a:\n    // 0x406c9a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406ca0\n    *v24 = 0;\n    int64_t v25; // 0x406c50\n    int64_t v26; // 0x406c50\n    int64_t v27; // 0x406c50\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406d90\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x406d9d;\n        }\n        case 43: {\n            // 0x4070a0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x406d9d;\n        }\n        default: {\n            // 0x406cbc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40701f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x407138\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x406d9d;\n                } else {\n                    // 0x40702d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x406cca;\n                }\n            } else {\n                goto lab_0x406cca;\n            }\n        }\n    }\n  lab_0x406da8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x406daf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406d18;\n    } else {\n        goto lab_0x406dbc;\n    }\n  lab_0x406cca:\n    // 0x406cca\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x406d9d;\n  lab_0x406d9d:\n    // 0x406d9d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406da8;\n  lab_0x406d18:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406d18\n    int64_t v31 = v30; // 0x406d18\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x406d1a\n    if ((int64_t)*v32 > v31) {\n        // 0x406d1f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406d22\n    if (*v33 > v30) {\n        // 0x406d27\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x406d2a\n    int64_t v35 = v31; // 0x406d2e\n    int64_t v36 = v15; // 0x406d2e\n    int64_t v37; // 0x406c50\n    int64_t v38; // 0x406c50\n    int64_t v39; // 0x406c50\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406e98\n        int64_t v41 = v40; // 0x406e98\n        v2 = v41;\n        int64_t v42; // 0x406c50\n        if (*v33 == v40) {\n            // 0x407080\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407088\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406ea4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406ea8\n                function_406550(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406eb8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406ec1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x406eca\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406ee1\n            int64_t v47 = v45 & 0xffffffff; // 0x406ee5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x406eee\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406ef4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406ef6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406ed0\n            int64_t v49 = v48 & 0xffffffff; // 0x406ed0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406ee1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x406eee\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406ef4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406ef6;\n                    }\n                }\n                // 0x406ed0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x407098\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406ef6;\n    } else {\n        goto lab_0x406d34;\n    }\n  lab_0x406dbc:\n    // 0x406dbc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x406dbf\n    int64_t v51 = v12; // 0x406dbf\n    int64_t v52 = v14; // 0x406dbf\n    if (*(char *)v10 == 0) {\n        goto lab_0x406d18;\n    } else {\n        goto lab_0x406dc5;\n    }\n  lab_0x406d34:;\n    int32_t v53 = v35; // 0x406d34\n    int64_t v54; // 0x406c50\n    int64_t v55; // 0x406c50\n    int64_t v56; // 0x406c50\n    int64_t v57; // 0x406c50\n    int64_t v58; // 0x406c50\n    int64_t v59; // 0x406c50\n    char * v60; // 0x406c50\n    int64_t v61; // 0x406c50\n    int64_t v62; // 0x406d49\n    int64_t v63; // 0x406c50\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406e83\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406e86;\n    } else {\n        // 0x406d3c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x406c50\n        int64_t v66 = v65 ? -1 : 1; // 0x406d50\n        int64_t v67 = (int64_t)\"--\"; // 0x406c50\n        int64_t v68 = v62; // 0x406c50\n        int64_t v69 = 3; // 0x406d50\n        unsigned char v70 = *(char *)v68; // 0x406d50\n        char v71 = *(char *)v67; // 0x406d50\n        char v72 = v71; // 0x406d50\n        bool v73 = false; // 0x406d50\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406e40\n            if (*(char *)v62 == 45) {\n                // 0x406f00\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406f00\n                if (c == 0) {\n                    goto lab_0x406e4a;\n                } else {\n                    // 0x406f0d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406f90;\n                    } else {\n                        if (c == 45) {\n                            // 0x407173\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406fe5;\n                        } else {\n                            // 0x406f1e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406f90;\n                            } else {\n                                // 0x406f23\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406f44;\n                                } else {\n                                    // 0x406f2a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406f90;\n                                    } else {\n                                        goto lab_0x406f44;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x406e4a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406d60\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406d63\n            int64_t v77 = v35 + 1; // 0x406d66\n            int32_t v78 = v77; // 0x406d69\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4070d0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406d77\n                    function_406550(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406d85\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406e86;\n        }\n    }\n  lab_0x406dc5:;\n    // 0x406dc5\n    int64_t v79; // bp-104, 0x406c50\n    int64_t v80 = &v79; // 0x406c5a\n    int64_t v81 = v50 + 1; // 0x406dc5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x406dcc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406dd1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406dd5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406dd9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406de1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406de6\n    int32_t c2 = v84; // 0x406de6\n    char * found_char_pos = strchr(str2, c2); // 0x406de6\n    int64_t v87 = *v82; // 0x406deb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406df5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406e00\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4070f0\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4070bd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x406e2e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406de6\n    char v91 = *(char *)(v90 + 1); // 0x406e1b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406dd5\n        if (v91 != 58) {\n            // 0x406e2e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x407044\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x407148\n                *v8 = 0;\n            } else {\n                // 0x40712c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40706e\n            *v83 = 0;\n            // 0x406e2e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40704e\n        if (v93 != 0) {\n            // 0x4070e0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40706e\n            *v83 = 0;\n            // 0x406e2e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x407061\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40706e\n            *v83 = 0;\n            // 0x406e2e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4071aa\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40715a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x407161\n        // 0x40706e\n        *v83 = 0;\n        // 0x406e2e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406fb9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x406fbb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4071e0\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x407191\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x407198\n            // 0x406e2e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406fc6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x406fca\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406fe5;\n  lab_0x406ef6:\n    // 0x406ef6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x406d34;\n  lab_0x406fe5:;\n    int64_t v99 = function_406630(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x407003\n    // 0x406e2e\n    return v99 & 0xffffffff;\n  lab_0x406e86:;\n    int32_t v100 = v55; // 0x406e86\n    if (v100 != (int32_t)v59) {\n        // 0x406e8a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x406e2e\n    return 0xffffffff;\n  lab_0x406e4a:\n    // 0x406e4a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406e51\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x406e2e\n    return v99 & 0xffffffff;\n  lab_0x406f90:\n    // 0x406f90\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406dc5;\n  lab_0x406f44:\n    // 0x406f44\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_406630(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x406f6a\n    if ((int32_t)v101 != -1) {\n        // 0x406e2e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x406f7f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406f90;\n}\n"
        },
        {
            "funcName": "function_407220",
            "funcStartAddr": "407220",
            "funcEndAddr": "407276",
            "decompiledFuncCode": "int64_t function_407220(int64_t a1) {\n    // 0x407220\n    *(int32_t *)&g55 = g26;\n    *(int32_t *)&g56 = g25;\n    int64_t v1; // 0x407220\n    int64_t result = function_406c50(v1, v1, v1, v1, v1, v1, &g55, a1 & 0xffffffff); // 0x407246\n    g26 = *(int32_t *)&g55;\n    g60 = (char *)g58;\n    *(int32_t *)&g24 = g57;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407280",
            "funcStartAddr": "407280",
            "funcEndAddr": "407298",
            "decompiledFuncCode": "int64_t function_407280(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407280\n    return function_407220(1);\n}\n"
        },
        {
            "funcName": "function_4072a0",
            "funcStartAddr": "4072a0",
            "funcEndAddr": "4072b3",
            "decompiledFuncCode": "int64_t function_4072a0(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x4072a0\n    return function_407220(0);\n}\n"
        },
        {
            "funcName": "function_4072c0",
            "funcStartAddr": "4072c0",
            "funcEndAddr": "4072d5",
            "decompiledFuncCode": "int64_t function_4072c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4072c0\n    return function_406c50(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4072e0",
            "funcStartAddr": "4072e0",
            "funcEndAddr": "4072f6",
            "decompiledFuncCode": "int64_t function_4072e0(void) {\n    // 0x4072e0\n    return function_407220(0);\n}\n"
        },
        {
            "funcName": "function_407300",
            "funcStartAddr": "407300",
            "funcEndAddr": "407318",
            "decompiledFuncCode": "int64_t function_407300(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407300\n    return function_406c50(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407320",
            "funcStartAddr": "407320",
            "funcEndAddr": "40739a",
            "decompiledFuncCode": "int64_t function_407320(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40732b\n    int64_t v2 = (int64_t)&g10; // 0x40732b\n    int32_t * pwc; // 0x407320\n    int64_t v3; // 0x407320\n    int64_t n; // 0x407320\n    if (a2 == 0) {\n        goto lab_0x407372;\n    } else {\n        // 0x40732d\n        if (a3 == 0) {\n            // 0x407358\n            return -2;\n        }\n        // 0x407339\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x407372;\n        } else {\n            goto lab_0x407344;\n        }\n    }\n  lab_0x407372:\n    // 0x407372\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x407320\n    pwc = (int32_t *)&v4;\n    goto lab_0x407344;\n  lab_0x407344:;\n    char * wstr = (char *)v3; // 0x40734a\n    int64_t ps; // 0x407320\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40734a\n    int64_t result = v5; // 0x40734a\n    if (v5 < 0xfffffffe) {\n        // 0x407358\n        return result;\n    }\n    int64_t result2 = result; // 0x407389\n    if ((char)function_407840(0, v3) == 0) {\n        // 0x40738b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x407358\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4073a0",
            "funcStartAddr": "4073a0",
            "funcEndAddr": "4074a4",
            "decompiledFuncCode": "int64_t function_4073a0(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x4073a0\n    if (a3 == 0) {\n        // 0x4073d9\n        return 0;\n    }\n    int64_t v1 = result; // 0x4073ac\n    int64_t v2 = a3; // 0x4073ac\n    int64_t result2; // 0x4073a0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x4073ae\n        int64_t v4 = result; // 0x4073b1\n        if ((char)result == v3) {\n            // 0x4073d9\n            return result;\n        }\n        int64_t v5 = a3; // 0x4073b1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x4073c0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x4073e0;\n            }\n            // 0x4073c6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x4073d9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x4073d9\n        return result2;\n    }\n  lab_0x4073e0:;\n    int64_t result3 = v1; // 0x40740d\n    int64_t v6 = v2; // 0x40740d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x4073ef\n        int64_t v8 = 0x10000 * v7 | v7; // 0x4073fc\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x407406\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x407426\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x407455\n            int64_t v12 = v1 + 8; // 0x407459\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x407443\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40746c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x407463\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x4073d9\n                return 0;\n            }\n        }\n    }\n  lab_0x40746c:;\n    char v14 = a2; // 0x40746c\n    if (*(char *)result3 == v14) {\n        // 0x4073d9\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x407480\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x4073d9\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x4073d9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4074b0",
            "funcStartAddr": "4074b0",
            "funcEndAddr": "4074eb",
            "decompiledFuncCode": "int64_t function_4074b0(int64_t a1) {\n    // 0x4074b0\n    __fprintf_chk(g31, 1, \"%s\\n\", dcgettext(NULL, \"memory exhausted\", 5));\n    exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4074f0",
            "funcStartAddr": "4074f0",
            "funcEndAddr": "407505",
            "decompiledFuncCode": "int64_t function_4074f0(int64_t a1, int64_t a2) {\n    // 0x4074f0\n    return *(int64_t *)(a1 + 56);\n}\n"
        },
        {
            "funcName": "function_407510",
            "funcStartAddr": "407510",
            "funcEndAddr": "407525",
            "decompiledFuncCode": "int64_t function_407510(int64_t a1, int64_t a2) {\n    // 0x407510\n    return *(int64_t *)(a1 + 64);\n}\n"
        },
        {
            "funcName": "function_407530",
            "funcStartAddr": "407530",
            "funcEndAddr": "4075b3",
            "decompiledFuncCode": "int64_t function_407530(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a3 == 0 ? 15 : a3 - 1;\n    *(int64_t *)(a1 + 48) = v1;\n    int64_t v2 = a2 == 0 ? 4064 : a2; // 0x407552\n    *(int64_t *)a1 = v2;\n    int64_t v3 = function_4074f0(a1, v2); // 0x407559\n    *(int64_t *)(a1 + 8) = v3;\n    if (v3 == 0) {\n        // 0x4075ad\n        function_4074b0(a1);\n        // UNREACHABLE\n    }\n    int64_t v4 = v1 + 16 + v3 & (a3 == 0 ? -16 : -a3); // 0x40756f\n    *(int64_t *)(a1 + 16) = v4;\n    int64_t v5 = v3 + a1; // 0x407579\n    *(int64_t *)(a1 + 24) = v4;\n    *(int64_t *)v3 = v5;\n    *(int64_t *)(a1 + 32) = v5;\n    *(int64_t *)(v3 + 8) = 0;\n    char * v6 = (char *)(a1 + 80); // 0x407594\n    *v6 = *v6 & -7;\n    return 1;\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "4075c0",
            "funcEndAddr": "4075d1",
            "decompiledFuncCode": "int64_t _obstack_begin(int64_t a1, int32_t a2, int32_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)(a1 + 80); // 0x4075c0\n    *v1 = *v1 & -2;\n    *(int64_t *)(a1 + 56) = a4;\n    *(int64_t *)(a1 + 64) = a5;\n    return function_407530(a1, (int64_t)a2, (int64_t)a3);\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "4075e0",
            "funcEndAddr": "4075f5",
            "decompiledFuncCode": "int64_t _obstack_begin_1(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * v1 = (char *)(a1 + 80); // 0x4075e0\n    *v1 = *v1 | 1;\n    *(int64_t *)(a1 + 56) = a4;\n    *(int64_t *)(a1 + 64) = a5;\n    *(int64_t *)(a1 + 72) = a6;\n    return function_407530(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "407600",
            "funcEndAddr": "4076fb",
            "decompiledFuncCode": "int64_t _obstack_newchunk(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4) {\n    int64_t * v1 = (int64_t *)(a1 + 24); // 0x40760a\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x40760e\n    uint64_t v3 = *v1 - *v2; // 0x40760e\n    uint64_t v4 = v3 + a2; // 0x407616\n    if (v4 < a2) {\n        // 0x4076f5\n        function_4074b0(a1);\n        // UNREACHABLE\n    }\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x40761f\n    uint64_t v6 = v4 + *v5; // 0x40761f\n    if (v6 < v4) {\n        // 0x4076f5\n        function_4074b0(a1);\n        // UNREACHABLE\n    }\n    int64_t * v7 = (int64_t *)(a1 + 8); // 0x407612\n    int64_t v8 = *v7; // 0x407612\n    uint64_t v9 = v3 / 8 + 100 + v6; // 0x40762d\n    uint64_t v10 = v6 <= a1 ? a1 : v6; // 0x407632\n    int64_t v11 = v10 >= v9 ? v10 : v9; // 0x407639\n    int64_t v12 = function_4074f0(a1, v11); // 0x407658\n    if (v12 == 0) {\n        // 0x4076f5\n        function_4074b0(a1);\n        // UNREACHABLE\n    }\n    int64_t v13 = v12 + v11; // 0x407669\n    *v7 = v12;\n    int64_t * v14 = (int64_t *)(v12 + 8); // 0x407675\n    *v14 = v8;\n    *(int64_t *)(a1 + 32) = v13;\n    *(int64_t *)v12 = v13;\n    int64_t v15 = *v5; // 0x407681\n    int64_t v16 = v12 + 16 + v15 & -1 - v15; // 0x407693\n    int64_t * dest_mem = memcpy((int64_t *)v16, (int64_t *)*v2, (int32_t)v3); // 0x407699\n    char * v17 = (char *)(a1 + 80); // 0x40769e\n    int64_t result = (int64_t)dest_mem; // 0x4076a4\n    if ((*v17 & 2) == 0) {\n        int64_t v18 = *v5; // 0x4076a6\n        int64_t v19 = v8 + 16 + v18 & -1 - v18; // 0x4076b3\n        result = v19;\n        if (*v2 == v19) {\n            // 0x4076e0\n            *v14 = *(int64_t *)(v8 + 8);\n            result = function_407510(a1, v8);\n        }\n    }\n    // 0x4076bd\n    *v2 = v16;\n    *v1 = v16 + v3;\n    *v17 = *v17 & -3;\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "407700",
            "funcEndAddr": "407737",
            "decompiledFuncCode": "int64_t _obstack_allocated_p(int64_t a1, uint64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x407700\n    if (v1 == 0) {\n        // 0x407723\n        return 0;\n    }\n    if (v1 < a2) {\n        // 0x407715\n        if (*(int64_t *)v1 >= a2) {\n            // break -> 0x407723\n            break;\n        }\n    }\n    int64_t v2 = *(int64_t *)(v1 + 8); // 0x40771a\n    int64_t result = 0; // 0x407721\n    while (v2 != 0) {\n        uint64_t v3 = v2;\n        if (v3 < a2) {\n            // 0x407715\n            result = 1;\n            if (*(int64_t *)v3 >= a2) {\n                // break -> 0x407723\n                break;\n            }\n        }\n        // 0x40771a\n        v2 = *(int64_t *)(v3 + 8);\n        result = 0;\n    }\n    // 0x407723\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "407740",
            "funcEndAddr": "4077a5",
            "decompiledFuncCode": "int64_t _obstack_free(int64_t a1, int32_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x407747\n    int64_t v2 = *v1; // 0x407747\n    int64_t result2; // 0x407740\n    if (v2 != 0) {\n        uint64_t v3 = (int64_t)a2;\n        char * v4 = (char *)(a1 + 80);\n        uint64_t result; // 0x40775d\n        if (v2 < v3) {\n            // 0x40775d\n            result = *(int64_t *)v2;\n            if (result >= v3) {\n                // 0x407790\n                *(int64_t *)(a1 + 24) = v3;\n                *(int64_t *)(a1 + 16) = v3;\n                *(int64_t *)(a1 + 32) = result;\n                *v1 = v2;\n                return result;\n            }\n        }\n        int64_t v5 = *(int64_t *)(v2 + 8); // 0x407765\n        int64_t v6 = function_407510(a1, v2); // 0x40776c\n        *v4 = *v4 | 2;\n        result2 = v6;\n        while (v5 != 0) {\n            uint64_t v7 = v5;\n            if (v7 < v3) {\n                // 0x40775d\n                result = *(int64_t *)v7;\n                if (result >= v3) {\n                    // 0x407790\n                    *(int64_t *)(a1 + 24) = v3;\n                    *(int64_t *)(a1 + 16) = v3;\n                    *(int64_t *)(a1 + 32) = result;\n                    *v1 = v7;\n                    return result;\n                }\n            }\n            // 0x407765\n            v5 = *(int64_t *)(v7 + 8);\n            v6 = function_407510(a1, v7);\n            *v4 = *v4 | 2;\n            result2 = v6;\n        }\n    }\n    if (a2 == 0) {\n        // 0x407786\n        return result2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "4077b0",
            "funcEndAddr": "4077d9",
            "decompiledFuncCode": "int64_t _obstack_memory_used(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x4077b0\n    int64_t result = 0; // 0x4077b9\n    if (v1 == 0) {\n        // 0x4077d2\n        return 0;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x4077c6\n    result += *(int64_t *)v2 - v2;\n    while (v3 != 0) {\n        // 0x4077c0\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n        result += *(int64_t *)v2 - v2;\n    }\n    // 0x4077d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4077e0",
            "funcStartAddr": "4077e0",
            "funcEndAddr": "40783d",
            "decompiledFuncCode": "int64_t function_4077e0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4077e7\n    int64_t v2; // 0x4077e0\n    int64_t result = function_406430(a1, v2); // 0x4077f8\n    if ((v2 & 32) != 0) {\n        // 0x407820\n        if ((int32_t)result == 0) {\n            // 0x407824\n            *__errno_location() = 0;\n        }\n        // 0x40781a\n        return 0xffffffff;\n    }\n    // 0x407801\n    if ((int32_t)result == 0) {\n        // 0x40781a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x407808\n    if (v1 == 0) {\n        // 0x40780a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40781a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407840",
            "funcStartAddr": "407840",
            "funcEndAddr": "40789e",
            "decompiledFuncCode": "int64_t function_407840(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x407846\n    if (locale == NULL) {\n        // 0x407873\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x407846\n    bool v2; // 0x407840\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x407840\n    int64_t v5 = v1; // 0x407840\n    int64_t v6 = 2; // 0x407865\n    unsigned char v7 = *(char *)v5; // 0x407865\n    char v8 = *(char *)v4; // 0x407865\n    char v9 = v8; // 0x407865\n    bool v10 = false; // 0x407865\n    while (v7 == v8) {\n        // 0x407858\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x407871\n    int64_t v13 = v1; // 0x407871\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x407873\n        return 0;\n    }\n    int64_t v14 = 6; // 0x407871\n    unsigned char v15 = *(char *)v13; // 0x40788d\n    char v16 = *(char *)v12; // 0x40788d\n    char v17 = v16; // 0x40788d\n    bool v18 = false; // 0x40788d\n    while (v15 == v16) {\n        // 0x407880\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4078a0",
            "funcStartAddr": "4078a0",
            "funcEndAddr": "407e02",
            "decompiledFuncCode": "int64_t function_4078a0(void) {\n    char * v1 = nl_langinfo(14); // 0x4078b6\n    char * v2 = g59; // 0x4078bb\n    char * v3; // 0x4078a0\n    int64_t v4; // 0x4078a0\n    int64_t v5; // 0x4078a0\n    int64_t v6; // 0x4078a0\n    int64_t v7; // 0x4078a0\n    int32_t size; // 0x4078a0\n    int32_t size2; // 0x4078a0\n    int32_t len; // 0x407972\n    int64_t v8; // 0x407972\n    char * env_val; // 0x40795d\n    if (v2 == NULL) {\n        // 0x407958\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4079c5;\n        } else {\n            // 0x40796a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4079c5;\n            } else {\n                // 0x40796f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40795d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407df5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4079c5;\n                    } else {\n                        // 0x407d69\n                        size2 = len + 14;\n                        goto lab_0x40798b;\n                    }\n                } else {\n                    goto lab_0x40798b;\n                }\n            }\n        }\n    } else {\n        // 0x4078a0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4078da;\n    }\n  lab_0x407c0c:;\n    // 0x407c0c\n    struct _IO_FILE * stream; // 0x407a4b\n    int32_t v10 = __uflow(stream); // 0x407c0f\n    int64_t v11; // 0x4078a0\n    int64_t v12 = v11; // 0x407c19\n    int64_t v13; // 0x4078a0\n    int64_t v14 = v13; // 0x407c19\n    int32_t v15 = v10; // 0x407c19\n    int64_t v16; // 0x4078a0\n    int64_t v17 = v16; // 0x407c19\n    int64_t v18 = v11; // 0x407c19\n    int64_t v19 = v13; // 0x407c19\n    int64_t v20 = v16; // 0x407c19\n    if (v10 == -1) {\n        // break -> 0x407c1f\n        goto lab_0x407c1f;\n    }\n    goto lab_0x407a99;\n  lab_0x407a8e:;\n    // 0x407a8e\n    int64_t v90; // 0x4078a0\n    int64_t * v32; // 0x407a80\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4078a0\n    v12 = v89;\n    int64_t v91; // 0x4078a0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4078a0\n    v17 = v92;\n    goto lab_0x407a99;\n  lab_0x407a99:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4078a0\n    int32_t v25; // bp-120, 0x4078a0\n    int32_t v26; // bp-184, 0x4078a0\n    int64_t v27; // 0x407a4b\n    int64_t v28; // 0x407a68\n    int64_t v29; // 0x407a6d\n    int64_t * v30; // 0x407a84\n    switch (c) {\n        case 32: {\n            goto lab_0x407a80;\n        }\n        case 10: {\n            goto lab_0x407a80;\n        }\n        case 9: {\n            goto lab_0x407a80;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x407c71\n            int32_t v33; // 0x4078a0\n            char v34; // 0x4078a0\n            int32_t v35; // 0x407c7e\n            if (v31 < *v30) {\n                // 0x407c50\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x407c7b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x407c71\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407c50\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x407c7b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x407c60\n                v36 = v33;\n            }\n            // 0x407d4f\n            if (v36 == -1) {\n                // break -> 0x407c1f\n                break;\n            }\n            goto lab_0x407a80;\n        }\n        default: {\n            // 0x407aaf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x407c1f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x407ad8\n            int64_t v39 = v37 + 4; // 0x407ada\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x407ae6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x407ae8\n            while (v41 == 0) {\n                // 0x407ad8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x407b06\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x407b12\n            int64_t v45 = v43 + 4; // 0x407b14\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407b20\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407b22\n            while (v47 == 0) {\n                // 0x407b12\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x407b0f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407b38\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x407b48\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x407b4c\n            int64_t v52 = v51 + v48; // 0x407b55\n            int64_t * mem; // 0x4078a0\n            int64_t v53; // 0x4078a0\n            int64_t v54; // 0x4078a0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x407c8b\n                int64_t v56 = v55 + 3; // 0x407c97\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x407b71\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x407b80\n            if (mem == NULL) {\n                // 0x407dac\n                free((int64_t *)v21);\n                function_406430(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x407a24;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x407b98\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x407ba2\n            uint32_t v62 = (int32_t)v59; // 0x407ba5\n            int64_t v63; // 0x4078a0\n            if (v62 >= 8) {\n                // 0x407cb4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x407cce\n                int64_t v66 = v61 - v65; // 0x407cd2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x407cdd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x407cee\n                    int64_t v70 = v69 & 0xffffffff; // 0x407cee\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x407ceb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x407d7f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x407bb7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x407bbb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x407bcb\n            int64_t v74 = v60 - 1; // 0x407bcf\n            uint32_t v75 = (int32_t)v73; // 0x407bd4\n            int64_t v76; // 0x4078a0\n            if (v75 >= 8) {\n                // 0x407d02\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x407d0c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x407d1c\n                int64_t v80 = v74 - v79; // 0x407d20\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x407d2b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x407d3b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407d39\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x407d96\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x407d9e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407be6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x407bea\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407de3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x407bfe\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x407a8e;\n            } else {\n                goto lab_0x407c0c;\n            }\n        }\n    }\n  lab_0x407a80:;\n    int64_t v93 = v23; // 0x4078a0\n    int64_t v94 = v22; // 0x4078a0\n    int64_t v95 = v21; // 0x4078a0\n    goto lab_0x407a80_2;\n  lab_0x4079c5:;\n    int64_t * mem3 = malloc(size); // 0x4079c5\n    int64_t v97 = (int64_t)&g10; // 0x4079d0\n    int64_t v98; // 0x4078a0\n    int64_t path; // 0x4078a0\n    if (mem3 == NULL) {\n        goto lab_0x4079a2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4079c5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4079e6;\n    }\n  lab_0x4078da:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x4078cd\n    char v100 = *v3; // 0x4078da\n    int64_t v101; // 0x4078a0\n    if (v100 == 0) {\n        // 0x407934\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4078a0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4078a0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x407920\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x407927;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4078f0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4078fd\n        char v107 = *(char *)v106; // 0x407902\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x407934\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40790b\n    v104 = v103 + 1;\n  lab_0x407927:\n    // 0x407934\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4079a2:;\n    char * v108 = (char *)v97;\n    g59 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4078da;\n  lab_0x4079e6:;\n    int64_t v109 = v98 + path; // 0x4079e6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407a12\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x407a41\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x407d72\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x407a65\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x407a80_2:;\n                uint64_t v96 = *v32; // 0x407a80\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x407c0c;\n                } else {\n                    goto lab_0x407a8e;\n                }\n            }\n          lab_0x407c1f:\n            // 0x407c1f\n            function_406430(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x407c3e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407a24;\n  lab_0x40798b:;\n    int64_t * mem4 = malloc(size2); // 0x40798b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x407a31\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4079e6;\n    } else {\n        goto lab_0x4079a2;\n    }\n  lab_0x407a24:\n    // 0x407a24\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4079a2;\n}\n"
        },
        {
            "funcName": "function_407e10",
            "funcStartAddr": "407e10",
            "funcEndAddr": "407e6d",
            "decompiledFuncCode": "int64_t function_407e10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407e10\n    return function_4018d0();\n}\n"
        },
        {
            "funcName": "function_407e70",
            "funcStartAddr": "407e70",
            "funcEndAddr": "407e71",
            "decompiledFuncCode": "int64_t function_407e70(void) {\n    // 0x407e70\n    int64_t result; // 0x407e70\n    return result;\n}\n"
        },
        {
            "funcName": "function_407e80",
            "funcStartAddr": "407e80",
            "funcEndAddr": "407e98",
            "decompiledFuncCode": "int64_t function_407e80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407e80\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_407e98",
            "funcStartAddr": "407e98",
            "funcEndAddr": "407eb8",
            "decompiledFuncCode": "int64_t function_407e98(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x407ea2\n    while (*(int64_t *)v1 != -1) {\n        // 0x407ea3\n        v1 -= 8;\n    }\n    // 0x407eb4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_wc.elf"
}