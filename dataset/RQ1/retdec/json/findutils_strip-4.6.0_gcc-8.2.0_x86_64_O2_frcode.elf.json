{
    "funcInfo": [
        {
            "funcName": "function_4014f0",
            "funcStartAddr": "4014f0",
            "funcEndAddr": "4014f5",
            "decompiledFuncCode": "int64_t function_4014f0(void) {\n    // 0x4014f0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4014f5",
            "funcStartAddr": "4014f5",
            "funcEndAddr": "4014fa",
            "decompiledFuncCode": "int64_t function_4014f5(void) {\n    // 0x4014f5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4014fa",
            "funcStartAddr": "4014fa",
            "funcEndAddr": "4014ff",
            "decompiledFuncCode": "int64_t function_4014fa(void) {\n    // 0x4014fa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4014ff",
            "funcStartAddr": "4014ff",
            "funcEndAddr": "401504",
            "decompiledFuncCode": "int64_t function_4014ff(void) {\n    // 0x4014ff\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401504",
            "funcStartAddr": "401504",
            "funcEndAddr": "401509",
            "decompiledFuncCode": "int64_t function_401504(void) {\n    // 0x401504\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401509",
            "funcStartAddr": "401509",
            "funcEndAddr": "40150e",
            "decompiledFuncCode": "int64_t function_401509(void) {\n    // 0x401509\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401510",
            "funcStartAddr": "401510",
            "funcEndAddr": "401a00",
            "decompiledFuncCode": "int64_t function_401510(int64_t a1, int64_t a2) {\n    // 0x401510\n    function_401cb0((char *)(a2 == 0 ? (int64_t)\"frcode\" : a2));\n    int64_t v1; // 0x401510\n    if ((int32_t)function_405810(0x401c10, a2, v1) != 0) {\n        // 0x4015eb\n        error(1, *__errno_location(), dcgettext(NULL, \"The atexit library function failed\", 5));\n    }\n    char * n = (char *)1026; // bp-72, 0x401558\n    int64_t lineptr = function_403c70(1026); // bp-80, 0x40156b\n    int64_t v2 = function_403c70(1026); // 0x401570\n    *(char *)v2 = 0;\n    char * v3; // bp-104, 0x401510\n    char * v4 = v3; // 0x401578\n    int32_t v5 = 10; // 0x401578\n    int64_t v6 = 0; // 0x401578\n    int64_t v7 = 0; // 0x401578\n    char * v8; // 0x401510\n    int32_t delim; // 0x401510\n    int64_t v9; // 0x401510\n    int64_t v10; // 0x401510\n    int64_t v11; // 0x401510\n    int64_t v12; // 0x401510\n    int64_t result; // 0x401510\n    char * str; // 0x40161a\n    while (true) {\n        // 0x40157b\n        delim = v5;\n        v8 = v4;\n        v9 = v6;\n        v12 = v7;\n        int32_t v13; // 0x401510\n        while (true) {\n          lab_0x40157b:\n            // 0x40157b\n            v7 = v12;\n            v6 = v9;\n            v4 = v8;\n            v13 = function_405110(a1 & 0xffffffff, a2, \"hv0S:\", &g2, 0, v1);\n            switch (v13) {\n                case -1: {\n                    goto lab_0x40171a;\n                }\n                case 83: {\n                    // 0x40161a\n                    str = g44;\n                    *__errno_location() = 0;\n                    char * endptr; // bp-64, 0x401510\n                    int32_t str_as_l = strtol(str, &endptr, 10); // 0x401643\n                    if (str_as_l == 0) {\n                        // 0x4016c9\n                        if (endptr == g44) {\n                            // 0x40197b\n                            error(1, (int32_t)\"You need to specify a security level as a decimal integer.\" ^ (int32_t)\"You need to specify a security level as a decimal integer.\", dcgettext(NULL, \"You need to specify a security level as a decimal integer.\", 5));\n                            v10 = -1;\n                            goto lab_0x40167c;\n                        } else {\n                            // 0x4016db\n                            v11 = 0;\n                            if (*endptr == 0) {\n                                goto lab_0x4016a1;\n                            } else {\n                                goto lab_0x4016e1;\n                            }\n                        }\n                    } else {\n                        // 0x4019a2\n                        if (*endptr != 0) {\n                            goto lab_0x4016e1;\n                        } else {\n                            // 0x4019b1\n                            v10 = str_as_l;\n                            if (str_as_l == 1) {\n                                goto lab_0x4016a1;\n                            } else {\n                                goto lab_0x40167c;\n                            }\n                        }\n                    }\n                }\n                default: {\n                    goto lab_0x4015a1;\n                }\n            }\n        }\n      lab_0x4015a1:\n        if (v13 > 83) {\n            // 0x4015a3\n            v3 = v4;\n            if (v13 == 104) {\n                // 0x4016ac\n                function_401b10((int64_t)g26);\n                result = 0;\n                return result;\n            } else {\n                if (v13 != 118) {\n                    goto lab_0x4015d8_2;\n                } else {\n                    // 0x4015b1\n                    function_401b70(\"frcode\");\n                    result = 0;\n                    return result;\n                }\n            }\n        }\n        // 0x4015d0\n        v5 = 0;\n        if (v13 != 48) {\n            // 0x4015d8\n            v3 = v4;\n            goto lab_0x4015d8_2;\n        }\n    }\n  lab_0x40171a:\n    // 0x40171a\n    v3 = v4;\n    if (*(int32_t *)0x60821c != (int32_t)a1) {\n      lab_0x4015d8_2:\n        // 0x4015d8\n        function_401b10((int64_t)g29);\n        // 0x4015bd\n        return 1;\n    }\n    // 0x401727\n    if (v7 == 0) {\n        // 0x401900\n        if (fwrite(&g1, 1, 10, g26) != 10) {\n            // 0x401921\n            error(1, *__errno_location(), dcgettext(NULL, \"Failed to write to standard output\", 5));\n        }\n    } else {\n        // 0x401737\n        fputc((int32_t)(v6 == 0) + 49, g26);\n        fputc(0, g26);\n    }\n    // 0x401753\n    v3 = (char *)1026;\n    int32_t v14 = getdelim((char **)&lineptr, (int32_t *)&n, delim, g27); // 0x401772\n    int64_t v15 = v2; // 0x401779\n    int64_t v16 = lineptr; // 0x401779\n    int32_t v17; // 0x401510\n    int64_t v18; // 0x401510\n    int64_t v19; // 0x401510\n    int64_t v20; // 0x401510\n    int64_t v21; // 0x401510\n    int64_t v22; // 0x401510\n    int64_t v23; // 0x401510\n    int64_t v24; // 0x4017d0\n    int64_t v25; // 0x4017d8\n    if (v14 >= 1) {\n        // 0x40177f\n        v17 = v14;\n        v19 = v7;\n        v18 = 0;\n        v20 = v2;\n        while (true) {\n          lab_0x40177f:\n            // 0x40177f\n            v21 = v20;\n            int64_t v26 = v18;\n            *(char *)(lineptr - 1 + (int64_t)v17) = 0;\n            int64_t v27 = lineptr; // 0x40178b\n            char v28 = *(char *)v21; // 0x401790\n            int64_t v29 = v21; // 0x401799\n            if (!((v28 == 0 | *(char *)v27 != v28))) {\n                int64_t v30 = v27; // 0x4017c5\n                int64_t v31 = v21;\n                int64_t v32 = v31 + 1; // 0x4017c1\n                v30++;\n                char v33 = *(char *)v32; // 0x4017c9\n                v29 = v32;\n                while (!((v31 == v21 + 0x7ffffffd | v33 == 0 | *(char *)v30 != v33))) {\n                    // 0x4017c1\n                    v31 = v32;\n                    v32 = v31 + 1;\n                    v30++;\n                    v33 = *(char *)v32;\n                    v29 = v32;\n                }\n            }\n            // 0x4017d0\n            v24 = v29 - v21;\n            v25 = v24 - v26;\n            v23 = v27;\n            if ((int32_t)v19 != 0) {\n                goto lab_0x401862;\n            } else {\n                int64_t v34 = (int32_t)v25 < 0x8000 ? v25 : -v26;\n                int64_t v35 = v34 & 0xffffffff;\n                int32_t v36 = v34;\n                if (v36 < 128) {\n                    // 0x4018bd\n                    v22 = v35;\n                    if (_IO_putc(v36, g26) != -1) {\n                        // 0x40185d\n                        v23 = lineptr;\n                        goto lab_0x401862;\n                    } else {\n                        goto lab_0x4018c9;\n                    }\n                } else {\n                    // 0x40180a\n                    if (_IO_putc(128, g26) == -1) {\n                        // 0x4018f6\n                        function_401ae0(128);\n                    }\n                    if (v36 > 0x7fff) {\n                      lab_0x4019d9:\n                        // 0x4019d9\n                        __assert_fail(\"c <= SHRT_MAX\", \"frcode.c\", 123, \"put_short\");\n                        return &g46;\n                    }\n                    if (v36 < -0x8000) {\n                        // 0x4019c0\n                        __assert_fail(\"c >= SHRT_MIN\", \"frcode.c\", 124, \"put_short\");\n                        goto lab_0x4019d9;\n                    }\n                    uint32_t v37 = v36 >> 8; // 0x401841\n                    int32_t v38 = _IO_putc(v37, g26); // 0x401844\n                    v22 = v37;\n                    if (v38 == -1) {\n                        goto lab_0x4018c9;\n                    } else {\n                        // 0x40184e\n                        if (_IO_putc(v36, g26) == -1) {\n                            goto lab_0x4018c9;\n                        } else {\n                            // 0x40185d\n                            v23 = lineptr;\n                            goto lab_0x401862;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4018d5:\n    // 0x4018d5\n    free((int64_t *)v16);\n    free((int64_t *)v15);\n    result = (int32_t)&g46 ^ (int32_t)&g46;\n    // 0x4015bd\n    return result;\n  lab_0x401862:;\n    int64_t v39 = (int32_t)v25 < 0x8000 ? v24 & 0xffffffff : 0;\n    int64_t str2 = v23 + (0x100000000 * v39 >> 32); // 0x401865\n    int32_t fputs_rc = fputs((char *)str2, g26); // 0x40186f\n    int64_t v40 = str2; // 0x401877\n    if (fputs_rc == -1) {\n        // 0x4018b6\n        function_401ae0(v40);\n        goto lab_0x40188c;\n    } else {\n        // 0x401879\n        if (_IO_putc(0, g26) == -1) {\n            // 0x4018b6\n            function_401ae0(0);\n            goto lab_0x40188c;\n        } else {\n            goto lab_0x40188c;\n        }\n    }\n  lab_0x40188c:;\n    int64_t v41 = lineptr; // 0x40188c\n    lineptr = v21;\n    *(int64_t *)&v3 = (int64_t)n;\n    *(int64_t *)&n = (int64_t)v3;\n    int32_t v42 = getdelim((char **)&lineptr, (int32_t *)&n, delim, g27); // 0x401772\n    v17 = v42;\n    v19 = 0;\n    v18 = v39;\n    v20 = v41;\n    v15 = v41;\n    v16 = lineptr;\n    if (v42 < 1) {\n        // break -> 0x4018d5\n        goto lab_0x4018d5;\n    }\n    goto lab_0x40177f;\n  lab_0x4018c9:\n    // 0x4018c9\n    function_401ae0(v22);\n    v23 = lineptr;\n    goto lab_0x401862;\n  lab_0x4016e1:\n    // 0x4016e1\n    error(1, (int32_t)\"Security level %s has unexpected suffix %s.\" ^ (int32_t)\"Security level %s has unexpected suffix %s.\", dcgettext(NULL, \"Security level %s has unexpected suffix %s.\", 5));\n    v10 = -1;\n    goto lab_0x40167c;\n  lab_0x40167c:\n    // 0x40167c\n    error(1, (int32_t)\"slocate security level %ld is unsupported.\" ^ (int32_t)\"slocate security level %ld is unsupported.\", dcgettext(NULL, \"slocate security level %ld is unsupported.\", 5));\n    v11 = v10;\n    goto lab_0x4016a1;\n  lab_0x4016a1:\n    // 0x4016a1\n    v8 = str;\n    v9 = v11;\n    v12 = 1;\n    goto lab_0x40157b;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401a00",
            "funcEndAddr": "401a2b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401a00\n    int64_t v1; // 0x401a00\n    __libc_start_main(0x401510, (int32_t)a4, (char **)&v1, (void (*)())0x4057a0, (void (*)())0x405800, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a2b",
            "funcStartAddr": "401a2b",
            "funcEndAddr": "401a4a",
            "decompiledFuncCode": "int64_t function_401a2b(void) {\n    // 0x401a2b\n    return &g25;\n}\n"
        },
        {
            "funcName": "function_401a4a",
            "funcStartAddr": "401a4a",
            "funcEndAddr": "401a81",
            "decompiledFuncCode": "int64_t function_401a4a(void) {\n    // 0x401a4a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401a81",
            "funcStartAddr": "401a81",
            "funcEndAddr": "401ad8",
            "decompiledFuncCode": "int64_t function_401a81(void) {\n    // 0x401a81\n    if (g30 != 0) {\n        // 0x401ad7\n        int64_t result; // 0x401a81\n        return result;\n    }\n    int64_t v1 = g31; // 0x401ab4\n    int64_t result2; // 0x401ac6\n    if (g31 >= ((int64_t)&g12 - (int64_t)&g11 >> 3) - 1) {\n        // 0x401ac6\n        result2 = function_401a2b();\n        g30 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g12 - (int64_t)&g11 >> 3) - 1) {\n        // 0x401ab6\n        v1++;\n    }\n    // 0x401aaa\n    g31 = v1;\n    // 0x401ac6\n    result2 = function_401a2b();\n    g30 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401ad8",
            "funcStartAddr": "401ad8",
            "funcEndAddr": "401add",
            "decompiledFuncCode": "int64_t function_401ad8(void) {\n    // 0x401ad8\n    return function_401a4a();\n}\n"
        },
        {
            "funcName": "function_401ae0",
            "funcStartAddr": "401ae0",
            "funcEndAddr": "401b0c",
            "decompiledFuncCode": "int64_t function_401ae0(int64_t a1) {\n    // 0x401ae0\n    error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n    return &g46;\n}\n"
        },
        {
            "funcName": "function_401b10",
            "funcStartAddr": "401b10",
            "funcEndAddr": "401b63",
            "decompiledFuncCode": "int64_t function_401b10(int64_t a1) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x401b3c\n    fprintf(stream, dcgettext(NULL, \"Usage: %s [-0 | --null] [--version] [--help]\\n\", 5));\n    return fputs(dcgettext(NULL, \"\\nReport bugs to <bug-findutils@gnu.org>.\\n\", 5), stream);\n}\n"
        },
        {
            "funcName": "function_401b70",
            "funcStartAddr": "401b70",
            "funcEndAddr": "401bea",
            "decompiledFuncCode": "int64_t function_401b70(char * a1) {\n    // 0x401b70\n    int64_t v1; // 0x401b70\n    function_403ed0((int64_t)g29, v1);\n    char * v2 = dcgettext(NULL, \"Kevin Dalley\", 5); // 0x401b8f\n    char * v3 = dcgettext(NULL, \"James Youngman\", 5); // 0x401ba3\n    function_403b40((int64_t)g26, (int64_t)a1, \"GNU findutils\", (int64_t)g15, (int64_t)dcgettext(NULL, \"Eric B. Decker\", 5), (int64_t)v3);\n    return (int64_t)v2;\n}\n"
        },
        {
            "funcName": "function_401bf0",
            "funcStartAddr": "401bf0",
            "funcEndAddr": "401bf8",
            "decompiledFuncCode": "int64_t function_401bf0(int64_t a1) {\n    // 0x401bf0\n    g33 = a1;\n    int64_t result; // 0x401bf0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401c00",
            "funcStartAddr": "401c00",
            "funcEndAddr": "401c08",
            "decompiledFuncCode": "int64_t function_401c00(int64_t a1) {\n    // 0x401c00\n    g32 = a1;\n    int64_t result; // 0x401c00\n    return result;\n}\n"
        },
        {
            "funcName": "function_401c10",
            "funcStartAddr": "401c10",
            "funcEndAddr": "401cae",
            "decompiledFuncCode": "int64_t function_401c10(void) {\n    // 0x401c10\n    int32_t * err_num; // 0x401c26\n    if ((int32_t)function_4051c0((int64_t)g26) == 0) {\n        goto lab_0x401c3c;\n    } else {\n        // 0x401c26\n        err_num = __errno_location();\n        if (g32 == 0) {\n            goto lab_0x401c53;\n        } else {\n            // 0x401c37\n            if (*err_num != 32) {\n                goto lab_0x401c53;\n            } else {\n                goto lab_0x401c3c;\n            }\n        }\n    }\n  lab_0x401c3c:;\n    int64_t result = function_4051c0((int64_t)g29); // 0x401c43\n    if ((int32_t)result == 0) {\n        // 0x401c4c\n        return result;\n    }\n    // 0x401c8e\n    _exit(g16);\n    // UNREACHABLE\n  lab_0x401c53:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401c5f\n    if (g33 == 0) {\n        // 0x401c99\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401c73\n        error(0, *err_num, \"%s: %s\", (char *)function_403500((int64_t)g33), v1);\n    }\n    // 0x401c8e\n    _exit(g16);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cb0",
            "funcStartAddr": "401cb0",
            "funcEndAddr": "401d49",
            "decompiledFuncCode": "int64_t function_401cb0(char * str) {\n    // 0x401cb0\n    if (str == NULL) {\n        // 0x401d29\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g29);\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = (int64_t)str;\n    char * found_char_pos = strrchr(str, 47); // 0x401cbe\n    int64_t result = (int64_t)found_char_pos; // 0x401cbe\n    if (found_char_pos == NULL) {\n        // 0x401d19\n        g34 = v1;\n        g28 = v1;\n        return result;\n    }\n    int64_t v2 = result + 1; // 0x401cc8\n    if (v2 - v1 < 7) {\n        // 0x401d19\n        g34 = v1;\n        g28 = v1;\n        return result;\n    }\n    // 0x401cd8\n    bool v3; // 0x401cb0\n    int64_t v4 = v3 ? -1 : 1;\n    int64_t v5 = (int64_t)\"/.libs/\"; // 0x401cb0\n    int64_t v6 = result - 6; // 0x401cb0\n    int64_t v7 = 7; // 0x401ce6\n    unsigned char v8 = *(char *)v6; // 0x401ce6\n    char v9 = *(char *)v5; // 0x401ce6\n    char v10 = v9; // 0x401ce6\n    bool v11 = false; // 0x401ce6\n    while (v8 == v9) {\n        v7--;\n        v5 += v4;\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    int64_t v13 = (int64_t)\"lt-\"; // 0x401cf0\n    int64_t v14 = v2; // 0x401cf0\n    int64_t v15 = 3; // 0x401cf0\n    if ((v8 >= v12 && !v11) != v8 < v12) {\n        // 0x401d19\n        g34 = v1;\n        g28 = v1;\n        return result;\n    }\n    unsigned char v16 = *(char *)v14; // 0x401d02\n    char v17 = *(char *)v13; // 0x401d02\n    char v18 = v17; // 0x401d02\n    bool v19 = false; // 0x401d02\n    while (v16 == v17) {\n        // 0x401cf2\n        v15--;\n        v13 += v4;\n        v14 += v4;\n        v18 = v16;\n        v19 = true;\n        if (v15 == 0) {\n            // break -> \n            break;\n        }\n        v16 = *(char *)v14;\n        v17 = *(char *)v13;\n        v18 = v17;\n        v19 = false;\n    }\n    unsigned char v20 = v18;\n    int64_t v21 = v2; // 0x401d0c\n    if ((v16 >= v20 && !v19) == v16 < v20) {\n        // 0x401d0e\n        v21 = result + 4;\n        g25 = v21;\n    }\n    // 0x401d19\n    g34 = v21;\n    g28 = v21;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401d50",
            "funcStartAddr": "401d50",
            "funcEndAddr": "401e42",
            "decompiledFuncCode": "int64_t function_401d50(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x401d64\n    int64_t result = (int64_t)v1; // 0x401d64\n    if (result != a1) {\n        // 0x401d71\n        return result;\n    }\n    int64_t v2 = function_405230(); // 0x401d80\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x401e36\n    if (v3 == 85) {\n        // 0x401d90\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x401e28\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x401dbe\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x401dcb\n        // 0x401d71\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x401e28\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x401e0d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x401e1a\n    // 0x401d71\n    return result4;\n}\n"
        },
        {
            "funcName": "function_401e50",
            "funcStartAddr": "401e50",
            "funcEndAddr": "401ea9",
            "decompiledFuncCode": "int64_t function_401e50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x401e50\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x401e9a\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401eb0",
            "funcStartAddr": "401eb0",
            "funcEndAddr": "402e53",
            "decompiledFuncCode": "int64_t function_401eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t str) {\n    // 0x401eb0\n    int32_t v1; // 0x401eb0\n    uint32_t v2 = v1;\n    int64_t v3 = str + 1;\n    int64_t v4 = 0; // 0x401eed\n    int64_t v5 = 0; // 0x401eed\n    int64_t v6; // 0x401eb0\n    int64_t v7; // 0x401eb0\n    int64_t v8; // 0x401eb0\n    int64_t v9; // 0x401eb0\n    int64_t v10; // 0x401eb0\n    int64_t v11; // 0x401eb0\n    int64_t v12; // 0x401eb0\n    int64_t v13; // 0x401eb0\n    int64_t v14; // 0x401eb0\n    int64_t v15; // 0x401eb0\n    int64_t v16; // 0x401eb0\n    int64_t v17; // 0x401eb0\n    int64_t v18; // 0x401eb0\n    int64_t v19; // 0x401eb0\n    int64_t v20; // 0x401eb0\n    int64_t v21; // 0x401eb0\n    int64_t v22; // 0x401eb0\n    int64_t v23; // 0x401eb0\n    int64_t v24; // 0x401eb0\n    int64_t result; // 0x401eb0\n    int64_t v25; // 0x401eb0\n    int64_t v26; // 0x401eb0\n    int64_t v27; // 0x401eb0\n    int32_t wc; // bp+116, 0x401eb0\n    int64_t ps; // bp+120, 0x401eb0\n    char v28; // 0x4025e0\n    int64_t v29; // 0x4025e0\n    int64_t v30; // 0x402a12\n    int64_t v31; // 0x402a2b\n    int64_t v32; // 0x401eb0\n    while (true) {\n      lab_0x401ef0_2:\n        // 0x401ef0\n        v20 = v19;\n        v14 = v13;\n        v8 = v7;\n        result = v4;\n        int64_t v33 = v5; // 0x401eb0\n        int64_t v34; // 0x401f24\n        while (true) {\n          lab_0x401ef0:\n            // 0x401ef0\n            v12 = v33;\n            bool v35 = v8 == v12; // 0x401efb\n            if (v8 == -1) {\n                // 0x401efd\n                v35 = *(char *)(v12 + str) == 0;\n            }\n            // 0x401f0b\n            if (v35) {\n                // break (via goto) -> 0x402900\n                goto lab_0x402900;\n            }\n            // 0x401f14\n            v34 = v12 + str;\n            v28 = *(char *)v34;\n            v29 = v28;\n            g45 = v29;\n            v9 = v8;\n            v18 = v14;\n            v24 = v20;\n            v6 = v8;\n            v16 = v14;\n            v22 = v20;\n            switch (v28) {\n                case 0: {\n                    if (v2 % 2 == 0) {\n                        // 0x4026f1\n                        v11 = v8;\n                        v17 = v14;\n                        v23 = v20;\n                        v10 = v8;\n                        v15 = v14;\n                        v21 = v20;\n                        if (v32 == 0) {\n                            goto lab_0x402562;\n                        } else {\n                            goto lab_0x402009;\n                        }\n                    }\n                    // 0x402b10\n                    v33 = v12 + 1;\n                    goto lab_0x401ef0;\n                }\n                case 7: {\n                    goto lab_0x4022b8;\n                }\n                case 8: {\n                    goto lab_0x4022b8;\n                }\n                case 9: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 10: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 11: {\n                    goto lab_0x4022b8;\n                }\n                case 12: {\n                    goto lab_0x4022b8;\n                }\n                case 13: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 32: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 33: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 34: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 35: {\n                    goto lab_0x4022a1;\n                }\n                case 36: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 37: {\n                    goto lab_0x4022b8;\n                }\n                case 38: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 39: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 40: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 41: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 42: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 43: {\n                    goto lab_0x4022b8;\n                }\n                case 44: {\n                    goto lab_0x4022b8;\n                }\n                case 45: {\n                    goto lab_0x4022b8;\n                }\n                case 46: {\n                    goto lab_0x4022b8;\n                }\n                case 47: {\n                    goto lab_0x4022b8;\n                }\n                case 48: {\n                    goto lab_0x4022b8;\n                }\n                case 49: {\n                    goto lab_0x4022b8;\n                }\n                case 50: {\n                    goto lab_0x4022b8;\n                }\n                case 51: {\n                    goto lab_0x4022b8;\n                }\n                case 52: {\n                    goto lab_0x4022b8;\n                }\n                case 53: {\n                    goto lab_0x4022b8;\n                }\n                case 54: {\n                    goto lab_0x4022b8;\n                }\n                case 55: {\n                    goto lab_0x4022b8;\n                }\n                case 56: {\n                    goto lab_0x4022b8;\n                }\n                case 57: {\n                    goto lab_0x4022b8;\n                }\n                case 58: {\n                    goto lab_0x4022b8;\n                }\n                case 59: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 60: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 61: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 62: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 63: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 65: {\n                    goto lab_0x4022b8;\n                }\n                case 66: {\n                    goto lab_0x4022b8;\n                }\n                case 67: {\n                    goto lab_0x4022b8;\n                }\n                case 68: {\n                    goto lab_0x4022b8;\n                }\n                case 69: {\n                    goto lab_0x4022b8;\n                }\n                case 70: {\n                    goto lab_0x4022b8;\n                }\n                case 71: {\n                    goto lab_0x4022b8;\n                }\n                case 72: {\n                    goto lab_0x4022b8;\n                }\n                case 73: {\n                    goto lab_0x4022b8;\n                }\n                case 74: {\n                    goto lab_0x4022b8;\n                }\n                case 75: {\n                    goto lab_0x4022b8;\n                }\n                case 76: {\n                    goto lab_0x4022b8;\n                }\n                case 77: {\n                    goto lab_0x4022b8;\n                }\n                case 78: {\n                    goto lab_0x4022b8;\n                }\n                case 79: {\n                    goto lab_0x4022b8;\n                }\n                case 80: {\n                    goto lab_0x4022b8;\n                }\n                case 81: {\n                    goto lab_0x4022b8;\n                }\n                case 82: {\n                    goto lab_0x4022b8;\n                }\n                case 83: {\n                    goto lab_0x4022b8;\n                }\n                case 84: {\n                    goto lab_0x4022b8;\n                }\n                case 85: {\n                    goto lab_0x4022b8;\n                }\n                case 86: {\n                    goto lab_0x4022b8;\n                }\n                case 87: {\n                    goto lab_0x4022b8;\n                }\n                case 88: {\n                    goto lab_0x4022b8;\n                }\n                case 89: {\n                    goto lab_0x4022b8;\n                }\n                case 90: {\n                    goto lab_0x4022b8;\n                }\n                case 91: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 92: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 93: {\n                    goto lab_0x4022b8;\n                }\n                case 94: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 95: {\n                    goto lab_0x4022b8;\n                }\n                case 96: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 97: {\n                    goto lab_0x4022b8;\n                }\n                case 98: {\n                    goto lab_0x4022b8;\n                }\n                case 99: {\n                    goto lab_0x4022b8;\n                }\n                case 100: {\n                    goto lab_0x4022b8;\n                }\n                case 101: {\n                    goto lab_0x4022b8;\n                }\n                case 102: {\n                    goto lab_0x4022b8;\n                }\n                case 103: {\n                    goto lab_0x4022b8;\n                }\n                case 104: {\n                    goto lab_0x4022b8;\n                }\n                case 105: {\n                    goto lab_0x4022b8;\n                }\n                case 106: {\n                    goto lab_0x4022b8;\n                }\n                case 107: {\n                    goto lab_0x4022b8;\n                }\n                case 108: {\n                    goto lab_0x4022b8;\n                }\n                case 109: {\n                    goto lab_0x4022b8;\n                }\n                case 110: {\n                    goto lab_0x4022b8;\n                }\n                case 111: {\n                    goto lab_0x4022b8;\n                }\n                case 112: {\n                    goto lab_0x4022b8;\n                }\n                case 113: {\n                    goto lab_0x4022b8;\n                }\n                case 114: {\n                    goto lab_0x4022b8;\n                }\n                case 115: {\n                    goto lab_0x4022b8;\n                }\n                case 116: {\n                    goto lab_0x4022b8;\n                }\n                case 117: {\n                    goto lab_0x4022b8;\n                }\n                case 118: {\n                    goto lab_0x4022b8;\n                }\n                case 119: {\n                    goto lab_0x4022b8;\n                }\n                case 120: {\n                    goto lab_0x4022b8;\n                }\n                case 121: {\n                    goto lab_0x4022b8;\n                }\n                case 122: {\n                    goto lab_0x4022b8;\n                }\n                case 123: {\n                    goto lab_0x40227d;\n                }\n                case 124: {\n                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                }\n                case 125: {\n                    goto lab_0x40227d;\n                }\n                case 126: {\n                    goto lab_0x4022a1;\n                }\n                default: {\n                    goto lab_0x40257d;\n                }\n            }\n        }\n      lab_0x40257d:\n        if (v32 != 1) {\n            // 0x402970\n            ps = 0;\n            int64_t len = v8; // 0x40297d\n            if (v8 == -1) {\n                // 0x40297f\n                len = strlen((char *)str);\n            }\n            // 0x4029ab\n            v30 = 0x100000000 * len >> 32;\n            v25 = 0;\n            while (true) {\n              lab_0x402a08:\n                // 0x402a08\n                v26 = v25;\n                uint64_t v36 = v26 + v12; // 0x402a0d\n                int64_t v37 = v36 + str;\n                v31 = function_405190(&wc, v37, v30 - v36);\n                v27 = v26;\n                switch (v31) {\n                    case 0: {\n                        goto lab_0x402d10_2;\n                    }\n                    case -1: {\n                        goto lab_0x402d10_2;\n                    }\n                    case -2: {\n                        // 0x402d53\n                        v27 = v26;\n                        if (v30 > v36) {\n                            // 0x402d8e\n                            v27 = v26;\n                            int64_t v38 = v26; // 0x402d91\n                            if (*(char *)v37 != 0) {\n                                int64_t v39 = v38 + 1; // 0x402d9f\n                                v27 = v39;\n                                while (v30 > v39 + v12) {\n                                    // 0x402d98\n                                    v27 = v39;\n                                    v38 = v39;\n                                    if (*(char *)(v39 + v34) == 0) {\n                                        // break -> 0x402d10\n                                        break;\n                                    }\n                                    v39 = v38 + 1;\n                                    v27 = v39;\n                                }\n                            }\n                        }\n                        goto lab_0x402d10_2;\n                    }\n                    case 1: {\n                        goto lab_0x4029e0;\n                    }\n                    default: {\n                        int64_t v40 = v36 + v3; // 0x402a7a\n                        char v41 = *(char *)v40; // 0x402a8d\n                        unsigned char v42; // 0x401eb0\n                        if (v41 < 125) {\n                            // 0x402a98\n                            v42 = (v41 + 37) % 64;\n                            if (v42 != 0 != ((1 << (int64_t)v42 & 0x20000002b) == 0)) {\n                                // 0x402ab2\n                                v6 = v30;\n                                v16 = 0x100000000 * v14 >> 32;\n                                v22 = 0x100000000 * v20 >> 32;\n                                return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                            }\n                        }\n                        // 0x402a80\n                        v40++;\n                        while (v37 + v31 != v40) {\n                            // 0x402a8d\n                            v41 = *(char *)v40;\n                            if (v41 < 125) {\n                                // 0x402a98\n                                v42 = (v41 + 37) % 64;\n                                if (v42 != 0 != ((1 << (int64_t)v42 & 0x20000002b) == 0)) {\n                                    // 0x402ab2\n                                    v6 = v30;\n                                    v16 = 0x100000000 * v14 >> 32;\n                                    v22 = 0x100000000 * v20 >> 32;\n                                    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n                                }\n                            }\n                            // 0x402a80\n                            v40++;\n                        }\n                        goto lab_0x4029e0;\n                    }\n                }\n            }\n            goto lab_0x402d10_2;\n        } else {\n            // 0x4025c8\n            __ctype_b_loc();\n            v9 = 0x100000000000000 * v8 >> 56;\n            v18 = v14;\n            v24 = v20;\n            goto lab_0x4022b8;\n        }\n    }\n  lab_0x402900:\n    // 0x402900\n    v6 = v8;\n    v16 = v14;\n    v22 = v20;\n    if (result != 0) {\n        // 0x402955\n        if (result < v14) {\n            // 0x40295e\n            *(char *)(v20 + result) = 0;\n        }\n        // 0x40267c\n        return result;\n    }\n    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n  lab_0x402642_2:\n    // 0x40267c\n    return function_401e50(v22, v16, str, v6, 2, v2 & -3);\n  lab_0x402d10_2:;\n    uint64_t v43 = v27;\n    int64_t v44 = 0x100000000 * v14 >> 32;\n    int64_t v45 = 0x100000000 * v20 >> 32;\n    v9 = v30;\n    v18 = v44;\n    v24 = v45;\n    int64_t v46; // 0x401eb0\n    int64_t v47; // 0x401eb0\n    int64_t v48; // 0x401eb0\n    int64_t v49; // 0x401eb0\n    if (v43 < 2) {\n        goto lab_0x4022b8;\n    } else {\n        uint64_t v50 = v43 + v12; // 0x402b1e\n        int64_t v51 = v12 + 1; // 0x402c14\n        v49 = result;\n        v46 = v30;\n        v5 = v51;\n        v47 = v44;\n        v48 = v45;\n        int64_t v52 = v51; // 0x402c1b\n        int64_t v53 = result; // 0x402c1b\n        char v54 = v28; // 0x402c1b\n        if (v51 < v50) {\n            uint64_t v55 = v53;\n            if (v55 < v44) {\n                // 0x402be4\n                *(char *)(v55 + v45) = v54;\n            }\n            char v56 = *(char *)(v52 + str); // 0x402be8\n            int64_t v57 = v55 + 1; // 0x402bed\n            int64_t v58 = v52 + 1; // 0x402c14\n            v49 = v57;\n            v46 = v30;\n            v5 = v58;\n            v47 = v44;\n            v48 = v45;\n            v52 = v58;\n            while (v58 < v50) {\n                // 0x402bdf\n                v55 = v57;\n                if (v55 < v44) {\n                    // 0x402be4\n                    *(char *)(v55 + v45) = v56;\n                }\n                // 0x402be8\n                v56 = *(char *)(v52 + str);\n                v57 = v55 + 1;\n                v58 = v52 + 1;\n                v49 = v57;\n                v46 = v30;\n                v5 = v58;\n                v47 = v44;\n                v48 = v45;\n                v52 = v58;\n            }\n        }\n        goto lab_0x402087;\n    }\n  lab_0x4029e0:\n    // 0x4029e0\n    iswprint(wc);\n    int64_t v59 = v31 + v26; // 0x4029f8\n    int32_t v60 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4029fb\n    v25 = v59;\n    v27 = v59;\n    if (v60 != 0) {\n        // break -> 0x402d10\n        goto lab_0x402d10_2;\n    }\n    goto lab_0x402a08;\n  lab_0x4022b8:\n    // 0x4022b8\n    v11 = v9;\n    v17 = v18;\n    v23 = v24;\n    v10 = v9;\n    v15 = v18;\n    v21 = v24;\n    if (v32 == 0) {\n        goto lab_0x402562;\n    } else {\n        goto lab_0x402009;\n    }\n  lab_0x4022a1:\n    // 0x4022a1\n    v9 = v8;\n    v18 = v14;\n    v24 = v20;\n    v6 = v8;\n    v16 = v14;\n    v22 = v20;\n    if (v12 == 0) {\n        goto lab_0x402642_2;\n    }\n    goto lab_0x4022b8;\n  lab_0x40227d:;\n    bool v61 = v8 == 1; // 0x402288\n    if (v8 == -1) {\n        // 0x40228a\n        v61 = *(char *)v3 == 0;\n    }\n    // 0x402296\n    v9 = v8;\n    v18 = v14;\n    v24 = v20;\n    if (!v61) {\n        goto lab_0x4022b8;\n    } else {\n        goto lab_0x4022a1;\n    }\n  lab_0x402562:\n    // 0x402562\n    v49 = result;\n    v46 = v10;\n    v5 = v12 + 1;\n    v47 = v15;\n    v48 = v21;\n    goto lab_0x402087;\n  lab_0x402009:\n    // 0x402009\n    v10 = v11;\n    v15 = v17;\n    v21 = v23;\n    v6 = v11;\n    v16 = v17;\n    v22 = v23;\n    if ((*(int32_t *)((v29 / 8 & 28) + v32) & 1 << (int32_t)(v28 % 32)) != 0) {\n        goto lab_0x402642_2;\n    }\n    goto lab_0x402562;\n  lab_0x402087:\n    // 0x402087\n    if (v49 < v47) {\n        // 0x40208c\n        char v62; // 0x401eb0\n        int64_t v63; // 0x401eb0\n        uint64_t v64; // 0x401eb0\n        *(char *)(v63 + v64) = v62;\n    }\n    // 0x402090\n    v4 = v49 + 1;\n    v7 = v46;\n    v13 = v47;\n    v19 = v48;\n    goto lab_0x401ef0_2;\n}\n"
        },
        {
            "funcName": "function_402e60",
            "funcStartAddr": "402e60",
            "funcEndAddr": "402ffb",
            "decompiledFuncCode": "int64_t function_402e60(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    int64_t v2 = v1 >> 32; // 0x402e62\n    int32_t * v3 = __errno_location(); // 0x402e7c\n    int64_t v4 = (int64_t)g18; // 0x402e81\n    int32_t v5 = *v3; // 0x402e8b\n    int64_t v6 = v4; // 0x402ea1\n    if (*(int32_t *)&g21 <= (int32_t)v2) {\n        int64_t v7 = v2 + 1; // 0x402ea3\n        int64_t v8 = 16 * v7 & 0xffffffff0; // 0x402ead\n        int64_t v9; // 0x402e60\n        if (g18 == &g19) {\n            int64_t v10 = function_403cc0(0, v8); // 0x402fd7\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g19); // 0x402fdc\n            *(int64_t *)&g18 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_403cc0(v4, v8); // 0x402ec6\n            *(int64_t *)&g18 = v12;\n            v9 = v12;\n        }\n        // 0x402eda\n        v6 = v9;\n        uint32_t v13 = *(int32_t *)&g21; // 0x402eda\n        int32_t v14 = v7;\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g21 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x402f0b\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x402f15\n    int64_t * v17 = (int64_t *)v15; // 0x402f18\n    uint64_t v18 = *v17; // 0x402f18\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x402f1b\n    int64_t result = *v19; // 0x402f1b\n    int64_t v20; // 0x402e60\n    uint64_t v21 = function_401e50(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x402f3e\n    if (v18 > v21) {\n        // 0x402fb5\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x402f51\n    *v17 = v22;\n    if (result != (int64_t)&g35) {\n        // 0x402f61\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_403c70(v22); // 0x402f7b\n    *v19 = result2;\n    int64_t v23; // 0x402e60\n    function_401e50(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x402fb5\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403000",
            "funcStartAddr": "403000",
            "funcEndAddr": "403034",
            "decompiledFuncCode": "int64_t function_403000(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403007\n    int64_t result = function_403e30(a1 == 0 ? (int64_t)&g36 : a1, 56); // 0x403026\n    return result;\n}\n"
        },
        {
            "funcName": "function_403040",
            "funcStartAddr": "403040",
            "funcEndAddr": "40304f",
            "decompiledFuncCode": "int64_t function_403040(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g36 : a1); // 0x40304c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403050",
            "funcStartAddr": "403050",
            "funcEndAddr": "40305f",
            "decompiledFuncCode": "int64_t function_403050(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g36 : a1; // 0x403058\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g36;\n}\n"
        },
        {
            "funcName": "function_403060",
            "funcStartAddr": "403060",
            "funcEndAddr": "403093",
            "decompiledFuncCode": "int64_t function_403060(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g36 + 8 : a1 + 8; // 0x403079\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40307e\n    uint32_t v3 = *v2; // 0x40307e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403082\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4030a0",
            "funcStartAddr": "4030a0",
            "funcEndAddr": "4030b3",
            "decompiledFuncCode": "int64_t function_4030a0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g36 + 4 : a1 + 4); // 0x4030ac\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4030c0",
            "funcStartAddr": "4030c0",
            "funcEndAddr": "4030eb",
            "decompiledFuncCode": "int64_t function_4030c0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g36 : a1; // 0x4030c8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4030e5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4030dc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g36;\n}\n"
        },
        {
            "funcName": "function_4030f0",
            "funcStartAddr": "4030f0",
            "funcEndAddr": "403162",
            "decompiledFuncCode": "int64_t function_4030f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g36 : a5; // 0x403112\n    int32_t * v2 = __errno_location(); // 0x40311b\n    uint32_t v3 = *(int32_t *)v1; // 0x40313b\n    int64_t result = function_401e50(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40314a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403170",
            "funcStartAddr": "403170",
            "funcEndAddr": "403251",
            "decompiledFuncCode": "int64_t function_403170(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g36 : a4; // 0x403192\n    int32_t * v2 = __errno_location(); // 0x403198\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4031b7\n    int32_t * v4 = (int32_t *)v1; // 0x4031ba\n    int64_t v5 = function_401e50(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4031d5\n    int64_t v6 = v5 + 1; // 0x4031da\n    int64_t result = function_403c70(v6); // 0x4031ef\n    function_401e50(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403234\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40323d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403260",
            "funcStartAddr": "403260",
            "funcEndAddr": "40326a",
            "decompiledFuncCode": "int64_t function_403260(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403260\n    return function_403170(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403270",
            "funcStartAddr": "403270",
            "funcEndAddr": "403305",
            "decompiledFuncCode": "int64_t function_403270(void) {\n    uint32_t v1 = *(int32_t *)&g21; // 0x403270\n    int64_t v2 = v1; // 0x403270\n    int64_t v3 = v2; // 0x403284\n    if (v1 >= 2) {\n        int64_t v4 = &g21;\n        int64_t v5 = v4 + 16; // 0x4032a3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g46;\n        while (v5 != (int64_t)g18 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4032a0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g46;\n        }\n    }\n    int64_t v6 = v3; // 0x4032bd\n    if (g19 != 0x608280) {\n        // 0x4032bf\n        free((int64_t *)g19);\n        g19 = 256;\n        *(int64_t *)&g20 = (int64_t)&g35;\n        v6 = &g46;\n    }\n    int64_t result = v6; // 0x4032e1\n    if (g18 != &g19) {\n        // 0x4032e3\n        free(g18);\n        *(int64_t *)&g18 = (int64_t)&g19;\n        result = &g46;\n    }\n    // 0x4032f6\n    *(int32_t *)&g21 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403310",
            "funcStartAddr": "403310",
            "funcEndAddr": "403321",
            "decompiledFuncCode": "int64_t function_403310(void) {\n    // 0x403310\n    int64_t v1; // 0x403310\n    return function_402e60(v1, v1, -1, (int64_t *)&g36);\n}\n"
        },
        {
            "funcName": "function_403330",
            "funcStartAddr": "403330",
            "funcEndAddr": "40333a",
            "decompiledFuncCode": "int64_t function_403330(void) {\n    // 0x403330\n    int64_t v1; // 0x403330\n    return function_402e60(v1, v1, v1, (int64_t *)&g36);\n}\n"
        },
        {
            "funcName": "function_403340",
            "funcStartAddr": "403340",
            "funcEndAddr": "403356",
            "decompiledFuncCode": "int64_t function_403340(int64_t a1) {\n    // 0x403340\n    return function_402e60(0, a1, -1, (int64_t *)&g36);\n}\n"
        },
        {
            "funcName": "function_403360",
            "funcStartAddr": "403360",
            "funcEndAddr": "403372",
            "decompiledFuncCode": "int64_t function_403360(int64_t a1, int64_t a2) {\n    // 0x403360\n    return function_402e60(0, a1, a2, (int64_t *)&g36);\n}\n"
        },
        {
            "funcName": "function_403380",
            "funcStartAddr": "403380",
            "funcEndAddr": "4033e8",
            "decompiledFuncCode": "int64_t function_403380(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403390\n    return function_402e60((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4033f0",
            "funcStartAddr": "4033f0",
            "funcEndAddr": "403454",
            "decompiledFuncCode": "int64_t function_4033f0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403400\n    return function_402e60((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403460",
            "funcStartAddr": "403460",
            "funcEndAddr": "40346c",
            "decompiledFuncCode": "int64_t function_403460(int64_t a1, int64_t a2) {\n    // 0x403460\n    return function_403380(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403470",
            "funcStartAddr": "403470",
            "funcEndAddr": "40347f",
            "decompiledFuncCode": "int64_t function_403470(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403470\n    return function_4033f0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403480",
            "funcStartAddr": "403480",
            "funcEndAddr": "4034f0",
            "decompiledFuncCode": "int64_t function_403480(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g36); // 0x40348d\n    int128_t v2 = __asm_movdqa(g37); // 0x403495\n    int128_t v3 = __asm_movdqa(g38); // 0x40349d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4034b2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4034c8\n    uint32_t v6 = *v5; // 0x4034c8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4034cd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_402e60(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4034f0",
            "funcStartAddr": "4034f0",
            "funcEndAddr": "4034fd",
            "decompiledFuncCode": "int64_t function_4034f0(int64_t a1, int64_t a2) {\n    // 0x4034f0\n    return function_403480(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403500",
            "funcStartAddr": "403500",
            "funcEndAddr": "403511",
            "decompiledFuncCode": "int64_t function_403500(int64_t a1) {\n    // 0x403500\n    return function_403480(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403520",
            "funcStartAddr": "403520",
            "funcEndAddr": "40352a",
            "decompiledFuncCode": "int64_t function_403520(void) {\n    // 0x403520\n    int64_t v1; // 0x403520\n    return function_403480(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403530",
            "funcStartAddr": "403530",
            "funcEndAddr": "40359e",
            "decompiledFuncCode": "int64_t function_403530(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40354a\n    return function_402e60(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4035a0",
            "funcStartAddr": "4035a0",
            "funcEndAddr": "40360c",
            "decompiledFuncCode": "int64_t function_4035a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g36); // 0x4035a7\n    int128_t v2 = __asm_movdqa(g37); // 0x4035af\n    int128_t v3 = __asm_movdqa(g38); // 0x4035b7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4035d9\n    if (a2 == 0 || a3 == 0) {\n        // 0x403607\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4035ea\n    return function_402e60(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403610",
            "funcStartAddr": "403610",
            "funcEndAddr": "403619",
            "decompiledFuncCode": "int64_t function_403610(void) {\n    // 0x403610\n    int64_t v1; // 0x403610\n    return function_4035a0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403620",
            "funcStartAddr": "403620",
            "funcEndAddr": "403637",
            "decompiledFuncCode": "int64_t function_403620(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403620\n    return function_4035a0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403640",
            "funcStartAddr": "403640",
            "funcEndAddr": "403653",
            "decompiledFuncCode": "int64_t function_403640(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403640\n    return function_4035a0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403660",
            "funcStartAddr": "403660",
            "funcEndAddr": "40366a",
            "decompiledFuncCode": "int64_t function_403660(void) {\n    // 0x403660\n    int64_t v1; // 0x403660\n    return function_402e60(v1, v1, v1, &g17);\n}\n"
        },
        {
            "funcName": "function_403670",
            "funcStartAddr": "403670",
            "funcEndAddr": "403682",
            "decompiledFuncCode": "int64_t function_403670(int64_t a1, int64_t a2) {\n    // 0x403670\n    return function_402e60(0, a1, a2, &g17);\n}\n"
        },
        {
            "funcName": "function_403690",
            "funcStartAddr": "403690",
            "funcEndAddr": "4036a1",
            "decompiledFuncCode": "int64_t function_403690(void) {\n    // 0x403690\n    int64_t v1; // 0x403690\n    return function_402e60(v1, v1, -1, &g17);\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "4036c6",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1) {\n    // 0x4036b0\n    return function_402e60(0, a1, -1, &g17);\n}\n"
        },
        {
            "funcName": "function_4036d0",
            "funcStartAddr": "4036d0",
            "funcEndAddr": "403ab5",
            "decompiledFuncCode": "int64_t function_4036d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7, int64_t a8) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403760\n        fprintf(stream, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4036ec\n        fprintf(stream, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403701\n    fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2015);\n    int32_t fputs_rc = fputs(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), stream); // 0x403740\n    if (a6 < 10) {\n        // 0x40374f\n        return fputs_rc;\n    }\n    char * format = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403832\n    return fprintf(stream, format);\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403ae0",
            "decompiledFuncCode": "int64_t function_403ac0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // 0x403ac7\n    int64_t result; // 0x403adb\n    if (a5 == 0) {\n        // 0x403adb\n        result = function_4036d0(a1, a2, a3, a4, a5, 0, (int64_t)&g46, (int64_t)&g46);\n        return result;\n    }\n    v1++;\n    int64_t v2 = v1; // 0x403ad9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403ad0\n        v1++;\n        v2 = v1;\n    }\n    // 0x403adb\n    result = function_4036d0(a1, a2, a3, a4, a5, v2, (int64_t)&g46, (int64_t)&g46);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ae0",
            "funcStartAddr": "403ae0",
            "funcEndAddr": "403b40",
            "decompiledFuncCode": "int64_t function_403ae0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x403ae0\n    int64_t v3 = &v2; // 0x403ae0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x403b13\n    int64_t v6; // 0x403afd\n    int64_t * v7; // 0x403b1b\n    int64_t v8; // 0x403b1b\n    int64_t v9; // 0x403b27\n    if (v5 < 48) {\n        // 0x403af0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x403b33\n            break;\n        }\n    } else {\n        // 0x403b1b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x403b33\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x403b11\n    while (v4 != 9) {\n        // 0x403b09\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x403af0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x403b33\n                break;\n            }\n        } else {\n            // 0x403b1b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x403b33\n                break;\n            }\n        }\n        // 0x403b09\n        v10 = 10;\n    }\n    int64_t result = function_4036d0(a1, a2, a3, a4, v3, v10, (int64_t)&g46, (int64_t)&g46); // 0x403b36\n    return result;\n}\n"
        },
        {
            "funcName": "function_403b40",
            "funcStartAddr": "403b40",
            "funcEndAddr": "403bfc",
            "decompiledFuncCode": "int64_t function_403b40(int64_t a1, int64_t a2, char * a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403b40\n    int64_t v1; // bp-168, 0x403b40\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x403b40\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x403b40\n    int64_t v8; // 0x403b40\n    int64_t v9; // bp-56, 0x403b40\n    int64_t v10; // 0x403ba5\n    int64_t v11; // 0x403bc9\n    if ((int32_t)v6 < 48) {\n        // 0x403b90\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x403be0\n            break;\n        }\n    } else {\n        // 0x403bc2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x403be0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x403bba\n    int64_t v13 = 10; // 0x403bba\n    while (v5 != 9) {\n        // 0x403bbc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x403b90\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x403be0\n                break;\n            }\n        } else {\n            // 0x403bc2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x403be0\n                break;\n            }\n        }\n        // 0x403bb2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x403be0\n    int64_t v14; // bp-136, 0x403b40\n    int64_t result = function_4036d0(a1, a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g46, (int64_t)&g46); // 0x403bef\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c00",
            "funcStartAddr": "403c00",
            "funcEndAddr": "403c6a",
            "decompiledFuncCode": "int64_t function_403c00(int64_t a1) {\n    // 0x403c00\n    printf(dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    printf(dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * str = dcgettext(NULL, \"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\", 5); // 0x403c59\n    return fputs(str, g26);\n}\n"
        },
        {
            "funcName": "function_403c70",
            "funcStartAddr": "403c70",
            "funcEndAddr": "403c8a",
            "decompiledFuncCode": "int64_t function_403c70(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x403c74\n    if (size != 0 != (mem == NULL)) {\n        // 0x403c83\n        return (int64_t)mem;\n    }\n    // 0x403c85\n    function_403e90(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403c90",
            "funcStartAddr": "403c90",
            "funcEndAddr": "403ca3",
            "decompiledFuncCode": "int64_t function_403c90(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x403c93\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x403c98\n        return function_403c70((int64_t)v1);\n    }\n    // 0x403c9d\n    function_403e90(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403cb0",
            "funcStartAddr": "403cb0",
            "funcEndAddr": "403cb2",
            "decompiledFuncCode": "int64_t function_403cb0(void) {\n    // 0x403cb0\n    int64_t v1; // 0x403cb0\n    return function_403c70(v1);\n}\n"
        },
        {
            "funcName": "function_403cc0",
            "funcStartAddr": "403cc0",
            "funcEndAddr": "403cf6",
            "decompiledFuncCode": "int64_t function_403cc0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x403ce8\n        free(v1);\n        return (int32_t)&g46 ^ (int32_t)&g46;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x403cd1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x403ce0\n        return (int64_t)mem;\n    }\n    // 0x403cf1\n    function_403e90(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "403d13",
            "decompiledFuncCode": "int64_t function_403d00(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x403d03\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x403d08\n        return function_403cc0(a1, (int64_t)v1);\n    }\n    // 0x403d0d\n    function_403e90(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403d20",
            "funcStartAddr": "403d20",
            "funcEndAddr": "403d96",
            "decompiledFuncCode": "int64_t function_403d20(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1; // 0x403d20\n    if (a1 != 0) {\n        if (0xaaaaaaaaaaaaaaaa / a3 <= a2) {\n            // 0x403d90\n            function_403e90(a1);\n            // UNREACHABLE\n        }\n        // 0x403d4a\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_403cc0(a1, v1 * a3);\n    }\n    // 0x403d60\n    if (a2 == 0) {\n        int64_t v2 = 128 / a3 + (int64_t)(a3 >= 129); // 0x403d7d\n        *(int64_t *)a2 = v2;\n        return function_403cc0(0, v2 * a3);\n    }\n    // 0x403d4a\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_403cc0(a1, v1 * a3);\n}\n"
        },
        {
            "funcName": "function_403da0",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403ded",
            "decompiledFuncCode": "int64_t function_403da0(int64_t a1, uint64_t a2) {\n    if (a1 == 0) {\n        int64_t v1 = a2 == 0 ? 128 : a2; // 0x403dd8\n        *(int64_t *)a2 = v1;\n        return function_403cc0(0, v1);\n    }\n    if (a2 >= 0xaaaaaaaaaaaaaaaa) {\n        // 0x403de7\n        function_403e90(a1);\n        // UNREACHABLE\n    }\n    int64_t v2 = a2 + 1 + a2 / 2; // 0x403dbd\n    *(int64_t *)a2 = v2;\n    return function_403cc0(a1, v2);\n}\n"
        },
        {
            "funcName": "function_403df0",
            "funcStartAddr": "403df0",
            "funcEndAddr": "403e07",
            "decompiledFuncCode": "int64_t function_403df0(int64_t a1, int64_t a2) {\n    // 0x403df0\n    return (int64_t)memset((int64_t *)function_403c70(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_403e10",
            "funcStartAddr": "403e10",
            "funcEndAddr": "403e28",
            "decompiledFuncCode": "int64_t function_403e10(void) {\n    // 0x403e10\n    int64_t nmemb; // 0x403e10\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)nmemb); // 0x403e14\n    if (mem != NULL) {\n        // 0x403e1e\n        return (int64_t)mem;\n    }\n    // 0x403e23\n    function_403e90(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403e30",
            "funcStartAddr": "403e30",
            "funcEndAddr": "403e58",
            "decompiledFuncCode": "int64_t function_403e30(int64_t a1, int64_t a2) {\n    int64_t v1 = function_403c70(a2); // 0x403e3f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_403e60",
            "funcStartAddr": "403e60",
            "funcEndAddr": "403e8e",
            "decompiledFuncCode": "int64_t function_403e60(int64_t str) {\n    int64_t v1 = (int64_t)strlen((char *)str) + 1; // 0x403e6e\n    int64_t v2 = function_403c70(v1); // 0x403e75\n    return (int64_t)memcpy((int64_t *)v2, (int64_t *)str, (int32_t)v1);\n}\n"
        },
        {
            "funcName": "function_403e90",
            "funcStartAddr": "403e90",
            "funcEndAddr": "403ec1",
            "decompiledFuncCode": "int64_t function_403e90(int64_t a1) {\n    // 0x403e90\n    error(g16, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403f10",
            "decompiledFuncCode": "int64_t function_403ed0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x403eea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x403eea\n        return fflush(stream);\n    }\n    // 0x403ef8\n    function_403f10(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_403f10",
            "funcStartAddr": "403f10",
            "funcEndAddr": "403f67",
            "decompiledFuncCode": "int64_t function_403f10(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x403f10\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x403f1a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x403f4b\n    int64_t result = -1; // 0x403f54\n    if (v1 != -1) {\n        // 0x403f56\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x403f62\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f70",
            "funcStartAddr": "403f70",
            "funcEndAddr": "40404f",
            "decompiledFuncCode": "int64_t function_403f70(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 48); // 0x403f7c\n    uint32_t v2 = *v1; // 0x403f7c\n    int64_t v3 = a2 & 0xffffffff; // 0x403f81\n    int32_t * v4 = (int32_t *)(a2 + 52); // 0x403f84\n    uint64_t v5 = (int64_t)*v4; // 0x403f84\n    int64_t v6; // 0x403ff2\n    if (v3 <= v5) {\n      lab_0x403fec_2:\n        // 0x403fec\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x403f72\n    int64_t v8 = v2; // 0x403f70\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x403fec\n        goto lab_0x403fec_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x403fa8\n    int64_t v17; // 0x403fb6\n    int64_t * v18; // 0x403fd0\n    int64_t * v19; // 0x403fd3\n    int64_t v20; // 0x403fde\n    int64_t v21; // 0x403fb6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x403fb3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x403fd0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x403fe7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x403fec\n            goto lab_0x403fec_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x403fec\n            goto lab_0x403fec_2;\n        }\n        // 0x403fa2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40402b\n    int64_t * v23 = (int64_t *)v22; // 0x404030\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404033\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404030\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404047\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x403f9d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x403fec\n            goto lab_0x403fec_2;\n        }\n        // 0x403fa2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x403fb3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x403fd0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x403fe7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x403fec\n                goto lab_0x403fec_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x403fec\n                goto lab_0x403fec_2;\n            }\n            // 0x403fa2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404010\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404030\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404047\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x403fec\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "405083",
            "decompiledFuncCode": "int64_t function_404050(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int32_t v2 = a1; // 0x404087\n    if (v2 < 1) {\n        // 0x404329\n        return 0xffffffff;\n    }\n    int64_t * v3 = (int64_t *)(v1 + 16); // 0x40408f\n    *v3 = 0;\n    int32_t v4 = *(int32_t *)a7; // 0x404098\n    int64_t v5; // 0x404050\n    int32_t v6; // 0x404050\n    char v7; // 0x404050\n    int64_t v8; // 0x404050\n    int64_t v9; // 0x404050\n    if (v4 != 0) {\n        // 0x404230\n        v6 = v4;\n        if (*(int32_t *)(v1 + 24) == 0) {\n            goto lab_0x4040b3;\n        } else {\n            int64_t v10 = *(int64_t *)(v1 + 32); // 0x404241\n            char v11 = *(char *)&v8; // 0x404246\n            v9 = a3;\n            v7 = v11;\n            v5 = v10;\n            if ((v11 - 43 & -3) == 0) {\n                int64_t v12 = a3 + 1; // 0x404258\n                v9 = v12;\n                v7 = *(char *)v12;\n                v5 = v10;\n            }\n            goto lab_0x404113;\n        }\n    } else {\n        // 0x4040a6\n        *(int32_t *)a7 = 1;\n        v6 = 1;\n        goto lab_0x4040b3;\n    }\n  lab_0x4046a0:;\n    // 0x4046a0\n    int64_t v13; // 0x404050\n    int64_t v14 = v13 + 32; // 0x4046a0\n    int64_t v15 = *(int64_t *)v14; // 0x4046a4\n    int64_t v16; // 0x404050\n    int64_t v17 = v16; // 0x4046ad\n    int64_t v18; // 0x404050\n    int64_t v19 = v18; // 0x4046ad\n    int32_t v20; // 0x404050\n    int32_t v21 = v20; // 0x4046ad\n    int64_t v22 = v14; // 0x4046ad\n    int64_t v23; // 0x404050\n    int64_t v24 = v23; // 0x4046ad\n    int64_t v25 = v15; // 0x4046ad\n    int64_t v26 = v16; // 0x4046ad\n    int64_t v27 = v18; // 0x4046ad\n    int32_t v28 = v20; // 0x4046ad\n    int64_t v29 = v23; // 0x4046ad\n    if (v15 == 0) {\n        // break -> 0x404700\n        goto lab_0x404700;\n    }\n    goto lab_0x4046af;\n  lab_0x4046af:;\n    int64_t v30 = v17; // 0x4046af\n    int64_t v31 = v19; // 0x4046af\n    int32_t v32 = v21; // 0x4046af\n    int64_t v33 = v22; // 0x4046af\n    int64_t v34; // 0x404050\n    int64_t v35 = v34 + 1 & 0xffffffff; // 0x4046af\n    int64_t * v36; // 0x404050\n    int64_t str2 = *v36; // 0x4046af\n    int64_t v37 = v24; // 0x4046af\n    int64_t v38 = v25; // 0x4046af\n    goto lab_0x4046b4;\n  lab_0x40467c:;\n    int64_t * mem = malloc(16); // 0x404681\n    int64_t v39; // 0x404050\n    int64_t v40; // 0x404050\n    if (mem == NULL) {\n        // 0x404a28\n        v18 = 1;\n        v23 = 0;\n        int64_t v52 = v39; // 0x404a2b\n        if (v39 != 0) {\n            int64_t v53 = *(int64_t *)(v52 + 8); // 0x404a30\n            free((int64_t *)v52);\n            v18 = 1;\n            v23 = v53;\n            v52 = v53;\n            while (v53 != 0) {\n                // 0x404a30\n                v53 = *(int64_t *)(v52 + 8);\n                free((int64_t *)v52);\n                v18 = 1;\n                v23 = v53;\n                v52 = v53;\n            }\n        }\n    } else {\n        int64_t v54 = (int64_t)mem; // 0x404681\n        *mem = v13;\n        *(int64_t *)(v54 + 8) = v39;\n        v18 = v40;\n        v23 = v54;\n    }\n    goto lab_0x4046a0;\n  lab_0x4040b3:\n    // 0x4040b3\n    *(int32_t *)(v1 + 52) = v6;\n    *(int32_t *)(v1 + 48) = v6;\n    int64_t * v55 = (int64_t *)(v1 + 32); // 0x4040c5\n    *v55 = 0;\n    int64_t v56; // 0x404050\n    int64_t v57; // 0x404050\n    int64_t v58; // 0x404050\n    int64_t v59; // 0x404050\n    int64_t v60; // 0x404050\n    if ((int32_t)a8 == 0) {\n        // 0x404340\n        if (getenv(\"POSIXLY_CORRECT\") != NULL) {\n            int64_t v61 = *v55; // 0x404454\n            *(int32_t *)(v1 + 44) = 1;\n            char v62 = *(char *)&v8; // 0x404462\n            v58 = v61;\n            if (v62 == 45) {\n                goto lab_0x404370;\n            } else {\n                // 0x40446d\n                v56 = v61;\n                v59 = v61;\n                if (v62 != 43) {\n                    goto lab_0x4040fa;\n                } else {\n                    goto lab_0x404475;\n                }\n            }\n        } else {\n            // 0x404353\n            *(int32_t *)(v1 + 44) = 0;\n            char v63 = *(char *)&v8; // 0x404360\n            if (v63 != 45) {\n                if (v63 == 43) {\n                    // 0x404bbb\n                    v59 = *v55;\n                    goto lab_0x404475;\n                } else {\n                    // 0x4048a0\n                    *(int32_t *)(v1 + 40) = 1;\n                    v60 = a3;\n                    v57 = *v55;\n                    goto lab_0x404103;\n                }\n            } else {\n                // 0x40436b\n                v58 = *v55;\n                goto lab_0x404370;\n            }\n        }\n    } else {\n        // 0x4040d7\n        *(int32_t *)(v1 + 44) = 1;\n        v56 = 0;\n        v58 = 0;\n        v59 = 0;\n        switch (*(char *)&v8) {\n            case 45: {\n                goto lab_0x404370;\n            }\n            case 43: {\n                goto lab_0x404475;\n            }\n            default: {\n                goto lab_0x4040fa;\n            }\n        }\n    }\n  lab_0x404113:;\n    int64_t v64 = a1 & 0xffffffff; // 0x40409c\n    int64_t v65 = v5;\n    char v66 = v7;\n    int64_t str3 = v9;\n    int64_t v67; // 0x404050\n    int64_t v68; // 0x404050\n    if (v65 == 0) {\n        goto lab_0x404270;\n    } else {\n        // 0x40412c\n        v68 = a4;\n        v67 = v65;\n        if (*(char *)v65 == 0) {\n            goto lab_0x404270;\n        } else {\n            goto lab_0x404136;\n        }\n    }\n  lab_0x404370:\n    // 0x404370\n    *(int32_t *)(v1 + 40) = 2;\n    v60 = a3 + 1;\n    v57 = v58;\n    goto lab_0x404103;\n  lab_0x404475:\n    // 0x404475\n    *(int32_t *)(v1 + 40) = 0;\n    v60 = a3 + 1;\n    v57 = v59;\n    goto lab_0x404103;\n  lab_0x4040fa:\n    // 0x4040fa\n    *(int32_t *)(v1 + 40) = 0;\n    v60 = a3;\n    v57 = v56;\n    goto lab_0x404103;\n  lab_0x404270:;\n    uint32_t v211 = *(int32_t *)a7; // 0x404270\n    int64_t v212 = v211; // 0x404270\n    int32_t * v78 = (int32_t *)(v1 + 52); // 0x404274\n    if ((int64_t)*v78 > v212) {\n        // 0x40427b\n        *v78 = v211;\n    }\n    int32_t * v77 = (int32_t *)(v1 + 48); // 0x404280\n    if (*v77 > v211) {\n        // 0x404287\n        *v77 = v211;\n    }\n    int32_t * v209 = (int32_t *)(v1 + 40); // 0x40428c\n    int64_t v70 = v212; // 0x404292\n    int64_t v104; // 0x404050\n    int64_t v105; // 0x404050\n    if (*v209 == 1) {\n        uint32_t v213 = *v78; // 0x4043a8\n        int64_t v214 = v213; // 0x4043a8\n        v8 = v214;\n        int64_t v215; // 0x404050\n        if (*v77 == v213) {\n            // 0x4044a0\n            v215 = v214;\n            if (v211 != v213) {\n                // 0x4044a8\n                *v77 = v211;\n                v8 = v212;\n                v215 = v212;\n            }\n        } else {\n            // 0x4043b8\n            v215 = v214;\n            if (v211 != v213) {\n                // 0x4043bc\n                function_403f70(a2, v1);\n                int64_t v216 = (int64_t)*(int32_t *)a7; // 0x4043c9\n                v8 = v216;\n                v215 = v216;\n            }\n        }\n        int64_t v217 = v215; // 0x4043cd\n        int64_t v218 = v217; // 0x4043cf\n        if (v64 > v217) {\n            int64_t v219 = 0x100000000 * v217 >> 32;\n            int64_t v220 = *(int64_t *)(8 * v219 + a2); // 0x4043f3\n            int64_t v221 = v219 & 0xffffffff; // 0x4043f7\n            v8 = v221;\n            if (*(char *)v220 == 45) {\n                // 0x404400\n                if (*(char *)(v220 + 1) != 0) {\n                    // 0x404406\n                    v104 = v221;\n                    v105 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40440a;\n                }\n            }\n            int64_t v222 = v221 + 1; // 0x4043e0\n            int64_t v223 = v222 & 0xffffffff; // 0x4043e0\n            v8 = v223;\n            int64_t v224 = v219 + 1; // 0x4043e3\n            *(int32_t *)a7 = (int32_t)v222;\n            v218 = v223;\n            while (v64 > v224) {\n                // 0x4043f3\n                v219 = v224;\n                v220 = *(int64_t *)(8 * v219 + a2);\n                v221 = v219 & 0xffffffff;\n                v8 = v221;\n                if (*(char *)v220 == 45) {\n                    // 0x404400\n                    if (*(char *)(v220 + 1) != 0) {\n                        // 0x404406\n                        v104 = v221;\n                        v105 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40440a;\n                    }\n                }\n                // 0x4043e0\n                v222 = v221 + 1;\n                v223 = v222 & 0xffffffff;\n                v8 = v223;\n                v224 = v219 + 1;\n                *(int32_t *)a7 = (int32_t)v222;\n                v218 = v223;\n            }\n        }\n        // 0x4047b0\n        v104 = v218;\n        v105 = v218 & 0xffffffff;\n        goto lab_0x40440a;\n    } else {\n        goto lab_0x404298;\n    }\n  lab_0x404103:\n    // 0x404103\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v60;\n    v7 = *(char *)v60;\n    v5 = v57;\n    goto lab_0x404113;\n  lab_0x404298:;\n    int64_t v69 = v70;\n    int32_t v71 = v69; // 0x404298\n    int64_t v72; // 0x404050\n    int64_t v73; // 0x404050\n    bool v74; // 0x404050\n    int64_t v75; // 0x4042b2\n    if (v2 == v71) {\n        int64_t v76 = (int64_t)*v77; // 0x40438d\n        v8 = v76;\n        v72 = v76;\n        v73 = (int64_t)*v78;\n        goto lab_0x404392;\n    } else {\n        // 0x4042a0\n        v75 = *(int64_t *)((0x100000000 * v69 >> 29) + a2);\n        v8 = v75;\n        int64_t v79 = v74 ? -1 : 1; // 0x4042b9\n        int64_t v80 = 3; // 0x4042b9\n        int64_t v81 = v75;\n        int64_t v82 = (int64_t)\"--\";\n        unsigned char v83 = *(char *)v81; // 0x4042b9\n        char v84 = *(char *)v82; // 0x4042b9\n        char v85 = v84; // 0x4042b9\n        bool v86 = false; // 0x4042b9\n        while (v83 == v84) {\n            v80--;\n            int64_t v87 = v82 + v79; // 0x4042b9\n            int64_t v88 = v81 + v79; // 0x4042b9\n            v85 = v83;\n            v86 = true;\n            if (v80 == 0) {\n                // break -> \n                break;\n            }\n            v81 = v88;\n            v82 = v87;\n            v83 = *(char *)v81;\n            v84 = *(char *)v82;\n            v85 = v84;\n            v86 = false;\n        }\n        unsigned char v89 = v85;\n        if ((v83 >= v89 && !v86) != v83 < v89) {\n            // 0x404300\n            if (*(char *)v75 == 45) {\n                int64_t v90 = v75 + 1; // 0x404418\n                unsigned char v91 = *(char *)v90; // 0x404418\n                if (v91 == 0) {\n                    goto lab_0x404309;\n                } else {\n                    int64_t v92 = v90 + (int64_t)(a4 != 0 == v91 == 45); // 0x404439\n                    *(int64_t *)(v1 + 32) = v92;\n                    v68 = v91;\n                    v67 = v92;\n                    goto lab_0x404136;\n                }\n            } else {\n                goto lab_0x404309;\n            }\n        } else {\n            uint32_t v93 = *v77; // 0x4042c5\n            v8 = v93;\n            int32_t v94 = *v78; // 0x4042ca\n            int64_t v95 = v69 + 1; // 0x4042cf\n            int32_t v96 = v95; // 0x4042d2\n            *(int32_t *)a7 = v96;\n            if (v93 == v94) {\n                // 0x404888\n                *v77 = v96;\n                v8 = v95 & 0xffffffff;\n            } else {\n                if (v94 != v96) {\n                    // 0x4042e2\n                    function_403f70(a2, v1);\n                    v8 = (int64_t)*v77;\n                }\n            }\n            // 0x4042f2\n            *v78 = v2;\n            *(int32_t *)a7 = v2;\n            v72 = v8;\n            v73 = v64;\n            goto lab_0x404392;\n        }\n    }\n  lab_0x404136:;\n    int64_t v97 = 0x100000000 * a6 >> 32; // 0x40407e\n    int32_t v98 = v66 != 58 ? *(int32_t *)(v1 + 4) : 0; // 0x40411a\n    int64_t v99 = v67;\n    int64_t v100 = v64; // 0x40413c\n    int64_t v101 = v99; // 0x40413c\n    int64_t v102; // 0x40413e\n    if (a4 == 0) {\n        goto lab_0x404198;\n    } else {\n        // 0x40413e\n        v102 = (int64_t)*(int32_t *)a7;\n        v8 = v102;\n        int64_t v103 = *(int64_t *)(8 * v102 + a2); // 0x40414a\n        char c = *(char *)(v103 + 1); // 0x40414e\n        if (c == 45) {\n            goto lab_0x4045e0;\n        } else {\n            // 0x40415c\n            if ((int32_t)v97 == 0) {\n                goto lab_0x404198;\n            } else {\n                // 0x404166\n                if (*(char *)(v103 + 2) != 0) {\n                    goto lab_0x4045e0;\n                } else {\n                    // 0x404170\n                    v8 = v102;\n                    v100 = v64;\n                    v101 = v99;\n                    if (strchr((char *)str3, (int32_t)c) == NULL) {\n                        goto lab_0x4045e0;\n                    } else {\n                        goto lab_0x404198;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40440a:\n    // 0x40440a\n    *v78 = (int32_t)v104;\n    v70 = v105;\n    goto lab_0x404298;\n  lab_0x404198:;\n    int64_t v106 = v101 + 1; // 0x404198\n    int64_t * v107 = (int64_t *)(v1 + 32); // 0x4041a5\n    *v107 = v106;\n    char v108 = *(char *)v101; // 0x4041aa\n    int32_t c2 = v108; // 0x4041ae\n    char * str4 = (char *)str3; // 0x4041b4\n    char * found_char_pos = strchr(str4, c2); // 0x4041b4\n    char * v109 = (char *)v106;\n    if (*v109 == 0) {\n        // 0x404490\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if ((v108 || 1) == 59 || found_char_pos == NULL) {\n        if (v98 != 0) {\n            // 0x404a50\n            fprintf(g29, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5), \"%s: invalid option -- '%c'\\n\", v108);\n        }\n        // 0x4047cc\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404329\n        return 63;\n    }\n    int64_t v110 = (int64_t)found_char_pos; // 0x4041b4\n    unsigned char v111 = *(char *)(v110 + 1); // 0x4041e3\n    v8 = v111;\n    if (*found_char_pos != 87 || v111 != 59) {\n        int64_t v112 = v108; // 0x4041aa\n        if (v111 != 58) {\n            // 0x404329\n            return v112 & 0xffffffff;\n        }\n        unsigned char v113 = *v109; // 0x4041fa\n        v8 = v113;\n        if (*(char *)(v110 + 2) == 58) {\n            if (v113 == 0) {\n                // 0x404c91\n                *v3 = 0;\n            } else {\n                // 0x404990\n                *v3 = v106;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40421d\n            *v107 = 0;\n            // 0x404329\n            return v112 & 0xffffffff;\n        }\n        int32_t v114 = *(int32_t *)a7; // 0x404205\n        if (v113 != 0) {\n            // 0x404211\n            *v3 = v106;\n            *(int32_t *)a7 = v114 + 1;\n            // 0x40421d\n            *v107 = 0;\n            // 0x404329\n            return v112 & 0xffffffff;\n        }\n        if (v114 != (int32_t)v100) {\n            // 0x404a8d\n            *(int32_t *)a7 = v114 + 1;\n            *v3 = *(int64_t *)(8 * (int64_t)v114 + a2);\n            // 0x40421d\n            *v107 = 0;\n            // 0x404329\n            return v112 & 0xffffffff;\n        }\n        if (v98 != 0) {\n            // 0x404e4b\n            fprintf(g29, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5), \"%s: option requires an argument -- '%c'\\n\", v108);\n        }\n        // 0x404d0d\n        *(int32_t *)(v1 + 8) = c2;\n        char v115 = *str4; // 0x404d19\n        // 0x40421d\n        *v107 = 0;\n        // 0x404329\n        return (4 * (int64_t)(v115 != 58) | (v115 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    if (a4 == 0) {\n        // 0x404e37\n        *v107 = 0;\n        // 0x404329\n        return 87;\n    }\n    int32_t v116 = *(int32_t *)a7; // 0x4044d2\n    char * str6; // 0x404050\n    int64_t v117; // 0x404050\n    if (*v109 == 0) {\n        if (v116 == (int32_t)v100) {\n            if (v98 != 0) {\n                // 0x404fd9\n                fprintf(g29, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5), \"%s: option requires an argument -- '%c'\\n\", v108);\n            }\n            // 0x404e8c\n            *(int32_t *)(v1 + 8) = c2;\n            char v118 = *str4; // 0x404e98\n            // 0x404329\n            return (4 * (int64_t)(v118 != 58) | (v118 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        int64_t v119 = v116; // 0x4044d2\n        int64_t v120 = v119 + 1; // 0x404c7c\n        v8 = v120 & 0xffffffff;\n        *(int32_t *)a7 = (int32_t)v120;\n        int64_t v121 = *(int64_t *)(8 * v119 + a2); // 0x404c83\n        *v3 = v121;\n        str6 = (char *)v121;\n        v117 = v121;\n    } else {\n        // 0x4044dc\n        *v3 = v106;\n        *(int32_t *)a7 = v116 + 1;\n        str6 = v109;\n        v117 = v106;\n    }\n    // 0x4044e8\n    *v107 = v117;\n    unsigned char v122 = *str6; // 0x4044ed\n    int64_t v123 = v122; // 0x4044ed\n    int64_t v124 = v123; // 0x4044f7\n    int64_t v125 = v117; // 0x4044f7\n    int64_t v126 = v123; // 0x4044f7\n    int64_t v127 = v117; // 0x4044f7\n    if (v122 != 0) {\n        v126 = v124;\n        v127 = v125;\n        while (v124 != 61) {\n            int64_t v128 = v125 + 1; // 0x404500\n            unsigned char v129 = *(char *)v128; // 0x404504\n            v124 = v129;\n            v125 = v128;\n            v126 = 0;\n            v127 = v128;\n            if (v129 == 0) {\n                // break -> 0x404524\n                break;\n            }\n            v126 = v124;\n            v127 = v125;\n        }\n    }\n    int64_t n2 = v127 - v117; // 0x404530\n    int64_t v130 = 0;\n    int64_t v131 = 0;\n    int32_t v132 = 0;\n    int64_t v133 = 0;\n    char * str5 = (char *)a4; // 0x4045ad\n    int64_t v134 = v133; // 0x4045b4\n    int32_t v135 = v132; // 0x4045b4\n    int64_t v136 = v130; // 0x4045b4\n    int64_t v137; // 0x404050\n    int32_t v138; // 0x404050\n    int32_t v139; // 0x404bd3\n    int32_t v140; // 0x404bd6\n    if (strncmp(str5, str6, (int32_t)n2) == 0) {\n        // 0x4045b6\n        if ((n2 & 0xffffffff) == (int64_t)strlen(str5)) {\n            // 0x404d41\n            v138 = v131;\n            v137 = a4;\n            goto lab_0x404c1b;\n        }\n        if (v130 != 0) {\n            // 0x404570\n            v134 = 1;\n            v135 = v132;\n            v136 = v130;\n            if ((int32_t)v97 == 0) {\n                // 0x40457a\n                v134 = 1;\n                v135 = v132;\n                v136 = v130;\n                if (*(int32_t *)(v130 + 8) == *(int32_t *)(a4 + 8)) {\n                    // 0x404bc5\n                    v134 = 1;\n                    v135 = v132;\n                    v136 = v130;\n                    if (*(int64_t *)(v130 + 16) == *(int64_t *)(a4 + 16)) {\n                        // 0x404bd3\n                        v139 = *(int32_t *)(a4 + 24);\n                        v140 = *(int32_t *)(v130 + 24);\n                        v134 = v140 == v139 ? 0x100000000 * v133 >> 32 : 1;\n                        v135 = v132;\n                        v136 = v130;\n                    }\n                }\n            }\n        } else {\n            // 0x4045ce\n            v134 = v133;\n            v135 = v131;\n            v136 = a4;\n        }\n    }\n    int64_t v141 = v136;\n    int32_t v142 = v135;\n    int64_t v143 = v134;\n    int64_t v144 = a4 + 32; // 0x40458f\n    int64_t v145 = *(int64_t *)v144; // 0x404593\n    int64_t v146 = v131 + 1 & 0xffffffff; // 0x40459e\n    while (v145 != 0) {\n        // 0x4045a4\n        v130 = v141;\n        v131 = v146;\n        int64_t v147 = v144;\n        v132 = v142;\n        v133 = v143;\n        str5 = (char *)v145;\n        v134 = v133;\n        v135 = v132;\n        v136 = v130;\n        if (strncmp(str5, str6, (int32_t)n2) == 0) {\n            // 0x4045b6\n            if ((n2 & 0xffffffff) == (int64_t)strlen(str5)) {\n                // 0x404d41\n                v138 = v131;\n                v137 = v147;\n                goto lab_0x404c1b;\n            }\n            if (v130 != 0) {\n                // 0x404570\n                v134 = 1;\n                v135 = v132;\n                v136 = v130;\n                if ((int32_t)v97 == 0) {\n                    // 0x40457a\n                    v134 = 1;\n                    v135 = v132;\n                    v136 = v130;\n                    if (*(int32_t *)(v130 + 8) == *(int32_t *)(v147 + 8)) {\n                        // 0x404bc5\n                        v134 = 1;\n                        v135 = v132;\n                        v136 = v130;\n                        if (*(int64_t *)(v130 + 16) == *(int64_t *)(v147 + 16)) {\n                            // 0x404bd3\n                            v139 = *(int32_t *)(v147 + 24);\n                            v140 = *(int32_t *)(v130 + 24);\n                            v134 = v140 == v139 ? 0x100000000 * v133 >> 32 : 1;\n                            v135 = v132;\n                            v136 = v130;\n                        }\n                    }\n                }\n            } else {\n                // 0x4045ce\n                v134 = v133;\n                v135 = v131;\n                v136 = v147;\n            }\n        }\n        // 0x40458f\n        v141 = v136;\n        v142 = v135;\n        v143 = v134;\n        v144 = v147 + 32;\n        v145 = *(int64_t *)v144;\n        v146 = v131 + 1 & 0xffffffff;\n    }\n    if ((int32_t)v143 != 0) {\n        char * str7 = str6; // 0x404e11\n        int64_t v148 = v117; // 0x404e11\n        if (v98 != 0) {\n            // 0x404f62\n            fprintf(g29, dcgettext(NULL, \"%s: option '-W %s' is ambiguous\\n\", 5), \"%s: option '-W %s' is ambiguous\\n\", str6);\n            v148 = *v107;\n            str7 = (char *)v148;\n        }\n        int32_t len = strlen(str7); // 0x404e20\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n        *v107 = v148 + (int64_t)len;\n        // 0x404329\n        return 63;\n    }\n    // 0x404c12\n    v138 = v142;\n    v137 = v141;\n    if (v141 == 0) {\n        // 0x404e37\n        *v107 = 0;\n        // 0x404329\n        return 87;\n    }\n    goto lab_0x404c1b;\n  lab_0x404392:;\n    int32_t v210 = v72; // 0x404392\n    if (v210 != (int32_t)v73) {\n        // 0x404396\n        *(int32_t *)a7 = v210;\n    }\n    // 0x404329\n    return 0xffffffff;\n  lab_0x404c1b:;\n    int32_t v149 = *(int32_t *)(v137 + 8); // 0x404c1b\n    if ((char)v126 == 0) {\n        if (v149 == 1) {\n            int32_t v150 = *(int32_t *)a7; // 0x404ea9\n            uint64_t v151 = (int64_t)v150; // 0x404ea9\n            if ((v100 & 0xffffffff) <= v151) {\n                if (v98 != 0) {\n                    int64_t v152 = *(int64_t *)v137; // 0x405050\n                    fprintf(g29, dcgettext(NULL, \"%s: option '-W %s' requires an argument\\n\", 5), \"%s: option '-W %s' requires an argument\\n\", (char *)v152);\n                }\n                int64_t v153 = *v107; // 0x404fa7\n                v8 = v153;\n                int64_t v154 = -1; // 0x404fb5\n                int64_t v155 = v153; // 0x404fb5\n                int64_t v156 = 0; // 0x404fb5\n                while (v154 != 0) {\n                    int64_t v157 = v155;\n                    v154--;\n                    v155 = v157 + (v74 ? -1 : 1);\n                    v156 = v154;\n                    if (*(char *)v157 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v156 = 0;\n                }\n                *v107 = v153 - 2 - v156;\n                if (*str4 != 58) {\n                    // 0x404329\n                    return 63;\n                }\n                // 0x404329\n                return 58;\n            }\n            // 0x404eb5\n            *(int32_t *)a7 = v150 + 1;\n            *v3 = *(int64_t *)(8 * v151 + a2);\n        } else {\n            // 0x404d33\n            *v3 = 0;\n        }\n    } else {\n        if (v149 == 0) {\n            char * str8 = str6; // 0x404f41\n            int64_t v158 = v117; // 0x404f41\n            if (v98 != 0) {\n                int64_t v159 = *(int64_t *)v137; // 0x405013\n                fprintf(g29, dcgettext(NULL, \"%s: option '-W %s' doesn't allow an argument\\n\", 5), \"%s: option '-W %s' doesn't allow an argument\\n\", (char *)v159);\n                v158 = *v107;\n                str8 = (char *)v158;\n            }\n            // 0x404f47\n            *v107 = v158 + (int64_t)strlen(str8);\n            // 0x404329\n            return 63;\n        }\n        // 0x404c30\n        *v3 = (0x100000000 * v127 >> 32) + 1;\n    }\n    // 0x404c39\n    *v107 = v117 + (int64_t)strlen(str6);\n    if (a5 != 0) {\n        // 0x404c53\n        *(int32_t *)a5 = v138;\n    }\n    int64_t v160 = *(int64_t *)(v137 + 16); // 0x404c59\n    uint32_t v161 = *(int32_t *)(v137 + 24); // 0x404c5d\n    int64_t v162 = v160; // 0x404c64\n    int32_t v163 = v161; // 0x404c64\n    if (v160 == 0) {\n        // 0x404329\n        return (int64_t)v161 & 0xffffffff;\n    }\n    goto lab_0x40479c;\n  lab_0x4045e0:;\n    int64_t v204 = v99; // 0x404050\n    int32_t v41 = 0; // 0x404050\n    int64_t n = 0; // 0x404050\n    int64_t v174 = v99; // 0x404050\n    switch (*(char *)v99) {\n        case 0: {\n            goto lab_0x40461b;\n        }\n        case 61: {\n            goto lab_0x40461b;\n        }\n        default: {\n            int64_t v205 = v204 + 1; // 0x404600\n            char v206 = *(char *)v205; // 0x404604\n            v204 = v205;\n            while (v206 != 0 == (v206 != 61)) {\n                // 0x404600\n                v205 = v204 + 1;\n                v206 = *(char *)v205;\n                v204 = v205;\n            }\n            int64_t v207 = v205 - v99; // 0x404614\n            v41 = v207;\n            n = v207;\n            v174 = v205;\n            goto lab_0x40461b;\n        }\n    }\n  lab_0x404309:;\n    int64_t v208 = 0xffffffff; // 0x404311\n    if (*v209 != 0) {\n        // 0x404317\n        *v3 = v75;\n        *(int32_t *)a7 = v71 + 1;\n        v208 = 1;\n    }\n    // 0x404329\n    return v208 & 0xffffffff;\n  lab_0x40479c:\n    // 0x40479c\n    *(int32_t *)v162 = v163;\n    // 0x404329\n    return 0;\n  lab_0x40461b:;\n    int32_t v164; // 0x404050\n    int64_t v165; // 0x404050\n    int64_t v166; // 0x404050\n    int64_t v167; // 0x404050\n    int64_t v42; // 0x404050\n    int64_t v168; // 0x404050\n    int64_t v169; // 0x404050\n    int32_t v170; // 0x404050\n    int32_t v171; // 0x404715\n    int64_t v172; // 0x40470d\n    int64_t v173; // 0x404638\n    if (v68 == 0) {\n        // 0x40461b\n        v164 = v97;\n        v166 = v102;\n        v172 = v64;\n        goto lab_0x4048b8;\n    } else {\n        // 0x40462c\n        v168 = 0x100000000 * v174;\n        v173 = 0x100000000 * a1 >> 32;\n        int32_t v43 = v97;\n        v36 = (int64_t *)(v1 + 32);\n        v30 = 0;\n        v31 = 0;\n        v32 = -1;\n        v33 = a4;\n        v35 = 0;\n        str2 = v99;\n        v37 = 0;\n        v38 = v68;\n        while (true) {\n          lab_0x4046b4:\n            // 0x4046b4\n            v39 = v37;\n            v34 = v35;\n            v13 = v33;\n            v20 = v32;\n            v40 = v31;\n            v16 = v30;\n            char * str = (char *)v38; // 0x4046ba\n            v18 = v40;\n            v23 = v39;\n            if (strncmp(str, (char *)str2, (int32_t)n) != 0) {\n                goto lab_0x4046a0;\n            } else {\n                // 0x4046c3\n                if (v41 == strlen(str)) {\n                    // 0x404810\n                    v42 = v39;\n                    if (v39 == 0) {\n                        goto lab_0x404841;\n                    } else {\n                        goto lab_0x404830;\n                    }\n                }\n                if (v16 != 0) {\n                    // 0x404660\n                    v18 = v40;\n                    v23 = v39;\n                    if (v40 % 256 != 0) {\n                        goto lab_0x4046a0;\n                    } else {\n                        if (v43 != 0) {\n                            goto lab_0x40467c;\n                        } else {\n                            // 0x404670\n                            if (*(int32_t *)(v16 + 8) == *(int32_t *)(v13 + 8)) {\n                                int64_t v44 = *(int64_t *)(v13 + 16); // 0x4047e0\n                                int64_t v45 = *(int64_t *)(v16 + 16); // 0x4047e4\n                                if (v45 != v44) {\n                                    goto lab_0x40467c;\n                                } else {\n                                    int32_t v46 = *(int32_t *)(v13 + 24); // 0x4047ee\n                                    int32_t v47 = *(int32_t *)(v16 + 24); // 0x4047f1\n                                    int64_t v48; // 0x404050\n                                    v18 = v48;\n                                    v23 = v39;\n                                    if (v47 != v46) {\n                                        goto lab_0x40467c;\n                                    } else {\n                                        goto lab_0x4046a0;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40467c;\n                            }\n                        }\n                    }\n                } else {\n                    int64_t v49 = v13 + 32; // 0x4046e4\n                    int64_t v50 = *(int64_t *)v49; // 0x4046e8\n                    int32_t v51 = v34;\n                    v17 = v13;\n                    v19 = v40;\n                    v21 = v51;\n                    v22 = v49;\n                    v24 = v39;\n                    v25 = v50;\n                    v26 = v13;\n                    v27 = v40;\n                    v28 = v51;\n                    v29 = v39;\n                    if (v50 == 0) {\n                        // break -> 0x404700\n                        break;\n                    }\n                    goto lab_0x4046af;\n                }\n            }\n        }\n      lab_0x404700:\n        // 0x404700\n        v171 = *(int32_t *)a7;\n        int64_t v175 = v171; // 0x404715\n        v8 = v175;\n        if ((char)v27 == 0 == v29 == 0) {\n            // 0x40472a\n            v172 = v173 & 0xffffffff;\n            v165 = v175;\n            v169 = v26;\n            v170 = v28;\n            v167 = v172;\n            v164 = v43;\n            v166 = v175;\n            if (v26 == 0) {\n                goto lab_0x4048b8;\n            } else {\n                goto lab_0x404736;\n            }\n        } else {\n            if (v98 == 0) {\n                goto lab_0x404b71;\n            } else {\n                if (v29 == 0) {\n                    if ((char)v27 == 0) {\n                        goto lab_0x404b71;\n                    } else {\n                        int64_t v176 = *(int64_t *)(8 * v175 + a2); // 0x404d7e\n                        fprintf(g29, dcgettext(NULL, \"%s: option '%s' is ambiguous\\n\", 5), \"%s: option '%s' is ambiguous\\n\", (char *)v176);\n                        goto lab_0x404b43;\n                    }\n                } else {\n                    int64_t v177 = *(int64_t *)(8 * v175 + a2); // 0x404adc\n                    fprintf(g29, dcgettext(NULL, \"%s: option '%s' is ambiguous; possibilities:\", 5), \"%s: option '%s' is ambiguous; possibilities:\", (char *)v177);\n                    fprintf(g29, \" '--%s'\", (char *)*(int64_t *)v26);\n                    int64_t v178; // bp-72, 0x404050\n                    int64_t v179 = *(int64_t *)((int64_t)&v178 + 8); // 0x404b29\n                    if (v179 != 0) {\n                        fprintf(g29, \" '--%s'\", (char *)*(int64_t *)*(int64_t *)v179);\n                        int64_t v180 = *(int64_t *)(v179 + 8); // 0x404b29\n                        int64_t v181 = v180; // 0x404b30\n                        while (v180 != 0) {\n                            int64_t v182 = *(int64_t *)*(int64_t *)v181; // 0x404b13\n                            fprintf(g29, \" '--%s'\", (char *)v182);\n                            v180 = *(int64_t *)(v181 + 8);\n                            v181 = v180;\n                        }\n                    }\n                    // 0x404b32\n                    fputc(10, g29);\n                    goto lab_0x404b43;\n                }\n            }\n        }\n    }\n  lab_0x4048b8:;\n    // 0x4048b8\n    char * v183; // 0x404050\n    int64_t v184; // 0x404050\n    int64_t v185; // 0x404050\n    int64_t v186; // 0x404050\n    if (v164 == 0) {\n        // 0x404c9f\n        v184 = v166;\n        if (v98 == 0) {\n            goto lab_0x40494f;\n        } else {\n            int64_t v187 = *(int64_t *)(v1 + 32); // 0x404cb2\n            int64_t v188 = *(int64_t *)(8 * v166 + a2); // 0x404cb7\n            v185 = v187;\n            if (*(char *)(v188 + 1) != 45) {\n                // 0x404cad\n                v183 = (char *)v187;\n                v186 = v188;\n                goto lab_0x404911;\n            } else {\n                goto lab_0x404cc8;\n            }\n        }\n    } else {\n        int64_t v189 = *(int64_t *)(8 * v166 + a2); // 0x4048ce\n        if (*(char *)(v189 + 1) == 45) {\n            // 0x404df3\n            v184 = v166;\n            if (v98 == 0) {\n                goto lab_0x40494f;\n            } else {\n                // 0x404dff\n                v185 = *(int64_t *)(v1 + 32);\n                goto lab_0x404cc8;\n            }\n        } else {\n            int64_t v190 = *(int64_t *)(v1 + 32); // 0x4048dc\n            char * c3 = (char *)v190;\n            v8 = v166 & 0xffffffff;\n            v100 = v172;\n            v101 = v190;\n            if (strchr((char *)str3, (int32_t)*c3) != NULL) {\n                goto lab_0x404198;\n            } else {\n                // 0x404909\n                v183 = c3;\n                v186 = v189;\n                if (v98 == 0) {\n                    goto lab_0x40494f;\n                } else {\n                    goto lab_0x404911;\n                }\n            }\n        }\n    }\n  lab_0x404736:;\n    int64_t v191 = v168 >> 32;\n    int64_t v192 = v165 + 1; // 0x404736\n    *(int32_t *)a7 = (int32_t)v192;\n    int32_t v193 = *(int32_t *)(v169 + 8); // 0x404747\n    if (*(char *)v191 == 0) {\n        if (v193 == 1) {\n            // 0x404861\n            if ((v192 & 0xffffffff) >= v167) {\n                if (v98 != 0) {\n                    int64_t v194 = *(int64_t *)v169; // 0x404f0d\n                    fprintf(g29, dcgettext(NULL, \"%s: option '--%s' requires an argument\\n\", 5), \"%s: option '--%s' requires an argument\\n\", (char *)v194);\n                }\n                int64_t str9 = *v36; // 0x404db9\n                *v36 = str9 + (int64_t)strlen((char *)str9);\n                *(int32_t *)(v1 + 8) = *(int32_t *)(v169 + 24);\n                if (*(char *)str3 != 58) {\n                    // 0x404329\n                    return 63;\n                }\n                // 0x404329\n                return 58;\n            }\n            // 0x404869\n            *(int32_t *)a7 = (int32_t)v165 + 2;\n            *v3 = *(int64_t *)((0x100000000 * v192 >> 29) + a2);\n        }\n    } else {\n        if (v193 == 0) {\n            if (v98 != 0) {\n                // 0x4049a7\n                if (*(char *)(*(int64_t *)(a2 - 8 + (0x100000000 * v192 >> 29)) + 1) == 45) {\n                    // 0x404ecf\n                    fprintf(g29, dcgettext(NULL, \"%s: option '--%s' doesn't allow an argument\\n\", 5));\n                } else {\n                    // 0x4049c8\n                    fprintf(g29, dcgettext(NULL, \"%s: option '%c%s' doesn't allow an argument\\n\", 5));\n                }\n            }\n            int64_t str10 = *v36; // 0x4049f7\n            *v36 = str10 + (int64_t)strlen((char *)str10);\n            *(int32_t *)(v1 + 8) = *(int32_t *)(v169 + 24);\n            // 0x404329\n            return 63;\n        }\n        // 0x404758\n        *v3 = v191 + 1;\n    }\n    int64_t str11 = *v36; // 0x404761\n    *v36 = str11 + (int64_t)strlen((char *)str11);\n    if (a5 != 0) {\n        // 0x404780\n        *(int32_t *)a5 = v170;\n    }\n    int64_t v195 = *(int64_t *)(v169 + 16); // 0x40478b\n    uint32_t v196 = *(int32_t *)(v169 + 24); // 0x40478f\n    v162 = v195;\n    v163 = v196;\n    if (v195 == 0) {\n        // 0x404329\n        return (int64_t)v196 & 0xffffffff;\n    }\n    goto lab_0x40479c;\n  lab_0x404b71:;\n    int64_t str12 = *v36; // 0x404b71\n    int32_t len2 = strlen((char *)str12); // 0x404b7c\n    *(int32_t *)(v1 + 8) = 0;\n    *v36 = str12 + (int64_t)len2;\n    *(int32_t *)a7 = v171 + 1;\n    if (v29 == 0) {\n        // 0x404329\n        return 63;\n    }\n    int64_t v197 = *(int64_t *)(v29 + 8); // 0x404ba8\n    free((int64_t *)v29);\n    int64_t v198 = v197; // 0x404bb7\n    while (v197 != 0) {\n        // 0x404ba8\n        v197 = *(int64_t *)(v198 + 8);\n        free((int64_t *)v198);\n        v198 = v197;\n    }\n    // 0x404329\n    return 63;\n  lab_0x40494f:\n    // 0x40494f\n    *(int64_t *)(v1 + 32) = (int64_t)&g9;\n    *(int32_t *)a7 = (int32_t)v184 + 1;\n    *(int32_t *)(v1 + 8) = 0;\n    // 0x404329\n    return 63;\n  lab_0x404cc8:\n    // 0x404cc8\n    fprintf(g29, dcgettext(NULL, \"%s: unrecognized option '--%s'\\n\", 5), \"%s: unrecognized option '--%s'\\n\", (char *)v185);\n    int64_t v199 = (int64_t)*(int32_t *)a7; // 0x404cf8\n    v8 = v199;\n    v184 = v199;\n    goto lab_0x40494f;\n  lab_0x404b43:;\n    int64_t str13 = *v36; // 0x404b43\n    int32_t len3 = strlen((char *)str13); // 0x404b4b\n    *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    *(int32_t *)(v1 + 8) = 0;\n    *v36 = str13 + (int64_t)len3;\n    // 0x404329\n    return 63;\n  lab_0x404911:;\n    char v200 = *(char *)v186; // 0x404916\n    fprintf(g29, dcgettext(NULL, \"%s: unrecognized option '%c%s'\\n\", 5), \"%s: unrecognized option '%c%s'\\n\", v200, v183);\n    int64_t v201 = (int64_t)*(int32_t *)a7; // 0x40494b\n    v8 = v201;\n    v184 = v201;\n    goto lab_0x40494f;\n  lab_0x404841:;\n    int64_t v202 = (int64_t)*(int32_t *)a7; // 0x404841\n    v8 = v202;\n    v165 = v202;\n    v169 = v13;\n    v170 = v34;\n    v167 = v173 & 0xffffffff;\n    goto lab_0x404736;\n  lab_0x404830:;\n    int64_t v203 = *(int64_t *)(v42 + 8); // 0x404830\n    free((int64_t *)v42);\n    v42 = v203;\n    if (v203 != 0) {\n        goto lab_0x404830;\n    } else {\n        goto lab_0x404841;\n    }\n}\n"
        },
        {
            "funcName": "function_405090",
            "funcStartAddr": "405090",
            "funcEndAddr": "4050e6",
            "decompiledFuncCode": "int64_t function_405090(int64_t a1) {\n    // 0x405090\n    *(int32_t *)&g39 = g24;\n    *(int32_t *)&g40 = g23;\n    int64_t v1; // 0x405090\n    int64_t result = function_404050(v1, v1, v1, v1, v1, v1, &g39, a1 & 0xffffffff); // 0x4050b6\n    g24 = *(int32_t *)&g39;\n    g44 = (char *)g42;\n    *(int32_t *)&g22 = g41;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050f0",
            "funcStartAddr": "4050f0",
            "funcEndAddr": "405108",
            "decompiledFuncCode": "int64_t function_4050f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4050f0\n    return function_405090(1);\n}\n"
        },
        {
            "funcName": "function_405110",
            "funcStartAddr": "405110",
            "funcEndAddr": "405123",
            "decompiledFuncCode": "int64_t function_405110(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x405110\n    return function_405090(0);\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "405145",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405130\n    return function_404050(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "405166",
            "decompiledFuncCode": "int64_t function_405150(void) {\n    // 0x405150\n    return function_405090(0);\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "405188",
            "decompiledFuncCode": "int64_t function_405170(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405170\n    return function_404050(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405190",
            "funcStartAddr": "405190",
            "funcEndAddr": "4051b9",
            "decompiledFuncCode": "int64_t function_405190(int32_t * pwc, int64_t wstr2, int64_t n) {\n    // 0x405190\n    int64_t ps; // 0x405190\n    int32_t result; // 0x4051b4\n    if (wstr2 == 0) {\n        int64_t wstr = (int64_t)&g9;\n        result = mbrtowc((int32_t *)0, (char *)wstr, (int32_t)1, (struct _TYPEDEF___mbstate_t *)ps);\n        return result;\n    }\n    // 0x405195\n    if (n == 0) {\n        // 0x40519a\n        return -2;\n    }\n    // 0x4051b4\n    result = mbrtowc((int32_t *)(int64_t)pwc, (char *)wstr2, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "405225",
            "decompiledFuncCode": "int64_t function_4051c0(int64_t a1) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4051c7\n    int32_t v1 = __fpending(stream); // 0x4051c7\n    int32_t is_ferror = ferror(stream); // 0x4051d2\n    int32_t v2 = fclose(stream); // 0x4051dc\n    if (is_ferror != 0) {\n        // 0x405208\n        if (v2 == 0) {\n            // 0x40520c\n            *__errno_location() = 0;\n        }\n        // 0x4051fe\n        return 0xffffffff;\n    }\n    // 0x4051e5\n    if (v2 == 0) {\n        // 0x4051fe\n        return 0;\n    }\n    int64_t result = 0xffffffff; // 0x4051ec\n    if (v1 == 0) {\n        // 0x4051ee\n        result = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4051fe\n    return result;\n}\n"
        },
        {
            "funcName": "function_405230",
            "funcStartAddr": "405230",
            "funcEndAddr": "405792",
            "decompiledFuncCode": "int64_t function_405230(void) {\n    char * v1 = nl_langinfo(14); // 0x405246\n    char * v2 = g43; // 0x40524b\n    char * v3; // 0x405230\n    int64_t v4; // 0x405230\n    int64_t v5; // 0x405230\n    int64_t v6; // 0x405230\n    int64_t v7; // 0x405230\n    int32_t size; // 0x405230\n    int32_t size2; // 0x405230\n    int32_t len; // 0x405302\n    int64_t v8; // 0x405302\n    char * env_val; // 0x4052ed\n    if (v2 == NULL) {\n        // 0x4052e8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 116;\n        v4 = 102;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 101;\n        if (env_val == NULL) {\n            goto lab_0x405355;\n        } else {\n            // 0x4052fa\n            size = 116;\n            v4 = 102;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 101;\n            if (*env_val == 0) {\n                goto lab_0x405355;\n            } else {\n                // 0x4052ff\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4052ed\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405785\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405355;\n                    } else {\n                        // 0x4056f9\n                        size2 = len + 14;\n                        goto lab_0x40531b;\n                    }\n                } else {\n                    goto lab_0x40531b;\n                }\n            }\n        }\n    } else {\n        // 0x405230\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40526a;\n    }\n  lab_0x40559c:;\n    // 0x40559c\n    int64_t v10; // 0x405230\n    int64_t v11 = v10;\n    int64_t v12; // 0x405230\n    int64_t v13 = v12;\n    struct _IO_FILE * stream; // 0x4053db\n    int32_t v14 = __uflow(stream); // 0x40559f\n    int64_t v15 = v13; // 0x4055a9\n    int32_t v16 = v14; // 0x4055a9\n    int64_t v17 = v11; // 0x4055a9\n    int64_t v18 = v13; // 0x4055a9\n    int64_t v19 = v11; // 0x4055a9\n    if (v14 == -1) {\n        // break -> 0x4055af\n        goto lab_0x4055af;\n    }\n    goto lab_0x405429;\n  lab_0x40541e:;\n    // 0x40541e\n    int64_t v116; // 0x405230\n    int64_t v137 = v116;\n    int64_t v115; // 0x405230\n    int64_t v138 = v115;\n    int64_t v114; // 0x405230\n    int64_t v139 = v114;\n    int64_t * v30; // 0x405410\n    *v30 = v138 + 1;\n    unsigned char v140 = *(char *)v138; // 0x405426\n    v15 = v139;\n    v16 = v140;\n    v17 = v137;\n    goto lab_0x405429;\n  lab_0x405429:;\n    int64_t v20 = v17;\n    int32_t c = v16;\n    int64_t v21 = v15;\n    int64_t v22; // 0x405230\n    int32_t v23; // bp-120, 0x405230\n    int32_t v24; // bp-184, 0x405230\n    int64_t v25; // 0x405230\n    int64_t v26; // 0x4053f8\n    int64_t v27; // 0x4053fd\n    int64_t * v28; // 0x405414\n    switch (c) {\n        case 32: {\n            // 0x405410\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x405410_2;\n        }\n        case 10: {\n            // 0x405410\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x405410_2;\n        }\n        case 9: {\n            // 0x405410\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x405410_2;\n        }\n        case 35: {\n            uint64_t v29 = *v30; // 0x405601\n            uint64_t v31 = *v28; // 0x405605\n            int32_t v32; // 0x405230\n            char v33; // 0x405230\n            unsigned char v34; // 0x4055e8\n            int32_t v35; // 0x40560e\n            if (v29 < v31) {\n                // 0x4055e0\n                *v30 = v29 + 1;\n                v34 = *(char *)v29;\n                v32 = v34;\n                v33 = 1;\n            } else {\n                // 0x40560b\n                v35 = __uflow(stream);\n                v32 = v35;\n                v33 = v35 != -1;\n            }\n            char v36 = v33;\n            int32_t v37 = v32;\n            while (v37 != 10 && v36 != 0) {\n                // 0x405601\n                v29 = *v30;\n                v31 = *v28;\n                if (v29 < v31) {\n                    // 0x4055e0\n                    *v30 = v29 + 1;\n                    v34 = *(char *)v29;\n                    v32 = v34;\n                    v33 = 1;\n                } else {\n                    // 0x40560b\n                    v35 = __uflow(stream);\n                    v32 = v35;\n                    v33 = v35 != -1;\n                }\n                // 0x4055f0\n                v36 = v33;\n                v37 = v32;\n            }\n            // 0x4056df\n            v18 = v21;\n            v19 = v20;\n            if (v37 == -1) {\n                // break -> 0x4055af\n                break;\n            }\n            // 0x405410\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x405410_2;\n        }\n        default: {\n            // 0x40543f\n            ungetc(c, stream);\n            int32_t items_assigned = fscanf(stream, \"%50s %50s\", &v24, &v23); // 0x405457\n            int64_t v38 = v27; // 0x40545f\n            v18 = v21;\n            v19 = v20;\n            if (items_assigned < 2) {\n                // break -> 0x4055af\n                break;\n            }\n            int64_t v39 = v38;\n            int32_t v40 = *(int32_t *)v39; // 0x405468\n            int64_t v41 = v39 + 4; // 0x40546a\n            int32_t v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80); // 0x405476\n            uint32_t v43 = v42 & -0x7f7f7f80; // 0x405478\n            v38 = v41;\n            while (v43 == 0) {\n                // 0x405468\n                v39 = v38;\n                v40 = *(int32_t *)v39;\n                v41 = v39 + 4;\n                v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80);\n                v43 = v42 & -0x7f7f7f80;\n                v38 = v41;\n            }\n            int32_t v44 = (v42 & 0x8080) == 0 ? v43 / 0x10000 : v43; // 0x405489\n            int64_t v45 = v39 + 6; // 0x40548c\n            unsigned char v46 = (char)v44; // 0x405496\n            int64_t v47 = -1 - v46 < v46 ? 4 : 3; // 0x40549b\n            int64_t v48 = v26; // 0x40549f\n            int64_t v49 = v48;\n            int32_t v50 = *(int32_t *)v49; // 0x4054a2\n            int64_t v51 = v49 + 4; // 0x4054a4\n            int32_t v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80); // 0x4054b0\n            uint32_t v53 = v52 & -0x7f7f7f80; // 0x4054b2\n            v48 = v51;\n            while (v53 == 0) {\n                // 0x4054a2\n                v49 = v48;\n                v50 = *(int32_t *)v49;\n                v51 = v49 + 4;\n                v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80);\n                v53 = v52 & -0x7f7f7f80;\n                v48 = v51;\n            }\n            int64_t v54 = (v42 & 0x8080) == 0 ? v45 : v41; // 0x405490\n            int64_t v55 = v54 - v47 - v27; // 0x40549f\n            int32_t v56 = (v52 & 0x8080) == 0 ? v53 / 0x10000 : v53; // 0x4054c8\n            int64_t v57 = (v52 & 0x8080) == 0 ? v49 + 6 : v51; // 0x4054cf\n            unsigned char v58 = (char)v56; // 0x4054d5\n            int64_t v59 = -1 - v58 < v58 ? 4 : 3; // 0x4054d8\n            int64_t v60 = v57 - v59 - v26; // 0x4054dc\n            int64_t v61 = v60 + v55; // 0x4054e5\n            int64_t * v62; // 0x405230\n            int64_t v63; // 0x405230\n            if (v21 != 0) {\n                int64_t v64 = v61 + v21; // 0x40561b\n                int64_t * mem = realloc((int64_t *)v20, (int32_t)v64 + 3); // 0x405630\n                v63 = v64;\n                v62 = mem;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v61 + 3); // 0x405501\n                v63 = v61;\n                v62 = mem2;\n            }\n            int64_t * v65 = v62;\n            if (v65 == NULL) {\n                // 0x40573c\n                free((int64_t *)v20);\n                fclose(stream);\n                goto lab_0x4053b4;\n            }\n            int64_t v66 = v63;\n            int64_t v67 = (int64_t)v65;\n            int64_t v68 = v66 + 2;\n            int64_t v69 = v55 + 1; // 0x405528\n            int64_t v70 = v68 - v60 + v67;\n            int64_t v71 = -2 - v55 + v70; // 0x405532\n            uint32_t v72 = (int32_t)v69; // 0x405535\n            if (v72 >= 8) {\n                int32_t v73 = v24; // 0x405644\n                *(int64_t *)v71 = (int64_t)v73;\n                int64_t v74 = (v69 & 0xffffffff) - 8;\n                int64_t v75 = *(int64_t *)(v74 + v27); // 0x40564d\n                *(int64_t *)(v71 + v74) = v75;\n                int64_t v76 = v71 + 8 & -8; // 0x40565e\n                int64_t v77 = v71 - v76; // 0x405662\n                uint32_t v78 = (int32_t)(v77 + v69); // 0x40566d\n                if (v78 >= 8) {\n                    int64_t v79 = v27 - v77; // 0x405667\n                    uint32_t v80 = v78 & -8; // 0x405689\n                    int64_t v81 = 0; // 0x405230\n                    int64_t v82 = v81;\n                    int64_t v83 = v82 + 8; // 0x40567e\n                    int64_t v84 = *(int64_t *)(v79 + v82); // 0x405681\n                    *(int64_t *)(v82 + v76) = v84;\n                    v81 = v83 & 0xffffffff;\n                    while (v80 > (int32_t)v83) {\n                        // 0x40567b\n                        v82 = v81;\n                        v83 = v82 + 8;\n                        v84 = *(int64_t *)(v79 + v82);\n                        *(int64_t *)(v82 + v76) = v84;\n                        v81 = v83 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v69 & 4) != 0) {\n                    int32_t v85 = v24; // 0x40570f\n                    *(int32_t *)v71 = v85;\n                    int64_t v86 = (v69 & 0xffffffff) - 4;\n                    int32_t v87 = *(int32_t *)(v86 + v27); // 0x405717\n                    *(int32_t *)(v71 + v86) = v87;\n                } else {\n                    if (v72 != 0) {\n                        int32_t v88 = v24; // 0x40554b\n                        *(char *)v71 = (char)v88;\n                        if ((v69 & 2) != 0) {\n                            int64_t v89 = (v69 & 0xffffffff) - 2;\n                            int16_t v90 = *(int16_t *)(v89 + v27); // 0x405762\n                            *(int16_t *)(v71 + v89) = v90;\n                        }\n                    }\n                }\n            }\n            int64_t v91 = v60 + 1; // 0x40555b\n            int64_t v92 = v70 - 1; // 0x40555f\n            uint32_t v93 = (int32_t)v91; // 0x405564\n            if (v93 >= 8) {\n                int32_t v94 = v23; // 0x405692\n                *(int64_t *)v92 = (int64_t)v94;\n                int64_t v95 = (v91 & 0xffffffff) - 8;\n                int64_t v96 = *(int64_t *)(v95 + v26); // 0x40569e\n                *(int64_t *)(v92 + v95) = v96;\n                int64_t v97 = v70 + 7 & -8; // 0x4056ac\n                int64_t v98 = v92 - v97; // 0x4056b0\n                uint32_t v99 = (int32_t)(v98 + v91); // 0x4056bb\n                if (v99 >= 8) {\n                    int64_t v100 = v26 - v98; // 0x4056b5\n                    uint32_t v101 = v99 & -8; // 0x4056d6\n                    int64_t v102 = 0; // 0x405230\n                    int64_t v103 = v102;\n                    int64_t v104 = v103 + 8; // 0x4056cb\n                    int64_t v105 = *(int64_t *)(v100 + v103); // 0x4056ce\n                    *(int64_t *)(v103 + v97) = v105;\n                    v102 = v104 & 0xffffffff;\n                    while (v101 > (int32_t)v104) {\n                        // 0x4056c9\n                        v103 = v102;\n                        v104 = v103 + 8;\n                        v105 = *(int64_t *)(v100 + v103);\n                        *(int64_t *)(v103 + v97) = v105;\n                        v102 = v104 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v91 & 4) != 0) {\n                    int32_t v106 = v23; // 0x405726\n                    *(int32_t *)v92 = v106;\n                    int64_t v107 = (v91 & 0xffffffff) - 4;\n                    int32_t v108 = *(int32_t *)(v107 + v26); // 0x40572e\n                    *(int32_t *)(v92 + v107) = v108;\n                } else {\n                    if (v93 != 0) {\n                        int32_t v109 = v23; // 0x40557a\n                        *(char *)v92 = (char)v109;\n                        if ((v91 & 2) != 0) {\n                            int64_t v110 = (v91 & 0xffffffff) - 2;\n                            int16_t v111 = *(int16_t *)(v110 + v26); // 0x405775\n                            *(int16_t *)(v92 + v110) = v111;\n                        }\n                    }\n                }\n            }\n            uint64_t v112 = *v30; // 0x40558e\n            uint64_t v113 = *v28; // 0x405592\n            v114 = v68;\n            v115 = v112;\n            v116 = v67;\n            v12 = v68;\n            v10 = v67;\n            if (v112 < v113) {\n                goto lab_0x40541e;\n            } else {\n                goto lab_0x40559c;\n            }\n        }\n    }\n  lab_0x405355:;\n    int64_t * mem3 = malloc(size); // 0x405355\n    int64_t v117 = (int64_t)&g9; // 0x405360\n    int64_t v118; // 0x405230\n    int64_t path; // 0x405230\n    if (mem3 == NULL) {\n        goto lab_0x405332;\n    } else {\n        int64_t v119 = (int64_t)mem3; // 0x405355\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v119) = 47;\n        path = v119;\n        v118 = v4;\n        goto lab_0x405376;\n    }\n  lab_0x40526a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x40525d\n    char v120 = *v3; // 0x40526a\n    int64_t v121; // 0x405230\n    if (v120 == 0) {\n        // 0x4052c4\n        v121 = str;\n        return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n    }\n    char v122 = v120; // 0x405230\n    int64_t v123 = v7;\n    char * str2 = (char *)v123;\n    int64_t v124; // 0x405230\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v125 = v123 + 1;\n        if (v122 == 42) {\n            // 0x4052b0\n            v124 = v125;\n            if (*(char *)v125 == 0) {\n                goto lab_0x4052b7;\n            }\n        }\n        int64_t str3 = v125 + (int64_t)strlen(str2); // 0x405280\n        int64_t v126 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40528d\n        char v127 = *(char *)v126; // 0x405292\n        v122 = v127;\n        if (v127 == 0) {\n            // 0x4052c4\n            v121 = str;\n            return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n        }\n        v123 = v126;\n        str2 = (char *)v123;\n    }\n    // 0x40529b\n    v124 = v123 + 1;\n  lab_0x4052b7:\n    // 0x4052c4\n    v121 = v124 + (int64_t)strlen(str2);\n    return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n  lab_0x405332:;\n    char * v128 = (char *)v117;\n    g43 = v128;\n    v3 = v128;\n    v7 = v117;\n    goto lab_0x40526a;\n  lab_0x405376:;\n    int64_t v129 = v118 + path; // 0x405376\n    *(int64_t *)v129 = 0x2e74657372616863;\n    *(int16_t *)(v129 + 12) = 115;\n    *(int32_t *)(v129 + 8) = 0x61696c61;\n    if (open((char *)path, O_RDONLY) >= 0) {\n        // 0x4053d1\n        int32_t fd; // 0x4053a2\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405702\n            close(fd);\n        } else {\n            int64_t v130 = (int64_t)stream; // 0x4053db\n            v26 = &v23;\n            v27 = &v24;\n            v30 = (int64_t *)(v130 + 8);\n            v28 = (int64_t *)(v130 + 16);\n            v25 = 0;\n            v22 = 0;\n            while (true) {\n              lab_0x405410_2:;\n                int64_t v131 = v22;\n                int64_t v132 = v25;\n                uint64_t v133 = *v30; // 0x405410\n                uint64_t v134 = *v28; // 0x405414\n                v114 = v132;\n                v115 = v133;\n                v116 = v131;\n                v12 = v132;\n                v10 = v131;\n                if (v133 >= v134) {\n                    goto lab_0x40559c;\n                } else {\n                    goto lab_0x40541e;\n                }\n            }\n          lab_0x4055af:;\n            int64_t v135 = v18;\n            fclose(stream);\n            if (v135 != 0) {\n                int64_t v136 = v19;\n                *(char *)(v136 + v135) = 0;\n            }\n        }\n    }\n    goto lab_0x4053b4;\n  lab_0x40531b:;\n    int64_t * mem4 = malloc(size2); // 0x40531b\n    v117 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x4053c1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v118 = v8;\n        goto lab_0x405376;\n    } else {\n        goto lab_0x405332;\n    }\n  lab_0x4053b4:\n    // 0x4053b4\n    free((int64_t *)path);\n    v117 = (int64_t)&g9;\n    goto lab_0x405332;\n}\n"
        },
        {
            "funcName": "function_4057a0",
            "funcStartAddr": "4057a0",
            "funcEndAddr": "4057fd",
            "decompiledFuncCode": "int64_t function_4057a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4057a0\n    return function_4011b8();\n}\n"
        },
        {
            "funcName": "function_405800",
            "funcStartAddr": "405800",
            "funcEndAddr": "405801",
            "decompiledFuncCode": "int64_t function_405800(void) {\n    // 0x405800\n    int64_t result; // 0x405800\n    return result;\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405828",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405810\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g14);\n}\n"
        },
        {
            "funcName": "function_405828",
            "funcStartAddr": "405828",
            "funcEndAddr": "405848",
            "decompiledFuncCode": "int64_t function_405828(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g10; // 0x405832\n    while (*(int64_t *)v1 != -1) {\n        // 0x405833\n        v1 -= 8;\n    }\n    // 0x405844\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_frcode.elf"
}