{
    "funcInfo": [
        {
            "funcName": "function_401a60",
            "funcStartAddr": "401a60",
            "funcEndAddr": "401a65",
            "decompiledFuncCode": "int64_t function_401a60(void) {\n    // 0x401a60\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a65",
            "funcStartAddr": "401a65",
            "funcEndAddr": "401a6a",
            "decompiledFuncCode": "int64_t function_401a65(void) {\n    // 0x401a65\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a6a",
            "funcStartAddr": "401a6a",
            "funcEndAddr": "401a6f",
            "decompiledFuncCode": "int64_t function_401a6a(void) {\n    // 0x401a6a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a6f",
            "funcStartAddr": "401a6f",
            "funcEndAddr": "401a74",
            "decompiledFuncCode": "int64_t function_401a6f(void) {\n    // 0x401a6f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a74",
            "funcStartAddr": "401a74",
            "funcEndAddr": "401a79",
            "decompiledFuncCode": "int64_t function_401a74(void) {\n    // 0x401a74\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a79",
            "funcStartAddr": "401a79",
            "funcEndAddr": "401a7e",
            "decompiledFuncCode": "int64_t function_401a79(void) {\n    // 0x401a79\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a80",
            "funcStartAddr": "401a80",
            "funcEndAddr": "402400",
            "decompiledFuncCode": "int64_t function_401a80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x401a80\n    function_402b90(a2);\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_4070a0(0x402aa0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    while (true) {\n      lab_0x401ae0_2:\n        // 0x401ae0\n        while (true) {\n            // continue -> 0x401ae0\n        }\n    }\n  lab_0x401c12:;\n    int32_t v1 = *(int32_t *)0x60b2bc; // 0x401c12\n    int64_t v2 = v1; // 0x401c12\n    int32_t v3 = (int32_t)a1 - v1; // 0x401c19\n    if (v3 >= 2) {\n        int64_t v4 = *(int64_t *)(a2 + 8 + 8 * v2); // 0x402274\n        function_4047b0(v4);\n        error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n        // 0x4022a3\n        function_4024e0(1);\n        // UNREACHABLE\n    }\n    int32_t * v5; // 0x401a80\n    int32_t * v6; // 0x401a80\n    int32_t * v7; // 0x401a80\n    int64_t v8; // 0x401a80\n    int64_t v9; // 0x401a80\n    int64_t v10; // 0x401a80\n    int64_t v11; // 0x401a80\n    int64_t v12; // 0x401a80\n    int64_t v13; // 0x401a80\n    int64_t v14; // 0x401a80\n    int64_t v15; // 0x401a80\n    int64_t v16; // 0x401a80\n    int64_t v17; // 0x401a80\n    int64_t v18; // 0x401a80\n    int64_t v19; // 0x401a80\n    int64_t v20; // 0x401a80\n    int64_t v21; // 0x401a80\n    int64_t v22; // 0x401a80\n    int64_t v23; // 0x401a80\n    char v24; // 0x401a80\n    int32_t * v25; // 0x401a80\n    if ((int32_t)v9 + (int32_t)v8 + (int32_t)v10 > 1) {\n        // 0x402339\n        error(1, (int32_t)\"cannot print \\\"only\\\" of more than one choice\" ^ (int32_t)\"cannot print \\\"only\\\" of more than one choice\", dcgettext(NULL, \"cannot print \\\"only\\\" of more than one choice\", 5));\n        v21 = a2;\n        goto lab_0x40235b;\n    } else {\n        int64_t v26 = v3; // 0x401c1b\n        int64_t v27 = v10 | v8;\n        v22 = v2;\n        v16 = a2;\n        v12 = v26;\n        if ((v27 || v9) == 0) {\n            goto lab_0x401cc4;\n        } else {\n            int64_t v28 = v26 - 1; // 0x401c50\n            v23 = v2;\n            v19 = a2;\n            if (v28 == 0) {\n                goto lab_0x401d41;\n            } else {\n                int32_t * v29 = __errno_location(); // 0x401c5e\n                int64_t v30 = (int64_t)v29; // 0x401c5e\n                if (v9 == 0) {\n                    // 0x402081\n                    v17 = v30;\n                    v13 = v28;\n                    v7 = v29;\n                    v20 = v30;\n                    v14 = v28;\n                    if (v27 == 0) {\n                        goto lab_0x401cfc;\n                    } else {\n                        goto lab_0x402089;\n                    }\n                } else {\n                    // 0x401c74\n                    *v29 = 0;\n                    if (v24 == 0) {\n                        int32_t v31 = geteuid(); // 0x4021f2\n                        g36 = v31;\n                        if (v31 != -1) {\n                            // 0x40220b\n                            v25 = &g36;\n                            goto lab_0x402110;\n                        } else {\n                            int32_t v32 = *v29; // 0x402202\n                            v6 = v29;\n                            v18 = v30;\n                            if (v32 != 0) {\n                                goto lab_0x401d1f;\n                            } else {\n                                // 0x40220b\n                                v25 = &g36;\n                                goto lab_0x402110;\n                            }\n                        }\n                    } else {\n                        int32_t v33 = getuid(); // 0x401c85\n                        g37 = v33;\n                        v25 = &g37;\n                        if (v33 != -1) {\n                            goto lab_0x402110;\n                        } else {\n                            int32_t v34 = *v29; // 0x401c99\n                            v5 = v29;\n                            v15 = v30;\n                            v11 = v28;\n                            v25 = &g37;\n                            if (v34 == 0) {\n                                goto lab_0x402110;\n                            } else {\n                                goto lab_0x401ca2;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40235b:;\n    int64_t v35 = v21;\n    int64_t v36 = function_4047b0(v35); // 0x40235e\n    error(1, (int32_t)\"%s: no such user\" ^ (int32_t)\"%s: no such user\", dcgettext(NULL, \"%s: no such user\", 5));\n    int64_t v37 = v36; // 0x402386\n    goto lab_0x40238b;\n  lab_0x401cc4:;\n    int64_t v110 = v16;\n    v37 = v110;\n    int64_t v78; // 0x401a80\n    int64_t v39; // 0x401a80\n    if (v24 != 0) {\n        goto lab_0x40238b;\n    } else {\n        char v111 = g38; // 0x401ccf\n        v37 = v110;\n        if (v111 != 0) {\n            goto lab_0x40238b;\n        } else {\n            // 0x401cdc\n            v39 = v110;\n            if (v78 != 0) {\n                goto lab_0x4023ad;\n            } else {\n                int64_t v112 = v12;\n                int64_t v113 = v22;\n                v23 = v113;\n                v19 = v110;\n                if (v112 != 0) {\n                    goto lab_0x401d41;\n                } else {\n                    // 0x401cea\n                    getenv(\"POSIXLY_CORRECT\");\n                    v17 = (int64_t)__errno_location();\n                    v13 = v112;\n                    goto lab_0x401cfc;\n                }\n            }\n        }\n    }\n  lab_0x40238b:;\n    int64_t v38 = v37;\n    error(1, (int32_t)\"cannot print only names or real IDs in default format\" ^ (int32_t)\"cannot print only names or real IDs in default format\", dcgettext(NULL, \"cannot print only names or real IDs in default format\", 5));\n    v39 = v38;\n    goto lab_0x4023ad;\n  lab_0x401d41:;\n    int64_t v96 = v19;\n    int64_t v97 = v23;\n    int64_t v98 = *(int64_t *)(v96 + 8 * v97); // 0x401d41\n    char v99 = *(char *)v98; // 0x401d45\n    v21 = v98;\n    int32_t v56; // 0x401a80\n    int32_t v57; // 0x401a80\n    if (v99 == 0) {\n        goto lab_0x40235b;\n    } else {\n        int64_t v100 = function_404ae0(v98, (int64_t *)&g36, 0, 0, 0); // 0x401d5d\n        v21 = v98;\n        if (v100 != 0) {\n            goto lab_0x40235b;\n        } else {\n            int32_t uid4 = g36; // 0x401d6b\n            struct passwd * v101 = getpwuid(uid4); // 0x401d71\n            v21 = v98;\n            if (v101 == NULL) {\n                goto lab_0x40235b;\n            } else {\n                int64_t v102 = (int64_t)v101; // 0x401d71\n                int64_t v103 = *(int64_t *)v101; // 0x401d82\n                int64_t v104 = function_405380(v103); // 0x401d85\n                int32_t v105 = *(int32_t *)(v102 + 16); // 0x401d8f\n                g36 = v105;\n                g37 = v105;\n                int32_t v106 = *(int32_t *)(v102 + 20); // 0x401d9e\n                g34 = v106;\n                g35 = v106;\n                v56 = v106;\n                v57 = 0x1000000 * (int32_t)v104 >> 24;\n                if (v9 != 0) {\n                    goto lab_0x4020ff;\n                } else {\n                    goto lab_0x401db6;\n                }\n            }\n        }\n    }\n  lab_0x4023ad:;\n    int64_t v40 = v39;\n    error(1, (int32_t)\"option --zero not permitted in default format\" ^ (int32_t)\"option --zero not permitted in default format\", dcgettext(NULL, \"option --zero not permitted in default format\", 5));\n    int32_t * v41 = (int32_t *)v40; // 0x4023ca\n    int32_t * v42 = v41;\n    char * format = dcgettext(NULL, \"cannot get effective GID\", 5); // 0x4023db\n    int32_t err_num = *v42; // 0x4023e0\n    error(1, err_num, format);\n    return &g56;\n  lab_0x401cfc:;\n    int64_t v43 = v13;\n    int64_t v44 = v17;\n    int32_t * v45 = (int32_t *)v44;\n    *v45 = 0;\n    int32_t v46 = geteuid(); // 0x401d02\n    g36 = v46;\n    v7 = v45;\n    v20 = v44;\n    v14 = v43;\n    if (v46 != -1) {\n        goto lab_0x402089;\n    } else {\n        int32_t v47 = *v45; // 0x401d16\n        v6 = v45;\n        v18 = v44;\n        v7 = v45;\n        v20 = v44;\n        v14 = v43;\n        if (v47 == 0) {\n            goto lab_0x402089;\n        } else {\n            goto lab_0x401d1f;\n        }\n    }\n  lab_0x402089:;\n    int32_t * v48 = v7;\n    if (v10 == 0) {\n        // 0x402216\n        *v48 = 0;\n        int32_t v49 = getuid(); // 0x40221c\n        g37 = v49;\n        if (v49 != -1) {\n            goto lab_0x402092;\n        } else {\n            int64_t v50 = v14;\n            int64_t v51 = v20;\n            int32_t v52 = *v48; // 0x402230\n            v5 = v48;\n            v15 = v51;\n            v11 = v50;\n            if (v52 == 0) {\n                goto lab_0x402092;\n            } else {\n                goto lab_0x401ca2;\n            }\n        }\n    } else {\n        goto lab_0x402092;\n    }\n  lab_0x402092:\n    // 0x402092\n    *v48 = 0;\n    int32_t v53 = getegid(); // 0x402098\n    g34 = v53;\n    if (v53 == -1) {\n        int32_t v54 = *v48; // 0x4020a8\n        v41 = v48;\n        if (v54 != 0) {\n            // 0x4023cf\n            v42 = v41;\n            format = dcgettext(NULL, \"cannot get effective GID\", 5);\n            err_num = *v42;\n            error(1, err_num, format);\n            return &g56;\n        }\n    }\n    // 0x4020b1\n    *v48 = 0;\n    int32_t v55 = getgid(); // 0x4020b7\n    g35 = v55;\n    v56 = v55;\n    v57 = 0;\n    if (v55 != -1) {\n        goto lab_0x401db6;\n    } else {\n        int32_t v58 = *v48; // 0x4020d4\n        v56 = v55;\n        v57 = 0;\n        if (v58 == 0) {\n            goto lab_0x401db6;\n        } else {\n            char * format2 = dcgettext(NULL, \"cannot get real GID\", 5); // 0x4020e9\n            int32_t err_num2 = *v48; // 0x4020ee\n            error(1, err_num2, format2);\n            goto lab_0x4020ff;\n        }\n    }\n  lab_0x402110:;\n    int32_t * v59 = v25;\n    uint32_t uid = *v59;\n    int64_t v60 = uid;\n    char v61 = g38; // 0x402110\n    int64_t v62; // 0x401a80\n    int64_t v63; // 0x4021df\n    if (v61 == 0) {\n        // 0x4021d7\n        v63 = function_402b40(v60, &g33);\n        v62 = v63;\n        goto lab_0x40212c;\n    } else {\n        struct passwd * v64 = getpwuid(uid); // 0x40211f\n        if (v64 == NULL) {\n            // 0x40219e\n            function_402b40(v60, &g33);\n            error(0, (int32_t)\"cannot find name for user ID %s\" ^ (int32_t)\"cannot find name for user ID %s\", dcgettext(NULL, \"cannot find name for user ID %s\", 5));\n            *(char *)&g16 = 0;\n            // 0x4021d7\n            v63 = function_402b40(v60, &g33);\n            v62 = v63;\n            goto lab_0x40212c;\n        } else {\n            int64_t v65 = *(int64_t *)v64; // 0x402129\n            v62 = v65;\n            goto lab_0x40212c;\n        }\n    }\n  lab_0x4020ff:\n    // 0x4020ff\n    v25 = &g37;\n    if (v24 == 0) {\n        // 0x40220b\n        v25 = &g36;\n        goto lab_0x402110;\n    } else {\n        goto lab_0x402110;\n    }\n  lab_0x401db6:;\n    int32_t v66 = v56; // 0x402173\n    int64_t v67; // 0x401a80\n    int64_t v68; // 0x401a80\n    int32_t v69; // 0x401a80\n    if (v10 != 0) {\n        char v70 = g38; // 0x402012\n        int32_t v71 = g34;\n        int32_t v72 = v24 == 0 ? v71 : v66;\n        if ((char)function_402820(v72, v70) != 0) {\n            goto lab_0x402037;\n        } else {\n            // 0x402030\n            *(char *)&g16 = 0;\n            goto lab_0x402037;\n        }\n    } else {\n        uint32_t v73 = v57;\n        uint32_t v74 = g37; // 0x401dbf\n        if (v8 != 0) {\n            char v75 = g38; // 0x402165\n            int32_t v76 = g34; // 0x40216d\n            char v77 = v73;\n            if (v78 == 0) {\n                // 0x402248\n                v67 = 10;\n                if ((char)function_4028a0(v77, v74, v66, v76, v75, 32) != 0) {\n                    goto lab_0x402045;\n                } else {\n                    // 0x402030\n                    *(char *)&g16 = 0;\n                    goto lab_0x402037;\n                }\n            } else {\n                // 0x402182\n                if ((char)function_4028a0(v77, v74, v66, v76, v75, 0) == 0) {\n                    // 0x402030\n                    *(char *)&g16 = 0;\n                    goto lab_0x402037;\n                } else {\n                    // 0x402197\n                    v67 = 0;\n                    goto lab_0x402045;\n                }\n            }\n        } else {\n            // 0x401dce\n            function_402b40((int64_t)v74, &g33);\n            __printf_chk(1, dcgettext(NULL, \"uid=%s\", 5));\n            int32_t uid2 = g37; // 0x401e00\n            struct passwd * v79 = getpwuid(uid2); // 0x401e06\n            if (v79 != NULL) {\n                int64_t v80 = *(int64_t *)v79; // 0x401e13\n                __printf_chk(1, \"(%s)\", (char *)v80);\n            }\n            uint32_t v81 = g35; // 0x401e27\n            function_402b40((int64_t)v81, &g32);\n            __printf_chk(1, dcgettext(NULL, \" gid=%s\", 5));\n            int32_t gid = g35; // 0x401e5d\n            struct group * v82 = getgrgid(gid); // 0x401e63\n            if (v82 != NULL) {\n                int64_t v83 = *(int64_t *)v82; // 0x401e6d\n                __printf_chk(1, \"(%s)\", (char *)v83);\n            }\n            uint32_t v84 = g36; // 0x401e81\n            int32_t v85 = g37; // 0x401e87\n            if (v84 != v85) {\n                // 0x401e8f\n                function_402b40((int64_t)v84, &g33);\n                __printf_chk(1, dcgettext(NULL, \" euid=%s\", 5));\n                int32_t uid3 = g36; // 0x401ec1\n                struct passwd * v86 = getpwuid(uid3); // 0x401ec7\n                if (v86 != NULL) {\n                    int64_t v87 = *(int64_t *)v86; // 0x401ed4\n                    __printf_chk(1, \"(%s)\", (char *)v87);\n                }\n            }\n            uint32_t v88 = g34; // 0x401ee8\n            int32_t v89 = g35; // 0x401eee\n            if (v88 != v89) {\n                // 0x401ef6\n                function_402b40((int64_t)v88, &g32);\n                __printf_chk(1, dcgettext(NULL, \" egid=%s\", 5));\n                int32_t gid2 = g34; // 0x401f28\n                struct group * v90 = getgrgid(gid2); // 0x401f2e\n                if (v90 != NULL) {\n                    int64_t v91 = *(int64_t *)v90; // 0x401f38\n                    __printf_chk(1, \"(%s)\", (char *)v91);\n                }\n            }\n            // 0x401f4c\n            v68 = function_4053e0();\n            v69 = v68;\n            if (v73 % 256 == 0) {\n                if (v69 >= 0) {\n                    goto lab_0x401f7d;\n                } else {\n                    char * format3 = dcgettext(NULL, \"failed to get groups for the current process\", 5); // 0x4022dd\n                    int32_t * v92 = __errno_location(); // 0x4022e5\n                    int32_t err_num3 = *v92; // 0x4022ef\n                    error(0, err_num3, format3);\n                    // 0x402030\n                    *(char *)&g16 = 0;\n                    goto lab_0x402037;\n                }\n            } else {\n                if (v69 < 0) {\n                    // 0x4022fd\n                    function_4047b0(0x100000000000000 * (int64_t)v73 >> 56);\n                    char * format4 = dcgettext(NULL, \"failed to get groups for user %s\", 5); // 0x402316\n                    int32_t * v93 = __errno_location(); // 0x40231e\n                    int32_t err_num4 = *v93; // 0x40232b\n                    error(0, err_num4, format4);\n                    // 0x402030\n                    *(char *)&g16 = 0;\n                    goto lab_0x402037;\n                } else {\n                    goto lab_0x401f7d;\n                }\n            }\n        }\n    }\n  lab_0x401d1f:;\n    int64_t v94 = v18;\n    int32_t * v95 = v6;\n    char * format5 = dcgettext(NULL, \"cannot get effective UID\", 5); // 0x401d2b\n    int32_t err_num5 = *v95; // 0x401d30\n    error(1, err_num5, format5);\n    v23 = (int64_t)format5;\n    v19 = v94;\n    goto lab_0x401d41;\n  lab_0x401ca2:;\n    int64_t v107 = v11;\n    int64_t v108 = v15;\n    int32_t * v109 = v5;\n    char * format6 = dcgettext(NULL, \"cannot get real UID\", 5); // 0x401cae\n    int32_t err_num6 = *v109; // 0x401cb3\n    error(1, err_num6, format6);\n    v22 = (int64_t)format6;\n    v16 = v108;\n    v12 = v107;\n    goto lab_0x401cc4;\n  lab_0x40212c:;\n    int64_t v114 = v62;\n    struct _IO_FILE * v115 = g27; // 0x40212c\n    fputs_unlocked((char *)v114, v115);\n    goto lab_0x402037;\n  lab_0x402037:\n    // 0x402037\n    v67 = 10;\n    if (v78 != 0) {\n        // 0x402197\n        v67 = 0;\n        goto lab_0x402045;\n    } else {\n        goto lab_0x402045;\n    }\n  lab_0x402045:;\n    int64_t v116 = v67;\n    struct _IO_FILE * v117 = g27; // 0x402045\n    int64_t v118 = (int64_t)v117; // 0x402045\n    int64_t * v119 = (int64_t *)(v118 + 40); // 0x40204c\n    uint64_t v120 = *v119; // 0x40204c\n    uint64_t v121 = *(int64_t *)(v118 + 48); // 0x402050\n    if (v121 > v120) {\n        // 0x40205a\n        *v119 = v120 + 1;\n        *(char *)v120 = (char)v116;\n    } else {\n        // 0x40223e\n        __overflow(v117, (int32_t)v116);\n    }\n    char v122 = *(char *)&g16; // 0x402065\n    return v122 ^ 1;\n  lab_0x401f7d:\n    if (v69 != 0) {\n        struct _IO_FILE * v123 = g27; // 0x40213d\n        fputs_unlocked(dcgettext(NULL, \" groups=\", 5), v123);\n    }\n    int64_t v124 = v68 & 0xffffffff;\n    int64_t v125 = 0; // 0x401fff\n    int64_t v126; // 0x401a80\n    if (v124 != 0) {\n        int64_t v127 = v125;\n        struct _IO_FILE * v128; // 0x401f8e\n        int64_t v129; // 0x401f8e\n        int64_t * v130; // 0x401f95\n        uint64_t v131; // 0x401f95\n        uint64_t v132; // 0x401f99\n        if (v127 != 0) {\n            // 0x401f8e\n            v128 = g27;\n            v129 = (int64_t)v128;\n            v130 = (int64_t *)(v129 + 40);\n            v131 = *v130;\n            v132 = *(int64_t *)(v129 + 48);\n            if (v131 >= v132) {\n                // 0x402265\n                __overflow(v128, 44);\n            } else {\n                // 0x401fa3\n                *v130 = v131 + 1;\n                *(char *)v131 = 44;\n            }\n        }\n        struct _IO_FILE * v133 = g27; // 0x401fb3\n        int32_t * v134 = (int32_t *)(4 * v127 + v126); // 0x401fbf\n        uint32_t v135 = *v134; // 0x401fbf\n        int64_t v136 = function_402b40((int64_t)v135, &g32); // 0x401fc2\n        fputs_unlocked((char *)v136, v133);\n        int32_t gid3 = *v134; // 0x401fd7\n        struct group * v137 = getgrgid(gid3); // 0x401fda\n        int64_t v138; // 0x401fe4\n        if (v137 != NULL) {\n            // 0x401fe4\n            v138 = *(int64_t *)v137;\n            __printf_chk(1, \"(%s)\", (char *)v138);\n        }\n        int64_t v139 = v127 + 1; // 0x401ff8\n        v125 = v139;\n        while (v139 != v124) {\n            // 0x401f8a\n            v127 = v125;\n            if (v127 != 0) {\n                // 0x401f8e\n                v128 = g27;\n                v129 = (int64_t)v128;\n                v130 = (int64_t *)(v129 + 40);\n                v131 = *v130;\n                v132 = *(int64_t *)(v129 + 48);\n                if (v131 >= v132) {\n                    // 0x402265\n                    __overflow(v128, 44);\n                } else {\n                    // 0x401fa3\n                    *v130 = v131 + 1;\n                    *(char *)v131 = 44;\n                }\n            }\n            // 0x401fae\n            v133 = g27;\n            v134 = (int32_t *)(4 * v127 + v126);\n            v135 = *v134;\n            v136 = function_402b40((int64_t)v135, &g32);\n            fputs_unlocked((char *)v136, v133);\n            gid3 = *v134;\n            v137 = getgrgid(gid3);\n            if (v137 != NULL) {\n                // 0x401fe4\n                v138 = *(int64_t *)v137;\n                __printf_chk(1, \"(%s)\", (char *)v138);\n            }\n            // 0x401ff8\n            v139 = v127 + 1;\n            v125 = v139;\n        }\n    }\n    // 0x402001\n    free((int64_t *)v126);\n    goto lab_0x402037;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402400",
            "funcEndAddr": "40242b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402400\n    int64_t v1; // 0x402400\n    __libc_start_main(0x401a80, (int32_t)a4, (char **)&v1, (void (*)())0x407030, (void (*)())0x407090, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40242b",
            "funcStartAddr": "40242b",
            "funcEndAddr": "40244a",
            "decompiledFuncCode": "int64_t function_40242b(void) {\n    // 0x40242b\n    return &g26;\n}\n"
        },
        {
            "funcName": "function_40244a",
            "funcStartAddr": "40244a",
            "funcEndAddr": "402481",
            "decompiledFuncCode": "int64_t function_40244a(void) {\n    // 0x40244a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402481",
            "funcStartAddr": "402481",
            "funcEndAddr": "4024d8",
            "decompiledFuncCode": "int64_t function_402481(void) {\n    // 0x402481\n    if (g30 != 0) {\n        // 0x4024d7\n        int64_t result; // 0x402481\n        return result;\n    }\n    int64_t v1 = g31; // 0x4024b4\n    int64_t result2; // 0x4024c6\n    if (g31 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x4024c6\n        result2 = function_40242b();\n        g30 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x4024b6\n        v1++;\n    }\n    // 0x4024aa\n    g31 = v1;\n    // 0x4024c6\n    result2 = function_40242b();\n    g30 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4024d8",
            "funcStartAddr": "4024d8",
            "funcEndAddr": "4024dd",
            "decompiledFuncCode": "int64_t function_4024d8(void) {\n    // 0x4024d8\n    return function_40244a();\n}\n"
        },
        {
            "funcName": "function_4024e0",
            "funcStartAddr": "4024e0",
            "funcEndAddr": "402815",
            "decompiledFuncCode": "int64_t function_4024e0(int64_t a1) {\n    int32_t status = a1; // 0x4024f6\n    if (status != 0) {\n        // 0x4024fa\n        __fprintf_chk(g29, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40251f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402526\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [USER]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print user and group information for the specified USER,\\nor (when USER omitted) for the current user.\\n\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"  -a             ignore, for compatibility with other versions\\n  -Z, --context  print only the security context of the process\\n  -g, --group    print only the effective group ID\\n  -G, --groups   print all group IDs\\n  -n, --name     print a name instead of a number, for -ugG\\n  -r, --real     print the real ID instead of the effective ID, with -ugG\\n  -u, --user     print only the effective user ID\\n  -z, --zero     delimit entries with NUL characters, not whitespace;\\n                   not permitted in default format\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\nWithout any OPTION, print some useful set of identified information.\\n\", 5), g27);\n    int64_t v1 = &g1; // bp-136, 0x4025f3\n    bool v2; // 0x4024e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402678\n    int64_t v6 = *(int64_t *)v5; // 0x40267c\n    int64_t v7 = 3; // 0x402682\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"id\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x40268e\n        char v11 = *(char *)v9; // 0x40268e\n        char v12 = v11; // 0x40268e\n        bool v13 = false; // 0x40268e\n        while (v10 == v11) {\n            // 0x402684\n            v7--;\n            int64_t v14 = v9 + v3; // 0x40268e\n            int64_t v15 = v8 + v3; // 0x40268e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x40269a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x40269a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4027ac;\n        } else {\n            // 0x402796\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4027eb\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4026fc;\n            } else {\n                goto lab_0x4027ac;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4026fc;\n        } else {\n            // 0x4026e2\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4027eb\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4026fc;\n            } else {\n                goto lab_0x4026fc;\n            }\n        }\n    }\n  lab_0x4027ac:\n    // 0x4027ac\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40273c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40251f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4026fc:\n    // 0x4026fc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40273c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40251f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402820",
            "funcStartAddr": "402820",
            "funcEndAddr": "402895",
            "decompiledFuncCode": "int64_t function_402820(uint32_t gid, char a2) {\n    int64_t v1 = 1; // 0x402830\n    if (a2 != 0) {\n        struct group * v2 = getgrgid(gid); // 0x402836\n        if (v2 != NULL) {\n            // 0x402880\n            fputs_unlocked((char *)*(int64_t *)v2, g27);\n            return (int64_t)a2 & 0xffffffff & 0xffffffff;\n        }\n        // 0x402848\n        error(0, (int32_t)\"cannot find name for group ID %lu\" ^ (int32_t)\"cannot find name for group ID %lu\", dcgettext(NULL, \"cannot find name for group ID %lu\", 5));\n        v1 = 0;\n    }\n    int64_t v3 = function_402b40((int64_t)gid, &g39); // 0x402878\n    // 0x402880\n    fputs_unlocked((char *)v3, g27);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4028a0",
            "funcStartAddr": "4028a0",
            "funcEndAddr": "402a7f",
            "decompiledFuncCode": "int64_t function_4028a0(char a1, int32_t uid, int32_t a3, int32_t a4, char a5, uint32_t a6) {\n    int64_t v1 = 1; // 0x4028c0\n    int64_t v2; // 0x4028a0\n    if (a1 != 0) {\n        // 0x4028c6\n        v1 = v2 & 0xffffff00 | (int64_t)(getpwuid(uid) != NULL);\n    }\n    int64_t v3 = (char)function_402820(a3, a5) == 0 ? 0 : v1; // 0x4028fb\n    int64_t v4 = v3; // 0x402901\n    if (a3 != a4) {\n        int64_t v5 = (int64_t)g27; // 0x402903\n        int64_t * v6 = (int64_t *)(v5 + 40); // 0x40290f\n        uint64_t v7 = *v6; // 0x40290f\n        if (v7 >= *(int64_t *)(v5 + 48)) {\n            // 0x402a71\n            __overflow(g27, a6 % 256);\n        } else {\n            // 0x40291d\n            *v6 = v7 + 1;\n            *(char *)v7 = (char)a6;\n        }\n        // 0x402928\n        v4 = (char)function_402820(a4, a5) == 0 ? 0 : v3 & 0xffffffff;\n    }\n    int64_t v8 = function_4053e0(); // 0x402950\n    int32_t v9 = v8; // 0x402955\n    if (v9 < 0) {\n        int32_t * err_num = __errno_location(); // 0x402a00\n        if (a1 == 0) {\n            // 0x402a50\n            error(0, *err_num, dcgettext(NULL, \"failed to get groups for the current process\", 5));\n        } else {\n            // 0x402a0d\n            function_4047b0((int64_t)a1);\n            error(0, *err_num, dcgettext(NULL, \"failed to get groups for user %s\", 5));\n        }\n        // 0x4029db\n        return 0;\n    }\n    // 0x40295d\n    if (v9 == 0) {\n        // 0x4029d6\n        free((int64_t *)v2);\n        // 0x4029db\n        return v4 & 0xffffffff;\n    }\n    uint32_t v10 = 0x1000000 * a6 / 0x1000000; // 0x4028b8\n    int64_t v11 = 0;\n    int32_t * v12 = (int32_t *)(v11 + v2); // 0x402980\n    int32_t v13 = *v12; // 0x402980\n    int64_t v14 = v4; // 0x402986\n    int64_t v15; // 0x40298c\n    int64_t * v16; // 0x402993\n    uint64_t v17; // 0x402993\n    if (v13 != a4 && v13 != a3) {\n        // 0x40298c\n        v15 = (int64_t)g27;\n        v16 = (int64_t *)(v15 + 40);\n        v17 = *v16;\n        if (v17 >= *(int64_t *)(v15 + 48)) {\n            // 0x402a40\n            __overflow(g27, v10 % 256);\n        } else {\n            // 0x4029a1\n            *v16 = v17 + 1;\n            *(char *)v17 = (char)v10;\n        }\n        // 0x4029b0\n        v14 = (char)function_402820(*v12, a5) != 0 ? v4 : 0;\n    }\n    int64_t v18 = v14;\n    int64_t v19 = v11 + 4; // 0x4029d4\n    int64_t v20 = v18; // 0x4029d4\n    while ((4 * v8 + 0x3fffffffc & 0x3fffffffc) != v11) {\n        // 0x402980\n        v11 = v19;\n        int64_t v21 = v18;\n        v12 = (int32_t *)(v11 + v2);\n        v13 = *v12;\n        v14 = v21;\n        if (v13 != a4 && v13 != a3) {\n            // 0x40298c\n            v15 = (int64_t)g27;\n            v16 = (int64_t *)(v15 + 40);\n            v17 = *v16;\n            if (v17 >= *(int64_t *)(v15 + 48)) {\n                // 0x402a40\n                __overflow(g27, v10 % 256);\n            } else {\n                // 0x4029a1\n                *v16 = v17 + 1;\n                *(char *)v17 = (char)v10;\n            }\n            // 0x4029b0\n            v14 = (char)function_402820(*v12, a5) != 0 ? v21 : 0;\n        }\n        // 0x4029cd\n        v18 = v14;\n        v19 = v11 + 4;\n        v20 = v18;\n    }\n    // 0x4029d6\n    free((int64_t *)v2);\n    // 0x4029db\n    return v20 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_402a80",
            "funcStartAddr": "402a80",
            "funcEndAddr": "402a88",
            "decompiledFuncCode": "int64_t function_402a80(int64_t a1) {\n    // 0x402a80\n    g41 = a1;\n    int64_t result; // 0x402a80\n    return result;\n}\n"
        },
        {
            "funcName": "function_402a90",
            "funcStartAddr": "402a90",
            "funcEndAddr": "402a98",
            "decompiledFuncCode": "int64_t function_402a90(int64_t a1) {\n    // 0x402a90\n    g40 = a1;\n    int64_t result; // 0x402a90\n    return result;\n}\n"
        },
        {
            "funcName": "function_402aa0",
            "funcStartAddr": "402aa0",
            "funcEndAddr": "402b3e",
            "decompiledFuncCode": "int64_t function_402aa0(void) {\n    // 0x402aa0\n    int32_t * err_num; // 0x402ab6\n    if ((int32_t)function_406690((int64_t)g27) == 0) {\n        goto lab_0x402acc;\n    } else {\n        // 0x402ab6\n        err_num = __errno_location();\n        if (g40 == 0) {\n            goto lab_0x402ae3;\n        } else {\n            // 0x402ac7\n            if (*err_num != 32) {\n                goto lab_0x402ae3;\n            } else {\n                goto lab_0x402acc;\n            }\n        }\n    }\n  lab_0x402acc:;\n    int64_t result = function_406690((int64_t)g29); // 0x402ad3\n    if ((int32_t)result == 0) {\n        // 0x402adc\n        return result;\n    }\n    // 0x402b1e\n    _exit(g17);\n    // UNREACHABLE\n  lab_0x402ae3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402aef\n    if (g41 == 0) {\n        // 0x402b29\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402b03\n        error(0, *err_num, \"%s: %s\", (char *)function_404600((int64_t)g41), v1);\n    }\n    // 0x402b1e\n    _exit(g17);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402b40",
            "funcStartAddr": "402b40",
            "funcEndAddr": "402b88",
            "decompiledFuncCode": "int64_t function_402b40(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x402b40\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x402b52\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x402b5b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x402b84\n    return result;\n}\n"
        },
        {
            "funcName": "function_402b90",
            "funcStartAddr": "402b90",
            "funcEndAddr": "402c29",
            "decompiledFuncCode": "int64_t function_402b90(int64_t str) {\n    // 0x402b90\n    if (str == 0) {\n        // 0x402c09\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g29);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402b9e\n    int64_t result = (int64_t)found_char_pos; // 0x402b9e\n    if (found_char_pos == NULL) {\n        // 0x402bf9\n        g42 = str;\n        g28 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402ba8\n    if (v1 - str < 7) {\n        // 0x402bf9\n        g42 = str;\n        g28 = str;\n        return result;\n    }\n    // 0x402bb8\n    bool v2; // 0x402b90\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402b90\n    int64_t v5 = result - 6; // 0x402b90\n    int64_t v6 = 7; // 0x402bc6\n    unsigned char v7 = *(char *)v5; // 0x402bc6\n    char v8 = *(char *)v4; // 0x402bc6\n    char v9 = v8; // 0x402bc6\n    bool v10 = false; // 0x402bc6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402bd0\n    int64_t v13 = v1; // 0x402bd0\n    int64_t v14 = 3; // 0x402bd0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402bf9\n        g42 = str;\n        g28 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402be2\n    char v16 = *(char *)v12; // 0x402be2\n    char v17 = v16; // 0x402be2\n    bool v18 = false; // 0x402be2\n    while (v15 == v16) {\n        // 0x402bd2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402bec\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402bee\n        v20 = result + 4;\n        g26 = v20;\n    }\n    // 0x402bf9\n    g42 = v20;\n    g28 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402c30",
            "funcStartAddr": "402c30",
            "funcEndAddr": "402d22",
            "decompiledFuncCode": "int64_t function_402c30(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402c44\n    int64_t result = (int64_t)v1; // 0x402c44\n    if (result != a1) {\n        // 0x402c51\n        return result;\n    }\n    int64_t v2 = function_406750(); // 0x402c60\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402d16\n    if (v3 == 85) {\n        // 0x402c70\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402d08\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g7 : (int64_t)&g2;\n            return result2;\n        }\n        char v4 = *v1; // 0x402c9e\n        int64_t result3 = v4 != 96 ? (int64_t)&g3 : (int64_t)&g6; // 0x402cab\n        // 0x402c51\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402d08\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g7 : (int64_t)&g2;\n        return result2;\n    }\n    char v5 = *v1; // 0x402ced\n    int64_t result4 = v5 != 96 ? (int64_t)&g4 : (int64_t)&g5; // 0x402cfa\n    // 0x402c51\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402d30",
            "funcStartAddr": "402d30",
            "funcEndAddr": "402d87",
            "decompiledFuncCode": "int64_t function_402d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402d30\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402d78\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d87",
            "funcStartAddr": "402d87",
            "funcEndAddr": "403f51",
            "decompiledFuncCode": "int64_t function_402d87(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402dd1\n    int64_t v3 = 0; // 0x402dd1\n    int64_t v4; // 0x402d87\n    int64_t v5; // 0x402d87\n    int64_t v6; // 0x402d87\n    int64_t v7; // 0x402d87\n    int64_t v8; // 0x402d87\n    int64_t v9; // 0x402d87\n    int64_t v10; // 0x402d87\n    int64_t v11; // 0x402d87\n    int64_t v12; // 0x402d87\n    int64_t v13; // 0x402d87\n    int64_t v14; // 0x402d87\n    int64_t v15; // 0x402d87\n    int64_t v16; // 0x402d87\n    int64_t v17; // 0x402d87\n    int64_t v18; // 0x402d87\n    int64_t result; // 0x402d87\n    int64_t v19; // 0x402d87\n    int32_t wc; // bp+132, 0x402d87\n    int64_t ps; // bp+136, 0x402d87\n    char v20; // 0x403340\n    int64_t v21; // 0x403340\n    int64_t v22; // 0x4036e8\n    int64_t v23; // 0x402d87\n    int64_t v24; // 0x403707\n    int32_t v25; // 0x402d87\n    while (true) {\n      lab_0x402dd8_2:\n        // 0x402dd8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402d87\n        int64_t v27; // 0x402e0c\n        while (true) {\n          lab_0x402dd8:\n            // 0x402dd8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402de3\n            if (v15 == -1) {\n                // 0x402de5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402df3\n            if (v28) {\n                // break (via goto) -> 0x403558\n                goto lab_0x403558;\n            }\n            // 0x402dfc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g55 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4033eb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402f31;\n                    }\n                    // 0x40380d\n                    v26 = v5 + 1;\n                    goto lab_0x402dd8;\n                }\n                case 7: {\n                    goto lab_0x402f31;\n                }\n                case 8: {\n                    goto lab_0x402f31;\n                }\n                case 9: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402f31;\n                }\n                case 12: {\n                    goto lab_0x402f31;\n                }\n                case 13: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402efd;\n                }\n                case 36: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402f31;\n                }\n                case 38: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402f31;\n                }\n                case 44: {\n                    goto lab_0x402f31;\n                }\n                case 45: {\n                    goto lab_0x402f31;\n                }\n                case 46: {\n                    goto lab_0x402f31;\n                }\n                case 47: {\n                    goto lab_0x402f31;\n                }\n                case 48: {\n                    goto lab_0x402f31;\n                }\n                case 49: {\n                    goto lab_0x402f31;\n                }\n                case 50: {\n                    goto lab_0x402f31;\n                }\n                case 51: {\n                    goto lab_0x402f31;\n                }\n                case 52: {\n                    goto lab_0x402f31;\n                }\n                case 53: {\n                    goto lab_0x402f31;\n                }\n                case 54: {\n                    goto lab_0x402f31;\n                }\n                case 55: {\n                    goto lab_0x402f31;\n                }\n                case 56: {\n                    goto lab_0x402f31;\n                }\n                case 57: {\n                    goto lab_0x402f31;\n                }\n                case 58: {\n                    goto lab_0x402f31;\n                }\n                case 59: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402f31;\n                }\n                case 66: {\n                    goto lab_0x402f31;\n                }\n                case 67: {\n                    goto lab_0x402f31;\n                }\n                case 68: {\n                    goto lab_0x402f31;\n                }\n                case 69: {\n                    goto lab_0x402f31;\n                }\n                case 70: {\n                    goto lab_0x402f31;\n                }\n                case 71: {\n                    goto lab_0x402f31;\n                }\n                case 72: {\n                    goto lab_0x402f31;\n                }\n                case 73: {\n                    goto lab_0x402f31;\n                }\n                case 74: {\n                    goto lab_0x402f31;\n                }\n                case 75: {\n                    goto lab_0x402f31;\n                }\n                case 76: {\n                    goto lab_0x402f31;\n                }\n                case 77: {\n                    goto lab_0x402f31;\n                }\n                case 78: {\n                    goto lab_0x402f31;\n                }\n                case 79: {\n                    goto lab_0x402f31;\n                }\n                case 80: {\n                    goto lab_0x402f31;\n                }\n                case 81: {\n                    goto lab_0x402f31;\n                }\n                case 82: {\n                    goto lab_0x402f31;\n                }\n                case 83: {\n                    goto lab_0x402f31;\n                }\n                case 84: {\n                    goto lab_0x402f31;\n                }\n                case 85: {\n                    goto lab_0x402f31;\n                }\n                case 86: {\n                    goto lab_0x402f31;\n                }\n                case 87: {\n                    goto lab_0x402f31;\n                }\n                case 88: {\n                    goto lab_0x402f31;\n                }\n                case 89: {\n                    goto lab_0x402f31;\n                }\n                case 90: {\n                    goto lab_0x402f31;\n                }\n                case 91: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402f31;\n                }\n                case 94: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402f31;\n                }\n                case 96: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402f31;\n                }\n                case 98: {\n                    goto lab_0x402f31;\n                }\n                case 99: {\n                    goto lab_0x402f31;\n                }\n                case 100: {\n                    goto lab_0x402f31;\n                }\n                case 101: {\n                    goto lab_0x402f31;\n                }\n                case 102: {\n                    goto lab_0x402f31;\n                }\n                case 103: {\n                    goto lab_0x402f31;\n                }\n                case 104: {\n                    goto lab_0x402f31;\n                }\n                case 105: {\n                    goto lab_0x402f31;\n                }\n                case 106: {\n                    goto lab_0x402f31;\n                }\n                case 107: {\n                    goto lab_0x402f31;\n                }\n                case 108: {\n                    goto lab_0x402f31;\n                }\n                case 109: {\n                    goto lab_0x402f31;\n                }\n                case 110: {\n                    goto lab_0x402f31;\n                }\n                case 111: {\n                    goto lab_0x402f31;\n                }\n                case 112: {\n                    goto lab_0x402f31;\n                }\n                case 113: {\n                    goto lab_0x402f31;\n                }\n                case 114: {\n                    goto lab_0x402f31;\n                }\n                case 115: {\n                    goto lab_0x402f31;\n                }\n                case 116: {\n                    goto lab_0x402f31;\n                }\n                case 117: {\n                    goto lab_0x402f31;\n                }\n                case 118: {\n                    goto lab_0x402f31;\n                }\n                case 119: {\n                    goto lab_0x402f31;\n                }\n                case 120: {\n                    goto lab_0x402f31;\n                }\n                case 121: {\n                    goto lab_0x402f31;\n                }\n                case 122: {\n                    goto lab_0x402f31;\n                }\n                case 123: {\n                    goto lab_0x402ed5;\n                }\n                case 124: {\n                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402ed5;\n                }\n                case 126: {\n                    goto lab_0x402efd;\n                }\n                default: {\n                    goto lab_0x4032d5;\n                }\n            }\n        }\n      lab_0x4032d5:\n        if (v23 != 1) {\n            // 0x403640\n            ps = 0;\n            int64_t len = v15; // 0x403650\n            if (v15 == -1) {\n                // 0x403652\n                len = strlen((char *)str);\n            }\n            // 0x40367e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4036df:\n                // 0x4036df\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4036e4\n                int64_t v30 = v29 + str;\n                v24 = function_406610(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403c5a_2;\n                    }\n                    case -1: {\n                        goto lab_0x403c5a_2;\n                    }\n                    case -2: {\n                        // 0x403d3d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403d77\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403d7a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403d87\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403d80\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403c5a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403c5a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4036b0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40375c\n                        char v34 = *(char *)v33; // 0x40376d\n                        unsigned char v35; // 0x402d87\n                        if (v34 < 125) {\n                            // 0x403778\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40378f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403760\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40376d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403778\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40378f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403760\n                            v33++;\n                        }\n                        goto lab_0x4036b0;\n                    }\n                }\n            }\n            goto lab_0x403c5a_2;\n        } else {\n            // 0x403324\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402f31;\n        }\n    }\n  lab_0x403558:\n    // 0x403558\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403e5a\n        if (v8 > result) {\n            // 0x403e63\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403187\n        return result;\n    }\n    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402f31:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402f40\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40314a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403041\n    char v40 = v20; // 0x403041\n    int64_t v41 = v38; // 0x403041\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403041\n    int64_t v43 = v36; // 0x403041\n    goto lab_0x402fbd;\n  lab_0x40314a_2:\n    // 0x403187\n    return function_402d30(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403c5a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402f31;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40382e\n        int64_t v50 = v5 + 1; // 0x403911\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403918\n        char v52 = v20; // 0x403918\n        int64_t v53 = result; // 0x403918\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4038e1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4038e5\n            int64_t v56 = v54 + 1; // 0x4038ea\n            int64_t v57 = v51 + 1; // 0x403911\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4038dc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4038e1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4038e5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402fbd;\n    }\n  lab_0x4036b0:\n    // 0x4036b0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4036cf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4036d2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403c5a\n        goto lab_0x403c5a_2;\n    }\n    goto lab_0x4036df;\n  lab_0x402efd:\n    // 0x402efd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40314a_2;\n    }\n    goto lab_0x402f31;\n  lab_0x402ed5:;\n    bool v60 = v15 == 1; // 0x402ee0\n    if (v15 == -1) {\n        // 0x402ee2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402eee\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402f31;\n    } else {\n        goto lab_0x402efd;\n    }\n  lab_0x402fbd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402fc2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402fc6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402dd8_2;\n}\n"
        },
        {
            "funcName": "function_403f60",
            "funcStartAddr": "403f60",
            "funcEndAddr": "4040fe",
            "decompiledFuncCode": "int64_t function_403f60(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403f62\n    int32_t * v3 = __errno_location(); // 0x403f7c\n    int64_t v4 = (int64_t)g19; // 0x403f81\n    int32_t v5 = *v3; // 0x403f8b\n    int64_t v6 = v4; // 0x403fa1\n    if (v2 >= (int64_t)*(int32_t *)&g22) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4040f9\n            function_4053a0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403fb0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403fb7\n        int64_t v9; // 0x403f60\n        if (g19 == &g20) {\n            int64_t v10 = function_4051b0(0, v8); // 0x4040da\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g20); // 0x4040df\n            *(int64_t *)&g19 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4051b0(v4, v8); // 0x403fcb\n            *(int64_t *)&g19 = v12;\n            v9 = v12;\n        }\n        // 0x403fda\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g22; // 0x403fda\n        int32_t v14 = v7; // 0x403fe1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g22 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404011\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40401b\n    int64_t * v17 = (int64_t *)v15; // 0x40401e\n    uint64_t v18 = *v17; // 0x40401e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404021\n    int64_t result = *v19; // 0x404021\n    int64_t v20; // 0x403f60\n    uint64_t v21 = function_402d30(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404044\n    if (v18 > v21) {\n        // 0x4040bb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404057\n    *v17 = v22;\n    if (result != (int64_t)&g43) {\n        // 0x404067\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405150(v22); // 0x404081\n    *v19 = result2;\n    int64_t v23; // 0x403f60\n    function_402d30(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4040bb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "404134",
            "decompiledFuncCode": "int64_t function_404100(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404107\n    int64_t result = function_405350(a1 == 0 ? (int64_t)&g44 : a1, 56); // 0x404126\n    return result;\n}\n"
        },
        {
            "funcName": "function_404140",
            "funcStartAddr": "404140",
            "funcEndAddr": "40414f",
            "decompiledFuncCode": "int64_t function_404140(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g44 : a1); // 0x40414c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404150",
            "funcStartAddr": "404150",
            "funcEndAddr": "40415f",
            "decompiledFuncCode": "int64_t function_404150(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x404158\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_404160",
            "funcStartAddr": "404160",
            "funcEndAddr": "404193",
            "decompiledFuncCode": "int64_t function_404160(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 + 8 : a1 + 8; // 0x404179\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40417e\n    uint32_t v3 = *v2; // 0x40417e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404182\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "4041b3",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g44 + 4 : a1 + 4); // 0x4041ac\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "4041eb",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x4041c8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4041e5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4041dc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_4041f0",
            "funcStartAddr": "4041f0",
            "funcEndAddr": "404262",
            "decompiledFuncCode": "int64_t function_4041f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g44 : a5; // 0x404212\n    int32_t * v2 = __errno_location(); // 0x40421b\n    uint32_t v3 = *(int32_t *)v1; // 0x40423b\n    int64_t result = function_402d30(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40424a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404270",
            "funcStartAddr": "404270",
            "funcEndAddr": "404351",
            "decompiledFuncCode": "int64_t function_404270(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g44 : a4; // 0x404292\n    int32_t * v2 = __errno_location(); // 0x404298\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4042b7\n    int32_t * v4 = (int32_t *)v1; // 0x4042ba\n    int64_t v5 = function_402d30(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4042d5\n    int64_t v6 = v5 + 1; // 0x4042da\n    int64_t result = function_405150(v6); // 0x4042ef\n    function_402d30(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404334\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40433d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404360",
            "funcStartAddr": "404360",
            "funcEndAddr": "40436a",
            "decompiledFuncCode": "int64_t function_404360(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404360\n    return function_404270(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "404405",
            "decompiledFuncCode": "int64_t function_404370(void) {\n    uint32_t v1 = *(int32_t *)&g22; // 0x404370\n    int64_t v2 = v1; // 0x404370\n    int64_t v3 = v2; // 0x404384\n    if (v1 >= 2) {\n        int64_t v4 = &g22;\n        int64_t v5 = v4 + 16; // 0x4043a3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g56;\n        while (v5 != (int64_t)g19 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4043a0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g56;\n        }\n    }\n    int64_t v6 = v3; // 0x4043bd\n    if (g20 != 0x60b380) {\n        // 0x4043bf\n        free((int64_t *)g20);\n        g20 = 256;\n        *(int64_t *)&g21 = (int64_t)&g43;\n        v6 = &g56;\n    }\n    int64_t result = v6; // 0x4043e1\n    if (g19 != &g20) {\n        // 0x4043e3\n        free(g19);\n        *(int64_t *)&g19 = (int64_t)&g20;\n        result = &g56;\n    }\n    // 0x4043f6\n    *(int32_t *)&g22 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404421",
            "decompiledFuncCode": "int64_t function_404410(void) {\n    // 0x404410\n    int64_t v1; // 0x404410\n    return function_403f60(v1, v1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40443a",
            "decompiledFuncCode": "int64_t function_404430(void) {\n    // 0x404430\n    int64_t v1; // 0x404430\n    return function_403f60(v1, v1, v1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "404456",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1) {\n    // 0x404440\n    return function_403f60(0, a1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404460",
            "funcStartAddr": "404460",
            "funcEndAddr": "404472",
            "decompiledFuncCode": "int64_t function_404460(int64_t a1, int64_t a2) {\n    // 0x404460\n    return function_403f60(0, a1, a2, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "4044e8",
            "decompiledFuncCode": "int64_t function_404480(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404490\n    return function_403f60((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4044f0",
            "funcStartAddr": "4044f0",
            "funcEndAddr": "404554",
            "decompiledFuncCode": "int64_t function_4044f0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404500\n    return function_403f60((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404560",
            "funcStartAddr": "404560",
            "funcEndAddr": "40456c",
            "decompiledFuncCode": "int64_t function_404560(int64_t a1, int64_t a2) {\n    // 0x404560\n    return function_404480(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404570",
            "funcStartAddr": "404570",
            "funcEndAddr": "40457f",
            "decompiledFuncCode": "int64_t function_404570(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404570\n    return function_4044f0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404580",
            "funcStartAddr": "404580",
            "funcEndAddr": "4045f0",
            "decompiledFuncCode": "int64_t function_404580(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x40458d\n    int128_t v2 = __asm_movdqa(g45); // 0x404595\n    int128_t v3 = __asm_movdqa(g46); // 0x40459d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4045b2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4045c8\n    uint32_t v6 = *v5; // 0x4045c8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4045cd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403f60(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4045f0",
            "funcStartAddr": "4045f0",
            "funcEndAddr": "4045fd",
            "decompiledFuncCode": "int64_t function_4045f0(int64_t a1, int64_t a2) {\n    // 0x4045f0\n    return function_404580(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404600",
            "funcStartAddr": "404600",
            "funcEndAddr": "404611",
            "decompiledFuncCode": "int64_t function_404600(int64_t a1) {\n    // 0x404600\n    return function_404580(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "40462a",
            "decompiledFuncCode": "int64_t function_404620(void) {\n    // 0x404620\n    int64_t v1; // 0x404620\n    return function_404580(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404630",
            "funcStartAddr": "404630",
            "funcEndAddr": "40469e",
            "decompiledFuncCode": "int64_t function_404630(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40464a\n    return function_403f60(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4046a0",
            "funcStartAddr": "4046a0",
            "funcEndAddr": "40470c",
            "decompiledFuncCode": "int64_t function_4046a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x4046a7\n    int128_t v2 = __asm_movdqa(g45); // 0x4046af\n    int128_t v3 = __asm_movdqa(g46); // 0x4046b7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4046d9\n    if (a2 == 0 || a3 == 0) {\n        // 0x404707\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4046ea\n    return function_403f60(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "404719",
            "decompiledFuncCode": "int64_t function_404710(void) {\n    // 0x404710\n    int64_t v1; // 0x404710\n    return function_4046a0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404720",
            "funcStartAddr": "404720",
            "funcEndAddr": "404737",
            "decompiledFuncCode": "int64_t function_404720(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404720\n    return function_4046a0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "404753",
            "decompiledFuncCode": "int64_t function_404740(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404740\n    return function_4046a0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404760",
            "funcStartAddr": "404760",
            "funcEndAddr": "40476a",
            "decompiledFuncCode": "int64_t function_404760(void) {\n    // 0x404760\n    int64_t v1; // 0x404760\n    return function_403f60(v1, v1, v1, &g18);\n}\n"
        },
        {
            "funcName": "function_404770",
            "funcStartAddr": "404770",
            "funcEndAddr": "404782",
            "decompiledFuncCode": "int64_t function_404770(int64_t a1, int64_t a2) {\n    // 0x404770\n    return function_403f60(0, a1, a2, &g18);\n}\n"
        },
        {
            "funcName": "function_404790",
            "funcStartAddr": "404790",
            "funcEndAddr": "4047a1",
            "decompiledFuncCode": "int64_t function_404790(void) {\n    // 0x404790\n    int64_t v1; // 0x404790\n    return function_403f60(v1, v1, -1, &g18);\n}\n"
        },
        {
            "funcName": "function_4047b0",
            "funcStartAddr": "4047b0",
            "funcEndAddr": "4047c6",
            "decompiledFuncCode": "int64_t function_4047b0(int64_t a1) {\n    // 0x4047b0\n    return function_403f60(0, a1, -1, &g18);\n}\n"
        },
        {
            "funcName": "function_4047d0",
            "funcStartAddr": "4047d0",
            "funcEndAddr": "404add",
            "decompiledFuncCode": "int64_t function_4047d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1;\n    if (a5 != 0) {\n        // 0x404808\n        *(int64_t *)a5 = 0;\n    }\n    if (a6 != 0) {\n        // 0x404815\n        *(int64_t *)a6 = 0;\n    }\n    int32_t v2 = a3;\n    int64_t v3; // 0x4047d0\n    int64_t v4 = a4 == 0 ? 0xffffffff : v3 & 0xffffffff;\n    char * name; // 0x4047d0\n    int64_t v5; // 0x4047d0\n    int64_t v6; // 0x4047d0\n    int64_t v7; // 0x4047d0\n    int64_t v8; // 0x4047d0\n    int64_t v9; // 0x4047d0\n    int64_t v10; // 0x4047d0\n    int64_t v11; // 0x4047d0\n    int64_t v12; // 0x4047d0\n    int64_t v13; // 0x4047d0\n    int64_t v14; // 0x4047d0\n    int32_t v15; // 0x4047d0\n    if (a2 == 0) {\n        // 0x4049a8\n        v15 = v2;\n        v11 = 0;\n        v8 = 0;\n        v10 = v4;\n        if (*(char *)&v1 == 0) {\n            goto lab_0x40487f;\n        } else {\n            // 0x4049b6\n            v13 = function_405380(v1);\n            goto lab_0x4049c8;\n        }\n    } else {\n        int64_t v16 = a2 - v1; // 0x404829\n        if (v16 != 0) {\n            int64_t v17 = function_405350(v1, v16 + 1); // 0x4048d9\n            *(char *)(v17 + v16) = 0;\n            int64_t v18 = a2 + 1; // 0x4048eb\n            v13 = v17;\n            if (*(char *)v18 == 0) {\n                goto lab_0x4049c8;\n            } else {\n                // 0x4048f6\n                v7 = v18;\n                if (v17 == 0) {\n                    goto lab_0x404841;\n                } else {\n                    int64_t v19 = v18 == 0; // 0x404906\n                    char * v20 = (char *)v17;\n                    name = v20;\n                    v5 = v19;\n                    v12 = v17;\n                    v9 = v18;\n                    v6 = v19;\n                    v14 = v17;\n                    if (*v20 == 43) {\n                        goto lab_0x4049e6;\n                    } else {\n                        goto lab_0x40491a;\n                    }\n                }\n            }\n        } else {\n            int64_t v21 = a2 + 1; // 0x404832\n            v7 = v21;\n            v15 = v2;\n            v11 = 0;\n            v8 = 0;\n            v10 = v4;\n            if (*(char *)v21 == 0) {\n                goto lab_0x40487f;\n            } else {\n                goto lab_0x404841;\n            }\n        }\n    }\n  lab_0x40487f:\n    // 0x40487f\n    *(int32_t *)a3 = v15;\n    if (a4 != 0) {\n        // 0x40488f\n        *(int32_t *)a4 = (int32_t)v10;\n    }\n    int64_t v22 = v11; // 0x404896\n    if (a5 != 0) {\n        // 0x404898\n        *(int64_t *)a5 = v11;\n        v22 = 0;\n    }\n    int64_t v23 = v8; // 0x4048a1\n    if (a6 != 0) {\n        // 0x4048a3\n        *(int64_t *)a6 = v8;\n        v23 = 0;\n    }\n    // 0x4048aa\n    free((int64_t *)v22);\n    free((int64_t *)v23);\n    return (int32_t)&g56 ^ (int32_t)&g56;\n  lab_0x4049c8:\n    // 0x4049c8\n    v15 = v2;\n    v11 = 0;\n    v8 = 0;\n    v10 = v4;\n    if (v13 == 0) {\n        goto lab_0x40487f;\n    } else {\n        int64_t v24 = a2 != 0; // 0x4049db\n        char * v25 = (char *)v13;\n        name = v25;\n        v5 = v24;\n        v12 = v13;\n        v9 = 0;\n        v6 = v24;\n        v14 = v13;\n        if (*v25 != 43) {\n            goto lab_0x40491a;\n        } else {\n            goto lab_0x4049e6;\n        }\n    }\n  lab_0x404841:\n    // 0x404841\n    v15 = v2;\n    v11 = 0;\n    v8 = 0;\n    v10 = v4;\n    if (v7 == 0) {\n        goto lab_0x40487f;\n    } else {\n        goto lab_0x404850;\n    }\n  lab_0x404850:;\n    int64_t v26 = 0;\n    char * v27 = (char *)v7;\n    char * name2 = v27; // 0x404854\n    int32_t v28 = v2; // 0x404854\n    int64_t v29 = v26; // 0x404854\n    int64_t v30 = v7; // 0x404854\n    int32_t v31 = v2; // 0x404854\n    int64_t v32 = v26; // 0x404854\n    int64_t v33 = v7; // 0x404854\n    if (*v27 == 43) {\n        goto lab_0x40495b;\n    } else {\n        goto lab_0x40485a;\n    }\n  lab_0x40491a:;\n    struct passwd * v34 = getpwnam(name); // 0x404921\n    v6 = v5;\n    v14 = v12;\n    int32_t v35; // bp-88, 0x4047d0\n    if (v34 == NULL) {\n        goto lab_0x4049e6;\n    } else {\n        int64_t v36 = (int64_t)v34; // 0x404921\n        int32_t v37 = *(int32_t *)(v36 + 16); // 0x404934\n        if (v5 != 0) {\n            uint32_t gid = *(int32_t *)(v36 + 20); // 0x404a38\n            int64_t v38 = gid; // 0x404a38\n            struct group * v39 = getgrgid(gid); // 0x404a3f\n            int64_t v40; // 0x4047d0\n            if (v39 == NULL) {\n                // 0x404ac8\n                v40 = function_402b40(v38, (int64_t *)&v35);\n            } else {\n                // 0x404a49\n                v40 = *(int64_t *)v39;\n            }\n            // 0x404a4c\n            v1 = v40;\n            int64_t v41 = function_405380(v40); // 0x404a4c\n            endgrent();\n            endpwent();\n            v15 = v37;\n            v11 = v12;\n            v8 = v41;\n            v10 = v38;\n            goto lab_0x40487f;\n        } else {\n            // 0x404943\n            endpwent();\n            v15 = v37;\n            v11 = v12;\n            v8 = 0;\n            v10 = v4;\n            if (v9 == 0) {\n                goto lab_0x40487f;\n            } else {\n                char * v42 = (char *)v9;\n                name2 = v42;\n                v28 = v37;\n                v29 = v12;\n                v30 = v9;\n                v31 = v37;\n                v32 = v12;\n                v33 = v9;\n                if (*v42 != 43) {\n                    goto lab_0x40485a;\n                } else {\n                    goto lab_0x40495b;\n                }\n            }\n        }\n    }\n  lab_0x4049e6:;\n    // 0x4049e6\n    int64_t v43; // 0x4047d0\n    int64_t * v44; // 0x4047d0\n    int64_t v45; // 0x4047d0\n    if ((char)v6 == 0) {\n        int64_t v46 = function_405410(v14, 0, 10, (int64_t *)&v35, (int64_t *)&g9, a6); // 0x404a7d\n        if ((int32_t)v46 != 0) {\n            goto lab_0x404ab0;\n        } else {\n            // 0x404a86\n            if (v35 > -1) {\n                // 0x404a99\n                int64_t v47; // 0x4047d0\n                int64_t v48 = v47;\n                endpwent();\n                int32_t v49; // 0x404a86\n                v15 = v49;\n                int64_t v50; // 0x4047d0\n                v11 = v50;\n                v8 = 0;\n                v10 = v4;\n                if (v48 == 0) {\n                    goto lab_0x40487f;\n                } else {\n                    goto lab_0x404850;\n                }\n            } else {\n                goto lab_0x404ab0;\n            }\n        }\n    } else {\n        // 0x4049ea\n        endpwent();\n        v45 = v14;\n        v44 = NULL;\n        v43 = (int64_t)\"invalid spec\";\n        goto lab_0x4049f7;\n    }\n  lab_0x40495b:;\n    int64_t v51 = function_405410(v33, 0, 10, (int64_t *)&v35, (int64_t *)&g9, a6); // 0x404970\n    int64_t v52; // 0x4047d0\n    int64_t v53; // 0x4047d0\n    int64_t v54; // 0x4047d0\n    int32_t v55; // 0x4047d0\n    if ((int32_t)v51 != 0) {\n        goto lab_0x40498c;\n    } else {\n        // 0x404979\n        v55 = v31;\n        v54 = v32;\n        v52 = v33;\n        v53 = v35;\n        if (v35 > -1) {\n            goto lab_0x40486f;\n        } else {\n            goto lab_0x40498c;\n        }\n    }\n  lab_0x40485a:;\n    struct group * v56 = getgrnam(name2); // 0x40485d\n    v31 = v28;\n    v32 = v29;\n    v33 = v30;\n    if (v56 == NULL) {\n        goto lab_0x40495b;\n    } else {\n        // 0x40486b\n        v55 = v28;\n        v54 = v29;\n        v52 = v30;\n        v53 = (int64_t)*(int32_t *)((int64_t)v56 + 16);\n        goto lab_0x40486f;\n    }\n  lab_0x40498c:\n    // 0x40498c\n    endgrent();\n    v45 = v32;\n    v44 = (int64_t *)function_405380(v33);\n    v43 = (int64_t)\"invalid group\";\n    goto lab_0x4049f7;\n  lab_0x404ab0:\n    // 0x404ab0\n    endpwent();\n    v45 = v14;\n    v44 = NULL;\n    v43 = (int64_t)\"invalid user\";\n    goto lab_0x4049f7;\n  lab_0x4049f7:\n    // 0x4049f7\n    free((int64_t *)v45);\n    free(v44);\n    return (int64_t)dcgettext(NULL, (char *)v43, 5);\n  lab_0x40486f:\n    // 0x40486f\n    endgrent();\n    v15 = v55;\n    v11 = v54;\n    v8 = function_405380(v52);\n    v10 = v53;\n    goto lab_0x40487f;\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404bad",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, int64_t * a2, int32_t a3, int32_t a4, int32_t a5) {\n    int64_t v1 = a5;\n    int64_t v2 = a4;\n    int64_t v3 = (int64_t)a2;\n    if (a3 == 0) {\n        // 0x404b90\n        return function_4047d0(a1, 0, v3, 0, v2, v1);\n    }\n    int64_t v4 = a3;\n    char * str = (char *)a1; // 0x404b0b\n    char * found_char_pos = strchr(str, 58); // 0x404b0b\n    int64_t result = function_4047d0(a1, (int64_t)found_char_pos, v3, v4, v2, v1); // 0x404b25\n    if (found_char_pos != NULL) {\n        // 0x404b74\n        return result;\n    }\n    if (result == 0) {\n        // 0x404b74\n        return 0;\n    }\n    char * found_char_pos2 = strchr(str, 46); // 0x404b44\n    if (found_char_pos2 == NULL || function_4047d0(a1, (int64_t)found_char_pos2, v3, v4, v2, v1) != 0) {\n        // 0x404b74\n        return 0x100000000 * result >> 32;\n    }\n    // 0x404b74\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404bb0",
            "funcStartAddr": "404bb0",
            "funcEndAddr": "404f8d",
            "decompiledFuncCode": "int64_t function_404bb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404c48\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404bcc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404be6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404c2b\n    if (a6 < 10) {\n        // 0x404c3a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404d32\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "404fb0",
            "decompiledFuncCode": "int64_t function_404f90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404f90\n    if (a5 == 0) {\n        // 0x404fab\n        return function_404bb0(a1, a2, a3, a4, a5, 0, (int64_t)&g56);\n    }\n    int64_t v1 = 0; // 0x404f97\n    v1++;\n    int64_t v2 = v1; // 0x404fa9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404fa0\n        v1++;\n        v2 = v1;\n    }\n    // 0x404fab\n    return function_404bb0(a1, a2, a3, a4, a5, v2, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "405010",
            "decompiledFuncCode": "int64_t function_404fb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404fb0\n    int64_t v3 = &v2; // 0x404fb0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404fe3\n    int64_t v6; // 0x404fcd\n    int64_t * v7; // 0x404feb\n    int64_t v8; // 0x404feb\n    int64_t v9; // 0x404ff7\n    if (v5 < 48) {\n        // 0x404fc0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405003\n            break;\n        }\n    } else {\n        // 0x404feb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405003\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404fe1\n    while (v4 != 9) {\n        // 0x404fd9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404fc0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405003\n                break;\n            }\n        } else {\n            // 0x404feb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405003\n                break;\n            }\n        }\n        // 0x404fd9\n        v10 = 10;\n    }\n    // 0x405003\n    return function_404bb0(a1, a2, a3, a4, v3, v10, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_405010",
            "funcStartAddr": "405010",
            "funcEndAddr": "4050cc",
            "decompiledFuncCode": "int64_t function_405010(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405010\n    int64_t v1; // bp-168, 0x405010\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405010\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405010\n    int64_t v8; // 0x405010\n    int64_t v9; // bp-56, 0x405010\n    int64_t v10; // 0x405075\n    int64_t v11; // 0x405099\n    if ((int32_t)v6 < 48) {\n        // 0x405060\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4050b0\n            break;\n        }\n    } else {\n        // 0x405092\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4050b0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40508a\n    int64_t v13 = 10; // 0x40508a\n    while (v5 != 9) {\n        // 0x40508c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405060\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4050b0\n                break;\n            }\n        } else {\n            // 0x405092\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4050b0\n                break;\n            }\n        }\n        // 0x405082\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4050b0\n    int64_t v14; // bp-136, 0x405010\n    int64_t result = function_404bb0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g56); // 0x4050bf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "405144",
            "decompiledFuncCode": "int64_t function_4050d0(int64_t a1) {\n    // 0x4050d0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405133\n    return fputs_unlocked(v1, g27);\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "40516a",
            "decompiledFuncCode": "int64_t function_405150(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405154\n    if (size != 0 != (mem == NULL)) {\n        // 0x405163\n        return (int64_t)mem;\n    }\n    // 0x405165\n    function_4053a0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "405191",
            "decompiledFuncCode": "int64_t function_405170(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405173\n    int64_t v2 = v1; // 0x405173\n    if (v2 < 0) {\n        // 0x40518b\n        function_4053a0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405189\n        return function_405150(v2);\n    }\n    // 0x40518b\n    function_4053a0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "4051a2",
            "decompiledFuncCode": "int64_t function_4051a0(void) {\n    // 0x4051a0\n    int64_t v1; // 0x4051a0\n    return function_405150(v1);\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "4051e6",
            "decompiledFuncCode": "int64_t function_4051b0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4051d8\n        free(v1);\n        return (int32_t)&g56 ^ (int32_t)&g56;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4051c1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4051d0\n        return (int64_t)mem;\n    }\n    // 0x4051e1\n    function_4053a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4051f0",
            "funcStartAddr": "4051f0",
            "funcEndAddr": "405211",
            "decompiledFuncCode": "int64_t function_4051f0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4051f3\n    int64_t v2 = v1; // 0x4051f3\n    if (v2 < 0) {\n        // 0x40520b\n        function_4053a0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405209\n        return function_4051b0(a1, v2);\n    }\n    // 0x40520b\n    function_4053a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405220",
            "funcStartAddr": "405220",
            "funcEndAddr": "4052a6",
            "decompiledFuncCode": "int64_t function_405220(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40527b\n            function_4053a0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4051b0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405263\n    if (a2 == 0) {\n        // 0x405288\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405268\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40527b\n        function_4053a0(a1);\n        // UNREACHABLE\n    }\n    // 0x40524a\n    *(int64_t *)a2 = v2;\n    return function_4051b0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4052b0",
            "funcStartAddr": "4052b0",
            "funcEndAddr": "405300",
            "decompiledFuncCode": "int64_t function_4052b0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4052b0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4052fa\n            function_4053a0(a1);\n            // UNREACHABLE\n        }\n        // 0x4052d2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4051b0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4052e5\n        *(int64_t *)a2 = 128;\n        return function_4051b0(0, 128);\n    }\n    // 0x4052f8\n    if (a2 < 0) {\n        // 0x4052fa\n        function_4053a0(a1);\n        // UNREACHABLE\n    }\n    // 0x4052d2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4051b0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405300",
            "funcStartAddr": "405300",
            "funcEndAddr": "405317",
            "decompiledFuncCode": "int64_t function_405300(int64_t a1, int64_t a2) {\n    // 0x405300\n    return (int64_t)memset((int64_t *)function_405150(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "40534e",
            "decompiledFuncCode": "int64_t function_405320(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405327\n    if ((int64_t)v1 < 0) {\n        // 0x405349\n        function_4053a0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405349\n        function_4053a0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40533a\n    if (mem != NULL) {\n        // 0x405344\n        return (int64_t)mem;\n    }\n    // 0x405349\n    function_4053a0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405350",
            "funcStartAddr": "405350",
            "funcEndAddr": "405378",
            "decompiledFuncCode": "int64_t function_405350(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405150(a2); // 0x40535f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "405393",
            "decompiledFuncCode": "int64_t function_405380(int64_t str) {\n    // 0x405380\n    return function_405350(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4053a0",
            "funcStartAddr": "4053a0",
            "funcEndAddr": "4053d1",
            "decompiledFuncCode": "int64_t function_4053a0(int64_t a1) {\n    // 0x4053a0\n    error(g17, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4053e0",
            "funcStartAddr": "4053e0",
            "funcEndAddr": "405407",
            "decompiledFuncCode": "int64_t function_4053e0(void) {\n    // 0x4053e0\n    int64_t v1; // 0x4053e0\n    int64_t v2 = function_406d00(v1, v1, v1); // 0x4053e1\n    if ((int32_t)v2 != -1 || *__errno_location() != 12) {\n        // 0x4053ed\n        return v2 & 0xffffffff;\n    }\n    // 0x405402\n    function_4053a0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "40591f",
            "decompiledFuncCode": "int64_t function_405410(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x40541e\n    if (base >= 37) {\n        // 0x4058bc\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x405442\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x405472\n    int64_t v3 = str; // 0x405477\n    char v4 = c; // 0x405477\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x40546c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x405468\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x405479\n    if (v4 == 45) {\n        // 0x4054b3\n        return 4;\n    }\n    // 0x40547e\n    int64_t v6; // bp-64, 0x405410\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x40543e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x405484\n    int64_t * v7 = (int64_t *)endptr; // 0x405489\n    int64_t v8 = *v7; // 0x405489\n    char v9; // 0x405410\n    int64_t v10; // 0x405410\n    int64_t v11; // 0x405410\n    int64_t v12; // 0x405410\n    int64_t v13; // 0x405410\n    int64_t v14; // 0x405410\n    int64_t v15; // 0x405410\n    if (v8 == str) {\n        // 0x4054e0\n        if (c == 0 || str2 == NULL) {\n            // 0x4054b3\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x405501\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x4054b3\n            return 4;\n        }\n        goto lab_0x40550f;\n    } else {\n        int32_t v16 = *v1; // 0x405494\n        int64_t v17 = 0; // 0x40549a\n        if (v16 != 0) {\n            // 0x4054c8\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x4054b3\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x405484\n        v13 = v18;\n        v10 = v17;\n        if (str2 == NULL) {\n            goto lab_0x4054b0;\n        } else {\n            char c2 = *(char *)v8; // 0x4054a3\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x405603\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40550f;\n                } else {\n                    goto lab_0x405615;\n                }\n            } else {\n                goto lab_0x4054b0;\n            }\n        }\n    }\n  lab_0x40550f:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x405517\n    int64_t v21 = 1; // 0x405517\n    int64_t v22; // 0x405410\n    int64_t v23; // 0x405410\n    int64_t v24; // 0x405410\n    int64_t v25; // 0x405410\n    int64_t v26; // 0x405410\n    int64_t v27; // 0x405410\n    int64_t v28; // 0x405410\n    int64_t v29; // 0x405410\n    int64_t v30; // 0x405410\n    int64_t v31; // 0x405410\n    int64_t v32; // 0x405410\n    int64_t v33; // 0x405410\n    int64_t v34; // 0x405410\n    int64_t v35; // 0x405410\n    int64_t v36; // 0x405410\n    int64_t v37; // 0x405410\n    int64_t v38; // 0x405410\n    int64_t v39; // 0x405410\n    int64_t v40; // 0x405410\n    int64_t v41; // 0x405410\n    if (v19 < 48) {\n        // 0x405519\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40557a;\n        } else {\n            // 0x40552c\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x40557a;\n            } else {\n                // 0x405548\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x40557a;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x4057a9\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x40557a;\n                    }\n                    default: {\n                        // 0x40555d\n                        g53 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x40571b;\n                            }\n                            case 70: {\n                                goto lab_0x405615;\n                            }\n                            case 71: {\n                                goto lab_0x405753;\n                            }\n                            case 72: {\n                                goto lab_0x405615;\n                            }\n                            case 73: {\n                                goto lab_0x405615;\n                            }\n                            case 74: {\n                                goto lab_0x405615;\n                            }\n                            case 75: {\n                                goto lab_0x4055dc;\n                            }\n                            case 76: {\n                                goto lab_0x405615;\n                            }\n                            case 77: {\n                                goto lab_0x40559e;\n                            }\n                            case 78: {\n                                goto lab_0x405615;\n                            }\n                            case 79: {\n                                goto lab_0x405615;\n                            }\n                            case 80: {\n                                goto lab_0x4056e8;\n                            }\n                            case 81: {\n                                goto lab_0x405615;\n                            }\n                            case 82: {\n                                goto lab_0x405615;\n                            }\n                            case 83: {\n                                goto lab_0x405615;\n                            }\n                            case 84: {\n                                goto lab_0x4056b8;\n                            }\n                            case 85: {\n                                goto lab_0x405615;\n                            }\n                            case 86: {\n                                goto lab_0x405615;\n                            }\n                            case 87: {\n                                goto lab_0x405615;\n                            }\n                            case 88: {\n                                goto lab_0x405615;\n                            }\n                            case 89: {\n                                goto lab_0x405686;\n                            }\n                            case 90: {\n                                goto lab_0x40564b;\n                            }\n                            case 91: {\n                                goto lab_0x405615;\n                            }\n                            case 92: {\n                                goto lab_0x405615;\n                            }\n                            case 93: {\n                                goto lab_0x405615;\n                            }\n                            case 94: {\n                                goto lab_0x405615;\n                            }\n                            case 95: {\n                                goto lab_0x405615;\n                            }\n                            case 96: {\n                                goto lab_0x405615;\n                            }\n                            case 97: {\n                                goto lab_0x405615;\n                            }\n                            case 98: {\n                                goto lab_0x40562f;\n                            }\n                            case 99: {\n                                goto lab_0x4055b8;\n                            }\n                            case 100: {\n                                goto lab_0x405615;\n                            }\n                            case 101: {\n                                goto lab_0x405615;\n                            }\n                            case 102: {\n                                goto lab_0x405615;\n                            }\n                            case 103: {\n                                goto lab_0x405753;\n                            }\n                            case 104: {\n                                goto lab_0x405615;\n                            }\n                            case 105: {\n                                goto lab_0x405615;\n                            }\n                            case 106: {\n                                goto lab_0x405615;\n                            }\n                            case 107: {\n                                goto lab_0x4055dc;\n                            }\n                            case 108: {\n                                goto lab_0x405615;\n                            }\n                            case 109: {\n                                goto lab_0x40559e;\n                            }\n                            case 110: {\n                                goto lab_0x405615;\n                            }\n                            case 111: {\n                                goto lab_0x405615;\n                            }\n                            case 112: {\n                                goto lab_0x405615;\n                            }\n                            case 113: {\n                                goto lab_0x405615;\n                            }\n                            case 114: {\n                                goto lab_0x405615;\n                            }\n                            case 115: {\n                                goto lab_0x405615;\n                            }\n                            case 116: {\n                                goto lab_0x4056b8;\n                            }\n                            default: {\n                                goto lab_0x40557a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40557a;\n    }\n  lab_0x4054b0:\n    // 0x4054b0\n    *a4 = v13;\n    // 0x4054b3\n    return v10 & 0xffffffff;\n  lab_0x40557a:\n    // 0x40557a\n    g54 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x405410\n    switch (v9) {\n        case 66: {\n            // 0x405774\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x4055e7;\n            } else {\n                // 0x405781\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x4055b8;\n            }\n        }\n        case 69: {\n            goto lab_0x40571b;\n        }\n        case 71: {\n            goto lab_0x405753;\n        }\n        case 75: {\n            goto lab_0x4055dc;\n        }\n        case 77: {\n            goto lab_0x40559e;\n        }\n        case 80: {\n            goto lab_0x4056e8;\n        }\n        case 84: {\n            goto lab_0x4056b8;\n        }\n        case 89: {\n            goto lab_0x405686;\n        }\n        case 90: {\n            goto lab_0x40564b;\n        }\n        case 98: {\n            goto lab_0x40562f;\n        }\n        case 99: {\n            goto lab_0x4055b8;\n        }\n        case 103: {\n            goto lab_0x405753;\n        }\n        case 107: {\n            goto lab_0x4055dc;\n        }\n        case 109: {\n            goto lab_0x40559e;\n        }\n        case 116: {\n            goto lab_0x4056b8;\n        }\n        case 119: {\n            // 0x405620\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x4055e7;\n            } else {\n                // 0x405625\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x4055b8;\n            }\n        }\n        default: {\n            goto lab_0x405615;\n        }\n    }\n  lab_0x40571b:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x405733\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x40573f\n    int64_t v48 = v45; // 0x405742\n    int64_t v49 = v34; // 0x405742\n    int64_t v50 = v46; // 0x405742\n    int32_t v51 = v47; // 0x405742\n    int64_t v52 = v46; // 0x405742\n    while (v47 != 0) {\n        // 0x405730\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x405674;\n  lab_0x405753:\n    // 0x405753\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x40575e\n        int128_t v53; // 0x405759\n        uint128_t v54; // 0x405759\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x40575e\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x405410\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x405763\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x405768\n                v23 = v57;\n                int64_t v58; // 0x405410\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x4055b8;\n  lab_0x4055dc:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x4055df\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x4055b8;\n    } else {\n        goto lab_0x4055e7;\n    }\n  lab_0x40559e:;\n    int128_t v62 = v24; // 0x4055a4\n    uint128_t v63 = v62 * (int128_t)v14; // 0x4055a4\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x4055e7;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x4055a9\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x4055e7;\n        } else {\n            // 0x4055ae\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x4055b8;\n        }\n    }\n  lab_0x4056e8:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x4056fb\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x405707\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x40570a\n    int64_t v70 = v67; // 0x40570a\n    while (v68 != 0) {\n        // 0x4056f8\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x405674;\n  lab_0x4056b8:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x4056cb\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x4056d7\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x4056da\n    int64_t v76 = v73; // 0x4056da\n    while (v74 != 0) {\n        // 0x4056c8\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x405674;\n  lab_0x405686:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x40569b\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x4056a7\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x4056aa\n    int64_t v82 = v79; // 0x4056aa\n    while (v80 != 0) {\n        // 0x405698\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x405674;\n  lab_0x40564b:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x405663\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x40566f\n    int32_t v87 = v86; // 0x405672\n    int64_t v88 = v85; // 0x405672\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x405660\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x405674;\n  lab_0x40562f:\n    // 0x40562f\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x4055e7;\n    } else {\n        // 0x405638\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x4055b8;\n    }\n  lab_0x4055b8:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x4055bd\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x4054b0;\n  lab_0x405615:\n    // 0x405615\n    *a4 = v15;\n    // 0x4054b3\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4055e7:\n    // 0x4055e7\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x4055b8;\n  lab_0x405674:\n    // 0x405674\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x4055b8;\n}\n"
        },
        {
            "funcName": "function_405920",
            "funcStartAddr": "405920",
            "funcEndAddr": "405f3c",
            "decompiledFuncCode": "int64_t function_405920(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40593f\n    int64_t v2 = *v1; // 0x40593f\n    char * str2 = (char *)v2; // 0x40594c\n    char c = *str2; // 0x40594c\n    int64_t v3 = v2; // 0x405978\n    int64_t v4 = 0; // 0x405920\n    int32_t v5; // 0x405920\n    int64_t v6; // 0x405920\n    int64_t v7; // 0x405920\n    int64_t v8; // 0x405920\n    int64_t v9; // 0x405920\n    int64_t v10; // 0x405920\n    int64_t v11; // 0x405920\n    int64_t v12; // 0x405920\n    int64_t v13; // 0x405920\n    int64_t str3; // 0x405920\n    int64_t v14; // 0x405920\n    int64_t v15; // 0x405920\n    int64_t v16; // 0x405920\n    int64_t v17; // 0x405920\n    int32_t v18; // 0x405920\n    int32_t v19; // 0x405920\n    int32_t v20; // 0x405920\n    int32_t v21; // 0x405920\n    int32_t v22; // 0x405920\n    int32_t v23; // 0x405920\n    int32_t v24; // 0x405920\n    int32_t v25; // 0x405920\n    int32_t v26; // 0x405920\n    int32_t v27; // 0x405920\n    int32_t v28; // 0x405920\n    int32_t v29; // 0x405920\n    int64_t nmemb; // 0x405920\n    int64_t v30; // 0x405920\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40597c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405978\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405988\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40598e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405958\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4059bc\n                int64_t v34; // 0x405920\n                int64_t v35; // 0x405920\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4059c5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405b40;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4059d6\n                int64_t v37 = *(int64_t *)v36; // 0x4059da\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4059b0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4059c5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405b40;\n                        }\n                    }\n                    // 0x4059d6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405a26:\n                    // 0x405a26\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405a80;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405bf0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405a80;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405ba0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x405a4a;\n                                } else {\n                                    // 0x405bac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x405a4a;\n                                    } else {\n                                        // 0x405bba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x405a4a;\n                                        } else {\n                                            goto lab_0x405a80;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x405a4a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405a91:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405c66\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405e12\n                            flockfile(g29);\n                            int64_t v41 = *v1; // 0x405e32\n                            __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x405e7f\n                            int64_t v43 = (int64_t)g29;\n                            int64_t v44 = v43; // 0x405e99\n                            int64_t v45; // 0x405e9b\n                            if (*(char *)v42 != 0) {\n                                // 0x405e9b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g29;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405e93\n                            while (v17 + nmemb != v42) {\n                                // 0x405e95\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x405e9b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g29;\n                                }\n                                // 0x405e88\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405ec0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g29);\n                            v40 = *v1;\n                        } else {\n                            // 0x405c74\n                            __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x405dcf\n                        free((int64_t *)v17);\n                    }\n                    // 0x405cc9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405ce0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405b8e\n                    return 63;\n                }\n                // 0x405ab0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405b34\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405b40:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405b50\n                    uint32_t v50 = *v49; // 0x405b50\n                    int64_t v51 = v50; // 0x405b50\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405b5a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405b63\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x405d8f\n                                __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405d3a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405b8e\n                            return 63;\n                        }\n                        // 0x405bd8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x405eef\n                                    __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x405ded\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405e00\n                                // 0x405b8e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405cfe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405d12\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405b7b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405b7e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405b82\n                    int64_t result = v59; // 0x405b88\n                    if (v58 != 0) {\n                        // 0x405b8a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405b8e\n                    return result;\n                }\n            } else {\n                // 0x40598e\n                v5 = v32;\n            }\n            // break -> 0x405ab5\n            break;\n        }\n    }\n    // 0x405ab5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405acd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405ad7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405b8e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405c19\n        __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405b06\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405b16\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405a80:\n    // 0x405a80\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405a80\n    int64_t v63 = *(int64_t *)v62; // 0x405a84\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405a91\n        goto lab_0x405a91;\n    }\n    goto lab_0x405a26;\n  lab_0x405a4a:\n    // 0x405a4a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405920\n    int32_t v65; // 0x405920\n    int32_t v66; // 0x405920\n    if (v27 != 0) {\n        goto lab_0x405a80;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405c00\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405a80;\n            } else {\n                goto lab_0x405a71;\n            }\n        } else {\n            // 0x405a65\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405d5c\n                int64_t v67 = (int64_t)mem; // 0x405d5c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405a80;\n                } else {\n                    // 0x405d6f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405a71;\n                }\n            } else {\n                goto lab_0x405a71;\n            }\n        }\n    }\n  lab_0x405a71:\n    // 0x405a71\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405a80;\n}\n"
        },
        {
            "funcName": "function_405f40",
            "funcStartAddr": "405f40",
            "funcEndAddr": "406506",
            "decompiledFuncCode": "int64_t function_405f40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405f61\n    if (v3 < 1) {\n        // 0x40611e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x405f5d\n    int32_t v5 = *(int32_t *)a7; // 0x405f69\n    uint64_t v6 = a1 & 0xffffffff; // 0x405f6b\n    int64_t v7 = v2; // 0x405f70\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405f73\n    *v8 = 0;\n    int64_t v9; // 0x405f40\n    int64_t v10; // 0x405f40\n    int64_t v11; // 0x405f40\n    int64_t v12; // 0x405f40\n    int64_t str; // 0x405f40\n    int64_t v13; // 0x405f40\n    int64_t v14; // 0x405f40\n    int64_t v15; // 0x405f40\n    int64_t v16; // 0x405f40\n    int64_t v17; // 0x405f40\n    int32_t v18; // 0x405f40\n    char v19; // 0x405f40\n    if (v5 == 0) {\n        // 0x406158\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x405f8a;\n    } else {\n        // 0x405f83\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405fd0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405fd3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406098;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405fe6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405ff6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4060ac;\n                } else {\n                    goto lab_0x406008;\n                }\n            }\n        } else {\n            goto lab_0x405f8a;\n        }\n    }\n  lab_0x405f8a:\n    // 0x405f8a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405f90\n    *v24 = 0;\n    int64_t v25; // 0x405f40\n    int64_t v26; // 0x405f40\n    int64_t v27; // 0x405f40\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406080\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40608d;\n        }\n        case 43: {\n            // 0x406390\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40608d;\n        }\n        default: {\n            // 0x405fac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40630f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x406428\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40608d;\n                } else {\n                    // 0x40631d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405fba;\n                }\n            } else {\n                goto lab_0x405fba;\n            }\n        }\n    }\n  lab_0x406098:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40609f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406008;\n    } else {\n        goto lab_0x4060ac;\n    }\n  lab_0x405fba:\n    // 0x405fba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40608d;\n  lab_0x40608d:\n    // 0x40608d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406098;\n  lab_0x406008:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406008\n    int64_t v31 = v30; // 0x406008\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40600a\n    if ((int64_t)*v32 > v31) {\n        // 0x40600f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406012\n    if (*v33 > v30) {\n        // 0x406017\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40601a\n    int64_t v35 = v31; // 0x40601e\n    int64_t v36 = v15; // 0x40601e\n    int64_t v37; // 0x405f40\n    int64_t v38; // 0x405f40\n    int64_t v39; // 0x405f40\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406188\n        int64_t v41 = v40; // 0x406188\n        v2 = v41;\n        int64_t v42; // 0x405f40\n        if (*v33 == v40) {\n            // 0x406370\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406378\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406194\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4061a8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4061b1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4061ba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4061d1\n            int64_t v47 = v45 & 0xffffffff; // 0x4061d5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4061de\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4061e4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4061e6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4061c0\n            int64_t v49 = v48 & 0xffffffff; // 0x4061c0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4061d1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4061de\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4061e4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4061e6;\n                    }\n                }\n                // 0x4061c0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406388\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4061e6;\n    } else {\n        goto lab_0x406024;\n    }\n  lab_0x4060ac:\n    // 0x4060ac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4060af\n    int64_t v51 = v12; // 0x4060af\n    int64_t v52 = v14; // 0x4060af\n    if (*(char *)v10 == 0) {\n        goto lab_0x406008;\n    } else {\n        goto lab_0x4060b5;\n    }\n  lab_0x406024:;\n    int32_t v53 = v35; // 0x406024\n    int64_t v54; // 0x405f40\n    int64_t v55; // 0x405f40\n    int64_t v56; // 0x405f40\n    int64_t v57; // 0x405f40\n    int64_t v58; // 0x405f40\n    int64_t v59; // 0x405f40\n    char * v60; // 0x405f40\n    int64_t v61; // 0x405f40\n    int64_t v62; // 0x406039\n    int64_t v63; // 0x405f40\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406173\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406176;\n    } else {\n        // 0x40602c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405f40\n        int64_t v66 = v65 ? -1 : 1; // 0x406040\n        int64_t v67 = (int64_t)\"--\"; // 0x405f40\n        int64_t v68 = v62; // 0x405f40\n        int64_t v69 = 3; // 0x406040\n        unsigned char v70 = *(char *)v68; // 0x406040\n        char v71 = *(char *)v67; // 0x406040\n        char v72 = v71; // 0x406040\n        bool v73 = false; // 0x406040\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406130\n            if (*(char *)v62 == 45) {\n                // 0x4061f0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4061f0\n                if (c == 0) {\n                    goto lab_0x40613a;\n                } else {\n                    // 0x4061fd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406280;\n                    } else {\n                        if (c == 45) {\n                            // 0x406463\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4062d5;\n                        } else {\n                            // 0x40620e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406280;\n                            } else {\n                                // 0x406213\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406234;\n                                } else {\n                                    // 0x40621a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406280;\n                                    } else {\n                                        goto lab_0x406234;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40613a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406050\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406053\n            int64_t v77 = v35 + 1; // 0x406056\n            int32_t v78 = v77; // 0x406059\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4063c0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406067\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406075\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406176;\n        }\n    }\n  lab_0x4060b5:;\n    // 0x4060b5\n    int64_t v79; // bp-104, 0x405f40\n    int64_t v80 = &v79; // 0x405f4a\n    int64_t v81 = v50 + 1; // 0x4060b5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4060bc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4060c1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4060c5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4060c9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4060d1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4060d6\n    int32_t c2 = v84; // 0x4060d6\n    char * found_char_pos = strchr(str2, c2); // 0x4060d6\n    int64_t v87 = *v82; // 0x4060db\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4060e5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4060f0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4063e0\n            __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4063ad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40611e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4060d6\n    char v91 = *(char *)(v90 + 1); // 0x40610b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4060c5\n        if (v91 != 58) {\n            // 0x40611e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406334\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406438\n                *v8 = 0;\n            } else {\n                // 0x40641c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40635e\n            *v83 = 0;\n            // 0x40611e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40633e\n        if (v93 != 0) {\n            // 0x4063d0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40635e\n            *v83 = 0;\n            // 0x40611e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406351\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40635e\n            *v83 = 0;\n            // 0x40611e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40649a\n            __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40644a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406451\n        // 0x40635e\n        *v83 = 0;\n        // 0x40611e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4062a9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4062ab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4064d0\n                __fprintf_chk(g29, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406481\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406488\n            // 0x40611e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4062b6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4062ba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4062d5;\n  lab_0x4061e6:\n    // 0x4061e6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x406024;\n  lab_0x4062d5:;\n    int64_t v99 = function_405920(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4062f3\n    // 0x40611e\n    return v99 & 0xffffffff;\n  lab_0x406176:;\n    int32_t v100 = v55; // 0x406176\n    if (v100 != (int32_t)v59) {\n        // 0x40617a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40611e\n    return 0xffffffff;\n  lab_0x40613a:\n    // 0x40613a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406141\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40611e\n    return v99 & 0xffffffff;\n  lab_0x406280:\n    // 0x406280\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4060b5;\n  lab_0x406234:\n    // 0x406234\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405920(v6, a2, str, a4, a5, v57, v1, v11, &g8); // 0x40625a\n    if ((int32_t)v101 != -1) {\n        // 0x40611e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40626f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406280;\n}\n"
        },
        {
            "funcName": "function_406510",
            "funcStartAddr": "406510",
            "funcEndAddr": "406566",
            "decompiledFuncCode": "int64_t function_406510(int64_t a1) {\n    // 0x406510\n    *(int32_t *)&g47 = g25;\n    *(int32_t *)&g48 = g24;\n    int64_t v1; // 0x406510\n    int64_t result = function_405f40(v1, v1, v1, v1, v1, v1, &g47, a1 & 0xffffffff); // 0x406536\n    g25 = *(int32_t *)&g47;\n    g52 = g50;\n    *(int32_t *)&g23 = g49;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406570",
            "funcStartAddr": "406570",
            "funcEndAddr": "406588",
            "decompiledFuncCode": "int64_t function_406570(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406570\n    return function_406510(1);\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "4065a3",
            "decompiledFuncCode": "int64_t function_406590(int64_t a1, int64_t a2, char * a3, char (**a4)[8], int32_t a5, int64_t a6) {\n    // 0x406590\n    return function_406510(0);\n}\n"
        },
        {
            "funcName": "function_4065b0",
            "funcStartAddr": "4065b0",
            "funcEndAddr": "4065c5",
            "decompiledFuncCode": "int64_t function_4065b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4065b0\n    return function_405f40(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4065d0",
            "funcStartAddr": "4065d0",
            "funcEndAddr": "4065e6",
            "decompiledFuncCode": "int64_t function_4065d0(void) {\n    // 0x4065d0\n    return function_406510(0);\n}\n"
        },
        {
            "funcName": "function_4065f0",
            "funcStartAddr": "4065f0",
            "funcEndAddr": "406608",
            "decompiledFuncCode": "int64_t function_4065f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4065f0\n    return function_405f40(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406610",
            "funcStartAddr": "406610",
            "funcEndAddr": "40668a",
            "decompiledFuncCode": "int64_t function_406610(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40661b\n    int64_t v2 = (int64_t)&g9; // 0x40661b\n    int32_t * pwc; // 0x406610\n    int64_t v3; // 0x406610\n    int64_t n; // 0x406610\n    if (a2 == 0) {\n        goto lab_0x406662;\n    } else {\n        // 0x40661d\n        if (a3 == 0) {\n            // 0x406648\n            return -2;\n        }\n        // 0x406629\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406662;\n        } else {\n            goto lab_0x406634;\n        }\n    }\n  lab_0x406662:\n    // 0x406662\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406610\n    pwc = (int32_t *)&v4;\n    goto lab_0x406634;\n  lab_0x406634:;\n    char * wstr = (char *)v3; // 0x40663a\n    int64_t ps; // 0x406610\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40663a\n    int64_t result = v5; // 0x40663a\n    if (v5 < 0xfffffffe) {\n        // 0x406648\n        return result;\n    }\n    int64_t result2 = result; // 0x406679\n    if ((char)function_4066f0(0, v3) == 0) {\n        // 0x40667b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406648\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406690",
            "funcStartAddr": "406690",
            "funcEndAddr": "4066ed",
            "decompiledFuncCode": "int64_t function_406690(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406697\n    int64_t v2; // 0x406690\n    int64_t result = function_406f10(a1, v2); // 0x4066a8\n    if ((v2 & 32) != 0) {\n        // 0x4066d0\n        if ((int32_t)result == 0) {\n            // 0x4066d4\n            *__errno_location() = 0;\n        }\n        // 0x4066ca\n        return 0xffffffff;\n    }\n    // 0x4066b1\n    if ((int32_t)result == 0) {\n        // 0x4066ca\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4066b8\n    if (v1 == 0) {\n        // 0x4066ba\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4066ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4066f0",
            "funcStartAddr": "4066f0",
            "funcEndAddr": "40674e",
            "decompiledFuncCode": "int64_t function_4066f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4066f6\n    if (locale == NULL) {\n        // 0x406723\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4066f6\n    bool v2; // 0x4066f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g10; // 0x4066f0\n    int64_t v5 = v1; // 0x4066f0\n    int64_t v6 = 2; // 0x406715\n    unsigned char v7 = *(char *)v5; // 0x406715\n    char v8 = *(char *)v4; // 0x406715\n    char v9 = v8; // 0x406715\n    bool v10 = false; // 0x406715\n    while (v7 == v8) {\n        // 0x406708\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406721\n    int64_t v13 = v1; // 0x406721\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406723\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406721\n    unsigned char v15 = *(char *)v13; // 0x40673d\n    char v16 = *(char *)v12; // 0x40673d\n    char v17 = v16; // 0x40673d\n    bool v18 = false; // 0x40673d\n    while (v15 == v16) {\n        // 0x406730\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406750",
            "funcStartAddr": "406750",
            "funcEndAddr": "406cb2",
            "decompiledFuncCode": "int64_t function_406750(void) {\n    char * v1 = nl_langinfo(14); // 0x406766\n    char * v2 = g51; // 0x40676b\n    char * v3; // 0x406750\n    int64_t v4; // 0x406750\n    int64_t v5; // 0x406750\n    int64_t v6; // 0x406750\n    int64_t v7; // 0x406750\n    int32_t size; // 0x406750\n    int32_t size2; // 0x406750\n    int32_t len; // 0x406822\n    int64_t v8; // 0x406822\n    char * env_val; // 0x40680d\n    if (v2 == NULL) {\n        // 0x406808\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406875;\n        } else {\n            // 0x40681a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406875;\n            } else {\n                // 0x40681f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40680d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406ca5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406875;\n                    } else {\n                        // 0x406c19\n                        size2 = len + 14;\n                        goto lab_0x40683b;\n                    }\n                } else {\n                    goto lab_0x40683b;\n                }\n            }\n        }\n    } else {\n        // 0x406750\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40678a;\n    }\n  lab_0x406abc:;\n    // 0x406abc\n    struct _IO_FILE * stream; // 0x4068fb\n    int32_t v10 = __uflow(stream); // 0x406abf\n    int64_t v11; // 0x406750\n    int64_t v12 = v11; // 0x406ac9\n    int64_t v13; // 0x406750\n    int64_t v14 = v13; // 0x406ac9\n    int32_t v15 = v10; // 0x406ac9\n    int64_t v16; // 0x406750\n    int64_t v17 = v16; // 0x406ac9\n    int64_t v18 = v11; // 0x406ac9\n    int64_t v19 = v13; // 0x406ac9\n    int64_t v20 = v16; // 0x406ac9\n    if (v10 == -1) {\n        // break -> 0x406acf\n        goto lab_0x406acf;\n    }\n    goto lab_0x406949;\n  lab_0x40693e:;\n    // 0x40693e\n    int64_t v90; // 0x406750\n    int64_t * v32; // 0x406930\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406750\n    v12 = v89;\n    int64_t v91; // 0x406750\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406750\n    v17 = v92;\n    goto lab_0x406949;\n  lab_0x406949:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406750\n    int32_t v25; // bp-120, 0x406750\n    int32_t v26; // bp-184, 0x406750\n    int64_t v27; // 0x4068fb\n    int64_t v28; // 0x406918\n    int64_t v29; // 0x40691d\n    int64_t * v30; // 0x406934\n    switch (c) {\n        case 32: {\n            goto lab_0x406930;\n        }\n        case 10: {\n            goto lab_0x406930;\n        }\n        case 9: {\n            goto lab_0x406930;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406b21\n            int32_t v33; // 0x406750\n            char v34; // 0x406750\n            int32_t v35; // 0x406b2e\n            if (v31 < *v30) {\n                // 0x406b00\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x406b2b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406b21\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406b00\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x406b2b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406b10\n                v36 = v33;\n            }\n            // 0x406bff\n            if (v36 == -1) {\n                // break -> 0x406acf\n                break;\n            }\n            goto lab_0x406930;\n        }\n        default: {\n            // 0x40695f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x406acf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406988\n            int64_t v39 = v37 + 4; // 0x40698a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406996\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406998\n            while (v41 == 0) {\n                // 0x406988\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4069b6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4069c2\n            int64_t v45 = v43 + 4; // 0x4069c4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4069d0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4069d2\n            while (v47 == 0) {\n                // 0x4069c2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4069bf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4069e8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4069f8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4069fc\n            int64_t v52 = v51 + v48; // 0x406a05\n            int64_t * mem; // 0x406750\n            int64_t v53; // 0x406750\n            int64_t v54; // 0x406750\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x406b3b\n                int64_t v56 = v55 + 3; // 0x406b47\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406a21\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406a30\n            if (mem == NULL) {\n                // 0x406c5c\n                free((int64_t *)v21);\n                function_406f10(v27, v53);\n                v24 = (int64_t)&g9;\n                goto lab_0x4068d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406a48\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406a52\n            uint32_t v62 = (int32_t)v59; // 0x406a55\n            int64_t v63; // 0x406750\n            if (v62 >= 8) {\n                // 0x406b64\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x406b7e\n                int64_t v66 = v61 - v65; // 0x406b82\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x406b8d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x406b9e\n                    int64_t v70 = v69 & 0xffffffff; // 0x406b9e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x406b9b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x406c2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406a67\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406a6b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x406a7b\n            int64_t v74 = v60 - 1; // 0x406a7f\n            uint32_t v75 = (int32_t)v73; // 0x406a84\n            int64_t v76; // 0x406750\n            if (v75 >= 8) {\n                // 0x406bb2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x406bbc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x406bcc\n                int64_t v80 = v74 - v79; // 0x406bd0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x406bdb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x406beb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406be9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406c46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x406c4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406a96\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x406a9a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406c93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x406aae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40693e;\n            } else {\n                goto lab_0x406abc;\n            }\n        }\n    }\n  lab_0x406930:;\n    int64_t v93 = v23; // 0x406750\n    int64_t v94 = v22; // 0x406750\n    int64_t v95 = v21; // 0x406750\n    goto lab_0x406930_2;\n  lab_0x406875:;\n    int64_t * mem3 = malloc(size); // 0x406875\n    int64_t v97 = (int64_t)&g9; // 0x406880\n    int64_t v98; // 0x406750\n    int64_t path; // 0x406750\n    if (mem3 == NULL) {\n        goto lab_0x406852;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406875\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406896;\n    }\n  lab_0x40678a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x40677d\n    char v100 = *v3; // 0x40678a\n    int64_t v101; // 0x406750\n    if (v100 == 0) {\n        // 0x4067e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406750\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406750\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4067d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4067d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4067a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4067ad\n        char v107 = *(char *)v106; // 0x4067b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4067e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4067bb\n    v104 = v103 + 1;\n  lab_0x4067d7:\n    // 0x4067e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406852:;\n    char * v108 = (char *)v97;\n    g51 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40678a;\n  lab_0x406896:;\n    int64_t v109 = v98 + path; // 0x406896\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4068c2\n    v24 = (int64_t)&g9;\n    if (fd >= 0) {\n        // 0x4068f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406c22\n            close(fd);\n            v24 = (int64_t)&g9;\n        } else {\n            // 0x406915\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406930_2:;\n                uint64_t v96 = *v32; // 0x406930\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x406abc;\n                } else {\n                    goto lab_0x40693e;\n                }\n            }\n          lab_0x406acf:\n            // 0x406acf\n            function_406f10(v27, v19);\n            v24 = (int64_t)&g9;\n            if (v18 != 0) {\n                // 0x406aee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4068d4;\n  lab_0x40683b:;\n    int64_t * mem4 = malloc(size2); // 0x40683b\n    v97 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x4068e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406896;\n    } else {\n        goto lab_0x406852;\n    }\n  lab_0x4068d4:\n    // 0x4068d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406852;\n}\n"
        },
        {
            "funcName": "function_406cc0",
            "funcStartAddr": "406cc0",
            "funcEndAddr": "406cf6",
            "decompiledFuncCode": "int64_t function_406cc0(int32_t a1, uint64_t a2) {\n    int64_t v1 = 4 * a2; // 0x406cca\n    if (v1 < 0) {\n        // 0x406ce0\n        *__errno_location() = 12;\n        return 0;\n    }\n    if (a2 < 0x4000000000000000) {\n        // 0x406cd8\n        return (int64_t)realloc((int64_t *)(int64_t)a1, (int32_t)v1);\n    }\n    // 0x406ce0\n    *__errno_location() = 12;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406d00",
            "funcStartAddr": "406d00",
            "funcEndAddr": "406f0b",
            "decompiledFuncCode": "int64_t function_406d00(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t grouplist2[1]; // 0x406ef9\n    int32_t grouplist[1]; // 0x406e34\n    int64_t result; // 0x406d00\n    int64_t result2; // 0x406d00\n    int64_t v1; // 0x406d00\n    int64_t v2; // 0x406d00\n    int64_t v3; // 0x406d00\n    int32_t v4; // 0x406d00\n    int32_t ngroups; // bp-44, 0x406d00\n    int32_t v5; // 0x406ded\n    if (a1 == 0) {\n        int32_t v6 = getgroups(0, {0}); // 0x406ddc\n        ngroups = v6;\n        if (v6 < 0) {\n            // 0x406e98\n            if (*__errno_location() != 38) {\n                // 0x406d84\n                return 0xffffffff;\n            }\n            int64_t * mem = malloc(4); // 0x406eab\n            result = 0xffffffff;\n            if (mem == NULL) {\n                // 0x406d84\n                return result;\n            }\n            int32_t v7 = a2; // 0x406eb9\n            *(int32_t *)mem = v7;\n            *(int64_t *)a3 = (int64_t)mem;\n            return v7 != -1;\n        }\n        int64_t v8 = v6; // 0x406ddc\n        v5 = a2;\n        if (v5 == -1 == (v6 != 0)) {\n            int64_t v9 = function_406cc0(0, v8); // 0x406edb\n            if (v9 == 0) {\n                // 0x406d84\n                return 0xffffffff;\n            }\n            // 0x406eec\n            v3 = v9;\n            v4 = ngroups;\n            goto lab_0x406ef0;\n        } else {\n            int64_t v10 = v8 + 1; // 0x406e02\n            ngroups = v10;\n            int64_t v11 = function_406cc0(0, 0x100000000 * v10 >> 32); // 0x406e0e\n            if (v11 == 0) {\n                // 0x406d84\n                return 0xffffffff;\n            }\n            // 0x406e1f\n            v3 = v11;\n            v4 = ngroups;\n            if (v5 == -1) {\n                goto lab_0x406ef0;\n            } else {\n                // 0x406e2d\n                grouplist[0] = (int32_t)v11 + 4;\n                int32_t v12 = getgroups(ngroups - 1, grouplist); // 0x406e34\n                v1 = v11;\n                if (v12 < 0) {\n                    goto lab_0x406d68;\n                } else {\n                    // 0x406e41\n                    *(int32_t *)v11 = v5;\n                    result2 = v12 + 1;\n                    v2 = v11;\n                    goto lab_0x406e47;\n                }\n            }\n        }\n    } else {\n        // 0x406d1b\n        ngroups = 10;\n        int64_t groups = function_406cc0(0, 10); // 0x406d2d\n        if (groups == 0) {\n            // 0x406d84\n            return 0xffffffff;\n        }\n        int32_t group = a2; // 0x406d42\n        char * user = (char *)a1; // 0x406d4d\n        int32_t v13 = getgrouplist(user, group, (int32_t *)groups, &ngroups); // 0x406d4d\n        int64_t v14 = groups; // 0x406d54\n        int32_t v15 = ngroups; // 0x406d54\n        if (v13 < 0) {\n            int64_t v16 = ngroups; // 0x406d98\n            int64_t v17 = v16; // 0x406d9f\n            int64_t v18; // 0x406da1\n            if (ngroups == 10) {\n                // 0x406da1\n                v18 = 2 * v16;\n                ngroups = v18;\n                v17 = v18 & 0xfffffffe;\n            }\n            int64_t groups2 = function_406cc0((int32_t)groups, 0x100000000 * v17 >> 32); // 0x406dad\n            v1 = groups;\n            while (groups2 != 0) {\n                uint32_t v19 = getgrouplist(user, group, (int32_t *)groups2, &ngroups); // 0x406d4d\n                v14 = groups2;\n                v15 = ngroups;\n                int64_t v20 = groups2; // 0x406d54\n                if (v19 >= 0) {\n                    goto lab_0x406d56;\n                }\n                v16 = ngroups;\n                v17 = v16;\n                // 0x406da1\n                v18 = 2 * v16;\n                ngroups = v18;\n                v17 = v18 & 0xfffffffe;\n                // 0x406da7\n                groups2 = function_406cc0((int32_t)v20, 0x100000000 * v17 >> 32);\n                v1 = v20;\n            }\n        } else {\n          lab_0x406d56:;\n            int64_t v21 = function_406cc0((int32_t)v14, (int64_t)v15); // 0x406d5e\n            v1 = v14;\n            if (v21 != 0) {\n                // 0x406dc0\n                *(int64_t *)a3 = v21;\n                return ngroups;\n            }\n        }\n        goto lab_0x406d68;\n    }\n  lab_0x406e7b:;\n    // 0x406e7b\n    int64_t v22; // 0x406d00\n    int64_t v23 = v22 + 4; // 0x406e7b\n    int64_t v24; // 0x406d00\n    result = v24;\n    int64_t v25 = v24; // 0x406e82\n    v22 = v23;\n    int64_t v26; // 0x406d00\n    int64_t v27 = v26; // 0x406e82\n    uint64_t v28; // 0x406e59\n    if (v28 <= v23) {\n        return result;\n    }\n    goto lab_0x406e88;\n  lab_0x406d68:;\n    int32_t * v33 = __errno_location(); // 0x406d68\n    free((int64_t *)v1);\n    // 0x406d84\n    return 0xffffffff;\n  lab_0x406ef0:\n    // 0x406ef0\n    grouplist2[0] = v3;\n    int32_t v34 = getgroups(v4 - (int32_t)(v5 != -1), grouplist2); // 0x406ef9\n    v1 = v3;\n    result2 = v34;\n    v2 = v3;\n    if (v34 >= 0) {\n        goto lab_0x406e47;\n    } else {\n        goto lab_0x406d68;\n    }\n  lab_0x406e47:\n    // 0x406e47\n    *(int64_t *)a3 = v2;\n    if ((int32_t)result2 < 2) {\n        // 0x406d84\n        return result2;\n    }\n    // 0x406e54\n    v28 = (0x100000000 * result2 >> 30) + v2;\n    int64_t v35 = v2 + 4; // 0x406e5d\n    v25 = result2;\n    v22 = v35;\n    if (v28 <= v35) {\n        // 0x406d84\n        return result2;\n    }\n    v27 = v2;\n    while (true) {\n      lab_0x406e88:;\n        int64_t v29 = v27;\n        int64_t v30 = v25;\n        int32_t v31 = *(int32_t *)v22; // 0x406e88\n        if (v31 != *(int32_t *)v2) {\n            // 0x406e70\n            if (*(int32_t *)v29 == v31) {\n                // 0x406e8e\n                v24 = v30 + 0xffffffff & 0xffffffff;\n                v26 = v29;\n                goto lab_0x406e7b;\n            } else {\n                int64_t v32 = v29 + 4; // 0x406e74\n                *(int32_t *)v32 = v31;\n                v24 = v30;\n                v26 = v32;\n                goto lab_0x406e7b;\n            }\n        } else {\n            // 0x406e8e\n            v24 = v30 + 0xffffffff & 0xffffffff;\n            v26 = v29;\n            goto lab_0x406e7b;\n        }\n    }\n    int64_t result3 = result;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_406f10",
            "funcStartAddr": "406f10",
            "funcEndAddr": "406f8b",
            "decompiledFuncCode": "int64_t function_406f10(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406f17\n    if (fileno(stream) < 0) {\n        // 0x406f77\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x406f2a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x406f5b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406f77\n            return fclose(stream);\n        }\n    }\n    // 0x406f2c\n    if ((int32_t)function_406f90(a1, v1) == 0) {\n        // 0x406f77\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406f38\n    int32_t v3 = *v2; // 0x406f40\n    int64_t result = fclose(stream); // 0x406f4e\n    if (v3 != 0) {\n        // 0x406f80\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406f50\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f90",
            "funcStartAddr": "406f90",
            "funcEndAddr": "406fd0",
            "decompiledFuncCode": "int64_t function_406f90(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x406faa\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x406faa\n        return fflush(stream);\n    }\n    // 0x406fb8\n    function_406fd0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406fd0",
            "funcStartAddr": "406fd0",
            "funcEndAddr": "407027",
            "decompiledFuncCode": "int64_t function_406fd0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406fd0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x406fda\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40700b\n    int64_t result = -1; // 0x407014\n    if (v1 != -1) {\n        // 0x407016\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407022\n    return result;\n}\n"
        },
        {
            "funcName": "function_407030",
            "funcStartAddr": "407030",
            "funcEndAddr": "40708d",
            "decompiledFuncCode": "int64_t function_407030(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407030\n    return function_401620();\n}\n"
        },
        {
            "funcName": "function_407090",
            "funcStartAddr": "407090",
            "funcEndAddr": "407091",
            "decompiledFuncCode": "int64_t function_407090(void) {\n    // 0x407090\n    int64_t result; // 0x407090\n    return result;\n}\n"
        },
        {
            "funcName": "function_4070a0",
            "funcStartAddr": "4070a0",
            "funcEndAddr": "4070b8",
            "decompiledFuncCode": "int64_t function_4070a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4070a0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_4070b8",
            "funcStartAddr": "4070b8",
            "funcEndAddr": "4070d8",
            "decompiledFuncCode": "int64_t function_4070b8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x4070c2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4070c3\n        v1 -= 8;\n    }\n    // 0x4070d4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_id.elf"
}