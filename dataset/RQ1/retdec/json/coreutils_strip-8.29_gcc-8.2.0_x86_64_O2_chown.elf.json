{
    "funcInfo": [
        {
            "funcName": "function_402130",
            "funcStartAddr": "402130",
            "funcEndAddr": "402135",
            "decompiledFuncCode": "int64_t function_402130(void) {\n    // 0x402130\n    return abort();\n}\n"
        },
        {
            "funcName": "function_402135",
            "funcStartAddr": "402135",
            "funcEndAddr": "40213a",
            "decompiledFuncCode": "int64_t function_402135(void) {\n    // 0x402135\n    return abort();\n}\n"
        },
        {
            "funcName": "function_40213a",
            "funcStartAddr": "40213a",
            "funcEndAddr": "40213f",
            "decompiledFuncCode": "int64_t function_40213a(void) {\n    // 0x40213a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40213f",
            "funcStartAddr": "40213f",
            "funcEndAddr": "402144",
            "decompiledFuncCode": "int64_t function_40213f(void) {\n    // 0x40213f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402144",
            "funcStartAddr": "402144",
            "funcEndAddr": "402149",
            "decompiledFuncCode": "int64_t function_402144(void) {\n    // 0x402144\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402149",
            "funcStartAddr": "402149",
            "funcEndAddr": "40214e",
            "decompiledFuncCode": "int64_t function_402149(void) {\n    // 0x402149\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40214e",
            "funcStartAddr": "40214e",
            "funcEndAddr": "402153",
            "decompiledFuncCode": "int64_t function_40214e(void) {\n    // 0x40214e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402153",
            "funcStartAddr": "402153",
            "funcEndAddr": "402158",
            "decompiledFuncCode": "int64_t function_402153(void) {\n    // 0x402153\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402158",
            "funcStartAddr": "402158",
            "funcEndAddr": "40215d",
            "decompiledFuncCode": "int64_t function_402158(void) {\n    // 0x402158\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40215d",
            "funcStartAddr": "40215d",
            "funcEndAddr": "402162",
            "decompiledFuncCode": "int64_t function_40215d(void) {\n    // 0x40215d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402162",
            "funcStartAddr": "402162",
            "funcEndAddr": "402167",
            "decompiledFuncCode": "int64_t function_402162(void) {\n    // 0x402162\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402167",
            "funcStartAddr": "402167",
            "funcEndAddr": "40216c",
            "decompiledFuncCode": "int64_t function_402167(void) {\n    // 0x402167\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40216c",
            "funcStartAddr": "40216c",
            "funcEndAddr": "402171",
            "decompiledFuncCode": "int64_t function_40216c(void) {\n    // 0x40216c\n    return abort();\n}\n"
        },
        {
            "funcName": "function_402171",
            "funcStartAddr": "402171",
            "funcEndAddr": "402176",
            "decompiledFuncCode": "int64_t function_402171(void) {\n    // 0x402171\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402180",
            "funcStartAddr": "402180",
            "funcEndAddr": "402690",
            "decompiledFuncCode": "int64_t function_402180(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a1;\n    int64_t v2 = v1 >> 32; // 0x402197\n    int32_t v3 = -1; // bp-264, 0x4021ae\n    int32_t v4 = -1; // bp-260, 0x4021b6\n    int32_t v5 = -1; // bp-256, 0x4021be\n    int32_t v6 = -1; // bp-252, 0x4021c6\n    function_403cb0(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v7; // 0x402180\n    function_40c620(0x403bc0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v7);\n    int64_t v8; // bp-248, 0x402180\n    function_402c50(&v8);\n    int64_t v9 = 16; // 0x40220f\n    int64_t v10 = 0xffffffff; // 0x40220f\n    int64_t v11 = 0; // 0x40220f\n    int64_t v12; // 0x402180\n    int64_t v13; // 0x402180\n    int64_t v14; // 0x402180\n    char v15; // 0x402180\n    char v16; // 0x402180\n    char v17; // 0x402180\n    while (true) {\n      lab_0x402210_2:\n        // 0x402210\n        v13 = v11;\n        v12 = v10;\n        v14 = v9;\n        v17 = v16;\n        int32_t v18 = function_409c90(v2 & 0xffffffff, a2, \"HLPRcfhv\", &g2, 0, v7);\n        v15 = v17;\n        v9 = v14;\n        v10 = v12;\n        v11 = v13;\n        switch (v18) {\n            case -1: {\n                goto lab_0x4023fd;\n            }\n            case 102: {\n                goto lab_0x402210;\n            }\n            default: {\n                if (v18 > 102) {\n                    if (v18 == 129) {\n                        int64_t v19 = function_405c50((int64_t)g52, &v5, &v6, 0, 0); // 0x402396\n                        v15 = v17;\n                        v9 = v14;\n                        v10 = v12;\n                        v11 = v13;\n                        if (v19 != 0) {\n                            // 0x4023a4\n                            error(1, 0, \"%s: %s\", (char *)v19, (char *)function_4058d0((int64_t)g52));\n                            v15 = 1;\n                            v9 = v14;\n                            v10 = v12;\n                            v11 = v13;\n                        }\n                    } else {\n                        if (v18 > 129) {\n                            // 0x4022a8\n                            v15 = v17;\n                            v9 = v14;\n                            v10 = v12;\n                            v11 = 1;\n                            if (v18 != 131) {\n                                // 0x4022b3\n                                v15 = v17;\n                                v9 = v14;\n                                v10 = v12;\n                                v11 = 0;\n                                if (v18 >= 131) {\n                                    if (v18 != 132) {\n                                        // 0x402299\n                                        function_402770(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x4022f7\n                                    *(int64_t *)&g37 = (int64_t)g52;\n                                    v15 = v17;\n                                    v9 = v14;\n                                    v10 = v12;\n                                    v11 = v13;\n                                }\n                            }\n                        } else {\n                            if (v18 == 118) {\n                                // 0x4023f0\n                                v8 = 0;\n                                v15 = v17;\n                                v9 = v14;\n                                v10 = v12;\n                                v11 = v13;\n                            } else {\n                                // 0x402252\n                                v15 = v17;\n                                v9 = v14;\n                                v10 = 1;\n                                v11 = v13;\n                                if (v18 != 128) {\n                                    // 0x402290\n                                    v15 = v17;\n                                    v9 = v14;\n                                    v10 = 0;\n                                    v11 = v13;\n                                    if (v18 != 104) {\n                                        // 0x402299\n                                        function_402770(1);\n                                        // UNREACHABLE\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // 0x402268\n                    v15 = v17;\n                    v9 = 2;\n                    v10 = v12;\n                    v11 = v13;\n                    if (v18 != 76) {\n                        if (v18 > 76) {\n                            // 0x402273\n                            v15 = 1;\n                            v9 = v14;\n                            v10 = v12;\n                            v11 = v13;\n                            if (v18 != 82) {\n                                if (v18 != 99) {\n                                    // 0x4022c0\n                                    v15 = v17;\n                                    v9 = 16;\n                                    v10 = v12;\n                                    v11 = v13;\n                                    if (v18 != 80) {\n                                        // 0x402299\n                                        function_402770(1);\n                                        // UNREACHABLE\n                                    }\n                                } else {\n                                    // 0x402281\n                                    v8 = 1;\n                                    v15 = v17;\n                                    v9 = v14;\n                                    v10 = v12;\n                                    v11 = v13;\n                                }\n                            }\n                        } else {\n                            if (v18 == -130) {\n                                // 0x40259f\n                                function_402770(0);\n                                // UNREACHABLE\n                            }\n                            // 0x4022db\n                            v15 = v17;\n                            v9 = 17;\n                            v10 = v12;\n                            v11 = v13;\n                            if (v18 != 72) {\n                                if (v18 == -131) {\n                                    // 0x40231b\n                                    function_406180((int64_t)g31, \"chown\", \"GNU coreutils\", (int64_t)g19, \"David MacKenzie\", \"Jim Meyering\");\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x402299;\n                            }\n                        }\n                    }\n                }\n                goto lab_0x402210;\n            }\n        }\n    }\n  lab_0x4023fd:;\n    int64_t v20 = 16; // 0x402402\n    char * format; // 0x402676\n    if (v17 != 0) {\n        // 0x4024d3\n        v20 = v14;\n        if (v14 == 16 == v12 == 1) {\n            // 0x40266a\n            format = dcgettext(NULL, \"-R --dereference requires either -H or -L\", 5);\n            error(1, (int32_t)\"-R --dereference requires either -H or -L\" ^ (int32_t)\"-R --dereference requires either -H or -L\", format);\n            return &g57;\n        }\n    }\n    int32_t v21 = *(int32_t *)0x61233c; // 0x402410\n    int64_t v22 = v21; // 0x402410\n    int32_t v23 = (int32_t)v2 - v21; // 0x402426\n    int64_t v24; // 0x402180\n    int64_t v25; // 0x402180\n    int64_t v26; // 0x402180\n    int64_t v27; // 0x402180\n    int64_t v28; // bp-216, 0x402180\n    char * v29; // bp-224, 0x402180\n    if (g37 == NULL) {\n        if (v23 < 2) {\n            goto lab_0x4025a6;\n        } else {\n            int64_t v30 = *(int64_t *)(8 * v22 + a2); // 0x4024f7\n            int64_t v31 = function_405c50(v30, &v3, &v4, (int32_t)(int64_t)&v29, (int32_t)(int64_t)&v28); // 0x402510\n            v26 = a2;\n            v24 = v31;\n            if (v31 != 0) {\n                goto lab_0x402640;\n            } else {\n                // 0x402521\n                if (v29 == NULL) {\n                    goto lab_0x40258c;\n                } else {\n                    goto lab_0x402529;\n                }\n            }\n        }\n    } else {\n        if (v23 < 1) {\n            goto lab_0x4025a6;\n        } else {\n            // 0x402439\n            int64_t v32; // bp-200, 0x402180\n            if (__xstat(1, g37, (struct stat *)&v32) != 0) {\n                int64_t v33 = function_405680(4, (int64_t *)g37); // 0x40260b\n                error(1, *__errno_location(), dcgettext(NULL, \"failed to get attributes of %s\", 5));\n                v26 = v33;\n                v24 = v2;\n                goto lab_0x402640;\n            } else {\n                // 0x402453\n                int32_t v34; // 0x402180\n                v29 = (char *)function_402cd0(v34);\n                v28 = function_402c90((int64_t)v34);\n                v27 = v20;\n                v25 = a2;\n                goto lab_0x40247c;\n            }\n        }\n    }\n  lab_0x402210:\n    // 0x402210\n    v16 = v15;\n    goto lab_0x402210_2;\n  lab_0x4025a6:\n    if (v2 > v22) {\n        // 0x4025cf\n        function_4058d0(*(int64_t *)(a2 - 8 + (v1 >> 29)));\n        error(0, (int32_t)\"missing operand after %s\" ^ (int32_t)\"missing operand after %s\", dcgettext(NULL, \"missing operand after %s\", 5));\n    } else {\n        // 0x4025ab\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n    }\n  lab_0x402299:\n    // 0x402299\n    function_402770(1);\n    // UNREACHABLE\n  lab_0x402640:;\n    int64_t v35 = *(int64_t *)(8 * (int64_t)g28 + v26); // 0x402647\n    error(1, 0, \"%s: %s\", (char *)v24, (char *)function_4058d0(v35));\n    // 0x40266a\n    format = dcgettext(NULL, \"-R --dereference requires either -H or -L\", 5);\n    error(1, (int32_t)\"-R --dereference requires either -H or -L\" ^ (int32_t)\"-R --dereference requires either -H or -L\", format);\n    return &g57;\n  lab_0x40258c:\n    // 0x40258c\n    if (v28 != 0) {\n        // 0x402594\n        v29 = (char *)&g10;\n    }\n    goto lab_0x402529;\n  lab_0x402529:\n    // 0x402529\n    g28 = &g29;\n    v27 = v20;\n    v25 = a2;\n    goto lab_0x40247c;\n  lab_0x40247c:\n    // 0x40247c\n    if (v17 != 0 == (v13 != 0)) {\n        int64_t v36 = function_4058f0(&g36); // 0x40253a\n        if (v36 != 0) {\n            goto lab_0x40248c;\n        } else {\n            int64_t v37 = function_405680(4, (int64_t *)\"/\"); // 0x402557\n            char * format2 = dcgettext(NULL, \"failed to get attributes of %s\", 5); // 0x40256b\n            int32_t * v38 = __errno_location(); // 0x402573\n            int32_t err_num = *v38; // 0x402583\n            error(1, err_num, format2);\n            goto lab_0x40258c;\n        }\n    } else {\n        goto lab_0x40248c;\n    }\n  lab_0x40248c:;\n    uint64_t v39 = function_403a80(8 * (int64_t)g28 + v25, v27 & 0xfffffbff | 1024, v3, v4, v5, v6, &v8); // 0x4024b6\n    return v39 % 256 ^ 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402690",
            "funcEndAddr": "4026bb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402690\n    int64_t v1; // 0x402690\n    __libc_start_main(0x402180, (int32_t)a4, (char **)&v1, (void (*)())0x40c5b0, (void (*)())0x40c610, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4026bb",
            "funcStartAddr": "4026bb",
            "funcEndAddr": "4026da",
            "decompiledFuncCode": "int64_t function_4026bb(void) {\n    // 0x4026bb\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_4026da",
            "funcStartAddr": "4026da",
            "funcEndAddr": "402711",
            "decompiledFuncCode": "int64_t function_4026da(void) {\n    // 0x4026da\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402711",
            "funcStartAddr": "402711",
            "funcEndAddr": "402768",
            "decompiledFuncCode": "int64_t function_402711(void) {\n    // 0x402711\n    if (g34 != 0) {\n        // 0x402767\n        int64_t result; // 0x402711\n        return result;\n    }\n    int64_t v1 = g35; // 0x402744\n    int64_t result2; // 0x402756\n    if (g35 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x402756\n        result2 = function_4026bb();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x402746\n        v1++;\n    }\n    // 0x40273a\n    g35 = v1;\n    // 0x402756\n    result2 = function_4026bb();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402768",
            "funcStartAddr": "402768",
            "funcEndAddr": "40276d",
            "decompiledFuncCode": "int64_t function_402768(void) {\n    // 0x402768\n    return function_4026da();\n}\n"
        },
        {
            "funcName": "function_402770",
            "funcStartAddr": "402770",
            "funcEndAddr": "402bcd",
            "decompiledFuncCode": "int64_t function_402770(int64_t a1) {\n    int32_t status = a1; // 0x402786\n    if (status != 0) {\n        // 0x40278a\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4027af\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4027b6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [OWNER][:[GROUP]] FILE...\\n  or:  %s [OPTION]... --reference=RFILE FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Change the owner and/or group of each FILE to OWNER and/or GROUP.\\nWith --reference, change the owner and group of each FILE to those of RFILE.\\n\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --changes          like verbose but report only when a change is made\\n  -f, --silent, --quiet  suppress most error messages\\n  -v, --verbose          output a diagnostic for every file processed\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --dereference      affect the referent of each symbolic link (this is\\n                         the default), rather than the symbolic link itself\\n  -h, --no-dereference   affect symbolic links instead of any referenced file\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"                         (useful only on systems that can change the\\n                         ownership of a symlink)\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --from=CURRENT_OWNER:CURRENT_GROUP\\n                         change the owner and/or group of each file only if\\n                         its current owner and/or group match those specified\\n                         here.  Either may be omitted, in which case a match\\n                         is not required for the omitted attribute\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --no-preserve-root  do not treat '/' specially (the default)\\n      --preserve-root    fail to operate recursively on '/'\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --reference=RFILE  use RFILE's owner and group rather than\\n                         specifying OWNER:GROUP values\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -R, --recursive        operate on files and directories recursively\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe following options modify how a hierarchy is traversed when the -R\\noption is also specified.  If more than one is specified, only the final\\none takes effect.\\n\\n  -H                     if a command line argument is a symbolic link\\n                         to a directory, traverse it\\n  -L                     traverse every symbolic link to a directory\\n                         encountered\\n  -P                     do not traverse any symbolic links (default)\\n\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\nOwner is unchanged if missing.  Group is unchanged if missing, but changed\\nto login group if implied by a ':' following a symbolic OWNER.\\nOWNER and GROUP may be numeric as well as symbolic.\\n\", 5), g31);\n    __printf_chk(1, dcgettext(NULL, \"\\nExamples:\\n  %s root /u        Change the owner of /u to \\\"root\\\".\\n  %s root:staff /u  Likewise, but also change its group to \\\"staff\\\".\\n  %s -hR root /u    Change the owner of /u and subfiles to \\\"root\\\".\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x4029ab\n    bool v2; // 0x402770\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402a30\n    int64_t v6 = *(int64_t *)v5; // 0x402a34\n    int64_t v7 = 6; // 0x402a3a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"chown\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402a46\n        char v11 = *(char *)v9; // 0x402a46\n        char v12 = v11; // 0x402a46\n        bool v13 = false; // 0x402a46\n        while (v10 == v11) {\n            // 0x402a3c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402a46\n            int64_t v15 = v8 + v3; // 0x402a46\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402a52\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x402a52\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402b64;\n        } else {\n            // 0x402b4e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ba3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ab4;\n            } else {\n                goto lab_0x402b64;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402ab4;\n        } else {\n            // 0x402a9a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ba3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ab4;\n            } else {\n                goto lab_0x402ab4;\n            }\n        }\n    }\n  lab_0x402b64:\n    // 0x402b64\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402af4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4027af\n    exit(status);\n    // UNREACHABLE\n  lab_0x402ab4:\n    // 0x402ab4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402af4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4027af\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402bd0",
            "funcStartAddr": "402bd0",
            "funcEndAddr": "402c45",
            "decompiledFuncCode": "int64_t function_402bd0(int64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x402c28\n        if (a2 == 0) {\n            // 0x402c1b\n            return 0;\n        }\n        // 0x402c30\n        return function_4064f0(a2);\n    }\n    // 0x402bd9\n    if (a2 == 0) {\n        // 0x402c30\n        return function_4064f0(a1);\n    }\n    char * str = (char *)a1; // 0x402be4\n    int32_t len = strlen(str); // 0x402be4\n    char * str2 = (char *)a2; // 0x402bef\n    int64_t str3 = function_4062c0((int64_t)len + 2 + (int64_t)strlen(str2)); // 0x402bf9\n    char * v1 = stpcpy((char *)str3, str); // 0x402c07\n    *v1 = 58;\n    strcpy((char *)((int64_t)v1 + 1), str2);\n    // 0x402c1b\n    return str3;\n}\n"
        },
        {
            "funcName": "function_402c50",
            "funcStartAddr": "402c50",
            "funcEndAddr": "402c7c",
            "decompiledFuncCode": "int64_t function_402c50(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    *(int32_t *)a1 = 2;\n    *(char *)(v1 + 4) = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(int16_t *)(v1 + 16) = 1;\n    *(int64_t *)(v1 + 24) = 0;\n    *(int64_t *)(v1 + 32) = 0;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402c80",
            "funcStartAddr": "402c80",
            "funcEndAddr": "402c81",
            "decompiledFuncCode": "int64_t function_402c80(void) {\n    // 0x402c80\n    int64_t result; // 0x402c80\n    return result;\n}\n"
        },
        {
            "funcName": "function_402c90",
            "funcStartAddr": "402c90",
            "funcEndAddr": "402cc8",
            "decompiledFuncCode": "int64_t function_402c90(int64_t gid) {\n    struct group * v1 = getgrgid((int32_t)gid); // 0x402c97\n    if (v1 != NULL) {\n        // 0x402ca1\n        return function_4064f0(*(int64_t *)v1);\n    }\n    // 0x402cb0\n    int64_t v2; // bp-40, 0x402c90\n    int64_t v3 = function_403c60(gid & 0xffffffff, &v2); // 0x402cb5\n    return function_4064f0(v3);\n}\n"
        },
        {
            "funcName": "function_402cd0",
            "funcStartAddr": "402cd0",
            "funcEndAddr": "402d08",
            "decompiledFuncCode": "int64_t function_402cd0(uint32_t uid) {\n    struct passwd * v1 = getpwuid(uid); // 0x402cd7\n    if (v1 != NULL) {\n        // 0x402ce1\n        return function_4064f0(*(int64_t *)v1);\n    }\n    // 0x402cf0\n    int64_t v2; // bp-40, 0x402cd0\n    int64_t v3 = function_403c60((int64_t)uid, &v2); // 0x402cf5\n    return function_4064f0(v3);\n}\n"
        },
        {
            "funcName": "function_402d10",
            "funcStartAddr": "402d10",
            "funcEndAddr": "403a7d",
            "decompiledFuncCode": "int64_t function_402d10(int64_t a1, int64_t a2, uint32_t owner, int64_t a4, int64_t a5, int64_t a6, int64_t a7) {\n    int64_t v1 = *(int64_t *)(a2 + 56); // 0x402d2d\n    int16_t * v2 = (int16_t *)(a2 + 112); // 0x402d31\n    uint16_t v3 = *v2; // 0x402d31\n    int64_t v4 = v3; // 0x402d31\n    g53 = v4;\n    int64_t v5 = a6; // 0x402d4e\n    int64_t v6; // 0x402d10\n    char v7; // 0x402d10\n    char v8; // 0x402d10\n    int64_t v9; // 0x402d10\n    int64_t format; // 0x402d10\n    bool v10; // 0x402d10\n    switch (v3) {\n        case 1: {\n            unsigned char v11 = *(char *)(a7 + 4); // 0x402fc8\n            v6 = 0;\n            v5 = a6;\n            if (v11 != 0) {\n                int64_t v12 = *(int64_t *)(a7 + 8); // 0x402fd5\n                if (v12 == 0 || *(int64_t *)(a2 + 128) != *(int64_t *)v12 || *(int64_t *)(a2 + 120) != *(int64_t *)(v12 + 8)) {\n                    // 0x402fad\n                    return (int64_t)v11 & 0xffffffff;\n                }\n                int64_t v13 = v10 ? -1 : 1; // 0x403002\n                int64_t v14 = (int64_t)\"/\"; // 0x402d10\n                int64_t v15 = v1; // 0x402d10\n                int64_t v16 = 2; // 0x403002\n                unsigned char v17 = *(char *)v15; // 0x403002\n                char v18 = *(char *)v14; // 0x403002\n                char v19 = v18; // 0x403002\n                bool v20 = false; // 0x403002\n                while (v17 == v18) {\n                    v16--;\n                    v14 += v13;\n                    v15 += v13;\n                    v19 = v17;\n                    v20 = true;\n                    if (v16 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v17 = *(char *)v15;\n                    v18 = *(char *)v14;\n                    v19 = v18;\n                    v20 = false;\n                }\n                unsigned char v21 = v19;\n                if ((v17 >= v21 && !v20) != v17 < v21) {\n                    // 0x4039e3\n                    function_4055a0(1, 4, (int64_t *)\"/\");\n                    function_4055a0(0, 4, (int64_t *)v1);\n                    error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n                } else {\n                    // 0x403011\n                    function_405680(4, (int64_t *)v1);\n                    error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n                }\n                // 0x403044\n                error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n                fts_set(a1, a2, 4);\n                fts_read(a1);\n                // 0x402fad\n                return 0;\n            }\n            goto lab_0x402d81;\n        }\n        case 2: {\n            // 0x402d58\n            v5 = a6 & 0xffffffff;\n            if ((char)function_4065a0(a1, a2) != 0) {\n                // 0x4035f0\n                function_405750(0, 3, v1);\n                error(0, (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\" ^ (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", dcgettext(NULL, \"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", 5));\n                // 0x402fad\n                return 0;\n            }\n            goto lab_0x402d81;\n        }\n        case 4: {\n            char v22 = *(char *)(a7 + 17); // 0x403110\n            if (v22 != 0) {\n                goto lab_0x403095;\n            } else {\n                // 0x40311d\n                function_405680(4, (int64_t *)v1);\n                v7 = v22;\n                v9 = (int64_t)\"cannot read directory %s\";\n                goto lab_0x403138;\n            }\n        }\n        case 6: {\n            // 0x403168\n            v5 = a6;\n            if (*(char *)(a7 + 4) == 0) {\n                // 0x402fad\n                return 1;\n            }\n            goto lab_0x402d81;\n        }\n        case 7: {\n            // 0x403088\n            if (*(char *)(a7 + 17) == 0) {\n                // 0x4036d8\n                function_405750(0, 3, v1);\n                v8 = 0;\n                format = (int64_t)\"%s\";\n                goto lab_0x40314a;\n            } else {\n                goto lab_0x403095;\n            }\n        }\n        case 10: {\n            // 0x4030d8\n            if (*(int64_t *)(a2 + 88) == 0) {\n                int64_t * v23 = (int64_t *)(a2 + 32); // 0x4030df\n                if (*v23 == 0) {\n                    // 0x403910\n                    *v23 = 1;\n                    fts_set(a1, a2, 1);\n                    // 0x402fad\n                    return 1;\n                }\n            }\n            char v24 = *(char *)(a7 + 17); // 0x4030ea\n            if (v24 != 0) {\n                goto lab_0x403095;\n            } else {\n                // 0x4030f3\n                function_405680(4, (int64_t *)v1);\n                v7 = v24;\n                v9 = (int64_t)\"cannot access %s\";\n                goto lab_0x403138;\n            }\n        }\n        default: {\n            goto lab_0x402d81;\n        }\n    }\n  lab_0x402d81:;\n    int64_t v25 = owner; // 0x402d12\n    int64_t group = 0x100000000 * a4 >> 32; // 0x402d35\n    int64_t v26 = *(int64_t *)(a2 + 48); // 0x402d81\n    int64_t v27 = a2 + 120; // 0x402d89\n    int64_t v28 = v5 & 0xffffffff;\n    char * v29 = (char *)(v26 & 0xffffffff); // 0x402d91\n    char * v30 = (char *)(a7 + 16); // 0x402d96\n    char v31 = *v30; // 0x402d96\n    int64_t v32; // 0x402d10\n    int64_t v33; // 0x402d10\n    int64_t v34; // 0x402d10\n    char v35; // 0x402d10\n    int64_t v36; // 0x402d10\n    if ((v28 & a5) == 0xffffffff) {\n        // 0x4032f0\n        if (*(int32_t *)a7 != 2) {\n            goto lab_0x402da4;\n        } else {\n            // 0x4032f9\n            if (*(int64_t *)(a7 + 8) != 0) {\n                goto lab_0x402da4;\n            } else {\n                if (v31 != 0) {\n                    goto lab_0x402da8;\n                } else {\n                    // 0x40330c\n                    v35 = v31;\n                    v34 = v5;\n                    v32 = v27;\n                    if (v3 < 3 || (v3 - 4 & -3) == 0) {\n                        // 0x403324\n                        v36 = (int64_t)*(int32_t *)(a1 + 44);\n                        v33 = v27;\n                        goto lab_0x402e61;\n                    } else {\n                        goto lab_0x402e55;\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x402da4;\n    }\n  lab_0x402da4:;\n    int64_t v37 = v4; // 0x402da6\n    int64_t v38 = v5; // 0x402da6\n    int64_t v39 = v27; // 0x402da6\n    if (v31 == 0) {\n        goto lab_0x402dc0;\n    } else {\n        goto lab_0x402da8;\n    }\n  lab_0x403095:;\n    int32_t v40 = *(int32_t *)a7; // 0x403095\n    int64_t v41 = 0; // 0x40309c\n    int32_t v42 = v40; // 0x40309c\n    int64_t v43 = 0; // 0x40309c\n    if (v40 == 2) {\n        goto lab_0x402fa3;\n    } else {\n        goto lab_0x4030a2;\n    }\n  lab_0x402dc0:;\n    int64_t v44 = v37;\n    int64_t v45 = v44 & 0xff00 | v6 & 0xffffff00 | (int64_t)((v44 & 0xfffd) == 4) | (int64_t)((int16_t)v44 < 3);\n    int32_t v46 = a5; // 0x402dd9\n    int64_t v47; // 0x402d10\n    int64_t v48; // 0x402d10\n    int64_t v49; // 0x402d10\n    if (v46 == -1) {\n        goto lab_0x402e28;\n    } else {\n        // 0x402ddf\n        if (*(int32_t *)(v39 + 28) == v46) {\n            goto lab_0x402e28;\n        } else {\n            if ((char)v45 == 0) {\n                int32_t v50 = *(int32_t *)a7; // 0x4034c8\n                v41 = 1;\n                v49 = 4;\n                v48 = 1;\n                v47 = v39;\n                if (v50 == 2 || v50 != 0) {\n                    goto lab_0x402fa3;\n                } else {\n                    goto lab_0x403458;\n                }\n            } else {\n                int64_t v51 = *(int64_t *)(a7 + 8); // 0x402dee\n                if (v51 == 0) {\n                    goto lab_0x402e04;\n                } else {\n                    // 0x402df7\n                    if (*(int64_t *)v51 == *(int64_t *)(v39 + 8)) {\n                        // 0x403720\n                        if (*(int64_t *)v39 == *(int64_t *)(v51 + 8)) {\n                            goto lab_0x4031b0;\n                        } else {\n                            goto lab_0x40372d;\n                        }\n                    } else {\n                        goto lab_0x402e04;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402da8:\n    // 0x402da8\n    v37 = v4;\n    v38 = v5;\n    v39 = v27;\n    int32_t v52; // 0x402d10\n    int64_t v53; // bp-344, 0x402d10\n    if ((*(int32_t *)(a2 + 144) & 0xf000) == 0xa000) {\n        // 0x403558\n        if (__fxstatat(1, *(int32_t *)(a1 + 44), v29, (struct stat *)&v53, 0) != 0) {\n            // 0x4037f0\n            if (*(char *)(a7 + 17) == 0) {\n                // 0x403998\n                function_405680(4, (int64_t *)v1);\n                error(0, *__errno_location(), dcgettext(NULL, \"cannot dereference %s\", 5));\n                int32_t v54 = *(int32_t *)a7; // 0x4039d3\n                v41 = 0;\n                v52 = v54;\n                if (v54 != 2) {\n                    goto lab_0x40380a;\n                } else {\n                    goto lab_0x402fa3;\n                }\n            } else {\n                int32_t v55 = *(int32_t *)a7; // 0x4037fd\n                v41 = 0;\n                v52 = v55;\n                if (v55 == 2) {\n                    goto lab_0x402fa3;\n                } else {\n                    goto lab_0x40380a;\n                }\n            }\n        } else {\n            // 0x40358a\n            v37 = (int64_t)*v2;\n            v38 = v28;\n            v39 = &v53;\n            goto lab_0x402dc0;\n        }\n    } else {\n        goto lab_0x402dc0;\n    }\n  lab_0x402fa3:\n    // 0x402fa3\n    if (*(char *)(a7 + 4) == 0) {\n        // 0x403230\n        fts_set(a1, a2, 4);\n    }\n    // 0x402fad\n    return v41 & 0xffffffff;\n  lab_0x4030a2:;\n    int64_t v56 = 3; // 0x4030a4\n    char * v57 = NULL; // 0x4030a4\n    int64_t v58 = 0; // 0x4030a4\n    int64_t v59 = 0; // 0x4030a4\n    v41 = v43;\n    if (v42 != 0) {\n        goto lab_0x402fa3;\n    } else {\n        goto lab_0x402eeb;\n    }\n  lab_0x403138:\n    // 0x403138\n    v8 = v7;\n    format = (int64_t)dcgettext(NULL, (char *)v9, 5);\n    goto lab_0x40314a;\n  lab_0x40314a:;\n    int64_t v60 = v8;\n    error(0, *(int32_t *)(a2 + 64), (char *)format);\n    int32_t v61 = *(int32_t *)a7; // 0x403153\n    v41 = v60;\n    v42 = v61;\n    v43 = v60;\n    if (v61 != 2) {\n        goto lab_0x4030a2;\n    } else {\n        goto lab_0x402fa3;\n    }\n  lab_0x402e28:;\n    int32_t v62 = v38; // 0x402e28\n    if (v62 == -1) {\n        if ((char)v45 == 0) {\n            goto lab_0x402e51;\n        } else {\n            int64_t v63 = *(int64_t *)(a7 + 8); // 0x403189\n            if (v63 == 0) {\n                goto lab_0x402e51;\n            } else {\n                // 0x403196\n                if (*(int64_t *)(v39 + 8) != *(int64_t *)v63) {\n                    goto lab_0x402e51;\n                } else {\n                    // 0x4031a3\n                    if (*(int64_t *)v39 != *(int64_t *)(v63 + 8)) {\n                        goto lab_0x402e51;\n                    } else {\n                        goto lab_0x4031b0;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x402e32\n        if ((char)v45 == 0) {\n            goto lab_0x402e48;\n        } else {\n            // 0x402e3b\n            if (*(int64_t *)(a7 + 8) != 0) {\n                // 0x403700\n                int64_t v64; // 0x402e3b\n                int64_t v65 = *(int64_t *)v64; // 0x403700\n                int64_t v66; // 0x402d10\n                int64_t v67 = *(int64_t *)(v66 + 8); // 0x403703\n                if (v67 != v65) {\n                    goto lab_0x402e48;\n                } else {\n                    int64_t v68 = *(int64_t *)(v64 + 8); // 0x40370d\n                    int64_t v69 = *(int64_t *)v66; // 0x403711\n                    if (v69 != v68) {\n                        goto lab_0x402e48;\n                    } else {\n                        goto lab_0x4031b0;\n                    }\n                }\n            } else {\n                goto lab_0x402e48;\n            }\n        }\n    }\n  lab_0x402eeb:;\n    int64_t v70 = v59;\n    int64_t v71 = v58;\n    char * v72 = v57;\n    int64_t v73 = v56;\n    int64_t v74 = *(int64_t *)(a7 + 32);\n    int64_t v75 = *(int64_t *)(a7 + 24);\n    int64_t v76 = function_402bd0(v75, v74); // 0x402ef1\n    int64_t v77 = v74 != 0 ? v71 : 0; // 0x402efe\n    int64_t v78 = 0x100000000 * v76 >> 32; // 0x402f04\n    char * v79; // 0x402d10\n    int64_t v80; // 0x402d10\n    int64_t v81; // 0x402d10\n    int64_t v82; // 0x402d10\n    if (v75 == 0) {\n        int64_t v83 = 0x100000000 * function_402bd0(0, v77) >> 32; // 0x403367\n        int32_t v84 = v73; // 0x403370\n        v81 = v83;\n        if (v84 == 3) {\n            goto lab_0x403330;\n        } else {\n            if (v84 != 4) {\n                if (v74 == 0) {\n                    // 0x4038d8\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"no change to ownership of %s\\n\", 5);\n                } else {\n                    // 0x4036be\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"changed group of %s from %s to %s\\n\", 5);\n                }\n            } else {\n                if (v74 == 0) {\n                    // 0x403698\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"ownership of %s retained\\n\", 5);\n                } else {\n                    // 0x40338c\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"group of %s retained as %s\\n\", 5);\n                }\n            }\n            goto lab_0x402f50;\n        }\n    } else {\n        int64_t v85 = 0x100000000 * function_402bd0(0x100000000 * (int64_t)v72 >> 32, v77) >> 32; // 0x402f1c\n        v81 = v85;\n        switch ((int32_t)v73) {\n            case 3: {\n                goto lab_0x403330;\n            }\n            case 4: {\n                // 0x4034f0\n                v82 = v78;\n                v80 = v85;\n                v79 = dcgettext(NULL, \"ownership of %s retained as %s\\n\", 5);\n                goto lab_0x402f50;\n            }\n            default: {\n                // 0x402f37\n                v82 = v78;\n                v80 = v85;\n                v79 = dcgettext(NULL, \"changed ownership of %s from %s to %s\\n\", 5);\n                goto lab_0x402f50;\n            }\n        }\n    }\n  lab_0x402e55:;\n    int32_t * v86 = (int32_t *)(a1 + 44); // 0x402e55\n    uint32_t v87 = *v86; // 0x402e55\n    int64_t v88 = v87; // 0x402e55\n    v36 = v88;\n    v33 = v32;\n    int64_t v89; // 0x402d10\n    int32_t v90; // 0x402d10\n    int32_t * v91; // 0x403252\n    if (v35 != 0) {\n        // 0x403248\n        v89 = v88;\n        if ((v28 & a5) == 0xffffffff) {\n            goto lab_0x402e90;\n        } else {\n            // 0x403252\n            v91 = (int32_t *)(v32 + 24);\n            int32_t v92 = *v91 & 0xf000; // 0x403256\n            v90 = 2304;\n            if (v92 == 0x8000) {\n                goto lab_0x403279;\n            } else {\n                // 0x403266\n                v89 = v88;\n                v90 = 0x10900;\n                if (v92 != 0x4000) {\n                    goto lab_0x402e90;\n                } else {\n                    goto lab_0x403279;\n                }\n            }\n        }\n    } else {\n        goto lab_0x402e61;\n    }\n  lab_0x402e51:\n    // 0x402e51\n    v35 = *v30;\n    v34 = v38;\n    v32 = v39;\n    goto lab_0x402e55;\n  lab_0x402e48:\n    if (*(int32_t *)(v39 + 32) != v62) {\n        goto lab_0x40372d;\n    } else {\n        goto lab_0x402e51;\n    }\n  lab_0x403330:;\n    int64_t v93 = v81;\n    if ((v93 & 0xffffffff) == 0) {\n        int64_t v94 = v74 != 0 ? (int64_t)\"failed to change group of %s to %s\\n\" : (int64_t)\"failed to change ownership of %s\\n\";\n        int64_t v95 = v75 == 0 ? v94 : (int64_t)\"failed to change ownership of %s to %s\\n\";\n        v82 = 0;\n        v80 = v78;\n        v79 = dcgettext(NULL, (char *)v95, 5);\n    } else {\n        if (v75 == 0) {\n            if (v74 == 0) {\n                // 0x403930\n                v82 = v78;\n                v80 = v93;\n                v79 = dcgettext(NULL, \"failed to change ownership of %s\\n\", 5);\n            } else {\n                // 0x4035b9\n                v82 = v78;\n                v80 = v93;\n                v79 = dcgettext(NULL, \"failed to change group of %s from %s to %s\\n\", 5);\n            }\n        } else {\n            // 0x40334a\n            v82 = v78;\n            v80 = v93;\n            v79 = dcgettext(NULL, \"failed to change ownership of %s from %s to %s\\n\", 5);\n        }\n    }\n    goto lab_0x402f50;\n  lab_0x402e61:;\n    int64_t v128 = v33; // 0x402e80\n    int64_t v104; // 0x402d10\n    int64_t v98; // 0x402d10\n    char * v96; // 0x402d10\n    int64_t v97; // 0x402d10\n    if ((int32_t)function_406a00(v36, (int32_t)v26, v25, (int32_t)group, 256) == 0) {\n        goto lab_0x402e99;\n    } else {\n        int32_t v137 = *__errno_location(); // 0x402e87\n        v104 = v33;\n        if (v137 == 95) {\n            int32_t v138 = *(int32_t *)a7; // 0x403748\n            v41 = 1;\n            if (v138 == 2 || v138 != 0) {\n                goto lab_0x402fa3;\n            } else {\n                int64_t v139 = function_402cd0(*(int32_t *)(v33 + 28)); // 0x403764\n                int64_t v140 = function_402c90((int64_t)*(int32_t *)(v33 + 32)); // 0x403772\n                function_405680(4, (int64_t *)v1);\n                __printf_chk(1, dcgettext(NULL, \"neither symbolic link %s nor referent has been changed\\n\", 5));\n                v96 = (char *)(v139 & 0xffffffff);\n                v97 = 0x100000000 * v140 >> 32;\n                v98 = 1;\n                goto lab_0x402f8f;\n            }\n        } else {\n            goto lab_0x4032c0;\n        }\n    }\n  lab_0x40372d:;\n    int32_t v141 = *(int32_t *)a7; // 0x40372d\n    int32_t v136 = v141; // 0x403737\n    int64_t v135 = 1; // 0x403737\n    v41 = 1;\n    if (v141 != 2) {\n        goto lab_0x402e0f;\n    } else {\n        goto lab_0x402fa3;\n    }\n  lab_0x403458:;\n    int64_t v119 = v49; // 0x403460\n    int64_t v120 = v48; // 0x403460\n    int32_t v121 = *(int32_t *)(v47 + 28); // 0x403460\n    int32_t v122 = *(int32_t *)(v47 + 32); // 0x403460\n    goto lab_0x402ecc;\n  lab_0x402e04:;\n    int32_t v142 = *(int32_t *)a7; // 0x402e04\n    v136 = v142;\n    v135 = v45;\n    v41 = v45;\n    if (v142 == 2) {\n        goto lab_0x402fa3;\n    } else {\n        goto lab_0x402e0f;\n    }\n  lab_0x40380a:\n    // 0x40380a\n    v41 = 0;\n    if (v52 != 0) {\n        goto lab_0x402fa3;\n    } else {\n        // 0x403812\n        v49 = 3;\n        v48 = 0;\n        v47 = &v53;\n        goto lab_0x403458;\n    }\n  lab_0x402f50:\n    // 0x402f50\n    function_405680(4, (int64_t *)v1);\n    __printf_chk(1, v79);\n    free((int64_t *)(0x100000000 * v80 >> 32));\n    free((int64_t *)(0x100000000 * v82 >> 32));\n    v96 = v72;\n    v97 = v71;\n    v98 = v70;\n    goto lab_0x402f8f;\n  lab_0x402e99:;\n    int32_t v129 = *(int32_t *)a7; // 0x402e99\n    v41 = 1;\n    int64_t v118; // 0x402d10\n    if (v129 == 2) {\n        goto lab_0x402fa3;\n    } else {\n        // 0x402ea4\n        v118 = v128;\n        if (owner == -1) {\n            goto lab_0x4033a0;\n        } else {\n            int32_t v134 = *(int32_t *)(v118 + 28); // 0x402eae\n            if (v134 == owner) {\n                goto lab_0x4033a0;\n            } else {\n                // 0x402ebb\n                v119 = 2;\n                v120 = 1;\n                v121 = v134;\n                v122 = *(int32_t *)(v118 + 32);\n                goto lab_0x402ecc;\n            }\n        }\n    }\n  lab_0x402e90:\n    // 0x402e90\n    v128 = v32;\n    v104 = v32;\n    if ((int32_t)function_406a00(v89, (int32_t)v26, v25, (int32_t)group, 0) != 0) {\n        goto lab_0x4032c0;\n    } else {\n        goto lab_0x402e99;\n    }\n  lab_0x402e0f:\n    // 0x402e0f\n    v41 = v135;\n    v49 = 4;\n    v48 = v135;\n    v47 = v39;\n    if (v136 != 0) {\n        goto lab_0x402fa3;\n    } else {\n        goto lab_0x403458;\n    }\n  lab_0x402ecc:\n    // 0x402ecc\n    v56 = v119;\n    v57 = (char *)(function_402cd0(v121) & 0xffffffff);\n    v58 = 0x100000000 * function_402c90((int64_t)v122) >> 32;\n    v59 = v120;\n    goto lab_0x402eeb;\n  lab_0x402f8f:\n    // 0x402f8f\n    free((int64_t *)v96);\n    free((int64_t *)v97);\n    v41 = v98;\n    goto lab_0x402fa3;\n  lab_0x4032c0:;\n    // 0x4032c0\n    int32_t v99; // 0x402d10\n    if (*(char *)(a7 + 17) == 0) {\n        // 0x403468\n        function_405680(4, (int64_t *)v1);\n        char * format2; // 0x402d10\n        if (owner == -1) {\n            // 0x403660\n            format2 = dcgettext(NULL, \"changing group of %s\", 5);\n        } else {\n            // 0x40348a\n            format2 = dcgettext(NULL, \"changing ownership of %s\", 5);\n        }\n        // 0x403499\n        error(0, *__errno_location(), format2);\n        int32_t v100 = *(int32_t *)a7; // 0x4034b1\n        v41 = 0;\n        v99 = v100;\n        if (v100 != 2) {\n            goto lab_0x4032da;\n        } else {\n            goto lab_0x402fa3;\n        }\n    } else {\n        int32_t v101 = *(int32_t *)a7; // 0x4032cd\n        v41 = 0;\n        v99 = v101;\n        if (v101 == 2) {\n            goto lab_0x402fa3;\n        } else {\n            goto lab_0x4032da;\n        }\n    }\n  lab_0x403279:;\n    int32_t v102 = __openat_2(v87, v29, v90); // 0x40328e\n    int32_t fd = v102; // 0x4032a1\n    if (v102 >= 0) {\n        goto lab_0x4033d0;\n    } else {\n        int32_t * v103 = __errno_location(); // 0x4032a7\n        v104 = v32;\n        if (*v103 == 13) {\n            // 0x403510\n            if ((*v91 & 0xf000) == 0x8000) {\n                int32_t v105 = __openat_2(v87, v29, v90 | 1); // 0x403845\n                fd = v105;\n                if (v105 >= 0) {\n                    goto lab_0x4033d0;\n                } else {\n                    // 0x403863\n                    v104 = v32;\n                    if (*(int32_t *)(0x100000000 * (int64_t)v103 >> 32) != 13) {\n                        goto lab_0x4032c0;\n                    } else {\n                        // 0x40352e\n                        v89 = (int64_t)*v86;\n                        goto lab_0x402e90;\n                    }\n                }\n            } else {\n                // 0x40352e\n                v89 = (int64_t)*v86;\n                goto lab_0x402e90;\n            }\n        } else {\n            goto lab_0x4032c0;\n        }\n    }\n  lab_0x4031b0:;\n    int64_t v106 = v10 ? -1 : 1; // 0x4031be\n    int64_t v107 = (int64_t)\"/\"; // 0x402d10\n    int64_t v108 = v1; // 0x402d10\n    int64_t v109 = 2; // 0x402d10\n    unsigned char v110 = *(char *)v108; // 0x4031be\n    char v111 = *(char *)v107; // 0x4031be\n    char v112 = v111; // 0x4031be\n    bool v113 = false; // 0x4031be\n    while (v110 == v111) {\n        int64_t v114 = v109 - 1; // 0x4031be\n        v107 += v106;\n        v108 += v106;\n        v109 = v114;\n        v112 = v110;\n        v113 = true;\n        if (v114 == 0) {\n            // break -> \n            break;\n        }\n        v110 = *(char *)v108;\n        v111 = *(char *)v107;\n        v112 = v111;\n        v113 = false;\n    }\n    unsigned char v115 = v112;\n    if ((v110 >= v115 && !v113) != v110 < v115) {\n        // 0x403944\n        function_4055a0(1, 4, (int64_t *)\"/\");\n        function_4055a0(0, 4, (int64_t *)v1);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n    } else {\n        // 0x4031cd\n        function_405680(4, (int64_t *)v1);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n    }\n    // 0x403200\n    error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n    // 0x402fad\n    return 0;\n  lab_0x4033a0:;\n    int32_t v116 = group; // 0x4033a4\n    if (v116 == -1) {\n        goto lab_0x403678;\n    } else {\n        int32_t v117 = *(int32_t *)(v118 + 32); // 0x4033ad\n        if (v117 == v116) {\n            goto lab_0x403678;\n        } else {\n            // 0x4033ba\n            v119 = 2;\n            v120 = 1;\n            v121 = *(int32_t *)(v118 + 28);\n            v122 = v117;\n            goto lab_0x402ecc;\n        }\n    }\n  lab_0x4033d0:;\n    // 0x4033d0\n    int64_t v123; // bp-200, 0x402d10\n    if (__fxstat(1, fd, (struct stat *)&v123) != 0) {\n        goto lab_0x403630;\n    } else {\n        // 0x4033fe\n        int64_t v124; // 0x402d10\n        if (*(int64_t *)(v32 + 8) == v124) {\n            // 0x403880\n            if (*(int64_t *)v32 != v123) {\n                goto lab_0x40341a;\n            } else {\n                int32_t v125 = a5; // 0x403891\n                int32_t v126; // 0x402d10\n                if (v125 == -1 || v126 == v125) {\n                    int32_t v127 = v34; // 0x403a37\n                    if (v127 != -1 == (v126 != v127)) {\n                        goto lab_0x4038a9;\n                    } else {\n                        // 0x403a4b\n                        if (fchown(fd, owner, (int32_t)group) != 0) {\n                            goto lab_0x403630;\n                        } else {\n                            // 0x403a69\n                            v128 = v32;\n                            v104 = v32;\n                            if (close(fd) != 0) {\n                                goto lab_0x4032c0;\n                            } else {\n                                goto lab_0x402e99;\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x4038a9;\n                }\n            }\n        } else {\n            goto lab_0x40341a;\n        }\n    }\n  lab_0x403678:\n    // 0x403678\n    v41 = 1;\n    v49 = 4;\n    v48 = 1;\n    v47 = v118;\n    if (v129 != 0) {\n        goto lab_0x402fa3;\n    } else {\n        goto lab_0x403458;\n    }\n  lab_0x4032da:\n    // 0x4032da\n    v41 = 0;\n    v49 = 3;\n    v48 = 0;\n    v47 = v104;\n    if (v99 == 0) {\n        goto lab_0x403458;\n    } else {\n        goto lab_0x402fa3;\n    }\n  lab_0x403630:;\n    int32_t * v130 = __errno_location(); // 0x403634\n    close(fd);\n    v104 = v32;\n    goto lab_0x4032c0;\n  lab_0x40341a:;\n    int32_t * v131 = __errno_location(); // 0x40341e\n    close(fd);\n    int32_t v132 = *(int32_t *)a7; // 0x403434\n    v41 = 0;\n    v49 = 3;\n    v48 = 0;\n    v47 = v32;\n    if (v132 == 2 || v132 != 0) {\n        goto lab_0x402fa3;\n    } else {\n        goto lab_0x403458;\n    }\n  lab_0x4038a9:;\n    int32_t * v133 = __errno_location(); // 0x4038ad\n    close(fd);\n    v128 = v32;\n    goto lab_0x402e99;\n}\n"
        },
        {
            "funcName": "function_403a80",
            "funcStartAddr": "403a80",
            "funcEndAddr": "403b9e",
            "decompiledFuncCode": "int64_t function_403a80(int64_t a1, int64_t a2, int32_t a3, uint32_t a4, uint32_t a5, uint32_t a6, int64_t * a7) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a2; // 0x403aa9\n    if ((a6 & a5) == -1) {\n        // 0x403b30\n        v2 = a2;\n        if (*(char *)(v1 + 16) == 0) {\n            // 0x403b3c\n            v2 = (*(int32_t *)a7 == 2 ? a2 | 8 : a2) & 0xffffffff;\n        }\n    }\n    int64_t v3 = function_406550(a1, v2); // 0x403ab6\n    int64_t v4 = fts_read(v3); // 0x403ae5\n    int64_t v5 = 1; // 0x403aed\n    if (v4 != 0) {\n        // 0x403ac0\n        int64_t v6; // bp-72, 0x403a80\n        int64_t v7 = &v6; // 0x403a99\n        int64_t v8 = 1;\n        *(int64_t *)(v7 - 16) = v1;\n        int32_t v9 = *(int32_t *)(v7 + 12); // 0x403acf\n        v8 &= function_402d10(v3, v4, v9, (int64_t)a4, (int64_t)a5, (int64_t)a6, (int64_t)&g57);\n        int64_t v10 = fts_read(v3); // 0x403ae5\n        v5 = v8;\n        while (v10 != 0) {\n            // 0x403ac0\n            *(int64_t *)(v7 - 16) = v1;\n            v9 = *(int32_t *)(v7 + 12);\n            v8 &= function_402d10(v3, v10, v9, (int64_t)a4, (int64_t)a5, (int64_t)a6, (int64_t)&g57);\n            v10 = fts_read(v3);\n            v5 = v8;\n        }\n    }\n    int32_t * err_num = __errno_location(); // 0x403aef\n    int64_t v11 = v5; // 0x403afb\n    if (*err_num != 0) {\n        // 0x403afd\n        v11 = 0;\n        if (*(char *)(v1 + 17) == 0) {\n            // 0x403b78\n            error(0, *err_num, dcgettext(NULL, \"fts_read failed\", 5));\n            v11 = 0;\n        }\n    }\n    int64_t v12 = v11; // 0x403b13\n    if ((int32_t)fts_close(v3) != 0) {\n        // 0x403b50\n        error(0, *err_num, dcgettext(NULL, \"fts_close failed\", 5));\n        v12 = 0;\n    }\n    // 0x403b15\n    return v12 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_403ba0",
            "funcStartAddr": "403ba0",
            "funcEndAddr": "403ba8",
            "decompiledFuncCode": "int64_t function_403ba0(int64_t a1) {\n    // 0x403ba0\n    g39 = a1;\n    int64_t result; // 0x403ba0\n    return result;\n}\n"
        },
        {
            "funcName": "function_403bb0",
            "funcStartAddr": "403bb0",
            "funcEndAddr": "403bb8",
            "decompiledFuncCode": "int64_t function_403bb0(int64_t a1) {\n    // 0x403bb0\n    g38 = a1;\n    int64_t result; // 0x403bb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_403bc0",
            "funcStartAddr": "403bc0",
            "funcEndAddr": "403c5e",
            "decompiledFuncCode": "int64_t function_403bc0(void) {\n    // 0x403bc0\n    int32_t * err_num; // 0x403bd6\n    if ((int32_t)function_409ec0((int64_t)g31) == 0) {\n        goto lab_0x403bec;\n    } else {\n        // 0x403bd6\n        err_num = __errno_location();\n        if (g38 == 0) {\n            goto lab_0x403c03;\n        } else {\n            // 0x403be7\n            if (*err_num != 32) {\n                goto lab_0x403c03;\n            } else {\n                goto lab_0x403bec;\n            }\n        }\n    }\n  lab_0x403bec:;\n    int64_t result = function_409ec0((int64_t)g33); // 0x403bf3\n    if ((int32_t)result == 0) {\n        // 0x403bfc\n        return result;\n    }\n    // 0x403c3e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x403c03:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x403c0f\n    if (g39 == 0) {\n        // 0x403c49\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403c23\n        error(0, *err_num, \"%s: %s\", (char *)function_405720((int64_t)g39), v1);\n    }\n    // 0x403c3e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403c60",
            "funcStartAddr": "403c60",
            "funcEndAddr": "403ca8",
            "decompiledFuncCode": "int64_t function_403c60(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x403c60\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403c72\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x403c7b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x403ca4\n    return result;\n}\n"
        },
        {
            "funcName": "function_403cb0",
            "funcStartAddr": "403cb0",
            "funcEndAddr": "403d49",
            "decompiledFuncCode": "int64_t function_403cb0(int64_t str) {\n    // 0x403cb0\n    if (str == 0) {\n        // 0x403d29\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x403cbe\n    int64_t result = (int64_t)found_char_pos; // 0x403cbe\n    if (found_char_pos == NULL) {\n        // 0x403d19\n        g40 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403cc8\n    if (v1 - str < 7) {\n        // 0x403d19\n        g40 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x403cd8\n    bool v2; // 0x403cb0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403cb0\n    int64_t v5 = result - 6; // 0x403cb0\n    int64_t v6 = 7; // 0x403ce6\n    unsigned char v7 = *(char *)v5; // 0x403ce6\n    char v8 = *(char *)v4; // 0x403ce6\n    char v9 = v8; // 0x403ce6\n    bool v10 = false; // 0x403ce6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403cf0\n    int64_t v13 = v1; // 0x403cf0\n    int64_t v14 = 3; // 0x403cf0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403d19\n        g40 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403d02\n    char v16 = *(char *)v12; // 0x403d02\n    char v17 = v16; // 0x403d02\n    bool v18 = false; // 0x403d02\n    while (v15 == v16) {\n        // 0x403cf2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x403d0c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x403d0e\n        v20 = result + 4;\n        g30 = v20;\n    }\n    // 0x403d19\n    g40 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d50",
            "funcStartAddr": "403d50",
            "funcEndAddr": "403e42",
            "decompiledFuncCode": "int64_t function_403d50(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403d64\n    int64_t result = (int64_t)v1; // 0x403d64\n    if (result != a1) {\n        // 0x403d71\n        return result;\n    }\n    int64_t v2 = function_40b370(); // 0x403d80\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403e36\n    if (v3 == 85) {\n        // 0x403d90\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403e28\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x403dbe\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x403dcb\n        // 0x403d71\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403e28\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x403e0d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x403e1a\n    // 0x403d71\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403e50",
            "funcStartAddr": "403e50",
            "funcEndAddr": "403ea7",
            "decompiledFuncCode": "int64_t function_403e50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403e50\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403e98\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403ea7",
            "funcStartAddr": "403ea7",
            "funcEndAddr": "405071",
            "decompiledFuncCode": "int64_t function_403ea7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403ef1\n    int64_t v3 = 0; // 0x403ef1\n    int64_t v4; // 0x403ea7\n    int64_t v5; // 0x403ea7\n    int64_t v6; // 0x403ea7\n    int64_t v7; // 0x403ea7\n    int64_t v8; // 0x403ea7\n    int64_t v9; // 0x403ea7\n    int64_t v10; // 0x403ea7\n    int64_t v11; // 0x403ea7\n    int64_t v12; // 0x403ea7\n    int64_t v13; // 0x403ea7\n    int64_t v14; // 0x403ea7\n    int64_t v15; // 0x403ea7\n    int64_t v16; // 0x403ea7\n    int64_t v17; // 0x403ea7\n    int64_t v18; // 0x403ea7\n    int64_t result; // 0x403ea7\n    int64_t v19; // 0x403ea7\n    int32_t wc; // bp+132, 0x403ea7\n    int64_t ps; // bp+136, 0x403ea7\n    char v20; // 0x404460\n    int64_t v21; // 0x404460\n    int64_t v22; // 0x404808\n    int64_t v23; // 0x403ea7\n    int64_t v24; // 0x404827\n    int32_t v25; // 0x403ea7\n    while (true) {\n      lab_0x403ef8_2:\n        // 0x403ef8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403ea7\n        int64_t v27; // 0x403f2c\n        while (true) {\n          lab_0x403ef8:\n            // 0x403ef8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403f03\n            if (v15 == -1) {\n                // 0x403f05\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403f13\n            if (v28) {\n                // break (via goto) -> 0x404678\n                goto lab_0x404678;\n            }\n            // 0x403f1c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g56 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40450b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404051;\n                    }\n                    // 0x40492d\n                    v26 = v5 + 1;\n                    goto lab_0x403ef8;\n                }\n                case 7: {\n                    goto lab_0x404051;\n                }\n                case 8: {\n                    goto lab_0x404051;\n                }\n                case 9: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x404051;\n                }\n                case 12: {\n                    goto lab_0x404051;\n                }\n                case 13: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40401d;\n                }\n                case 36: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x404051;\n                }\n                case 38: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x404051;\n                }\n                case 44: {\n                    goto lab_0x404051;\n                }\n                case 45: {\n                    goto lab_0x404051;\n                }\n                case 46: {\n                    goto lab_0x404051;\n                }\n                case 47: {\n                    goto lab_0x404051;\n                }\n                case 48: {\n                    goto lab_0x404051;\n                }\n                case 49: {\n                    goto lab_0x404051;\n                }\n                case 50: {\n                    goto lab_0x404051;\n                }\n                case 51: {\n                    goto lab_0x404051;\n                }\n                case 52: {\n                    goto lab_0x404051;\n                }\n                case 53: {\n                    goto lab_0x404051;\n                }\n                case 54: {\n                    goto lab_0x404051;\n                }\n                case 55: {\n                    goto lab_0x404051;\n                }\n                case 56: {\n                    goto lab_0x404051;\n                }\n                case 57: {\n                    goto lab_0x404051;\n                }\n                case 58: {\n                    goto lab_0x404051;\n                }\n                case 59: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x404051;\n                }\n                case 66: {\n                    goto lab_0x404051;\n                }\n                case 67: {\n                    goto lab_0x404051;\n                }\n                case 68: {\n                    goto lab_0x404051;\n                }\n                case 69: {\n                    goto lab_0x404051;\n                }\n                case 70: {\n                    goto lab_0x404051;\n                }\n                case 71: {\n                    goto lab_0x404051;\n                }\n                case 72: {\n                    goto lab_0x404051;\n                }\n                case 73: {\n                    goto lab_0x404051;\n                }\n                case 74: {\n                    goto lab_0x404051;\n                }\n                case 75: {\n                    goto lab_0x404051;\n                }\n                case 76: {\n                    goto lab_0x404051;\n                }\n                case 77: {\n                    goto lab_0x404051;\n                }\n                case 78: {\n                    goto lab_0x404051;\n                }\n                case 79: {\n                    goto lab_0x404051;\n                }\n                case 80: {\n                    goto lab_0x404051;\n                }\n                case 81: {\n                    goto lab_0x404051;\n                }\n                case 82: {\n                    goto lab_0x404051;\n                }\n                case 83: {\n                    goto lab_0x404051;\n                }\n                case 84: {\n                    goto lab_0x404051;\n                }\n                case 85: {\n                    goto lab_0x404051;\n                }\n                case 86: {\n                    goto lab_0x404051;\n                }\n                case 87: {\n                    goto lab_0x404051;\n                }\n                case 88: {\n                    goto lab_0x404051;\n                }\n                case 89: {\n                    goto lab_0x404051;\n                }\n                case 90: {\n                    goto lab_0x404051;\n                }\n                case 91: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x404051;\n                }\n                case 94: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x404051;\n                }\n                case 96: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x404051;\n                }\n                case 98: {\n                    goto lab_0x404051;\n                }\n                case 99: {\n                    goto lab_0x404051;\n                }\n                case 100: {\n                    goto lab_0x404051;\n                }\n                case 101: {\n                    goto lab_0x404051;\n                }\n                case 102: {\n                    goto lab_0x404051;\n                }\n                case 103: {\n                    goto lab_0x404051;\n                }\n                case 104: {\n                    goto lab_0x404051;\n                }\n                case 105: {\n                    goto lab_0x404051;\n                }\n                case 106: {\n                    goto lab_0x404051;\n                }\n                case 107: {\n                    goto lab_0x404051;\n                }\n                case 108: {\n                    goto lab_0x404051;\n                }\n                case 109: {\n                    goto lab_0x404051;\n                }\n                case 110: {\n                    goto lab_0x404051;\n                }\n                case 111: {\n                    goto lab_0x404051;\n                }\n                case 112: {\n                    goto lab_0x404051;\n                }\n                case 113: {\n                    goto lab_0x404051;\n                }\n                case 114: {\n                    goto lab_0x404051;\n                }\n                case 115: {\n                    goto lab_0x404051;\n                }\n                case 116: {\n                    goto lab_0x404051;\n                }\n                case 117: {\n                    goto lab_0x404051;\n                }\n                case 118: {\n                    goto lab_0x404051;\n                }\n                case 119: {\n                    goto lab_0x404051;\n                }\n                case 120: {\n                    goto lab_0x404051;\n                }\n                case 121: {\n                    goto lab_0x404051;\n                }\n                case 122: {\n                    goto lab_0x404051;\n                }\n                case 123: {\n                    goto lab_0x403ff5;\n                }\n                case 124: {\n                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403ff5;\n                }\n                case 126: {\n                    goto lab_0x40401d;\n                }\n                default: {\n                    goto lab_0x4043f5;\n                }\n            }\n        }\n      lab_0x4043f5:\n        if (v23 != 1) {\n            // 0x404760\n            ps = 0;\n            int64_t len = v15; // 0x404770\n            if (v15 == -1) {\n                // 0x404772\n                len = strlen((char *)str);\n            }\n            // 0x40479e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4047ff:\n                // 0x4047ff\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404804\n                int64_t v30 = v29 + str;\n                v24 = function_409d10(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x404d7a_2;\n                    }\n                    case -1: {\n                        goto lab_0x404d7a_2;\n                    }\n                    case -2: {\n                        // 0x404e5d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404e97\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x404e9a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404ea7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404ea0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x404d7a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x404d7a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4047d0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40487c\n                        char v34 = *(char *)v33; // 0x40488d\n                        unsigned char v35; // 0x403ea7\n                        if (v34 < 125) {\n                            // 0x404898\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4048af\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404880\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40488d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404898\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4048af\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404880\n                            v33++;\n                        }\n                        goto lab_0x4047d0;\n                    }\n                }\n            }\n            goto lab_0x404d7a_2;\n        } else {\n            // 0x404444\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404051;\n        }\n    }\n  lab_0x404678:\n    // 0x404678\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x404f7a\n        if (v8 > result) {\n            // 0x404f83\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4042a7\n        return result;\n    }\n    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404051:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x404060\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40426a_2;\n        }\n    }\n    int64_t v39 = result; // 0x404161\n    char v40 = v20; // 0x404161\n    int64_t v41 = v38; // 0x404161\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x404161\n    int64_t v43 = v36; // 0x404161\n    goto lab_0x4040dd;\n  lab_0x40426a_2:\n    // 0x4042a7\n    return function_403e50(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404d7a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x404051;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40494e\n        int64_t v50 = v5 + 1; // 0x404a31\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404a38\n        char v52 = v20; // 0x404a38\n        int64_t v53 = result; // 0x404a38\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404a01\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404a05\n            int64_t v56 = v54 + 1; // 0x404a0a\n            int64_t v57 = v51 + 1; // 0x404a31\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4049fc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404a01\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404a05\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4040dd;\n    }\n  lab_0x4047d0:\n    // 0x4047d0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4047ef\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4047f2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x404d7a\n        goto lab_0x404d7a_2;\n    }\n    goto lab_0x4047ff;\n  lab_0x40401d:\n    // 0x40401d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40426a_2;\n    }\n    goto lab_0x404051;\n  lab_0x403ff5:;\n    bool v60 = v15 == 1; // 0x404000\n    if (v15 == -1) {\n        // 0x404002\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40400e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x404051;\n    } else {\n        goto lab_0x40401d;\n    }\n  lab_0x4040dd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4040e2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4040e6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403ef8_2;\n}\n"
        },
        {
            "funcName": "function_405080",
            "funcStartAddr": "405080",
            "funcEndAddr": "40521e",
            "decompiledFuncCode": "int64_t function_405080(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405082\n    int32_t * v3 = __errno_location(); // 0x40509c\n    int32_t v4 = v2; // 0x4050b1\n    if (v4 < 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v5 = (int64_t)g22; // 0x4050a1\n    int32_t v6 = *v3; // 0x4050ab\n    int64_t v7 = v5; // 0x4050c1\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if (v4 == 0x7fffffff) {\n            // 0x405219\n            function_406510(a1);\n            // UNREACHABLE\n        }\n        int64_t v8 = v2 + 1; // 0x4050d0\n        int64_t v9 = 0x100000000 * v8 >> 28; // 0x4050d7\n        int64_t v10; // 0x405080\n        if (g22 == &g23) {\n            int64_t v11 = function_406320(0, v9); // 0x4051fa\n            int128_t v12 = __asm_movdqa(*(int128_t *)&g23); // 0x4051ff\n            *(int64_t *)&g22 = v11;\n            __asm_movups(*(int128_t *)v11, v12);\n            v10 = v11;\n        } else {\n            int64_t v13 = function_406320(v5, v9); // 0x4050eb\n            *(int64_t *)&g22 = v13;\n            v10 = v13;\n        }\n        // 0x4050fa\n        v7 = v10;\n        int32_t v14 = *(int32_t *)&g25; // 0x4050fa\n        int32_t v15 = v8; // 0x405101\n        memset((int64_t *)(16 * (int64_t)v14 + v7), 0, 16 * (v15 - v14));\n        *(int32_t *)&g25 = v15;\n    }\n    int64_t v16 = v7 + (v1 >> 28); // 0x405131\n    int32_t v17 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40513b\n    int64_t * v18 = (int64_t *)v16; // 0x40513e\n    uint64_t v19 = *v18; // 0x40513e\n    int64_t * v20 = (int64_t *)(v16 + 8); // 0x405141\n    int64_t result = *v20; // 0x405141\n    int64_t v21; // 0x405080\n    uint64_t v22 = function_403e50(result, v19, a2, a3, v21 & 0xffffffff, v17); // 0x405164\n    if (v19 > v22) {\n        // 0x4051db\n        *v3 = v6;\n        return result;\n    }\n    int64_t v23 = v22 + 1; // 0x405177\n    *v18 = v23;\n    if (result != (int64_t)&g41) {\n        // 0x405187\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4062c0(v23); // 0x4051a1\n    *v20 = result2;\n    int64_t v24; // 0x405080\n    function_403e50(result2, v23, a2, a3, (int64_t)*(int32_t *)&v24, v17);\n    // 0x4051db\n    *v3 = v6;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405220",
            "funcStartAddr": "405220",
            "funcEndAddr": "405254",
            "decompiledFuncCode": "int64_t function_405220(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405227\n    int64_t result = function_4064c0(a1 == 0 ? (int64_t)&g42 : a1, 56); // 0x405246\n    return result;\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "40526f",
            "decompiledFuncCode": "int64_t function_405260(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g42 : a1); // 0x40526c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405270",
            "funcStartAddr": "405270",
            "funcEndAddr": "40527f",
            "decompiledFuncCode": "int64_t function_405270(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 : a1; // 0x405278\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g42;\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "4052b3",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 + 8 : a1 + 8; // 0x405299\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40529e\n    uint32_t v3 = *v2; // 0x40529e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4052a2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "4052d3",
            "decompiledFuncCode": "int64_t function_4052c0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g42 + 4 : a1 + 4); // 0x4052cc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4052e0",
            "funcStartAddr": "4052e0",
            "funcEndAddr": "40530b",
            "decompiledFuncCode": "int64_t function_4052e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 : a1; // 0x4052e8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x405305\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4052fc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g42;\n}\n"
        },
        {
            "funcName": "function_405310",
            "funcStartAddr": "405310",
            "funcEndAddr": "405382",
            "decompiledFuncCode": "int64_t function_405310(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g42 : a5; // 0x405332\n    int32_t * v2 = __errno_location(); // 0x40533b\n    uint32_t v3 = *(int32_t *)v1; // 0x40535b\n    int64_t result = function_403e50(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40536a\n    return result;\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "405471",
            "decompiledFuncCode": "int64_t function_405390(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g42 : a4; // 0x4053b2\n    int32_t * v2 = __errno_location(); // 0x4053b8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4053d7\n    int32_t * v4 = (int32_t *)v1; // 0x4053da\n    int64_t v5 = function_403e50(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4053f5\n    int64_t v6 = v5 + 1; // 0x4053fa\n    int64_t result = function_4062c0(v6); // 0x40540f\n    function_403e50(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x405454\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40545d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "40548a",
            "decompiledFuncCode": "int64_t function_405480(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405480\n    return function_405390(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405490",
            "funcStartAddr": "405490",
            "funcEndAddr": "405525",
            "decompiledFuncCode": "int64_t function_405490(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x405490\n    int64_t v2 = v1; // 0x405490\n    int64_t v3 = v2; // 0x4054a4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x4054c3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g57;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4054c0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g57;\n        }\n    }\n    int64_t v6 = v3; // 0x4054dd\n    if (g23 != 0x6123c0) {\n        // 0x4054df\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g41;\n        v6 = &g57;\n    }\n    int64_t result = v6; // 0x405501\n    if (g22 != &g23) {\n        // 0x405503\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g57;\n    }\n    // 0x405516\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "405541",
            "decompiledFuncCode": "int64_t function_405530(void) {\n    // 0x405530\n    int64_t v1; // 0x405530\n    return function_405080(v1, v1, -1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_405550",
            "funcStartAddr": "405550",
            "funcEndAddr": "40555a",
            "decompiledFuncCode": "int64_t function_405550(void) {\n    // 0x405550\n    int64_t v1; // 0x405550\n    return function_405080(v1, v1, v1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_405560",
            "funcStartAddr": "405560",
            "funcEndAddr": "405576",
            "decompiledFuncCode": "int64_t function_405560(int64_t a1) {\n    // 0x405560\n    return function_405080(0, a1, -1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "405592",
            "decompiledFuncCode": "int64_t function_405580(int64_t a1, int64_t a2) {\n    // 0x405580\n    return function_405080(0, a1, a2, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "405608",
            "decompiledFuncCode": "int64_t function_4055a0(int64_t a1, int64_t a2, int64_t * a3) {\n    if ((int32_t)a2 == 10) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4055b0\n    return function_405080(a1, (int64_t)a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405610",
            "funcStartAddr": "405610",
            "funcEndAddr": "405674",
            "decompiledFuncCode": "int64_t function_405610(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405620\n    return function_405080((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405680",
            "funcStartAddr": "405680",
            "funcEndAddr": "40568c",
            "decompiledFuncCode": "int64_t function_405680(int64_t a1, int64_t * a2) {\n    // 0x405680\n    return function_4055a0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "40569f",
            "decompiledFuncCode": "int64_t function_405690(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405690\n    return function_405610(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4056a0",
            "funcStartAddr": "4056a0",
            "funcEndAddr": "405710",
            "decompiledFuncCode": "int64_t function_4056a0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g42); // 0x4056ad\n    int128_t v2 = __asm_movdqa(g43); // 0x4056b5\n    int128_t v3 = __asm_movdqa(g44); // 0x4056bd\n    int64_t v4 = __asm_movaps_6(v1); // bp-72, 0x4056d2\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4056e8\n    uint32_t v6 = *v5; // 0x4056e8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4056ed\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405080(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405710",
            "funcStartAddr": "405710",
            "funcEndAddr": "40571d",
            "decompiledFuncCode": "int64_t function_405710(int64_t a1, int64_t a2) {\n    // 0x405710\n    return function_4056a0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405720",
            "funcStartAddr": "405720",
            "funcEndAddr": "405731",
            "decompiledFuncCode": "int64_t function_405720(int64_t a1) {\n    // 0x405720\n    return function_4056a0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "40574a",
            "decompiledFuncCode": "int64_t function_405740(void) {\n    // 0x405740\n    int64_t v1; // 0x405740\n    return function_4056a0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "4057be",
            "decompiledFuncCode": "int64_t function_405750(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40576a\n    return function_405080((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4057c0",
            "funcStartAddr": "4057c0",
            "funcEndAddr": "40582c",
            "decompiledFuncCode": "int64_t function_4057c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g42); // 0x4057c7\n    int128_t v2 = __asm_movdqa(g43); // 0x4057cf\n    int128_t v3 = __asm_movdqa(g44); // 0x4057d7\n    __asm_movaps_6(v1);\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int64_t v4 = 10; // bp-72, 0x4057f9\n    if (a2 == 0 || a3 == 0) {\n        // 0x405827\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40580a\n    return function_405080(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "405839",
            "decompiledFuncCode": "int64_t function_405830(void) {\n    // 0x405830\n    int64_t v1; // 0x405830\n    return function_4057c0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405840",
            "funcStartAddr": "405840",
            "funcEndAddr": "405857",
            "decompiledFuncCode": "int64_t function_405840(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405840\n    return function_4057c0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405860",
            "funcStartAddr": "405860",
            "funcEndAddr": "405873",
            "decompiledFuncCode": "int64_t function_405860(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405860\n    return function_4057c0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405880",
            "funcStartAddr": "405880",
            "funcEndAddr": "40588a",
            "decompiledFuncCode": "int64_t function_405880(void) {\n    // 0x405880\n    int64_t v1; // 0x405880\n    return function_405080(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_405890",
            "funcStartAddr": "405890",
            "funcEndAddr": "4058a2",
            "decompiledFuncCode": "int64_t function_405890(int64_t a1, int64_t a2) {\n    // 0x405890\n    return function_405080(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_4058b0",
            "funcStartAddr": "4058b0",
            "funcEndAddr": "4058c1",
            "decompiledFuncCode": "int64_t function_4058b0(void) {\n    // 0x4058b0\n    int64_t v1; // 0x4058b0\n    return function_405080(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "4058e6",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t a1) {\n    // 0x4058d0\n    return function_405080(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "40593b",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t * a1) {\n    // 0x4058f0\n    int64_t v1; // bp-152, 0x4058f0\n    if (__lxstat(1, \"/\", (struct stat *)&v1) != 0) {\n        // 0x405930\n        return 0;\n    }\n    int64_t result = (int64_t)a1;\n    *(int64_t *)(result + 8) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405c4d",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1;\n    if (a5 != 0) {\n        // 0x405978\n        *(int64_t *)a5 = 0;\n    }\n    if (a6 != 0) {\n        // 0x405985\n        *(int64_t *)a6 = 0;\n    }\n    int32_t v2 = a3;\n    int64_t v3; // 0x405940\n    int64_t v4 = a4 == 0 ? 0xffffffff : v3 & 0xffffffff;\n    char * name; // 0x405940\n    int64_t v5; // 0x405940\n    int64_t v6; // 0x405940\n    int64_t v7; // 0x405940\n    int64_t v8; // 0x405940\n    int64_t v9; // 0x405940\n    int64_t v10; // 0x405940\n    int64_t v11; // 0x405940\n    int64_t v12; // 0x405940\n    int64_t v13; // 0x405940\n    int64_t v14; // 0x405940\n    int32_t v15; // 0x405940\n    if (a2 == 0) {\n        // 0x405b18\n        v15 = v2;\n        v11 = 0;\n        v8 = 0;\n        v10 = v4;\n        if (*(char *)&v1 == 0) {\n            goto lab_0x4059ef;\n        } else {\n            // 0x405b26\n            v13 = function_4064f0(v1);\n            goto lab_0x405b38;\n        }\n    } else {\n        int64_t v16 = a2 - v1; // 0x405999\n        if (v16 != 0) {\n            int64_t v17 = function_4064c0(v1, v16 + 1); // 0x405a49\n            *(char *)(v17 + v16) = 0;\n            int64_t v18 = a2 + 1; // 0x405a5b\n            v13 = v17;\n            if (*(char *)v18 == 0) {\n                goto lab_0x405b38;\n            } else {\n                // 0x405a66\n                v7 = v18;\n                if (v17 == 0) {\n                    goto lab_0x4059b1;\n                } else {\n                    int64_t v19 = v18 == 0; // 0x405a76\n                    char * v20 = (char *)v17;\n                    name = v20;\n                    v5 = v19;\n                    v12 = v17;\n                    v9 = v18;\n                    v6 = v19;\n                    v14 = v17;\n                    if (*v20 == 43) {\n                        goto lab_0x405b56;\n                    } else {\n                        goto lab_0x405a8a;\n                    }\n                }\n            }\n        } else {\n            int64_t v21 = a2 + 1; // 0x4059a2\n            v7 = v21;\n            v15 = v2;\n            v11 = 0;\n            v8 = 0;\n            v10 = v4;\n            if (*(char *)v21 == 0) {\n                goto lab_0x4059ef;\n            } else {\n                goto lab_0x4059b1;\n            }\n        }\n    }\n  lab_0x4059ef:\n    // 0x4059ef\n    *(int32_t *)a3 = v15;\n    if (a4 != 0) {\n        // 0x4059ff\n        *(int32_t *)a4 = (int32_t)v10;\n    }\n    int64_t v22 = v11; // 0x405a06\n    if (a5 != 0) {\n        // 0x405a08\n        *(int64_t *)a5 = v11;\n        v22 = 0;\n    }\n    int64_t v23 = v8; // 0x405a11\n    if (a6 != 0) {\n        // 0x405a13\n        *(int64_t *)a6 = v8;\n        v23 = 0;\n    }\n    // 0x405a1a\n    free((int64_t *)v22);\n    free((int64_t *)v23);\n    return (int32_t)&g57 ^ (int32_t)&g57;\n  lab_0x405b38:\n    // 0x405b38\n    v15 = v2;\n    v11 = 0;\n    v8 = 0;\n    v10 = v4;\n    if (v13 == 0) {\n        goto lab_0x4059ef;\n    } else {\n        int64_t v24 = a2 != 0; // 0x405b4b\n        char * v25 = (char *)v13;\n        name = v25;\n        v5 = v24;\n        v12 = v13;\n        v9 = 0;\n        v6 = v24;\n        v14 = v13;\n        if (*v25 != 43) {\n            goto lab_0x405a8a;\n        } else {\n            goto lab_0x405b56;\n        }\n    }\n  lab_0x4059b1:\n    // 0x4059b1\n    v15 = v2;\n    v11 = 0;\n    v8 = 0;\n    v10 = v4;\n    if (v7 == 0) {\n        goto lab_0x4059ef;\n    } else {\n        goto lab_0x4059c0;\n    }\n  lab_0x4059c0:;\n    int64_t v26 = 0;\n    char * v27 = (char *)v7;\n    char * name2 = v27; // 0x4059c4\n    int32_t v28 = v2; // 0x4059c4\n    int64_t v29 = v26; // 0x4059c4\n    int64_t v30 = v7; // 0x4059c4\n    int32_t v31 = v2; // 0x4059c4\n    int64_t v32 = v26; // 0x4059c4\n    int64_t v33 = v7; // 0x4059c4\n    if (*v27 == 43) {\n        goto lab_0x405acb;\n    } else {\n        goto lab_0x4059ca;\n    }\n  lab_0x405a8a:;\n    struct passwd * v34 = getpwnam(name); // 0x405a91\n    v6 = v5;\n    v14 = v12;\n    int32_t v35; // bp-88, 0x405940\n    if (v34 == NULL) {\n        goto lab_0x405b56;\n    } else {\n        int64_t v36 = (int64_t)v34; // 0x405a91\n        int32_t v37 = *(int32_t *)(v36 + 16); // 0x405aa4\n        if (v5 != 0) {\n            uint32_t gid = *(int32_t *)(v36 + 20); // 0x405ba8\n            int64_t v38 = gid; // 0x405ba8\n            struct group * v39 = getgrgid(gid); // 0x405baf\n            int64_t v40; // 0x405940\n            if (v39 == NULL) {\n                // 0x405c38\n                v40 = function_403c60(v38, (int64_t *)&v35);\n            } else {\n                // 0x405bb9\n                v40 = *(int64_t *)v39;\n            }\n            // 0x405bbc\n            v1 = v40;\n            int64_t v41 = function_4064f0(v40); // 0x405bbc\n            endgrent();\n            endpwent();\n            v15 = v37;\n            v11 = v12;\n            v8 = v41;\n            v10 = v38;\n            goto lab_0x4059ef;\n        } else {\n            // 0x405ab3\n            endpwent();\n            v15 = v37;\n            v11 = v12;\n            v8 = 0;\n            v10 = v4;\n            if (v9 == 0) {\n                goto lab_0x4059ef;\n            } else {\n                char * v42 = (char *)v9;\n                name2 = v42;\n                v28 = v37;\n                v29 = v12;\n                v30 = v9;\n                v31 = v37;\n                v32 = v12;\n                v33 = v9;\n                if (*v42 != 43) {\n                    goto lab_0x4059ca;\n                } else {\n                    goto lab_0x405acb;\n                }\n            }\n        }\n    }\n  lab_0x405b56:;\n    // 0x405b56\n    int64_t v43; // 0x405940\n    int64_t * v44; // 0x405940\n    int64_t v45; // 0x405940\n    if ((char)v6 == 0) {\n        int64_t v46 = function_4065d0(v14, 0, 10, (int64_t *)&v35, (int64_t *)&g10, a6); // 0x405bed\n        if ((int32_t)v46 != 0) {\n            goto lab_0x405c20;\n        } else {\n            // 0x405bf6\n            if (v35 > -1) {\n                // 0x405c09\n                int64_t v47; // 0x405940\n                int64_t v48 = v47;\n                endpwent();\n                int32_t v49; // 0x405bf6\n                v15 = v49;\n                int64_t v50; // 0x405940\n                v11 = v50;\n                v8 = 0;\n                v10 = v4;\n                if (v48 == 0) {\n                    goto lab_0x4059ef;\n                } else {\n                    goto lab_0x4059c0;\n                }\n            } else {\n                goto lab_0x405c20;\n            }\n        }\n    } else {\n        // 0x405b5a\n        endpwent();\n        v45 = v14;\n        v44 = NULL;\n        v43 = (int64_t)\"invalid spec\";\n        goto lab_0x405b67;\n    }\n  lab_0x405acb:;\n    int64_t v51 = function_4065d0(v33, 0, 10, (int64_t *)&v35, (int64_t *)&g10, a6); // 0x405ae0\n    int64_t v52; // 0x405940\n    int64_t v53; // 0x405940\n    int64_t v54; // 0x405940\n    int32_t v55; // 0x405940\n    if ((int32_t)v51 != 0) {\n        goto lab_0x405afc;\n    } else {\n        // 0x405ae9\n        v55 = v31;\n        v54 = v32;\n        v52 = v33;\n        v53 = v35;\n        if (v35 > -1) {\n            goto lab_0x4059df;\n        } else {\n            goto lab_0x405afc;\n        }\n    }\n  lab_0x4059ca:;\n    struct group * v56 = getgrnam(name2); // 0x4059cd\n    v31 = v28;\n    v32 = v29;\n    v33 = v30;\n    if (v56 == NULL) {\n        goto lab_0x405acb;\n    } else {\n        // 0x4059db\n        v55 = v28;\n        v54 = v29;\n        v52 = v30;\n        v53 = (int64_t)*(int32_t *)((int64_t)v56 + 16);\n        goto lab_0x4059df;\n    }\n  lab_0x405afc:\n    // 0x405afc\n    endgrent();\n    v45 = v32;\n    v44 = (int64_t *)function_4064f0(v33);\n    v43 = (int64_t)\"invalid group\";\n    goto lab_0x405b67;\n  lab_0x405c20:\n    // 0x405c20\n    endpwent();\n    v45 = v14;\n    v44 = NULL;\n    v43 = (int64_t)\"invalid user\";\n    goto lab_0x405b67;\n  lab_0x405b67:\n    // 0x405b67\n    free((int64_t *)v45);\n    free(v44);\n    return (int64_t)dcgettext(NULL, (char *)v43, 5);\n  lab_0x4059df:\n    // 0x4059df\n    endgrent();\n    v15 = v55;\n    v11 = v54;\n    v8 = function_4064f0(v52);\n    v10 = v53;\n    goto lab_0x4059ef;\n}\n"
        },
        {
            "funcName": "function_405c50",
            "funcStartAddr": "405c50",
            "funcEndAddr": "405d1d",
            "decompiledFuncCode": "int64_t function_405c50(int64_t a1, int32_t * a2, int32_t * a3, int32_t a4, int32_t a5) {\n    int64_t v1 = a5;\n    int64_t v2 = a4;\n    int64_t v3 = (int64_t)a2;\n    if (a3 == NULL) {\n        // 0x405d00\n        return function_405940(a1, 0, v3, 0, v2, v1);\n    }\n    int64_t v4 = (int64_t)a3;\n    char * str = (char *)a1; // 0x405c7b\n    char * found_char_pos = strchr(str, 58); // 0x405c7b\n    int64_t result = function_405940(a1, (int64_t)found_char_pos, v3, v4, v2, v1); // 0x405c95\n    if (found_char_pos != NULL) {\n        // 0x405ce4\n        return result;\n    }\n    if (result == 0) {\n        // 0x405ce4\n        return 0;\n    }\n    char * found_char_pos2 = strchr(str, 46); // 0x405cb4\n    if (found_char_pos2 == NULL || function_405940(a1, (int64_t)found_char_pos2, v3, v4, v2, v1) != 0) {\n        // 0x405ce4\n        return 0x100000000 * result >> 32;\n    }\n    // 0x405ce4\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405d20",
            "funcStartAddr": "405d20",
            "funcEndAddr": "4060fd",
            "decompiledFuncCode": "int64_t function_405d20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405db8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405d3c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405d56\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405d9b\n    if (a6 < 10) {\n        // 0x405daa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405ea2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_406100",
            "funcStartAddr": "406100",
            "funcEndAddr": "406120",
            "decompiledFuncCode": "int64_t function_406100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406100\n    if (a5 == 0) {\n        // 0x40611b\n        return function_405d20(a1, a2, a3, a4, a5, 0, (int64_t)&g57);\n    }\n    int64_t v1 = 0; // 0x406107\n    v1++;\n    int64_t v2 = v1; // 0x406119\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x406110\n        v1++;\n        v2 = v1;\n    }\n    // 0x40611b\n    return function_405d20(a1, a2, a3, a4, a5, v2, (int64_t)&g57);\n}\n"
        },
        {
            "funcName": "function_406120",
            "funcStartAddr": "406120",
            "funcEndAddr": "406180",
            "decompiledFuncCode": "int64_t function_406120(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x406120\n    int64_t v3 = &v2; // 0x406120\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x406153\n    int64_t v6; // 0x40613d\n    int64_t * v7; // 0x40615b\n    int64_t v8; // 0x40615b\n    int64_t v9; // 0x406167\n    if (v5 < 48) {\n        // 0x406130\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x406173\n            break;\n        }\n    } else {\n        // 0x40615b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x406173\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x406151\n    while (v4 != 9) {\n        // 0x406149\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x406130\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x406173\n                break;\n            }\n        } else {\n            // 0x40615b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x406173\n                break;\n            }\n        }\n        // 0x406149\n        v10 = 10;\n    }\n    // 0x406173\n    return function_405d20(a1, a2, a3, a4, v3, v10, (int64_t)&g57);\n}\n"
        },
        {
            "funcName": "function_406180",
            "funcStartAddr": "406180",
            "funcEndAddr": "40623c",
            "decompiledFuncCode": "int64_t function_406180(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x406180\n    int64_t v1; // bp-168, 0x406180\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x406180\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x406180\n    int64_t v8; // 0x406180\n    int64_t v9; // bp-56, 0x406180\n    int64_t v10; // 0x4061e5\n    int64_t v11; // 0x406209\n    if ((int32_t)v6 < 48) {\n        // 0x4061d0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x406220\n            break;\n        }\n    } else {\n        // 0x406202\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x406220\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4061fa\n    int64_t v13 = 10; // 0x4061fa\n    while (v5 != 9) {\n        // 0x4061fc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4061d0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x406220\n                break;\n            }\n        } else {\n            // 0x406202\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x406220\n                break;\n            }\n        }\n        // 0x4061f2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x406220\n    int64_t v14; // bp-136, 0x406180\n    int64_t result = function_405d20(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g57); // 0x40622f\n    return result;\n}\n"
        },
        {
            "funcName": "function_406240",
            "funcStartAddr": "406240",
            "funcEndAddr": "4062b4",
            "decompiledFuncCode": "int64_t function_406240(int64_t a1) {\n    // 0x406240\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4062a3\n    return fputs_unlocked(v1, g31);\n}\n"
        },
        {
            "funcName": "function_4062c0",
            "funcStartAddr": "4062c0",
            "funcEndAddr": "4062da",
            "decompiledFuncCode": "int64_t function_4062c0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4062c4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4062d3\n        return (int64_t)mem;\n    }\n    // 0x4062d5\n    function_406510(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4062e0",
            "funcStartAddr": "4062e0",
            "funcEndAddr": "406301",
            "decompiledFuncCode": "int64_t function_4062e0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4062e3\n    int64_t v2 = v1; // 0x4062e3\n    if (v2 < 0) {\n        // 0x4062fb\n        function_406510(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4062f9\n        return function_4062c0(v2);\n    }\n    // 0x4062fb\n    function_406510(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406310",
            "funcStartAddr": "406310",
            "funcEndAddr": "406312",
            "decompiledFuncCode": "int64_t function_406310(void) {\n    // 0x406310\n    int64_t v1; // 0x406310\n    return function_4062c0(v1);\n}\n"
        },
        {
            "funcName": "function_406320",
            "funcStartAddr": "406320",
            "funcEndAddr": "406356",
            "decompiledFuncCode": "int64_t function_406320(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406348\n        free(v1);\n        return (int32_t)&g57 ^ (int32_t)&g57;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406331\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406340\n        return (int64_t)mem;\n    }\n    // 0x406351\n    function_406510(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406360",
            "funcStartAddr": "406360",
            "funcEndAddr": "406381",
            "decompiledFuncCode": "int64_t function_406360(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406363\n    int64_t v2 = v1; // 0x406363\n    if (v2 < 0) {\n        // 0x40637b\n        function_406510(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406379\n        return function_406320(a1, v2);\n    }\n    // 0x40637b\n    function_406510(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406390",
            "funcStartAddr": "406390",
            "funcEndAddr": "406416",
            "decompiledFuncCode": "int64_t function_406390(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4063eb\n            function_406510(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406320(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4063d3\n    if (a2 == 0) {\n        // 0x4063f8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4063d8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4063eb\n        function_406510(a1);\n        // UNREACHABLE\n    }\n    // 0x4063ba\n    *(int64_t *)a2 = v2;\n    return function_406320(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406420",
            "funcStartAddr": "406420",
            "funcEndAddr": "406470",
            "decompiledFuncCode": "int64_t function_406420(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406420\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40646a\n            function_406510(a1);\n            // UNREACHABLE\n        }\n        // 0x406442\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406320(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406455\n        *(int64_t *)a2 = 128;\n        return function_406320(0, 128);\n    }\n    // 0x406468\n    if (a2 < 0) {\n        // 0x40646a\n        function_406510(a1);\n        // UNREACHABLE\n    }\n    // 0x406442\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406320(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406470",
            "funcStartAddr": "406470",
            "funcEndAddr": "406487",
            "decompiledFuncCode": "int64_t function_406470(int64_t a1, int64_t a2) {\n    // 0x406470\n    return (int64_t)memset((int64_t *)function_4062c0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406490",
            "funcStartAddr": "406490",
            "funcEndAddr": "4064be",
            "decompiledFuncCode": "int64_t function_406490(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406497\n    if ((int64_t)v1 < 0) {\n        // 0x4064b9\n        function_406510(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4064b9\n        function_406510(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4064aa\n    if (mem != NULL) {\n        // 0x4064b4\n        return (int64_t)mem;\n    }\n    // 0x4064b9\n    function_406510(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4064c0",
            "funcStartAddr": "4064c0",
            "funcEndAddr": "4064e8",
            "decompiledFuncCode": "int64_t function_4064c0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4062c0(a2); // 0x4064cf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4064f0",
            "funcStartAddr": "4064f0",
            "funcEndAddr": "406503",
            "decompiledFuncCode": "int64_t function_4064f0(int64_t str) {\n    // 0x4064f0\n    return function_4064c0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_406510",
            "funcStartAddr": "406510",
            "funcEndAddr": "406541",
            "decompiledFuncCode": "int64_t function_406510(int64_t a1) {\n    // 0x406510\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406550",
            "funcStartAddr": "406550",
            "funcEndAddr": "4065a0",
            "decompiledFuncCode": "int64_t function_406550(int64_t a1, int64_t a2) {\n    // 0x406550\n    int64_t v1; // 0x406550\n    int64_t result = fts_open(a1, (int32_t)a2 | 512, v1); // 0x40655a\n    if (result != 0) {\n        // 0x406564\n        return result;\n    }\n    // 0x406570\n    if (*__errno_location() == 22) {\n        // 0x406580\n        __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 41, \"xfts_open\");\n        return &g57;\n    }\n    // 0x40657a\n    function_406510(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4065a0",
            "funcStartAddr": "4065a0",
            "funcEndAddr": "4065c9",
            "decompiledFuncCode": "int64_t function_4065a0(int64_t a1, int64_t a2) {\n    int64_t result = 1; // 0x4065a0\n    int32_t v1; // 0x4065a0\n    switch (v1 & 17) {\n        case 17: {\n            // 0x4065c0\n            return *(int64_t *)(a2 + 88) != 0;\n        }\n        default: {\n            // 0x4065b7\n            result = 0;\n        }\n        case 16: {\n            // 0x4065b7\n            return result;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4065d0",
            "funcStartAddr": "4065d0",
            "funcEndAddr": "406a00",
            "decompiledFuncCode": "int64_t function_4065d0(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x4065de\n    if (base >= 37) {\n        // 0x4069db\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g57;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x406602\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x406632\n    int64_t v3 = str; // 0x406637\n    char v4 = c; // 0x406637\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x40662c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x406628\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x406639\n    if (v4 == 45) {\n        // 0x406673\n        return 4;\n    }\n    // 0x40663e\n    int64_t v6; // bp-64, 0x4065d0\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x4065fe\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x406644\n    int64_t * v7 = (int64_t *)endptr; // 0x406649\n    int64_t v8 = *v7; // 0x406649\n    char v9; // 0x4065d0\n    int64_t v10; // 0x4065d0\n    int64_t v11; // 0x4065d0\n    int64_t v12; // 0x4065d0\n    int64_t v13; // 0x4065d0\n    int64_t v14; // 0x4065d0\n    int64_t v15; // 0x4065d0\n    if (v8 == str) {\n        // 0x4066a0\n        if (c == 0 || str2 == NULL) {\n            // 0x406673\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x4066c1\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x406673\n            return 4;\n        }\n        goto lab_0x4066cf;\n    } else {\n        int32_t v16 = *v1; // 0x406654\n        int64_t v17 = 0; // 0x40665a\n        if (v16 != 0) {\n            // 0x406688\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x406673\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x406644\n        v13 = v18;\n        v10 = v17;\n        if (str2 == NULL) {\n            goto lab_0x406670;\n        } else {\n            char c2 = *(char *)v8; // 0x406663\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x4067c3\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4066cf;\n                } else {\n                    goto lab_0x4067d5;\n                }\n            } else {\n                goto lab_0x406670;\n            }\n        }\n    }\n  lab_0x4066cf:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x4066d7\n    int64_t v21 = 1; // 0x4066d7\n    int64_t v22; // 0x4065d0\n    int64_t v23; // 0x4065d0\n    int64_t v24; // 0x4065d0\n    int64_t v25; // 0x4065d0\n    int64_t v26; // 0x4065d0\n    int64_t v27; // 0x4065d0\n    int64_t v28; // 0x4065d0\n    int64_t v29; // 0x4065d0\n    int64_t v30; // 0x4065d0\n    int64_t v31; // 0x4065d0\n    int64_t v32; // 0x4065d0\n    int64_t v33; // 0x4065d0\n    int64_t v34; // 0x4065d0\n    int64_t v35; // 0x4065d0\n    int64_t v36; // 0x4065d0\n    int64_t v37; // 0x4065d0\n    int64_t v38; // 0x4065d0\n    int64_t v39; // 0x4065d0\n    int64_t v40; // 0x4065d0\n    int64_t v41; // 0x4065d0\n    if (v19 < 48) {\n        // 0x4066d9\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40673a;\n        } else {\n            // 0x4066ec\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x40673a;\n            } else {\n                // 0x406708\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x40673a;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x406969\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x40673a;\n                    }\n                    default: {\n                        // 0x40671d\n                        g54 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x4068db;\n                            }\n                            case 70: {\n                                goto lab_0x4067d5;\n                            }\n                            case 71: {\n                                goto lab_0x406913;\n                            }\n                            case 72: {\n                                goto lab_0x4067d5;\n                            }\n                            case 73: {\n                                goto lab_0x4067d5;\n                            }\n                            case 74: {\n                                goto lab_0x4067d5;\n                            }\n                            case 75: {\n                                goto lab_0x40679c;\n                            }\n                            case 76: {\n                                goto lab_0x4067d5;\n                            }\n                            case 77: {\n                                goto lab_0x40675e;\n                            }\n                            case 78: {\n                                goto lab_0x4067d5;\n                            }\n                            case 79: {\n                                goto lab_0x4067d5;\n                            }\n                            case 80: {\n                                goto lab_0x4068a8;\n                            }\n                            case 81: {\n                                goto lab_0x4067d5;\n                            }\n                            case 82: {\n                                goto lab_0x4067d5;\n                            }\n                            case 83: {\n                                goto lab_0x4067d5;\n                            }\n                            case 84: {\n                                goto lab_0x406878;\n                            }\n                            case 85: {\n                                goto lab_0x4067d5;\n                            }\n                            case 86: {\n                                goto lab_0x4067d5;\n                            }\n                            case 87: {\n                                goto lab_0x4067d5;\n                            }\n                            case 88: {\n                                goto lab_0x4067d5;\n                            }\n                            case 89: {\n                                goto lab_0x406846;\n                            }\n                            case 90: {\n                                goto lab_0x40680b;\n                            }\n                            case 91: {\n                                goto lab_0x4067d5;\n                            }\n                            case 92: {\n                                goto lab_0x4067d5;\n                            }\n                            case 93: {\n                                goto lab_0x4067d5;\n                            }\n                            case 94: {\n                                goto lab_0x4067d5;\n                            }\n                            case 95: {\n                                goto lab_0x4067d5;\n                            }\n                            case 96: {\n                                goto lab_0x4067d5;\n                            }\n                            case 97: {\n                                goto lab_0x4067d5;\n                            }\n                            case 98: {\n                                goto lab_0x4067ef;\n                            }\n                            case 99: {\n                                goto lab_0x406778;\n                            }\n                            case 100: {\n                                goto lab_0x4067d5;\n                            }\n                            case 101: {\n                                goto lab_0x4067d5;\n                            }\n                            case 102: {\n                                goto lab_0x4067d5;\n                            }\n                            case 103: {\n                                goto lab_0x406913;\n                            }\n                            case 104: {\n                                goto lab_0x4067d5;\n                            }\n                            case 105: {\n                                goto lab_0x4067d5;\n                            }\n                            case 106: {\n                                goto lab_0x4067d5;\n                            }\n                            case 107: {\n                                goto lab_0x40679c;\n                            }\n                            case 108: {\n                                goto lab_0x4067d5;\n                            }\n                            case 109: {\n                                goto lab_0x40675e;\n                            }\n                            case 110: {\n                                goto lab_0x4067d5;\n                            }\n                            case 111: {\n                                goto lab_0x4067d5;\n                            }\n                            case 112: {\n                                goto lab_0x4067d5;\n                            }\n                            case 113: {\n                                goto lab_0x4067d5;\n                            }\n                            case 114: {\n                                goto lab_0x4067d5;\n                            }\n                            case 115: {\n                                goto lab_0x4067d5;\n                            }\n                            case 116: {\n                                goto lab_0x406878;\n                            }\n                            default: {\n                                goto lab_0x40673a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40673a;\n    }\n  lab_0x406670:\n    // 0x406670\n    *a4 = v13;\n    // 0x406673\n    return v10 & 0xffffffff;\n  lab_0x40673a:\n    // 0x40673a\n    g55 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x4065d0\n    switch (v9) {\n        case 66: {\n            // 0x406934\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x4067a7;\n            } else {\n                // 0x406941\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406778;\n            }\n        }\n        case 69: {\n            goto lab_0x4068db;\n        }\n        case 71: {\n            goto lab_0x406913;\n        }\n        case 75: {\n            goto lab_0x40679c;\n        }\n        case 77: {\n            goto lab_0x40675e;\n        }\n        case 80: {\n            goto lab_0x4068a8;\n        }\n        case 84: {\n            goto lab_0x406878;\n        }\n        case 89: {\n            goto lab_0x406846;\n        }\n        case 90: {\n            goto lab_0x40680b;\n        }\n        case 98: {\n            goto lab_0x4067ef;\n        }\n        case 99: {\n            goto lab_0x406778;\n        }\n        case 103: {\n            goto lab_0x406913;\n        }\n        case 107: {\n            goto lab_0x40679c;\n        }\n        case 109: {\n            goto lab_0x40675e;\n        }\n        case 116: {\n            goto lab_0x406878;\n        }\n        case 119: {\n            // 0x4067e0\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x4067a7;\n            } else {\n                // 0x4067e5\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406778;\n            }\n        }\n        default: {\n            goto lab_0x4067d5;\n        }\n    }\n  lab_0x4068db:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x4068f3\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x4068ff\n    int64_t v48 = v45; // 0x406902\n    int64_t v49 = v34; // 0x406902\n    int64_t v50 = v46; // 0x406902\n    int32_t v51 = v47; // 0x406902\n    int64_t v52 = v46; // 0x406902\n    while (v47 != 0) {\n        // 0x4068f0\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x406834;\n  lab_0x406913:\n    // 0x406913\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x40691e\n        int128_t v53; // 0x406919\n        uint128_t v54; // 0x406919\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x40691e\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x4065d0\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x406923\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x406928\n                v23 = v57;\n                int64_t v58; // 0x4065d0\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x406778;\n  lab_0x40679c:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x40679f\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x406778;\n    } else {\n        goto lab_0x4067a7;\n    }\n  lab_0x40675e:;\n    int128_t v62 = v24; // 0x406764\n    uint128_t v63 = v62 * (int128_t)v14; // 0x406764\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x4067a7;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x406769\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x4067a7;\n        } else {\n            // 0x40676e\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x406778;\n        }\n    }\n  lab_0x4068a8:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x4068bb\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x4068c7\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x4068ca\n    int64_t v70 = v67; // 0x4068ca\n    while (v68 != 0) {\n        // 0x4068b8\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x406834;\n  lab_0x406878:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x40688b\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x406897\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x40689a\n    int64_t v76 = v73; // 0x40689a\n    while (v74 != 0) {\n        // 0x406888\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x406834;\n  lab_0x406846:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x40685b\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x406867\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x40686a\n    int64_t v82 = v79; // 0x40686a\n    while (v80 != 0) {\n        // 0x406858\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x406834;\n  lab_0x40680b:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x406823\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x40682f\n    int32_t v87 = v86; // 0x406832\n    int64_t v88 = v85; // 0x406832\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x406820\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x406834;\n  lab_0x4067ef:\n    // 0x4067ef\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x4067a7;\n    } else {\n        // 0x4067f8\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x406778;\n    }\n  lab_0x406778:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x40677d\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x406670;\n  lab_0x4067d5:\n    // 0x4067d5\n    *a4 = v15;\n    // 0x406673\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4067a7:\n    // 0x4067a7\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x406778;\n  lab_0x406834:\n    // 0x406834\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x406778;\n}\n"
        },
        {
            "funcName": "function_406a00",
            "funcStartAddr": "406a00",
            "funcEndAddr": "406c6e",
            "decompiledFuncCode": "int64_t function_406a00(int64_t a1, int32_t a2, int64_t a3, int32_t group, int64_t a5) {\n    if ((a5 & 0xfffffeff) != 0) {\n        // 0x406c40\n        *__errno_location() = 22;\n        // 0x406b3e\n        return 0xffffffff;\n    }\n    int64_t v1 = a2;\n    int32_t fd = a1; // 0x406a2c\n    if (fd == -100 || (char)a2 == 47) {\n        char * path = (char *)v1;\n        int32_t owner = a3;\n        int64_t result; // 0x406a00\n        if ((int32_t)a5 == 256) {\n            // 0x406b98\n            result = lchown(path, owner, group);\n        } else {\n            // 0x406b69\n            result = chown(path, owner, group);\n        }\n        // 0x406b3e\n        return result;\n    }\n    // 0x406a3e\n    int32_t v2; // bp-4088, 0x406a00\n    int64_t v3 = function_409d90((int64_t *)&v2, a1 & 0xffffffff, v1); // 0x406a48\n    if (v3 != 0) {\n        char * path2 = (char *)v3;\n        int32_t owner2 = a3;\n        int32_t v4; // 0x406a00\n        if ((int32_t)a5 == 256) {\n            // 0x406ba8\n            v4 = lchown(path2, owner2, group);\n        } else {\n            // 0x406a6b\n            v4 = chown(path2, owner2, group);\n        }\n        int32_t * v5 = __errno_location(); // 0x406a7b\n        uint32_t v6 = *v5; // 0x406a89\n        if (v3 != (int64_t)&v2) {\n            // 0x406a90\n            free((int64_t *)v3);\n        }\n        int64_t result2 = v4;\n        if (v4 != -1) {\n            // 0x406b3e\n            return result2;\n        }\n        if (v6 < 39) {\n            if ((1 << (int64_t)(v6 % 64) & 0x4000102006) == 0) {\n                // 0x406b81\n                *v5 = v6;\n                // 0x406b3e\n                return result2;\n            }\n        } else {\n            if (v6 != 95) {\n                // 0x406b81\n                *v5 = v6;\n                // 0x406b3e\n                return result2;\n            }\n        }\n    }\n    // 0x406ad0\n    if ((int32_t)function_40b990((int64_t *)&v2) != 0) {\n        int32_t v7 = *__errno_location(); // 0x406c67\n        function_40b8e0(v7);\n        // UNREACHABLE\n    }\n    // 0x406ae2\n    if (fd > -1 == v2 == fd) {\n        // 0x406c20\n        function_40ba00((int64_t *)&v2);\n        *__errno_location() = 9;\n        // 0x406b3e\n        return 0xffffffff;\n    }\n    // 0x406af0\n    if (fchdir(fd) != 0) {\n        int32_t * v8 = __errno_location(); // 0x406bf8\n        function_40ba00((int64_t *)&v2);\n        // 0x406b3e\n        return 0xffffffff;\n    }\n    char * path3 = (char *)v1;\n    int32_t owner3 = a3;\n    int32_t result3; // 0x406a00\n    if ((int32_t)a5 == 256) {\n        // 0x406b88\n        result3 = lchown(path3, owner3, group);\n    } else {\n        // 0x406b10\n        result3 = chown(path3, owner3, group);\n    }\n    // 0x406b18\n    int32_t v9; // 0x406c5b\n    if (result3 != -1) {\n        // 0x406b22\n        if ((int32_t)function_40b9e0((int64_t *)&v2) == 0) {\n            // 0x406b34\n            function_40ba00((int64_t *)&v2);\n            // 0x406b3e\n            return result3;\n        }\n        // 0x406c56\n        v9 = *__errno_location();\n        function_40b910(v9);\n        // UNREACHABLE\n    }\n    int32_t * v10 = __errno_location(); // 0x406bc0\n    int32_t v11 = *v10; // 0x406bcd\n    if ((int32_t)function_40b9e0((int64_t *)&v2) != 0) {\n        // 0x406c56\n        v9 = *__errno_location();\n        function_40b910(v9);\n        // UNREACHABLE\n    }\n    // 0x406bd8\n    function_40ba00((int64_t *)&v2);\n    if (v11 != 0) {\n        // 0x406bea\n        *v10 = v11;\n    }\n    // 0x406b3e\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406c70",
            "funcStartAddr": "406c70",
            "funcEndAddr": "406c8a",
            "decompiledFuncCode": "int64_t function_406c70(int64_t a1, int64_t a2) {\n    // 0x406c70\n    if (*(int64_t *)(a1 + 8) == *(int64_t *)(a2 + 8)) {\n        // 0x406c80\n        return a2 & -256 | (int64_t)(a1 == a2);\n    }\n    // 0x406c7c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406c90",
            "funcStartAddr": "406c90",
            "funcEndAddr": "406c9d",
            "decompiledFuncCode": "int64_t function_406c90(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406c90\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_406ca0",
            "funcStartAddr": "406ca0",
            "funcEndAddr": "406cac",
            "decompiledFuncCode": "int64_t function_406ca0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406ca0\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_406cb0",
            "funcStartAddr": "406cb0",
            "funcEndAddr": "406cba",
            "decompiledFuncCode": "int64_t function_406cb0(int64_t a1, int64_t a2) {\n    // 0x406cb0\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_406cc0",
            "funcStartAddr": "406cc0",
            "funcEndAddr": "406ce2",
            "decompiledFuncCode": "int64_t function_406cc0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 128); // 0x406ccb\n    uint64_t v2 = *(int64_t *)(a1 + 128); // 0x406cd2\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_406cf0",
            "funcStartAddr": "406cf0",
            "funcEndAddr": "406e9a",
            "decompiledFuncCode": "int64_t function_406cf0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a2 + 120; // 0x406cf6\n    int64_t v2 = a1 + 72; // 0x406cfe\n    uint64_t v3 = (int64_t)*(int32_t *)v2; // 0x406cfe\n    int64_t * v4 = (int64_t *)(a2 + 88); // 0x406d01\n    int64_t * v5 = (int64_t *)(a2 + 48); // 0x406d06\n    int64_t v6 = *v5; // 0x406d06\n    int32_t v7; // 0x406cf0\n    if (*v4 != 0 || v3 % 2 == 0) {\n        if ((v3 & 2) != 0) {\n            goto lab_0x406d10;\n        } else {\n            if ((char)a3 != 0) {\n                goto lab_0x406d10;\n            } else {\n                int32_t v8 = *(int32_t *)(a1 + 44); // 0x406d6b\n                if (__fxstatat(1, v8, (char *)v6, (struct stat *)v1, 256) != 0) {\n                    // 0x406dc0\n                    v7 = *__errno_location();\n                    goto lab_0x406dc7;\n                } else {\n                    goto lab_0x406d87;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406d10;\n    }\n  lab_0x406d10:;\n    struct stat * v9 = (struct stat *)v1; // 0x406d18\n    if (__xstat(1, (char *)v6, v9) == 0) {\n        goto lab_0x406d87;\n    } else {\n        int32_t * v10 = __errno_location(); // 0x406d21\n        int32_t v11 = *v10; // 0x406d29\n        v7 = v11;\n        if (v11 == 2) {\n            // 0x406d34\n            if (__lxstat(1, (char *)*v5, v9) == 0) {\n                // 0x406d4d\n                *v10 = 0;\n                return 13;\n            }\n            // 0x406e70\n            v7 = *v10;\n        }\n        goto lab_0x406dc7;\n    }\n  lab_0x406d87:;\n    int32_t v12 = *(int32_t *)(a2 + 144) & 0xf000; // 0x406d8d\n    int64_t v13; // 0x406cf0\n    switch ((int16_t)v12) {\n        case 0x4000: {\n            uint64_t v14 = *(int64_t *)(a2 + 136); // 0x406e00\n            v13 = -1;\n            if (v14 >= 2) {\n                // 0x406e0d\n                v13 = -1;\n                if (*v4 >= 1) {\n                    // 0x406e14\n                    v13 = (*(char *)v2 & 32) == 0 ? v14 - 2 : v14;\n                }\n            }\n            // break -> 0x406e22\n            break;\n        }\n        case -0x6000: {\n            // 0x406db3\n            return 12;\n        }\n        default: {\n            // 0x406db3\n            return 4 * (int64_t)(v12 == 0x8000) + (v12 == 0x8000 ? 4 : 3);\n        }\n    }\n    int64_t v15 = a2 + 264; // 0x406e22\n    *(int64_t *)(a2 + 104) = v13;\n    if (*(char *)v15 != 46) {\n        // 0x406db3\n        return 1;\n    }\n    // 0x406e38\n    if (*(char *)(a2 + 265) == 0) {\n        // 0x406db3\n        return *v4 == 0 ? 1 : 5;\n    }\n    // 0x406e41\n    if ((*(int32_t *)v15 & 0xffff00) != 0x2e00) {\n        // 0x406db3\n        return 1;\n    }\n    // 0x406db3\n    return *v4 == 0 ? 1 : 5;\n  lab_0x406dc7:\n    // 0x406dc7\n    *(int32_t *)(a2 + 64) = v7;\n    int64_t v16 = a2 + 128 & -8; // 0x406dd0\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(a2 + 256) = 0;\n    __asm_rep_stosq_memset((char *)v16, 0, (a2 + 264 - v16) / 8 % 0x20000000);\n    return 10;\n}\n"
        },
        {
            "funcName": "function_406ea0",
            "funcStartAddr": "406ea0",
            "funcEndAddr": "406f9d",
            "decompiledFuncCode": "int64_t function_406ea0(int64_t a1, int64_t result, uint64_t nmemb) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x406eb3\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x406eb7\n    int64_t v3 = *v2; // 0x406eb7\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x406ebb\n    int64_t base = v3; // 0x406ebf\n    if (*v4 < nmemb) {\n        uint64_t v5 = nmemb + 40; // 0x406ecb\n        *v4 = v5;\n        if (v5 >= 0x2000000000000000) {\n            // 0x406f71\n            free((int64_t *)v3);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        int64_t * mem = realloc((int64_t *)v3, 8 * (int32_t)v5); // 0x406ee0\n        if (mem == NULL) {\n            // 0x406f71\n            free((int64_t *)*v2);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        // 0x406ef1\n        base = (int64_t)mem;\n        *v2 = base;\n    }\n    int64_t v6 = base; // 0x406efb\n    int64_t v7 = result; // 0x406efb\n    if (result != 0) {\n        *(int64_t *)v6 = v7;\n        v7 += 16;\n        v6 += 8;\n        while (v7 != 0) {\n            // 0x406f00\n            *(int64_t *)v6 = v7;\n            v7 += 16;\n            v6 += 8;\n        }\n    }\n    // 0x406f11\n    qsort((int64_t *)base, (int32_t)nmemb, 8, (int32_t (*)(int64_t *, int64_t *))v1);\n    int64_t v8 = *v2; // 0x406f21\n    int64_t result2 = *(int64_t *)v8; // 0x406f28\n    if (nmemb == 1) {\n        // 0x406f5a\n        *(int64_t *)(result2 + 16) = 0;\n        return result2;\n    }\n    int64_t v9 = v8 + 8; // 0x406f43\n    int64_t * v10 = (int64_t *)v9; // 0x406f43\n    *(int64_t *)(result2 + 16) = *v10;\n    int64_t v11 = nmemb - 2; // 0x406f4f\n    int64_t v12 = v11; // 0x406f53\n    int64_t v13 = v9; // 0x406f53\n    if (v11 != 0) {\n        v13 += 8;\n        int64_t * v14 = (int64_t *)v13; // 0x406f43\n        *(int64_t *)(*v10 + 16) = *v14;\n        v12--;\n        while (v12 != 0) {\n            int64_t * v15 = v14;\n            v13 += 8;\n            v14 = (int64_t *)v13;\n            *(int64_t *)(*v15 + 16) = *v14;\n            v12--;\n        }\n    }\n    // 0x406f5a\n    *(int64_t *)(*(int64_t *)(8 * nmemb - 8 + v8) + 16) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406fa0",
            "funcStartAddr": "406fa0",
            "funcEndAddr": "40702a",
            "decompiledFuncCode": "int64_t function_406fa0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a3;\n    int64_t * mem = malloc(v1 + 272 & -8); // 0x406fbe\n    int64_t result = (int64_t)mem; // 0x406fbe\n    if (mem != NULL) {\n        int64_t v2 = result + 264; // 0x406fcb\n        memcpy((int64_t *)v2, (int64_t *)a2, v1);\n        *(char *)(v2 + a3) = 0;\n        *(int64_t *)(result + 96) = a3;\n        *(int64_t *)(result + 80) = a1;\n        *(int64_t *)(result + 56) = *(int64_t *)(a1 + 32);\n        *(int32_t *)(result + 64) = 0;\n        *(int64_t *)(result + 24) = 0;\n        *(int32_t *)(result + 114) = 0x30000;\n        *(int64_t *)(result + 32) = 0;\n        *(int64_t *)(result + 40) = 0;\n    }\n    // 0x40701c\n    return result;\n}\n"
        },
        {
            "funcName": "function_407030",
            "funcStartAddr": "407030",
            "funcEndAddr": "407071",
            "decompiledFuncCode": "int64_t function_407030(int64_t a1) {\n    // 0x407030\n    if (a1 == 0) {\n        // 0x407062\n        int64_t result; // 0x407030\n        return result;\n    }\n    int64_t dirp = *(int64_t *)(a1 + 24); // 0x407040\n    int64_t v1 = *(int64_t *)(a1 + 16); // 0x407044\n    if (dirp != 0) {\n        // 0x40704d\n        closedir((struct __dirstream *)dirp);\n    }\n    // 0x407052\n    free((int64_t *)a1);\n    while (v1 != 0) {\n        int64_t v2 = v1;\n        dirp = *(int64_t *)(v2 + 24);\n        v1 = *(int64_t *)(v2 + 16);\n        if (dirp != 0) {\n            // 0x40704d\n            closedir((struct __dirstream *)dirp);\n        }\n        // 0x407052\n        free((int64_t *)v2);\n    }\n    // 0x407062\n    return &g57;\n}\n"
        },
        {
            "funcName": "function_407080",
            "funcStartAddr": "407080",
            "funcEndAddr": "4070b9",
            "decompiledFuncCode": "int64_t function_407080(int64_t a1) {\n    int64_t result = function_40b2d0(a1); // 0x40709f\n    if ((char)result != 0) {\n        // 0x4070a8\n        return result;\n    }\n    int32_t fd = function_40b320(a1); // 0x407098\n    if (fd >= 0) {\n        // 0x4070b0\n        close(fd);\n    }\n    int64_t result2 = function_40b2d0(a1); // 0x40709f\n    while ((char)result2 == 0) {\n        // 0x407090\n        fd = function_40b320(a1);\n        if (fd >= 0) {\n            // 0x4070b0\n            close(fd);\n        }\n        // 0x40709c\n        result2 = function_40b2d0(a1);\n    }\n    // 0x4070a8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4070c0",
            "funcStartAddr": "4070c0",
            "funcEndAddr": "4071d1",
            "decompiledFuncCode": "int64_t function_4070c0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x4070c8\n    int64_t v2 = *v1; // 0x4070c8\n    if ((*(char *)(v2 + 73) & 2) == 0) {\n        // 0x407102\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(v2 + 80); // 0x4070d6\n    int64_t v4 = *v3; // 0x4070d6\n    int64_t v5 = v4; // 0x4070e0\n    int64_t result; // bp-152, 0x4070c0\n    if (v4 == 0) {\n        // 0x407170\n        v5 = function_40a8f0(13, 0, 0x406ca0, 0x406cb0, 0x401c30);\n        *v3 = v5;\n        if (v5 == 0) {\n            // 0x40719c\n            fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result);\n            // 0x407102\n            return 0;\n        }\n    }\n    int64_t * v6 = (int64_t *)(a1 + 120); // 0x4070e6\n    result = *v6;\n    int64_t v7 = function_40a680(v5, &result); // 0x4070f4\n    if (v7 != 0) {\n        // 0x407102\n        return *(int64_t *)(v7 + 8);\n    }\n    // 0x407110\n    if (fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result) != 0) {\n        // 0x407102\n        return 0;\n    }\n    int64_t * mem = malloc(16); // 0x40712c\n    if (mem == NULL) {\n        // 0x407102\n        return result;\n    }\n    int64_t v8 = (int64_t)mem; // 0x40712c\n    *(int64_t *)(v8 + 8) = result;\n    *mem = *v6;\n    if (function_40b090(v5, v8) != 0) {\n        // 0x407158\n        return result;\n    }\n    // 0x4071c0\n    free(mem);\n    // 0x407102\n    return result;\n}\n"
        },
        {
            "funcName": "function_4071e0",
            "funcStartAddr": "4071e0",
            "funcEndAddr": "407244",
            "decompiledFuncCode": "int64_t function_4071e0(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = function_4070c0(a1, a2); // 0x4071e4\n    if (v1 == 0x9fa0) {\n        // 0x407216\n        return 0;\n    }\n    if (v1 <= 0x9fa0) {\n        // 0x407220\n        if (v1 != 0) {\n            // 0x407227\n            return v1 != 0x6969;\n        }\n        // 0x407216\n        return 0;\n    }\n    // 0x4071f3\n    switch (v1) {\n        case 0x5346414f: {\n            // 0x407216\n            return 0;\n        }\n        case 0x58465342: {\n            // 0x407216\n            return 2;\n        }\n    }\n    // 0x407216\n    return v1 == 0x52654973 ? 2 : 1;\n}\n"
        },
        {
            "funcName": "function_407250",
            "funcStartAddr": "407250",
            "funcEndAddr": "4072b6",
            "decompiledFuncCode": "int64_t function_407250(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x40725b\n    int32_t fd = *v1; // 0x40725b\n    int32_t v2 = a2; // 0x40725e\n    if (fd == v2 == (fd != -100)) {\n        // 0x4072b1\n        abort();\n        // UNREACHABLE\n    }\n    if ((char)a3 == 0) {\n        // 0x40726b\n        if (fd >= 0 != ((*(char *)(a1 + 72) & 4) == 0)) {\n            // 0x407275\n            *v1 = v2;\n            int64_t result; // 0x407250\n            return result;\n        }\n        int32_t result2 = close(fd); // 0x4072a2\n        *v1 = v2;\n        return result2;\n    }\n    int64_t result3 = function_40b2e0(a1 + 96, fd); // 0x407284\n    uint32_t fd2 = (int32_t)result3; // 0x407289\n    if (fd2 < 0) {\n        // 0x407275\n        *v1 = v2;\n        return result3;\n    }\n    int32_t result4 = close(fd2); // 0x40728f\n    *v1 = v2;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4072c0",
            "funcStartAddr": "4072c0",
            "funcEndAddr": "40731a",
            "decompiledFuncCode": "int64_t function_4072c0(int64_t a1) {\n    int32_t v1 = *(int32_t *)(a1 + 72); // 0x4072c9\n    uint32_t v2 = v1 & 4; // 0x4072ce\n    if (v2 != 0) {\n        // 0x4072f2\n        function_407080(a1 + 96);\n        return 0;\n    }\n    int64_t result; // 0x4072c0\n    if ((v1 & 512) == 0) {\n        // 0x407308\n        result = fchdir(*(int32_t *)(a1 + 40)) != 0;\n    } else {\n        // 0x4072d8\n        function_407250(a1, 0xffffff9c, 1);\n        result = v2;\n    }\n    // 0x4072f2\n    function_407080(a1 + 96);\n    return result;\n}\n"
        },
        {
            "funcName": "function_407320",
            "funcStartAddr": "407320",
            "funcEndAddr": "40738b",
            "decompiledFuncCode": "int64_t function_407320(int64_t a1, uint64_t a2, int64_t a3) {\n    uint64_t v1 = a2 + 256 + a3; // 0x40732a\n    if (v1 < a2) {\n        int64_t * v2 = (int64_t *)a1; // 0x407358\n        free(v2);\n        *v2 = 0;\n        *__errno_location() = 36;\n        return 0;\n    }\n    // 0x407337\n    *(int64_t *)a2 = v1;\n    int64_t * v3 = (int64_t *)a1; // 0x40733d\n    int64_t * mem = realloc(v3, (int32_t)v1); // 0x40733d\n    if (mem != NULL) {\n        // 0x407347\n        *v3 = (int64_t)mem;\n        return 1;\n    }\n    // 0x407378\n    free(v3);\n    *v3 = 0;\n    return (int32_t)&g57 ^ (int32_t)&g57;\n}\n"
        },
        {
            "funcName": "function_407390",
            "funcStartAddr": "407390",
            "funcEndAddr": "4073eb",
            "decompiledFuncCode": "int64_t function_407390(int32_t a1, int64_t a2) {\n    if ((a1 & 258) != 0) {\n        int64_t v1 = function_40a8f0(31, 0, 0x406c90, 0x406c70, 0x401c30); // 0x4073b3\n        *(int64_t *)a2 = v1;\n        // 0x4073c1\n        return v1 & -256 | (int64_t)(v1 != 0);\n    }\n    int64_t * mem = malloc(32); // 0x4073cd\n    int64_t v2 = (int64_t)mem; // 0x4073cd\n    *(int64_t *)a2 = v2;\n    if (mem == NULL) {\n        // 0x4073c1\n        return 0;\n    }\n    // 0x4073df\n    function_409f20(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4073f0",
            "funcStartAddr": "4073f0",
            "funcEndAddr": "407434",
            "decompiledFuncCode": "int64_t function_4073f0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x2000 * a2 & 0x20000 | 128 * a2 & 0x40000 | 0x90900; // 0x40740a\n    if ((a2 & 512) == 0) {\n        // 0x407428\n        return function_409fb0(a3, v1, (int32_t)v1);\n    }\n    // 0x407418\n    return function_40b940((int64_t)a1, a3, (int32_t)v1, a3);\n}\n"
        },
        {
            "funcName": "function_407440",
            "funcStartAddr": "407440",
            "funcEndAddr": "407606",
            "decompiledFuncCode": "int64_t function_407440(int64_t a1, int64_t a2, int64_t a3, int32_t a4) {\n    int64_t v1 = a4;\n    int64_t v2 = a3 & 0xffffffff; // 0x40744f\n    int32_t * v3 = (int32_t *)(a1 + 72); // 0x40745c\n    uint32_t v4 = *v3; // 0x40745c\n    int64_t v5 = v4; // 0x40745c\n    int32_t v6 = v4 & 4; // 0x407463\n    int64_t v7; // 0x407440\n    int64_t v8; // 0x407440\n    int64_t v9; // 0x407440\n    int64_t v10; // 0x407440\n    int64_t v11; // 0x407440\n    if (a4 == 0) {\n        goto lab_0x4074e0;\n    } else {\n        // 0x40746b\n        bool v12; // 0x407440\n        int64_t v13 = v12 ? -1 : 1; // 0x407478\n        int64_t v14 = (int64_t)\"..\"; // 0x407440\n        int64_t v15 = v1; // 0x407440\n        int64_t v16 = 3; // 0x407478\n        unsigned char v17 = *(char *)v15; // 0x407478\n        char v18 = *(char *)v14; // 0x407478\n        char v19 = v18; // 0x407478\n        bool v20 = false; // 0x407478\n        while (v17 == v18) {\n            // 0x40746b\n            v16--;\n            v14 += v13;\n            v15 += v13;\n            v19 = v17;\n            v20 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = *(char *)v15;\n            v18 = *(char *)v14;\n            v19 = v18;\n            v20 = false;\n        }\n        unsigned char v21 = v19;\n        if ((v17 >= v21 && !v20) != v17 < v21) {\n            goto lab_0x4074e0;\n        } else {\n            if (v6 != 0) {\n                goto lab_0x407550;\n            } else {\n                // 0x40748b\n                v11 = v2;\n                v7 = v2;\n                v9 = 1;\n                if ((int32_t)a3 >= 0) {\n                    goto lab_0x4074f2;\n                } else {\n                    // 0x407493\n                    v8 = v5;\n                    v10 = 1;\n                    if ((v5 & 512) == 0) {\n                        goto lab_0x40757e;\n                    } else {\n                        int64_t v22 = a1 + 96; // 0x4074a0\n                        int64_t v23 = function_40b2d0(v22); // 0x4074ac\n                        v8 = v5;\n                        v10 = v23 & 0xffffffff;\n                        if ((char)v23 != 0) {\n                            goto lab_0x40757e;\n                        } else {\n                            int64_t v24 = function_40b320(v22); // 0x4074c4\n                            if ((int32_t)v24 < 0) {\n                                // 0x4075c8\n                                v8 = (int64_t)*v3;\n                                v10 = 1;\n                                goto lab_0x40757e;\n                            } else {\n                                // 0x4074d4\n                                v11 = v24 & 0xffffffff;\n                                v7 = v24;\n                                v9 = 1;\n                                goto lab_0x4074f2;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4074e0:\n    if (v6 != 0) {\n        goto lab_0x407550;\n    } else {\n        // 0x4074e4\n        v11 = v2;\n        v7 = v2;\n        v9 = 0;\n        v8 = v5;\n        v10 = 0;\n        if ((int32_t)a3 < 0) {\n            goto lab_0x40757e;\n        } else {\n            goto lab_0x4074f2;\n        }\n    }\n  lab_0x407550:\n    // 0x407550\n    if ((v5 & 512) == 0) {\n        // 0x40755f\n        return 0;\n    }\n    int32_t fd = a3; // 0x407559\n    if (fd >= 0) {\n        // 0x4075b8\n        close(fd);\n        // 0x40755f\n        return 0;\n    }\n    // 0x40755f\n    return 0;\n  lab_0x40757e:;\n    int64_t v25 = function_4073f0(*(int32_t *)(a1 + 44), v8, v1); // 0x407588\n    v11 = v2;\n    v7 = v25;\n    v9 = v10;\n    if ((int32_t)v25 < 0) {\n        // 0x40755f\n        return 0xffffffff;\n    }\n    goto lab_0x4074f2;\n  lab_0x4074f2:;\n    int32_t fd2 = v7; // 0x4074f7\n    int64_t v26; // bp-200, 0x407440\n    uint32_t v27 = __fxstat(1, fd2, (struct stat *)&v26); // 0x4074ff\n    int64_t v28 = 0xffffffff; // 0x407508\n    if (v27 != 0) {\n        goto lab_0x407533;\n    } else {\n        // 0x40750a\n        if (*(int64_t *)(a2 + 120) != v26) {\n            goto lab_0x407523;\n        } else {\n            // 0x407515\n            int64_t v29; // 0x407440\n            if (*(int64_t *)(a2 + 128) == v29) {\n                // 0x4075a0\n                if ((*(char *)(a1 + 73) & 2) != 0) {\n                    // 0x4075d8\n                    function_407250(a1, v7 & 0xffffffff, v9 % 256 ^ 1);\n                    // 0x40755f\n                    return (int64_t)v27 & 0xffffffff;\n                }\n                // 0x4075a7\n                v28 = fchdir(fd2);\n                goto lab_0x407533;\n            } else {\n                goto lab_0x407523;\n            }\n        }\n    }\n  lab_0x407533:\n    // 0x407533\n    if ((int32_t)v11 < 0) {\n        int32_t * v30 = __errno_location(); // 0x407537\n        close(fd2);\n    }\n    // 0x40755f\n    return v28 & 0xffffffff;\n  lab_0x407523:\n    // 0x407523\n    *__errno_location() = 2;\n    v28 = 0xffffffff;\n    goto lab_0x407533;\n}\n"
        },
        {
            "funcName": "function_407610",
            "funcStartAddr": "407610",
            "funcEndAddr": "4076bf",
            "decompiledFuncCode": "int64_t function_407610(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) == 0) {\n        int64_t result = function_409f30(a2, a3 + 120); // 0x407698\n        if ((char)result == 0) {\n            // 0x407681\n            return 1;\n        }\n        // 0x4076a1\n        *(int64_t *)a3 = a3;\n        *(int16_t *)(a3 + 112) = 2;\n        return result;\n    }\n    int64_t * mem = malloc(24); // 0x407627\n    if (mem == NULL) {\n        // 0x407681\n        return 0;\n    }\n    int64_t v1 = (int64_t)mem; // 0x407627\n    *(int64_t *)(v1 + 16) = a3;\n    *mem = *(int64_t *)(a3 + 120);\n    *(int64_t *)(v1 + 8) = *(int64_t *)(a3 + 128);\n    int64_t v2 = function_40b090(a2, v1); // 0x407656\n    if (v2 == v1) {\n        // 0x407681\n        return 1;\n    }\n    // 0x407663\n    free(mem);\n    int64_t result2 = 0; // 0x40766e\n    if (v2 != 0) {\n        // 0x407670\n        *(int16_t *)(a3 + 112) = 2;\n        *(int64_t *)a3 = *(int64_t *)(v2 + 16);\n        result2 = 1;\n    }\n    // 0x407681\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4076c0",
            "funcStartAddr": "4076c0",
            "funcEndAddr": "407756",
            "decompiledFuncCode": "int64_t function_4076c0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) != 0) {\n        // 0x407700\n        free((int64_t *)function_40b0d0(a2));\n        return &g57;\n    }\n    int64_t result = *(int64_t *)(a3 + 8); // 0x4076cf\n    if (result == 0) {\n        // 0x4076f9\n        return 0;\n    }\n    // 0x4076d8\n    if (*(int64_t *)(result + 88) < 0) {\n        // 0x4076f9\n        return result;\n    }\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40773c\n    int64_t result2 = result; // 0x407740\n    if (*v1 == *(int64_t *)(a3 + 120)) {\n        // 0x407742\n        result2 = *(int64_t *)(result + 128);\n        *v1 = *(int64_t *)(result + 120);\n        *(int64_t *)a2 = result2;\n    }\n    // 0x4076f9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407760",
            "funcStartAddr": "407760",
            "funcEndAddr": "408113",
            "decompiledFuncCode": "int64_t function_407760(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // 0x407774\n    int64_t * dirp2 = (int64_t *)(a1 + 24); // 0x407778\n    int64_t dirp = *dirp2; // 0x407778\n    int64_t v2; // 0x407760\n    int32_t * v3; // 0x407760\n    int64_t v4; // 0x407760\n    int64_t v5; // 0x407760\n    int64_t v6; // 0x407760\n    int64_t v7; // 0x407760\n    int64_t v8; // 0x407760\n    int64_t v9; // 0x407760\n    char v10; // 0x407760\n    int64_t v11; // 0x407760\n    int64_t v12; // 0x407760\n    int64_t v13; // 0x407b96\n    int64_t v14; // 0x407760\n    int64_t v15; // 0x407bd5\n    int32_t * v16; // 0x407760\n    int64_t v17; // 0x407be2\n    int32_t v18; // 0x407be6\n    if (dirp == 0) {\n        // 0x407b50\n        v14 = a1 + 72;\n        v16 = (int32_t *)v14;\n        uint32_t v19 = *v16; // 0x407b50\n        uint64_t v20 = (int64_t)v19; // 0x407b50\n        v5 = 0;\n        if ((v19 & 16) != 0) {\n            // 0x407b5b\n            v5 = 0x20000;\n            if (v20 % 2 != 0) {\n                // 0x407d30\n                v5 = 0x20000 * (int64_t)(*(int64_t *)(a1 + 88) != 0);\n            }\n        }\n        int64_t v21 = *(int64_t *)(a1 + 48); // 0x407b6f\n        int64_t v22 = 0xffffff9c; // 0x407b88\n        if ((v20 & 516) == 512) {\n            // 0x407b8a\n            v22 = (int64_t)*(int32_t *)(a1 + 44);\n        }\n        int64_t v23 = 128 * v20 & 0x40000 | v5 & 0xfff60000 | 0x90900; // 0x407b8e\n        v13 = function_40b940(v22, v21, (int32_t)v23, v5);\n        int32_t fd = v13; // 0x407b9d\n        if (fd < 0) {\n            goto lab_0x407ed2;\n        } else {\n            struct __dirstream * v24 = fdopendir(fd); // 0x407ba7\n            if (v24 == NULL) {\n                int32_t * v25 = __errno_location(); // 0x407ebc\n                close(fd);\n                goto lab_0x407ed2;\n            } else {\n                int16_t * v26 = (int16_t *)(a1 + 112); // 0x407bb5\n                *dirp2 = (int64_t)v24;\n                if (*v26 == 11) {\n                    // 0x407f6c\n                    *v26 = (int16_t)function_406cf0(a1, a1, 0);\n                    v8 = a1;\n                } else {\n                    int32_t v27 = *v16; // 0x407bc5\n                    v8 = v21;\n                    if ((v27 & 256) != 0) {\n                        int64_t v28 = a1 + 88; // 0x407f20\n                        function_4076c0(v27, v28, a1);\n                        function_406cf0(a1, a1, 0);\n                        int64_t v29 = function_407610(*v16, v28, a1); // 0x407f46\n                        v8 = v28;\n                        if ((char)v29 == 0) {\n                            // 0x407f53\n                            *__errno_location() = 12;\n                          lab_0x407d12:\n                            // 0x407d12\n                            return 0;\n                        }\n                    }\n                }\n                // 0x407bd5\n                v15 = a1 + 64;\n                v17 = *(int64_t *)v15 == 0 ? 0x186a0 : -1;\n                v18 = v1;\n                if (v18 == 2) {\n                    goto lab_0x407f10;\n                } else {\n                    // 0x407bf6\n                    if ((*v16 & 56) == 24) {\n                        // 0x407d42\n                    } else {\n                        // 0x407c06\n                        goto lab_0x407c15;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40778a\n        if (dirfd((struct __dirstream *)dirp) < 0) {\n            // 0x407fed\n            closedir((struct __dirstream *)*dirp2);\n            *dirp2 = 0;\n            if ((int32_t)v1 != 3) {\n                // 0x407d12\n                return 0;\n            }\n            goto lab_0x408009;\n        } else {\n            int64_t v30 = a1 + 72;\n            int32_t * v31 = (int32_t *)v30;\n            v3 = v31;\n            v2 = v30;\n            v11 = -1;\n            v7 = a2;\n            if (*(int64_t *)(a1 + 64) == 0) {\n                // 0x407ef8\n                v4 = v30;\n                v12 = 0x186a0;\n                v10 = 1;\n                v9 = a2;\n                v6 = (int64_t)*v31;\n                goto lab_0x4077b4;\n            } else {\n                goto lab_0x4077ab;\n            }\n        }\n    }\n  lab_0x407cc0_2:;\n    // 0x407cc0\n    int64_t v32; // 0x4078e4\n    free((int64_t *)v32);\n    int64_t v33; // 0x407760\n    function_407030(v33);\n    closedir((struct __dirstream *)*dirp2);\n    *dirp2 = 0;\n    *(int16_t *)(a1 + 112) = 7;\n    int32_t * v34; // 0x407760\n    *v34 = *v34 | 0x4000;\n    return 0;\n  lab_0x407a3c_2:;\n    // 0x407a3c\n    int64_t v35; // 0x407760\n    int64_t v36 = v35; // 0x407a49\n    int64_t v37; // 0x407760\n    int64_t v38 = v37; // 0x407a49\n    int64_t v39; // 0x407760\n    int64_t v40 = v39; // 0x407a49\n    char * v41; // 0x407760\n    char * v42 = v41; // 0x407a49\n    int64_t v43 = v35; // 0x407a49\n    int64_t result2 = v37; // 0x407a49\n    int64_t v44 = v39; // 0x407a49\n    char v45; // 0x407760\n    if (v45 == 0) {\n        goto lab_0x407d91;\n    } else {\n        goto lab_0x407a4f;\n    }\n  lab_0x4078cc:;\n    // 0x4078cc\n    char * str; // 0x407760\n    uint64_t len = (int64_t)strlen(str); // 0x4078d3\n    int64_t v46; // 0x407760\n    v32 = function_406fa0(a1, v46, len);\n    if (v32 == 0) {\n        goto lab_0x407cc0_2;\n    }\n    // 0x4078f5\n    int64_t v47; // 0x407760\n    int64_t v48 = v47; // 0x4078fa\n    char v49; // 0x407760\n    char v50 = v49; // 0x4078fa\n    int64_t v51; // 0x407760\n    int64_t v52 = v51; // 0x4078fa\n    int64_t v53 = a1; // 0x4078fa\n    int64_t v54; // 0x407760\n    int64_t v55; // 0x407760\n    int64_t v56; // 0x407802\n    int64_t * v57; // 0x407802\n    int64_t v58; // 0x407760\n    int64_t * v59; // 0x407760\n    if (v51 <= len) {\n        char v60 = function_407320(v58, v56, v55 + 2 + len);\n        if (v60 == 0) {\n            goto lab_0x407cc0_2;\n        }\n        int64_t v61 = *v59; // 0x4079c0\n        char v62 = v49; // 0x4079c9\n        int64_t v63 = v47; // 0x4079c9\n        if (v61 != *v59) {\n            // 0x4079cf\n            v63 = (*v41 & 4) == 0 ? v47 : v61 + v54;\n            v62 = v60;\n        }\n        // 0x4079e3\n        v48 = v63;\n        v50 = v62;\n        v52 = *v57 - v54;\n        v53 = v58;\n    }\n    uint64_t v64 = v54 + len; // 0x407903\n    int32_t * v65; // 0x40789a\n    if (v64 < len) {\n        // 0x4080c0\n        free((int64_t *)v32);\n        function_407030(v33);\n        closedir((struct __dirstream *)*dirp2);\n        *dirp2 = 0;\n        *(int16_t *)(a1 + 112) = 7;\n        *v34 = *v34 | 0x4000;\n        *v65 = 36;\n        goto lab_0x407d12;\n    }\n    int64_t v66 = v52;\n    v45 = v50;\n    v35 = v48;\n    int64_t v67 = v32 + 264; // 0x407913\n    int64_t * v68; // 0x407817\n    *(int64_t *)(v32 + 88) = *v68 + 1;\n    *(int64_t *)(v32 + 72) = v64;\n    *(int64_t *)(v32 + 8) = v53;\n    struct dirent * v69; // 0x4078ab\n    *(int64_t *)(v32 + 128) = *(int64_t *)v69;\n    int32_t v70 = *v34; // 0x407933\n    int32_t v71; // 0x407760\n    if ((v70 & 4) != 0) {\n        // 0x407a00\n        *(int64_t *)(v32 + 48) = *(int64_t *)(v32 + 56);\n        int64_t v72 = *(int64_t *)(v32 + 96); // 0x407a0d\n        memmove((int64_t *)v35, (int64_t *)v67, (int32_t)v72 + 1);\n        v71 = *v34;\n    } else {\n        // 0x40793e\n        *(int64_t *)(v32 + 48) = v67;\n        v71 = v70;\n    }\n    int64_t v73 = v71;\n    int64_t v74; // 0x407760\n    int64_t v75; // 0x407760\n    int64_t v76; // 0x407760\n    int64_t v77; // 0x407760\n    int64_t v78; // 0x40795c\n    int64_t v79; // 0x40795c\n    int64_t v80; // 0x407760\n    int64_t v81; // 0x4078ab\n    if (*(int64_t *)v80 != 0 == (v73 & 1024) == 0) {\n        // 0x407b28\n        *(int16_t *)(v32 + 112) = (int16_t)function_406cf0(a1, v32, 0);\n        v76 = v32;\n        goto lab_0x407857;\n    } else {\n        unsigned char v82 = *(char *)(v81 + 18); // 0x407952\n        int64_t v83 = v82; // 0x40795a\n        v78 = v83 + 0xffffffff;\n        v79 = v78 & 0xffffffff;\n        v77 = v83;\n        if ((v73 & 24) == 24) {\n            unsigned char v84 = v82 & -5;\n            v77 = 0;\n            if (v84 == 0) {\n                goto lab_0x407968;\n            } else {\n                int64_t v85 = v84; // 0x407af0\n                *(int16_t *)(v32 + 112) = 11;\n                if ((int32_t)v78 < 12) {\n                    int32_t v86 = *(int32_t *)(4 * v79 + (int64_t)&g8); // 0x407ca8\n                    *(int32_t *)(v32 + 144) = v86;\n                    v74 = 1;\n                    v75 = v85;\n                } else {\n                    // 0x407b0f\n                    *(int32_t *)(v32 + 144) = 0;\n                    v74 = 1;\n                    v75 = v85;\n                }\n                goto lab_0x407850;\n            }\n        } else {\n            goto lab_0x407968;\n        }\n    }\n  lab_0x407857:;\n    int64_t v87 = v76;\n    *(int64_t *)(v32 + 16) = 0;\n    int64_t v88; // 0x407760\n    v39 = v88 + 1;\n    int64_t v89; // 0x407760\n    int64_t v90; // 0x407760\n    int64_t v91; // 0x407760\n    int64_t v92; // 0x407760\n    int64_t v93; // 0x407760\n    int64_t v94; // 0x407760\n    char v95; // 0x407760\n    int64_t v96; // 0x407760\n    if (v33 == 0) {\n        // 0x407a28\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v32;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v32;\n        if (v39 >= v12) {\n            goto lab_0x407a3c_2;\n        }\n    } else {\n        // 0x40786b\n        *(int64_t *)(v94 + 16) = v32;\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v33;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v33;\n        if (v39 >= v12) {\n            goto lab_0x407a3c_2;\n        }\n    }\n    goto lab_0x407883;\n  lab_0x407968:\n    // 0x407968\n    *(int16_t *)(v32 + 112) = 11;\n    if ((int32_t)v78 < 12) {\n        int32_t v166 = *(int32_t *)(4 * v79 + (int64_t)&g8); // 0x40797b\n        *(int32_t *)(v32 + 144) = v166;\n        v74 = 2;\n        int64_t v167; // 0x407760\n        v75 = v167;\n    } else {\n        // 0x407840\n        *(int32_t *)(v32 + 144) = 0;\n        v74 = 2;\n        v75 = v77;\n    }\n    goto lab_0x407850;\n  lab_0x407883:;\n    int64_t v97 = *dirp2; // 0x40788d\n    int64_t dirp3 = v97; // 0x407894\n    int64_t v98 = v91; // 0x407894\n    int64_t v99 = v90; // 0x407894\n    int64_t v100 = v93; // 0x407894\n    int64_t v101 = v89; // 0x407894\n    int64_t v102 = v92; // 0x407894\n    char v103 = v95; // 0x407894\n    int64_t v104 = v96; // 0x407894\n    int64_t v105 = v96; // 0x407894\n    char v106 = v95; // 0x407894\n    int64_t v107 = v93; // 0x407894\n    int64_t v108 = v90; // 0x407894\n    if (v97 == 0) {\n        goto lab_0x407d86;\n    }\n    goto lab_0x40789a;\n  lab_0x407850:\n    // 0x407850\n    *(int64_t *)(v32 + 168) = v74;\n    v76 = v75;\n    goto lab_0x407857;\n  lab_0x407ed2:\n    // 0x407ed2\n    *dirp2 = 0;\n    if ((int32_t)v1 != 3) {\n        // 0x407d12\n        return 0;\n    }\n    goto lab_0x408009;\n  lab_0x408009:\n    // 0x408009\n    *(int16_t *)(a1 + 112) = 4;\n    *(int32_t *)(a1 + 64) = *__errno_location();\n    // 0x407d12\n    return 0;\n  lab_0x4077ab:\n    // 0x4077ab\n    v4 = v2;\n    v12 = v11;\n    v10 = 1;\n    v9 = v7;\n    v6 = (int64_t)*v3;\n    goto lab_0x4077b4;\n  lab_0x407f10:\n    // 0x407f10\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v8;\n    v6 = (int64_t)*v16;\n    goto lab_0x4077b4;\n  lab_0x4077b4:;\n    int64_t v111 = *(int64_t *)v4; // 0x4077b4\n    char v112 = *(char *)(v111 - 1 + *(int64_t *)(a1 + 56)); // 0x4077ca\n    v55 = v111 + (int64_t)(v112 == 47);\n    int64_t v113 = 0; // 0x4077eb\n    if ((v6 & 4) != 0) {\n        int64_t v114 = *(int64_t *)(a1 + 32) + v55; // 0x4077f2\n        *(char *)v114 = 47;\n        v113 = v114 + 1;\n    }\n    // 0x407802\n    v54 = v111 + (int64_t)(v112 != 47);\n    v56 = a1 + 48;\n    v57 = (int64_t *)v56;\n    v68 = (int64_t *)(a1 + 88);\n    int64_t v115 = *dirp2; // 0x40788d\n    if (v115 == 0) {\n        // 0x407802\n        v42 = (char *)v4;\n        v43 = v113;\n        result2 = 0;\n        v44 = 0;\n        goto lab_0x407d91;\n    } else {\n        // 0x40789a\n        v41 = (char *)v4;\n        v58 = a1 + 32;\n        v59 = (int64_t *)v58;\n        v34 = (int32_t *)v4;\n        v80 = a1 + 64;\n        dirp3 = v115;\n        v98 = v9;\n        v99 = 0;\n        v100 = 0;\n        v101 = 0;\n        v102 = *v57 - v54;\n        v103 = 0;\n        v104 = v113;\n        while (true) {\n          lab_0x40789a:\n            // 0x40789a\n            v47 = v104;\n            v49 = v103;\n            v33 = v100;\n            v88 = v99;\n            int64_t v109 = v98;\n            v65 = __errno_location();\n            *v65 = 0;\n            v69 = readdir((struct __dirstream *)dirp3);\n            if (v69 == NULL) {\n                // break -> 0x407e70\n                break;\n            }\n            // 0x4078bc\n            v51 = v102;\n            v94 = v101;\n            v81 = (int64_t)v69;\n            v46 = v81 + 19;\n            str = (char *)v46;\n            if ((*v41 & 32) != 0) {\n                goto lab_0x4078cc;\n            } else {\n                // 0x4078c2\n                if (*str == 46) {\n                    int64_t v110 = v81 + 20; // 0x407ad0\n                    v96 = v47;\n                    v95 = v49;\n                    v92 = v51;\n                    v93 = v33;\n                    v90 = v88;\n                    v91 = v109;\n                    v89 = v94;\n                    if (*(char *)v110 == 0) {\n                        goto lab_0x407883;\n                    } else {\n                        // 0x407ad6\n                        v96 = v47;\n                        v95 = v49;\n                        v92 = v51;\n                        v93 = v33;\n                        v90 = v88;\n                        v91 = v109;\n                        v89 = v94;\n                        if (*(int16_t *)v110 != 46) {\n                            goto lab_0x4078cc;\n                        } else {\n                            goto lab_0x407883;\n                        }\n                    }\n                } else {\n                    goto lab_0x4078cc;\n                }\n            }\n        }\n        int32_t v116 = *v65; // 0x407e70\n        if (v116 != 0) {\n            // 0x407e80\n            *(int32_t *)v80 = v116;\n            *(int16_t *)(a1 + 112) = (v88 | dirp) == 0 ? 4 : 7;\n        }\n        int64_t dirp4 = *dirp2; // 0x407e9d\n        v105 = v47;\n        v106 = v49;\n        v107 = v33;\n        v108 = v88;\n        if (dirp4 != 0) {\n            // 0x407eaa\n            closedir((struct __dirstream *)dirp4);\n            *dirp2 = 0;\n            v105 = v47;\n            v106 = v49;\n            v107 = v33;\n            v108 = v88;\n        }\n      lab_0x407d86:\n        // 0x407d86\n        v36 = v105;\n        v38 = v107;\n        v40 = v108;\n        v42 = v41;\n        v43 = v105;\n        result2 = v107;\n        v44 = v108;\n        if (v106 != 0) {\n            goto lab_0x407a4f;\n        } else {\n            goto lab_0x407d91;\n        }\n    }\n  lab_0x407c15:;\n    int64_t v117 = v13 & 0xffffffff; // 0x407b9b\n    int64_t v118 = v18 == 3;\n    char v119 = 1;\n    int64_t v120 = v117; // 0x407c1a\n    int16_t * v121; // 0x407760\n    int16_t v122; // 0x407760\n    int64_t v123; // 0x407760\n    int64_t v124; // 0x407760\n    int64_t v125; // 0x407760\n    int64_t v126; // 0x407760\n    int64_t v127; // 0x407760\n    if ((*(char *)(a1 + 73) & 2) != 0) {\n        int64_t v128 = function_40bde0(v117, 1030, 3, v5); // 0x407f91\n        int64_t v129 = v128 & 0xffffffff; // 0x407f96\n        v120 = v129;\n        if ((int32_t)v128 >= 0) {\n            goto lab_0x407c20;\n        } else {\n            int16_t * v130 = (int16_t *)(a1 + 114);\n            int64_t dirp5 = *dirp2; // 0x407fa5\n            int16_t v131 = *v130 | 1;\n            v121 = v130;\n            v123 = v129;\n            v122 = v131;\n            v126 = 1030;\n            v124 = dirp5;\n            if (v119 != 0 == (v118 != 0)) {\n                goto lab_0x407c4d;\n            } else {\n                // 0x407fba\n                *v130 = v131;\n                closedir((struct __dirstream *)dirp5);\n                v127 = 1030;\n                v125 = (int64_t)*v16;\n                goto lab_0x407c8f;\n            }\n        }\n    } else {\n        goto lab_0x407c20;\n    }\n  lab_0x407d91:\n    // 0x407d91\n    if ((*v42 & 4) != 0) {\n        int64_t v132 = *v57; // 0x407d9d\n        *(char *)(v43 + (int64_t)(v44 == 0 | v132 == v54)) = 0;\n    }\n    // 0x407db6\n    if (dirp != 0 || v10 == 0) {\n        goto lab_0x407e28;\n    } else {\n        // 0x407dc5\n        if ((int32_t)v1 == 1 || v44 == 0) {\n            // 0x407e08\n            int64_t v133; // 0x407760\n            if (*v68 != 0) {\n                int64_t v134 = function_407440(a1, *(int64_t *)(a1 + 8), 0xffffffff, (int32_t)\"..\"); // 0x407fde\n                v133 = v134;\n            } else {\n                // 0x407e13\n                v133 = function_4072c0(a1);\n            }\n            // 0x407e20\n            if ((int32_t)v133 != 0) {\n                // 0x408024\n                *(int16_t *)(a1 + 112) = 7;\n                int32_t * v135 = (int32_t *)v4; // 0x408033\n                *v135 = *v135 | 0x4000;\n                function_407030(result2);\n                // 0x407d12\n                return 0;\n            }\n            goto lab_0x407e28;\n        } else {\n            goto lab_0x407dd1;\n        }\n    }\n  lab_0x407a4f:;\n    int64_t v136 = *(int64_t *)(a1 + 8); // 0x407a4f\n    int64_t v137 = *v59; // 0x407a53\n    if (v136 != 0) {\n        int64_t * v138 = (int64_t *)(v136 + 48); // 0x407a60\n        int64_t v139 = *v138; // 0x407a60\n        int64_t * v140 = (int64_t *)(v136 + 56);\n        if (v139 != v136 + 264) {\n            // 0x407a70\n            *v138 = v139 + v137 - *v140;\n        }\n        // 0x407a7b\n        *v140 = v137;\n        int64_t v141 = *(int64_t *)(v136 + 16); // 0x407a7f\n        int64_t v142 = v141; // 0x407a86\n        while (v141 != 0) {\n            // 0x407a60\n            v138 = (int64_t *)(v142 + 48);\n            v139 = *v138;\n            v140 = (int64_t *)(v142 + 56);\n            if (v139 != v142 + 264) {\n                // 0x407a70\n                *v138 = v139 + v137 - *v140;\n            }\n            // 0x407a7b\n            *v140 = v137;\n            v141 = *(int64_t *)(v142 + 16);\n            v142 = v141;\n        }\n    }\n    // 0x407a88\n    v42 = v41;\n    v43 = v36;\n    result2 = v38;\n    v44 = v40;\n    if (*(int64_t *)(v38 + 88) >= 0) {\n        int64_t * v143 = (int64_t *)(v38 + 48); // 0x407a9e\n        int64_t v144 = *v143; // 0x407a9e\n        int64_t * v145 = (int64_t *)(v38 + 56);\n        if (v144 != v38 + 264) {\n            // 0x407aae\n            *v143 = v144 + v137 - *v145;\n        }\n        int64_t v146 = *(int64_t *)(v38 + 16); // 0x407ab9\n        *v145 = v137;\n        int64_t v147 = v146; // 0x407ac4\n        if (v146 == 0) {\n            // 0x407ac6\n            v147 = *(int64_t *)(v38 + 8);\n        }\n        // 0x407a90\n        v42 = v41;\n        v43 = v36;\n        result2 = v38;\n        v44 = v40;\n        while (*(int64_t *)(v147 + 88) >= 0) {\n            int64_t v148 = v147;\n            v143 = (int64_t *)(v148 + 48);\n            v144 = *v143;\n            v145 = (int64_t *)(v148 + 56);\n            if (v144 != v148 + 264) {\n                // 0x407aae\n                *v143 = v144 + v137 - *v145;\n            }\n            // 0x407ab9\n            v146 = *(int64_t *)(v148 + 16);\n            *v145 = v137;\n            v147 = v146;\n            if (v146 == 0) {\n                // 0x407ac6\n                v147 = *(int64_t *)(v148 + 8);\n            }\n            // 0x407a90\n            v42 = v41;\n            v43 = v36;\n            result2 = v38;\n            v44 = v40;\n        }\n    }\n    goto lab_0x407d91;\n  lab_0x407c20:;\n    int64_t v149 = function_407440(a1, a1, v120, 0); // 0x407c2a\n    v3 = v16;\n    v2 = v14;\n    v11 = v17;\n    v7 = a1;\n    int16_t * v150; // 0x407760\n    int16_t v151; // 0x407760\n    int64_t v152; // 0x407760\n    int64_t dirp6; // 0x407760\n    int64_t v153; // 0x407760\n    if ((int32_t)v149 == 0) {\n        goto lab_0x4077ab;\n    } else {\n        int16_t * v154 = (int16_t *)(a1 + 114);\n        int64_t v155 = *dirp2; // 0x407c3c\n        int16_t v156 = *v154 | 1;\n        v121 = v154;\n        v123 = v120;\n        v122 = v156;\n        v126 = a1;\n        v124 = v155;\n        v150 = v154;\n        v152 = v120;\n        v151 = v156;\n        v153 = a1;\n        dirp6 = v155;\n        if (v119 == 0 || v118 == 0) {\n            goto lab_0x407c62;\n        } else {\n            goto lab_0x407c4d;\n        }\n    }\n  lab_0x407e28:\n    // 0x407e28\n    if (v44 == 0) {\n        if ((int32_t)v1 != 3) {\n            // 0x407e38\n            function_407030(result2);\n            // 0x407d12\n            return 0;\n        }\n        int16_t * v157 = (int16_t *)(a1 + 112); // 0x408098\n        switch (*v157) {\n            case 4: {\n            }\n            case 7: {\n                // 0x407e38\n                function_407030(result2);\n                // 0x407d12\n                return 0;\n            }\n        }\n        // 0x4080b1\n        *v157 = 6;\n        // 0x407e38\n        function_407030(result2);\n        // 0x407d12\n        return 0;\n    }\n    goto lab_0x407dd1;\n  lab_0x407dd1:;\n    int64_t * v158 = (int64_t *)(a1 + 64); // 0x407dd1\n    int64_t v159 = *v158; // 0x407dd1\n    int64_t v160 = v159; // 0x407ddc\n    if (v44 >= 0x2711) {\n        if (v159 != 0) {\n            // 0x407de7\n            uint64_t v161; // 0x407760\n            int64_t v162; // 0x407760\n            return function_406ea0(a1, v162, v161);\n        }\n        // 0x40804e\n        int64_t v163; // 0x407760\n        switch (function_4070c0(a1, v163)) {\n            case 0x1021994: {\n            }\n            case 0x6969: {\n                // 0x407e50\n                v160 = *v158;\n                // break -> 0x407e58\n                break;\n            }\n            default: {\n                // 0x40806e\n                *v158 = 0x406cc0;\n                int64_t result = function_406ea0(a1, result2, v44); // 0x408081\n                *v158 = 0;\n                // 0x407d12\n                return result;\n            }\n        }\n    }\n    // 0x407e58\n    if (v44 == 1 || v160 == 0) {\n        // 0x407d12\n        return result2;\n    }\n    // 0x407de7\n    return function_406ea0(a1, result2, v44);\n  lab_0x407c4d:\n    // 0x407c4d\n    *(int32_t *)v15 = *__errno_location();\n    v150 = v121;\n    v152 = v123;\n    v151 = v122;\n    v153 = v126;\n    dirp6 = v124;\n    goto lab_0x407c62;\n  lab_0x407c62:\n    // 0x407c62\n    *v150 = v151;\n    closedir((struct __dirstream *)dirp6);\n    uint32_t v164 = *v16; // 0x407c6c\n    int64_t v165 = v164; // 0x407c6c\n    *dirp2 = 0;\n    v127 = v153;\n    v125 = v165;\n    if ((v164 & 512) != 0) {\n        uint32_t fd2 = (int32_t)v152; // 0x407c80\n        v127 = v153;\n        v125 = v165;\n        if (fd2 >= 0) {\n            // 0x407c84\n            close(fd2);\n            v127 = v153;\n            v125 = (int64_t)*v16;\n        }\n    }\n    goto lab_0x407c8f;\n  lab_0x407c8f:\n    // 0x407c8f\n    *dirp2 = 0;\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v127;\n    v6 = v125;\n    goto lab_0x4077b4;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "408120",
            "funcEndAddr": "4084b9",
            "decompiledFuncCode": "int64_t fts_open(int64_t a1, uint32_t a2, int64_t a3) {\n    int64_t v1 = a2;\n    if ((v1 & 18) == 0 || a2 >= 0x2000 || (v1 & 516) == 516) {\n        // 0x4083c0\n        *__errno_location() = 22;\n        // 0x4083ad\n        return 0;\n    }\n    int64_t * mem = calloc(128, 1); // 0x408168\n    int64_t result = (int64_t)mem; // 0x408168\n    if (mem == NULL) {\n        // 0x4083ad\n        return result;\n    }\n    // 0x408179\n    *(int64_t *)(result + 64) = a3;\n    if ((v1 & 2) != 0) {\n        // 0x408400\n        *(int32_t *)(result + 72) = a2 & -517 | 4;\n    } else {\n        // 0x408187\n        *(int32_t *)(result + 72) = a2;\n    }\n    int32_t * v2 = (int32_t *)(result + 44); // 0x40818e\n    *v2 = -100;\n    int64_t v3 = a1; // 0x4081a4\n    uint64_t v4 = 0;\n    uint64_t len = (int64_t)strlen((char *)128); // 0x4081a8\n    int64_t v5 = v4 < len ? len : v4; // 0x4081b0\n    v3 += 8;\n    int64_t str = *(int64_t *)v3; // 0x4081b8\n    while (str != 0) {\n        // 0x4081a8\n        v4 = v5;\n        len = (int64_t)strlen((char *)str);\n        v5 = v4 < len ? len : v4;\n        v3 += 8;\n        str = *(int64_t *)v3;\n    }\n    uint64_t v6 = v5 + 1; // 0x4081c0\n    int64_t v7 = result + 32; // 0x4081d9\n    char v8 = function_407320(v7, result + 48, v6 > 0x1000 ? v6 : 0x1000); // 0x4081e2\n    if (v8 == 0) {\n        // 0x4083eb\n        free(mem);\n        // 0x4083ad\n        return 0;\n    }\n    int64_t v9; // 0x408120\n    int64_t v10; // 0x408120\n    int64_t v11; // 0x408120\n    char v12; // 0x408120\n    char * v13; // 0x408120\n    char * v14; // 0x40820d\n    if (v7 == 0) {\n        // 0x408410\n        v14 = NULL;\n        v10 = 0;\n        v13 = NULL;\n        v9 = 0;\n        if (a3 != 0) {\n            goto lab_0x408233;\n        } else {\n            goto lab_0x40835c;\n        }\n    } else {\n        int64_t v15 = function_406fa0(result, (int64_t)&g10, 0); // 0x408205\n        if (v15 == 0) {\n            goto lab_0x4083e2;\n        } else {\n            // 0x40821b\n            v14 = (char *)v15;\n            *(int64_t *)(v15 + 88) = -1;\n            *(int64_t *)(v15 + 104) = -1;\n            v10 = result;\n            v12 = v8;\n            v11 = result;\n            if (a3 == 0) {\n                goto lab_0x408240;\n            } else {\n                goto lab_0x408233;\n            }\n        }\n    }\n  lab_0x4082d8:;\n    // 0x4082d8\n    int64_t v16; // 0x408120\n    int64_t v17; // 0x408279\n    *(int64_t *)(v17 + 16) = v16;\n    int64_t v18; // 0x408120\n    int64_t v19 = v18; // 0x4082dc\n    int64_t v20 = v17; // 0x4082dc\n    goto lab_0x4082df;\n  lab_0x4082df:;\n    int64_t v21 = v20;\n    int64_t v22; // 0x408120\n    int64_t v23 = v22 + 1; // 0x4082df\n    int64_t v24 = *(int64_t *)(8 * v23 + a1); // 0x4082e3\n    int64_t v25 = v19; // 0x4082eb\n    int64_t v26 = v23; // 0x4082eb\n    int64_t v27 = v21; // 0x4082eb\n    int64_t v28 = v24; // 0x4082eb\n    if (v24 == 0) {\n        // 0x408340\n        v13 = v14;\n        v9 = v21;\n        if (a3 == 0 || v23 < 2) {\n            goto lab_0x40835c;\n        } else {\n            // 0x40834b\n            v13 = v14;\n            v9 = function_406ea0(result, v21, v23);\n            goto lab_0x40835c;\n        }\n    }\n    goto lab_0x4082ed;\n  lab_0x408470:\n    // 0x408470\n    *(int64_t *)(v18 + 16) = v17;\n    v19 = v17;\n    v20 = v16;\n    goto lab_0x4082df;\n  lab_0x408233:\n    // 0x408233\n    v12 = (char)(*(int32_t *)(result + 72) / 1024) % 2;\n    v11 = v10;\n    goto lab_0x408240;\n  lab_0x40835c:;\n    int64_t v35 = function_406fa0(result, (int64_t)&g10, 0); // 0x408366\n    *mem = v35;\n    char * v33 = v13; // 0x408371\n    int64_t v34 = v9; // 0x408371\n    if (v35 != 0) {\n        // 0x408373\n        *(int64_t *)(v35 + 16) = v9;\n        int32_t * v36 = (int32_t *)(result + 72); // 0x40837c\n        *(int16_t *)(v35 + 112) = 9;\n        v33 = v13;\n        v34 = v9;\n        if ((char)function_407390(*v36, result + 88) != 0) {\n            uint32_t v37 = *v36; // 0x408390\n            if ((v37 & 516) == 0) {\n                int32_t v38 = function_4073f0(*v2, (int64_t)v37, (int64_t)\".\"); // 0x4084a5\n                *(int32_t *)(result + 40) = v38;\n                if (v38 < 0) {\n                    int32_t v39 = *v36; // 0x4084b0\n                    *v36 = v39 | 4;\n                }\n            }\n            // 0x40839f\n            function_40b2b0(result + 96, 0xffffffff);\n            // 0x4083ad\n            return result;\n        }\n    }\n    goto lab_0x4083d0;\n  lab_0x4083e2:\n    // 0x4083e2\n    free((int64_t *)*(int64_t *)v7);\n    // 0x4083eb\n    free(mem);\n    // 0x4083ad\n    return 0;\n  lab_0x408240:\n    // 0x408240\n    v13 = v14;\n    v9 = 0;\n    if (v11 == 0) {\n        goto lab_0x40835c;\n    } else {\n        // 0x4082ed\n        v25 = 0;\n        v26 = 0;\n        v27 = 0;\n        v28 = v11;\n        while (true) {\n          lab_0x4082ed:;\n            int64_t str2 = v28;\n            v16 = v27;\n            v22 = v26;\n            v18 = v25;\n            int32_t len2 = strlen((char *)str2); // 0x4082f0\n            int64_t v29 = len2; // 0x4082f0\n            int64_t v30 = v29; // 0x4082f9\n            if ((v1 & 0x1000) == 0 && len2 >= 3) {\n                // 0x40830a\n                v30 = v29;\n                if (*(char *)(str2 - 1 + v29) == 47) {\n                    int64_t v31 = v29;\n                    v30 = v31;\n                    while (*(char *)(str2 - 2 + v31) == 47) {\n                        int64_t v32 = v31 - 1; // 0x40832c\n                        v30 = v32;\n                        if (v31 == 2) {\n                            // break -> 0x408270\n                            break;\n                        }\n                        v31 = v32;\n                        v30 = v31;\n                    }\n                }\n            }\n            // 0x408270\n            v17 = function_406fa0(result, str2, v30);\n            v33 = v14;\n            v34 = v16;\n            if (v17 == 0) {\n                // break -> 0x4083d0\n                break;\n            }\n            // 0x40828a\n            *(int64_t *)(v17 + 88) = 0;\n            *(int64_t *)(v17 + 8) = (int64_t)v14;\n            *(int64_t *)(v17 + 48) = v17 + 264;\n            if (v12 == 0 || v16 == 0) {\n                // 0x408430\n                *(int16_t *)(v17 + 112) = (int16_t)function_406cf0(result, v17, 0);\n                if (a3 != 0) {\n                    goto lab_0x4082d8;\n                } else {\n                    // 0x40844b\n                    *(int64_t *)(v17 + 16) = 0;\n                    v19 = v17;\n                    v20 = v17;\n                    if (v16 != 0) {\n                        goto lab_0x408470;\n                    } else {\n                        goto lab_0x4082df;\n                    }\n                }\n            } else {\n                // 0x4082ba\n                *(int64_t *)(v17 + 168) = 2;\n                *(int16_t *)(v17 + 112) = 11;\n                if (a3 == 0) {\n                    // 0x408468\n                    *(int64_t *)(v17 + 16) = 0;\n                    goto lab_0x408470;\n                } else {\n                    goto lab_0x4082d8;\n                }\n            }\n        }\n        goto lab_0x4083d0;\n    }\n  lab_0x4083d0:\n    // 0x4083d0\n    function_407030(v34);\n    free((int64_t *)v33);\n    goto lab_0x4083e2;\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "4084c0",
            "funcEndAddr": "408639",
            "decompiledFuncCode": "int64_t fts_close(int64_t a1) {\n    if (a1 != 0) {\n        int64_t v1 = a1; // 0x4084d4\n        int64_t v2 = a1; // 0x4084d4\n        if (*(int64_t *)(a1 + 88) >= 0) {\n            while (true) {\n                int64_t v3 = v1;\n                int64_t v4 = *(int64_t *)(v3 + 16); // 0x4084ef\n                int64_t v5; // 0x4084c0\n                if (v4 != 0) {\n                    // 0x4084e0\n                    free((int64_t *)v3);\n                    v5 = v4;\n                    v2 = v4;\n                    if (*(int64_t *)(v4 + 88) < 0) {\n                        // break -> 0x40850b\n                        break;\n                    }\n                } else {\n                    int64_t v6 = *(int64_t *)(v3 + 8); // 0x4084f8\n                    free((int64_t *)v3);\n                    v5 = v6;\n                    v2 = v6;\n                    if (*(int64_t *)(v6 + 88) < 0) {\n                        // break -> 0x40850b\n                        break;\n                    }\n                }\n                // 0x4084ef\n                v1 = v5;\n            }\n        }\n        // 0x40850b\n        free((int64_t *)v2);\n    }\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x408513\n    if (v7 != 0) {\n        // 0x40851c\n        function_407030(v7);\n    }\n    // 0x408521\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)*(int64_t *)(a1 + 32));\n    int32_t * v8 = (int32_t *)(a1 + 72); // 0x408533\n    int32_t v9 = *v8; // 0x408533\n    int32_t * v10; // 0x4084c0\n    int32_t v11; // 0x4084c0\n    if ((v9 & 512) == 0) {\n        // 0x408590\n        v11 = 0;\n        if ((v9 & 4) != 0) {\n            goto lab_0x408544;\n        } else {\n            int32_t * fd = (int32_t *)(a1 + 40); // 0x408594\n            if (fchdir(*fd) != 0) {\n                int32_t * v12 = __errno_location(); // 0x4085f0\n                int32_t v13 = *v12; // 0x4085fb\n                v11 = v13;\n                v10 = v12;\n                if (close(*fd) == 0 || v13 != 0) {\n                    goto lab_0x408544;\n                } else {\n                    goto lab_0x408612;\n                }\n            } else {\n                // 0x4085a0\n                v11 = 0;\n                if (close(*fd) == 0) {\n                    goto lab_0x408544;\n                } else {\n                    // 0x4085ac\n                    v10 = __errno_location();\n                    goto lab_0x408612;\n                }\n            }\n        }\n    } else {\n        int32_t fd2 = *(int32_t *)(a1 + 44); // 0x40853b\n        v11 = 0;\n        if (fd2 >= 0) {\n            // 0x4085c0\n            v11 = 0;\n            if (close(fd2) != 0) {\n                // 0x4085cd\n                v11 = *__errno_location();\n            }\n        }\n        goto lab_0x408544;\n    }\n  lab_0x408544:\n    // 0x408544\n    function_407080(a1 + 96);\n    int64_t v14 = *(int64_t *)(a1 + 80); // 0x40854d\n    if (v14 != 0) {\n        // 0x408556\n        function_40ab30(v14);\n    }\n    int64_t v15 = *(int64_t *)(a1 + 88); // 0x40855b\n    if ((*v8 & 258) == 0) {\n        // 0x4085e0\n        free((int64_t *)v15);\n    } else {\n        if (v15 != 0) {\n            // 0x40856d\n            function_40ab30(v15);\n        }\n    }\n    // 0x408572\n    free((int64_t *)a1);\n    int64_t result = v11; // 0x40857c\n    if (v11 != 0) {\n        // 0x408628\n        *__errno_location() = v11;\n        result = 0xffffffff;\n    }\n    // 0x408582\n    return result;\n  lab_0x408612:\n    // 0x408612\n    v11 = *v10;\n    goto lab_0x408544;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "408640",
            "funcEndAddr": "408d99",
            "decompiledFuncCode": "int64_t fts_read(int64_t result) {\n    // 0x408640\n    if (result == 0) {\n        // 0x40876a\n        return 0;\n    }\n    int32_t * v1 = (int32_t *)(result + 72); // 0x408654\n    uint32_t v2 = *v1; // 0x408654\n    if ((v2 & 0x4000) != 0) {\n        // 0x40876a\n        return 0;\n    }\n    int16_t * v3 = (int16_t *)(result + 116); // 0x408660\n    int16_t v4 = *v3; // 0x408660\n    *v3 = 3;\n    if (v4 == 1) {\n        // 0x408a30\n        *(int16_t *)(result + 112) = (int16_t)function_406cf0(result, result, 0);\n        // 0x40876a\n        return result;\n    }\n    int16_t * v5 = (int16_t *)(result + 112); // 0x40867a\n    int16_t v6 = *v5; // 0x40867a\n    int64_t v7; // 0x408640\n    int64_t v8; // 0x408640\n    int64_t v9; // 0x408640\n    int64_t v10; // 0x408640\n    int64_t v11; // 0x408640\n    int64_t v12; // 0x408640\n    int64_t v13; // 0x408640\n    if (v4 == 2) {\n        if ((v6 || 1) == 13) {\n            int16_t v14 = function_406cf0(result, result, 1); // 0x4089da\n            *v5 = v14;\n            if (v14 == 1) {\n                uint32_t v15 = *v1; // 0x408cc0\n                if ((v15 & 4) == 0) {\n                    int64_t v16 = v15; // 0x408cc0\n                    int32_t v17 = *(int32_t *)(result + 44); // 0x408d33\n                    int32_t v18 = function_4073f0(v17, v16, (int64_t)\".\"); // 0x408d42\n                    *(int32_t *)(result + 68) = v18;\n                    if (v18 < 0) {\n                        int32_t v19 = *__errno_location(); // 0x408d6e\n                        *v5 = 7;\n                        *(int32_t *)(result + 64) = v19;\n                        *(int64_t *)result = result;\n                        // 0x40876a\n                        return result;\n                    }\n                    int16_t * v20 = (int16_t *)(result + 114); // 0x408d49\n                    *v20 = *v20 | 2;\n                    v7 = result;\n                    v10 = (int64_t)\".\";\n                    v12 = v16;\n                    goto lab_0x408977;\n                } else {\n                    // 0x408ccb\n                    *(int64_t *)result = result;\n                    v8 = result;\n                    goto lab_0x40898e;\n                }\n            } else {\n                // 0x4089e8\n                *(int64_t *)result = result;\n                v11 = 1;\n                v9 = result;\n                v13 = result;\n                if (v14 != 11) {\n                    // 0x40876a\n                    return result;\n                }\n                goto lab_0x408a00;\n            }\n        } else {\n            if (v6 != 1) {\n                goto lab_0x4086c0;\n            } else {\n                goto lab_0x408797;\n            }\n        }\n    } else {\n        if (v6 != 1) {\n            goto lab_0x4086c0;\n        } else {\n            if (v4 != 4) {\n                goto lab_0x408797;\n            } else {\n                goto lab_0x408832;\n            }\n        }\n    }\n  lab_0x4086c0:;\n    int64_t * v21 = (int64_t *)result;\n    int64_t v22 = result;\n    int64_t v23 = *(int64_t *)(v22 + 16); // 0x4086c0\n    int64_t result2; // 0x408640\n    int64_t v24; // 0x408640\n    int64_t v25; // 0x408890\n    while (v23 != 0) {\n        // 0x408698\n        *v21 = v23;\n        free((int64_t *)v22);\n        if (*(int64_t *)(v23 + 88) == 0) {\n            // 0x408880\n            if ((int32_t)function_4072c0(result) != 0) {\n                // 0x408c1f\n                *v1 = *v1 | 0x4000;\n                result2 = 0;\n                return result2;\n            } else {\n                // 0x408890\n                v25 = result + 88;\n                int64_t v26 = *(int64_t *)v25; // 0x408890\n                if ((*v1 & 258) == 0) {\n                    // 0x408c2d\n                    free((int64_t *)v26);\n                    goto lab_0x4088ae;\n                } else {\n                    if (v26 == 0) {\n                        goto lab_0x4088ae;\n                    } else {\n                        // 0x4088a9\n                        function_40ab30(v26);\n                        goto lab_0x4088ae;\n                    }\n                }\n            }\n        }\n        int16_t * v27 = (int16_t *)(v23 + 116);\n        int16_t v28 = *v27; // 0x4086af\n        if (v28 != 4) {\n            // 0x408930\n            v24 = v23;\n            if (v28 == 2) {\n                int16_t v29 = function_406cf0(result, v23, 1); // 0x408c54\n                int16_t * v30 = (int16_t *)(v23 + 112); // 0x408c54\n                *v30 = v29;\n                if (v29 == 1) {\n                    uint32_t v31 = *v1; // 0x408cd7\n                    if ((v31 & 4) != 0) {\n                        // 0x408c5e\n                        *v27 = 3;\n                        v24 = v23;\n                        goto lab_0x40893a;\n                    } else {\n                        int32_t v32 = *(int32_t *)(result + 44); // 0x408ce6\n                        int32_t v33 = function_4073f0(v32, (int64_t)v31, (int64_t)\".\"); // 0x408cf5\n                        *(int32_t *)(v23 + 68) = v33;\n                        if (v33 < 0) {\n                            int32_t v34 = *__errno_location(); // 0x408d8b\n                            *v30 = 7;\n                            *(int32_t *)(v23 + 64) = v34;\n                            // 0x408c5e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40893a;\n                        } else {\n                            int16_t * v35 = (int16_t *)(v23 + 114); // 0x408d00\n                            *v35 = *v35 | 2;\n                            // 0x408c5e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40893a;\n                        }\n                    }\n                } else {\n                    // 0x408c5e\n                    *v27 = 3;\n                    v24 = v23;\n                    goto lab_0x40893a;\n                }\n            } else {\n                goto lab_0x40893a;\n            }\n        }\n        v22 = v23;\n        v23 = *(int64_t *)(v22 + 16);\n    }\n    int64_t * v36 = (int64_t *)(v22 + 8); // 0x4086c9\n    int64_t v37 = *v36; // 0x4086c9\n    int64_t result6 = v37; // 0x4086d2\n    if (*(int64_t *)(v37 + 24) != 0) {\n        // 0x408be0\n        *v21 = v37;\n        *(char *)(*(int64_t *)(result + 32) + *(int64_t *)(v37 + 72)) = 0;\n        int64_t v38 = function_407760(result, 3); // 0x408bf9\n        if (v38 != 0) {\n            // 0x408c8f\n            free((int64_t *)v22);\n            v24 = v38;\n            goto lab_0x40893a;\n        } else {\n            // 0x408c0a\n            if ((*(char *)(result + 73) & 64) != 0) {\n                // 0x40876a\n                return 0;\n            }\n            // 0x408c16\n            result6 = *v36;\n            goto lab_0x4086d8;\n        }\n    } else {\n        goto lab_0x4086d8;\n    }\n  lab_0x408797:;\n    int64_t v39 = v2; // 0x408654\n    if ((v39 & 64) == 0) {\n        goto lab_0x4087ab;\n    } else {\n        // 0x40879c\n        if (*(int64_t *)(result + 120) != *(int64_t *)(result + 24)) {\n            goto lab_0x408832;\n        } else {\n            goto lab_0x4087ab;\n        }\n    }\n  lab_0x4086d8:\n    // 0x4086d8\n    *v21 = result6;\n    free((int64_t *)v22);\n    int64_t * v40 = (int64_t *)(result6 + 88); // 0x4086e4\n    if (*v40 == -1) {\n        // 0x408aff\n        free((int64_t *)result6);\n        *__errno_location() = 0;\n        *v21 = 0;\n        // 0x40876a\n        return 0;\n    }\n    // 0x4086ef\n    *(char *)(*(int64_t *)(result6 + 72) + *(int64_t *)(result + 32)) = 0;\n    if (*v40 == 0) {\n        // 0x408b2f\n        if ((int32_t)function_4072c0(result) == 0) {\n            goto lab_0x408726;\n        } else {\n            goto lab_0x408b3f;\n        }\n    } else {\n        uint16_t v41 = *(int16_t *)(result6 + 114); // 0x408712\n        if ((v41 & 2) != 0) {\n            int32_t v42 = *v1; // 0x408ab5\n            int32_t * v43 = (int32_t *)(result6 + 68); // 0x408aba\n            uint32_t fd = *v43; // 0x408aba\n            int32_t fd2 = fd; // 0x408abf\n            if ((v42 & 4) == 0) {\n                if ((v42 & 512) == 0) {\n                    // 0x408c9c\n                    if (fchdir(fd) != 0) {\n                        // 0x408ca5\n                        *(int32_t *)(result6 + 64) = *__errno_location();\n                        *v1 = *v1 | 0x4000;\n                    }\n                    // 0x408cb8\n                    fd2 = *v43;\n                } else {\n                    // 0x408aca\n                    function_407250(result, (int64_t)fd, 1);\n                    fd2 = *v43;\n                }\n            }\n            // 0x408adc\n            close(fd2);\n            goto lab_0x408726;\n        } else {\n            if (v41 % 2 == 0) {\n                int64_t v44 = *(int64_t *)(result6 + 8); // 0x408c6c\n                if ((int32_t)function_407440(result, v44, 0xffffffff, (int32_t)\"..\") == 0) {\n                    goto lab_0x408726;\n                } else {\n                    goto lab_0x408b3f;\n                }\n            } else {\n                goto lab_0x408726;\n            }\n        }\n    }\n  lab_0x408832:\n    // 0x408832\n    if ((*(char *)(result + 114) & 2) != 0) {\n        // 0x408c37\n        close(*(int32_t *)(result + 68));\n    }\n    int64_t * v45 = (int64_t *)(result + 8); // 0x40883c\n    int64_t v46 = *v45; // 0x40883c\n    if (v46 != 0) {\n        // 0x408846\n        function_407030(v46);\n        *v45 = 0;\n    }\n    // 0x408854\n    *v5 = 6;\n    function_4076c0(*v1, result + 88, result);\n    // 0x40876a\n    return result;\n  lab_0x408a00:;\n    int64_t result5 = v9;\n    int64_t result3 = result5; // 0x408a0b\n    if (*(int64_t *)(result5 + 168) != 2) {\n        // 0x40876a\n        return result3;\n    }\n    int64_t v47 = *(int64_t *)(result5 + 8); // 0x408b67\n    int64_t * v48 = (int64_t *)(v47 + 104); // 0x408b6b\n    int64_t v49; // 0x408640\n    int64_t v50; // 0x408640\n    if (*v48 != 0) {\n        goto lab_0x408b83;\n    } else {\n        // 0x408b72\n        if ((*v1 & 24) == 24) {\n            // 0x408d19\n            if ((int32_t)function_4071e0(v47, v13, v11) != 2) {\n                goto lab_0x408b83;\n            } else {\n                // 0x408d2a\n                v49 = (int64_t)*(int16_t *)(result5 + 112);\n                v50 = result5;\n                goto lab_0x408981;\n            }\n        } else {\n            goto lab_0x408b83;\n        }\n    }\n  lab_0x4087ab:;\n    int64_t * v51 = (int64_t *)(result + 8); // 0x4087ab\n    int64_t v52 = *v51; // 0x4087ab\n    int64_t v53; // 0x408640\n    if (v52 == 0) {\n        goto lab_0x408a59;\n    } else {\n        if ((v39 & 0x2000) != 0) {\n            // 0x408a43\n            *v1 = v2 & -0x2001;\n            function_407030(v52);\n            *v51 = 0;\n            goto lab_0x408a59;\n        } else {\n            int64_t v54 = *(int64_t *)(result + 48); // 0x4087c2\n            if ((int32_t)function_407440(result, result, 0xffffffff, (int32_t)v54) == 0) {\n                // 0x408ae6\n                v53 = *v51;\n            } else {\n                int32_t * v55 = __errno_location(); // 0x4087de\n                int64_t v56 = *v51; // 0x4087e3\n                int16_t * v57 = (int16_t *)(result + 114); // 0x4087ea\n                *v57 = *v57 | 1;\n                *(int32_t *)(result + 64) = *v55;\n                v53 = 0;\n                if (v56 != 0) {\n                    *(int64_t *)(v56 + 48) = *(int64_t *)(*(int64_t *)(v56 + 8) + 48);\n                    int64_t v58 = *(int64_t *)(v56 + 16); // 0x40880c\n                    int64_t v59 = v58; // 0x408813\n                    v53 = v56;\n                    while (v58 != 0) {\n                        int64_t v60 = *(int64_t *)(*(int64_t *)(v59 + 8) + 48); // 0x408804\n                        *(int64_t *)(v59 + 48) = v60;\n                        v58 = *(int64_t *)(v59 + 16);\n                        v59 = v58;\n                        v53 = v56;\n                    }\n                }\n            }\n            goto lab_0x408815;\n        }\n    }\n  lab_0x408977:;\n    uint16_t v61 = *(int16_t *)(v7 + 112);\n    *(int64_t *)result = v7;\n    v49 = v61;\n    v50 = v7;\n    v11 = v10;\n    v9 = v7;\n    v13 = v12;\n    if (v61 == 11) {\n        goto lab_0x408a00;\n    } else {\n        goto lab_0x408981;\n    }\n  lab_0x40898e:;\n    int64_t v62 = v8; // 0x408993\n    if (*(int64_t *)(v8 + 88) != 0) {\n        goto lab_0x40899e;\n    } else {\n        goto lab_0x408995;\n    }\n  lab_0x408b83:;\n    int64_t v63 = function_406cf0(result, result5, 0); // 0x408b8b\n    int16_t v64 = v63; // 0x408b96\n    *(int16_t *)(result5 + 112) = v64;\n    v49 = v63;\n    v50 = result5;\n    if ((*(int32_t *)(result5 + 144) & 0xf000) != 0x4000) {\n        goto lab_0x408981;\n    } else {\n        // 0x408bac\n        if (*(int64_t *)(result5 + 88) == 0) {\n            // 0x408d0a\n            result3 = result5;\n            if (v64 != 1) {\n                int64_t v65 = result3;\n                result2 = v65;\n                int64_t result4 = result2;\n                return result4;\n            }\n            goto lab_0x408995;\n        } else {\n            uint64_t v66 = *v48 - 1; // 0x408bbb\n            if (v66 < 0xfffffffffffffffe) {\n                // 0x408d5a\n                *v48 = v66;\n            }\n            // 0x408bc9\n            v62 = result5;\n            if (v64 != 1) {\n                // 0x40876a\n                return result5;\n            }\n            goto lab_0x40899e;\n        }\n    }\n  lab_0x408a59:;\n    int64_t v67 = function_407760(result, 3); // 0x408a61\n    *v51 = v67;\n    v53 = v67;\n    if (v67 == 0) {\n        int32_t v68 = *v1; // 0x408a77\n        if ((v68 & 0x4000) != 0) {\n            // 0x40876a\n            return 0;\n        }\n        // 0x408a88\n        if (*(int32_t *)(result + 64) == 0) {\n            // 0x408aa3\n            function_4076c0(v68, result + 88, result);\n            result2 = result;\n          lab_0x40876a:\n            // 0x40876a\n            return result2;\n        }\n        // 0x408a91\n        if (*v5 != 4) {\n            // 0x408a98\n            *v5 = 7;\n        }\n        // 0x408aa3\n        function_4076c0(v68, result + 88, result);\n        // 0x40876a\n        return result;\n    }\n    goto lab_0x408815;\n  lab_0x40893a:;\n    int64_t v69 = *(int64_t *)(v24 + 8); // 0x40893a\n    int64_t v70 = *(int64_t *)(v69 + 72); // 0x40893e\n    char v71 = *(char *)(v70 - 1 + *(int64_t *)(v69 + 56)); // 0x40894a\n    int64_t v72 = *(int64_t *)(result + 32) + v70 + (int64_t)(v71 == 47); // 0x408953\n    *(char *)v72 = 47;\n    int64_t v73 = *(int64_t *)(v24 + 96) + 1; // 0x408963\n    int64_t v74 = v24 + 264; // 0x408967\n    memmove((int64_t *)(v72 + 1), (int64_t *)v74, (int32_t)v73);\n    v7 = v24;\n    v10 = v73;\n    v12 = v74;\n    goto lab_0x408977;\n  lab_0x408726:;\n    int64_t v75 = (int64_t)*v1; // 0x40872b\n    int64_t v76 = v75; // 0x408730\n    int32_t * v77; // 0x408640\n    int64_t v78; // 0x408640\n    if (*(int16_t *)(result6 + 112) == 2) {\n        goto lab_0x408758;\n    } else {\n        // 0x408726\n        v77 = (int32_t *)(result6 + 64);\n        v78 = v75;\n        goto lab_0x408732;\n    }\n  lab_0x408b3f:;\n    int32_t v79 = *__errno_location(); // 0x408b44\n    int32_t * v80 = (int32_t *)(result6 + 64);\n    *v80 = v79;\n    uint32_t v81 = *v1 | 0x4000; // 0x408b49\n    *v1 = v81;\n    if (*(int16_t *)(result6 + 112) == 2) {\n        // 0x40876a\n        return 0;\n    }\n    // 0x408b5d\n    v77 = v80;\n    v78 = v81;\n    goto lab_0x408732;\n  lab_0x408981:\n    // 0x408981\n    result2 = v50;\n    v8 = v50;\n    if ((int16_t)v49 != 1) {\n        // 0x40876a\n        return result2;\n    }\n    goto lab_0x40898e;\n  lab_0x40899e:;\n    int64_t v93 = function_407610(*v1, result + 88, v62); // 0x4089ae\n    result2 = v62;\n    if ((char)v93 == 0) {\n        // 0x4089bb\n        *__errno_location() = 12;\n        result2 = 0;\n    }\n    // 0x40876a\n    return result2;\n  lab_0x408995:\n    // 0x408995\n    *(int64_t *)(result + 24) = *(int64_t *)(v8 + 120);\n    v62 = v8;\n    goto lab_0x40899e;\n  lab_0x408815:\n    // 0x408815\n    *v51 = 0;\n    v24 = v53;\n    goto lab_0x40893a;\n  lab_0x408758:\n    // 0x408758\n    if ((v76 & 0x4000) != 0) {\n        // 0x40876a\n        return 0;\n    }\n    // 0x40876a\n    return result6;\n  lab_0x408732:\n    // 0x408732\n    if (*v77 != 0) {\n        // 0x408b21\n        int64_t v82; // 0x408640\n        *(int16_t *)(v82 + 112) = 7;\n        int64_t v83; // 0x408640\n        v76 = v83;\n    } else {\n        // 0x40873d\n        *(int16_t *)(result6 + 112) = 6;\n        function_4076c0((int32_t)v78, result + 88, result6);\n        v76 = (int64_t)*v1;\n    }\n    goto lab_0x408758;\n  lab_0x4088ae:;\n    int64_t * v84 = (int64_t *)(v23 + 96); // 0x4088ae\n    int64_t v85 = *v84; // 0x4088ae\n    int64_t str = v23 + 264; // 0x4088b2\n    int64_t * v86 = (int64_t *)(result + 32); // 0x4088b9\n    *(int64_t *)(v23 + 72) = v85;\n    int64_t v87 = v85 + 1; // 0x4088c5\n    int64_t * v88 = (int64_t *)str; // 0x4088c9\n    memmove((int64_t *)*v86, v88, (int32_t)v87);\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4088d6\n    int64_t v89 = v87; // 0x4088de\n    int64_t v90; // 0x4088d6\n    if (found_char_pos == NULL) {\n        goto lab_0x40890b;\n    } else {\n        // 0x4088e0\n        v90 = (int64_t)found_char_pos;\n        if (str == v90) {\n            // 0x408af0\n            v89 = v87;\n            if (*(char *)(v23 + 265) == 0) {\n                goto lab_0x40890b;\n            } else {\n                goto lab_0x4088e9;\n            }\n        } else {\n            goto lab_0x4088e9;\n        }\n    }\n  lab_0x40890b:;\n    int64_t v91 = *v86; // 0x40890b\n    *(int64_t *)(v23 + 56) = v91;\n    *(int64_t *)(v23 + 48) = v91;\n    function_407390(*v1, v25);\n    v7 = v23;\n    v10 = v89;\n    v12 = v25;\n    goto lab_0x408977;\n  lab_0x4088e9:;\n    int64_t str2 = v90 + 1; // 0x4088e9\n    int64_t len = strlen((char *)str2); // 0x4088f0\n    int64_t v92 = len + 1; // 0x4088fe\n    memmove(v88, (int64_t *)str2, (int32_t)v92);\n    *v84 = len;\n    v89 = v92;\n    goto lab_0x40890b;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "408da0",
            "funcEndAddr": "408dc9",
            "decompiledFuncCode": "int64_t fts_set(int64_t a1, int64_t a2, int64_t a3) {\n    if ((uint32_t)(int32_t)a3 < 5) {\n        // 0x408da5\n        *(int16_t *)(a2 + 116) = (int16_t)a3;\n        return 0;\n    }\n    // 0x408db0\n    *__errno_location() = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "408dd0",
            "funcEndAddr": "408f3d",
            "decompiledFuncCode": "int64_t fts_children(int64_t a1, int64_t a2) {\n    int32_t * v1 = __errno_location(); // 0x408ddd\n    if ((a2 & 0xffffdfff) != 0) {\n        // 0x408ec8\n        *v1 = 22;\n        return 0;\n    }\n    // 0x408df1\n    *v1 = 0;\n    char * v2 = (char *)(a1 + 73); // 0x408dfa\n    if ((*v2 & 64) != 0) {\n        // 0x408e6f\n        return 0;\n    }\n    int16_t v3 = *(int16_t *)(a1 + 112); // 0x408e04\n    if (v3 == 9) {\n        // 0x408ef0\n        return *(int64_t *)(a1 + 16);\n    }\n    // 0x408e14\n    if (v3 != 1) {\n        // 0x408e6f\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a1 + 8); // 0x408e1c\n    int64_t v5 = *v4; // 0x408e1c\n    if (v5 != 0) {\n        // 0x408e25\n        function_407030(v5);\n    }\n    int64_t v6 = 1; // 0x408e36\n    if ((int32_t)a2 == 0x2000) {\n        int32_t * v7 = (int32_t *)(a1 + 72); // 0x408e38\n        *v7 = *v7 | 0x2000;\n        v6 = 2;\n    }\n    // 0x408e45\n    int64_t result; // 0x408e66\n    if (*(int64_t *)(a1 + 88) != 0 || *(char *)*(int64_t *)(a1 + 48) == 47) {\n        // 0x408e60\n        result = function_407760(a1, v6);\n        *v4 = result;\n        // 0x408e6f\n        return result;\n    }\n    uint32_t v8 = *(int32_t *)(a1 + 72); // 0x408e57\n    if ((v8 & 4) != 0) {\n        // 0x408e60\n        result = function_407760(a1, v6);\n        *v4 = result;\n        // 0x408e6f\n        return result;\n    }\n    int64_t v9 = function_4073f0(*(int32_t *)(a1 + 44), (int64_t)v8, (int64_t)\".\"); // 0x408e88\n    int32_t fd = v9; // 0x408e8f\n    if (fd < 0) {\n        // 0x408f18\n        *v4 = 0;\n        // 0x408e6f\n        return 0;\n    }\n    // 0x408e97\n    *v4 = function_407760(a1, v6);\n    if ((*v2 & 2) != 0) {\n        // 0x408f00\n        function_407250(a1, v9 & 0xffffffff, 1);\n        // 0x408e6f\n        return *v4;\n    }\n    // 0x408eac\n    if (fchdir(fd) == 0) {\n        // 0x408eb7\n        close(fd);\n        // 0x408e6f\n        return *v4;\n    }\n    // 0x408f27\n    close(fd);\n    // 0x408e6f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408f40",
            "funcStartAddr": "408f40",
            "funcEndAddr": "40901f",
            "decompiledFuncCode": "int64_t function_408f40(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x408f4c\n    uint32_t v2 = *v1; // 0x408f4c\n    int64_t v3 = a2 & 0xffffffff; // 0x408f51\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x408f54\n    uint64_t v5 = (int64_t)*v4; // 0x408f54\n    int64_t v6; // 0x408fc2\n    if (v3 <= v5) {\n      lab_0x408fbc_2:\n        // 0x408fbc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x408f42\n    int64_t v8 = v2; // 0x408f40\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x408fbc\n        goto lab_0x408fbc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x408f78\n    int64_t v17; // 0x408f86\n    int64_t * v18; // 0x408fa0\n    int64_t * v19; // 0x408fa3\n    int64_t v20; // 0x408fae\n    int64_t v21; // 0x408f86\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x408f83\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x408fa0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x408fb7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x408fbc\n            goto lab_0x408fbc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x408fbc\n            goto lab_0x408fbc_2;\n        }\n        // 0x408f72\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x408ffb\n    int64_t * v23 = (int64_t *)v22; // 0x409000\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x409003\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x409000\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x409017\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x408f6d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x408fbc\n            goto lab_0x408fbc_2;\n        }\n        // 0x408f72\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x408f83\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x408fa0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x408fb7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x408fbc\n                goto lab_0x408fbc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x408fbc\n                goto lab_0x408fbc_2;\n            }\n            // 0x408f72\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x408fe0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x409000\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x409017\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x408fbc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409020",
            "funcStartAddr": "409020",
            "funcEndAddr": "40963c",
            "decompiledFuncCode": "int64_t function_409020(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40903f\n    int64_t v2 = *v1; // 0x40903f\n    char * str2 = (char *)v2; // 0x40904c\n    char c = *str2; // 0x40904c\n    int64_t v3 = v2; // 0x409078\n    int64_t v4 = 0; // 0x409020\n    int32_t v5; // 0x409020\n    int64_t v6; // 0x409020\n    int64_t v7; // 0x409020\n    int64_t v8; // 0x409020\n    int64_t v9; // 0x409020\n    int64_t v10; // 0x409020\n    int64_t v11; // 0x409020\n    int64_t v12; // 0x409020\n    int64_t v13; // 0x409020\n    int64_t str3; // 0x409020\n    int64_t v14; // 0x409020\n    int64_t v15; // 0x409020\n    int64_t v16; // 0x409020\n    int64_t v17; // 0x409020\n    int32_t v18; // 0x409020\n    int32_t v19; // 0x409020\n    int32_t v20; // 0x409020\n    int32_t v21; // 0x409020\n    int32_t v22; // 0x409020\n    int32_t v23; // 0x409020\n    int32_t v24; // 0x409020\n    int32_t v25; // 0x409020\n    int32_t v26; // 0x409020\n    int32_t v27; // 0x409020\n    int32_t v28; // 0x409020\n    int32_t v29; // 0x409020\n    int64_t nmemb; // 0x409020\n    int64_t v30; // 0x409020\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40907c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x409078\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x409088\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40908e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x409058\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4090bc\n                int64_t v34; // 0x409020\n                int64_t v35; // 0x409020\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4090c5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x409240;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4090d6\n                int64_t v37 = *(int64_t *)v36; // 0x4090da\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4090b0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4090c5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x409240;\n                        }\n                    }\n                    // 0x4090d6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x409126:\n                    // 0x409126\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x409180;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4092f0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x409180;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4092a0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40914a;\n                                } else {\n                                    // 0x4092ac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40914a;\n                                    } else {\n                                        // 0x4092ba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40914a;\n                                        } else {\n                                            goto lab_0x409180;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40914a;\n                            }\n                        }\n                    }\n                }\n              lab_0x409191:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x409366\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x409512\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x409532\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40957f\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x409599\n                            int64_t v45; // 0x40959b\n                            if (*(char *)v42 != 0) {\n                                // 0x40959b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x409593\n                            while (v17 + nmemb != v42) {\n                                // 0x409595\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40959b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x409588\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4095c0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x409374\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4094cf\n                        free((int64_t *)v17);\n                    }\n                    // 0x4093c9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4093e0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40928e\n                    return 63;\n                }\n                // 0x4091b0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x409234\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x409240:;\n                    int32_t * v49 = (int32_t *)a7; // 0x409250\n                    uint32_t v50 = *v49; // 0x409250\n                    int64_t v51 = v50; // 0x409250\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40925a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x409263\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40948f\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40943a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40928e\n                            return 63;\n                        }\n                        // 0x4092d8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4095ef\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4094ed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x409500\n                                // 0x40928e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4093fe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x409412\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40927b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40927e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x409282\n                    int64_t result = v59; // 0x409288\n                    if (v58 != 0) {\n                        // 0x40928a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40928e\n                    return result;\n                }\n            } else {\n                // 0x40908e\n                v5 = v32;\n            }\n            // break -> 0x4091b5\n            break;\n        }\n    }\n    // 0x4091b5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4091cd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4091d7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40928e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x409319\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x409206\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x409216\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x409180:\n    // 0x409180\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x409180\n    int64_t v63 = *(int64_t *)v62; // 0x409184\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x409191\n        goto lab_0x409191;\n    }\n    goto lab_0x409126;\n  lab_0x40914a:\n    // 0x40914a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x409020\n    int32_t v65; // 0x409020\n    int32_t v66; // 0x409020\n    if (v27 != 0) {\n        goto lab_0x409180;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x409300\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x409180;\n            } else {\n                goto lab_0x409171;\n            }\n        } else {\n            // 0x409165\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40945c\n                int64_t v67 = (int64_t)mem; // 0x40945c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x409180;\n                } else {\n                    // 0x40946f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x409171;\n                }\n            } else {\n                goto lab_0x409171;\n            }\n        }\n    }\n  lab_0x409171:\n    // 0x409171\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x409180;\n}\n"
        },
        {
            "funcName": "function_409640",
            "funcStartAddr": "409640",
            "funcEndAddr": "409c06",
            "decompiledFuncCode": "int64_t function_409640(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x409661\n    if (v3 < 1) {\n        // 0x40981e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40965d\n    int32_t v5 = *(int32_t *)a7; // 0x409669\n    uint64_t v6 = a1 & 0xffffffff; // 0x40966b\n    int64_t v7 = v2; // 0x409670\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x409673\n    *v8 = 0;\n    int64_t v9; // 0x409640\n    int64_t v10; // 0x409640\n    int64_t v11; // 0x409640\n    int64_t v12; // 0x409640\n    int64_t str; // 0x409640\n    int64_t v13; // 0x409640\n    int64_t v14; // 0x409640\n    int64_t v15; // 0x409640\n    int64_t v16; // 0x409640\n    int64_t v17; // 0x409640\n    int32_t v18; // 0x409640\n    char v19; // 0x409640\n    if (v5 == 0) {\n        // 0x409858\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40968a;\n    } else {\n        // 0x409683\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4096d0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4096d3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x409798;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4096e6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4096f6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4097ac;\n                } else {\n                    goto lab_0x409708;\n                }\n            }\n        } else {\n            goto lab_0x40968a;\n        }\n    }\n  lab_0x40968a:\n    // 0x40968a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x409690\n    *v24 = 0;\n    int64_t v25; // 0x409640\n    int64_t v26; // 0x409640\n    int64_t v27; // 0x409640\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x409780\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40978d;\n        }\n        case 43: {\n            // 0x409a90\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40978d;\n        }\n        default: {\n            // 0x4096ac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x409a0f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x409b28\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40978d;\n                } else {\n                    // 0x409a1d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4096ba;\n                }\n            } else {\n                goto lab_0x4096ba;\n            }\n        }\n    }\n  lab_0x409798:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40979f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x409708;\n    } else {\n        goto lab_0x4097ac;\n    }\n  lab_0x4096ba:\n    // 0x4096ba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40978d;\n  lab_0x40978d:\n    // 0x40978d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x409798;\n  lab_0x409708:;\n    uint32_t v30 = *(int32_t *)a7; // 0x409708\n    int64_t v31 = v30; // 0x409708\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40970a\n    if ((int64_t)*v32 > v31) {\n        // 0x40970f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x409712\n    if (*v33 > v30) {\n        // 0x409717\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40971a\n    int64_t v35 = v31; // 0x40971e\n    int64_t v36 = v15; // 0x40971e\n    int64_t v37; // 0x409640\n    int64_t v38; // 0x409640\n    int64_t v39; // 0x409640\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x409888\n        int64_t v41 = v40; // 0x409888\n        v2 = v41;\n        int64_t v42; // 0x409640\n        if (*v33 == v40) {\n            // 0x409a70\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409a78\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x409894\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409898\n                function_408f40(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4098a8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4098b1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4098ba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4098d1\n            int64_t v47 = v45 & 0xffffffff; // 0x4098d5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4098de\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4098e4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4098e6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4098c0\n            int64_t v49 = v48 & 0xffffffff; // 0x4098c0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4098d1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4098de\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4098e4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4098e6;\n                    }\n                }\n                // 0x4098c0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x409a88\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4098e6;\n    } else {\n        goto lab_0x409724;\n    }\n  lab_0x4097ac:\n    // 0x4097ac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4097af\n    int64_t v51 = v12; // 0x4097af\n    int64_t v52 = v14; // 0x4097af\n    if (*(char *)v10 == 0) {\n        goto lab_0x409708;\n    } else {\n        goto lab_0x4097b5;\n    }\n  lab_0x409724:;\n    int32_t v53 = v35; // 0x409724\n    int64_t v54; // 0x409640\n    int64_t v55; // 0x409640\n    int64_t v56; // 0x409640\n    int64_t v57; // 0x409640\n    int64_t v58; // 0x409640\n    int64_t v59; // 0x409640\n    char * v60; // 0x409640\n    int64_t v61; // 0x409640\n    int64_t v62; // 0x409739\n    int64_t v63; // 0x409640\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x409873\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x409876;\n    } else {\n        // 0x40972c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x409640\n        int64_t v66 = v65 ? -1 : 1; // 0x409740\n        int64_t v67 = (int64_t)\"--\"; // 0x409640\n        int64_t v68 = v62; // 0x409640\n        int64_t v69 = 3; // 0x409740\n        unsigned char v70 = *(char *)v68; // 0x409740\n        char v71 = *(char *)v67; // 0x409740\n        char v72 = v71; // 0x409740\n        bool v73 = false; // 0x409740\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x409830\n            if (*(char *)v62 == 45) {\n                // 0x4098f0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4098f0\n                if (c == 0) {\n                    goto lab_0x40983a;\n                } else {\n                    // 0x4098fd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x409980;\n                    } else {\n                        if (c == 45) {\n                            // 0x409b63\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4099d5;\n                        } else {\n                            // 0x40990e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x409980;\n                            } else {\n                                // 0x409913\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409934;\n                                } else {\n                                    // 0x40991a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x409980;\n                                    } else {\n                                        goto lab_0x409934;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40983a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x409750\n            v2 = v75;\n            int32_t v76 = *v32; // 0x409753\n            int64_t v77 = v35 + 1; // 0x409756\n            int32_t v78 = v77; // 0x409759\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x409ac0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x409767\n                    function_408f40(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x409775\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x409876;\n        }\n    }\n  lab_0x4097b5:;\n    // 0x4097b5\n    int64_t v79; // bp-104, 0x409640\n    int64_t v80 = &v79; // 0x40964a\n    int64_t v81 = v50 + 1; // 0x4097b5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4097bc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4097c1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4097c5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4097c9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4097d1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4097d6\n    int32_t c2 = v84; // 0x4097d6\n    char * found_char_pos = strchr(str2, c2); // 0x4097d6\n    int64_t v87 = *v82; // 0x4097db\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4097e5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4097f0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x409ae0\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x409aad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40981e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4097d6\n    char v91 = *(char *)(v90 + 1); // 0x40980b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4097c5\n        if (v91 != 58) {\n            // 0x40981e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409a34\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x409b38\n                *v8 = 0;\n            } else {\n                // 0x409b1c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x409a5e\n            *v83 = 0;\n            // 0x40981e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x409a3e\n        if (v93 != 0) {\n            // 0x409ad0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x409a5e\n            *v83 = 0;\n            // 0x40981e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x409a51\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x409a5e\n            *v83 = 0;\n            // 0x40981e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x409b9a\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x409b4a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x409b51\n        // 0x409a5e\n        *v83 = 0;\n        // 0x40981e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4099a9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4099ab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x409bd0\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x409b81\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x409b88\n            // 0x40981e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4099b6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4099ba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4099d5;\n  lab_0x4098e6:\n    // 0x4098e6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x409724;\n  lab_0x4099d5:;\n    int64_t v99 = function_409020(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4099f3\n    // 0x40981e\n    return v99 & 0xffffffff;\n  lab_0x409876:;\n    int32_t v100 = v55; // 0x409876\n    if (v100 != (int32_t)v59) {\n        // 0x40987a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40981e\n    return 0xffffffff;\n  lab_0x40983a:\n    // 0x40983a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x409841\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40981e\n    return v99 & 0xffffffff;\n  lab_0x409980:\n    // 0x409980\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4097b5;\n  lab_0x409934:\n    // 0x409934\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_409020(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x40995a\n    if ((int32_t)v101 != -1) {\n        // 0x40981e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40996f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x409980;\n}\n"
        },
        {
            "funcName": "function_409c10",
            "funcStartAddr": "409c10",
            "funcEndAddr": "409c66",
            "decompiledFuncCode": "int64_t function_409c10(int64_t a1) {\n    // 0x409c10\n    *(int32_t *)&g45 = g28;\n    *(int32_t *)&g46 = g27;\n    int64_t v1; // 0x409c10\n    int64_t result = function_409640(v1, v1, v1, v1, v1, v1, &g45, a1 & 0xffffffff); // 0x409c36\n    g28 = *(int32_t *)&g45;\n    g52 = (char *)g48;\n    *(int32_t *)&g26 = g47;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409c70",
            "funcStartAddr": "409c70",
            "funcEndAddr": "409c88",
            "decompiledFuncCode": "int64_t function_409c70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409c70\n    return function_409c10(1);\n}\n"
        },
        {
            "funcName": "function_409c90",
            "funcStartAddr": "409c90",
            "funcEndAddr": "409ca3",
            "decompiledFuncCode": "int64_t function_409c90(int64_t a1, int64_t a2, char * a3, char (**a4)[10], int32_t a5, int64_t a6) {\n    // 0x409c90\n    return function_409c10(0);\n}\n"
        },
        {
            "funcName": "function_409cb0",
            "funcStartAddr": "409cb0",
            "funcEndAddr": "409cc5",
            "decompiledFuncCode": "int64_t function_409cb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409cb0\n    return function_409640(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409cd0",
            "funcStartAddr": "409cd0",
            "funcEndAddr": "409ce6",
            "decompiledFuncCode": "int64_t function_409cd0(void) {\n    // 0x409cd0\n    return function_409c10(0);\n}\n"
        },
        {
            "funcName": "function_409cf0",
            "funcStartAddr": "409cf0",
            "funcEndAddr": "409d08",
            "decompiledFuncCode": "int64_t function_409cf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409cf0\n    return function_409640(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409d10",
            "funcStartAddr": "409d10",
            "funcEndAddr": "409d8a",
            "decompiledFuncCode": "int64_t function_409d10(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x409d1b\n    int64_t v2 = (int64_t)&g10; // 0x409d1b\n    int32_t * pwc; // 0x409d10\n    int64_t v3; // 0x409d10\n    int64_t n; // 0x409d10\n    if (a2 == 0) {\n        goto lab_0x409d62;\n    } else {\n        // 0x409d1d\n        if (a3 == 0) {\n            // 0x409d48\n            return -2;\n        }\n        // 0x409d29\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x409d62;\n        } else {\n            goto lab_0x409d34;\n        }\n    }\n  lab_0x409d62:\n    // 0x409d62\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x409d10\n    pwc = (int32_t *)&v4;\n    goto lab_0x409d34;\n  lab_0x409d34:;\n    char * wstr = (char *)v3; // 0x409d3a\n    int64_t ps; // 0x409d10\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x409d3a\n    int64_t result = v5; // 0x409d3a\n    if (v5 < 0xfffffffe) {\n        // 0x409d48\n        return result;\n    }\n    int64_t result2 = result; // 0x409d79\n    if ((char)function_40a000(0, v3) == 0) {\n        // 0x409d7b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x409d48\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409d90",
            "funcStartAddr": "409d90",
            "funcEndAddr": "409eba",
            "decompiledFuncCode": "int64_t function_409d90(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t result = (int64_t)a1;\n    if ((char)a3 == 0) {\n        // 0x409e58\n        *(char *)a1 = 0;\n        return result;\n    }\n    // 0x409da6\n    if (g49 == 0) {\n        int32_t fd = open(\"/proc/self/fd\", O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x409e32\n        if (fd < 0) {\n            // 0x409e3e\n            g49 = -1;\n            return 0;\n        }\n        // 0x409e70\n        int64_t path; // bp-72, 0x409d90\n        __sprintf_chk((char *)&path, 1, 32, \"/proc/self/fd/%d/../fd\", (int64_t)fd);\n        g49 = access((char *)&path, F_OK) == 0 ? 1 : -1;\n        close(fd);\n    }\n    // 0x409db6\n    if (g49 < 0) {\n        // 0x409dfe\n        return 0;\n    }\n    char * str = (char *)a3; // 0x409dbd\n    int32_t len = strlen(str); // 0x409dbd\n    uint64_t size = (int64_t)len + 27; // 0x409dc2\n    int64_t v1 = result; // 0x409dcd\n    if (len != 4005 && size >= 4032) {\n        int64_t * mem = malloc((int32_t)size); // 0x409e10\n        v1 = (int64_t)mem;\n        if (mem == NULL) {\n            // 0x409dfe\n            return 0;\n        }\n    }\n    int64_t result2 = v1;\n    strcpy((char *)(result2 + (int64_t)__sprintf_chk((char *)result2, 1, -1, \"/proc/self/fd/%d/\", a2 & 0xffffffff)), str);\n    // 0x409dfe\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409ec0",
            "funcStartAddr": "409ec0",
            "funcEndAddr": "409f1d",
            "decompiledFuncCode": "int64_t function_409ec0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x409ec7\n    int64_t v2; // 0x409ec0\n    int64_t result = function_40bd60(a1, v2); // 0x409ed8\n    if ((v2 & 32) != 0) {\n        // 0x409f00\n        if ((int32_t)result == 0) {\n            // 0x409f04\n            *__errno_location() = 0;\n        }\n        // 0x409efa\n        return 0xffffffff;\n    }\n    // 0x409ee1\n    if ((int32_t)result == 0) {\n        // 0x409efa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x409ee8\n    if (v1 == 0) {\n        // 0x409eea\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x409efa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409f20",
            "funcStartAddr": "409f20",
            "funcEndAddr": "409f30",
            "decompiledFuncCode": "int64_t function_409f20(int64_t a1) {\n    // 0x409f20\n    *(int64_t *)(a1 + 16) = 0;\n    *(int32_t *)(a1 + 24) = 0x95f616;\n    int64_t result; // 0x409f20\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f30",
            "funcStartAddr": "409f30",
            "funcEndAddr": "409fb0",
            "decompiledFuncCode": "int64_t function_409f30(int64_t a1, int64_t a2) {\n    // 0x409f30\n    if (*(int32_t *)(a1 + 24) != 0x95f616) {\n        // 0x409f92\n        __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 60, \"cycle_check\");\n        return &g57;\n    }\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x409f39\n    int64_t v2 = *v1; // 0x409f39\n    int64_t v3 = *(int64_t *)(a2 + 8); // 0x409f3d\n    if (v2 == 0) {\n        // 0x409f60\n        *v1 = 1;\n        // 0x409f68\n        *(int64_t *)a1 = v3;\n        *(int64_t *)(a1 + 8) = a2;\n        return 0;\n    }\n    if (v3 == a1) {\n        // 0x409f78\n        if (*(int64_t *)(a1 + 8) == a2) {\n            // 0x409f58\n            return 1;\n        }\n    }\n    int64_t v4 = v2 + 1; // 0x409f4b\n    *v1 = v4;\n    if ((v4 & v2) != 0) {\n        // 0x409f58\n        return 0;\n    }\n    // 0x409f87\n    if (v4 == 0) {\n        // 0x409f58\n        return 1;\n    }\n    // 0x409f68\n    *(int64_t *)a1 = v3;\n    *(int64_t *)(a1 + 8) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409fb0",
            "funcStartAddr": "409fb0",
            "funcEndAddr": "409ffa",
            "decompiledFuncCode": "int64_t function_409fb0(int64_t path, int64_t oflag, int32_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x409fc3\n    return function_40ba20((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_40a000",
            "funcStartAddr": "40a000",
            "funcEndAddr": "40a05e",
            "decompiledFuncCode": "int64_t function_40a000(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40a006\n    if (locale == NULL) {\n        // 0x40a033\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40a006\n    bool v2; // 0x40a000\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x40a000\n    int64_t v5 = v1; // 0x40a000\n    int64_t v6 = 2; // 0x40a025\n    unsigned char v7 = *(char *)v5; // 0x40a025\n    char v8 = *(char *)v4; // 0x40a025\n    char v9 = v8; // 0x40a025\n    bool v10 = false; // 0x40a025\n    while (v7 == v8) {\n        // 0x40a018\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40a031\n    int64_t v13 = v1; // 0x40a031\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40a033\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40a031\n    unsigned char v15 = *(char *)v13; // 0x40a04d\n    char v16 = *(char *)v12; // 0x40a04d\n    char v17 = v16; // 0x40a04d\n    bool v18 = false; // 0x40a04d\n    while (v15 == v16) {\n        // 0x40a040\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40a060",
            "funcStartAddr": "40a060",
            "funcEndAddr": "40a0f3",
            "decompiledFuncCode": "int64_t function_40a060(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x40a077\n    if (v1 == -1) {\n        // 0x40a0ef\n        return -1;\n    }\n    int64_t v2 = v1; // 0x40a07f\n    int64_t v3; // 0x40a060\n    while (true) {\n      lab_0x40a088:\n        // 0x40a088\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x40a0e0;\n        } else {\n            goto lab_0x40a0e5;\n        }\n    }\n  lab_0x40a0ef_2:;\n    // 0x40a0ef\n    int64_t result; // 0x40a060\n    return result;\n  lab_0x40a0e5:;\n    int64_t v4 = v3 + 2; // 0x40a0e5\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40a0ef\n        goto lab_0x40a0ef_2;\n    }\n    goto lab_0x40a088;\n  lab_0x40a0e0:\n    // 0x40a0e0\n    result = v3;\n    goto lab_0x40a0e5;\n}\n"
        },
        {
            "funcName": "function_40a100",
            "funcStartAddr": "40a100",
            "funcEndAddr": "40a110",
            "decompiledFuncCode": "int64_t function_40a100(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40a100\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_40a110",
            "funcStartAddr": "40a110",
            "funcEndAddr": "40a117",
            "decompiledFuncCode": "int64_t function_40a110(int64_t a1, int64_t a2) {\n    // 0x40a110\n    int64_t v1; // 0x40a110\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40a120",
            "funcStartAddr": "40a120",
            "funcEndAddr": "40a141",
            "decompiledFuncCode": "int64_t function_40a120(int64_t a1, int64_t a2) {\n    // 0x40a120\n    int64_t v1; // 0x40a120\n    return 16 * v1 + a2;\n}\n"
        },
        {
            "funcName": "function_40a150",
            "funcStartAddr": "40a150",
            "funcEndAddr": "40a269",
            "decompiledFuncCode": "int64_t function_40a150(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_40a120(a1, a2); // 0x40a164\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40a16c\n    int64_t result2 = *v2; // 0x40a16c\n    if (result2 == 0) {\n        // 0x40a1fe\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x40a194\n            if (v3 == 0) {\n                // 0x40a1fe\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x40a1a1\n            int64_t v5 = v3; // 0x40a1a7\n            int64_t v6 = v1; // 0x40a1a7\n            int64_t result = v4; // 0x40a1a7\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40a1dc_2:\n                // 0x40a1dc\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40a1e1\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x40a1f0\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40a1fe\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x40a1b4\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x40a1c1\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40a1dc_2;\n                }\n                // 0x40a1c9\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40a1dc_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40a1fe\n            return 0;\n        }\n    }\n    // 0x40a213\n    if ((char)a4 == 0) {\n        // 0x40a1fe\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x40a218\n    if (v12 == 0) {\n        // 0x40a260\n        *v2 = 0;\n        // 0x40a1fe\n        return result2;\n    }\n    // 0x40a221\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40a22f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a270",
            "funcStartAddr": "40a270",
            "funcEndAddr": "40a2ee",
            "decompiledFuncCode": "int64_t function_40a270(uint64_t a1) {\n    if (a1 == (int64_t)&g12) {\n        // 0x40a2ed\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40a27b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g12) {\n        // 0x40a2da\n        *(int64_t *)a1 = (int64_t)&g12;\n        return 0;\n    }\n    // 0x40a289\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x40a2a4\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x40a2b1\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x40a2b9\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x40a2ed\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40a2f0",
            "funcStartAddr": "40a2f0",
            "funcEndAddr": "40a43a",
            "decompiledFuncCode": "int64_t function_40a2f0(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40a30a\n    uint64_t v2 = *v1; // 0x40a30a\n    if (v2 <= a2) {\n        // 0x40a3f4\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x40a2f0\n    int64_t v8 = a2; // 0x40a2f0\n    int64_t v9; // 0x40a2f0\n    int64_t result; // 0x40a2f0\n    int64_t v10; // 0x40a2f0\n    while (true) {\n      lab_0x40a326_2:\n        // 0x40a326\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x40a326\n        int64_t v12 = *v11; // 0x40a326\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x40a318;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40a32f\n            int64_t v14 = *v13; // 0x40a32f\n            int64_t v15 = v14; // 0x40a337\n            int64_t v16 = v12; // 0x40a337\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x40a354\n                    int64_t v19 = *v18; // 0x40a354\n                    int64_t v20 = function_40a120(v3, v19); // 0x40a35d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x40a362\n                    int64_t v22 = *v21; // 0x40a362\n                    int64_t * v23 = (int64_t *)v20; // 0x40a366\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x40a340\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40a38f\n                            break;\n                        }\n                    } else {\n                        // 0x40a36c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40a38f\n                            break;\n                        }\n                    }\n                    // 0x40a354\n                    v15 = v22;\n                }\n                // 0x40a38f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x40a393\n                v9 = *v1;\n                goto lab_0x40a318;\n            } else {\n                int64_t v26 = function_40a120(v3, v25); // 0x40a3ab\n                int64_t * v27 = (int64_t *)v26; // 0x40a3b0\n                if (*v27 == 0) {\n                    // 0x40a410\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x40a3b9\n                    int64_t * v29; // 0x40a2f0\n                    int64_t v30; // 0x40a2f0\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x40a41f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x40a3f4\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x40a41f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40a3ca\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x40a3d9\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x40a3e1\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40a3ea\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x40a3f4\n                    break;\n                }\n                goto lab_0x40a326_2;\n            }\n        }\n    }\n    // 0x40a3f4\n    return result;\n  lab_0x40a318:;\n    int64_t v36 = v10 + 16; // 0x40a318\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x40a326_2;\n    // 0x40a326\n    goto lab_0x40a326_2;\n}\n"
        },
        {
            "funcName": "function_40a440",
            "funcStartAddr": "40a440",
            "funcEndAddr": "40a445",
            "decompiledFuncCode": "int64_t function_40a440(int64_t a1) {\n    // 0x40a440\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_40a450",
            "funcStartAddr": "40a450",
            "funcEndAddr": "40a455",
            "decompiledFuncCode": "int64_t function_40a450(int64_t a1) {\n    // 0x40a450\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_40a460",
            "funcStartAddr": "40a460",
            "funcEndAddr": "40a465",
            "decompiledFuncCode": "int64_t function_40a460(int64_t a1) {\n    // 0x40a460\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_40a470",
            "funcStartAddr": "40a470",
            "funcEndAddr": "40a4bf",
            "decompiledFuncCode": "int64_t function_40a470(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40a473\n    int64_t result = 0; // 0x40a47c\n    if (v1 <= a1) {\n      lab_0x40a4bd:\n        // 0x40a4bd\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x40a480\n    while (*(int64_t *)v3 == 0) {\n        // 0x40a480\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40a48f\n    int64_t v6 = v5; // 0x40a49b\n    int64_t v7 = 1; // 0x40a49b\n    int64_t v8; // 0x40a470\n    int64_t v9; // 0x40a4a0\n    int64_t v10; // 0x40a4a4\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x40a4a0\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x40a4b0\n    int64_t v12 = v3 + 16; // 0x40a4b4\n    while (v12 < v1) {\n        // 0x40a489\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x40a480\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40a48f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x40a4a0\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40a4ad\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40a4bd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a4c0",
            "funcStartAddr": "40a4c0",
            "funcEndAddr": "40a527",
            "decompiledFuncCode": "int64_t function_40a4c0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40a4c3\n    int64_t v2 = a1; // 0x40a4cf\n    int64_t v3 = 0; // 0x40a4cf\n    int64_t v4 = 0; // 0x40a4cf\n    int64_t v5 = 0; // 0x40a4cf\n    int64_t v6 = 0; // 0x40a4cf\n    int64_t v7; // 0x40a4c0\n    int64_t v8; // 0x40a4c0\n    int64_t v9; // 0x40a4c0\n    if (v1 > a1) {\n        while (true) {\n          lab_0x40a4e1_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x40a4d8;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x40a4e7\n                int64_t v13 = v10 + 1; // 0x40a4eb\n                int64_t v14 = v11 + 1; // 0x40a4ef\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x40a4f6\n                int64_t v16 = v14; // 0x40a4f6\n                if (v12 == 0) {\n                    goto lab_0x40a4d8;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x40a500\n                    int64_t v18 = v16 + 1; // 0x40a504\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x40a500\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40a50d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x40a516\n                        break;\n                    }\n                    goto lab_0x40a4e1_2;\n                }\n            }\n        }\n    }\n  lab_0x40a516:\n    // 0x40a516\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40a51f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40a51e\n    return 0;\n  lab_0x40a4d8:;\n    int64_t v20 = v8 + 16; // 0x40a4d8\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x40a516\n        goto lab_0x40a516;\n    }\n    goto lab_0x40a4e1_2;\n    // 0x40a4e1\n    goto lab_0x40a4e1_2;\n}\n"
        },
        {
            "funcName": "function_40a530",
            "funcStartAddr": "40a530",
            "funcEndAddr": "40a678",
            "decompiledFuncCode": "int64_t function_40a530(uint64_t a1, int64_t a2) {\n    // 0x40a530\n    int128_t v1; // 0x40a530\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x40a543\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x40a547\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40a54e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x40a560\n            while (*(int64_t *)v7 == 0) {\n                // 0x40a560\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40a59d\n                    goto lab_0x40a59d;\n                }\n            }\n        }\n    }\n  lab_0x40a59d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40a5ac\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x40a530\n    int128_t v10; // 0x40a530\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x40a643\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40a64c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x40a5e3;\n        } else {\n            goto lab_0x40a659;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x40a5d6\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x40a659;\n        } else {\n            goto lab_0x40a5e3;\n        }\n    }\n  lab_0x40a5e3:\n    // 0x40a5e3\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x40a5e7\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x40a5e7\n    goto lab_0x40a5ec;\n  lab_0x40a659:\n    // 0x40a659\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40a66a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40a5ec;\n  lab_0x40a5ec:\n    // 0x40a5ec\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_40a680",
            "funcStartAddr": "40a680",
            "funcEndAddr": "40a6d3",
            "decompiledFuncCode": "int64_t function_40a680(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_40a120(a1, result); // 0x40a68a\n    int64_t v2 = *(int64_t *)v1; // 0x40a68f\n    if (v2 == 0) {\n        // 0x40a6bd\n        return 0;\n    }\n    // 0x40a6a3\n    if (v2 == result) {\n        // 0x40a6bd\n        return result;\n    }\n    int64_t v3 = v1; // 0x40a6b4\n    int64_t result2 = v2; // 0x40a6b2\n    while ((char)v1 == 0) {\n        // 0x40a6b4\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40a6bd\n            break;\n        }\n        // 0x40a6a0\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40a6bd\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40a6bd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a6e0",
            "funcStartAddr": "40a6e0",
            "funcEndAddr": "40a728",
            "decompiledFuncCode": "int64_t function_40a6e0(uint64_t a1) {\n    int64_t result = 0; // 0x40a6e5\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x40a6f7\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40a6ee\n    if (v1 <= a1) {\n        // 0x40a6f7\n        return result;\n    }\n    int64_t v2 = a1; // 0x40a6f5\n    int64_t v3 = *(int64_t *)v2; // 0x40a709\n    result = v3;\n    while (v3 == 0) {\n        // 0x40a700\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x40a6f7\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x40a6f7\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a730",
            "funcStartAddr": "40a730",
            "funcEndAddr": "40a79a",
            "decompiledFuncCode": "int64_t function_40a730(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40a120(a1, a2); // 0x40a73c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x40a758\n    while (*(int64_t *)v2 != a2) {\n        // 0x40a750\n        if (v3 == 0) {\n            goto lab_0x40a766;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x40a790\n        return *(int64_t *)v3;\n    }\n  lab_0x40a766:;\n    int64_t v4 = v1 + 16; // 0x40a778\n    int64_t result = 0; // 0x40a77f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x40a770\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x40a783\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x40a783\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a7a0",
            "funcStartAddr": "40a7a0",
            "funcEndAddr": "40a804",
            "decompiledFuncCode": "int64_t function_40a7a0(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40a7a6\n    int64_t result = 0; // 0x40a7aa\n    if (*v1 <= a1) {\n      lab_0x40a7c1:\n        // 0x40a7c1\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40a7af\n    int64_t v4 = v2; // 0x40a7b5\n    int64_t v5; // 0x40a7a0\n    int64_t v6; // 0x40a7a0\n    int64_t v7; // 0x40a7e8\n    int64_t v8; // 0x40a7f1\n    int64_t v9; // 0x40a7d1\n    int64_t v10; // 0x40a7d5\n    if (v3 != 0) {\n        // 0x40a7c8\n        if (v2 >= a3) {\n            // break -> 0x40a7c1\n            break;\n        }\n        // 0x40a7cd\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x40a7e5\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x40a7e0\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40a7e5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x40a7b7\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40a7af\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x40a7c8\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x40a7c1\n                break;\n            }\n            // 0x40a7cd\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40a7e5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x40a7e0\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x40a7e5\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x40a7b7\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x40a7c1\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a810",
            "funcStartAddr": "40a810",
            "funcEndAddr": "40a888",
            "decompiledFuncCode": "int64_t function_40a810(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40a821\n    int64_t result = 0; // 0x40a825\n    if (v1 <= a1) {\n      lab_0x40a844:\n        // 0x40a844\n        return result;\n    }\n    int64_t v2 = a1; // 0x40a83a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x40a838\n    int64_t v5 = v2; // 0x40a838\n    int64_t v6 = v3; // 0x40a838\n    int64_t v7; // 0x40a810\n    int64_t v8; // 0x40a868\n    int64_t v9; // 0x40a86c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x40a868\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x40a878\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40a868\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x40a832\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40a868\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x40a878\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x40a868\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40a83a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x40a844\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a890",
            "funcStartAddr": "40a890",
            "funcEndAddr": "40a8c1",
            "decompiledFuncCode": "int64_t function_40a890(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40a897\n    if (v1 == 0) {\n        // 0x40a8bd\n        return 0;\n    }\n    int64_t result = 0; // 0x40a897\n    v2++;\n    char v3 = *(char *)v2; // 0x40a8b3\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40a8bd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a8d0",
            "funcStartAddr": "40a8d0",
            "funcEndAddr": "40a8f0",
            "decompiledFuncCode": "int64_t function_40a8d0(int64_t a1) {\n    // 0x40a8d0\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_40a8f0",
            "funcStartAddr": "40a8f0",
            "funcEndAddr": "40aa7a",
            "decompiledFuncCode": "int64_t function_40a8f0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40a8f0\n    int128_t v1; // 0x40a8f0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40a92a\n    int64_t result = (int64_t)mem; // 0x40a92a\n    if (mem == NULL) {\n        // 0x40a9da\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40a93b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x40a8f0\n    int128_t v6; // 0x40a8f0\n    if (a2 == 0) {\n        // 0x40a9f0\n        *v4 = (int64_t)&g12;\n        int64_t v7 = function_40a270(v3); // 0x40a9f8\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40a9fd\n        if ((char)v7 == 0) {\n            // 0x40a9d0\n            free(mem);\n            // 0x40a9da\n            return 0;\n        }\n        // 0x40aa09\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40aa53;\n        } else {\n            goto lab_0x40aa0e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_40a270(v3) == 0) {\n            // 0x40a9d0\n            free(mem);\n            // 0x40a9da\n            return 0;\n        }\n        // 0x40a955\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_40a060(a1); // 0x40a963\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40a9d0\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40a9d0\n                free(mem);\n                // 0x40a9da\n                return 0;\n            }\n            // 0x40a981\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40a9d0\n                free(mem);\n                // 0x40a9da\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x40a992\n            int64_t v10 = (int64_t)mem2; // 0x40a992\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40a9d0\n                free(mem);\n                // 0x40a9da\n                return 0;\n            }\n            // 0x40a99f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x40a100 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x40a110 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40a9da\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40aa48\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40aa0e;\n        } else {\n            goto lab_0x40aa53;\n        }\n    }\n  lab_0x40aa53:\n    // 0x40aa53\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40aa63\n    int128_t v13 = v6; // 0x40aa6c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40aa6c\n    goto lab_0x40aa17;\n  lab_0x40aa0e:\n    // 0x40aa0e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40aa17;\n  lab_0x40aa17:\n    // 0x40aa17\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40a9d0\n    free(mem);\n    // 0x40a9da\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40aa80",
            "funcStartAddr": "40aa80",
            "funcEndAddr": "40ab28",
            "decompiledFuncCode": "int64_t function_40aa80(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40aa8a\n    uint64_t v2 = *v1; // 0x40aa8a\n    int64_t result; // 0x40aa80\n    if (v2 <= a1) {\n      lab_0x40ab13:\n        // 0x40ab13\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40aa98\n    while (*v6 == 0) {\n        // 0x40aa98\n        v7 = v5 + 16;\n        int64_t v8; // 0x40aa80\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40ab13\n            goto lab_0x40ab13;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40aaa9\n    int64_t v10 = *v9; // 0x40aaa9\n    int64_t v11 = *v3; // 0x40aaae\n    int64_t v12 = v11; // 0x40aab5\n    int64_t v13 = v10; // 0x40aab5\n    int64_t result2 = v11; // 0x40aab5\n    int64_t * v14; // 0x40aace\n    int64_t v15; // 0x40aace\n    int64_t v16; // 0x40aaca\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40aac5\n            v16 = *v3;\n        }\n        // 0x40aace\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40aac0\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40aac5\n                v16 = *v3;\n            }\n            // 0x40aace\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40aaed\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40ab00\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40ab0d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40aa9c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40aa98\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40ab13\n                goto lab_0x40ab13;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40aaa9\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40aac5\n                v16 = *v3;\n            }\n            // 0x40aace\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40aac0\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40aac5\n                    v16 = *v3;\n                }\n                // 0x40aace\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40aaed\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40ab13\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ab30",
            "funcStartAddr": "40ab30",
            "funcEndAddr": "40ac06",
            "decompiledFuncCode": "int64_t function_40ab30(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40ab3f\n    uint64_t v2 = *v1; // 0x40ab3f\n    int64_t v3 = a1; // 0x40ab43\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40ab93;\n    } else {\n        // 0x40ab45\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40ab93;\n        } else {\n            // 0x40ab4c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40ab61\n                int64_t v6; // 0x40ab58\n                while (v5 == 0) {\n                    // 0x40ab58\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40ab93\n                        goto lab_0x40ab93;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40ab78\n                int64_t v8 = v7; // 0x40ab7f\n                int64_t v9 = v5; // 0x40ab7f\n                int64_t v10; // 0x40ab30\n                int64_t v11; // 0x40ab78\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40ab70\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40ab73\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40ab86\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40ab61\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40ab58\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40ab93\n                            goto lab_0x40ab93;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40ab73\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40ab70\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40ab73\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40ab81\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40ab93;\n            } else {\n                goto lab_0x40abcc;\n            }\n        }\n    }\n  lab_0x40ab93:\n    // 0x40ab93\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40aba0\n        int64_t v14 = v13; // 0x40aba7\n        int64_t v15 = v2; // 0x40aba7\n        int64_t v16; // 0x40abb0\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40abb0\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40abc1\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40abc1\n        int64_t v18 = v15; // 0x40abca\n        int64_t v19 = v17; // 0x40abca\n        while (v15 > v17) {\n            // 0x40aba0\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40abb0\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40abc1\n                v15 = *v1;\n            }\n            // 0x40abc1\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40abcc;\n  lab_0x40abcc:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40abcc\n    if (v20 == 0) {\n        // 0x40abf1\n        free(NULL);\n        free((int64_t *)a1);\n        return &g57;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40abe0\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40abef\n    while (v21 != 0) {\n        // 0x40abe0\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40abf1\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g57;\n}\n"
        },
        {
            "funcName": "function_40ac10",
            "funcStartAddr": "40ac10",
            "funcEndAddr": "40ae0a",
            "decompiledFuncCode": "int64_t function_40ac10(int64_t a1, uint64_t a2) {\n    // 0x40ac10\n    int128_t v1; // 0x40ac10\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40ac1b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40ac10\n        if (a2 < 0) {\n            // 0x40ad90\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40ada0\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40ac30\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40ac39\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40ad82\n        return 0;\n    }\n    uint64_t nmemb = function_40a060(a2); // 0x40ac73\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40ad82\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40acab\n    if (*v6 == nmemb) {\n        // 0x40ad82\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40acbd\n    int64_t v7 = (int64_t)mem; // 0x40acbd\n    int64_t v8 = v7; // bp-104, 0x40acc2\n    if (mem == NULL) {\n        // 0x40ad82\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40ad1a\n    int64_t v10 = *v9; // 0x40ad1a\n    int64_t v11 = function_40a2f0(&v8, a1, 0); // 0x40ad23\n    int64_t result = v11 & 0xffffffff; // 0x40ad28\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40ace4\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40ad46\n        function_40a2f0(v13, v12, 1);\n        function_40a2f0(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40add0\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40ad82\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ae10",
            "funcStartAddr": "40ae10",
            "funcEndAddr": "40b084",
            "decompiledFuncCode": "int64_t function_40ae10(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40ae10\n    int128_t v1; // 0x40ae10\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40ae10\n    int64_t v5 = function_40a150(a1, a2, &v4, 0); // 0x40ae31\n    if (v5 != 0) {\n        // 0x40ae3e\n        if (a3 != NULL) {\n            // 0x40ae45\n            *a3 = v5;\n        }\n        // 0x40ae49\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40ae58\n    uint64_t v7 = *v6; // 0x40ae58\n    int64_t v8; // 0x40ae10\n    int64_t v9; // 0x40ae10\n    int64_t v10; // 0x40ae10\n    int128_t v11; // 0x40ae10\n    int128_t v12; // 0x40ae10\n    int64_t v13; // 0x40ae10\n    if (v7 < 0) {\n        // 0x40aee0\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40aef0\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40aef4\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40aef9\n        int128_t v17 = __asm_addss(v15, v15); // 0x40aefd\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40ae7b;\n        } else {\n            goto lab_0x40af0a;\n        }\n    } else {\n        // 0x40ae61\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40ae65\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40ae69\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40ae6e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40af0a;\n        } else {\n            goto lab_0x40ae7b;\n        }\n    }\n  lab_0x40ae7b:\n    // 0x40ae7b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40ae84\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x40ae8c\n    int128_t v23 = v11; // 0x40ae8c\n    if (v13 == 0) {\n        goto lab_0x40ae92;\n    } else {\n        goto lab_0x40af31;\n    }\n  lab_0x40af0a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40af17\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40af1a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40af23\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40ae92;\n    } else {\n        goto lab_0x40af31;\n    }\n  lab_0x40ae92:;\n    int64_t * v28 = (int64_t *)v4; // 0x40ae97\n    if (*v28 == 0) {\n        // 0x40afa8\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40afb1\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40aea2\n    int64_t v31 = *v30; // 0x40aea2\n    int64_t * v32; // 0x40ae10\n    int64_t v33; // 0x40ae10\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40afcd\n        if (mem == NULL) {\n            // 0x40ae49\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40afcd\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40aeb7\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40aecd\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40af31:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40af31\n    function_40a270(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40af3a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40af3e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40af42\n    int128_t v44; // 0x40ae10\n    if (v42 < 0) {\n        // 0x40b000\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40b010\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40af50\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40af59\n    int128_t v47; // 0x40ae10\n    int64_t v48; // 0x40ae10\n    if (v46 < 0) {\n        // 0x40afe0\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40afed\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40aff0\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40af62\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40af66\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40af6b\n    __asm_comiss_2(v47, __asm_mulss_4(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40af7b\n        int128_t v53 = v52; // 0x40af84\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40b020\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x40af8a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40ae49\n        return 0xffffffff;\n    }\n    goto lab_0x40ae92;\n}\n"
        },
        {
            "funcName": "function_40b090",
            "funcStartAddr": "40b090",
            "funcEndAddr": "40b0cb",
            "decompiledFuncCode": "int64_t function_40b090(int64_t a1, int64_t a2) {\n    // 0x40b090\n    int64_t v1; // bp-16, 0x40b090\n    int64_t v2; // 0x40b090\n    int32_t v3 = function_40ae10(a1, a2, &v1, v2); // 0x40b0a2\n    if (v3 == -1) {\n        // 0x40b0b0\n        return 0;\n    }\n    // 0x40b0a7\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40b0d0",
            "funcStartAddr": "40b0d0",
            "funcEndAddr": "40b2a7",
            "decompiledFuncCode": "int64_t function_40b0d0(int64_t a1) {\n    // 0x40b0d0\n    int128_t v1; // 0x40b0d0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40b0d0\n    int64_t v5; // 0x40b0d0\n    int64_t result = function_40a150(a1, v5, &v4, 1); // 0x40b0e5\n    if (result == 0) {\n        // 0x40b102\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40b0f7\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40b102\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40b110\n    uint64_t v8 = *v7 - 1; // 0x40b114\n    *v7 = v8;\n    int64_t v9; // 0x40b0d0\n    int64_t v10; // 0x40b0d0\n    int64_t v11; // 0x40b0d0\n    int128_t v12; // 0x40b0d0\n    int128_t v13; // 0x40b0d0\n    int64_t v14; // 0x40b0d0\n    if (v8 < 0) {\n        // 0x40b200\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40b210\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40b214\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40b219\n        int128_t v18 = __asm_addss(v16, v16); // 0x40b21d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40b13c;\n        } else {\n            goto lab_0x40b22a;\n        }\n    } else {\n        // 0x40b122\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40b126\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40b12a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40b12f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40b22a;\n        } else {\n            goto lab_0x40b13c;\n        }\n    }\n  lab_0x40b13c:\n    // 0x40b13c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40b140\n    int64_t v23 = v14; // 0x40b140\n    int128_t v24 = v12; // 0x40b140\n    int64_t v25 = v10; // 0x40b140\n    int128_t v26 = v22; // 0x40b140\n    goto lab_0x40b145;\n  lab_0x40b22a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40b237\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40b23a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40b145;\n  lab_0x40b145:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40b145\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x40b102\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40b14e\n    function_40a270(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40b157\n    int64_t v31 = *(int64_t *)v29; // 0x40b15b\n    int128_t v32; // 0x40b0d0\n    if (v30 < 0) {\n        // 0x40b270\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40b280\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40b168\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40b171\n    int128_t v35; // 0x40b0d0\n    int64_t v36; // 0x40b0d0\n    if (v34 < 0) {\n        // 0x40b250\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40b25d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40b260\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40b17e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40b182\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40b187\n    __asm_comiss_2(__asm_mulss_4(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40b102\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40b198\n    int128_t v41 = v40; // 0x40b1a1\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40b1a3\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40b1a8\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40b298\n    if ((char)function_40ac10(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40b102\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40b1ca\n    if (*v43 != 0) {\n        int64_t v44; // 0x40b0d0\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40b1d8\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40b1e9\n    *v43 = 0;\n    // 0x40b102\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b2b0",
            "funcStartAddr": "40b2b0",
            "funcEndAddr": "40b2cb",
            "decompiledFuncCode": "int64_t function_40b2b0(int64_t a1, int64_t a2) {\n    // 0x40b2b0\n    *(int64_t *)(a1 + 20) = 0;\n    *(char *)(a1 + 28) = 1;\n    int32_t v1 = a2; // 0x40b2bc\n    *(int32_t *)a1 = v1;\n    *(int32_t *)(a1 + 4) = v1;\n    *(int32_t *)(a1 + 8) = v1;\n    *(int32_t *)(a1 + 12) = v1;\n    *(int32_t *)(a1 + 16) = v1;\n    int64_t result; // 0x40b2b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b2d0",
            "funcStartAddr": "40b2d0",
            "funcEndAddr": "40b2d5",
            "decompiledFuncCode": "int64_t function_40b2d0(int64_t a1) {\n    // 0x40b2d0\n    return (int64_t)*(char *)(a1 + 28);\n}\n"
        },
        {
            "funcName": "function_40b2e0",
            "funcStartAddr": "40b2e0",
            "funcEndAddr": "40b315",
            "decompiledFuncCode": "int64_t function_40b2e0(int64_t a1, int32_t a2) {\n    char * v1 = (char *)(a1 + 28); // 0x40b2e0\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x40b2e4\n    int32_t v3 = (int32_t)(*v1 ^ 1); // 0x40b2ed\n    uint32_t v4 = (*v2 + v3) % 4; // 0x40b2ef\n    int32_t * v5 = (int32_t *)((int64_t)(4 * v4) + a1); // 0x40b2f8\n    *v5 = a2;\n    int32_t * v6 = (int32_t *)(a1 + 24); // 0x40b2fe\n    int32_t v7 = *v6; // 0x40b2fe\n    *v2 = v4;\n    if (v7 == v4) {\n        // 0x40b308\n        *v6 = (v7 + v3) % 4;\n    }\n    // 0x40b310\n    *v1 = 0;\n    return (int64_t)*v5;\n}\n"
        },
        {
            "funcName": "function_40b320",
            "funcStartAddr": "40b320",
            "funcEndAddr": "40b361",
            "decompiledFuncCode": "int64_t function_40b320(int64_t a1) {\n    char * v1 = (char *)(a1 + 28); // 0x40b324\n    if (*v1 != 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x40b32e\n    uint32_t v3 = *v2; // 0x40b32e\n    int32_t * v4 = (int32_t *)(4 * (int64_t)v3 + a1); // 0x40b33b\n    int64_t result = (int64_t)*v4; // 0x40b33b\n    *v4 = *(int32_t *)(a1 + 16);\n    if (v3 == *(int32_t *)(a1 + 24)) {\n        // 0x40b358\n        *v1 = 1;\n        return result;\n    }\n    // 0x40b344\n    *v2 = (v3 + 3) % 4;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b370",
            "funcStartAddr": "40b370",
            "funcEndAddr": "40b8d2",
            "decompiledFuncCode": "int64_t function_40b370(void) {\n    char * v1 = nl_langinfo(14); // 0x40b386\n    char * v2 = g50; // 0x40b38b\n    char * v3; // 0x40b370\n    int64_t v4; // 0x40b370\n    int64_t v5; // 0x40b370\n    int64_t v6; // 0x40b370\n    int64_t v7; // 0x40b370\n    int32_t size; // 0x40b370\n    int32_t size2; // 0x40b370\n    int32_t len; // 0x40b442\n    int64_t v8; // 0x40b442\n    char * env_val; // 0x40b42d\n    if (v2 == NULL) {\n        // 0x40b428\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40b495;\n        } else {\n            // 0x40b43a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40b495;\n            } else {\n                // 0x40b43f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40b42d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40b8c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40b495;\n                    } else {\n                        // 0x40b839\n                        size2 = len + 14;\n                        goto lab_0x40b45b;\n                    }\n                } else {\n                    goto lab_0x40b45b;\n                }\n            }\n        }\n    } else {\n        // 0x40b370\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40b3aa;\n    }\n  lab_0x40b6dc:;\n    // 0x40b6dc\n    struct _IO_FILE * stream; // 0x40b51b\n    int32_t v10 = __uflow(stream); // 0x40b6df\n    int64_t v11; // 0x40b370\n    int64_t v12 = v11; // 0x40b6e9\n    int64_t v13; // 0x40b370\n    int64_t v14 = v13; // 0x40b6e9\n    int32_t v15 = v10; // 0x40b6e9\n    int64_t v16; // 0x40b370\n    int64_t v17 = v16; // 0x40b6e9\n    int64_t v18 = v11; // 0x40b6e9\n    int64_t v19 = v13; // 0x40b6e9\n    int64_t v20 = v16; // 0x40b6e9\n    if (v10 == -1) {\n        // break -> 0x40b6ef\n        goto lab_0x40b6ef;\n    }\n    goto lab_0x40b569;\n  lab_0x40b55e:;\n    // 0x40b55e\n    int64_t v90; // 0x40b370\n    int64_t * v32; // 0x40b550\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40b370\n    v12 = v89;\n    int64_t v91; // 0x40b370\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40b370\n    v17 = v92;\n    goto lab_0x40b569;\n  lab_0x40b569:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40b370\n    int32_t v25; // bp-120, 0x40b370\n    int32_t v26; // bp-184, 0x40b370\n    int64_t v27; // 0x40b51b\n    int64_t v28; // 0x40b538\n    int64_t v29; // 0x40b53d\n    int64_t * v30; // 0x40b554\n    switch (c) {\n        case 32: {\n            goto lab_0x40b550;\n        }\n        case 10: {\n            goto lab_0x40b550;\n        }\n        case 9: {\n            goto lab_0x40b550;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40b741\n            int32_t v33; // 0x40b370\n            char v34; // 0x40b370\n            int32_t v35; // 0x40b74e\n            if (v31 < *v30) {\n                // 0x40b720\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40b74b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40b741\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40b720\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40b74b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40b730\n                v36 = v33;\n            }\n            // 0x40b81f\n            if (v36 == -1) {\n                // break -> 0x40b6ef\n                break;\n            }\n            goto lab_0x40b550;\n        }\n        default: {\n            // 0x40b57f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40b6ef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40b5a8\n            int64_t v39 = v37 + 4; // 0x40b5aa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40b5b6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40b5b8\n            while (v41 == 0) {\n                // 0x40b5a8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40b5d6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40b5e2\n            int64_t v45 = v43 + 4; // 0x40b5e4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40b5f0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40b5f2\n            while (v47 == 0) {\n                // 0x40b5e2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40b5df\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40b608\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40b618\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40b61c\n            int64_t v52 = v51 + v48; // 0x40b625\n            int64_t * mem; // 0x40b370\n            int64_t v53; // 0x40b370\n            int64_t v54; // 0x40b370\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40b75b\n                int64_t v56 = v55 + 3; // 0x40b767\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40b641\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40b650\n            if (mem == NULL) {\n                // 0x40b87c\n                free((int64_t *)v21);\n                function_40bd60(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x40b4f4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40b668\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40b672\n            uint32_t v62 = (int32_t)v59; // 0x40b675\n            int64_t v63; // 0x40b370\n            if (v62 >= 8) {\n                // 0x40b784\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40b79e\n                int64_t v66 = v61 - v65; // 0x40b7a2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40b7ad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40b7be\n                    int64_t v70 = v69 & 0xffffffff; // 0x40b7be\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40b7bb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40b84f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40b687\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40b68b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40b69b\n            int64_t v74 = v60 - 1; // 0x40b69f\n            uint32_t v75 = (int32_t)v73; // 0x40b6a4\n            int64_t v76; // 0x40b370\n            if (v75 >= 8) {\n                // 0x40b7d2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40b7dc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40b7ec\n                int64_t v80 = v74 - v79; // 0x40b7f0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40b7fb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40b80b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40b809\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40b866\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40b86e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40b6b6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40b6ba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40b8b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40b6ce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40b55e;\n            } else {\n                goto lab_0x40b6dc;\n            }\n        }\n    }\n  lab_0x40b550:;\n    int64_t v93 = v23; // 0x40b370\n    int64_t v94 = v22; // 0x40b370\n    int64_t v95 = v21; // 0x40b370\n    goto lab_0x40b550_2;\n  lab_0x40b495:;\n    int64_t * mem3 = malloc(size); // 0x40b495\n    int64_t v97 = (int64_t)&g10; // 0x40b4a0\n    int64_t v98; // 0x40b370\n    int64_t path; // 0x40b370\n    if (mem3 == NULL) {\n        goto lab_0x40b472;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40b495\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40b4b6;\n    }\n  lab_0x40b3aa:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40b39d\n    char v100 = *v3; // 0x40b3aa\n    int64_t v101; // 0x40b370\n    if (v100 == 0) {\n        // 0x40b404\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40b370\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40b370\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40b3f0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40b3f7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40b3c0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40b3cd\n        char v107 = *(char *)v106; // 0x40b3d2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40b404\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40b3db\n    v104 = v103 + 1;\n  lab_0x40b3f7:\n    // 0x40b404\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40b472:;\n    char * v108 = (char *)v97;\n    g50 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40b3aa;\n  lab_0x40b4b6:;\n    int64_t v109 = v98 + path; // 0x40b4b6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40b4e2\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x40b511\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40b842\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x40b535\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40b550_2:;\n                uint64_t v96 = *v32; // 0x40b550\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40b6dc;\n                } else {\n                    goto lab_0x40b55e;\n                }\n            }\n          lab_0x40b6ef:\n            // 0x40b6ef\n            function_40bd60(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x40b70e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40b4f4;\n  lab_0x40b45b:;\n    int64_t * mem4 = malloc(size2); // 0x40b45b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x40b501\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40b4b6;\n    } else {\n        goto lab_0x40b472;\n    }\n  lab_0x40b4f4:\n    // 0x40b4f4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40b472;\n}\n"
        },
        {
            "funcName": "function_40b8e0",
            "funcStartAddr": "40b8e0",
            "funcEndAddr": "40b90b",
            "decompiledFuncCode": "int64_t function_40b8e0(int32_t err_num) {\n    // 0x40b8e0\n    error(g20, err_num, dcgettext(NULL, \"unable to record current working directory\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b910",
            "funcStartAddr": "40b910",
            "funcEndAddr": "40b93b",
            "decompiledFuncCode": "int64_t function_40b910(int32_t err_num) {\n    // 0x40b910\n    error(g20, err_num, dcgettext(NULL, \"failed to return to initial working directory\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b940",
            "funcStartAddr": "40b940",
            "funcEndAddr": "40b98a",
            "decompiledFuncCode": "int64_t function_40b940(int64_t fd, int64_t path, int32_t oflag, int64_t a4) {\n    uint32_t v1 = openat((int32_t)fd, (char *)path, oflag); // 0x40b952\n    return function_40ba20((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_40b990",
            "funcStartAddr": "40b990",
            "funcEndAddr": "40b9da",
            "decompiledFuncCode": "int64_t function_40b990(int64_t * a1) {\n    int64_t * v1 = (int64_t *)((int64_t)a1 + 8); // 0x40b99b\n    *v1 = 0;\n    int64_t v2; // 0x40b990\n    int32_t v3 = function_409fb0((int64_t)\".\", 0x80000, (int32_t)v2); // 0x40b9af\n    *(int32_t *)a1 = v3;\n    if (v3 >= 0) {\n        // 0x40b9b7\n        return 0;\n    }\n    int64_t v4 = function_40bfc0(0, 0); // 0x40b9c4\n    *v1 = v4;\n    return v4 == 0 ? 0xffffffff : 0;\n}\n"
        },
        {
            "funcName": "function_40b9e0",
            "funcStartAddr": "40b9e0",
            "funcEndAddr": "40b9f9",
            "decompiledFuncCode": "int64_t function_40b9e0(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int32_t fd = v1;\n    if (fd < 0) {\n        // 0x40b9f0\n        return function_40baf0(*(int64_t *)(v1 + 8));\n    }\n    // 0x40b9e6\n    return fchdir(fd);\n}\n"
        },
        {
            "funcName": "function_40ba00",
            "funcStartAddr": "40ba00",
            "funcEndAddr": "40ba19",
            "decompiledFuncCode": "int64_t function_40ba00(int64_t * a1) {\n    // 0x40ba00\n    int64_t v1; // 0x40ba00\n    uint32_t fd = (int32_t)v1;\n    if (fd >= 0) {\n        // 0x40ba0a\n        close(fd);\n    }\n    // 0x40ba0f\n    free((int64_t *)*(int64_t *)((int64_t)a1 + 8));\n    return &g57;\n}\n"
        },
        {
            "funcName": "function_40ba20",
            "funcStartAddr": "40ba20",
            "funcEndAddr": "40ba6e",
            "decompiledFuncCode": "int64_t function_40ba20(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40ba2c\n    if (fd >= 3) {\n        // 0x40ba31\n        return a1 & 0xffffffff;\n    }\n    // 0x40ba40\n    int64_t v1; // 0x40ba20\n    int64_t v2 = function_40c5a0(a1, v1); // 0x40ba40\n    int32_t * v3 = __errno_location(); // 0x40ba48\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40ba70",
            "funcStartAddr": "40ba70",
            "funcEndAddr": "40bab0",
            "decompiledFuncCode": "int64_t function_40ba70(int32_t fd) {\n    // 0x40ba70\n    if (fd < 0) {\n        // 0x40ba74\n        int64_t result; // 0x40ba70\n        return result;\n    }\n    int32_t result2 = close(fd); // 0x40ba7c\n    if (result2 == 0) {\n        // 0x40ba85\n        return result2;\n    }\n    // 0x40ba8a\n    __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 64, \"cdb_free\");\n    return &g57;\n}\n"
        },
        {
            "funcName": "function_40bab0",
            "funcStartAddr": "40bab0",
            "funcEndAddr": "40bae7",
            "decompiledFuncCode": "int64_t function_40bab0(int32_t * a1) {\n    // 0x40bab0\n    int64_t path; // 0x40bab0\n    int32_t fd = path;\n    uint32_t v1 = openat(fd, (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x40bac2\n    int64_t result = 0xffffffff; // 0x40bac9\n    if (v1 >= 0) {\n        // 0x40bacb\n        function_40ba70(fd);\n        *a1 = v1;\n        result = 0;\n    }\n    // 0x40bad8\n    return result;\n}\n"
        },
        {
            "funcName": "function_40baf0",
            "funcStartAddr": "40baf0",
            "funcEndAddr": "40bd60",
            "decompiledFuncCode": "int64_t function_40baf0(int64_t a1) {\n    char * path = (char *)a1; // 0x40baff\n    uint32_t result = chdir(path); // 0x40baff\n    if (result == 0) {\n        // 0x40bc36\n        return 0;\n    }\n    int32_t * v1 = __errno_location(); // 0x40bb0e\n    if (*v1 != 36) {\n        // 0x40bc36\n        return result;\n    }\n    int32_t len = strlen(path); // 0x40bb22\n    int32_t fd = -100; // bp-44, 0x40bb27\n    if (len == 0) {\n        // 0x40bd42\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g57;\n    }\n    if (len < 0x1000) {\n        // 0x40bd29\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40bd42\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g57;\n    }\n    int64_t v2 = len; // 0x40bb22\n    int32_t ini_seg_bytes = strspn(path, \"/\"); // 0x40bb4f\n    int64_t v3; // 0x40baf0\n    if (ini_seg_bytes == 2) {\n        int64_t v4 = function_40c490(a1 + 3, 47, v2 - 3); // 0x40bc75\n        if (v4 == 0) {\n            // 0x40bc36\n            return 0xffffffff;\n        }\n        char * v5 = (char *)v4; // 0x40bc82\n        *v5 = 0;\n        int64_t v6 = function_40bab0(&fd); // 0x40bc8d\n        *v5 = 47;\n        if ((int32_t)v6 != 0) {\n            goto lab_0x40bc20;\n        } else {\n            int64_t str = v4 + 1; // 0x40bc99\n            v3 = str + (int64_t)strspn((char *)str, \"/\");\n            goto lab_0x40bb6d;\n        }\n    } else {\n        // 0x40bb61\n        v3 = a1;\n        if (ini_seg_bytes != 0) {\n            // 0x40bc48\n            if ((int32_t)function_40bab0(&fd) != 0) {\n                goto lab_0x40bc20;\n            } else {\n                // 0x40bc5b\n                v3 = (int64_t)ini_seg_bytes + a1;\n                goto lab_0x40bb6d;\n            }\n        } else {\n            goto lab_0x40bb6d;\n        }\n    }\n  lab_0x40bc20:\n    // 0x40bc20\n    function_40ba70(fd);\n    // 0x40bc36\n    return 0xffffffff;\n  lab_0x40bb6d:\n    // 0x40bb6d\n    if (*(char *)v3 == 47) {\n      lab_0x40bcf7:\n        // 0x40bcf7\n        __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 162, \"chdir_long\");\n        // 0x40bd10\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40bd29\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40bd42\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g57;\n    }\n    uint64_t v7 = v2 + a1; // 0x40bb77\n    if (v7 < v3) {\n        // 0x40bd10\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40bd29\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40bd42\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g57;\n    }\n    int64_t v8 = v3; // 0x40bbed\n    int64_t v9 = v3; // 0x40bbed\n    if (v7 - v3 > 4095) {\n        int64_t * v10 = memrchr((int64_t *)v8, 47, 0x1000); // 0x40bb95\n        while (v10 != NULL) {\n            int64_t v11 = (int64_t)v10; // 0x40bb95\n            *(char *)v10 = 0;\n            if (v11 - v8 > 4095) {\n                // 0x40bcde\n                __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 179, \"chdir_long\");\n                goto lab_0x40bcf7;\n            }\n            int64_t v12 = function_40bab0(&fd); // 0x40bbc0\n            *(char *)v10 = 47;\n            if ((int32_t)v12 != 0) {\n                goto lab_0x40bc20;\n            }\n            int64_t str2 = v11 + 1; // 0x40bbcc\n            int64_t v13 = str2 + (int64_t)strspn((char *)str2, \"/\"); // 0x40bbdd\n            v8 = v13;\n            v9 = v13;\n            if (v7 - v13 <= 4095) {\n                goto lab_0x40bbef;\n            }\n            v10 = memrchr((int64_t *)v8, 47, 0x1000);\n        }\n        // 0x40bcb8\n        *v1 = 36;\n        // 0x40bc36\n        return 0xffffffff;\n    }\n  lab_0x40bbef:\n    // 0x40bbef\n    if (v7 > v9) {\n        // 0x40bbf4\n        if ((int32_t)function_40bab0(&fd) != 0) {\n            goto lab_0x40bc20;\n        } else {\n            goto lab_0x40bc05;\n        }\n    } else {\n        goto lab_0x40bc05;\n    }\n  lab_0x40bc05:\n    // 0x40bc05\n    if (fchdir(fd) == 0) {\n        // 0x40bcd0\n        function_40ba70(fd);\n        // 0x40bc36\n        return 0;\n    }\n    goto lab_0x40bc20;\n}\n"
        },
        {
            "funcName": "function_40bd60",
            "funcStartAddr": "40bd60",
            "funcEndAddr": "40bddb",
            "decompiledFuncCode": "int64_t function_40bd60(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40bd67\n    if (fileno(stream) < 0) {\n        // 0x40bdc7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40bd7a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40bdab\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40bdc7\n            return fclose(stream);\n        }\n    }\n    // 0x40bd7c\n    if ((int32_t)function_40bf20(a1, v1) == 0) {\n        // 0x40bdc7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40bd88\n    int32_t v3 = *v2; // 0x40bd90\n    int64_t result = fclose(stream); // 0x40bd9e\n    if (v3 != 0) {\n        // 0x40bdd0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40bda0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bde0",
            "funcStartAddr": "40bde0",
            "funcEndAddr": "40bf15",
            "decompiledFuncCode": "int64_t function_40bde0(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x40be10\n    if (cmd != 1030) {\n        // 0x40bec0\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40be1c\n    int64_t v2; // 0x40bde0\n    if (g51 < 0) {\n        int64_t v3 = function_40bde0(fd, 0, v1, a4); // 0x40be64\n        int64_t v4 = v3 & 0xffffffff; // 0x40be69\n        if ((int32_t)v3 < 0) {\n            // 0x40be50\n            return v4 & 0xffffffff;\n        }\n        // 0x40be6f\n        v2 = v4;\n        if (g51 != -1) {\n            // 0x40be50\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40be37\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40be46\n            g51 = 1;\n            // 0x40be50\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40bde0(fd & 0xffffffff, 0, v1, a4); // 0x40bef7\n        int64_t v7 = v6 & 0xffffffff; // 0x40befc\n        if ((int32_t)v6 < 0) {\n            // 0x40be50\n            return v7 & 0xffffffff;\n        }\n        // 0x40bf06\n        g51 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40be7f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40be8a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40be50\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40bea2\n    close(fd2);\n    // 0x40be50\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40bf20",
            "funcStartAddr": "40bf20",
            "funcEndAddr": "40bf60",
            "decompiledFuncCode": "int64_t function_40bf20(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40bf3a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40bf3a\n        return fflush(stream);\n    }\n    // 0x40bf48\n    function_40bf60(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40bf60",
            "funcStartAddr": "40bf60",
            "funcEndAddr": "40bfb7",
            "decompiledFuncCode": "int64_t function_40bf60(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40bf60\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40bf6a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40bf9b\n    int64_t result = -1; // 0x40bfa4\n    if (v1 != -1) {\n        // 0x40bfa6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40bfb2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bfc0",
            "funcStartAddr": "40bfc0",
            "funcEndAddr": "40c482",
            "decompiledFuncCode": "int64_t function_40bfc0(int32_t a1, int32_t a2) {\n    // 0x40bfc0\n    int32_t size; // 0x40bfc0\n    int32_t v1; // 0x40bfc0\n    int32_t v2; // 0x40bfc0\n    if (a2 != 0) {\n        // 0x40c020\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x40bff2;\n        } else {\n            goto lab_0x40c03c;\n        }\n    } else {\n        // 0x40bfe0\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x40c3e0\n            *__errno_location() = 22;\n            // 0x40c006\n            return 0;\n        }\n        goto lab_0x40bff2;\n    }\n  lab_0x40c380:;\n    // 0x40c380\n    int32_t v3; // 0x40c37a\n    int64_t v4 = v3; // 0x40c382\n    int64_t v5; // 0x40bfc0\n    int64_t dirp2 = v5; // 0x40c382\n    int32_t * v6; // 0x40c0c6\n    if (v3 != 0) {\n        goto lab_0x40c391;\n    } else {\n        // 0x40c384\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x40c391;\n    }\n  lab_0x40c192:;\n    // 0x40c192\n    int64_t v7; // 0x40bfc0\n    int64_t v8 = v7;\n    int64_t v9; // 0x40bfc0\n    int64_t v10 = v9 + 19; // 0x40c192\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x40bfc0\n    int64_t v12; // 0x40bfc0\n    int32_t v13; // 0x40bfc0\n    int32_t fd; // 0x40c0e2\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x40c1c5\n        if (v11 == v12) {\n            // break -> 0x40c1e0\n            goto lab_0x40c1e0;\n        }\n    }\n    int64_t v14 = v8; // 0x40bfc0\n    goto lab_0x40c150_2;\n  lab_0x40c45e_2:\n    // 0x40c45e\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x40c391;\n  lab_0x40bff2:;\n    int64_t * mem = malloc(size); // 0x40bff7\n    int32_t v41 = (int64_t)mem; // 0x40bffc\n    int32_t result = v41; // 0x40c004\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x40c006\n        return result;\n    }\n    goto lab_0x40c03c;\n  lab_0x40c03c:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x40c041\n    int64_t v46 = v45 - 1; // 0x40c050\n    *(char *)v46 = 0;\n    int64_t v47; // 0x40bfc0\n    int64_t v48; // 0x40bfc0\n    int32_t * v49; // 0x40bfc0\n    int64_t v50; // 0x40bfc0\n    int64_t v33; // 0x40bfc0\n    int64_t v40; // 0x40bfc0\n    int64_t v51; // 0x40bfc0\n    int32_t v38; // 0x40bfc0\n    int32_t v52; // 0x40bfc0\n    int32_t v53; // 0x40bfc0\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x40c3b8;\n    } else {\n        // 0x40c066\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x40c3b8;\n        } else {\n            // 0x40c091\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x40c2d8;\n            } else {\n                // 0x40c0c6\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x40c0d3\n                int32_t v55 = v42; // 0x40c0d3\n                int64_t v56 = v11; // 0x40c0d3\n                int64_t v57 = v46; // 0x40c0d3\n                int64_t v58 = 0; // 0x40c0d3\n                int32_t fd2 = -100; // 0x40c0d3\n                int64_t dirp3; // 0x40bfc0\n                while (true) {\n                    // 0x40c0d6\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x40c407\n                        break;\n                    }\n                    // 0x40c0f2\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x40c418\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x40c3fd;\n                        } else {\n                            // 0x40c421\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x40c3fd;\n                        }\n                    }\n                    // 0x40c10b\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x40c110\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x40c3f9\n                            v40 = (int64_t)*v6;\n                            goto lab_0x40c3fd;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x40c137\n                    if (dirp == NULL) {\n                        // 0x40c3f9\n                        v40 = (int64_t)*v6;\n                        goto lab_0x40c3fd;\n                    }\n                    // 0x40c148\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x40c150_2:;\n                        int64_t v15 = v14; // 0x40bfc0\n                        int64_t v16; // 0x40bfc0\n                        int64_t v17; // 0x40bfc0\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x40c15b\n                            int64_t v20; // 0x40bfc0\n                            int64_t v21; // 0x40bfc0\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x40c330\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x40c380;\n                                }\n                                // 0x40c33d\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x40c348\n                                if (v23 == NULL) {\n                                    // 0x40c37a\n                                    v3 = *v6;\n                                    goto lab_0x40c380;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x40c192;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x40c173\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x40c360\n                            if (*(char *)v28 != 0) {\n                                // 0x40c36a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x40c173\n                                    break;\n                                }\n                            }\n                            // 0x40c150\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x40c192;\n                        } else {\n                            // 0x40c178\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x40c18d\n                            int64_t v32; // 0x40bfc0\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x40c150\n                                v14 = v31;\n                                goto lab_0x40c150_2;\n                            } else {\n                                goto lab_0x40c192;\n                            }\n                        }\n                    }\n                  lab_0x40c1e0:;\n                    int64_t v61 = v38; // 0x40c1e8\n                    uint64_t v62 = v57 - v61; // 0x40c1e8\n                    int32_t len = strlen(str); // 0x40c1ed\n                    uint64_t v63 = (int64_t)len; // 0x40c1ed\n                    int32_t v64 = v60; // 0x40c1f8\n                    int32_t v65 = v38; // 0x40c1f8\n                    int64_t dest_mem = v57; // 0x40c1f8\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x40c470\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x40c391;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x40c206\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x40c211\n                        uint64_t v68 = v67 + v66; // 0x40c215\n                        if (v68 < v66) {\n                            goto lab_0x40c45e_2;\n                        }\n                        // 0x40c228\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x40c230\n                        if (mem2 == NULL) {\n                            goto lab_0x40c45e_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x40c230\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x40c28d\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x40c2be\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x40c3c0;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x40c2d8;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x40c407\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x40c399;\n                } else {\n                    goto lab_0x40c391;\n                }\n            }\n        }\n    }\n  lab_0x40c3b8:\n    // 0x40c3b8\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x40c3c0;\n  lab_0x40c3c0:;\n    int64_t v77 = (int64_t)*v49; // 0x40c3c6\n    int64_t v34 = v77; // 0x40c3ca\n    int32_t * v35 = v49; // 0x40c3ca\n    int32_t * v36 = v49; // 0x40c3ca\n    int32_t v37 = v53; // 0x40c3ca\n    int64_t v39 = v77; // 0x40c3ca\n    if (a1 != 0) {\n        goto lab_0x40c3a1;\n    } else {\n        goto lab_0x40c3cc;\n    }\n  lab_0x40c3a1:\n    // 0x40c3a1\n    *v35 = (int32_t)v34;\n    // 0x40c006\n    return 0;\n  lab_0x40c3cc:\n    // 0x40c3cc\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x40c3a1;\n  lab_0x40c2d8:\n    // 0x40c2d8\n    if (v51 == v47 - 1 + v48) {\n        // 0x40c447\n        int64_t v78; // 0x40bfc0\n        int64_t v79 = v78 - 1; // 0x40c44c\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x40c302\n    int32_t v81 = v50 - v51; // 0x40c302\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x40c30d\n    if (a2 == 0) {\n        // 0x40c430\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x40c006\n    return result2;\n  lab_0x40c399:\n    // 0x40c399\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x40c3cc;\n    } else {\n        goto lab_0x40c3a1;\n    }\n  lab_0x40c391:\n    // 0x40c391\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x40c399;\n  lab_0x40c3fd:\n    // 0x40c3fd\n    close(fd);\n    v33 = v40;\n    goto lab_0x40c399;\n}\n"
        },
        {
            "funcName": "function_40c490",
            "funcStartAddr": "40c490",
            "funcEndAddr": "40c594",
            "decompiledFuncCode": "int64_t function_40c490(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x40c490\n    if (a3 == 0) {\n        // 0x40c4c9\n        return 0;\n    }\n    int64_t v1 = result; // 0x40c49c\n    int64_t v2 = a3; // 0x40c49c\n    int64_t result2; // 0x40c490\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40c49e\n        int64_t v4 = result; // 0x40c4a1\n        if ((char)result == v3) {\n            // 0x40c4c9\n            return result;\n        }\n        int64_t v5 = a3; // 0x40c4a1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40c4b0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40c4d0;\n            }\n            // 0x40c4b6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40c4c9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40c4c9\n        return result2;\n    }\n  lab_0x40c4d0:;\n    int64_t result3 = v1; // 0x40c4fd\n    int64_t v6 = v2; // 0x40c4fd\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x40c4df\n        int64_t v8 = 0x10000 * v7 | v7; // 0x40c4ec\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x40c4f6\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x40c516\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x40c545\n            int64_t v12 = v1 + 8; // 0x40c549\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x40c533\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40c55c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x40c553\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x40c4c9\n                return 0;\n            }\n        }\n    }\n  lab_0x40c55c:;\n    char v14 = a2; // 0x40c55c\n    if (*(char *)result3 == v14) {\n        // 0x40c4c9\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x40c570\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x40c4c9\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x40c4c9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c5a0",
            "funcStartAddr": "40c5a0",
            "funcEndAddr": "40c5ae",
            "decompiledFuncCode": "int64_t function_40c5a0(int64_t a1, int64_t a2) {\n    // 0x40c5a0\n    int64_t v1; // 0x40c5a0\n    return function_40bde0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40c5b0",
            "funcStartAddr": "40c5b0",
            "funcEndAddr": "40c60d",
            "decompiledFuncCode": "int64_t function_40c5b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c5b0\n    return function_401bc0();\n}\n"
        },
        {
            "funcName": "function_40c610",
            "funcStartAddr": "40c610",
            "funcEndAddr": "40c611",
            "decompiledFuncCode": "int64_t function_40c610(void) {\n    // 0x40c610\n    int64_t result; // 0x40c610\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c620",
            "funcStartAddr": "40c620",
            "funcEndAddr": "40c638",
            "decompiledFuncCode": "int64_t function_40c620(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c620\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_40c638",
            "funcStartAddr": "40c638",
            "funcEndAddr": "40c658",
            "decompiledFuncCode": "int64_t function_40c638(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x40c642\n    while (*(int64_t *)v1 != -1) {\n        // 0x40c643\n        v1 -= 8;\n    }\n    // 0x40c654\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chown.elf"
}