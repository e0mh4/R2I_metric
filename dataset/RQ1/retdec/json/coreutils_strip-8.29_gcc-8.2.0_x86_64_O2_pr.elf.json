{
    "funcInfo": [
        {
            "funcName": "function_401d10",
            "funcStartAddr": "401d10",
            "funcEndAddr": "401d15",
            "decompiledFuncCode": "int64_t function_401d10(void) {\n    // 0x401d10\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d15",
            "funcStartAddr": "401d15",
            "funcEndAddr": "401d1a",
            "decompiledFuncCode": "int64_t function_401d15(void) {\n    // 0x401d15\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d1a",
            "funcStartAddr": "401d1a",
            "funcEndAddr": "401d1f",
            "decompiledFuncCode": "int64_t function_401d1a(void) {\n    // 0x401d1a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d1f",
            "funcStartAddr": "401d1f",
            "funcEndAddr": "401d24",
            "decompiledFuncCode": "int64_t function_401d1f(void) {\n    // 0x401d1f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d24",
            "funcStartAddr": "401d24",
            "funcEndAddr": "401d29",
            "decompiledFuncCode": "int64_t function_401d24(void) {\n    // 0x401d24\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d29",
            "funcStartAddr": "401d29",
            "funcEndAddr": "401d2e",
            "decompiledFuncCode": "int64_t function_401d29(void) {\n    // 0x401d29\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d2e",
            "funcStartAddr": "401d2e",
            "funcEndAddr": "401d33",
            "decompiledFuncCode": "int64_t function_401d2e(void) {\n    // 0x401d2e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d40",
            "funcStartAddr": "401d40",
            "funcEndAddr": "4025d0",
            "decompiledFuncCode": "int64_t function_401d40(int64_t a1, int64_t a2) {\n    int64_t v1 = 0; // bp-64, 0x401d59\n    function_407110(a2);\n    setlocale(LC_ALL, (char *)&g2);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401d40\n    function_40cd90(0x4053d0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    int32_t v3 = a1; // 0x401d9c\n    int64_t v4 = 0; // 0x401d9c\n    if (v3 >= 2) {\n        // 0x401d9e\n        v4 = function_409300(0x100000000 * a1 - 0x100000000 >> 29);\n    }\n    uint64_t v5 = a1 & 0xffffffff; // 0x401d4f\n    int32_t v6; // bp-68, 0x401d40\n    int64_t v7 = &v6; // 0x401dd5\n    v6 = -1;\n    int64_t v8 = function_40b9d0(v5, a2, \"-0123456789D:FJN:S::TW:abcde::fh:i::l:mn::o:rs::tvw:\", &g4, (int64_t *)&v6, v2); // 0x401dec\n    int32_t v9 = v8; // 0x401df3\n    int32_t v10 = v9; // 0x401df6\n    int64_t v11 = v8; // 0x401df6\n    int64_t v12 = 0; // 0x401df6\n    int64_t v13 = 0; // 0x401df6\n    int64_t v14 = 0; // 0x401df6\n    int32_t v15 = 0; // 0x401df6\n    int32_t v16 = 0; // 0x401df6\n    char v17 = 0; // 0x401df6\n    int64_t v18; // 0x401d40\n    int64_t v19; // 0x401d40\n    int64_t v20; // 0x401d40\n    int64_t v21; // 0x401d40\n    int64_t v22; // 0x401d40\n    int64_t v23; // 0x401d40\n    int64_t v24; // 0x401d40\n    int64_t v25; // 0x401d40\n    int64_t v26; // 0x401d40\n    char v27; // 0x401d40\n    char v28; // 0x401d40\n    int32_t v29; // 0x401d40\n    int32_t v30; // 0x401d40\n    int32_t v31; // 0x401d40\n    int32_t v32; // 0x401d40\n    if (v9 != -1) {\n        while (true) {\n          lab_0x401dfc:\n            // 0x401dfc\n            v27 = v17;\n            v29 = v16;\n            v31 = v15;\n            v23 = v22;\n            v18 = v13;\n            v20 = v12;\n            int64_t v33 = v11;\n            if (v10 < 58) {\n                int64_t v34 = v14 + 1; // 0x402220\n                int64_t v35 = v34; // 0x402229\n                int64_t v36 = v18; // 0x402229\n                if (v34 >= v1) {\n                    // 0x402240\n                    v36 = function_409460(v18, &v1);\n                    v35 = 0x100000000 * v34 >> 32;\n                }\n                // 0x40222b\n                *(char *)(v36 + v14) = (char)v33;\n                *(char *)(v36 + v35) = 0;\n                v28 = v27;\n                v30 = v29;\n                v32 = v31;\n                v26 = v35;\n                v24 = v23;\n                v19 = v36;\n                v21 = v20;\n                goto lab_0x401dd0;\n            } else {\n                int64_t v37 = v33 + 131; // 0x401e08\n                g142 = v37 & 0xffffffff;\n                switch ((int32_t)v37) {\n                    case 0: {\n                        // 0x40211b\n                        function_4091c0((int64_t)g53, \"pr\", \"GNU coreutils\", (int64_t)g42, \"Pete TerMaat\", \"Roland Huebner\");\n                        exit(0);\n                        // UNREACHABLE\n                    }\n                    case 1: {\n                        // 0x402523\n                        function_404de0(0);\n                        // UNREACHABLE\n                    }\n                    case 132: {\n                        int64_t v38 = (int64_t)g138; // 0x4020fc\n                        v25 = v38;\n                        if (g87 == 0) {\n                            // 0x402262\n                            v25 = v38;\n                            if (*g138 != 43) {\n                                goto lab_0x402109;\n                            } else {\n                                // 0x40226b\n                                v28 = v27;\n                                v30 = v29;\n                                v32 = v31;\n                                v26 = 0;\n                                v24 = v23;\n                                v19 = v18;\n                                v21 = v20;\n                                if ((char)function_402820(0xfffffffe, 43, v38 + 1) != 0) {\n                                    goto lab_0x401dd0;\n                                } else {\n                                    // 0x402286\n                                    v25 = (int64_t)g138;\n                                    goto lab_0x402109;\n                                }\n                            }\n                        } else {\n                            goto lab_0x402109;\n                        }\n                    }\n                    case 199: {\n                        // 0x4020df\n                        *(int64_t *)&g66 = (int64_t)g138;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 201: {\n                        goto lab_0x4020d1;\n                    }\n                    case 205: {\n                        // 0x4020c3\n                        g101 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 209: {\n                        // 0x40207b\n                        g26 = 0;\n                        char * v39 = dcgettext(NULL, \"'-N NUMBER' invalid starting line number\", 5); // 0x402090\n                        int64_t v40 = function_409680((int64_t)g138, -0x80000000, 0x7fffffff, (int64_t *)&g2, (int64_t)v39, 0); // 0x4020b3\n                        g25 = v40;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = 0;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 214: {\n                        // 0x40203e\n                        g73 = 1;\n                        *(int64_t *)&g21 = (int64_t)&g2;\n                        g72 = 0;\n                        v28 = 0;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        if (g138 != NULL) {\n                            // 0x40206f\n                            function_402920((int64_t)g138);\n                            v28 = 0;\n                            v30 = v29;\n                            v32 = v31;\n                            v26 = 0;\n                            v24 = v23;\n                            v19 = v18;\n                            v21 = v20;\n                        }\n                        goto lab_0x401dd0;\n                    }\n                    case 215: {\n                        // 0x4021be\n                        g41 = 0;\n                        g110 = 0;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 218: {\n                        // 0x402173\n                        *(char *)&g102 = 1;\n                        char * v41 = dcgettext(NULL, \"'-W PAGE_WIDTH' invalid number of characters\", 5); // 0x402188\n                        int64_t v42 = function_409680((int64_t)g138, 1, 0x7fffffff, (int64_t *)&g2, (int64_t)v41, 0); // 0x4021a9\n                        g38 = v42;\n                        v28 = v27;\n                        v30 = 0;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = 0;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 228: {\n                        // 0x40215e\n                        g105 = 1;\n                        *(char *)&g40 = 0;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 229: {\n                        // 0x402150\n                        g104 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 230: {\n                        // 0x4021e1\n                        g78 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 231: {\n                        // 0x4021d3\n                        g77 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 232: {\n                        // 0x4021ef\n                        if (g138 != NULL) {\n                            // 0x4021fb\n                            function_4052e0((int64_t)g138, 101, &g37, &g35);\n                        }\n                        // 0x40220f\n                        g98 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 233: {\n                        goto lab_0x4020d1;\n                    }\n                    case 235: {\n                        // 0x402029\n                        *(int64_t *)&g67 = (int64_t)g138;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 236: {\n                        // 0x401ffb\n                        if (g138 != NULL) {\n                            // 0x402007\n                            function_4052e0((int64_t)g138, 105, (int64_t *)&g34, &g33);\n                        }\n                        // 0x40201b\n                        g97 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 239: {\n                        char * v43 = dcgettext(NULL, \"'-l PAGE_LENGTH' invalid number of lines\", 5); // 0x401fca\n                        int64_t v44 = function_409680((int64_t)g138, 1, 0x7fffffff, (int64_t *)&g2, (int64_t)v43, 0); // 0x401feb\n                        g39 = v44;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = 0;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 240: {\n                        // 0x401fa7\n                        *(char *)&g115 = 1;\n                        *(char *)&g40 = 0;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 241: {\n                        // 0x401f75\n                        *(char *)&g82 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        if (g138 != NULL) {\n                            // 0x401f8c\n                            function_4052e0((int64_t)g138, 110, &g29, &g23);\n                            v28 = v27;\n                            v30 = v29;\n                            v32 = v31;\n                            v26 = 0;\n                            v24 = v23;\n                            v19 = v18;\n                            v21 = v20;\n                        }\n                        goto lab_0x401dd0;\n                    }\n                    case 242: {\n                        char * v45 = dcgettext(NULL, \"'-o MARGIN' invalid line offset\", 5); // 0x401f47\n                        int64_t v46 = function_409680((int64_t)g138, (int64_t)((int32_t)\"'-o MARGIN' invalid line offset\" ^ (int32_t)\"'-o MARGIN' invalid line offset\"), 0x7fffffff, (int64_t *)&g2, (int64_t)v45, 0); // 0x401f65\n                        g94 = v46;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = 0;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 245: {\n                        // 0x401f2b\n                        *(char *)&g74 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 246: {\n                        // 0x401eee\n                        v28 = g73;\n                        v30 = v29;\n                        v32 = g73;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        if (g73 == 0) {\n                            // 0x401f05\n                            v28 = 1;\n                            v30 = v29;\n                            v32 = 1;\n                            v26 = 0;\n                            v24 = v23;\n                            v19 = v18;\n                            v21 = v20;\n                            if (g138 != NULL) {\n                                // 0x401f15\n                                char * v47; // 0x401f05\n                                function_402920((int64_t)v47);\n                                v28 = 1;\n                                v30 = v29;\n                                v32 = 1;\n                                v26 = 0;\n                                v24 = v23;\n                                v19 = v18;\n                                v21 = v20;\n                            }\n                        }\n                        goto lab_0x401dd0;\n                    }\n                    case 247: {\n                        // 0x401ed9\n                        g41 = 0;\n                        g110 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 249: {\n                        // 0x401ecb\n                        g79 = 1;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 250: {\n                        char * v48 = dcgettext(NULL, \"'-w PAGE_WIDTH' invalid number of characters\", 5); // 0x401e7b\n                        int64_t v49 = function_409680((int64_t)g138, 1, 0x7fffffff, (int64_t *)&g2, (int64_t)v48, 0); // 0x401e9c\n                        char v50 = *(char *)&g102; // 0x401ea1\n                        int32_t v51 = v50; // 0x401ea8\n                        v28 = v27;\n                        v30 = v51;\n                        v32 = v51;\n                        v26 = 0;\n                        v24 = 0;\n                        v19 = v18;\n                        v21 = v20;\n                        if (v50 == 0) {\n                            // 0x401eb4\n                            g38 = v49;\n                            v28 = v27;\n                            v30 = 1;\n                            v32 = 1;\n                            v26 = 0;\n                            v24 = 0;\n                            v19 = v18;\n                            v21 = v20;\n                        }\n                        goto lab_0x401dd0;\n                    }\n                    case 259: {\n                        // 0x401e48\n                        function_402950((int64_t)g138, a2, 259, (int64_t)&g4, v7, v23);\n                        free((int64_t *)v18);\n                        v1 = 0;\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = 0;\n                        v21 = v20;\n                        goto lab_0x401dd0;\n                    }\n                    case 260: {\n                        // 0x401e21\n                        char * format; // 0x402574\n                        if (g138 == NULL) {\n                            // 0x402568\n                            format = dcgettext(NULL, \"'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument\", 5);\n                            error(1, (int32_t)\"'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument\" ^ (int32_t)\"'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument\", format);\n                            goto lab_0x40258a;\n                        }\n                        // 0x401e31\n                        v28 = v27;\n                        v30 = v29;\n                        v32 = v31;\n                        v26 = 0;\n                        v24 = v23;\n                        v19 = v18;\n                        v21 = v20;\n                        if ((char)function_402820((int64_t)v6, 0, (int64_t)g138) == 0) {\n                            // 0x402534\n                            function_408d30((int64_t)g138);\n                            error(1, (int32_t)\"invalid page range %s\" ^ (int32_t)\"invalid page range %s\", dcgettext(NULL, \"invalid page range %s\", 5));\n                            // 0x402568\n                            format = dcgettext(NULL, \"'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument\", 5);\n                            error(1, (int32_t)\"'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument\" ^ (int32_t)\"'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument\", format);\n                            goto lab_0x40258a;\n                        }\n                        goto lab_0x401dd0;\n                    }\n                    default: {\n                        goto lab_0x40252a;\n                    }\n                }\n            }\n        }\n      lab_0x40252a:\n        // 0x40252a\n        function_404de0(1);\n        // UNREACHABLE\n    }\n    int64_t v52 = v8 & 0xffffffff; // 0x401d40\n    int64_t v53 = 0; // 0x401d40\n    int32_t v54 = 0; // 0x401d40\n    int32_t v55 = 0; // 0x401d40\n    char v56 = 0; // 0x401d40\n    goto lab_0x4022a7;\n  lab_0x401dd0:\n    // 0x401dd0\n    v12 = v21;\n    v13 = v19;\n    int64_t v82 = v24;\n    v15 = v32;\n    v16 = v30;\n    v17 = v28;\n    v6 = -1;\n    v11 = function_40b9d0(v5, a2, \"-0123456789D:FJN:S::TW:abcde::fh:i::l:mn::o:rs::tvw:\", &g4, (int64_t *)&v6, v82);\n    v10 = v11;\n    v22 = v82;\n    v14 = v26;\n    if (v10 == -1) {\n        int64_t v83 = v11 & 0xffffffff;\n        v52 = v83;\n        v53 = v12;\n        v54 = v15;\n        v55 = v16;\n        v56 = v17;\n        if (v13 == 0) {\n            goto lab_0x4022a7;\n        } else {\n            // 0x402297\n            function_402950(v13, a2, -1, (int64_t)&g4, v7, v82);\n            free((int64_t *)v13);\n            v52 = v83;\n            v53 = v12;\n            v54 = v15;\n            v55 = v16;\n            v56 = v17;\n            goto lab_0x4022a7;\n        }\n    }\n    goto lab_0x401dfc;\n  lab_0x4020d1:\n    // 0x4020d1\n    g107 = 1;\n    v28 = v27;\n    v30 = v29;\n    v32 = v31;\n    v26 = 0;\n    v24 = v23;\n    v19 = v18;\n    v21 = v20;\n    goto lab_0x401dd0;\n  lab_0x402109:\n    // 0x402109\n    *(int64_t *)(8 * v20 + v4) = v25;\n    v28 = v27;\n    v30 = v29;\n    v32 = v31;\n    v26 = 0;\n    v24 = v23;\n    v19 = v18;\n    v21 = v20 + 1 & 0xffffffff;\n    goto lab_0x401dd0;\n  lab_0x4022a7:;\n    int64_t v57 = v52; // 0x4022af\n    int64_t v58 = a2; // 0x4022af\n    int64_t v59 = v53; // 0x4022af\n    int64_t v60 = v4; // 0x4022af\n    int64_t v61 = v52; // 0x4022af\n    int64_t v62 = a2; // 0x4022af\n    int64_t v63 = v53; // 0x4022af\n    int64_t v64 = v4; // 0x4022af\n    if (g66 == NULL) {\n        goto lab_0x4024e2;\n    } else {\n        goto lab_0x4022b5;\n    }\n  lab_0x4024e2:;\n    int64_t v65 = v62;\n    int64_t v66; // 0x401d40\n    if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n        // 0x402506\n        v66 = (int64_t)\"%Y-%m-%d %H:%M\";\n        goto lab_0x40250b;\n    } else {\n        // 0x4024f1\n        v66 = (int64_t)\"%b %e %H:%M %Y\";\n        if ((char)function_405590(2, v65) != 0) {\n            // 0x402506\n            v66 = (int64_t)\"%Y-%m-%d %H:%M\";\n            goto lab_0x40250b;\n        } else {\n            goto lab_0x40250b;\n        }\n    }\n  lab_0x4022b5:;\n    int64_t v67 = v60;\n    int64_t v68 = v59;\n    g65 = function_40bba0((int64_t)getenv(\"TZ\"), v58, v57);\n    if (g87 == 0) {\n        // 0x4022d8\n        g87 = 1;\n    }\n    char v69 = *(char *)&g115; // 0x4022e3\n    if (v69 != 0) {\n        // 0x4022ef\n        char * format2; // 0x4025b8\n        if (g111 != 0) {\n          lab_0x40258a:\n            // 0x40258a\n            error(1, (int32_t)\"cannot specify number of columns when printing in parallel\" ^ (int32_t)\"cannot specify number of columns when printing in parallel\", dcgettext(NULL, \"cannot specify number of columns when printing in parallel\", 5));\n            // 0x4025ac\n            format2 = dcgettext(NULL, \"cannot specify both printing across and printing in parallel\", 5);\n            error(1, (int32_t)\"cannot specify both printing across and printing in parallel\" ^ (int32_t)\"cannot specify both printing across and printing in parallel\", format2);\n            return &g141;\n        }\n        // 0x4022fc\n        if (g105 != 0) {\n            // 0x4025ac\n            format2 = dcgettext(NULL, \"cannot specify both printing across and printing in parallel\", 5);\n            error(1, (int32_t)\"cannot specify both printing across and printing in parallel\" ^ (int32_t)\"cannot specify both printing across and printing in parallel\", format2);\n            return &g141;\n        }\n    }\n    if ((char)v54 == 0) {\n        goto lab_0x40233f;\n    } else {\n        if ((char)v55 == 0) {\n            // 0x402432\n            if (v56 == 0 || g73 == 1) {\n                goto lab_0x40233f;\n            } else {\n                // 0x40244a\n                if ((g111 || v69) == 0) {\n                    goto lab_0x40233f;\n                } else {\n                    // 0x40245c\n                    if (*(char *)&g102 != 0) {\n                        // 0x402479\n                        g73 = 1;\n                        goto lab_0x40233f;\n                    } else {\n                        // 0x402465\n                        g101 = 1;\n                        if (g72 < 1) {\n                            goto lab_0x40233f;\n                        } else {\n                            // 0x402479\n                            g73 = 1;\n                            goto lab_0x40233f;\n                        }\n                    }\n                }\n            }\n        } else {\n            // 0x40231b\n            if ((g111 || v69) == 0) {\n                // 0x402517\n                g101 = 1;\n                goto lab_0x40233f;\n            } else {\n                // 0x40232d\n                *(char *)&g102 = 1;\n                if (v56 != 0) {\n                    // 0x402479\n                    g73 = 1;\n                    goto lab_0x40233f;\n                } else {\n                    goto lab_0x40233f;\n                }\n            }\n        }\n    }\n  lab_0x40233f:;\n    uint32_t v70 = *(int32_t *)0x61433c; // 0x40233f\n    uint64_t v71 = (int64_t)v70; // 0x40233f\n    int64_t v72 = v68; // 0x402347\n    if (v5 > v71) {\n        int64_t v73 = 0x100000000 * v71 / 0x20000000 + a2; // 0x402357\n        int64_t v74 = v68 + 1; // 0x402366\n        int64_t v75 = v74 & 0xffffffff; // 0x402366\n        *(int64_t *)((8 * v68 & 0x7fffffff8) + v67) = *(int64_t *)v73;\n        v73 += 8;\n        int64_t v76 = v75; // 0x402375\n        while ((int32_t)(v68 + a1) - v70 != (int32_t)v74) {\n            // 0x402360\n            v74 = v76 + 1;\n            v75 = v74 & 0xffffffff;\n            *(int64_t *)((8 * v76 & 0x7fffffff8) + v67) = *(int64_t *)v73;\n            v73 += 8;\n            v76 = v75;\n        }\n        // 0x402377\n        g51 = v3;\n        v72 = v75;\n    }\n    int64_t v77 = v72;\n    int64_t v78; // 0x401d40\n    int64_t v79; // 0x401d40\n    if ((int32_t)v77 == 0) {\n        // 0x402495\n        function_403e40(0, 0);\n        v79 = 0;\n        v78 = v67;\n    } else {\n        if (v69 != 0) {\n            // 0x402485\n            function_403e40(v77 & 0xffffffff, v67);\n            v79 = v67;\n            v78 = v67;\n        } else {\n            int64_t v80 = v67 + 8; // 0x4023a8\n            function_403e40(1, v67);\n            v79 = v67;\n            v78 = v80;\n            while (v67 + 8 + (8 * v77 + 0x7fffffff8 & 0x7fffffff8) != v80) {\n                int64_t v81 = v80;\n                v80 = v81 + 8;\n                function_403e40(1, v81);\n                v79 = v81;\n                v78 = v80;\n            }\n        }\n    }\n    // 0x4023b6\n    free((int64_t *)g80);\n    free((int64_t *)g61);\n    free((int64_t *)g122);\n    free((int64_t *)g117);\n    free((int64_t *)g116);\n    free((int64_t *)g121);\n    if (g106 == 0 || (int32_t)function_40aa20((int64_t)g54, v79) != -1) {\n        // 0x40240b\n        return g88;\n    }\n    char * format3 = dcgettext(NULL, \"standard input\", 5); // 0x4024c4\n    uint32_t err_num = *__errno_location(); // 0x4024d9\n    error(1, err_num, format3);\n    v61 = (int64_t)format3;\n    v62 = err_num;\n    v63 = v77;\n    v64 = v78;\n    goto lab_0x4024e2;\n  lab_0x40250b:\n    // 0x40250b\n    g66 = (char *)v66;\n    v57 = v61;\n    v58 = v65;\n    v59 = v63;\n    v60 = v64;\n    goto lab_0x4022b5;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4025d0",
            "funcEndAddr": "4025fb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4025d0\n    int64_t v1; // 0x4025d0\n    __libc_start_main(0x401d40, (int32_t)a4, (char **)&v1, (void (*)())0x40cd20, (void (*)())0x40cd80, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4025fb",
            "funcStartAddr": "4025fb",
            "funcEndAddr": "40261a",
            "decompiledFuncCode": "int64_t function_4025fb(void) {\n    // 0x4025fb\n    return &g52;\n}\n"
        },
        {
            "funcName": "function_40261a",
            "funcStartAddr": "40261a",
            "funcEndAddr": "402651",
            "decompiledFuncCode": "int64_t function_40261a(void) {\n    // 0x40261a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402651",
            "funcStartAddr": "402651",
            "funcEndAddr": "4026a8",
            "decompiledFuncCode": "int64_t function_402651(void) {\n    // 0x402651\n    if (g57 != 0) {\n        // 0x4026a7\n        int64_t result; // 0x402651\n        return result;\n    }\n    int64_t v1 = g58; // 0x402684\n    int64_t result2; // 0x402696\n    if (g58 >= ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x402696\n        result2 = function_4025fb();\n        g57 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x402686\n        v1++;\n    }\n    // 0x40267a\n    g58 = v1;\n    // 0x402696\n    result2 = function_4025fb();\n    g57 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4026a8",
            "funcStartAddr": "4026a8",
            "funcEndAddr": "4026ad",
            "decompiledFuncCode": "int64_t function_4026a8(void) {\n    // 0x4026a8\n    return function_40261a();\n}\n"
        },
        {
            "funcName": "function_4026b0",
            "funcStartAddr": "4026b0",
            "funcEndAddr": "402708",
            "decompiledFuncCode": "int64_t function_4026b0(void) {\n    // 0x4026b0\n    if (g32 == 0) {\n        // 0x402707\n        return 0;\n    }\n    int64_t v1 = 0; // 0x4026d8\n    int64_t v2 = g122; // 0x4026d8\n    int64_t v3; // 0x4026b0\n    int64_t v4; // 0x4026b0\n    while (true) {\n      lab_0x4026e0:\n        // 0x4026e0\n        v4 = v2;\n        int64_t v5 = v1;\n        if (*(int32_t *)(v4 + 16) < 2) {\n            // 0x4026fb\n            v3 = v5 + 1 & 0xffffffff;\n            goto lab_0x4026fe;\n        } else {\n            // 0x4026e6\n            v3 = v5;\n            if (*(char *)&g40 == 0) {\n                goto lab_0x4026fe;\n            } else {\n                // 0x4026eb\n                v3 = v5;\n                if (*(int32_t *)(v4 + 44) < 1) {\n                    goto lab_0x4026fe;\n                } else {\n                    // 0x4026f4\n                    v3 = v5;\n                    if (*(int32_t *)(v4 + 48) < 1) {\n                        goto lab_0x4026fe;\n                    } else {\n                        // 0x4026fb\n                        v3 = v5 + 1 & 0xffffffff;\n                        goto lab_0x4026fe;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402707:;\n    // 0x402707\n    int64_t result; // 0x4026b0\n    return result;\n  lab_0x4026fe:\n    // 0x4026fe\n    v1 = v3;\n    v2 = v4 + 64;\n    result = v1;\n    if (v2 == g122 + 64 * (int64_t)&g32) {\n        // break -> 0x402707\n        goto lab_0x402707;\n    }\n    goto lab_0x4026e0;\n}\n"
        },
        {
            "funcName": "function_402710",
            "funcStartAddr": "402710",
            "funcEndAddr": "402782",
            "decompiledFuncCode": "int64_t function_402710(int64_t a1, int64_t a2) {\n    int64_t v1 = 0; // 0x40271f\n    if (g32 != 0) {\n        int64_t v2 = g86;\n        int32_t * v3 = (int32_t *)(g122 + 16); // 0x402740\n        int64_t v4 = v2; // 0x402744\n        int64_t v5 = 0; // 0x402744\n        if (*v3 == 2) {\n            // 0x402746\n            *v3 = 0;\n            v4 = v2 + 1 & 0xffffffff;\n            v5 = 1;\n        }\n        int64_t v6 = v5;\n        int64_t v7 = v4;\n        int64_t v8 = g122 + 64; // 0x402755\n        int64_t v9 = v8; // 0x40275c\n        while (v8 != g122 + 64 * (int64_t)&g32) {\n            // 0x402740\n            v2 = v7;\n            v3 = (int32_t *)(v9 + 16);\n            v4 = v2;\n            v5 = v6;\n            if (*v3 == 2) {\n                // 0x402746\n                *v3 = 0;\n                v4 = v2 + 1 & 0xffffffff;\n                v5 = 1;\n            }\n            // 0x402755\n            v6 = v5;\n            v7 = v4;\n            v8 = v9 + 64;\n            v9 = v8;\n        }\n        // 0x40275e\n        v1 = v8;\n        if ((char)v6 != 0) {\n            // 0x402763\n            g86 = v7;\n            v1 = v8;\n        }\n    }\n    int64_t result = v1; // 0x402770\n    if (*(char *)&g40 != 0) {\n        int32_t v10 = *(int32_t *)(g122 + 16); // 0x402774\n        g86 = v10 != 3;\n        result = v10 != 3;\n    }\n    // 0x402781\n    return result;\n}\n"
        },
        {
            "funcName": "function_402790",
            "funcStartAddr": "402790",
            "funcEndAddr": "4027eb",
            "decompiledFuncCode": "int64_t function_402790(int64_t a1) {\n    uint64_t v1 = (int64_t)(uint32_t)g119; // 0x402790\n    int64_t result = g121; // 0x4027a0\n    if (g118 > v1) {\n        // 0x4027ac\n        *(char *)(result + v1) = (char)a1;\n        g119 = &g120;\n        return result;\n    }\n    int64_t result2 = function_409460(result, &g118); // 0x4027c8\n    g121 = result2;\n    *(char *)(result2 + (int64_t)g119) = (char)a1;\n    g119 = &g120;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4027f0",
            "funcStartAddr": "4027f0",
            "funcEndAddr": "402820",
            "decompiledFuncCode": "int64_t function_4027f0(int64_t a1) {\n    // 0x4027f0\n    error(1, (int32_t)\"integer overflow\" ^ (int32_t)\"integer overflow\", dcgettext(NULL, \"integer overflow\", 5));\n    return &g141;\n}\n"
        },
        {
            "funcName": "function_402820",
            "funcStartAddr": "402820",
            "funcEndAddr": "402919",
            "decompiledFuncCode": "int64_t function_402820(int64_t a1, uint32_t a2, int64_t a3) {\n    int64_t v1 = -1; // bp-48, 0x40284b\n    int64_t v2; // bp-56, 0x402820\n    char * v3; // bp-64, 0x402820\n    int64_t v4; // 0x402820\n    int64_t v5 = function_40a5e0(a3, (int64_t *)&v3, 10, &v2, (int64_t *)&g2, v4); // 0x402854\n    if ((v5 & 0xfffffffd) != 0) {\n        // 0x402903\n        function_40a550(v5 & 0xffffffff, a1 & 0xffffffff, 0x100000000000000 * (int64_t)a2 >> 56, &g4, a3);\n        // UNREACHABLE\n    }\n    int64_t v6 = (int64_t)v3; // 0x402864\n    if (v6 == a3 || v2 == 0) {\n        // 0x4028b0\n        return 0;\n    }\n    char v7 = *v3; // 0x402876\n    int64_t v8 = -1; // 0x40287b\n    char v9 = v7; // 0x40287b\n    if (v7 == 58) {\n        int64_t v10 = v6 + 1; // 0x4028c0\n        int64_t v11 = function_40a5e0(v10, (int64_t *)&v3, 10, &v1, (int64_t *)&g2, v4); // 0x4028dc\n        if ((int32_t)v11 != 0) {\n            // 0x402903\n            function_40a550(v11 & 0xffffffff, a1 & 0xffffffff, 0x100000000000000 * (int64_t)a2 >> 56, &g4, a3);\n            // UNREACHABLE\n        }\n        // 0x4028e5\n        if (v10 == (int64_t)v3) {\n            // 0x4028b0\n            return 0;\n        }\n        // 0x4028ef\n        v8 = v1;\n        if (v8 < v2) {\n            // 0x4028b0\n            return 0;\n        }\n        // 0x4028fb\n        v9 = *v3;\n    }\n    // 0x40287d\n    if (v9 != 0) {\n        // 0x4028b0\n        return 0;\n    }\n    // 0x402881\n    g87 = v2;\n    g30 = v8;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402920",
            "funcStartAddr": "402920",
            "funcEndAddr": "402950",
            "decompiledFuncCode": "int64_t function_402920(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x402924\n    if (len <= -1) {\n        // 0x402940\n        return function_4027f0(str);\n    }\n    // 0x402931\n    *(int64_t *)&g21 = str;\n    g72 = len;\n    return len;\n}\n"
        },
        {
            "funcName": "function_402950",
            "funcStartAddr": "402950",
            "funcEndAddr": "402991",
            "decompiledFuncCode": "int64_t function_402950(int64_t a1, int64_t a2, int32_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * v1 = dcgettext(NULL, \"invalid number of columns\", 5); // 0x402960\n    int64_t result = function_409680(a1, 1, 0x7fffffff, (int64_t *)&g2, (int64_t)v1, 0); // 0x40297d\n    g111 = 1;\n    g32 = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4029a0",
            "funcStartAddr": "4029a0",
            "funcEndAddr": "402ab0",
            "decompiledFuncCode": "int64_t function_4029a0(int64_t stream) {\n    int32_t * v1 = (int32_t *)(stream + 16);\n    if (*v1 == 3) {\n        // 0x402a80\n        int64_t result; // 0x4029a0\n        return result;\n    }\n    if ((stream & 32) != 0) {\n        int64_t v2 = function_408bb0(0, 3, *(int64_t *)(stream + 8)); // 0x402a8c\n        error(1, *__errno_location(), \"%s\", (char *)v2);\n        return &g141;\n    }\n    int32_t v3 = fileno((struct _IO_FILE *)stream); // 0x4029ba\n    int64_t result2 = v3; // 0x4029c1\n    if (v3 != 0) {\n        // 0x402a40\n        int64_t v4; // 0x4029a0\n        result2 = function_40aa20(stream, v4);\n        if ((int32_t)result2 != 0) {\n            int64_t v5 = function_408bb0(0, 3, *(int64_t *)(stream + 8)); // 0x402a5b\n            error(1, *__errno_location(), \"%s\", (char *)v5);\n            // 0x402a80\n            return &g141;\n        }\n    }\n    // 0x4029c3\n    if (*(char *)&g115 != 0) {\n        // 0x402a20\n        *v1 = 3;\n        *(int32_t *)(stream + 48) = 0;\n        // 0x402a2e\n        g86--;\n        return result2;\n    }\n    // 0x4029cc\n    if (g32 == 0) {\n        // 0x402a2e\n        g86--;\n        return g122;\n    }\n    // 0x4029dd\n    *(int32_t *)(g122 + 16) = 3;\n    if (*(int32_t *)(g122 + 44) == 0) {\n        // 0x4029fe\n        *(int32_t *)(g122 + 48) = 0;\n    }\n    int64_t result3 = g122 + 64; // 0x402a05\n    while (result3 != g122 + 64 + (64 * (int64_t)g32 + 0x3fffffffc0 & 0x3fffffffc0)) {\n        int64_t v6 = result3;\n        *(int32_t *)(v6 + 16) = 3;\n        if (*(int32_t *)(v6 + 44) == 0) {\n            // 0x4029fe\n            *(int32_t *)(v6 + 48) = 0;\n        }\n        // 0x402a05\n        result3 = v6 + 64;\n    }\n    // 0x402a0e\n    g86--;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_402ab0",
            "funcStartAddr": "402ab0",
            "funcEndAddr": "402c97",
            "decompiledFuncCode": "int64_t function_402ab0(int64_t * a1, int64_t a2) {\n    int64_t v1 = (int64_t)a1;\n    int64_t v2 = a2 & 0xffffffff; // 0x402abb\n    bool v3; // 0x402ab0\n    int64_t v4 = v3 ? -1 : 1; // 0x402ad2\n    int64_t v5 = (int64_t)&g11; // 0x402ab0\n    int64_t v6 = v1; // 0x402ab0\n    int64_t v7 = 2; // 0x402ad2\n    unsigned char v8 = *(char *)v6; // 0x402ad2\n    char v9 = *(char *)v5; // 0x402ad2\n    char v10 = v9; // 0x402ad2\n    bool v11 = false; // 0x402ad2\n    while (v8 == v9) {\n        v7--;\n        v5 += v4;\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    int64_t v13; // 0x402ab0\n    int64_t v14; // 0x402ab0\n    int64_t v15; // 0x402ab0\n    int64_t v16; // 0x402ab0\n    if ((v8 >= v12 && !v11) == v8 < v12) {\n        // 0x402be0\n        v13 = 0xffffffff;\n        v15 = 0xffffffff;\n        if (g59 != 0) {\n            goto lab_0x402af8;\n        } else {\n            goto lab_0x402bf4;\n        }\n    } else {\n        int32_t v17 = a2; // 0x402ae1\n        if (v17 >= 0) {\n            // 0x402c08\n            int64_t v18; // bp-184, 0x402ab0\n            if (__fxstat(1, v17, (struct stat *)&v18) != 0) {\n                goto lab_0x402aea;\n            } else {\n                // 0x402c22\n                v14 = v2;\n                int32_t v19; // 0x402ab0\n                v16 = v19;\n                goto lab_0x402b09;\n            }\n        } else {\n            goto lab_0x402aea;\n        }\n    }\n  lab_0x402af8:;\n    int64_t v20 = __asm_movaps(__asm_movdqa(*(int128_t *)&g59)); // 0x402b04\n    v14 = v13;\n    goto lab_0x402b09;\n  lab_0x402bf4:\n    // 0x402bf4\n    function_405550(&g59);\n    v13 = v15;\n    goto lab_0x402af8;\n  lab_0x402aea:\n    // 0x402aea\n    v13 = v2;\n    v15 = v2;\n    if (g59 == 0) {\n        goto lab_0x402bf4;\n    } else {\n        goto lab_0x402af8;\n    }\n  lab_0x402b09:;\n    int64_t v21 = v20;\n    char * v22; // 0x402ab0\n    int64_t v23; // 0x402ab0\n    int64_t v24; // bp-248, 0x402ab0\n    if (function_40be80((int64_t)g65, &v21, &v24) == 0) {\n        int64_t v25 = function_409300(33); // 0x402c5d\n        int64_t v26; // bp-280, 0x402ab0\n        int64_t v27 = function_4055f0(v21, &v26); // 0x402c6e\n        char * v28 = (char *)v25;\n        __sprintf_chk(v28, 1, 33, \"%s.%09d\", (char *)v27, v16 & 0xffffffff);\n        v22 = v28;\n        v23 = v25;\n    } else {\n        int64_t v29 = v16 & 0xffffffff; // 0x402b2d\n        int64_t v30 = function_4070f0(0, -1, (int64_t)g66, &v24, (int64_t)g65, v29); // 0x402b45\n        int64_t v31 = v30 + 1; // 0x402b4a\n        int64_t v32 = function_409300(v31); // 0x402b51\n        function_4070f0((int32_t)v32, v31, (int64_t)g66, &v24, (int64_t)g65, v29);\n        v22 = (char *)v32;\n        v23 = v32;\n    }\n    // 0x402b7a\n    free((int64_t *)g64);\n    g64 = v22;\n    int64_t v33 = (int64_t)g67; // 0x402b97\n    if (g67 == NULL) {\n        // 0x402c40\n        v33 = (int32_t)v14 >= 0 ? v1 : (int64_t)&g2;\n    }\n    // 0x402b9d\n    g63 = (char *)v33;\n    int64_t v34 = function_405850(v23, 0); // 0x402baf\n    int64_t result = function_405850((int64_t)g63, 0); // 0x402bbf\n    g62 = g38 - (int32_t)v34 - (int32_t)result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ca0",
            "funcStartAddr": "402ca0",
            "funcEndAddr": "402d0c",
            "decompiledFuncCode": "int64_t function_402ca0(uint32_t a1) {\n    int32_t v1 = g92; // 0x402caf\n    if (g97 != 0) {\n        // 0x402cb7\n        g95 = a1 - v1;\n        int64_t result; // 0x402ca0\n        return result;\n    }\n    uint32_t v2 = v1 + 1;\n    if (v2 > a1) {\n        // 0x402cf3\n        g92 = a1;\n        int64_t result2; // 0x402ca0\n        return result2;\n    }\n    int64_t v3 = v2; // 0x402cec\n    int64_t v4 = (int64_t)g53; // 0x402cd0\n    int64_t * v5 = (int64_t *)(v4 + 40); // 0x402cd7\n    uint64_t v6 = *v5; // 0x402cd7\n    int64_t result3; // 0x402ca0\n    if (v6 >= *(int64_t *)(v4 + 48)) {\n        // 0x402d00\n        result3 = __overflow(g53, 32);\n    } else {\n        // 0x402ce1\n        *v5 = v6 + 1;\n        *(char *)v6 = 32;\n        result3 = v6;\n    }\n    // 0x402cec\n    v3 = v3 + 1 & 0xffffffff;\n    while (v3 <= (int64_t)a1) {\n        // 0x402cd0\n        v4 = (int64_t)g53;\n        v5 = (int64_t *)(v4 + 40);\n        v6 = *v5;\n        if (v6 >= *(int64_t *)(v4 + 48)) {\n            // 0x402d00\n            result3 = __overflow(g53, 32);\n        } else {\n            // 0x402ce1\n            *v5 = v6 + 1;\n            *(char *)v6 = 32;\n            result3 = v6;\n        }\n        // 0x402cec\n        v3 = v3 + 1 & 0xffffffff;\n    }\n    // 0x402cf3\n    g92 = a1;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_402d10",
            "funcStartAddr": "402d10",
            "funcEndAddr": "402dcc",
            "decompiledFuncCode": "int64_t function_402d10(void) {\n    int64_t v1 = g92; // 0x402d1a\n    int32_t v2 = g92 + g95; // 0x402d21\n    uint64_t v3 = (int64_t)v2; // 0x402d21\n    int64_t v4 = v3 - v1; // 0x402d2b\n    int64_t v5 = v1; // 0x402d30\n    int64_t v6 = v4; // 0x402d30\n    if ((int32_t)v4 >= 2) {\n        int64_t v7 = v1;\n        uint32_t v8 = *(int32_t *)&g33; // 0x402d32\n        int32_t v9 = v7; // 0x402d3a\n        int64_t v10 = 0x100000000 * (int64_t)(v9 >> 31) | v7; // 0x402d3b\n        int64_t v11 = v8; // 0x402d3b\n        uint32_t v12 = v8 - (int32_t)(v10 % v11) + v9; // 0x402d3f\n        while (v2 >= v12) {\n            int64_t v13 = (int64_t)g53; // 0x402d47\n            unsigned char v14 = *(char *)&g34; // 0x402d4e\n            int64_t * v15 = (int64_t *)(v13 + 40); // 0x402d55\n            uint64_t v16 = *v15; // 0x402d55\n            if (v16 >= *(int64_t *)(v13 + 48)) {\n                // 0x402db0\n                __overflow(g53, (int32_t)v14);\n            } else {\n                // 0x402d5f\n                *v15 = v16 + 1;\n                *(char *)v16 = v14;\n            }\n            int64_t v17 = v12; // 0x402d3f\n            int64_t v18 = v3 - v17; // 0x402d2b\n            v5 = v17;\n            v6 = v18;\n            if ((int32_t)v18 < 2) {\n                goto lab_0x402d8c;\n            }\n            v7 = v17;\n            v8 = *(int32_t *)&g33;\n            v9 = v7;\n            v10 = 0x100000000 * (int64_t)(v9 >> 31) | v7;\n            v11 = v8;\n            v12 = v8 - (int32_t)(v10 % v11) + v9;\n        }\n        // 0x402d32\n        v5 = v7;\n        v6 = v10 / v11;\n    }\n  lab_0x402d8c:;\n    int64_t v19 = v5 + 1 & 0xffffffff; // 0x402d8c\n    if (v19 > v3) {\n        // 0x402d94\n        g92 = v2;\n        g95 = 0;\n        return v6 & 0xffffffff;\n    }\n    int64_t v20 = (int64_t)g53; // 0x402d70\n    int64_t * v21 = (int64_t *)(v20 + 40); // 0x402d77\n    uint64_t v22 = *v21; // 0x402d77\n    int64_t result; // 0x402d10\n    if (v22 >= *(int64_t *)(v20 + 48)) {\n        // 0x402dc0\n        result = __overflow(g53, 32);\n    } else {\n        // 0x402d81\n        *v21 = v22 + 1;\n        *(char *)v22 = 32;\n        result = v22;\n    }\n    int64_t v23 = v19 + 1 & 0xffffffff; // 0x402d8c\n    int64_t v24 = v23; // 0x402d92\n    while (v23 <= v3) {\n        // 0x402d70\n        v20 = (int64_t)g53;\n        v21 = (int64_t *)(v20 + 40);\n        v22 = *v21;\n        if (v22 >= *(int64_t *)(v20 + 48)) {\n            // 0x402dc0\n            result = __overflow(g53, 32);\n        } else {\n            // 0x402d81\n            *v21 = v22 + 1;\n            *(char *)v22 = 32;\n            result = v22;\n        }\n        // 0x402d8c\n        v23 = v24 + 1 & 0xffffffff;\n        v24 = v23;\n    }\n    // 0x402d94\n    g92 = v2;\n    g95 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402dd0",
            "funcStartAddr": "402dd0",
            "funcEndAddr": "402ed3",
            "decompiledFuncCode": "int64_t function_402dd0(void) {\n    int32_t v1 = g95; // 0x402dd6\n    int64_t result = v1; // 0x402dd6\n    if (g70 < 1) {\n        if (v1 >= 0 == (v1 != 0)) {\n            // 0x402ece\n            return function_402d10();\n        }\n        // 0x402ecd\n        return result;\n    }\n    int64_t v2 = result; // 0x402dfc\n    int64_t v3 = g72; // 0x402dfc\n    int64_t v4 = (int64_t)g21; // 0x402dfc\n    int32_t result2; // 0x402e83\n    while (true) {\n        int64_t v5 = v4 + v3; // 0x402e03\n        int32_t v6 = v3;\n        int64_t v7 = v4; // 0x402e0f\n        int64_t v8 = v2; // 0x402e0f\n        int64_t v9 = v2; // 0x402e0f\n        if (v6 >= 1) {\n            int64_t v10 = v8;\n            char * v11 = (char *)v7; // 0x402e11\n            char v12 = *v11; // 0x402e11\n            int64_t v13 = v7 + 1; // 0x402e14\n            int64_t v14; // 0x402dd0\n            unsigned char v15; // 0x402dd0\n            int64_t v16; // 0x402e2f\n            int64_t * v17; // 0x402e36\n            uint64_t v18; // 0x402e36\n            char v19; // 0x402e2b\n            int64_t v20; // 0x402e55\n            int32_t v21; // 0x402e5d\n            while (v12 != 32) {\n                // 0x402e22\n                v19 = v12;\n                if ((int32_t)v10 >= 1) {\n                    // 0x402e26\n                    function_402d10();\n                    v19 = *v11;\n                }\n                // 0x402e2f\n                v15 = v19;\n                v16 = (int64_t)g53;\n                v17 = (int64_t *)(v16 + 40);\n                v18 = *v17;\n                if (v18 >= *(int64_t *)(v16 + 48)) {\n                    // 0x402eb0\n                    __overflow(g53, (int32_t)v15);\n                } else {\n                    // 0x402e40\n                    *v17 = v18 + 1;\n                    *(char *)v18 = v15;\n                }\n                // 0x402e4b\n                g92 = &g93;\n                v20 = g95;\n                v21 = v5 - v13;\n                v14 = v13;\n                v9 = v20;\n                if (v21 >= 0 != v21 != 0) {\n                    // break (via goto) -> 0x402e61\n                    goto lab_0x402e61;\n                }\n                v10 = v20;\n                v11 = (char *)v14;\n                v12 = *v11;\n                v13 = v14 + 1;\n            }\n            int64_t v22 = v10 + 1; // 0x402ea0\n            int64_t v23 = v22 & 0xffffffff; // 0x402ea0\n            g95 = v22;\n            v9 = v23;\n            while ((int32_t)(v5 - v13) >= 1) {\n                // 0x402e11\n                v10 = v23;\n                v11 = (char *)v13;\n                v12 = *v11;\n                v13++;\n                while (v12 != 32) {\n                    // 0x402e22\n                    v19 = v12;\n                    if ((int32_t)v10 >= 1) {\n                        // 0x402e26\n                        function_402d10();\n                        v19 = *v11;\n                    }\n                    // 0x402e2f\n                    v15 = v19;\n                    v16 = (int64_t)g53;\n                    v17 = (int64_t *)(v16 + 40);\n                    v18 = *v17;\n                    if (v18 >= *(int64_t *)(v16 + 48)) {\n                        // 0x402eb0\n                        __overflow(g53, (int32_t)v15);\n                    } else {\n                        // 0x402e40\n                        *v17 = v18 + 1;\n                        *(char *)v18 = v15;\n                    }\n                    // 0x402e4b\n                    g92 = &g93;\n                    v20 = g95;\n                    v21 = v5 - v13;\n                    v14 = v13;\n                    v9 = v20;\n                    if (v21 >= 0 != v21 != 0) {\n                        // break (via goto) -> 0x402e61\n                        goto lab_0x402e61;\n                    }\n                    v10 = v20;\n                    v11 = (char *)v14;\n                    v12 = *v11;\n                    v13 = v14 + 1;\n                }\n                // 0x402ea0\n                v22 = v10 + 1;\n                v23 = v22 & 0xffffffff;\n                g95 = v22;\n                v9 = v23;\n            }\n        }\n      lab_0x402e61:\n        // 0x402e61\n        if ((int32_t)v9 >= 1) {\n            // 0x402e78\n            function_402d10();\n        }\n        // 0x402e7d\n        result2 = g70 - 1;\n        g70 = result2;\n        if (result2 < 1) {\n            // break -> 0x402ec0\n            break;\n        }\n        int64_t v24 = v6 >= 0 ? v3 : 0;\n        v2 = g95;\n        v3 = (v24 ^ 0xffffffff) + v3 & 0xffffffff;\n        v4 += (0x100000000 * v24 >> 32);\n    }\n    // 0x402ec0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402ee0",
            "funcStartAddr": "402ee0",
            "funcEndAddr": "402fe0",
            "decompiledFuncCode": "int64_t function_402ee0(void) {\n    // 0x402ee0\n    g92 = 0;\n    function_402ca0(g94);\n    function_402d10();\n    if (g85 == 0) {\n        // 0x402fb6\n        error(1, (int32_t)\"page number overflow\" ^ (int32_t)\"page number overflow\", dcgettext(NULL, \"page number overflow\", 5));\n        return &g141;\n    }\n    // 0x402f13\n    int64_t v1; // bp-312, 0x402ee0\n    __sprintf_chk((char *)&v1, 1, 276, dcgettext(NULL, \"Page %lu\", 5));\n    int64_t v2 = function_405850((int64_t)&v1, 0); // 0x402f4c\n    int32_t v3 = g62 - (int32_t)v2; // 0x402f63\n    uint32_t v4 = v3 > 0 ? v3 : 0; // 0x402f74\n    int32_t result = __printf_chk(1, \"\\n\\n%*s%s%*s%s%*s%s\\n\\n\\n\", (int64_t)g94, (char *)&g2, g64, (int64_t)0, (char *)&g14, g63, (int64_t)(v4 % 2), (char *)&g14, &v1); // 0x402f96\n    g108 = 0;\n    g92 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402fe0",
            "funcStartAddr": "402fe0",
            "funcEndAddr": "4031d7",
            "decompiledFuncCode": "int64_t function_402fe0(int64_t a1) {\n    unsigned char v1 = (char)a1; // 0x402fe8\n    int64_t v2; // 0x402fe0\n    int64_t v3; // 0x403060\n    int64_t v4; // 0x403076\n    if (*(char *)&g37 == v1) {\n        int64_t v5 = g89; // 0x4030d0\n        uint32_t v6 = *(int32_t *)&g35; // 0x4030d6\n        uint32_t v7 = v6 - (int32_t)((0x100000000 * (int64_t)(g89 >> 31) | v5) % (int64_t)v6); // 0x4030e1\n        int64_t v8 = v7; // 0x4030e1\n        v4 = v8;\n        v3 = v5;\n        if (g98 == 0) {\n            goto lab_0x403084;\n        } else {\n            // 0x4030ee\n            v2 = v8;\n            if (v7 == 0) {\n                // 0x403092\n                g89 = v5;\n                return 0;\n            }\n            goto lab_0x4030f8;\n        }\n    } else {\n        if (v1 == 9) {\n            // 0x403060\n            v3 = g89;\n            uint32_t v9 = (g89 >> 31) / 0x20000000; // 0x40306b\n            v4 = (v9 | 8) - (v9 + g89) % 8;\n            v2 = v4;\n            if (g98 != 0) {\n                goto lab_0x4030f8;\n            } else {\n                goto lab_0x403084;\n            }\n        } else {\n            // 0x403002\n            if ((*(char *)((2 * a1 & 510 | 1) + (int64_t)*__ctype_b_loc()) & 64) != 0) {\n                // 0x403118\n                *(char *)g61 = v1;\n                // 0x403092\n                g89 = &g90;\n                return 1;\n            }\n            // 0x40301c\n            if (g79 != 0) {\n                goto lab_0x403148;\n            } else {\n                // 0x403029\n                if (g78 == 0) {\n                    // 0x403198\n                } else {\n                    if (v1 >= 0) {\n                        // 0x40303f\n                        *(char *)g61 = 94;\n                        *(char *)(g61 + 1) = v1 ^ 64;\n                        // 0x403092\n                        g89 = &g91;\n                        return 2;\n                    }\n                    goto lab_0x403148;\n                }\n            }\n        }\n    }\n  lab_0x403084:\n    // 0x403084\n    *(char *)g61 = v1;\n    goto lab_0x40308c;\n  lab_0x40308c:;\n    int64_t v10 = 1;\n    int64_t result = v10; // 0x40308e\n    int64_t v11 = v4; // 0x40308e\n    int64_t v12 = v3; // 0x40308e\n    int64_t result2; // 0x402fe0\n    int64_t v13; // 0x402fe0\n    int64_t v14; // 0x402fe0\n    int64_t v15; // 0x402fe0\n    if ((int32_t)v4 < 0) {\n        if ((int32_t)v3 == 0) {\n            // 0x403130\n            g89 = 0;\n            return 0;\n        }\n        // 0x4030b0\n        result2 = v10;\n        v13 = -v4 & 0xffffffff;\n        v14 = v4;\n        v15 = v3;\n        goto lab_0x4030b4;\n    } else {\n        goto lab_0x403090;\n    }\n  lab_0x4030f8:;\n    int64_t v16 = g61 + 1; // 0x403100\n    *(char *)g61 = 32;\n    int64_t v17 = v16; // 0x40310b\n    while (v16 != g61 + 1 + (v2 + 0xffffffff & 0xffffffff)) {\n        // 0x403100\n        v16 = v17 + 1;\n        *(char *)v17 = 32;\n        v17 = v16;\n    }\n    goto lab_0x40308c;\n  lab_0x403148:\n    // 0x403148\n    *(char *)g61 = 92;\n    char v18; // bp-28, 0x402fe0\n    __sprintf_chk(&v18, 1, 4, \"%03o\", (int32_t)a1 % 256);\n    *(char *)(g61 + 1) = v18;\n    // 0x403092\n    g89 = &g92;\n    return 4;\n  lab_0x403090:\n    // 0x403092\n    g89 = v12 + v11 & 0xffffffff;\n    return result;\n  lab_0x4030b4:\n    // 0x4030b4\n    result = result2;\n    v11 = v14;\n    v12 = v15;\n    if (v13 >= v15) {\n        // 0x4030b8\n        g89 = 0;\n        return result2;\n    }\n    goto lab_0x403090;\n}\n"
        },
        {
            "funcName": "function_4031e0",
            "funcStartAddr": "4031e0",
            "funcEndAddr": "40327e",
            "decompiledFuncCode": "int64_t function_4031e0(unsigned char a1) {\n    // 0x4031e0\n    if (g97 != 0) {\n        if (a1 == 32) {\n            // 0x403260\n            g95 = &g96;\n            return &g96;\n        }\n        // 0x4031fd\n        if (g95 >= 1) {\n            // 0x403205\n            function_402d10();\n        }\n        int16_t ** v1 = __ctype_b_loc(); // 0x40320a\n        char v2 = *(char *)((2 * (int64_t)a1 & 510 | 1) + (int64_t)*v1); // 0x403212\n        if ((v2 & 64) != 0) {\n            // 0x403250\n            g92 = &g93;\n        } else {\n            if (a1 == 8) {\n                // 0x40321e\n                g92--;\n            }\n        }\n    }\n    int64_t v3 = (int64_t)g53; // 0x403228\n    int64_t * v4 = (int64_t *)(v3 + 40); // 0x40322f\n    uint64_t result = *v4; // 0x40322f\n    if (result >= *(int64_t *)(v3 + 48)) {\n        // 0x403270\n        return __overflow(g53, (int32_t)a1);\n    }\n    // 0x403239\n    *v4 = result + 1;\n    *(char *)result = a1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403280",
            "funcStartAddr": "403280",
            "funcEndAddr": "403408",
            "decompiledFuncCode": "int64_t function_403280(int64_t a1) {\n    int32_t * v1 = (int32_t *)(a1 + 40); // 0x40328d\n    int32_t v2 = *v1; // 0x40328d\n    *(char *)&g68 = 1;\n    *v1 = v2 + 1;\n    int64_t v3 = 4 * (int64_t)v2; // 0x4032ae\n    int64_t v4 = g117 + v3;\n    if (g108 != 0) {\n        // 0x4033b8\n        function_402ee0();\n    }\n    // 0x4032ca\n    if (*(int32_t *)(a1 + 16) == 1) {\n        // 0x403360\n        if (g32 >= 1) {\n            int64_t v5 = g122; // 0x403382\n            *(int32_t *)(v5 + 16) = 2;\n            v5 += 64;\n            while (v5 != g122 + 64 * (int64_t)&g32) {\n                // 0x403388\n                *(int32_t *)(v5 + 16) = 2;\n                v5 += 64;\n            }\n        }\n        int32_t v6 = *(int32_t *)(g122 + 48); // 0x403398\n        if (v6 >= 0 != v6 != 0) {\n            // 0x4033a3\n            if (g41 == 0) {\n                // 0x4033ac\n                *(char *)&g68 = 0;\n            }\n            // 0x403349\n            return 1;\n        }\n    }\n    uint32_t v7 = *(int32_t *)&g69; // 0x4032db\n    if (v7 > g72) {\n        // 0x4033d8\n        function_402ca0(v7 - g72);\n        *(int32_t *)&g69 = 0;\n    }\n    // 0x4032e9\n    if (g73 != 0) {\n        // 0x4033c8\n        function_402dd0();\n    }\n    int64_t v8 = g121 + (int64_t)*(int32_t *)v4; // 0x4032b7\n    int64_t v9 = g121 + (int64_t)*(int32_t *)(v4 + 4); // 0x4032ba\n    if (v8 != v9) {\n        int64_t v10 = v8 + 1; // 0x403300\n        function_4031e0(*(char *)v8);\n        while (v9 != v10) {\n            int64_t v11 = v10;\n            v10 = v11 + 1;\n            function_4031e0(*(char *)v11);\n        }\n    }\n    // 0x403312\n    if (g95 != 0) {\n        // 0x403349\n        return 1;\n    }\n    int32_t v12 = *(int32_t *)(a1 + 52); // 0x403323\n    int32_t v13 = *(int32_t *)(g116 + v3) + v12; // 0x403331\n    g92 = v13;\n    if (v12 - g72 != g94) {\n        // 0x403349\n        return 1;\n    }\n    // 0x4033f0\n    g92 = v13 - g72;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_403410",
            "funcStartAddr": "403410",
            "funcEndAddr": "403484",
            "decompiledFuncCode": "int64_t function_403410(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403410\n    if (*(char *)&g115 != 0) {\n        // 0x403470\n        *(int32_t *)a1 = 2;\n        g86--;\n        *(int32_t *)a2 = 0;\n        int64_t result; // 0x403410\n        return result;\n    }\n    // 0x403419\n    if (g32 == 0) {\n        // 0x40345c\n        *(int32_t *)a2 = 0;\n        g86--;\n        return g122;\n    }\n    char v1 = *(char *)&g40; // 0x40342a\n    int32_t v2 = (int32_t)((a4 ^ 0xffffffff) + a4 + (int64_t)(v1 == 0)) + 2; // 0x403450\n    int64_t result2 = g122; // 0x403446\n    *(int32_t *)(result2 + 16) = v2;\n    result2 += 64;\n    while (result2 != g122 + 64 + (64 * (int64_t)g32 + 0x3fffffffc0 & 0x3fffffffc0)) {\n        // 0x403450\n        *(int32_t *)(result2 + 16) = v2;\n        result2 += 64;\n    }\n    // 0x40345c\n    *(int32_t *)a2 = 0;\n    g86--;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403490",
            "funcStartAddr": "403490",
            "funcEndAddr": "4036b4",
            "decompiledFuncCode": "int64_t function_403490(int64_t stream, int64_t a2) {\n    int64_t * v1 = (int64_t *)(stream + 8); // 0x4034a3\n    uint64_t v2 = *v1; // 0x4034a3\n    int64_t v3 = stream + 16; // 0x4034a7\n    int64_t * v4 = (int64_t *)v3; // 0x4034a7\n    int64_t v5; // 0x403490\n    int64_t v6; // 0x403490\n    if (v2 >= *v4) {\n        // 0x403650\n        v6 = __uflow((struct _IO_FILE *)stream);\n    } else {\n        int64_t v7 = v2 + 1; // 0x4034b1\n        *v1 = v7;\n        v5 = v7;\n        v6 = (int64_t)*(char *)v2;\n    }\n    char * v8 = (char *)(stream + 57);\n    int64_t v9; // 0x403490\n    int64_t v10; // 0x403490\n    int64_t v11; // 0x403490\n    int64_t v12; // 0x403490\n    int64_t v13; // 0x403490\n    int64_t v14; // 0x403490\n    int64_t v15; // 0x403490\n    if ((int32_t)v6 == 12) {\n        // 0x403540\n        if (*v8 == 0) {\n            unsigned char v16 = *(char *)&g60; // 0x403610\n            v14 = v5;\n            v11 = 1;\n            if (v16 == 0) {\n                goto lab_0x4035dd;\n            } else {\n                // 0x403597\n                *v8 = 1;\n                v10 = v16;\n                v13 = v5;\n                goto lab_0x40359b;\n            }\n        } else {\n            uint64_t v17 = *v1; // 0x40354b\n            int64_t v18; // 0x403490\n            int64_t v19; // 0x403490\n            if (v17 >= *v4) {\n                // 0x40369a\n                v18 = v5;\n                v19 = __uflow((struct _IO_FILE *)stream);\n            } else {\n                int64_t v20 = v17 + 1; // 0x403559\n                *v1 = v20;\n                v18 = v20;\n                v19 = (int64_t)*(char *)v17;\n            }\n            int64_t v21 = v19; // 0x403567\n            int64_t v22 = v18; // 0x403567\n            if ((int32_t)v19 == 10) {\n                uint64_t v23 = *v1; // 0x403671\n                if (v23 >= *v4) {\n                    // branch -> 0x40356d\n                } else {\n                    int64_t v24 = v23 + 1; // 0x40367b\n                    *v1 = v24;\n                    v21 = (int64_t)*(char *)v23;\n                    v22 = v24;\n                }\n            }\n            // 0x40356d\n            v12 = v22;\n            v9 = v21;\n            *v8 = 0;\n            v15 = (int32_t)v9 == 12;\n            goto lab_0x4034c8;\n        }\n    } else {\n        // 0x4034c1\n        *v8 = 0;\n        v9 = v6;\n        v12 = v5;\n        v15 = 0;\n        goto lab_0x4034c8;\n    }\n  lab_0x4034c8:;\n    int64_t v25 = v15;\n    int64_t v26 = v9; // 0x4034cf\n    int64_t v27 = v12; // 0x4034cf\n    int64_t result; // 0x403490\n    int64_t v28; // 0x403490\n    int64_t v29; // 0x403490\n    if (*(char *)&g60 == 0) {\n        goto lab_0x40351b;\n    } else {\n        // 0x4034d1\n        *v8 = 1;\n        result = v9;\n        v28 = v25;\n        v29 = v12;\n        if ((int32_t)v9 != 10) {\n            goto lab_0x403520;\n        } else {\n            goto lab_0x4034e0;\n        }\n    }\n  lab_0x4035dd:;\n    uint64_t v30 = *v1; // 0x4035dd\n    int64_t v31; // 0x403490\n    int64_t c; // 0x403490\n    if (v30 >= *v4) {\n        // 0x40368b\n        v31 = v14;\n        c = __uflow((struct _IO_FILE *)stream);\n    } else {\n        int64_t v32 = v30 + 1; // 0x4035eb\n        *v1 = v32;\n        v31 = v32;\n        c = (int64_t)*(char *)v30;\n    }\n    // 0x4035f6\n    int64_t v33; // 0x403490\n    if (c != 10) {\n        // 0x403630\n        ungetc((int32_t)c, (struct _IO_FILE *)stream);\n        result = function_403410(v3, stream + 48, v31, v33);\n        v28 = v11;\n    } else {\n        // 0x4035fb\n        result = function_403410(v3, stream + 48, v31, v33);\n        v28 = v11;\n    }\n    goto lab_0x4034e0;\n  lab_0x40351b:\n    // 0x40351b\n    result = v26;\n    v28 = v25;\n    v29 = v27;\n    if ((int32_t)v26 == 10) {\n        goto lab_0x4034e0;\n    } else {\n        goto lab_0x403520;\n    }\n  lab_0x4034e0:\n    // 0x4034e0\n    if (g26 == 0) {\n        // 0x403504\n        return result;\n    }\n    // 0x4034e9\n    if (*(char *)&g115 == 1) {\n        if ((int32_t)a2 != 1) {\n            // 0x403504\n            return result;\n        }\n    }\n    if ((char)v28 == 0) {\n        // 0x4034fd\n        g27 = &g28;\n    }\n    // 0x403504\n    return result;\n  lab_0x40359b:;\n    int64_t v34 = v10;\n    if (*(char *)&g115 != 0) {\n        // 0x403667\n        *v8 = 0;\n        v14 = v13;\n        v11 = v34;\n    } else {\n        // 0x4035a8\n        v14 = 0;\n        v11 = v34;\n        if (g32 != 0) {\n            int64_t v35 = g122 + 64 + (64 * (int64_t)g32 + 0x3fffffffc0 & 0x3fffffffc0); // 0x4035c4\n            int64_t v36 = g122; // 0x4035c7\n            *(char *)(v36 + 57) = 0;\n            v36 += 64;\n            v14 = v35;\n            v11 = v34;\n            while (v36 != v35) {\n                // 0x4035d0\n                *(char *)(v36 + 57) = 0;\n                v36 += 64;\n                v14 = v35;\n                v11 = v34;\n            }\n        }\n    }\n    goto lab_0x4035dd;\n  lab_0x403520:;\n    int64_t v37 = v29;\n    int64_t v38; // 0x403490\n    switch ((int32_t)v38) {\n        case 12: {\n            // 0x403597\n            v10 = v25;\n            v13 = v37;\n            v14 = v37;\n            v11 = v25;\n            if (*(char *)&g60 == 0) {\n                goto lab_0x4035dd;\n            } else {\n                goto lab_0x40359b;\n            }\n        }\n        case -1: {\n            // 0x403580\n            result = function_4029a0(stream);\n            v28 = v25;\n            goto lab_0x4034e0;\n        }\n        default: {\n            uint64_t v39 = *v1; // 0x40352a\n            if (v39 < *v4) {\n                int64_t v40 = v39 + 1; // 0x403510\n                *v1 = v40;\n                v26 = (int64_t)*(char *)v39;\n                v27 = v40;\n            } else {\n                // 0x403534\n                v26 = __uflow((struct _IO_FILE *)stream);\n                v27 = v37;\n            }\n            goto lab_0x40351b;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4036c0",
            "funcStartAddr": "4036c0",
            "funcEndAddr": "4037dd",
            "decompiledFuncCode": "int64_t function_4036c0(int64_t a1) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x4036d1\n    int32_t v2 = __sprintf_chk(g80, 1, -1, \"%*d\", (int64_t)v1, (int64_t)(uint32_t)g83); // 0x4036ef\n    uint32_t v3 = *(int32_t *)&g23; // 0x4036f4\n    g83 = &g84;\n    int64_t v4 = (int64_t)g80 + (int64_t)(v2 - v3); // 0x403709\n    int64_t v5 = v4; // 0x403717\n    if (v3 >= 1) {\n        v5++;\n        while (v5 != v4 + (int64_t)&g22 + 1) {\n            // 0x403720\n            v5++;\n        }\n    }\n    char v6 = *(char *)&g29;\n    int64_t result; // 0x4036c0\n    if (g32 < 2) {\n        // 0x4037b0\n        result = &g22;\n        if (v6 == 9) {\n            int32_t v7 = g92; // 0x4037bc\n            uint32_t v8 = *(int32_t *)&g33; // 0x4037c2\n            int32_t v9 = v8 - (int32_t)((0x100000000 * (int64_t)(v7 >> 31) | (int64_t)v7) % (int64_t)v8) + v7; // 0x4037cf\n            g92 = v9;\n            result = v9;\n        }\n    } else {\n        // 0x403740\n        result = &g22;\n        if (v6 == 9) {\n            uint32_t v10 = g81 - v3; // 0x403776\n            int64_t v11 = v10; // 0x403776\n            result = v11;\n            if (v10 >= 1) {\n                int64_t v12 = (int64_t)(v10 - 1) + 0xffffffff; // 0x403788\n                result = v11;\n                while ((int32_t)v12 != -1) {\n                    int64_t v13 = (v12 & 0xffffffff) + 0xffffffff; // 0x403798\n                    result = v11;\n                    if ((int32_t)v13 == -1) {\n                        // break -> 0x403749\n                        break;\n                    }\n                    v12 = (v13 & 0xffffffff) + 0xffffffff;\n                    result = v11;\n                }\n            }\n        }\n    }\n    // 0x403749\n    if (*(char *)&g102 == 0) {\n        // 0x403767\n        return result;\n    }\n    int64_t result2 = result; // 0x403759\n    if (*(char *)&g115 == 0) {\n        // 0x40375b\n        g89 += g81;\n        result2 = g81;\n    }\n    // 0x403767\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4037e0",
            "funcStartAddr": "4037e0",
            "funcEndAddr": "40383f",
            "decompiledFuncCode": "int64_t function_4037e0(int64_t a1) {\n    uint32_t v1 = g72; // 0x4037e1\n    uint32_t v2 = *(int32_t *)(a1 + 52); // 0x4037ea\n    *(int32_t *)&g69 = v2;\n    int64_t result; // 0x4037e0\n    if (v2 > v1) {\n        int64_t v3 = function_402ca0(v2 - v1); // 0x403812\n        *(int32_t *)&g69 = 0;\n        result = v3;\n        if (g73 == 0) {\n            goto lab_0x403800;\n        } else {\n            goto lab_0x40382a;\n        }\n    } else {\n        // 0x4037f7\n        result = v1;\n        if (g73 != 0) {\n            goto lab_0x40382a;\n        } else {\n            goto lab_0x403800;\n        }\n    }\n  lab_0x403800:\n    // 0x403800\n    if (*(char *)(a1 + 56) != 0) {\n        // 0x403835\n        return function_4036c0(a1 + 32);\n    }\n    // 0x403806\n    return result;\n  lab_0x40382a:;\n    int64_t result2 = function_402dd0(); // 0x40382a\n    if (*(char *)(a1 + 56) != 0) {\n        // 0x403835\n        return function_4036c0(a1 + 32);\n    }\n    // 0x403806\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403840",
            "funcStartAddr": "403840",
            "funcEndAddr": "403c7f",
            "decompiledFuncCode": "int64_t function_403840(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40384e\n    uint64_t v2 = *v1; // 0x40384e\n    int64_t v3 = a1 + 16; // 0x403852\n    int64_t * v4 = (int64_t *)v3; // 0x403852\n    int64_t v5; // 0x403840\n    int64_t v6; // 0x403840\n    if (v2 >= *v4) {\n        // 0x403c10\n        v6 = __uflow((struct _IO_FILE *)a1);\n    } else {\n        int64_t v7 = v2 + 1; // 0x40385c\n        *v1 = v7;\n        v5 = v7;\n        v6 = (int64_t)*(char *)v2;\n    }\n    int32_t v8 = g89; // 0x403867\n    char * v9 = (char *)(a1 + 57);\n    int64_t v10 = v5; // 0x403871\n    int64_t v11 = v6; // 0x403871\n    int64_t v12; // 0x403840\n    int64_t v13; // 0x403840\n    if (v6 == 12) {\n        uint64_t v14 = *v1; // 0x403a80\n        int64_t v15 = *v4; // 0x403a84\n        v12 = v14;\n        v13 = v15;\n        if (*v9 == 0) {\n            goto lab_0x403adc;\n        } else {\n            int64_t v16; // 0x403840\n            int64_t v17; // 0x403840\n            if (v14 >= v15) {\n                // 0x403c5e\n                v16 = v15;\n                v17 = __uflow((struct _IO_FILE *)a1);\n            } else {\n                int64_t v18 = v14 + 1; // 0x403a93\n                *v1 = v18;\n                v16 = v18;\n                v17 = (int64_t)*(char *)v14;\n            }\n            // 0x403a9e\n            v10 = v16;\n            v11 = v17;\n            if (v17 == 10) {\n                uint64_t v19 = *v1; // 0x403aab\n                if (v19 >= *v4) {\n                    // 0x403c73\n                    v10 = v16;\n                    v11 = __uflow((struct _IO_FILE *)a1);\n                } else {\n                    int64_t v20 = v19 + 1; // 0x403ab9\n                    *v1 = v20;\n                    v10 = v20;\n                    v11 = (int64_t)*(char *)v19;\n                }\n            }\n            goto lab_0x403877;\n        }\n    } else {\n        goto lab_0x403877;\n    }\n  lab_0x403978:\n    // 0x403978\n    function_4029a0(a1);\n    // 0x403985\n    return 1;\n  lab_0x403877:\n    // 0x403877\n    *v9 = 0;\n    int32_t v21 = v11; // 0x40387b\n    int64_t v22 = a1; // 0x403840\n    int64_t v23; // 0x403840\n    switch (v21) {\n        case 10: {\n            goto lab_0x40389d;\n        }\n        case 12: {\n            // 0x403ad0\n            v12 = *v1;\n            v13 = *v4;\n            goto lab_0x403adc;\n        }\n        case -1: {\n            goto lab_0x403978;\n        }\n        default: {\n            int64_t v24 = 0x100000000000000 * v11 >> 56; // 0x403892\n            int64_t v25 = function_402fe0(v24); // 0x403895\n            v22 = v24;\n            v23 = v25 & 0xffffffff;\n            goto lab_0x40389d;\n        }\n    }\n  lab_0x403adc:;\n    // 0x403adc\n    int64_t v26; // 0x403840\n    int64_t v27; // 0x403840\n    if (v13 > v12) {\n        int64_t v28 = v12 + 1; // 0x403ae5\n        *v1 = v28;\n        v26 = v28;\n        v27 = (int64_t)*(char *)v12;\n    } else {\n        // 0x403c52\n        v26 = v13;\n        v27 = __uflow((struct _IO_FILE *)a1);\n    }\n    int64_t c = v27;\n    int64_t v29; // 0x403840\n    if (c != 10) {\n        // 0x403b40\n        ungetc((int32_t)c, (struct _IO_FILE *)c);\n        g112 = 1;\n        v29 = v26;\n        if (g108 == 0) {\n            goto lab_0x403b12;\n        } else {\n            goto lab_0x403b05;\n        }\n    } else {\n        // 0x403af5\n        g112 = 1;\n        v29 = v26;\n        if (g108 == 0) {\n            goto lab_0x403b12;\n        } else {\n            goto lab_0x403b05;\n        }\n    }\n  lab_0x40389d:\n    // 0x40389d\n    if (*(char *)&g102 != 0) {\n        // 0x4038a6\n        if ((int64_t)g89 > (int64_t)g99) {\n            // 0x403b90\n            g89 = v8;\n            // 0x403985\n            return 0;\n        }\n    }\n    int64_t v30 = a1 + 32; // 0x4038b8\n    int64_t v31 = v22; // 0x4038c0\n    if (*(int64_t *)v30 != 0x402790) {\n        // 0x4038c6\n        *(char *)&g68 = 1;\n        if (g108 != 0 == *(char *)&g40 == 0) {\n            // 0x403c20\n            function_402ee0();\n        }\n        // 0x4038e3\n        int32_t v32; // 0x403840\n        if (*(char *)&g115 == 0 || g114 == 0) {\n            // 0x403990\n            v32 = *(int32_t *)&g69;\n        } else {\n            uint32_t v33 = g70; // 0x4038fd\n            g70 = 0;\n            if (v33 >= 1) {\n                int64_t v34 = g122 + 64 * (int64_t)&g70; // 0x403924\n                int64_t v35 = g122 + 64; // 0x403933\n                function_4037e0(g122);\n                g70 = &g71;\n                while (v34 != v35) {\n                    int64_t v36 = v35;\n                    v35 = v36 + 64;\n                    function_4037e0(v36);\n                    g70 = &g71;\n                }\n            }\n            int32_t v37 = *(int32_t *)(a1 + 52); // 0x403948\n            g114 = 0;\n            *(int32_t *)&g69 = v37;\n            g95 = *(char *)&g102 != 0 ? g99 : 0;\n            v32 = v37;\n        }\n        int64_t v38 = v32;\n        int64_t v39 = v38; // 0x40399e\n        if (v32 > g72) {\n            int64_t v40 = v38 - (int64_t)g72; // 0x403b60\n            function_402ca0((int32_t)v40);\n            *(int32_t *)&g69 = 0;\n            v39 = v40 & 0xffffffff;\n        }\n        // 0x4039a4\n        v31 = v39;\n        if (g73 != 0) {\n            // 0x403b80\n            function_402dd0();\n            v31 = v39;\n        }\n    }\n    int64_t v41 = v31; // 0x4039b5\n    if (*(char *)(a1 + 56) != 0) {\n        // 0x403bc0\n        function_4036c0(v30);\n        v41 = v30;\n    }\n    // 0x4039bb\n    g113 = 0;\n    if (v21 == 10) {\n        // 0x403985\n        return 1;\n    }\n    int64_t v42 = v41; // 0x4039e0\n    if ((int32_t)v23 != 0) {\n        int64_t v43 = g61;\n        int64_t v44 = v43 + 1; // 0x4039e8\n        while ((v23 + 0xffffffff & 0xffffffff) + 1 + g61 != v44) {\n            // 0x4039e8\n            v43 = v44;\n            v44 = v43 + 1;\n        }\n        // 0x4039f8\n        v42 = (int64_t)*(char *)v43;\n    }\n    int64_t v45 = v10; // 0x403840\n    int64_t v46 = v42; // 0x403840\n    int64_t result; // 0x403840\n    int64_t v47; // 0x403840\n    while (true) {\n      lab_0x4039f8:;\n        int64_t v48 = v46;\n        int64_t v49; // 0x403840\n        int64_t v50 = v49;\n        int64_t * v51 = (int64_t *)(v48 + 8);\n        uint64_t v52 = *v51; // 0x4039fc\n        int64_t * v53 = (int64_t *)(v48 + 16);\n        int64_t v54; // 0x403840\n        int64_t v55; // 0x403840\n        if (v52 >= *v53) {\n            // 0x403c48\n            v54 = v45;\n            v55 = __uflow((struct _IO_FILE *)v48);\n        } else {\n            int64_t v56 = v52 + 1; // 0x403a0a\n            *v51 = v56;\n            v54 = v56;\n            v55 = (int64_t)*(char *)v52;\n        }\n        // 0x403a15\n        result = 1;\n        int64_t v57; // 0x403840\n        switch ((int32_t)v57) {\n            case 10: {\n                return result;\n            }\n            case 12: {\n                uint64_t v58 = *v51; // 0x403be4\n                int64_t v59; // 0x403840\n                int64_t v60; // 0x403840\n                if (v58 >= *v53) {\n                    // 0x403c6a\n                    v59 = v54;\n                    v60 = __uflow((struct _IO_FILE *)v48);\n                } else {\n                    int64_t v61 = v58 + 1; // 0x403bee\n                    *v51 = v61;\n                    v59 = v61;\n                    v60 = (int64_t)*(char *)v58;\n                }\n                int64_t c2 = v60;\n                v47 = v50;\n                v29 = v59;\n                if (c2 != 10) {\n                    // 0x403c02\n                    ungetc((int32_t)c2, (struct _IO_FILE *)c2);\n                    v47 = v50;\n                    v29 = v59;\n                }\n                goto lab_0x403b12;\n            }\n            case -1: {\n                goto lab_0x403978;\n            }\n            default: {\n                int64_t v62 = 0x100000000000000 * v55 >> 56; // 0x403a30\n                int64_t v63 = function_402fe0(v62); // 0x403a39\n                int64_t v64 = v50; // 0x403a45\n                if (*(char *)&g102 != 0) {\n                    // 0x403ba0\n                    v64 = g99;\n                    if ((int64_t)g89 > v64) {\n                        // 0x403bb2\n                        result = 0;\n                        return result;\n                    }\n                }\n                int64_t v65 = v63 + 0xffffffff & 0xffffffff; // 0x403a52\n                int64_t v66 = v65 + 1 + g61; // 0x403a55\n                int64_t v67 = v62; // 0x403a5c\n                if ((int32_t)v63 != 0) {\n                    int64_t v68 = g61;\n                    int64_t v69 = v68 + 1; // 0x403a60\n                    while (v69 != v66) {\n                        // 0x403a60\n                        v68 = v69;\n                        v69 = v68 + 1;\n                    }\n                    // 0x4039f8\n                    v67 = (int64_t)*(char *)v68;\n                }\n                // 0x4039f8\n                v49 = v64;\n                v45 = v65;\n                v46 = v67;\n                goto lab_0x4039f8;\n            }\n        }\n    }\n    // 0x403985\n    return result;\n  lab_0x403b12:\n    // 0x403b12\n    if (g110 != 0) {\n        // 0x403b1b\n        g109 = 1;\n    }\n    // 0x403b22\n    function_403410(v3, a1 + 48, v29, v47);\n    return 1;\n  lab_0x403b05:\n    // 0x403b05\n    v29 = v26;\n    if (*(char *)&g40 == 0) {\n        // 0x403c30\n        *(char *)&g68 = 1;\n        function_402ee0();\n        // 0x403b22\n        int64_t v70; // 0x403840\n        function_403410(v3, a1 + 48, v26, v70);\n        return 1;\n    }\n    goto lab_0x403b12;\n}\n"
        },
        {
            "funcName": "function_403c80",
            "funcStartAddr": "403c80",
            "funcEndAddr": "403d71",
            "decompiledFuncCode": "int64_t function_403c80(int64_t a1, int64_t a2) {\n    // 0x403c80\n    bool v1; // 0x403c80\n    int64_t v2 = v1 ? -1 : 1; // 0x403c99\n    int64_t v3 = (int64_t)&g11; // 0x403c80\n    int64_t v4 = a1; // 0x403c80\n    int64_t v5 = 2; // 0x403c99\n    unsigned char v6 = *(char *)v4; // 0x403c99\n    char v7 = *(char *)v3; // 0x403c99\n    char v8 = v7; // 0x403c99\n    bool v9 = false; // 0x403c99\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    int64_t v11; // 0x403c80\n    int64_t v12; // 0x403c80\n    int64_t v13; // 0x403c80\n    if ((v6 >= v10 && !v9) != v6 < v10) {\n        // 0x403d00\n        *(int64_t *)(a2 + 8) = a1;\n        int64_t v14 = function_4054b0(a1, (int64_t *)\"r\"); // 0x403d0c\n        *(int64_t *)a2 = v14;\n        v11 = v14;\n        v12 = v14;\n        if (v14 != 0) {\n            goto lab_0x403ccf;\n        } else {\n            goto lab_0x403d1c;\n        }\n    } else {\n        char * v15 = dcgettext(NULL, \"standard input\", 5); // 0x403cb0\n        int64_t v16 = g54; // 0x403cb5\n        g106 = 1;\n        *(int64_t *)(a2 + 8) = (int64_t)v15;\n        *(int64_t *)a2 = v16;\n        v13 = 5;\n        v11 = v16;\n        v12 = 0;\n        if (g54 == 0) {\n            goto lab_0x403d1c;\n        } else {\n            goto lab_0x403ccf;\n        }\n    }\n  lab_0x403ccf:\n    // 0x403ccf\n    function_405480(v11, 2, v13);\n    *(int32_t *)(a2 + 16) = 0;\n    *(char *)(a2 + 57) = 0;\n    g75 = &g76;\n    return 1;\n  lab_0x403d1c:\n    // 0x403d1c\n    g88 = 1;\n    if (*(char *)&g74 != 0) {\n        // 0x403d2e\n        return 0;\n    }\n    int64_t v17 = function_408bb0((int32_t)v12, 3, a1); // 0x403d48\n    error(0, *__errno_location(), \"%s\", (char *)v17);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403d80",
            "funcStartAddr": "403d80",
            "funcEndAddr": "403e3f",
            "decompiledFuncCode": "int64_t function_403d80(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8);\n    int64_t v2 = a1 + 16; // 0x403dae\n    int64_t * v3 = (int64_t *)v2;\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    int64_t result; // 0x403d80\n    while (true) {\n      lab_0x403daa:;\n        uint64_t v4 = *v1; // 0x403daa\n        int32_t v5; // 0x403d80\n        int64_t v6; // 0x403d80\n        int64_t v7; // 0x403d80\n        if (v4 < *v3) {\n            int64_t v8 = v4 + 1; // 0x403d90\n            *v1 = v8;\n            unsigned char v9 = *(char *)v4; // 0x403d98\n            v5 = v9;\n            v6 = v8;\n            result = 10;\n            if (v9 == 10) {\n                // break -> 0x403dc1\n                break;\n            }\n        } else {\n            int32_t v10 = __uflow(stream); // 0x403db7\n            v5 = v10;\n            v6 = v7;\n            if (v10 == 10) {\n                // 0x403dc1\n                result = v10;\n                return result;\n            }\n        }\n        int64_t v11 = v6;\n        v7 = v11;\n        switch (v5) {\n            case 12: {\n                uint64_t v12 = *v1; // 0x403dd0\n                int64_t v13; // 0x403d80\n                int64_t c; // 0x403d80\n                if (v12 >= *v3) {\n                    // 0x403e33\n                    v13 = v11;\n                    c = __uflow(stream);\n                } else {\n                    int64_t v14 = v12 + 1; // 0x403dda\n                    *v1 = v14;\n                    v13 = v14;\n                    c = (int64_t)*(char *)v12;\n                }\n                // 0x403de5\n                int64_t v15; // 0x403d80\n                if (c == 10) {\n                    // 0x403dea\n                    if (g110 == 0) {\n                        // 0x403dfa\n                        return function_403410(v2, a1 + 48, v13, v15);\n                    }\n                    // 0x403df3\n                    g109 = 1;\n                    // 0x403dfa\n                    return function_403410(v2, a1 + 48, v13, v15);\n                }\n                // 0x403e20\n                ungetc((int32_t)c, stream);\n                if (g110 == 0) {\n                    // 0x403dfa\n                    return function_403410(v2, a1 + 48, v13, v15);\n                }\n                // 0x403df3\n                g109 = 1;\n                // 0x403dfa\n                return function_403410(v2, a1 + 48, v13, v15);\n            }\n            case -1: {\n                // 0x403e10\n                return function_4029a0(a1);\n            }\n            default: {\n                goto lab_0x403daa;\n            }\n        }\n    }\n    // 0x403dc1\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e40",
            "funcStartAddr": "403e40",
            "funcEndAddr": "404ddb",
            "decompiledFuncCode": "int64_t function_403e40(int64_t a1, int64_t a2) {\n    // 0x403e40\n    g103 = &g36;\n    int32_t v1; // 0x403e40\n    if (((int32_t)&g36 & (int32_t)&g36) == 0 || ((int32_t)&g36 & (int32_t)&g36) < 0) {\n        // 0x4041b0\n        g41 = 0;\n        g110 = 1;\n        // 0x4041be\n        g103 = g39;\n        v1 = g39;\n        goto lab_0x403e78;\n    } else {\n        // 0x403e6b\n        v1 = &g36;\n        if (g41 == 0) {\n            // 0x4041be\n            g103 = g39;\n            v1 = g39;\n            goto lab_0x403e78;\n        } else {\n            goto lab_0x403e78;\n        }\n    }\n  lab_0x404548:;\n    // 0x404548\n    int64_t v2; // 0x403e40\n    int64_t v3 = v2;\n    int64_t v4; // 0x403e40\n    int64_t v5 = v4;\n    int64_t v6; // 0x403e40\n    char v7 = v6; // 0x404548\n    *(char *)&g68 = v7;\n    int64_t v8 = v5; // 0x404552\n    int64_t v9 = v3; // 0x404552\n    int64_t v10; // 0x403e40\n    int64_t v11; // 0x403e40\n    int64_t v12; // 0x403e40\n    if (v7 == 0) {\n        goto lab_0x404561;\n    } else {\n        // 0x404554\n        v8 = v5;\n        v9 = v3;\n        if (g41 != 0) {\n            // 0x4048b0\n            if (g107 != 0) {\n                int64_t v13 = (int64_t)g53; // 0x404970\n                int64_t * v14 = (int64_t *)(v13 + 40); // 0x404977\n                uint64_t v15 = *v14; // 0x404977\n                if (v15 >= *(int64_t *)(v13 + 48)) {\n                    // 0x404d81\n                    __overflow(g53, 12);\n                    v12 = 12;\n                    v11 = v13;\n                } else {\n                    // 0x404985\n                    *v14 = v15 + 1;\n                    *(char *)v15 = 12;\n                    v12 = v5;\n                    v11 = v13;\n                }\n            } else {\n                int32_t v16 = (int32_t)v10 + 5; // 0x4048bd\n                v12 = v5;\n                v11 = v3;\n                int32_t v17 = v16; // 0x4048c0\n                int64_t v18 = v5; // 0x4048c0\n                if (v16 != 0) {\n                    int64_t v19 = (int64_t)g53;\n                    int64_t * v20 = (int64_t *)(v19 + 40); // 0x4048eb\n                    uint64_t v21 = *v20; // 0x4048eb\n                    int64_t v22; // 0x403e40\n                    if (v21 < *(int64_t *)(v19 + 48)) {\n                        // 0x4048d0\n                        *v20 = v21 + 1;\n                        *(char *)v21 = 10;\n                        v22 = v18;\n                    } else {\n                        // 0x4048f5\n                        __overflow(g53, 10);\n                        v22 = 10;\n                    }\n                    int32_t v23 = v17 - 1; // 0x4048db\n                    v12 = v22;\n                    v11 = v19;\n                    v17 = v23;\n                    v18 = v22;\n                    while (v23 != 0) {\n                        // 0x4048e4\n                        v19 = (int64_t)g53;\n                        v20 = (int64_t *)(v19 + 40);\n                        v21 = *v20;\n                        if (v21 < *(int64_t *)(v19 + 48)) {\n                            // 0x4048d0\n                            *v20 = v21 + 1;\n                            *(char *)v21 = 10;\n                            v22 = v18;\n                        } else {\n                            // 0x4048f5\n                            __overflow(g53, 10);\n                            v22 = 10;\n                        }\n                        // 0x4048db\n                        v23 = v17 - 1;\n                        v12 = v22;\n                        v11 = v19;\n                        v17 = v23;\n                        v18 = v22;\n                    }\n                }\n            }\n            goto lab_0x40459a;\n        } else {\n            goto lab_0x404561;\n        }\n    }\n  lab_0x4043d0:;\n    // 0x4043d0\n    int64_t v24; // 0x403e40\n    int32_t v25 = *(int32_t *)(v24 + 52); // 0x4043d0\n    g112 = 0;\n    *(int32_t *)&g69 = v25;\n    if ((char)v25 == 0) {\n        // 0x404760\n        function_403d80(v24);\n    }\n    unsigned char v26 = *(char *)&g68; // 0x4043f1\n    int32_t * v27; // 0x404459\n    int32_t v28 = *v27 - 1; // 0x4043f9\n    int64_t v29; // 0x403e40\n    int64_t v30 = v29 & 0xffffffff | (int64_t)v26; // 0x4043fc\n    *v27 = v28;\n    if (v28 < 1) {\n        // 0x404730\n        if ((int32_t)function_4026b0() == 0) {\n            // break -> 0x40473d\n            goto lab_0x40473d;\n        }\n    }\n    int64_t v31 = v24; // 0x404411\n    int64_t v32 = v30; // 0x404411\n    int64_t v33; // 0x403e40\n    int64_t v34; // 0x403e40\n    int64_t v35; // 0x403e40\n    if (*(char *)&g115 == 0) {\n        goto lab_0x404438;\n    } else {\n        int32_t v36 = *(int32_t *)(v24 + 16); // 0x404413\n        v31 = v24;\n        v32 = v30;\n        if (v36 == 0) {\n            goto lab_0x404438;\n        } else {\n            // 0x40441a\n            v35 = v24;\n            v34 = v30;\n            if (g113 != 0) {\n                goto lab_0x40448b;\n            } else {\n                // 0x404423\n                v33 = v30;\n                if (v36 == 3) {\n                    goto lab_0x404780;\n                } else {\n                    // 0x40442c\n                    v33 = v30;\n                    if (v36 != 2 || g112 == 0) {\n                        goto lab_0x404438;\n                    } else {\n                        goto lab_0x404780;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x404438:;\n    int64_t v37 = v32;\n    int64_t v38 = v31;\n    if (g73 != 0) {\n        // 0x404441\n        g70 = &g71;\n    }\n    // 0x404448\n    int64_t v39; // 0x403e40\n    int64_t v40 = v39 + 1; // 0x404448\n    int64_t v41 = v24 + 64; // 0x404457\n    int64_t v42 = v38; // 0x404457\n    int64_t v43 = v37; // 0x404457\n    int64_t v44 = v40 & 0xffffffff; // 0x404457\n    int64_t v45; // 0x403e40\n    int64_t v46; // 0x403e40\n    int64_t v47; // 0x403e40\n    int64_t v48; // 0x403e40\n    int64_t v49; // 0x403e40\n    int64_t v50; // 0x403e40\n    int64_t v51; // 0x40437d\n    if (g32 < (int32_t)v40) {\n        // 0x404498\n        v45 = v37;\n        v48 = v47;\n        v50 = v51;\n        v49 = v38;\n        v46 = v37;\n        if (*(char *)&g68 == 0) {\n            goto lab_0x4044c4;\n        } else {\n            goto lab_0x4044a1;\n        }\n    }\n    goto lab_0x404459;\n  lab_0x40448b:\n    // 0x40448b\n    g114 = 1;\n    v31 = v35;\n    v32 = v34;\n    goto lab_0x404438;\n  lab_0x404780:\n    // 0x404780\n    function_4037e0(v24);\n    v31 = v24;\n    v32 = v33;\n    goto lab_0x404438;\n  lab_0x4044c4:;\n    int64_t v54 = v48; // 0x4044cb\n    int64_t v55 = v50; // 0x4044cb\n    int64_t v56 = v49; // 0x4044cb\n    int64_t v57 = v46; // 0x4044cb\n    int64_t v58 = v48; // 0x4044cb\n    int64_t v59 = v50; // 0x4044cb\n    int64_t v60 = v49; // 0x4044cb\n    int64_t v61 = v46; // 0x4044cb\n    if ((int32_t)function_4026b0() == 0) {\n        goto lab_0x404746;\n    } else {\n        goto lab_0x4044d1;\n    }\n  lab_0x404746:;\n    int64_t v62 = v61;\n    int64_t v63 = v60;\n    int64_t v64 = v59;\n    int64_t v65 = v58;\n    v54 = v65;\n    v55 = v64;\n    v56 = v63;\n    v57 = v62;\n    if (g41 == 0) {\n        // break -> 0x404746\n        goto lab_0x404746_2;\n    }\n    goto lab_0x4044d1;\n  lab_0x4044d1:;\n    int64_t v66 = v57;\n    int64_t v67 = v55;\n    int64_t v68 = v54;\n    int64_t v69 = v68; // 0x4044d8\n    int64_t v70 = v67; // 0x4044d8\n    int64_t v71 = v56; // 0x4044d8\n    if (g77 != 0 && (char)v66 != 0) {\n        int64_t v72 = (int64_t)g53; // 0x4044df\n        int64_t * v73 = (int64_t *)(v72 + 40); // 0x4044e6\n        uint64_t v74 = *v73; // 0x4044e6\n        int64_t v75; // 0x403e40\n        if (v74 >= *(int64_t *)(v72 + 48)) {\n            // 0x404880\n            __overflow(g53, 10);\n            v75 = 10;\n        } else {\n            // 0x4044f4\n            *v73 = v74 + 1;\n            *(char *)v74 = 10;\n            v75 = v67;\n        }\n        // 0x4044ff\n        v69 = v68 + 0xffffffff & 0xffffffff;\n        v70 = v75;\n        v71 = v72;\n    }\n    int64_t v76 = v71;\n    int64_t v77 = v70;\n    int64_t v78 = v69;\n    int32_t v79 = v78;\n    int32_t v80 = v79; // 0x404504\n    int64_t v81 = v78; // 0x404504\n    int64_t v82 = v77; // 0x404504\n    int64_t v83 = v76; // 0x404504\n    int64_t v84 = v66; // 0x404504\n    if (v79 >= 0 != v79 != 0) {\n        goto lab_0x40450a;\n    }\n    int64_t v85 = v66; // 0x404377\n    int64_t v86 = v76; // 0x404377\n    int64_t v87 = v78; // 0x404377\n    v10 = v78;\n    v4 = v77;\n    v2 = v76;\n    v6 = v66;\n    if ((int32_t)function_4026b0() == 0) {\n        goto lab_0x404548;\n    }\n    goto lab_0x40437d;\n  lab_0x4044a1:;\n    int64_t v88 = (int64_t)g53; // 0x4044a1\n    int64_t * v89 = (int64_t *)(v88 + 40); // 0x4044a8\n    uint64_t v90 = *v89; // 0x4044a8\n    if (v90 >= *(int64_t *)(v88 + 48)) {\n        // 0x404790\n        struct _IO_FILE * v91; // 0x4044a1\n        __overflow(v91, 10);\n    } else {\n        // 0x4044b6\n        *v89 = v90 + 1;\n        *(char *)v90 = 10;\n    }\n    // 0x4044c1\n    v48 = v47 + 0xffffffff & 0xffffffff;\n    v50 = v51;\n    v49 = v88;\n    v46 = v45;\n    goto lab_0x4044c4;\n  lab_0x403e78:\n    // 0x403e78\n    if (g77 != 0) {\n        int32_t v92 = v1; // 0x403e81\n        g103 = v92 + (int32_t)(v92 < 0) >> 1;\n    }\n    int64_t v93 = a1 & 0xffffffff; // 0x403e48\n    int32_t v94 = a1; // 0x403e96\n    char v95; // 0x403e40\n    int64_t v96; // 0x403e40\n    if (v94 != 0) {\n        char v97 = *(char *)&g115; // 0x404220\n        if (v97 == 0) {\n            // 0x404dd0\n            v95 = 0;\n            v96 = g32;\n        } else {\n            // 0x40422d\n            g32 = v94;\n            v95 = v97;\n            v96 = v93;\n        }\n    } else {\n        // 0x403e9f\n        *(char *)&g115 = 0;\n        v95 = 0;\n        v96 = g32;\n    }\n    int64_t v98 = v96;\n    char v99 = v95; // 0x403f64\n    if (*(char *)&g40 != 0) {\n        // 0x403eb5\n        g104 = 1;\n    }\n    // 0x403ebc\n    int64_t v100; // 0x403e40\n    if ((int32_t)v98 < 2) {\n        // 0x404918\n        *(char *)&g40 = 0;\n        v100 = g72;\n    } else {\n        // 0x403ecc\n        int64_t v101; // 0x403e40\n        if (g73 != 0) {\n            // 0x4041d0\n            v101 = g72;\n            if (g101 == 0 == g72 == 1) {\n                // 0x4041e7\n                v101 = 1;\n                if (*(char *)&g21 == 9) {\n                    // 0x4041f7\n                    *(int64_t *)&g21 = (int64_t)&g14;\n                    v101 = 1;\n                }\n            }\n        } else {\n            // 0x403ed9\n            g72 = 1;\n            int64_t v102 = g101 != 0 ? (int64_t)&g1 : (int64_t)&g14; // 0x403eef\n            g73 = 1;\n            *(int64_t *)&g21 = v102;\n            v101 = 1;\n        }\n        // 0x403f06\n        *(char *)&g102 = 1;\n        g97 = 1;\n        v100 = v101;\n    }\n    // 0x403f14\n    if (g101 != 0) {\n        // 0x403f18\n        *(char *)&g102 = 0;\n    }\n    unsigned char v103 = *(char *)&g82; // 0x403f1f\n    int64_t v104; // 0x403e40\n    if (v103 == 0) {\n        // 0x404210\n        v104 = 0;\n        goto lab_0x403f77;\n    } else {\n        // 0x403f2f\n        g27 = g25;\n        int64_t v105 = &g24; // 0x403f4b\n        if (*(char *)&g29 == 9) {\n            int32_t v106 = *(int32_t *)&g23; // 0x403f42\n            uint32_t v107 = (v106 >> 31) / 0x20000000 + v106;\n            v105 = v107 + 8 - v107 % 8;\n        }\n        // 0x403f64\n        g81 = v105;\n        v104 = v105;\n        if (v99 == 0) {\n            // 0x404210\n            v104 = 0;\n            goto lab_0x403f77;\n        } else {\n            goto lab_0x403f77;\n        }\n    }\n  lab_0x403f77:;\n    int64_t v108 = (0x100000000 * v100 >> 32) * (0x100000000 * v98 - 0x100000000 >> 32); // 0x403f7a\n    int32_t v109 = g38 - (int32_t)v104; // 0x403f89\n    int32_t v110 = v108 > 0x7fffffff ? 0x7fffffff : v108; // 0x403f8b\n    int32_t v111 = v109 - v110; // 0x403f8b\n    int64_t result; // 0x403e40\n    int64_t v112; // 0x403e40\n    int64_t v113; // 0x403e40\n    int64_t v114; // 0x403e40\n    if (((v111 ^ v109) & (v109 ^ v110)) < 0) {\n        // 0x404d95\n        g99 = 0;\n        goto lab_0x404d9f;\n    } else {\n        int32_t v115 = (0x100000000 * (int64_t)(v111 >> 31) | (int64_t)v111) / v98; // 0x403f96\n        g99 = v115;\n        if (v115 < 1) {\n            goto lab_0x404d9f;\n        } else {\n            if (v103 != 0) {\n                // 0x404930\n                free((int64_t *)g80);\n                int64_t v116 = *(int32_t *)&g23 < 12 ? 12 : (int64_t)&g24; // 0x404952\n                g80 = (char *)function_409300(v116);\n            }\n            // 0x403fad\n            free((int64_t *)g61);\n            int32_t v117 = *(int32_t *)&g35; // 0x403fb9\n            int64_t v118 = function_409300(v117 < 8 == (7 - v117 & v117) < 0 ? (int64_t)v117 : 8); // 0x403fcf\n            g75 = 0;\n            g61 = v118;\n            free((int64_t *)g122);\n            int64_t v119 = 64 * (int64_t)g32; // 0x404002\n            int64_t v120 = v119; // 0x404009\n            if (g32 < 0) {\n                // 0x404dc1\n                function_409550(v120);\n                // UNREACHABLE\n            }\n            int64_t v121 = function_409300(v119); // 0x404018\n            g122 = v121;\n            int64_t v122; // 0x403e40\n            int64_t v123; // 0x403e40\n            if (*(char *)&g115 == 0) {\n                int64_t * v124; // 0x403e40\n                int64_t * v125; // 0x403e40\n                int64_t v126; // 0x403e40\n                if (v94 < 1) {\n                    char * v127 = dcgettext(NULL, \"standard input\", 5); // 0x404c0c\n                    *(char *)(v121 + 57) = 0;\n                    int64_t * v128 = (int64_t *)(v121 + 8);\n                    *v128 = (int64_t)v127;\n                    *(int32_t *)(v121 + 16) = 0;\n                    int64_t * v129 = (int64_t *)v121;\n                    *v129 = (int64_t)g54;\n                    g106 = 1;\n                    g75 = &g76;\n                    function_402ab0((int64_t *)&g2, 0xffffffff);\n                    *(int32_t *)(v121 + 44) = 0;\n                    v125 = v129;\n                    v124 = v128;\n                    v126 = (int64_t)&g2;\n                } else {\n                    int64_t v130 = function_403c80((int64_t)v103, v121); // 0x40424f\n                    result = v130;\n                    if ((char)v130 == 0) {\n                        // 0x40425c\n                        return result;\n                    }\n                    int64_t * stream = (int64_t *)v121;\n                    function_402ab0(stream, (int64_t)fileno((struct _IO_FILE *)*stream));\n                    *(int32_t *)(v121 + 44) = 0;\n                    v125 = stream;\n                    v124 = (int64_t *)(v121 + 8);\n                    v126 = v121;\n                }\n                int64_t v131 = v126;\n                uint32_t v132 = g32; // 0x404c4f\n                int64_t v133 = *v125; // 0x404c5d\n                v122 = v133;\n                v114 = 1;\n                v123 = v131;\n                if (v132 != 1) {\n                    int64_t v134 = (64 * (int64_t)v132 + 0x3fffffff80 & 0x3fffffffc0) + 128; // 0x404c71\n                    int64_t v135 = v121 + 64;\n                    *(int64_t *)(v135 + 8) = *v124;\n                    int64_t v136 = v135 + 64; // 0x404c84\n                    *(int64_t *)v135 = v133;\n                    *(int32_t *)(v135 + 16) = 0;\n                    *(char *)(v135 + 57) = 0;\n                    *(int32_t *)(v135 + 44) = 0;\n                    v122 = v133;\n                    v114 = v134;\n                    v123 = v131;\n                    while (v136 != v134 + v121) {\n                        // 0x404c80\n                        v135 = v136;\n                        *(int64_t *)(v135 + 8) = *v124;\n                        v136 = v135 + 64;\n                        *(int64_t *)v135 = v133;\n                        *(int32_t *)(v135 + 16) = 0;\n                        *(char *)(v135 + 57) = 0;\n                        *(int32_t *)(v135 + 44) = 0;\n                        v122 = v133;\n                        v114 = v134;\n                        v123 = v131;\n                    }\n                }\n            } else {\n                int32_t v137; // 0x403e40\n                if (v94 != 0) {\n                    int64_t v138 = a2 + 8 + (8 * v93 + 0x7fffffff8 & 0x7fffffff8); // 0x40403e\n                    int64_t v139 = v121;\n                    int64_t v140 = a2; // 0x403e40\n                    int64_t v141 = v140 + 8;\n                    int32_t v142; // 0x404068\n                    while ((char)function_403c80(*(int64_t *)v140, v139) == 0) {\n                        // 0x404064\n                        v142 = g32 - 1;\n                        g32 = v142;\n                        v140 = v141;\n                        v137 = v142;\n                        if (v141 == v138) {\n                            goto lab_0x404074;\n                        }\n                        v141 = v140 + 8;\n                    }\n                    int64_t v143 = v139 + 64; // 0x404053\n                    while (v141 != v138) {\n                        // 0x404055\n                        v139 = v143;\n                        v140 = v141;\n                        v141 = v140 + 8;\n                        while ((char)function_403c80(*(int64_t *)v140, v139) == 0) {\n                            // 0x404064\n                            v142 = g32 - 1;\n                            g32 = v142;\n                            v140 = v141;\n                            v137 = v142;\n                            if (v141 == v138) {\n                                goto lab_0x404074;\n                            }\n                            v141 = v140 + 8;\n                        }\n                        // 0x404048\n                        v143 = v139 + 64;\n                    }\n                }\n                // 0x404074\n                v137 = g32;\n              lab_0x404074:\n                // 0x404074\n                if (v137 == 0) {\n                    // 0x40425c\n                    return 0;\n                }\n                // 0x404082\n                function_402ab0((int64_t *)&g2, 0xffffffff);\n                v122 = v98;\n                v114 = 0xffffffff;\n                v123 = (int64_t)&g2;\n            }\n            int64_t v144 = v123;\n            v112 = v122;\n            g86 = g75;\n            v113 = v144;\n            if (*(char *)&g40 != 0) {\n                int64_t v145 = (int64_t)g32 * (int64_t)g103; // 0x404af6\n                if (v145 > 0x7fffffff) {\n                    // 0x404d90\n                    function_4027f0(v144);\n                    // 0x404d95\n                    g99 = 0;\n                    goto lab_0x404d9f;\n                } else {\n                    int32_t v146 = v145; // 0x404b03\n                    int32_t v147 = v146 + 1; // 0x404b06\n                    if ((v147 & (v146 ^ -0x80000000)) < 0) {\n                        // 0x404d90\n                        function_4027f0(v144);\n                        // 0x404d95\n                        g99 = 0;\n                        goto lab_0x404d9f;\n                    } else {\n                        int32_t v148 = g99; // 0x404b10\n                        if ((v148 + 1 & (v148 ^ -0x80000000)) < 0) {\n                            // 0x404d90\n                            function_4027f0(v144);\n                            // 0x404d95\n                            g99 = 0;\n                            goto lab_0x404d9f;\n                        } else {\n                            int64_t v149 = 0x100000000 * v145;\n                            uint64_t v150 = v149 >> 32; // 0x404b1f\n                            if (v150 * 0x100000000 * (int64_t)&g100 / 0x100000000 > 0x7fffffff) {\n                                // 0x404d90\n                                function_4027f0(v144);\n                                // 0x404d95\n                                g99 = 0;\n                                goto lab_0x404d9f;\n                            } else {\n                                // 0x404b28\n                                free((int64_t *)g117);\n                                int64_t v151 = 0x100000000 * (int64_t)v147;\n                                int64_t v152 = v151 >> 30; // 0x404b41\n                                v120 = v152;\n                                if (v151 < 0) {\n                                    // 0x404dc1\n                                    function_409550(v120);\n                                    // UNREACHABLE\n                                }\n                                // 0x404b4e\n                                v120 = v152;\n                                if (v147 <= -1) {\n                                    // 0x404dc1\n                                    function_409550(v120);\n                                    // UNREACHABLE\n                                }\n                                // 0x404b57\n                                g117 = function_409300(v152);\n                                free((int64_t *)g116);\n                                int64_t v153 = v149 >> 30; // 0x404b7c\n                                v120 = v153;\n                                if (v149 < 0) {\n                                    // 0x404dc1\n                                    function_409550(v120);\n                                    // UNREACHABLE\n                                }\n                                // 0x404b89\n                                v120 = v153;\n                                if (v150 >= 0x4000000000000000) {\n                                    // 0x404dc1\n                                    function_409550(v120);\n                                    // UNREACHABLE\n                                }\n                                int64_t v154 = function_409300(v153); // 0x404b92\n                                uint64_t v155 = v150 * 0x100000000 * 0x100000000 * (int64_t)&g100 / 0x100000000 / 0x100000000 & -4; // 0x404b9e\n                                g116 = v154;\n                                free((int64_t *)g121);\n                                uint128_t v156 = (int128_t)v155 * (int128_t)(int64_t)&g74; // 0x404bbb\n                                int64_t v157 = v156; // 0x404bbb\n                                if (v157 < 0 || v156 > 0xffffffffffffffff) {\n                                    // 0x404dc1\n                                    function_409550((int64_t)&g74);\n                                    // UNREACHABLE\n                                }\n                                // 0x404bd6\n                                g121 = function_409300(v157);\n                                g118 = v155 * (int64_t)&g74;\n                                v113 = v157;\n                                goto lab_0x4040aa;\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4040aa;\n            }\n        }\n    }\n  lab_0x404d9f:\n    // 0x404d9f\n    error(1, (int32_t)\"page width too narrow\" ^ (int32_t)\"page width too narrow\", dcgettext(NULL, \"page width too narrow\", 5));\n    // 0x404dc1\n    function_409550(1);\n    // UNREACHABLE\n  lab_0x4040aa:;\n    int64_t v158 = g87; // 0x4040aa\n    int64_t v159 = v112; // 0x4040b5\n    int32_t v160 = 1; // 0x4040b5\n    int64_t v161 = v114; // 0x4040b5\n    int64_t v162 = v113; // 0x4040b5\n    if (g87 >= 2) {\n        int64_t v163 = 1; // 0x404ac8\n        int64_t v164 = g32; // 0x4049c4\n        int32_t v165 = g103; // 0x4049cb\n        int64_t v166 = g122; // 0x4049cb\n        int64_t v167 = v161; // 0x4049cb\n        int64_t v168 = v162; // 0x4049cb\n        int64_t v169 = v164; // 0x4049cb\n        int64_t v170 = g122; // 0x4049cb\n        int64_t v171 = v161; // 0x4049cb\n        int64_t v172 = v162; // 0x4049cb\n        int64_t v173 = v164; // 0x4049cb\n        int32_t v174; // 0x403e40\n        int64_t v175; // 0x403e40\n        int64_t v176; // 0x403e40\n        int64_t v177; // 0x403e40\n        int64_t v178; // 0x403e40\n        int64_t v179; // 0x403e40\n        int64_t v180; // 0x403e40\n        int64_t v181; // 0x403e40\n        int64_t v182; // 0x403e40\n        int64_t v183; // 0x403e40\n        int64_t v184; // 0x403e40\n        int64_t v185; // 0x403e40\n        int64_t v186; // 0x404a04\n        int64_t v187; // 0x404a10\n        int64_t v188; // 0x404a17\n        if (g103 >= 2) {\n            v180 = v166;\n            v176 = v169;\n            v174 = v165;\n            v187 = v166;\n            v183 = v167;\n            v182 = v168;\n            v178 = v169;\n            if ((int32_t)v169 >= 1) {\n                v177 = v176;\n                v179 = 1;\n                v181 = v180;\n                v184 = v179 + 1 & 0xffffffff;\n                v185 = v181 + 64;\n                while (*(int32_t *)(v181 + 16) != 0) {\n                    // 0x4049e0\n                    if (v184 > v177) {\n                        // break (via goto) -> 0x404a10\n                        goto lab_0x404a10;\n                    }\n                    v179 = v184;\n                    v181 = v185;\n                    v184 = v179 + 1 & 0xffffffff;\n                    v185 = v181 + 64;\n                }\n                // 0x4049f3\n                function_403490(v181, v179);\n                v186 = g32;\n                while (v184 <= v186) {\n                    // 0x4049ec\n                    v177 = v186;\n                    v179 = v184;\n                    v181 = v185;\n                    v184 = v179 + 1 & 0xffffffff;\n                    v185 = v181 + 64;\n                    while (*(int32_t *)(v181 + 16) != 0) {\n                        // 0x4049e0\n                        if (v184 > v177) {\n                            // break (via goto) -> 0x404a10\n                            goto lab_0x404a10;\n                        }\n                        v179 = v184;\n                        v181 = v185;\n                        v184 = v179 + 1 & 0xffffffff;\n                        v185 = v181 + 64;\n                    }\n                    // 0x4049f3\n                    function_403490(v181, v179);\n                    v186 = g32;\n                }\n                // 0x404a10\n                v187 = g122;\n                v174 = g103;\n                v183 = v179;\n                v182 = v181;\n                v178 = v186;\n            }\n            // 0x404a17\n            v188 = 2;\n            v165 = v174;\n            v166 = v187;\n            v167 = v183;\n            v168 = v182;\n            v169 = v178;\n            v175 = v188 & 0xffffffff;\n            v170 = v187;\n            v171 = v183;\n            v172 = v182;\n            v173 = v178;\n            while (v174 > (int32_t)v188) {\n                // 0x4049d0\n                v180 = v166;\n                v176 = v169;\n                v174 = v165;\n                v187 = v166;\n                v183 = v167;\n                v182 = v168;\n                v178 = v169;\n                if ((int32_t)v169 >= 1) {\n                    v177 = v176;\n                    v179 = 1;\n                    v181 = v180;\n                    v184 = v179 + 1 & 0xffffffff;\n                    v185 = v181 + 64;\n                    while (*(int32_t *)(v181 + 16) != 0) {\n                        // 0x4049e0\n                        if (v184 > v177) {\n                            // break (via goto) -> 0x404a10\n                            goto lab_0x404a10;\n                        }\n                        v179 = v184;\n                        v181 = v185;\n                        v184 = v179 + 1 & 0xffffffff;\n                        v185 = v181 + 64;\n                    }\n                    // 0x4049f3\n                    function_403490(v181, v179);\n                    v186 = g32;\n                    while (v184 <= v186) {\n                        // 0x4049ec\n                        v177 = v186;\n                        v179 = v184;\n                        v181 = v185;\n                        v184 = v179 + 1 & 0xffffffff;\n                        v185 = v181 + 64;\n                        while (*(int32_t *)(v181 + 16) != 0) {\n                            // 0x4049e0\n                            if (v184 > v177) {\n                                // break (via goto) -> 0x404a10\n                                goto lab_0x404a10;\n                            }\n                            v179 = v184;\n                            v181 = v185;\n                            v184 = v179 + 1 & 0xffffffff;\n                            v185 = v181 + 64;\n                        }\n                        // 0x4049f3\n                        function_403490(v181, v179);\n                        v186 = g32;\n                    }\n                    // 0x404a10\n                    v187 = g122;\n                    v174 = g103;\n                    v183 = v179;\n                    v182 = v181;\n                    v178 = v186;\n                }\n                // 0x404a17\n                v188 = v175 + 1;\n                v165 = v174;\n                v166 = v187;\n                v167 = v183;\n                v168 = v182;\n                v169 = v178;\n                v175 = v188 & 0xffffffff;\n                v170 = v187;\n                v171 = v183;\n                v172 = v182;\n                v173 = v178;\n            }\n        }\n        // 0x404a24\n        *(char *)&g60 = 1;\n        int64_t v189 = v170; // 0x404a2e\n        int64_t v190 = v173; // 0x404a2e\n        int64_t v191 = v171; // 0x404a2e\n        int64_t v192 = v172; // 0x404a2e\n        int64_t v193; // 0x403e40\n        int64_t v194; // 0x403e40\n        int64_t v195; // 0x403e40\n        int64_t v196; // 0x403e40\n        int64_t v197; // 0x403e40\n        int64_t v198; // 0x403e40\n        int64_t v199; // 0x403e40\n        int64_t v200; // 0x403e40\n        int64_t v201; // 0x404a64\n        int32_t * v202; // 0x404a98\n        int64_t v203; // 0x404aa5\n        if ((int32_t)v173 >= 1) {\n            v193 = v190;\n            v195 = 1;\n            v196 = v189;\n            v199 = v195 + 1 & 0xffffffff;\n            v200 = v196 + 64;\n            while (*(int32_t *)(v196 + 16) != 0) {\n                // 0x404a40\n                v194 = v193;\n                if (v199 > v193) {\n                    // break (via goto) -> 0x404a70\n                    goto lab_0x404a70;\n                }\n                v195 = v199;\n                v196 = v200;\n                v199 = v195 + 1 & 0xffffffff;\n                v200 = v196 + 64;\n            }\n            // 0x404a53\n            function_403490(v196, v195);\n            v201 = g32;\n            v194 = v201;\n            while (v199 <= v201) {\n                // 0x404a4c\n                v193 = v201;\n                v195 = v199;\n                v196 = v200;\n                v199 = v195 + 1 & 0xffffffff;\n                v200 = v196 + 64;\n                while (*(int32_t *)(v196 + 16) != 0) {\n                    // 0x404a40\n                    v194 = v193;\n                    if (v199 > v193) {\n                        // break (via goto) -> 0x404a70\n                        goto lab_0x404a70;\n                    }\n                    v195 = v199;\n                    v196 = v200;\n                    v199 = v195 + 1 & 0xffffffff;\n                    v200 = v196 + 64;\n                }\n                // 0x404a53\n                function_403490(v196, v195);\n                v201 = g32;\n                v194 = v201;\n            }\n            // 0x404a70\n            v197 = v196;\n            v198 = v195;\n            v191 = v198;\n            v192 = v197;\n            if (*(char *)&g40 != 0) {\n                // 0x404a79\n                v191 = v198;\n                v192 = v197;\n                if ((int32_t)v194 >= 1) {\n                    // 0x404a85\n                    v203 = g122;\n                    v202 = (int32_t *)(v203 + 16);\n                    if (*v202 != 3) {\n                        // 0x404a9e\n                        *v202 = 2;\n                    }\n                    // 0x404aa5\n                    v203 += 64;\n                    v191 = v198;\n                    v192 = v197;\n                    while (v203 != g122 + 64 * (int64_t)&g32) {\n                        // 0x404a98\n                        v202 = (int32_t *)(v203 + 16);\n                        if (*v202 != 3) {\n                            // 0x404a9e\n                            *v202 = 2;\n                        }\n                        // 0x404aa5\n                        v203 += 64;\n                        v191 = v198;\n                        v192 = v197;\n                    }\n                }\n            }\n        }\n        int64_t v204 = v192;\n        int64_t v205 = v191;\n        function_402710(v204, v205);\n        *(char *)&g60 = 0;\n        int64_t v206; // 0x403e40\n        while (g86 >= 1) {\n            // 0x404ac8\n            v163++;\n            v161 = v205;\n            v162 = v204;\n            v206 = v112;\n            if (v163 == v158) {\n                goto lab_0x404ad5;\n            }\n            v164 = g32;\n            v165 = g103;\n            v166 = g122;\n            v167 = v161;\n            v168 = v162;\n            v169 = v164;\n            v170 = g122;\n            v171 = v161;\n            v172 = v162;\n            v173 = v164;\n            if (g103 >= 2) {\n                v180 = v166;\n                v176 = v169;\n                v174 = v165;\n                v187 = v166;\n                v183 = v167;\n                v182 = v168;\n                v178 = v169;\n                if ((int32_t)v169 >= 1) {\n                    v177 = v176;\n                    v179 = 1;\n                    v181 = v180;\n                    v184 = v179 + 1 & 0xffffffff;\n                    v185 = v181 + 64;\n                    while (*(int32_t *)(v181 + 16) != 0) {\n                        // 0x4049e0\n                        if (v184 > v177) {\n                            // break (via goto) -> 0x404a10\n                            goto lab_0x404a10;\n                        }\n                        v179 = v184;\n                        v181 = v185;\n                        v184 = v179 + 1 & 0xffffffff;\n                        v185 = v181 + 64;\n                    }\n                    // 0x4049f3\n                    function_403490(v181, v179);\n                    v186 = g32;\n                    while (v184 <= v186) {\n                        // 0x4049ec\n                        v177 = v186;\n                        v179 = v184;\n                        v181 = v185;\n                        v184 = v179 + 1 & 0xffffffff;\n                        v185 = v181 + 64;\n                        while (*(int32_t *)(v181 + 16) != 0) {\n                            // 0x4049e0\n                            if (v184 > v177) {\n                                // break (via goto) -> 0x404a10\n                                goto lab_0x404a10;\n                            }\n                            v179 = v184;\n                            v181 = v185;\n                            v184 = v179 + 1 & 0xffffffff;\n                            v185 = v181 + 64;\n                        }\n                        // 0x4049f3\n                        function_403490(v181, v179);\n                        v186 = g32;\n                    }\n                    // 0x404a10\n                    v187 = g122;\n                    v174 = g103;\n                    v183 = v179;\n                    v182 = v181;\n                    v178 = v186;\n                }\n                // 0x404a17\n                v188 = 2;\n                v165 = v174;\n                v166 = v187;\n                v167 = v183;\n                v168 = v182;\n                v169 = v178;\n                v175 = v188 & 0xffffffff;\n                v170 = v187;\n                v171 = v183;\n                v172 = v182;\n                v173 = v178;\n                while (v174 > (int32_t)v188) {\n                    // 0x4049d0\n                    v180 = v166;\n                    v176 = v169;\n                    v174 = v165;\n                    v187 = v166;\n                    v183 = v167;\n                    v182 = v168;\n                    v178 = v169;\n                    if ((int32_t)v169 >= 1) {\n                        v177 = v176;\n                        v179 = 1;\n                        v181 = v180;\n                        v184 = v179 + 1 & 0xffffffff;\n                        v185 = v181 + 64;\n                        while (*(int32_t *)(v181 + 16) != 0) {\n                            // 0x4049e0\n                            if (v184 > v177) {\n                                // break (via goto) -> 0x404a10\n                                goto lab_0x404a10;\n                            }\n                            v179 = v184;\n                            v181 = v185;\n                            v184 = v179 + 1 & 0xffffffff;\n                            v185 = v181 + 64;\n                        }\n                        // 0x4049f3\n                        function_403490(v181, v179);\n                        v186 = g32;\n                        while (v184 <= v186) {\n                            // 0x4049ec\n                            v177 = v186;\n                            v179 = v184;\n                            v181 = v185;\n                            v184 = v179 + 1 & 0xffffffff;\n                            v185 = v181 + 64;\n                            while (*(int32_t *)(v181 + 16) != 0) {\n                                // 0x4049e0\n                                if (v184 > v177) {\n                                    // break (via goto) -> 0x404a10\n                                    goto lab_0x404a10;\n                                }\n                                v179 = v184;\n                                v181 = v185;\n                                v184 = v179 + 1 & 0xffffffff;\n                                v185 = v181 + 64;\n                            }\n                            // 0x4049f3\n                            function_403490(v181, v179);\n                            v186 = g32;\n                        }\n                        // 0x404a10\n                        v187 = g122;\n                        v174 = g103;\n                        v183 = v179;\n                        v182 = v181;\n                        v178 = v186;\n                    }\n                    // 0x404a17\n                    v188 = v175 + 1;\n                    v165 = v174;\n                    v166 = v187;\n                    v167 = v183;\n                    v168 = v182;\n                    v169 = v178;\n                    v175 = v188 & 0xffffffff;\n                    v170 = v187;\n                    v171 = v183;\n                    v172 = v182;\n                    v173 = v178;\n                }\n            }\n            // 0x404a24\n            *(char *)&g60 = 1;\n            v189 = v170;\n            v190 = v173;\n            v191 = v171;\n            v192 = v172;\n            if ((int32_t)v173 >= 1) {\n                v193 = v190;\n                v195 = 1;\n                v196 = v189;\n                v199 = v195 + 1 & 0xffffffff;\n                v200 = v196 + 64;\n                while (*(int32_t *)(v196 + 16) != 0) {\n                    // 0x404a40\n                    v194 = v193;\n                    if (v199 > v193) {\n                        // break (via goto) -> 0x404a70\n                        goto lab_0x404a70;\n                    }\n                    v195 = v199;\n                    v196 = v200;\n                    v199 = v195 + 1 & 0xffffffff;\n                    v200 = v196 + 64;\n                }\n                // 0x404a53\n                function_403490(v196, v195);\n                v201 = g32;\n                v194 = v201;\n                while (v199 <= v201) {\n                    // 0x404a4c\n                    v193 = v201;\n                    v195 = v199;\n                    v196 = v200;\n                    v199 = v195 + 1 & 0xffffffff;\n                    v200 = v196 + 64;\n                    while (*(int32_t *)(v196 + 16) != 0) {\n                        // 0x404a40\n                        v194 = v193;\n                        if (v199 > v193) {\n                            // break (via goto) -> 0x404a70\n                            goto lab_0x404a70;\n                        }\n                        v195 = v199;\n                        v196 = v200;\n                        v199 = v195 + 1 & 0xffffffff;\n                        v200 = v196 + 64;\n                    }\n                    // 0x404a53\n                    function_403490(v196, v195);\n                    v201 = g32;\n                    v194 = v201;\n                }\n                // 0x404a70\n                v197 = v196;\n                v198 = v195;\n                v191 = v198;\n                v192 = v197;\n                if (*(char *)&g40 != 0) {\n                    // 0x404a79\n                    v191 = v198;\n                    v192 = v197;\n                    if ((int32_t)v194 >= 1) {\n                        // 0x404a85\n                        v203 = g122;\n                        v202 = (int32_t *)(v203 + 16);\n                        if (*v202 != 3) {\n                            // 0x404a9e\n                            *v202 = 2;\n                        }\n                        // 0x404aa5\n                        v203 += 64;\n                        v191 = v198;\n                        v192 = v197;\n                        while (v203 != g122 + 64 * (int64_t)&g32) {\n                            // 0x404a98\n                            v202 = (int32_t *)(v203 + 16);\n                            if (*v202 != 3) {\n                                // 0x404a9e\n                                *v202 = 2;\n                            }\n                            // 0x404aa5\n                            v203 += 64;\n                            v191 = v198;\n                            v192 = v197;\n                        }\n                    }\n                }\n            }\n            // 0x404aae\n            v204 = v192;\n            v205 = v191;\n            function_402710(v204, v205);\n            *(char *)&g60 = 0;\n        }\n        // 0x404d08\n        error(0, (int32_t)\"starting page number %lu exceeds page count %lu\" ^ (int32_t)\"starting page number %lu exceeds page count %lu\", dcgettext(NULL, \"starting page number %lu exceeds page count %lu\", 5));\n        result = g86;\n        v206 = v158;\n        if (g86 < 1) {\n            // 0x40425c\n            return result;\n        }\n      lab_0x404ad5:\n        // 0x404ad5\n        v159 = v206;\n        v160 = g87;\n    }\n    int64_t v207 = v159;\n    g85 = v160;\n    char v208 = *(char *)&g102; // 0x4040c6\n    int32_t v209 = 0; // 0x4040d9\n    if (v208 != 0) {\n        int32_t v210 = g99 + g94; // 0x4040e2\n        v209 = v210;\n        if (!((*(char *)&g115 == 0 | *(char *)&g82 == 0))) {\n            // 0x404cdd\n            v209 = g81 + v210;\n        }\n    }\n    uint32_t v211 = g72; // 0x4040f2\n    int64_t v212 = g122; // 0x4040f9\n    int32_t v213 = g32; // 0x404100\n    char v214 = *(char *)&g40; // 0x404107\n    int64_t v215 = v211 + g94; // 0x40410f\n    int32_t v216; // 0x403e40\n    int64_t v217; // 0x403e40\n    char v218; // 0x403e40\n    int64_t v219; // 0x403e40\n    int64_t v220; // 0x403e40\n    if (v213 < 2) {\n        // 0x404d70\n        v217 = v207;\n        v219 = v212;\n        v216 = 1;\n        v220 = v215;\n        v218 = *(char *)&g82;\n    } else {\n        int64_t v221 = v211; // 0x4040f2\n        char v222 = *(char *)&g82; // 0x40412d\n        int64_t v223 = g99; // 0x40413c\n        int64_t v224 = (int64_t)(*(char *)&g115 ^ 1); // 0x404143\n        int64_t v225 = v212; // 0x404147\n        int64_t v226 = 1; // 0x404147\n        int64_t v227 = v215; // 0x404147\n        int64_t v228 = v209; // 0x404147\n        int64_t v229; // 0x403e40\n        int64_t v230; // 0x403e40\n        while (true) {\n            int64_t v231 = v228;\n            int64_t v232 = v226;\n            int64_t v233 = v225;\n            int64_t * v234 = (int64_t *)(v233 + 32);\n            if (v214 != 0) {\n                // 0x404150\n                *v234 = 0x402790;\n                *(int64_t *)(v233 + 24) = 0x403280;\n            } else {\n                // 0x40419c\n                *v234 = 0x4031e0;\n                *(int64_t *)(v233 + 24) = 0x403840;\n            }\n            // 0x404160\n            v229 = v222 == 0 ? 0 : (int64_t)(v232 == 1) | v224;\n            *(char *)(v233 + 56) = (char)v229;\n            *(int32_t *)(v233 + 52) = (int32_t)v227;\n            int64_t v235; // 0x403e40\n            int64_t v236; // 0x403e40\n            int64_t v237; // 0x403e40\n            if (v208 == 0) {\n                int64_t v238 = v232 + 1; // 0x404270\n                v236 = v238;\n                v237 = 0;\n                v235 = 0;\n                v230 = 0;\n                if (v213 == (int32_t)v238) {\n                    // break -> 0x404285\n                    break;\n                }\n            } else {\n                int64_t v239 = v231 + v221; // 0x40417f\n                int64_t v240 = v239 & 0xffffffff; // 0x40417f\n                int64_t v241 = v232 + 1; // 0x404183\n                v236 = v241;\n                v237 = v240;\n                v235 = v239 + v223 & 0xffffffff;\n                v230 = v240;\n                if (v213 == (int32_t)v241) {\n                    // break -> 0x404285\n                    break;\n                }\n            }\n            // 0x404197\n            v225 = v233 + 64;\n            v226 = v236 & 0xffffffff;\n            v227 = v237;\n            v228 = v235;\n        }\n        // 0x404285\n        v217 = v229;\n        v219 = v212 + 64 * (int64_t)&g31;\n        v216 = v213;\n        v220 = v230;\n        v218 = v222;\n    }\n    int32_t v242 = v216;\n    int64_t v243 = v219;\n    int64_t v244 = v217;\n    if (v214 == 0) {\n        // 0x4042a9\n        *(int64_t *)(v243 + 32) = 0x4031e0;\n        *(int64_t *)(v243 + 24) = 0x403840;\n        goto lab_0x4042b9;\n    } else {\n        // 0x40429c\n        if (g104 != 0) {\n            // 0x404cf0\n            *(int64_t *)(v243 + 32) = 0x402790;\n            *(int64_t *)(v243 + 24) = 0x403280;\n            goto lab_0x4042b9;\n        } else {\n            // 0x4042a9\n            *(int64_t *)(v243 + 32) = 0x4031e0;\n            *(int64_t *)(v243 + 24) = 0x403840;\n            goto lab_0x4042b9;\n        }\n    }\n  lab_0x4042b9:;\n    int64_t v245 = 0; // 0x4042bc\n    if (v218 != 0) {\n        char v246 = *(char *)&g115; // 0x4042be\n        v245 = v244 & 0xffffff00 | (int64_t)(v242 == 1) | (int64_t)(v246 ^ 1);\n    }\n    int64_t v247 = v213; // 0x404100\n    *(char *)(v243 + 56) = (char)v245;\n    *(int32_t *)(v243 + 52) = (int32_t)v220;\n    g83 = g27;\n    int64_t v248 = v212; // 0x4042eb\n    int64_t v249 = v220; // 0x4042eb\n    int64_t v250 = v245; // 0x4042eb\n    int64_t v251 = v247; // 0x4042eb\n    int64_t v252 = v212; // 0x4042eb\n    int64_t v253 = v245; // 0x4042eb\n    int64_t v254 = v247; // 0x4042eb\n    if (v214 != 0) {\n        goto lab_0x4045de;\n    } else {\n        goto lab_0x4042f1;\n    }\n  lab_0x4045de:;\n    int64_t v255 = v252;\n    g119 = 0;\n    int64_t v256 = v254 - (int64_t)(g104 == 0); // 0x4045f4\n    int64_t v257 = v253; // 0x4045fd\n    char v258 = g104; // 0x4045fd\n    int64_t v259 = v254; // 0x4045fd\n    if ((int32_t)v256 >= 1) {\n        int64_t v260 = v255; // 0x404614\n        *(int32_t *)(v260 + 44) = 0;\n        v260 += 64;\n        while (v260 != v255 + 64 + (64 * v256 + 0x3fffffffc0 & 0x3fffffffc0)) {\n            // 0x404618\n            *(int32_t *)(v260 + 44) = 0;\n            v260 += 64;\n        }\n        // 0x404628\n        int64_t v261; // 0x403e40\n        v257 = v261;\n        char v262; // 0x4045de\n        v258 = v262;\n        int64_t v263; // 0x403e40\n        v259 = v263;\n        if (g86 != 0) {\n            // 0x404650\n            int64_t v264; // 0x403e40\n            int64_t v265; // 0x403e40\n            while (true) {\n                // 0x404650\n                int64_t v266; // 0x403e40\n                int64_t v267 = v266;\n                int64_t v268; // 0x403e40\n                int64_t v269 = v268;\n                int64_t v270; // 0x403e40\n                int64_t v271 = v270;\n                int64_t v272; // 0x403e40\n                int64_t v273 = v272;\n                int64_t v274; // 0x403e40\n                int64_t v275 = v274;\n                int32_t v276; // 0x403e40\n                int32_t v277 = v276;\n                int32_t v278 = g103; // 0x404650\n                *(int32_t *)(v275 + 40) = (int32_t)v273;\n                int64_t v279 = v273; // 0x40465d\n                int64_t v280 = v271; // 0x40465d\n                int64_t v281 = v269; // 0x40465d\n                int64_t v282 = v267; // 0x40465d\n                if (v278 != 0) {\n                    int32_t * v283 = (int32_t *)(v275 + 16);\n                    int32_t * v284 = (int32_t *)(v275 + 44);\n                    int64_t v285 = v273; // 0x403e40\n                    int64_t v286 = v271; // 0x403e40\n                    int64_t v287 = v269; // 0x403e40\n                    int32_t v288 = v278; // 0x403e40\n                    int64_t v289 = v267; // 0x403e40\n                    int64_t v290 = v289;\n                    int32_t v291 = v288;\n                    int64_t v292 = v287;\n                    int64_t v293 = v286;\n                    int64_t v294 = v285;\n                    int32_t v295 = v292;\n                    int64_t v296 = v293; // 0x403e40\n                    int32_t v297 = v291; // 0x403e40\n                    int32_t v298; // 0x403e40\n                    int64_t v299; // 0x403e40\n                    int64_t v300; // 0x403e40\n                    int64_t v301; // 0x403e40\n                    int32_t v302; // 0x40466e\n                    int64_t v303; // 0x4047b0\n                    uint32_t v304; // 0x4047b7\n                    char v305; // 0x4047c9\n                    int32_t v306; // 0x40467c\n                    int32_t v307; // 0x404668\n                    int32_t v308; // 0x40469c\n                    uint32_t v309; // 0x4046a0\n                    while (true) {\n                        // 0x40466e\n                        v301 = v296;\n                        v302 = g86;\n                        if (v302 == 0) {\n                            // 0x4047b0\n                            v303 = g122;\n                            v304 = g32;\n                            v305 = g104;\n                            v264 = v303;\n                            v257 = v301;\n                            v258 = v305;\n                            v259 = v304;\n                            goto lab_0x4047d4;\n                        }\n                        // 0x40467c\n                        v298 = v297;\n                        v306 = *v283;\n                        v299 = v301;\n                        if (v306 == 0) {\n                            // 0x404685\n                            g89 = 0;\n                            if ((char)function_403840(v275) == 0) {\n                                // 0x4047a0\n                                function_403d80(v275);\n                            }\n                            // 0x40469c\n                            v308 = *v283;\n                            v309 = g119;\n                            v299 = v275;\n                            if (v308 != 0 != (v309 == v295)) {\n                                // break -> 0x4046b0\n                                break;\n                            }\n                        }\n                        // 0x404668\n                        v300 = v299;\n                        v307 = v298 - 1;\n                        v296 = v300;\n                        v297 = v307;\n                        v279 = v294;\n                        v280 = v300;\n                        v281 = v292;\n                        v282 = v290;\n                        if (v307 == 0) {\n                            // break (via goto) -> 0x4046df\n                            goto lab_0x4046df;\n                        }\n                    }\n                    int64_t v310 = v309; // 0x4046a0\n                    int64_t v311 = g117; // 0x4046b0\n                    int32_t v312 = *v284; // 0x4046b7\n                    *v284 = v312 + 1;\n                    int64_t v313 = v294 + 1 & 0xffffffff; // 0x4046bb\n                    int64_t v314 = g116; // 0x4046be\n                    int64_t v315 = 4 * v290; // 0x4046c5\n                    *(int32_t *)(v311 + v315) = v295;\n                    int32_t v316 = g89; // 0x4046c9\n                    *(int32_t *)(v314 + v315) = v316;\n                    int32_t v317 = v298 - 1; // 0x4046d9\n                    v285 = v313;\n                    v286 = v275;\n                    v287 = v310;\n                    v288 = v317;\n                    v289 = v313;\n                    v279 = v313;\n                    v280 = v275;\n                    v281 = v310;\n                    v282 = v313;\n                    while (v317 != 0) {\n                        // 0x40466e\n                        v290 = v289;\n                        v291 = v288;\n                        v292 = v287;\n                        v293 = v286;\n                        v294 = v285;\n                        v295 = v292;\n                        v296 = v293;\n                        v297 = v291;\n                        while (true) {\n                            // 0x40466e\n                            v301 = v296;\n                            v302 = g86;\n                            if (v302 == 0) {\n                                // 0x4047b0\n                                v303 = g122;\n                                v304 = g32;\n                                v305 = g104;\n                                v264 = v303;\n                                v257 = v301;\n                                v258 = v305;\n                                v259 = v304;\n                                goto lab_0x4047d4;\n                            }\n                            // 0x40467c\n                            v298 = v297;\n                            v306 = *v283;\n                            v299 = v301;\n                            if (v306 == 0) {\n                                // 0x404685\n                                g89 = 0;\n                                if ((char)function_403840(v275) == 0) {\n                                    // 0x4047a0\n                                    function_403d80(v275);\n                                }\n                                // 0x40469c\n                                v308 = *v283;\n                                v309 = g119;\n                                v299 = v275;\n                                if (v308 != 0 != (v309 == v295)) {\n                                    // break -> 0x4046b0\n                                    break;\n                                }\n                            }\n                            // 0x404668\n                            v300 = v299;\n                            v307 = v298 - 1;\n                            v296 = v300;\n                            v297 = v307;\n                            v279 = v294;\n                            v280 = v300;\n                            v281 = v292;\n                            v282 = v290;\n                            if (v307 == 0) {\n                                // break (via goto) -> 0x4046df\n                                goto lab_0x4046df;\n                            }\n                        }\n                        // 0x4046b0\n                        v310 = v309;\n                        v311 = g117;\n                        v312 = *v284;\n                        *v284 = v312 + 1;\n                        v313 = v294 + 1 & 0xffffffff;\n                        v314 = g116;\n                        v315 = 4 * v290;\n                        *(int32_t *)(v311 + v315) = v295;\n                        v316 = g89;\n                        *(int32_t *)(v314 + v315) = v316;\n                        v317 = v298 - 1;\n                        v285 = v313;\n                        v286 = v275;\n                        v287 = v310;\n                        v288 = v317;\n                        v289 = v313;\n                        v279 = v313;\n                        v280 = v275;\n                        v281 = v310;\n                        v282 = v313;\n                    }\n                }\n              lab_0x4046df:;\n                int64_t v318 = v282;\n                int64_t v319 = v281;\n                v265 = v280;\n                int64_t v320 = v279;\n                int32_t v321 = v277 + 1; // 0x4046df\n                int64_t v322; // 0x403e40\n                if (v322 < (int64_t)v321) {\n                    // break -> 0x40470d\n                    break;\n                }\n                int32_t v323 = g86; // 0x4046fd\n                v276 = v321;\n                v274 = v275 + 64;\n                v272 = v320;\n                v270 = v265;\n                v268 = v319;\n                v266 = v318;\n                if (v323 == 0) {\n                    // break -> 0x40470d\n                    break;\n                }\n            }\n            int64_t v324 = g122; // 0x40470d\n            uint32_t v325 = g32; // 0x404714\n            char v326 = g104; // 0x40471b\n            v264 = v324;\n            v257 = v265;\n            v258 = v326;\n            v259 = v325;\n        }\n    }\n    goto lab_0x4047d4;\n  lab_0x4042f1:;\n    int64_t v394 = v251;\n    int64_t v395 = v249;\n    int64_t v396 = v248;\n    int64_t v365 = v395; // 0x4042f4\n    int64_t v363 = v250; // 0x4042f4\n    int64_t v361 = 0; // 0x4042f4\n    int64_t v359 = v396; // 0x4042f4\n    if (v394 != 0) {\n        uint32_t v397 = *(int32_t *)(v396 + 16); // 0x404310\n        int64_t v398 = v396 + 64; // 0x40431b\n        *(int32_t *)(v396 + 48) = v397 == 0 ? g103 : 0;\n        while (v396 + 64 + (64 * v394 + 0x3fffffffc0 & 0x3fffffffc0) != v398) {\n            int64_t v399 = v398;\n            v397 = *(int32_t *)(v399 + 16);\n            v398 = v399 + 64;\n            *(int32_t *)(v399 + 48) = v397 == 0 ? g103 : 0;\n        }\n        // 0x404327\n        v365 = v395;\n        v363 = v397;\n        v361 = v394;\n        v359 = v396;\n    }\n    goto lab_0x404327;\n  lab_0x4047d4:;\n    int64_t v327 = v259;\n    char v328 = v258;\n    int64_t v329 = v257;\n    int64_t v330 = 0;\n    int64_t v331 = 0;\n    int64_t v332 = v255;\n    int64_t v333 = v327 + 0xffffffff; // 0x4047db\n    *(int32_t *)(g117 + v330) = (int32_t)0;\n    int64_t v334; // 0x403e40\n    int64_t v335; // 0x403e40\n    int64_t v336; // 0x403e40\n    int64_t v337; // 0x403e40\n    int64_t v338; // 0x403e40\n    int64_t v339; // 0x403e40\n    int64_t v340; // 0x403e40\n    int64_t v341; // 0x403e40\n    if (v328 == 0) {\n        // 0x404890\n        v339 = v330;\n        v336 = v329;\n        v335 = v332;\n        v341 = v330;\n        v338 = v329;\n        if ((int32_t)v333 != 0) {\n            goto lab_0x404834;\n        } else {\n            goto lab_0x404898;\n        }\n    } else {\n        uint32_t v342 = (int32_t)v327; // 0x4047eb\n        int64_t v343 = v330; // 0x4047ee\n        int64_t v344 = v329; // 0x4047ee\n        if (v342 >= 1) {\n            int64_t v345 = 0x100000000 * (int64_t)((int32_t)v331 >> 31) | v331 & 0xffffffff; // 0x404801\n            int64_t v346 = v327 & 0xffffffff; // 0x404801\n            int64_t v347 = v345 / v346; // 0x404801\n            int64_t v348 = v345 % v346; // 0x404801\n            int32_t v349 = v348; // 0x404810\n            int64_t v350 = 1; // 0x404808\n            int64_t v351 = 0; // 0x404808\n            int32_t v352 = v349 - (int32_t)v350; // 0x404810\n            *(int32_t *)(v332 + 40) = (int32_t)v351;\n            int64_t v353 = v347 + (int64_t)(v352 < 0 == ((v352 ^ v349) & (int32_t)(v350 ^ v348)) < 0);\n            int64_t v354 = v350 + 1; // 0x40481c\n            int64_t v355 = v332 + 64; // 0x40481f\n            *(int32_t *)(v332 + 44) = (int32_t)v353;\n            v351 = v353 + v351 & 0xffffffff;\n            v350 = v354 & 0xffffffff;\n            v343 = v355;\n            v344 = v351;\n            while (v342 + 1 != (int32_t)v354) {\n                int64_t v356 = v355;\n                v352 = v349 - (int32_t)v350;\n                *(int32_t *)(v356 + 40) = (int32_t)v351;\n                v353 = v347 + (int64_t)(v352 < 0 == ((v352 ^ v349) & (int32_t)(v350 ^ v348)) < 0);\n                v354 = v350 + 1;\n                v355 = v356 + 64;\n                *(int32_t *)(v356 + 44) = (int32_t)v353;\n                v351 = v353 + v351 & 0xffffffff;\n                v350 = v354 & 0xffffffff;\n                v343 = v355;\n                v344 = v351;\n            }\n        }\n        // 0x40482f\n        v339 = v343;\n        v336 = v344;\n        v334 = v332;\n        v340 = v343;\n        v337 = v344;\n        if ((int32_t)v333 == 0) {\n            goto lab_0x40486f;\n        } else {\n            goto lab_0x404834;\n        }\n    }\n  lab_0x404327:;\n    int64_t v357 = function_4026b0(); // 0x404327\n    result = v357;\n    if ((int32_t)v357 == 0) {\n        // 0x40425c\n        return result;\n    }\n    int64_t v358 = v359;\n    int64_t v360 = v361;\n    int64_t v362 = v363;\n    int64_t v364 = v365;\n    if (g41 != 0) {\n        // 0x40433d\n        g108 = 1;\n    }\n    // 0x404344\n    *(char *)&g68 = 0;\n    int32_t v366 = g103 << (int32_t)(g77 != 0); // 0x40435c\n    int64_t v367; // 0x403e40\n    int64_t v368; // 0x403e40\n    int64_t v369; // 0x403e40\n    int64_t v370; // 0x403e40\n    int64_t v371; // 0x403e40\n    if (v366 < 1) {\n        // 0x404d40\n        v8 = v364;\n        v9 = v362;\n        if (v366 != 0) {\n            goto lab_0x404561;\n        } else {\n            int32_t v372 = v360; // 0x404d46\n            v371 = v364;\n            v370 = v362;\n            v369 = v360;\n            v367 = v358;\n            v368 = 0;\n            v8 = v364;\n            v9 = v362;\n            if (v372 >= 0 == (v372 != 0)) {\n                goto lab_0x404521;\n            } else {\n                goto lab_0x404561;\n            }\n        }\n    } else {\n        // 0x404370\n        if ((int32_t)function_4026b0() == 0) {\n            // 0x404548\n            *(char *)&g68 = 0;\n            v8 = v364;\n            v9 = v362;\n            goto lab_0x404561;\n        } else {\n            // 0x40437d\n            v85 = 0;\n            v86 = v362;\n            v87 = v366;\n            while (true) {\n              lab_0x40437d:\n                // 0x40437d\n                v47 = v87;\n                v51 = g32;\n                g92 = 0;\n                g95 = 0;\n                g70 = 0;\n                *(char *)&g68 = 0;\n                g114 = 0;\n                g113 = 1;\n                v41 = g122;\n                v42 = v86;\n                v43 = v85;\n                v44 = 1;\n                v48 = v47;\n                v50 = v51;\n                v49 = v86;\n                v46 = v85;\n                if (g32 < 1) {\n                    goto lab_0x4044c4;\n                } else {\n                    while (true) {\n                      lab_0x404459:\n                        // 0x404459\n                        v39 = v44;\n                        v29 = v43;\n                        v24 = v41;\n                        v27 = (int32_t *)(v24 + 48);\n                        int32_t v52 = *v27; // 0x404459\n                        g89 = 0;\n                        if (v52 >= 0 == (v52 != 0)) {\n                            goto lab_0x4043d0;\n                        } else {\n                            // 0x40446b\n                            if (*(int32_t *)(v24 + 16) == 1) {\n                                goto lab_0x4043d0;\n                            } else {\n                                int64_t v53 = v42;\n                                v31 = v53;\n                                v32 = v29;\n                                if (*(char *)&g115 == 0) {\n                                    goto lab_0x404438;\n                                } else {\n                                    // 0x40447e\n                                    v35 = v53;\n                                    v34 = v29;\n                                    v33 = v29;\n                                    if (g113 == 0) {\n                                        goto lab_0x404780;\n                                    } else {\n                                        goto lab_0x40448b;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                  lab_0x40473d:\n                    // 0x40473d\n                    v45 = v30;\n                    v58 = v47;\n                    v59 = v51;\n                    v60 = v24;\n                    v61 = v30;\n                    if (v26 != 0) {\n                        goto lab_0x4044a1;\n                    } else {\n                        goto lab_0x404746;\n                    }\n                }\n            }\n          lab_0x404746_2:\n            // 0x404746\n            v80 = v65;\n            v81 = v65;\n            v82 = v64;\n            v83 = v63;\n            v84 = v62;\n          lab_0x40450a:;\n            int64_t v373 = v84;\n            int64_t v374 = v83;\n            int64_t v375 = v82;\n            int64_t v376 = v81;\n            v10 = v376;\n            v4 = v375;\n            v2 = v374;\n            v6 = v373;\n            if (v80 != 0) {\n                goto lab_0x404548;\n            } else {\n                // 0x40450e\n                v371 = v375;\n                v370 = v374;\n                v369 = g32;\n                v367 = g122;\n                v368 = v373;\n                v10 = v376;\n                v4 = v375;\n                v2 = v374;\n                v6 = v373;\n                if (g32 < 1) {\n                    goto lab_0x404548;\n                } else {\n                    goto lab_0x404521;\n                }\n            }\n        }\n    }\n  lab_0x404834:;\n    int64_t v377 = v332 + 64 + (64 * v327 + 0x3fffffff80 & 0x3fffffffc0); // 0x404846\n    int64_t v378 = v332;\n    int64_t v379 = v378 + 64; // 0x404853\n    *(int32_t *)(v378 + 48) = *(int32_t *)(v378 + 44);\n    while (v379 != v377) {\n        // 0x404850\n        v378 = v379;\n        v379 = v378 + 64;\n        *(int32_t *)(v378 + 48) = *(int32_t *)(v378 + 44);\n    }\n    // 0x40485f\n    v334 = v377;\n    v340 = v339;\n    v337 = v336;\n    v335 = v377;\n    v341 = v339;\n    v338 = v336;\n    if (v328 == 0) {\n        goto lab_0x404898;\n    } else {\n        goto lab_0x40486f;\n    }\n  lab_0x404898:;\n    int64_t v380 = v338;\n    int64_t v381 = v341;\n    int64_t v382 = v335;\n    if (*(int32_t *)(v382 + 16) != 0) {\n        // 0x404908\n        *(int32_t *)(v382 + 48) = 0;\n        v365 = v381;\n        v363 = v380;\n        v361 = v327;\n        v359 = v332;\n    } else {\n        // 0x4048a1\n        *(int32_t *)(v382 + 48) = g103;\n        v365 = v381;\n        v363 = v380;\n        v361 = v327;\n        v359 = v332;\n    }\n    goto lab_0x404327;\n  lab_0x40486f:;\n    int64_t v383 = v334;\n    *(int32_t *)(v383 + 48) = *(int32_t *)(v383 + 44);\n    v365 = v340;\n    v363 = v337;\n    v361 = v327;\n    v359 = v332;\n    goto lab_0x404327;\n  lab_0x404561:;\n    int64_t v384 = v8;\n    v12 = v384;\n    v11 = v9;\n    if (g110 != 0 && g109 != 0) {\n        int64_t v385 = (int64_t)g53; // 0x404573\n        int64_t * v386 = (int64_t *)(v385 + 40); // 0x40457a\n        uint64_t v387 = *v386; // 0x40457a\n        int64_t v388; // 0x403e40\n        if (v387 >= *(int64_t *)(v385 + 48)) {\n            // 0x404d58\n            __overflow(g53, 12);\n            v388 = 12;\n        } else {\n            // 0x404588\n            *v386 = v387 + 1;\n            *(char *)v387 = 12;\n            v388 = v384;\n        }\n        // 0x404593\n        g109 = 0;\n        v12 = v388;\n        v11 = v385;\n    }\n    goto lab_0x40459a;\n  lab_0x40459a:;\n    int64_t v389 = (int64_t)g85 + 1; // 0x4045a1\n    g85 = v389;\n    result = v389;\n    if (v389 > g30) {\n        // 0x40425c\n        return result;\n    }\n    // 0x4045b9\n    function_402710(v11, v12);\n    int64_t v390 = g32; // 0x4045cc\n    v248 = g122;\n    v249 = v12;\n    v250 = v11;\n    v251 = v390;\n    v252 = g122;\n    v253 = v11;\n    v254 = v390;\n    if (*(char *)&g40 == 0) {\n        goto lab_0x4042f1;\n    } else {\n        goto lab_0x4045de;\n    }\n  lab_0x404521:;\n    // 0x404521\n    int64_t v391; // 0x403e40\n    if (*(int32_t *)(v367 + 16) == 0) {\n        // 0x404538\n        *(char *)(v391 + 57) = 1;\n    }\n    int64_t v392 = v367 + 64; // 0x40453d\n    int64_t v393 = v392; // 0x404544\n    v10 = 0;\n    v4 = v371;\n    v2 = v370;\n    v6 = v368;\n    while (v392 != v367 + 64 + (64 * v369 + 0x3fffffffc0 & 0x3fffffffc0)) {\n        // 0x404530\n        if (*(int32_t *)(v393 + 16) == 0) {\n            // 0x404538\n            *(char *)(v391 + 57) = 1;\n        }\n        // 0x40453d\n        v392 = v393 + 64;\n        v393 = v392;\n        v10 = 0;\n        v4 = v371;\n        v2 = v370;\n        v6 = v368;\n    }\n    goto lab_0x404548;\n}\n"
        },
        {
            "funcName": "function_404de0",
            "funcStartAddr": "404de0",
            "funcEndAddr": "4052dd",
            "decompiledFuncCode": "int64_t function_404de0(int32_t status) {\n    // 0x404de0\n    if (status != 0) {\n        // 0x404dfa\n        __fprintf_chk(g56, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x404e1f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x404e26\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Paginate or columnate FILE(s) for printing.\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]\\n                    begin [stop] printing with page FIRST_[LAST_]PAGE\\n  -COLUMN, --columns=COLUMN\\n                    output COLUMN columns and print columns down,\\n                    unless -a is used. Balance number of lines in the\\n                    columns on each page\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -a, --across      print columns across rather than down, used together\\n                    with -COLUMN\\n  -c, --show-control-chars\\n                    use hat notation (^G) and octal backslash notation\\n  -d, --double-space\\n                    double space the output\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -D, --date-format=FORMAT\\n                    use FORMAT for the header date\\n  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]\\n                    expand input CHARs (TABs) to tab WIDTH (8)\\n  -F, -f, --form-feed\\n                    use form feeds instead of newlines to separate pages\\n                    (by a 3-line page header with -F or a 5-line header\\n                    and trailer without -F)\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -h, --header=HEADER\\n                    use a centered HEADER instead of filename in page header,\\n                    -h \\\"\\\" prints a blank line, don't use -h\\\"\\\"\\n  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]\\n                    replace spaces with CHARs (TABs) to tab WIDTH (8)\\n  -J, --join-lines  merge full lines, turns off -W line truncation, no column\\n                    alignment, --sep-string[=STRING] sets separators\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -l, --length=PAGE_LENGTH\\n                    set the page length to PAGE_LENGTH (66) lines\\n                    (default number of lines of text 56, and with -F 63).\\n                    implies -t if PAGE_LENGTH <= 10\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -m, --merge       print all files in parallel, one in each column,\\n                    truncate lines, but join lines of full length with -J\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]\\n                    number lines, use DIGITS (5) digits, then SEP (TAB),\\n                    default counting starts with 1st line of input file\\n  -N, --first-line-number=NUMBER\\n                    start counting with NUMBER at 1st line of first\\n                    page printed (see +FIRST_PAGE)\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -o, --indent=MARGIN\\n                    offset each line with MARGIN (zero) spaces, do not\\n                    affect -w or -W, MARGIN will be added to PAGE_WIDTH\\n  -r, --no-file-warnings\\n                    omit warning when a file cannot be opened\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -s[CHAR], --separator[=CHAR]\\n                    separate columns by a single character, default for CHAR\\n                    is the <TAB> character without -w and 'no char' with -w.\\n                    -s[CHAR] turns off line truncation of all 3 column\\n                    options (-COLUMN|-a -COLUMN|-m) except -w is set\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -S[STRING], --sep-string[=STRING]\\n                    separate columns by STRING,\\n                    without -S: Default separator <TAB> with -J and <space>\\n                    otherwise (same as -S\\\" \\\"), no effect on column options\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -t, --omit-header  omit page headers and trailers;\\n                     implied if PAGE_LENGTH <= 10\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -T, --omit-pagination\\n                    omit page headers and trailers, eliminate any pagination\\n                    by form feeds set in input files\\n  -v, --show-nonprinting\\n                    use octal backslash notation\\n  -w, --width=PAGE_WIDTH\\n                    set page width to PAGE_WIDTH (72) characters for\\n                    multiple text-column output only, -s[char] turns off (72)\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"  -W, --page-width=PAGE_WIDTH\\n                    set page width to PAGE_WIDTH (72) characters always,\\n                    truncate lines, except -J option is set, no interference\\n                    with -S or -s\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g53);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g53);\n    int64_t v1 = &g3; // bp-136, 0x4050ba\n    bool v2; // 0x404de0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x405140\n    int64_t v6 = *(int64_t *)v5; // 0x405144\n    int64_t v7 = 3; // 0x40514a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"pr\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x405156\n        char v11 = *(char *)v9; // 0x405156\n        char v12 = v11; // 0x405156\n        bool v13 = false; // 0x405156\n        while (v10 == v11) {\n            // 0x40514c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x405156\n            int64_t v15 = v8 + v3; // 0x405156\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x405162\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x405162\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x405274;\n        } else {\n            // 0x40525e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4052b3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4051c4;\n            } else {\n                goto lab_0x405274;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4051c4;\n        } else {\n            // 0x4051aa\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4052b3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4051c4;\n            } else {\n                goto lab_0x4051c4;\n            }\n        }\n    }\n  lab_0x405274:\n    // 0x405274\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x405204\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x404e1f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4051c4:\n    // 0x4051c4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x405204\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x404e1f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4052e0",
            "funcStartAddr": "4052e0",
            "funcEndAddr": "4053aa",
            "decompiledFuncCode": "int64_t function_4052e0(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4) {\n    char v1 = a1;\n    int64_t result = 0x100000000000000 * a1 >> 56 & 0xffffffff; // 0x4052fc\n    int64_t v2 = a1; // 0x4052fc\n    if ((int32_t)v1 >= 58) {\n        // 0x4052fe\n        *(char *)a3 = v1;\n        v2 = a1 + 1;\n        result = (int64_t)*(char *)v2;\n    }\n    // 0x405308\n    if ((char)result == 0) {\n        // 0x40530c\n        return result;\n    }\n    // 0x405318\n    int32_t v3; // bp-32, 0x4052e0\n    int64_t v4 = function_409e00(v2, 0, 10, (int64_t *)&v3, (int64_t *)&g2); // 0x40532d\n    if ((int32_t)v4 == 0) {\n        int64_t result2 = v3; // 0x405336\n        if (v3 == 0x7fffffff || result2 < 0x7fffffff) {\n            // 0x405348\n            *(int32_t *)a4 = v3;\n            return result2;\n        }\n    }\n    // 0x405354\n    function_408d30(v2);\n    error(0, *__errno_location(), dcgettext(NULL, \"'-%c' extra characters or invalid number in the argument: %s\", 5));\n    function_404de0(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4053b0",
            "funcStartAddr": "4053b0",
            "funcEndAddr": "4053b8",
            "decompiledFuncCode": "int64_t function_4053b0(int64_t a1) {\n    // 0x4053b0\n    g124 = a1;\n    int64_t result; // 0x4053b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053c0",
            "funcStartAddr": "4053c0",
            "funcEndAddr": "4053c8",
            "decompiledFuncCode": "int64_t function_4053c0(int64_t a1) {\n    // 0x4053c0\n    g123 = a1;\n    int64_t result; // 0x4053c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053d0",
            "funcStartAddr": "4053d0",
            "funcEndAddr": "40546e",
            "decompiledFuncCode": "int64_t function_4053d0(void) {\n    // 0x4053d0\n    int32_t * err_num; // 0x4053e6\n    if ((int32_t)function_40c070((int64_t)g53) == 0) {\n        goto lab_0x4053fc;\n    } else {\n        // 0x4053e6\n        err_num = __errno_location();\n        if (g123 == 0) {\n            goto lab_0x405413;\n        } else {\n            // 0x4053f7\n            if (*err_num != 32) {\n                goto lab_0x405413;\n            } else {\n                goto lab_0x4053fc;\n            }\n        }\n    }\n  lab_0x4053fc:;\n    int64_t result = function_40c070((int64_t)g56); // 0x405403\n    if ((int32_t)result == 0) {\n        // 0x40540c\n        return result;\n    }\n    // 0x40544e\n    _exit(g43);\n    // UNREACHABLE\n  lab_0x405413:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40541f\n    if (g124 == 0) {\n        // 0x405459\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405433\n        error(0, *err_num, \"%s: %s\", (char *)function_408b80((int64_t)g124), v1);\n    }\n    // 0x40544e\n    _exit(g43);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405470",
            "funcStartAddr": "405470",
            "funcEndAddr": "405475",
            "decompiledFuncCode": "int64_t function_405470(void) {\n    // 0x405470\n    int64_t fd; // 0x405470\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "4054a1",
            "decompiledFuncCode": "int64_t function_405480(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x405480\n    if (stream == 0) {\n        // 0x4054a0\n        int64_t result; // 0x405480\n        return result;\n    }\n    // 0x405485\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_4054b0",
            "funcStartAddr": "4054b0",
            "funcEndAddr": "405543",
            "decompiledFuncCode": "int64_t function_4054b0(int64_t file_path, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x4054b7\n    int64_t result = (int64_t)file; // 0x4054b7\n    if (file == NULL) {\n        // 0x4054d1\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x4054c7\n    if (v1 >= 3) {\n        // 0x4054d1\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_408d50((int64_t)v1, v2); // 0x4054ea\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x405528\n        function_40aa20(result, v2);\n        // 0x4054d1\n        return 0;\n    }\n    // 0x4054ee\n    if ((int32_t)function_40aa20(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, (char *)mode); // 0x405500\n        if (v4 != NULL) {\n            // 0x4054d1\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x40550d\n    close(fd);\n    // 0x4054d1\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405550",
            "funcStartAddr": "405550",
            "funcEndAddr": "40558a",
            "decompiledFuncCode": "int64_t function_405550(int64_t * tp) {\n    int64_t result = 0; // 0x405564\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x405566\n        int64_t tp2; // bp-24, 0x405550\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *tp = tp2;\n        int128_t v1; // 0x405550\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)((int64_t)tp + 8) = result;\n    }\n    // 0x405584\n    return result;\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "4055ee",
            "decompiledFuncCode": "int64_t function_405590(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x405596\n    if (locale == NULL) {\n        // 0x4055c3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405596\n    bool v2; // 0x405590\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g5; // 0x405590\n    int64_t v5 = v1; // 0x405590\n    int64_t v6 = 2; // 0x4055b5\n    unsigned char v7 = *(char *)v5; // 0x4055b5\n    char v8 = *(char *)v4; // 0x4055b5\n    char v9 = v8; // 0x4055b5\n    bool v10 = false; // 0x4055b5\n    while (v7 == v8) {\n        // 0x4055a8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4055c1\n    int64_t v13 = v1; // 0x4055c1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4055c3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4055c1\n    unsigned char v15 = *(char *)v13; // 0x4055dd\n    char v16 = *(char *)v12; // 0x4055dd\n    char v17 = v16; // 0x4055dd\n    bool v18 = false; // 0x4055dd\n    while (v15 == v16) {\n        // 0x4055d0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "40568c",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x4055f0\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x405615\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x405646\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x405668\n    int64_t v4 = v2 - 1; // 0x405678\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x405680\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "405843",
            "decompiledFuncCode": "int64_t function_405690(uint64_t a1, int64_t a2, uint64_t a3) {\n    uint64_t v1 = a2 + a1; // 0x405699\n    int64_t v2; // 0x405690\n    int64_t v3; // 0x405690\n    int64_t v4; // 0x405690\n    int64_t v5; // 0x405690\n    int64_t v6; // 0x405690\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x4057d0\n        if (v1 <= a1) {\n            // 0x4057b6\n            return 0;\n        }\n        int16_t * v7 = *__ctype_b_loc(); // 0x4057e4\n        v6 = a1;\n        v3 = 0;\n        while (true) {\n          lab_0x4057f0:\n            // 0x4057f0\n            v4 = v3;\n            unsigned char v8 = *(char *)v6; // 0x4057f4\n            int16_t v9 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)v7); // 0x4057f8\n            if ((v9 & 0x4000) != 0) {\n                goto lab_0x40580a;\n            } else {\n                // 0x405801\n                v2 = 0xffffffff;\n                if ((a3 & 2) != 0) {\n                    // break -> 0x4057b6\n                    break;\n                }\n                // 0x405806\n                v5 = v4;\n                if ((v9 & 2) != 0) {\n                    goto lab_0x405817;\n                } else {\n                    goto lab_0x40580a;\n                }\n            }\n        }\n      lab_0x4057b6_7:\n        // 0x4057b6\n        return v2 & 0xffffffff;\n    }\n    // 0x4056b7\n    if (v1 <= a1) {\n        // 0x4057b6\n        return 0;\n    }\n    int64_t v10 = a1;\n    int64_t v11 = 0; // 0x405690\n    int64_t v12; // 0x405690\n    int64_t v13; // 0x405690\n    int64_t v14; // 0x405690\n    int64_t v15; // 0x405690\n    while (true) {\n      lab_0x4056ec:\n        // 0x4056ec\n        v13 = v11;\n        v15 = v10;\n        char v16 = *(char *)v15; // 0x4056ec\n        if (v16 < 64) {\n            // 0x4056d0\n            v14 = v15;\n            v12 = v13;\n            if (v16 > 36 || (v16 & -4) == 32) {\n                goto lab_0x4056db;\n            } else {\n                goto lab_0x405702;\n            }\n        } else {\n            if (v16 == 64) {\n                goto lab_0x405702;\n            } else {\n                // 0x4056f7\n                v14 = v15;\n                v12 = v13;\n                if (v16 < 96 || v16 < 127) {\n                    goto lab_0x4056db;\n                } else {\n                    goto lab_0x405702;\n                }\n            }\n        }\n    }\n  lab_0x4057b6_7:\n    // 0x4057b6\n    return v2 & 0xffffffff;\n  lab_0x40580a:\n    // 0x40580a\n    v2 = v4;\n    if ((int32_t)v4 == 0x7fffffff) {\n        return v2 & 0xffffffff;\n    }\n    // 0x405813\n    v5 = v4 + 1 & 0xffffffff;\n    goto lab_0x405817;\n  lab_0x405817:;\n    int64_t v17 = v6 + 1; // 0x4057f0\n    v2 = v5;\n    v6 = v17;\n    v3 = v5;\n    if (v1 == v17) {\n        // break -> 0x4057b6\n        goto lab_0x4057b6_7;\n    }\n    goto lab_0x4057f0;\n  lab_0x4056db:;\n    int64_t v18 = v14 + 1; // 0x4056df\n    v11 = v12 + 1 & 0xffffffff;\n  lab_0x4056e3:\n    // 0x4056e3\n    v10 = v18;\n    if (v10 >= v1) {\n        // break -> 0x4057b6\n        goto lab_0x4057b6_7;\n    }\n    goto lab_0x4056ec;\n  lab_0x405702:;\n    int64_t ps = 0; // bp-64, 0x405702\n    int64_t v19 = v15; // 0x40570b\n    int64_t v20 = v13; // 0x40570b\n    int64_t v21; // 0x405690\n    int64_t v22; // 0x405690\n    while (true) {\n      lab_0x405734:\n        // 0x405734\n        v21 = v20;\n        v22 = v19;\n        int32_t wc; // bp-68, 0x405690\n        int64_t v23 = function_40ba50((int64_t *)&wc, v22, v1 - v22); // 0x405747\n        switch (v23) {\n            case -1: {\n                goto lab_0x4057a0;\n            }\n            case -2: {\n                // 0x405820\n                v2 = 0xffffffff;\n                if (a3 % 2 == 0) {\n                    // 0x4056e3\n                    v2 = v21 + 1 & 0xffffffff;\n                }\n                // 0x4057b6\n                return v2 & 0xffffffff;\n            }\n            default: {\n                int32_t v24 = wcwidth(wc); // 0x40576a\n                int64_t v25; // 0x405690\n                if (v24 >= 0) {\n                    int64_t v26 = v24; // 0x40576a\n                    v2 = 0x7fffffff;\n                    if ((0x7fffffff - v21 & 0xffffffff) < v26) {\n                        // break (via goto) -> 0x4057b6\n                        goto lab_0x4057b6_7;\n                    }\n                    // 0x405720\n                    v25 = v21 + v26 & 0xffffffff;\n                } else {\n                    // 0x405773\n                    v2 = 0xffffffff;\n                    if ((a3 & 2) != 0) {\n                        // break (via goto) -> 0x4057b6\n                        goto lab_0x4057b6_7;\n                    }\n                    // 0x405779\n                    v25 = v21;\n                    if (iswcntrl(wc) == 0) {\n                        // 0x405786\n                        v2 = 0x7fffffff;\n                        if ((int32_t)v21 == 0x7fffffff) {\n                            // break (via goto) -> 0x4057b6\n                            goto lab_0x4057b6_7;\n                        }\n                        // 0x405793\n                        v25 = v21 + 1 & 0xffffffff;\n                    }\n                }\n                int64_t v27 = (v23 == 0 ? 1 : v23) + v22; // 0x405728\n                int32_t v28 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40572b\n                v18 = v27;\n                v11 = v25;\n                v19 = v27;\n                v20 = v25;\n                if (v28 != 0) {\n                    goto lab_0x4056e3;\n                }\n                goto lab_0x405734;\n            }\n        }\n    }\n  lab_0x4057a0:\n    // 0x4057a0\n    v14 = v22;\n    v12 = v21;\n    v2 = 0xffffffff;\n    if (a3 % 2 != 0) {\n        // break -> 0x4057b6\n        goto lab_0x4057b6_7;\n    }\n    goto lab_0x4056db;\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "405873",
            "decompiledFuncCode": "int64_t function_405850(int64_t str, uint32_t a2) {\n    // 0x405850\n    return function_405690(str, (int64_t)strlen((char *)str), (int64_t)a2);\n}\n"
        },
        {
            "funcName": "function_405880",
            "funcStartAddr": "405880",
            "funcEndAddr": "4058c1",
            "decompiledFuncCode": "int64_t function_405880(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x4058b9\n        return result;\n    }\n    int32_t ** v1 = __ctype_tolower_loc(); // 0x405893\n    int64_t v2 = a3; // 0x405898\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x4058a0\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x4058a8\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x4058a0\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x4058b9\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "405911",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x405909\n        return result;\n    }\n    int32_t ** v1 = __ctype_toupper_loc(); // 0x4058e3\n    int64_t v2 = a3; // 0x4058e8\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x4058f0\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x4058f8\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x4058f0\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x405909\n    return result;\n}\n"
        },
        {
            "funcName": "function_405920",
            "funcStartAddr": "405920",
            "funcEndAddr": "4070e5",
            "decompiledFuncCode": "int64_t function_405920(int32_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a3;\n    int64_t v2 = a1;\n    int64_t v3 = a2; // bp-1224, 0x405944\n    char v4 = *(char *)&v1; // 0x40596c\n    v3 = a2;\n    int64_t result = 0; // 0x405974\n    int64_t v5 = v2; // 0x405974\n    char v6; // 0x405920\n    char v7; // 0x405920\n    char v8; // 0x405920\n    char v9; // 0x405920\n    char v10; // 0x405920\n    char v11; // 0x405920\n    char v12; // 0x405920\n    char v13; // 0x405920\n    char v14; // 0x405920\n    char v15; // 0x405920\n    int64_t v16; // 0x405920\n    int64_t v17; // 0x405920\n    int64_t v18; // 0x405920\n    int64_t v19; // 0x405920\n    int64_t v20; // 0x405920\n    int64_t v21; // 0x405920\n    int64_t v22; // 0x405920\n    int64_t v23; // 0x405920\n    int64_t v24; // 0x405920\n    int64_t v25; // 0x405920\n    int64_t v26; // 0x405920\n    int64_t v27; // 0x405920\n    int64_t v28; // 0x405920\n    int64_t v29; // 0x405920\n    char v30; // 0x405920\n    int64_t v31; // 0x405920\n    int64_t v32; // 0x405920\n    int64_t v33; // 0x405920\n    int64_t v34; // 0x405920\n    int64_t v35; // 0x405920\n    int64_t v36; // 0x405920\n    int64_t v37; // 0x405920\n    int64_t v38; // 0x405920\n    char * v39; // 0x405920\n    int64_t v40; // 0x405920\n    char * v41; // 0x405920\n    int64_t v42; // 0x405920\n    int64_t * str; // 0x405920\n    char * v43; // 0x405920\n    int64_t * v44; // 0x405920\n    int64_t format; // 0x405920\n    int16_t * v45; // 0x405920\n    int64_t * v46; // 0x405920\n    int32_t * v47; // 0x405920\n    int32_t * v48; // 0x405920\n    int64_t v49; // 0x405935\n    int64_t * v50; // 0x405920\n    int64_t * v51; // 0x405920\n    int64_t * v52; // 0x405920\n    int64_t * v53; // 0x405920\n    int64_t * v54; // 0x405920\n    int64_t * v55; // 0x405920\n    int32_t * v56; // 0x405920\n    int64_t v57; // 0x405920\n    char * v58; // 0x405920\n    int64_t * v59; // 0x405920\n    int32_t * v60; // 0x405920\n    int64_t * v61; // 0x405920\n    int64_t * v62; // 0x405920\n    int64_t * tm; // 0x405920\n    int64_t v63; // 0x405920\n    int32_t * v64; // 0x405920\n    int64_t * v65; // 0x405920\n    int64_t str2; // 0x405920\n    if (v4 != 0) {\n        // 0x40598a\n        v49 = &v3;\n        tm = (int64_t *)(v49 + 8);\n        v63 = v49 + 48;\n        v64 = (int32_t *)v63;\n        v65 = (int64_t *)(v49 + 1232);\n        str2 = v49 + 144;\n        int64_t v66 = v49 + 64;\n        v39 = (char *)v66;\n        v40 = v49 + 135;\n        v41 = (char *)v63;\n        v42 = v49 + 44;\n        str = (int64_t *)(v49 + 32);\n        int64_t v67 = v49 + 72;\n        v43 = (char *)v67;\n        v44 = (int64_t *)v63;\n        format = v49 + 112;\n        v45 = (int16_t *)format;\n        v46 = (int64_t *)(v49 + 16);\n        v47 = (int32_t *)(v49 + 1240);\n        v48 = (int32_t *)v66;\n        v50 = (int64_t *)(v49 - 8);\n        v51 = (int64_t *)(v49 - 16);\n        v52 = (int64_t *)(v49 + 24);\n        v53 = (int64_t *)v66;\n        int64_t v68 = v49 + 80;\n        v54 = (int64_t *)v68;\n        v55 = (int64_t *)v67;\n        v56 = (int32_t *)v67;\n        v57 = v49 + 145;\n        int64_t v69 = v49 + 88;\n        v58 = (char *)v69;\n        v59 = (int64_t *)v69;\n        v60 = (int32_t *)v68;\n        v61 = (int64_t *)(v49 + 104);\n        v62 = (int64_t *)(v49 + 96);\n        v30 = v4;\n        v33 = a3;\n        v19 = 0;\n        v22 = v2;\n        while (true) {\n          lab_0x40598a:\n            // 0x40598a\n            v23 = v22;\n            v20 = v19;\n            int64_t v70 = v33;\n            char v71 = v30;\n            char v72 = v7;\n            char v73 = v6;\n            if (v71 == 37) {\n                char v74 = v73; // 0x405a14\n                char v75 = v72; // 0x405a14\n                int64_t v76 = v70; // 0x405a14\n                int64_t v77 = 0; // 0x405a14\n                int64_t v78 = (int64_t)*(char *)(v49 + 43); // 0x405a14\n                int64_t v79 = 0; // 0x405a14\n                int64_t v80; // 0x405920\n                while (true) {\n                  lab_0x405a18_2:\n                    // 0x405a18\n                    v16 = v78;\n                    v10 = v74;\n                    v11 = v75;\n                    v34 = v76;\n                    v26 = v77;\n                    v17 = v79;\n                    while (true) {\n                      lab_0x405a18:;\n                        int64_t v81 = v26;\n                        char v82 = v11;\n                        char v83 = v10;\n                        int64_t v84 = v34 + 1; // 0x405a18\n                        char v85 = *(char *)v84; // 0x405a1c\n                        v14 = v83;\n                        v15 = v82;\n                        v31 = 48;\n                        v36 = v84;\n                        v28 = v81;\n                        if (v85 == 48) {\n                            goto lab_0x405a48;\n                        } else {\n                            // 0x405a28\n                            v18 = v17;\n                            v27 = v81;\n                            v35 = v84;\n                            v80 = v85;\n                            v13 = v82;\n                            v12 = v83;\n                            while (v12 <= v13) {\n                                if (v80 != 35) {\n                                    // 0x405a50\n                                    v14 = v12;\n                                    v15 = v13;\n                                    v31 = v80;\n                                    v36 = v35;\n                                    v28 = v27;\n                                    if ((char)v80 == 45) {\n                                        goto lab_0x405a48;\n                                    } else {\n                                        int64_t v86 = v80 & 0xffffffff;\n                                        v38 = v86;\n                                        v37 = v35;\n                                        v32 = 0xffffffff;\n                                        v29 = v86;\n                                        if ((int32_t)v80 < 58) {\n                                            goto lab_0x405ab1;\n                                        } else {\n                                            goto lab_0x405a68_2;\n                                        }\n                                    }\n                                }\n                                int64_t v87 = v35 + 1; // 0x405a2e\n                                char v88 = *(char *)v87; // 0x405a32\n                                int64_t v89 = v88; // 0x405a32\n                                v14 = v88;\n                                v15 = 48;\n                                v31 = v89;\n                                v36 = v87;\n                                v28 = 1;\n                                if (v88 == 48) {\n                                    goto lab_0x405a48;\n                                }\n                                v27 = 1;\n                                v35 = v87;\n                                v80 = v89;\n                                v13 = 48;\n                                v12 = v88;\n                            }\n                            char v90 = v80;\n                            v74 = v12;\n                            v75 = v13;\n                            v76 = v35;\n                            v77 = v27;\n                            v78 = 1;\n                            v79 = v18;\n                            if (v90 != 94) {\n                                // 0x405aa0\n                                v14 = v12;\n                                v15 = v13;\n                                v31 = v80;\n                                v36 = v35;\n                                v28 = v27;\n                                if (v90 != 95) {\n                                    // break (via goto) -> 0x405aa4\n                                    goto lab_0x405aa4;\n                                }\n                                goto lab_0x405a48;\n                            } else {\n                                goto lab_0x405a18_2;\n                            }\n                        }\n                    }\n                }\n              lab_0x405aa4:;\n                int64_t v91 = v80 & 0xffffffff;\n                v38 = v91;\n                v37 = v35;\n                v32 = 0xffffffff;\n                v29 = v91;\n                if ((int32_t)v80 < 58) {\n                    goto lab_0x405ab1;\n                } else {\n                    goto lab_0x405a68_2;\n                }\n            } else {\n                int64_t v92 = v3 - v20; // 0x405992\n                v1 = v92;\n                if (v92 < 2) {\n                    // break -> 0x4059d3\n                    break;\n                }\n                int64_t v93 = 0; // 0x40599e\n                if (v23 != 0) {\n                    // 0x4059a0\n                    *(char *)v23 = v71;\n                    v93 = v23 + 1;\n                }\n                // 0x4059a7\n                v8 = v73;\n                v9 = v72;\n                v25 = v70;\n                v21 = v20 + 1;\n                v24 = v93;\n                goto lab_0x4059ae;\n            }\n        }\n      lab_0x4059d3_11:\n        // 0x4059d3\n        return 0;\n    }\n    goto lab_0x4059bb_2;\n  lab_0x405a48:\n    // 0x405a48\n    v10 = v14;\n    v11 = v15;\n    v34 = v36;\n    v26 = v28;\n    v17 = v31 & 0xffffffff;\n    goto lab_0x405a18;\n  lab_0x405afe:;\n    // 0x405afe\n    int64_t v94; // 0x405abb\n    v38 = v94;\n    int64_t v95; // 0x405ab3\n    v37 = v95;\n    v32 = 0x7fffffff;\n    v29 = v94;\n    int64_t v96; // 0x405abd\n    if ((int32_t)v96 >= 10) {\n        // break -> 0x405a68\n        goto lab_0x405a68_2;\n    }\n    // 0x405b03\n    int64_t v97; // 0x405920\n    int64_t v98 = v97 + 2; // 0x405b03\n    int64_t v99 = (int64_t)*(char *)v98; // 0x405b03\n    int64_t v100 = v99 + 0xffffffd0 & 0xffffffff; // 0x405b12\n    v1 = v100;\n    int64_t v101 = v100; // 0x405b15\n    int64_t v102 = v99; // 0x405b15\n    int64_t v103 = v99 & 0xffffffff; // 0x405b15\n    int64_t v104 = v98; // 0x405b15\n    int64_t v105 = 0x7fffffff; // 0x405b15\n    goto lab_0x405ada;\n  lab_0x405ada:;\n    int64_t v106 = v105;\n    int64_t v107 = v104;\n    int64_t v108 = v107; // 0x405add\n    int64_t v109 = v106; // 0x405add\n    if ((int32_t)v101 >= 10) {\n        // 0x405adf\n        v38 = v103;\n        v37 = v107;\n        v32 = v106;\n        v29 = v102 & 0xffffffff;\n        goto lab_0x405a68_2;\n    }\n    goto lab_0x405ab3;\n  lab_0x405ab1:\n    // 0x405ab1\n    v108 = v35;\n    v109 = 0;\n    while (true) {\n      lab_0x405ab3:;\n        int64_t v110 = v109;\n        v97 = v108;\n        v95 = v97 + 1;\n        int64_t v111 = (int64_t)*(char *)v95; // 0x405ab3\n        v94 = v111 & 0xffffffff;\n        v96 = v111 + 0xffffffd0;\n        int64_t v112 = v96 & 0xffffffff; // 0x405abd\n        v1 = v112;\n        int32_t v113 = v110; // 0x405ac0\n        if (v113 > 0xccccccc) {\n            goto lab_0x405afe;\n        } else {\n            char v114 = *(char *)v97; // 0x405ac8\n            if (v113 != 0xccccccc || v114 < 56) {\n                // 0x405acd\n                v101 = v112;\n                v102 = v111;\n                v103 = v94;\n                v104 = v95;\n                v105 = 10 * v110 + 0xffffffd0 + (int64_t)v114 & 0xffffffff;\n                goto lab_0x405ada;\n            } else {\n                goto lab_0x405afe;\n            }\n        }\n    }\n    goto lab_0x405a68_2;\n  lab_0x405a68_2:;\n    int64_t v115 = v32;\n    int64_t v116 = v37;\n    int64_t v117 = v38; // 0x405920\n    int64_t v118 = v116; // 0x405920\n    int64_t v119 = 0; // 0x405920\n    int64_t v120; // 0x405920\n    switch ((char)v120) {\n        case 69: {\n        }\n        case 79: {\n            int64_t v121 = v116 + 1; // 0x405ae8\n            v117 = (int64_t)*(char *)v121;\n            v118 = v121;\n            v119 = v29;\n            // break -> 0x405a7e\n            break;\n        }\n    }\n    int64_t v122 = v119;\n    int64_t v123 = v118;\n    int64_t v124 = v117;\n    g143 = v124 % 256;\n    char v125 = v124;\n    int64_t v126 = v124; // 0x405a81\n    int64_t v127 = v16; // 0x405a81\n    int64_t v128 = 0; // 0x405a81\n    int64_t v129 = 1; // 0x405a81\n    int64_t v130 = v123; // 0x405a81\n    int64_t v131 = v16; // 0x405a81\n    int64_t v132 = v123; // 0x405a81\n    int64_t v133 = 0; // 0x405a81\n    int64_t v134; // 0x405920\n    int64_t v135; // 0x405920\n    int64_t v136; // 0x405920\n    int64_t v137; // 0x405920\n    int64_t v138; // 0x405920\n    int64_t v139; // 0x405920\n    int64_t v140; // 0x405920\n    int64_t v141; // 0x405920\n    int64_t v142; // 0x405920\n    int64_t v143; // 0x405920\n    int64_t v144; // 0x405920\n    int64_t v145; // 0x405920\n    int64_t v146; // 0x405920\n    int64_t v147; // 0x405920\n    int64_t v148; // 0x405920\n    int64_t v149; // 0x405920\n    int64_t v150; // 0x405920\n    int64_t v151; // 0x405920\n    int64_t v152; // 0x405920\n    int64_t v153; // 0x405920\n    int64_t v154; // 0x405920\n    int64_t v155; // 0x405920\n    int64_t v156; // 0x405920\n    int64_t v157; // 0x405920\n    int64_t v158; // 0x405920\n    int64_t v159; // 0x405920\n    int64_t v160; // 0x405920\n    int64_t v161; // 0x405920\n    int64_t v162; // 0x405920\n    int64_t v163; // 0x405920\n    int64_t v164; // 0x405920\n    int64_t v165; // 0x405920\n    int64_t v166; // 0x405920\n    int64_t v167; // 0x405920\n    int64_t v168; // 0x405920\n    int64_t v169; // 0x405920\n    int64_t v170; // 0x405920\n    int64_t v171; // 0x405920\n    int64_t v172; // 0x405920\n    int64_t v173; // 0x405920\n    int64_t v174; // 0x405920\n    int64_t v175; // 0x405920\n    int64_t v176; // 0x405920\n    int64_t v177; // 0x405920\n    int64_t v178; // 0x405920\n    int64_t v179; // 0x405920\n    int64_t v180; // 0x405920\n    int64_t v181; // 0x405920\n    int64_t v182; // 0x405920\n    int64_t v183; // 0x405920\n    int64_t v184; // 0x405920\n    int64_t v185; // 0x405920\n    int32_t v186; // 0x405920\n    switch (v125) {\n        case 0: {\n            // 0x406a03\n            v177 = v123 - 1;\n            goto lab_0x4068f7;\n        }\n        case 37: {\n            int64_t v187 = v3 - v20; // 0x40699e\n            v1 = v187;\n            int32_t v188 = v115; // 0x4069a1\n            int64_t v189 = 0x100000000 * v115 >> 32;\n            int64_t v190 = v188 >= 0 ? v189 : 0; // 0x4069a6\n            int64_t v191 = v190 != 0 ? v190 : 1; // 0x4069ab\n            v134 = v187;\n            v162 = v190;\n            v176 = 1;\n            v160 = v123;\n            v161 = v123;\n            v142 = v16;\n            v152 = v191;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x4067a3;\n            } else {\n                // 0x4069b8\n                if (v191 >= v187) {\n                    // break -> 0x4059d3\n                    break;\n                }\n                // 0x4069c1\n                v155 = v191;\n                v156 = 0;\n                if (v23 != 0) {\n                    int64_t v192 = v124; // 0x4069cd\n                    int64_t v193 = v23; // 0x4069cd\n                    if (v188 >= 2) {\n                        int64_t v194 = v189 - 1; // 0x4069d2\n                        v1 = v194;\n                        int64_t v195 = v194 + v23; // 0x4069d6\n                        int64_t * v196 = (int64_t *)v23;\n                        int32_t v197 = v194;\n                        if (v18 == 48) {\n                            // 0x407066\n                            memset(v196, 48, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        } else {\n                            // 0x4069e4\n                            memset(v196, 32, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        }\n                    }\n                    // 0x4069f7\n                    *(char *)v193 = (char)v192;\n                    v155 = v191;\n                    v156 = v193 + 1;\n                }\n                goto lab_0x406346;\n            }\n        }\n        case 58: {\n            int64_t v198 = v123 + 1; // 0x406a5f\n            char v199 = *(char *)v198; // 0x406a5f\n            v1 = v198;\n            int64_t v200 = v198; // 0x406a6f\n            char v201 = v199; // 0x406a6f\n            int64_t v202 = 1; // 0x406a6f\n            if (v199 == 58) {\n                int64_t v203 = 2; // 0x406a97\n                int64_t v204 = v203 + v123; // 0x406a9b\n                char v205 = *(char *)v204; // 0x406a9b\n                v1 = v204;\n                v200 = v204;\n                v201 = v205;\n                v202 = v203;\n                int64_t v206 = v203; // 0x406aa6\n                while (v205 == 58) {\n                    // 0x406a97\n                    v203 = v206 + 1;\n                    v204 = v203 + v123;\n                    v205 = *(char *)v204;\n                    v1 = v204;\n                    v200 = v204;\n                    v201 = v205;\n                    v202 = v203;\n                    v206 = v203;\n                }\n            }\n            // 0x406a71\n            v130 = v123;\n            v131 = v16;\n            v132 = v200;\n            v133 = v202;\n            if (v201 != 122) {\n                goto lab_0x406768;\n            } else {\n                goto lab_0x406840;\n            }\n        }\n        case 65: {\n            goto lab_0x405b30;\n        }\n        case 66: {\n            goto lab_0x405b30;\n        }\n        case 67: {\n            // 0x406693\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x4060d2;\n            } else {\n                // 0x40669d\n                *v41 = 0;\n                int32_t v207 = *(int32_t *)(*tm + 20); // 0x4066b2\n                int32_t v208 = v207 / 100; // 0x4066c3\n                int32_t v209 = v208 + 19; // 0x4066c7\n                int32_t v210 = v207 + 1900; // 0x4066db\n                v171 = v123;\n                v168 = v115;\n                v182 = v209 - (int32_t)(-100 * v208 + v207 < 0 == v209 >= 0 == (v209 != 0));\n                v178 = 0;\n                v157 = v210 < 0 != ((v210 ^ v207) & (v207 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x4060bf;\n            }\n        }\n        case 68: {\n            // 0x405e27\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x406768;\n            } else {\n                // 0x405e30\n                *v44 = (int64_t)\"%m/%d/%y\";\n                goto lab_0x405e39;\n            }\n        }\n        case 70: {\n            // 0x405f29\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x406768;\n            } else {\n                // 0x405f32\n                *v44 = (int64_t)\"%Y-%m-%d\";\n                goto lab_0x405e39;\n            }\n        }\n        case 71: {\n            goto lab_0x405f40;\n        }\n        case 72: {\n            // 0x4061d2\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x4061dc\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 8);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x4060b0;\n            }\n        }\n        case 73: {\n            // 0x4061ef\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x4061f9\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)v42;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x4060b0;\n            }\n        }\n        case 77: {\n            // 0x406208\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x406212\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 4);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x4060b0;\n            }\n        }\n        case 78: {\n            // 0x406225\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                uint32_t v211 = (int32_t)v115; // 0x40622f\n                if (v211 != -1) {\n                    int64_t v212 = (int64_t)*v47;\n                    int64_t v213 = v212; // 0x406ec1\n                    int64_t v214 = v115; // 0x406ec1\n                    int64_t v215 = v212; // 0x406ec1\n                    if (v211 <= 8) {\n                        int64_t v216 = v213;\n                        int64_t v217 = (v214 & 0xffffffff) + 1; // 0x406ee5\n                        int64_t v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31); // 0x406ef0\n                        v214 = v217;\n                        v215 = v218;\n                        while ((int32_t)v217 != 9) {\n                            // 0x406ee0\n                            v216 = v218;\n                            v217 = (v214 & 0xffffffff) + 1;\n                            v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31);\n                            v214 = v217;\n                            v215 = v218;\n                        }\n                    }\n                    // 0x406ef7\n                    v167 = v115;\n                    v181 = v215;\n                    v138 = v115 & 0xffffffff;\n                    v148 = v18;\n                } else {\n                    // 0x406238\n                    v167 = 9;\n                    v181 = (int64_t)*v47;\n                    v138 = 9;\n                    v148 = v18;\n                }\n                goto lab_0x4060b0;\n            }\n        }\n        case 80: {\n            goto lab_0x406255;\n        }\n        case 82: {\n            // 0x4061c4\n            *v44 = (int64_t)\"%H:%M\";\n            goto lab_0x405e39;\n        }\n        case 83: {\n            // 0x406640\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x40664a\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)*tm;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x4060b0;\n            }\n        }\n        case 84: {\n            // 0x406a89\n            *v44 = (int64_t)\"%H:%M:%S\";\n            goto lab_0x405e39;\n        }\n        case 85: {\n            // 0x40665c\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                int64_t v219 = *tm; // 0x406666\n                v186 = *(int32_t *)(v219 + 28) + 7 - *(int32_t *)(v219 + 24);\n                goto lab_0x40667d;\n            }\n        }\n        case 86: {\n            goto lab_0x405f40;\n        }\n        case 87: {\n            // 0x4066ee\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                int64_t v220 = *tm; // 0x4066f4\n                int32_t v221 = *(int32_t *)(v220 + 24); // 0x4066fe\n                int32_t v222 = v221 + 6; // 0x406702\n                *v64 = v221;\n                int32_t v223 = *(int32_t *)(v220 + 28); // 0x406725\n                v186 = 1 - v221 + v223 + 7 * ((v222 + (int32_t)(-0x6db6db6d * (int64_t)v222 / 0x100000000) >> 2) - (v222 >> 31));\n                goto lab_0x40667d;\n            }\n        }\n        case 88: {\n            goto lab_0x405c70;\n        }\n        case 89: {\n            // 0x4065ed\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            v130 = v123;\n            v131 = v16;\n            switch ((int32_t)v122) {\n                case 69: {\n                    goto lab_0x4060d2;\n                }\n                case 79: {\n                    goto lab_0x406768;\n                }\n                default: {\n                    // 0x406601\n                    *v41 = 0;\n                    int32_t v224 = *(int32_t *)(*tm + 20); // 0x406611\n                    int32_t v225 = v224 + 1900; // 0x406614\n                    v174 = v123;\n                    v164 = v115;\n                    v185 = v225;\n                    v180 = 0;\n                    v159 = v225 < 0 != ((v225 ^ v224) & (v224 ^ -0x80000000)) < 0;\n                    v136 = 4;\n                    v145 = v18;\n                    goto lab_0x406630;\n                }\n            }\n        }\n        case 90: {\n            char v226 = v27; // 0x4060f4\n            *v43 = v226;\n            *v39 = v226 != 0 ? 0 : (char)v16;\n            int32_t len = strlen((char *)*str); // 0x40610f\n            uint64_t v227 = (int64_t)len; // 0x40610f\n            int64_t v228 = 0x100000000 * v115 >> 32;\n            uint64_t v229 = (int32_t)v115 >= 0 ? v228 : 0; // 0x406125\n            int64_t v230 = v229 <= v227 ? v227 : v229; // 0x40612d\n            int64_t v231 = v3 - v20; // 0x406131\n            v1 = v231;\n            *v44 = v230;\n            if (v231 <= v230) {\n                // break -> 0x4059d3\n                break;\n            }\n            int64_t v232 = v230; // 0x406145\n            int64_t v233 = 0; // 0x406145\n            if (v23 != 0) {\n                char v234 = *v39; // 0x40614a\n                char v235 = *v43; // 0x406150\n                char v236 = v235; // 0x406156\n                char v237 = v234; // 0x406156\n                int64_t v238 = v23; // 0x406156\n                if (v229 > v227) {\n                    int64_t v239 = v228 - v227; // 0x40615b\n                    v1 = v239;\n                    int64_t v240 = v239 + v23; // 0x40615e\n                    if (v18 == 48) {\n                        // 0x40707e\n                        memset((int64_t *)v23, 48, (int32_t)v239);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    } else {\n                        // 0x40616c\n                        *v43 = v235;\n                        *v39 = v234;\n                        memset((int64_t *)v23, 32, (int32_t)v1);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    }\n                }\n                int64_t v241 = v238;\n                v1 = v227;\n                int64_t v242 = *str; // 0x406195\n                if (v236 != 0) {\n                    // 0x406fbc\n                    function_405880(v241, v242, v227);\n                } else {\n                    // 0x4061a6\n                    if (v237 == 0) {\n                        // 0x406fb2\n                        memcpy((int64_t *)v241, (int64_t *)v242, len);\n                    } else {\n                        // 0x4061af\n                        function_4058d0(v241, v242, v227);\n                    }\n                }\n                // 0x4061b4\n                v232 = *v44;\n                v233 = v241 + v227;\n            }\n            // 0x4061b7\n            v8 = v12;\n            v9 = v13;\n            v25 = v123;\n            v21 = v232 + v20;\n            v24 = v233;\n            goto lab_0x4059ae;\n        }\n        case 97: {\n            goto lab_0x405b30;\n        }\n        case 98: {\n            goto lab_0x406751;\n        }\n        case 99: {\n            goto lab_0x405c70;\n        }\n        case 100: {\n            // 0x40692d\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x406937\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 12);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x4060b0;\n            }\n        }\n        case 101: {\n            // 0x40694a\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x406954\n                v183 = *tm + 12;\n                goto lab_0x406281;\n            }\n        }\n        case 103: {\n            goto lab_0x405f40;\n        }\n        case 104: {\n            goto lab_0x406751;\n        }\n        case 106: {\n            // 0x406961\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x40696b\n                *v41 = 0;\n                int32_t v243 = *(int32_t *)(*tm + 28); // 0x40697b\n                int32_t v244 = v243 + 1; // 0x40697e\n                v171 = v123;\n                v168 = v115;\n                v182 = v244;\n                v178 = 0;\n                v157 = v244 < 0 != (v244 & (v243 ^ -0x80000000)) < 0;\n                v139 = 3;\n                v149 = v18;\n                goto lab_0x4060bf;\n            }\n        }\n        case 107: {\n            // 0x40626f\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x406279\n                v183 = *tm + 8;\n                goto lab_0x406281;\n            }\n        }\n        case 108: {\n            // 0x4062a6\n            v183 = v42;\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                goto lab_0x406281;\n            }\n        }\n        case 109: {\n            // 0x4062b6\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x4062c0\n                *v41 = 0;\n                int32_t v245 = *(int32_t *)(*tm + 16); // 0x4062d0\n                int32_t v246 = v245 + 1; // 0x4062d3\n                v171 = v123;\n                v168 = v115;\n                v182 = v246;\n                v178 = 0;\n                v157 = v246 < 0 != (v246 & (v245 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x4060bf;\n            }\n        }\n        case 110: {\n            int32_t v247 = v115; // 0x4062e4\n            int64_t v248 = 0x100000000 * v115 >> 32;\n            int64_t v249 = v247 >= 0 ? v248 : 0; // 0x4062f5\n            int64_t v250 = v249 == 0 ? 1 : v249; // 0x4062fb\n            if (v3 - v20 <= v250) {\n                // break -> 0x4059d3\n                break;\n            }\n            // 0x40630f\n            v155 = v250;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v251 = v23; // 0x406317\n                if (v247 >= 2) {\n                    int64_t v252 = v248 - 1; // 0x40631c\n                    v1 = v252;\n                    int64_t v253 = v252 + v23; // 0x406320\n                    int64_t * v254 = (int64_t *)v23;\n                    int32_t v255 = v252;\n                    if (v18 == 48) {\n                        // 0x40700b\n                        memset(v254, 48, v255);\n                        v251 = v253;\n                    } else {\n                        // 0x40632e\n                        memset(v254, 32, v255);\n                        v251 = v253;\n                    }\n                }\n                // 0x40633e\n                *(char *)v251 = 10;\n                v155 = v250;\n                v156 = v251 + 1;\n            }\n            goto lab_0x406346;\n        }\n        case 112: {\n            // 0x406a81\n            v129 = 0;\n            goto lab_0x406255;\n        }\n        case 113: {\n            // 0x406351\n            v172 = v123;\n            v169 = v115;\n            v140 = 1;\n            v150 = v18;\n            if ((int32_t)v122 == 79) {\n                goto lab_0x4060d2;\n            } else {\n                // 0x406369\n                *v41 = 0;\n                v173 = v123;\n                v163 = v115;\n                v184 = (int64_t)((11 * *(int32_t *)(*tm + 16) >> 5) + 1);\n                v179 = 0;\n                v158 = 0;\n                v141 = 1;\n                v151 = v18;\n                goto lab_0x406380;\n            }\n        }\n        case 114: {\n            goto lab_0x405c7d;\n        }\n        case 115: {\n            int64_t v256 = *tm; // 0x405c9d\n            *v39 = (char)v16;\n            int128_t v257 = __asm_movdqu(*(int128_t *)(v256 + 32)); // 0x405cbf\n            int128_t v258 = __asm_movdqu(*(int128_t *)v256); // 0x405cc4\n            int128_t v259 = __asm_movdqu(*(int128_t *)(v256 + 16)); // 0x405cc8\n            *(int128_t *)str2 = (int128_t)__asm_movaps(v258);\n            *(int128_t *)(v49 + 160) = (int128_t)__asm_movaps(v259);\n            *(int128_t *)v63 = (int128_t)__asm_movaps(v257);\n            *(int128_t *)(v49 + 176) = (int128_t)__asm_movaps(v257);\n            *(int64_t *)(v49 + 192) = *(int64_t *)(v256 + 48);\n            int64_t v260 = function_40bf30(*v65, str2, v1, v124); // 0x405cf6\n            int64_t v261 = v260;\n            int64_t v262 = v261 >> 63; // 0x405d28\n            int64_t v263 = (v261 >> 63 & -10) + v261; // 0x405d35\n            int64_t v264 = (v260 < 0 ? -v263 : v263) + 48; // 0x405d48\n            v1 = v264 & 0xffffffff;\n            int64_t v265 = v40 - 1; // 0x405d4b\n            *(char *)v265 = (char)v264;\n            int64_t v266 = v265; // 0x405d56\n            while (v262 != 0) {\n                // 0x405d10\n                v261 = v262;\n                v262 = v261 >> 63;\n                v263 = (v261 >> 63 & -10) + v261;\n                v264 = (v260 < 0 ? -v263 : v263) + 48;\n                v1 = v264 & 0xffffffff;\n                v265 = v266 - 1;\n                *(char *)v265 = (char)v264;\n                v266 = v265;\n            }\n            int64_t v267 = (int64_t)*v39; // 0x405cfb\n            int32_t v268 = v115; // 0x405d58\n            int64_t v269 = v268 >= 0 == (v268 != 0) ? v115 & 0xffffffff : 1; // 0x405d60\n            v170 = v123;\n            v166 = v115;\n            v135 = v269;\n            v144 = v267;\n            v147 = v18;\n            v154 = v265;\n            v175 = v123;\n            v165 = v115;\n            v137 = v269;\n            v143 = v267;\n            v146 = v18;\n            v153 = v265;\n            if (v260 < 0) {\n                goto lab_0x406ac8;\n            } else {\n                goto lab_0x405d6d;\n            }\n        }\n        case 116: {\n            int32_t v270 = v115; // 0x406544\n            int64_t v271 = 0x100000000 * v115 >> 32;\n            int64_t v272 = v270 >= 0 ? v271 : 0; // 0x406555\n            int64_t v273 = v272 == 0 ? 1 : v272; // 0x40655b\n            if (v3 - v20 <= v273) {\n                // break -> 0x4059d3\n                break;\n            }\n            // 0x40656f\n            v155 = v273;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v274 = v23; // 0x40657b\n                if (v270 >= 2) {\n                    int64_t v275 = v271 - 1; // 0x406580\n                    v1 = v275;\n                    int64_t v276 = v275 + v23; // 0x406584\n                    int64_t * v277 = (int64_t *)v23;\n                    int32_t v278 = v275;\n                    if (v18 == 48) {\n                        // 0x407020\n                        memset(v277, 48, v278);\n                        v274 = v276;\n                    } else {\n                        // 0x406592\n                        memset(v277, 32, v278);\n                        v274 = v276;\n                    }\n                }\n                // 0x4065a2\n                *(char *)v274 = 9;\n                v155 = v273;\n                v156 = v274 + 1;\n            }\n            goto lab_0x406346;\n        }\n        case 117: {\n            int32_t v279 = *(int32_t *)(*tm + 24); // 0x4065bf\n            int32_t v280 = v279 + 6; // 0x4065c2\n            *v64 = v279;\n            v167 = v115;\n            v181 = v279 + 7 + -7 * ((v280 + (int32_t)(-0x6db6db6d * (int64_t)v280 / 0x100000000) >> 2) - (v280 >> 31));\n            v138 = 1;\n            v148 = v18;\n            goto lab_0x4060b0;\n        }\n        case 119: {\n            // 0x406738\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406768;\n            } else {\n                // 0x40673e\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 24);\n                v138 = 1;\n                v148 = v18;\n                goto lab_0x4060b0;\n            }\n        }\n        case 120: {\n            goto lab_0x405c70;\n        }\n        case 121: {\n            // 0x406a10\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x4060d2;\n            } else {\n                int32_t v281 = *(int32_t *)(*tm + 20); // 0x406a2a\n                int32_t v282 = v281 % 100;\n                int64_t v283 = v282; // 0x406a42\n                v167 = v115;\n                v181 = v283;\n                v138 = 2;\n                v148 = v18;\n                if (v282 < 0) {\n                    int32_t v284 = v281 + 1901; // 0x406a51\n                    int64_t v285 = v284 == 0 | v284 < 0 != ((v284 ^ v281) & (v281 ^ -0x80000000)) < 0 ? -v283 : v283 + 100; // 0x406a57\n                    v167 = v115;\n                    v181 = v285 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n                goto lab_0x4060b0;\n            }\n        }\n        case 122: {\n            goto lab_0x406840;\n        }\n        default: {\n            goto lab_0x406768;\n        }\n    }\n  lab_0x4059ae:\n    // 0x4059ae\n    v5 = v24;\n    result = v21;\n    int64_t v286 = v25 + 1; // 0x4059ae\n    char v287 = *(char *)v286; // 0x4059ae\n    v6 = v8;\n    v7 = v9;\n    v30 = v287;\n    v33 = v286;\n    v19 = result;\n    v22 = v5;\n    if (v287 == 0) {\n        // 0x4059bb\n        goto lab_0x4059bb_2;\n    }\n    goto lab_0x40598a;\n  lab_0x405b30:\n    // 0x405b30\n    v130 = v123;\n    v131 = v16;\n    int64_t v288; // 0x405920\n    if ((int32_t)v122 != 0) {\n        goto lab_0x406768;\n    } else {\n        // 0x405b39\n        v288 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff;\n        goto lab_0x405b40;\n    }\n  lab_0x405f40:\n    // 0x405f40\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 69) {\n        goto lab_0x406768;\n    } else {\n        int64_t v289 = *tm; // 0x405f4a\n        int32_t v290 = *(int32_t *)(v289 + 20); // 0x405f4f\n        uint32_t v291 = *(int32_t *)(v289 + 28); // 0x405f52\n        uint32_t v292 = *(int32_t *)(v289 + 24); // 0x405f56\n        *v64 = v290;\n        int32_t v293 = v290 - 100 + (v290 >> 31 & 400); // 0x405f6d\n        int32_t v294 = v291 - v292; // 0x405f74\n        int32_t v295 = v294 + 382; // 0x405f77\n        int32_t v296 = v291 - 379 - v294 + 7 * ((v295 + (int32_t)(-0x6db6db6d * (int64_t)v295 / 0x100000000) >> 2) - (v295 >> 31)); // 0x405f9e\n        int32_t v297; // 0x405920\n        int32_t v298; // 0x406029\n        if (v296 < 0) {\n            // 0x406e37\n            v1 = 365;\n            int64_t v299 = 365; // 0x406e43\n            if ((v293 + 3) % 4 == 0) {\n                int32_t v300 = v293 - 1;\n                v1 = 366;\n                v299 = 366;\n                if (v300 % 100 - v300 == 1 - v293) {\n                    uint32_t v301 = v300 % 400;\n                    int64_t v302 = v301; // 0x406e6e\n                    int64_t v303 = v302 + 366 + (v302 ^ 0xffffffff) + (int64_t)(v301 == 0) & 0xffffffff; // 0x406e77\n                    v1 = v303;\n                    v299 = v303;\n                }\n            }\n            int64_t v304 = v299; // 0x406e7d\n            int64_t v305; // 0x405f52\n            int64_t v306 = v304 + v305; // 0x406e7d\n            int64_t v307; // 0x405f56\n            int64_t v308 = v306 - v307 + 382; // 0x406e91\n            v297 = (int32_t)(v306 - v308) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v308 >> 32) / 0x100000000 + v308) >> 2) - ((int32_t)v308 >> 31));\n        } else {\n            int64_t v309 = 365; // 0x405fb5\n            if (v293 % 4 == 0) {\n                // 0x405fb7\n                v309 = 366;\n                if (v293 % 100 == 0) {\n                    // 0x405fdc\n                    v309 = v293 == 0 ? 366 : 365;\n                }\n            }\n            int64_t v310 = (int64_t)v291 - v309; // 0x406000\n            int64_t v311 = v310 - (int64_t)v292 + 382; // 0x406007\n            v298 = (int32_t)(v310 - v311) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v311 >> 32) / 0x100000000 + v311) >> 2) - ((int32_t)v311 >> 31));\n            v297 = v298 >= 0 ? v298 : v296;\n        }\n        int64_t v312 = (v298 >> 31) + 1;\n        if (v125 == 71) {\n            uint32_t v313 = *v64; // 0x406f25\n            *v41 = 0;\n            int32_t v314 = -1900 - (int32_t)v312; // 0x406f39\n            int32_t v315 = v313 - v314; // 0x406f3c\n            v171 = v123;\n            v168 = v115;\n            v182 = v312 + 1900 + (int64_t)v313 & 0xffffffff;\n            v178 = 0;\n            v157 = v315 < 0 != ((v315 ^ v313) & (v313 ^ v314)) < 0;\n            v139 = 4;\n            v149 = v18;\n            goto lab_0x4060bf;\n        } else {\n            if (v125 != 103) {\n                int32_t v316 = v297;\n                int32_t v317 = v316 < 0 ? 2 : 1; // 0x406f1a\n                v167 = v115;\n                v181 = v317 + (v316 + (int32_t)(-0x6db6db6d * (int64_t)v316 / 0x100000000) >> 2);\n                v138 = 2;\n                v148 = v18;\n            } else {\n                int32_t v318 = *v64; // 0x40604f\n                int32_t v319 = v312; // 0x40607a\n                int32_t v320 = (v318 % 100 + v319) % 100;\n                int64_t v321 = v320; // 0x406090\n                v167 = v115;\n                v181 = v321;\n                v138 = 2;\n                v148 = v18;\n                if (v320 < 0) {\n                    int32_t v322 = -1900 - v319; // 0x4060a0\n                    int32_t v323 = v318 - v322; // 0x4060a5\n                    int64_t v324 = v323 < 0 == ((v323 ^ v318) & (v318 ^ v322)) < 0 ? v321 + 100 : -v321; // 0x4060a8\n                    v167 = v115;\n                    v181 = v324 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n            }\n            goto lab_0x4060b0;\n        }\n    }\n  lab_0x406255:\n    // 0x406255\n    v126 = 112;\n    v127 = (char)v27 != 0 ? 0 : v16;\n    v128 = ((char)v27 != 0 ? v27 : v129) & 0xffffffff;\n    goto lab_0x405c7d;\n  lab_0x405c70:\n    // 0x405c70\n    v126 = v124;\n    v127 = v16;\n    v128 = 0;\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 79) {\n        goto lab_0x406768;\n    } else {\n        goto lab_0x405c7d;\n    }\n  lab_0x406751:;\n    int64_t v660 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff; // 0x406754\n    v288 = v660;\n    v130 = v123;\n    v131 = v660;\n    if ((int32_t)v122 == 0) {\n        goto lab_0x405b40;\n    } else {\n        goto lab_0x406768;\n    }\n  lab_0x405c7d:;\n    int64_t v325 = v128;\n    int64_t v326 = v127;\n    int64_t v327 = v126;\n    *v45 = 0x2520;\n    int64_t v328 = v327; // 0x405c8a\n    int64_t v329 = v123; // 0x405c8a\n    int64_t v330 = v115; // 0x405c8a\n    int64_t v331 = 0; // 0x405c8a\n    int64_t v332 = v326; // 0x405c8a\n    int64_t v333 = v18; // 0x405c8a\n    int64_t v334 = v325; // 0x405c8a\n    int64_t v335; // 0x405920\n    int64_t v336; // 0x405920\n    int64_t v337; // 0x405920\n    int64_t v338; // 0x405920\n    int64_t v339; // 0x405920\n    int64_t v340; // 0x405920\n    int64_t v341; // 0x405920\n    int64_t v342; // 0x405920\n    if ((int32_t)v122 != 0) {\n        goto lab_0x4060df;\n    } else {\n        // 0x405c90\n        v340 = *v46;\n        v342 = v327;\n        v341 = v115;\n        v338 = v123;\n        v339 = v122;\n        v335 = v326;\n        v336 = v18;\n        v337 = v325;\n        goto lab_0x405b60;\n    }\n  lab_0x406840:;\n    int64_t v343 = v132;\n    int64_t v344 = *tm; // 0x406840\n    v8 = v12;\n    v9 = v13;\n    v25 = v343;\n    v21 = v20;\n    v24 = v23;\n    int64_t v345; // 0x405920\n    uint32_t v346; // 0x40688e\n    uint32_t v347; // 0x4068c3\n    int32_t v348; // 0x4068c7\n    if (*(int32_t *)(v344 + 32) < 0) {\n        goto lab_0x4059ae;\n    } else {\n        int64_t v349 = *(int64_t *)(v344 + 40); // 0x406850\n        int32_t v350 = v349; // 0x40685a\n        int64_t v351 = 1; // 0x40685c\n        if (v350 >= 0) {\n            // 0x40685e\n            v351 = 0;\n            if (v350 == 0) {\n                // 0x406866\n                v351 = *(char *)*str == 45;\n            }\n        }\n        // 0x406872\n        v345 = v351;\n        int64_t v352 = 0x100000000 * v349 >> 32; // 0x40687e\n        int32_t v353 = v350 >> 31; // 0x406882\n        *v48 = v353;\n        v346 = ((int32_t)(-0x6e5d4c3b * v352 / 0x100000000) + v350 >> 11) - v353;\n        *v64 = v346;\n        int32_t v354 = ((int32_t)(-0x77777777 * v352 / 0x100000000 + v349) >> 5) - *v48; // 0x4068a0\n        v347 = -60 * ((v354 + (int32_t)(-0x77777777 * (int64_t)v354 / 0x100000000) >> 5) - (v354 >> 31)) + v354;\n        v348 = -60 * v354 + v350;\n        v177 = v343;\n        switch (v133) {\n            case 1: {\n                goto lab_0x406f96;\n            }\n            case 0: {\n                // 0x406fc6\n                *v41 = 1;\n                v171 = v343;\n                v168 = v115;\n                v182 = v347 + 100 * v346;\n                v178 = 0;\n                v157 = v345;\n                v139 = 5;\n                v149 = v18;\n                goto lab_0x4060bf;\n            }\n            case 2: {\n                goto lab_0x406f72;\n            }\n            case 3: {\n                if (v348 != 0) {\n                    goto lab_0x406f72;\n                } else {\n                    if (v347 != 0) {\n                        goto lab_0x406f96;\n                    } else {\n                        // 0x406fe7\n                        *v41 = 1;\n                        v171 = v343;\n                        v168 = v115;\n                        v182 = v346;\n                        v178 = v347;\n                        v157 = v345;\n                        v139 = 3;\n                        v149 = v18;\n                        goto lab_0x4060bf;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x4068f7;\n            }\n        }\n    }\n  lab_0x406768:;\n    int64_t v355 = v130 + 1; // 0x40676c\n    v1 = v355 & 0xffffffff;\n    int64_t v356 = v130 - 1;\n    int64_t v357 = v356; // 0x40677e\n    while (*(char *)v356 != 37) {\n        // 0x40676f\n        v356 = v357 - 1;\n        v357 = v356;\n    }\n    int64_t v358 = 0x100000000 * (v355 - v356) >> 32; // 0x406789\n    int64_t v359 = v3 - v20; // 0x40678f\n    v1 = v359;\n    int64_t v360 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x406797\n    v134 = v359;\n    v162 = v360;\n    v176 = v358;\n    v160 = v130;\n    v161 = v356;\n    v142 = v131;\n    v152 = v358 >= v360 ? v358 : v360;\n    goto lab_0x4067a3;\n  lab_0x4067a3:\n    // 0x4067a3\n    if (v134 <= v152) {\n        // break -> 0x4059d3\n        goto lab_0x4059d3_11;\n    }\n    int64_t v361 = v160;\n    int64_t v362 = v361; // 0x4067af\n    int64_t v363 = 0; // 0x4067af\n    if (v23 != 0) {\n        int64_t v364 = v142;\n        int64_t v365 = v161;\n        int64_t v366 = v176;\n        int64_t v367 = v366; // 0x4067b8\n        int64_t v368 = v361; // 0x4067b8\n        int64_t v369 = v365; // 0x4067b8\n        int64_t v370 = v364; // 0x4067b8\n        int64_t v371 = v23; // 0x4067b8\n        if (v366 < v162) {\n            // 0x4067ba\n            *v54 = v366;\n            int64_t v372 = (0x100000000 * v115 >> 32) - v366; // 0x4067c2\n            v1 = v372;\n            *v55 = v361;\n            int64_t v373 = v372 + v23; // 0x4067ca\n            *v53 = v365;\n            *v41 = (char)v364;\n            int64_t * v374 = (int64_t *)v23;\n            int32_t v375 = v1;\n            if (v18 == 48) {\n                // 0x406d44\n                memset(v374, 48, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            } else {\n                // 0x4067e2\n                memset(v374, 32, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            }\n        }\n        int64_t v376 = v371;\n        int64_t v377 = v369;\n        *v53 = v368;\n        v1 = v367;\n        *v44 = v367;\n        if ((char)v370 == 0) {\n            // 0x406b8e\n            memcpy((int64_t *)v376, (int64_t *)v377, (int32_t)v1);\n        } else {\n            // 0x406823\n            function_4058d0(v376, v377, v1);\n        }\n        // 0x406832\n        v362 = *v53;\n        v363 = *v44 + v376;\n    }\n    // 0x406835\n    v8 = v12;\n    v9 = v13;\n    v25 = v362;\n    v21 = v152 + v20;\n    v24 = v363;\n    goto lab_0x4059ae;\n  lab_0x4068f7:;\n    int64_t v378 = v177;\n    int64_t v379 = v3 - v20; // 0x406900\n    v1 = v379;\n    v130 = v378;\n    v131 = v16;\n    if (*(char *)v378 != 37) {\n        goto lab_0x406768;\n    } else {\n        int64_t v380 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x406908\n        v134 = v379;\n        v162 = v380;\n        v176 = 1;\n        v160 = v378;\n        v161 = v378;\n        v142 = v16;\n        v152 = v380 != 0 ? v380 : 1;\n        goto lab_0x4067a3;\n    }\n  lab_0x4060d2:\n    // 0x4060d2\n    *v45 = 0x2520;\n    v328 = v124;\n    v329 = v172;\n    v330 = v169;\n    v331 = v140;\n    v332 = v16;\n    v333 = v150;\n    v334 = 0;\n    goto lab_0x4060df;\n  lab_0x405e39:\n    // 0x405e39\n    *v50 = (int64_t)*v47;\n    *v51 = *v65;\n    int64_t v643 = *v44; // 0x405e62\n    v1 = v643;\n    uint64_t v644 = function_405920(0, -1, v643, *tm, v16, *v52); // 0x405e67\n    int64_t v645 = 0x100000000 * v115 >> 32;\n    uint64_t v646 = (int32_t)v115 >= 0 ? v645 : 0; // 0x405e80\n    int64_t v647 = v644 >= v646 ? v644 : v646; // 0x405e88\n    int64_t v648 = v3 - v20; // 0x405e8c\n    *v53 = v647;\n    if (v648 <= v647) {\n        // break -> 0x4059d3\n        goto lab_0x4059d3_11;\n    }\n    int64_t v649 = v647; // 0x405ea0\n    int64_t v650 = 0; // 0x405ea0\n    if (v23 != 0) {\n        int64_t v651 = v644; // 0x405ea5\n        int64_t v652 = v648; // 0x405ea5\n        int64_t v653 = v23; // 0x405ea5\n        if (v644 < v646) {\n            // 0x405ea7\n            *v54 = v644;\n            int64_t v654 = v645 - v644; // 0x405eaf\n            v1 = v654;\n            *v55 = v648;\n            int64_t v655 = v654 + v23; // 0x405eb7\n            int64_t * v656 = (int64_t *)v23;\n            int32_t v657 = v1;\n            if (v18 == 48) {\n                // 0x406e18\n                memset(v656, 48, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            } else {\n                // 0x405ec5\n                memset(v656, 32, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            }\n        }\n        // 0x405edf\n        *v55 = v651;\n        *v50 = (int64_t)*v47;\n        *v51 = *v65;\n        int64_t v658 = *v44; // 0x405f06\n        v1 = v658;\n        function_405920((int32_t)v653, v652, v658, *tm, v16, *v52);\n        v649 = *v53;\n        v650 = *v55 + v653;\n    }\n    // 0x405f1c\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v649 + v20;\n    v24 = v650;\n    goto lab_0x4059ae;\n  lab_0x405b40:\n    // 0x405b40\n    *v45 = 0x2520;\n    v340 = *v46;\n    v342 = v124;\n    v341 = v115;\n    v338 = v123;\n    v339 = 0;\n    v335 = v288;\n    v336 = v18;\n    v337 = 0;\n    goto lab_0x405b60;\n  lab_0x406281:;\n    int64_t v659 = (int64_t)*(int32_t *)v183;\n    v167 = v115;\n    v181 = v659;\n    v138 = 2;\n    v148 = v18;\n    switch ((int32_t)v18) {\n        case 48: {\n            goto lab_0x4060b0;\n        }\n        case 45: {\n            goto lab_0x4060b0;\n        }\n        default: {\n            // 0x40629b\n            v167 = v115;\n            v181 = v659;\n            v138 = 2;\n            v148 = 95;\n            goto lab_0x4060b0;\n        }\n    }\n  lab_0x406346:\n    // 0x406346\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v155 + v20;\n    v24 = v156;\n    goto lab_0x4059ae;\n  lab_0x4060df:\n    // 0x4060df\n    *(char *)(v49 + 114) = (char)v122;\n    v340 = v49 + 115;\n    v342 = v328;\n    v341 = v330;\n    v338 = v329;\n    v339 = v331 & 0xffffffff;\n    v335 = v332;\n    v336 = v333;\n    v337 = v334;\n    goto lab_0x405b60;\n  lab_0x406ac8:;\n    int64_t v630 = v153;\n    int64_t v631 = v143;\n    int64_t v632 = v137;\n    int64_t v633 = v165;\n    int64_t v634 = v175;\n    *v41 = 45;\n    char v436 = 45; // 0x406ad6\n    int64_t v437 = v634; // 0x406ad6\n    int64_t v438 = v633; // 0x406ad6\n    int64_t v439 = v632; // 0x406ad6\n    int64_t v440 = v631; // 0x406ad6\n    int64_t v441 = v146; // 0x406ad6\n    int64_t v442 = v630; // 0x406ad6\n    int32_t v429; // 0x405920\n    int64_t v433; // 0x405920\n    int64_t v434; // 0x405920\n    int64_t v435; // 0x405920\n    int64_t v432; // 0x405920\n    int64_t v431; // 0x405920\n    int64_t v430; // 0x405920\n    if ((int32_t)v146 != 45) {\n        goto lab_0x406410;\n    } else {\n        // 0x406ac8\n        v429 = v633;\n        v430 = 45;\n        v431 = v634;\n        v432 = v633;\n        v433 = v632;\n        v434 = v631;\n        v435 = v630;\n        goto lab_0x406adc;\n    }\n  lab_0x405d6d:;\n    int64_t v524 = v135;\n    int64_t v523 = v166;\n    int64_t v522 = v40 - v154; // 0x405d79\n    char v505; // 0x405920\n    int64_t v510; // 0x405920\n    int64_t v511; // 0x405920\n    int64_t v512; // 0x405920\n    int64_t v509; // 0x405920\n    int64_t v506; // 0x405920\n    int64_t v508; // 0x405920\n    int64_t v507; // 0x405920\n    if ((int32_t)v147 == 45) {\n        goto lab_0x405d94;\n    } else {\n        int32_t v635 = v524 - v522; // 0x405d8b\n        if (v635 >= 0 == (v635 != 0)) {\n            int64_t v636; // 0x405d7c\n            int32_t v637; // 0x405d7f\n            if (v637 == 95) {\n                // 0x406c8e\n                *v41 = 0;\n                v505 = 0;\n                v506 = v636;\n                int64_t v638; // 0x405920\n                v507 = v638;\n                v508 = v523;\n                int64_t v639; // 0x405d88\n                v509 = v639;\n                v510 = v524;\n                int64_t v640; // 0x405920\n                v511 = v640;\n                int64_t v641; // 0x405920\n                v512 = v641;\n                goto lab_0x406c93;\n            } else {\n                int64_t v642 = 0x100000000 * v524 >> 32; // 0x406f5b\n                v1 = v642;\n                if (v642 >= v636) {\n                    // break -> 0x4059d3\n                    goto lab_0x4059d3_11;\n                }\n                // 0x406f67\n                goto lab_0x4064e5;\n            }\n        } else {\n            goto lab_0x405d94;\n        }\n    }\n  lab_0x4060b0:\n    // 0x4060b0\n    *v41 = 0;\n    v171 = v123;\n    v168 = v167;\n    v182 = v181;\n    v178 = 0;\n    v157 = 0;\n    v139 = v138;\n    v149 = v148;\n    goto lab_0x4060bf;\n  lab_0x4060bf:;\n    int64_t v596 = v149;\n    int64_t v597 = v139;\n    int64_t v598 = v157;\n    int64_t v599 = v178;\n    int64_t v600 = v182;\n    int64_t v601 = v168;\n    int64_t v602 = v171;\n    v174 = v602;\n    v164 = v601;\n    v185 = v600;\n    v180 = v599;\n    v159 = v598;\n    v136 = v597;\n    v145 = v596;\n    int64_t v603; // 0x405920\n    int64_t v604; // 0x405920\n    int64_t v605; // 0x405920\n    int64_t v606; // 0x405920\n    int64_t v607; // 0x405920\n    int64_t v608; // 0x405920\n    int64_t v609; // 0x405920\n    if ((int32_t)v122 != 79) {\n        goto lab_0x406630;\n    } else {\n        // 0x4060c9\n        v172 = v602;\n        v169 = v601;\n        v140 = v597;\n        v150 = v596;\n        v607 = v602;\n        v606 = v601;\n        v609 = v600;\n        v608 = v599;\n        v605 = v598;\n        v603 = v597;\n        v604 = v596;\n        if ((char)v598 != 0) {\n            goto lab_0x406639;\n        } else {\n            goto lab_0x4060d2;\n        }\n    }\n  lab_0x40667d:;\n    int32_t v610 = v186;\n    int64_t v611 = -0x6db6db6d * (int64_t)v610 / 0x100000000;\n    v1 = v611;\n    v167 = v115;\n    v181 = (v610 + (int32_t)v611 >> 2) - (v610 >> 31);\n    v138 = 2;\n    v148 = v18;\n    goto lab_0x4060b0;\n  lab_0x406630:\n    // 0x406630\n    v173 = v174;\n    v163 = v164;\n    v184 = v185;\n    v179 = v180;\n    v158 = v159;\n    v141 = v136;\n    v151 = v145;\n    v607 = v174;\n    v606 = v164;\n    v609 = v185;\n    v608 = v180;\n    v605 = v159;\n    v603 = v136;\n    v604 = v145;\n    if ((char)v159 == 0) {\n        goto lab_0x406380;\n    } else {\n        goto lab_0x406639;\n    }\n  lab_0x405b60:;\n    int64_t v381 = v337;\n    int64_t v382 = v336;\n    int64_t v383 = v341;\n    *(char *)v340 = (char)v342;\n    v1 = format;\n    *(char *)(v340 + 1) = 0;\n    *v44 = v338;\n    *v56 = (int32_t)v339;\n    *v39 = (char)v335;\n    int32_t copied_chars = strftime((char *)str2, 1024, (char *)format, (struct tm *)*tm); // 0x405b8c\n    int64_t v384 = *v44; // 0x405b91\n    v8 = v12;\n    v9 = v13;\n    v25 = v384;\n    v21 = v20;\n    v24 = v23;\n    int64_t v385; // 0x405920\n    int64_t v386; // 0x405920\n    int64_t v387; // 0x405920\n    int64_t v388; // 0x405920\n    int64_t v389; // 0x405920\n    int64_t v390; // 0x405920\n    int64_t v391; // 0x405920\n    int64_t v392; // 0x405920\n    int64_t v393; // 0x405920\n    int64_t v394; // 0x405920\n    int64_t v395; // 0x405920\n    int64_t v396; // 0x405920\n    if (copied_chars == 0) {\n        goto lab_0x4059ae;\n    } else {\n        uint64_t v397 = (int64_t)copied_chars - 1; // 0x405b9f\n        int64_t v398 = 0x100000000 * v383 >> 32;\n        uint64_t v399 = (int32_t)v383 >= 0 ? v398 : 0; // 0x405bb1\n        int64_t v400 = v397 >= v399 ? v397 : v399; // 0x405bb9\n        int64_t v401 = v3 - v20; // 0x405bbd\n        v1 = v401;\n        if (v401 <= v400) {\n            // break -> 0x4059d3\n            goto lab_0x4059d3_11;\n        }\n        // 0x405bc9\n        v392 = v400;\n        v391 = v384;\n        v388 = v20;\n        v390 = 0;\n        if (v23 == 0) {\n            goto lab_0x405c66;\n        } else {\n            char v402 = *v39; // 0x405bd7\n            int64_t v403 = v397; // 0x405be0\n            int64_t v404 = v384; // 0x405be0\n            char v405 = v402; // 0x405be0\n            int64_t v406 = v23; // 0x405be0\n            if (v397 < v399 == *v56 == 0) {\n                // 0x405be7\n                *v55 = v397;\n                int64_t v407 = v398 - v397; // 0x405bef\n                v1 = v407;\n                *v53 = v384;\n                int64_t v408 = v407 + v23; // 0x405bf7\n                *v41 = v402;\n                int64_t * v409 = (int64_t *)v23;\n                int32_t v410 = v1;\n                if ((int32_t)v382 == 48) {\n                    // 0x406bb6\n                    memset(v409, 48, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                } else {\n                    // 0x405c0a\n                    memset(v409, 32, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                }\n            }\n            int64_t v411 = v406;\n            *v53 = v404;\n            v1 = v403;\n            *v44 = v403;\n            v393 = v400;\n            v396 = v57;\n            v395 = v411;\n            v385 = v405;\n            v386 = v20;\n            if ((char)v381 != 0) {\n                // 0x406ba2\n                function_405880(v411, v57, v1);\n                v394 = v400;\n                v387 = v20;\n                v389 = v411;\n                goto lab_0x405c63;\n            } else {\n                goto lab_0x405c4b;\n            }\n        }\n    }\n  lab_0x406380:;\n    int64_t v412 = v151;\n    int64_t v413 = v141;\n    int64_t v414 = v163;\n    int64_t v415 = v173;\n    *v39 = (char)v158;\n    int64_t v416 = v184; // 0x406393\n    int64_t v417 = v40 - 1;\n    int64_t v418 = v417; // 0x4063a0\n    if (v179 % 2 != 0) {\n        // 0x4063a2\n        *(char *)v417 = 58;\n        v418 = v40 - 2;\n    }\n    int64_t v419 = v418;\n    uint32_t v420 = (int32_t)v179 >> 1; // 0x4063b5\n    int64_t v421 = 0xcccccccd * v416 / 0x800000000; // 0x4063b7\n    v1 = v421;\n    *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    while (v416 < 10 != (v420 == 0)) {\n        // 0x4063da\n        v416 = v1 & 0xffffffff;\n        int64_t v422 = v420; // 0x4063dc\n        int64_t v423 = v419;\n        v417 = v423 - 1;\n        v418 = v417;\n        if (v422 % 2 != 0) {\n            // 0x4063a2\n            *(char *)v417 = 58;\n            v418 = v423 - 2;\n        }\n        // 0x4063b0\n        v419 = v418;\n        v420 = (int32_t)v422 >> 1;\n        v421 = 0xcccccccd * v416 / 0x800000000;\n        v1 = v421;\n        *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    }\n    int32_t v424 = v413; // 0x4063e6\n    int32_t v425 = v414;\n    int32_t v426 = v424 - v425; // 0x4063e6\n    int64_t v427 = v426 < 0 == ((v426 ^ v424) & (int32_t)(v413 ^ v414)) < 0 ? v413 : v414;\n    int64_t v428 = v427 & 0xffffffff; // 0x4063e9\n    v175 = v415;\n    v165 = v414;\n    v137 = v428;\n    v143 = v16;\n    v146 = v412;\n    v153 = v419;\n    if (*v39 != 0) {\n        goto lab_0x406ac8;\n    } else {\n        // 0x4063f6\n        v170 = v415;\n        v166 = v414;\n        v135 = v428;\n        v144 = v16;\n        v147 = v412;\n        v154 = v419;\n        if (*v41 == 0) {\n            goto lab_0x405d6d;\n        } else {\n            // 0x406401\n            v429 = v425;\n            v430 = 43;\n            v431 = v415;\n            v432 = v414;\n            v433 = v428;\n            v434 = v16;\n            v435 = v419;\n            if ((int32_t)v412 == 45) {\n                goto lab_0x406adc;\n            } else {\n                // 0x40640b\n                *v41 = 43;\n                v436 = 43;\n                v437 = v415;\n                v438 = v414;\n                v439 = v428;\n                v440 = v16;\n                v441 = v412;\n                v442 = v419;\n                goto lab_0x406410;\n            }\n        }\n    }\n  lab_0x406410:;\n    int64_t v443 = v442;\n    int64_t v444 = v441;\n    int64_t v445 = v440;\n    int64_t v446 = v439;\n    int64_t v447 = v438;\n    int64_t v448 = v437;\n    int64_t v449 = v40 - v443; // 0x406420\n    int64_t v450 = (v449 ^ 0xffffffff) + v446; // 0x406423\n    uint64_t v451 = v3 - v20; // 0x406426\n    int64_t v452; // 0x405920\n    int64_t v453; // 0x405920\n    int64_t v454; // 0x405920\n    int64_t v455; // 0x405920\n    int64_t v456; // 0x405920\n    int64_t v457; // 0x405920\n    int64_t v458; // 0x405920\n    int64_t v459; // 0x405920\n    int64_t v460; // 0x405920\n    int64_t v461; // 0x405920\n    int64_t v462; // 0x405920\n    int64_t v463; // 0x405920\n    int64_t v464; // 0x405920\n    int64_t v465; // 0x405920\n    int64_t v466; // 0x405920\n    int64_t v467; // 0x405920\n    int64_t v468; // 0x405920\n    int64_t v469; // 0x405920\n    int64_t v470; // 0x405920\n    int64_t v471; // 0x405920\n    int64_t v472; // 0x405920\n    int64_t v473; // 0x405920\n    int64_t v474; // 0x405920\n    int64_t v475; // 0x405920\n    int64_t v476; // 0x405920\n    int64_t v477; // 0x40646a\n    if ((int32_t)v450 < 1) {\n        int64_t v478 = 0x100000000 * v447 >> 32;\n        int64_t v479 = (int32_t)v447 >= 0 ? v478 : 0; // 0x406bed\n        int64_t v480 = v479 != 0 ? v479 : 1; // 0x406bf3\n        if (v480 >= v451) {\n            // break -> 0x4059d3\n            goto lab_0x4059d3_11;\n        }\n        int64_t v481 = v449; // 0x406c03\n        int64_t v482 = v480; // 0x406c03\n        int64_t v483 = v479; // 0x406c03\n        int64_t v484 = v446; // 0x406c03\n        int64_t v485 = v445; // 0x406c03\n        int64_t v486 = 0; // 0x406c03\n        if (v23 != 0) {\n            int32_t v487 = v446; // 0x406c05\n            int64_t v488 = v449; // 0x406c08\n            int64_t v489 = v480; // 0x406c08\n            int64_t v490 = v479; // 0x406c08\n            int64_t v491 = v446; // 0x406c08\n            int64_t v492 = v445; // 0x406c08\n            int64_t v493 = v23; // 0x406c08\n            if (v487 == 0 && v479 >= 2) {\n                // 0x406c10\n                *v61 = v449;\n                int64_t v494 = v478 - 1; // 0x406c18\n                v1 = v494;\n                *v62 = v480;\n                *v59 = v479;\n                *v53 = v494 + v23;\n                *v60 = v487;\n                *v43 = (char)v445;\n                if ((int32_t)v444 == 48) {\n                    // 0x407035\n                    int64_t * v495; // 0x405920\n                    int32_t v496; // 0x405920\n                    memset(v495, 48, v496);\n                    int64_t v497 = *v53; // 0x407042\n                    unsigned char v498 = *v43; // 0x407047\n                    uint32_t v499 = *v60; // 0x40704d\n                    int64_t v500 = *v59; // 0x407052\n                    int64_t v501 = *v62; // 0x407057\n                    int64_t v502 = *v61; // 0x40705c\n                    v488 = v502;\n                    v489 = v501;\n                    v490 = v500;\n                    v491 = v499;\n                    v492 = v498;\n                    v493 = v497;\n                } else {\n                    // 0x406c43\n                    memset((int64_t *)v23, 32, (int32_t)v1);\n                    v488 = *v61;\n                    v489 = *v62;\n                    v490 = *v59;\n                    v491 = (int64_t)*v60;\n                    v492 = (int64_t)*v43;\n                    v493 = *v53;\n                }\n            }\n            // 0x406c6f\n            *(char *)v493 = *v41;\n            v481 = v488;\n            v482 = v489;\n            v483 = v490;\n            v484 = v491;\n            v485 = v492;\n            v486 = v493 + 1;\n        }\n        int64_t v503 = v482 + v20; // 0x406c80\n        v472 = v3 - v503;\n        v476 = v481;\n        v473 = v447;\n        v468 = v448;\n        v469 = v483;\n        v453 = v484;\n        v457 = v485;\n        v459 = v444;\n        v461 = v443;\n        v462 = v503;\n        v466 = v486;\n        goto lab_0x405da6;\n    } else {\n        int32_t v504 = v444; // 0x406432\n        v505 = v436;\n        v506 = v451;\n        v507 = v448;\n        v508 = v447;\n        v509 = v450;\n        v510 = v446;\n        v511 = v445;\n        v512 = v443;\n        if (v504 == 95) {\n            goto lab_0x406c93;\n        } else {\n            // 0x40643c\n            if (0x100000000 * v446 >> 32 >= v451) {\n                // break -> 0x4059d3\n                goto lab_0x4059d3_11;\n            }\n            int64_t v513 = 0x100000000 * v447 >> 32;\n            int64_t v514 = (int32_t)v447 >= 0 ? v513 : 0; // 0x406457\n            v1 = v514;\n            uint64_t v515 = v514 != 0 ? v514 : 1; // 0x40645d\n            if (v515 >= v451) {\n                // break -> 0x4059d3\n                goto lab_0x4059d3_11;\n            }\n            // 0x40646a\n            v477 = v515 + v20;\n            int64_t v516 = 0x100000000 * v450 >> 32; // 0x40646d\n            v475 = v449;\n            v467 = v448;\n            v471 = v516;\n            v452 = v446;\n            v456 = v445;\n            v458 = v444;\n            v460 = v443;\n            v463 = v477;\n            v465 = 0;\n            if (v23 == 0) {\n                goto lab_0x406530;\n            } else {\n                int32_t v517 = v446; // 0x40647c\n                v474 = v449;\n                v470 = v516;\n                v454 = v446;\n                v455 = v445;\n                v464 = v23;\n                if (v517 == 0 && v514 >= 2) {\n                    // 0x406487\n                    *v59 = v516;\n                    int64_t v518 = v513 - 1; // 0x40648f\n                    v1 = v518;\n                    *v54 = v449;\n                    int64_t v519 = v518 + v23; // 0x406498\n                    *v56 = v517;\n                    *v39 = (char)v445;\n                    int64_t * v520 = (int64_t *)v23;\n                    int32_t v521 = v1;\n                    if (v504 == 48) {\n                        // 0x40709f\n                        memset(v520, 48, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    } else {\n                        // 0x4064b0\n                        memset(v520, 32, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    }\n                }\n                // 0x4064d5\n                *(char *)v464 = *v41;\n                goto lab_0x4064e5;\n            }\n        }\n    }\n  lab_0x405d94:\n    // 0x405d94\n    v472 = v3 - v20;\n    v476 = v522;\n    v473 = v523;\n    v468 = v170;\n    v469 = (int32_t)v523 >= 0 ? 0x100000000 * v523 >> 32 : 0;\n    v453 = v524;\n    v457 = v144;\n    v459 = v147;\n    v461 = v154;\n    v462 = v20;\n    v466 = v23;\n    goto lab_0x405da6;\n  lab_0x406f96:\n    // 0x406f96\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v347 + 100 * v346;\n    v178 = 4;\n    v157 = v345;\n    v139 = 6;\n    v149 = v18;\n    goto lab_0x4060bf;\n  lab_0x406f72:\n    // 0x406f72\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v348 + 0x2710 * v346 + 100 * v347;\n    v178 = 20;\n    v157 = v345;\n    v139 = 9;\n    v149 = v18;\n    goto lab_0x4060bf;\n  lab_0x406639:\n    // 0x406639\n    v173 = v607;\n    v163 = v606;\n    v184 = -v609 & 0xffffffff;\n    v179 = v608;\n    v158 = v605;\n    v141 = v603;\n    v151 = v604;\n    goto lab_0x406380;\n  lab_0x406adc:;\n    int64_t v612 = 0x100000000 * v432 >> 32;\n    int64_t v613 = v429 >= 0 ? v612 : 0; // 0x406af2\n    uint64_t v614 = v613 != 0 ? v613 : 1; // 0x406af8\n    if (v3 - v20 <= v614) {\n        // break -> 0x4059d3\n        goto lab_0x4059d3_11;\n    }\n    int64_t v615 = v434;\n    int64_t v616 = v433;\n    int64_t v617 = v613; // 0x406b0b\n    int64_t v618 = v616; // 0x406b0b\n    int64_t v619 = v615; // 0x406b0b\n    int64_t v620 = 0; // 0x406b0b\n    if (v23 != 0) {\n        int64_t v621 = v430;\n        int32_t v622 = v616; // 0x406b0d\n        int64_t v623 = v621; // 0x406b10\n        int64_t v624 = v613; // 0x406b10\n        int64_t v625 = v616; // 0x406b10\n        int64_t v626 = v615; // 0x406b10\n        int64_t v627 = v23; // 0x406b10\n        if (v622 == 0 && v613 >= 2) {\n            // 0x406b18\n            *v58 = (char)v621;\n            int64_t v628 = v612 - 1; // 0x406b27\n            *v54 = v613;\n            v1 = v628;\n            *v56 = v622;\n            *v39 = (char)v615;\n            *v44 = v628;\n            memset((int64_t *)v23, 32, (int32_t)v628);\n            v624 = *v54;\n            v623 = (int64_t)*v58;\n            v625 = (int64_t)*v56;\n            v626 = (int64_t)*v39;\n            v627 = *v44 + v23;\n        }\n        // 0x406b64\n        *(char *)v627 = (char)v623;\n        v617 = v624;\n        v618 = v625;\n        v619 = v626;\n        v620 = v627 + 1;\n    }\n    int64_t v629 = v614 + v20; // 0x406b6f\n    v472 = v3 - v629;\n    v476 = v40 - v435;\n    v473 = v432;\n    v468 = v431;\n    v469 = v617;\n    v453 = v618;\n    v457 = v619;\n    v459 = 45;\n    v461 = v435;\n    v462 = v629;\n    v466 = v620;\n    goto lab_0x405da6;\n  lab_0x405da6:;\n    uint64_t v525 = v469;\n    uint64_t v526 = v476;\n    int64_t v527 = v526 >= v525 ? v526 : v525; // 0x405dac\n    if (v527 >= v472) {\n        // break -> 0x4059d3\n        goto lab_0x4059d3_11;\n    }\n    int64_t v528 = v466;\n    int64_t v529 = v462;\n    int64_t v530 = v468;\n    v392 = v527;\n    v391 = v530;\n    v388 = v529;\n    v390 = 0;\n    if (v528 == 0) {\n        goto lab_0x405c66;\n    } else {\n        int64_t v531 = v457;\n        int64_t v532 = v526; // 0x405dc5\n        int64_t v533 = v530; // 0x405dc5\n        int64_t v534 = v531; // 0x405dc5\n        int64_t v535 = v528; // 0x405dc5\n        if (v526 < v525 == (int32_t)v453 == 0) {\n            // 0x405dcc\n            *v55 = v526;\n            int64_t v536 = (0x100000000 * v473 >> 32) - v526; // 0x405dd4\n            v1 = v536;\n            *v53 = v530;\n            *v41 = (char)v531;\n            if ((int32_t)v459 == 48) {\n                // 0x406d17\n                int64_t * v537; // 0x405920\n                int32_t v538; // 0x405920\n                memset(v537, 48, v538);\n                unsigned char v539 = *v41; // 0x406d27\n                int64_t v540 = *v53; // 0x406d2d\n                int64_t v541 = *v55; // 0x406d32\n                v532 = v541;\n                v533 = v540;\n                v534 = v539;\n                int64_t v542; // 0x405ddc\n                v535 = v542;\n            } else {\n                // 0x405def\n                memset((int64_t *)v528, 32, (int32_t)v1);\n                v532 = *v55;\n                v533 = *v53;\n                v534 = (int64_t)*v41;\n                v535 = v528 + v536;\n            }\n        }\n        // 0x405e0f\n        *v53 = v533;\n        v1 = v532;\n        *v44 = v532;\n        v393 = v527;\n        v396 = v461;\n        v395 = v535;\n        v385 = v534;\n        v386 = v529;\n        goto lab_0x405c4b;\n    }\n  lab_0x405c66:\n    // 0x405c66\n    v8 = v12;\n    v9 = v13;\n    v25 = v391;\n    v21 = v388 + v392;\n    v24 = v390;\n    goto lab_0x4059ae;\n  lab_0x406c93:;\n    int64_t v543 = v509;\n    int64_t v544 = 0x100000000 * v543 >> 32; // 0x406c93\n    if (v544 >= v506) {\n        // break -> 0x4059d3\n        goto lab_0x4059d3_11;\n    }\n    int64_t v545 = v512;\n    int64_t v546 = v511;\n    int64_t v547 = v510;\n    int64_t v548 = v508;\n    int64_t v549 = v507;\n    char v550 = v505; // 0x406ca2\n    int64_t v551 = v543 & 0xffffffff; // 0x406ca2\n    int64_t v552 = v547; // 0x406ca2\n    int64_t v553 = v546; // 0x406ca2\n    int64_t v554 = 0; // 0x406ca2\n    if (v23 != 0) {\n        // 0x406ca4\n        v1 = v544;\n        *v60 = (int32_t)v543;\n        *v56 = (int32_t)v547;\n        *v39 = (char)v546;\n        memset((int64_t *)v23, 32, (int32_t)v544);\n        v550 = *v41;\n        v551 = (int64_t)*v60;\n        v552 = (int64_t)*v56;\n        v553 = (int64_t)*v39;\n        v554 = v544 + v23;\n    }\n    int64_t v555 = v554;\n    int64_t v556 = v553;\n    int64_t v557 = v552;\n    int64_t v558 = v551;\n    char v559 = v550; // 0x406cf0\n    int64_t v560 = v544 + v20; // 0x406cd8\n    int32_t v561 = v558; // 0x406cde\n    int32_t v562 = v561 - (int32_t)v548; // 0x406cde\n    int64_t v563 = v562 < 0 == ((v562 ^ v561) & (int32_t)(v558 ^ v548)) < 0 ? 0 : v548 - v558 & 0xffffffff; // 0x406ce6\n    int64_t v564 = v3 - v560; // 0x406ced\n    int64_t v565 = 0x100000000 * v563 >> 32;\n    if (v559 != 0) {\n        int64_t v566 = v563 != 0 ? v565 : 1; // 0x406d8b\n        if (v566 >= v564) {\n            // break -> 0x4059d3\n            goto lab_0x4059d3_11;\n        }\n        int64_t v567 = v566; // 0x406d9b\n        int64_t v568 = v565; // 0x406d9b\n        int64_t v569 = v557; // 0x406d9b\n        int64_t v570 = v556; // 0x406d9b\n        int64_t v571 = 0; // 0x406d9b\n        if (v555 != 0) {\n            int32_t v572 = v557; // 0x406d9d\n            char v573 = v559; // 0x406da0\n            int64_t v574 = v566; // 0x406da0\n            int64_t v575 = v565; // 0x406da0\n            int64_t v576 = v557; // 0x406da0\n            int64_t v577 = v556; // 0x406da0\n            int64_t v578 = v555; // 0x406da0\n            if (v572 == 0 && v565 >= 2) {\n                int64_t v579 = v565 - 1; // 0x406da8\n                *v59 = v566;\n                v1 = v579;\n                *v60 = v572;\n                *v43 = (char)v556;\n                *v53 = v565;\n                memset((int64_t *)v555, 32, (int32_t)v579);\n                v574 = *v59;\n                v575 = *v53;\n                v573 = *v41;\n                v576 = (int64_t)*v60;\n                v577 = (int64_t)*v43;\n                v578 = v579 + v555;\n            }\n            // 0x406de8\n            v568 = v575;\n            v567 = v574;\n            *(char *)v578 = v573;\n            v569 = v576;\n            v570 = v577;\n            v571 = v578 + 1;\n        }\n        int64_t v580 = v567 + v560; // 0x406df9\n        v472 = v3 - v580;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v568;\n        v453 = v569;\n        v457 = v570;\n        v459 = 95;\n        v461 = v545;\n        v462 = v580;\n        v466 = v571;\n    } else {\n        // 0x406cfb\n        v472 = v564;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v565;\n        v453 = v557;\n        v457 = v556;\n        v459 = 95;\n        v461 = v545;\n        v462 = v560;\n        v466 = v555;\n    }\n    goto lab_0x405da6;\n  lab_0x405c4b:;\n    int64_t v581 = v386;\n    int64_t v582 = v395;\n    int64_t v583 = v396;\n    int64_t v584 = v393;\n    if ((char)v385 == 0) {\n        // 0x406ab0\n        memcpy((int64_t *)v582, (int64_t *)v583, (int32_t)v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    } else {\n        // 0x405c54\n        function_4058d0(v582, v583, v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    }\n    goto lab_0x405c63;\n  lab_0x406530:;\n    int64_t v585 = v463 + v471; // 0x406534\n    v472 = v3 - v585;\n    v476 = v475;\n    v473 = 0;\n    v468 = v467;\n    v469 = 0;\n    v453 = v452;\n    v457 = v456;\n    v459 = v458;\n    v461 = v460;\n    v462 = v585;\n    v466 = v465;\n    goto lab_0x405da6;\n  lab_0x4064e5:;\n    int64_t v586 = v464 + 1;\n    int64_t v587 = v477;\n    int64_t v588 = v443;\n    int64_t v589 = v444;\n    int64_t v590 = v455;\n    int64_t v591 = v454;\n    int64_t v592 = v470;\n    int64_t v593 = v448;\n    int64_t v594 = v474;\n    v475 = v594;\n    v467 = v593;\n    v471 = v592;\n    v452 = v591;\n    v456 = v590;\n    v458 = v589;\n    v460 = v588;\n    v463 = v587;\n    v465 = 0;\n    if (v586 != 0) {\n        // 0x4064ea\n        v1 = v592;\n        *v59 = v594;\n        *v60 = (int32_t)v591;\n        *v55 = v593;\n        *v39 = (char)v590;\n        *v44 = v592;\n        memset((int64_t *)v586, 48, (int32_t)v592);\n        int64_t v595 = *v44; // 0x406513\n        v475 = *v59;\n        v467 = *v55;\n        v471 = v595;\n        v452 = (int64_t)*v60;\n        v456 = (int64_t)*v39;\n        v458 = v589;\n        v460 = v588;\n        v463 = v587;\n        v465 = v595 + v586;\n    }\n    goto lab_0x406530;\n  lab_0x405c63:\n    // 0x405c63\n    v392 = v394;\n    v391 = *v53;\n    v388 = v387;\n    v390 = *v44 + v389;\n    goto lab_0x405c66;\n  lab_0x4059bb_2:\n    // 0x4059bb\n    if (v3 != 0 && v5 != 0) {\n        // 0x4059c7\n        *(char *)v5 = 0;\n    }\n    // 0x4059d3\n    return result;\n}\n"
        },
        {
            "funcName": "function_4070f0",
            "funcStartAddr": "4070f0",
            "funcEndAddr": "40710f",
            "decompiledFuncCode": "int64_t function_4070f0(int32_t a1, int64_t a2, int64_t a3, int64_t * a4, int64_t a5, int64_t a6) {\n    char v1 = 0; // bp-9, 0x4070f4\n    return function_405920(a1, a2, a3, (int64_t)a4, 0, (int64_t)&v1);\n}\n"
        },
        {
            "funcName": "function_407110",
            "funcStartAddr": "407110",
            "funcEndAddr": "4071a9",
            "decompiledFuncCode": "int64_t function_407110(int64_t str) {\n    // 0x407110\n    if (str == 0) {\n        // 0x407189\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g56);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40711e\n    int64_t result = (int64_t)found_char_pos; // 0x40711e\n    if (found_char_pos == NULL) {\n        // 0x407179\n        g125 = str;\n        g55 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x407128\n    if (v1 - str < 7) {\n        // 0x407179\n        g125 = str;\n        g55 = str;\n        return result;\n    }\n    // 0x407138\n    bool v2; // 0x407110\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x407110\n    int64_t v5 = result - 6; // 0x407110\n    int64_t v6 = 7; // 0x407146\n    unsigned char v7 = *(char *)v5; // 0x407146\n    char v8 = *(char *)v4; // 0x407146\n    char v9 = v8; // 0x407146\n    bool v10 = false; // 0x407146\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x407150\n    int64_t v13 = v1; // 0x407150\n    int64_t v14 = 3; // 0x407150\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x407179\n        g125 = str;\n        g55 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x407162\n    char v16 = *(char *)v12; // 0x407162\n    char v17 = v16; // 0x407162\n    bool v18 = false; // 0x407162\n    while (v15 == v16) {\n        // 0x407152\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40716c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40716e\n        v20 = result + 4;\n        g52 = v20;\n    }\n    // 0x407179\n    g125 = v20;\n    g55 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4071b0",
            "funcStartAddr": "4071b0",
            "funcEndAddr": "4072a2",
            "decompiledFuncCode": "int64_t function_4071b0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4071c4\n    int64_t result = (int64_t)v1; // 0x4071c4\n    if (result != a1) {\n        // 0x4071d1\n        return result;\n    }\n    int64_t v2 = function_40c0d0(); // 0x4071e0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x407296\n    if (v3 == 85) {\n        // 0x4071f0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x407288\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g6;\n            return result2;\n        }\n        char v4 = *v1; // 0x40721e\n        int64_t result3 = v4 != 96 ? (int64_t)&g7 : (int64_t)&g10; // 0x40722b\n        // 0x4071d1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x407288\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g6;\n        return result2;\n    }\n    char v5 = *v1; // 0x40726d\n    int64_t result4 = v5 != 96 ? (int64_t)&g8 : (int64_t)&g9; // 0x40727a\n    // 0x4071d1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4072b0",
            "funcStartAddr": "4072b0",
            "funcEndAddr": "407307",
            "decompiledFuncCode": "int64_t function_4072b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4072b0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4072f8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407307",
            "funcStartAddr": "407307",
            "funcEndAddr": "4084d1",
            "decompiledFuncCode": "int64_t function_407307(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x407351\n    int64_t v3 = 0; // 0x407351\n    int64_t v4; // 0x407307\n    int64_t v5; // 0x407307\n    int64_t v6; // 0x407307\n    int64_t v7; // 0x407307\n    int64_t v8; // 0x407307\n    int64_t v9; // 0x407307\n    int64_t v10; // 0x407307\n    int64_t v11; // 0x407307\n    int64_t v12; // 0x407307\n    int64_t v13; // 0x407307\n    int64_t v14; // 0x407307\n    int64_t v15; // 0x407307\n    int64_t v16; // 0x407307\n    int64_t v17; // 0x407307\n    int64_t v18; // 0x407307\n    int64_t result; // 0x407307\n    int64_t v19; // 0x407307\n    int32_t wc; // bp+132, 0x407307\n    int64_t ps; // bp+136, 0x407307\n    char v20; // 0x4078c0\n    int64_t v21; // 0x4078c0\n    int64_t v22; // 0x407c68\n    int64_t v23; // 0x407307\n    int64_t v24; // 0x407c87\n    int32_t v25; // 0x407307\n    while (true) {\n      lab_0x407358_2:\n        // 0x407358\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x407307\n        int64_t v27; // 0x40738c\n        while (true) {\n          lab_0x407358:\n            // 0x407358\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x407363\n            if (v15 == -1) {\n                // 0x407365\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x407373\n            if (v28) {\n                // break (via goto) -> 0x407ad8\n                goto lab_0x407ad8;\n            }\n            // 0x40737c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g140 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40796b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4074b1;\n                    }\n                    // 0x407d8d\n                    v26 = v5 + 1;\n                    goto lab_0x407358;\n                }\n                case 7: {\n                    goto lab_0x4074b1;\n                }\n                case 8: {\n                    goto lab_0x4074b1;\n                }\n                case 9: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4074b1;\n                }\n                case 12: {\n                    goto lab_0x4074b1;\n                }\n                case 13: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40747d;\n                }\n                case 36: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4074b1;\n                }\n                case 38: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4074b1;\n                }\n                case 44: {\n                    goto lab_0x4074b1;\n                }\n                case 45: {\n                    goto lab_0x4074b1;\n                }\n                case 46: {\n                    goto lab_0x4074b1;\n                }\n                case 47: {\n                    goto lab_0x4074b1;\n                }\n                case 48: {\n                    goto lab_0x4074b1;\n                }\n                case 49: {\n                    goto lab_0x4074b1;\n                }\n                case 50: {\n                    goto lab_0x4074b1;\n                }\n                case 51: {\n                    goto lab_0x4074b1;\n                }\n                case 52: {\n                    goto lab_0x4074b1;\n                }\n                case 53: {\n                    goto lab_0x4074b1;\n                }\n                case 54: {\n                    goto lab_0x4074b1;\n                }\n                case 55: {\n                    goto lab_0x4074b1;\n                }\n                case 56: {\n                    goto lab_0x4074b1;\n                }\n                case 57: {\n                    goto lab_0x4074b1;\n                }\n                case 58: {\n                    goto lab_0x4074b1;\n                }\n                case 59: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4074b1;\n                }\n                case 66: {\n                    goto lab_0x4074b1;\n                }\n                case 67: {\n                    goto lab_0x4074b1;\n                }\n                case 68: {\n                    goto lab_0x4074b1;\n                }\n                case 69: {\n                    goto lab_0x4074b1;\n                }\n                case 70: {\n                    goto lab_0x4074b1;\n                }\n                case 71: {\n                    goto lab_0x4074b1;\n                }\n                case 72: {\n                    goto lab_0x4074b1;\n                }\n                case 73: {\n                    goto lab_0x4074b1;\n                }\n                case 74: {\n                    goto lab_0x4074b1;\n                }\n                case 75: {\n                    goto lab_0x4074b1;\n                }\n                case 76: {\n                    goto lab_0x4074b1;\n                }\n                case 77: {\n                    goto lab_0x4074b1;\n                }\n                case 78: {\n                    goto lab_0x4074b1;\n                }\n                case 79: {\n                    goto lab_0x4074b1;\n                }\n                case 80: {\n                    goto lab_0x4074b1;\n                }\n                case 81: {\n                    goto lab_0x4074b1;\n                }\n                case 82: {\n                    goto lab_0x4074b1;\n                }\n                case 83: {\n                    goto lab_0x4074b1;\n                }\n                case 84: {\n                    goto lab_0x4074b1;\n                }\n                case 85: {\n                    goto lab_0x4074b1;\n                }\n                case 86: {\n                    goto lab_0x4074b1;\n                }\n                case 87: {\n                    goto lab_0x4074b1;\n                }\n                case 88: {\n                    goto lab_0x4074b1;\n                }\n                case 89: {\n                    goto lab_0x4074b1;\n                }\n                case 90: {\n                    goto lab_0x4074b1;\n                }\n                case 91: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4074b1;\n                }\n                case 94: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4074b1;\n                }\n                case 96: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4074b1;\n                }\n                case 98: {\n                    goto lab_0x4074b1;\n                }\n                case 99: {\n                    goto lab_0x4074b1;\n                }\n                case 100: {\n                    goto lab_0x4074b1;\n                }\n                case 101: {\n                    goto lab_0x4074b1;\n                }\n                case 102: {\n                    goto lab_0x4074b1;\n                }\n                case 103: {\n                    goto lab_0x4074b1;\n                }\n                case 104: {\n                    goto lab_0x4074b1;\n                }\n                case 105: {\n                    goto lab_0x4074b1;\n                }\n                case 106: {\n                    goto lab_0x4074b1;\n                }\n                case 107: {\n                    goto lab_0x4074b1;\n                }\n                case 108: {\n                    goto lab_0x4074b1;\n                }\n                case 109: {\n                    goto lab_0x4074b1;\n                }\n                case 110: {\n                    goto lab_0x4074b1;\n                }\n                case 111: {\n                    goto lab_0x4074b1;\n                }\n                case 112: {\n                    goto lab_0x4074b1;\n                }\n                case 113: {\n                    goto lab_0x4074b1;\n                }\n                case 114: {\n                    goto lab_0x4074b1;\n                }\n                case 115: {\n                    goto lab_0x4074b1;\n                }\n                case 116: {\n                    goto lab_0x4074b1;\n                }\n                case 117: {\n                    goto lab_0x4074b1;\n                }\n                case 118: {\n                    goto lab_0x4074b1;\n                }\n                case 119: {\n                    goto lab_0x4074b1;\n                }\n                case 120: {\n                    goto lab_0x4074b1;\n                }\n                case 121: {\n                    goto lab_0x4074b1;\n                }\n                case 122: {\n                    goto lab_0x4074b1;\n                }\n                case 123: {\n                    goto lab_0x407455;\n                }\n                case 124: {\n                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x407455;\n                }\n                case 126: {\n                    goto lab_0x40747d;\n                }\n                default: {\n                    goto lab_0x407855;\n                }\n            }\n        }\n      lab_0x407855:\n        if (v23 != 1) {\n            // 0x407bc0\n            ps = 0;\n            int64_t len = v15; // 0x407bd0\n            if (v15 == -1) {\n                // 0x407bd2\n                len = strlen((char *)str);\n            }\n            // 0x407bfe\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x407c5f:\n                // 0x407c5f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x407c64\n                int64_t v30 = v29 + str;\n                v24 = function_40ba50((int64_t *)&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4081da_2;\n                    }\n                    case -1: {\n                        goto lab_0x4081da_2;\n                    }\n                    case -2: {\n                        // 0x4082bd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4082f7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4082fa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x408307\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x408300\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4081da\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4081da_2;\n                    }\n                    case 1: {\n                        goto lab_0x407c30;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x407cdc\n                        char v34 = *(char *)v33; // 0x407ced\n                        unsigned char v35; // 0x407307\n                        if (v34 < 125) {\n                            // 0x407cf8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x407d0f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x407ce0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x407ced\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x407cf8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x407d0f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x407ce0\n                            v33++;\n                        }\n                        goto lab_0x407c30;\n                    }\n                }\n            }\n            goto lab_0x4081da_2;\n        } else {\n            // 0x4078a4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4074b1;\n        }\n    }\n  lab_0x407ad8:\n    // 0x407ad8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4083da\n        if (v8 > result) {\n            // 0x4083e3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x407707\n        return result;\n    }\n    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4074b1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4074c0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4076ca_2;\n        }\n    }\n    int64_t v39 = result; // 0x4075c1\n    char v40 = v20; // 0x4075c1\n    int64_t v41 = v38; // 0x4075c1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4075c1\n    int64_t v43 = v36; // 0x4075c1\n    goto lab_0x40753d;\n  lab_0x4076ca_2:\n    // 0x407707\n    return function_4072b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4081da_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4074b1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x407dae\n        int64_t v50 = v5 + 1; // 0x407e91\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x407e98\n        char v52 = v20; // 0x407e98\n        int64_t v53 = result; // 0x407e98\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x407e61\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x407e65\n            int64_t v56 = v54 + 1; // 0x407e6a\n            int64_t v57 = v51 + 1; // 0x407e91\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x407e5c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x407e61\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x407e65\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40753d;\n    }\n  lab_0x407c30:\n    // 0x407c30\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x407c4f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x407c52\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4081da\n        goto lab_0x4081da_2;\n    }\n    goto lab_0x407c5f;\n  lab_0x40747d:\n    // 0x40747d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4076ca_2;\n    }\n    goto lab_0x4074b1;\n  lab_0x407455:;\n    bool v60 = v15 == 1; // 0x407460\n    if (v15 == -1) {\n        // 0x407462\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40746e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4074b1;\n    } else {\n        goto lab_0x40747d;\n    }\n  lab_0x40753d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x407542\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x407546\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x407358_2;\n}\n"
        },
        {
            "funcName": "function_4084e0",
            "funcStartAddr": "4084e0",
            "funcEndAddr": "40867e",
            "decompiledFuncCode": "int64_t function_4084e0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4084e2\n    int32_t * v3 = __errno_location(); // 0x4084fc\n    int64_t v4 = (int64_t)g45; // 0x408501\n    int32_t v5 = *v3; // 0x40850b\n    int64_t v6 = v4; // 0x408521\n    if (v2 >= (int64_t)*(int32_t *)&g48) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x408679\n            function_409550(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x408530\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x408537\n        int64_t v9; // 0x4084e0\n        if (g45 == &g46) {\n            int64_t v10 = function_409360(0, v8); // 0x40865a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g46); // 0x40865f\n            *(int64_t *)&g45 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_409360(v4, v8); // 0x40854b\n            *(int64_t *)&g45 = v12;\n            v9 = v12;\n        }\n        // 0x40855a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g48; // 0x40855a\n        int32_t v14 = v7; // 0x408561\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g48 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x408591\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40859b\n    int64_t * v17 = (int64_t *)v15; // 0x40859e\n    uint64_t v18 = *v17; // 0x40859e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4085a1\n    int64_t result = *v19; // 0x4085a1\n    int64_t v20; // 0x4084e0\n    uint64_t v21 = function_4072b0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4085c4\n    if (v18 > v21) {\n        // 0x40863b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4085d7\n    *v17 = v22;\n    if (result != (int64_t)&g126) {\n        // 0x4085e7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_409300(v22); // 0x408601\n    *v19 = result2;\n    int64_t v23; // 0x4084e0\n    function_4072b0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40863b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408680",
            "funcStartAddr": "408680",
            "funcEndAddr": "4086b4",
            "decompiledFuncCode": "int64_t function_408680(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x408687\n    int64_t result = function_409500(a1 == 0 ? (int64_t)&g127 : a1, 56); // 0x4086a6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4086c0",
            "funcStartAddr": "4086c0",
            "funcEndAddr": "4086cf",
            "decompiledFuncCode": "int64_t function_4086c0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g127 : a1); // 0x4086cc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4086d0",
            "funcStartAddr": "4086d0",
            "funcEndAddr": "4086df",
            "decompiledFuncCode": "int64_t function_4086d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g127 : a1; // 0x4086d8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g127;\n}\n"
        },
        {
            "funcName": "function_4086e0",
            "funcStartAddr": "4086e0",
            "funcEndAddr": "408713",
            "decompiledFuncCode": "int64_t function_4086e0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g127 + 8 : a1 + 8; // 0x4086f9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4086fe\n    uint32_t v3 = *v2; // 0x4086fe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x408702\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_408720",
            "funcStartAddr": "408720",
            "funcEndAddr": "408733",
            "decompiledFuncCode": "int64_t function_408720(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g127 + 4 : a1 + 4); // 0x40872c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_408740",
            "funcStartAddr": "408740",
            "funcEndAddr": "40876b",
            "decompiledFuncCode": "int64_t function_408740(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g127 : a1; // 0x408748\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x408765\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40875c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g127;\n}\n"
        },
        {
            "funcName": "function_408770",
            "funcStartAddr": "408770",
            "funcEndAddr": "4087e2",
            "decompiledFuncCode": "int64_t function_408770(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g127 : a5; // 0x408792\n    int32_t * v2 = __errno_location(); // 0x40879b\n    uint32_t v3 = *(int32_t *)v1; // 0x4087bb\n    int64_t result = function_4072b0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4087ca\n    return result;\n}\n"
        },
        {
            "funcName": "function_4087f0",
            "funcStartAddr": "4087f0",
            "funcEndAddr": "4088d1",
            "decompiledFuncCode": "int64_t function_4087f0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g127 : a4; // 0x408812\n    int32_t * v2 = __errno_location(); // 0x408818\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x408837\n    int32_t * v4 = (int32_t *)v1; // 0x40883a\n    int64_t v5 = function_4072b0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x408855\n    int64_t v6 = v5 + 1; // 0x40885a\n    int64_t result = function_409300(v6); // 0x40886f\n    function_4072b0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4088b4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4088bd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4088e0",
            "funcStartAddr": "4088e0",
            "funcEndAddr": "4088ea",
            "decompiledFuncCode": "int64_t function_4088e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4088e0\n    return function_4087f0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4088f0",
            "funcStartAddr": "4088f0",
            "funcEndAddr": "408985",
            "decompiledFuncCode": "int64_t function_4088f0(void) {\n    uint32_t v1 = *(int32_t *)&g48; // 0x4088f0\n    int64_t v2 = v1; // 0x4088f0\n    int64_t v3 = v2; // 0x408904\n    if (v1 >= 2) {\n        int64_t v4 = &g48;\n        int64_t v5 = v4 + 16; // 0x408923\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g141;\n        while (v5 != (int64_t)g45 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x408920\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g141;\n        }\n    }\n    int64_t v6 = v3; // 0x40893d\n    if (g46 != 0x6144a0) {\n        // 0x40893f\n        free((int64_t *)g46);\n        g46 = 256;\n        *(int64_t *)&g47 = (int64_t)&g126;\n        v6 = &g141;\n    }\n    int64_t result = v6; // 0x408961\n    if (g45 != &g46) {\n        // 0x408963\n        free(g45);\n        *(int64_t *)&g45 = (int64_t)&g46;\n        result = &g141;\n    }\n    // 0x408976\n    *(int32_t *)&g48 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408990",
            "funcStartAddr": "408990",
            "funcEndAddr": "4089a1",
            "decompiledFuncCode": "int64_t function_408990(void) {\n    // 0x408990\n    int64_t v1; // 0x408990\n    return function_4084e0(v1, v1, -1, (int64_t *)&g127);\n}\n"
        },
        {
            "funcName": "function_4089b0",
            "funcStartAddr": "4089b0",
            "funcEndAddr": "4089ba",
            "decompiledFuncCode": "int64_t function_4089b0(void) {\n    // 0x4089b0\n    int64_t v1; // 0x4089b0\n    return function_4084e0(v1, v1, v1, (int64_t *)&g127);\n}\n"
        },
        {
            "funcName": "function_4089c0",
            "funcStartAddr": "4089c0",
            "funcEndAddr": "4089d6",
            "decompiledFuncCode": "int64_t function_4089c0(int64_t a1) {\n    // 0x4089c0\n    return function_4084e0(0, a1, -1, (int64_t *)&g127);\n}\n"
        },
        {
            "funcName": "function_4089e0",
            "funcStartAddr": "4089e0",
            "funcEndAddr": "4089f2",
            "decompiledFuncCode": "int64_t function_4089e0(int64_t a1, int64_t a2) {\n    // 0x4089e0\n    return function_4084e0(0, a1, a2, (int64_t *)&g127);\n}\n"
        },
        {
            "funcName": "function_408a00",
            "funcStartAddr": "408a00",
            "funcEndAddr": "408a68",
            "decompiledFuncCode": "int64_t function_408a00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408a10\n    return function_4084e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408a70",
            "funcStartAddr": "408a70",
            "funcEndAddr": "408ad4",
            "decompiledFuncCode": "int64_t function_408a70(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408a80\n    return function_4084e0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_408ae0",
            "funcStartAddr": "408ae0",
            "funcEndAddr": "408aec",
            "decompiledFuncCode": "int64_t function_408ae0(int64_t a1, int64_t a2) {\n    // 0x408ae0\n    return function_408a00(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_408af0",
            "funcStartAddr": "408af0",
            "funcEndAddr": "408aff",
            "decompiledFuncCode": "int64_t function_408af0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408af0\n    return function_408a70(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_408b00",
            "funcStartAddr": "408b00",
            "funcEndAddr": "408b70",
            "decompiledFuncCode": "int64_t function_408b00(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g127); // 0x408b0d\n    int128_t v2 = __asm_movdqa(g128); // 0x408b15\n    int128_t v3 = __asm_movdqa(g129); // 0x408b1d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x408b32\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x408b48\n    uint32_t v6 = *v5; // 0x408b48\n    uint32_t v7 = (int32_t)a3 % 32; // 0x408b4d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4084e0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_408b70",
            "funcStartAddr": "408b70",
            "funcEndAddr": "408b7d",
            "decompiledFuncCode": "int64_t function_408b70(int64_t a1, int64_t a2) {\n    // 0x408b70\n    return function_408b00(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_408b80",
            "funcStartAddr": "408b80",
            "funcEndAddr": "408b91",
            "decompiledFuncCode": "int64_t function_408b80(int64_t a1) {\n    // 0x408b80\n    return function_408b00(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_408ba0",
            "funcStartAddr": "408ba0",
            "funcEndAddr": "408baa",
            "decompiledFuncCode": "int64_t function_408ba0(void) {\n    // 0x408ba0\n    int64_t v1; // 0x408ba0\n    return function_408b00(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_408bb0",
            "funcStartAddr": "408bb0",
            "funcEndAddr": "408c1e",
            "decompiledFuncCode": "int64_t function_408bb0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408bca\n    return function_4084e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408c20",
            "funcStartAddr": "408c20",
            "funcEndAddr": "408c8c",
            "decompiledFuncCode": "int64_t function_408c20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g127); // 0x408c27\n    int128_t v2 = __asm_movdqa(g128); // 0x408c2f\n    int128_t v3 = __asm_movdqa(g129); // 0x408c37\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x408c59\n    if (a2 == 0 || a3 == 0) {\n        // 0x408c87\n        abort();\n        // UNREACHABLE\n    }\n    // 0x408c6a\n    return function_4084e0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_408c90",
            "funcStartAddr": "408c90",
            "funcEndAddr": "408c99",
            "decompiledFuncCode": "int64_t function_408c90(void) {\n    // 0x408c90\n    int64_t v1; // 0x408c90\n    return function_408c20(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_408ca0",
            "funcStartAddr": "408ca0",
            "funcEndAddr": "408cb7",
            "decompiledFuncCode": "int64_t function_408ca0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408ca0\n    return function_408c20(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_408cc0",
            "funcStartAddr": "408cc0",
            "funcEndAddr": "408cd3",
            "decompiledFuncCode": "int64_t function_408cc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x408cc0\n    return function_408c20(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_408ce0",
            "funcStartAddr": "408ce0",
            "funcEndAddr": "408cea",
            "decompiledFuncCode": "int64_t function_408ce0(void) {\n    // 0x408ce0\n    int64_t v1; // 0x408ce0\n    return function_4084e0(v1, v1, v1, &g44);\n}\n"
        },
        {
            "funcName": "function_408cf0",
            "funcStartAddr": "408cf0",
            "funcEndAddr": "408d02",
            "decompiledFuncCode": "int64_t function_408cf0(int64_t a1, int64_t a2) {\n    // 0x408cf0\n    return function_4084e0(0, a1, a2, &g44);\n}\n"
        },
        {
            "funcName": "function_408d10",
            "funcStartAddr": "408d10",
            "funcEndAddr": "408d21",
            "decompiledFuncCode": "int64_t function_408d10(void) {\n    // 0x408d10\n    int64_t v1; // 0x408d10\n    return function_4084e0(v1, v1, -1, &g44);\n}\n"
        },
        {
            "funcName": "function_408d30",
            "funcStartAddr": "408d30",
            "funcEndAddr": "408d46",
            "decompiledFuncCode": "int64_t function_408d30(int64_t a1) {\n    // 0x408d30\n    return function_4084e0(0, a1, -1, &g44);\n}\n"
        },
        {
            "funcName": "function_408d50",
            "funcStartAddr": "408d50",
            "funcEndAddr": "408d5e",
            "decompiledFuncCode": "int64_t function_408d50(int64_t a1, int64_t a2) {\n    // 0x408d50\n    int64_t v1; // 0x408d50\n    return function_40aaa0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_408d60",
            "funcStartAddr": "408d60",
            "funcEndAddr": "40913d",
            "decompiledFuncCode": "int64_t function_408d60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x408df8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x408d7c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x408d96\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x408ddb\n    if (a6 < 10) {\n        // 0x408dea\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x408ee2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_409140",
            "funcStartAddr": "409140",
            "funcEndAddr": "409160",
            "decompiledFuncCode": "int64_t function_409140(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409140\n    if (a5 == 0) {\n        // 0x40915b\n        return function_408d60(a1, a2, a3, a4, a5, 0, (int64_t)&g141);\n    }\n    int64_t v1 = 0; // 0x409147\n    v1++;\n    int64_t v2 = v1; // 0x409159\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x409150\n        v1++;\n        v2 = v1;\n    }\n    // 0x40915b\n    return function_408d60(a1, a2, a3, a4, a5, v2, (int64_t)&g141);\n}\n"
        },
        {
            "funcName": "function_409160",
            "funcStartAddr": "409160",
            "funcEndAddr": "4091c0",
            "decompiledFuncCode": "int64_t function_409160(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x409160\n    int64_t v3 = &v2; // 0x409160\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x409193\n    int64_t v6; // 0x40917d\n    int64_t * v7; // 0x40919b\n    int64_t v8; // 0x40919b\n    int64_t v9; // 0x4091a7\n    if (v5 < 48) {\n        // 0x409170\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4091b3\n            break;\n        }\n    } else {\n        // 0x40919b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4091b3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x409191\n    while (v4 != 9) {\n        // 0x409189\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x409170\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4091b3\n                break;\n            }\n        } else {\n            // 0x40919b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4091b3\n                break;\n            }\n        }\n        // 0x409189\n        v10 = 10;\n    }\n    // 0x4091b3\n    return function_408d60(a1, a2, a3, a4, v3, v10, (int64_t)&g141);\n}\n"
        },
        {
            "funcName": "function_4091c0",
            "funcStartAddr": "4091c0",
            "funcEndAddr": "40927c",
            "decompiledFuncCode": "int64_t function_4091c0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4091c0\n    int64_t v1; // bp-168, 0x4091c0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4091c0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4091c0\n    int64_t v8; // 0x4091c0\n    int64_t v9; // bp-56, 0x4091c0\n    int64_t v10; // 0x409225\n    int64_t v11; // 0x409249\n    if ((int32_t)v6 < 48) {\n        // 0x409210\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x409260\n            break;\n        }\n    } else {\n        // 0x409242\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x409260\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40923a\n    int64_t v13 = 10; // 0x40923a\n    while (v5 != 9) {\n        // 0x40923c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x409210\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x409260\n                break;\n            }\n        } else {\n            // 0x409242\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x409260\n                break;\n            }\n        }\n        // 0x409232\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x409260\n    int64_t v14; // bp-136, 0x4091c0\n    int64_t result = function_408d60(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g141); // 0x40926f\n    return result;\n}\n"
        },
        {
            "funcName": "function_409280",
            "funcStartAddr": "409280",
            "funcEndAddr": "4092f4",
            "decompiledFuncCode": "int64_t function_409280(int64_t a1) {\n    // 0x409280\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4092e3\n    return fputs_unlocked(v1, g53);\n}\n"
        },
        {
            "funcName": "function_409300",
            "funcStartAddr": "409300",
            "funcEndAddr": "40931a",
            "decompiledFuncCode": "int64_t function_409300(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x409304\n    if (size != 0 != (mem == NULL)) {\n        // 0x409313\n        return (int64_t)mem;\n    }\n    // 0x409315\n    function_409550(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409320",
            "funcStartAddr": "409320",
            "funcEndAddr": "409341",
            "decompiledFuncCode": "int64_t function_409320(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x409323\n    int64_t v2 = v1; // 0x409323\n    if (v2 < 0) {\n        // 0x40933b\n        function_409550(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409339\n        return function_409300(v2);\n    }\n    // 0x40933b\n    function_409550(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409350",
            "funcStartAddr": "409350",
            "funcEndAddr": "409352",
            "decompiledFuncCode": "int64_t function_409350(void) {\n    // 0x409350\n    int64_t v1; // 0x409350\n    return function_409300(v1);\n}\n"
        },
        {
            "funcName": "function_409360",
            "funcStartAddr": "409360",
            "funcEndAddr": "409396",
            "decompiledFuncCode": "int64_t function_409360(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x409388\n        free(v1);\n        return (int32_t)&g141 ^ (int32_t)&g141;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x409371\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x409380\n        return (int64_t)mem;\n    }\n    // 0x409391\n    function_409550(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4093a0",
            "funcStartAddr": "4093a0",
            "funcEndAddr": "4093c1",
            "decompiledFuncCode": "int64_t function_4093a0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4093a3\n    int64_t v2 = v1; // 0x4093a3\n    if (v2 < 0) {\n        // 0x4093bb\n        function_409550(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4093b9\n        return function_409360(a1, v2);\n    }\n    // 0x4093bb\n    function_409550(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4093d0",
            "funcStartAddr": "4093d0",
            "funcEndAddr": "409456",
            "decompiledFuncCode": "int64_t function_4093d0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40942b\n            function_409550(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_409360(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x409413\n    if (a2 == 0) {\n        // 0x409438\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x409418\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40942b\n        function_409550(a1);\n        // UNREACHABLE\n    }\n    // 0x4093fa\n    *(int64_t *)a2 = v2;\n    return function_409360(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_409460",
            "funcStartAddr": "409460",
            "funcEndAddr": "4094b0",
            "decompiledFuncCode": "int64_t function_409460(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        if (a2 >= (int64_t *)0x5555555555555554) {\n            // 0x4094aa\n            function_409550(a1);\n            // UNREACHABLE\n        }\n        int64_t v2 = v1 + 1 + v1 / 2;\n        *a2 = v2;\n        return function_409360(a1, v2);\n    }\n    if (a2 == NULL) {\n        // 0x409495\n        *a2 = 128;\n        return function_409360(0, 128);\n    }\n    // 0x4094a8\n    if (a2 < NULL) {\n        // 0x4094aa\n        function_409550(a1);\n        // UNREACHABLE\n    }\n    // 0x409482\n    *a2 = v1;\n    return function_409360(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4094b0",
            "funcStartAddr": "4094b0",
            "funcEndAddr": "4094c7",
            "decompiledFuncCode": "int64_t function_4094b0(int64_t a1, int64_t a2) {\n    // 0x4094b0\n    return (int64_t)memset((int64_t *)function_409300(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4094d0",
            "funcStartAddr": "4094d0",
            "funcEndAddr": "4094fe",
            "decompiledFuncCode": "int64_t function_4094d0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4094d7\n    if ((int64_t)v1 < 0) {\n        // 0x4094f9\n        function_409550(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4094f9\n        function_409550(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4094ea\n    if (mem != NULL) {\n        // 0x4094f4\n        return (int64_t)mem;\n    }\n    // 0x4094f9\n    function_409550(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409500",
            "funcStartAddr": "409500",
            "funcEndAddr": "409528",
            "decompiledFuncCode": "int64_t function_409500(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409300(a2); // 0x40950f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_409530",
            "funcStartAddr": "409530",
            "funcEndAddr": "409543",
            "decompiledFuncCode": "int64_t function_409530(int64_t str) {\n    // 0x409530\n    return function_409500(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_409550",
            "funcStartAddr": "409550",
            "funcEndAddr": "409581",
            "decompiledFuncCode": "int64_t function_409550(int64_t a1) {\n    // 0x409550\n    error(g43, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409590",
            "funcStartAddr": "409590",
            "funcEndAddr": "409674",
            "decompiledFuncCode": "int64_t function_409590(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x409590\n    int64_t result2; // bp-64, 0x409590\n    int32_t v1 = function_4096b0(a1, 0, a2 & 0xffffffff, &result2, a5); // 0x4095bc\n    int32_t * v2; // 0x409590\n    int32_t * v3; // 0x409590\n    if (v1 != 0) {\n        int32_t * v4 = __errno_location(); // 0x40963a\n        v2 = v4;\n        if (v1 == 1) {\n            goto lab_0x4095e0;\n        } else {\n            // 0x409647\n            v3 = v4;\n            if (v1 == 3) {\n                // 0x40964c\n                *v4 = 0;\n                v3 = v4;\n            }\n            goto lab_0x4095e7;\n        }\n    } else {\n        int64_t result = result2; // 0x4095c0\n        if (result >= a3 && result <= a4) {\n            // 0x409620\n            return result;\n        }\n        int32_t * v5 = __errno_location(); // 0x4095cf\n        v2 = v5;\n        if (result < 0x40000000) {\n            int64_t v6 = result + 0x40000001; // 0x409658\n            *v5 = v6 == 0 | v6 < 0 != ((v6 ^ result) & (result ^ -0x8000000000000000)) < 0 ? 75 : 34;\n            v3 = v5;\n            goto lab_0x4095e7;\n        } else {\n            goto lab_0x4095e0;\n        }\n    }\n  lab_0x4095e0:\n    // 0x4095e0\n    *v2 = 75;\n    v3 = v2;\n    goto lab_0x4095e7;\n  lab_0x4095e7:;\n    int64_t v7 = function_408d30(a1); // 0x4095ea\n    int32_t v8 = *v3; // 0x4095ef\n    int32_t status = a7 == 0 ? 1 : a7; // 0x40960f\n    error(status, v8 == 22 ? 0 : v8, \"%s: %s\", (char *)a6, (char *)v7);\n    // 0x409620\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409680",
            "funcStartAddr": "409680",
            "funcEndAddr": "4096a1",
            "decompiledFuncCode": "int64_t function_409680(int64_t a1, int64_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x409680\n    int64_t result; // 0x409680\n    return result;\n}\n"
        },
        {
            "funcName": "function_4096b0",
            "funcStartAddr": "4096b0",
            "funcEndAddr": "409e00",
            "decompiledFuncCode": "int64_t function_4096b0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str) {\n    uint32_t v1 = (int32_t)a3; // 0x4096c2\n    if (v1 >= 37) {\n        // 0x409dd9\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoimax\");\n        return &g141;\n    }\n    // 0x4096cb\n    int64_t v2; // bp-64, 0x4096b0\n    int64_t v3 = a2 == 0 ? (int64_t)&v2 : (int64_t)a2; // 0x4096d8\n    int32_t * v4 = __errno_location(); // 0x4096e2\n    *v4 = 0;\n    char * v5 = (char *)a1;\n    int32_t v6 = __strtol_internal(v5, (char **)v3, v1, 0); // 0x4096fa\n    int64_t * v7 = (int64_t *)v3; // 0x4096ff\n    int64_t v8 = *v7; // 0x4096ff\n    int64_t v9; // 0x4096b0\n    int64_t v10; // 0x4096b0\n    int64_t v11; // 0x4096b0\n    char v12; // 0x4096b0\n    int64_t v13; // 0x4096b0\n    int64_t v14; // 0x4096b0\n    int64_t v15; // 0x4096b0\n    if (v8 == a1) {\n        // 0x409758\n        if (str == 0) {\n            // 0x40972e\n            return 4;\n        }\n        char c = *v5; // 0x409761\n        if (c == 0) {\n            // 0x40972e\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x40977f\n        v14 = 1;\n        v10 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x40972e\n            return 4;\n        }\n        goto lab_0x40978d;\n    } else {\n        int32_t v16 = *v4; // 0x40970a\n        int64_t v17 = 0; // 0x409710\n        if (v16 != 0) {\n            // 0x409740\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x40972e\n                return 4;\n            }\n        }\n        int64_t v18 = v6; // 0x4096fa\n        v13 = v18;\n        v9 = v17;\n        if (str == 0) {\n            goto lab_0x409727;\n        } else {\n            char c2 = *(char *)v8; // 0x40971a\n            v13 = v18;\n            v9 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x409827\n                v14 = v18;\n                v10 = v17;\n                v12 = c2;\n                v15 = v18;\n                v11 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40978d;\n                } else {\n                    goto lab_0x409835;\n                }\n            } else {\n                goto lab_0x409727;\n            }\n        }\n    }\n  lab_0x40978d:;\n    int64_t v19 = v10;\n    int64_t v20 = v14;\n    unsigned char v21 = v12 - 69;\n    int64_t v22 = 1024; // 0x409794\n    int64_t v23 = 1; // 0x409794\n    int64_t v24; // 0x4096b0\n    int64_t v25; // 0x4096b0\n    int64_t v26; // 0x4096b0\n    int64_t v27; // 0x4096b0\n    int64_t v28; // 0x4096b0\n    int64_t v29; // 0x4096b0\n    int64_t v30; // 0x4096b0\n    int64_t v31; // 0x4096b0\n    int64_t v32; // 0x4096b0\n    int64_t v33; // 0x4096b0\n    int64_t v34; // 0x4096b0\n    int64_t v35; // 0x4096b0\n    int64_t v36; // 0x4096b0\n    int64_t v37; // 0x4096b0\n    int64_t v38; // 0x4096b0\n    int64_t v39; // 0x4096b0\n    int64_t v40; // 0x4096b0\n    int64_t v41; // 0x4096b0\n    int64_t v42; // 0x4096b0\n    if (v21 < 48) {\n        // 0x4097c0\n        v22 = 1024;\n        v23 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4097a0;\n        } else {\n            // 0x4097d4\n            v22 = 1024;\n            v23 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x4097a0;\n            } else {\n                // 0x4097e6\n                v22 = 1000;\n                v23 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x4097a0;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v8 + 2); // 0x409dc2\n                        v22 = 1024;\n                        v23 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x4097a0;\n                    }\n                    default: {\n                        // 0x4097fb\n                        g145 = v21;\n                        v22 = 1000;\n                        v23 = 2;\n                        v15 = v20;\n                        v11 = v19;\n                        v25 = v20;\n                        v32 = 1;\n                        v24 = v19;\n                        v26 = 1024;\n                        v33 = 1;\n                        v37 = -0x20000000000000;\n                        v38 = 1;\n                        v27 = 1024;\n                        v34 = 1;\n                        v40 = -0x20000000000000;\n                        v28 = 1024;\n                        v35 = 1;\n                        v42 = -0x20000000000000;\n                        v29 = 1024;\n                        v36 = 1;\n                        v41 = -0x20000000000000;\n                        v30 = 1024;\n                        v31 = 1;\n                        v39 = -0x20000000000000;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x409a88;\n                            }\n                            case 70: {\n                                goto lab_0x409835;\n                            }\n                            case 71: {\n                                goto lab_0x409af0;\n                            }\n                            case 72: {\n                                goto lab_0x409835;\n                            }\n                            case 73: {\n                                goto lab_0x409835;\n                            }\n                            case 74: {\n                                goto lab_0x409835;\n                            }\n                            case 75: {\n                                goto lab_0x4098d5;\n                            }\n                            case 76: {\n                                goto lab_0x409835;\n                            }\n                            case 77: {\n                                goto lab_0x409918;\n                            }\n                            case 78: {\n                                goto lab_0x409835;\n                            }\n                            case 79: {\n                                goto lab_0x409835;\n                            }\n                            case 80: {\n                                goto lab_0x4099b8;\n                            }\n                            case 81: {\n                                goto lab_0x409835;\n                            }\n                            case 82: {\n                                goto lab_0x409835;\n                            }\n                            case 83: {\n                                goto lab_0x409835;\n                            }\n                            case 84: {\n                                goto lab_0x409a20;\n                            }\n                            case 85: {\n                                goto lab_0x409835;\n                            }\n                            case 86: {\n                                goto lab_0x409835;\n                            }\n                            case 87: {\n                                goto lab_0x409835;\n                            }\n                            case 88: {\n                                goto lab_0x409835;\n                            }\n                            case 89: {\n                                goto lab_0x409b58;\n                            }\n                            case 90: {\n                                goto lab_0x409bc0;\n                            }\n                            case 91: {\n                                goto lab_0x409835;\n                            }\n                            case 92: {\n                                goto lab_0x409835;\n                            }\n                            case 93: {\n                                goto lab_0x409835;\n                            }\n                            case 94: {\n                                goto lab_0x409835;\n                            }\n                            case 95: {\n                                goto lab_0x409835;\n                            }\n                            case 96: {\n                                goto lab_0x409835;\n                            }\n                            case 97: {\n                                goto lab_0x409835;\n                            }\n                            case 98: {\n                                goto lab_0x409985;\n                            }\n                            case 99: {\n                                goto lab_0x409878;\n                            }\n                            case 100: {\n                                goto lab_0x409835;\n                            }\n                            case 101: {\n                                goto lab_0x409835;\n                            }\n                            case 102: {\n                                goto lab_0x409835;\n                            }\n                            case 103: {\n                                goto lab_0x409af0;\n                            }\n                            case 104: {\n                                goto lab_0x409835;\n                            }\n                            case 105: {\n                                goto lab_0x409835;\n                            }\n                            case 106: {\n                                goto lab_0x409835;\n                            }\n                            case 107: {\n                                goto lab_0x4098d5;\n                            }\n                            case 108: {\n                                goto lab_0x409835;\n                            }\n                            case 109: {\n                                goto lab_0x409918;\n                            }\n                            case 110: {\n                                goto lab_0x409835;\n                            }\n                            case 111: {\n                                goto lab_0x409835;\n                            }\n                            case 112: {\n                                goto lab_0x409835;\n                            }\n                            case 113: {\n                                goto lab_0x409835;\n                            }\n                            case 114: {\n                                goto lab_0x409835;\n                            }\n                            case 115: {\n                                goto lab_0x409835;\n                            }\n                            case 116: {\n                                goto lab_0x409a20;\n                            }\n                            default: {\n                                goto lab_0x4097a0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4097a0;\n    }\n  lab_0x409727:\n    // 0x409727\n    *a4 = v13;\n    // 0x40972e\n    return v9 & 0xffffffff;\n  lab_0x4097a0:\n    // 0x4097a0\n    g144 = v12 - 66;\n    v15 = v20;\n    v11 = v19;\n    v25 = v20;\n    v32 = v23;\n    v24 = v19;\n    v38 = v23;\n    switch (v12) {\n        case 66: {\n            // 0x409871\n            v25 = 1024 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x409878;\n        }\n        case 69: {\n            // 0x409a70\n            v29 = v22;\n            v36 = v23;\n            v41 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x409a88;\n        }\n        case 71: {\n            goto lab_0x409af0;\n        }\n        case 75: {\n            goto lab_0x4098d5;\n        }\n        case 77: {\n            goto lab_0x409900;\n        }\n        case 80: {\n            // 0x4099a0\n            v27 = v22;\n            v34 = v23;\n            v40 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x4099b8;\n        }\n        case 84: {\n            goto lab_0x409a08;\n        }\n        case 89: {\n            // 0x409b40\n            goto lab_0x409b58;\n        }\n        case 90: {\n            // 0x409ba8\n            v30 = v22;\n            v31 = v23;\n            v39 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x409bc0;\n        }\n        case 98: {\n            goto lab_0x409985;\n        }\n        case 99: {\n            goto lab_0x409878;\n        }\n        case 103: {\n            goto lab_0x409af0;\n        }\n        case 107: {\n            goto lab_0x4098d5;\n        }\n        case 109: {\n            goto lab_0x409900;\n        }\n        case 116: {\n            goto lab_0x409a08;\n        }\n        case 119: {\n            // 0x4098b9\n            v25 = 2 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x409878;\n        }\n        default: {\n            goto lab_0x409835;\n        }\n    }\n    // 0x409ad8\n    goto lab_0x409af0;\n    // 0x4098c0\n    goto lab_0x4098d5;\n  lab_0x409900:\n    // 0x409900\n    v26 = v22;\n    v33 = v23;\n    v37 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x409918;\n  lab_0x409a08:\n    // 0x409a08\n    v28 = v22;\n    v35 = v23;\n    v42 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x409a20;\n  lab_0x409985:\n    // 0x409985\n    v25 = 512 * v20;\n    v32 = v38;\n    v24 = v19;\n    goto lab_0x409878;\n  lab_0x409878:;\n    int64_t v63 = v24;\n    int64_t v64 = v32 + v8; // 0x409878\n    *v7 = v64;\n    v13 = v25;\n    v9 = (*(char *)v64 != 0 ? v63 | 2 : v63) & 0xffffffff;\n    goto lab_0x409727;\n  lab_0x409835:\n    // 0x409835\n    *a4 = v15;\n    // 0x40972e\n    return (v11 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x409a88:;\n    uint64_t v65 = v29;\n    int64_t v66 = v20;\n    int64_t v67 = -0x8000000000000000; // 0x409ac1\n    int64_t v68 = 1; // 0x409ac1\n    if (v66 >= v41) {\n        // 0x409aa0\n        v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n        v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : 0;\n    }\n    int32_t v69 = 5; // 0x409ab5\n    int32_t v70 = v69; // 0x409ab8\n    int64_t v71 = v68; // 0x409ab8\n    int64_t v59 = v67; // 0x409ab8\n    int64_t v61 = v36; // 0x409ab8\n    int64_t v62 = v68; // 0x409ab8\n    while (v69 != 0) {\n        // 0x409abe\n        v66 = v67;\n        v67 = -0x8000000000000000;\n        v68 = 1;\n        if (v66 >= v41) {\n            // 0x409aa0\n            v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n            v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : v71;\n        }\n        // 0x409ab5\n        v69 = v70 - 1;\n        v70 = v69;\n        v71 = v68;\n        v59 = v67;\n        v61 = v36;\n        v62 = v68;\n    }\n    goto lab_0x409cf0;\n  lab_0x409af0:\n    // 0x409af0\n    while (true) {\n        // 0x409b26\n        int32_t v44; // 0x4096b0\n        int32_t v45 = v44;\n        int64_t v46; // 0x4096b0\n        int64_t v47 = v46;\n        int64_t v48 = -0x8000000000000000; // 0x409b29\n        int64_t v49 = 1; // 0x409b29\n        int64_t v50; // 0x4096b0\n        uint64_t v51; // 0x4096b0\n        if (v47 >= v51) {\n            int64_t v52 = v50;\n            uint64_t v53; // 0x4096b0\n            int64_t v54 = v47 > 0x7fffffffffffffff / v53 ? 0x7fffffffffffffff : v47 * v53;\n            int64_t v55 = v47 > 0x7fffffffffffffff / v53 ? 1 : v52;\n            v48 = v54;\n            v49 = v55;\n        }\n        int64_t v56 = v49;\n        int64_t v57 = v48;\n        int32_t v58 = v45 - 1; // 0x409b1d\n        v46 = v57;\n        v44 = v58;\n        v50 = v56;\n        v59 = v57;\n        int64_t v60; // 0x4096b0\n        v61 = v60;\n        v62 = v56;\n        if (v58 == 0) {\n            // break -> 0x409cf0\n            break;\n        }\n    }\n    goto lab_0x409cf0;\n  lab_0x4098d5:;\n    int64_t v76 = 1;\n    v25 = -0x8000000000000000;\n    v32 = v76;\n    v24 = 1;\n    int64_t v73; // 0x4096b0\n    int64_t v74; // 0x4096b0\n    int64_t v75; // 0x4096b0\n    int64_t v72; // 0x4096b0\n    if (v20 < -0x20000000000000) {\n        goto lab_0x409878;\n    } else {\n        int64_t v77 = 1024;\n        v73 = 0x7fffffffffffffff / v77;\n        v75 = v77;\n        v74 = v20;\n        v72 = v76;\n        goto lab_0x4098ec;\n    }\n  lab_0x409918:\n    // 0x409918\n    v25 = -0x8000000000000000;\n    v32 = v33;\n    v24 = 1;\n    if (v20 < v37) {\n        goto lab_0x409878;\n    } else {\n        int64_t v78 = 0x7fffffffffffffff / v26;\n        v25 = 0x7fffffffffffffff;\n        v32 = v33;\n        v24 = 1;\n        if (v20 > v78) {\n            goto lab_0x409878;\n        } else {\n            int64_t v79 = v26 * v20; // 0x409938\n            v25 = -0x8000000000000000;\n            v32 = v33;\n            v24 = 1;\n            v73 = v78;\n            v75 = v26;\n            v74 = v79;\n            v72 = v33;\n            if (v79 < v37) {\n                goto lab_0x409878;\n            } else {\n                goto lab_0x4098ec;\n            }\n        }\n    }\n  lab_0x4099b8:;\n    uint64_t v80 = v27;\n    int64_t v81 = v20;\n    int64_t v82 = -0x8000000000000000; // 0x4099f1\n    int64_t v83 = 1; // 0x4099f1\n    if (v40 <= v81) {\n        // 0x4099d0\n        v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n        v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : 0;\n    }\n    int32_t v84 = 4; // 0x4099e5\n    int32_t v85 = v84; // 0x4099e8\n    int64_t v86 = v83; // 0x4099e8\n    v59 = v82;\n    v61 = v34;\n    v62 = v83;\n    while (v84 != 0) {\n        // 0x4099ee\n        v81 = v82;\n        v82 = -0x8000000000000000;\n        v83 = 1;\n        if (v40 <= v81) {\n            // 0x4099d0\n            v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n            v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : v86;\n        }\n        // 0x4099e5\n        v84 = v85 - 1;\n        v85 = v84;\n        v86 = v83;\n        v59 = v82;\n        v61 = v34;\n        v62 = v83;\n    }\n    goto lab_0x409cf0;\n  lab_0x409a20:;\n    uint64_t v87 = v28;\n    int64_t v88 = v20;\n    int64_t v89 = -0x8000000000000000; // 0x409a59\n    int64_t v90 = 1; // 0x409a59\n    if (v42 <= v88) {\n        // 0x409a38\n        v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n        v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : 0;\n    }\n    int32_t v91 = 3; // 0x409a4d\n    int32_t v92 = v91; // 0x409a50\n    int64_t v93 = v90; // 0x409a50\n    v59 = v89;\n    v61 = v35;\n    v62 = v90;\n    while (v91 != 0) {\n        // 0x409a56\n        v88 = v89;\n        v89 = -0x8000000000000000;\n        v90 = 1;\n        if (v42 <= v88) {\n            // 0x409a38\n            v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n            v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : v93;\n        }\n        // 0x409a4d\n        v91 = v92 - 1;\n        v92 = v91;\n        v93 = v90;\n        v59 = v89;\n        v61 = v35;\n        v62 = v90;\n    }\n    goto lab_0x409cf0;\n  lab_0x409b58:\n    // 0x409b58\n    while (true) {\n        // 0x409b8e\n        int32_t v94; // 0x4096b0\n        int32_t v95 = v94;\n        int64_t v96; // 0x4096b0\n        int64_t v97 = v96;\n        int64_t v98 = -0x8000000000000000; // 0x409b91\n        int64_t v99 = 1; // 0x409b91\n        int64_t v100; // 0x4096b0\n        uint64_t v101; // 0x4096b0\n        if (v101 <= v97) {\n            int64_t v102 = v100;\n            uint64_t v103; // 0x4096b0\n            int64_t v104 = v97 > 0x7fffffffffffffff / v103 ? 0x7fffffffffffffff : v97 * v103;\n            int64_t v105 = v97 > 0x7fffffffffffffff / v103 ? 1 : v102;\n            v98 = v104;\n            v99 = v105;\n        }\n        int64_t v106 = v99;\n        int64_t v107 = v98;\n        int32_t v108 = v95 - 1; // 0x409b85\n        v96 = v107;\n        v94 = v108;\n        v100 = v106;\n        v59 = v107;\n        int64_t v109; // 0x4096b0\n        v61 = v109;\n        v62 = v106;\n        if (v108 == 0) {\n            // break -> 0x409cf0\n            break;\n        }\n    }\n    goto lab_0x409cf0;\n  lab_0x409bc0:;\n    uint64_t v110 = v30;\n    int64_t v111 = v20;\n    int64_t v112 = -0x8000000000000000; // 0x409bf9\n    int64_t v113 = 1; // 0x409bf9\n    if (v39 <= v111) {\n        // 0x409bd8\n        v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n        v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : 0;\n    }\n    int32_t v114 = 6; // 0x409bed\n    int32_t v115 = v114; // 0x409bf0\n    int64_t v116 = v113; // 0x409bf0\n    v59 = v112;\n    v61 = v31;\n    v62 = v113;\n    while (v114 != 0) {\n        // 0x409bf6\n        v111 = v112;\n        v112 = -0x8000000000000000;\n        v113 = 1;\n        if (v39 <= v111) {\n            // 0x409bd8\n            v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n            v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : v116;\n        }\n        // 0x409bed\n        v114 = v115 - 1;\n        v115 = v114;\n        v116 = v113;\n        v59 = v112;\n        v61 = v31;\n        v62 = v113;\n    }\n    goto lab_0x409cf0;\n  lab_0x409cf0:\n    // 0x409cf0\n    v25 = v59;\n    v32 = v61;\n    v24 = (v62 | v19) & 0xffffffff;\n    goto lab_0x409878;\n  lab_0x4098ec:\n    // 0x4098ec\n    v25 = 0x7fffffffffffffff;\n    v32 = v72;\n    v24 = 1;\n    if (v73 >= v74) {\n        // 0x4098f5\n        v25 = v74 * v75;\n        v32 = v72;\n        v24 = v19;\n    }\n    goto lab_0x409878;\n}\n"
        },
        {
            "funcName": "function_409e00",
            "funcStartAddr": "409e00",
            "funcEndAddr": "40a550",
            "decompiledFuncCode": "int64_t function_409e00(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2) {\n    uint32_t base = (int32_t)a3; // 0x409e12\n    if (base >= 37) {\n        // 0x40a529\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtol\");\n        return &g141;\n    }\n    // 0x409e1b\n    int64_t v1; // bp-64, 0x409e00\n    int64_t endptr = a2 == 0 ? (int64_t)&v1 : (int64_t)a2; // 0x409e28\n    int32_t * v2 = __errno_location(); // 0x409e32\n    *v2 = 0;\n    char * str = (char *)a1;\n    int32_t str_as_l = strtol(str, (char **)endptr, base); // 0x409e48\n    int64_t * v3 = (int64_t *)endptr; // 0x409e4d\n    int64_t v4 = *v3; // 0x409e4d\n    int64_t v5; // 0x409e00\n    int64_t v6; // 0x409e00\n    int64_t v7; // 0x409e00\n    char v8; // 0x409e00\n    int64_t v9; // 0x409e00\n    int64_t v10; // 0x409e00\n    int64_t v11; // 0x409e00\n    if (v4 == a1) {\n        // 0x409ea8\n        if (str2 == NULL) {\n            // 0x409e7c\n            return 4;\n        }\n        char c = *str; // 0x409eb1\n        if (c == 0) {\n            // 0x409e7c\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x409ecf\n        v10 = 1;\n        v6 = 0;\n        v8 = c;\n        if (found_char_pos == NULL) {\n            // 0x409e7c\n            return 4;\n        }\n        goto lab_0x409edd;\n    } else {\n        int32_t v12 = *v2; // 0x409e58\n        int64_t v13 = 0; // 0x409e5e\n        if (v12 != 0) {\n            // 0x409e90\n            v13 = 1;\n            if (v12 != 34) {\n                // 0x409e7c\n                return 4;\n            }\n        }\n        int64_t v14 = str_as_l; // 0x409e48\n        v9 = v14;\n        v5 = v13;\n        if (str2 == NULL) {\n            goto lab_0x409e75;\n        } else {\n            char c2 = *(char *)v4; // 0x409e68\n            v9 = v14;\n            v5 = v13;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x409f77\n                v10 = v14;\n                v6 = v13;\n                v8 = c2;\n                v11 = v14;\n                v7 = v13;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x409edd;\n                } else {\n                    goto lab_0x409f85;\n                }\n            } else {\n                goto lab_0x409e75;\n            }\n        }\n    }\n  lab_0x409edd:;\n    int64_t v15 = v6;\n    int64_t v16 = v10;\n    unsigned char v17 = v8 - 69;\n    int64_t v18 = 1024; // 0x409ee4\n    int64_t v19 = 1; // 0x409ee4\n    int64_t v20; // 0x409e00\n    int64_t v21; // 0x409e00\n    int64_t v22; // 0x409e00\n    int64_t v23; // 0x409e00\n    int64_t v24; // 0x409e00\n    int64_t v25; // 0x409e00\n    int64_t v26; // 0x409e00\n    int64_t v27; // 0x409e00\n    int64_t v28; // 0x409e00\n    int64_t v29; // 0x409e00\n    int64_t v30; // 0x409e00\n    int64_t v31; // 0x409e00\n    int64_t v32; // 0x409e00\n    int64_t v33; // 0x409e00\n    int64_t v34; // 0x409e00\n    int64_t v35; // 0x409e00\n    int64_t v36; // 0x409e00\n    int64_t v37; // 0x409e00\n    int64_t v38; // 0x409e00\n    if (v17 < 48) {\n        // 0x409f10\n        v18 = 1024;\n        v19 = 1;\n        if ((1 << (int64_t)((v8 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x409ef0;\n        } else {\n            // 0x409f24\n            v18 = 1024;\n            v19 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x409ef0;\n            } else {\n                // 0x409f36\n                v18 = 1000;\n                v19 = 2;\n                switch (*(char *)(v4 + 1)) {\n                    case 68: {\n                        goto lab_0x409ef0;\n                    }\n                    case 105: {\n                        char v39 = *(char *)(v4 + 2); // 0x40a512\n                        v18 = 1024;\n                        v19 = (v39 == 66 ? 2 : 1) + (int64_t)(v39 == 66);\n                        goto lab_0x409ef0;\n                    }\n                    default: {\n                        // 0x409f4b\n                        g147 = v17;\n                        v18 = 1000;\n                        v19 = 2;\n                        v11 = v16;\n                        v7 = v15;\n                        v21 = v16;\n                        v28 = 1;\n                        v20 = v15;\n                        v22 = 1024;\n                        v29 = 1;\n                        v33 = -0x20000000000000;\n                        v34 = 1;\n                        v23 = 1024;\n                        v30 = 1;\n                        v36 = -0x20000000000000;\n                        v24 = 1024;\n                        v31 = 1;\n                        v38 = -0x20000000000000;\n                        v25 = 1024;\n                        v32 = 1;\n                        v37 = -0x20000000000000;\n                        v26 = 1024;\n                        v27 = 1;\n                        v35 = -0x20000000000000;\n                        switch (v8) {\n                            case 69: {\n                                goto lab_0x40a1d8;\n                            }\n                            case 70: {\n                                goto lab_0x409f85;\n                            }\n                            case 71: {\n                                goto lab_0x40a240;\n                            }\n                            case 72: {\n                                goto lab_0x409f85;\n                            }\n                            case 73: {\n                                goto lab_0x409f85;\n                            }\n                            case 74: {\n                                goto lab_0x409f85;\n                            }\n                            case 75: {\n                                goto lab_0x40a025;\n                            }\n                            case 76: {\n                                goto lab_0x409f85;\n                            }\n                            case 77: {\n                                goto lab_0x40a068;\n                            }\n                            case 78: {\n                                goto lab_0x409f85;\n                            }\n                            case 79: {\n                                goto lab_0x409f85;\n                            }\n                            case 80: {\n                                goto lab_0x40a108;\n                            }\n                            case 81: {\n                                goto lab_0x409f85;\n                            }\n                            case 82: {\n                                goto lab_0x409f85;\n                            }\n                            case 83: {\n                                goto lab_0x409f85;\n                            }\n                            case 84: {\n                                goto lab_0x40a170;\n                            }\n                            case 85: {\n                                goto lab_0x409f85;\n                            }\n                            case 86: {\n                                goto lab_0x409f85;\n                            }\n                            case 87: {\n                                goto lab_0x409f85;\n                            }\n                            case 88: {\n                                goto lab_0x409f85;\n                            }\n                            case 89: {\n                                goto lab_0x40a2a8;\n                            }\n                            case 90: {\n                                goto lab_0x40a310;\n                            }\n                            case 91: {\n                                goto lab_0x409f85;\n                            }\n                            case 92: {\n                                goto lab_0x409f85;\n                            }\n                            case 93: {\n                                goto lab_0x409f85;\n                            }\n                            case 94: {\n                                goto lab_0x409f85;\n                            }\n                            case 95: {\n                                goto lab_0x409f85;\n                            }\n                            case 96: {\n                                goto lab_0x409f85;\n                            }\n                            case 97: {\n                                goto lab_0x409f85;\n                            }\n                            case 98: {\n                                goto lab_0x40a0d5;\n                            }\n                            case 99: {\n                                goto lab_0x409fc8;\n                            }\n                            case 100: {\n                                goto lab_0x409f85;\n                            }\n                            case 101: {\n                                goto lab_0x409f85;\n                            }\n                            case 102: {\n                                goto lab_0x409f85;\n                            }\n                            case 103: {\n                                goto lab_0x40a240;\n                            }\n                            case 104: {\n                                goto lab_0x409f85;\n                            }\n                            case 105: {\n                                goto lab_0x409f85;\n                            }\n                            case 106: {\n                                goto lab_0x409f85;\n                            }\n                            case 107: {\n                                goto lab_0x40a025;\n                            }\n                            case 108: {\n                                goto lab_0x409f85;\n                            }\n                            case 109: {\n                                goto lab_0x40a068;\n                            }\n                            case 110: {\n                                goto lab_0x409f85;\n                            }\n                            case 111: {\n                                goto lab_0x409f85;\n                            }\n                            case 112: {\n                                goto lab_0x409f85;\n                            }\n                            case 113: {\n                                goto lab_0x409f85;\n                            }\n                            case 114: {\n                                goto lab_0x409f85;\n                            }\n                            case 115: {\n                                goto lab_0x409f85;\n                            }\n                            case 116: {\n                                goto lab_0x40a170;\n                            }\n                            default: {\n                                goto lab_0x409ef0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x409ef0;\n    }\n  lab_0x409e75:\n    // 0x409e75\n    *a4 = v9;\n    // 0x409e7c\n    return v5 & 0xffffffff;\n  lab_0x409ef0:\n    // 0x409ef0\n    g146 = v8 - 66;\n    v11 = v16;\n    v7 = v15;\n    v21 = v16;\n    v28 = v19;\n    v20 = v15;\n    v34 = v19;\n    switch (v8) {\n        case 66: {\n            // 0x409fc1\n            v21 = 1024 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x409fc8;\n        }\n        case 69: {\n            // 0x40a1c0\n            v25 = v18;\n            v32 = v19;\n            v37 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x40a1d8;\n        }\n        case 71: {\n            goto lab_0x40a240;\n        }\n        case 75: {\n            goto lab_0x40a025;\n        }\n        case 77: {\n            goto lab_0x40a050;\n        }\n        case 80: {\n            // 0x40a0f0\n            v23 = v18;\n            v30 = v19;\n            v36 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x40a108;\n        }\n        case 84: {\n            goto lab_0x40a158;\n        }\n        case 89: {\n            // 0x40a290\n            goto lab_0x40a2a8;\n        }\n        case 90: {\n            // 0x40a2f8\n            v26 = v18;\n            v27 = v19;\n            v35 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x40a310;\n        }\n        case 98: {\n            goto lab_0x40a0d5;\n        }\n        case 99: {\n            goto lab_0x409fc8;\n        }\n        case 103: {\n            goto lab_0x40a240;\n        }\n        case 107: {\n            goto lab_0x40a025;\n        }\n        case 109: {\n            goto lab_0x40a050;\n        }\n        case 116: {\n            goto lab_0x40a158;\n        }\n        case 119: {\n            // 0x40a009\n            v21 = 2 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x409fc8;\n        }\n        default: {\n            goto lab_0x409f85;\n        }\n    }\n    // 0x40a228\n    goto lab_0x40a240;\n    // 0x40a010\n    goto lab_0x40a025;\n  lab_0x40a050:\n    // 0x40a050\n    v22 = v18;\n    v29 = v19;\n    v33 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x40a068;\n  lab_0x40a158:\n    // 0x40a158\n    v24 = v18;\n    v31 = v19;\n    v38 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x40a170;\n  lab_0x40a0d5:\n    // 0x40a0d5\n    v21 = 512 * v16;\n    v28 = v34;\n    v20 = v15;\n    goto lab_0x409fc8;\n  lab_0x409fc8:;\n    int64_t v59 = v20;\n    int64_t v60 = v28 + v4; // 0x409fc8\n    *v3 = v60;\n    v9 = v21;\n    v5 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x409e75;\n  lab_0x409f85:\n    // 0x409f85\n    *a4 = v11;\n    // 0x409e7c\n    return (v7 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x40a1d8:;\n    uint64_t v61 = v25;\n    int64_t v62 = v16;\n    int64_t v63 = -0x8000000000000000; // 0x40a211\n    int64_t v64 = 1; // 0x40a211\n    if (v62 >= v37) {\n        // 0x40a1f0\n        v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n        v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : 0;\n    }\n    int32_t v65 = 5; // 0x40a205\n    int32_t v66 = v65; // 0x40a208\n    int64_t v67 = v64; // 0x40a208\n    int64_t v55 = v63; // 0x40a208\n    int64_t v57 = v32; // 0x40a208\n    int64_t v58 = v64; // 0x40a208\n    while (v65 != 0) {\n        // 0x40a20e\n        v62 = v63;\n        v63 = -0x8000000000000000;\n        v64 = 1;\n        if (v62 >= v37) {\n            // 0x40a1f0\n            v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n            v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : v67;\n        }\n        // 0x40a205\n        v65 = v66 - 1;\n        v66 = v65;\n        v67 = v64;\n        v55 = v63;\n        v57 = v32;\n        v58 = v64;\n    }\n    goto lab_0x40a440;\n  lab_0x40a240:\n    // 0x40a240\n    while (true) {\n        // 0x40a276\n        int32_t v40; // 0x409e00\n        int32_t v41 = v40;\n        int64_t v42; // 0x409e00\n        int64_t v43 = v42;\n        int64_t v44 = -0x8000000000000000; // 0x40a279\n        int64_t v45 = 1; // 0x40a279\n        int64_t v46; // 0x409e00\n        uint64_t v47; // 0x409e00\n        if (v43 >= v47) {\n            int64_t v48 = v46;\n            uint64_t v49; // 0x409e00\n            int64_t v50 = v43 > 0x7fffffffffffffff / v49 ? 0x7fffffffffffffff : v43 * v49;\n            int64_t v51 = v43 > 0x7fffffffffffffff / v49 ? 1 : v48;\n            v44 = v50;\n            v45 = v51;\n        }\n        int64_t v52 = v45;\n        int64_t v53 = v44;\n        int32_t v54 = v41 - 1; // 0x40a26d\n        v42 = v53;\n        v40 = v54;\n        v46 = v52;\n        v55 = v53;\n        int64_t v56; // 0x409e00\n        v57 = v56;\n        v58 = v52;\n        if (v54 == 0) {\n            // break -> 0x40a440\n            break;\n        }\n    }\n    goto lab_0x40a440;\n  lab_0x40a025:;\n    int64_t v72 = 1;\n    v21 = -0x8000000000000000;\n    v28 = v72;\n    v20 = 1;\n    int64_t v69; // 0x409e00\n    int64_t v70; // 0x409e00\n    int64_t v71; // 0x409e00\n    int64_t v68; // 0x409e00\n    if (v16 < -0x20000000000000) {\n        goto lab_0x409fc8;\n    } else {\n        int64_t v73 = 1024;\n        v69 = 0x7fffffffffffffff / v73;\n        v71 = v73;\n        v70 = v16;\n        v68 = v72;\n        goto lab_0x40a03c;\n    }\n  lab_0x40a068:\n    // 0x40a068\n    v21 = -0x8000000000000000;\n    v28 = v29;\n    v20 = 1;\n    if (v16 < v33) {\n        goto lab_0x409fc8;\n    } else {\n        int64_t v74 = 0x7fffffffffffffff / v22;\n        v21 = 0x7fffffffffffffff;\n        v28 = v29;\n        v20 = 1;\n        if (v16 > v74) {\n            goto lab_0x409fc8;\n        } else {\n            int64_t v75 = v22 * v16; // 0x40a088\n            v21 = -0x8000000000000000;\n            v28 = v29;\n            v20 = 1;\n            v69 = v74;\n            v71 = v22;\n            v70 = v75;\n            v68 = v29;\n            if (v75 < v33) {\n                goto lab_0x409fc8;\n            } else {\n                goto lab_0x40a03c;\n            }\n        }\n    }\n  lab_0x40a108:;\n    uint64_t v76 = v23;\n    int64_t v77 = v16;\n    int64_t v78 = -0x8000000000000000; // 0x40a141\n    int64_t v79 = 1; // 0x40a141\n    if (v36 <= v77) {\n        // 0x40a120\n        v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n        v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : 0;\n    }\n    int32_t v80 = 4; // 0x40a135\n    int32_t v81 = v80; // 0x40a138\n    int64_t v82 = v79; // 0x40a138\n    v55 = v78;\n    v57 = v30;\n    v58 = v79;\n    while (v80 != 0) {\n        // 0x40a13e\n        v77 = v78;\n        v78 = -0x8000000000000000;\n        v79 = 1;\n        if (v36 <= v77) {\n            // 0x40a120\n            v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n            v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : v82;\n        }\n        // 0x40a135\n        v80 = v81 - 1;\n        v81 = v80;\n        v82 = v79;\n        v55 = v78;\n        v57 = v30;\n        v58 = v79;\n    }\n    goto lab_0x40a440;\n  lab_0x40a170:;\n    uint64_t v83 = v24;\n    int64_t v84 = v16;\n    int64_t v85 = -0x8000000000000000; // 0x40a1a9\n    int64_t v86 = 1; // 0x40a1a9\n    if (v38 <= v84) {\n        // 0x40a188\n        v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n        v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : 0;\n    }\n    int32_t v87 = 3; // 0x40a19d\n    int32_t v88 = v87; // 0x40a1a0\n    int64_t v89 = v86; // 0x40a1a0\n    v55 = v85;\n    v57 = v31;\n    v58 = v86;\n    while (v87 != 0) {\n        // 0x40a1a6\n        v84 = v85;\n        v85 = -0x8000000000000000;\n        v86 = 1;\n        if (v38 <= v84) {\n            // 0x40a188\n            v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n            v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : v89;\n        }\n        // 0x40a19d\n        v87 = v88 - 1;\n        v88 = v87;\n        v89 = v86;\n        v55 = v85;\n        v57 = v31;\n        v58 = v86;\n    }\n    goto lab_0x40a440;\n  lab_0x40a2a8:\n    // 0x40a2a8\n    while (true) {\n        // 0x40a2de\n        int32_t v90; // 0x409e00\n        int32_t v91 = v90;\n        int64_t v92; // 0x409e00\n        int64_t v93 = v92;\n        int64_t v94 = -0x8000000000000000; // 0x40a2e1\n        int64_t v95 = 1; // 0x40a2e1\n        int64_t v96; // 0x409e00\n        uint64_t v97; // 0x409e00\n        if (v97 <= v93) {\n            int64_t v98 = v96;\n            uint64_t v99; // 0x409e00\n            int64_t v100 = v93 > 0x7fffffffffffffff / v99 ? 0x7fffffffffffffff : v93 * v99;\n            int64_t v101 = v93 > 0x7fffffffffffffff / v99 ? 1 : v98;\n            v94 = v100;\n            v95 = v101;\n        }\n        int64_t v102 = v95;\n        int64_t v103 = v94;\n        int32_t v104 = v91 - 1; // 0x40a2d5\n        v92 = v103;\n        v90 = v104;\n        v96 = v102;\n        v55 = v103;\n        int64_t v105; // 0x409e00\n        v57 = v105;\n        v58 = v102;\n        if (v104 == 0) {\n            // break -> 0x40a440\n            break;\n        }\n    }\n    goto lab_0x40a440;\n  lab_0x40a310:;\n    uint64_t v106 = v26;\n    int64_t v107 = v16;\n    int64_t v108 = -0x8000000000000000; // 0x40a349\n    int64_t v109 = 1; // 0x40a349\n    if (v35 <= v107) {\n        // 0x40a328\n        v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n        v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : 0;\n    }\n    int32_t v110 = 6; // 0x40a33d\n    int32_t v111 = v110; // 0x40a340\n    int64_t v112 = v109; // 0x40a340\n    v55 = v108;\n    v57 = v27;\n    v58 = v109;\n    while (v110 != 0) {\n        // 0x40a346\n        v107 = v108;\n        v108 = -0x8000000000000000;\n        v109 = 1;\n        if (v35 <= v107) {\n            // 0x40a328\n            v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n            v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : v112;\n        }\n        // 0x40a33d\n        v110 = v111 - 1;\n        v111 = v110;\n        v112 = v109;\n        v55 = v108;\n        v57 = v27;\n        v58 = v109;\n    }\n    goto lab_0x40a440;\n  lab_0x40a440:\n    // 0x40a440\n    v21 = v55;\n    v28 = v57;\n    v20 = (v58 | v15) & 0xffffffff;\n    goto lab_0x409fc8;\n  lab_0x40a03c:\n    // 0x40a03c\n    v21 = 0x7fffffffffffffff;\n    v28 = v68;\n    v20 = 1;\n    if (v69 >= v70) {\n        // 0x40a045\n        v21 = v70 * v71;\n        v28 = v68;\n        v20 = v15;\n    }\n    goto lab_0x409fc8;\n}\n"
        },
        {
            "funcName": "function_40a550",
            "funcStartAddr": "40a550",
            "funcEndAddr": "40a5d1",
            "decompiledFuncCode": "int64_t function_40a550(int64_t a1, int64_t a2, int64_t a3, char (**a4)[6], int64_t a5) {\n    int64_t v1 = *(int64_t *)((8 * a1 + 0x7fffffff8 & 0x7fffffff8) + (int64_t)&g13); // 0x40a572\n    error(g43, 0, dcgettext(NULL, (char *)v1, 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a5e0",
            "funcStartAddr": "40a5e0",
            "funcEndAddr": "40aa20",
            "decompiledFuncCode": "int64_t function_40a5e0(int64_t a1, int64_t * a2, int64_t a3, int64_t * a4, int64_t * str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x40a5ee\n    if (v1 >= 37) {\n        // 0x40a9fb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g141;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x40a612\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x40a642\n    int64_t v4 = a1; // 0x40a647\n    char v5 = c; // 0x40a647\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x40a63c\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x40a638\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x40a649\n    if (v5 == 45) {\n        // 0x40a685\n        return 4;\n    }\n    // 0x40a64e\n    int64_t v7; // bp-64, 0x40a5e0\n    int64_t * v8 = a2 == NULL ? &v7 : a2;\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x40a656\n    int64_t v10 = *v8; // 0x40a65b\n    char v11; // 0x40a5e0\n    int64_t v12; // 0x40a5e0\n    int64_t v13; // 0x40a5e0\n    int64_t v14; // 0x40a5e0\n    int64_t v15; // 0x40a5e0\n    int64_t v16; // 0x40a5e0\n    int64_t v17; // 0x40a5e0\n    if (v10 == a1) {\n        // 0x40a6b8\n        if (c == 0 || str == NULL) {\n            // 0x40a685\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x40a6d9\n        v16 = 1;\n        v13 = 0;\n        v11 = c;\n        if (found_char_pos == NULL) {\n            // 0x40a685\n            return 4;\n        }\n        goto lab_0x40a6e7;\n    } else {\n        int32_t v18 = *v2; // 0x40a666\n        int64_t v19 = 0; // 0x40a66c\n        if (v18 != 0) {\n            // 0x40a6a0\n            v19 = 1;\n            if (v18 != 34) {\n                // 0x40a685\n                return 4;\n            }\n        }\n        int64_t v20 = v9; // 0x40a656\n        v15 = v20;\n        v12 = v19;\n        if (str == NULL) {\n            goto lab_0x40a682;\n        } else {\n            char c2 = *(char *)v10; // 0x40a675\n            v15 = v20;\n            v12 = v19;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x40a7e3\n                v16 = v20;\n                v13 = v19;\n                v11 = c2;\n                v17 = v20;\n                v14 = v19;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40a6e7;\n                } else {\n                    goto lab_0x40a7f5;\n                }\n            } else {\n                goto lab_0x40a682;\n            }\n        }\n    }\n  lab_0x40a6e7:;\n    unsigned char v21 = v11 - 69;\n    int64_t v22 = 1024; // 0x40a6ef\n    int64_t v23 = 1; // 0x40a6ef\n    int64_t v24; // 0x40a5e0\n    int64_t v25; // 0x40a5e0\n    int64_t v26; // 0x40a5e0\n    int64_t v27; // 0x40a5e0\n    int64_t v28; // 0x40a5e0\n    int64_t v29; // 0x40a5e0\n    int64_t v30; // 0x40a5e0\n    int64_t v31; // 0x40a5e0\n    int64_t v32; // 0x40a5e0\n    int64_t v33; // 0x40a5e0\n    int64_t v34; // 0x40a5e0\n    int64_t v35; // 0x40a5e0\n    int64_t v36; // 0x40a5e0\n    int64_t v37; // 0x40a5e0\n    int64_t v38; // 0x40a5e0\n    int64_t v39; // 0x40a5e0\n    int64_t v40; // 0x40a5e0\n    int64_t v41; // 0x40a5e0\n    int64_t v42; // 0x40a5e0\n    int64_t v43; // 0x40a5e0\n    if (v21 < 48) {\n        // 0x40a6f1\n        v22 = 1024;\n        v23 = 1;\n        if ((1 << (int64_t)((v11 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40a75a;\n        } else {\n            // 0x40a704\n            v22 = 1024;\n            v23 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x40a75a;\n            } else {\n                // 0x40a720\n                v22 = 1000;\n                v23 = 2;\n                switch (*(char *)(v10 + 1)) {\n                    case 68: {\n                        goto lab_0x40a75a;\n                    }\n                    case 105: {\n                        char v44 = *(char *)(v10 + 2); // 0x40a989\n                        v22 = 1024;\n                        v23 = (v44 == 66 ? 2 : 1) + (int64_t)(v44 == 66);\n                        goto lab_0x40a75a;\n                    }\n                    default: {\n                        // 0x40a735\n                        g148 = v21;\n                        v22 = 1000;\n                        v23 = 2;\n                        v26 = 1024;\n                        v38 = 1;\n                        v25 = v16;\n                        v24 = v13;\n                        v39 = 1;\n                        v27 = 1024;\n                        v40 = 1;\n                        v17 = v16;\n                        v14 = v13;\n                        v41 = 1;\n                        v28 = 1024;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        switch (v11) {\n                            case 69: {\n                                goto lab_0x40a8fb;\n                            }\n                            case 70: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 71: {\n                                goto lab_0x40a933;\n                            }\n                            case 72: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 73: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 74: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 75: {\n                                goto lab_0x40a7bc;\n                            }\n                            case 76: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 77: {\n                                goto lab_0x40a77e;\n                            }\n                            case 78: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 79: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 80: {\n                                goto lab_0x40a8c8;\n                            }\n                            case 81: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 82: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 83: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 84: {\n                                goto lab_0x40a898;\n                            }\n                            case 85: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 86: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 87: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 88: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 89: {\n                                goto lab_0x40a866;\n                            }\n                            case 90: {\n                                goto lab_0x40a82b;\n                            }\n                            case 91: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 92: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 93: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 94: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 95: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 96: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 97: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 98: {\n                                goto lab_0x40a80f;\n                            }\n                            case 99: {\n                                goto lab_0x40a798;\n                            }\n                            case 100: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 101: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 102: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 103: {\n                                goto lab_0x40a933;\n                            }\n                            case 104: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 105: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 106: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 107: {\n                                goto lab_0x40a7bc;\n                            }\n                            case 108: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 109: {\n                                goto lab_0x40a77e;\n                            }\n                            case 110: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 111: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 112: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 113: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 114: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 115: {\n                                goto lab_0x40a7f5;\n                            }\n                            case 116: {\n                                goto lab_0x40a898;\n                            }\n                            default: {\n                                goto lab_0x40a75a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40a75a;\n    }\n  lab_0x40a682:\n    // 0x40a682\n    *a4 = v15;\n    // 0x40a685\n    return v12 & 0xffffffff;\n  lab_0x40a75a:\n    // 0x40a75a\n    g139 = v11 - 66;\n    v26 = v22;\n    v38 = v23;\n    v25 = v16;\n    v24 = v13;\n    v39 = v23;\n    v27 = v22;\n    v40 = v23;\n    v17 = v16;\n    v14 = v13;\n    v41 = v23;\n    v28 = v22;\n    v42 = v23;\n    v29 = v22;\n    v43 = v23;\n    v30 = v22;\n    v34 = v23;\n    v31 = v22;\n    v35 = v23;\n    v32 = v22;\n    v36 = v23;\n    v33 = v22;\n    v37 = v23;\n    int64_t v45; // 0x40a5e0\n    switch (v11) {\n        case 66: {\n            // 0x40a954\n            v45 = v23;\n            if (v16 >= 0x40000000000000) {\n                goto lab_0x40a7c7;\n            } else {\n                // 0x40a961\n                v25 = 1024 * v16;\n                v24 = v13;\n                v39 = v23;\n                goto lab_0x40a798;\n            }\n        }\n        case 69: {\n            goto lab_0x40a8fb;\n        }\n        case 71: {\n            goto lab_0x40a933;\n        }\n        case 75: {\n            goto lab_0x40a7bc;\n        }\n        case 77: {\n            goto lab_0x40a77e;\n        }\n        case 80: {\n            goto lab_0x40a8c8;\n        }\n        case 84: {\n            goto lab_0x40a898;\n        }\n        case 89: {\n            goto lab_0x40a866;\n        }\n        case 90: {\n            goto lab_0x40a82b;\n        }\n        case 98: {\n            goto lab_0x40a80f;\n        }\n        case 99: {\n            goto lab_0x40a798;\n        }\n        case 103: {\n            goto lab_0x40a933;\n        }\n        case 107: {\n            goto lab_0x40a7bc;\n        }\n        case 109: {\n            goto lab_0x40a77e;\n        }\n        case 116: {\n            goto lab_0x40a898;\n        }\n        case 119: {\n            // 0x40a800\n            v45 = v23;\n            if (v16 < 0) {\n                goto lab_0x40a7c7;\n            } else {\n                // 0x40a805\n                v25 = 2 * v16;\n                v24 = v13;\n                v39 = v23;\n                goto lab_0x40a798;\n            }\n        }\n        default: {\n            goto lab_0x40a7f5;\n        }\n    }\n  lab_0x40a8fb:;\n    uint128_t v46 = (int128_t)v16 * (int128_t)v32; // 0x40a913\n    int64_t v47 = (int64_t)(v46 < 0xffffffffffffffff ? v46 : 0xffffffffffffffff);\n    int64_t v48 = v46 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v49 = 5; // 0x40a91f\n    int64_t v50 = v47; // 0x40a922\n    int64_t v51 = v36; // 0x40a922\n    int64_t v52 = v48; // 0x40a922\n    int32_t v53 = v49; // 0x40a922\n    int64_t v54 = v48; // 0x40a922\n    while (v49 != 0) {\n        // 0x40a910\n        v46 = (int128_t)v47 * (int128_t)v32;\n        v47 = (int64_t)(v46 < 0xffffffffffffffff ? v46 : 0xffffffffffffffff);\n        v48 = v46 > 0xffffffffffffffff ? 1 : v54;\n        v49 = v53 - 1;\n        v50 = v47;\n        v51 = v36;\n        v52 = v48;\n        v53 = v49;\n        v54 = v48;\n    }\n    goto lab_0x40a854;\n  lab_0x40a933:\n    // 0x40a933\n    v25 = -1;\n    v24 = 1;\n    v39 = v37;\n    if ((int128_t)v33 * (int128_t)v16 <= 0xffffffffffffffff) {\n        // 0x40a93e\n        int128_t v55; // 0x40a939\n        uint128_t v56; // 0x40a939\n        uint128_t v57 = (v56 & 0xffffffffffffffff) * v55; // 0x40a93e\n        v25 = -1;\n        v24 = 1;\n        int64_t v58; // 0x40a5e0\n        v39 = v58;\n        if (v57 <= 0xffffffffffffffff) {\n            uint128_t v59 = (v57 & 0xffffffffffffffff) * v55; // 0x40a943\n            v25 = -1;\n            v24 = 1;\n            v39 = v58;\n            if (v59 <= 0xffffffffffffffff) {\n                // 0x40a948\n                v25 = v59;\n                int64_t v60; // 0x40a5e0\n                v24 = v60 & 0xffffffff;\n                v39 = v58;\n            }\n        }\n    }\n    goto lab_0x40a798;\n  lab_0x40a7bc:;\n    uint128_t v63 = (int128_t)v27 * (int128_t)v16; // 0x40a7bf\n    v25 = v63;\n    v24 = v13;\n    v39 = v40;\n    v45 = v40;\n    if (v63 <= 0xffffffffffffffff) {\n        goto lab_0x40a798;\n    } else {\n        goto lab_0x40a7c7;\n    }\n  lab_0x40a77e:;\n    int128_t v64 = v26; // 0x40a784\n    uint128_t v65 = v64 * (int128_t)v16; // 0x40a784\n    v45 = v38;\n    if (v65 > 0xffffffffffffffff) {\n        goto lab_0x40a7c7;\n    } else {\n        uint128_t v66 = (v65 & 0xffffffffffffffff) * v64; // 0x40a789\n        v45 = v38;\n        if (v66 > 0xffffffffffffffff) {\n            goto lab_0x40a7c7;\n        } else {\n            // 0x40a78e\n            v25 = v66;\n            v24 = v13;\n            v39 = v38;\n            goto lab_0x40a798;\n        }\n    }\n  lab_0x40a8c8:;\n    uint128_t v67 = (int128_t)v16 * (int128_t)v31; // 0x40a8db\n    int64_t v68 = (int64_t)(v67 < 0xffffffffffffffff ? v67 : 0xffffffffffffffff);\n    int64_t v69 = v67 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v70 = 4; // 0x40a8e7\n    v50 = v68;\n    v51 = v35;\n    v52 = v69;\n    int32_t v71 = v70; // 0x40a8ea\n    int64_t v72 = v69; // 0x40a8ea\n    while (v70 != 0) {\n        // 0x40a8d8\n        v67 = (int128_t)v68 * (int128_t)v31;\n        v68 = (int64_t)(v67 < 0xffffffffffffffff ? v67 : 0xffffffffffffffff);\n        v69 = v67 > 0xffffffffffffffff ? 1 : v72;\n        v70 = v71 - 1;\n        v50 = v68;\n        v51 = v35;\n        v52 = v69;\n        v71 = v70;\n        v72 = v69;\n    }\n    goto lab_0x40a854;\n  lab_0x40a898:;\n    uint128_t v73 = (int128_t)v16 * (int128_t)v30; // 0x40a8ab\n    int64_t v74 = (int64_t)(v73 < 0xffffffffffffffff ? v73 : 0xffffffffffffffff);\n    int64_t v75 = v73 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v76 = 3; // 0x40a8b7\n    v50 = v74;\n    v51 = v34;\n    v52 = v75;\n    int32_t v77 = v76; // 0x40a8ba\n    int64_t v78 = v75; // 0x40a8ba\n    while (v76 != 0) {\n        // 0x40a8a8\n        v73 = (int128_t)v74 * (int128_t)v30;\n        v74 = (int64_t)(v73 < 0xffffffffffffffff ? v73 : 0xffffffffffffffff);\n        v75 = v73 > 0xffffffffffffffff ? 1 : v78;\n        v76 = v77 - 1;\n        v50 = v74;\n        v51 = v34;\n        v52 = v75;\n        v77 = v76;\n        v78 = v75;\n    }\n    goto lab_0x40a854;\n  lab_0x40a866:;\n    uint128_t v79 = (int128_t)v16 * (int128_t)v29; // 0x40a87b\n    int64_t v80 = (int64_t)(v79 < 0xffffffffffffffff ? v79 : 0xffffffffffffffff);\n    int64_t v81 = v79 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v82 = 7; // 0x40a887\n    v50 = v80;\n    v51 = v43;\n    v52 = v81;\n    int32_t v83 = v82; // 0x40a88a\n    int64_t v84 = v81; // 0x40a88a\n    while (v82 != 0) {\n        // 0x40a878\n        v79 = (int128_t)v80 * (int128_t)v29;\n        v80 = (int64_t)(v79 < 0xffffffffffffffff ? v79 : 0xffffffffffffffff);\n        v81 = v79 > 0xffffffffffffffff ? 1 : v84;\n        v82 = v83 - 1;\n        v50 = v80;\n        v51 = v43;\n        v52 = v81;\n        v83 = v82;\n        v84 = v81;\n    }\n    goto lab_0x40a854;\n  lab_0x40a82b:;\n    uint128_t v85 = (int128_t)v16 * (int128_t)v28; // 0x40a843\n    int64_t v86 = (int64_t)(v85 < 0xffffffffffffffff ? v85 : 0xffffffffffffffff);\n    int64_t v87 = v85 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v88 = 6; // 0x40a84f\n    int32_t v89 = v88; // 0x40a852\n    int64_t v90 = v87; // 0x40a852\n    v50 = v86;\n    v51 = v42;\n    v52 = v87;\n    while (v88 != 0) {\n        // 0x40a840\n        v85 = (int128_t)v86 * (int128_t)v28;\n        v86 = (int64_t)(v85 < 0xffffffffffffffff ? v85 : 0xffffffffffffffff);\n        v87 = v85 > 0xffffffffffffffff ? 1 : v90;\n        v88 = v89 - 1;\n        v89 = v88;\n        v90 = v87;\n        v50 = v86;\n        v51 = v42;\n        v52 = v87;\n    }\n    goto lab_0x40a854;\n  lab_0x40a80f:\n    // 0x40a80f\n    v45 = v41;\n    if (v16 >= 0x80000000000000) {\n        goto lab_0x40a7c7;\n    } else {\n        // 0x40a818\n        v25 = 512 * v16;\n        v24 = v13;\n        v39 = v41;\n        goto lab_0x40a798;\n    }\n  lab_0x40a798:;\n    int64_t v61 = v24;\n    int64_t v62 = (0x100000000 * v39 >> 32) + v10; // 0x40a79d\n    *v8 = v62;\n    v15 = v25;\n    v12 = (*(char *)v62 != 0 ? v61 | 2 : v61) & 0xffffffff;\n    goto lab_0x40a682;\n  lab_0x40a7f5:\n    // 0x40a7f5\n    *a4 = v17;\n    // 0x40a685\n    return (v14 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x40a7c7:\n    // 0x40a7c7\n    v25 = -1;\n    v24 = 1;\n    v39 = v45;\n    goto lab_0x40a798;\n  lab_0x40a854:\n    // 0x40a854\n    v25 = v50;\n    v24 = (v52 | v13) & 0xffffffff;\n    v39 = v51;\n    goto lab_0x40a798;\n}\n"
        },
        {
            "funcName": "function_40aa20",
            "funcStartAddr": "40aa20",
            "funcEndAddr": "40aa9b",
            "decompiledFuncCode": "int64_t function_40aa20(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40aa27\n    if (fileno(stream) < 0) {\n        // 0x40aa87\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40aa3a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40aa6b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40aa87\n            return fclose(stream);\n        }\n    }\n    // 0x40aa3c\n    if ((int32_t)function_40abe0(a1, v1) == 0) {\n        // 0x40aa87\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40aa48\n    int32_t v3 = *v2; // 0x40aa50\n    int64_t result = fclose(stream); // 0x40aa5e\n    if (v3 != 0) {\n        // 0x40aa90\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40aa60\n    return result;\n}\n"
        },
        {
            "funcName": "function_40aaa0",
            "funcStartAddr": "40aaa0",
            "funcEndAddr": "40abd5",
            "decompiledFuncCode": "int64_t function_40aaa0(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x40ab80\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40aadc\n    int64_t v2; // 0x40aaa0\n    if (g130 < 0) {\n        int64_t v3 = function_40aaa0(fd, 0, v1, a4); // 0x40ab24\n        int64_t v4 = v3 & 0xffffffff; // 0x40ab29\n        if ((int32_t)v3 < 0) {\n            // 0x40ab10\n            return v4 & 0xffffffff;\n        }\n        // 0x40ab2f\n        v2 = v4;\n        if (g130 != -1) {\n            // 0x40ab10\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40aaf7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40ab06\n            g130 = 1;\n            // 0x40ab10\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40aaa0(fd & 0xffffffff, 0, v1, a4); // 0x40abb7\n        int64_t v7 = v6 & 0xffffffff; // 0x40abbc\n        if ((int32_t)v6 < 0) {\n            // 0x40ab10\n            return v7 & 0xffffffff;\n        }\n        // 0x40abc6\n        g130 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40ab3f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40ab4a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40ab10\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40ab62\n    close(fd2);\n    // 0x40ab10\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40abe0",
            "funcStartAddr": "40abe0",
            "funcEndAddr": "40ac20",
            "decompiledFuncCode": "int64_t function_40abe0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40abfa\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40abfa\n        return fflush(stream);\n    }\n    // 0x40ac08\n    function_40ac20(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40ac20",
            "funcStartAddr": "40ac20",
            "funcEndAddr": "40ac77",
            "decompiledFuncCode": "int64_t function_40ac20(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40ac20\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40ac2a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40ac5b\n    int64_t result = -1; // 0x40ac64\n    if (v1 != -1) {\n        // 0x40ac66\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40ac72\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ac80",
            "funcStartAddr": "40ac80",
            "funcEndAddr": "40ad5f",
            "decompiledFuncCode": "int64_t function_40ac80(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40ac8c\n    uint32_t v2 = *v1; // 0x40ac8c\n    int64_t v3 = a2 & 0xffffffff; // 0x40ac91\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x40ac94\n    uint64_t v5 = (int64_t)*v4; // 0x40ac94\n    int64_t v6; // 0x40ad02\n    if (v3 <= v5) {\n      lab_0x40acfc_2:\n        // 0x40acfc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x40ac82\n    int64_t v8 = v2; // 0x40ac80\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40acfc\n        goto lab_0x40acfc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x40acb8\n    int64_t v17; // 0x40acc6\n    int64_t * v18; // 0x40ace0\n    int64_t * v19; // 0x40ace3\n    int64_t v20; // 0x40acee\n    int64_t v21; // 0x40acc6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x40acc3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x40ace0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x40acf7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40acfc\n            goto lab_0x40acfc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40acfc\n            goto lab_0x40acfc_2;\n        }\n        // 0x40acb2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40ad3b\n    int64_t * v23 = (int64_t *)v22; // 0x40ad40\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x40ad43\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x40ad40\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x40ad57\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40acad\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40acfc\n            goto lab_0x40acfc_2;\n        }\n        // 0x40acb2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x40acc3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x40ace0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x40acf7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40acfc\n                goto lab_0x40acfc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40acfc\n                goto lab_0x40acfc_2;\n            }\n            // 0x40acb2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x40ad20\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x40ad40\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x40ad57\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40acfc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40ad60",
            "funcStartAddr": "40ad60",
            "funcEndAddr": "40b37c",
            "decompiledFuncCode": "int64_t function_40ad60(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40ad7f\n    int64_t v2 = *v1; // 0x40ad7f\n    char * str2 = (char *)v2; // 0x40ad8c\n    char c = *str2; // 0x40ad8c\n    int64_t v3 = v2; // 0x40adb8\n    int64_t v4 = 0; // 0x40ad60\n    int32_t v5; // 0x40ad60\n    int64_t v6; // 0x40ad60\n    int64_t v7; // 0x40ad60\n    int64_t v8; // 0x40ad60\n    int64_t v9; // 0x40ad60\n    int64_t v10; // 0x40ad60\n    int64_t v11; // 0x40ad60\n    int64_t v12; // 0x40ad60\n    int64_t v13; // 0x40ad60\n    int64_t str3; // 0x40ad60\n    int64_t v14; // 0x40ad60\n    int64_t v15; // 0x40ad60\n    int64_t v16; // 0x40ad60\n    int64_t v17; // 0x40ad60\n    int32_t v18; // 0x40ad60\n    int32_t v19; // 0x40ad60\n    int32_t v20; // 0x40ad60\n    int32_t v21; // 0x40ad60\n    int32_t v22; // 0x40ad60\n    int32_t v23; // 0x40ad60\n    int32_t v24; // 0x40ad60\n    int32_t v25; // 0x40ad60\n    int32_t v26; // 0x40ad60\n    int32_t v27; // 0x40ad60\n    int32_t v28; // 0x40ad60\n    int32_t v29; // 0x40ad60\n    int64_t nmemb; // 0x40ad60\n    int64_t v30; // 0x40ad60\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40adbc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x40adb8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x40adc8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40adce\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x40ad98\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40adfc\n                int64_t v34; // 0x40ad60\n                int64_t v35; // 0x40ad60\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x40ae05\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x40af80;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x40ae16\n                int64_t v37 = *(int64_t *)v36; // 0x40ae1a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x40adf0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x40ae05\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x40af80;\n                        }\n                    }\n                    // 0x40ae16\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x40ae66:\n                    // 0x40ae66\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x40aec0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x40b030\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x40aec0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x40afe0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40ae8a;\n                                } else {\n                                    // 0x40afec\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40ae8a;\n                                    } else {\n                                        // 0x40affa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40ae8a;\n                                        } else {\n                                            goto lab_0x40aec0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40ae8a;\n                            }\n                        }\n                    }\n                }\n              lab_0x40aed1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x40b0a6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x40b252\n                            flockfile(g56);\n                            int64_t v41 = *v1; // 0x40b272\n                            __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40b2bf\n                            int64_t v43 = (int64_t)g56;\n                            int64_t v44 = v43; // 0x40b2d9\n                            int64_t v45; // 0x40b2db\n                            if (*(char *)v42 != 0) {\n                                // 0x40b2db\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g56;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x40b2d3\n                            while (v17 + nmemb != v42) {\n                                // 0x40b2d5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40b2db\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g56;\n                                }\n                                // 0x40b2c8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x40b300\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g56);\n                            v40 = *v1;\n                        } else {\n                            // 0x40b0b4\n                            __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40b20f\n                        free((int64_t *)v17);\n                    }\n                    // 0x40b109\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x40b120\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40afce\n                    return 63;\n                }\n                // 0x40aef0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x40af74\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x40af80:;\n                    int32_t * v49 = (int32_t *)a7; // 0x40af90\n                    uint32_t v50 = *v49; // 0x40af90\n                    int64_t v51 = v50; // 0x40af90\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40af9a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x40afa3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40b1cf\n                                __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40b17a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40afce\n                            return 63;\n                        }\n                        // 0x40b018\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40b32f\n                                    __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40b22d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x40b240\n                                // 0x40afce\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40b13e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x40b152\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40afbb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40afbe\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x40afc2\n                    int64_t result = v59; // 0x40afc8\n                    if (v58 != 0) {\n                        // 0x40afca\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40afce\n                    return result;\n                }\n            } else {\n                // 0x40adce\n                v5 = v32;\n            }\n            // break -> 0x40aef5\n            break;\n        }\n    }\n    // 0x40aef5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40af0d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x40af17\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40afce\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x40b059\n        __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x40af46\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x40af56\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x40aec0:\n    // 0x40aec0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x40aec0\n    int64_t v63 = *(int64_t *)v62; // 0x40aec4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x40aed1\n        goto lab_0x40aed1;\n    }\n    goto lab_0x40ae66;\n  lab_0x40ae8a:\n    // 0x40ae8a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x40ad60\n    int32_t v65; // 0x40ad60\n    int32_t v66; // 0x40ad60\n    if (v27 != 0) {\n        goto lab_0x40aec0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x40b040\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x40aec0;\n            } else {\n                goto lab_0x40aeb1;\n            }\n        } else {\n            // 0x40aea5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40b19c\n                int64_t v67 = (int64_t)mem; // 0x40b19c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x40aec0;\n                } else {\n                    // 0x40b1af\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x40aeb1;\n                }\n            } else {\n                goto lab_0x40aeb1;\n            }\n        }\n    }\n  lab_0x40aeb1:\n    // 0x40aeb1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x40aec0;\n}\n"
        },
        {
            "funcName": "function_40b380",
            "funcStartAddr": "40b380",
            "funcEndAddr": "40b946",
            "decompiledFuncCode": "int64_t function_40b380(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x40b3a1\n    if (v3 < 1) {\n        // 0x40b55e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40b39d\n    int32_t v5 = *(int32_t *)a7; // 0x40b3a9\n    uint64_t v6 = a1 & 0xffffffff; // 0x40b3ab\n    int64_t v7 = v2; // 0x40b3b0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x40b3b3\n    *v8 = 0;\n    int64_t v9; // 0x40b380\n    int64_t v10; // 0x40b380\n    int64_t v11; // 0x40b380\n    int64_t v12; // 0x40b380\n    int64_t str; // 0x40b380\n    int64_t v13; // 0x40b380\n    int64_t v14; // 0x40b380\n    int64_t v15; // 0x40b380\n    int64_t v16; // 0x40b380\n    int64_t v17; // 0x40b380\n    int32_t v18; // 0x40b380\n    char v19; // 0x40b380\n    if (v5 == 0) {\n        // 0x40b598\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40b3ca;\n    } else {\n        // 0x40b3c3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x40b410\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x40b413\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40b4d8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x40b426\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x40b436\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40b4ec;\n                } else {\n                    goto lab_0x40b448;\n                }\n            }\n        } else {\n            goto lab_0x40b3ca;\n        }\n    }\n  lab_0x40b3ca:\n    // 0x40b3ca\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x40b3d0\n    *v24 = 0;\n    int64_t v25; // 0x40b380\n    int64_t v26; // 0x40b380\n    int64_t v27; // 0x40b380\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x40b4c0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40b4cd;\n        }\n        case 43: {\n            // 0x40b7d0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40b4cd;\n        }\n        default: {\n            // 0x40b3ec\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40b74f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40b868\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40b4cd;\n                } else {\n                    // 0x40b75d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40b3fa;\n                }\n            } else {\n                goto lab_0x40b3fa;\n            }\n        }\n    }\n  lab_0x40b4d8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40b4df\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x40b448;\n    } else {\n        goto lab_0x40b4ec;\n    }\n  lab_0x40b3fa:\n    // 0x40b3fa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40b4cd;\n  lab_0x40b4cd:\n    // 0x40b4cd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40b4d8;\n  lab_0x40b448:;\n    uint32_t v30 = *(int32_t *)a7; // 0x40b448\n    int64_t v31 = v30; // 0x40b448\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40b44a\n    if ((int64_t)*v32 > v31) {\n        // 0x40b44f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x40b452\n    if (*v33 > v30) {\n        // 0x40b457\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40b45a\n    int64_t v35 = v31; // 0x40b45e\n    int64_t v36 = v15; // 0x40b45e\n    int64_t v37; // 0x40b380\n    int64_t v38; // 0x40b380\n    int64_t v39; // 0x40b380\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40b5c8\n        int64_t v41 = v40; // 0x40b5c8\n        v2 = v41;\n        int64_t v42; // 0x40b380\n        if (*v33 == v40) {\n            // 0x40b7b0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40b7b8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40b5d4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40b5d8\n                function_40ac80(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40b5e8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40b5f1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40b5fa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40b611\n            int64_t v47 = v45 & 0xffffffff; // 0x40b615\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40b61e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40b624\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40b626;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40b600\n            int64_t v49 = v48 & 0xffffffff; // 0x40b600\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40b611\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40b61e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40b624\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40b626;\n                    }\n                }\n                // 0x40b600\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40b7c8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40b626;\n    } else {\n        goto lab_0x40b464;\n    }\n  lab_0x40b4ec:\n    // 0x40b4ec\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40b4ef\n    int64_t v51 = v12; // 0x40b4ef\n    int64_t v52 = v14; // 0x40b4ef\n    if (*(char *)v10 == 0) {\n        goto lab_0x40b448;\n    } else {\n        goto lab_0x40b4f5;\n    }\n  lab_0x40b464:;\n    int32_t v53 = v35; // 0x40b464\n    int64_t v54; // 0x40b380\n    int64_t v55; // 0x40b380\n    int64_t v56; // 0x40b380\n    int64_t v57; // 0x40b380\n    int64_t v58; // 0x40b380\n    int64_t v59; // 0x40b380\n    char * v60; // 0x40b380\n    int64_t v61; // 0x40b380\n    int64_t v62; // 0x40b479\n    int64_t v63; // 0x40b380\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40b5b3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40b5b6;\n    } else {\n        // 0x40b46c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x40b380\n        int64_t v66 = v65 ? -1 : 1; // 0x40b480\n        int64_t v67 = (int64_t)\"--\"; // 0x40b380\n        int64_t v68 = v62; // 0x40b380\n        int64_t v69 = 3; // 0x40b480\n        unsigned char v70 = *(char *)v68; // 0x40b480\n        char v71 = *(char *)v67; // 0x40b480\n        char v72 = v71; // 0x40b480\n        bool v73 = false; // 0x40b480\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40b570\n            if (*(char *)v62 == 45) {\n                // 0x40b630\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40b630\n                if (c == 0) {\n                    goto lab_0x40b57a;\n                } else {\n                    // 0x40b63d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40b6c0;\n                    } else {\n                        if (c == 45) {\n                            // 0x40b8a3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40b715;\n                        } else {\n                            // 0x40b64e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40b6c0;\n                            } else {\n                                // 0x40b653\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40b674;\n                                } else {\n                                    // 0x40b65a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40b6c0;\n                                    } else {\n                                        goto lab_0x40b674;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40b57a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x40b490\n            v2 = v75;\n            int32_t v76 = *v32; // 0x40b493\n            int64_t v77 = v35 + 1; // 0x40b496\n            int32_t v78 = v77; // 0x40b499\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40b800\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x40b4a7\n                    function_40ac80(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x40b4b5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40b5b6;\n        }\n    }\n  lab_0x40b4f5:;\n    // 0x40b4f5\n    int64_t v79; // bp-104, 0x40b380\n    int64_t v80 = &v79; // 0x40b38a\n    int64_t v81 = v50 + 1; // 0x40b4f5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40b4fc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40b501\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40b505\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40b509\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40b511\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40b516\n    int32_t c2 = v84; // 0x40b516\n    char * found_char_pos = strchr(str2, c2); // 0x40b516\n    int64_t v87 = *v82; // 0x40b51b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40b525\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40b530\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40b820\n            __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40b7ed\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40b55e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40b516\n    char v91 = *(char *)(v90 + 1); // 0x40b54b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40b505\n        if (v91 != 58) {\n            // 0x40b55e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40b774\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40b878\n                *v8 = 0;\n            } else {\n                // 0x40b85c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40b79e\n            *v83 = 0;\n            // 0x40b55e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40b77e\n        if (v93 != 0) {\n            // 0x40b810\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40b79e\n            *v83 = 0;\n            // 0x40b55e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40b791\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40b79e\n            *v83 = 0;\n            // 0x40b55e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40b8da\n            __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40b88a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40b891\n        // 0x40b79e\n        *v83 = 0;\n        // 0x40b55e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40b6e9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40b6eb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40b910\n                __fprintf_chk(g56, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40b8c1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40b8c8\n            // 0x40b55e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40b6f6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40b6fa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40b715;\n  lab_0x40b626:\n    // 0x40b626\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x40b464;\n  lab_0x40b715:;\n    int64_t v99 = function_40ad60(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40b733\n    // 0x40b55e\n    return v99 & 0xffffffff;\n  lab_0x40b5b6:;\n    int32_t v100 = v55; // 0x40b5b6\n    if (v100 != (int32_t)v59) {\n        // 0x40b5ba\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40b55e\n    return 0xffffffff;\n  lab_0x40b57a:\n    // 0x40b57a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40b581\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40b55e\n    return v99 & 0xffffffff;\n  lab_0x40b6c0:\n    // 0x40b6c0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40b4f5;\n  lab_0x40b674:\n    // 0x40b674\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_40ad60(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g11); // 0x40b69a\n    if ((int32_t)v101 != -1) {\n        // 0x40b55e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40b6af\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40b6c0;\n}\n"
        },
        {
            "funcName": "function_40b950",
            "funcStartAddr": "40b950",
            "funcEndAddr": "40b9a6",
            "decompiledFuncCode": "int64_t function_40b950(int64_t a1) {\n    // 0x40b950\n    *(int32_t *)&g131 = g51;\n    *(int32_t *)&g132 = g50;\n    int64_t v1; // 0x40b950\n    int64_t result = function_40b380(v1, v1, v1, v1, v1, v1, &g131, a1 & 0xffffffff); // 0x40b976\n    g51 = *(int32_t *)&g131;\n    g138 = (char *)g134;\n    *(int32_t *)&g49 = g133;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b9b0",
            "funcStartAddr": "40b9b0",
            "funcEndAddr": "40b9c8",
            "decompiledFuncCode": "int64_t function_40b9b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b9b0\n    return function_40b950(1);\n}\n"
        },
        {
            "funcName": "function_40b9d0",
            "funcStartAddr": "40b9d0",
            "funcEndAddr": "40b9e3",
            "decompiledFuncCode": "int64_t function_40b9d0(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int64_t * a5, int64_t a6) {\n    // 0x40b9d0\n    return function_40b950(0);\n}\n"
        },
        {
            "funcName": "function_40b9f0",
            "funcStartAddr": "40b9f0",
            "funcEndAddr": "40ba05",
            "decompiledFuncCode": "int64_t function_40b9f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b9f0\n    return function_40b380(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40ba10",
            "funcStartAddr": "40ba10",
            "funcEndAddr": "40ba26",
            "decompiledFuncCode": "int64_t function_40ba10(void) {\n    // 0x40ba10\n    return function_40b950(0);\n}\n"
        },
        {
            "funcName": "function_40ba30",
            "funcStartAddr": "40ba30",
            "funcEndAddr": "40ba48",
            "decompiledFuncCode": "int64_t function_40ba30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40ba30\n    return function_40b380(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40ba50",
            "funcStartAddr": "40ba50",
            "funcEndAddr": "40baca",
            "decompiledFuncCode": "int64_t function_40ba50(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40ba5b\n    int64_t v2 = (int64_t)&g2; // 0x40ba5b\n    int64_t * pwc; // 0x40ba50\n    int64_t v3; // 0x40ba50\n    int64_t n; // 0x40ba50\n    if (a2 == 0) {\n        goto lab_0x40baa2;\n    } else {\n        // 0x40ba5d\n        if (a3 == 0) {\n            // 0x40ba88\n            return -2;\n        }\n        // 0x40ba69\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40baa2;\n        } else {\n            goto lab_0x40ba74;\n        }\n    }\n  lab_0x40baa2:\n    // 0x40baa2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40ba50\n    pwc = &v4;\n    goto lab_0x40ba74;\n  lab_0x40ba74:;\n    char * wstr = (char *)v3; // 0x40ba7a\n    int64_t ps; // 0x40ba50\n    int32_t v5 = mbrtowc((int32_t *)pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40ba7a\n    int64_t result = v5; // 0x40ba7a\n    if (v5 < 0xfffffffe) {\n        // 0x40ba88\n        return result;\n    }\n    int64_t result2 = result; // 0x40bab9\n    if ((char)function_405590(0, v3) == 0) {\n        // 0x40babb\n        *(int32_t *)pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40ba88\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40bad0",
            "funcStartAddr": "40bad0",
            "funcEndAddr": "40bb15",
            "decompiledFuncCode": "int64_t function_40bad0(int64_t a1) {\n    // 0x40bad0\n    int32_t v1; // 0x40bad0\n    if (*(char *)(a1 + 8) != 0) {\n        // 0x40bb00\n        v1 = setenv(\"TZ\", (char *)(a1 + 9), 1);\n    } else {\n        // 0x40bada\n        v1 = unsetenv(\"TZ\");\n    }\n    int64_t result = 0; // 0x40bae8\n    if (v1 == 0) {\n        // 0x40baea\n        tzset();\n        result = 1;\n    }\n    // 0x40baf4\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bb20",
            "funcStartAddr": "40bb20",
            "funcEndAddr": "40bb49",
            "decompiledFuncCode": "int64_t function_40bb20(int64_t a1) {\n    // 0x40bb20\n    if (a1 == 0) {\n        // 0x40bb40\n        int64_t result; // 0x40bb20\n        return result;\n    }\n    int64_t * v1 = (int64_t *)a1; // 0x40bb30\n    int64_t v2 = *v1; // 0x40bb30\n    free(v1);\n    while (v2 != 0) {\n        // 0x40bb30\n        v1 = (int64_t *)v2;\n        v2 = *v1;\n        free(v1);\n    }\n    // 0x40bb40\n    return &g141;\n}\n"
        },
        {
            "funcName": "function_40bb50",
            "funcStartAddr": "40bb50",
            "funcEndAddr": "40bb91",
            "decompiledFuncCode": "int64_t function_40bb50(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40bb5d\n    int64_t v2 = function_40bad0(a1); // 0x40bb6b\n    int32_t v3 = *v1; // 0x40bb74\n    if ((char)v2 == 0) {\n        // 0x40bb76\n        v3 = *v1;\n    }\n    // 0x40bb79\n    function_40bb20(a1);\n    *v1 = v3;\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40bba0",
            "funcStartAddr": "40bba0",
            "funcEndAddr": "40bc2f",
            "decompiledFuncCode": "int64_t function_40bba0(int64_t str, int64_t a2, int64_t a3) {\n    int64_t result2; // 0x40bba0\n    if (str == 0) {\n        int64_t * mem = malloc(128); // 0x40bc0d\n        int64_t result = (int64_t)mem; // 0x40bc0d\n        result2 = result;\n        if (mem != NULL) {\n            // 0x40bc1a\n            *mem = 0;\n            *(int16_t *)(result + 8) = 0;\n            return result;\n        }\n    } else {\n        int32_t len = strlen((char *)str); // 0x40bbac\n        uint64_t v1 = (int64_t)len + 1; // 0x40bbb6\n        int64_t * mem2 = malloc(v1 >= 118 ? len + 18 & -8 : 128); // 0x40bbca\n        int64_t v2 = (int64_t)mem2; // 0x40bbca\n        result2 = v2;\n        if (mem2 != NULL) {\n            // 0x40bbd7\n            *mem2 = 0;\n            int64_t v3 = v2 + 9; // 0x40bbe3\n            *(int16_t *)(v2 + 8) = 1;\n            memcpy((int64_t *)v3, (int64_t *)str, (int32_t)v1);\n            *(char *)(v3 + v1) = 0;\n            result2 = v2;\n        }\n    }\n    // 0x40bbfb\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40bc30",
            "funcStartAddr": "40bc30",
            "funcEndAddr": "40bda5",
            "decompiledFuncCode": "int64_t function_40bc30(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 48); // 0x40bc3e\n    uint64_t v2 = *v1; // 0x40bc3e\n    if (v2 == 0) {\n        // 0x40bce1\n        return 1;\n    }\n    int64_t v3; // 0x40bc30\n    if (v2 >= a2) {\n        int64_t v4 = a2 + 56; // 0x40bc56\n        v3 = v4;\n        if (v2 < v4) {\n            // 0x40bce1\n            return 1;\n        }\n    }\n    char * str2 = (char *)v2; // 0x40bc64\n    if (*str2 == 0) {\n        // 0x40bcd8\n        *v1 = (int64_t)&g2;\n        // 0x40bce1\n        return 1;\n    }\n    int64_t str = a1 + 9; // 0x40bc69\n    if (strcmp((char *)str, str2) == 0) {\n        // 0x40bcd8\n        *v1 = str;\n        // 0x40bce1\n        return 1;\n    }\n    int64_t v5 = a1;\n    int64_t v6 = str;\n    char * str3 = (char *)v6; // 0x40bc87\n    int64_t v7; // 0x40bc30\n    int64_t v8; // 0x40bc30\n    int64_t v9; // 0x40bc30\n    int64_t v10; // 0x40bc8c\n    if (*str3 == 0) {\n        // 0x40bc8c\n        v10 = v5 + 9;\n        if (v6 != v10) {\n            // break (via goto) -> 0x40bd18\n            goto lab_0x40bd18;\n        }\n        // 0x40bc99\n        if (*(char *)(v5 + 8) == 0) {\n            // 0x40bd48\n            v8 = 0;\n            v9 = v3;\n            v7 = (int64_t)strlen(str2) + 1;\n            goto lab_0x40bd56;\n        }\n    }\n    int64_t v11 = v6 + 1 + (int64_t)strlen(str3); // 0x40bcab\n    char * str5 = (char *)v11;\n    int64_t v12; // 0x40bc30\n    int64_t v13; // 0x40bcb5\n    int64_t str4; // 0x40bcbe\n    int32_t strcmp_rc; // 0x40bccb\n    while (*str5 == 0) {\n        // 0x40bcb5\n        v13 = *(int64_t *)v5;\n        if (v13 == 0) {\n            // break -> 0x40bc78\n            break;\n        }\n        // 0x40bcbe\n        str4 = v13 + 9;\n        strcmp_rc = strcmp((char *)str4, str2);\n        v12 = str4;\n        if (strcmp_rc == 0) {\n            // 0x40bcd8\n            *v1 = v12;\n            // 0x40bce1\n            return 1;\n        }\n        v5 = v13;\n        v6 = str4;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40bc8c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40bd18\n                goto lab_0x40bd18;\n            }\n            // 0x40bc99\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40bd48\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40bd56;\n            }\n        }\n        // 0x40bca3\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n    }\n    // 0x40bcd8\n    *v1 = v11;\n    while (strcmp(str5, str2) != 0) {\n        // 0x40bc87\n        v6 = v11;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40bc8c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40bd18\n                goto lab_0x40bd18;\n            }\n            // 0x40bc99\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40bd48\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40bd56;\n            }\n        }\n        // 0x40bca3\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n        while (*str5 == 0) {\n            // 0x40bcb5\n            v13 = *(int64_t *)v5;\n            if (v13 == 0) {\n                // break -> 0x40bc78\n                break;\n            }\n            // 0x40bcbe\n            str4 = v13 + 9;\n            strcmp_rc = strcmp((char *)str4, str2);\n            v12 = str4;\n            if (strcmp_rc == 0) {\n                // 0x40bcd8\n                *v1 = v12;\n                // 0x40bce1\n                return 1;\n            }\n            v5 = v13;\n            v6 = str4;\n            str3 = (char *)v6;\n            if (*str3 == 0) {\n                // 0x40bc8c\n                v10 = v5 + 9;\n                if (v6 != v10) {\n                    // break (via goto) -> 0x40bd18\n                    goto lab_0x40bd18;\n                }\n                // 0x40bc99\n                if (*(char *)(v5 + 8) == 0) {\n                    // 0x40bd48\n                    v8 = 0;\n                    v9 = v3;\n                    v7 = (int64_t)strlen(str2) + 1;\n                    goto lab_0x40bd56;\n                }\n            }\n            // 0x40bca3\n            v11 = v6 + 1 + (int64_t)strlen(str3);\n            str5 = (char *)v11;\n        }\n        // 0x40bcd8\n        *v1 = v11;\n    }\n    // 0x40bce1\n    return 1;\n  lab_0x40bd18:;\n    int64_t v14 = (int64_t)strlen(str2) + 1; // 0x40bd20\n    int64_t v15 = v6 - v10; // 0x40bd27\n    int64_t v16 = -1 - v15;\n    v8 = v15;\n    v9 = v16;\n    v7 = v14;\n    if (v14 > v16) {\n        // 0x40bd35\n        *__errno_location() = 12;\n        // 0x40bce1\n        return 0;\n    }\n    goto lab_0x40bd56;\n  lab_0x40bd56:\n    // 0x40bd56\n    if (v7 + v8 < 119) {\n        // 0x40bd5f\n        memcpy((int64_t *)v6, (int64_t *)v2, (int32_t)v7);\n        *(char *)(v7 + v6) = 0;\n        // 0x40bcd8\n        *v1 = v6;\n        // 0x40bce1\n        return 1;\n    }\n    int64_t v17 = function_40bba0(v2, v2, v9); // 0x40bd83\n    *(int64_t *)v5 = v17;\n    if (v17 == 0) {\n        // 0x40bce1\n        return 0;\n    }\n    // 0x40bd91\n    *(char *)(v17 + 8) = 0;\n    // 0x40bcd8\n    *v1 = v17 + 9;\n    // 0x40bce1\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40bdb0",
            "funcStartAddr": "40bdb0",
            "funcEndAddr": "40be5f",
            "decompiledFuncCode": "int64_t function_40bdb0(int64_t a1) {\n    char * env_val = getenv(\"TZ\"); // 0x40bdbc\n    int64_t v1 = (int64_t)env_val; // 0x40bdbc\n    char v2 = *(char *)(a1 + 8);\n    int64_t v3; // 0x40bdb0\n    if (env_val == NULL) {\n        // 0x40be20\n        if (v2 == 0) {\n            // 0x40bded\n            return 1;\n        }\n    } else {\n        if (v2 != 0) {\n            // 0x40bdf8\n            v3 = v1;\n            if (strcmp((char *)(a1 + 9), env_val) == 0) {\n                // 0x40bded\n                return 1;\n            }\n        }\n    }\n    // 0x40bdd1\n    int64_t v4; // 0x40bdb0\n    int64_t result = function_40bba0(v1, v3, v4); // 0x40bdd4\n    if (result == 0) {\n        // 0x40bded\n        return 0;\n    }\n    // 0x40bde1\n    if ((char)function_40bad0(a1) != 0) {\n        // 0x40bded\n        return result;\n    }\n    int32_t * v5 = __errno_location(); // 0x40be38\n    if (result != 1) {\n        // 0x40be49\n        function_40bb20(result);\n    }\n    // 0x40be51\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40be60",
            "funcStartAddr": "40be60",
            "funcEndAddr": "40be71",
            "decompiledFuncCode": "int64_t function_40be60(int64_t a1) {\n    // 0x40be60\n    if (a1 == 1) {\n        // 0x40be70\n        int64_t result; // 0x40be60\n        return result;\n    }\n    // 0x40be66\n    return function_40bb20(a1);\n}\n"
        },
        {
            "funcName": "function_40be80",
            "funcStartAddr": "40be80",
            "funcEndAddr": "40bf25",
            "decompiledFuncCode": "int64_t function_40be80(int64_t a1, int64_t * timep, int64_t * time) {\n    if (a1 == 0) {\n        // 0x40bf10\n        return (int64_t)gmtime_r((int32_t *)timep, (struct tm *)time);\n    }\n    int64_t v1 = function_40bdb0(a1); // 0x40be98\n    if (v1 == 0) {\n        // 0x40beca\n        return 0;\n    }\n    // 0x40bea5\n    if (localtime_r((int32_t *)timep, (struct tm *)time) != NULL) {\n        int64_t result = (int64_t)time;\n        if ((char)function_40bc30(a1, result) != 0) {\n            // 0x40bec4\n            if (v1 == 1 || (char)function_40bb50(v1) != 0) {\n                // 0x40beca\n                return result;\n            }\n            // 0x40beca\n            return 0;\n        }\n    }\n    if (v1 != 1) {\n        // 0x40bee6\n        function_40bb50(v1);\n    }\n    // 0x40beca\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40bf30",
            "funcStartAddr": "40bf30",
            "funcEndAddr": "40c04c",
            "decompiledFuncCode": "int64_t function_40bf30(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40bf30\n    int32_t v1; // 0x40bf30\n    int32_t v2 = v1;\n    if (a1 == 0) {\n        // 0x40c028\n        return function_40c050(a2);\n    }\n    int64_t v3 = function_40bdb0(a1); // 0x40bf47\n    if (v3 == 0) {\n        // 0x40bf9e\n        return -1;\n    }\n    int64_t v4 = function_40cd00(a2); // 0x40bf5b\n    int64_t timep = v4; // bp-96, 0x40bf60\n    if (v4 == -1) {\n        // 0x40bfb0\n        int32_t time; // bp-88, 0x40bf30\n        if (localtime_r((int32_t *)&timep, (struct tm *)&time) == NULL) {\n            goto lab_0x40bf83;\n        } else {\n            int32_t v5 = *(int32_t *)(a2 + 32); // 0x40bfc4\n            if (v2 >= 0 == v5 > -1 == (v5 == 0 != (v2 == 0))) {\n                goto lab_0x40bf83;\n            } else {\n                int32_t v6 = *(int32_t *)(a2 + 16); // 0x40bfe3\n                int32_t v7 = *(int32_t *)(a2 + 20); // 0x40bfe6\n                int32_t v8 = *(int32_t *)(a2 + 12); // 0x40bff3\n                int32_t v9 = *(int32_t *)(a2 + 8); // 0x40bffc\n                int32_t v10 = *(int32_t *)(a2 + 4); // 0x40c005\n                if ((v7 ^ v1 | v6 ^ v1 | v8 ^ v1 | v9 ^ v1 || v10 ^ v1 || time ^ (int32_t)(int64_t)&time) == 0) {\n                    goto lab_0x40bf6b;\n                } else {\n                    goto lab_0x40bf83;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40bf6b;\n    }\n  lab_0x40bf6b:\n    // 0x40bf6b\n    if ((char)function_40bc30(a1, a2) == 0) {\n        // 0x40bf7a\n        timep = -1;\n    }\n    goto lab_0x40bf83;\n  lab_0x40bf83:\n    if (v3 != 1) {\n        // 0x40bf89\n        if ((char)function_40bb50(v3) == 0) {\n            // 0x40bf9e\n            return -1;\n        }\n    }\n    // 0x40bf9e\n    return timep;\n}\n"
        },
        {
            "funcName": "function_40c050",
            "funcStartAddr": "40c050",
            "funcEndAddr": "40c066",
            "decompiledFuncCode": "int64_t function_40c050(int64_t a1) {\n    // 0x40c050\n    *(int32_t *)(a1 + 32) = 0;\n    return function_40c8c0(a1, 0x401a40, &g135);\n}\n"
        },
        {
            "funcName": "function_40c070",
            "funcStartAddr": "40c070",
            "funcEndAddr": "40c0cd",
            "decompiledFuncCode": "int64_t function_40c070(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x40c077\n    int64_t v2; // 0x40c070\n    int64_t result = function_40aa20(a1, v2); // 0x40c088\n    if ((v2 & 32) != 0) {\n        // 0x40c0b0\n        if ((int32_t)result == 0) {\n            // 0x40c0b4\n            *__errno_location() = 0;\n        }\n        // 0x40c0aa\n        return 0xffffffff;\n    }\n    // 0x40c091\n    if ((int32_t)result == 0) {\n        // 0x40c0aa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x40c098\n    if (v1 == 0) {\n        // 0x40c09a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40c0aa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c0d0",
            "funcStartAddr": "40c0d0",
            "funcEndAddr": "40c632",
            "decompiledFuncCode": "int64_t function_40c0d0(void) {\n    char * v1 = nl_langinfo(14); // 0x40c0e6\n    char * v2 = g136; // 0x40c0eb\n    char * v3; // 0x40c0d0\n    int64_t v4; // 0x40c0d0\n    int64_t v5; // 0x40c0d0\n    int64_t v6; // 0x40c0d0\n    int64_t v7; // 0x40c0d0\n    int32_t size; // 0x40c0d0\n    int32_t size2; // 0x40c0d0\n    int32_t len; // 0x40c1a2\n    int64_t v8; // 0x40c1a2\n    char * env_val; // 0x40c18d\n    if (v2 == NULL) {\n        // 0x40c188\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40c1f5;\n        } else {\n            // 0x40c19a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40c1f5;\n            } else {\n                // 0x40c19f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40c18d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40c625\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40c1f5;\n                    } else {\n                        // 0x40c599\n                        size2 = len + 14;\n                        goto lab_0x40c1bb;\n                    }\n                } else {\n                    goto lab_0x40c1bb;\n                }\n            }\n        }\n    } else {\n        // 0x40c0d0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40c10a;\n    }\n  lab_0x40c43c:;\n    // 0x40c43c\n    struct _IO_FILE * stream; // 0x40c27b\n    int32_t v10 = __uflow(stream); // 0x40c43f\n    int64_t v11; // 0x40c0d0\n    int64_t v12 = v11; // 0x40c449\n    int64_t v13; // 0x40c0d0\n    int64_t v14 = v13; // 0x40c449\n    int32_t v15 = v10; // 0x40c449\n    int64_t v16; // 0x40c0d0\n    int64_t v17 = v16; // 0x40c449\n    int64_t v18 = v11; // 0x40c449\n    int64_t v19 = v13; // 0x40c449\n    int64_t v20 = v16; // 0x40c449\n    if (v10 == -1) {\n        // break -> 0x40c44f\n        goto lab_0x40c44f;\n    }\n    goto lab_0x40c2c9;\n  lab_0x40c2be:;\n    // 0x40c2be\n    int64_t v90; // 0x40c0d0\n    int64_t * v32; // 0x40c2b0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40c0d0\n    v12 = v89;\n    int64_t v91; // 0x40c0d0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40c0d0\n    v17 = v92;\n    goto lab_0x40c2c9;\n  lab_0x40c2c9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40c0d0\n    int32_t v25; // bp-120, 0x40c0d0\n    int32_t v26; // bp-184, 0x40c0d0\n    int64_t v27; // 0x40c27b\n    int64_t v28; // 0x40c298\n    int64_t v29; // 0x40c29d\n    int64_t * v30; // 0x40c2b4\n    switch (c) {\n        case 32: {\n            goto lab_0x40c2b0;\n        }\n        case 10: {\n            goto lab_0x40c2b0;\n        }\n        case 9: {\n            goto lab_0x40c2b0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40c4a1\n            int32_t v33; // 0x40c0d0\n            char v34; // 0x40c0d0\n            int32_t v35; // 0x40c4ae\n            if (v31 < *v30) {\n                // 0x40c480\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40c4ab\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40c4a1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40c480\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40c4ab\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40c490\n                v36 = v33;\n            }\n            // 0x40c57f\n            if (v36 == -1) {\n                // break -> 0x40c44f\n                break;\n            }\n            goto lab_0x40c2b0;\n        }\n        default: {\n            // 0x40c2df\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40c44f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40c308\n            int64_t v39 = v37 + 4; // 0x40c30a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40c316\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40c318\n            while (v41 == 0) {\n                // 0x40c308\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40c336\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40c342\n            int64_t v45 = v43 + 4; // 0x40c344\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40c350\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40c352\n            while (v47 == 0) {\n                // 0x40c342\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40c33f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40c368\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40c378\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40c37c\n            int64_t v52 = v51 + v48; // 0x40c385\n            int64_t * mem; // 0x40c0d0\n            int64_t v53; // 0x40c0d0\n            int64_t v54; // 0x40c0d0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40c4bb\n                int64_t v56 = v55 + 3; // 0x40c4c7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40c3a1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40c3b0\n            if (mem == NULL) {\n                // 0x40c5dc\n                free((int64_t *)v21);\n                function_40aa20(v27, v53);\n                v24 = (int64_t)&g2;\n                goto lab_0x40c254;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40c3c8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40c3d2\n            uint32_t v62 = (int32_t)v59; // 0x40c3d5\n            int64_t v63; // 0x40c0d0\n            if (v62 >= 8) {\n                // 0x40c4e4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40c4fe\n                int64_t v66 = v61 - v65; // 0x40c502\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40c50d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40c51e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40c51e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40c51b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40c5af\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40c3e7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40c3eb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40c3fb\n            int64_t v74 = v60 - 1; // 0x40c3ff\n            uint32_t v75 = (int32_t)v73; // 0x40c404\n            int64_t v76; // 0x40c0d0\n            if (v75 >= 8) {\n                // 0x40c532\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40c53c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40c54c\n                int64_t v80 = v74 - v79; // 0x40c550\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40c55b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40c56b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40c569\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40c5c6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40c5ce\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40c416\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40c41a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40c613\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40c42e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40c2be;\n            } else {\n                goto lab_0x40c43c;\n            }\n        }\n    }\n  lab_0x40c2b0:;\n    int64_t v93 = v23; // 0x40c0d0\n    int64_t v94 = v22; // 0x40c0d0\n    int64_t v95 = v21; // 0x40c0d0\n    goto lab_0x40c2b0_2;\n  lab_0x40c1f5:;\n    int64_t * mem3 = malloc(size); // 0x40c1f5\n    int64_t v97 = (int64_t)&g2; // 0x40c200\n    int64_t v98; // 0x40c0d0\n    int64_t path; // 0x40c0d0\n    if (mem3 == NULL) {\n        goto lab_0x40c1d2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40c1f5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40c216;\n    }\n  lab_0x40c10a:;\n    int64_t str = v1 == NULL ? (int64_t)&g2 : (int64_t)v1; // 0x40c0fd\n    char v100 = *v3; // 0x40c10a\n    int64_t v101; // 0x40c0d0\n    if (v100 == 0) {\n        // 0x40c164\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40c0d0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40c0d0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40c150\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40c157;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40c120\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40c12d\n        char v107 = *(char *)v106; // 0x40c132\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40c164\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40c13b\n    v104 = v103 + 1;\n  lab_0x40c157:\n    // 0x40c164\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40c1d2:;\n    char * v108 = (char *)v97;\n    g136 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40c10a;\n  lab_0x40c216:;\n    int64_t v109 = v98 + path; // 0x40c216\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40c242\n    v24 = (int64_t)&g2;\n    if (fd >= 0) {\n        // 0x40c271\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40c5a2\n            close(fd);\n            v24 = (int64_t)&g2;\n        } else {\n            // 0x40c295\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40c2b0_2:;\n                uint64_t v96 = *v32; // 0x40c2b0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40c43c;\n                } else {\n                    goto lab_0x40c2be;\n                }\n            }\n          lab_0x40c44f:\n            // 0x40c44f\n            function_40aa20(v27, v19);\n            v24 = (int64_t)&g2;\n            if (v18 != 0) {\n                // 0x40c46e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40c254;\n  lab_0x40c1bb:;\n    int64_t * mem4 = malloc(size2); // 0x40c1bb\n    v97 = (int64_t)&g2;\n    if (mem4 != NULL) {\n        // 0x40c261\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40c216;\n    } else {\n        goto lab_0x40c1d2;\n    }\n  lab_0x40c254:\n    // 0x40c254\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40c1d2;\n}\n"
        },
        {
            "funcName": "function_40c640",
            "funcStartAddr": "40c640",
            "funcEndAddr": "40c757",
            "decompiledFuncCode": "int64_t function_40c640(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    int64_t v1 = a1 / 4 + 475 + (int64_t)(a1 % 4 == 0); // 0x40c66e\n    int32_t v2 = (a6 >> 2) + 475 + (int32_t)(a6 % 4 == 0); // 0x40c68a\n    int32_t v3 = v1; // 0x40c693\n    int32_t v4 = ((int32_t)(0x51eb851f * (0x100000000 * v1 >> 32) / 0x100000000) >> 3) - (v3 >> 31); // 0x40c6a4\n    int32_t v5 = v4 - (int32_t)(-25 * v4 + v3 < 0); // 0x40c6b4\n    int32_t v6 = v2 / 25; // 0x40c6c8\n    int32_t v7 = v6 - (int32_t)(-25 * v6 + v2 < 0); // 0x40c6d9\n    return (0x100000000 * a5 >> 32) - (0x100000000 * a10 >> 32) + 60 * ((0x100000000 * a4 >> 32) - (0x100000000 * a9 >> 32) + 60 * ((0x100000000 * a3 >> 32) - (0x100000000 * a8 >> 32) + 24 * (365 * (a1 - (int64_t)a6) + a2 - (0x100000000 * a7 >> 32) + (int64_t)(v3 - v2 - v5 + (v5 >> 2) + v7 - (v7 >> 2)))));\n}\n"
        },
        {
            "funcName": "function_40c760",
            "funcStartAddr": "40c760",
            "funcEndAddr": "40c7f1",
            "decompiledFuncCode": "int64_t function_40c760(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int32_t a5, uint64_t a6, int64_t a7) {\n    if (a7 != 0) {\n        uint32_t v1 = *(int32_t *)a7; // 0x40c76e\n        uint32_t v2 = *(int32_t *)(a7 + 4); // 0x40c773\n        uint32_t v3 = *(int32_t *)(a7 + 8); // 0x40c779\n        uint32_t v4 = *(int32_t *)(a7 + 28); // 0x40c77f\n        int32_t v5 = *(int32_t *)(a7 + 20); // 0x40c785\n        int64_t v6 = function_40c640(a1, a2, (int64_t)a3, (int64_t)a4, (int64_t)a5, v5, (int64_t)v4, (int64_t)v3, (int64_t)v2, (int64_t)v1); // 0x40c789\n        int64_t result = v6 + a6; // 0x40c792\n        if (((result ^ v6) & (result ^ a6)) >= 0) {\n            // 0x40c797\n            return result;\n        }\n    }\n    if (a6 >= 0) {\n        int64_t v7 = a6 - 0x7ffffffffffffffd; // 0x40c7bd\n        int64_t result2 = v7 < 0 == (0x7ffffffffffffffc - a6 & a6) < 0 == (v7 != 0) ? a6 - 1 : 0x7fffffffffffffff; // 0x40c7c1\n        return result2;\n    }\n    // 0x40c7d0\n    if (a6 > -0x7fffffffffffffff) {\n        // 0x40c797\n        return -0x8000000000000000;\n    }\n    // 0x40c7df\n    return a6 + 1;\n}\n"
        },
        {
            "funcName": "function_40c800",
            "funcStartAddr": "40c800",
            "funcEndAddr": "40c8bf",
            "decompiledFuncCode": "int64_t function_40c800(int64_t a1, int64_t result, uint64_t a3) {\n    if (result == 0 != a3 != 0) {\n        // 0x40c82d\n        return result;\n    }\n    int64_t v1 = ((int64_t)a3 >> 1) + a3 % 2; // 0x40c86b\n    if (v1 != 0 == (v1 != a3)) {\n        // 0x40c82d\n        return result;\n    }\n    int64_t v2 = v1; // 0x40c871\n    while (v2 != 0) {\n        // 0x40c878\n        v2 = (v2 >> 1) + v2 % 2;\n    }\n    // 0x40c82d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c8c0",
            "funcStartAddr": "40c8c0",
            "funcEndAddr": "40ccfa",
            "decompiledFuncCode": "int64_t function_40c8c0(int64_t a1, int64_t a2, int64_t * a3) {\n    int32_t v1 = *(int32_t *)(a1 + 12); // 0x40c8db\n    uint32_t v2 = *(int32_t *)(a1 + 4); // 0x40c8e3\n    uint32_t v3 = *(int32_t *)(a1 + 8); // 0x40c8f4\n    int32_t v4 = *(int32_t *)(a1 + 16); // 0x40c8f7\n    int32_t v5 = v4 / 12; // 0x40c915\n    int32_t v6 = -12 * v5 + v4; // 0x40c91f\n    int32_t v7 = *(int32_t *)(a1 + 20); // 0x40c92a\n    int64_t v8 = (int64_t)(v5 - (int32_t)(v6 < 0)) + (int64_t)v7; // 0x40c931\n    int64_t v9 = 0; // 0x40c937\n    if (v8 % 4 == 0) {\n        // 0x40c939\n        v9 = 1;\n        if (v8 == (v8 >> 63 & 100)) {\n            // 0x40cba0\n            v9 = v8 < 0;\n        }\n    }\n    // 0x40c975\n    int64_t v10; // 0x40c8c0\n    int32_t v11 = v10;\n    int64_t v12 = v9;\n    uint16_t v13 = *(int16_t *)(2 * (v12 + (int64_t)((v6 >> 31 & 12) + v6) + 4 * v12) + (int64_t)&g15); // 0x40c9a7\n    int32_t v14 = v11 - 59; // 0x40c9c0\n    int64_t v15 = v14 == 0 | v14 < 0 != (58 - v11 & v11) < 0 ? v10 & 0xffffffff : 59; // 0x40c9c3\n    int64_t v16 = (int32_t)v15 >= 0 ? v15 : 0; // 0x40c9d7\n    int64_t v17 = function_40c640(v8, (int64_t)v1 - 1 + (int64_t)v13, (int64_t)v3, (int64_t)v2, v16, 70, 0, 0, 0, -v12 & 0xffffffff); // 0x40ca00\n    int64_t v18; // bp-280, 0x40c8c0\n    int64_t v19 = &v18; // 0x40ca05\n    int64_t * v20 = (int64_t *)(v19 + 16);\n    int64_t v21 = v19 + 96; // 0x40ca53\n    int64_t v22 = v19 + 80; // 0x40ca58\n    int64_t * v23 = (int64_t *)v22;\n    int64_t * v24 = (int64_t *)(v19 - 16);\n    int32_t * v25 = (int32_t *)(v19 + 28);\n    int32_t * v26 = (int32_t *)(v19 + 12);\n    int32_t * v27 = (int32_t *)(v19 + 24);\n    int64_t * v28 = (int64_t *)(v19 + 32);\n    int64_t v29 = v19 + 128;\n    int32_t * v30 = (int32_t *)v29;\n    int64_t v31 = v19 + 40;\n    int32_t * v32 = (int32_t *)v31;\n    int32_t v33 = 6; // 0x40ca23\n    int64_t v34 = v17; // 0x40ca23\n    int64_t v35 = v17;\n    uint64_t v36 = 0;\n    int64_t v37 = function_40c800(*v20, v22, v21); // 0x40ca5d\n    int64_t v38 = *v23; // 0x40ca62\n    *v24 = v37;\n    int64_t v39 = function_40c760(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g141); // 0x40ca84\n    while (v38 != v39) {\n        // 0x40ca94\n        if (v38 != v35 && v38 == v34) {\n            int32_t v40 = *v30; // 0x40ca9e\n            if (v40 < 0) {\n                goto lab_0x40cac7_3;\n            }\n            int32_t v41 = *v32; // 0x40caab\n            if (v41 < 0) {\n                if (v36 <= (int64_t)(v40 != 0)) {\n                    goto lab_0x40cac7_3;\n                }\n            } else {\n                if (v41 != 0 != v40 != 0) {\n                    goto lab_0x40cac7_3;\n                }\n            }\n        }\n        // 0x40ca28\n        v33--;\n        if (v33 == 0) {\n            // 0x40cb87\n            return -1;\n        }\n        // 0x40ca31\n        *v23 = v39;\n        v34 = v35;\n        v35 = v38;\n        v36 = (int64_t)(*v30 != 0);\n        v37 = function_40c800(*v20, v22, v21);\n        v38 = *v23;\n        *v24 = v37;\n        v39 = function_40c760(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g141);\n    }\n    int32_t v42 = *v32; // 0x40cbd0\n    int32_t v43 = *v30; // 0x40cbd4\n    int64_t v44 = *(int64_t *)(v19 + 72); // 0x40cbdb\n    *(char *)v31 = (char)(v42 == 0);\n    int64_t v45 = v38; // 0x40cbf4\n    int64_t v46 = v44; // 0x40cbf4\n    if (v43 >= 0 && v42 >= 0 && v42 == 0 != (v43 == 0)) {\n        int64_t * v47 = (int64_t *)v31; // 0x40cc10\n        *v47 = v8;\n        int64_t v48 = v19 + 88; // 0x40cc4b\n        int64_t * v49 = (int64_t *)v48;\n        int64_t v50 = v19 + 160;\n        int64_t v51 = v38; // 0x40cc15\n        int64_t v52 = 0x92c70; // 0x40cc15\n        while (true) {\n            int64_t v53 = -v52; // 0x40cc42\n            int64_t v54 = v53 & 0xffffffff; // 0x40cc42\n            int64_t v55 = 0x100000000 * v53 >> 32; // 0x40cc45\n            int64_t v56 = v55 + v51; // 0x40cc48\n            *v49 = v56;\n            int64_t v57 = v51; // 0x40cc50\n            int32_t v58 = 2; // 0x40cc50\n            int64_t v59 = v54; // 0x40cc50\n            int32_t v60 = 2; // 0x40cc50\n            int64_t v61 = v54; // 0x40cc50\n            if (((v56 ^ v55) & (v56 ^ v51)) >= 0) {\n              lab_0x40cc6e:\n                // 0x40cc6e\n                function_40c800(*v20, v48, v50);\n                int32_t v62 = *(int32_t *)(v19 + 192); // 0x40cc85\n                if (v42 == 0 != (v62 == 0) != v62 >= 0) {\n                    // break -> 0x40cc9a\n                    break;\n                }\n                // 0x40ccf0\n                v59 = v61;\n                v58 = v60;\n                v57 = *v23;\n            }\n            int64_t v63 = 2 * v52; // 0x40cc37\n            int64_t v64 = v57;\n            int32_t v65 = v58; // 0x40c8c0\n            int64_t v66 = v59; // 0x40cc52\n            while (v65 != 1) {\n                int64_t v67 = v66 + v63; // 0x40cc52\n                v66 = v67 & 0xffffffff;\n                int64_t v68 = 0x100000000 * v67 >> 32; // 0x40cc5b\n                int64_t v69 = v68 + v64; // 0x40cc64\n                *v49 = v69;\n                v65 = 1;\n                v60 = 1;\n                v61 = v66;\n                if (((v69 ^ v68) & (v69 ^ v64)) >= 0) {\n                    goto lab_0x40cc6e;\n                }\n            }\n            int64_t v70 = v52 + 0x92c70; // 0x40cc20\n            v45 = v64;\n            v46 = v44;\n            v51 = v64;\n            v52 = v70 & 0xffffffff;\n            if ((int32_t)v70 == 0x100dc400) {\n                goto lab_0x40cad0;\n            }\n        }\n        // 0x40cc9a\n        *v24 = v50;\n        int64_t v71 = function_40c760(*v47, *v28, *v27, *v26, *v25, *v49, (int64_t)&g141); // 0x40ccc6\n        *v23 = v71;\n        function_40c800(*v20, v22, v21);\n        v45 = *v23;\n        v46 = v44;\n    }\n    goto lab_0x40cad0;\n  lab_0x40cac7_3:\n    // 0x40cac7\n    v45 = v38;\n    v46 = *(int64_t *)(v19 + 72);\n    goto lab_0x40cad0;\n  lab_0x40cad0:;\n    int64_t v72 = *(int64_t *)(v19 + 56); // 0x40cad8\n    int32_t v73 = *(int32_t *)v21; // 0x40cae0\n    int32_t v74 = *(int32_t *)(v19 + 64); // 0x40cae4\n    int64_t v75 = *(int64_t *)(v19 + 48); // 0x40caeb\n    *(int64_t *)v75 = v45 - (int64_t)*(int32_t *)(v19 + 68) - v72;\n    int64_t result = v45; // 0x40caf5\n    if (v73 != v74) {\n        int32_t v76 = *v25; // 0x40caf9\n        int64_t v77 = (int64_t)(v73 == 60 == v74 < 1) - (int64_t)v76 + (int64_t)v74; // 0x40cb15\n        int64_t v78 = v77 + v45; // 0x40cb18\n        *v23 = v78;\n        if (((v78 ^ v45) & (v78 ^ v77)) < 0) {\n            // 0x40cb87\n            return -1;\n        }\n        // 0x40cb22\n        *(int64_t *)(v19 + 160) = v78;\n        if (*v20 == 0) {\n            // 0x40cb87\n            return -1;\n        }\n        // 0x40cb43\n        result = *v23;\n    }\n    int128_t v79 = __asm_movdqa(*(int128_t *)v21); // 0x40cb48\n    int128_t v80 = __asm_movdqa(*(int128_t *)(v19 + 112)); // 0x40cb4e\n    int128_t v81 = __asm_movdqa(*(int128_t *)v29); // 0x40cb54\n    __asm_movups(*(int128_t *)v46, v79);\n    __asm_movups(*(int128_t *)(v46 + 16), v80);\n    __asm_movups(*(int128_t *)(v46 + 32), v81);\n    *(int64_t *)(v46 + 48) = *(int64_t *)(v19 + 144);\n    // 0x40cb87\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cd00",
            "funcStartAddr": "40cd00",
            "funcEndAddr": "40cd1c",
            "decompiledFuncCode": "int64_t function_40cd00(int64_t a1) {\n    // 0x40cd00\n    tzset();\n    return function_40c8c0(a1, 0x401920, &g137);\n}\n"
        },
        {
            "funcName": "function_40cd20",
            "funcStartAddr": "40cd20",
            "funcEndAddr": "40cd7d",
            "decompiledFuncCode": "int64_t function_40cd20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40cd20\n    return function_401860();\n}\n"
        },
        {
            "funcName": "function_40cd80",
            "funcStartAddr": "40cd80",
            "funcEndAddr": "40cd81",
            "decompiledFuncCode": "int64_t function_40cd80(void) {\n    // 0x40cd80\n    int64_t result; // 0x40cd80\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cd90",
            "funcStartAddr": "40cd90",
            "funcEndAddr": "40cda8",
            "decompiledFuncCode": "int64_t function_40cd90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40cd90\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g20);\n}\n"
        },
        {
            "funcName": "function_40cda8",
            "funcStartAddr": "40cda8",
            "funcEndAddr": "40cdc8",
            "decompiledFuncCode": "int64_t function_40cda8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g16; // 0x40cdb2\n    while (*(int64_t *)v1 != -1) {\n        // 0x40cdb3\n        v1 -= 8;\n    }\n    // 0x40cdc4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_pr.elf"
}