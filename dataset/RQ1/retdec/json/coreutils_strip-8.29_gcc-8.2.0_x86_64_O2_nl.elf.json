{
    "funcInfo": [
        {
            "funcName": "function_401bf0",
            "funcStartAddr": "401bf0",
            "funcEndAddr": "401bf5",
            "decompiledFuncCode": "int64_t function_401bf0(void) {\n    // 0x401bf0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bf5",
            "funcStartAddr": "401bf5",
            "funcEndAddr": "401bfa",
            "decompiledFuncCode": "int64_t function_401bf5(void) {\n    // 0x401bf5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bfa",
            "funcStartAddr": "401bfa",
            "funcEndAddr": "401bff",
            "decompiledFuncCode": "int64_t function_401bfa(void) {\n    // 0x401bfa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bff",
            "funcStartAddr": "401bff",
            "funcEndAddr": "401c04",
            "decompiledFuncCode": "int64_t function_401bff(void) {\n    // 0x401bff\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c04",
            "funcStartAddr": "401c04",
            "funcEndAddr": "401c09",
            "decompiledFuncCode": "int64_t function_401c04(void) {\n    // 0x401c04\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c09",
            "funcStartAddr": "401c09",
            "funcEndAddr": "401c0e",
            "decompiledFuncCode": "int64_t function_401c09(void) {\n    // 0x401c09\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c0e",
            "funcStartAddr": "401c0e",
            "funcEndAddr": "401c13",
            "decompiledFuncCode": "int64_t function_401c0e(void) {\n    // 0x401c0e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c13",
            "funcStartAddr": "401c13",
            "funcEndAddr": "401c18",
            "decompiledFuncCode": "int64_t function_401c13(void) {\n    // 0x401c13\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c20",
            "funcStartAddr": "401c20",
            "funcEndAddr": "4021f8",
            "decompiledFuncCode": "int64_t function_401c20(int64_t a1, int64_t a2) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x401c32\n    function_402e00(a2);\n    setlocale(LC_ALL, (char *)&g5);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401c20\n    function_414e30(0x402bd0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    g53 = 0;\n    bool v3; // 0x401c20\n    int64_t v4 = v3 ? -1 : 1;\n    int64_t v5 = 1; // 0x401c84\n    int64_t v6 = 0x7fffffffffffffff; // 0x401c84\n    int64_t v7; // 0x401c20\n    int64_t v8; // 0x401c20\n    int64_t v9; // 0x401c20\n    int64_t v10; // 0x401c20\n    int64_t v11; // 0x401c20\n    int64_t v12; // 0x401c20\n    int64_t v13; // 0x401c20\n    int64_t v14; // 0x401c20\n    int64_t v15; // 0x401c20\n    while (true) {\n      lab_0x401c88_2:;\n        int64_t v16 = v6;\n        v13 = v12;\n        int64_t v17 = v5;\n        int32_t v18 = function_406950(v1, a2, \"h:b:f:v:i:pl:s:w:n:d:\", &g6, 0, v13); // 0x401ca0\n        switch (v18) {\n            case -1: {\n                if (v17 == 0) {\n                    // break -> 0x4021ee\n                    break;\n                }\n                int64_t v19 = (int64_t)g29; // 0x402008\n                int64_t v20 = -1; // 0x402008\n                int64_t v21 = 0; // 0x402008\n                while (v20 != 0) {\n                    int64_t v22 = v19;\n                    v20--;\n                    v19 = v22 + v4;\n                    v21 = v20;\n                    if (*(char *)v22 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v21 = 0;\n                }\n                int64_t v23 = -1 - v21;\n                int64_t v24 = -2 - v21; // 0x40200d\n                int64_t v25 = 3 * v24; // 0x402014\n                g63 = v25;\n                int64_t str = function_404fe0(v25 + 1); // 0x402024\n                char (*str2)[3] = g29; // 0x402029\n                g64 = str;\n                strcpy(stpcpy(stpcpy((char *)str, str2), str2), str2);\n                int64_t v26 = 2 * v24; // 0x402058\n                g61 = v26;\n                int64_t str3 = function_404fe0(v26 | 1); // 0x402068\n                char (*str4)[3] = g29; // 0x40206d\n                g62 = str3;\n                strcpy(stpcpy((char *)str3, str4), str4);\n                g59 = v24;\n                int64_t str5 = function_404fe0(v23); // 0x40209b\n                g60 = str5;\n                strcpy((char *)str5, g29);\n                function_402cb0(&g56);\n                int64_t v27 = (int64_t)g30; // 0x4020d2\n                int64_t v28 = -1; // 0x4020d2\n                int64_t v29 = 0; // 0x4020d2\n                while (v28 != 0) {\n                    int64_t v30 = v27;\n                    v28--;\n                    v27 = v30 + v4;\n                    v29 = v28;\n                    if (*(char *)v30 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v29 = 0;\n                }\n                int64_t v31 = -2 - v29; // 0x4020e1\n                int64_t v32 = function_404fe0(v31 + 1 + (int64_t)g24); // 0x4020e9\n                g55 = (char *)v32;\n                int64_t v33 = v31 + (int64_t)g24; // 0x402107\n                int64_t * set_mem = memset((int64_t *)v32, 32, (int32_t)v33); // 0x40210d\n                g65 = &g71;\n                *(char *)(v33 + (int64_t)set_mem) = 0;\n                g54 = g28;\n                g72 = (int64_t **)g33;\n                uint32_t v34 = *(int32_t *)0x61b31c; // 0x40213e\n                int64_t v35; // 0x401c20\n                if (v34 == (int32_t)a1) {\n                    // 0x4021e0\n                    v35 = function_402420((int64_t)\"-\") & 0xffffffff;\n                } else {\n                    int64_t v36 = v34; // 0x40213e\n                    int64_t v37 = v36; // 0x40214d\n                    int64_t v38 = v17; // 0x40214d\n                    v35 = v17;\n                    if (v1 > v36) {\n                        int64_t v39 = *(int64_t *)((0x100000000 * v37 >> 29) + a2); // 0x402152\n                        int64_t v40 = v38 & 0xffffffff & function_402420(v39); // 0x40215c\n                        g43 = &g44;\n                        v38 = v40;\n                        v35 = v40;\n                        while (v1 > (int64_t)&g44) {\n                            // 0x402150\n                            v39 = *(int64_t *)((0x100000000 * (int64_t)&g44 >> 29) + a2);\n                            v40 = v38 & 0xffffffff & function_402420(v39);\n                            g43 = &g44;\n                            v38 = v40;\n                            v35 = v40;\n                        }\n                    }\n                }\n                uint64_t v41 = v35;\n                if (g53 == 0 || (int32_t)function_405ae0((int64_t)g47, 32) != -1) {\n                    // 0x40217b\n                    return v41 % 256 ^ 1;\n                }\n                // 0x4021ae\n                error(1, *__errno_location(), \"-\");\n                v9 = v33;\n                v10 = v23;\n                goto lab_0x4021c6;\n            }\n            case 105: {\n                char * v42 = dcgettext(NULL, \"invalid line number increment\", 5); // 0x401f34\n                int64_t v43 = function_405360((int64_t)g85, 1, v16, (int64_t *)&g5, (int64_t)v42, 0); // 0x401f53\n                g27 = v43;\n                v14 = v17;\n                v11 = 0;\n                v7 = v16;\n                goto lab_0x401c88;\n            }\n            default: {\n                if (v18 > 105) {\n                    if (v18 == 112) {\n                        // 0x401f68\n                        g26 = 0;\n                        v14 = v17;\n                        v11 = v13;\n                        v7 = v16;\n                        goto lab_0x401c88;\n                    } else {\n                        if (v18 > 112) {\n                            // 0x401cc3\n                            v14 = 0;\n                            v11 = v13;\n                            v7 = v16;\n                            switch (v18) {\n                                case 118: {\n                                    char * v44 = dcgettext(NULL, \"invalid starting line number\", 5); // 0x401e14\n                                    int64_t v45 = function_405360((int64_t)g85, -0x8000000000000000, v16, (int64_t *)&g5, (int64_t)v44, 0); // 0x401e38\n                                    g28 = v45;\n                                    v14 = v17;\n                                    v11 = 0;\n                                    v7 = v16;\n                                    // break -> 0x401c88\n                                    break;\n                                }\n                                case 119: {\n                                    char * v46 = dcgettext(NULL, \"invalid line number field width\", 5); // 0x401ef4\n                                    int64_t v47 = function_405360((int64_t)g85, 1, 0x7fffffff, (int64_t *)&g5, (int64_t)v46, 0); // 0x401f15\n                                    g24 = v47;\n                                    v14 = v17;\n                                    v11 = 0;\n                                    v7 = v16;\n                                    // break -> 0x401c88\n                                    break;\n                                }\n                                case 115: {\n                                    // 0x401ce0\n                                    *(int64_t *)0x61b288 = (int64_t)g85;\n                                    v14 = v17;\n                                    v11 = v13;\n                                    v7 = v16;\n                                    // break -> 0x401c88\n                                    break;\n                                }\n                            }\n                            goto lab_0x401c88;\n                        } else {\n                            if (v18 == 108) {\n                                char * v48 = dcgettext(NULL, \"invalid line number of blank lines\", 5); // 0x401f84\n                                int64_t v49 = function_405360((int64_t)g85, 1, v16, (int64_t *)&g5, (int64_t)v48, 0); // 0x401fa3\n                                g25 = v49;\n                                v14 = v17;\n                                v11 = 0;\n                                v7 = v16;\n                                goto lab_0x401c88;\n                            } else {\n                                // 0x401cf9\n                                v14 = 0;\n                                v11 = v13;\n                                v7 = v16;\n                                if (v18 != 110) {\n                                    goto lab_0x401c88;\n                                } else {\n                                    int64_t v50 = (int64_t)g85; // 0x401cfe\n                                    int64_t v51 = 3; // 0x401d12\n                                    int64_t v52 = v50;\n                                    int64_t v53 = (int64_t)\"ln\";\n                                    unsigned char v54 = *(char *)v52; // 0x401d12\n                                    char v55 = *(char *)v53; // 0x401d12\n                                    char v56 = v55; // 0x401d12\n                                    bool v57 = false; // 0x401d12\n                                    while (v54 == v55) {\n                                        v51--;\n                                        int64_t v58 = v53 + v4; // 0x401d12\n                                        int64_t v59 = v52 + v4; // 0x401d12\n                                        v56 = v54;\n                                        v57 = true;\n                                        if (v51 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v52 = v59;\n                                        v53 = v58;\n                                        v54 = *(char *)v52;\n                                        v55 = *(char *)v53;\n                                        v56 = v55;\n                                        v57 = false;\n                                    }\n                                    unsigned char v60 = v56;\n                                    if ((v54 >= v60 && !v57) != v54 < v60) {\n                                        // 0x401fb4\n                                        if (strcmp(g85, \"rn\") == 0) {\n                                            // 0x40218d\n                                            *(int64_t *)&g23 = (int64_t)\"%*ld%s\";\n                                            v14 = v17;\n                                            v11 = v13;\n                                            v7 = v16;\n                                            goto lab_0x401c88;\n                                        } else {\n                                            // 0x401fc9\n                                            v9 = v16;\n                                            v10 = v50;\n                                            if (strcmp(g85, \"rz\") != 0) {\n                                                goto lab_0x4021c6;\n                                            } else {\n                                                // 0x401fde\n                                                *(int64_t *)&g23 = (int64_t)\"%0*ld%s\";\n                                                v14 = v17;\n                                                v11 = v13;\n                                                v7 = v16;\n                                                goto lab_0x401c88;\n                                            }\n                                        }\n                                    } else {\n                                        // 0x401d21\n                                        *(int64_t *)&g23 = (int64_t)\"%-*ld%s\";\n                                        v14 = v17;\n                                        v11 = v13;\n                                        v7 = v16;\n                                        goto lab_0x401c88;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v18 == 98) {\n                        int64_t v61 = function_4022e0(&g33, &g71, &g68); // 0x401dd7\n                        v14 = v17;\n                        v11 = v13;\n                        v7 = v16;\n                        if ((char)v61 != 0) {\n                            goto lab_0x401c88;\n                        } else {\n                            // 0x401de4\n                            function_404a20((int64_t)g85);\n                            v15 = (int64_t)\"invalid body numbering style: %s\";\n                            v8 = v16;\n                            goto lab_0x401ec5;\n                        }\n                    } else {\n                        if (v18 > 98) {\n                            switch (v18) {\n                                case 102: {\n                                    int64_t v62 = function_4022e0(&g31, &g69, &g66); // 0x401e9f\n                                    v14 = v17;\n                                    v11 = v13;\n                                    v7 = v16;\n                                    if ((char)v62 != 0) {\n                                        goto lab_0x401c88;\n                                    } else {\n                                        // 0x401eac\n                                        function_404a20((int64_t)g85);\n                                        v15 = (int64_t)\"invalid footer numbering style: %s\";\n                                        v8 = v16;\n                                        goto lab_0x401ec5;\n                                    }\n                                }\n                                case 104: {\n                                    int64_t v63 = function_4022e0(&g32, &g70, &g67); // 0x401e5f\n                                    v14 = v17;\n                                    v11 = v13;\n                                    v7 = v16;\n                                    if ((char)v63 != 0) {\n                                        goto lab_0x401c88;\n                                    } else {\n                                        // 0x401e6c\n                                        function_404a20((int64_t)g85);\n                                        v15 = (int64_t)\"invalid header numbering style: %s\";\n                                        v8 = v16;\n                                        goto lab_0x401ec5;\n                                    }\n                                }\n                                default: {\n                                    // 0x401d55\n                                    v14 = 0;\n                                    v11 = v13;\n                                    v7 = v16;\n                                    if (v18 == 100) {\n                                        // 0x401d5a\n                                        *(int64_t *)&g29 = (int64_t)g85;\n                                        v14 = v17;\n                                        v11 = v13;\n                                        v7 = v16;\n                                    }\n                                    goto lab_0x401c88;\n                                }\n                            }\n                        } else {\n                            if (v18 == -131) {\n                                // 0x401d77\n                                function_404ea0((int64_t)g46, \"nl\", \"GNU coreutils\", (int64_t)g34, \"Scott Bartram\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            // 0x401db0\n                            v14 = 0;\n                            v11 = v13;\n                            v7 = v16;\n                            if (v18 == -130) {\n                                // 0x401dbd\n                                function_4027c0(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x401c88;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4021c6:\n    // 0x4021c6\n    function_404a20(v10);\n    v15 = (int64_t)\"invalid line numbering format: %s\";\n    v8 = v9;\n    goto lab_0x401ec5;\n  lab_0x401c88:\n    // 0x401c88\n    v5 = v14;\n    v12 = v11;\n    v6 = v7;\n    goto lab_0x401c88_2;\n  lab_0x401ec5:\n    // 0x401ec5\n    error(0, 0, dcgettext(NULL, (char *)v15, 5));\n    v14 = 0;\n    v11 = v13;\n    v7 = v8;\n    goto lab_0x401c88;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402200",
            "funcEndAddr": "40222b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402200\n    int64_t v1; // 0x402200\n    __libc_start_main(0x401c20, (int32_t)a4, (char **)&v1, (void (*)())0x414dc0, (void (*)())0x414e20, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40222b",
            "funcStartAddr": "40222b",
            "funcEndAddr": "40224a",
            "decompiledFuncCode": "int64_t function_40222b(void) {\n    // 0x40222b\n    return &g45;\n}\n"
        },
        {
            "funcName": "function_40224a",
            "funcStartAddr": "40224a",
            "funcEndAddr": "402281",
            "decompiledFuncCode": "int64_t function_40224a(void) {\n    // 0x40224a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402281",
            "funcStartAddr": "402281",
            "funcEndAddr": "4022d8",
            "decompiledFuncCode": "int64_t function_402281(void) {\n    // 0x402281\n    if (g50 != 0) {\n        // 0x4022d7\n        int64_t result; // 0x402281\n        return result;\n    }\n    int64_t v1 = g51; // 0x4022b4\n    int64_t result2; // 0x4022c6\n    if (g51 >= ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x4022c6\n        result2 = function_40222b();\n        g50 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x4022b6\n        v1++;\n    }\n    // 0x4022aa\n    g51 = v1;\n    // 0x4022c6\n    result2 = function_40222b();\n    g50 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4022d8",
            "funcStartAddr": "4022d8",
            "funcEndAddr": "4022dd",
            "decompiledFuncCode": "int64_t function_4022d8(void) {\n    // 0x4022d8\n    return function_40224a();\n}\n"
        },
        {
            "funcName": "function_4022e0",
            "funcStartAddr": "4022e0",
            "funcEndAddr": "402420",
            "decompiledFuncCode": "int64_t function_4022e0(int64_t ** a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)g85; // 0x4022e0\n    unsigned char v2 = *g85; // 0x4022e7\n    if (v2 == 110) {\n        // 0x402390\n        *(int64_t *)a1 = v1;\n        return 1;\n    }\n    if (v2 <= 110) {\n        // 0x402370\n        if (v2 != 97) {\n            // 0x40235e\n            return 0;\n        }\n        // 0x402390\n        *(int64_t *)a1 = v1;\n        return 1;\n    }\n    if (v2 != 112) {\n        // 0x402380\n        if (v2 != 116) {\n            // 0x40235e\n            return 0;\n        }\n        // 0x402390\n        *(int64_t *)a1 = v1;\n        return 1;\n    }\n    int64_t v3 = (int64_t)a2;\n    g85 = (char *)(v1 + 1);\n    *(int64_t *)a1 = v1;\n    char * str = g85; // 0x402316\n    *a2 = 0;\n    *(int64_t *)(v3 + 32) = (int64_t)a3;\n    *(int64_t *)(v3 + 8) = 0;\n    *(int64_t *)(v3 + 40) = 0;\n    g86 = 710;\n    int64_t v4 = function_413d70((int64_t)str, (int64_t)strlen(str), v3); // 0x402354\n    if (v4 == 0) {\n        // 0x40235e\n        return 1;\n    }\n    // 0x402399\n    error(1, 0, \"%s\", (char *)v4);\n    __printf_chk(1, g23);\n    int64_t result = g54; // 0x4023db\n    int64_t v5 = g27 + result; // 0x4023e9\n    if (result > v5) {\n        // 0x4023fd\n        error(1, (int32_t)\"line number overflow\" ^ (int32_t)\"line number overflow\", dcgettext(NULL, \"line number overflow\", 5));\n        return &g88;\n    }\n    // 0x4023f1\n    g54 = v5;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402420",
            "funcStartAddr": "402420",
            "funcEndAddr": "4027c0",
            "decompiledFuncCode": "int64_t function_402420(int64_t file_path) {\n    // 0x402420\n    bool v1; // 0x402420\n    int64_t v2 = v1 ? -1 : 1;\n    int64_t v3 = (int64_t)\"-\"; // 0x402420\n    int64_t v4 = file_path; // 0x402420\n    int64_t v5 = 2; // 0x402442\n    unsigned char v6 = *(char *)v4; // 0x402442\n    char v7 = *(char *)v3; // 0x402442\n    char v8 = v7; // 0x402442\n    bool v9 = false; // 0x402442\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    struct _IO_FILE * stream; // 0x402420\n    if ((v6 >= v10 && !v9) != v6 < v10) {\n        struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x402748\n        stream = file;\n        if (file == NULL) {\n            // 0x402759\n            error(0, *__errno_location(), \"%s\", (char *)function_4048a0(0, 3, file_path));\n            return (int32_t)&g88 ^ (int32_t)&g88;\n        }\n    } else {\n        // 0x402451\n        g53 = 1;\n        stream = g47;\n    }\n    int64_t v11 = (int64_t)stream;\n    int64_t v12; // 0x402420\n    function_402c80(v11, 2, v12);\n    int64_t n; // 0x40248d\n    if (function_402de0(&g56, v11) != 0) {\n        while (true) {\n          lab_0x402486:\n            // 0x402486\n            n = (int64_t)g57 - 1;\n            if (g57 == 2 || n == 0) {\n                goto lab_0x4024d5;\n            } else {\n                // 0x402497\n                if (*(int16_t *)g58 != *(int16_t *)&g29) {\n                    goto lab_0x4024d5;\n                } else {\n                    // 0x4024ae\n                    if (n == g63) {\n                        // 0x402680\n                        if (memcmp((int64_t *)g58, (int64_t *)g64, (int32_t)n) != 0) {\n                            goto lab_0x4024bb;\n                        } else {\n                            // 0x40269a\n                            g65 = &g70;\n                            g72 = (int64_t **)g32;\n                            if (g26 == 0) {\n                                goto lab_0x40261a;\n                            } else {\n                                // 0x40260c\n                                g54 = g28;\n                                goto lab_0x40261a;\n                            }\n                        }\n                    } else {\n                        goto lab_0x4024bb;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4026e0:;\n    int64_t v13 = (int64_t)\"-\"; // 0x4026e5\n    int64_t v14 = 2; // 0x4026e5\n    if ((*(char *)stream & 32) != 0) {\n        // 0x402759\n        error(0, *__errno_location(), \"%s\", (char *)function_4048a0(0, 3, file_path));\n        return (int32_t)&g88 ^ (int32_t)&g88;\n    }\n    unsigned char v15 = *(char *)file_path; // 0x4026f2\n    char v16 = *(char *)v13; // 0x4026f2\n    int64_t v17 = file_path + v2; // 0x4026f2\n    char v18 = v16; // 0x4026f2\n    bool v19 = false; // 0x4026f2\n    while (v15 == v16) {\n        int64_t v20 = v14 - 1; // 0x4026f2\n        v13 += v2;\n        v14 = v20;\n        v18 = v15;\n        v19 = true;\n        if (v20 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v17;\n        v16 = *(char *)v13;\n        v17 += v2;\n        v18 = v16;\n        v19 = false;\n    }\n    unsigned char v21 = v18;\n    if ((v15 >= v21 && !v19) == v15 < v21) {\n        // 0x402720\n        clearerr_unlocked(stream);\n        return 1;\n    }\n    // 0x402700\n    if ((int32_t)function_405ae0(v11, v17) == -1) {\n        // 0x402759\n        error(0, *__errno_location(), \"%s\", (char *)function_4048a0(0, 3, file_path));\n        return (int32_t)&g88 ^ (int32_t)&g88;\n    }\n    // 0x402711\n    return 1;\n  lab_0x4024d5:;\n    char v22 = *(char *)g72; // 0x4024dc\n    int32_t n2; // 0x402420\n    if (v22 == 110) {\n        goto lab_0x40255e;\n    } else {\n        if (v22 > 110) {\n            if (v22 == 112) {\n                int64_t v23 = function_4146f0(g65, g58, n, 0, n, 0); // 0x402549\n                if (v23 == -2) {\n                    // 0x402794\n                    error(1, *__errno_location(), dcgettext(NULL, \"error in regular expression search\", 5));\n                    return &g88;\n                }\n                if (v23 != -1) {\n                    // 0x4024f7\n                    n2 = g57;\n                    goto lab_0x402508;\n                } else {\n                    goto lab_0x40255e;\n                }\n            } else {\n                // 0x4024ed\n                n2 = g57;\n                if (v22 != 116) {\n                    goto lab_0x402508;\n                } else {\n                    if (g57 < 2) {\n                        goto lab_0x40255e;\n                    } else {\n                        // 0x4024f7\n                        n2 = g57;\n                        goto lab_0x402508;\n                    }\n                }\n            }\n        } else {\n            // 0x402580\n            n2 = g57;\n            if (v22 != 97) {\n                goto lab_0x402508;\n            } else {\n                // 0x402584\n                if (g25 < 2) {\n                    // 0x4024f7\n                    n2 = g57;\n                    goto lab_0x402508;\n                } else {\n                    if (g57 < 2) {\n                        int64_t v24 = g52 + 1; // 0x4025a2\n                        g52 = v24;\n                        if (g25 != v24) {\n                            goto lab_0x40255e;\n                        } else {\n                            goto lab_0x4025b2;\n                        }\n                    } else {\n                        goto lab_0x4025b2;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40255e:\n    // 0x40255e\n    fputs_unlocked(g55, g46);\n    n2 = g57;\n    goto lab_0x402508;\n  lab_0x402508:\n    // 0x402508\n    fwrite_unlocked((int64_t *)g58, 1, n2, g46);\n    goto lab_0x402470;\n  lab_0x4024bb:\n    // 0x4024bb\n    if (n == g61) {\n        // 0x402640\n        if (memcmp((int64_t *)g58, (int64_t *)g62, (int32_t)n) != 0) {\n            goto lab_0x4024c8;\n        } else {\n            // 0x40265a\n            g65 = &g71;\n            g72 = (int64_t **)g33;\n            if (g26 != 0) {\n                // 0x40260c\n                g54 = g28;\n                goto lab_0x40261a;\n            } else {\n                goto lab_0x40261a;\n            }\n        }\n    } else {\n        goto lab_0x4024c8;\n    }\n  lab_0x402470:\n    // 0x402470\n    if (function_402de0(&g56, v11) == 0) {\n        // break -> 0x4026e0\n        goto lab_0x4026e0;\n    }\n    goto lab_0x402486;\n  lab_0x4024c8:\n    // 0x4024c8\n    if (n == g59) {\n        // 0x4025d0\n        if (memcmp((int64_t *)g58, (int64_t *)g60, (int32_t)n) != 0) {\n            goto lab_0x4024d5;\n        } else {\n            // 0x4025ea\n            g65 = &g69;\n            g72 = (int64_t **)g31;\n            if (g26 == 0) {\n                goto lab_0x40261a;\n            } else {\n                // 0x40260c\n                g54 = g28;\n                goto lab_0x40261a;\n            }\n        }\n    } else {\n        goto lab_0x4024d5;\n    }\n  lab_0x40261a:;\n    int64_t v25 = (int64_t)g46; // 0x40261a\n    int64_t * v26 = (int64_t *)(v25 + 40); // 0x402621\n    uint64_t v27 = *v26; // 0x402621\n    if (v27 >= *(int64_t *)(v25 + 48)) {\n        // 0x4026c8\n        __overflow(g46, 10);\n    } else {\n        // 0x40262f\n        *v26 = v27 + 1;\n        *(char *)v27 = 10;\n    }\n    goto lab_0x402470;\n  lab_0x4025b2:\n    // 0x4025b2\n    g52 = 0;\n    n2 = g57;\n    goto lab_0x402508;\n}\n"
        },
        {
            "funcName": "function_4027c0",
            "funcStartAddr": "4027c0",
            "funcEndAddr": "402ba5",
            "decompiledFuncCode": "int64_t function_4027c0(int32_t status) {\n    // 0x4027c0\n    if (status != 0) {\n        // 0x4027da\n        __fprintf_chk(g49, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4027ff\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402806\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Write each FILE to standard output, with line numbers added.\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"  -b, --body-numbering=STYLE      use STYLE for numbering body lines\\n  -d, --section-delimiter=CC      use CC for logical page delimiters\\n  -f, --footer-numbering=STYLE    use STYLE for numbering footer lines\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"  -h, --header-numbering=STYLE    use STYLE for numbering header lines\\n  -i, --line-increment=NUMBER     line number increment at each line\\n  -l, --join-blank-lines=NUMBER   group of NUMBER empty lines counted as one\\n  -n, --number-format=FORMAT      insert line numbers according to FORMAT\\n  -p, --no-renumber               do not reset line numbers for each section\\n  -s, --number-separator=STRING   add STRING after (possible) line number\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"  -v, --starting-line-number=NUMBER  first line number for each section\\n  -w, --number-width=NUMBER       use NUMBER columns for line numbers\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"\\nBy default, selects -v1 -i1 -l1 -sTAB -w6 -nrn -hn -bt -fn.\\nCC are two delimiter characters used to construct logical page delimiters,\\na missing second character implies :.  Type \\\\\\\\ for \\\\.  STYLE is one of:\\n\", 5), g46);\n    fputs_unlocked(dcgettext(NULL, \"\\n  a         number all lines\\n  t         number only nonempty lines\\n  n         number no lines\\n  pBRE      number only lines that contain a match for the basic regular\\n            expression, BRE\\n\\nFORMAT is one of:\\n\\n  ln   left justified, no leading zeros\\n  rn   right justified, no leading zeros\\n  rz   right justified, leading zeros\\n\\n\", 5), g46);\n    int64_t v1 = &g1; // bp-136, 0x402982\n    bool v2; // 0x4027c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402a08\n    int64_t v6 = *(int64_t *)v5; // 0x402a0c\n    int64_t v7 = 3; // 0x402a12\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"nl\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402a1e\n        char v11 = *(char *)v9; // 0x402a1e\n        char v12 = v11; // 0x402a1e\n        bool v13 = false; // 0x402a1e\n        while (v10 == v11) {\n            // 0x402a14\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402a1e\n            int64_t v15 = v8 + v3; // 0x402a1e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402a2a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x402a2a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402b3c;\n        } else {\n            // 0x402b26\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402b7b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402a8c;\n            } else {\n                goto lab_0x402b3c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402a8c;\n        } else {\n            // 0x402a72\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402b7b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402a8c;\n            } else {\n                goto lab_0x402a8c;\n            }\n        }\n    }\n  lab_0x402b3c:\n    // 0x402b3c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402acc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4027ff\n    exit(status);\n    // UNREACHABLE\n  lab_0x402a8c:\n    // 0x402a8c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402acc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4027ff\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402bb0",
            "funcStartAddr": "402bb0",
            "funcEndAddr": "402bb8",
            "decompiledFuncCode": "int64_t function_402bb0(int64_t a1) {\n    // 0x402bb0\n    g74 = a1;\n    int64_t result; // 0x402bb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402bc0",
            "funcStartAddr": "402bc0",
            "funcEndAddr": "402bc8",
            "decompiledFuncCode": "int64_t function_402bc0(int64_t a1) {\n    // 0x402bc0\n    g73 = a1;\n    int64_t result; // 0x402bc0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402bd0",
            "funcStartAddr": "402bd0",
            "funcEndAddr": "402c6e",
            "decompiledFuncCode": "int64_t function_402bd0(void) {\n    // 0x402bd0\n    int32_t * err_num; // 0x402be6\n    if ((int32_t)function_414790((int64_t)g46) == 0) {\n        goto lab_0x402bfc;\n    } else {\n        // 0x402be6\n        err_num = __errno_location();\n        if (g73 == 0) {\n            goto lab_0x402c13;\n        } else {\n            // 0x402bf7\n            if (*err_num != 32) {\n                goto lab_0x402c13;\n            } else {\n                goto lab_0x402bfc;\n            }\n        }\n    }\n  lab_0x402bfc:;\n    int64_t result = function_414790((int64_t)g49); // 0x402c03\n    if ((int32_t)result == 0) {\n        // 0x402c0c\n        return result;\n    }\n    // 0x402c4e\n    _exit(g35);\n    // UNREACHABLE\n  lab_0x402c13:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402c1f\n    if (g74 == 0) {\n        // 0x402c59\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402c33\n        error(0, *err_num, \"%s: %s\", (char *)function_404870((int64_t)g74), v1);\n    }\n    // 0x402c4e\n    _exit(g35);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402c70",
            "funcStartAddr": "402c70",
            "funcEndAddr": "402c75",
            "decompiledFuncCode": "int64_t function_402c70(void) {\n    // 0x402c70\n    int64_t fd; // 0x402c70\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402c80",
            "funcStartAddr": "402c80",
            "funcEndAddr": "402ca1",
            "decompiledFuncCode": "int64_t function_402c80(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402c80\n    if (stream == 0) {\n        // 0x402ca0\n        int64_t result; // 0x402c80\n        return result;\n    }\n    // 0x402c85\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402cb0",
            "funcStartAddr": "402cb0",
            "funcEndAddr": "402cc0",
            "decompiledFuncCode": "int64_t function_402cb0(int64_t * a1) {\n    // 0x402cb0\n    int128_t v1; // 0x402cb0\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x402cb0\n    *(int64_t *)((int64_t)a1 + 16) = 0;\n    int64_t v4; // 0x402cb0\n    __asm_movups(*(int128_t *)&v4, v3);\n    int64_t result; // 0x402cb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402cc0",
            "funcStartAddr": "402cc0",
            "funcEndAddr": "402ddb",
            "decompiledFuncCode": "int64_t function_402cc0(int64_t result, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(result + 16); // 0x402cd8\n    int64_t v2 = *v1; // 0x402cd8\n    int64_t v3 = v2 + result; // 0x402ce8\n    if ((v3 & 16) != 0) {\n        // 0x402d98\n        return 0;\n    }\n    uint64_t v4 = 0x100000000000000 * a3 >> 56; // 0x402cc6\n    int64_t * v5 = (int64_t *)(a2 + 8); // 0x402d24\n    int64_t v6 = v3; // 0x402cc0\n    int64_t v7 = v2;\n    int64_t v8 = v2; // 0x402d15\n    int64_t v9; // 0x402cc0\n    int64_t v10; // 0x402cc0\n    int64_t v11; // 0x402cc0\n    int64_t v12; // 0x402cc0\n    int64_t v13; // 0x402cc0\n    int64_t v14; // 0x402cc0\n    int64_t v15; // 0x402cc0\n    while (true) {\n      lab_0x402d24:\n        // 0x402d24\n        v10 = v8;\n        v9 = v7;\n        v15 = v6;\n        uint64_t v16 = *v5; // 0x402d24\n        if (v16 < *(int64_t *)(a2 + 16)) {\n            // 0x402d00\n            *v5 = v16 + 1;\n            v12 = (int64_t)*(char *)v16;\n            goto lab_0x402d0b;\n        } else {\n            uint32_t v17 = __uflow((struct _IO_FILE *)a2); // 0x402d35\n            v12 = v17;\n            if (v17 != -1) {\n                goto lab_0x402d0b;\n            } else {\n                if (v9 == v10) {\n                    // break -> 0x402d98\n                    break;\n                }\n                if ((v15 & 32) != 0) {\n                    // break -> 0x402d98\n                    break;\n                }\n                // 0x402d4f\n                v11 = v10;\n                if (*(char *)(v10 - 1) == (char)v4) {\n                  lab_0x402dbc:\n                    // 0x402dbc\n                    *(int64_t *)(result + 8) = v11 - v9;\n                    return result;\n                }\n                // 0x402d5a\n                v14 = v4 % 256;\n                v13 = v4 & 0xffffffff;\n                if (v10 != v15) {\n                    // 0x402db0\n                    *(char *)v10 = (char)a3;\n                    v11 = v10 + 1;\n                    goto lab_0x402dbc;\n                }\n                goto lab_0x402d67;\n            }\n        }\n    }\n    // 0x402d98\n    return 0;\n  lab_0x402d0b:\n    // 0x402d0b\n    v6 = v15;\n    int64_t v18 = v10; // 0x402d10\n    int64_t v19 = v12; // 0x402d10\n    int64_t v20 = v12; // 0x402d10\n    int64_t v21 = v9; // 0x402d10\n    v14 = v12;\n    v13 = v12;\n    if (v10 == v15) {\n        goto lab_0x402d67;\n    } else {\n        goto lab_0x402d15;\n    }\n  lab_0x402d67:;\n    int64_t v22 = function_405140(v9, result); // 0x402d74\n    int64_t v23 = v22 + v9; // 0x402d84\n    *v1 = v22;\n    v6 = v23;\n    v18 = v23;\n    v19 = v14 % 256;\n    v20 = v13;\n    v21 = v22;\n    goto lab_0x402d15;\n  lab_0x402d15:\n    // 0x402d15\n    v7 = v21;\n    v8 = v18 + 1;\n    *(char *)v18 = (char)v19;\n    v11 = v8;\n    int64_t v24 = v7; // 0x402d1e\n    if ((int32_t)v20 == (int32_t)v4) {\n        // 0x402dbc\n        *(int64_t *)(result + 8) = v11 - v24;\n        return result;\n    }\n    goto lab_0x402d24;\n}\n"
        },
        {
            "funcName": "function_402de0",
            "funcStartAddr": "402de0",
            "funcEndAddr": "402dea",
            "decompiledFuncCode": "int64_t function_402de0(int64_t * a1, int64_t a2) {\n    // 0x402de0\n    return function_402cc0((int64_t)a1, a2, 10);\n}\n"
        },
        {
            "funcName": "function_402df0",
            "funcStartAddr": "402df0",
            "funcEndAddr": "402df9",
            "decompiledFuncCode": "int64_t function_402df0(int64_t a1) {\n    // 0x402df0\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_402e00",
            "funcStartAddr": "402e00",
            "funcEndAddr": "402e99",
            "decompiledFuncCode": "int64_t function_402e00(int64_t str) {\n    // 0x402e00\n    if (str == 0) {\n        // 0x402e79\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g49);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402e0e\n    int64_t result = (int64_t)found_char_pos; // 0x402e0e\n    if (found_char_pos == NULL) {\n        // 0x402e69\n        g75 = str;\n        g48 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402e18\n    if (v1 - str < 7) {\n        // 0x402e69\n        g75 = str;\n        g48 = str;\n        return result;\n    }\n    // 0x402e28\n    bool v2; // 0x402e00\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402e00\n    int64_t v5 = result - 6; // 0x402e00\n    int64_t v6 = 7; // 0x402e36\n    unsigned char v7 = *(char *)v5; // 0x402e36\n    char v8 = *(char *)v4; // 0x402e36\n    char v9 = v8; // 0x402e36\n    bool v10 = false; // 0x402e36\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402e40\n    int64_t v13 = v1; // 0x402e40\n    int64_t v14 = 3; // 0x402e40\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402e69\n        g75 = str;\n        g48 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402e52\n    char v16 = *(char *)v12; // 0x402e52\n    char v17 = v16; // 0x402e52\n    bool v18 = false; // 0x402e52\n    while (v15 == v16) {\n        // 0x402e42\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402e5c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402e5e\n        v20 = result + 4;\n        g45 = v20;\n    }\n    // 0x402e69\n    g75 = v20;\n    g48 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ea0",
            "funcStartAddr": "402ea0",
            "funcEndAddr": "402f92",
            "decompiledFuncCode": "int64_t function_402ea0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402eb4\n    int64_t result = (int64_t)v1; // 0x402eb4\n    if (result != a1) {\n        // 0x402ec1\n        return result;\n    }\n    int64_t v2 = function_414850(); // 0x402ed0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402f86\n    if (v3 == 85) {\n        // 0x402ee0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402f78\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g7;\n            return result2;\n        }\n        char v4 = *v1; // 0x402f0e\n        int64_t result3 = v4 != 96 ? (int64_t)&g8 : (int64_t)&g11; // 0x402f1b\n        // 0x402ec1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402f78\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g7;\n        return result2;\n    }\n    char v5 = *v1; // 0x402f5d\n    int64_t result4 = v5 != 96 ? (int64_t)&g9 : (int64_t)&g10; // 0x402f6a\n    // 0x402ec1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402fa0",
            "funcStartAddr": "402fa0",
            "funcEndAddr": "402ff7",
            "decompiledFuncCode": "int64_t function_402fa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402fa0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402fe8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402ff7",
            "funcStartAddr": "402ff7",
            "funcEndAddr": "4041c1",
            "decompiledFuncCode": "int64_t function_402ff7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403041\n    int64_t v3 = 0; // 0x403041\n    int64_t v4; // 0x402ff7\n    int64_t v5; // 0x402ff7\n    int64_t v6; // 0x402ff7\n    int64_t v7; // 0x402ff7\n    int64_t v8; // 0x402ff7\n    int64_t v9; // 0x402ff7\n    int64_t v10; // 0x402ff7\n    int64_t v11; // 0x402ff7\n    int64_t v12; // 0x402ff7\n    int64_t v13; // 0x402ff7\n    int64_t v14; // 0x402ff7\n    int64_t v15; // 0x402ff7\n    int64_t v16; // 0x402ff7\n    int64_t v17; // 0x402ff7\n    int64_t v18; // 0x402ff7\n    int64_t result; // 0x402ff7\n    int64_t v19; // 0x402ff7\n    int32_t wc; // bp+132, 0x402ff7\n    int64_t ps; // bp+136, 0x402ff7\n    char v20; // 0x4035b0\n    int64_t v21; // 0x4035b0\n    int64_t v22; // 0x403958\n    int64_t v23; // 0x402ff7\n    int64_t v24; // 0x403977\n    int32_t v25; // 0x402ff7\n    while (true) {\n      lab_0x403048_2:\n        // 0x403048\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402ff7\n        int64_t v27; // 0x40307c\n        while (true) {\n          lab_0x403048:\n            // 0x403048\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403053\n            if (v15 == -1) {\n                // 0x403055\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403063\n            if (v28) {\n                // break (via goto) -> 0x4037c8\n                goto lab_0x4037c8;\n            }\n            // 0x40306c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g95 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40365b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4031a1;\n                    }\n                    // 0x403a7d\n                    v26 = v5 + 1;\n                    goto lab_0x403048;\n                }\n                case 7: {\n                    goto lab_0x4031a1;\n                }\n                case 8: {\n                    goto lab_0x4031a1;\n                }\n                case 9: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4031a1;\n                }\n                case 12: {\n                    goto lab_0x4031a1;\n                }\n                case 13: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40316d;\n                }\n                case 36: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4031a1;\n                }\n                case 38: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4031a1;\n                }\n                case 44: {\n                    goto lab_0x4031a1;\n                }\n                case 45: {\n                    goto lab_0x4031a1;\n                }\n                case 46: {\n                    goto lab_0x4031a1;\n                }\n                case 47: {\n                    goto lab_0x4031a1;\n                }\n                case 48: {\n                    goto lab_0x4031a1;\n                }\n                case 49: {\n                    goto lab_0x4031a1;\n                }\n                case 50: {\n                    goto lab_0x4031a1;\n                }\n                case 51: {\n                    goto lab_0x4031a1;\n                }\n                case 52: {\n                    goto lab_0x4031a1;\n                }\n                case 53: {\n                    goto lab_0x4031a1;\n                }\n                case 54: {\n                    goto lab_0x4031a1;\n                }\n                case 55: {\n                    goto lab_0x4031a1;\n                }\n                case 56: {\n                    goto lab_0x4031a1;\n                }\n                case 57: {\n                    goto lab_0x4031a1;\n                }\n                case 58: {\n                    goto lab_0x4031a1;\n                }\n                case 59: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4031a1;\n                }\n                case 66: {\n                    goto lab_0x4031a1;\n                }\n                case 67: {\n                    goto lab_0x4031a1;\n                }\n                case 68: {\n                    goto lab_0x4031a1;\n                }\n                case 69: {\n                    goto lab_0x4031a1;\n                }\n                case 70: {\n                    goto lab_0x4031a1;\n                }\n                case 71: {\n                    goto lab_0x4031a1;\n                }\n                case 72: {\n                    goto lab_0x4031a1;\n                }\n                case 73: {\n                    goto lab_0x4031a1;\n                }\n                case 74: {\n                    goto lab_0x4031a1;\n                }\n                case 75: {\n                    goto lab_0x4031a1;\n                }\n                case 76: {\n                    goto lab_0x4031a1;\n                }\n                case 77: {\n                    goto lab_0x4031a1;\n                }\n                case 78: {\n                    goto lab_0x4031a1;\n                }\n                case 79: {\n                    goto lab_0x4031a1;\n                }\n                case 80: {\n                    goto lab_0x4031a1;\n                }\n                case 81: {\n                    goto lab_0x4031a1;\n                }\n                case 82: {\n                    goto lab_0x4031a1;\n                }\n                case 83: {\n                    goto lab_0x4031a1;\n                }\n                case 84: {\n                    goto lab_0x4031a1;\n                }\n                case 85: {\n                    goto lab_0x4031a1;\n                }\n                case 86: {\n                    goto lab_0x4031a1;\n                }\n                case 87: {\n                    goto lab_0x4031a1;\n                }\n                case 88: {\n                    goto lab_0x4031a1;\n                }\n                case 89: {\n                    goto lab_0x4031a1;\n                }\n                case 90: {\n                    goto lab_0x4031a1;\n                }\n                case 91: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4031a1;\n                }\n                case 94: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4031a1;\n                }\n                case 96: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4031a1;\n                }\n                case 98: {\n                    goto lab_0x4031a1;\n                }\n                case 99: {\n                    goto lab_0x4031a1;\n                }\n                case 100: {\n                    goto lab_0x4031a1;\n                }\n                case 101: {\n                    goto lab_0x4031a1;\n                }\n                case 102: {\n                    goto lab_0x4031a1;\n                }\n                case 103: {\n                    goto lab_0x4031a1;\n                }\n                case 104: {\n                    goto lab_0x4031a1;\n                }\n                case 105: {\n                    goto lab_0x4031a1;\n                }\n                case 106: {\n                    goto lab_0x4031a1;\n                }\n                case 107: {\n                    goto lab_0x4031a1;\n                }\n                case 108: {\n                    goto lab_0x4031a1;\n                }\n                case 109: {\n                    goto lab_0x4031a1;\n                }\n                case 110: {\n                    goto lab_0x4031a1;\n                }\n                case 111: {\n                    goto lab_0x4031a1;\n                }\n                case 112: {\n                    goto lab_0x4031a1;\n                }\n                case 113: {\n                    goto lab_0x4031a1;\n                }\n                case 114: {\n                    goto lab_0x4031a1;\n                }\n                case 115: {\n                    goto lab_0x4031a1;\n                }\n                case 116: {\n                    goto lab_0x4031a1;\n                }\n                case 117: {\n                    goto lab_0x4031a1;\n                }\n                case 118: {\n                    goto lab_0x4031a1;\n                }\n                case 119: {\n                    goto lab_0x4031a1;\n                }\n                case 120: {\n                    goto lab_0x4031a1;\n                }\n                case 121: {\n                    goto lab_0x4031a1;\n                }\n                case 122: {\n                    goto lab_0x4031a1;\n                }\n                case 123: {\n                    goto lab_0x403145;\n                }\n                case 124: {\n                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403145;\n                }\n                case 126: {\n                    goto lab_0x40316d;\n                }\n                default: {\n                    goto lab_0x403545;\n                }\n            }\n        }\n      lab_0x403545:\n        if (v23 != 1) {\n            // 0x4038b0\n            ps = 0;\n            int64_t len = v15; // 0x4038c0\n            if (v15 == -1) {\n                // 0x4038c2\n                len = strlen((char *)str);\n            }\n            // 0x4038ee\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40394f:\n                // 0x40394f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403954\n                int64_t v30 = v29 + str;\n                v24 = function_4069d0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403eca_2;\n                    }\n                    case -1: {\n                        goto lab_0x403eca_2;\n                    }\n                    case -2: {\n                        // 0x403fad\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403fe7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403fea\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403ff7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403ff0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403eca\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403eca_2;\n                    }\n                    case 1: {\n                        goto lab_0x403920;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4039cc\n                        char v34 = *(char *)v33; // 0x4039dd\n                        unsigned char v35; // 0x402ff7\n                        if (v34 < 125) {\n                            // 0x4039e8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4039ff\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4039d0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4039dd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4039e8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4039ff\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4039d0\n                            v33++;\n                        }\n                        goto lab_0x403920;\n                    }\n                }\n            }\n            goto lab_0x403eca_2;\n        } else {\n            // 0x403594\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4031a1;\n        }\n    }\n  lab_0x4037c8:\n    // 0x4037c8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4040ca\n        if (v8 > result) {\n            // 0x4040d3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4033f7\n        return result;\n    }\n    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4031a1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4031b0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4033ba_2;\n        }\n    }\n    int64_t v39 = result; // 0x4032b1\n    char v40 = v20; // 0x4032b1\n    int64_t v41 = v38; // 0x4032b1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4032b1\n    int64_t v43 = v36; // 0x4032b1\n    goto lab_0x40322d;\n  lab_0x4033ba_2:\n    // 0x4033f7\n    return function_402fa0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403eca_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4031a1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403a9e\n        int64_t v50 = v5 + 1; // 0x403b81\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403b88\n        char v52 = v20; // 0x403b88\n        int64_t v53 = result; // 0x403b88\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403b51\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403b55\n            int64_t v56 = v54 + 1; // 0x403b5a\n            int64_t v57 = v51 + 1; // 0x403b81\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403b4c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403b51\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403b55\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40322d;\n    }\n  lab_0x403920:\n    // 0x403920\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40393f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403942\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403eca\n        goto lab_0x403eca_2;\n    }\n    goto lab_0x40394f;\n  lab_0x40316d:\n    // 0x40316d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4033ba_2;\n    }\n    goto lab_0x4031a1;\n  lab_0x403145:;\n    bool v60 = v15 == 1; // 0x403150\n    if (v15 == -1) {\n        // 0x403152\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40315e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4031a1;\n    } else {\n        goto lab_0x40316d;\n    }\n  lab_0x40322d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403232\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403236\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403048_2;\n}\n"
        },
        {
            "funcName": "function_4041d0",
            "funcStartAddr": "4041d0",
            "funcEndAddr": "40436e",
            "decompiledFuncCode": "int64_t function_4041d0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4041d2\n    int32_t * v3 = __errno_location(); // 0x4041ec\n    int64_t v4 = (int64_t)g37; // 0x4041f1\n    int32_t v5 = *v3; // 0x4041fb\n    int64_t v6 = v4; // 0x404211\n    if (v2 >= (int64_t)*(int32_t *)&g40) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404369\n            function_405230(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404220\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404227\n        int64_t v9; // 0x4041d0\n        if (g37 == &g38) {\n            int64_t v10 = function_405040(0, v8); // 0x40434a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g38); // 0x40434f\n            *(int64_t *)&g37 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405040(v4, v8); // 0x40423b\n            *(int64_t *)&g37 = v12;\n            v9 = v12;\n        }\n        // 0x40424a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g40; // 0x40424a\n        int32_t v14 = v7; // 0x404251\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g40 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404281\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40428b\n    int64_t * v17 = (int64_t *)v15; // 0x40428e\n    uint64_t v18 = *v17; // 0x40428e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404291\n    int64_t result = *v19; // 0x404291\n    int64_t v20; // 0x4041d0\n    uint64_t v21 = function_402fa0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4042b4\n    if (v18 > v21) {\n        // 0x40432b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4042c7\n    *v17 = v22;\n    if (result != (int64_t)&g76) {\n        // 0x4042d7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404fe0(v22); // 0x4042f1\n    *v19 = result2;\n    int64_t v23; // 0x4041d0\n    function_402fa0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40432b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "4043a4",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404377\n    int64_t result = function_4051e0(a1 == 0 ? (int64_t)&g77 : a1, 56); // 0x404396\n    return result;\n}\n"
        },
        {
            "funcName": "function_4043b0",
            "funcStartAddr": "4043b0",
            "funcEndAddr": "4043bf",
            "decompiledFuncCode": "int64_t function_4043b0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g77 : a1); // 0x4043bc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "4043cf",
            "decompiledFuncCode": "int64_t function_4043c0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g77 : a1; // 0x4043c8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g77;\n}\n"
        },
        {
            "funcName": "function_4043d0",
            "funcStartAddr": "4043d0",
            "funcEndAddr": "404403",
            "decompiledFuncCode": "int64_t function_4043d0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g77 + 8 : a1 + 8; // 0x4043e9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4043ee\n    uint32_t v3 = *v2; // 0x4043ee\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4043f2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404423",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g77 + 4 : a1 + 4); // 0x40441c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40445b",
            "decompiledFuncCode": "int64_t function_404430(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g77 : a1; // 0x404438\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404455\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40444c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g77;\n}\n"
        },
        {
            "funcName": "function_404460",
            "funcStartAddr": "404460",
            "funcEndAddr": "4044d2",
            "decompiledFuncCode": "int64_t function_404460(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g77 : a5; // 0x404482\n    int32_t * v2 = __errno_location(); // 0x40448b\n    uint32_t v3 = *(int32_t *)v1; // 0x4044ab\n    int64_t result = function_402fa0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4044ba\n    return result;\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "4045c1",
            "decompiledFuncCode": "int64_t function_4044e0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g77 : a4; // 0x404502\n    int32_t * v2 = __errno_location(); // 0x404508\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404527\n    int32_t * v4 = (int32_t *)v1; // 0x40452a\n    int64_t v5 = function_402fa0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404545\n    int64_t v6 = v5 + 1; // 0x40454a\n    int64_t result = function_404fe0(v6); // 0x40455f\n    function_402fa0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4045a4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4045ad\n    return result;\n}\n"
        },
        {
            "funcName": "function_4045d0",
            "funcStartAddr": "4045d0",
            "funcEndAddr": "4045da",
            "decompiledFuncCode": "int64_t function_4045d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4045d0\n    return function_4044e0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "404675",
            "decompiledFuncCode": "int64_t function_4045e0(void) {\n    uint32_t v1 = *(int32_t *)&g40; // 0x4045e0\n    int64_t v2 = v1; // 0x4045e0\n    int64_t v3 = v2; // 0x4045f4\n    if (v1 >= 2) {\n        int64_t v4 = &g40;\n        int64_t v5 = v4 + 16; // 0x404613\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g88;\n        while (v5 != (int64_t)g37 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404610\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g88;\n        }\n    }\n    int64_t v6 = v3; // 0x40462d\n    if (g38 != 0x61b7c0) {\n        // 0x40462f\n        free((int64_t *)g38);\n        g38 = 256;\n        *(int64_t *)&g39 = (int64_t)&g76;\n        v6 = &g88;\n    }\n    int64_t result = v6; // 0x404651\n    if (g37 != &g38) {\n        // 0x404653\n        free(g37);\n        *(int64_t *)&g37 = (int64_t)&g38;\n        result = &g88;\n    }\n    // 0x404666\n    *(int32_t *)&g40 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "404691",
            "decompiledFuncCode": "int64_t function_404680(void) {\n    // 0x404680\n    int64_t v1; // 0x404680\n    return function_4041d0(v1, v1, -1, (int64_t *)&g77);\n}\n"
        },
        {
            "funcName": "function_4046a0",
            "funcStartAddr": "4046a0",
            "funcEndAddr": "4046aa",
            "decompiledFuncCode": "int64_t function_4046a0(void) {\n    // 0x4046a0\n    int64_t v1; // 0x4046a0\n    return function_4041d0(v1, v1, v1, (int64_t *)&g77);\n}\n"
        },
        {
            "funcName": "function_4046b0",
            "funcStartAddr": "4046b0",
            "funcEndAddr": "4046c6",
            "decompiledFuncCode": "int64_t function_4046b0(int64_t a1) {\n    // 0x4046b0\n    return function_4041d0(0, a1, -1, (int64_t *)&g77);\n}\n"
        },
        {
            "funcName": "function_4046d0",
            "funcStartAddr": "4046d0",
            "funcEndAddr": "4046e2",
            "decompiledFuncCode": "int64_t function_4046d0(int64_t a1, int64_t a2) {\n    // 0x4046d0\n    return function_4041d0(0, a1, a2, (int64_t *)&g77);\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "404758",
            "decompiledFuncCode": "int64_t function_4046f0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404700\n    return function_4041d0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404760",
            "funcStartAddr": "404760",
            "funcEndAddr": "4047c4",
            "decompiledFuncCode": "int64_t function_404760(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404770\n    return function_4041d0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4047d0",
            "funcStartAddr": "4047d0",
            "funcEndAddr": "4047dc",
            "decompiledFuncCode": "int64_t function_4047d0(int64_t a1, int64_t a2) {\n    // 0x4047d0\n    return function_4046f0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4047e0",
            "funcStartAddr": "4047e0",
            "funcEndAddr": "4047ef",
            "decompiledFuncCode": "int64_t function_4047e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4047e0\n    return function_404760(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4047f0",
            "funcStartAddr": "4047f0",
            "funcEndAddr": "404860",
            "decompiledFuncCode": "int64_t function_4047f0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g77); // 0x4047fd\n    int128_t v2 = __asm_movdqa(g78); // 0x404805\n    int128_t v3 = __asm_movdqa(g79); // 0x40480d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404822\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404838\n    uint32_t v6 = *v5; // 0x404838\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40483d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4041d0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404860",
            "funcStartAddr": "404860",
            "funcEndAddr": "40486d",
            "decompiledFuncCode": "int64_t function_404860(int64_t a1, int64_t a2) {\n    // 0x404860\n    return function_4047f0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "404881",
            "decompiledFuncCode": "int64_t function_404870(int64_t a1) {\n    // 0x404870\n    return function_4047f0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404890",
            "funcStartAddr": "404890",
            "funcEndAddr": "40489a",
            "decompiledFuncCode": "int64_t function_404890(void) {\n    // 0x404890\n    int64_t v1; // 0x404890\n    return function_4047f0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "40490e",
            "decompiledFuncCode": "int64_t function_4048a0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4048ba\n    return function_4041d0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404910",
            "funcStartAddr": "404910",
            "funcEndAddr": "40497c",
            "decompiledFuncCode": "int64_t function_404910(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g77); // 0x404917\n    int128_t v2 = __asm_movdqa(g78); // 0x40491f\n    int128_t v3 = __asm_movdqa(g79); // 0x404927\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404949\n    if (a2 == 0 || a3 == 0) {\n        // 0x404977\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40495a\n    return function_4041d0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404980",
            "funcStartAddr": "404980",
            "funcEndAddr": "404989",
            "decompiledFuncCode": "int64_t function_404980(void) {\n    // 0x404980\n    int64_t v1; // 0x404980\n    return function_404910(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404990",
            "funcStartAddr": "404990",
            "funcEndAddr": "4049a7",
            "decompiledFuncCode": "int64_t function_404990(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404990\n    return function_404910(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4049b0",
            "funcStartAddr": "4049b0",
            "funcEndAddr": "4049c3",
            "decompiledFuncCode": "int64_t function_4049b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4049b0\n    return function_404910(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049da",
            "decompiledFuncCode": "int64_t function_4049d0(void) {\n    // 0x4049d0\n    int64_t v1; // 0x4049d0\n    return function_4041d0(v1, v1, v1, &g36);\n}\n"
        },
        {
            "funcName": "function_4049e0",
            "funcStartAddr": "4049e0",
            "funcEndAddr": "4049f2",
            "decompiledFuncCode": "int64_t function_4049e0(int64_t a1, int64_t a2) {\n    // 0x4049e0\n    return function_4041d0(0, a1, a2, &g36);\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a11",
            "decompiledFuncCode": "int64_t function_404a00(void) {\n    // 0x404a00\n    int64_t v1; // 0x404a00\n    return function_4041d0(v1, v1, -1, &g36);\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404a36",
            "decompiledFuncCode": "int64_t function_404a20(int64_t a1) {\n    // 0x404a20\n    return function_4041d0(0, a1, -1, &g36);\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404e1d",
            "decompiledFuncCode": "int64_t function_404a40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404ad8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404a5c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404a76\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404abb\n    if (a6 < 10) {\n        // 0x404aca\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404bc2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e40",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404e20\n    if (a5 == 0) {\n        // 0x404e3b\n        return function_404a40(a1, a2, a3, a4, a5, 0, (int64_t)&g88);\n    }\n    int64_t v1 = 0; // 0x404e27\n    v1++;\n    int64_t v2 = v1; // 0x404e39\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404e30\n        v1++;\n        v2 = v1;\n    }\n    // 0x404e3b\n    return function_404a40(a1, a2, a3, a4, a5, v2, (int64_t)&g88);\n}\n"
        },
        {
            "funcName": "function_404e40",
            "funcStartAddr": "404e40",
            "funcEndAddr": "404ea0",
            "decompiledFuncCode": "int64_t function_404e40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404e40\n    int64_t v3 = &v2; // 0x404e40\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404e73\n    int64_t v6; // 0x404e5d\n    int64_t * v7; // 0x404e7b\n    int64_t v8; // 0x404e7b\n    int64_t v9; // 0x404e87\n    if (v5 < 48) {\n        // 0x404e50\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404e93\n            break;\n        }\n    } else {\n        // 0x404e7b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404e93\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404e71\n    while (v4 != 9) {\n        // 0x404e69\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404e50\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404e93\n                break;\n            }\n        } else {\n            // 0x404e7b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404e93\n                break;\n            }\n        }\n        // 0x404e69\n        v10 = 10;\n    }\n    // 0x404e93\n    return function_404a40(a1, a2, a3, a4, v3, v10, (int64_t)&g88);\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404f5c",
            "decompiledFuncCode": "int64_t function_404ea0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404ea0\n    int64_t v1; // bp-168, 0x404ea0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404ea0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404ea0\n    int64_t v8; // 0x404ea0\n    int64_t v9; // bp-56, 0x404ea0\n    int64_t v10; // 0x404f05\n    int64_t v11; // 0x404f29\n    if ((int32_t)v6 < 48) {\n        // 0x404ef0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404f40\n            break;\n        }\n    } else {\n        // 0x404f22\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404f40\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404f1a\n    int64_t v13 = 10; // 0x404f1a\n    while (v5 != 9) {\n        // 0x404f1c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404ef0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404f40\n                break;\n            }\n        } else {\n            // 0x404f22\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404f40\n                break;\n            }\n        }\n        // 0x404f12\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404f40\n    int64_t v14; // bp-136, 0x404ea0\n    int64_t result = function_404a40(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g88); // 0x404f4f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f60",
            "funcStartAddr": "404f60",
            "funcEndAddr": "404fd4",
            "decompiledFuncCode": "int64_t function_404f60(int64_t a1) {\n    // 0x404f60\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404fc3\n    return fputs_unlocked(v1, g46);\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "404ffa",
            "decompiledFuncCode": "int64_t function_404fe0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404fe4\n    if (size != 0 != (mem == NULL)) {\n        // 0x404ff3\n        return (int64_t)mem;\n    }\n    // 0x404ff5\n    function_405230(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "405021",
            "decompiledFuncCode": "int64_t function_405000(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405003\n    int64_t v2 = v1; // 0x405003\n    if (v2 < 0) {\n        // 0x40501b\n        function_405230(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405019\n        return function_404fe0(v2);\n    }\n    // 0x40501b\n    function_405230(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "405032",
            "decompiledFuncCode": "int64_t function_405030(void) {\n    // 0x405030\n    int64_t v1; // 0x405030\n    return function_404fe0(v1);\n}\n"
        },
        {
            "funcName": "function_405040",
            "funcStartAddr": "405040",
            "funcEndAddr": "405076",
            "decompiledFuncCode": "int64_t function_405040(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405068\n        free(v1);\n        return (int32_t)&g88 ^ (int32_t)&g88;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405051\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405060\n        return (int64_t)mem;\n    }\n    // 0x405071\n    function_405230(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405080",
            "funcStartAddr": "405080",
            "funcEndAddr": "4050a1",
            "decompiledFuncCode": "int64_t function_405080(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405083\n    int64_t v2 = v1; // 0x405083\n    if (v2 < 0) {\n        // 0x40509b\n        function_405230(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405099\n        return function_405040(a1, v2);\n    }\n    // 0x40509b\n    function_405230(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4050b0",
            "funcStartAddr": "4050b0",
            "funcEndAddr": "405136",
            "decompiledFuncCode": "int64_t function_4050b0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40510b\n            function_405230(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405040(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4050f3\n    if (a2 == 0) {\n        // 0x405118\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4050f8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40510b\n        function_405230(a1);\n        // UNREACHABLE\n    }\n    // 0x4050da\n    *(int64_t *)a2 = v2;\n    return function_405040(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "405190",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405140\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40518a\n            function_405230(a1);\n            // UNREACHABLE\n        }\n        // 0x405162\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405040(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405175\n        *(int64_t *)a2 = 128;\n        return function_405040(0, 128);\n    }\n    // 0x405188\n    if (a2 < 0) {\n        // 0x40518a\n        function_405230(a1);\n        // UNREACHABLE\n    }\n    // 0x405162\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405040(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405190",
            "funcStartAddr": "405190",
            "funcEndAddr": "4051a7",
            "decompiledFuncCode": "int64_t function_405190(int64_t a1, int64_t a2) {\n    // 0x405190\n    return (int64_t)memset((int64_t *)function_404fe0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "4051de",
            "decompiledFuncCode": "int64_t function_4051b0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4051b7\n    if ((int64_t)v1 < 0) {\n        // 0x4051d9\n        function_405230(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4051d9\n        function_405230(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4051ca\n    if (mem != NULL) {\n        // 0x4051d4\n        return (int64_t)mem;\n    }\n    // 0x4051d9\n    function_405230(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "405208",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404fe0(a2); // 0x4051ef\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405210",
            "funcStartAddr": "405210",
            "funcEndAddr": "405223",
            "decompiledFuncCode": "int64_t function_405210(int64_t str) {\n    // 0x405210\n    return function_4051e0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405230",
            "funcStartAddr": "405230",
            "funcEndAddr": "405261",
            "decompiledFuncCode": "int64_t function_405230(int64_t a1) {\n    // 0x405230\n    error(g35, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405270",
            "funcStartAddr": "405270",
            "funcEndAddr": "405354",
            "decompiledFuncCode": "int64_t function_405270(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x405270\n    int64_t result2; // bp-64, 0x405270\n    int32_t v1 = function_405390(a1, 0, a2 & 0xffffffff, &result2, a5); // 0x40529c\n    int32_t * v2; // 0x405270\n    int32_t * v3; // 0x405270\n    if (v1 != 0) {\n        int32_t * v4 = __errno_location(); // 0x40531a\n        v2 = v4;\n        if (v1 == 1) {\n            goto lab_0x4052c0;\n        } else {\n            // 0x405327\n            v3 = v4;\n            if (v1 == 3) {\n                // 0x40532c\n                *v4 = 0;\n                v3 = v4;\n            }\n            goto lab_0x4052c7;\n        }\n    } else {\n        int64_t result = result2; // 0x4052a0\n        if (result >= a3 && result <= a4) {\n            // 0x405300\n            return result;\n        }\n        int32_t * v5 = __errno_location(); // 0x4052af\n        v2 = v5;\n        if (result < 0x40000000) {\n            int64_t v6 = result + 0x40000001; // 0x405338\n            *v5 = v6 == 0 | v6 < 0 != ((v6 ^ result) & (result ^ -0x8000000000000000)) < 0 ? 75 : 34;\n            v3 = v5;\n            goto lab_0x4052c7;\n        } else {\n            goto lab_0x4052c0;\n        }\n    }\n  lab_0x4052c0:\n    // 0x4052c0\n    *v2 = 75;\n    v3 = v2;\n    goto lab_0x4052c7;\n  lab_0x4052c7:;\n    int64_t v7 = function_404a20(a1); // 0x4052ca\n    int32_t v8 = *v3; // 0x4052cf\n    int32_t status = a7 == 0 ? 1 : a7; // 0x4052ef\n    error(status, v8 == 22 ? 0 : v8, \"%s: %s\", (char *)a6, (char *)v7);\n    // 0x405300\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405360",
            "funcStartAddr": "405360",
            "funcEndAddr": "405381",
            "decompiledFuncCode": "int64_t function_405360(int64_t a1, int64_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x405360\n    int64_t result; // 0x405360\n    return result;\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "405ae0",
            "decompiledFuncCode": "int64_t function_405390(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str) {\n    uint32_t v1 = (int32_t)a3; // 0x4053a2\n    if (v1 >= 37) {\n        // 0x405ab9\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoimax\");\n        return &g88;\n    }\n    // 0x4053ab\n    int64_t v2; // bp-64, 0x405390\n    int64_t v3 = a2 == 0 ? (int64_t)&v2 : (int64_t)a2; // 0x4053b8\n    int32_t * v4 = __errno_location(); // 0x4053c2\n    *v4 = 0;\n    char * v5 = (char *)a1;\n    int32_t v6 = __strtol_internal(v5, (char **)v3, v1, 0); // 0x4053da\n    int64_t * v7 = (int64_t *)v3; // 0x4053df\n    int64_t v8 = *v7; // 0x4053df\n    int64_t v9; // 0x405390\n    int64_t v10; // 0x405390\n    int64_t v11; // 0x405390\n    char v12; // 0x405390\n    int64_t v13; // 0x405390\n    int64_t v14; // 0x405390\n    int64_t v15; // 0x405390\n    if (v8 == a1) {\n        // 0x405438\n        if (str == 0) {\n            // 0x40540e\n            return 4;\n        }\n        char c = *v5; // 0x405441\n        if (c == 0) {\n            // 0x40540e\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x40545f\n        v14 = 1;\n        v10 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x40540e\n            return 4;\n        }\n        goto lab_0x40546d;\n    } else {\n        int32_t v16 = *v4; // 0x4053ea\n        int64_t v17 = 0; // 0x4053f0\n        if (v16 != 0) {\n            // 0x405420\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x40540e\n                return 4;\n            }\n        }\n        int64_t v18 = v6; // 0x4053da\n        v13 = v18;\n        v9 = v17;\n        if (str == 0) {\n            goto lab_0x405407;\n        } else {\n            char c2 = *(char *)v8; // 0x4053fa\n            v13 = v18;\n            v9 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x405507\n                v14 = v18;\n                v10 = v17;\n                v12 = c2;\n                v15 = v18;\n                v11 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40546d;\n                } else {\n                    goto lab_0x405515;\n                }\n            } else {\n                goto lab_0x405407;\n            }\n        }\n    }\n  lab_0x40546d:;\n    int64_t v19 = v10;\n    int64_t v20 = v14;\n    unsigned char v21 = v12 - 69;\n    int64_t v22 = 1024; // 0x405474\n    int64_t v23 = 1; // 0x405474\n    int64_t v24; // 0x405390\n    int64_t v25; // 0x405390\n    int64_t v26; // 0x405390\n    int64_t v27; // 0x405390\n    int64_t v28; // 0x405390\n    int64_t v29; // 0x405390\n    int64_t v30; // 0x405390\n    int64_t v31; // 0x405390\n    int64_t v32; // 0x405390\n    int64_t v33; // 0x405390\n    int64_t v34; // 0x405390\n    int64_t v35; // 0x405390\n    int64_t v36; // 0x405390\n    int64_t v37; // 0x405390\n    int64_t v38; // 0x405390\n    int64_t v39; // 0x405390\n    int64_t v40; // 0x405390\n    int64_t v41; // 0x405390\n    int64_t v42; // 0x405390\n    if (v21 < 48) {\n        // 0x4054a0\n        v22 = 1024;\n        v23 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x405480;\n        } else {\n            // 0x4054b4\n            v22 = 1024;\n            v23 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x405480;\n            } else {\n                // 0x4054c6\n                v22 = 1000;\n                v23 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x405480;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v8 + 2); // 0x405aa2\n                        v22 = 1024;\n                        v23 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x405480;\n                    }\n                    default: {\n                        // 0x4054db\n                        g89 = v21;\n                        v22 = 1000;\n                        v23 = 2;\n                        v15 = v20;\n                        v11 = v19;\n                        v25 = v20;\n                        v32 = 1;\n                        v24 = v19;\n                        v26 = 1024;\n                        v33 = 1;\n                        v37 = -0x20000000000000;\n                        v38 = 1;\n                        v27 = 1024;\n                        v34 = 1;\n                        v40 = -0x20000000000000;\n                        v28 = 1024;\n                        v35 = 1;\n                        v42 = -0x20000000000000;\n                        v29 = 1024;\n                        v36 = 1;\n                        v41 = -0x20000000000000;\n                        v30 = 1024;\n                        v31 = 1;\n                        v39 = -0x20000000000000;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x405768;\n                            }\n                            case 70: {\n                                goto lab_0x405515;\n                            }\n                            case 71: {\n                                goto lab_0x4057d0;\n                            }\n                            case 72: {\n                                goto lab_0x405515;\n                            }\n                            case 73: {\n                                goto lab_0x405515;\n                            }\n                            case 74: {\n                                goto lab_0x405515;\n                            }\n                            case 75: {\n                                goto lab_0x4055b5;\n                            }\n                            case 76: {\n                                goto lab_0x405515;\n                            }\n                            case 77: {\n                                goto lab_0x4055f8;\n                            }\n                            case 78: {\n                                goto lab_0x405515;\n                            }\n                            case 79: {\n                                goto lab_0x405515;\n                            }\n                            case 80: {\n                                goto lab_0x405698;\n                            }\n                            case 81: {\n                                goto lab_0x405515;\n                            }\n                            case 82: {\n                                goto lab_0x405515;\n                            }\n                            case 83: {\n                                goto lab_0x405515;\n                            }\n                            case 84: {\n                                goto lab_0x405700;\n                            }\n                            case 85: {\n                                goto lab_0x405515;\n                            }\n                            case 86: {\n                                goto lab_0x405515;\n                            }\n                            case 87: {\n                                goto lab_0x405515;\n                            }\n                            case 88: {\n                                goto lab_0x405515;\n                            }\n                            case 89: {\n                                goto lab_0x405838;\n                            }\n                            case 90: {\n                                goto lab_0x4058a0;\n                            }\n                            case 91: {\n                                goto lab_0x405515;\n                            }\n                            case 92: {\n                                goto lab_0x405515;\n                            }\n                            case 93: {\n                                goto lab_0x405515;\n                            }\n                            case 94: {\n                                goto lab_0x405515;\n                            }\n                            case 95: {\n                                goto lab_0x405515;\n                            }\n                            case 96: {\n                                goto lab_0x405515;\n                            }\n                            case 97: {\n                                goto lab_0x405515;\n                            }\n                            case 98: {\n                                goto lab_0x405665;\n                            }\n                            case 99: {\n                                goto lab_0x405558;\n                            }\n                            case 100: {\n                                goto lab_0x405515;\n                            }\n                            case 101: {\n                                goto lab_0x405515;\n                            }\n                            case 102: {\n                                goto lab_0x405515;\n                            }\n                            case 103: {\n                                goto lab_0x4057d0;\n                            }\n                            case 104: {\n                                goto lab_0x405515;\n                            }\n                            case 105: {\n                                goto lab_0x405515;\n                            }\n                            case 106: {\n                                goto lab_0x405515;\n                            }\n                            case 107: {\n                                goto lab_0x4055b5;\n                            }\n                            case 108: {\n                                goto lab_0x405515;\n                            }\n                            case 109: {\n                                goto lab_0x4055f8;\n                            }\n                            case 110: {\n                                goto lab_0x405515;\n                            }\n                            case 111: {\n                                goto lab_0x405515;\n                            }\n                            case 112: {\n                                goto lab_0x405515;\n                            }\n                            case 113: {\n                                goto lab_0x405515;\n                            }\n                            case 114: {\n                                goto lab_0x405515;\n                            }\n                            case 115: {\n                                goto lab_0x405515;\n                            }\n                            case 116: {\n                                goto lab_0x405700;\n                            }\n                            default: {\n                                goto lab_0x405480;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x405480;\n    }\n  lab_0x405407:\n    // 0x405407\n    *a4 = v13;\n    // 0x40540e\n    return v9 & 0xffffffff;\n  lab_0x405480:\n    // 0x405480\n    g87 = v12 - 66;\n    v15 = v20;\n    v11 = v19;\n    v25 = v20;\n    v32 = v23;\n    v24 = v19;\n    v38 = v23;\n    switch (v12) {\n        case 66: {\n            // 0x405551\n            v25 = 1024 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x405558;\n        }\n        case 69: {\n            // 0x405750\n            v29 = v22;\n            v36 = v23;\n            v41 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x405768;\n        }\n        case 71: {\n            goto lab_0x4057d0;\n        }\n        case 75: {\n            goto lab_0x4055b5;\n        }\n        case 77: {\n            goto lab_0x4055e0;\n        }\n        case 80: {\n            // 0x405680\n            v27 = v22;\n            v34 = v23;\n            v40 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x405698;\n        }\n        case 84: {\n            goto lab_0x4056e8;\n        }\n        case 89: {\n            // 0x405820\n            goto lab_0x405838;\n        }\n        case 90: {\n            // 0x405888\n            v30 = v22;\n            v31 = v23;\n            v39 = -0x8000000000000000 / (int128_t)v22;\n            goto lab_0x4058a0;\n        }\n        case 98: {\n            goto lab_0x405665;\n        }\n        case 99: {\n            goto lab_0x405558;\n        }\n        case 103: {\n            goto lab_0x4057d0;\n        }\n        case 107: {\n            goto lab_0x4055b5;\n        }\n        case 109: {\n            goto lab_0x4055e0;\n        }\n        case 116: {\n            goto lab_0x4056e8;\n        }\n        case 119: {\n            // 0x405599\n            v25 = 2 * v20;\n            v32 = v23;\n            v24 = v19;\n            goto lab_0x405558;\n        }\n        default: {\n            goto lab_0x405515;\n        }\n    }\n    // 0x4057b8\n    goto lab_0x4057d0;\n    // 0x4055a0\n    goto lab_0x4055b5;\n  lab_0x4055e0:\n    // 0x4055e0\n    v26 = v22;\n    v33 = v23;\n    v37 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x4055f8;\n  lab_0x4056e8:\n    // 0x4056e8\n    v28 = v22;\n    v35 = v23;\n    v42 = -0x8000000000000000 / (int128_t)v22;\n    goto lab_0x405700;\n  lab_0x405665:\n    // 0x405665\n    v25 = 512 * v20;\n    v32 = v38;\n    v24 = v19;\n    goto lab_0x405558;\n  lab_0x405558:;\n    int64_t v63 = v24;\n    int64_t v64 = v32 + v8; // 0x405558\n    *v7 = v64;\n    v13 = v25;\n    v9 = (*(char *)v64 != 0 ? v63 | 2 : v63) & 0xffffffff;\n    goto lab_0x405407;\n  lab_0x405515:\n    // 0x405515\n    *a4 = v15;\n    // 0x40540e\n    return (v11 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x405768:;\n    uint64_t v65 = v29;\n    int64_t v66 = v20;\n    int64_t v67 = -0x8000000000000000; // 0x4057a1\n    int64_t v68 = 1; // 0x4057a1\n    if (v66 >= v41) {\n        // 0x405780\n        v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n        v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : 0;\n    }\n    int32_t v69 = 5; // 0x405795\n    int32_t v70 = v69; // 0x405798\n    int64_t v71 = v68; // 0x405798\n    int64_t v59 = v67; // 0x405798\n    int64_t v61 = v36; // 0x405798\n    int64_t v62 = v68; // 0x405798\n    while (v69 != 0) {\n        // 0x40579e\n        v66 = v67;\n        v67 = -0x8000000000000000;\n        v68 = 1;\n        if (v66 >= v41) {\n            // 0x405780\n            v67 = v66 > 0x7fffffffffffffff / v65 ? 0x7fffffffffffffff : v66 * v65;\n            v68 = v66 > 0x7fffffffffffffff / v65 ? 1 : v71;\n        }\n        // 0x405795\n        v69 = v70 - 1;\n        v70 = v69;\n        v71 = v68;\n        v59 = v67;\n        v61 = v36;\n        v62 = v68;\n    }\n    goto lab_0x4059d0;\n  lab_0x4057d0:\n    // 0x4057d0\n    while (true) {\n        // 0x405806\n        int32_t v44; // 0x405390\n        int32_t v45 = v44;\n        int64_t v46; // 0x405390\n        int64_t v47 = v46;\n        int64_t v48 = -0x8000000000000000; // 0x405809\n        int64_t v49 = 1; // 0x405809\n        int64_t v50; // 0x405390\n        uint64_t v51; // 0x405390\n        if (v47 >= v51) {\n            int64_t v52 = v50;\n            uint64_t v53; // 0x405390\n            int64_t v54 = v47 > 0x7fffffffffffffff / v53 ? 0x7fffffffffffffff : v47 * v53;\n            int64_t v55 = v47 > 0x7fffffffffffffff / v53 ? 1 : v52;\n            v48 = v54;\n            v49 = v55;\n        }\n        int64_t v56 = v49;\n        int64_t v57 = v48;\n        int32_t v58 = v45 - 1; // 0x4057fd\n        v46 = v57;\n        v44 = v58;\n        v50 = v56;\n        v59 = v57;\n        int64_t v60; // 0x405390\n        v61 = v60;\n        v62 = v56;\n        if (v58 == 0) {\n            // break -> 0x4059d0\n            break;\n        }\n    }\n    goto lab_0x4059d0;\n  lab_0x4055b5:;\n    int64_t v76 = 1;\n    v25 = -0x8000000000000000;\n    v32 = v76;\n    v24 = 1;\n    int64_t v73; // 0x405390\n    int64_t v74; // 0x405390\n    int64_t v75; // 0x405390\n    int64_t v72; // 0x405390\n    if (v20 < -0x20000000000000) {\n        goto lab_0x405558;\n    } else {\n        int64_t v77 = 1024;\n        v73 = 0x7fffffffffffffff / v77;\n        v75 = v77;\n        v74 = v20;\n        v72 = v76;\n        goto lab_0x4055cc;\n    }\n  lab_0x4055f8:\n    // 0x4055f8\n    v25 = -0x8000000000000000;\n    v32 = v33;\n    v24 = 1;\n    if (v20 < v37) {\n        goto lab_0x405558;\n    } else {\n        int64_t v78 = 0x7fffffffffffffff / v26;\n        v25 = 0x7fffffffffffffff;\n        v32 = v33;\n        v24 = 1;\n        if (v20 > v78) {\n            goto lab_0x405558;\n        } else {\n            int64_t v79 = v26 * v20; // 0x405618\n            v25 = -0x8000000000000000;\n            v32 = v33;\n            v24 = 1;\n            v73 = v78;\n            v75 = v26;\n            v74 = v79;\n            v72 = v33;\n            if (v79 < v37) {\n                goto lab_0x405558;\n            } else {\n                goto lab_0x4055cc;\n            }\n        }\n    }\n  lab_0x405698:;\n    uint64_t v80 = v27;\n    int64_t v81 = v20;\n    int64_t v82 = -0x8000000000000000; // 0x4056d1\n    int64_t v83 = 1; // 0x4056d1\n    if (v40 <= v81) {\n        // 0x4056b0\n        v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n        v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : 0;\n    }\n    int32_t v84 = 4; // 0x4056c5\n    int32_t v85 = v84; // 0x4056c8\n    int64_t v86 = v83; // 0x4056c8\n    v59 = v82;\n    v61 = v34;\n    v62 = v83;\n    while (v84 != 0) {\n        // 0x4056ce\n        v81 = v82;\n        v82 = -0x8000000000000000;\n        v83 = 1;\n        if (v40 <= v81) {\n            // 0x4056b0\n            v82 = v81 > 0x7fffffffffffffff / v80 ? 0x7fffffffffffffff : v81 * v80;\n            v83 = v81 > 0x7fffffffffffffff / v80 ? 1 : v86;\n        }\n        // 0x4056c5\n        v84 = v85 - 1;\n        v85 = v84;\n        v86 = v83;\n        v59 = v82;\n        v61 = v34;\n        v62 = v83;\n    }\n    goto lab_0x4059d0;\n  lab_0x405700:;\n    uint64_t v87 = v28;\n    int64_t v88 = v20;\n    int64_t v89 = -0x8000000000000000; // 0x405739\n    int64_t v90 = 1; // 0x405739\n    if (v42 <= v88) {\n        // 0x405718\n        v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n        v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : 0;\n    }\n    int32_t v91 = 3; // 0x40572d\n    int32_t v92 = v91; // 0x405730\n    int64_t v93 = v90; // 0x405730\n    v59 = v89;\n    v61 = v35;\n    v62 = v90;\n    while (v91 != 0) {\n        // 0x405736\n        v88 = v89;\n        v89 = -0x8000000000000000;\n        v90 = 1;\n        if (v42 <= v88) {\n            // 0x405718\n            v89 = v88 > 0x7fffffffffffffff / v87 ? 0x7fffffffffffffff : v88 * v87;\n            v90 = v88 > 0x7fffffffffffffff / v87 ? 1 : v93;\n        }\n        // 0x40572d\n        v91 = v92 - 1;\n        v92 = v91;\n        v93 = v90;\n        v59 = v89;\n        v61 = v35;\n        v62 = v90;\n    }\n    goto lab_0x4059d0;\n  lab_0x405838:\n    // 0x405838\n    while (true) {\n        // 0x40586e\n        int32_t v94; // 0x405390\n        int32_t v95 = v94;\n        int64_t v96; // 0x405390\n        int64_t v97 = v96;\n        int64_t v98 = -0x8000000000000000; // 0x405871\n        int64_t v99 = 1; // 0x405871\n        int64_t v100; // 0x405390\n        uint64_t v101; // 0x405390\n        if (v101 <= v97) {\n            int64_t v102 = v100;\n            uint64_t v103; // 0x405390\n            int64_t v104 = v97 > 0x7fffffffffffffff / v103 ? 0x7fffffffffffffff : v97 * v103;\n            int64_t v105 = v97 > 0x7fffffffffffffff / v103 ? 1 : v102;\n            v98 = v104;\n            v99 = v105;\n        }\n        int64_t v106 = v99;\n        int64_t v107 = v98;\n        int32_t v108 = v95 - 1; // 0x405865\n        v96 = v107;\n        v94 = v108;\n        v100 = v106;\n        v59 = v107;\n        int64_t v109; // 0x405390\n        v61 = v109;\n        v62 = v106;\n        if (v108 == 0) {\n            // break -> 0x4059d0\n            break;\n        }\n    }\n    goto lab_0x4059d0;\n  lab_0x4058a0:;\n    uint64_t v110 = v30;\n    int64_t v111 = v20;\n    int64_t v112 = -0x8000000000000000; // 0x4058d9\n    int64_t v113 = 1; // 0x4058d9\n    if (v39 <= v111) {\n        // 0x4058b8\n        v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n        v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : 0;\n    }\n    int32_t v114 = 6; // 0x4058cd\n    int32_t v115 = v114; // 0x4058d0\n    int64_t v116 = v113; // 0x4058d0\n    v59 = v112;\n    v61 = v31;\n    v62 = v113;\n    while (v114 != 0) {\n        // 0x4058d6\n        v111 = v112;\n        v112 = -0x8000000000000000;\n        v113 = 1;\n        if (v39 <= v111) {\n            // 0x4058b8\n            v112 = v111 > 0x7fffffffffffffff / v110 ? 0x7fffffffffffffff : v111 * v110;\n            v113 = v111 > 0x7fffffffffffffff / v110 ? 1 : v116;\n        }\n        // 0x4058cd\n        v114 = v115 - 1;\n        v115 = v114;\n        v116 = v113;\n        v59 = v112;\n        v61 = v31;\n        v62 = v113;\n    }\n    goto lab_0x4059d0;\n  lab_0x4059d0:\n    // 0x4059d0\n    v25 = v59;\n    v32 = v61;\n    v24 = (v62 | v19) & 0xffffffff;\n    goto lab_0x405558;\n  lab_0x4055cc:\n    // 0x4055cc\n    v25 = 0x7fffffffffffffff;\n    v32 = v72;\n    v24 = 1;\n    if (v73 >= v74) {\n        // 0x4055d5\n        v25 = v74 * v75;\n        v32 = v72;\n        v24 = v19;\n    }\n    goto lab_0x405558;\n}\n"
        },
        {
            "funcName": "function_405ae0",
            "funcStartAddr": "405ae0",
            "funcEndAddr": "405b5b",
            "decompiledFuncCode": "int64_t function_405ae0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405ae7\n    if (fileno(stream) < 0) {\n        // 0x405b47\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405afa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405b2b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405b47\n            return fclose(stream);\n        }\n    }\n    // 0x405afc\n    if ((int32_t)function_405b60(a1, v1) == 0) {\n        // 0x405b47\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405b08\n    int32_t v3 = *v2; // 0x405b10\n    int64_t result = fclose(stream); // 0x405b1e\n    if (v3 != 0) {\n        // 0x405b50\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405b20\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b60",
            "funcStartAddr": "405b60",
            "funcEndAddr": "405ba0",
            "decompiledFuncCode": "int64_t function_405b60(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405b7a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405b7a\n        return fflush(stream);\n    }\n    // 0x405b88\n    function_405ba0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405bf7",
            "decompiledFuncCode": "int64_t function_405ba0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405ba0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405baa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405bdb\n    int64_t result = -1; // 0x405be4\n    if (v1 != -1) {\n        // 0x405be6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405bf2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c00",
            "funcStartAddr": "405c00",
            "funcEndAddr": "405cdf",
            "decompiledFuncCode": "int64_t function_405c00(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x405c0c\n    uint32_t v2 = *v1; // 0x405c0c\n    int64_t v3 = a2 & 0xffffffff; // 0x405c11\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405c14\n    uint64_t v5 = (int64_t)*v4; // 0x405c14\n    int64_t v6; // 0x405c82\n    if (v3 <= v5) {\n      lab_0x405c7c_2:\n        // 0x405c7c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405c02\n    int64_t v8 = v2; // 0x405c00\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x405c7c\n        goto lab_0x405c7c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405c38\n    int64_t v17; // 0x405c46\n    int64_t * v18; // 0x405c60\n    int64_t * v19; // 0x405c63\n    int64_t v20; // 0x405c6e\n    int64_t v21; // 0x405c46\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405c43\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405c60\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405c77\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x405c7c\n            goto lab_0x405c7c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405c7c\n            goto lab_0x405c7c_2;\n        }\n        // 0x405c32\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x405cbb\n    int64_t * v23 = (int64_t *)v22; // 0x405cc0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405cc3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405cc0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405cd7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x405c2d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405c7c\n            goto lab_0x405c7c_2;\n        }\n        // 0x405c32\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405c43\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405c60\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405c77\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x405c7c\n                goto lab_0x405c7c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x405c7c\n                goto lab_0x405c7c_2;\n            }\n            // 0x405c32\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405ca0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405cc0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405cd7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x405c7c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405ce0",
            "funcStartAddr": "405ce0",
            "funcEndAddr": "4062fc",
            "decompiledFuncCode": "int64_t function_405ce0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x405cff\n    int64_t v2 = *v1; // 0x405cff\n    char * str2 = (char *)v2; // 0x405d0c\n    char c = *str2; // 0x405d0c\n    int64_t v3 = v2; // 0x405d38\n    int64_t v4 = 0; // 0x405ce0\n    int32_t v5; // 0x405ce0\n    int64_t v6; // 0x405ce0\n    int64_t v7; // 0x405ce0\n    int64_t v8; // 0x405ce0\n    int64_t v9; // 0x405ce0\n    int64_t v10; // 0x405ce0\n    int64_t v11; // 0x405ce0\n    int64_t v12; // 0x405ce0\n    int64_t v13; // 0x405ce0\n    int64_t str3; // 0x405ce0\n    int64_t v14; // 0x405ce0\n    int64_t v15; // 0x405ce0\n    int64_t v16; // 0x405ce0\n    int64_t v17; // 0x405ce0\n    int32_t v18; // 0x405ce0\n    int32_t v19; // 0x405ce0\n    int32_t v20; // 0x405ce0\n    int32_t v21; // 0x405ce0\n    int32_t v22; // 0x405ce0\n    int32_t v23; // 0x405ce0\n    int32_t v24; // 0x405ce0\n    int32_t v25; // 0x405ce0\n    int32_t v26; // 0x405ce0\n    int32_t v27; // 0x405ce0\n    int32_t v28; // 0x405ce0\n    int32_t v29; // 0x405ce0\n    int64_t nmemb; // 0x405ce0\n    int64_t v30; // 0x405ce0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x405d3c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405d38\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405d48\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x405d4e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405d18\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x405d7c\n                int64_t v34; // 0x405ce0\n                int64_t v35; // 0x405ce0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405d85\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405f00;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405d96\n                int64_t v37 = *(int64_t *)v36; // 0x405d9a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405d70\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405d85\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405f00;\n                        }\n                    }\n                    // 0x405d96\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405de6:\n                    // 0x405de6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405e40;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405fb0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405e40;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405f60\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x405e0a;\n                                } else {\n                                    // 0x405f6c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x405e0a;\n                                    } else {\n                                        // 0x405f7a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x405e0a;\n                                        } else {\n                                            goto lab_0x405e40;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x405e0a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405e51:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406026\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4061d2\n                            flockfile(g49);\n                            int64_t v41 = *v1; // 0x4061f2\n                            __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40623f\n                            int64_t v43 = (int64_t)g49;\n                            int64_t v44 = v43; // 0x406259\n                            int64_t v45; // 0x40625b\n                            if (*(char *)v42 != 0) {\n                                // 0x40625b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g49;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406253\n                            while (v17 + nmemb != v42) {\n                                // 0x406255\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40625b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g49;\n                                }\n                                // 0x406248\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406280\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g49);\n                            v40 = *v1;\n                        } else {\n                            // 0x406034\n                            __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40618f\n                        free((int64_t *)v17);\n                    }\n                    // 0x406089\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4060a0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405f4e\n                    return 63;\n                }\n                // 0x405e70\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405ef4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405f00:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405f10\n                    uint32_t v50 = *v49; // 0x405f10\n                    int64_t v51 = v50; // 0x405f10\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405f1a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405f23\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40614f\n                                __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4060fa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405f4e\n                            return 63;\n                        }\n                        // 0x405f98\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4062af\n                                    __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4061ad\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4061c0\n                                // 0x405f4e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4060be\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4060d2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405f3b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405f3e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405f42\n                    int64_t result = v59; // 0x405f48\n                    if (v58 != 0) {\n                        // 0x405f4a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405f4e\n                    return result;\n                }\n            } else {\n                // 0x405d4e\n                v5 = v32;\n            }\n            // break -> 0x405e75\n            break;\n        }\n    }\n    // 0x405e75\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405e8d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405e97\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405f4e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405fd9\n        __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405ec6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405ed6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405e40:\n    // 0x405e40\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405e40\n    int64_t v63 = *(int64_t *)v62; // 0x405e44\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405e51\n        goto lab_0x405e51;\n    }\n    goto lab_0x405de6;\n  lab_0x405e0a:\n    // 0x405e0a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405ce0\n    int32_t v65; // 0x405ce0\n    int32_t v66; // 0x405ce0\n    if (v27 != 0) {\n        goto lab_0x405e40;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405fc0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405e40;\n            } else {\n                goto lab_0x405e31;\n            }\n        } else {\n            // 0x405e25\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40611c\n                int64_t v67 = (int64_t)mem; // 0x40611c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405e40;\n                } else {\n                    // 0x40612f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405e31;\n                }\n            } else {\n                goto lab_0x405e31;\n            }\n        }\n    }\n  lab_0x405e31:\n    // 0x405e31\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405e40;\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "4068c6",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406321\n    if (v3 < 1) {\n        // 0x4064de\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40631d\n    int32_t v5 = *(int32_t *)a7; // 0x406329\n    uint64_t v6 = a1 & 0xffffffff; // 0x40632b\n    int64_t v7 = v2; // 0x406330\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406333\n    *v8 = 0;\n    int64_t v9; // 0x406300\n    int64_t v10; // 0x406300\n    int64_t v11; // 0x406300\n    int64_t v12; // 0x406300\n    int64_t str; // 0x406300\n    int64_t v13; // 0x406300\n    int64_t v14; // 0x406300\n    int64_t v15; // 0x406300\n    int64_t v16; // 0x406300\n    int64_t v17; // 0x406300\n    int32_t v18; // 0x406300\n    char v19; // 0x406300\n    if (v5 == 0) {\n        // 0x406518\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40634a;\n    } else {\n        // 0x406343\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406390\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406393\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406458;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4063a6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4063b6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40646c;\n                } else {\n                    goto lab_0x4063c8;\n                }\n            }\n        } else {\n            goto lab_0x40634a;\n        }\n    }\n  lab_0x40634a:\n    // 0x40634a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406350\n    *v24 = 0;\n    int64_t v25; // 0x406300\n    int64_t v26; // 0x406300\n    int64_t v27; // 0x406300\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406440\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40644d;\n        }\n        case 43: {\n            // 0x406750\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40644d;\n        }\n        default: {\n            // 0x40636c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4066cf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4067e8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40644d;\n                } else {\n                    // 0x4066dd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40637a;\n                }\n            } else {\n                goto lab_0x40637a;\n            }\n        }\n    }\n  lab_0x406458:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40645f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4063c8;\n    } else {\n        goto lab_0x40646c;\n    }\n  lab_0x40637a:\n    // 0x40637a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40644d;\n  lab_0x40644d:\n    // 0x40644d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406458;\n  lab_0x4063c8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4063c8\n    int64_t v31 = v30; // 0x4063c8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4063ca\n    if ((int64_t)*v32 > v31) {\n        // 0x4063cf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4063d2\n    if (*v33 > v30) {\n        // 0x4063d7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4063da\n    int64_t v35 = v31; // 0x4063de\n    int64_t v36 = v15; // 0x4063de\n    int64_t v37; // 0x406300\n    int64_t v38; // 0x406300\n    int64_t v39; // 0x406300\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406548\n        int64_t v41 = v40; // 0x406548\n        v2 = v41;\n        int64_t v42; // 0x406300\n        if (*v33 == v40) {\n            // 0x406730\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406738\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406554\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406558\n                function_405c00(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406568\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406571\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40657a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406591\n            int64_t v47 = v45 & 0xffffffff; // 0x406595\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40659e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4065a4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4065a6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406580\n            int64_t v49 = v48 & 0xffffffff; // 0x406580\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406591\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40659e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4065a4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4065a6;\n                    }\n                }\n                // 0x406580\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406748\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4065a6;\n    } else {\n        goto lab_0x4063e4;\n    }\n  lab_0x40646c:\n    // 0x40646c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40646f\n    int64_t v51 = v12; // 0x40646f\n    int64_t v52 = v14; // 0x40646f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4063c8;\n    } else {\n        goto lab_0x406475;\n    }\n  lab_0x4063e4:;\n    int32_t v53 = v35; // 0x4063e4\n    int64_t v54; // 0x406300\n    int64_t v55; // 0x406300\n    int64_t v56; // 0x406300\n    int64_t v57; // 0x406300\n    int64_t v58; // 0x406300\n    int64_t v59; // 0x406300\n    char * v60; // 0x406300\n    int64_t v61; // 0x406300\n    int64_t v62; // 0x4063f9\n    int64_t v63; // 0x406300\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406533\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406536;\n    } else {\n        // 0x4063ec\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x406300\n        int64_t v66 = v65 ? -1 : 1; // 0x406400\n        int64_t v67 = (int64_t)\"--\"; // 0x406300\n        int64_t v68 = v62; // 0x406300\n        int64_t v69 = 3; // 0x406400\n        unsigned char v70 = *(char *)v68; // 0x406400\n        char v71 = *(char *)v67; // 0x406400\n        char v72 = v71; // 0x406400\n        bool v73 = false; // 0x406400\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4064f0\n            if (*(char *)v62 == 45) {\n                // 0x4065b0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4065b0\n                if (c == 0) {\n                    goto lab_0x4064fa;\n                } else {\n                    // 0x4065bd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406640;\n                    } else {\n                        if (c == 45) {\n                            // 0x406823\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406695;\n                        } else {\n                            // 0x4065ce\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406640;\n                            } else {\n                                // 0x4065d3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4065f4;\n                                } else {\n                                    // 0x4065da\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406640;\n                                    } else {\n                                        goto lab_0x4065f4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4064fa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406410\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406413\n            int64_t v77 = v35 + 1; // 0x406416\n            int32_t v78 = v77; // 0x406419\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406780\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406427\n                    function_405c00(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406435\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406536;\n        }\n    }\n  lab_0x406475:;\n    // 0x406475\n    int64_t v79; // bp-104, 0x406300\n    int64_t v80 = &v79; // 0x40630a\n    int64_t v81 = v50 + 1; // 0x406475\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40647c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406481\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406485\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406489\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406491\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406496\n    int32_t c2 = v84; // 0x406496\n    char * found_char_pos = strchr(str2, c2); // 0x406496\n    int64_t v87 = *v82; // 0x40649b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4064a5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4064b0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4067a0\n            __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40676d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4064de\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406496\n    char v91 = *(char *)(v90 + 1); // 0x4064cb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406485\n        if (v91 != 58) {\n            // 0x4064de\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4066f4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4067f8\n                *v8 = 0;\n            } else {\n                // 0x4067dc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40671e\n            *v83 = 0;\n            // 0x4064de\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4066fe\n        if (v93 != 0) {\n            // 0x406790\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40671e\n            *v83 = 0;\n            // 0x4064de\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406711\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40671e\n            *v83 = 0;\n            // 0x4064de\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40685a\n            __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40680a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406811\n        // 0x40671e\n        *v83 = 0;\n        // 0x4064de\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406669\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40666b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406890\n                __fprintf_chk(g49, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406841\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406848\n            // 0x4064de\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406676\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40667a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406695;\n  lab_0x4065a6:\n    // 0x4065a6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4063e4;\n  lab_0x406695:;\n    int64_t v99 = function_405ce0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4066b3\n    // 0x4064de\n    return v99 & 0xffffffff;\n  lab_0x406536:;\n    int32_t v100 = v55; // 0x406536\n    if (v100 != (int32_t)v59) {\n        // 0x40653a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4064de\n    return 0xffffffff;\n  lab_0x4064fa:\n    // 0x4064fa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406501\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4064de\n    return v99 & 0xffffffff;\n  lab_0x406640:\n    // 0x406640\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406475;\n  lab_0x4065f4:\n    // 0x4065f4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405ce0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40661a\n    if ((int32_t)v101 != -1) {\n        // 0x4064de\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40662f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406640;\n}\n"
        },
        {
            "funcName": "function_4068d0",
            "funcStartAddr": "4068d0",
            "funcEndAddr": "406926",
            "decompiledFuncCode": "int64_t function_4068d0(int64_t a1) {\n    // 0x4068d0\n    *(int32_t *)&g80 = g43;\n    *(int32_t *)&g81 = g42;\n    int64_t v1; // 0x4068d0\n    int64_t result = function_406300(v1, v1, v1, v1, v1, v1, &g80, a1 & 0xffffffff); // 0x4068f6\n    g43 = *(int32_t *)&g80;\n    g85 = (char *)g83;\n    *(int32_t *)&g41 = g82;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406930",
            "funcStartAddr": "406930",
            "funcEndAddr": "406948",
            "decompiledFuncCode": "int64_t function_406930(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406930\n    return function_4068d0(1);\n}\n"
        },
        {
            "funcName": "function_406950",
            "funcStartAddr": "406950",
            "funcEndAddr": "406963",
            "decompiledFuncCode": "int64_t function_406950(int64_t a1, int64_t a2, char * a3, char (**a4)[17], int32_t a5, int64_t a6) {\n    // 0x406950\n    return function_4068d0(0);\n}\n"
        },
        {
            "funcName": "function_406970",
            "funcStartAddr": "406970",
            "funcEndAddr": "406985",
            "decompiledFuncCode": "int64_t function_406970(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406970\n    return function_406300(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406990",
            "funcStartAddr": "406990",
            "funcEndAddr": "4069a6",
            "decompiledFuncCode": "int64_t function_406990(void) {\n    // 0x406990\n    return function_4068d0(0);\n}\n"
        },
        {
            "funcName": "function_4069b0",
            "funcStartAddr": "4069b0",
            "funcEndAddr": "4069c8",
            "decompiledFuncCode": "int64_t function_4069b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4069b0\n    return function_406300(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4069d0",
            "funcStartAddr": "4069d0",
            "funcEndAddr": "406a4a",
            "decompiledFuncCode": "int64_t function_4069d0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4069db\n    int64_t v2 = (int64_t)&g5; // 0x4069db\n    int32_t * pwc; // 0x4069d0\n    int64_t v3; // 0x4069d0\n    int64_t n; // 0x4069d0\n    if (a2 == 0) {\n        goto lab_0x406a22;\n    } else {\n        // 0x4069dd\n        if (a3 == 0) {\n            // 0x406a08\n            return -2;\n        }\n        // 0x4069e9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406a22;\n        } else {\n            goto lab_0x4069f4;\n        }\n    }\n  lab_0x406a22:\n    // 0x406a22\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4069d0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4069f4;\n  lab_0x4069f4:;\n    char * wstr = (char *)v3; // 0x4069fa\n    int64_t ps; // 0x4069d0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4069fa\n    int64_t result = v5; // 0x4069fa\n    if (v5 < 0xfffffffe) {\n        // 0x406a08\n        return result;\n    }\n    int64_t result2 = result; // 0x406a39\n    if ((char)function_4147f0(0, v3) == 0) {\n        // 0x406a3b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406a08\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406a50",
            "funcStartAddr": "406a50",
            "funcEndAddr": "406a93",
            "decompiledFuncCode": "int64_t function_406a50(int64_t a1, int64_t a2, int64_t a3) {\n    bool v1 = a1 == 0 | a2 == 0;\n    if (v1) {\n        // 0x406a6a\n        return 0;\n    }\n    // 0x406a60\n    int64_t v2; // 0x406a50\n    int64_t result = v2 & -256 | (int64_t)v1; // 0x406a5c\n    int64_t v3 = *(int64_t *)(a1 + 8); // 0x406a60\n    if (v3 != *(int64_t *)(a2 + 8)) {\n        // 0x406a6a\n        return result;\n    }\n    int64_t v4 = v3; // 0x406a82\n    v4--;\n    int64_t result2 = 1; // 0x406a86\n    while (v4 >= 0) {\n        int64_t v5 = 8 * v4; // 0x406a78\n        int64_t v6 = *(int64_t *)(*(int64_t *)(a1 + 16) + v5); // 0x406a7c\n        result2 = result;\n        if (v6 != *(int64_t *)(*(int64_t *)(a2 + 16) + v5)) {\n            // break -> 0x406a6a\n            break;\n        }\n        v4--;\n        result2 = 1;\n    }\n    // 0x406a6a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406aa0",
            "funcStartAddr": "406aa0",
            "funcEndAddr": "406b0b",
            "decompiledFuncCode": "int64_t function_406aa0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a1; // 0x406aad\n    int64_t result; // 0x406aa0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = *(int64_t *)(v2 + 8); // 0x406ab3\n        v1 = v3;\n        if (v3 == 0) {\n            int64_t v4 = *(int64_t *)(v2 + 16); // 0x406abc\n            v1 = v4;\n            if (v4 == 0) {\n                // 0x406ac5\n                result = v4;\n                if ((int32_t)v4 != 0) {\n                    // break -> 0x406b06\n                    break;\n                }\n                int64_t v5 = *(int64_t *)v2; // 0x406ad8\n                result = v4;\n                if (v5 == 0) {\n                    // break -> 0x406b06\n                    break;\n                }\n                int64_t v6 = v2;\n                int64_t v7 = v5;\n                int64_t v8 = *(int64_t *)(v7 + 16); // 0x406ae0\n                v1 = v8;\n                while (v8 == 0 || v8 == v6) {\n                    // 0x406af9\n                    result = v8;\n                    if ((int32_t)v8 != 0) {\n                        return result;\n                    }\n                    int64_t v9 = *(int64_t *)v7; // 0x406ad8\n                    result = v8;\n                    if (v9 == 0) {\n                        return result;\n                    }\n                    v6 = v7;\n                    v7 = v9;\n                    v8 = *(int64_t *)(v7 + 16);\n                    v1 = v8;\n                }\n            }\n        }\n    }\n  lab_0x406b06_2:\n    // 0x406b06\n    return result;\n}\n"
        },
        {
            "funcName": "function_406b10",
            "funcStartAddr": "406b10",
            "funcEndAddr": "406c3f",
            "decompiledFuncCode": "int64_t function_406b10(int64_t * a1, int64_t a2, uint64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x406b10\n    uint64_t v3 = *v2; // 0x406b10\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x406ba0\n        *(char *)(v1 + 8) = 2;\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x406b1e\n    char v5 = *(char *)(v4 + v3); // 0x406b29\n    *(char *)a1 = v5;\n    if (*(int32_t *)(a2 + 144) >= 2) {\n        // 0x406b32\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x406b38\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                // 0x406b77\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n        }\n    }\n    switch (v5) {\n        case 92: {\n            if (a3 % 2 == 0) {\n                // 0x406b77\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            int64_t v6 = v3 + 1;\n            if (v6 >= *(int64_t *)(a2 + 88)) {\n                // 0x406b77\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            // 0x406bf0\n            *v2 = v6;\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = *(char *)(v4 + v6);\n            return 1;\n        }\n        case 91: {\n            uint64_t v7 = v3 + 1;\n            if (v7 >= *(int64_t *)(a2 + 88)) {\n                // 0x406bce\n                *(char *)(v1 + 8) = 1;\n                *(char *)a1 = 91;\n                return 1;\n            }\n            char v8 = *(char *)(v4 + v7); // 0x406bba\n            *(char *)a1 = v8;\n            switch (v8) {\n                case 58: {\n                    if ((a3 & 4) != 0) {\n                        // 0x406c35\n                        *(char *)(v1 + 8) = 30;\n                        return 2;\n                    }\n                    // 0x406bce\n                    *(char *)(v1 + 8) = 1;\n                    *(char *)a1 = 91;\n                    return 1;\n                }\n                case 61: {\n                    // 0x406c20\n                    *(char *)(v1 + 8) = 28;\n                    return 2;\n                }\n                case 46: {\n                    // 0x406c10\n                    *(char *)(v1 + 8) = 26;\n                    return 2;\n                }\n            }\n            // 0x406bce\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = 91;\n            return 1;\n        }\n        case 93: {\n            // 0x406be0\n            *(char *)(v1 + 8) = 21;\n            return 1;\n        }\n    }\n    if (v5 == 94) {\n        // 0x406b5b\n        *(char *)(v1 + 8) = 25;\n        return 1;\n    }\n    if (v5 == 45) {\n        // 0x406b8d\n        *(char *)(v1 + 8) = 22;\n        return 1;\n    }\n    // 0x406b77\n    *(char *)(v1 + 8) = 1;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406c40",
            "funcStartAddr": "406c40",
            "funcEndAddr": "406c5d",
            "decompiledFuncCode": "int64_t function_406c40(int64_t a1, int64_t a2) {\n    // 0x406c40\n    if (*(char *)(a2 + 48) != 17 || *(int64_t *)(a2 + 40) != a1) {\n        // 0x406c46\n        return 0;\n    }\n    char * v1 = (char *)(a2 + 50); // 0x406c56\n    *v1 = *v1 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406c60",
            "funcStartAddr": "406c60",
            "funcEndAddr": "406e6f",
            "decompiledFuncCode": "int64_t function_406c60(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x406c75\n    uint64_t v2 = 0x100000000 * a2 >> 32; // 0x406c85\n    int64_t v3 = *(int64_t *)(v1 + 48) + 24 * a4; // 0x406c8d\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x406c91\n    int64_t v5 = *v4; // 0x406c91\n    if (v5 < 1) {\n        // 0x406e3d\n        return (int32_t)v2 >> 1;\n    }\n    int64_t v6 = 1 << a3 % 64;\n    int32_t v7 = v2;\n    int64_t v8 = v5; // 0x406cde\n    int64_t v9 = 0; // 0x406cde\n    int64_t v10; // 0x406ce9\n    int64_t v11; // 0x406c60\n    int64_t v12; // 0x406c60\n    int64_t v13; // 0x406c60\n    int64_t v14; // 0x406c60\n    while (true) {\n      lab_0x406cf3_2:\n        // 0x406cf3\n        v13 = v9;\n        v10 = v8;\n        int64_t v15 = *(int64_t *)(*(int64_t *)(v3 + 16) + 8 * v13); // 0x406cf7\n        int64_t v16 = 16 * v15 + *(int64_t *)v1; // 0x406d02\n        char v17 = *(char *)(v16 + 8); // 0x406d05\n        if (v17 == 8) {\n            if (v7 % 2 != 0) {\n                // 0x406d40\n                if (*(int64_t *)v16 == a3) {\n                    // 0x406d20\n                    return 0xffffffff;\n                }\n            }\n            goto lab_0x406ce5;\n        } else {\n            if (v17 != 9) {\n                if (a5 == -1 || v17 != 4) {\n                    goto lab_0x406ce5;\n                } else {\n                    // 0x406d6a\n                    v14 = 24 * v15 + 16;\n                    v11 = *(int64_t *)(a1 + 216) + 40 * a5;\n                    while (true) {\n                      lab_0x406da0:\n                        // 0x406da0\n                        v12 = v11;\n                        if (*(int64_t *)v12 != v15) {\n                            goto lab_0x406e10;\n                        } else {\n                            if (a3 > 63) {\n                                goto lab_0x406db9;\n                            } else {\n                                // 0x406dac\n                                if ((v6 & (int64_t)*(int16_t *)(v12 + 34)) == 0) {\n                                    goto lab_0x406e10;\n                                } else {\n                                    goto lab_0x406db9;\n                                }\n                            }\n                        }\n                    }\n                  lab_0x406e1c:;\n                    int64_t v18 = v13 + 1; // 0x406e2f\n                    uint64_t v19 = *v4; // 0x406e33\n                    v8 = v19;\n                    v9 = v18;\n                    if (v19 <= v18) {\n                        // break -> 0x406e3d\n                        break;\n                    }\n                    goto lab_0x406cf3_2;\n                }\n            } else {\n                if ((v7 & 2) != 0) {\n                    // 0x406d1b\n                    if (*(int64_t *)v16 == a3) {\n                        // 0x406d20\n                        return 0;\n                    }\n                }\n                goto lab_0x406ce5;\n            }\n        }\n    }\n  lab_0x406e3d:\n    // 0x406e3d\n    return v7 >> 1;\n  lab_0x406e10:\n    // 0x406e10\n    v11 = v12 + 40;\n    if (*(char *)(v12 + 32) == 0) {\n        // break -> 0x406e1c\n        goto lab_0x406e1c;\n    }\n    goto lab_0x406da0;\n  lab_0x406db9:;\n    int64_t v20 = *(int64_t *)*(int64_t *)(v14 + *(int64_t *)(v1 + 40)); // 0x406dc2\n    if (v20 == a4) {\n        // 0x406e58\n        return -((v2 % 2)) & 0xffffffff;\n    }\n    int32_t v21 = function_406c60(a1, v2 & 0xffffffff, a3, v20, a5); // 0x406de3\n    if (v21 == -1) {\n        // 0x406d20\n        return 0xffffffff;\n    }\n    // 0x406dec\n    if ((v7 & 2) != 0 == v21 == 0) {\n        // 0x406d20\n        return 0;\n    }\n    if (a3 <= 63) {\n        int16_t * v22 = (int16_t *)(v12 + 34); // 0x406e07\n        *v22 = *v22 & -1 - (int16_t)v6;\n    }\n    goto lab_0x406e10;\n  lab_0x406ce5:;\n    int64_t v23 = v13 + 1; // 0x406ce5\n    v8 = v10;\n    v9 = v23;\n    if (v10 <= v23) {\n        // break -> 0x406e3d\n        goto lab_0x406e3d;\n    }\n    goto lab_0x406cf3;\n  lab_0x406cf3:\n    // 0x406cf3\n    goto lab_0x406cf3_2;\n}\n"
        },
        {
            "funcName": "function_406e70",
            "funcStartAddr": "406e70",
            "funcEndAddr": "406ed6",
            "decompiledFuncCode": "int64_t function_406e70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = *(int64_t *)(a1 + 216) + 40 * a2; // 0x406e7b\n    int64_t v2 = *(int64_t *)(v1 + 16); // 0x406e7f\n    if (v2 > a5) {\n        // 0x406ea6\n        return 0xffffffff;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 24); // 0x406e88\n    if (v3 < a5) {\n        // 0x406ea6\n        return 1;\n    }\n    if (v3 == a5) {\n        // 0x406eb3\n        return function_406c60(a1, (int64_t)(v2 == a5) | 2, a3, a4, a6);\n    }\n    // 0x406e9f\n    if (v2 == a5) {\n        // 0x406eb3\n        return function_406c60(a1, 1, a3, a4, a6);\n    }\n    // 0x406ea6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406ee0",
            "funcStartAddr": "406ee0",
            "funcEndAddr": "406f7c",
            "decompiledFuncCode": "int64_t function_406ee0(int64_t a1, uint64_t a2) {\n    // 0x406ee0\n    if (*(int32_t *)(a1 + 144) >= 2) {\n        if (a2 >= 0x2000000000000000) {\n            // 0x406f70\n            return 12;\n        }\n        int64_t * v1 = (int64_t *)(a1 + 16); // 0x406f04\n        int32_t v2 = a2;\n        int64_t * mem = realloc((int64_t *)*v1, 4 * v2); // 0x406f10\n        if (mem == NULL) {\n            // 0x406f70\n            return 12;\n        }\n        int64_t * v3 = (int64_t *)(a1 + 24); // 0x406f1a\n        int64_t v4 = *v3; // 0x406f1a\n        *v1 = (int64_t)mem;\n        if (v4 != 0) {\n            int64_t * mem2 = realloc((int64_t *)v4, 8 * v2); // 0x406f2f\n            if (mem2 == NULL) {\n                // 0x406f70\n                return 12;\n            }\n            // 0x406f39\n            *v3 = (int64_t)mem2;\n        }\n    }\n    // 0x406f3d\n    if (*(char *)(a1 + 139) == 0) {\n        // 0x406f46\n        *(int64_t *)(a1 + 64) = a2;\n        return 0;\n    }\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x406f58\n    int64_t * mem3 = realloc((int64_t *)*v5, (int32_t)a2); // 0x406f5f\n    if (mem3 == NULL) {\n        // 0x406f70\n        return 12;\n    }\n    // 0x406f69\n    *v5 = (int64_t)mem3;\n    // 0x406f46\n    *(int64_t *)(a1 + 64) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406f80",
            "funcStartAddr": "406f80",
            "funcEndAddr": "406fe4",
            "decompiledFuncCode": "int64_t function_406f80(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x406f8c\n    int64_t v2 = *v1; // 0x406f8c\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x406f90\n    int64_t v4 = *v3; // 0x406f90\n    int64_t v5 = v4; // 0x406f97\n    int64_t v6 = v2; // 0x406f97\n    if (v2 == a1) {\n        int64_t v7 = a1 + 1; // 0x406fb8\n        *(int64_t *)a1 = 2 * v7;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)v7); // 0x406fca\n        if (mem == NULL) {\n            // 0x406faa\n            return 0;\n        }\n        // 0x406fd4\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    // 0x406f99\n    *v1 = v6 + 1;\n    *(int64_t *)(8 * v6 + v5) = a2;\n    // 0x406faa\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406ff0",
            "funcStartAddr": "406ff0",
            "funcEndAddr": "40711c",
            "decompiledFuncCode": "int64_t function_406ff0(int64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x407028\n        abort();\n        // UNREACHABLE\n    }\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x407004\n    int64_t v2 = *v1; // 0x407004\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x407008\n    int64_t v4 = *v3; // 0x407008\n    if (v2 == 0) {\n        // 0x407011\n        *(int64_t *)v4 = a2;\n        *v1 = *v1 + 1;\n        // 0x40701e\n        return 1;\n    }\n    int64_t v5 = v4; // 0x407063\n    int64_t v6 = v2; // 0x407063\n    if (v2 == a1) {\n        // 0x4070f0\n        *(int64_t *)a1 = 2 * a1;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)a1); // 0x4070fe\n        if (mem == NULL) {\n            // 0x40701e\n            return 0;\n        }\n        // 0x407108\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    int64_t v7 = 8 * v6; // 0x407069\n    int64_t v8; // 0x406ff0\n    if (*(int64_t *)v5 > a2) {\n        // 0x407076\n        v8 = v7;\n        if (v6 >= 1) {\n            int64_t v9 = v7 + v5;\n            int64_t v10 = v9 - 8; // 0x407080\n            *(int64_t *)v9 = *(int64_t *)v10;\n            v8 = 0;\n            while (v10 != v5) {\n                // 0x407080\n                v9 = v10;\n                v10 = v9 - 8;\n                *(int64_t *)v9 = *(int64_t *)v10;\n                v8 = 0;\n            }\n        }\n    } else {\n        int64_t v11 = v5 - 8; // 0x4070b0\n        int64_t v12 = *(int64_t *)(v7 + v11); // 0x4070b0\n        v8 = v7;\n        if (v12 > a2) {\n            *(int64_t *)(v7 + v5) = v12;\n            int64_t v13 = v7 - 8; // 0x4070c4\n            uint64_t v14 = *(int64_t *)(v13 + v11); // 0x4070c8\n            v8 = v13;\n            int64_t v15 = v13; // 0x4070d0\n            while (v14 > a2) {\n                // 0x4070c0\n                *(int64_t *)(v15 + v5) = v14;\n                v13 = v15 - 8;\n                v14 = *(int64_t *)(v13 + v11);\n                v8 = v13;\n                v15 = v13;\n            }\n        }\n    }\n    // 0x407093\n    *(int64_t *)(v8 + v5) = a2;\n    *v1 = *v1 + 1;\n    // 0x40701e\n    return 1;\n}\n"
        },
        {
            "funcName": "function_407120",
            "funcStartAddr": "407120",
            "funcEndAddr": "40721b",
            "decompiledFuncCode": "int64_t function_407120(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a2 + 32; // 0x40712e\n    int64_t * v2 = (int64_t *)(a2 + 16); // 0x40713b\n    int64_t v3 = *v2; // 0x40713b\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 40) = 0;\n    *(int64_t *)v1 = v3;\n    int64_t size = 8 * v3; // 0x40714e\n    int64_t * mem = malloc((int32_t)size); // 0x407156\n    *(int64_t *)(a2 + 48) = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x40719e\n        return 12;\n    }\n    if (v3 >= 0 == (v3 != 0)) {\n        int64_t v4 = 0; // 0x407170\n        int64_t v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4); // 0x40717e\n        int64_t v6 = size; // 0x407190\n        int64_t v7; // 0x407195\n        if ((*(char *)(size + 8 + 16 * v5) & 8) == 0) {\n            // 0x407192\n            v7 = function_406f80(v1, v5);\n            v6 = v1;\n            if ((char)v7 == 0) {\n                // 0x40719e\n                return 12;\n            }\n        }\n        // 0x407170\n        v4++;\n        int64_t v8 = v6; // 0x407178\n        while (*v2 > v4) {\n            // 0x40717a\n            v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4);\n            v6 = v8;\n            if ((*(char *)(v8 + 8 + 16 * v5) & 8) == 0) {\n                // 0x407192\n                v7 = function_406f80(v1, v5);\n                v6 = v1;\n                if ((char)v7 == 0) {\n                    // 0x40719e\n                    return 12;\n                }\n            }\n            // 0x407170\n            v4++;\n            v8 = v6;\n        }\n    }\n    int64_t v9 = 24 * (*(int64_t *)(a1 + 136) & a3) + *(int64_t *)(a1 + 64); // 0x4071c8\n    int64_t * v10 = (int64_t *)v9; // 0x4071cc\n    uint64_t v11 = *v10; // 0x4071cc\n    int64_t * v12 = (int64_t *)(v9 + 16); // 0x4071cf\n    int64_t v13 = *v12; // 0x4071cf\n    int64_t v14 = v11 + 1; // 0x4071d3\n    int64_t * v15 = (int64_t *)(v9 + 8); // 0x4071d7\n    int64_t v16 = v13; // 0x4071db\n    int64_t v17 = v11; // 0x4071db\n    int64_t v18 = v14; // 0x4071db\n    if (*v15 <= v11) {\n        int64_t * mem2 = realloc((int64_t *)v13, 16 * (int32_t)v14); // 0x407200\n        if (mem2 == NULL) {\n            // 0x40719e\n            return 12;\n        }\n        // 0x40720a\n        v16 = (int64_t)mem2;\n        v17 = *v10;\n        *v12 = v16;\n        *v15 = 2 * v14;\n        v18 = v17 + 1;\n    }\n    // 0x4071dd\n    *v10 = v18;\n    *(int64_t *)(8 * v17 + v16) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407220",
            "funcStartAddr": "407220",
            "funcEndAddr": "407246",
            "decompiledFuncCode": "int64_t function_407220(uint64_t a1, int64_t a2) {\n    uint64_t wc = a1 % 256; // 0x407225\n    int32_t v1 = btowc((int32_t)wc); // 0x40722f\n    int64_t v2 = v1; // 0x40722f\n    int64_t result = v2; // 0x407237\n    if (v1 == -1) {\n        // 0x407239\n        result = (a2 == 0 ? wc : v2) & 0xffffffff;\n    }\n    // 0x40723f\n    return result;\n}\n"
        },
        {
            "funcName": "function_407250",
            "funcStartAddr": "407250",
            "funcEndAddr": "4072d0",
            "decompiledFuncCode": "int64_t function_407250(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 88); // 0x407252\n    int64_t v2 = *(int64_t *)(a1 + 64); // 0x407257\n    int64_t v3 = v2 - v1; // 0x407257\n    uint64_t v4 = v3 == 0 | v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0 ? v2 : v1; // 0x40725f\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x407264\n    uint64_t v6 = *v5; // 0x407264\n    if (v4 <= v6) {\n        // 0x4072c0\n        *(int64_t *)(a1 + 56) = v6;\n        int64_t result; // 0x407250\n        return result;\n    }\n    int32_t ** v7 = __ctype_toupper_loc(); // 0x40726d\n    int64_t v8 = v6; // 0x407272\n    int64_t v9 = *(int64_t *)(a1 + 120); // 0x40727c\n    int64_t v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40)); // 0x407287\n    int64_t v11 = v10; // 0x40728d\n    if (v9 != 0) {\n        // 0x4072b8\n        v11 = (int64_t)*(char *)(v9 + v10);\n    }\n    int32_t v12 = *(int32_t *)(4 * v11 + (int64_t)*v7); // 0x407296\n    *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n    v8++;\n    while (v4 != v8) {\n        // 0x407278\n        v9 = *(int64_t *)(a1 + 120);\n        v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40));\n        v11 = v10;\n        if (v9 != 0) {\n            // 0x4072b8\n            v11 = (int64_t)*(char *)(v9 + v10);\n        }\n        // 0x40728f\n        v12 = *(int32_t *)(4 * v11 + (int64_t)*v7);\n        *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n        v8++;\n    }\n    // 0x4072a5\n    *v5 = v4;\n    *(int64_t *)(a1 + 56) = v4;\n    return (int64_t)v7;\n}\n"
        },
        {
            "funcName": "function_4072d0",
            "funcStartAddr": "4072d0",
            "funcEndAddr": "407476",
            "decompiledFuncCode": "int64_t function_4072d0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x4072df\n    int64_t v2 = *v1; // 0x4072df\n    int64_t * v3 = (int64_t *)(a1 + 48); // 0x4072e3\n    int64_t v4 = *v3; // 0x4072e3\n    int64_t * v5 = (int64_t *)(a1 + 64); // 0x4072e7\n    int64_t v6 = *v5; // 0x4072e7\n    int64_t v7 = v6 - v2; // 0x4072e7\n    uint64_t v8 = v7 == 0 | v7 < 0 != ((v7 ^ v6) & (v6 ^ v2)) < 0 ? v6 : v2; // 0x4072eb\n    int64_t result; // 0x4072d0\n    if (v8 <= v4) {\n        // 0x407388\n        *v3 = v4;\n        *(int64_t *)(a1 + 56) = v4;\n        return result;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 120); // 0x407300\n    int64_t * v10 = (int64_t *)(a1 + 32);\n    int64_t * v11 = (int64_t *)(a1 + 40);\n    int32_t * v12 = (int32_t *)(a1 + 144);\n    int64_t v13; // bp-104, 0x4072d0\n    int64_t v14 = &v13;\n    int64_t v15 = v4; // 0x4072d0\n    int64_t v16; // 0x4072d0\n    int64_t v17; // 0x4072d0\n    int64_t v18; // 0x4072d0\n    int32_t v19; // bp-108, 0x4072d0\n    int64_t v20; // 0x407307\n    int64_t result2; // 0x407448\n    while (true) {\n      lab_0x407300:\n        // 0x407300\n        v17 = v15;\n        int64_t v21 = *v9; // 0x407300\n        v20 = *v10;\n        int64_t v22 = v8 - v17; // 0x40730b\n        int64_t v23; // 0x4072d0\n        if (v21 != 0) {\n            // 0x4073e0\n            v23 = v14;\n            if (*v12 >= 1) {\n                // 0x4073ee\n                v23 = v14;\n                int64_t v24 = 0; // 0x4073f8\n                int64_t v25 = v21; // 0x4073f8\n                if (v22 >= 0 == (v22 != 0)) {\n                    int64_t v26 = v24 + v17;\n                    unsigned char v27 = *(char *)(v26 + v25 + *v11); // 0x40741e\n                    char v28 = *(char *)(v25 + (int64_t)v27); // 0x407421\n                    *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                    *(char *)(v24 + v14) = v28;\n                    int64_t v29 = v24 + 1; // 0x407432\n                    v23 = v14;\n                    while (!((v22 == v29 | (v29 & 0xffffffff) >= (int64_t)*v12))) {\n                        // 0x40740d\n                        v25 = *v9;\n                        v26 = v29 + v17;\n                        v27 = *(char *)(v26 + v25 + *v11);\n                        v28 = *(char *)(v25 + (int64_t)v27);\n                        *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                        *(char *)(v29 + v14) = v28;\n                        v29++;\n                        v23 = v14;\n                    }\n                }\n            }\n        } else {\n            // 0x407317\n            v23 = v21 + v17 + *v11;\n        }\n        int64_t v30 = function_4069d0(&v19, v23, v22); // 0x407329\n        if (v30 < 0xffffffffffffffff) {\n            // 0x407338\n            v16 = v30;\n            v18 = v19;\n            if (v30 == -2) {\n                // 0x407448\n                result2 = *v1;\n                if (*v5 < result2) {\n                    // break -> 0x407456\n                    break;\n                }\n                goto lab_0x4073a0;\n            } else {\n                goto lab_0x407346;\n            }\n        } else {\n            goto lab_0x4073a0;\n        }\n    }\n    // 0x407456\n    *v10 = v20;\n    // 0x407388\n    *v3 = v17;\n    *(int64_t *)(a1 + 56) = v17;\n    return result2;\n  lab_0x4073a0:;\n    int64_t v31 = *v9; // 0x4073a3\n    unsigned char v32 = *(char *)(v17 + (int64_t)&v19 + *v11); // 0x4073ae\n    int64_t v33 = v32; // 0x4073ae\n    v19 = v32;\n    int64_t v34 = v33; // 0x4073b8\n    if (v31 != 0) {\n        unsigned char v35 = *(char *)(v31 + v33); // 0x40745f\n        v19 = v35;\n        v34 = v35;\n    }\n    // 0x4073be\n    *v10 = v20;\n    v16 = 1;\n    v18 = v34;\n    goto lab_0x407346;\n  lab_0x407346:;\n    int64_t v36 = v16;\n    int64_t v37 = *(int64_t *)(a1 + 16); // 0x407346\n    int64_t v38 = v17 + 1; // 0x40734a\n    int64_t v39 = v37 + 4 * v17;\n    *(int32_t *)v39 = (int32_t)v18;\n    int64_t v40 = v36 + v17; // 0x407359\n    int64_t v41; // 0x4072d0\n    if (v38 < v40) {\n        int64_t v42 = v39 + 4; // 0x40736a\n        *(int32_t *)v42 = -1;\n        v42 += 4;\n        while (v37 + 4 * v40 != v42) {\n            // 0x407370\n            *(int32_t *)v42 = -1;\n            v42 += 4;\n        }\n        // 0x40737f\n        v15 = v40;\n        result = v36;\n        v41 = v40;\n        if (v40 >= v8) {\n            // 0x407388\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    } else {\n        // 0x4073d0\n        v15 = v38;\n        result = v36;\n        v41 = v38;\n        if (v38 >= v8) {\n            // 0x407388\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    }\n    // 0x407300\n    goto lab_0x407300;\n}\n"
        },
        {
            "funcName": "function_407480",
            "funcStartAddr": "407480",
            "funcEndAddr": "407a7d",
            "decompiledFuncCode": "int64_t function_407480(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x407491\n    int64_t v2 = *v1; // 0x407491\n    int64_t * v3 = (int64_t *)(a1 + 64); // 0x407495\n    int64_t v4 = *v3; // 0x407495\n    int64_t v5 = v4 - v2; // 0x407495\n    int64_t v6 = v5 == 0 | v5 < 0 != ((v5 ^ v4) & (v4 ^ v2)) < 0 ? v4 : v2; // 0x407499\n    int64_t * v7 = (int64_t *)(a1 + 48); // 0x4074a5\n    int64_t v8 = *v7; // 0x4074a5\n    int64_t * v9; // 0x407480\n    int64_t * v10; // 0x407480\n    int64_t v11; // 0x407480\n    int64_t v12; // 0x407480\n    int64_t v13; // 0x407480\n    int64_t v14; // 0x407480\n    int64_t v15; // 0x407480\n    int64_t v16; // 0x407480\n    int64_t v17; // 0x407480\n    int64_t v18; // 0x407480\n    int64_t v19; // 0x407480\n    int64_t v20; // 0x407480\n    int64_t wstr; // bp-120, 0x407480\n    struct _TYPEDEF___mbstate_t * v21; // bp-132, 0x407480\n    int32_t * v22; // 0x407480\n    int64_t v23; // 0x407480\n    int64_t * v24; // 0x407640\n    int64_t * v25; // 0x407480\n    int64_t * v26; // 0x407480\n    int64_t * v27; // 0x407480\n    int64_t v28; // 0x40764a\n    int64_t v29; // 0x407677\n    if (*(char *)(a1 + 138) != 0) {\n        goto lab_0x4074b6;\n    } else {\n        int64_t * v30 = (int64_t *)(a1 + 120);\n        if (*v30 == 0) {\n            // 0x407620\n            if (*(char *)(a1 + 140) != 0) {\n                goto lab_0x4074b6;\n            } else {\n                // 0x40762d\n                v16 = v8;\n                if (v8 < v6) {\n                    while (true) {\n                      lab_0x407640:\n                        // 0x407640\n                        v14 = v13;\n                        v28 = v14 + v19 + *v24;\n                        unsigned char v31 = *(char *)v28; // 0x40764d\n                        if (v31 <= -1) {\n                            goto lab_0x407669;\n                        } else {\n                            // 0x407658\n                            struct _TYPEDEF___mbstate_t * ps; // 0x40763a\n                            if (mbsinit(ps) != 0) {\n                                int32_t v32 = *(int32_t *)(4 * (int64_t)v31 + (int64_t)*__ctype_toupper_loc()); // 0x407774\n                                *(char *)(*v25 + v14) = (char)v32;\n                                unsigned char v33 = *(char *)(*v25 + v14); // 0x407784\n                                *(int32_t *)(*v26 + 4 * v14) = (int32_t)v33;\n                                int64_t v34; // 0x407480\n                                v20 = v34;\n                                v15 = v14 + 1;\n                                goto lab_0x40772a;\n                            } else {\n                                goto lab_0x407669;\n                            }\n                        }\n                    }\n                  lab_0x407860:\n                    // 0x407860\n                    v10 = v30;\n                    v9 = v27;\n                    v22 = (int32_t *)&v21;\n                    v23 = v29;\n                    v17 = v6;\n                    v18 = &wstr;\n                    v11 = v14;\n                    v12 = v14;\n                    goto lab_0x4074e0;\n                } else {\n                    goto lab_0x407733;\n                }\n            }\n        } else {\n            goto lab_0x4074b6;\n        }\n    }\n  lab_0x407733:\n    // 0x407733\n    *v7 = v16;\n    *(int64_t *)(a1 + 56) = v16;\n    // 0x40760a\n    return 0;\n  lab_0x4074ba:;\n    // 0x4074ba\n    int64_t v35; // 0x407480\n    int64_t v36 = v35;\n    int64_t v37; // 0x407480\n    int64_t v38 = v37;\n    int64_t v39; // 0x407480\n    int64_t v40 = v39;\n    int64_t v41 = v38; // 0x4074bd\n    int64_t v42 = v36; // 0x4074bd\n    int64_t v43; // 0x407480\n    if (v40 > v36) {\n        // 0x4074c3\n        v10 = (int64_t *)(a1 + 120);\n        v9 = (int64_t *)(a1 + 32);\n        v22 = (int32_t *)&v21;\n        v23 = v40 - v36;\n        v17 = v40;\n        v18 = v43;\n        v11 = v38;\n        v12 = v36;\n        goto lab_0x4074e0;\n    } else {\n        goto lab_0x407600;\n    }\n  lab_0x407669:\n    // 0x407669\n    v29 = v6 - v14;\n    int32_t ps2 = (int32_t)*v27; // bp-128, 0x40767a\n    uint64_t v44 = function_4069d0((int32_t *)&v21, v28, v29); // 0x407691\n    if (v44 < 0xfffffffffffffffe) {\n        int32_t wc = (int64_t)v21; // 0x4076a7\n        int32_t wc2 = towupper(wc); // 0x4076ad\n        int64_t v45; // 0x4076e7\n        if (wc2 == wc) {\n            int64_t v46 = *v25; // 0x407748\n            int64_t v47 = *v24; // 0x40774c\n            int64_t v48 = v46 + v14; // 0x407756\n            memcpy((int64_t *)v48, (int64_t *)(v47 + v14 + v48), (int32_t)v44);\n        } else {\n            int32_t v49 = wcrtomb((char *)&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x4076cd\n            if (v44 != (int64_t)v49) {\n                // break -> 0x407860\n                goto lab_0x407860;\n            }\n            // 0x4076db\n            v45 = *v25 + v14;\n            memcpy((int64_t *)v45, &wstr, (int32_t)v44);\n        }\n        int64_t v50 = v45;\n        int64_t v51 = *v26; // 0x4076ef\n        int64_t v52 = v14 + 1; // 0x4076fb\n        int64_t v53 = v51 + 4 * v14;\n        *(int32_t *)v53 = wc2;\n        int64_t v54 = v44 + v14; // 0x407703\n        v20 = v50;\n        v15 = v52;\n        if (v52 < v54) {\n            int64_t v55 = v53 + 4; // 0x407714\n            *(int32_t *)v55 = -1;\n            v55 += 4;\n            v20 = v50;\n            v15 = v54;\n            while (v51 + 4 * v54 != v55) {\n                // 0x407718\n                *(int32_t *)v55 = -1;\n                v55 += 4;\n                v20 = v50;\n                v15 = v54;\n            }\n        }\n    } else {\n        int64_t v56; // 0x407480\n        if (v44 != -2) {\n            unsigned char v57 = *(char *)(v14 + v56 + *v24); // 0x4077df\n            *(char *)(*v25 + v14) = v57;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v57;\n            *v27 = (int64_t)ps2;\n            v20 = v56;\n            v15 = v14 + 1;\n        } else {\n            // 0x40779e\n            if (*v3 < *v1) {\n                // 0x407a17\n                *v27 = (int64_t)ps2;\n                v16 = v14;\n                goto lab_0x407733;\n            }\n            unsigned char v58 = *(char *)(v14 + v56 + *v24); // 0x4077ba\n            *(char *)(*v25 + v14) = v58;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v58;\n            v20 = v56;\n            v15 = v14 + 1;\n        }\n    }\n    goto lab_0x40772a;\n  lab_0x40772a:\n    // 0x40772a\n    v19 = v20;\n    v13 = v15;\n    v16 = v15;\n    if (v6 <= v15) {\n        goto lab_0x407733;\n    }\n    goto lab_0x407640;\n  lab_0x4074b6:\n    // 0x4074b6\n    v39 = v6;\n    v43 = a1;\n    v37 = *(int64_t *)(a1 + 56);\n    v35 = v8;\n    goto lab_0x4074ba;\n  lab_0x407600:\n    // 0x407600\n    *v7 = v42;\n    *(int64_t *)(a1 + 56) = v41;\n    // 0x40760a\n    return 0;\n  lab_0x4074e0:;\n    int64_t v59 = v12;\n    int64_t v60 = v11;\n    int64_t v61 = v17;\n    int64_t v62 = v23;\n    int64_t * v63 = v9;\n    int64_t * v64 = v10;\n    int64_t v65 = *v64; // 0x4074e4\n    ps2 = (int32_t)*v63;\n    int64_t v66; // 0x407480\n    if (v65 != 0) {\n        int32_t v67 = *(int32_t *)(a1 + 144); // 0x4077ff\n        if (v62 < 1 || v67 < 1) {\n            // 0x4077ff\n            v66 = &wstr;\n        } else {\n            int64_t v68 = &wstr;\n            int64_t v69 = 2 * (*(int64_t *)(a1 + 40) + v60); // 0x40782c\n            int64_t v70 = 0;\n            char v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69)); // 0x407840\n            *(char *)(v70 + v68) = v71;\n            v66 = v68;\n            while (v70 != (int64_t)(v67 - 1)) {\n                int64_t v72 = v70 + 1; // 0x407831\n                v66 = v68;\n                if (v62 == v72) {\n                    // break -> 0x407505\n                    break;\n                }\n                v70 = v72;\n                v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69));\n                *(char *)(v70 + v68) = v71;\n                v66 = v68;\n            }\n        }\n    } else {\n        // 0x4074f6\n        v66 = v60 + v18 + *(int64_t *)(a1 + 40);\n    }\n    int64_t v73 = v66;\n    uint64_t v74 = function_4069d0(v22, v73, v62); // 0x407518\n    int64_t v75; // 0x407480\n    int32_t wc4; // 0x407533\n    if (v74 < 0xfffffffffffffffe) {\n        int32_t wc3 = (int64_t)v21; // 0x40752e\n        wc4 = towupper(wc3);\n        if (wc4 == wc3) {\n            goto lab_0x407868;\n        } else {\n            int32_t v76 = wcrtomb((char *)&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x407561\n            int64_t v77 = v76; // 0x407561\n            if (v74 != v77) {\n                if (v76 == -1) {\n                    goto lab_0x407868;\n                } else {\n                    int64_t v78 = v59 + v77; // 0x40793b\n                    uint64_t v79 = *v3; // 0x407946\n                    if (v78 > v79) {\n                        goto lab_0x4075ef;\n                    } else {\n                        int64_t * v80 = (int64_t *)(a1 + 24); // 0x407953\n                        int64_t v81 = *v80; // 0x407953\n                        int64_t v82 = v81; // 0x407958\n                        if (v81 == 0) {\n                            int64_t * mem = malloc(8 * (int32_t)v79); // 0x407a37\n                            int64_t v83 = (int64_t)mem; // 0x407a37\n                            *v80 = v83;\n                            v82 = v83;\n                            if (mem == NULL) {\n                                // 0x40760a\n                                return 12;\n                            }\n                        }\n                        char * v84 = (char *)(a1 + 140); // 0x40795e\n                        if (*v84 == 0) {\n                            int64_t v85 = v82; // 0x40796d\n                            if (v59 != 0) {\n                                int64_t v86 = 0;\n                                *(int64_t *)(8 * v86 + v85) = v86;\n                                int64_t v87 = v86 + 1; // 0x407977\n                                while (v59 != v87) {\n                                    // 0x407973\n                                    v86 = v87;\n                                    *(int64_t *)(8 * v86 + v85) = v86;\n                                    v87 = v86 + 1;\n                                }\n                            }\n                            // 0x407980\n                            *v84 = 1;\n                        }\n                        // 0x407988\n                        memcpy((int64_t *)(*(int64_t *)(a1 + 8) + v59), &wstr, v76);\n                        int64_t v88 = v74 - 1; // 0x4079a8\n                        int64_t v89 = *(int64_t *)(a1 + 16) + 4 * v59; // 0x4079ac\n                        *(int32_t *)v89 = wc4;\n                        int64_t v90 = *v80 + 8 * v59; // 0x4079b7\n                        *(int64_t *)v90 = v60;\n                        if (v76 >= 2) {\n                            uint64_t v91 = 1;\n                            int64_t v92 = v91 >= v74 ? v88 : v91; // 0x4079cf\n                            *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                            *(int32_t *)(4 * v91 + v89) = -1;\n                            int64_t v93 = v91 + 1; // 0x4079e1\n                            while (v93 != v77) {\n                                // 0x4079c9\n                                v91 = v93;\n                                v92 = v91 >= v74 ? v88 : v91;\n                                *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                                *(int32_t *)(4 * v91 + v89) = -1;\n                                v93 = v91 + 1;\n                            }\n                        }\n                        int64_t v94 = v77 - v74; // 0x4079ee\n                        int64_t v95 = *v1 + v94; // 0x4079f1\n                        *v1 = v95;\n                        if (v60 < *(int64_t *)(a1 + 96)) {\n                            int64_t * v96 = (int64_t *)(a1 + 104); // 0x4079fe\n                            *v96 = *v96 + v94;\n                        }\n                        int64_t v97 = *v3; // 0x407a02\n                        int64_t v98 = v97 - v95; // 0x407a02\n                        int64_t v99 = v98 == 0 | v98 < 0 != ((v98 ^ v97) & (v97 ^ v95)) < 0 ? v97 : v95; // 0x407a0a\n                        v39 = v99;\n                        v43 = v88;\n                        v37 = v74 + v60;\n                        v35 = v78;\n                        goto lab_0x4074ba;\n                    }\n                }\n            } else {\n                int64_t v100 = *(int64_t *)(a1 + 8) + v59; // 0x407589\n                memcpy((int64_t *)v100, &wstr, (int32_t)v74);\n                v75 = v100;\n                goto lab_0x407595;\n            }\n        }\n    } else {\n        if (v74 != -2) {\n            goto lab_0x40789d;\n        } else {\n            // 0x40788f\n            if (*v3 < *v1) {\n                goto lab_0x4075ef;\n            } else {\n                goto lab_0x40789d;\n            }\n        }\n    }\n  lab_0x407868:;\n    int64_t v101 = *(int64_t *)(a1 + 8) + v59; // 0x407878\n    memcpy((int64_t *)v101, (int64_t *)v73, (int32_t)v74);\n    v75 = v101;\n    goto lab_0x407595;\n  lab_0x40789d:;\n    int64_t v114 = (int64_t)&v21; // 0x407513\n    int64_t v115 = *v64; // 0x4078a0\n    int64_t v116 = (int64_t)*(char *)(v60 + v114 + *(int64_t *)(a1 + 40)); // 0x4078ab\n    int64_t v117 = v116; // 0x4078b1\n    if (v115 != 0) {\n        // 0x407a74\n        v117 = (int64_t)*(char *)(v115 + v116);\n    }\n    // 0x4078b7\n    *(char *)(*(int64_t *)(a1 + 8) + v59) = (char)v117;\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x407a67\n        *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v59) = v60;\n    }\n    int64_t v118 = *(int64_t *)(a1 + 16); // 0x4078d0\n    int64_t v119 = v60 + 1; // 0x4078d4\n    int64_t v120 = v59 + 1; // 0x4078d8\n    *(int32_t *)(v118 + 4 * v59) = (int32_t)v117;\n    v39 = v61;\n    v43 = v114;\n    v37 = v119;\n    v35 = v120;\n    if (v74 == -1) {\n        // 0x4078e9\n        *v63 = (int64_t)ps2;\n        v39 = v61;\n        v43 = v114;\n        v37 = v119;\n        v35 = v120;\n    }\n    goto lab_0x4074ba;\n  lab_0x407595:;\n    int64_t v102 = v75;\n    int64_t v103; // 0x407480\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x407900\n        v103 = v60;\n        if (v74 != 0) {\n            int64_t v104 = v74 + v60; // 0x407913\n            int64_t v105 = v59 - v60; // 0x407918\n            int64_t v106 = v60;\n            *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n            int64_t v107 = v106 + 1; // 0x407923\n            v103 = v104;\n            while (v104 != v107) {\n                // 0x40791f\n                v106 = v107;\n                *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n                v107 = v106 + 1;\n                v103 = v104;\n            }\n        }\n    } else {\n        // 0x4075a3\n        v103 = v74 + v60;\n    }\n    int64_t v108 = v103;\n    int64_t v109 = *(int64_t *)(a1 + 16); // 0x4075aa\n    int64_t v110 = v59 + 1; // 0x4075ae\n    int64_t v111 = v74 + v59; // 0x4075b2\n    int64_t v112 = v109 + 4 * v59;\n    *(int32_t *)v112 = wc4;\n    v39 = v61;\n    v43 = v102;\n    v37 = v108;\n    v35 = v110;\n    if (v110 < v111) {\n        int64_t v113 = v112 + 4; // 0x4075d4\n        while (true) {\n            // 0x4075d8\n            *(int32_t *)v113 = -1;\n            v113 += 4;\n            v39 = v61;\n            v43 = v102;\n            v37 = v108;\n            v35 = v111;\n            if (v109 + 4 * v111 == v113) {\n                goto lab_0x4074ba;\n            }\n        }\n    }\n    goto lab_0x4074ba;\n  lab_0x4075ef:\n    // 0x4075ef\n    *v63 = (int64_t)ps2;\n    v41 = v60;\n    v42 = v59;\n    goto lab_0x407600;\n}\n"
        },
        {
            "funcName": "function_407a80",
            "funcStartAddr": "407a80",
            "funcEndAddr": "407bce",
            "decompiledFuncCode": "int64_t function_407a80(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 64); // 0x407a90\n    uint64_t v2 = *v1; // 0x407a90\n    if (v2 >= 0xfffffffffffffff) {\n        // 0x407b2b\n        return 12;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 88); // 0x407a9d\n    int64_t v4 = *v3; // 0x407a9d\n    int64_t v5 = 2 * v2; // 0x407aa1\n    int64_t v6 = 0x100000000 * a2 >> 32; // 0x407aa4\n    int64_t v7 = v5 - v4; // 0x407aaa\n    int64_t v8 = v7 < 0 == ((v7 ^ v5) & (v4 ^ v5)) < 0 == (v7 != 0) ? v4 : v5; // 0x407aad\n    int64_t v9 = v8 - v6; // 0x407ab1\n    int64_t v10 = function_406ee0(a1, v9 < 0 == ((v9 ^ v8) & (v8 ^ v6)) < 0 ? v8 : v6); // 0x407ab8\n    int64_t result = v10 & 0xffffffff; // 0x407abd\n    if ((int32_t)v10 != 0) {\n        // 0x407b2b\n        return result;\n    }\n    int64_t * v11 = (int64_t *)(a1 + 184); // 0x407ac3\n    int64_t v12 = *v11; // 0x407ac3\n    if (v12 != 0) {\n        int64_t * mem = realloc((int64_t *)v12, 8 * (int32_t)*v1 + 8); // 0x407adb\n        if (mem == NULL) {\n            // 0x407b2b\n            return 12;\n        }\n        // 0x407ae9\n        *v11 = (int64_t)mem;\n    }\n    int32_t v13 = *(int32_t *)(a1 + 144); // 0x407af7\n    if (*(char *)(a1 + 136) != 0) {\n        if (v13 >= 2) {\n            // 0x407b0b\n            return function_407480(a1);\n        }\n        // 0x407ba8\n        function_407250(a1);\n        return result;\n    }\n    if (v13 > 1) {\n        // 0x407b90\n        function_4072d0(a1);\n        return result;\n    }\n    int64_t * v14 = (int64_t *)(a1 + 120); // 0x407b3d\n    int64_t v15 = *v14; // 0x407b3d\n    if (v15 == 0) {\n        // 0x407b2b\n        return result;\n    }\n    int64_t v16 = *v3; // 0x407b46\n    int64_t * v17 = (int64_t *)(a1 + 48); // 0x407b4a\n    uint64_t v18 = *v17; // 0x407b4a\n    int64_t v19 = *v1; // 0x407b4e\n    int64_t v20 = v19 - v16; // 0x407b4e\n    uint64_t v21 = v20 == 0 | v20 < 0 != ((v20 ^ v19) & (v19 ^ v16)) < 0 ? v19 : v16; // 0x407b52\n    if (v21 <= v18) {\n        // 0x407b5c\n        *(int64_t *)(a1 + 56) = v18;\n        // 0x407b2b\n        return result;\n    }\n    int64_t * v22 = (int64_t *)(a1 + 40); // 0x407b6a\n    unsigned char v23 = *(char *)(v18 + v12 + *v22); // 0x407b6e\n    int64_t * v24 = (int64_t *)(a1 + 8); // 0x407b75\n    *(char *)(*v24 + v18) = *(char *)(v15 + (int64_t)v23);\n    int64_t v25 = v18 + 1; // 0x407b7c\n    int64_t v26 = v25; // 0x407b83\n    if (v21 != v25) {\n        unsigned char v27 = *(char *)(v26 + v12 + *v22); // 0x407b6e\n        *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n        v26++;\n        while (v21 != v26) {\n            // 0x407b60\n            v27 = *(char *)(v26 + v12 + *v22);\n            *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n            v26++;\n        }\n    }\n    // 0x407b85\n    *v17 = v21;\n    *(int64_t *)(a1 + 56) = v21;\n    // 0x407b2b\n    return result;\n}\n"
        },
        {
            "funcName": "function_407bd0",
            "funcStartAddr": "407bd0",
            "funcEndAddr": "407c56",
            "decompiledFuncCode": "int64_t function_407bd0(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x407bd7\n    int64_t * v2 = (int64_t *)(a1 + 192); // 0x407bde\n    int64_t v3 = *v2; // 0x407bde\n    if (v1 > a2) {\n        goto lab_0x407c10;\n    } else {\n        // 0x407bea\n        if (v1 < *(int64_t *)(a1 + 88)) {\n            int64_t result = function_407a80(a1, a2 + 1 & 0xffffffff); // 0x407bf6\n            if ((int32_t)result != 0) {\n                // 0x407c06\n                return result;\n            }\n            goto lab_0x407bff;\n        } else {\n            goto lab_0x407c10;\n        }\n    }\n  lab_0x407c10:;\n    uint64_t v4 = *(int64_t *)(a1 + 48); // 0x407c10\n    if (v4 <= a2) {\n        // 0x407c19\n        if (v4 < *(int64_t *)(a1 + 88)) {\n            int64_t result2 = function_407a80(a1, a2 + 1 & 0xffffffff); // 0x407c25\n            if ((int32_t)result2 != 0) {\n                // 0x407c06\n                return result2;\n            }\n        }\n    }\n    goto lab_0x407bff;\n  lab_0x407bff:\n    // 0x407bff\n    if (v3 < a2) {\n        int64_t v5 = *(int64_t *)(a1 + 184); // 0x407c30\n        memset((int64_t *)(8 * v3 + 8 + v5), 0, 8 * (int32_t)(a2 - v3));\n        *v2 = a2;\n    }\n    // 0x407c06\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407c60",
            "funcStartAddr": "407c60",
            "funcEndAddr": "407c7e",
            "decompiledFuncCode": "int64_t function_407c60(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x407c67\n    free(v1);\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free(v1);\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_407c80",
            "funcStartAddr": "407c80",
            "funcEndAddr": "407ca8",
            "decompiledFuncCode": "int64_t function_407c80(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 + 8) & 0x400ff; // 0x407c83\n    switch (result) {\n        case 6: {\n            // 0x407c98\n            return function_407c60(a1);\n        }\n        case 3: {\n            // 0x407ca0\n            free((int64_t *)a1);\n            return &g88;\n        }\n    }\n    // 0x407c92\n    return result;\n}\n"
        },
        {
            "funcName": "function_407cb0",
            "funcStartAddr": "407cb0",
            "funcEndAddr": "407cc4",
            "decompiledFuncCode": "int64_t function_407cb0(int64_t a1, int64_t a2) {\n    // 0x407cb0\n    function_407c80(a2 + 40);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407cd0",
            "funcStartAddr": "407cd0",
            "funcEndAddr": "407e9e",
            "decompiledFuncCode": "int64_t function_407cd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407cd0\n    int128_t v1; // 0x407cd0\n    int128_t v2 = v1;\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x407ce4\n    uint64_t v4 = *v3; // 0x407ce4\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x407ce8\n    uint64_t v6 = *v5; // 0x407ce8\n    int64_t v7; // 0x407cd0\n    int64_t v8; // 0x407cd0\n    int64_t v9; // 0x407cd0\n    if (v4 >= v6) {\n        uint64_t v10 = 2 * v6; // 0x407daa\n        if (v10 >= 0xaaaaaaaaaaaaaab) {\n            // 0x407d88\n            return -1;\n        }\n        int32_t v11 = v6;\n        int64_t * mem = realloc((int64_t *)v4, 32 * v11); // 0x407dc7\n        if (mem == NULL) {\n            // 0x407d88\n            return -1;\n        }\n        // 0x407dd5\n        *(int64_t *)a1 = (int64_t)mem;\n        int64_t * v12 = (int64_t *)(a1 + 24); // 0x407ddb\n        int32_t v13 = 16 * v11; // 0x407ded\n        int64_t * mem2 = realloc((int64_t *)*v12, v13); // 0x407ded\n        int64_t * v14 = (int64_t *)(a1 + 32); // 0x407df2\n        int64_t * mem3 = realloc((int64_t *)*v14, v13); // 0x407dfc\n        int64_t * v15 = (int64_t *)(a1 + 40); // 0x407e01\n        int32_t v16 = 48 * v11; // 0x407e0c\n        int64_t * mem4 = realloc((int64_t *)*v15, v16); // 0x407e0c\n        int64_t * v17 = (int64_t *)(a1 + 48); // 0x407e11\n        int64_t * mem5 = realloc((int64_t *)*v17, v16); // 0x407e1b\n        if (mem2 == NULL | mem3 == NULL || mem4 == NULL || mem5 == NULL) {\n            // 0x407e60\n            free(mem2);\n            free(mem3);\n            free(mem4);\n            free(mem5);\n            // 0x407d88\n            return -1;\n        }\n        int64_t v18 = (int64_t)mem2; // 0x407ded\n        int64_t v19 = (int64_t)mem4; // 0x407e0c\n        *v12 = v18;\n        *v14 = (int64_t)mem3;\n        *v15 = v19;\n        *v17 = (int64_t)mem5;\n        *v5 = v10;\n        v9 = *v3;\n        v7 = v18;\n        v8 = v19;\n    } else {\n        // 0x407cf5\n        v9 = v4;\n        v7 = *(int64_t *)(a1 + 24);\n        v8 = *(int64_t *)(a1 + 40);\n    }\n    int64_t v20 = 17 * v9; // 0x407d0c\n    char v21 = a3; // 0x407d0f\n    int64_t v22 = v20 + 8; // 0x407d12\n    *(int64_t *)v22 = a3;\n    *(int64_t *)v20 = a2;\n    *(int32_t *)v22 = (int32_t)a3 & -0x3ff01;\n    bool v23 = v21 == 6; // 0x407d22\n    if (v21 == 5) {\n        int32_t v24 = *(int32_t *)(a1 + 180); // 0x407d24\n        int32_t v25 = v24 - 1; // 0x407d24\n        v23 = v25 < 0 == (v24 & -v24) < 0 == (v25 != 0);\n    }\n    char * v26 = (char *)(v20 + 10); // 0x407d2e\n    int128_t v27 = __asm_pxor(v2, v2); // 0x407d35\n    *v26 = 16 * (char)v23 | *v26 & -17;\n    *(int64_t *)(v7 + 8 * v9) = -1;\n    int64_t v28 = 24 * *v3 + v8; // 0x407d51\n    __asm_movups(*(int128_t *)v28, v27);\n    *(int64_t *)(v28 + 16) = 0;\n    int64_t v29 = *(int64_t *)(a1 + 48) + 24 * *v3; // 0x407d6d\n    __asm_movups(*(int128_t *)v29, v27);\n    *(int64_t *)(v29 + 16) = 0;\n    int64_t result = *v3; // 0x407d7c\n    *v3 = result + 1;\n    // 0x407d88\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ea0",
            "funcStartAddr": "407ea0",
            "funcEndAddr": "407f3f",
            "decompiledFuncCode": "int64_t function_407ea0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 16 * a2; // 0x407ea7\n    int64_t v2 = v1 + a1;\n    int64_t result = function_407cd0(a1, *(int64_t *)v2, *(int64_t *)(v2 + 8)); // 0x407ec6\n    if (result != -1) {\n        int64_t v3 = a3 & 0xffffffff; // 0x407eab\n        int64_t v4 = 16 * result + v3; // 0x407ee5\n        int32_t v5 = 256 * (int32_t)a3; // 0x407ee8\n        int32_t * v6 = (int32_t *)(v4 + 8); // 0x407ef3\n        int32_t v7 = *v6 & -0x3ff01; // 0x407ef6\n        *v6 = v7 | v5 & 0x3ff00;\n        uint32_t v8 = (*(int32_t *)((v1 | 8) + v3) | v5) & 0x3ff00 | v7; // 0x407f1a\n        *v6 = v8;\n        *(char *)(v4 + 10) = (char)(v8 / 0x10000) | 4;\n        *(int64_t *)(*(int64_t *)(a1 + 32) + 8 * result) = a2;\n    }\n    // 0x407f34\n    return result;\n}\n"
        },
        {
            "funcName": "function_407f40",
            "funcStartAddr": "407f40",
            "funcEndAddr": "4081c4",
            "decompiledFuncCode": "int64_t function_407f40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t * v1 = (int64_t *)(a1 + 40);\n    int64_t * v2 = (int64_t *)(a1 + 24);\n    int64_t v3 = a1; // 0x407f5a\n    int64_t v4 = a2; // 0x407f5a\n    int64_t v5 = a3; // 0x407f5a\n    int64_t v6 = a5 & 0xffffffff;\n    int32_t v7 = v6;\n    int64_t v8; // 0x407f40\n    int64_t v9; // 0x407f40\n    int64_t v10; // 0x407f40\n    int64_t v11; // 0x407f40\n    int64_t result; // 0x407f40\n    int64_t v12; // 0x407f40\n    int64_t v13; // 0x407f40\n    int64_t v14; // 0x407f40\n    int64_t v15; // 0x407f40\n    int64_t v16; // 0x4080f4\n    int64_t v17; // 0x4080f8\n    int64_t v18; // 0x4080f8\n    int64_t v19; // 0x40810f\n    int64_t v20; // 0x407f81\n    int64_t v21; // 0x407f85\n    int64_t v22; // 0x407f89\n    int64_t v23; // 0x408125\n    int64_t v24; // 0x408198\n    int64_t v25; // 0x407f9f\n    int64_t v26; // 0x407fa3\n    int64_t v27; // 0x407fbb\n    int64_t v28; // 0x407fbf\n    int64_t v29; // 0x407fc6\n    int64_t v30; // 0x407fca\n    int64_t v31; // 0x408149\n    int64_t v32; // 0x407f40\n    int64_t v33; // 0x408183\n    int64_t v34; // 0x407ff8\n    int64_t v35; // 0x407ffb\n    int64_t v36; // 0x407f65\n    int64_t v37; // 0x407f73\n    while (true) {\n        // 0x407f5f\n        v8 = v5;\n        v10 = v4;\n        v13 = v3;\n        v36 = *v1;\n        v37 = v13 + 8 + 16 * v10;\n        if (*(char *)v37 == 4) {\n            // 0x4080e0\n            v16 = 24 * v8;\n            v17 = 8 * v10;\n            v18 = *(int64_t *)(*v2 + v17);\n            *(int64_t *)(v36 + 8 + v16) = 0;\n            v19 = function_407ea0(a1, v18, v6);\n            if (v19 == -1) {\n                return 12;\n            }\n            // 0x408125\n            v23 = *v2;\n            *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n            v15 = v18;\n            v12 = v16;\n            v9 = v19;\n            goto lab_0x40805a;\n        } else {\n            // 0x407f7d\n            v20 = 24 * v10;\n            v21 = v36 + v20;\n            v22 = *(int64_t *)(v21 + 8);\n            if (v22 == 0) {\n                // 0x408198\n                v24 = *v2;\n                *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                result = 0;\n                return result;\n            }\n            // 0x407f96\n            v25 = 24 * v8;\n            v26 = v36 + v25;\n            v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n            *(int64_t *)(v26 + 8) = 0;\n            if (v22 == 1) {\n                // break -> 0x408090\n                break;\n            }\n            // 0x407fbb\n            v27 = *(int64_t *)(a1 + 16);\n            v28 = v27 - 1;\n            v29 = 16 * v28;\n            v30 = v29 + v13;\n            if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                // 0x407fe0\n                v32 = 16 * v27 - 32 - v29;\n                v14 = v28;\n                v11 = v30;\n                if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                    // 0x408018\n                    if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                        // 0x408029\n                        if ((char)function_406ff0(v26, v14) == 0) {\n                            return 12;\n                        } else {\n                            goto lab_0x408032;\n                        }\n                    }\n                }\n                // 0x407ff8\n                v34 = v32 + v11;\n                v35 = v14 - 1;\n                while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                    // 0x408012\n                    v14 = v35;\n                    v11 = v34;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x408018\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x408029\n                            if ((char)function_406ff0(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x408032;\n                            }\n                        }\n                    }\n                    // 0x407ff8\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                }\n            }\n            // 0x408140\n            v31 = function_407ea0(a1, v4, v6);\n            if (v31 == -1) {\n                return 12;\n            }\n            // 0x40815b\n            if ((char)function_406ff0(*v1 + v25, v31) == 0) {\n                return 12;\n            }\n            // 0x408172\n            v33 = function_407f40(a1, v4, v31, a4, v6);\n            result = v33;\n            if ((int32_t)v33 != 0) {\n                // 0x40807a\n                return result;\n            }\n            goto lab_0x408032;\n        }\n    }\n    if (v10 == a4 == (v10 != v8)) {\n        // 0x4081ab\n        result = 0;\n        if ((char)function_406ff0(v26, v4) != 0) {\n            return result;\n        } else {\n            return 12;\n        }\n    }\n    int64_t v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7); // 0x4080b1\n    v5 = function_407ea0(a1, v4, v38);\n    while (v5 != -1) {\n        // 0x4080c5\n        v3 = *v1 + v25;\n        if ((char)function_406ff0(v3, v5) == 0) {\n            // break -> 0x408075\n            break;\n        }\n        v6 = v38;\n        v7 = v6;\n        while (true) {\n            // 0x407f5f\n            v8 = v5;\n            v10 = v4;\n            v13 = v3;\n            v36 = *v1;\n            v37 = v13 + 8 + 16 * v10;\n            if (*(char *)v37 == 4) {\n                // 0x4080e0\n                v16 = 24 * v8;\n                v17 = 8 * v10;\n                v18 = *(int64_t *)(*v2 + v17);\n                *(int64_t *)(v36 + 8 + v16) = 0;\n                v19 = function_407ea0(a1, v18, v6);\n                if (v19 == -1) {\n                    return 12;\n                }\n                // 0x408125\n                v23 = *v2;\n                *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n                v15 = v18;\n                v12 = v16;\n                v9 = v19;\n                goto lab_0x40805a;\n            } else {\n                // 0x407f7d\n                v20 = 24 * v10;\n                v21 = v36 + v20;\n                v22 = *(int64_t *)(v21 + 8);\n                if (v22 == 0) {\n                    // 0x408198\n                    v24 = *v2;\n                    *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                    result = 0;\n                    return result;\n                }\n                // 0x407f96\n                v25 = 24 * v8;\n                v26 = v36 + v25;\n                v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n                *(int64_t *)(v26 + 8) = 0;\n                if (v22 == 1) {\n                    // break -> 0x408090\n                    break;\n                }\n                // 0x407fbb\n                v27 = *(int64_t *)(a1 + 16);\n                v28 = v27 - 1;\n                v29 = 16 * v28;\n                v30 = v29 + v13;\n                if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                    // 0x407fe0\n                    v32 = 16 * v27 - 32 - v29;\n                    v14 = v28;\n                    v11 = v30;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x408018\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x408029\n                            if ((char)function_406ff0(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x408032;\n                            }\n                        }\n                    }\n                    // 0x407ff8\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                    while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                        // 0x408012\n                        v14 = v35;\n                        v11 = v34;\n                        if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                            // 0x408018\n                            if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                                // 0x408029\n                                if ((char)function_406ff0(v26, v14) == 0) {\n                                    return 12;\n                                } else {\n                                    goto lab_0x408032;\n                                }\n                            }\n                        }\n                        // 0x407ff8\n                        v34 = v32 + v11;\n                        v35 = v14 - 1;\n                    }\n                }\n                // 0x408140\n                v31 = function_407ea0(a1, v4, v6);\n                if (v31 == -1) {\n                    return 12;\n                }\n                // 0x40815b\n                if ((char)function_406ff0(*v1 + v25, v31) == 0) {\n                    return 12;\n                }\n                // 0x408172\n                v33 = function_407f40(a1, v4, v31, a4, v6);\n                result = v33;\n                if ((int32_t)v33 != 0) {\n                    // 0x40807a\n                    return result;\n                }\n                goto lab_0x408032;\n            }\n        }\n        if (v10 == a4 == (v10 != v8)) {\n            // 0x4081ab\n            result = 0;\n            if ((char)function_406ff0(v26, v4) != 0) {\n                return result;\n            } else {\n                return 12;\n            }\n        }\n        // 0x4080a0\n        v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7);\n        v5 = function_407ea0(a1, v4, v38);\n    }\n  lab_0x408075_5:\n    // 0x40807a\n    return 12;\n  lab_0x40805a:;\n    int64_t v39 = *v1 + v12; // 0x408061\n    if ((char)function_406ff0(v39, v9) == 0) {\n        return 12;\n    }\n    goto lab_0x407f5f;\n  lab_0x408032:;\n    int64_t v40 = *(int64_t *)(*(int64_t *)(v20 + 16 + *v1) + 8); // 0x408041\n    int64_t v41 = function_407ea0(a1, v40, v6); // 0x40804c\n    v15 = v40;\n    v12 = v25;\n    v9 = v41;\n    if (v41 == -1) {\n        // break (via goto) -> 0x408075\n        goto lab_0x408075_5;\n    }\n    goto lab_0x40805a;\n}\n"
        },
        {
            "funcName": "function_4081d0",
            "funcStartAddr": "4081d0",
            "funcEndAddr": "408229",
            "decompiledFuncCode": "int64_t function_4081d0(int64_t a1) {\n    // 0x4081d0\n    free((int64_t *)*(int64_t *)(a1 + 48));\n    free((int64_t *)*(int64_t *)(a1 + 72));\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x4081e6\n    int64_t v2 = *v1; // 0x4081e6\n    if (v2 != a1 + 8) {\n        // 0x4081f3\n        free((int64_t *)*(int64_t *)(v2 + 16));\n        free((int64_t *)*v1);\n    }\n    // 0x408205\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free((int64_t *)*(int64_t *)(a1 + 96));\n    free((int64_t *)*(int64_t *)(a1 + 88));\n    free((int64_t *)a1);\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_408230",
            "funcStartAddr": "408230",
            "funcEndAddr": "408262",
            "decompiledFuncCode": "int64_t function_408230(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    free((int64_t *)*(int64_t *)(v1 + 16));\n    free((int64_t *)*(int64_t *)(v1 + 24));\n    if (*(char *)(v1 + 139) == 0) {\n        // 0x40824f\n        return &g88;\n    }\n    // 0x408258\n    free((int64_t *)*(int64_t *)(v1 + 8));\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_408270",
            "funcStartAddr": "408270",
            "funcEndAddr": "408328",
            "decompiledFuncCode": "int64_t function_408270(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 232); // 0x40827b\n    if (*v2 < 1) {\n        // 0x408309\n        *v2 = 0;\n        *(int64_t *)(v1 + 200) = 0;\n        int64_t result; // 0x408270\n        return result;\n    }\n    int64_t v3 = 0; // 0x4082f7\n    int64_t v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3); // 0x408297\n    int64_t * v5 = (int64_t *)(v4 + 32); // 0x40829b\n    int64_t * v6 = (int64_t *)(v4 + 40);\n    int64_t v7 = 0; // 0x4082a1\n    int64_t v8; // 0x4082ad\n    int64_t v9; // 0x4082b1\n    if (*v5 >= 1) {\n        v8 = *(int64_t *)(*v6 + 8 * v7);\n        v9 = v7 + 1;\n        free((int64_t *)*(int64_t *)(v8 + 32));\n        free((int64_t *)v8);\n        v7 = v9;\n        while (*v5 > v9) {\n            // 0x4082a8\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n        }\n    }\n    // 0x4082cd\n    free((int64_t *)*v6);\n    int64_t * v10 = (int64_t *)(v4 + 16); // 0x4082d7\n    int64_t v11 = *v10; // 0x4082d7\n    if (v11 != 0) {\n        // 0x4082e1\n        free((int64_t *)*(int64_t *)(v11 + 16));\n        free((int64_t *)*v10);\n    }\n    // 0x4082f4\n    v3++;\n    free((int64_t *)v4);\n    while (*v2 > v3) {\n        // 0x408290\n        v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3);\n        v5 = (int64_t *)(v4 + 32);\n        v6 = (int64_t *)(v4 + 40);\n        v7 = 0;\n        if (*v5 >= 1) {\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n            while (*v5 > v9) {\n                // 0x4082a8\n                v8 = *(int64_t *)(*v6 + 8 * v7);\n                v9 = v7 + 1;\n                free((int64_t *)*(int64_t *)(v8 + 32));\n                free((int64_t *)v8);\n                v7 = v9;\n            }\n        }\n        // 0x4082cd\n        free((int64_t *)*v6);\n        v10 = (int64_t *)(v4 + 16);\n        v11 = *v10;\n        if (v11 != 0) {\n            // 0x4082e1\n            free((int64_t *)*(int64_t *)(v11 + 16));\n            free((int64_t *)*v10);\n        }\n        // 0x4082f4\n        v3++;\n        free((int64_t *)v4);\n    }\n    // 0x408309\n    *v2 = 0;\n    *(int64_t *)(v1 + 200) = 0;\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_408330",
            "funcStartAddr": "408330",
            "funcEndAddr": "4085b0",
            "decompiledFuncCode": "int64_t function_408330(int64_t a1, int64_t a2) {\n    unsigned char v1 = *(char *)(a2 + 48); // 0x408334\n    int64_t v2 = v1; // 0x408334\n    int64_t v3 = *(int64_t *)(a2 + 56); // 0x408338\n    g96 = v2;\n    int64_t v4 = v3; // 0x408343\n    switch (v1) {\n        case 2: {\n            // 0x408408\n            if (*(int64_t *)(a2 + 32) == 0) {\n                // 0x40836a\n                return 0;\n            }\n            // 0x408413\n            __assert_fail(\"node->next == NULL\", \"lib/regcomp.c\", 1449, \"link_nfa_nodes\");\n            v4 = 1449;\n        }\n        case 4: {\n            // 0x408430\n            *(int64_t *)(8 * v4 + 0x312d203e) = *(int64_t *)0x203e207466656c38;\n            // 0x40836a\n            return 0;\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 12: {\n            int64_t v5 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x4084a5\n            int64_t * v6 = (int64_t *)v5; // 0x4084a9\n            *v6 = 1;\n            int64_t * v7 = (int64_t *)(v5 + 8); // 0x4084b0\n            *v7 = 1;\n            int64_t * mem = malloc(8); // 0x4084b8\n            *(int64_t *)(v5 + 16) = (int64_t)mem;\n            if (mem != NULL) {\n                // 0x4084c6\n                *mem = *(int64_t *)(*(int64_t *)(a2 + 32) + 56);\n                return 0;\n            }\n            // 0x408520\n            *v7 = 0;\n            *v6 = 0;\n            // 0x40836a\n            return 12;\n        }\n        case 10: {\n        }\n        case 11: {\n            char * v8 = (char *)(a1 + 176); // 0x408370\n            *v8 = *v8 | 1;\n            int64_t v9 = *(int64_t *)(a2 + 8); // 0x408377\n            int64_t v10 = a2 + 32;\n            int64_t v11 = *(int64_t *)(*(int64_t *)(v9 == 0 ? v10 : v9 + 24) + 56);\n            if (v11 < 0) {\n                // 0x408596\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g88;\n            }\n            int64_t v12 = *(int64_t *)(a2 + 16); // 0x40838c\n            int64_t v13 = *(int64_t *)(*(int64_t *)(v12 == 0 ? v10 : v12 + 24) + 56);\n            if (v13 < 0) {\n                // 0x40857d\n                __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n                // 0x408596\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g88;\n            }\n            int64_t v14 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x4083c0\n            *(int64_t *)v14 = 2;\n            int64_t * mem2 = malloc(16); // 0x4083cb\n            int64_t v15 = (int64_t)mem2; // 0x4083cb\n            *(int64_t *)(v14 + 16) = v15;\n            if (mem2 == NULL) {\n                // 0x40836a\n                return 12;\n            }\n            int64_t * v16 = (int64_t *)(v14 + 8);\n            if (v11 == v13) {\n                // 0x4084d0\n                *v16 = 1;\n                *mem2 = v11;\n                // 0x40836a\n                return 0;\n            }\n            // 0x4083e6\n            *v16 = 2;\n            if (v11 < v13) {\n                // 0x4083f4\n                *mem2 = v11;\n                *(int64_t *)(v15 + 8) = v13;\n            } else {\n                // 0x408508\n                *mem2 = v13;\n                *(int64_t *)(v15 + 8) = v11;\n            }\n            // 0x40836a\n            return 0;\n        }\n        case 16: {\n            // 0x40836a\n            return 0;\n        }\n        default: {\n            if ((v2 & 8) == 0) {\n                int64_t v17 = *(int64_t *)(*(int64_t *)(a2 + 32) + 56); // 0x40835c\n                *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v3) = v17;\n                // 0x40836a\n                return 0;\n            }\n            // 0x408564\n            __assert_fail(\"!IS_EPSILON_NODE (node->token.type)\", \"lib/regcomp.c\", 1484, \"link_nfa_nodes\");\n            // 0x40857d\n            __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n            // 0x408596\n            __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n            return &g88;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4085b0",
            "funcStartAddr": "4085b0",
            "funcEndAddr": "4085fe",
            "decompiledFuncCode": "int64_t function_4085b0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 48); // 0x4085b0\n    uint64_t v2 = a2 + 1; // 0x4085b4\n    if (v2 >= v1) {\n        // 0x4085f2\n        return 1;\n    }\n    int64_t v3 = *(int64_t *)(a1 + 16) + 4 * v2;\n    if (*(int32_t *)v3 != -1) {\n        // 0x4085f2\n        return 1;\n    }\n    int64_t v4 = 2;\n    while (v4 != v1 - a2) {\n        int64_t v5 = v4 + 1; // 0x4085e0\n        if (*(int32_t *)(v3 - 8 + 4 * v5) != -1) {\n            // break -> 0x4085f2\n            break;\n        }\n        v4 = v5;\n    }\n    // 0x4085f2\n    return v4 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408600",
            "funcStartAddr": "408600",
            "funcEndAddr": "408665",
            "decompiledFuncCode": "int64_t function_408600(int64_t a1, int64_t a2, uint64_t a3) {\n    if (a1 < 1) {\n        // 0x408645\n        return 0;\n    }\n    int64_t v1 = a1 - 1; // 0x40860a\n    int64_t v2 = 0; // 0x408613\n    if (v1 != 0) {\n        int64_t v3 = 0;\n        int64_t v4 = (v3 + v1) / 2; // 0x408619\n        int64_t v5 = v4; // 0x408620\n        int64_t v6 = v4; // 0x408620\n        int64_t v7 = v1; // 0x408620\n        int64_t v8; // 0x408600\n        int64_t v9; // 0x40862c\n        if (*(int64_t *)(8 * v4 + a2) >= a3) {\n            v2 = v3;\n            if (v3 >= v5) {\n                // break (via goto) -> 0x40863d\n                goto lab_0x40863d;\n            }\n            // 0x408628\n            v9 = (v5 + v3) / 2;\n            v6 = v9;\n            v7 = v5;\n            while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                // 0x408638\n                v8 = v9;\n                v2 = v3;\n                if (v3 >= v8) {\n                    // break (via goto) -> 0x40863d\n                    goto lab_0x40863d;\n                }\n                // 0x408628\n                v9 = (v8 + v3) / 2;\n                v6 = v9;\n                v7 = v8;\n            }\n        }\n        int64_t v10 = v7;\n        int64_t v11 = v6 + 1; // 0x408650\n        v2 = v11;\n        while (v11 < v10) {\n            // 0x408615\n            v3 = v11;\n            v4 = (v3 + v10) / 2;\n            v5 = v4;\n            v6 = v4;\n            v7 = v10;\n            if (*(int64_t *)(8 * v4 + a2) >= a3) {\n                v2 = v3;\n                if (v3 >= v5) {\n                    // break (via goto) -> 0x40863d\n                    goto lab_0x40863d;\n                }\n                // 0x408628\n                v9 = (v5 + v3) / 2;\n                v6 = v9;\n                v7 = v5;\n                while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                    // 0x408638\n                    v8 = v9;\n                    v2 = v3;\n                    if (v3 >= v8) {\n                        // break (via goto) -> 0x40863d\n                        goto lab_0x40863d;\n                    }\n                    // 0x408628\n                    v9 = (v8 + v3) / 2;\n                    v6 = v9;\n                    v7 = v8;\n                }\n            }\n            // 0x408650\n            v10 = v7;\n            v11 = v6 + 1;\n            v2 = v11;\n        }\n    }\n  lab_0x40863d:\n    // 0x40863d\n    if (*(int64_t *)(8 * v2 + a2) == a3) {\n        // 0x408660\n        return v2 + 1;\n    }\n    // 0x408645\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408670",
            "funcStartAddr": "408670",
            "funcEndAddr": "408769",
            "decompiledFuncCode": "int64_t function_408670(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a2 + 16; // 0x408677\n    int64_t * v2 = (int64_t *)(a2 + 8); // 0x408691\n    int64_t v3 = *v2; // 0x408691\n    if (function_408600(v3, v1, a3) != 0) {\n      lab_0x408758:\n        // 0x408745\n        return 0;\n    }\n    int32_t v4 = a5;\n    int64_t * v5 = (int64_t *)(a1 + 40);\n    int64_t v6 = a3;\n    int64_t v7 = 16 * v6 + v3; // 0x4086b0\n    int64_t result; // 0x408670\n    if ((int32_t)*(char *)(v7 + 8) == v4) {\n        // 0x4086bd\n        if (*(int64_t *)v7 == a4) {\n            if (v4 != 9) {\n                return 0;\n            } else {\n                // 0x40872e\n                result = 12;\n                if ((char)function_406ff0(a2, v6) != 0) {\n                    return 0;\n                } else {\n                    return result;\n                }\n            }\n        }\n    }\n    // 0x4086c2\n    result = 12;\n    while ((char)function_406ff0(a2, v6) != 0) {\n        int64_t v8 = 24 * v6; // 0x4086da\n        int64_t v9 = *v5 + v8; // 0x4086de\n        int64_t v10 = *(int64_t *)(v9 + 8); // 0x4086e1\n        if (v10 == 0) {\n            // 0x408745\n            return 0;\n        }\n        int64_t v11 = *(int64_t *)(v9 + 16); // 0x4086ea\n        int64_t v12 = v11; // 0x4086f2\n        if (v10 == 2) {\n            int64_t v13 = function_408670(a1, a2, *(int64_t *)(v11 + 8), a4, a5 & 0xffffffff); // 0x408710\n            result = v13;\n            if ((int32_t)v13 != 0) {\n                // break -> 0x408745\n                break;\n            }\n            // 0x408719\n            v12 = *(int64_t *)(v8 + 16 + *v5);\n        }\n        int64_t v14 = *(int64_t *)v12; // 0x4086f4\n        int64_t v15 = *v2; // 0x408691\n        if (function_408600(v15, v1, v14) != 0) {\n            // 0x408745\n            return 0;\n        }\n        v6 = v14;\n        v7 = 16 * v6 + v15;\n        if ((int32_t)*(char *)(v7 + 8) == v4) {\n            // 0x4086bd\n            if (*(int64_t *)v7 == a4) {\n                if (v4 != 9) {\n                    return 0;\n                } else {\n                    // 0x40872e\n                    result = 12;\n                    if ((char)function_406ff0(a2, v6) != 0) {\n                        return 0;\n                    } else {\n                        return result;\n                    }\n                }\n            }\n        }\n        // 0x4086c2\n        result = 12;\n    }\n  lab_0x408745:\n    // 0x408745\n    return result;\n}\n"
        },
        {
            "funcName": "function_408770",
            "funcStartAddr": "408770",
            "funcEndAddr": "408793",
            "decompiledFuncCode": "int64_t function_408770(uint64_t a1, int64_t result2, uint64_t a3) {\n    // 0x408770\n    if (a3 >= a1) {\n        // 0x408792\n        int64_t result; // 0x408770\n        return result;\n    }\n    int64_t v1 = a3; // 0x408773\n    int64_t v2 = 8 * v1 + result2;\n    *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n    v1++;\n    while (v1 != a1) {\n        // 0x408780\n        v2 = 8 * v1 + result2;\n        *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n        v1++;\n    }\n    // 0x408792\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4087a0",
            "funcStartAddr": "4087a0",
            "funcEndAddr": "40882b",
            "decompiledFuncCode": "int64_t function_4087a0(int64_t a1, int64_t a2) {\n    // 0x4087a0\n    int64_t * v1; // 0x4087b0\n    int64_t v2; // 0x4087b0\n    switch (*(char *)(a2 + 48)) {\n        case 4: {\n            int64_t v3 = *(int64_t *)(a1 + 224); // 0x408800\n            if (v3 == 0) {\n                // 0x4087ac\n                return 0;\n            }\n            int64_t v4 = a2 + 40; // 0x40880c\n            int64_t v5 = *(int64_t *)(8 * (int64_t)*(int32_t *)v4 + v3); // 0x408810\n            *(int64_t *)v4 = v5;\n            int64_t * v6 = (int64_t *)(a1 + 160); // 0x408821\n            *v6 = *v6 | (int64_t)(1 << (int32_t)v5 % 32);\n            return 0;\n        }\n        case 17: {\n            // 0x4087b0\n            v1 = (int64_t *)(a2 + 8);\n            v2 = *v1;\n            if (v2 == 0 || *(char *)(v2 + 48) != 17) {\n                // 0x4087ac\n                return 0;\n            }\n            // break -> 0x4087bf\n            break;\n        }\n        default: {\n            // 0x4087ac\n            return 0;\n        }\n    }\n    uint64_t v7 = *(int64_t *)(v2 + 40); // 0x4087bf\n    int64_t v8 = *(int64_t *)(v2 + 8); // 0x4087c3\n    *v1 = v8;\n    if (v8 != 0) {\n        // 0x4087d0\n        *(int64_t *)v8 = a2;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 224); // 0x4087d3\n    int64_t v10 = *(int64_t *)(8 * *(int64_t *)(a2 + 40) + v9); // 0x4087de\n    *(int64_t *)(v9 + 8 * v7) = v10;\n    if (v7 > 63) {\n        // 0x4087ac\n        return 0;\n    }\n    uint64_t v11 = v7 % 64; // 0x4087f3\n    int64_t v12 = -2; // 0x4087f3\n    if (v11 != 0) {\n        v12 = 0xfffffffffffffffe >> 64 - v11 | -2 << v11;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 160); // 0x4087f6\n    *v13 = *v13 & v12;\n    // 0x4087ac\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408830",
            "funcStartAddr": "408830",
            "funcEndAddr": "408887",
            "decompiledFuncCode": "int64_t function_408830(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a2 + 8); // 0x408834\n    switch (*(char *)(a2 + 48)) {\n        case 11: {\n            // 0x408868\n            *(int64_t *)(v1 + 32) = a2;\n            return 0;\n        }\n        case 16: {\n            int64_t v2 = *(int64_t *)(a2 + 16); // 0x408870\n            *(int64_t *)(v1 + 32) = *(int64_t *)(v2 + 24);\n            *(int64_t *)(v2 + 32) = *(int64_t *)(a2 + 32);\n            return 0;\n        }\n    }\n    if (v1 != 0) {\n        // 0x408845\n        *(int64_t *)(v1 + 32) = *(int64_t *)(a2 + 32);\n    }\n    int64_t v3 = *(int64_t *)(a2 + 16); // 0x40884d\n    if (v3 != 0) {\n        // 0x408856\n        *(int64_t *)(v3 + 32) = *(int64_t *)(a2 + 32);\n    }\n    // 0x40885e\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408890",
            "funcStartAddr": "408890",
            "funcEndAddr": "408ade",
            "decompiledFuncCode": "int64_t function_408890(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5, int64_t a6, uint64_t a7) {\n    int64_t v1 = *(int64_t *)(a1 + 200); // 0x4088a7\n    int64_t v2 = -1; // 0x4088c1\n    int64_t v3 = -1; // 0x4088c1\n    if (v1 > 0) {\n        int64_t v4 = *(int64_t *)(a1 + 216); // 0x4088c7\n        int64_t v5 = v4 + 8;\n        int64_t v6 = 0;\n        uint64_t v7 = v6 + v1; // 0x4088c3\n        int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x4088d8\n        int64_t v9 = v8; // 0x4088e4\n        int64_t v10 = v1; // 0x4088e4\n        int64_t v11 = v8; // 0x4088e4\n        int64_t v12; // 0x408890\n        int64_t v13; // 0x408890\n        uint64_t v14; // 0x4088f0\n        int64_t v15; // 0x4088fe\n        if (*(int64_t *)(40 * v8 + v5) >= a5) {\n            v13 = v6;\n            if (v6 >= v9) {\n                // break (via goto) -> 0x40891b\n                goto lab_0x40891b;\n            }\n            // 0x4088f0\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v9;\n            v11 = v15;\n            while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                // 0x408916\n                v12 = v15;\n                v13 = v6;\n                if (v6 >= v12) {\n                    // break (via goto) -> 0x40891b\n                    goto lab_0x40891b;\n                }\n                // 0x4088f0\n                v14 = v12 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v12;\n                v11 = v15;\n            }\n        }\n        int64_t v16 = v10;\n        int64_t v17 = v11 + 1; // 0x408a88\n        v13 = v17;\n        while (v17 < v16) {\n            // 0x4088c3\n            v6 = v17;\n            v7 = v6 + v16;\n            v8 = (v7 / 0x8000000000000000 + v7) / 2;\n            v9 = v8;\n            v10 = v16;\n            v11 = v8;\n            if (*(int64_t *)(40 * v8 + v5) >= a5) {\n                v13 = v6;\n                if (v6 >= v9) {\n                    // break (via goto) -> 0x40891b\n                    goto lab_0x40891b;\n                }\n                // 0x4088f0\n                v14 = v9 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v9;\n                v11 = v15;\n                while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                    // 0x408916\n                    v12 = v15;\n                    v13 = v6;\n                    if (v6 >= v12) {\n                        // break (via goto) -> 0x40891b\n                        goto lab_0x40891b;\n                    }\n                    // 0x4088f0\n                    v14 = v12 + v6;\n                    v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                    v10 = v12;\n                    v11 = v15;\n                }\n            }\n            // 0x408a88\n            v16 = v10;\n            v17 = v11 + 1;\n            v13 = v17;\n        }\n      lab_0x40891b:;\n        int64_t v18 = v13;\n        int64_t v19 = -1; // 0x40891e\n        if (v1 > v18) {\n            // 0x408924\n            v19 = *(int64_t *)(40 * v18 + 8 + v4) != a5 ? -1 : v18;\n        }\n        int64_t v20 = 0;\n        uint64_t v21 = v1 + v20; // 0x40894c\n        int64_t v22 = (v21 / 0x8000000000000000 + v21) / 2; // 0x408962\n        int64_t v23 = v22; // 0x40896e\n        int64_t v24 = v1; // 0x40896e\n        int64_t v25 = v22; // 0x40896e\n        int64_t v26; // 0x408890\n        int64_t v27; // 0x408890\n        uint64_t v28; // 0x408978\n        int64_t v29; // 0x408987\n        if (*(int64_t *)(40 * v22 + v5) >= a7) {\n            v27 = v20;\n            if (v20 >= v23) {\n                // break (via goto) -> 0x4089a4\n                goto lab_0x4089a4;\n            }\n            // 0x408978\n            v28 = v23 + v20;\n            v29 = (v28 / 0x8000000000000000 + v28) / 2;\n            v24 = v23;\n            v25 = v29;\n            while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                // 0x40899f\n                v26 = v29;\n                v27 = v20;\n                if (v20 >= v26) {\n                    // break (via goto) -> 0x4089a4\n                    goto lab_0x4089a4;\n                }\n                // 0x408978\n                v28 = v26 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v26;\n                v25 = v29;\n            }\n        }\n        int64_t v30 = v24;\n        int64_t v31 = v25 + 1; // 0x408aa0\n        v27 = v31;\n        while (v31 < v30) {\n            // 0x40894c\n            v20 = v31;\n            v21 = v30 + v20;\n            v22 = (v21 / 0x8000000000000000 + v21) / 2;\n            v23 = v22;\n            v24 = v30;\n            v25 = v22;\n            if (*(int64_t *)(40 * v22 + v5) >= a7) {\n                v27 = v20;\n                if (v20 >= v23) {\n                    // break (via goto) -> 0x4089a4\n                    goto lab_0x4089a4;\n                }\n                // 0x408978\n                v28 = v23 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v23;\n                v25 = v29;\n                while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                    // 0x40899f\n                    v26 = v29;\n                    v27 = v20;\n                    if (v20 >= v26) {\n                        // break (via goto) -> 0x4089a4\n                        goto lab_0x4089a4;\n                    }\n                    // 0x408978\n                    v28 = v26 + v20;\n                    v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                    v24 = v26;\n                    v25 = v29;\n                }\n            }\n            // 0x408aa0\n            v30 = v24;\n            v31 = v25 + 1;\n            v27 = v31;\n        }\n      lab_0x4089a4:;\n        int64_t v32 = v27;\n        v2 = v19;\n        v3 = -1;\n        if (v1 > v32) {\n            // 0x4089ad\n            v2 = v19;\n            v3 = *(int64_t *)(40 * v32 + 8 + v4) != a7 ? -1 : v32;\n        }\n    }\n    // 0x4089cc\n    if (a2 < 1) {\n        // 0x408a6e\n        return 0;\n    }\n    int64_t * v33 = (int64_t *)(a1 + 216); // 0x408a04\n    int64_t * v34 = (int64_t *)*(int64_t *)(a1 + 152); // 0x408a35\n    int64_t v35 = 0; // 0x408ab5\n    int64_t v36 = 8 * v35; // 0x408a18\n    int64_t v37 = *(int64_t *)(v36 + a3); // 0x408a18\n    int64_t v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34); // 0x408a38\n    int64_t v39 = function_406e70(a1, v37, v38, a4, a5, v2); // 0x408a3e\n    uint64_t v40 = *(int64_t *)(v38 + v36); // 0x408a5c\n    int64_t result = 1; // 0x408a67\n    while ((int32_t)v39 == (int32_t)function_406e70(a1, v40, v38, a6, a7, v3)) {\n        // 0x408ab0\n        v35++;\n        result = 0;\n        if (v35 >= v40) {\n            // break -> 0x408a6e\n            break;\n        }\n        v36 = 8 * v35;\n        v37 = *(int64_t *)(v36 + v38);\n        v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34);\n        v39 = function_406e70(a1, v37, v38, a4, a5, v2);\n        v40 = *(int64_t *)(v38 + v36);\n        result = 1;\n    }\n    // 0x408a6e\n    return result;\n}\n"
        },
        {
            "funcName": "function_408ae0",
            "funcStartAddr": "408ae0",
            "funcEndAddr": "408b31",
            "decompiledFuncCode": "int64_t function_408ae0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408ae0\n    int64_t result; // 0x408ae0\n    if ((int32_t)result != 0) {\n        // 0x408b2c\n        return result;\n    }\n    int64_t v1 = a1; // 0x408afe\n    while (true) {\n        int64_t v2 = *(int64_t *)(v1 + 8); // 0x408b00\n        int64_t v3 = v2; // 0x408b09\n        int64_t v4 = 0; // 0x408b09\n        int64_t v5 = v1; // 0x408b09\n        if (v2 == 0) {\n            int64_t v6 = v5;\n            int64_t v7 = *(int64_t *)(v6 + 16); // 0x408b13\n            v3 = v7;\n            while (v7 != v4 != v7 != 0) {\n                int64_t v8 = *(int64_t *)v6; // 0x408b21\n                v4 = v6;\n                if (v8 == 0) {\n                    return result;\n                }\n                v6 = v8;\n                v7 = *(int64_t *)(v6 + 16);\n                v3 = v7;\n            }\n        }\n        // 0x408af0\n        v1 = v3;\n    }\n}\n"
        },
        {
            "funcName": "function_408b40",
            "funcStartAddr": "408b40",
            "funcEndAddr": "408d03",
            "decompiledFuncCode": "int64_t function_408b40(int64_t * a1, int128_t * a2) {\n    // 0x408b40\n    if (a2 == NULL) {\n        // 0x408c44\n        return 0;\n    }\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x408b49\n    int64_t v3 = *v2; // 0x408b49\n    if (v3 == 0) {\n        // 0x408c44\n        return 0;\n    }\n    int64_t v4 = (int64_t)a1;\n    int64_t * v5 = (int64_t *)(v4 + 8); // 0x408b5d\n    int64_t v6 = *v5; // 0x408b5d\n    int64_t v7 = v6 + 2 * v3;\n    int64_t v8; // 0x408b40\n    int64_t * v9; // 0x408b40\n    int64_t v10; // 0x408b40\n    int64_t v11; // 0x408b40\n    int64_t v12; // 0x408b40\n    if (v7 > v4) {\n        int64_t v13 = v3 + v4; // 0x408ca0\n        int64_t * v14 = (int64_t *)(v4 + 16);\n        int64_t * mem = realloc((int64_t *)*v14, 16 * (int32_t)v13); // 0x408cb2\n        if (mem == NULL) {\n            // 0x408c44\n            return 12;\n        }\n        int64_t v15 = *v5; // 0x408cbc\n        *v14 = (int64_t)mem;\n        *a1 = 2 * v13;\n        int64_t v16 = *v2; // 0x408cc7\n        v9 = v14;\n        v11 = v16;\n        if (v15 != 0) {\n            // 0x408cbc\n            v8 = 2 * v16 + v15;\n            v10 = v16;\n            v12 = v15;\n            goto lab_0x408b7d;\n        } else {\n            goto lab_0x408cd5;\n        }\n    } else {\n        // 0x408b74\n        v8 = v7;\n        v10 = v3;\n        v12 = v6;\n        if (v6 == 0) {\n            // 0x408b74\n            v9 = (int64_t *)(v4 + 16);\n            v11 = v3;\n            goto lab_0x408cd5;\n        } else {\n            goto lab_0x408b7d;\n        }\n    }\n  lab_0x408cd5:;\n    int64_t v17 = *v9; // 0x408cd5\n    int64_t v18 = *(int64_t *)(v1 + 16); // 0x408cd9\n    *v5 = v11;\n    memcpy((int64_t *)v17, (int64_t *)v18, 8 * (int32_t)*v2);\n    // 0x408c44\n    return 0;\n  lab_0x408b7d:;\n    int64_t v19 = v10 - 1; // 0x408b81\n    int64_t v20 = -v10; // 0x408b8c\n    int64_t v21 = v19; // 0x408b93\n    int64_t v22 = v8; // 0x408b93\n    if (v20 < 0) {\n        int64_t v23 = v12; // 0x408b40\n        int64_t v24 = v20;\n        int64_t v25 = v8; // 0x408b40\n        int64_t v26 = v19;\n        while (true) {\n            int64_t v27 = v23 - 1;\n            int64_t v28 = v24; // 0x408bc6\n            v21 = v26;\n            v22 = v25;\n            if (v27 < 0) {\n                // break (via goto) -> 0x408bd0\n                goto lab_0x408bd0_2;\n            }\n            int64_t v29 = v25;\n            int64_t v30 = v26;\n            int64_t v31 = *(int64_t *)(v4 + 16); // 0x408b9f\n            uint64_t v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30); // 0x408ba3\n            uint64_t v33 = *(int64_t *)(v31 + 8 * v27); // 0x408ba7\n            int64_t v34; // 0x408b40\n            int64_t v35; // 0x408b40\n            while (v33 != v32) {\n                // 0x408bb1\n                v34 = v30;\n                v35 = v28;\n                if (v33 >= v32) {\n                    goto lab_0x408b90;\n                }\n                int64_t v36 = v30 - 1; // 0x408bb7\n                int64_t v37 = v29 - 1; // 0x408bbb\n                *(int64_t *)(v31 + 8 * v37) = v32;\n                v28 = -v30;\n                v21 = v36;\n                v22 = v37;\n                if (v28 >= 0) {\n                    // break (via goto) -> 0x408bd0\n                    goto lab_0x408bd0_2;\n                }\n                v21 = v26;\n                v22 = v25;\n                if (v27 < 0) {\n                    // break (via goto) -> 0x408bd0\n                    goto lab_0x408bd0_2;\n                }\n                // 0x408b9a\n                v29 = v37;\n                v30 = v36;\n                v31 = *(int64_t *)(v4 + 16);\n                v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30);\n                v33 = *(int64_t *)(v31 + 8 * v27);\n            }\n            // 0x408c70\n            v34 = v30 - 1;\n            v35 = -v30;\n          lab_0x408b90:\n            // 0x408b90\n            v24 = v35;\n            v26 = v34;\n            v23 = v27;\n            v25 = v29;\n            v21 = v26;\n            v22 = v29;\n            if (v24 >= 0) {\n                // break -> 0x408bd0\n                break;\n            }\n        }\n    }\n  lab_0x408bd0_2:;\n    int64_t v38 = v22; // 0x408bd3\n    if (v21 >= 0) {\n        int64_t v39 = v21 + 1; // 0x408bd5\n        int64_t v40 = *(int64_t *)(v4 + 16); // 0x408bd9\n        int64_t v41 = *(int64_t *)(v1 + 16); // 0x408bdd\n        int64_t v42 = v22 - v39; // 0x408be2\n        memcpy((int64_t *)(v40 + 8 * v42), (int64_t *)v41, 8 * (int32_t)v39);\n        v38 = v42;\n    }\n    int64_t v43 = *v5; // 0x408bf6\n    int64_t v44 = v43 - 1; // 0x408bff\n    int64_t v45 = 2 * *v2 + v44; // 0x408bff\n    int64_t v46 = v45 - v38 + 1; // 0x408c0a\n    if (v46 == 0) {\n      lab_0x408c44:\n        // 0x408c44\n        return 0;\n    }\n    int64_t v47 = *(int64_t *)(v4 + 16); // 0x408c17\n    *v5 = v46 + v43;\n    int64_t v48 = v44; // 0x408c1f\n    int64_t v49 = v46; // 0x408c1f\n    int64_t v50 = v45; // 0x408c1f\n    while (true) {\n        int64_t v51 = v50;\n        int64_t v52 = v49;\n        uint64_t v53 = *(int64_t *)(8 * v51 + v47); // 0x408c20\n        uint64_t v54 = *(int64_t *)(8 * v48 + v47); // 0x408c24\n        int64_t v55 = 8 * (v52 + v48) + v47; // 0x408c2c\n        while (v53 > v54) {\n            // 0x408c35\n            *(int64_t *)v55 = v53;\n            int64_t v56 = v52 - 1; // 0x408c3c\n            if (v56 == 0) {\n                return 0;\n            }\n            v51--;\n            v52 = v56;\n            v53 = *(int64_t *)(8 * v51 + v47);\n            v54 = *(int64_t *)(8 * v48 + v47);\n            v55 = 8 * (v52 + v48) + v47;\n        }\n        // 0x408c50\n        *(int64_t *)v55 = v54;\n        int64_t v57 = v48 - 1; // 0x408c53\n        v48 = v57;\n        v49 = v52;\n        v50 = v51;\n        if (v57 < 0) {\n            // 0x408c59\n            memcpy((int64_t *)v47, (int64_t *)(v47 + 8 * v38), 8 * (int32_t)v52);\n            return 0;\n        }\n    }\n    // 0x408c44\n    int64_t v58; // 0x408b40\n    int64_t result = v58;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408d10",
            "funcStartAddr": "408d10",
            "funcEndAddr": "408f64",
            "decompiledFuncCode": "int64_t function_408d10(int128_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 24 * a3; // 0x408d24\n    int64_t * v2 = (int64_t *)(a2 + 40); // 0x408d2c\n    int64_t v3 = *v2 + v1; // 0x408d34\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x408d3b\n    int64_t v5 = *v4 + 1; // 0x408d48\n    int128_t v6 = v5; // bp-120, 0x408d4c\n    int64_t * mem = malloc(8 * (int32_t)v5); // 0x408d55\n    if (mem == NULL) {\n        // 0x408e3a\n        return 12;\n    }\n    int64_t v7 = (int64_t)mem; // 0x408d55\n    int64_t * v8 = (int64_t *)(a2 + 48); // 0x408d68\n    int64_t v9 = v1 + 8;\n    *(int64_t *)(*v8 + v9) = -1;\n    int64_t v10 = a2 + 8 + 16 * a3;\n    uint32_t v11 = *(int32_t *)v10; // 0x408d83\n    int64_t v12 = v10; // 0x408d8e\n    if ((v11 & 0x3ff00) != 0) {\n        // 0x408eb0\n        if (*v4 == 0) {\n            goto lab_0x408f00;\n        } else {\n            int64_t v13 = *(int64_t *)*(int64_t *)(v3 + 16); // 0x408ebb\n            v12 = v10;\n            if ((*(char *)(a2 + 10 + 16 * v13) & 4) == 0) {\n                int64_t result = function_407f40(a2, a3, a3, a3, (int64_t)(v11 / 256 % 1024)); // 0x408ee4\n                if ((int32_t)result != 0) {\n                    // 0x408e3a\n                    return result;\n                }\n                // 0x408ef1\n                v12 = 17 * a3 + 8;\n            }\n            goto lab_0x408d94;\n        }\n    } else {\n        goto lab_0x408d94;\n    }\n  lab_0x408d94:;\n    // 0x408d94\n    int64_t v14; // 0x408d10\n    int64_t v15; // 0x408d10\n    if ((*(char *)v12 & 8) == 0) {\n        goto lab_0x408f00;\n    } else {\n        int64_t v16 = *v2; // 0x408d9e\n        int64_t v17 = v16 + v1; // 0x408da2\n        if (*(int64_t *)(v17 + 8) < 1) {\n            goto lab_0x408f00;\n        } else {\n            int64_t v18 = 0;\n            int64_t v19 = *(int64_t *)(*(int64_t *)(v17 + 16) + 8 * v18); // 0x408e07\n            int64_t v20 = *v8; // 0x408e0b\n            int64_t v21 = 24 * v19; // 0x408e13\n            int64_t v22 = v20 + v21; // 0x408e17\n            int64_t v23 = *(int64_t *)(v22 + 8); // 0x408e1a\n            int64_t v24 = 0; // 0x408e22\n            int64_t v25 = v18; // 0x408e22\n            int64_t v26 = v19; // 0x408e22\n            int64_t v27 = v21; // 0x408e22\n            int64_t v28 = v22; // 0x408e22\n            int64_t v29 = v23; // 0x408e22\n            int64_t v30; // 0x408d10\n            int64_t v31; // 0x408e68\n            int64_t v32; // 0x408e72\n            int64_t v33; // 0x408e07\n            int64_t v34; // 0x408e13\n            int64_t v35; // 0x408e17\n            int64_t v36; // 0x408e1a\n            if (v23 == -1) {\n                // 0x408e68\n                v31 = v16 + v1;\n                v32 = v18;\n                v32++;\n                v30 = 1;\n                if (*(int64_t *)(v31 + 8) <= v32) {\n                    // break (via goto) -> 0x408e7c\n                    goto lab_0x408e7c;\n                }\n                // 0x408e03\n                v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                v34 = 24 * v33;\n                v35 = v34 + v20;\n                v36 = *(int64_t *)(v35 + 8);\n                v24 = 1;\n                v25 = v32;\n                v26 = v33;\n                v27 = v34;\n                v28 = v35;\n                v29 = v36;\n                while (v36 == -1) {\n                    // 0x408e68\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x408e7c\n                        goto lab_0x408e7c;\n                    }\n                    // 0x408e03\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                }\n            }\n            int64_t v37 = v29;\n            int64_t result2; // 0x408d10\n            int64_t v38; // 0x408d10\n            int128_t v39; // bp-88, 0x408d10\n            int64_t v40; // 0x408e31\n            if (v37 != 0) {\n                // 0x408dc0\n                v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                v38 = *(int64_t *)(v28 + 16);\n            } else {\n                // 0x408e29\n                v40 = function_408d10(&v39, a2, v26, v37);\n                int64_t v41; // 0x408d10\n                v38 = v41;\n                result2 = v40;\n                if ((int32_t)v40 != 0) {\n                    // 0x408e3a\n                    return result2;\n                }\n            }\n            int64_t v42 = function_408b40((int64_t *)&v6, &v39); // 0x408ddc\n            result2 = v42;\n            while ((int32_t)v42 == 0) {\n                int64_t v43 = v38;\n                int64_t v44 = v24; // 0x408def\n                if (*(int64_t *)(v27 + 8 + *v8) == 0) {\n                    // 0x408e50\n                    free((int64_t *)v43);\n                    v44 = 1;\n                }\n                int64_t v45 = *v2; // 0x408df1\n                int64_t v46 = v25 + 1; // 0x408df5\n                int64_t v47 = v45 + v1; // 0x408df9\n                int64_t v48 = v45; // 0x408e01\n                if (*(int64_t *)(v47 + 8) <= v46) {\n                    // break -> 0x408e7c\n                    break;\n                }\n                v18 = v46;\n                int64_t v49 = v43;\n                v19 = *(int64_t *)(*(int64_t *)(v47 + 16) + 8 * v18);\n                v20 = *v8;\n                v21 = 24 * v19;\n                v22 = v20 + v21;\n                v23 = *(int64_t *)(v22 + 8);\n                v24 = v44;\n                v25 = v18;\n                v26 = v19;\n                v27 = v21;\n                v28 = v22;\n                v29 = v23;\n                if (v23 == -1) {\n                    // 0x408e68\n                    v31 = v48 + v1;\n                    v32 = v18;\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x408e7c\n                        goto lab_0x408e7c;\n                    }\n                    // 0x408e03\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                    while (v36 == -1) {\n                        // 0x408e68\n                        v32++;\n                        v30 = 1;\n                        if (*(int64_t *)(v31 + 8) <= v32) {\n                            // break (via goto) -> 0x408e7c\n                            goto lab_0x408e7c;\n                        }\n                        // 0x408e03\n                        v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                        v34 = 24 * v33;\n                        v35 = v34 + v20;\n                        v36 = *(int64_t *)(v35 + 8);\n                        v24 = 1;\n                        v25 = v32;\n                        v26 = v33;\n                        v27 = v34;\n                        v28 = v35;\n                        v29 = v36;\n                    }\n                }\n                // 0x408e24\n                v37 = v29;\n                if (v37 != 0) {\n                    // 0x408dc0\n                    v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                    v38 = *(int64_t *)(v28 + 16);\n                } else {\n                    // 0x408e29\n                    v40 = function_408d10(&v39, a2, v26, v37);\n                    v38 = v49;\n                    result2 = v40;\n                    if ((int32_t)v40 != 0) {\n                        // 0x408e3a\n                        return result2;\n                    }\n                }\n                // 0x408dd2\n                v42 = function_408b40((int64_t *)&v6, &v39);\n                result2 = v42;\n            }\n            // 0x408e3a\n            return result2;\n          lab_0x408e7c:\n            // 0x408e7c\n            if ((char)function_406ff0((int64_t)&v6, a3) == 0) {\n                // 0x408e3a\n                return 12;\n            }\n            int64_t v50 = *v8; // 0x408e91\n            v15 = v50;\n            if ((char)a4 == 1 || (char)v30 == 0) {\n                goto lab_0x408f15;\n            } else {\n                // 0x408ea5\n                *(int64_t *)(v50 + v9) = 0;\n                v14 = 0x100000000 * v7 >> 32;\n                goto lab_0x408f29;\n            }\n        }\n    }\n  lab_0x408f00:\n    // 0x408f00\n    if ((char)function_406ff0((int64_t)&v6, a3) == 0) {\n        // 0x408e3a\n        return 12;\n    }\n    // 0x408f11\n    v15 = *v8;\n    goto lab_0x408f15;\n  lab_0x408f15:;\n    int128_t v51 = __asm_movdqa(0); // 0x408f15\n    int64_t v52 = v15 + v1;\n    __asm_movups(*(int128_t *)v52, v51);\n    int64_t v53 = 0x100000000 * v7 >> 32;\n    *(int64_t *)(v52 + 16) = v53;\n    v14 = v53;\n    goto lab_0x408f29;\n  lab_0x408f29:;\n    int128_t v54 = __asm_movdqa(0); // 0x408f32\n    *(int64_t *)((int64_t)a1 + 16) = v14;\n    *a1 = (int128_t)__asm_movaps(v54);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408f70",
            "funcStartAddr": "408f70",
            "funcEndAddr": "4090af",
            "decompiledFuncCode": "int64_t function_408f70(int64_t a1, int64_t * a2, int64_t a3, uint32_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x408f87\n    int64_t v3 = *v2; // 0x408f87\n    int64_t size = 8 * v3; // 0x408f94\n    int128_t v4 = v3; // bp-72, 0x408f9c\n    int64_t * mem = malloc((int32_t)size); // 0x408fa1\n    if (mem == NULL) {\n        // 0x40909d\n        return 12;\n    }\n    int64_t * v5 = (int64_t *)(v1 + 16);\n    if (v3 < 1) {\n      lab_0x40903d:\n        // 0x40903d\n        free((int64_t *)*v5);\n        int128_t v6 = __asm_movdqa(0); // 0x40904b\n        *v5 = (int64_t)mem;\n        *(int128_t *)a2 = (int128_t)__asm_movaps(v6);\n        return 0;\n    }\n    int64_t v7 = &v4;\n    int64_t v8 = size; // 0x408f70\n    int64_t v9 = 0; // 0x409033\n    int64_t v10; // 0x408f70\n    int64_t v11; // 0x408f70\n    int64_t v12; // 0x408fd0\n    while (true) {\n      lab_0x408fc0:;\n        int64_t v13 = *(int64_t *)(*v5 + 8 * v9); // 0x408fc4\n        v12 = *(int64_t *)(a1 + 48) + 24 * v13;\n        uint64_t v14 = *(int64_t *)(v12 + 8); // 0x408fd4\n        if (v14 >= 1) {\n            int64_t v15 = 0;\n            int64_t v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16)); // 0x408ff9\n            int64_t v17 = 16 * v16 + v8; // 0x409004\n            int64_t v18; // 0x40902a\n            if ((int32_t)*(char *)(v17 + 8) == a4) {\n                // 0x409011\n                if (*(int64_t *)v17 == a3) {\n                    if (v16 == -1) {\n                        goto lab_0x409070;\n                    } else {\n                        // 0x40901c\n                        v18 = function_408670(a1, v7, v13, a3, (int64_t)a4);\n                        v11 = a1;\n                        v10 = v18;\n                        if ((int32_t)v18 != 0) {\n                            goto lab_0x40907e_2;\n                        } else {\n                            goto lab_0x409033;\n                        }\n                    }\n                }\n            }\n            int64_t v19 = v15 + 1; // 0x408ff0\n            while (v14 != v19) {\n                // 0x408ff9\n                v15 = v19;\n                v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16));\n                v17 = 16 * v16 + v8;\n                if ((int32_t)*(char *)(v17 + 8) == a4) {\n                    // 0x409011\n                    if (*(int64_t *)v17 == a3) {\n                        if (v16 == -1) {\n                            goto lab_0x409070;\n                        } else {\n                            // 0x40901c\n                            v18 = function_408670(a1, v7, v13, a3, (int64_t)a4);\n                            v11 = a1;\n                            v10 = v18;\n                            if ((int32_t)v18 != 0) {\n                                goto lab_0x40907e_2;\n                            } else {\n                                goto lab_0x409033;\n                            }\n                        }\n                    }\n                }\n                // 0x408ff0\n                v19 = v15 + 1;\n            }\n        }\n        goto lab_0x409070;\n    }\n  lab_0x40907e_2:\n    // 0x40907e\n    free(mem);\n    return v10 & 0xffffffff;\n  lab_0x409070:;\n    int64_t v20 = function_408b40((int64_t *)&v4, (int128_t *)v12); // 0x409075\n    v11 = v7;\n    v10 = v20;\n    if ((int32_t)v20 != 0) {\n        // break -> 0x40907e\n        goto lab_0x40907e_2;\n    }\n    goto lab_0x409033;\n  lab_0x409033:\n    // 0x409033\n    v9++;\n    v8 = v11;\n    if (*v2 <= v9) {\n        goto lab_0x40903d;\n    }\n    goto lab_0x408fc0;\n}\n"
        },
        {
            "funcName": "function_4090b0",
            "funcStartAddr": "4090b0",
            "funcEndAddr": "409262",
            "decompiledFuncCode": "int64_t function_4090b0(int128_t * a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x4090b0\n    int64_t v2 = *v1; // 0x4090b0\n    if (v2 == 0) {\n        // 0x409178\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(a3 + 8); // 0x4090bf\n    int64_t v4 = *v3; // 0x4090bf\n    if (v4 == 0) {\n        // 0x409178\n        return 0;\n    }\n    int64_t v5 = (int64_t)a1;\n    int64_t v6 = v4 + v2; // 0x4090ce\n    int64_t * v7 = (int64_t *)(v5 + 8); // 0x4090e3\n    int64_t v8 = *v7; // 0x4090e3\n    int64_t * v9 = (int64_t *)(v5 + 16); // 0x4090ea\n    int64_t v10 = *v9; // 0x4090ea\n    int64_t v11 = v8; // 0x4090f5\n    int64_t v12 = v10; // 0x4090f5\n    int64_t v13 = v4; // 0x4090f5\n    int64_t v14 = v2; // 0x4090f5\n    if (v8 + v6 > v5) {\n        int64_t v15 = v6 + v5; // 0x40922a\n        int64_t * mem = realloc((int64_t *)v10, 8 * (int32_t)v15); // 0x409235\n        if (mem == NULL) {\n            // 0x409178\n            return 12;\n        }\n        // 0x409242\n        v12 = (int64_t)mem;\n        v11 = *v7;\n        v14 = *v1;\n        *v9 = v12;\n        *(int64_t *)a1 = v15;\n        v13 = *v3;\n    }\n    int64_t v16 = *(int64_t *)(a2 + 16); // 0x4090fb\n    int64_t v17 = *(int64_t *)(a3 + 16); // 0x4090ff\n    int64_t v18 = v13 - 1; // 0x409108\n    int64_t v19 = v18; // 0x40911c\n    int64_t v20 = v11 - 1; // 0x40911c\n    int64_t v21 = *(int64_t *)(v17 + 8 * v18); // 0x40911c\n    int64_t v22 = v13 + v11 + v14; // 0x40911c\n    int64_t v23 = v14 - 1; // 0x40911c\n    int64_t v24; // 0x4090b0\n    int64_t v25; // 0x4090b0\n    int64_t v26; // 0x4090b0\n    int64_t v27; // 0x4090b0\n    int64_t v28; // 0x4090b0\n    int64_t v29; // 0x4090b0\n    int64_t v30; // 0x4090b0\n    int64_t v31; // 0x4090b0\n    int64_t v32; // 0x4090b0\n    int64_t v33; // 0x4090b0\n    int64_t v34; // 0x4090b0\n    int64_t v35; // 0x4090b0\n    int64_t v36; // 0x4090b0\n    int64_t v37; // 0x4090b0\n    while (true) {\n      lab_0x409120:;\n        int64_t v38 = v21;\n        int64_t v39 = *(int64_t *)(8 * v23 + v16);\n        v26 = v24;\n        v27 = v25;\n        v32 = v19;\n        v34 = v20;\n        v21 = v38;\n        v36 = v22;\n        v30 = v39;\n        v28 = v23;\n        v33 = v19;\n        v35 = v20;\n        v37 = v22;\n        v31 = v38;\n        v29 = v23;\n        if (v39 == v38) {\n            goto lab_0x409136;\n        } else {\n            goto lab_0x409125;\n        }\n    }\n  lab_0x409190_4:;\n    int64_t v40 = *v7; // 0x409190\n    int64_t v41 = *v1 + v40 + *v3; // 0x40919b\n    int64_t v42 = v40 - 1; // 0x4091a0\n    int64_t v43; // 0x4090b0\n    int64_t v44 = v41 - v43; // 0x4091a8\n    *v7 = v44 + v40;\n    int64_t v45; // 0x4090b0\n    int64_t v46; // 0x4090b0\n    if (v42 < 0 || v44 < 1) {\n        // 0x409210\n        v46 = 8 * v44;\n        v45 = v12;\n    } else {\n        int64_t v47 = v42; // 0x4090b0\n        int64_t v48 = v44; // 0x4090b0\n        int64_t v49 = v41 - 1; // 0x4090b0\n        while (true) {\n            int64_t v50 = v47;\n            int64_t v51 = v49;\n            int64_t v52 = v48;\n            uint64_t v53 = *(int64_t *)(8 * v51 + v12); // 0x4091c0\n            uint64_t v54 = *(int64_t *)(8 * v50 + v12); // 0x4091c4\n            int64_t v55 = 8 * (v52 + v50) + v12; // 0x4091cc\n            while (v53 > v54) {\n                // 0x4091d5\n                *(int64_t *)v55 = v53;\n                int64_t v56 = v52 - 1; // 0x4091dc\n                if (v56 == 0) {\n                    // break (via goto) -> 0x4091e2\n                    goto lab_0x4091e2;\n                }\n                v51--;\n                v52 = v56;\n                v53 = *(int64_t *)(8 * v51 + v12);\n                v54 = *(int64_t *)(8 * v50 + v12);\n                v55 = 8 * (v52 + v50) + v12;\n            }\n            // 0x4091f0\n            *(int64_t *)v55 = v54;\n            v47 = v50 - 1;\n            v48 = v52;\n            v49 = v51;\n            if (v50 == 0) {\n                // 0x4091fd\n                v46 = 8 * v52;\n                v45 = *v9;\n                goto lab_0x409214;\n            }\n        }\n      lab_0x4091e2:\n        // 0x4091e2\n        v46 = 0;\n        v45 = *v9;\n    }\n    goto lab_0x409214;\n  lab_0x409158:;\n    // 0x409158\n    int64_t v58; // 0x4090b0\n    int64_t v59 = v58 - 1; // 0x409158\n    uint64_t v60; // 0x4090b0\n    *(int64_t *)(8 * v59 + v12) = v60;\n    int64_t v61; // 0x4090b0\n    int64_t v62 = v61; // 0x40915c\n    int64_t v63 = v59; // 0x40915c\n    goto lab_0x409160;\n  lab_0x409136:\n    // 0x409136\n    v60 = v31;\n    v58 = v37;\n    int64_t v72 = v35; // 0x409139\n    v61 = v35;\n    if (v35 >= 0) {\n        int64_t v73 = v72;\n        uint64_t v74 = *(int64_t *)(8 * v73 + v12); // 0x40914a\n        while (v74 > v60) {\n            // 0x409140\n            v72 = v73 - 1;\n            v61 = -1;\n            if (v73 == 0) {\n                goto lab_0x409158;\n            }\n            v73 = v72;\n            v74 = *(int64_t *)(8 * v73 + v12);\n        }\n        // 0x409153\n        v61 = v73;\n        v62 = v73;\n        v63 = v58;\n        if (v74 == v60) {\n            goto lab_0x409160;\n        } else {\n            goto lab_0x409158;\n        }\n    } else {\n        goto lab_0x409158;\n    }\n  lab_0x409125:;\n    int64_t v75 = v28;\n    v22 = v36;\n    v20 = v34;\n    v19 = v32;\n    int64_t v76 = v27;\n    int64_t v77 = v26;\n    int64_t v70; // 0x4090b0\n    int64_t v69; // 0x4090b0\n    int64_t v66; // 0x4090b0\n    int64_t v67; // 0x4090b0\n    int64_t v68; // 0x4090b0\n    if (v77 < v76) {\n        int64_t v78 = v19 - 1; // 0x409127\n        v66 = v78;\n        v67 = v20;\n        v68 = v22;\n        v69 = v30;\n        v70 = v75;\n        if (v78 < 0) {\n            // break -> 0x409190\n            goto lab_0x409190_4;\n        }\n        goto lab_0x40912d;\n    } else {\n        // 0x409180\n        v23 = v75 - 1;\n        v24 = v77;\n        v25 = v76;\n        v43 = v22;\n        if (v23 < 0) {\n            // break -> 0x409190\n            goto lab_0x409190_4;\n        }\n        goto lab_0x409120;\n    }\n  lab_0x409160:;\n    int64_t v64 = v29 - 1; // 0x409160\n    v43 = v63;\n    if (v64 < 0) {\n        // break -> 0x409190\n        goto lab_0x409190_4;\n    }\n    int64_t v65 = v33 - 1; // 0x409166\n    v43 = v63;\n    if (v65 < 0) {\n        // break -> 0x409190\n        goto lab_0x409190_4;\n    }\n    // 0x40916c\n    v66 = v65;\n    v67 = v62;\n    v68 = v63;\n    v69 = *(int64_t *)(8 * v64 + v16);\n    v70 = v64;\n    goto lab_0x40912d;\n  lab_0x40912d:;\n    int64_t v71 = *(int64_t *)(8 * v66 + v17); // 0x40912d\n    v26 = v69;\n    v27 = v71;\n    v32 = v66;\n    v34 = v67;\n    v21 = v71;\n    v36 = v68;\n    v30 = v69;\n    v28 = v70;\n    v33 = v66;\n    v35 = v67;\n    v37 = v68;\n    v31 = v69;\n    v29 = v70;\n    if (v69 != v71) {\n        goto lab_0x409125;\n    } else {\n        goto lab_0x409136;\n    }\n  lab_0x409214:;\n    int64_t v57 = v45;\n    memcpy((int64_t *)v57, (int64_t *)(v57 + 8 * v43), (int32_t)v46);\n    // 0x409178\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409270",
            "funcStartAddr": "409270",
            "funcEndAddr": "409347",
            "decompiledFuncCode": "int64_t function_409270(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int64_t a5) {\n    int64_t v1 = a5;\n    int32_t v2 = a2;\n    int64_t v3; // 0x409270\n    int64_t v4; // 0x409270\n    int32_t v5; // 0x409270\n    int64_t v6; // 0x409270\n    if (v2 == 15) {\n        int64_t * mem = malloc(968); // 0x409308\n        if (mem == NULL) {\n            // 0x4092e9\n            return 0;\n        }\n        int64_t v7 = (int64_t)mem; // 0x409308\n        *(int64_t *)a1 = v7;\n        *mem = 968;\n        v5 = 1;\n        v6 = 0;\n        v4 = 8;\n        v3 = v7;\n    } else {\n        int64_t v8 = 0x100000000 * a2;\n        int64_t v9 = v8 >> 26; // 0x409289\n        v5 = v2 + 1;\n        v6 = v9;\n        v4 = v9 | 8;\n        v3 = v8 >> 32;\n    }\n    int64_t v10 = a3;\n    int64_t v11 = a4;\n    *(int32_t *)a2 = v5;\n    int64_t result = v3 + v4; // 0x409296\n    int64_t v12 = v3 + v6;\n    *(int64_t *)(v12 + 8) = 0;\n    *(int64_t *)(v12 + 16) = v10;\n    *(int64_t *)(v12 + 24) = v11;\n    __asm_movups(*(int128_t *)(v12 + 48), __asm_movdqu(*(int128_t *)&v1));\n    char * v13 = (char *)(v12 + 58); // 0x4092bb\n    *v13 = *v13 & -13;\n    *(int64_t *)(v12 + 32) = 0;\n    *(int64_t *)(v12 + 40) = 0;\n    *(int64_t *)(v12 + 64) = -1;\n    if (a3 != 0) {\n        // 0x4092de\n        *(int64_t *)v10 = result;\n    }\n    // 0x4092e1\n    if (a4 != 0) {\n        // 0x4092e6\n        *(int64_t *)v11 = result;\n    }\n    // 0x4092e9\n    return result;\n}\n"
        },
        {
            "funcName": "function_409350",
            "funcStartAddr": "409350",
            "funcEndAddr": "4093f9",
            "decompiledFuncCode": "int64_t function_409350(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 112; // 0x409354\n    int64_t v2 = a2 + 128; // 0x40935a\n    int64_t v3 = function_409270(v1, v2, 0, 0, a1 + 40); // 0x40938d\n    int64_t v4 = v3; // bp-48, 0x409392\n    if (v3 == 0) {\n        // 0x4093dd\n        return 0;\n    }\n    *(int64_t *)v3 = a1;\n    int64_t v5 = *&v4; // 0x40939d\n    char * v6 = (char *)(v5 + 50); // 0x4093a0\n    *v6 = *v6 | 4;\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x4093a4\n    int64_t v8; // 0x409350\n    int64_t v9; // 0x409350\n    int64_t result; // 0x409350\n    int64_t v10; // 0x409350\n    int64_t v11; // 0x409350\n    int64_t v12; // 0x409350\n    int64_t v13; // 0x409350\n    int64_t v14; // 0x409350\n    int64_t v15; // 0x4093c9\n    int64_t v16; // 0x4093cc\n    int64_t v17; // 0x4093bb\n    int64_t v18; // 0x4093bb\n    if (v7 != 0) {\n        // 0x409378\n        v13 = v7;\n        v10 = v5;\n        v9 = v5 + 8;\n    } else {\n        // 0x4093bb\n        v18 = *(int64_t *)(a1 + 16);\n        v11 = v5;\n        v12 = v5;\n        v8 = v18;\n        if (v18 != 0 != v18 != 0) {\n            v14 = a1;\n            v15 = *(int64_t *)v14;\n            if (v15 == 0) {\n                // 0x4093d8\n                result = v4;\n                return result;\n            }\n            // 0x4093b8\n            v16 = *(int64_t *)v11;\n            v17 = *(int64_t *)(v15 + 16);\n            v11 = v16;\n            v12 = v16;\n            v8 = v17;\n            while (v17 != 0 != v17 != v14) {\n                // 0x4093c9\n                v14 = v15;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x4093d8\n                    result = v4;\n                    return result;\n                }\n                // 0x4093b8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n            }\n        }\n        // 0x4093f0\n        v13 = v8;\n        v10 = v12;\n        v9 = v12 + 16;\n    }\n    int64_t v19 = v13;\n    int64_t v20 = function_409270(v1, v2, 0, 0, v19 + 40); // 0x40938d\n    int64_t * v21 = (int64_t *)v9; // 0x409392\n    *v21 = v20;\n    result = 0;\n    while (v20 != 0) {\n        int64_t v22 = v19;\n        *(int64_t *)v20 = v10;\n        v5 = *v21;\n        v6 = (char *)(v5 + 50);\n        *v6 = *v6 | 4;\n        v7 = *(int64_t *)(v22 + 8);\n        if (v7 != 0) {\n            // 0x409378\n            v13 = v7;\n            v10 = v5;\n            v9 = v5 + 8;\n        } else {\n            // 0x4093bb\n            v18 = *(int64_t *)(v22 + 16);\n            v11 = v5;\n            int64_t v23 = v22; // 0x4093c2\n            v12 = v5;\n            v8 = v18;\n            if (v18 != 0 != v18 != 0) {\n                v14 = v23;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x4093d8\n                    result = v4;\n                    return result;\n                }\n                // 0x4093b8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n                while (v17 != 0 != v17 != v14) {\n                    // 0x4093c9\n                    v14 = v15;\n                    v15 = *(int64_t *)v14;\n                    if (v15 == 0) {\n                        // 0x4093d8\n                        result = v4;\n                        return result;\n                    }\n                    // 0x4093b8\n                    v16 = *(int64_t *)v11;\n                    v17 = *(int64_t *)(v15 + 16);\n                    v11 = v16;\n                    v12 = v16;\n                    v8 = v17;\n                }\n            }\n            // 0x4093f0\n            v13 = v8;\n            v10 = v12;\n            v9 = v12 + 16;\n        }\n        // 0x40937f\n        v19 = v13;\n        v20 = function_409270(v1, v2, 0, 0, v19 + 40);\n        v21 = (int64_t *)v9;\n        *v21 = v20;\n        result = 0;\n    }\n  lab_0x4093dd:\n    // 0x4093dd\n    return result;\n}\n"
        },
        {
            "funcName": "function_409400",
            "funcStartAddr": "409400",
            "funcEndAddr": "40961a",
            "decompiledFuncCode": "int64_t function_409400(int32_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = *(int64_t *)(a3 + 8); // 0x409414\n    int64_t v1; // 0x409400\n    int64_t v2; // 0x409400\n    int64_t v3; // 0x409400\n    int64_t v4; // 0x409400\n    int64_t v5; // 0x409400\n    int64_t v6; // bp-72, 0x409400\n    int64_t v7; // 0x409400\n    int64_t v8; // 0x40944f\n    int64_t v9; // 0x409456\n    int64_t v10; // 0x409400\n    int64_t v11; // 0x409479\n    int64_t v12; // 0x409493\n    if ((*(char *)(a2 + 56) & 16) == 0) {\n        int64_t v13 = a2 + 128; // 0x4095a8\n        int64_t v14 = a2 + 112; // 0x4095af\n        int64_t v15 = &v6;\n        int64_t v16 = function_409270(v14, v13, 0, 0, v15); // 0x4095d2\n        int64_t v17 = function_409270(v14, v13, 0, 0, v15); // 0x4095ec\n        v10 = v15;\n        v8 = v13;\n        v11 = v16;\n        v9 = v14;\n        v12 = v17;\n        v1 = v15;\n        v7 = v13;\n        v5 = v16;\n        v2 = v17;\n        v3 = v14;\n        v4 = v17;\n        if (result != 0) {\n            goto lab_0x40949b;\n        } else {\n            goto lab_0x4094b9;\n        }\n    } else {\n        if (result == 0) {\n            int64_t v18 = a2 + 128; // 0x409550\n            int64_t v19 = a2 + 112; // 0x409557\n            int64_t v20 = &v6;\n            int64_t v21 = function_409270(v19, v18, 0, 0, v20); // 0x40957a\n            int64_t v22 = function_409270(v19, v18, 0, 0, v20); // 0x409594\n            v1 = v20;\n            v7 = v18;\n            v5 = v21;\n            v2 = v22;\n            v3 = v19;\n            v4 = v22;\n            goto lab_0x4094b9;\n        } else {\n            uint64_t v23 = *(int64_t *)(a3 + 40); // 0x409430\n            if (v23 > 63 || (*(int64_t *)(a2 + 160) & 1 << v23 % 64) == 0) {\n                // 0x409537\n                return result;\n            }\n            // 0x40944f\n            v8 = a2 + 128;\n            v9 = a2 + 112;\n            v10 = &v6;\n            v11 = function_409270(v9, v8, 0, 0, v10);\n            v12 = function_409270(v9, v8, 0, 0, v10);\n            goto lab_0x40949b;\n        }\n    }\n  lab_0x40949b:;\n    int64_t v24 = function_409270(v9, v8, (int32_t)result, (int32_t)v12, v10); // 0x4094b1\n    v1 = v10;\n    v7 = v8;\n    v5 = v11;\n    v2 = v24;\n    v3 = v9;\n    v4 = v12;\n    goto lab_0x4094b9;\n  lab_0x4094b9:;\n    int64_t v25 = function_409270(v3, v7, (int32_t)v5, (int32_t)v2, v1); // 0x4094d4\n    int64_t result2; // 0x409400\n    if (v4 == 0 || v5 == 0 || v2 == 0 || v25 == 0) {\n        // 0x409608\n        *a1 = 12;\n        result2 = 0;\n    } else {\n        int64_t v26 = *(int64_t *)(a3 + 40); // 0x409505\n        *(int64_t *)(v4 + 40) = v26;\n        *(int64_t *)(v5 + 40) = v26;\n        char * v27 = (char *)(v4 + 50); // 0x409518\n        char v28 = *(char *)(a3 + 50) & 8;\n        *v27 = *v27 & -9 | v28;\n        char * v29 = (char *)(v5 + 50); // 0x40952b\n        *v29 = *v29 & -9 | v28;\n        result2 = v25;\n    }\n    // 0x409537\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409620",
            "funcStartAddr": "409620",
            "funcEndAddr": "40969b",
            "decompiledFuncCode": "int64_t function_409620(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40962c\n    int64_t v2 = *v1; // 0x40962c\n    int32_t result = 0; // bp-28, 0x409630\n    int64_t v3; // 0x409620\n    if (v2 != 0) {\n        // 0x40963d\n        if (*(char *)(v2 + 48) == 17) {\n            int64_t v4 = function_409400(&result, a1, v2, v3); // 0x409668\n            *v1 = v4;\n            if (v4 != 0) {\n                // 0x409676\n                *(int64_t *)v4 = a2;\n            }\n        }\n    }\n    int64_t * v5 = (int64_t *)(a2 + 16); // 0x409643\n    int64_t v6 = *v5; // 0x409643\n    if (v6 == 0 || *(char *)(v6 + 48) != 17) {\n        // 0x409652\n        return result;\n    }\n    int64_t v7 = function_409400(&result, a1, v6, v3); // 0x409688\n    *v5 = v7;\n    if (v7 != 0) {\n        // 0x409696\n        *(int64_t *)v7 = a2;\n    }\n    // 0x409652\n    return result;\n}\n"
        },
        {
            "funcName": "function_4096a0",
            "funcStartAddr": "4096a0",
            "funcEndAddr": "40971f",
            "decompiledFuncCode": "int64_t function_4096a0(int64_t a1, int64_t a2) {\n    // 0x4096a0\n    int128_t v1; // 0x4096a0\n    int128_t v2 = v1;\n    int64_t v3 = a1;\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x4096a0\n    *(int64_t *)(a1 + 8) = v4;\n    if (v4 < 1) {\n        int128_t v5 = __asm_pxor(v2, v2); // 0x4096f0\n        *(int64_t *)(v3 + 16) = 0;\n        __asm_movups(*(int128_t *)&v3, v5);\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)v3; // 0x4096bf\n    *v6 = v4;\n    int32_t size = 8 * (int32_t)v4; // 0x4096c5\n    int64_t * mem = malloc(size); // 0x4096c5\n    *(int64_t *)(v3 + 16) = (int64_t)mem;\n    int64_t result; // 0x4096a0\n    if (mem == NULL) {\n        // 0x409708\n        *(int64_t *)(v3 + 8) = 0;\n        *v6 = 0;\n        result = 12;\n    } else {\n        // 0x4096d3\n        memcpy(mem, (int64_t *)*(int64_t *)(a2 + 16), size);\n        result = 0;\n    }\n    // 0x4096e5\n    return result;\n}\n"
        },
        {
            "funcName": "function_409720",
            "funcStartAddr": "409720",
            "funcEndAddr": "4098a2",
            "decompiledFuncCode": "int64_t function_409720(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x409720\n    int128_t v1; // 0x409720\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    if (a2 != 0) {\n        int64_t * v4 = (int64_t *)(a2 + 8); // 0x409737\n        int64_t v5 = *v4; // 0x409737\n        if (a3 != 0 && v5 >= 1) {\n            int64_t * v6 = (int64_t *)(a3 + 8); // 0x40974d\n            uint64_t v7 = *v6; // 0x40974d\n            if (v7 < 1) {\n                // 0x409823\n                return function_4096a0(v3, a2);\n            }\n            int64_t v8 = v7 + v5; // 0x40975d\n            *a1 = v8;\n            int64_t * mem = malloc(8 * (int32_t)v8); // 0x40976f\n            int64_t v9 = (int64_t)mem; // 0x40976f\n            *(int64_t *)(v3 + 16) = v9;\n            if (mem == NULL) {\n                // 0x40980a\n                return 12;\n            }\n            int64_t v10 = *(int64_t *)(a2 + 16); // 0x409784\n            int64_t v11 = 0;\n            int64_t v12 = 0;\n            int64_t v13 = v9;\n            int64_t v14 = *(int64_t *)(a3 + 16); // 0x4097c8\n            int64_t v15 = *(int64_t *)v10; // 0x4097cc\n            int64_t v16 = *(int64_t *)(v14 + 8 * v11); // 0x4097d3\n            int64_t v17; // 0x409720\n            int64_t v18; // 0x409720\n            if (v15 > v16) {\n                // 0x4097dc\n                *(int64_t *)v13 = v16;\n                v17 = v11 + 1;\n                v18 = v12;\n            } else {\n                // 0x409798\n                *(int64_t *)v13 = v15;\n                v17 = v11 + (int64_t)(v15 == v16);\n                v18 = v12 + 1;\n            }\n            int64_t v19 = 1; // 0x4097cf\n            int64_t v20 = v18;\n            int64_t v21 = v17;\n            uint64_t v22 = *v4; // 0x4097aa\n            int64_t v23; // 0x409720\n            while (v22 > v20) {\n                int64_t v24 = v13 + 8; // 0x4097ae\n                int64_t v25 = 8 * v20 + v10; // 0x4097bb\n                if (v7 <= v21) {\n                    int64_t v26 = v22 - v20; // 0x409880\n                    memcpy((int64_t *)v24, (int64_t *)v25, 8 * (int32_t)v26);\n                    v23 = v26 + v19;\n                    goto lab_0x409849;\n                }\n                v11 = v21;\n                v12 = v20;\n                v13 = v24;\n                v14 = *(int64_t *)(a3 + 16);\n                v15 = *(int64_t *)v25;\n                v16 = *(int64_t *)(v14 + 8 * v11);\n                if (v15 > v16) {\n                    // 0x4097dc\n                    *(int64_t *)v13 = v16;\n                    v17 = v11 + 1;\n                    v18 = v12;\n                } else {\n                    // 0x409798\n                    *(int64_t *)v13 = v15;\n                    v17 = v11 + (int64_t)(v15 == v16);\n                    v18 = v12 + 1;\n                }\n                // 0x4097aa\n                v19++;\n                v20 = v18;\n                v21 = v17;\n                v22 = *v4;\n            }\n            int64_t v27 = *v6; // 0x409840\n            v23 = v19;\n            if (v27 > v21) {\n                int64_t v28 = v27 - v21; // 0x40986b\n                memcpy((int64_t *)(8 * v19 + v9), (int64_t *)(8 * v21 + v14), 8 * (int32_t)v28);\n                v23 = v28 + v19;\n            }\n          lab_0x409849:\n            // 0x409849\n            *(int64_t *)(v3 + 8) = v23;\n            return 0;\n        }\n        // 0x4097e8\n        if (v5 >= 0 == (v5 != 0)) {\n            // 0x409823\n            return function_4096a0(v3, a2);\n        }\n    }\n    if (a3 != 0) {\n        int64_t v29 = *(int64_t *)(a3 + 8); // 0x4097f2\n        if (v29 >= 0 == (v29 != 0)) {\n            // 0x409823\n            return function_4096a0(v3, a3);\n        }\n    }\n    // 0x4097f9\n    *(int64_t *)(v3 + 16) = 0;\n    *(int128_t *)a1 = (int128_t)__asm_movaps(__asm_pxor(v2, v2));\n    // 0x40980a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4098b0",
            "funcStartAddr": "4098b0",
            "funcEndAddr": "409bb0",
            "decompiledFuncCode": "int64_t function_4098b0(int128_t * a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x4098be\n    uint64_t v3 = *v2; // 0x4098be\n    if (v3 == 0) {\n        // 0x409b88\n        *(int32_t *)a1 = 0;\n        // 0x409957\n        return 0;\n    }\n    uint64_t v4 = (int64_t)a4;\n    int64_t v5 = v3 + (v4 & 0xffffffff); // 0x4098ce\n    int64_t v6 = v5; // 0x4098d2\n    if (v3 >= 1) {\n        int64_t v7 = *(int64_t *)(v1 + 16); // 0x4098d4\n        int64_t v8 = v7; // 0x4098dc\n        int64_t v9 = v5; // 0x4098dc\n        v9 += *(int64_t *)v8;\n        v8 += 8;\n        v6 = v9;\n        while (v7 + 8 * v3 != v8) {\n            // 0x4098e0\n            v9 += *(int64_t *)v8;\n            v8 += 8;\n            v6 = v9;\n        }\n    }\n    int64_t v10 = *(int64_t *)(a2 + 136) & v6; // 0x409901\n    int64_t v11 = 24 * v10 + *(int64_t *)(a2 + 64); // 0x40990c\n    uint64_t v12 = *(int64_t *)v11; // 0x409910\n    if (v12 >= 1) {\n        int64_t v13 = 0; // 0x409922\n        int64_t v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16)); // 0x409931\n        int64_t result; // 0x4098b0\n        if (*(int64_t *)v14 == v6) {\n            // 0x40993a\n            if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                // 0x409947\n                result = v14;\n                if ((char)function_406a50(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                    // 0x409957\n                    return result;\n                }\n            }\n        }\n        // 0x409928\n        v13++;\n        while (v13 != v12) {\n            // 0x409931\n            v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16));\n            if (*(int64_t *)v14 == v6) {\n                // 0x40993a\n                if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                    // 0x409947\n                    result = v14;\n                    if ((char)function_406a50(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                        // 0x409957\n                        return result;\n                    }\n                }\n            }\n            // 0x409928\n            v13++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x40997a\n    if (mem == NULL) {\n        // 0x409b08\n        *(int32_t *)a1 = 12;\n        // 0x409957\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x40997a\n    int64_t v15 = result2 + 8; // 0x40998b\n    if ((int32_t)function_4096a0(v15, v1) != 0) {\n        // 0x409ba3\n        free(mem);\n        // 0x409b08\n        *(int32_t *)a1 = 12;\n        // 0x409957\n        return 0;\n    }\n    char * v16 = (char *)(result2 + 104); // 0x4099a6\n    *v16 = *v16 & -16 | (char)a4 % 16;\n    int64_t * v17 = (int64_t *)(result2 + 80); // 0x4099c6\n    *v17 = v15;\n    int64_t v18; // 0x4098b0\n    int64_t v19; // 0x4098b0\n    int64_t v20; // 0x4098b0\n    int64_t v21; // 0x4098b0\n    int64_t v22; // 0x4098b0\n    int64_t v23; // 0x4098b0\n    int64_t v24; // 0x4098b0\n    int64_t v25; // 0x4098b0\n    int64_t v26; // 0x4099d0\n    int64_t v27; // 0x4098b0\n    int64_t * v28; // 0x4098b0\n    uint64_t v29; // 0x409a0a\n    if (*v2 >= 1) {\n        // 0x4099d0\n        v26 = result2 + 24;\n        v27 = result2 + 16;\n        v28 = (int64_t *)v27;\n        v23 = v1;\n        v18 = 0;\n        v21 = 0;\n        while (true) {\n          lab_0x4099f0:\n            // 0x4099f0\n            v22 = v21;\n            int64_t v30 = v18;\n            int64_t v31 = 16 * *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v22) + v23; // 0x4099fc\n            int64_t v32 = v31 + 8; // 0x409a00\n            uint32_t v33 = *(int32_t *)v32; // 0x409a00\n            unsigned char v34 = *(char *)v32; // 0x409a03\n            v25 = 1;\n            v20 = v30;\n            if (v34 == 1 == (v33 & 0x3ff00) == 0) {\n                goto lab_0x409ace;\n            } else {\n                char v35 = 2 * *(char *)(v31 + 10) & 32 | *v16;\n                *v16 = v35;\n                if (v34 == 2) {\n                    // 0x409b20\n                    *v16 = v35 | 16;\n                } else {\n                    if (v34 == 4) {\n                        // 0x409a54\n                        *v16 = v35 | 64;\n                    }\n                }\n                int64_t v36 = v34; // 0x409a03\n                v25 = v36;\n                v20 = v30;\n                if ((v33 & 0x3ff00) == 0) {\n                    goto lab_0x409ace;\n                } else {\n                    int64_t v37 = v36; // 0x409a69\n                    int64_t v38 = v30; // 0x409a69\n                    if (v15 == *v17) {\n                        int64_t * mem2 = malloc(24); // 0x409b55\n                        int64_t v39 = (int64_t)mem2; // 0x409b55\n                        *v17 = v39;\n                        if (mem2 == NULL) {\n                            // 0x409b96\n                            function_4081d0(result2);\n                            goto lab_0x409b08;\n                        }\n                        // 0x409b64\n                        if ((int32_t)function_4096a0(v39, v1) != 0) {\n                          lab_0x409b08:\n                            // 0x409b08\n                            *(int32_t *)a1 = 12;\n                            // 0x409957\n                            return 0;\n                        }\n                        // 0x409b73\n                        *v16 = *v16 | -128;\n                        v37 = v1;\n                        v38 = 0;\n                    }\n                    // 0x409a6f\n                    v29 = (int64_t)(v33 / 256 & 0xff03ff);\n                    v19 = v38;\n                    v24 = v37;\n                    if (v29 % 2 == 0) {\n                        if (v4 % 2 == 0 || (v29 & 2) == 0) {\n                            goto lab_0x409a83;\n                        } else {\n                            goto lab_0x409aa0;\n                        }\n                    } else {\n                        if (v4 % 2 == 0) {\n                            goto lab_0x409aa0;\n                        } else {\n                            if ((v29 & 2) != 0) {\n                                goto lab_0x409aa0;\n                            } else {\n                                goto lab_0x409a83;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x409ae4:\n    // 0x409ae4\n    if ((int32_t)function_407120(a2, result2, v6) == 0) {\n        // 0x409957\n        return result2;\n    }\n    // 0x409afa\n    function_4081d0(result2);\n    // 0x409b08\n    *(int32_t *)a1 = 12;\n    // 0x409957\n    return 0;\n  lab_0x409ace:;\n    int64_t v40 = v22 + 1; // 0x409ace\n    v23 = v25;\n    v18 = v20;\n    v21 = v40;\n    if (v40 >= *v2) {\n        // break -> 0x409ae4\n        goto lab_0x409ae4;\n    }\n    goto lab_0x4099f0;\n  lab_0x409a83:\n    if ((v4 & 2) == 0 == ((v29 & 16) != 0)) {\n        goto lab_0x409aa0;\n    } else {\n        // 0x409a8e\n        v25 = v24;\n        v20 = v19;\n        if ((v4 & 4) != 0 || (v29 & 64) == 0) {\n            goto lab_0x409ace;\n        } else {\n            goto lab_0x409aa0;\n        }\n    }\n  lab_0x409aa0:;\n    int64_t v41 = v22 - v19; // 0x409aa3\n    int64_t v42 = v24; // 0x409aa6\n    if (v41 >= 0) {\n        int64_t v43 = *v28; // 0x409aa8\n        v42 = v24;\n        if (v41 < v43) {\n            // 0x409ab2\n            *v28 = v43 - 1;\n            function_408770(v27, v26, v41);\n            v42 = v26;\n        }\n    }\n    // 0x409aca\n    v25 = v42;\n    v20 = v19 + 1;\n    goto lab_0x409ace;\n}\n"
        },
        {
            "funcName": "function_409bb0",
            "funcStartAddr": "409bb0",
            "funcEndAddr": "409d98",
            "decompiledFuncCode": "int64_t function_409bb0(int32_t * a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x409bbe\n    int64_t v3 = *v2; // 0x409bbe\n    if (v3 == 0) {\n        // 0x409d84\n        *a1 = 0;\n        // 0x409d2f\n        return 0;\n    }\n    int64_t v4 = v3; // 0x409bcb\n    if (v3 >= 1) {\n        int64_t v5 = *(int64_t *)(v1 + 16); // 0x409bcd\n        int64_t v6 = v5; // 0x409bd5\n        int64_t v7 = v3; // 0x409bd5\n        v7 += *(int64_t *)v6;\n        v6 += 8;\n        v4 = v7;\n        while (v5 + 8 * v3 != v6) {\n            // 0x409bd8\n            v7 += *(int64_t *)v6;\n            v6 += 8;\n            v4 = v7;\n        }\n    }\n    int64_t v8 = *(int64_t *)(a2 + 136) & v4; // 0x409bf4\n    int64_t v9 = 24 * v8 + *(int64_t *)(a2 + 64); // 0x409bff\n    uint64_t v10 = *(int64_t *)v9; // 0x409c03\n    if (v10 >= 1) {\n        int64_t v11 = 0; // 0x409c12\n        int64_t v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16)); // 0x409c18\n        int64_t result; // 0x409bb0\n        int64_t v13; // 0x409c28\n        if (*(int64_t *)v12 == v4) {\n            // 0x409c21\n            v13 = function_406a50(v12 + 8, v1, 3 * v8);\n            result = v12;\n            if ((char)v13 != 0) {\n                // 0x409d2f\n                return result;\n            }\n        }\n        // 0x409c35\n        v11++;\n        while (v10 != v11) {\n            // 0x409c18\n            v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16));\n            if (*(int64_t *)v12 == v4) {\n                // 0x409c21\n                v13 = function_406a50(v12 + 8, v1, 3 * v8);\n                result = v12;\n                if ((char)v13 != 0) {\n                    // 0x409d2f\n                    return result;\n                }\n            }\n            // 0x409c35\n            v11++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x409c48\n    if (mem == NULL) {\n        // 0x409d78\n        *a1 = 12;\n        // 0x409d2f\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x409c48\n    int64_t v14 = result2 + 8; // 0x409c59\n    if ((int32_t)function_4096a0(v14, v1) != 0) {\n        // 0x409d70\n        free(mem);\n        // 0x409d78\n        *a1 = 12;\n        // 0x409d2f\n        return 0;\n    }\n    uint64_t v15 = *v2; // 0x409c70\n    *(int64_t *)(result2 + 80) = v14;\n    char v16; // 0x409bb0\n    int64_t v17; // 0x409bb0\n    int64_t v18; // 0x409bb0\n    int64_t v19; // 0x409c89\n    char * v20; // 0x409bb0\n    if (v15 >= 1) {\n        int64_t v21 = *(int64_t *)(v1 + 16); // 0x409c81\n        v19 = v21 + 8 * v15;\n        v20 = (char *)(result2 + 104);\n        v17 = v21;\n        while (true) {\n          lab_0x409cd4_2:\n            // 0x409cd4\n            v18 = v17;\n            int64_t v22 = 16 * *(int64_t *)v18 + v21; // 0x409cdb\n            int64_t v23 = v22 + 8; // 0x409cde\n            char v24 = *(char *)v23; // 0x409cde\n            if (v24 != 1) {\n                char v25 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                *v20 = v25;\n                if (v24 == 2) {\n                    // 0x409d48\n                    *v20 = v25 | 16;\n                    goto lab_0x409ccb;\n                } else {\n                    if (v24 != 4) {\n                        // 0x409d58\n                        v16 = v25;\n                        if (v24 == 12) {\n                            goto lab_0x409d10;\n                        } else {\n                            // 0x409d5d\n                            v16 = v25;\n                            if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                                goto lab_0x409ccb;\n                            } else {\n                                goto lab_0x409d10;\n                            }\n                        }\n                    } else {\n                        // 0x409cc5\n                        *v20 = v25 | 64;\n                        goto lab_0x409ccb;\n                    }\n                }\n            } else {\n                // 0x409ce7\n                if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                    goto lab_0x409ccb;\n                } else {\n                    char v26 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                    *v20 = v26;\n                    v16 = v26;\n                    goto lab_0x409d10;\n                }\n            }\n        }\n    }\n  lab_0x409d1d_2:\n    // 0x409d1d\n    if ((int32_t)function_407120(a2, result2, v4) == 0) {\n        // 0x409d2f\n        return result2;\n    }\n    // 0x409d8e\n    function_4081d0(result2);\n    // 0x409d78\n    *a1 = 12;\n    // 0x409d2f\n    return 0;\n  lab_0x409ccb:;\n    int64_t v27 = v18 + 8; // 0x409ccb\n    if (v19 == v27) {\n        // break -> 0x409d1d\n        goto lab_0x409d1d_2;\n    }\n    // 0x409cd4\n    v17 = v27;\n    goto lab_0x409cd4_2;\n  lab_0x409d10:;\n    int64_t v28 = v18 + 8; // 0x409d10\n    *v20 = v16 | -128;\n    if (v19 == v28) {\n        // break -> 0x409d1d\n        goto lab_0x409d1d_2;\n    }\n    // 0x409cd4\n    v17 = v28;\n    goto lab_0x409cd4_2;\n}\n"
        },
        {
            "funcName": "function_409da0",
            "funcStartAddr": "409da0",
            "funcEndAddr": "409e48",
            "decompiledFuncCode": "int64_t function_409da0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x409da0\n    if (a4 < 1) {\n        // 0x409e38\n        return 0;\n    }\n    int64_t v1 = 0; // 0x409da0\n    int64_t result; // 0x409da0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = 8 * v2; // 0x409e19\n        int64_t * v4 = (int64_t *)(v3 + a2); // 0x409e19\n        int64_t v5 = *v4; // 0x409e19\n        int64_t v6 = *(int64_t *)(v3 + a3); // 0x409e1e\n        if (v5 != 0) {\n            if (v6 != 0) {\n                // 0x409dcd\n                int64_t v7; // bp-72, 0x409da0\n                int64_t v8 = function_409720(&v7, v5 + 8, v6 + 8, a4); // 0x409dda\n                int32_t v9 = v8; // 0x409ddf\n                int32_t v10 = v9; // bp-76, 0x409ddf\n                result = v8;\n                if (v9 != 0) {\n                    // break -> 0x409e38\n                    break;\n                }\n                // 0x409de7\n                int64_t v11; // 0x409da0\n                *v4 = function_409bb0(&v10, a1, &v7, a4, v11, v11);\n                free((int64_t *)v11);\n                uint32_t v12 = v10; // 0x409e08\n                if (v12 != 0) {\n                    // 0x409e38\n                    result = v12;\n                    return result;\n                }\n            }\n            int64_t v13 = v2 + 1; // 0x409e10\n            v1 = v13;\n            result = 0;\n            if (v13 == a4) {\n                // break -> 0x409e38\n                break;\n            }\n        } else {\n            // 0x409e28\n            *v4 = v6;\n            int64_t v14 = v2 + 1; // 0x409e2d\n            v1 = v14;\n            result = 0;\n            if (v14 == a4) {\n                // break -> 0x409e38\n                break;\n            }\n        }\n    }\n  lab_0x409e38_2:\n    // 0x409e38\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e50",
            "funcStartAddr": "409e50",
            "funcEndAddr": "40a1d2",
            "decompiledFuncCode": "int64_t function_409e50(int64_t a1, int128_t * a2, uint64_t a3, int64_t a4, int32_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 200); // 0x409e61\n    if (v1 <= 0) {\n        // 0x40a152\n        return 0;\n    }\n    int64_t v2 = (int64_t)a2;\n    int64_t * v3 = (int64_t *)(a1 + 216); // 0x409e74\n    int64_t v4 = *v3; // 0x409e74\n    int64_t v5 = v4 + 8; // 0x409e8c\n    int64_t v6 = 0;\n    uint64_t v7 = v6 + v1; // 0x409e70\n    int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x409e85\n    int64_t v9 = v8; // 0x409e91\n    int64_t v10 = v8; // 0x409e91\n    int64_t v11 = v1; // 0x409e91\n    int64_t v12; // 0x409e50\n    int64_t v13; // 0x409e50\n    uint64_t v14; // 0x409ea0\n    int64_t v15; // 0x409eae\n    if (*(int64_t *)(40 * v8 + v5) >= a3) {\n        v12 = v6;\n        if (v9 <= v6) {\n            // break (via goto) -> 0x409ecb\n            goto lab_0x409ecb;\n        }\n        // 0x409ea0\n        v14 = v9 + v6;\n        v15 = (v14 / 0x8000000000000000 + v14) / 2;\n        v10 = v15;\n        v11 = v9;\n        while (*(int64_t *)(40 * v15 + v5) >= a3) {\n            // 0x409ec6\n            v13 = v15;\n            v12 = v6;\n            if (v13 <= v6) {\n                // break (via goto) -> 0x409ecb\n                goto lab_0x409ecb;\n            }\n            // 0x409ea0\n            v14 = v13 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v13;\n        }\n    }\n    int64_t v16 = v10 + 1; // 0x40a140\n    v12 = v16;\n    while (v16 < v11) {\n        // 0x409e70\n        v6 = v16;\n        v7 = v6 + v11;\n        v8 = (v7 / 0x8000000000000000 + v7) / 2;\n        v9 = v8;\n        v10 = v8;\n        if (*(int64_t *)(40 * v8 + v5) >= a3) {\n            v12 = v6;\n            if (v9 <= v6) {\n                // break (via goto) -> 0x409ecb\n                goto lab_0x409ecb;\n            }\n            // 0x409ea0\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v9;\n            while (*(int64_t *)(40 * v15 + v5) >= a3) {\n                // 0x409ec6\n                v13 = v15;\n                v12 = v6;\n                if (v13 <= v6) {\n                    // break (via goto) -> 0x409ecb\n                    goto lab_0x409ecb;\n                }\n                // 0x409ea0\n                v14 = v13 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v15;\n                v11 = v13;\n            }\n        }\n        // 0x40a140\n        v16 = v10 + 1;\n        v12 = v16;\n    }\n  lab_0x409ecb:\n    // 0x409ecb\n    if (v1 <= v12) {\n        // 0x40a152\n        return 0;\n    }\n    int64_t v17 = 40 * v12; // 0x409edf\n    if (v12 == -1 | *(int64_t *)(v17 + 8 + v4) != a3) {\n        // 0x40a152\n        return 0;\n    }\n    int64_t v18 = v2 + 16; // 0x409f06\n    int64_t v19 = *(int64_t *)(a1 + 152); // 0x409f15\n    int64_t * v20 = (int64_t *)(a1 + 184);\n    int64_t v21; // bp-88, 0x409e50\n    int64_t v22 = &v21;\n    int64_t v23 = v4; // 0x409f1f\n    int64_t * v24; // 0x409e50\n    int64_t v25; // 0x409e50\n    int64_t v26; // 0x409e50\n    int64_t result; // 0x409e50\n    int64_t v27; // 0x409e50\n    int64_t v28; // 0x409e50\n    int64_t v29; // 0x409e50\n    int64_t v30; // 0x409e50\n    int32_t v31; // bp-92, 0x409e50\n    int64_t v32; // 0x40a028\n    int64_t v33; // 0x409f43\n    int64_t v34; // 0x409f47\n    int64_t v35; // 0x409f57\n    while (true) {\n        // 0x409f23\n        int64_t v36; // 0x409e50\n        v29 = v36;\n        v25 = v23 + v17;\n        int64_t v37; // 0x40a052\n        while (true) {\n          lab_0x40a008:\n            // 0x40a008\n            v26 = v25;\n            v30 = v29;\n            int64_t v38 = *(int64_t *)v26; // 0x40a008\n            int64_t v39 = *(int64_t *)(v2 + 8); // 0x40a00b\n            v28 = v30;\n            if (function_408600(v39, v18, v38) == 0) {\n                goto lab_0x409ff9;\n            } else {\n                // 0x40a024\n                v32 = *(int64_t *)(v26 + 24) + a3;\n                int64_t v40 = v32 - *(int64_t *)(v26 + 16); // 0x40a02e\n                if (v40 != a3) {\n                    // 0x409f38\n                    v33 = *(int64_t *)(*(int64_t *)(v19 + 24) + 8 * v38);\n                    v34 = 8 * v40;\n                    int64_t * v41 = (int64_t *)(*v20 + v34);\n                    v35 = *v41;\n                    if (v35 == 0) {\n                        // 0x40a0f0\n                        v21 = 1;\n                        int64_t * mem = malloc(8); // 0x40a10c\n                        if (mem == NULL) {\n                            // 0x40a192\n                            result = 12;\n                            return result;\n                        }\n                        // 0x40a11b\n                        v31 = 0;\n                        *mem = v33;\n                        v24 = v41;\n                        v27 = (int64_t)mem;\n                        goto lab_0x409fbe;\n                    } else {\n                        // 0x409f68\n                        v28 = v30;\n                        if (function_408600(*(int64_t *)(v35 + 16), v35 + 24, v33) != 0) {\n                            goto lab_0x409ff9;\n                        } else {\n                            // 0x409f7d\n                            v31 = function_4096a0(v22, v35 + 8);\n                            int64_t v42 = function_406ff0(v22, v33); // 0x409f99\n                            if (v31 != 0) {\n                                goto lab_0x40a180_2;\n                            }\n                            if ((char)v42 != 1) {\n                                goto lab_0x40a180_2;\n                            }\n                            // 0x409fb2\n                            v24 = (int64_t *)(*v20 + v34);\n                            v27 = v30;\n                            goto lab_0x409fbe;\n                        }\n                    }\n                } else {\n                    int64_t v43 = *(int64_t *)(v19 + 40); // 0x40a03b\n                    v37 = *(int64_t *)*(int64_t *)(24 * v38 + 16 + v43);\n                    v28 = v30;\n                    if (function_408600(v39, v18, v37) == 0) {\n                        // break -> 0x40a062\n                        break;\n                    }\n                    goto lab_0x409ff9;\n                }\n            }\n        }\n        // 0x40a062\n        v21 = 1;\n        int64_t * mem2 = malloc(8); // 0x40a079\n        int32_t v44; // 0x409e50\n        if (mem2 == NULL) {\n            // 0x40a1b6\n            v21 = 0;\n            v44 = 12;\n        } else {\n            // 0x40a08c\n            *mem2 = v37;\n            v44 = 0;\n        }\n        // 0x40a091\n        v31 = v44;\n        int64_t v45 = function_408f70(v19, &v21, a4, a5); // 0x40a0a6\n        int64_t v46 = function_408b40((int64_t *)a2, (int128_t *)&v21); // 0x40a0b6\n        free(mem2);\n        uint32_t v47 = v31; // 0x40a0c8\n        if ((v47 || (int32_t)(v46 || v45)) != 0) {\n            // 0x40a1a6\n            result = v47;\n            if (v47 != 0) {\n                return result;\n            } else {\n                // 0x40a1aa\n                result = ((int32_t)v45 != 0 ? v45 : v46) & 0xffffffff;\n                return result;\n            }\n        }\n        // 0x40a0da\n        v36 = (int64_t)mem2;\n        v23 = *v3;\n    }\n  lab_0x40a152:\n    // 0x40a152\n    return result;\n  lab_0x40a180_2:\n    // 0x40a180\n    free((int64_t *)v30);\n    result = v31;\n    if (v31 != 0) {\n        return result;\n    } else {\n        // 0x40a192\n        result = 12;\n        return result;\n    }\n  lab_0x409ff9:\n    // 0x409ff9\n    v29 = v28;\n    v25 = v26 + 40;\n    result = 0;\n    if (*(char *)(v26 + 32) == 0) {\n        return result;\n    }\n    goto lab_0x40a008;\n  lab_0x409fbe:;\n    int64_t v48 = v27;\n    *v24 = function_409bb0(&v31, v19, &v21, v33, v32, v35);\n    free((int64_t *)v48);\n    v28 = v48;\n    if (*(int64_t *)(*v20 + v34) == 0) {\n        uint32_t v49 = v31; // 0x40a168\n        v28 = v48;\n        if (v49 != 0) {\n            // 0x40a152\n            result = v49;\n            goto lab_0x40a152;\n        }\n    }\n    goto lab_0x409ff9;\n}\n"
        },
        {
            "funcName": "function_40a1e0",
            "funcStartAddr": "40a1e0",
            "funcEndAddr": "40a321",
            "decompiledFuncCode": "int64_t function_40a1e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x40a1f2\n    if (a2 < 1) {\n      lab_0x40a2c2:\n        // 0x40a2c2\n        return 0;\n    }\n    int64_t * v2 = (int64_t *)(a1 + 232);\n    int64_t * v3 = (int64_t *)(a1 + 248);\n    int64_t * v4 = (int64_t *)(a1 + 240);\n    int64_t v5 = 0; // 0x40a210\n    int64_t v6; // 0x40a1e0\n    int64_t v7; // 0x40a220\n    int64_t v8; // 0x40a22b\n    uint64_t v9; // 0x40a235\n    while (true) {\n        // 0x40a21d\n        v6 = v5;\n        v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n        v8 = 16 * v7 + *(int64_t *)v1;\n        if (*(char *)(v8 + 8) == 8) {\n            // 0x40a235\n            v9 = *(int64_t *)v8;\n            if (v9 <= 63) {\n                // 0x40a23e\n                if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                    // break -> 0x40a24c\n                    break;\n                }\n            }\n        }\n        // 0x40a210\n        v5 = v6 + 1;\n        if (v5 >= a2) {\n            return 0;\n        }\n    }\n    int64_t v10 = *v2; // 0x40a24c\n    int64_t v11 = *v3; // 0x40a253\n    int64_t v12 = v10; // 0x40a261\n    int64_t v13 = v11; // 0x40a261\n    int64_t * mem; // 0x40a2f0\n    if (v10 == *v4) {\n        // 0x40a2d8\n        mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n        if (mem == NULL) {\n            // break -> 0x40a2c2\n            break;\n        }\n        // 0x40a302\n        v13 = (int64_t)mem;\n        *v3 = v13;\n        v12 = *v2;\n        *v4 = 2 * v10;\n    }\n    int64_t * mem2 = calloc(1, 48); // 0x40a27c\n    int64_t v14 = (int64_t)mem2; // 0x40a27c\n    *(int64_t *)(v13 + 8 * v12) = v14;\n    int64_t result = 12; // 0x40a292\n    while (mem2 != NULL) {\n        // 0x40a294\n        *mem2 = a4;\n        int64_t v15 = v6 + 1; // 0x40a2a0\n        *(int64_t *)(v14 + 8) = v7;\n        *v2 = v12 + 1;\n        result = 0;\n        if (v15 >= 48) {\n            // break -> 0x40a2c2\n            break;\n        }\n        v5 = v15;\n        while (true) {\n            // 0x40a21d\n            v6 = v5;\n            v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n            v8 = 16 * v7 + *(int64_t *)v1;\n            if (*(char *)(v8 + 8) == 8) {\n                // 0x40a235\n                v9 = *(int64_t *)v8;\n                if (v9 <= 63) {\n                    // 0x40a23e\n                    if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                        // break -> 0x40a24c\n                        break;\n                    }\n                }\n            }\n            // 0x40a210\n            v5 = v6 + 1;\n            if (v5 >= 48) {\n                return 0;\n            }\n        }\n        // 0x40a24c\n        v10 = *v2;\n        v11 = *v3;\n        v12 = v10;\n        v13 = v11;\n        if (v10 == *v4) {\n            // 0x40a2d8\n            mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n            result = 12;\n            if (mem == NULL) {\n                // break -> 0x40a2c2\n                break;\n            }\n            // 0x40a302\n            v13 = (int64_t)mem;\n            *v3 = v13;\n            v12 = *v2;\n            *v4 = 2 * v10;\n        }\n        // 0x40a263\n        mem2 = calloc(1, 48);\n        v14 = (int64_t)mem2;\n        *(int64_t *)(v13 + 8 * v12) = v14;\n        result = 12;\n    }\n    // 0x40a2c2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a330",
            "funcStartAddr": "40a330",
            "funcEndAddr": "40a41e",
            "decompiledFuncCode": "int64_t function_40a330(int64_t a1, int64_t a2, int32_t a3) {\n    if (a2 < 0) {\n        // 0x40a3e0\n        return (int64_t)*(int32_t *)(a1 + 112);\n    }\n    // 0x40a342\n    if (*(int64_t *)(a1 + 88) == a2) {\n        // 0x40a386\n        return a3 & 2 ^ 10;\n    }\n    // 0x40a34c\n    if (*(int32_t *)(a1 + 144) < 2) {\n        unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a2); // 0x40a39b\n        int64_t v2 = *(int64_t *)(*(int64_t *)(a1 + 128) + (int64_t)(8 * v1 / 64)); // 0x40a3a6\n        if ((1 << (int64_t)(v1 % 64) & v2) != 0) {\n            // 0x40a386\n            return 1;\n        }\n        // 0x40a3ba\n        if (v1 != 10) {\n            // 0x40a386\n            return 0;\n        }\n        // 0x40a3c1\n        return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n    }\n    int64_t v3 = a2;\n    int32_t wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16)); // 0x40a36a\n    while (wc == -1) {\n        // 0x40a360\n        if (v3 == 0) {\n            // 0x40a3e0\n            return (int64_t)*(int32_t *)(a1 + 112);\n        }\n        v3--;\n        wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16));\n    }\n    // 0x40a372\n    if (*(char *)(a1 + 142) != 0) {\n        // 0x40a400\n        if (wc != 95 != (iswalnum(wc) == 0)) {\n            // 0x40a386\n            return 1;\n        }\n    }\n    // 0x40a37f\n    if (wc != 10) {\n        // 0x40a386\n        return 0;\n    }\n    // 0x40a3c1\n    return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n}\n"
        },
        {
            "funcName": "function_40a420",
            "funcStartAddr": "40a420",
            "funcEndAddr": "40a54b",
            "decompiledFuncCode": "int64_t function_40a420(int64_t a1, int64_t a2, int64_t a3) {\n    unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a3); // 0x40a424\n    int64_t v2 = a2 + 8;\n    unsigned char v3 = *(char *)v2; // 0x40a428\n    if (v3 == 3) {\n        uint64_t v4 = (int64_t)v1; // 0x40a424\n        if ((*(int64_t *)((v4 / 8 & 24) + a2) & 1 << v4 % 64) == 0) {\n            // 0x40a4cf\n            return 0;\n        }\n    } else {\n        if (v3 < 4) {\n            // 0x40a4d8\n            if (v1 == (char)a2 != (v3 == 1)) {\n                // 0x40a4cf\n                return 0;\n            }\n        } else {\n            if (v3 != 5) {\n                // 0x40a43e\n                if (v1 < 0 || v3 != 7) {\n                    // 0x40a4cf\n                    return 0;\n                }\n            }\n            if (v1 == 10) {\n                // 0x40a530\n                if ((*(char *)(*(int64_t *)(a1 + 152) + 216) & 64) == 0) {\n                    // 0x40a4cf\n                    return 0;\n                }\n            } else {\n                if (v1 == 0) {\n                    // 0x40a460\n                    if (*(char *)(*(int64_t *)(a1 + 152) + 216) <= -1) {\n                        // 0x40a4cf\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n    uint32_t v5 = *(int32_t *)v2; // 0x40a473\n    if ((v5 & 0x3ff00) == 0) {\n        // 0x40a4cf\n        return 1;\n    }\n    int64_t v6 = v5; // 0x40a473\n    uint64_t v7 = function_40a330(a1, a3, *(int32_t *)(a1 + 160)); // 0x40a48f\n    if ((v6 & 1024) != 0) {\n        // 0x40a520\n        if ((v6 & 2048) == 0 != v7 % 2 != 0) {\n            // 0x40a4cf\n            return 0;\n        }\n    } else {\n        if ((v6 & 2048) != 0) {\n            // 0x40a4a7\n            if (v7 % 2 != 0) {\n                // 0x40a4cf\n                return 0;\n            }\n        }\n    }\n    int64_t result = 0; // 0x40a4b2\n    if ((v6 & 0x2000) != 0 != ((v7 & 2) == 0)) {\n        // 0x40a4bb\n        result = (char)(v5 / 256) <= -1 ? v7 / 8 % 2 : 1;\n    }\n    // 0x40a4cf\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a550",
            "funcStartAddr": "40a550",
            "funcEndAddr": "40a618",
            "decompiledFuncCode": "int64_t function_40a550(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t v2 = function_40a330(v1, a4, *(int32_t *)(v1 + 160)); // 0x40a566\n    if (a2 < 1) {\n        // 0x40a5ec\n        return 0;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 152); // 0x40a574\n    int64_t v4 = 0; // 0x40a596\n    int64_t result; // 0x40a550\n    uint32_t v5; // 0x40a5ae\n    uint32_t v6; // 0x40a5b1\n    int64_t v7; // 0x40a5a0\n    while (true) {\n      lab_0x40a5a0:\n        // 0x40a5a0\n        v7 = *(int64_t *)(8 * v4 + v3);\n        int64_t v8 = *(int64_t *)v3 + 8 + 16 * v7; // 0x40a5ae\n        if (*(char *)v8 != 2) {\n            goto lab_0x40a608;\n        } else {\n            // 0x40a5c1\n            v5 = *(int32_t *)v8;\n            result = v7;\n            if ((v5 & 0x3ff00) == 0) {\n                // break -> 0x40a5ec\n                break;\n            }\n            // 0x40a5c6\n            v6 = v5 / 256;\n            int64_t v9 = v6; // 0x40a5b1\n            if ((v9 & 4) == 0) {\n                if (v2 % 2 == 0 || (v9 & 8) == 0) {\n                    goto lab_0x40a5d5;\n                } else {\n                    goto lab_0x40a608;\n                }\n            } else {\n                if (v2 % 2 == 0) {\n                    goto lab_0x40a608;\n                } else {\n                    if ((v9 & 8) != 0) {\n                        goto lab_0x40a608;\n                    } else {\n                        goto lab_0x40a5d5;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40a5ec_2:\n    // 0x40a5ec\n    return result;\n  lab_0x40a608:\n    // 0x40a608\n    v4++;\n    result = 0;\n    if (v4 == a2) {\n        return result;\n    }\n    goto lab_0x40a5a0;\n  lab_0x40a5d5:\n    if ((v2 & 2) == 0 != (v5 & 0x2000) != 0) {\n        // 0x40a5e0\n        result = v7;\n        if ((v2 & 8) == 0 != (char)v6 < 0) {\n            // break -> 0x40a5ec\n            goto lab_0x40a5ec_2;\n        }\n    }\n    goto lab_0x40a608;\n}\n"
        },
        {
            "funcName": "function_40a620",
            "funcStartAddr": "40a620",
            "funcEndAddr": "40ae07",
            "decompiledFuncCode": "int64_t function_40a620(int64_t * a1, int64_t a2, int32_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x40a63a\n    int64_t v3 = *v2; // 0x40a63a\n    int64_t v4 = a2 - v3; // 0x40a644\n    int64_t * v5; // 0x40a620\n    char * v6; // 0x40a620\n    int64_t * v7; // 0x40a620\n    int32_t * v8; // 0x40a620\n    int64_t * v9; // 0x40a620\n    int64_t * v10; // 0x40a620\n    int64_t v11; // 0x40a620\n    if (v3 > a2) {\n        int32_t * v12 = (int32_t *)(v1 + 144);\n        if (*v12 >= 2) {\n            // 0x40a64f\n            *(int64_t *)(v1 + 32) = 0;\n        }\n        int64_t * v13 = (int64_t *)(v1 + 48);\n        *v13 = 0;\n        *v2 = 0;\n        int64_t * v14 = (int64_t *)(v1 + 88);\n        *v14 = *(int64_t *)(v1 + 80);\n        int64_t * v15 = (int64_t *)(v1 + 56);\n        *v15 = 0;\n        int64_t * v16 = (int64_t *)(v1 + 104);\n        *v16 = *(int64_t *)(v1 + 96);\n        char * v17 = (char *)(v1 + 140);\n        *v17 = 0;\n        *(int32_t *)(v1 + 112) = 2 * a3 & 2 ^ 6;\n        v4 = a2;\n        if (*(char *)(v1 + 139) == 0) {\n            // 0x40a770\n            *(int64_t *)(v1 + 8) = v1;\n            v7 = v13;\n            v6 = v17;\n            v5 = v15;\n            v11 = a2;\n            v10 = v16;\n            v9 = v14;\n            v8 = v12;\n            if (a2 != 0) {\n                goto lab_0x40a6b3;\n            } else {\n                goto lab_0x40a780;\n            }\n        } else {\n            goto lab_0x40a6aa;\n        }\n    } else {\n        goto lab_0x40a6aa;\n    }\n  lab_0x40aca8:\n    // 0x40aca8\n    *v7 = 0;\n    int64_t v18; // 0x40aaa7\n    int64_t v19 = v18; // 0x40acb2\n    int64_t v20; // 0x40aaaa\n    int64_t v21 = v20; // 0x40acb2\n    int64_t v22 = 0; // 0x40acb2\n    int64_t v23 = v1; // 0x40acb2\n    goto lab_0x40ab4f;\n  lab_0x40a8a1:;\n    // 0x40a8a1\n    int64_t v41; // 0x40a620\n    int64_t v38; // 0x40a620\n    int64_t v42 = v41 + v38; // 0x40a8a1\n    int64_t v43; // 0x40a620\n    int64_t v44; // 0x40a620\n    int64_t v39; // 0x40a620\n    int64_t v45; // 0x40a620\n    int64_t v46; // 0x40a620\n    int32_t v47; // bp-64, 0x40a620\n    if (v42 < a2) {\n        int64_t * v48 = (int64_t *)(v1 + 32); // 0x40a8d4\n        int64_t v49 = &v47;\n        int64_t v50 = *(int64_t *)(v1 + 80) - v42; // 0x40a8dd\n        int64_t v51 = function_4069d0(&v47, v42 + v39, v50); // 0x40a8f0\n        int64_t v52 = v51; // 0x40a906\n        int64_t v53 = v47; // 0x40a906\n        int64_t v54; // 0x40a620\n        if (v51 >= 0xfffffffffffffffe) {\n            // 0x40ad35\n            v54 = 0;\n            if (v50 != 0 && v51 != 0) {\n                // 0x40ad3f\n                v54 = (int64_t)*(char *)(v42 + v49);\n            }\n            // 0x40ad47\n            v52 = 1;\n            v53 = v54;\n        }\n        int64_t v55 = v52 + v42; // 0x40a90c\n        int64_t v56 = v49; // 0x40a912\n        while (v55 < a2) {\n            int64_t v57 = v55;\n            v50 = *(int64_t *)(v1 + 80) - v57;\n            v51 = function_4069d0(&v47, v57 + v56, v50);\n            v52 = v51;\n            v53 = v47;\n            if (v51 >= 0xfffffffffffffffe) {\n                // 0x40ad35\n                v54 = 0;\n                if (v50 != 0 && v51 != 0) {\n                    // 0x40ad3f\n                    v54 = (int64_t)*(char *)(v57 + v49);\n                }\n                // 0x40ad47\n                v52 = 1;\n                v53 = v54;\n            }\n            // 0x40a90c\n            v55 = v52 + v57;\n            v56 = v49;\n        }\n        int64_t v58 = v55 - a2; // 0x40a914\n        *v7 = v58;\n        v46 = v53;\n        v45 = v49;\n        v43 = v58;\n        v44 = v58;\n        if ((int32_t)v53 == -1) {\n            goto lab_0x40acc1;\n        } else {\n            goto lab_0x40a927;\n        }\n    } else {\n        int64_t v59 = v42 - a2; // 0x40acb7\n        *v7 = v59;\n        v44 = v59;\n        goto lab_0x40acc1;\n    }\n  lab_0x40a6aa:\n    // 0x40a6aa\n    if (v4 == 0) {\n        // 0x40a6aa\n        v10 = (int64_t *)(v1 + 104);\n        v9 = (int64_t *)(v1 + 88);\n        v8 = (int32_t *)(v1 + 144);\n        goto lab_0x40a780;\n    } else {\n        // 0x40a6aa\n        v7 = (int64_t *)(v1 + 48);\n        v6 = (char *)(v1 + 140);\n        v5 = (int64_t *)(v1 + 56);\n        v11 = v4;\n        goto lab_0x40a6b3;\n    }\n  lab_0x40a6b3:;\n    int64_t v60 = v11;\n    int64_t * v24 = v5;\n    int64_t v61 = *v24; // 0x40a6b3\n    char v62 = *v6; // 0x40a6b7\n    int64_t v63 = *v7; // 0x40a6be\n    char * v64; // 0x40a620\n    int64_t v30; // 0x40a620\n    int64_t v65; // 0x40a620\n    int64_t v31; // 0x40a620\n    int64_t v66; // 0x40a620\n    int64_t v33; // 0x40a620\n    int64_t v67; // 0x40a620\n    char v68; // 0x40a620\n    int32_t v32; // 0x40a620\n    int64_t v40; // 0x40abc9\n    int64_t * v69; // 0x40a968\n    int64_t v70; // 0x40a968\n    int64_t v71; // 0x40a995\n    uint64_t v72; // 0x40a998\n    if (v61 > v60) {\n        if (v62 != 0) {\n            // 0x40a968\n            v69 = (int64_t *)(v1 + 24);\n            v70 = *v69;\n            int64_t v73 = 0; // 0x40a971\n            uint64_t v74 = v73 + v63; // 0x40a987\n            v71 = (v74 / 0x8000000000000000 + v74) / 2;\n            v72 = *(int64_t *)(8 * v71 + v70);\n            int64_t v75 = v71; // 0x40a9a3\n            int64_t v76 = v73; // 0x40a9a3\n            if (v72 <= v60) {\n                if (v72 >= v60) {\n                    // 0x40ac90\n                    goto lab_0x40a9e5;\n                }\n                // 0x40a97e\n                v75 = v63;\n                v76 = v71 + 1;\n            }\n            // 0x40a982\n            v73 = v76;\n            int64_t v77 = v75;\n            while (v73 < v77) {\n                int64_t v78 = v77;\n                v74 = v73 + v78;\n                v71 = (v74 / 0x8000000000000000 + v74) / 2;\n                v72 = *(int64_t *)(8 * v71 + v70);\n                v75 = v71;\n                v76 = v73;\n                if (v72 <= v60) {\n                    if (v72 >= v60) {\n                        // 0x40ac90\n                        goto lab_0x40a9e5;\n                    }\n                    // 0x40a97e\n                    v75 = v78;\n                    v76 = v71 + 1;\n                }\n                // 0x40a982\n                v73 = v76;\n                v77 = v75;\n            }\n            // 0x40a9d8\n            goto lab_0x40a9e5;\n        } else {\n            // 0x40a6d3\n            *(int32_t *)(v1 + 112) = (int32_t)function_40a330(v1, v60 - 1, a3);\n            if (*(int32_t *)(v1 + 144) > 1) {\n                int64_t v79 = *(int64_t *)(v1 + 16); // 0x40a790\n                int64_t v80; // 0x40a6dd\n                memmove((int64_t *)v79, (int64_t *)(v79 + 4 * v60), 4 * (int32_t)v80);\n            }\n            int64_t v81 = v63 - v60;\n            char * v82 = (char *)(v1 + 139); // 0x40a6f5\n            char v83 = *v82; // 0x40a6f5\n            char v84 = v83; // 0x40a6fe\n            int64_t v85 = v1; // 0x40a6fe\n            int64_t v86 = v81; // 0x40a6fe\n            if (v83 != 0) {\n                // 0x40a9b0\n                v85 = *(int64_t *)(v1 + 8);\n                memmove((int64_t *)v85, (int64_t *)(v85 + v60), (int32_t)v81);\n                v84 = *v82;\n                v86 = *v7 - v60;\n            }\n            // 0x40a704\n            *v24 = *v24 - v60;\n            *v7 = v86;\n            v68 = v84;\n            v66 = v85;\n            goto lab_0x40a70c;\n        }\n    } else {\n        if (v62 != 0) {\n            // 0x40ad0d\n            *v6 = 0;\n            int64_t v87 = v60 - a2;\n            *(int64_t *)(v1 + 88) = *(int64_t *)(v1 + 80) + v87;\n            *(int64_t *)(v1 + 104) = *(int64_t *)(v1 + 96) + v87;\n        }\n        int32_t v88 = *(int32_t *)(v1 + 144); // 0x40a878\n        int64_t v89 = *v2; // 0x40a87f\n        *v7 = 0;\n        if (v88 < 2) {\n            int64_t v90 = (int64_t)*(char *)(v60 - 1 + v1 + v89); // 0x40a7ce\n            int64_t v91 = *(int64_t *)(v1 + 120); // 0x40a7d4\n            *v24 = 0;\n            int64_t v92 = v90; // 0x40a7e3\n            if (v91 != 0) {\n                // 0x40a7e5\n                v92 = (int64_t)*(char *)(v91 + v90);\n            }\n            int64_t v93 = *(int64_t *)((v92 / 8 & 24) + *(int64_t *)(v1 + 128)); // 0x40a7f7\n            int32_t v94 = 1; // 0x40a805\n            if ((v93 & 1 << v92 % 64) == 0) {\n                // 0x40a807\n                v94 = 0;\n                if (v92 == 10) {\n                    // 0x40a80e\n                    v94 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n                }\n            }\n            int64_t * v95 = (int64_t *)(v1 + 88); // 0x40a820\n            int64_t * v96 = (int64_t *)(v1 + 104); // 0x40a824\n            *(int32_t *)(v1 + 112) = v94;\n            int64_t v97 = *v95 - v60; // 0x40a82b\n            int64_t v98 = *v96 - v60; // 0x40a82e\n            char * v99 = (char *)(v1 + 139);\n            v30 = v97;\n            v31 = v98;\n            v32 = v88;\n            v33 = v1;\n            if (*v99 == 0) {\n                goto lab_0x40a724;\n            } else {\n                // 0x40a83e\n                *v2 = a2;\n                *v95 = v97;\n                *v96 = v98;\n                v64 = v99;\n                v65 = v97;\n                v67 = v1;\n                goto lab_0x40a850;\n            }\n        } else {\n            // 0x40a894\n            v38 = v61;\n            v39 = v1;\n            v41 = v89;\n            if (*(char *)(v1 + 137) != 0) {\n                int64_t v100 = v89 + v1; // 0x40ab71\n                uint64_t v101 = v60 - (int64_t)v88 + v100; // 0x40ab75\n                int64_t v102 = v60 - 1 + v100; // 0x40ab78\n                uint64_t v103 = v101 > v1 ? v101 : v1; // 0x40ab80\n                v38 = v61;\n                v39 = v1;\n                v41 = v89;\n                if (v103 > v102) {\n                    goto lab_0x40a8a1;\n                } else {\n                    int64_t v104 = v102;\n                    while ((*(char *)v104 & -64) == -128) {\n                        int64_t v105 = v104 - 1; // 0x40ab90\n                        v38 = v61;\n                        v39 = v1;\n                        v41 = v89;\n                        if (v103 > v105) {\n                            goto lab_0x40a8a1;\n                        }\n                        v104 = v105;\n                    }\n                    int64_t v106 = *(int64_t *)(v1 + 120); // 0x40abae\n                    int64_t v107 = *(int64_t *)(v1 + 88) + v100 - v104; // 0x40abb8\n                    int64_t v108 = v104; // 0x40abbe\n                    if (v106 != 0) {\n                        int64_t v109 = v107 - 6; // 0x40add2\n                        int32_t v110 = v109 == 0 | v109 < 0 != (5 - v107 & v107) < 0 ? (int32_t)v107 - 1 : 5; // 0x40addf\n                        if (v110 >= 0) {\n                            int64_t v111 = v110; // 0x40adf5\n                            char v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104)); // 0x40adec\n                            int64_t v113; // bp-120, 0x40a620\n                            *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                            v111--;\n                            while ((int32_t)v111 >= 0) {\n                                // 0x40ade7\n                                v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104));\n                                *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                                v111--;\n                            }\n                        }\n                        // 0x40adfd\n                        int64_t v114; // bp-70, 0x40a620\n                        v108 = &v114;\n                    }\n                    // 0x40abc4\n                    int32_t v115; // bp-76, 0x40a620\n                    v40 = &v115;\n                    v47 = 0;\n                    uint64_t v116 = function_4069d0(&v115, v108, v107); // 0x40abdf\n                    uint64_t v117 = v100 + v60 - v104; // 0x40abee\n                    if (v116 >= v117 == v116 < 0xfffffffffffffffe) {\n                        int64_t v118 = v116 - v117; // 0x40acd8\n                        *(int64_t *)(v1 + 32) = 0;\n                        *v7 = v118;\n                        v46 = v115;\n                        v45 = v40;\n                        v43 = v118;\n                        if (v115 != -1) {\n                            goto lab_0x40a927;\n                        } else {\n                            goto lab_0x40ac00;\n                        }\n                    } else {\n                        goto lab_0x40ac00;\n                    }\n                }\n            } else {\n                goto lab_0x40a8a1;\n            }\n        }\n    }\n  lab_0x40a780:;\n    int64_t v34 = *v9; // 0x40a78e\n    int64_t v35 = *v10; // 0x40a78e\n    int32_t v36 = *v8; // 0x40a78e\n    int64_t v37 = v1; // 0x40a78e\n    goto lab_0x40a728;\n  lab_0x40a728:\n    // 0x40a728\n    *v2 = a2;\n    *(int64_t *)(v1 + 88) = v34;\n    *(int64_t *)(v1 + 104) = v35;\n    if (v36 >= 2) {\n        // 0x40a73d\n        if (*(char *)(v1 + 136) != 0) {\n            int64_t result = function_407480(v1); // 0x40a7b8\n            if ((int32_t)result != 0) {\n                // 0x40a758\n                return result;\n            }\n        } else {\n            // 0x40a749\n            function_4072d0(v1);\n        }\n        // 0x40a74e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a758\n        return 0;\n    }\n    // 0x40a728\n    v64 = (char *)(v1 + 139);\n    v65 = v34;\n    v67 = v37;\n    goto lab_0x40a850;\n  lab_0x40a850:;\n    int64_t v119 = v65;\n    if (*v64 == 0) {\n        // 0x40a85d\n        *(int64_t *)(v1 + 48) = v119;\n        // 0x40a74e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a758\n        return 0;\n    }\n    // 0x40ac20\n    if (*(char *)(v1 + 136) != 0) {\n        // 0x40ad00\n        function_407250(v1);\n        // 0x40a74e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a758\n        return 0;\n    }\n    int64_t * v120 = (int64_t *)(v1 + 120); // 0x40ac2d\n    int64_t v121 = *v120; // 0x40ac2d\n    if (v121 == 0) {\n        // 0x40a74e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a758\n        return 0;\n    }\n    int64_t v122 = *(int64_t *)(v1 + 64); // 0x40ac3a\n    int64_t v123 = v122 - v119; // 0x40ac3a\n    int64_t * v124 = (int64_t *)(v1 + 48); // 0x40ac3e\n    int64_t v125 = *v124; // 0x40ac3e\n    int64_t v126 = v123 == 0 | v123 < 0 != ((v123 ^ v122) & (v122 ^ v119)) < 0 ? v122 : v119; // 0x40ac42\n    int64_t v127 = v125; // 0x40ac4a\n    if (v126 > v125) {\n        unsigned char v128 = *(char *)(v67 + a2 + v125); // 0x40ac66\n        int64_t * v129 = (int64_t *)(v1 + 8); // 0x40ac6f\n        *(char *)(*v129 + v125) = *(char *)(v121 + (int64_t)v128);\n        int64_t v130 = v125 + 1; // 0x40ac77\n        v127 = v126;\n        if (v126 != v130) {\n            unsigned char v131 = *(char *)(v130 + v67 + *v2); // 0x40ac66\n            *(char *)(*v129 + v130) = *(char *)(*v120 + (int64_t)v131);\n            int64_t v132 = v130 + 1; // 0x40ac77\n            int64_t v133 = v132; // 0x40ac7e\n            v127 = v126;\n            while (v126 != v132) {\n                // 0x40ac58\n                v131 = *(char *)(v133 + v67 + *v2);\n                *(char *)(*v129 + v133) = *(char *)(*v120 + (int64_t)v131);\n                v132 = v133 + 1;\n                v133 = v132;\n                v127 = v126;\n            }\n        }\n    }\n    // 0x40ac80\n    *v124 = v127;\n    *(int64_t *)(v1 + 56) = v127;\n    // 0x40a74e\n    *(int64_t *)(v1 + 72) = 0;\n    // 0x40a758\n    return 0;\n  lab_0x40a9e5:;\n    int64_t v134 = v71 + (int64_t)(v72 < v60);\n    int64_t v135 = v71 + (int64_t)(v72 >= v60);\n    *(int32_t *)(v1 + 112) = (int32_t)function_40a330(v1, v135, a3);\n    int64_t v25; // 0x40a620\n    int64_t v26; // 0x40a620\n    int64_t v28; // 0x40a620\n    char v27; // 0x40a620\n    if (v63 > v60 == v60 == v134) {\n        int64_t v136 = 8 * v60;\n        if (*(int64_t *)(v70 + v136) != v60) {\n            goto lab_0x40aa98;\n        } else {\n            int64_t v137 = *(int64_t *)(v1 + 16); // 0x40aa10\n            memmove((int64_t *)v137, (int64_t *)(v137 + 4 * v60), 4 * (int32_t)(v63 - v60));\n            int64_t v138 = *(int64_t *)(v1 + 8); // 0x40aa2b\n            int64_t v139 = *v7; // 0x40aa2f\n            memmove((int64_t *)v138, (int64_t *)(v138 + v60), (int32_t)(v139 - v60));\n            *v24 = *v24 - v60;\n            uint64_t v140 = *v7 - v60; // 0x40aa47\n            *v7 = v140;\n            if (v140 >= 1) {\n                for (int64_t i = 0; i < *v7; i++) {\n                    int64_t v141 = 8 * i + *v69;\n                    *(int64_t *)v141 = *(int64_t *)(v141 + v136) - v60;\n                }\n            }\n            // 0x40aa75\n            v25 = *(int64_t *)(v1 + 88) - v60;\n            v26 = *(int64_t *)(v1 + 104) - v60;\n            v27 = *(char *)(v1 + 139);\n            v28 = v138;\n            goto lab_0x40a720;\n        }\n    } else {\n        goto lab_0x40aa98;\n    }\n  lab_0x40a70c:\n    // 0x40a70c\n    v25 = *(int64_t *)(v1 + 88) - v60;\n    v26 = *(int64_t *)(v1 + 104) - v60;\n    v27 = v68;\n    v28 = v66;\n    goto lab_0x40a720;\n  lab_0x40a724:;\n    int64_t * v142 = (int64_t *)(v1 + 8); // 0x40a724\n    *v142 = *v142 + v60;\n    v34 = v30;\n    v35 = v31;\n    v36 = v32;\n    v37 = v33;\n    goto lab_0x40a728;\n  lab_0x40aa98:\n    // 0x40aa98\n    *v6 = 0;\n    v18 = *(int64_t *)(v1 + 80) - a2;\n    v20 = *(int64_t *)(v1 + 96) - a2;\n    int64_t * v143 = (int64_t *)(v1 + 88); // 0x40aab1\n    *v143 = v18 + v60;\n    int64_t * v144 = (int64_t *)(v1 + 104); // 0x40aab9\n    *v144 = v20 + v60;\n    int64_t v145 = v134; // 0x40aac0\n    if (v134 >= 0 == (v134 != 0)) {\n        int64_t v146 = v134; // 0x40aac8\n        v145 = v146;\n        while (*(int64_t *)(v70 - 8 + 8 * v146) == v60) {\n            // 0x40aac8\n            v146--;\n            if (v146 == 0) {\n                // break -> 0x40aad5\n                break;\n            }\n            v145 = v146;\n        }\n    }\n    // 0x40aad5\n    int64_t v147; // 0x40a620\n    if (v145 < v63) {\n        int64_t v148 = v145; // 0x40aae2\n        v147 = v148;\n        while (*(int32_t *)(4 * v148 + *(int64_t *)(v1 + 16)) == -1) {\n            // 0x40aae8\n            v148++;\n            if (v148 == v63) {\n                goto lab_0x40aca8;\n            }\n            v147 = v148;\n        }\n        goto lab_0x40aafc;\n    } else {\n        // 0x40ac9c\n        v147 = v145;\n        if (v145 != v63) {\n            goto lab_0x40aafc;\n        } else {\n            goto lab_0x40aca8;\n        }\n    }\n  lab_0x40a720:;\n    int32_t v29 = *(int32_t *)(v1 + 144);\n    v30 = v25;\n    v31 = v26;\n    v32 = v29;\n    v33 = v28;\n    v34 = v25;\n    v35 = v26;\n    v36 = v29;\n    v37 = v28;\n    if (v27 != 0) {\n        goto lab_0x40a728;\n    } else {\n        goto lab_0x40a724;\n    }\n  lab_0x40ac00:\n    // 0x40ac00\n    v38 = *v24;\n    v39 = v40;\n    v41 = *v2;\n    goto lab_0x40a8a1;\n  lab_0x40acc1:\n    // 0x40acc1\n    *(int32_t *)(v1 + 112) = (int32_t)function_40a330(v1, v63 - 1, a3);\n    int64_t v149 = v1; // 0x40acd3\n    int64_t v150 = v44; // 0x40acd3\n    goto lab_0x40a94c;\n  lab_0x40a927:;\n    int64_t v164 = v46; // 0x40a92e\n    int64_t v163 = v45; // 0x40a92e\n    int32_t v161; // 0x40a620\n    int64_t v162; // 0x40a620\n    if (*(char *)(v1 + 142) != 0) {\n        int64_t v165 = v46 & 0xffffffff; // 0x40ada4\n        int32_t wc = v46; // 0x40ada6\n        v164 = v165;\n        v163 = v165;\n        v161 = 1;\n        v162 = v165;\n        if (wc != 95 == iswalnum(wc) == 0) {\n            goto lab_0x40a934;\n        } else {\n            goto lab_0x40a949;\n        }\n    } else {\n        goto lab_0x40a934;\n    }\n  lab_0x40aafc:;\n    uint64_t v166 = *(int64_t *)(8 * v147 + v70) - v60; // 0x40ab01\n    *v7 = v166;\n    v19 = v18;\n    v21 = v20;\n    v22 = 0;\n    v23 = v1;\n    if (v166 != 0) {\n        if (v166 >= 1) {\n            int64_t v167 = *(int64_t *)(v1 + 16); // 0x40ab0f\n            int64_t v168 = v167; // 0x40ab17\n            *(int32_t *)v168 = -1;\n            v168 += 4;\n            while (v167 + 4 * v166 != v168) {\n                // 0x40ab20\n                *(int32_t *)v168 = -1;\n                v168 += 4;\n            }\n        }\n        int64_t v169 = *(int64_t *)(v1 + 8); // 0x40ab2f\n        memset((int64_t *)v169, 255, (int32_t)v166);\n        v19 = *v143 - v60;\n        v21 = *v144 - v60;\n        v22 = *v7;\n        v23 = v169;\n    }\n    goto lab_0x40ab4f;\n  lab_0x40a94c:;\n    // 0x40a94c\n    char * v151; // 0x40a620\n    int64_t v152; // 0x40a620\n    int64_t v153; // 0x40a620\n    int64_t v154; // 0x40a620\n    int64_t v155; // 0x40a620\n    char v156; // 0x40a620\n    if (v150 != 0) {\n        if (v150 >= 1) {\n            int64_t v157 = *(int64_t *)(v1 + 16); // 0x40ad5c\n            int64_t v158 = v157; // 0x40ad64\n            *(int32_t *)v158 = -1;\n            v158 += 4;\n            while (v157 + 4 * v150 != v158) {\n                // 0x40ad68\n                *(int32_t *)v158 = -1;\n                v158 += 4;\n            }\n        }\n        char * v159 = (char *)(v1 + 139);\n        v156 = 0;\n        v155 = v149;\n        v153 = v150;\n        if (*v159 == 0) {\n            goto lab_0x40a95c;\n        } else {\n            int64_t v160 = *(int64_t *)(v1 + 8); // 0x40ad86\n            memset((int64_t *)v160, 255, (int32_t)v150);\n            v151 = v159;\n            v154 = v160;\n            v152 = *v7;\n            goto lab_0x40a955;\n        }\n    } else {\n        // 0x40a94c\n        v151 = (char *)(v1 + 139);\n        v154 = v149;\n        v152 = v150;\n        goto lab_0x40a955;\n    }\n  lab_0x40a934:\n    // 0x40a934\n    v161 = 0;\n    v162 = v163;\n    if ((int32_t)v164 == 10) {\n        // 0x40a93b\n        v161 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n        v162 = v163;\n    }\n    goto lab_0x40a949;\n  lab_0x40ab4f:\n    // 0x40ab4f\n    *v24 = v22;\n    v25 = v19;\n    v26 = v21;\n    v27 = *(char *)(v1 + 139);\n    v28 = v23;\n    goto lab_0x40a720;\n  lab_0x40a949:\n    // 0x40a949\n    *(int32_t *)(v1 + 112) = v161;\n    v149 = v162;\n    v150 = v43;\n    goto lab_0x40a94c;\n  lab_0x40a95c:\n    // 0x40a95c\n    *v24 = v153;\n    v68 = v156;\n    v66 = v155;\n    goto lab_0x40a70c;\n  lab_0x40a955:\n    // 0x40a955\n    v156 = *v151;\n    v155 = v154;\n    v153 = v152;\n    goto lab_0x40a95c;\n}\n"
        },
        {
            "funcName": "function_40ae10",
            "funcStartAddr": "40ae10",
            "funcEndAddr": "40b035",
            "decompiledFuncCode": "int64_t function_40ae10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40ae10\n    int128_t v1; // 0x40ae10\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40ae12\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40ae29\n    int128_t v5 = __asm_movaps(v3); // bp-88, 0x40ae2d\n    int64_t v6 = *v4 + 24 * a2; // 0x40ae32\n    int64_t v7 = 0; // bp-72, 0x40ae3b\n    int64_t * v8 = (int64_t *)(v6 + 8); // 0x40ae44\n    int64_t v9 = *v8; // 0x40ae44\n    if (v9 < 1) {\n        // 0x40aff1\n        free(NULL);\n        return (int32_t)&g88 ^ (int32_t)&g88;\n    }\n    int64_t v10 = v6 + 16; // 0x40aeb5\n    int64_t * v11 = (int64_t *)v10;\n    int64_t v12 = a3 + 8;\n    int64_t * v13 = (int64_t *)v12;\n    int64_t v14 = a3 + 16;\n    int64_t v15 = 0; // 0x40aea8\n    int64_t v16 = a1; // 0x40ae10\n    int64_t v17 = v9;\n    int64_t v18; // 0x40ae10\n    int64_t v19; // 0x40ae10\n    int64_t v20; // 0x40ae10\n    int64_t v21; // 0x40aee3\n    int64_t v22; // 0x40aeed\n    while (true) {\n      lab_0x40aeb5:\n        // 0x40aeb5\n        v19 = v17;\n        int64_t v23 = v16;\n        int64_t v24 = *(int64_t *)(*v11 + 8 * v15); // 0x40aeb9\n        v16 = v23;\n        v18 = v19;\n        if (v24 == a2) {\n            goto lab_0x40aea8;\n        } else {\n            // 0x40aec2\n            v16 = v23;\n            v18 = v19;\n            if ((*(char *)(v23 + 8 + 16 * v24) & 8) == 0) {\n                goto lab_0x40aea8;\n            } else {\n                // 0x40aed3\n                v21 = 24 * v24;\n                int64_t v25 = *(int64_t *)(a1 + 40) + v21; // 0x40aeea\n                v22 = *(int64_t *)(v25 + 16);\n                int64_t v26 = *(int64_t *)v22; // 0x40aef6\n                int64_t v27 = function_408600(v19, v10, v26); // 0x40af01\n                if (*(int64_t *)(v25 + 8) > 1) {\n                    // 0x40ae60\n                    v20 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40af40;\n                    } else {\n                        int64_t v28 = *v13; // 0x40ae69\n                        int64_t v29 = function_408600(v28, v14, v26); // 0x40ae74\n                        v20 = v28;\n                        if (v29 == 0) {\n                            goto lab_0x40af40;\n                        } else {\n                            goto lab_0x40ae82;\n                        }\n                    }\n                } else {\n                    // 0x40af1b\n                    v16 = v19;\n                    v18 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40aea8;\n                    } else {\n                        int64_t v30 = *v13; // 0x40af20\n                        int64_t v31 = function_408600(v30, v14, v26); // 0x40af2b\n                        v16 = v30;\n                        v18 = v19;\n                        if (v31 != 0) {\n                            goto lab_0x40ae82;\n                        } else {\n                            goto lab_0x40aea8;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40af80:\n    if (v17 < 1) {\n        // 0x40aff1\n        free((int64_t *)v7);\n        return (int32_t)&g88 ^ (int32_t)&g88;\n    }\n    int64_t v32 = 0; // 0x40ae10\n    int64_t v33 = *(int64_t *)(*v11 + 8 * v32); // 0x40af9c\n    int64_t v34; // 0x40ae10\n    int64_t v35; // 0x40afad\n    int64_t v36; // 0x40afc0\n    if (function_408600(v34, (int64_t)&v7, v33) == 0) {\n        // 0x40afad\n        v35 = *v13;\n        v36 = function_408600(v35, v14, v33) - 1;\n        if (v36 > -1 == v36 < v35) {\n            // 0x40afce\n            *v13 = v35 - 1;\n            function_408770(v12, v14, v36);\n        }\n    }\n    int64_t v37 = v32 + 1; // 0x40afe2\n    v32 = v37;\n    while (*v8 > v37) {\n        // 0x40af90\n        v33 = *(int64_t *)(*v11 + 8 * v32);\n        if (function_408600(v34, (int64_t)&v7, v33) == 0) {\n            // 0x40afad\n            v35 = *v13;\n            v36 = function_408600(v35, v14, v33) - 1;\n            if (v36 > -1 == v36 < v35) {\n                // 0x40afce\n                *v13 = v35 - 1;\n                function_408770(v12, v14, v36);\n            }\n        }\n        // 0x40afe2\n        v37 = v32 + 1;\n        v32 = v37;\n    }\n    // 0x40aff1\n    free((int64_t *)v7);\n    return (int32_t)&g88 ^ (int32_t)&g88;\n  lab_0x40aea8:\n    // 0x40aea8\n    v17 = v18;\n    v15++;\n    if (v17 <= v15) {\n        // break -> 0x40af80\n        goto lab_0x40af80;\n    }\n    goto lab_0x40aeb5;\n  lab_0x40af40:;\n    int64_t v38 = *(int64_t *)(v22 + 8); // 0x40af40\n    v16 = v20;\n    v18 = v19;\n    if (v38 < 1) {\n        goto lab_0x40aea8;\n    } else {\n        int64_t v39 = function_408600(v19, v10, v38); // 0x40af56\n        v16 = v19;\n        v18 = v19;\n        if (v39 != 0) {\n            goto lab_0x40aea8;\n        } else {\n            int64_t v40 = *v13; // 0x40af64\n            int64_t v41 = function_408600(v40, v14, v38); // 0x40af6c\n            v16 = v40;\n            v18 = v19;\n            if (v41 == 0) {\n                goto lab_0x40aea8;\n            } else {\n                goto lab_0x40ae82;\n            }\n        }\n    }\n  lab_0x40ae82:;\n    int64_t v42 = function_4090b0(&v5, a4, *v4 + v21); // 0x40ae94\n    if ((int32_t)v42 != 0) {\n        // 0x40b010\n        free((int64_t *)v7);\n        return v42 & 0xffffffff;\n    }\n    // 0x40aea1\n    v16 = &v5;\n    v18 = *v8;\n    goto lab_0x40aea8;\n}\n"
        },
        {
            "funcName": "function_40b040",
            "funcStartAddr": "40b040",
            "funcEndAddr": "40bb4d",
            "decompiledFuncCode": "int64_t function_40b040(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40b040\n    int128_t v1; // 0x40b040\n    int128_t v2 = v1;\n    int64_t * mem = malloc(0x3800); // 0x40b05e\n    if (mem == NULL) {\n        // 0x40b402\n        return 0;\n    }\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40b07b\n    int128_t v4 = __asm_movaps(v3); // bp-152, 0x40b07f\n    int64_t v5 = __asm_movaps(v3); // 0x40b08f\n    int64_t * v6 = (int64_t *)(a2 + 88); // 0x40b099\n    *v6 = 0;\n    int64_t * v7 = (int64_t *)(a2 + 96); // 0x40b0a1\n    *v7 = 0;\n    int64_t v8; // 0x40b040\n    int64_t v9; // 0x40b040\n    int64_t v10; // 0x40b040\n    int64_t v11; // 0x40b040\n    int64_t v12; // 0x40b040\n    int64_t v13; // 0x40b040\n    int64_t v14; // 0x40b040\n    int64_t v15; // 0x40b040\n    int64_t v16; // 0x40b040\n    int64_t v17; // 0x40b040\n    int64_t v18; // 0x40b040\n    int64_t v19; // 0x40b040\n    int64_t v20; // 0x40b040\n    int64_t v21; // 0x40b040\n    int64_t v22; // 0x40b040\n    int128_t v23; // 0x40b040\n    int128_t v24; // 0x40b040\n    int128_t v25; // 0x40b040\n    int128_t v26; // 0x40b040\n    int64_t v27; // 0x40b040\n    int64_t v28; // 0x40b040\n    int128_t v29; // bp-88, 0x40b040\n    int64_t v30; // 0x40b05e\n    int64_t v31; // 0x40b084\n    int64_t v32; // 0x40b040\n    int64_t v33; // 0x40b040\n    int64_t v34; // 0x40ba82\n    int64_t v35; // 0x40b2e7\n    int128_t * v36; // 0x40b040\n    int64_t v37; // 0x40b0c2\n    int64_t v38; // 0x40b0db\n    uint32_t v39; // 0x40b0de\n    char v40; // 0x40b0e2\n    int64_t * mem2; // 0x40b149\n    int32_t size2; // 0x40b188\n    int64_t * mem3; // 0x40b18d\n    int64_t v41; // 0x40b18d\n    int64_t v42; // 0x40b1ba\n    int64_t v43; // 0x40b1ca\n    int128_t v44; // 0x40b040\n    int128_t v45; // 0x40b040\n    int128_t v46; // 0x40b040\n    int128_t v47; // 0x40b040\n    int128_t v48; // 0x40b040\n    if (*(int64_t *)(a2 + 16) < 1) {\n        // 0x40ba22\n        free(mem);\n        goto lab_0x40ba2c;\n    } else {\n        // 0x40b0af\n        v30 = (int64_t)mem;\n        v31 = v30 + 0x1800;\n        v32 = &v4;\n        v33 = &v29;\n        v36 = (int128_t *)(v32 + 16);\n        v23 = v5;\n        v28 = 0;\n        v44 = v3;\n        v14 = a1;\n        v18 = a2;\n        v10 = 0;\n        while (true) {\n          lab_0x40b0bd:\n            // 0x40b0bd\n            v11 = v10;\n            v19 = v18;\n            v15 = v14;\n            int128_t v49 = v44;\n            int128_t v50 = v23;\n            v37 = 8 * v28;\n            int64_t v51 = *(int64_t *)(*(int64_t *)(v19 + 24) + v37); // 0x40b0d3\n            v38 = 16 * v51 + *(int64_t *)v15;\n            int64_t v52 = v38 + 8; // 0x40b0de\n            v39 = *(int32_t *)v52;\n            v40 = *(char *)v52;\n            v24 = v50;\n            v45 = v49;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            switch (v40) {\n                case 1: {\n                    unsigned char v53 = *(char *)v38; // 0x40b418\n                    unsigned char v54 = v53 % 64;\n                    int64_t * v55 = (int64_t *)((int64_t)(v53 / 8 & 24) + v32); // 0x40b433\n                    *v55 = (v54 == 0 ? 1 : 1 << (int64_t)v54) | *v55;\n                    v25 = v50;\n                    v47 = v49;\n                    goto lab_0x40b437;\n                }\n                case 3: {\n                    int64_t v56 = 0;\n                    int64_t * v57 = (int64_t *)(v56 + v32); // 0x40b8a2\n                    *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                    v25 = v50;\n                    v47 = v49;\n                    int64_t v58 = v56 + 8; // 0x40b8b6\n                    while (v56 != 24) {\n                        // 0x40b8a2\n                        v56 = v58;\n                        v57 = (int64_t *)(v56 + v32);\n                        *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                        v25 = v50;\n                        v47 = v49;\n                        v58 = v56 + 8;\n                    }\n                    goto lab_0x40b437;\n                }\n                case 5: {\n                    // 0x40b750\n                    if (*(int32_t *)(v15 + 180) < 2) {\n                        int128_t v59 = __asm_pcmpeqd(v49, v49); // 0x40b7e0\n                        v4 = __asm_movaps(v59);\n                        v26 = __asm_movaps(v59);\n                        v48 = v59;\n                    } else {\n                        int64_t v60 = 0;\n                        int64_t * v61 = (int64_t *)(v60 + v32); // 0x40b769\n                        *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                        int64_t v62 = v60 + 8; // 0x40b77d\n                        v26 = v50;\n                        v48 = v49;\n                        while (v60 != 24) {\n                            // 0x40b769\n                            v60 = v62;\n                            v61 = (int64_t *)(v60 + v32);\n                            *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                            v62 = v60 + 8;\n                            v26 = v50;\n                            v48 = v49;\n                        }\n                    }\n                    goto lab_0x40b77f;\n                }\n                case 7: {\n                    int128_t v63 = __asm_pcmpeqd(v49, v49); // 0x40b880\n                    v4 = __asm_movaps(v63);\n                    v26 = v50;\n                    v48 = v63;\n                    goto lab_0x40b77f;\n                }\n                default: {\n                    goto lab_0x40b112;\n                }\n            }\n        }\n      lab_0x40b123:\n        if (v13 < 1) {\n            // 0x40bb35\n            free(mem);\n            if (v13 != 0) {\n                // 0x40b402\n                return 0;\n            }\n            goto lab_0x40ba2c;\n        } else {\n            int64_t v64 = v13 + 1; // 0x40b138\n            int128_t v65 = v64; // bp-120, 0x40b13d\n            int64_t size = 8 * v64; // 0x40b142\n            mem2 = malloc((int32_t)size);\n            if (mem2 == NULL) {\n                goto lab_0x40b8f7;\n            } else {\n                // 0x40b162\n                v4 = 0;\n                if (v13 > 0xaaaaaaaaaaaa855) {\n                    goto lab_0x40b8f7;\n                } else {\n                    // 0x40b17d\n                    size2 = 24 * (int32_t)v13;\n                    mem3 = malloc(size2);\n                    if (mem3 == NULL) {\n                        goto lab_0x40b8f7;\n                    } else {\n                        // 0x40b1a0\n                        v41 = (int64_t)mem3;\n                        int64_t v66 = size - 8; // 0x40b1a5\n                        int128_t v67 = __asm_pxor(v46, v46); // 0x40b1a9\n                        v42 = v66 + v41;\n                        v43 = v42 + v66;\n                        v29 = __asm_movaps(v67);\n                        __asm_movaps(v67);\n                        int64_t * v68 = (int64_t *)(v17 + 48);\n                        int64_t v69 = 0; // 0x40b1e6\n                        int64_t v70 = v30 + 8; // 0x40b1e6\n                        int64_t v71 = v30; // 0x40b1e6\n                        int64_t v72 = 0; // 0x40b1e6\n                        while (true) {\n                            int64_t v73 = v70;\n                            int64_t v74 = v69;\n                            int64_t * v75 = (int64_t *)v73; // 0x40b1fa\n                            uint64_t v76 = *v75; // 0x40b1fa\n                            if (v76 >= 1) {\n                                int64_t v77 = v76; // 0x40b244\n                                for (int64_t i = 0; i < v77; i++) {\n                                    int64_t v78 = *(int64_t *)(v73 + 8); // 0x40b208\n                                    int64_t v79 = *(int64_t *)(v17 + 24); // 0x40b210\n                                    int64_t v80 = *(int64_t *)(v79 + 8 * *(int64_t *)(v78 + 8 * i)); // 0x40b215\n                                    int64_t v81 = v77; // 0x40b21d\n                                    if (v80 != -1) {\n                                        int64_t v82 = function_408b40((int64_t *)&v65, (int128_t *)(*v68 + 24 * v80)); // 0x40b22f\n                                        int32_t v83 = v82; // 0x40b234\n                                        v4 = v83;\n                                        if (v83 != 0) {\n                                            // 0x40b8e5\n                                            free(mem3);\n                                            goto lab_0x40b8f7;\n                                        }\n                                        // 0x40b21f\n                                        v81 = *v75;\n                                    }\n                                    // 0x40b240\n                                    v77 = v81;\n                                }\n                            }\n                            int64_t v84 = function_4098b0(&v4, v17, (int64_t *)&v65, 0); // 0x40b257\n                            int64_t v85 = 8 * v72; // 0x40b261\n                            int64_t * v86 = (int64_t *)(v85 + v41); // 0x40b261\n                            *v86 = v84;\n                            if (v84 == 0) {\n                                // 0x40b9b8\n                                if ((int32_t)v4 != 0) {\n                                    // break -> 0x40b8e5\n                                    break;\n                                }\n                            }\n                            // 0x40b26e\n                            int64_t v87; // 0x40b040\n                            if (*(char *)(v84 + 104) < 0) {\n                                int64_t v88 = function_4098b0(&v4, v17, (int64_t *)&v65, 1); // 0x40b940\n                                *(int64_t *)(v85 + v42) = v88;\n                                if (v88 == 0) {\n                                    // 0x40b8d0\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40b8e5\n                                        break;\n                                    }\n                                }\n                                int64_t v89 = v74; // 0x40b960\n                                if (v88 != *v86) {\n                                    int32_t v90 = *(int32_t *)(v17 + 180); // 0x40b96c\n                                    v89 = v90 < 2 == (1 - v90 & v90) < 0 ? 1 : 0x100000000000000 * v74 >> 56;\n                                }\n                                int64_t v91 = v89;\n                                int64_t v92 = function_4098b0(&v4, v17, (int64_t *)&v65, 2); // 0x40b98d\n                                *(int64_t *)(v85 + v43) = v92;\n                                v87 = v91;\n                                if (v92 == 0) {\n                                    // 0x40b9a4\n                                    v87 = v91;\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40b8e5\n                                        break;\n                                    }\n                                }\n                            } else {\n                                // 0x40b278\n                                *(int64_t *)(v85 + v42) = v84;\n                                *(int64_t *)(v85 + v43) = v84;\n                                v87 = v74;\n                            }\n                            // 0x40b28a\n                            v27 = v87;\n                            int64_t v93 = 0;\n                            int64_t * v94 = (int64_t *)(v93 + v33); // 0x40b294\n                            *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                            int64_t v95 = v93 + 8; // 0x40b2ac\n                            while (v93 != 24) {\n                                // 0x40b294\n                                v93 = v95;\n                                v94 = (int64_t *)(v93 + v33);\n                                *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                                v95 = v93 + 8;\n                            }\n                            // 0x40b2ae\n                            v72++;\n                            v69 = v27;\n                            v70 = v73 + 24;\n                            v71 += 32;\n                            if (v72 == v13) {\n                                if ((char)v27 != 0) {\n                                    int64_t * mem4 = calloc(8, 512); // 0x40ba82\n                                    v34 = (int64_t)mem4;\n                                    *v7 = v34;\n                                    if (mem4 == NULL) {\n                                        // 0x40b8e5\n                                        free(mem3);\n                                        goto lab_0x40b8f7;\n                                    } else {\n                                        // 0x40ba9c\n                                        v22 = v33;\n                                        v21 = v34;\n                                        v9 = v30 + 0x1820;\n                                        goto lab_0x40bac2;\n                                    }\n                                } else {\n                                    int64_t * mem5 = calloc(8, 256); // 0x40b2e7\n                                    v35 = (int64_t)mem5;\n                                    *v6 = v35;\n                                    if (mem5 == NULL) {\n                                        // 0x40b8e5\n                                        free(mem3);\n                                        goto lab_0x40b8f7;\n                                    } else {\n                                        // 0x40b301\n                                        v8 = 0;\n                                        goto lab_0x40b31f;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40b8e5\n                        free(mem3);\n                        goto lab_0x40b8f7;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40b713:;\n    int64_t v96 = v30 + 16; // 0x40b718\n    int64_t v97; // 0x40b040\n    int64_t v98 = v97 + v96; // 0x40b720\n    int64_t v99 = v96; // 0x40b724\n    goto lab_0x40b728;\n  lab_0x40b55d:;\n    // 0x40b55d\n    int64_t v145; // 0x40b040\n    int64_t v146; // 0x40b576\n    while (true) {\n        // 0x40b566\n        int64_t v147; // 0x40b040\n        int64_t v148 = v147;\n        int64_t v149; // 0x40b040\n        int64_t v150 = v149;\n        int64_t v151 = 8 * v150; // 0x40b566\n        int64_t v152 = *(int64_t *)(v151 + v32); // 0x40b566\n        int64_t v153 = *(int64_t *)(v151 + v145); // 0x40b56a\n        int64_t v154 = v153 & v152; // 0x40b56a\n        int64_t v155; // 0x40b040\n        *(int64_t *)(v151 + v155) = v154;\n        int64_t v156 = v150 + 1; // 0x40b572\n        v146 = v154 | v148;\n        v149 = v156;\n        v147 = v146;\n        if (v156 == 4) {\n            // break -> 0x40b57f\n            break;\n        }\n    }\n    int64_t v157 = 0; // 0x40b582\n    int64_t v158 = 0; // 0x40b582\n    int64_t v159 = 0; // 0x40b582\n    int64_t v160; // 0x40b040\n    int64_t v161; // 0x40b040\n    int64_t v162; // 0x40b040\n    if (v146 != 0) {\n        int64_t v163 = v159;\n        int64_t v164 = v158;\n        int64_t v165 = v157;\n        int64_t v166 = 8 * v165; // 0x40b592\n        int64_t * v167 = (int64_t *)(v166 + v32); // 0x40b592\n        int64_t v168 = *v167; // 0x40b592\n        int64_t v169 = *(int64_t *)(v166 + v145); // 0x40b596\n        int64_t v170 = v169 & -1 - v168; // 0x40b5a0\n        int64_t v171 = v168 & -1 - v169; // 0x40b5a6\n        *(int64_t *)(v166 + v33) = v170;\n        int64_t v172 = v170 | v163; // 0x40b5ad\n        *v167 = v171;\n        int64_t v173 = v165 + 1; // 0x40b5b4\n        int64_t v174 = v171 | v164; // 0x40b5b8\n        v157 = v173;\n        v158 = v174;\n        v159 = v172;\n        while (v173 != 4) {\n            // 0x40b592\n            v163 = v159;\n            v164 = v158;\n            v165 = v157;\n            v166 = 8 * v165;\n            v167 = (int64_t *)(v166 + v32);\n            v168 = *v167;\n            v169 = *(int64_t *)(v166 + v145);\n            v170 = v169 & -1 - v168;\n            v171 = v168 & -1 - v169;\n            *(int64_t *)(v166 + v33) = v170;\n            v172 = v170 | v163;\n            *v167 = v171;\n            v173 = v165 + 1;\n            v174 = v171 | v164;\n            v157 = v173;\n            v158 = v174;\n            v159 = v172;\n        }\n        // 0x40b5c1\n        int64_t v175; // 0x40b040\n        int64_t v176 = 24 * v175 + v30; // 0x40b5cb\n        int64_t v177 = v176; // 0x40b5d2\n        int64_t v178; // 0x40b040\n        int64_t v179 = v178; // 0x40b5d2\n        if (v172 != 0) {\n            int128_t v180 = v29; // 0x40b5d4\n            int128_t v181 = __asm_movdqa(v180); // 0x40b5d4\n            int64_t v182 = 32 * v178 + v31; // 0x40b5e9\n            int128_t v183 = *(int128_t *)v182; // 0x40b5ee\n            __asm_movups(v183, v181);\n            int128_t v184; // 0x40b040\n            int128_t v185 = __asm_movdqa(v184); // 0x40b5f1\n            int128_t v186 = *(int128_t *)(v182 + 16); // 0x40b5fa\n            __asm_movups(v186, v185);\n            int128_t v187 = __asm_movdqa(0); // 0x40b5fe\n            int64_t v188 = 24 * v178;\n            int128_t v189 = *(int128_t *)v145; // 0x40b610\n            __asm_movups(v189, v187);\n            int128_t v190; // 0x40b040\n            int128_t v191 = __asm_movdqa(v190); // 0x40b615\n            int128_t v192 = *(int128_t *)(v145 + 16); // 0x40b61e\n            __asm_movups(v192, v191);\n            if ((int32_t)function_4096a0(v188 + v30, v176) != 0) {\n                goto lab_0x40b713;\n            }\n            // 0x40b631\n            v177 = 0x100000000 * v176 >> 32;\n            v179 = v178 + 1;\n        }\n        int64_t v193 = v179;\n        int64_t v194 = v177;\n        int64_t * v195; // 0x40b040\n        int64_t v196 = *v195; // 0x40b644\n        int64_t v197 = *(int64_t *)(v196 + v37); // 0x40b648\n        if ((char)function_406ff0(v194, v197) == 0) {\n            // 0x40b63a\n            goto lab_0x40b713;\n        }\n        // 0x40b65c\n        int64_t v198; // 0x40b040\n        v162 = v198;\n        v160 = v193;\n        v161 = v175;\n        if (v174 == 0) {\n            // break -> 0x40b675\n            goto lab_0x40b675_2;\n        }\n    }\n    goto lab_0x40b53e;\n  lab_0x40b53e:;\n    // 0x40b53e\n    int64_t v199; // 0x40b040\n    int64_t v200 = v199;\n    int64_t v201; // 0x40b040\n    int64_t v202 = v201 + 1; // 0x40b53e\n    v199 = v200;\n    int64_t v203; // 0x40b040\n    v203 += 32;\n    v201 = v202;\n    v162 = 0x100000000000000 * v19 >> 56;\n    v160 = v200;\n    v161 = v202;\n    if (v202 >= v200) {\n        // break -> 0x40b675\n        goto lab_0x40b675_2;\n    }\n    goto lab_0x40b54f;\n  lab_0x40b112:\n    // 0x40b112\n    v13 = v12;\n    v17 = v16;\n    v46 = v45;\n    int64_t v206 = v28 + 1; // 0x40b112\n    v23 = v24;\n    v28 = v206;\n    v44 = v46;\n    v14 = v17;\n    v18 = v20;\n    v10 = v13;\n    if (v206 >= *(int64_t *)(v20 + 16)) {\n        // break -> 0x40b123\n        goto lab_0x40b123;\n    }\n    goto lab_0x40b0bd;\n  lab_0x40b437:;\n    uint32_t v207 = v39 / 256; // 0x40b0e7\n    uint32_t v208 = v207 & 0xff03ff;\n    int128_t v209 = v47;\n    int128_t v210 = v25;\n    int128_t v211 = v209; // 0x40b43a\n    int64_t v212; // 0x40b0ea\n    int128_t v213; // 0x40b040\n    if ((int16_t)v208 == 0) {\n        goto lab_0x40b4f0;\n    } else {\n        // 0x40b440\n        v212 = v208;\n        v213 = v209;\n        if ((v212 & 32) != 0) {\n            int128_t v214 = v4; // 0x40b7b0\n            int128_t v215 = __asm_pxor(v209, v209); // 0x40b7b5\n            v4 = __asm_movaps(v215);\n            *v36 = (int128_t)__asm_movaps(v215);\n            v24 = v210;\n            v45 = v215;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            if ((v214 & 1024) == 0) {\n                goto lab_0x40b112;\n            } else {\n                // 0x40b7c9\n                v4 = 1024;\n                v213 = v215;\n                goto lab_0x40b448;\n            }\n        } else {\n            goto lab_0x40b448;\n        }\n    }\n  lab_0x40b77f:;\n    int128_t v216 = v48;\n    int128_t v217 = v26;\n    int64_t v218 = *(int64_t *)(v15 + 216); // 0x40b77f\n    if ((v218 & 64) == 0) {\n        // 0x40b78b\n        v4 = (int64_t)v4 & -1025;\n    }\n    // 0x40b794\n    v25 = v217;\n    v47 = v216;\n    if ((char)v218 <= 255) {\n        // 0x40b7a0\n        v4 = (int64_t)v4 & -2;\n        v25 = v217;\n        v47 = v216;\n    }\n    goto lab_0x40b437;\n  lab_0x40b4f0:;\n    int128_t v219 = v211;\n    v162 = v19;\n    v160 = v11;\n    v161 = 0;\n    if (v11 >= 1) {\n        // 0x40b501\n        v199 = v11;\n        v203 = v31;\n        v201 = 0;\n        while (true) {\n          lab_0x40b54f:\n            // 0x40b54f\n            if (v40 == 1) {\n                unsigned char v204 = *(char *)v38; // 0x40b520\n                int64_t v205 = *(int64_t *)(32 * v201 + v31 + (int64_t)(v204 / 8 & 24)); // 0x40b533\n                if ((1 << (int64_t)(v204 % 64) & v205) != 0) {\n                    goto lab_0x40b55d;\n                } else {\n                    goto lab_0x40b53e;\n                }\n            } else {\n                goto lab_0x40b55d;\n            }\n        }\n    }\n  lab_0x40b675_2:;\n    int64_t v220 = v160;\n    int64_t v221 = v162;\n    v24 = v210;\n    v45 = v219;\n    v16 = v15;\n    v20 = v221;\n    v12 = v220;\n    int64_t v222; // 0x40b040\n    int64_t v223; // 0x40b040\n    int64_t v224; // 0x40b040\n    int64_t result; // 0x40b040\n    int128_t v225; // 0x40b040\n    if (v220 != v161) {\n        goto lab_0x40b112;\n    } else {\n        int128_t v226 = __asm_movdqa(v4); // 0x40b67e\n        int64_t v227 = 32 * v220 + v31; // 0x40b695\n        __asm_movups(*(int128_t *)v227, v226);\n        __asm_movups(*(int128_t *)(v227 + 16), __asm_movdqa(v210));\n        v97 = 24 * v220;\n        int64_t v228 = v97 + v30; // 0x40b6bd\n        int64_t * v229 = (int64_t *)v228;\n        *v229 = 1;\n        int64_t * v230 = (int64_t *)(v228 + 8);\n        *v230 = 1;\n        int64_t * mem6 = malloc(8); // 0x40b6d6\n        *(int64_t *)(v228 + 16) = (int64_t)mem6;\n        if (mem6 == NULL) {\n            // 0x40b3db\n            *v230 = 0;\n            *v229 = 0;\n            if (v220 != 0) {\n                goto lab_0x40b713;\n            } else {\n                // 0x40b3f4\n                free(mem);\n                result = 0;\n                goto lab_0x40b402;\n            }\n        }\n        // 0x40b6f2\n        *mem6 = *(int64_t *)(*(int64_t *)(v221 + 24) + v37);\n        v225 = v219;\n        v223 = 0x100000000000000 * v15 >> 56;\n        v224 = v221;\n        v222 = v220 + 1;\n        goto lab_0x40b6f9;\n    }\n  lab_0x40b448:;\n    int128_t v231 = v213;\n    v225 = v231;\n    v223 = v15;\n    v224 = v19;\n    v222 = v11;\n    if ((char)v207 <= -1) {\n        goto lab_0x40b6f9;\n    } else {\n        if ((v212 & 4) == 0) {\n            goto lab_0x40b4a0;\n        } else {\n            if (v40 == 1) {\n                // 0x40b860\n                v225 = v231;\n                v223 = v15;\n                v224 = v19;\n                v222 = v11;\n                if ((*(char *)(v38 + 10) & 64) == 0) {\n                    goto lab_0x40b6f9;\n                } else {\n                    // 0x40b86b\n                    if (*(int32_t *)(v15 + 180) > 1) {\n                        goto lab_0x40b46b;\n                    } else {\n                        goto lab_0x40b830;\n                    }\n                }\n            } else {\n                // 0x40b45d\n                if (*(int32_t *)(v15 + 180) < 2) {\n                    goto lab_0x40b830;\n                } else {\n                    goto lab_0x40b46b;\n                }\n            }\n        }\n    }\n  lab_0x40b6f9:;\n    int128_t v232 = v225;\n    int128_t v233 = __asm_pxor(v232, v232); // 0x40b6f9\n    v4 = __asm_movaps(v233);\n    *v36 = (int128_t)__asm_movaps(v233);\n    v24 = v210;\n    v45 = v233;\n    v16 = v223;\n    v20 = v224;\n    v12 = v222;\n    goto lab_0x40b112;\n  lab_0x40b4a0:\n    // 0x40b4a0\n    v211 = v231;\n    if ((v212 & 8) == 0) {\n        goto lab_0x40b4f0;\n    } else {\n        if (v40 == 1) {\n            // 0x40b8c0\n            v225 = v231;\n            v223 = v15;\n            v224 = v19;\n            v222 = v11;\n            if ((*(char *)(v38 + 10) & 64) == 0) {\n                goto lab_0x40b4ad;\n            } else {\n                goto lab_0x40b6f9;\n            }\n        } else {\n            goto lab_0x40b4ad;\n        }\n    }\n  lab_0x40b4ad:\n    // 0x40b4ad\n    if (*(int32_t *)(v15 + 180) < 2) {\n        int64_t v234 = 0; // 0x40b80f\n        int64_t v235 = 8 * v234; // 0x40b7fc\n        int64_t * v236 = (int64_t *)(v235 + v32); // 0x40b807\n        int64_t v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235); // 0x40b807\n        *v236 = v237;\n        v234++;\n        int64_t v238 = v237; // 0x40b813\n        int64_t v239 = v238; // 0x40b81a\n        while (v234 != 4) {\n            // 0x40b7fc\n            v235 = 8 * v234;\n            v236 = (int64_t *)(v235 + v32);\n            v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235);\n            *v236 = v237;\n            v234++;\n            v238 = v237 | v239;\n            v239 = v238;\n        }\n        // 0x40b81c\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v238 == 0) {\n            goto lab_0x40b112;\n        } else {\n            goto lab_0x40b4f0;\n        }\n    } else {\n        int64_t v240 = 0; // 0x40b4c1\n        int64_t v241 = 8 * v240; // 0x40b4c3\n        int64_t v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120)); // 0x40b4cb\n        int64_t * v243 = (int64_t *)(v241 + v32); // 0x40b4d2\n        int64_t v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241)); // 0x40b4d2\n        *v243 = v244;\n        v240++;\n        int64_t v245 = v244; // 0x40b4de\n        int64_t v246 = v245; // 0x40b4e5\n        while (v240 != 4) {\n            // 0x40b4c3\n            v241 = 8 * v240;\n            v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120));\n            v243 = (int64_t *)(v241 + v32);\n            v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241));\n            *v243 = v244;\n            v240++;\n            v245 = v244 | v246;\n            v246 = v245;\n        }\n        // 0x40b4e7\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v245 == 0) {\n            goto lab_0x40b112;\n        } else {\n            goto lab_0x40b4f0;\n        }\n    }\n  lab_0x40b830:;\n    int64_t v247 = 0; // 0x40b832\n    int64_t v248 = 8 * v247; // 0x40b834\n    int64_t * v249 = (int64_t *)(v248 + v32); // 0x40b834\n    int64_t v250 = *(int64_t *)(v15 + 184 + v248) & *v249; // 0x40b838\n    *v249 = v250;\n    int64_t v251 = v247 + 1; // 0x40b844\n    int64_t v252 = v250; // 0x40b848\n    v247 = v251;\n    int64_t v253 = v252; // 0x40b84f\n    while (v251 != 4) {\n        // 0x40b834\n        v248 = 8 * v247;\n        v249 = (int64_t *)(v248 + v32);\n        v250 = *(int64_t *)(v15 + 184 + v248) & *v249;\n        *v249 = v250;\n        v251 = v247 + 1;\n        v252 = v250 | v253;\n        v247 = v251;\n        v253 = v252;\n    }\n    // 0x40b851\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v252 != 0) {\n        goto lab_0x40b4a0;\n    } else {\n        goto lab_0x40b112;\n    }\n  lab_0x40b46b:;\n    int64_t v254 = 0; // 0x40b471\n    int64_t v255 = 8 * v254; // 0x40b473\n    int64_t v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120)); // 0x40b473\n    int64_t * v257 = (int64_t *)(v255 + v32); // 0x40b482\n    int64_t v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257; // 0x40b482\n    *v257 = v258;\n    int64_t v259 = v254 + 1; // 0x40b48a\n    int64_t v260 = v258; // 0x40b48e\n    v254 = v259;\n    int64_t v261 = v260; // 0x40b495\n    while (v259 != 4) {\n        // 0x40b473\n        v255 = 8 * v254;\n        v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120));\n        v257 = (int64_t *)(v255 + v32);\n        v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257;\n        *v257 = v258;\n        v259 = v254 + 1;\n        v260 = v258 | v261;\n        v254 = v259;\n        v261 = v260;\n    }\n    // 0x40b497\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v260 == 0) {\n        goto lab_0x40b112;\n    } else {\n        goto lab_0x40b4a0;\n    }\n  lab_0x40ba2c:;\n    int64_t * mem7 = calloc(8, 256); // 0x40ba36\n    int64_t v262 = (int64_t)mem7; // 0x40ba36\n    *v6 = v262;\n    // 0x40b402\n    return v262 & -256 | (int64_t)(mem7 != NULL);\n  lab_0x40b8f7:\n    // 0x40b8f7\n    free(mem2);\n    int64_t v263 = v30 + 16; // 0x40b904\n    int64_t v264 = v263 + 24; // 0x40b913\n    free((int64_t *)*(int64_t *)v263);\n    int64_t v265 = v264; // 0x40b91f\n    while (v264 != 24 * v13 + v263) {\n        // 0x40b910\n        v264 = v265 + 24;\n        free((int64_t *)*(int64_t *)v265);\n        v265 = v264;\n    }\n    // 0x40b921\n    free(mem);\n    result = 0;\n  lab_0x40b402:\n    // 0x40b402\n    return result;\n  lab_0x40b728:;\n    int64_t v100 = v99 + 24; // 0x40b72b\n    free((int64_t *)*(int64_t *)v99);\n    v99 = v100;\n    if (v98 != v100) {\n        goto lab_0x40b728;\n    } else {\n        // 0x40b739\n        free(mem);\n        result = 0;\n        goto lab_0x40b402;\n    }\n  lab_0x40bac2:;\n    int64_t v101 = v9;\n    int64_t v102 = v21;\n    int64_t v103 = *(int64_t *)v22; // 0x40bac2\n    int64_t v104; // 0x40b040\n    int64_t v105; // 0x40b040\n    int64_t v106; // 0x40b040\n    int64_t * v107; // 0x40b040\n    if (v103 == 0) {\n        goto lab_0x40bae2;\n    } else {\n        // 0x40bad2\n        v107 = (int64_t *)(v101 - 32);\n        v105 = v103;\n        v106 = 1;\n        v104 = v102;\n        goto lab_0x40bad2_2;\n    }\n  lab_0x40b31f:;\n    int64_t v108 = v8;\n    int64_t v109 = *(int64_t *)(v108 + v33); // 0x40b322\n    int64_t v110; // 0x40b040\n    int64_t v111; // 0x40b040\n    int64_t v112; // 0x40b040\n    int64_t * v113; // 0x40b040\n    int64_t v114; // 0x40b040\n    int64_t * v115; // 0x40b040\n    if (v109 == 0) {\n        goto lab_0x40b354;\n    } else {\n        // 0x40b340\n        v113 = (int64_t *)(v108 + v31);\n        v114 = v30 + 0x1820 + v108;\n        v115 = (int64_t *)(v17 + 184 + v108);\n        v110 = v109;\n        v111 = 1;\n        v112 = 64 * v108 + v35;\n        goto lab_0x40b340_2;\n    }\n  lab_0x40bae2:;\n    int64_t v116 = v22 + 8; // 0x40bae2\n    int64_t v117 = v34; // 0x40baf4\n    v22 = v116;\n    v21 = v102 + 512;\n    v9 = v101 + 8;\n    int64_t v118; // bp-56, 0x40b040\n    if (v116 != (int64_t)&v118) {\n        goto lab_0x40bac2;\n    } else {\n        goto lab_0x40b35e;\n    }\n  lab_0x40b354:\n    // 0x40b354\n    v8 = v108 + 8;\n    v117 = v35;\n    if (v108 != 24) {\n        goto lab_0x40b31f;\n    } else {\n        goto lab_0x40b35e;\n    }\n  lab_0x40b35e:;\n    int64_t v119; // 0x40b040\n    char v120; // 0x40b040\n    if ((v120 & 4) == 0) {\n        goto lab_0x40b38d;\n    } else {\n        // 0x40b36f\n        v119 = 0;\n        goto lab_0x40b36f_2;\n    }\n  lab_0x40bad2_2:;\n    int64_t v121 = v104;\n    int64_t v122 = v106;\n    uint64_t v123 = v105;\n    int64_t v124; // 0x40b040\n    int64_t v125; // 0x40b040\n    int64_t v126; // 0x40b040\n    if (v123 % 2 != 0) {\n        // 0x40bafb\n        v126 = 0;\n        v125 = v101;\n        v124 = 0;\n        if ((*v107 & v122) != 0) {\n            goto lab_0x40bb1c;\n        } else {\n            goto lab_0x40bb06;\n        }\n    } else {\n        goto lab_0x40bad6;\n    }\n  lab_0x40b340_2:;\n    int64_t v127 = v112;\n    int64_t v128 = v111;\n    uint64_t v129 = v110;\n    int64_t v130; // 0x40b040\n    int64_t v131; // 0x40b040\n    int64_t v132; // 0x40b040\n    if (v129 % 2 != 0) {\n        // 0x40b9d0\n        v131 = v114;\n        v130 = 0;\n        v132 = 0;\n        if ((*v113 & v128) != 0) {\n            goto lab_0x40b9ff;\n        } else {\n            goto lab_0x40b9e8;\n        }\n    } else {\n        goto lab_0x40b348;\n    }\n  lab_0x40b38d:\n    // 0x40b38d\n    free(mem3);\n    free(mem2);\n    int64_t v133 = v30 + 16; // 0x40b3ae\n    int64_t v134 = v133; // 0x40b3b5\n    goto lab_0x40b3b8;\n  lab_0x40bad6:\n    // 0x40bad6\n    v105 = v123 / 2;\n    v106 = 2 * v122;\n    v104 = v121 + 8;\n    if (v123 >= 2) {\n        goto lab_0x40bad2_2;\n    } else {\n        goto lab_0x40bae2;\n    }\n  lab_0x40b348:\n    // 0x40b348\n    v110 = v129 / 2;\n    v111 = 2 * v128;\n    v112 = v127 + 8;\n    if (v129 >= 2) {\n        goto lab_0x40b340_2;\n    } else {\n        goto lab_0x40b354;\n    }\n  lab_0x40b3b8:;\n    int64_t v135 = v134 + 24; // 0x40b3bc\n    free((int64_t *)*(int64_t *)v134);\n    v134 = v135;\n    if (v133 + (int64_t)size2 != v135) {\n        goto lab_0x40b3b8;\n    } else {\n        // 0x40b3ca\n        free(mem);\n        result = 1;\n        goto lab_0x40b402;\n    }\n  lab_0x40b36f_2:;\n    int64_t v136 = v119;\n    if ((*(char *)(v30 + 0x1801 + 32 * v136) & 4) != 0) {\n        int64_t v137 = *(int64_t *)(8 * v136 + v43); // 0x40ba5e\n        *(int64_t *)(v117 + 80) = v137;\n        if ((char)v27 == 0) {\n            goto lab_0x40b38d;\n        } else {\n            // 0x40ba6c\n            *(int64_t *)(v117 + 2128) = v137;\n            goto lab_0x40b38d;\n        }\n    } else {\n        int64_t v138 = v136 + 1; // 0x40b384\n        v119 = v138;\n        if (v138 != v13) {\n            goto lab_0x40b36f_2;\n        } else {\n            goto lab_0x40b38d;\n        }\n    }\n  lab_0x40bb1c:;\n    int64_t v139 = 8 * v124; // 0x40bb1c\n    *(int64_t *)v121 = *(int64_t *)(v139 + v41);\n    *(int64_t *)(v121 + 2048) = *(int64_t *)(v139 + v42);\n    goto lab_0x40bad6;\n  lab_0x40bb06:;\n    int64_t v140 = v125;\n    int64_t v141 = v126 + 1; // 0x40bb09\n    v126 = v141;\n    v125 = v140 + 32;\n    v124 = v141;\n    if ((*(int64_t *)v140 & v122) == 0) {\n        goto lab_0x40bb06;\n    } else {\n        goto lab_0x40bb1c;\n    }\n  lab_0x40b9ff:;\n    int64_t v142 = v132;\n    if ((*v115 & v128) == 0) {\n        // 0x40ba15\n        *(int64_t *)v127 = *(int64_t *)(v142 + v41);\n        goto lab_0x40b348;\n    } else {\n        // 0x40ba09\n        *(int64_t *)v127 = *(int64_t *)(v142 + v42);\n        goto lab_0x40b348;\n    }\n  lab_0x40b9e8:;\n    int64_t v143 = v131;\n    int64_t v144 = v130 + 1; // 0x40b9eb\n    v131 = v143 + 32;\n    v130 = v144;\n    if ((*(int64_t *)v143 & v128) == 0) {\n        goto lab_0x40b9e8;\n    } else {\n        // 0x40b9fb\n        v132 = 8 * v144;\n        goto lab_0x40b9ff;\n    }\n}\n"
        },
        {
            "funcName": "function_40bb50",
            "funcStartAddr": "40bb50",
            "funcEndAddr": "40bbd7",
            "decompiledFuncCode": "int64_t function_40bb50(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 48; // 0x40bb50\n    char * v2 = (char *)v1; // 0x40bb50\n    if (*v2 == 16) {\n        int64_t v3 = *(int64_t *)(a2 + 8); // 0x40bb56\n        *(int64_t *)(a2 + 24) = *(int64_t *)(v3 + 24);\n        *(int64_t *)(a2 + 56) = *(int64_t *)(v3 + 56);\n        return 0;\n    }\n    // 0x40bb70\n    *(int64_t *)(a2 + 24) = a2;\n    int64_t v4 = a2 + 40; // 0x40bb84\n    int64_t v5 = function_407cd0(a1, *(int64_t *)v4, *(int64_t *)v1); // 0x40bb88\n    *(int64_t *)(a2 + 56) = v5;\n    if (v5 == -1) {\n        // 0x40bbc6\n        return 12;\n    }\n    // 0x40bb9a\n    if (*v2 == 12) {\n        int32_t * v6 = (int32_t *)(a1 + 8 + 16 * v5); // 0x40bbb8\n        *v6 = *v6 & -0x3ff01 | 256 * *(int32_t *)v4 & 0x3ff00;\n    }\n    // 0x40bbc6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40bbe0",
            "funcStartAddr": "40bbe0",
            "funcEndAddr": "40bd5c",
            "decompiledFuncCode": "int64_t function_40bbe0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 != 0) {\n        int64_t v2 = 0; // 0x40bbfb\n        if (*v1 != 0) {\n            int64_t v3 = v2 + 1; // 0x40bc0f\n            int64_t v4 = a1 + 16 * v2; // 0x40bc17\n            function_407c80(v4);\n            v2 = v3;\n            int64_t v5 = v4; // 0x40bc24\n            while (*v1 > v3) {\n                // 0x40bc0c\n                v3 = v2 + 1;\n                v4 = v5 + 16 * v2;\n                function_407c80(v4);\n                v2 = v3;\n                v5 = v4;\n            }\n        }\n    }\n    // 0x40bc26\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    int64_t * v6; // 0x40bbe0\n    int64_t * v7; // 0x40bbe0\n    int64_t * v8; // 0x40bbe0\n    if (*v1 == 0) {\n        // 0x40bc26\n        v7 = (int64_t *)(a1 + 56);\n        v6 = (int64_t *)(a1 + 48);\n        v8 = (int64_t *)(a1 + 40);\n    } else {\n        int64_t * v9 = (int64_t *)(a1 + 48);\n        int64_t * v10 = (int64_t *)(a1 + 56);\n        int64_t * v11 = (int64_t *)(a1 + 40);\n        int64_t v12 = 0;\n        int64_t v13 = *v9; // 0x40bc40\n        if (v13 != 0) {\n            // 0x40bc4a\n            free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n        }\n        int64_t v14 = *v10; // 0x40bc58\n        if (v14 != 0) {\n            // 0x40bc62\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n        }\n        int64_t v15 = *v11; // 0x40bc70\n        if (v15 != 0) {\n            // 0x40bc7a\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n        }\n        int64_t v16 = v12 + 1; // 0x40bc88\n        v7 = v10;\n        v6 = v9;\n        v8 = v11;\n        while (*v1 > v16) {\n            // 0x40bc40\n            v12 = v16;\n            v13 = *v9;\n            if (v13 != 0) {\n                // 0x40bc4a\n                free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n            }\n            // 0x40bc58\n            v14 = *v10;\n            if (v14 != 0) {\n                // 0x40bc62\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n            }\n            // 0x40bc70\n            v15 = *v11;\n            if (v15 != 0) {\n                // 0x40bc7a\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n            }\n            // 0x40bc88\n            v16 = v12 + 1;\n            v7 = v10;\n            v6 = v9;\n            v8 = v11;\n        }\n    }\n    // 0x40bc93\n    free((int64_t *)*v8);\n    free((int64_t *)*v6);\n    int64_t * v17 = (int64_t *)*v7; // 0x40bcaf\n    free(v17);\n    free(v17);\n    int64_t * v18 = (int64_t *)(a1 + 64); // 0x40bcbd\n    int64_t v19 = *v18; // 0x40bcbd\n    int64_t * v20 = NULL; // 0x40bcc5\n    if (v19 != 0) {\n        int64_t v21 = 0; // 0x40bd03\n        int64_t v22 = 24 * v21 + v19; // 0x40bcd7\n        int64_t * v23 = (int64_t *)v22; // 0x40bcdb\n        int64_t * v24 = (int64_t *)(v22 + 16);\n        int64_t v25 = 0; // 0x40bce0\n        int64_t v26; // 0x40bcf0\n        if (*v23 >= 1) {\n            v26 = v25 + 1;\n            function_4081d0(*(int64_t *)(*v24 + 8 * v25));\n            v25 = v26;\n            while (v26 < *v23) {\n                // 0x40bce8\n                v26 = v25 + 1;\n                function_4081d0(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n            }\n        }\n        // 0x40bcff\n        v21++;\n        free((int64_t *)*v24);\n        int64_t v27 = *v18;\n        while (*(int64_t *)(a1 + 136) >= v21) {\n            // 0x40bcd0\n            v22 = 24 * v21 + v27;\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 16);\n            v25 = 0;\n            if (*v23 >= 1) {\n                v26 = v25 + 1;\n                function_4081d0(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n                while (v26 < *v23) {\n                    // 0x40bce8\n                    v26 = v25 + 1;\n                    function_4081d0(*(int64_t *)(*v24 + 8 * v25));\n                    v25 = v26;\n                }\n            }\n            // 0x40bcff\n            v21++;\n            free((int64_t *)*v24);\n            v27 = *v18;\n        }\n        // 0x40bd25\n        v20 = (int64_t *)v27;\n    }\n    // 0x40bd25\n    free(v20);\n    int64_t v28 = *(int64_t *)(a1 + 120); // 0x40bd2a\n    if (v28 != (int64_t)&g14) {\n        // 0x40bd38\n        free((int64_t *)v28);\n    }\n    // 0x40bd3d\n    free((int64_t *)*(int64_t *)(a1 + 224));\n    free((int64_t *)a1);\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_40bd60",
            "funcStartAddr": "40bd60",
            "funcEndAddr": "40bdae",
            "decompiledFuncCode": "int64_t function_40bd60(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 < 1) {\n        // 0x40bda0\n        free((int64_t *)*v1);\n        return &g88;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = v2 + 1; // 0x40bd79\n    int64_t v4 = 48 * v2; // 0x40bd7d\n    free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n    uint64_t v5 = *(int64_t *)(v4 + 16 + *v1); // 0x40bd90\n    free((int64_t *)v5);\n    while (v3 < v5) {\n        // 0x40bd70\n        v2 = v3;\n        v3 = v2 + 1;\n        v4 = 48 * v2;\n        free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n        v5 = *(int64_t *)(v4 + 16 + *v1);\n        free((int64_t *)v5);\n    }\n    // 0x40bda0\n    free((int64_t *)*v1);\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_40bdb0",
            "funcStartAddr": "40bdb0",
            "funcEndAddr": "40be40",
            "decompiledFuncCode": "int64_t function_40bdb0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int128_t * a6) {\n    int64_t v1 = a1 - 1; // 0x40bdb7\n    *(int64_t *)a1 = v1;\n    if (v1 < 0) {\n        // 0x40be22\n        __assert_fail(\"num >= 0\", \"lib/regexec.c\", 1359, \"pop_fail_stack\");\n        return &g88;\n    }\n    int64_t v2 = 48 * v1; // 0x40bdce\n    int64_t v3 = v2 + a2; // 0x40bdd8\n    *a3 = *(int64_t *)v3;\n    int64_t v4 = *(int64_t *)(v3 + 16); // 0x40bde1\n    memcpy((int64_t *)a5, (int64_t *)v4, 16 * (int32_t)a4);\n    int64_t * v5 = (int64_t *)((int64_t)a6 + 16); // 0x40bded\n    free((int64_t *)*v5);\n    int64_t v6 = v4 + v2;\n    free((int64_t *)*(int64_t *)(v6 + 16));\n    *a6 = (int128_t)__asm_movaps(__asm_movdqu(*(int128_t *)(v6 + 24)));\n    *v5 = *(int64_t *)(v6 + 40);\n    return *(int64_t *)(v6 + 8);\n}\n"
        },
        {
            "funcName": "function_40be40",
            "funcStartAddr": "40be40",
            "funcEndAddr": "40be8c",
            "decompiledFuncCode": "int64_t function_40be40(int64_t a1, int64_t str) {\n    // 0x40be40\n    int64_t v1; // 0x40be40\n    uint64_t v2 = v1;\n    int32_t len = strlen((char *)str); // 0x40be4f\n    if (len != 1) {\n        // 0x40be80\n        return 3;\n    }\n    int64_t * v3 = (int64_t *)((v2 / 8 & 24) + a1); // 0x40be6a\n    *v3 = *v3 | (int64_t)len << v2 % 64;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40be90",
            "funcStartAddr": "40be90",
            "funcEndAddr": "40c656",
            "decompiledFuncCode": "int64_t function_40be90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6, int64_t a7) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = a4; // 0x40beb1\n    int64_t v3 = a6; // 0x40beb1\n    int64_t v4; // 0x40be90\n    int64_t v5; // 0x40be90\n    int64_t v6; // 0x40be90\n    int64_t v7; // 0x40be90\n    int64_t v8; // 0x40be90\n    bool v9; // 0x40be90\n    if ((a7 & 0x400000) == 0) {\n        goto lab_0x40bed5;\n    } else {\n        int64_t v10 = v9 ? -1 : 1;\n        int64_t v11 = (int64_t)\"upper\"; // 0x40be90\n        int64_t v12 = a6; // 0x40be90\n        unsigned char v13 = *(char *)v12; // 0x40bec0\n        char v14 = *(char *)v11; // 0x40bec0\n        v2 = 5;\n        char v15 = v14; // 0x40bec0\n        bool v16 = false; // 0x40bec0\n        while (v13 == v14) {\n            // 0x40beb3\n            v11 += v10;\n            v12 += v10;\n            v15 = v13;\n            v16 = true;\n            if (v2 == 0) {\n                // break -> \n                break;\n            }\n            v13 = *(char *)v12;\n            v14 = *(char *)v11;\n            v2--;\n            v15 = v14;\n            v16 = false;\n        }\n        unsigned char v17 = v15;\n        v3 = (int64_t)\"alpha\";\n        int64_t v18 = (int64_t)\"lower\"; // 0x40bec9\n        int64_t v19 = a6; // 0x40bec9\n        if ((v13 >= v17 && !v16) != v13 < v17) {\n            unsigned char v20 = *(char *)v19; // 0x40bfd3\n            char v21 = *(char *)v18; // 0x40bfd3\n            int64_t v22 = 5; // 0x40bfd3\n            char v23 = v21; // 0x40bfd3\n            bool v24 = false; // 0x40bfd3\n            while (v20 == v21) {\n                // 0x40bfc6\n                v18 += v10;\n                v19 += v10;\n                v23 = v20;\n                v24 = true;\n                if (v22 == 0) {\n                    // break -> \n                    break;\n                }\n                v20 = *(char *)v19;\n                v21 = *(char *)v18;\n                v22--;\n                v23 = v21;\n                v24 = false;\n            }\n            unsigned char v25 = v23;\n            int64_t v26 = !((v20 < v25 | v24)) == v20 < v25 ? (int64_t)\"alpha\" : a6; // 0x40bfe5\n            v6 = a3;\n            v8 = v22;\n            v4 = v26;\n            v7 = v22;\n            v5 = v26;\n            if (v22 != v1) {\n                goto lab_0x40bee5;\n            } else {\n                goto lab_0x40bff5;\n            }\n        } else {\n            goto lab_0x40bed5;\n        }\n    }\n  lab_0x40bed5:\n    // 0x40bed5\n    v6 = a3;\n    v8 = v2;\n    v4 = v3;\n    v7 = v1;\n    v5 = v3;\n    if (v2 == v1) {\n        goto lab_0x40bff5;\n    } else {\n        goto lab_0x40bee5;\n    }\n  lab_0x40bff5:;\n    int64_t v27 = 2 * v7 | 1; // 0x40bff5\n    int64_t * v28 = (int64_t *)a3; // 0x40c00e\n    int64_t * mem = realloc(v28, 8 * (int32_t)v27); // 0x40c00e\n    if (mem == NULL) {\n        // 0x40bf76\n        return 12;\n    }\n    int64_t v29 = (int64_t)mem; // 0x40c00e\n    *v28 = v29;\n    *a5 = v27;\n    v6 = v29;\n    v8 = v7;\n    v4 = v5;\n    goto lab_0x40bee5;\n  lab_0x40bee5:\n    // 0x40bee5\n    *(int64_t *)a4 = v8 + 1;\n    char * name = (char *)v4; // 0x40bef4\n    *(int64_t *)(8 * v8 + v6) = (int64_t)wctype(name);\n    int64_t v30 = v9 ? -1 : 1;\n    int64_t v31 = (int64_t)\"alnum\"; // 0x40be90\n    int64_t v32 = v4; // 0x40be90\n    int64_t v33 = 6; // 0x40be90\n    unsigned char v34 = *(char *)v32; // 0x40bf0a\n    char v35 = *(char *)v31; // 0x40bf0a\n    char v36 = v35; // 0x40bf0a\n    bool v37 = false; // 0x40bf0a\n    while (v34 == v35) {\n        int64_t v38 = v33 - 1; // 0x40bf0a\n        v31 += v30;\n        v32 += v30;\n        v33 = v38;\n        v36 = v34;\n        v37 = true;\n        if (v38 == 0) {\n            // break -> \n            break;\n        }\n        v34 = *(char *)v32;\n        v35 = *(char *)v31;\n        v36 = v35;\n        v37 = false;\n    }\n    unsigned char v39 = v36;\n    int64_t v40 = (int64_t)\"cntrl\"; // 0x40bf13\n    int64_t v41 = v4; // 0x40bf13\n    int64_t v42 = 6; // 0x40bf13\n    if ((v34 >= v39 && !v37) == v34 < v39) {\n        int64_t v43 = (int64_t)*__ctype_b_loc(); // 0x40bf94\n        if (a1 != 0) {\n            int64_t v44 = 0;\n            unsigned char v45; // 0x40c1be\n            unsigned char v46; // 0x40be90\n            int64_t * v47; // 0x40c1d3\n            if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                // 0x40c1be\n                v45 = *(char *)(v44 + a1);\n                v46 = v45 % 64;\n                v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n            }\n            int64_t v48 = v44 + 1; // 0x40c1e1\n            while (v44 != 255) {\n                // 0x40c1b8\n                v44 = v48;\n                if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                    // 0x40c1be\n                    v45 = *(char *)(v44 + a1);\n                    v46 = v45 % 64;\n                    v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                    *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n                }\n                // 0x40c1d7\n                v48 = v44 + 1;\n            }\n        } else {\n            int64_t v49 = 0;\n            int64_t * v50; // 0x40bfb3\n            if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                // 0x40bfa6\n                v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                *v50 = *v50 | 1 << v49 % 64;\n            }\n            int64_t v51 = v49 + 1; // 0x40bfc2\n            while (v49 != 255) {\n                // 0x40bfa0\n                v49 = v51;\n                if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                    // 0x40bfa6\n                    v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                    *v50 = *v50 | 1 << v49 % 64;\n                }\n                // 0x40bfb7\n                v51 = v49 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v52 = *(char *)v41; // 0x40bf22\n    char v53 = *(char *)v40; // 0x40bf22\n    char v54 = v53; // 0x40bf22\n    bool v55 = false; // 0x40bf22\n    while (v52 == v53) {\n        int64_t v56 = v42 - 1; // 0x40bf22\n        v40 += v30;\n        v41 += v30;\n        v42 = v56;\n        v54 = v52;\n        v55 = true;\n        if (v56 == 0) {\n            // break -> \n            break;\n        }\n        v52 = *(char *)v41;\n        v53 = *(char *)v40;\n        v54 = v53;\n        v55 = false;\n    }\n    unsigned char v57 = v54;\n    int64_t v58 = (int64_t)\"lower\"; // 0x40bf2b\n    int64_t v59 = v4; // 0x40bf2b\n    int64_t v60 = 6; // 0x40bf2b\n    if ((v52 >= v57 && !v55) == v52 < v57) {\n        int64_t v61 = (int64_t)*__ctype_b_loc(); // 0x40bf3d\n        if (a1 != 0) {\n            int64_t v62 = 0;\n            unsigned char v63; // 0x40c1f6\n            unsigned char v64; // 0x40be90\n            int64_t * v65; // 0x40c20b\n            if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                // 0x40c1f6\n                v63 = *(char *)(v62 + a1);\n                v64 = v63 % 64;\n                v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n            }\n            int64_t v66 = v62 + 1; // 0x40c219\n            while (v62 != 255) {\n                // 0x40c1f0\n                v62 = v66;\n                if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                    // 0x40c1f6\n                    v63 = *(char *)(v62 + a1);\n                    v64 = v63 % 64;\n                    v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                    *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n                }\n                // 0x40c20f\n                v66 = v62 + 1;\n            }\n        } else {\n            int64_t v67 = 0;\n            int64_t * v68; // 0x40bf63\n            if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                // 0x40bf56\n                v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                *v68 = *v68 | 1 << v67 % 64;\n            }\n            int64_t v69 = v67 + 1; // 0x40bf72\n            while (v67 != 255) {\n                // 0x40bf50\n                v67 = v69;\n                if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                    // 0x40bf56\n                    v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                    *v68 = *v68 | 1 << v67 % 64;\n                }\n                // 0x40bf67\n                v69 = v67 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v70 = *(char *)v59; // 0x40c041\n    char v71 = *(char *)v58; // 0x40c041\n    char v72 = v71; // 0x40c041\n    bool v73 = false; // 0x40c041\n    while (v70 == v71) {\n        int64_t v74 = v60 - 1; // 0x40c041\n        v58 += v30;\n        v59 += v30;\n        v60 = v74;\n        v72 = v70;\n        v73 = true;\n        if (v74 == 0) {\n            // break -> \n            break;\n        }\n        v70 = *(char *)v59;\n        v71 = *(char *)v58;\n        v72 = v71;\n        v73 = false;\n    }\n    unsigned char v75 = v72;\n    int64_t v76 = (int64_t)\"space\"; // 0x40c04a\n    int64_t v77 = v4; // 0x40c04a\n    int64_t v78 = 6; // 0x40c04a\n    if ((v70 >= v75 && !v73) == v70 < v75) {\n        int64_t v79 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v80 = 0;\n            unsigned char v81; // 0x40c22f\n            unsigned char v82; // 0x40be90\n            int64_t * v83; // 0x40c244\n            if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                // 0x40c22f\n                v81 = *(char *)(v80 + a1);\n                v82 = v81 % 64;\n                v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n            }\n            int64_t v84 = v80 + 1; // 0x40c252\n            while (v80 != 255) {\n                // 0x40c228\n                v80 = v84;\n                if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                    // 0x40c22f\n                    v81 = *(char *)(v80 + a1);\n                    v82 = v81 % 64;\n                    v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                    *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n                }\n                // 0x40c248\n                v84 = v80 + 1;\n            }\n        } else {\n            int64_t v85 = 0;\n            int64_t * v86; // 0x40c0dc\n            if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                // 0x40c0cf\n                v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                *v86 = *v86 | 1 << v85 % 64;\n            }\n            int64_t v87 = v85 + 1; // 0x40c0eb\n            while (v85 != 255) {\n                // 0x40c0c8\n                v85 = v87;\n                if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                    // 0x40c0cf\n                    v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                    *v86 = *v86 | 1 << v85 % 64;\n                }\n                // 0x40c0e0\n                v87 = v85 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v88 = *(char *)v77; // 0x40c059\n    char v89 = *(char *)v76; // 0x40c059\n    char v90 = v89; // 0x40c059\n    bool v91 = false; // 0x40c059\n    while (v88 == v89) {\n        // 0x40c04c\n        v78--;\n        v76 += v30;\n        v77 += v30;\n        v90 = v88;\n        v91 = true;\n        if (v78 == 0) {\n            // break -> \n            break;\n        }\n        v88 = *(char *)v77;\n        v89 = *(char *)v76;\n        v90 = v89;\n        v91 = false;\n    }\n    unsigned char v92 = v90;\n    int64_t v93 = (int64_t)\"alpha\"; // 0x40c062\n    int64_t v94 = v4; // 0x40c062\n    int64_t v95 = 6; // 0x40c062\n    if ((v88 >= v92 && !v91) == v88 < v92) {\n        int64_t v96 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v97 = 0;\n            unsigned char v98; // 0x40c3b7\n            unsigned char v99; // 0x40be90\n            int64_t * v100; // 0x40c3cc\n            if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                // 0x40c3b7\n                v98 = *(char *)(v97 + a1);\n                v99 = v98 % 64;\n                v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n            }\n            int64_t v101 = v97 + 1; // 0x40c3da\n            while (v97 != 255) {\n                // 0x40c3b0\n                v97 = v101;\n                if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                    // 0x40c3b7\n                    v98 = *(char *)(v97 + a1);\n                    v99 = v98 % 64;\n                    v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                    *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n                }\n                // 0x40c3d0\n                v101 = v97 + 1;\n            }\n        } else {\n            int64_t v102 = 0;\n            int64_t * v103; // 0x40c094\n            if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                // 0x40c087\n                v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                *v103 = *v103 | 1 << v102 % 64;\n            }\n            int64_t v104 = v102 + 1; // 0x40c0a3\n            while (v102 != 255) {\n                // 0x40c080\n                v102 = v104;\n                if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                    // 0x40c087\n                    v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                    *v103 = *v103 | 1 << v102 % 64;\n                }\n                // 0x40c098\n                v104 = v102 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v105 = *(char *)v94; // 0x40c0ff\n    char v106 = *(char *)v93; // 0x40c0ff\n    char v107 = v106; // 0x40c0ff\n    bool v108 = false; // 0x40c0ff\n    while (v105 == v106) {\n        int64_t v109 = v95 - 1; // 0x40c0ff\n        v93 += v30;\n        v94 += v30;\n        v95 = v109;\n        v107 = v105;\n        v108 = true;\n        if (v109 == 0) {\n            // break -> \n            break;\n        }\n        v105 = *(char *)v94;\n        v106 = *(char *)v93;\n        v107 = v106;\n        v108 = false;\n    }\n    unsigned char v110 = v107;\n    int64_t v111 = (int64_t)\"digit\"; // 0x40c108\n    int64_t v112 = v4; // 0x40c108\n    int64_t v113 = 6; // 0x40c108\n    if ((v105 >= v110 && !v108) == v105 < v110) {\n        int64_t v114 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v115 = 0;\n            unsigned char v116; // 0x40c384\n            unsigned char v117; // 0x40be90\n            int64_t * v118; // 0x40c399\n            if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                // 0x40c384\n                v116 = *(char *)(v115 + a1);\n                v117 = v116 % 64;\n                v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n            }\n            int64_t v119 = v115 + 1; // 0x40c3a7\n            while (v115 != 255) {\n                // 0x40c37d\n                v115 = v119;\n                if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                    // 0x40c384\n                    v116 = *(char *)(v115 + a1);\n                    v117 = v116 % 64;\n                    v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                    *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n                }\n                // 0x40c39d\n                v119 = v115 + 1;\n            }\n        } else {\n            int64_t v120 = 0;\n            int64_t * v121; // 0x40c19c\n            if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                // 0x40c18f\n                v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                *v121 = *v121 | 1 << v120 % 64;\n            }\n            int64_t v122 = v120 + 1; // 0x40c1ab\n            while (v120 != 255) {\n                // 0x40c188\n                v120 = v122;\n                if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                    // 0x40c18f\n                    v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                    *v121 = *v121 | 1 << v120 % 64;\n                }\n                // 0x40c1a0\n                v122 = v120 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v123 = *(char *)v112; // 0x40c117\n    char v124 = *(char *)v111; // 0x40c117\n    char v125 = v124; // 0x40c117\n    bool v126 = false; // 0x40c117\n    while (v123 == v124) {\n        // 0x40c10a\n        v113--;\n        v111 += v30;\n        v112 += v30;\n        v125 = v123;\n        v126 = true;\n        if (v113 == 0) {\n            // break -> \n            break;\n        }\n        v123 = *(char *)v112;\n        v124 = *(char *)v111;\n        v125 = v124;\n        v126 = false;\n    }\n    unsigned char v127 = v125;\n    int64_t v128 = (int64_t)\"print\"; // 0x40c120\n    int64_t v129 = v4; // 0x40c120\n    int64_t v130 = 6; // 0x40c120\n    if ((v123 >= v127 && !v126) == v123 < v127) {\n        int64_t v131 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v132 = 0;\n            unsigned char v133; // 0x40c3ea\n            unsigned char v134; // 0x40be90\n            int64_t * v135; // 0x40c3ff\n            if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                // 0x40c3ea\n                v133 = *(char *)(v132 + a1);\n                v134 = v133 % 64;\n                v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n            }\n            int64_t v136 = v132 + 1; // 0x40c40d\n            while (v132 != 255) {\n                // 0x40c3e3\n                v132 = v136;\n                if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                    // 0x40c3ea\n                    v133 = *(char *)(v132 + a1);\n                    v134 = v133 % 64;\n                    v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                    *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n                }\n                // 0x40c403\n                v136 = v132 + 1;\n            }\n        } else {\n            int64_t v137 = 0;\n            int64_t * v138; // 0x40c154\n            if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                // 0x40c147\n                v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                *v138 = *v138 | 1 << v137 % 64;\n            }\n            int64_t v139 = v137 + 1; // 0x40c163\n            while (v137 != 255) {\n                // 0x40c140\n                v137 = v139;\n                if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                    // 0x40c147\n                    v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                    *v138 = *v138 | 1 << v137 % 64;\n                }\n                // 0x40c158\n                v139 = v137 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v140 = *(char *)v129; // 0x40c266\n    char v141 = *(char *)v128; // 0x40c266\n    char v142 = v141; // 0x40c266\n    bool v143 = false; // 0x40c266\n    while (v140 == v141) {\n        int64_t v144 = v130 - 1; // 0x40c266\n        v128 += v30;\n        v129 += v30;\n        v130 = v144;\n        v142 = v140;\n        v143 = true;\n        if (v144 == 0) {\n            // break -> \n            break;\n        }\n        v140 = *(char *)v129;\n        v141 = *(char *)v128;\n        v142 = v141;\n        v143 = false;\n    }\n    unsigned char v145 = v142;\n    int64_t v146 = (int64_t)\"upper\"; // 0x40c26f\n    int64_t v147 = v4; // 0x40c26f\n    int64_t v148 = 6; // 0x40c26f\n    if ((v140 >= v145 && !v143) == v140 < v145) {\n        int64_t v149 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v150 = 0;\n            unsigned char v151; // 0x40c5c1\n            unsigned char v152; // 0x40be90\n            int64_t * v153; // 0x40c5d6\n            if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                // 0x40c5c1\n                v151 = *(char *)(v150 + a1);\n                v152 = v151 % 64;\n                v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n            }\n            int64_t v154 = v150 + 1; // 0x40c5e4\n            while (v150 != 255) {\n                // 0x40c5ba\n                v150 = v154;\n                if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                    // 0x40c5c1\n                    v151 = *(char *)(v150 + a1);\n                    v152 = v151 % 64;\n                    v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                    *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n                }\n                // 0x40c5da\n                v154 = v150 + 1;\n            }\n        } else {\n            int64_t v155 = 0;\n            int64_t * v156; // 0x40c2a4\n            if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                // 0x40c297\n                v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                *v156 = *v156 | 1 << v155 % 64;\n            }\n            int64_t v157 = v155 + 1; // 0x40c2b3\n            while (v155 != 255) {\n                // 0x40c290\n                v155 = v157;\n                if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                    // 0x40c297\n                    v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                    *v156 = *v156 | 1 << v155 % 64;\n                }\n                // 0x40c2a8\n                v157 = v155 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v158 = *(char *)v147; // 0x40c2c7\n    char v159 = *(char *)v146; // 0x40c2c7\n    char v160 = v159; // 0x40c2c7\n    bool v161 = false; // 0x40c2c7\n    while (v158 == v159) {\n        int64_t v162 = v148 - 1; // 0x40c2c7\n        v146 += v30;\n        v147 += v30;\n        v148 = v162;\n        v160 = v158;\n        v161 = true;\n        if (v162 == 0) {\n            // break -> \n            break;\n        }\n        v158 = *(char *)v147;\n        v159 = *(char *)v146;\n        v160 = v159;\n        v161 = false;\n    }\n    unsigned char v163 = v160;\n    int64_t v164 = (int64_t)\"blank\"; // 0x40c2d0\n    int64_t v165 = v4; // 0x40c2d0\n    int64_t v166 = 6; // 0x40c2d0\n    if ((v158 >= v163 && !v161) == v158 < v163) {\n        int64_t v167 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v168 = 0;\n            unsigned char v169; // 0x40c62b\n            unsigned char v170; // 0x40be90\n            int64_t * v171; // 0x40c640\n            if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                // 0x40c62b\n                v169 = *(char *)(v168 + a1);\n                v170 = v169 % 64;\n                v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n            }\n            int64_t v172 = v168 + 1; // 0x40c64f\n            while (v168 != 255) {\n                // 0x40c624\n                v168 = v172;\n                if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                    // 0x40c62b\n                    v169 = *(char *)(v168 + a1);\n                    v170 = v169 % 64;\n                    v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                    *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n                }\n                // 0x40c644\n                v172 = v168 + 1;\n            }\n        } else {\n            int64_t v173 = 0;\n            int64_t * v174; // 0x40c2fe\n            if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                // 0x40c2f1\n                v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                *v174 = *v174 | 1 << v173 % 64;\n            }\n            int64_t v175 = v173 + 1; // 0x40c30d\n            while (v173 != 255) {\n                // 0x40c2ea\n                v173 = v175;\n                if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                    // 0x40c2f1\n                    v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                    *v174 = *v174 | 1 << v173 % 64;\n                }\n                // 0x40c302\n                v175 = v173 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v176 = *(char *)v165; // 0x40c32b\n    char v177 = *(char *)v164; // 0x40c32b\n    char v178 = v177; // 0x40c32b\n    bool v179 = false; // 0x40c32b\n    while (v176 == v177) {\n        int64_t v180 = v166 - 1; // 0x40c32b\n        v164 += v30;\n        v165 += v30;\n        v166 = v180;\n        v178 = v176;\n        v179 = true;\n        if (v180 == 0) {\n            // break -> \n            break;\n        }\n        v176 = *(char *)v165;\n        v177 = *(char *)v164;\n        v178 = v177;\n        v179 = false;\n    }\n    unsigned char v181 = v178;\n    int64_t v182 = (int64_t)\"graph\"; // 0x40c334\n    int64_t v183 = v4; // 0x40c334\n    int64_t v184 = 6; // 0x40c334\n    if ((v176 >= v181 && !v179) == v176 < v181) {\n        int64_t v185 = (int64_t)*__ctype_b_loc(); // 0x40c346\n        if (a1 != 0) {\n            int64_t v186 = 0;\n            unsigned char v187; // 0x40c5f8\n            unsigned char v188; // 0x40be90\n            int64_t * v189; // 0x40c60d\n            if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                // 0x40c5f8\n                v187 = *(char *)(v186 + a1);\n                v188 = v187 % 64;\n                v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n            }\n            int64_t v190 = v186 + 1; // 0x40c61b\n            while (v186 != 255) {\n                // 0x40c5f2\n                v186 = v190;\n                if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                    // 0x40c5f8\n                    v187 = *(char *)(v186 + a1);\n                    v188 = v187 % 64;\n                    v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                    *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n                }\n                // 0x40c611\n                v190 = v186 + 1;\n            }\n        } else {\n            int64_t v191 = 0;\n            int64_t * v192; // 0x40c365\n            if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                // 0x40c358\n                v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                *v192 = *v192 | 1 << v191 % 64;\n            }\n            int64_t v193 = v191 + 1; // 0x40c374\n            while (v191 != 255) {\n                // 0x40c352\n                v191 = v193;\n                if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                    // 0x40c358\n                    v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                    *v192 = *v192 | 1 << v191 % 64;\n                }\n                // 0x40c369\n                v193 = v191 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    unsigned char v194 = *(char *)v183; // 0x40c421\n    char v195 = *(char *)v182; // 0x40c421\n    char v196 = v195; // 0x40c421\n    bool v197 = false; // 0x40c421\n    while (v194 == v195) {\n        int64_t v198 = v184 - 1; // 0x40c421\n        v182 += v30;\n        v183 += v30;\n        v184 = v198;\n        v196 = v194;\n        v197 = true;\n        if (v198 == 0) {\n            // break -> \n            break;\n        }\n        v194 = *(char *)v183;\n        v195 = *(char *)v182;\n        v196 = v195;\n        v197 = false;\n    }\n    unsigned char v199 = v196;\n    if ((v194 >= v199 && !v197) == v194 < v199) {\n        int64_t v200 = (int64_t)*__ctype_b_loc(); // 0x40c438\n        if (a1 != 0) {\n            int64_t v201 = 0;\n            unsigned char v202; // 0x40c478\n            unsigned char v203; // 0x40be90\n            int64_t * v204; // 0x40c48d\n            if (*(int16_t *)(2 * v201 + v200) < 0) {\n                // 0x40c478\n                v202 = *(char *)(v201 + a1);\n                v203 = v202 % 64;\n                v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n            }\n            int64_t v205 = v201 + 1; // 0x40c49b\n            while (v201 != 255) {\n                // 0x40c471\n                v201 = v205;\n                if (*(int16_t *)(2 * v201 + v200) < 0) {\n                    // 0x40c478\n                    v202 = *(char *)(v201 + a1);\n                    v203 = v202 % 64;\n                    v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                    *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n                }\n                // 0x40c491\n                v205 = v201 + 1;\n            }\n        } else {\n            int64_t v206 = 0;\n            int64_t * v207; // 0x40c454\n            if (*(int16_t *)(2 * v206 + v200) < 0) {\n                // 0x40c447\n                v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                *v207 = *v207 | 1 << v206 % 64;\n            }\n            int64_t v208 = v206 + 1; // 0x40c463\n            while (v206 != 255) {\n                // 0x40c440\n                v206 = v208;\n                if (*(int16_t *)(2 * v206 + v200) < 0) {\n                    // 0x40c447\n                    v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                    *v207 = *v207 | 1 << v206 % 64;\n                }\n                // 0x40c458\n                v208 = v206 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    // 0x40c4a2\n    if (strcmp(name, \"punct\") == 0) {\n        int64_t v209 = (int64_t)*__ctype_b_loc(); // 0x40c4bf\n        if (a1 != 0) {\n            int64_t v210 = 0;\n            unsigned char v211; // 0x40c4fd\n            unsigned char v212; // 0x40be90\n            int64_t * v213; // 0x40c512\n            if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                // 0x40c4fd\n                v211 = *(char *)(v210 + a1);\n                v212 = v211 % 64;\n                v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n            }\n            int64_t v214 = v210 + 1; // 0x40c520\n            while (v210 != 255) {\n                // 0x40c4f7\n                v210 = v214;\n                if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                    // 0x40c4fd\n                    v211 = *(char *)(v210 + a1);\n                    v212 = v211 % 64;\n                    v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                    *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n                }\n                // 0x40c516\n                v214 = v210 + 1;\n            }\n        } else {\n            int64_t v215 = 0;\n            int64_t * v216; // 0x40c4da\n            if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                // 0x40c4cd\n                v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                *v216 = *v216 | 1 << v215 % 64;\n            }\n            int64_t v217 = v215 + 1; // 0x40c4e9\n            while (v215 != 255) {\n                // 0x40c4c7\n                v215 = v217;\n                if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                    // 0x40c4cd\n                    v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                    *v216 = *v216 | 1 << v215 % 64;\n                }\n                // 0x40c4de\n                v217 = v215 + 1;\n            }\n        }\n        // 0x40bf76\n        return 0;\n    }\n    // 0x40c527\n    if (strcmp(name, \"xdigit\") != 0) {\n        // 0x40bf76\n        return 4;\n    }\n    int64_t v218 = (int64_t)*__ctype_b_loc() + 1;\n    if (a1 == 0) {\n        int64_t v219 = 0;\n        int64_t * v220; // 0x40c560\n        if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n            // 0x40c553\n            v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n            *v220 = *v220 | 1 << v219 % 64;\n        }\n        int64_t v221 = v219 + 1; // 0x40c56f\n        while (v219 != 255) {\n            // 0x40c54c\n            v219 = v221;\n            if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n                // 0x40c553\n                v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n                *v220 = *v220 | 1 << v219 % 64;\n            }\n            // 0x40c564\n            v221 = v219 + 1;\n        }\n        // 0x40bf76\n        return 0;\n    }\n    int64_t v222 = 0;\n    unsigned char v223; // 0x40c584\n    unsigned char v224; // 0x40be90\n    int64_t * v225; // 0x40c599\n    if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n        // 0x40c584\n        v223 = *(char *)(v222 + a1);\n        v224 = v223 % 64;\n        v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n        *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n    }\n    int64_t v226 = v222 + 1; // 0x40c5a7\n    while (v222 != 255) {\n        // 0x40c57d\n        v222 = v226;\n        if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n            // 0x40c584\n            v223 = *(char *)(v222 + a1);\n            v224 = v223 % 64;\n            v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n            *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n        }\n        // 0x40c59d\n        v226 = v222 + 1;\n    }\n    // 0x40bf76\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c660",
            "funcStartAddr": "40c660",
            "funcEndAddr": "40c895",
            "decompiledFuncCode": "int64_t function_40c660(int64_t a1, int64_t a2, char * a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // bp-96, 0x40c68d\n    int64_t * mem = calloc(32, 1); // 0x40c696\n    if (mem == NULL) {\n        // 0x40c830\n        *(int32_t *)a6 = 12;\n        // 0x40c809\n        return 0;\n    }\n    int64_t * mem2 = calloc(80, 1); // 0x40c6b1\n    if (mem2 == NULL) {\n        // 0x40c850\n        free(mem);\n        *(int32_t *)a6 = 12;\n        // 0x40c809\n        return 0;\n    }\n    int64_t v2 = (int64_t)mem; // 0x40c696\n    int64_t v3 = (int64_t)mem2; // 0x40c6b1\n    char * v4 = (char *)(v3 + 32); // 0x40c6c6\n    unsigned char v5 = (char)a5; // 0x40c6ca\n    *v4 = *v4 & -2 | v5 % 2;\n    int64_t v6 = function_40be90(a2, v2, v3 + 24, v3 + 72, &v1, (int64_t)a3, 0); // 0x40c6f3\n    int32_t v7 = v6; // 0x40c6fa\n    if (v7 != 0) {\n        // 0x40c870\n        free(mem);\n        function_407c60(v3);\n        *(int32_t *)a6 = v7;\n        // 0x40c809\n        return 0;\n    }\n    // 0x40c702\n    int64_t v8; // 0x40c660\n    char v9 = *(char *)&v8; // 0x40c702\n    int64_t v10 = v9; // 0x40c702\n    v8 = v10;\n    v8 = v10;\n    int64_t v11 = (int64_t)a4; // 0x40c70e\n    if (v9 != 0) {\n        int64_t v12 = v8;\n        v11++;\n        char v13 = *(char *)v11; // 0x40c73d\n        v8 = v13;\n        int64_t * v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2); // 0x40c742\n        *v14 = *v14 | 1 << v12 % 64;\n        while (v13 != 0) {\n            v12 = v8;\n            v11++;\n            v13 = *(char *)v11;\n            v8 = v13;\n            v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2);\n            *v14 = *v14 | 1 << v12 % 64;\n        }\n    }\n    if (v5 != 0) {\n        int64_t v15 = v2;\n        int64_t * v16 = (int64_t *)v15; // 0x40c756\n        *v16 = -1 - *v16;\n        int64_t v17 = v15 + 8; // 0x40c760\n        while (v2 + 24 != v15) {\n            // 0x40c756\n            v15 = v17;\n            v16 = (int64_t *)v15;\n            *v16 = -1 - *v16;\n            v17 = v15 + 8;\n        }\n    }\n    int32_t * v18 = (int32_t *)(a1 + 180); // 0x40c762\n    if (*v18 >= 2) {\n        int64_t v19 = *(int64_t *)(a1 + 120); // 0x40c76b\n        v8 = v19;\n        *mem = *mem & *(int64_t *)v19;\n        int64_t v20 = 0; // 0x40c779\n        v20 += 8;\n        int64_t * v21 = (int64_t *)(v20 + v2); // 0x40c775\n        *v21 = *v21 & *(int64_t *)(v20 + v19);\n        while (v20 != 24) {\n            // 0x40c771\n            v20 += 8;\n            v21 = (int64_t *)(v20 + v2);\n            *v21 = *v21 & *(int64_t *)(v20 + v8);\n        }\n    }\n    int64_t v22 = a1 + 112; // 0x40c783\n    int64_t v23 = a1 + 128; // 0x40c787\n    v8 = 0;\n    int64_t v24; // bp-88, 0x40c660\n    int64_t v25 = &v24; // 0x40c792\n    v24 = v2;\n    int64_t result = function_409270(v22, v23, 0, 0, v25); // 0x40c7a7\n    if (result != 0) {\n        // 0x40c7b4\n        if (*v18 < 2) {\n            // 0x40c840\n            function_407c60(v3);\n            // 0x40c809\n            return result;\n        }\n        char * v26 = (char *)(a1 + 176); // 0x40c7c1\n        *v26 = *v26 | 2;\n        v24 = v3;\n        int64_t v27 = function_409270(v22, v23, 0, 0, v25); // 0x40c7e1\n        if (v27 != 0) {\n            // 0x40c7eb\n            int64_t v28; // bp-72, 0x40c660\n            int64_t result2 = function_409270(v22, v23, (int32_t)result, (int32_t)v27, (int64_t)&v28); // 0x40c801\n            // 0x40c809\n            return result2;\n        }\n    }\n    // 0x40c820\n    free(mem);\n    function_407c60(v3);\n    // 0x40c830\n    *(int32_t *)a6 = 12;\n    // 0x40c809\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c8a0",
            "funcStartAddr": "40c8a0",
            "funcEndAddr": "40cd78",
            "decompiledFuncCode": "int64_t function_40c8a0(int64_t result, int64_t result2, int64_t a3, int64_t a4) {\n    int64_t v1 = a4;\n    int32_t * v2 = (int32_t *)(result + 180); // 0x40c8b7\n    int32_t v3 = 0; // 0x40c8c2\n    if (*v2 == 1) {\n        // 0x40c8c4\n        v3 = (int32_t)(*(int64_t *)(result + 24) / 0x400000) % 2;\n    }\n    // 0x40c8d3\n    if (result2 < 1) {\n        // 0x40ca93\n        return result;\n    }\n    char * v4 = (char *)(result + 26);\n    int64_t * v5 = (int64_t *)(result + 16);\n    char wstr; // bp-312, 0x40c8a0\n    int64_t v6 = &wstr;\n    char ps; // bp-320, 0x40c8a0\n    int64_t v7 = &ps;\n    int64_t v8 = a3; // 0x40c8f1\n    int64_t v9 = 0; // 0x40c8f1\n    int64_t v10 = result; // 0x40c8f1\n    int64_t v11; // 0x40c8a0\n    int64_t v12; // 0x40c8a0\n    int64_t v13; // 0x40c8a0\n    int64_t v14; // 0x40c8a0\n    int64_t v15; // 0x40c8a0\n    int64_t v16; // 0x40c8a0\n    unsigned char v17; // 0x40c954\n    int64_t v18; // 0x40caa9\n    while (true) {\n      lab_0x40c931_2:\n        // 0x40c931\n        v13 = v10;\n        v11 = v9;\n        int64_t v19 = *(int64_t *)(8 * v11 + v8); // 0x40c939\n        v1 = v13;\n        int64_t v20 = 16 * v19; // 0x40c947\n        v16 = v20 + v13;\n        v17 = *(char *)(v16 + 8);\n        if (v17 != 1) {\n            int64_t v21 = v17; // 0x40c954\n            char * v22 = NULL; // 0x40c8a0\n            int64_t v23 = v13; // 0x40c8a0\n            switch (v17) {\n                case 3: {\n                    int64_t v24 = (int64_t)v22; // 0x40cbf8\n                    int64_t v25 = *(int64_t *)(*(int64_t *)(v23 + v20) + v24); // 0x40cbfd\n                    int64_t v26 = 0; // 0x40cc09\n                    int64_t v27 = 8 * v24;\n                    int64_t v28 = v23;\n                    int64_t v29 = v28; // 0x40cc14\n                    char * v30; // 0x40c8a0\n                    char * v31; // 0x40c8a0\n                    int64_t v32; // 0x40cc24\n                    int32_t v33; // 0x40cc3b\n                    if ((1 << v26 % 64 & v25) != 0) {\n                        // 0x40cc16\n                        v31 = (char *)(v27 + a4);\n                        *v31 = 1;\n                        v29 = v28;\n                        if (v3 != 0) {\n                            // 0x40cc24\n                            v32 = v27 + 128;\n                            v30 = v31;\n                            if ((int32_t)v32 < 384) {\n                                // 0x40cc33\n                                v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                v30 = (char *)((int64_t)v33 + a4);\n                            }\n                            // 0x40cc42\n                            *v30 = 1;\n                            v29 = v32 & 0xffffffff;\n                        }\n                    }\n                    int64_t v34 = v29;\n                    int64_t v35 = v27 + 1; // 0x40cc49\n                    v26 = v26 + 1 & 0xffffffff;\n                    while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                        // 0x40cc10\n                        v27 = v35;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40cc16\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40cc24\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40cc33\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40cc42\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40cc45\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                    }\n                    // 0x40cc53\n                    v14 = v21;\n                    v15 = v16;\n                    v12 = v34;\n                    while (v22 != (char *)24) {\n                        // 0x40cc68\n                        v1 = v34;\n                        v22 = (char *)(v24 + 8);\n                        v24 = (int64_t)v22;\n                        v25 = *(int64_t *)(*(int64_t *)(v34 + v20) + v24);\n                        v26 = 0;\n                        v27 = 8 * v24;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40cc16\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40cc24\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40cc33\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40cc42\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40cc45\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                        while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                            // 0x40cc10\n                            v27 = v35;\n                            v28 = v34;\n                            v29 = v28;\n                            if ((1 << v26 % 64 & v25) != 0) {\n                                // 0x40cc16\n                                v31 = (char *)(v27 + a4);\n                                *v31 = 1;\n                                v29 = v28;\n                                if (v3 != 0) {\n                                    // 0x40cc24\n                                    v32 = v27 + 128;\n                                    v30 = v31;\n                                    if ((int32_t)v32 < 384) {\n                                        // 0x40cc33\n                                        v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                        v30 = (char *)((int64_t)v33 + a4);\n                                    }\n                                    // 0x40cc42\n                                    *v30 = 1;\n                                    v29 = v32 & 0xffffffff;\n                                }\n                            }\n                            // 0x40cc45\n                            v34 = v29;\n                            v35 = v27 + 1;\n                            v26 = v26 + 1 & 0xffffffff;\n                        }\n                        // 0x40cc53\n                        v14 = v21;\n                        v15 = v16;\n                        v12 = v34;\n                    }\n                    goto lab_0x40c91f;\n                }\n                case 6: {\n                    // 0x40caa5\n                    v18 = *(int64_t *)v16;\n                    if (*v2 < 2) {\n                        goto lab_0x40cad6;\n                    } else {\n                        // 0x40cab5\n                        if (*(int64_t *)(v18 + 72) != 0) {\n                            goto lab_0x40cb9c;\n                        } else {\n                            // 0x40cac0\n                            if (*(char *)(v18 + 32) % 2 != 0) {\n                                goto lab_0x40cb9c;\n                            } else {\n                                // 0x40cacb\n                                if (*(int64_t *)(v18 + 64) != 0) {\n                                    goto lab_0x40cb9c;\n                                } else {\n                                    goto lab_0x40cad6;\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    int64_t v36 = v21 & 253; // 0x40c90a\n                    if (v36 == 5) {\n                        // break -> 0x40cc74\n                        break;\n                    }\n                    // 0x40c916\n                    v14 = v36;\n                    v15 = v16;\n                    v12 = v13;\n                    if (v17 == 2) {\n                        int128_t v37 = __asm_movdqa(g16); // 0x40ccf0\n                        __asm_movups(*(int128_t *)&v1, v37);\n                        __asm_movups(*(int128_t *)(a4 + 16), v37);\n                        __asm_movups(*(int128_t *)(a4 + 32), v37);\n                        __asm_movups(*(int128_t *)(a4 + 48), v37);\n                        __asm_movups(*(int128_t *)(a4 + 64), v37);\n                        __asm_movups(*(int128_t *)(a4 + 80), v37);\n                        __asm_movups(*(int128_t *)(a4 + 96), v37);\n                        __asm_movups(*(int128_t *)(a4 + 112), v37);\n                        __asm_movups(*(int128_t *)(a4 + 128), v37);\n                        __asm_movups(*(int128_t *)(a4 + 144), v37);\n                        __asm_movups(*(int128_t *)(a4 + 160), v37);\n                        __asm_movups(*(int128_t *)(a4 + 176), v37);\n                        __asm_movups(*(int128_t *)(a4 + 192), v37);\n                        __asm_movups(*(int128_t *)(a4 + 208), v37);\n                        __asm_movups(*(int128_t *)(a4 + 224), v37);\n                        __asm_movups(*(int128_t *)(a4 + 240), v37);\n                        goto lab_0x40cd5f;\n                    }\n                    goto lab_0x40c91f;\n                }\n            }\n        } else {\n            char * v38 = (char *)v16; // 0x40c95f\n            int64_t v39 = (int64_t)*v38; // 0x40c95f\n            *(char *)(v39 + a4) = 1;\n            if (v3 != 0) {\n                int32_t v40 = *(int32_t *)(4 * v39 + (int64_t)*__ctype_tolower_loc()); // 0x40c97e\n                *(char *)((int64_t)v40 + a4) = 1;\n            }\n            // 0x40c987\n            v14 = v39;\n            v15 = v16;\n            v12 = v13;\n            if ((*v4 & 64) == 0) {\n                goto lab_0x40c91f;\n            } else {\n                // 0x40c992\n                v14 = v39;\n                v15 = v16;\n                v12 = v13;\n                if (*v2 < 2) {\n                    goto lab_0x40c91f;\n                } else {\n                    // 0x40c99f\n                    v1 = v20;\n                    wstr = *v38;\n                    int64_t v41 = v19 + 1; // 0x40c9b2\n                    int64_t v42 = 1; // 0x40c9ba\n                    if (*v5 > v41) {\n                        // 0x40c9c0\n                        v42 = 1;\n                        if ((*(int32_t *)(v16 + 24) & 0x2000ff) == 0x200001) {\n                            int64_t v43 = v41; // 0x40ca0e\n                            int64_t v44; // bp-311, 0x40c8a0\n                            int64_t v45 = &v44; // 0x40c8a0\n                            int64_t v46 = v45 + 1; // 0x40ca0a\n                            v43++;\n                            *(char *)v45 = *(char *)(v16 + 16);\n                            while (*v5 > v43) {\n                                int64_t v47 = 16 * v43 + v13; // 0x40c9f3\n                                v45 = v46;\n                                if ((*(int32_t *)(v47 + 8) & 0x2000ff) != 0x200001) {\n                                    // break -> 0x40ca1f\n                                    break;\n                                }\n                                v46 = v45 + 1;\n                                v43++;\n                                *(char *)v45 = *(char *)v47;\n                            }\n                            // 0x40ca1f\n                            v42 = v46 - v6;\n                        }\n                    }\n                    // 0x40ca2a\n                    ps = 0;\n                    int32_t wc; // bp-324, 0x40c8a0\n                    int64_t v48 = function_4069d0(&wc, v6, v42); // 0x40ca45\n                    v14 = v42;\n                    v15 = v6;\n                    v12 = &wc;\n                    if (v48 != v42) {\n                        goto lab_0x40c91f;\n                    } else {\n                        uint32_t wc2 = towlower(wc); // 0x40ca57\n                        int64_t v49 = wc2; // 0x40ca66\n                        int32_t v50 = wcrtomb(&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40ca68\n                        v14 = v7;\n                        v15 = v49;\n                        v12 = v6;\n                        if (v50 == -1) {\n                            goto lab_0x40c91f;\n                        } else {\n                            int64_t v51 = v11 + 1; // 0x40ca7c\n                            *(char *)((int64_t)wstr + a4) = 1;\n                            v8 = v7;\n                            v9 = v51;\n                            v10 = v6;\n                            if (v51 >= v49) {\n                                // 0x40ca93\n                                return result2;\n                            }\n                            goto lab_0x40c931_2;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (v17 != 2) {\n        // 0x40ca93\n    }\n  lab_0x40c91f:;\n    int64_t v52 = v11 + 1; // 0x40c924\n    v8 = v14;\n    v9 = v52;\n    v10 = v12;\n    if (v52 >= v15) {\n        // 0x40ca93\n        return result2;\n    }\n    goto lab_0x40c931_2;\n  lab_0x40cad6:;\n    int64_t * v53 = (int64_t *)(v18 + 40); // 0x40cad9\n    int64_t v54 = *v53; // 0x40cad9\n    v14 = 6;\n    v15 = v16;\n    v12 = v13;\n    if (v54 >= 0 == (v54 != 0)) {\n        int64_t * v55 = (int64_t *)v18; // 0x40caff\n        int64_t v56 = 0; // 0x40cae8\n        ps = 0;\n        int64_t v57 = 4 * v56; // 0x40cb0d\n        uint32_t wc3 = *(int32_t *)(*v55 + v57); // 0x40cb15\n        int32_t v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40cb19\n        int64_t v59 = v7; // 0x40cb22\n        int32_t v60; // 0x40cb45\n        int64_t v61; // 0x40cb24\n        if (v58 != -1) {\n            // 0x40cb24\n            v61 = wstr;\n            *(char *)(v61 + a4) = 1;\n            v59 = v61;\n            if (v3 != 0) {\n                // 0x40cb38\n                v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                *(char *)((int64_t)v60 + a4) = 1;\n                v59 = v61;\n            }\n        }\n        int64_t v62 = wc3; // 0x40cb15\n        int64_t v63 = v59;\n        int64_t v64 = v63; // 0x40cb57\n        int64_t v65 = v62; // 0x40cb57\n        uint32_t wc4; // 0x40cb6d\n        int64_t v66; // 0x40cb7c\n        int32_t v67; // 0x40cb7e\n        if ((*v4 & 64) != 0) {\n            // 0x40cb59\n            v64 = v63;\n            v65 = v62;\n            if (*v2 >= 2) {\n                // 0x40cb66\n                wc4 = towlower(*(int32_t *)(*v55 + v57));\n                v66 = wc4;\n                v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                v64 = v7;\n                v65 = v66;\n                if (v67 != -1) {\n                    // 0x40cb8d\n                    *(char *)((int64_t)wstr + a4) = 1;\n                    v64 = v7;\n                    v65 = v66;\n                }\n            }\n        }\n        // 0x40cae8\n        v56++;\n        v14 = v64;\n        v15 = v65;\n        v12 = v6;\n        while (v56 < *v53) {\n            // 0x40caf6\n            ps = 0;\n            v57 = 4 * v56;\n            wc3 = *(int32_t *)(*v55 + v57);\n            v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps);\n            v59 = v7;\n            if (v58 != -1) {\n                // 0x40cb24\n                v61 = wstr;\n                *(char *)(v61 + a4) = 1;\n                v59 = v61;\n                if (v3 != 0) {\n                    // 0x40cb38\n                    v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                    *(char *)((int64_t)v60 + a4) = 1;\n                    v59 = v61;\n                }\n            }\n            // 0x40cb4e\n            v62 = wc3;\n            v63 = v59;\n            v64 = v63;\n            v65 = v62;\n            if ((*v4 & 64) != 0) {\n                // 0x40cb59\n                v64 = v63;\n                v65 = v62;\n                if (*v2 >= 2) {\n                    // 0x40cb66\n                    wc4 = towlower(*(int32_t *)(*v55 + v57));\n                    v66 = wc4;\n                    v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                    v64 = v7;\n                    v65 = v66;\n                    if (v67 != -1) {\n                        // 0x40cb8d\n                        *(char *)((int64_t)wstr + a4) = 1;\n                        v64 = v7;\n                        v65 = v66;\n                    }\n                }\n            }\n            // 0x40cae8\n            v56++;\n            v14 = v64;\n            v15 = v65;\n            v12 = v6;\n        }\n    }\n    goto lab_0x40c91f;\n    // 0x40c931\n    goto lab_0x40c931_2;\n  lab_0x40cb9c:\n    // 0x40cb9c\n    ps = 0;\n    wstr = 0;\n    if (function_4069d0(NULL, v7, 1) == -2) {\n        // 0x40cbcd\n        *(char *)((int64_t)ps + a4) = 1;\n    }\n    char v68 = ps + 1; // 0x40cbd7\n    ps = v68;\n    v14 = 1;\n    v15 = v7;\n    v12 = 0;\n    while (v68 != 0) {\n        // 0x40cba8\n        wstr = 0;\n        if (function_4069d0(NULL, v7, 1) == -2) {\n            // 0x40cbcd\n            *(char *)((int64_t)ps + a4) = 1;\n        }\n        // 0x40cbd7\n        v68 = ps + 1;\n        ps = v68;\n        v14 = 1;\n        v15 = v7;\n        v12 = 0;\n    }\n    goto lab_0x40c91f;\n  lab_0x40cd5f:;\n    char * v69 = (char *)(result + 56); // 0x40cd64\n    *v69 = *v69 | 1;\n    // 0x40ca93\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cd80",
            "funcStartAddr": "40cd80",
            "funcEndAddr": "40d004",
            "decompiledFuncCode": "int64_t function_40cd80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = 16 * a3 + a1; // 0x40cd88\n    char v2 = *(char *)(v1 + 8); // 0x40cd92\n    if (v2 == 7) {\n        int64_t v3 = *(int64_t *)(a4 + 8); // 0x40cea8\n        int64_t v4 = v3 + a5; // 0x40ceac\n        unsigned char v5 = *(char *)v4; // 0x40ceac\n        if (v5 < 194) {\n            // 0x40cdd0\n            return 0;\n        }\n        uint64_t v6 = *(int64_t *)(a4 + 88); // 0x40ceba\n        uint64_t v7 = a5 + 1;\n        if (v7 >= v6) {\n            // 0x40cdd0\n            return 0;\n        }\n        int64_t v8 = v3 + v7;\n        unsigned char v9 = *(char *)v8; // 0x40cecb\n        if (v5 < 224) {\n            // 0x40cfa3\n            if (v9 == -65 || (v9 ^ -128) < 63) {\n                // 0x40cdd0\n                return 2;\n            }\n            // 0x40cdd0\n            return 0;\n        }\n        int64_t v10; // 0x40cd80\n        if (v5 < 240) {\n            // 0x40cee3\n            v10 = 3;\n            if (v5 == -32 == v9 < 160) {\n                // 0x40cdd0\n                return 0;\n            }\n        } else {\n            if (v5 < 248) {\n                // 0x40cf85\n                v10 = 4;\n                if (v5 == -16 == v9 < 144) {\n                    // 0x40cdd0\n                    return 0;\n                }\n            } else {\n                if (v5 < 252) {\n                    // 0x40cfbf\n                    v10 = 5;\n                    if (v5 == -8 == v9 < 136) {\n                        // 0x40cdd0\n                        return 0;\n                    }\n                } else {\n                    if (v5 >= 254) {\n                        // 0x40cdd0\n                        return 0;\n                    }\n                    // 0x40cfe6\n                    v10 = 6;\n                    if (v5 == -4 == v9 < 132) {\n                        // 0x40cdd0\n                        return 0;\n                    }\n                }\n            }\n        }\n        // 0x40cefc\n        if (v6 < v10 + a5) {\n            // 0x40cdd0\n            return 0;\n        }\n        // 0x40cf09\n        if (v9 != -65 && (v9 ^ -128) >= 63) {\n            // 0x40cdd0\n            return 0;\n        }\n        int64_t v11 = v8; // 0x40cf2e\n        v11++;\n        while (v10 + v4 != v11) {\n            char v12 = *(char *)v11;\n            if (v12 != -65 && (v12 ^ -128) >= 63) {\n                // 0x40cdd0\n                return 0;\n            }\n            v11++;\n        }\n        // 0x40cdd0\n        return v10 & 0xffffffff;\n    }\n    // 0x40cda1\n    if (*(int32_t *)(a4 + 144) == 1) {\n        // 0x40cdd0\n        return 0;\n    }\n    int64_t v13 = function_4085b0(a4, a5); // 0x40cdb6\n    int64_t v14 = v13 & 0xffffffff; // 0x40cdbb\n    if (v2 == 5) {\n        if ((int32_t)v13 < 2) {\n            // 0x40cdd0\n            return 0;\n        }\n        if ((a5 & 64) == 0) {\n            // 0x40cdec\n            if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 10) {\n                // 0x40cdd0\n                return 0;\n            }\n        }\n        // 0x40cdf7\n        if ((char)a5 > -1) {\n            // 0x40cdd0\n            return v14 & 0xffffffff;\n        }\n        // 0x40cdfb\n        if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 0) {\n            // 0x40cdd0\n            return 0;\n        }\n        // 0x40cdd0\n        return v14 & 0xffffffff;\n    }\n    if (v2 == 6 != (int32_t)v13 > 1) {\n        // 0x40cdd0\n        return 0;\n    }\n    int64_t v15 = *(int64_t *)v1; // 0x40ce10\n    int64_t * v16 = (int64_t *)(v15 + 64); // 0x40ce13\n    int64_t v17 = *v16; // 0x40ce13\n    int64_t v18 = *(int64_t *)(v15 + 40); // 0x40ce17\n    if (v17 != 0) {\n        goto lab_0x40ce2d;\n    } else {\n        // 0x40ce20\n        if ((*(int64_t *)(v15 + 72) || v18) == 0) {\n            goto lab_0x40cf6d;\n        } else {\n            goto lab_0x40ce2d;\n        }\n    }\n  lab_0x40ce92_2:\n    // 0x40ce92\n    if (*(char *)(v15 + 32) % 2 == 0) {\n        // 0x40cdd0\n        return v14 & 0xffffffff;\n    }\n    // 0x40cdd0\n    return 0;\n  lab_0x40ce2d:;\n    uint32_t wc = *(int32_t *)(*(int64_t *)(a4 + 16) + 4 * a5); // 0x40ce31\n    if (v18 < 1) {\n        goto lab_0x40ce5f;\n    } else {\n        int64_t v19 = *(int64_t *)v15; // 0x40ce3a\n        if (*(int32_t *)v19 == wc) {\n            goto lab_0x40ce92_2;\n        } else {\n            int64_t v20 = 1; // 0x40ce56\n            while (v18 != v20) {\n                // 0x40ce50\n                if (*(int32_t *)(4 * v20 + v19) == wc) {\n                    goto lab_0x40ce92_2;\n                }\n                v20++;\n            }\n            goto lab_0x40ce5f;\n        }\n    }\n  lab_0x40ce5f:;\n    int64_t * v21 = (int64_t *)(v15 + 72); // 0x40ce5f\n    int64_t v22 = v17; // 0x40ce66\n    if (*v21 < 1) {\n        goto lab_0x40cf3c;\n    } else {\n        int64_t v23 = 0; // 0x40ce70\n        int64_t v24 = *(int64_t *)(v15 + 24); // 0x40ce7e\n        while (iswctype(wc, (int32_t)*(int64_t *)(v24 + 8 * v23)) == 0) {\n            // 0x40ce70\n            v23++;\n            if (v23 >= *v21) {\n                // 0x40cf38\n                v22 = *v16;\n                goto lab_0x40cf3c;\n            }\n            v24 = *(int64_t *)(v15 + 24);\n        }\n        goto lab_0x40ce92_2;\n    }\n  lab_0x40cf6d:\n    // 0x40cf6d\n    if (*(char *)(v15 + 32) % 2 != 0) {\n        // 0x40cdd0\n        return v14 & 0xffffffff;\n    }\n    // 0x40cdd0\n    return 0;\n  lab_0x40cf3c:\n    // 0x40cf3c\n    if (v22 >= 1) {\n        int64_t v25 = 0; // 0x40cf47\n        int64_t v26 = 4 * v25; // 0x40cf50\n        if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n            // 0x40cf56\n            if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                goto lab_0x40ce92_2;\n            }\n        }\n        // 0x40cf64\n        v25++;\n        while (v25 != v22) {\n            // 0x40cf50\n            v26 = 4 * v25;\n            if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n                // 0x40cf56\n                if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                    goto lab_0x40ce92_2;\n                }\n            }\n            // 0x40cf64\n            v25++;\n        }\n    }\n    goto lab_0x40cf6d;\n}\n"
        },
        {
            "funcName": "function_40d010",
            "funcStartAddr": "40d010",
            "funcEndAddr": "40d72f",
            "decompiledFuncCode": "int64_t function_40d010(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    // 0x40d010\n    int128_t v1; // 0x40d010\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 152); // 0x40d031\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x40d038\n    int64_t v5 = *v4; // 0x40d038\n    int64_t v6 = *(int64_t *)(*(int64_t *)v3 + 16 * a3); // 0x40d049\n    int32_t * v7 = (int32_t *)(a1 + 224); // 0x40d05b\n    int32_t result = 0; // bp-128, 0x40d062\n    int64_t v8 = (int64_t)*v7 + a6; // 0x40d06a\n    int64_t * v9; // 0x40d010\n    int64_t v10; // 0x40d010\n    if (v8 < v5) {\n        // 0x40d010\n        v9 = (int64_t *)(a2 + 16);\n        v10 = a2;\n    } else {\n        int64_t v11 = v8 + 1; // 0x40d660\n        if (0x7fffffffffffffff - v5 < v11) {\n            // 0x40d4d6\n            return 12;\n        }\n        uint64_t v12 = v11 + v5; // 0x40d680\n        if (v12 >= 0x2000000000000000) {\n            // 0x40d4d6\n            return 12;\n        }\n        int64_t * v13 = (int64_t *)(a2 + 16);\n        int64_t * mem = realloc((int64_t *)*v13, 8 * (int32_t)v12); // 0x40d69a\n        if (mem == NULL) {\n            // 0x40d4d6\n            return 12;\n        }\n        int64_t v14 = (int64_t)mem; // 0x40d69a\n        *v13 = v14;\n        *v4 = v12;\n        memset((int64_t *)(8 * v5 + v14), 0, 8 * (int32_t)v11);\n        v9 = v13;\n        v10 = 0;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 184); // 0x40d076\n    int64_t v16 = *v15; // 0x40d076\n    int32_t * v17 = (int32_t *)(a1 + 160); // 0x40d083\n    int32_t v18 = *v17; // 0x40d083\n    int64_t v19 = *v9; // 0x40d08e\n    int64_t * v20 = (int64_t *)(a1 + 72); // 0x40d097\n    int64_t v21 = *v20; // 0x40d097\n    *v15 = v19;\n    int128_t v22; // bp-120, 0x40d010\n    int32_t v23; // 0x40d010\n    int64_t v24; // 0x40d0cf\n    if (v10 == 0) {\n        // 0x40d5d0\n        *v20 = a4;\n        v23 = function_40a330(a1, a4 - 1, v18);\n        goto lab_0x40d5e4;\n    } else {\n        // 0x40d0b2\n        *v20 = v10;\n        v23 = function_40a330(a1, v10 - 1, v18);\n        if (v10 == a4) {\n            goto lab_0x40d5e4;\n        } else {\n            // 0x40d0cf\n            v24 = *(int64_t *)(v19 + 8 * v10);\n            if (v24 == 0) {\n                goto lab_0x40d0e3;\n            } else {\n                // 0x40d0d8\n                if ((*(char *)(v24 + 104) & 64) != 0) {\n                    int64_t v25 = function_4096a0((int64_t)&v22, v24 + 8); // 0x40d4ff\n                } else {\n                    goto lab_0x40d0e3;\n                }\n            }\n        }\n    }\n  lab_0x40d4b0_2:\n    // 0x40d4b0\n    free(NULL);\n    result = 12;\n    int64_t v26; // 0x40d010\n    int64_t v27 = v26; // 0x40d4bd\n    goto lab_0x40d4c5_2;\n  lab_0x40d320_2:\n    // 0x40d320\n    free(NULL);\n    int32_t v52; // bp-124, 0x40d010\n    int32_t v53 = v52; // 0x40d332\n    result = v53;\n    int128_t v54; // 0x40d182\n    int128_t v45 = v54; // 0x40d33c\n    v27 = v26;\n    if (v53 != 0) {\n        goto lab_0x40d4c5_2;\n    } else {\n        goto lab_0x40d3ac;\n    }\n  lab_0x40d41d_2:\n    // 0x40d41d\n    free((int64_t *)v26);\n    int64_t v55 = *(int64_t *)(*v15 + 8 * a6); // 0x40d437\n    int64_t result2; // 0x40d010\n    int64_t v33; // 0x40d010\n    if (v55 == 0) {\n        // 0x40d6f8\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = 1;\n    } else {\n        // 0x40d444\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = function_408600(*(int64_t *)(v55 + 16), v55 + 24, a5) == 0;\n    }\n    // 0x40d4d6\n    return result2;\n  lab_0x40d1d0:;\n    // 0x40d1d0\n    int64_t v56; // 0x40d010\n    int64_t v57 = v56;\n    int64_t v58; // 0x40d010\n    if ((char)function_40a420(a1, v57, v58) == 0) {\n        goto lab_0x40d20f;\n    } else {\n        goto lab_0x40d1ed;\n    }\n  lab_0x40d20f:;\n    // 0x40d20f\n    int64_t v59; // 0x40d010\n    int64_t v60 = v59 + 1; // 0x40d20f\n    int64_t * v61; // 0x40d186\n    uint64_t v62 = *v61; // 0x40d213\n    int64_t v63 = v60; // 0x40d217\n    if (v60 >= v62) {\n        // break -> 0x40d58d\n        goto lab_0x40d58d;\n    }\n    goto lab_0x40d21d;\n  lab_0x40d1ed:;\n    // 0x40d1ed\n    int64_t * v77; // 0x40d010\n    int64_t v92 = *v77; // 0x40d1ed\n    int64_t v68; // 0x40d225\n    int64_t v93 = *(int64_t *)(v92 + 8 * v68); // 0x40d1fe\n    int64_t v94; // 0x40d010\n    if ((char)function_406ff0(v94, v93) == 0) {\n        goto lab_0x40d4b0_2;\n    }\n    goto lab_0x40d20f;\n  lab_0x40d182:;\n    // 0x40d182\n    int128_t v40; // 0x40d010\n    v54 = __asm_pxor(v40, v40);\n    v52 = 0;\n    int128_t v83 = __asm_movaps(v54); // bp-88, 0x40d19b\n    int64_t v39; // 0x40d010\n    if (*(int64_t *)(v39 + 40) >= 1) {\n        // 0x40d1b5\n        int64_t v88; // 0x40d18b\n        int64_t v73 = v88 + 216; // 0x40d1b7\n        int64_t * v65 = (int64_t *)(v39 + 48); // 0x40d21d\n        int64_t * v67 = (int64_t *)v88; // 0x40d221\n        int32_t v95; // 0x40d142\n        v58 = v95;\n        v77 = (int64_t *)(v88 + 24);\n        v63 = 0;\n        while (true) {\n          lab_0x40d21d:\n            // 0x40d21d\n            v59 = v63;\n            int64_t v64 = *v65; // 0x40d21d\n            int64_t v66 = *v67; // 0x40d221\n            v68 = *(int64_t *)(v64 + 8 * v59);\n            int64_t v69 = 16 * v68; // 0x40d22c\n            int64_t v70 = v69 + v66; // 0x40d230\n            char v71 = *(char *)(v70 + 10); // 0x40d234\n            v56 = v70;\n            if ((v71 & 16) == 0) {\n                goto lab_0x40d1d0;\n            } else {\n                int64_t v72 = function_40cd80(v66, v73, v68, a1, v58); // 0x40d249\n                int32_t v74 = v72; // 0x40d251\n                if (v74 < 2) {\n                    if (v74 != 0) {\n                        goto lab_0x40d1ed;\n                    } else {\n                        int64_t v75 = *v67; // 0x40d488\n                        v56 = v75 + v69;\n                        goto lab_0x40d1d0;\n                    }\n                } else {\n                    int64_t v76 = *v77; // 0x40d265\n                    int64_t v78 = *v15; // 0x40d272\n                    int64_t v79 = *(int64_t *)(v76 + 8 * v68); // 0x40d27a\n                    int64_t v80 = 8 * ((0x100000000 * v72 >> 32) + v58); // 0x40d27e\n                    int64_t v81 = *(int64_t *)(v78 + v80); // 0x40d286\n                    if (v81 != 0) {\n                        int64_t v82 = function_408b40((int64_t *)&v83, (int128_t *)(v81 + 8)); // 0x40d2ac\n                        int32_t v84 = v82; // 0x40d2b6\n                        v52 = v84;\n                        if (v84 != 0) {\n                            goto lab_0x40d320_2;\n                        }\n                    }\n                    // 0x40d2be\n                    int64_t v85; // 0x40d010\n                    if ((char)function_406ff0(v85, v79) == 0) {\n                        goto lab_0x40d4b0_2;\n                    }\n                    int64_t v86 = *v15; // 0x40d2e6\n                    int64_t v87 = function_409bb0(&v52, v88, (int64_t *)&v83, v58, v58, a6); // 0x40d2ee\n                    *(int64_t *)(v86 + v80) = v87;\n                    int64_t v89 = *v15; // 0x40d2f7\n                    int64_t v90 = *(int64_t *)(v89 + v80); // 0x40d2ff\n                    int32_t v91 = v52; // 0x40d30a\n                    if (v90 == 0 && v91 != 0) {\n                        goto lab_0x40d320_2;\n                    }\n                    goto lab_0x40d1ed;\n                }\n            }\n        }\n    }\n  lab_0x40d58d:\n    // 0x40d58d\n    free(NULL);\n    result = 0;\n    v45 = v54;\n    goto lab_0x40d3ac;\n  lab_0x40d3ac:;\n    // 0x40d3ac\n    int64_t v42; // 0x40d010\n    int64_t v96 = function_40a330(a1, (int64_t)((int32_t)v42 - 1), *v17); // 0x40d3bb\n    int64_t v97 = function_4098b0((int128_t *)&result, v3, (int64_t *)&v22, (int32_t)v96); // 0x40d3d4\n    int64_t v98; // 0x40d010\n    int64_t v41; // 0x40d010\n    int64_t v99; // 0x40d010\n    int64_t v43; // 0x40d132\n    if (v97 == 0) {\n        // 0x40d5a0\n        v27 = v26;\n        if (result != 0) {\n            // break -> 0x40d4c5\n            goto lab_0x40d4c5_2;\n        }\n        int64_t v100 = *v15; // 0x40d5ac\n        *(int64_t *)(v100 + v43) = 0;\n        v99 = v41 + 1;\n        v98 = v100;\n    } else {\n        int64_t v101 = *v15; // 0x40d3e5\n        *(int64_t *)(v101 + v43) = v97;\n        v99 = 0;\n        v98 = v101;\n    }\n    // 0x40d3ff\n    v33 = v42;\n    if (v42 >= a6) {\n        goto lab_0x40d41d_2;\n    }\n    int64_t v34 = v99; // 0x40d417\n    int128_t v35 = v45; // 0x40d417\n    int64_t v36 = v98; // 0x40d417\n    int64_t v37 = v42; // 0x40d417\n    int64_t v38 = v97; // 0x40d417\n    v33 = v42;\n    if (v99 > (int64_t)*v7) {\n        goto lab_0x40d41d_2;\n    }\n    goto lab_0x40d12e;\n  lab_0x40d5e4:\n    // 0x40d5e4\n    v22 = 1;\n    int64_t * mem2 = malloc(8); // 0x40d601\n    if (mem2 == NULL) {\n        // 0x40d4d6\n        return 12;\n    }\n    int64_t v102 = (int64_t)mem2; // 0x40d601\n    *mem2 = a3;\n    int32_t v103 = 0x100000000 * a7 >> 32;\n    result = 0;\n    int32_t v104 = function_408f70(v3, (int64_t *)&v22, v6, v103); // 0x40d646\n    result = v104;\n    v27 = v102;\n    if (v104 == 0) {\n        goto lab_0x40d522;\n    } else {\n        goto lab_0x40d4c5_2;\n    }\n  lab_0x40d522:;\n    int32_t v105 = function_409e50(a1, &v22, a4, v6, v103); // 0x40d53d\n    result = v105;\n    v27 = v102;\n    int64_t v51 = a4; // 0x40d543\n    int64_t v50 = v102; // 0x40d543\n    int32_t v49 = v23; // 0x40d543\n    if (v105 != 0) {\n        goto lab_0x40d4c5_2;\n    } else {\n        goto lab_0x40d545;\n    }\n  lab_0x40d4c5_2:\n    // 0x40d4c5\n    free((int64_t *)v27);\n    // 0x40d4d6\n    return result;\n  lab_0x40d0e3:;\n    int128_t v28 = __asm_pxor(v2, v2); // 0x40d0ef\n    v22 = __asm_movaps(v28);\n    int64_t v29 = 0; // 0x40d0f3\n    int128_t v30 = v28; // 0x40d0f3\n    int64_t v31 = v10; // 0x40d0f3\n    int64_t v32 = v24; // 0x40d0f3\n    goto lab_0x40d0fb;\n  lab_0x40d545:;\n    int64_t v48 = function_4098b0((int128_t *)&result, v3, (int64_t *)&v22, v49); // 0x40d555\n    v27 = v50;\n    if (v48 != 0 || result == 0) {\n        // 0x40d566\n        *(int64_t *)(*v15 + 8 * v51) = v48;\n        v29 = v50;\n        v31 = v51;\n        v32 = v48;\n        goto lab_0x40d0fb;\n    } else {\n        goto lab_0x40d4c5_2;\n    }\n  lab_0x40d0fb:\n    // 0x40d0fb\n    v26 = v29;\n    v33 = v31;\n    if (v31 < a6) {\n        // 0x40d106\n        v33 = v31;\n        if (*v7 < 0) {\n            goto lab_0x40d41d_2;\n        } else {\n            // 0x40d116\n            v34 = 0;\n            v35 = v30;\n            v36 = *v15;\n            v37 = v31;\n            v38 = v32;\n            while (true) {\n              lab_0x40d12e:\n                // 0x40d12e\n                v39 = v38;\n                v40 = v35;\n                v41 = v34;\n                v42 = v37 + 1;\n                v43 = 8 * v42;\n                int64_t v44 = *(int64_t *)(v43 + v36); // 0x40d132\n                if (v44 == 0) {\n                    // 0x40d498\n                    v45 = v40;\n                    if (v39 != 0) {\n                        goto lab_0x40d182;\n                    } else {\n                        goto lab_0x40d3ac;\n                    }\n                } else {\n                    int64_t v46 = function_408b40((int64_t *)&v22, (int128_t *)(v44 + 8)); // 0x40d168\n                    int32_t v47 = v46; // 0x40d16d\n                    result = v47;\n                    v27 = v26;\n                    if (v47 != 0) {\n                        // break -> 0x40d4c5\n                        break;\n                    }\n                    // 0x40d179\n                    v45 = v40;\n                    if (v39 == 0) {\n                        goto lab_0x40d3ac;\n                    } else {\n                        goto lab_0x40d182;\n                    }\n                }\n            }\n            goto lab_0x40d4c5_2;\n        }\n    } else {\n        goto lab_0x40d41d_2;\n    }\n}\n"
        },
        {
            "funcName": "function_40d730",
            "funcStartAddr": "40d730",
            "funcEndAddr": "40dff3",
            "decompiledFuncCode": "int64_t function_40d730(int64_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40d730\n    int128_t v1; // 0x40d730\n    int128_t v2 = v1;\n    int64_t v3 = 0; // bp-88, 0x40d754\n    int64_t v4 = 0; // 0x40d776\n    if ((char)a5 != 0) {\n        int64_t * mem = malloc(96); // 0x40d785\n        v4 = &v3;\n        if (mem == NULL) {\n            // 0x40da99\n            return 12;\n        }\n    }\n    int128_t v5 = __asm_pxor(v2, v2); // 0x40d7a5\n    int64_t v6 = 0; // bp-104, 0x40d7a9\n    int128_t v7 = __asm_movaps(v5); // bp-120, 0x40d7b1\n    uint64_t v8 = 16 * a3; // 0x40d7c3\n    int32_t size = v8; // 0x40d7c7\n    int64_t result; // 0x40d730\n    int64_t v9; // 0x40d730\n    char v10; // 0x40d730\n    if (v8 < 4031) {\n        // 0x40d7da\n        v10 = 0;\n        int64_t v11; // bp-216, 0x40d730\n        v9 = (int64_t)&v11 + -1 - v8 & -16;\n    } else {\n        int64_t * mem2 = malloc(size); // 0x40df17\n        v10 = 1;\n        v9 = (int64_t)mem2;\n        if (mem2 == NULL) {\n            // 0x40df33\n            result = 12;\n            if (v4 != 0) {\n                // 0x40df43\n                function_40bd60(v4);\n                result = 12;\n            }\n          lab_0x40da99:\n            // 0x40da99\n            return result;\n        }\n    }\n    int64_t * v12 = (int64_t *)v9; // 0x40d809\n    int64_t * v13 = (int64_t *)a4; // 0x40d809\n    memcpy(v12, v13, size);\n    int64_t v14 = a4; // bp-128, 0x40d81a\n    int64_t * v15 = (int64_t *)(a4 + 8); // 0x40d909\n    int64_t v16 = *v15; // 0x40d909\n    if (v16 < a4) {\n      lab_0x40da70_2:\n        // 0x40da70\n        free((int64_t *)v6);\n        if (v10 != 0) {\n            // 0x40df4d\n            free(v12);\n            if (v4 == 0) {\n                // 0x40da99\n                return 0;\n            }\n        } else {\n            // 0x40da86\n            if (v4 == 0) {\n                // 0x40da99\n                return 0;\n            }\n        }\n        // 0x40da92\n        function_40bd60(v4);\n        // 0x40da99\n        return 0;\n    }\n    int64_t v17 = (int64_t)a2;\n    int64_t v18 = v4 + 16;\n    int64_t v19 = &v7;\n    int64_t * v20 = (int64_t *)(v17 + 184);\n    int64_t * v21 = (int64_t *)v4;\n    int64_t * v22 = (int64_t *)(v4 + 8);\n    int64_t * v23 = (int64_t *)v18;\n    int64_t v24 = v16; // 0x40d909\n    int64_t v25 = *(int64_t *)(a1 + 144); // 0x40d730\n    int64_t v26 = a4; // 0x40d905\n    int64_t v27; // 0x40d730\n    int64_t v28; // 0x40d730\n    int64_t v29; // 0x40d730\n    int64_t v30; // 0x40d730\n    int64_t v31; // 0x40d730\n    int64_t v32; // 0x40d730\n    int64_t v33; // 0x40d730\n    int64_t v34; // 0x40d730\n    int64_t v35; // 0x40d730\n    int64_t v36; // 0x40d923\n    int64_t v37; // 0x40dac8\n    while (true) {\n        // 0x40d916\n        int64_t v38; // 0x40d730\n        v34 = v38;\n        v28 = v24;\n        v31 = v26;\n        v29 = v25;\n        while (true) {\n          lab_0x40d916:\n            // 0x40d916\n            v30 = v29;\n            v32 = v31;\n            int64_t v39 = v28;\n            v35 = v34;\n            v36 = 16 * v30;\n            int64_t v40 = v36 + a1; // 0x40d92a\n            char v41 = *(char *)(v40 + 8); // 0x40d92d\n            if (v41 != 8) {\n                // 0x40d830\n                v27 = v39;\n                if (v41 == 9) {\n                    int64_t v42 = *(int64_t *)v40 + 1; // 0x40dab3\n                    v27 = v39;\n                    if (v42 < a3) {\n                        int64_t v43 = 16 * v42; // 0x40dac4\n                        v37 = v43 + a4;\n                        if (*(int64_t *)v37 < v32) {\n                            // 0x40de40\n                            *(int64_t *)(v37 + 8) = v32;\n                            memcpy(v12, v13, size);\n                            v27 = *v15;\n                            goto lab_0x40d839;\n                        } else {\n                            // 0x40dad6\n                            if ((*(char *)(v40 + 10) & 8) == 0) {\n                                goto lab_0x40daee;\n                            } else {\n                                // 0x40dadc\n                                if (*(int64_t *)(v43 + v9) != -1) {\n                                    // 0x40de80\n                                    memcpy(v13, v12, size);\n                                    int64_t v44 = *v15; // 0x40de9d\n                                    v27 = v44;\n                                    goto lab_0x40d839;\n                                } else {\n                                    goto lab_0x40daee;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40d839;\n                    }\n                } else {\n                    goto lab_0x40d839;\n                }\n            } else {\n                int64_t v45 = *(int64_t *)v40 + 1; // 0x40d93d\n                v27 = v39;\n                if (v45 < a3) {\n                    int64_t v46 = 16 * v45 + a4; // 0x40d952\n                    *(int64_t *)(v46 + 8) = -1;\n                    *(int64_t *)v46 = v32;\n                    v27 = *v15;\n                }\n                goto lab_0x40d839;\n            }\n        }\n      lab_0x40d905_2:\n        // 0x40d905\n        v26 = v14;\n        v24 = *v15;\n        v38 = v33;\n        if (v24 < v26) {\n            goto lab_0x40da70_2;\n        }\n    }\n  lab_0x40de00_3:\n    // 0x40de00\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40df70\n        free(v12);\n        goto lab_0x40de16;\n    } else {\n        goto lab_0x40de16;\n    }\n  lab_0x40dd0a_3:\n    // 0x40dd0a\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40dfe2\n        free(v12);\n        // 0x40dd20\n        function_40bd60(v4);\n        result = 0;\n        return result;\n    } else {\n        // 0x40dd20\n        function_40bd60(v4);\n        result = 0;\n        return result;\n    }\n  lab_0x40d839:;\n    int64_t v47 = v30; // 0x40d83c\n    int64_t v48 = v36; // 0x40d83c\n    if (v32 == v27) {\n        // 0x40d83e\n        v47 = v30;\n        v48 = v36;\n        if (*(int64_t *)(v17 + 176) == v30) {\n            if (v4 == 0) {\n                // 0x40dfb9\n                free((int64_t *)v6);\n                result = 0;\n                if (v10 == 0) {\n                    return result;\n                } else {\n                    // 0x40dfcf\n                    free(v12);\n                    result = (int32_t)&g88 ^ (int32_t)&g88;\n                    return result;\n                }\n            }\n            int64_t v49 = a4; // 0x40dce0\n            int64_t v50 = 0; // 0x40dce0\n            if (a3 == 0) {\n                goto lab_0x40dd0a_3;\n            }\n            int64_t v51; // 0x40d730\n            while (true) {\n                // 0x40dcf0\n                v51 = v50;\n                int64_t v52 = v49;\n                if (*(int64_t *)v52 >= 0) {\n                    // 0x40dcf6\n                    if (*(int64_t *)(v52 + 8) == -1) {\n                        // break -> 0x40dd38\n                        break;\n                    }\n                }\n                // 0x40dcfd\n                v50 = v51 + 1;\n                v49 = v52 + 16;\n                if (v50 == a3) {\n                    goto lab_0x40dd0a_3;\n                }\n            }\n            if (v51 == a3) {\n                goto lab_0x40dd0a_3;\n            }\n            int64_t v53 = function_40bdb0(v4, v18, &v14, a3, a4, &v7); // 0x40dd5e\n            v47 = v53;\n            v48 = 16 * v53;\n        }\n    }\n    int64_t v54 = v48;\n    int64_t v55 = v47;\n    int64_t v56 = *(int64_t *)(v17 + 152); // 0x40d84c\n    int64_t * v57 = (int64_t *)v56; // 0x40d854\n    int64_t v58 = *v57; // 0x40d854\n    int64_t v59 = v58 + v54; // 0x40d857\n    char v60 = *(char *)(v59 + 8); // 0x40d85b\n    int64_t v61; // 0x40d730\n    int64_t v62; // 0x40d730\n    int64_t v63; // 0x40d730\n    int64_t v64; // 0x40d730\n    int64_t v65; // 0x40d730\n    int64_t v66; // 0x40d730\n    int64_t v67; // 0x40d730\n    int64_t v68; // 0x40d730\n    int64_t v69; // 0x40d730\n    int64_t v70; // 0x40d730\n    int64_t v71; // 0x40d730\n    int64_t v72; // 0x40d730\n    int64_t v73; // 0x40dbfe\n    int64_t v74; // 0x40d9e0\n    if ((v60 & 8) != 0) {\n        int64_t v75 = *(int64_t *)(8 * v14 + *v20); // 0x40d983\n        if ((char)function_406ff0(v19, v55) == 0) {\n            // break (via goto) -> 0x40de00\n            goto lab_0x40de00_3;\n        }\n        int64_t v76 = *(int64_t *)(v56 + 40) + 24 * v55; // 0x40d996\n        int64_t v77 = *(int64_t *)(v76 + 8); // 0x40d9ae\n        v71 = v35;\n        if (v77 < 1) {\n            goto lab_0x40da2a;\n        } else {\n            // 0x40d9b7\n            v61 = -1;\n            int64_t v78 = 0;\n            v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n            int64_t v79 = v61; // 0x40d9f5\n            int64_t v80; // 0x40dc05\n            int64_t v81; // 0x40d730\n            int64_t * mem3; // 0x40ded2\n            int64_t v82; // 0x40ded2\n            int64_t v83; // 0x40dbe0\n            if (function_408600(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                // 0x40d9f7\n                v79 = v74;\n                if (v61 != -1) {\n                    // 0x40dbc8\n                    v83 = function_408600(v35, (int64_t)&v6, v61);\n                    v69 = v35;\n                    v63 = v83 != 0 ? v74 : v61;\n                    if (v4 == 0 || v83 != 0) {\n                        goto lab_0x40d8fc;\n                    } else {\n                        // 0x40dbfe\n                        v73 = *v21;\n                        v80 = v73 + 1;\n                        *v21 = v80;\n                        v81 = *v23;\n                        v62 = v81;\n                        if (v80 == *v22) {\n                            // 0x40deb8\n                            mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                            if (mem3 == NULL) {\n                                goto lab_0x40dc70;\n                            } else {\n                                // 0x40dee0\n                                v82 = (int64_t)mem3;\n                                *v22 = 2 * *v22;\n                                *v23 = v82;\n                                v62 = v82;\n                                goto lab_0x40dc1a;\n                            }\n                        } else {\n                            goto lab_0x40dc1a;\n                        }\n                    }\n                }\n            }\n            int64_t v84 = v79;\n            int64_t v85 = v78 + 1; // 0x40da04\n            while (v77 != v85) {\n                // 0x40d9e0\n                v61 = v84;\n                v78 = v85;\n                v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n                v79 = v61;\n                if (function_408600(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                    // 0x40d9f7\n                    v79 = v74;\n                    if (v61 != -1) {\n                        // 0x40dbc8\n                        v83 = function_408600(v35, (int64_t)&v6, v61);\n                        v69 = v35;\n                        v63 = v83 != 0 ? v74 : v61;\n                        if (v4 == 0 || v83 != 0) {\n                            goto lab_0x40d8fc;\n                        } else {\n                            // 0x40dbfe\n                            v73 = *v21;\n                            v80 = v73 + 1;\n                            *v21 = v80;\n                            v81 = *v23;\n                            v62 = v81;\n                            if (v80 == *v22) {\n                                // 0x40deb8\n                                mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                                if (mem3 == NULL) {\n                                    goto lab_0x40dc70;\n                                } else {\n                                    // 0x40dee0\n                                    v82 = (int64_t)mem3;\n                                    *v22 = 2 * *v22;\n                                    *v23 = v82;\n                                    v62 = v82;\n                                    goto lab_0x40dc1a;\n                                }\n                            } else {\n                                goto lab_0x40dc1a;\n                            }\n                        }\n                    }\n                }\n                // 0x40da04\n                v84 = v79;\n                v85 = v78 + 1;\n            }\n            // 0x40da0d\n            v33 = v35;\n            v25 = v84;\n            v70 = v35;\n            v64 = v84;\n            if (v84 >= 0) {\n                // break -> 0x40d905\n                goto lab_0x40d905_2;\n            }\n            goto lab_0x40da20;\n        }\n    } else {\n        // 0x40d867\n        if ((*(char *)(v59 + 10) & 16) != 0) {\n            int64_t v86 = 0x100000000 * function_40cd80(v58, v56 + 216, v55, v17, v14);\n            v67 = v86 >> 32;\n            if (v86 != 0) {\n                goto lab_0x40dcb9;\n            } else {\n                // 0x40db29\n                v65 = v14;\n                v68 = *v57 + v54;\n                goto lab_0x40d87d;\n            }\n        } else {\n            if (v60 == 4) {\n                int64_t v87 = a4 + 16 + 16 * *(int64_t *)v59; // 0x40db4b\n                int64_t v88 = *(int64_t *)(v87 + 8); // 0x40db4e\n                int64_t v89 = *(int64_t *)v87; // 0x40db52\n                int64_t n = v88 - v89; // 0x40db58\n                if (v4 == 0) {\n                    // 0x40dcb0\n                    v67 = n;\n                    if (n == 0) {\n                        goto lab_0x40dd78;\n                    } else {\n                        goto lab_0x40dcb9;\n                    }\n                } else {\n                    // 0x40db69\n                    v72 = v35;\n                    if (v88 == -1 || v89 == -1) {\n                        goto lab_0x40da38;\n                    } else {\n                        if (n == 0) {\n                            goto lab_0x40dd78;\n                        } else {\n                            int64_t v90 = *(int64_t *)(v17 + 8); // 0x40db86\n                            int32_t memcmp_rc = memcmp((int64_t *)(v90 + v89), (int64_t *)(v14 + v90), (int32_t)n); // 0x40dba0\n                            v72 = v35;\n                            v66 = n;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x40da38;\n                            } else {\n                                goto lab_0x40dbb4;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x40d879\n                v65 = v14;\n                v68 = v59;\n                goto lab_0x40d87d;\n            }\n        }\n    }\n  lab_0x40da2a:\n    // 0x40da2a\n    v72 = v71;\n    if (v4 == 0) {\n        // 0x40df81\n        free((int64_t *)v6);\n        result = 1;\n        if (v10 == 0) {\n            return result;\n        } else {\n            // 0x40df9c\n            free(v12);\n            result = 1;\n            return result;\n        }\n    }\n    goto lab_0x40da38;\n  lab_0x40daee:\n    // 0x40daee\n    *(int64_t *)(v37 + 8) = v32;\n    v27 = *v15;\n    goto lab_0x40d839;\n  lab_0x40da38:;\n    int64_t v91 = function_40bdb0(v4, v18, &v14, a3, a4, &v7); // 0x40da55\n    int64_t v92 = *v15; // 0x40da61\n    v34 = v72;\n    v28 = v92;\n    v31 = v14;\n    v29 = v91;\n    if (v92 < v14) {\n        goto lab_0x40da70_2;\n    }\n    goto lab_0x40d916;\n  lab_0x40da20:\n    // 0x40da20\n    v71 = v70;\n    if (v64 == -2) {\n        // break (via goto) -> 0x40de00\n        goto lab_0x40de00_3;\n    }\n    goto lab_0x40da2a;\n  lab_0x40dcb9:\n    // 0x40dcb9\n    v66 = v67;\n    goto lab_0x40dbb4;\n  lab_0x40dbb4:;\n    int64_t v93 = v14 + v66; // 0x40dbc0\n    goto lab_0x40d8aa;\n  lab_0x40d87d:\n    // 0x40d87d\n    if ((char)function_40a420(v17, v68, v65) == 0) {\n        goto lab_0x40da2a;\n    } else {\n        // 0x40d89e\n        v93 = v65 + 1;\n        goto lab_0x40d8aa;\n    }\n  lab_0x40d8aa:;\n    int64_t v94 = v93;\n    int64_t v95 = *(int64_t *)(*(int64_t *)(v56 + 24) + 8 * v55);\n    v14 = v94;\n    v69 = 0;\n    v63 = v95;\n    if (v4 == 0) {\n        goto lab_0x40d8fc;\n    } else {\n        // 0x40d8b8\n        v72 = v35;\n        if (v94 > *(int64_t *)(v17 + 168)) {\n            goto lab_0x40da38;\n        } else {\n            int64_t v96 = *(int64_t *)(*v20 + 8 * v94); // 0x40d8ce\n            v72 = v35;\n            if (v96 == 0) {\n                goto lab_0x40da38;\n            } else {\n                int64_t v97 = function_408600(*(int64_t *)(v96 + 16), v96 + 24, v95); // 0x40d8e6\n                v69 = 0;\n                v63 = v95;\n                v72 = v35;\n                if (v97 == 0) {\n                    goto lab_0x40da38;\n                } else {\n                    goto lab_0x40d8fc;\n                }\n            }\n        }\n    }\n  lab_0x40dd78:\n    // 0x40dd78\n    if ((char)function_406ff0(v19, v55) == 0) {\n        // break (via goto) -> 0x40de00\n        goto lab_0x40de00_3;\n    }\n    int64_t v98 = v14; // 0x40dd97\n    int64_t v99 = *(int64_t *)(24 * v55 + 16 + *(int64_t *)(v56 + 40)); // 0x40dda6\n    int64_t v100 = *(int64_t *)v99; // 0x40ddaa\n    int64_t v101 = *(int64_t *)(*v20 + 8 * v98); // 0x40ddb5\n    int64_t v102 = function_408600(*(int64_t *)(v101 + 16), v101 + 24, v100); // 0x40ddc4\n    v69 = v35;\n    v63 = v100;\n    if (v102 != 0) {\n        goto lab_0x40d8fc;\n    } else {\n        // 0x40ddd2\n        v65 = v98;\n        v68 = *v57 + v54;\n        goto lab_0x40d87d;\n    }\n  lab_0x40d8fc:\n    // 0x40d8fc\n    v33 = v69;\n    v25 = v63;\n    v70 = v69;\n    v64 = v63;\n    if (v63 >= 0) {\n        // break -> 0x40d905\n        goto lab_0x40d905_2;\n    }\n    goto lab_0x40da20;\n  lab_0x40de16:\n    // 0x40de16\n    if (v4 != 0) {\n      lab_0x40dc86:\n        // 0x40dc86\n        function_40bd60(v4);\n        return 12;\n    }\n    // 0x40da99\n    return 12;\n  lab_0x40dc1a:;\n    int64_t v103 = v62 + 48 * v73; // 0x40dc22\n    *(int64_t *)(v103 + 8) = v74;\n    *(int64_t *)v103 = v14;\n    int64_t * mem4 = malloc(size); // 0x40dc36\n    *(int64_t *)(v103 + 16) = (int64_t)mem4;\n    if (mem4 == NULL) {\n        goto lab_0x40dc70;\n    } else {\n        // 0x40dc44\n        memcpy(mem4, v13, size);\n        v69 = v35;\n        v63 = v61;\n        if ((int32_t)function_4096a0(v103 + 24, v19) == 0) {\n            goto lab_0x40d8fc;\n        } else {\n            goto lab_0x40dc70;\n        }\n    }\n  lab_0x40dc70:\n    // 0x40dc70\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40df70\n        free(v12);\n        goto lab_0x40de16;\n    } else {\n        goto lab_0x40dc86;\n    }\n}\n"
        },
        {
            "funcName": "function_40e000",
            "funcStartAddr": "40e000",
            "funcEndAddr": "40e196",
            "decompiledFuncCode": "int64_t function_40e000(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a3 + 16; // 0x40e014\n    int64_t * v2 = (int64_t *)(a3 + 8); // 0x40e027\n    int64_t result = function_40d010(a1, v1, a3, *v2, a4, a5, 8); // 0x40e030\n    if ((int32_t)result != 0) {\n        // 0x40e03b\n        return result;\n    }\n    int64_t v3 = *v2; // 0x40e050\n    int64_t * v4 = (int64_t *)(a1 + 200); // 0x40e054\n    uint64_t v5 = *v4; // 0x40e054\n    int64_t * v6 = (int64_t *)(a1 + 208); // 0x40e05b\n    uint64_t v7 = *v6; // 0x40e05b\n    int64_t * v8 = (int64_t *)(a1 + 216); // 0x40e066\n    int64_t v9 = *v8; // 0x40e066\n    int64_t v10 = v5; // 0x40e073\n    int64_t v11 = v9; // 0x40e073\n    if (v5 >= v7) {\n        int64_t * mem = realloc((int64_t *)v9, 80 * (int32_t)v7); // 0x40e11d\n        if (mem == NULL) {\n            // 0x40e180\n            free((int64_t *)*v8);\n            // 0x40e03b\n            return 12;\n        }\n        int64_t v12 = (int64_t)mem; // 0x40e11d\n        *v8 = v12;\n        memset((int64_t *)(40 * *v4 + v12), 0, 40 * (int32_t)*v6);\n        *v6 = 2 * *v6;\n        v10 = *v4;\n        v11 = *v8;\n    }\n    int64_t v13 = 40 * v10; // 0x40e07d\n    int64_t v14; // 0x40e000\n    if (v10 < 1) {\n        // 0x40e079\n        v14 = v11 + v13;\n    } else {\n        int64_t v15 = v13 + v11;\n        v14 = v15;\n        if (*(int64_t *)(v15 - 32) == a5) {\n            // 0x40e100\n            *(char *)(v15 - 8) = 1;\n            v14 = v15;\n        }\n    }\n    // 0x40e091\n    *(int64_t *)v14 = a4;\n    *(int64_t *)(v14 + 8) = a5;\n    *(int16_t *)(v14 + 34) = (int16_t)(v3 == v1);\n    *(int64_t *)(v14 + 16) = v1;\n    *(int64_t *)(v14 + 24) = v3;\n    *v4 = v10 + 1;\n    *(char *)(v14 + 32) = 0;\n    int32_t * v16 = (int32_t *)(a1 + 224); // 0x40e0c3\n    if (v3 - v1 > (int64_t)*v16) {\n        // 0x40e0d2\n        *v16 = (int32_t)v3 - (int32_t)v1;\n    }\n    // 0x40e0dc\n    return function_407bd0(a1, 0);\n}\n"
        },
        {
            "funcName": "function_40e1a0",
            "funcStartAddr": "40e1a0",
            "funcEndAddr": "40ea12",
            "decompiledFuncCode": "int64_t function_40e1a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40e1a0\n    if (a2 >= 0 != a2 != 0) {\n        // 0x40e62b\n        return 0;\n    }\n    // 0x40e239\n    int64_t v1; // bp-232, 0x40e1a0\n    int64_t v2 = &v1; // 0x40e1ad\n    int64_t * v3 = (int64_t *)(v2 + 8); // 0x40e23e\n    int64_t * v4 = (int64_t *)(v2 + 56); // 0x40e24a\n    int32_t * v5 = (int32_t *)(a1 + 160);\n    int64_t * v6 = (int64_t *)(a1 + 200);\n    int64_t * v7 = (int64_t *)(a1 + 216);\n    int64_t * v8 = (int64_t *)(a1 + 232);\n    int64_t * v9 = (int64_t *)(v2 + 104);\n    int64_t * v10 = (int64_t *)(v2 + 96);\n    int64_t * v11 = (int64_t *)(a1 + 8);\n    int64_t * v12 = (int64_t *)(v2 + 24);\n    int64_t * v13 = (int64_t *)(v2 + 16);\n    int64_t * v14 = (int64_t *)(v2 + 32);\n    int64_t * v15 = (int64_t *)(v2 + 64);\n    int64_t * v16 = (int64_t *)(v2 + 112);\n    int64_t v17 = v2 + 40;\n    int64_t * v18 = (int64_t *)v17;\n    int64_t * v19 = (int64_t *)(v2 + 120);\n    int64_t * v20 = (int64_t *)(v2 + 48);\n    int64_t * v21 = (int64_t *)(a1 + 184);\n    int64_t v22 = v2 + 140;\n    int32_t * v23 = (int32_t *)v22;\n    int64_t * v24 = (int64_t *)(v2 + 88);\n    int32_t * v25 = (int32_t *)v17;\n    int64_t * v26 = (int64_t *)(v2 + 144);\n    int128_t * v27 = (int128_t *)v22;\n    int64_t * v28 = (int64_t *)(v2 + 160);\n    int64_t v29 = *v3; // 0x40e225\n    int64_t v30 = *(int64_t *)(a1 + 72); // 0x40e1a0\n    int64_t v31; // 0x40e1a0\n    int64_t v32; // 0x40e246\n    int64_t v33; // 0x40e255\n    uint32_t v34; // 0x40e262\n    int64_t v35; // 0x40e262\n    uint64_t v36; // 0x40e27d\n    while (true) {\n      lab_0x40e239:\n        // 0x40e239\n        v31 = v30;\n        v32 = *(int64_t *)(*(int64_t *)*(int64_t *)(v2 + 72) + 8 * v29);\n        v33 = 16 * v32;\n        int64_t v37 = (v33 | 8) + *(int64_t *)*v4; // 0x40e25c\n        v30 = v31;\n        if (*(char *)v37 != 4) {\n            goto lab_0x40e220_3;\n        } else {\n            // 0x40e262\n            v34 = *(int32_t *)v37;\n            if ((v34 & 0x3ff00) == 0) {\n                goto lab_0x40e2b0;\n            } else {\n                // 0x40e26d\n                v35 = v34;\n                v36 = function_40a330(a1, v31, *v5);\n                if ((v35 & 1024) != 0) {\n                    // 0x40e1f0\n                    v30 = v31;\n                    if (v36 % 2 == 0) {\n                        goto lab_0x40e220_3;\n                    } else {\n                        // 0x40e1f4\n                        v30 = v31;\n                        if ((v35 & 2048) != 0) {\n                            goto lab_0x40e220_3;\n                        } else {\n                            goto lab_0x40e1f9;\n                        }\n                    }\n                } else {\n                    // 0x40e294\n                    v30 = v31;\n                    if ((v35 & 2048) == 0 || v36 % 2 == 0) {\n                        goto lab_0x40e1f9;\n                    } else {\n                        goto lab_0x40e220_3;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40e62b_7:;\n    // 0x40e62b\n    int64_t result; // 0x40e1a0\n    return result;\n  lab_0x40e378:;\n    int64_t v38 = *(int64_t *)(a1 + 152); // 0x40e378\n    int64_t v39 = *(int64_t *)v38; // 0x40e387\n    *v9 = v38;\n    *v10 = *(int64_t *)(v39 + v33);\n    int64_t v40; // 0x40e1a0\n    int64_t v41; // 0x40e1a0\n    int64_t v42; // 0x40e1a0\n    int64_t v43; // 0x40e1a0\n    int64_t v44; // 0x40e1a0\n    int64_t v45; // 0x40e1a0\n    int64_t v46; // 0x40e1a0\n    int64_t v47; // 0x40e1a0\n    int64_t v48; // 0x40e1a0\n    int64_t v49; // 0x40e1a0\n    int64_t v50; // 0x40e1a0\n    int64_t v51; // 0x40e1a0\n    int64_t v52; // 0x40e1a0\n    int64_t v53; // 0x40e1a0\n    int64_t v54; // 0x40e2b0\n    int64_t v55; // 0x40e3cc\n    int64_t * v56; // 0x40e3d0\n    int64_t * v57; // 0x40e640\n    int64_t * v58; // 0x40e645\n    int64_t v59; // 0x40e400\n    if (*v8 < 1) {\n        // 0x40e34f\n        *v23 = 0;\n        v30 = v31;\n        goto lab_0x40e220_3;\n    } else {\n        // 0x40e39a\n        *v12 = v31;\n        *v13 = 0;\n        *v14 = *v11;\n        *v15 = v32;\n        *v16 = v54;\n        v40 = *v13;\n        v51 = v39;\n        while (true) {\n          lab_0x40e3bb:\n            // 0x40e3bb\n            v55 = *(int64_t *)(*(int64_t *)(a1 + 248) + 8 * v40);\n            v56 = (int64_t *)(v55 + 8);\n            if (*v10 == *(int64_t *)(16 * *v56 + v51)) {\n                // 0x40e640\n                v57 = (int64_t *)(v55 + 32);\n                v58 = (int64_t *)v55;\n                int64_t v60 = *v58; // 0x40e645\n                int64_t v61 = *v12; // 0x40e648\n                v41 = v61;\n                v42 = v60;\n                if (*v57 < 1) {\n                    goto lab_0x40e7f3;\n                } else {\n                    int64_t v62 = v61;\n                    v49 = 0;\n                    int64_t v63 = v60;\n                    int64_t v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49); // 0x40e680\n                    int64_t v65 = *(int64_t *)(v64 + 8); // 0x40e684\n                    int64_t v66 = v65 - v63; // 0x40e68b\n                    int64_t v67 = v66 + v62; // 0x40e68e\n                    int64_t v68 = v64; // 0x40e695\n                    int64_t v69; // 0x40e1a0\n                    int64_t v70; // 0x40e1a0\n                    int32_t memcmp_rc; // 0x40e6b8\n                    int64_t v71; // 0x40e794\n                    int64_t v72; // 0x40e7a1\n                    int64_t n; // 0x40e7a5\n                    int64_t v73; // 0x40e7aa\n                    int64_t v74; // 0x40e7af\n                    int64_t v75; // 0x40e7b4\n                    if (v66 >= 1) {\n                        // 0x40e697\n                        v69 = *v14;\n                        v75 = v63;\n                        n = v66;\n                        v74 = v62;\n                        v73 = v64;\n                        v72 = v69;\n                        if (*(int64_t *)(a1 + 48) < v67) {\n                            // 0x40e770\n                            *v18 = v66;\n                            *v14 = v64;\n                            v50 = v63;\n                            v48 = v62;\n                            v43 = v69;\n                            if (*(int64_t *)(a1 + 88) < v67) {\n                                goto lab_0x40e980_2;\n                            }\n                            // 0x40e784\n                            *v19 = v62;\n                            *v20 = v63;\n                            v71 = function_407bd0(a1, v67);\n                            result = v71;\n                            if ((int32_t)v71 != 0) {\n                                // break (via goto) -> 0x40e62b\n                                goto lab_0x40e62b_7;\n                            }\n                            // 0x40e7a1\n                            v72 = *v11;\n                            n = *v18;\n                            v73 = *v14;\n                            v74 = *v19;\n                            v75 = *v20;\n                        }\n                        // 0x40e6a1\n                        v70 = v72;\n                        *v20 = v73;\n                        *v18 = v75;\n                        *v14 = v74;\n                        memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                        v68 = *v20;\n                        v50 = *v18;\n                        v48 = *v14;\n                        v43 = v70;\n                        if (memcmp_rc != 0) {\n                            goto lab_0x40e980_2;\n                        }\n                    }\n                    int64_t v76 = function_40e000(a1, v55, v68, *v15, *v12); // 0x40e6e7\n                    int64_t v77 = *v11; // 0x40e6ec\n                    result = v76;\n                    if ((int32_t)v76 >= 2) {\n                        // break (via goto) -> 0x40e62b\n                        goto lab_0x40e62b_7;\n                    }\n                    int64_t v78 = v49 + 1; // 0x40e668\n                    while (v78 < *v57) {\n                        // 0x40e67c\n                        v62 = v67;\n                        v49 = v78;\n                        v63 = v65;\n                        v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49);\n                        v65 = *(int64_t *)(v64 + 8);\n                        v66 = v65 - v63;\n                        v67 = v66 + v62;\n                        v68 = v64;\n                        if (v66 >= 1) {\n                            // 0x40e697\n                            v69 = v77;\n                            v75 = v63;\n                            n = v66;\n                            v74 = v62;\n                            v73 = v64;\n                            v72 = v69;\n                            if (*(int64_t *)(a1 + 48) < v67) {\n                                // 0x40e770\n                                *v18 = v66;\n                                *v14 = v64;\n                                v50 = v63;\n                                v48 = v62;\n                                v43 = v69;\n                                if (*(int64_t *)(a1 + 88) < v67) {\n                                    goto lab_0x40e980_2;\n                                }\n                                // 0x40e784\n                                *v19 = v62;\n                                *v20 = v63;\n                                v71 = function_407bd0(a1, v67);\n                                result = v71;\n                                if ((int32_t)v71 != 0) {\n                                    // break (via goto) -> 0x40e62b\n                                    goto lab_0x40e62b_7;\n                                }\n                                // 0x40e7a1\n                                v72 = *v11;\n                                n = *v18;\n                                v73 = *v14;\n                                v74 = *v19;\n                                v75 = *v20;\n                            }\n                            // 0x40e6a1\n                            v70 = v72;\n                            *v20 = v73;\n                            *v18 = v75;\n                            *v14 = v74;\n                            memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                            v68 = *v20;\n                            v50 = *v18;\n                            v48 = *v14;\n                            v43 = v70;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x40e980_2;\n                            }\n                        }\n                        // 0x40e6d4\n                        v76 = function_40e000(a1, v55, v68, *v15, *v12);\n                        v77 = *v11;\n                        result = v76;\n                        if ((int32_t)v76 >= 2) {\n                            // break (via goto) -> 0x40e62b\n                            goto lab_0x40e62b_7;\n                        }\n                        // 0x40e668\n                        v78 = v49 + 1;\n                    }\n                    // 0x40e7e7\n                    *v14 = v77;\n                    v44 = v65;\n                    v47 = v67;\n                    goto lab_0x40e7ec;\n                }\n            } else {\n                goto lab_0x40e3e2_2;\n            }\n        }\n      lab_0x40e400:\n        // 0x40e400\n        v59 = *v12;\n        int64_t v79 = *v15; // 0x40e405\n        *v23 = 0;\n        int64_t v80 = *v16; // 0x40e415\n        v30 = v59;\n        if (v80 < *v6) {\n            int64_t v81 = *v4; // 0x40e42f\n            *v15 = 8 * v79;\n            *v10 = 24 * v79;\n            int64_t * v82 = (int64_t *)(v81 + 48);\n            int64_t * v83 = (int64_t *)(v81 + 24);\n            int64_t * v84 = (int64_t *)(v81 + 40);\n            v45 = v80;\n            while (true) {\n              lab_0x40e589_2:\n                // 0x40e589\n                v46 = v45;\n                int64_t v85 = *v7 + 40 * v46; // 0x40e594\n                if (v79 != *(int64_t *)v85) {\n                    goto lab_0x40e578;\n                } else {\n                    // 0x40e59d\n                    if (v59 != *(int64_t *)(v85 + 8)) {\n                        goto lab_0x40e578;\n                    } else {\n                        int64_t v86 = *(int64_t *)(v85 + 24); // 0x40e5a3\n                        int64_t v87 = *(int64_t *)(v85 + 16); // 0x40e5a7\n                        int64_t v88 = v86 - v87; // 0x40e5b3\n                        *v14 = v88;\n                        int64_t v89; // 0x40e1a0\n                        if (v88 == 0) {\n                            // 0x40e458\n                            v89 = *(int64_t *)(*v84 + 16 + *v10);\n                        } else {\n                            // 0x40e5c1\n                            v89 = *v15 + *v83;\n                        }\n                        // 0x40e477\n                        *v12 = 24 * *(int64_t *)v89 + *v82;\n                        int64_t v90 = v86 + v59 - v87; // 0x40e483\n                        int64_t v91 = function_40a330(a1, v90 - 1, *v5); // 0x40e48a\n                        int64_t v92 = 8 * v90; // 0x40e494\n                        *v13 = 0;\n                        int64_t v93 = *v21; // 0x40e4a7\n                        int64_t v94 = v93 + v92; // 0x40e4ae\n                        int64_t v95 = *(int64_t *)(v93 + *v24); // 0x40e4b2\n                        int64_t v96 = *(int64_t *)v94; // 0x40e4b6\n                        if (v95 != 0) {\n                            // 0x40e4be\n                            *v13 = *(int64_t *)(v95 + 16);\n                        }\n                        if (v96 == 0) {\n                            // 0x40e5e8\n                            *v18 = v94;\n                            int64_t v97 = function_4098b0(v27, v81, (int64_t *)*v12, (int32_t)v91); // 0x40e5fd\n                            int64_t v98 = *v21; // 0x40e607\n                            *(int64_t *)*v18 = v97;\n                            v52 = v98;\n                            v53 = v98;\n                            if (*(int64_t *)(v98 + v92) != 0) {\n                                goto lab_0x40e552;\n                            } else {\n                                goto lab_0x40e61c;\n                            }\n                        } else {\n                            // 0x40e4d0\n                            *v25 = (int32_t)v91;\n                            *v20 = v92;\n                            int64_t v99 = function_409720(v26, *(int64_t *)(v96 + 80), *v12, v91 & 0xffffffff); // 0x40e4ea\n                            int32_t v100 = v99; // 0x40e4f8\n                            *v23 = v100;\n                            if (v100 != 0) {\n                                // 0x40e7c0\n                                free((int64_t *)*v28);\n                                result = (int64_t)*v23;\n                                goto lab_0x40e62b_7;\n                            }\n                            // 0x40e507\n                            *v18 = *v21 + *v20;\n                            *(int64_t *)*v18 = function_4098b0(v27, v81, v26, *v25);\n                            free((int64_t *)*v28);\n                            int64_t v101 = *v21; // 0x40e540\n                            v52 = v101;\n                            v53 = v101;\n                            if (*(int64_t *)(v101 + v92) == 0) {\n                                goto lab_0x40e61c;\n                            } else {\n                                goto lab_0x40e552;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        goto lab_0x40e220_3;\n    }\n  lab_0x40e980_2:;\n    int64_t v102 = v48;\n    int64_t v103 = v50;\n    *v14 = v43;\n    if (*v57 > v49) {\n        goto lab_0x40e3e2_2;\n    } else {\n        // 0x40e995\n        v44 = v103;\n        v47 = v102;\n        v41 = v102;\n        v42 = v103;\n        if (v49 == 0) {\n            goto lab_0x40e7f3;\n        } else {\n            goto lab_0x40e7ec;\n        }\n    }\n  lab_0x40e934:;\n    // 0x40e934\n    int64_t v104; // 0x40e1a0\n    int64_t v105 = v104 + 1; // 0x40e934\n    int64_t v106 = v105; // 0x40e93d\n    if (*v12 < v105) {\n        // break -> 0x40e3e2\n        goto lab_0x40e3e2_2;\n    }\n    goto lab_0x40e810;\n  lab_0x40e578:;\n    int64_t v130 = v46 + 1; // 0x40e578\n    v30 = v59;\n    int64_t v131 = v130; // 0x40e583\n    if (v130 >= *v6) {\n        // break -> 0x40e220\n        goto lab_0x40e220_3;\n    }\n    // 0x40e589\n    v45 = v131;\n    goto lab_0x40e589_2;\n  lab_0x40e552:\n    // 0x40e552\n    if (*v14 != 0) {\n        goto lab_0x40e578;\n    } else {\n        // 0x40e55a\n        if (*(int64_t *)(*(int64_t *)(*v24 + v52) + 16) > *v13) {\n            int64_t v132 = *v12; // 0x40e700\n            int64_t v133 = v132 + 16; // 0x40e70b\n            int64_t v134 = v132 + 8; // 0x40e70f\n            *v13 = v133;\n            int64_t v135 = function_40a1e0(a1, v134, v133, v59); // 0x40e71e\n            int32_t v136 = v135; // 0x40e723\n            *v23 = v136;\n            result = v135;\n            if (v136 != 0) {\n                // break (via goto) -> 0x40e62b\n                goto lab_0x40e62b_7;\n            }\n            int64_t v137 = function_40e1a0(a1, v134, *v13); // 0x40e740\n            int32_t v138 = v137; // 0x40e745\n            *v23 = v138;\n            result = v137;\n            if (v138 != 0) {\n                // break (via goto) -> 0x40e62b\n                goto lab_0x40e62b_7;\n            }\n            int64_t v139 = v46 + 1; // 0x40e754\n            v30 = v59;\n            v131 = v139;\n            if (v139 >= *v6) {\n                // break -> 0x40e220\n                goto lab_0x40e220_3;\n            }\n            // 0x40e589\n            v45 = v131;\n            goto lab_0x40e589_2;\n        } else {\n            goto lab_0x40e578;\n        }\n    }\n  lab_0x40e61c:;\n    uint32_t v140 = *v23; // 0x40e61c\n    v52 = v53;\n    if (v140 != 0) {\n        // 0x40e62b\n        result = v140;\n        goto lab_0x40e62b_7;\n    }\n    goto lab_0x40e552;\n  lab_0x40e3e2_2:;\n    int64_t v141 = *v13 + 1; // 0x40e3e2\n    *v13 = v141;\n    if (v141 >= *v8) {\n        // break -> 0x40e400\n        goto lab_0x40e400;\n    }\n    // 0x40e3f6\n    v40 = v141;\n    v51 = *(int64_t *)*v9;\n    goto lab_0x40e3bb;\n  lab_0x40e7f3:;\n    int64_t v142 = v42;\n    int64_t v122; // 0x40e885\n    int64_t v128; // 0x40e95c\n    int64_t v127; // 0x40e961\n    int64_t * v143; // 0x40e1a0\n    int64_t * v144; // 0x40e1a0\n    if (*v12 >= v142) {\n        int64_t * v126 = (int64_t *)(v55 + 16);\n        v143 = (int64_t *)(v55 + 24);\n        v144 = (int64_t *)(v55 + 40);\n        v106 = v142;\n        int64_t v145 = v41; // 0x40e806\n        while (true) {\n          lab_0x40e810:\n            // 0x40e810\n            v104 = v106;\n            if (v104 - *v58 >= 1) {\n                // 0x40e81b\n                int64_t * v107; // 0x40e1a0\n                int64_t v108 = *v107; // 0x40e81b\n                int64_t v109; // 0x40e1a0\n                int64_t v110; // 0x40e1a0\n                if (v108 > v110) {\n                    int64_t v111 = *v14;\n                    v109 = v111;\n                } else {\n                    // 0x40e9b0\n                    int64_t * v112; // 0x40e1a0\n                    uint64_t v113 = *v112; // 0x40e9b0\n                    if (v113 <= v110) {\n                        // break -> 0x40e3e2\n                        break;\n                    }\n                    int64_t v114 = function_407a80(a1, v110 + 1 & 0xffffffff); // 0x40e9c1\n                    result = v114;\n                    if ((int32_t)v114 != 0) {\n                        // break (via goto) -> 0x40e62b\n                        goto lab_0x40e62b_7;\n                    }\n                    int64_t v115 = *v11; // 0x40e9ce\n                    *v14 = v115;\n                    v109 = v115;\n                }\n                int64_t v116 = v109; // 0x40e825\n                char v117 = *(char *)(v104 - 1 + v116); // 0x40e82e\n                char v118 = *(char *)(v116 + v110); // 0x40e834\n                if (v118 != v117) {\n                    // break -> 0x40e3e2\n                    break;\n                }\n            }\n            int64_t v119 = *(int64_t *)(*v21 + 8 * v104); // 0x40e848\n            if (v119 != 0) {\n                uint64_t v120 = *(int64_t *)(v119 + 16); // 0x40e855\n                if (v120 >= 1) {\n                    int64_t v121 = 0;\n                    v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                    int64_t v123 = 16 * v122 + *(int64_t *)*v9; // 0x40e890\n                    int64_t v124; // 0x40e8a8\n                    int64_t v125; // 0x40e8ac\n                    int64_t * mem; // 0x40e95c\n                    if (*(char *)(v123 + 8) == 9) {\n                        // 0x40e899\n                        if (*v10 == *(int64_t *)v123) {\n                            if (v122 == -1) {\n                                goto lab_0x40e934;\n                            } else {\n                                // 0x40e8a8\n                                v124 = *v126;\n                                v127 = *v58;\n                                v128 = v124;\n                                if (v124 == 0) {\n                                    // 0x40e948\n                                    *v18 = v125;\n                                    mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                    v128 = (int64_t)mem;\n                                    v127 = *v18;\n                                    *v126 = v128;\n                                    result = 12;\n                                    if (mem != NULL) {\n                                        goto lab_0x40e8b8;\n                                    } else {\n                                        goto lab_0x40e62b_7;\n                                    }\n                                } else {\n                                    goto lab_0x40e8b8;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v129 = v121 + 1; // 0x40e878\n                    while (v120 != v129) {\n                        // 0x40e885\n                        v121 = v129;\n                        v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                        v123 = 16 * v122 + *(int64_t *)*v9;\n                        if (*(char *)(v123 + 8) == 9) {\n                            // 0x40e899\n                            if (*v10 == *(int64_t *)v123) {\n                                if (v122 == -1) {\n                                    goto lab_0x40e934;\n                                } else {\n                                    // 0x40e8a8\n                                    v124 = *v126;\n                                    v125 = *v58;\n                                    v127 = v125;\n                                    v128 = v124;\n                                    if (v124 == 0) {\n                                        // 0x40e948\n                                        *v18 = v125;\n                                        mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                        v128 = (int64_t)mem;\n                                        v127 = *v18;\n                                        *v126 = v128;\n                                        result = 12;\n                                        if (mem != NULL) {\n                                            goto lab_0x40e8b8;\n                                        } else {\n                                            goto lab_0x40e62b_7;\n                                        }\n                                    } else {\n                                        goto lab_0x40e8b8;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40e878\n                        v129 = v121 + 1;\n                    }\n                }\n            }\n            goto lab_0x40e934;\n        }\n    }\n    goto lab_0x40e3e2_2;\n  lab_0x40e7ec:\n    // 0x40e7ec\n    v41 = v47;\n    v42 = v44 + 1;\n    goto lab_0x40e7f3;\n  lab_0x40e220_3:\n    // 0x40e220\n    v29 = *v3 + 1;\n    *v3 = v29;\n    if (v29 >= *(int64_t *)*(int64_t *)(v2 + 80)) {\n        // break -> 0x40e62b\n        goto lab_0x40e62b_7;\n    }\n    goto lab_0x40e239;\n  lab_0x40e2b0:\n    // 0x40e2b0\n    v54 = *v6;\n    if (v54 > 0) {\n        int64_t v146 = *v7; // 0x40e2c5\n        int64_t v147 = v146 + 8; // 0x40e2dd\n        int64_t v148 = 0;\n        uint64_t v149 = v148 + v54; // 0x40e2c1\n        int64_t v150 = (v149 / 0x8000000000000000 + v149) / 2; // 0x40e2d6\n        int64_t v151 = v150; // 0x40e2e2\n        int64_t v152 = v54; // 0x40e2e2\n        int64_t v153 = v150; // 0x40e2e2\n        int64_t v154; // 0x40e1a0\n        int64_t v155; // 0x40e1a0\n        uint64_t v156; // 0x40e2f0\n        int64_t v157; // 0x40e2fe\n        if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n            v155 = v151;\n            v154 = v148;\n            if (v155 <= v148) {\n                // break (via goto) -> 0x40e317\n                goto lab_0x40e317;\n            }\n            // 0x40e2f0\n            v156 = v155 + v148;\n            v157 = (v156 / 0x8000000000000000 + v156) / 2;\n            v152 = v155;\n            v153 = v157;\n            while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                // 0x40e312\n                v155 = v157;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40e317\n                    goto lab_0x40e317;\n                }\n                // 0x40e2f0\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n            }\n        }\n        int64_t v158 = v152;\n        int64_t v159 = v153 + 1; // 0x40e368\n        v154 = v159;\n        while (v159 < v158) {\n            // 0x40e2c1\n            v148 = v159;\n            v149 = v148 + v158;\n            v150 = (v149 / 0x8000000000000000 + v149) / 2;\n            v151 = v150;\n            v152 = v158;\n            v153 = v150;\n            if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n                v155 = v151;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40e317\n                    goto lab_0x40e317;\n                }\n                // 0x40e2f0\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n                while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                    // 0x40e312\n                    v155 = v157;\n                    v154 = v148;\n                    if (v155 <= v148) {\n                        // break (via goto) -> 0x40e317\n                        goto lab_0x40e317;\n                    }\n                    // 0x40e2f0\n                    v156 = v155 + v148;\n                    v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                    v152 = v155;\n                    v153 = v157;\n                }\n            }\n            // 0x40e368\n            v158 = v152;\n            v159 = v153 + 1;\n            v154 = v159;\n        }\n      lab_0x40e317:;\n        int64_t v160 = v154;\n        if (v54 > v160) {\n            int64_t v161 = v146 + 40 * v160; // 0x40e327\n            int64_t v162 = v161; // 0x40e32f\n            if (v160 != -1 == *(int64_t *)(v161 + 8) == v31) {\n                int64_t v163 = v162;\n                while (v32 != *(int64_t *)v163) {\n                    // 0x40e340\n                    v162 = v163 + 40;\n                    if (*(char *)(v163 + 32) == 0) {\n                        goto lab_0x40e378;\n                    }\n                    v163 = v162;\n                }\n                // 0x40e34f\n                *v23 = 0;\n                v30 = v31;\n                goto lab_0x40e220_3;\n            } else {\n                goto lab_0x40e378;\n            }\n        } else {\n            goto lab_0x40e378;\n        }\n    } else {\n        goto lab_0x40e378;\n    }\n  lab_0x40e1f9:\n    // 0x40e1f9\n    v30 = v31;\n    if ((v35 & 0x2000) != 0 == (v36 & 2) == 0) {\n        goto lab_0x40e220_3;\n    } else {\n        if ((char)(v34 / 256) > -1) {\n            goto lab_0x40e2b0;\n        } else {\n            // 0x40e20e\n            v30 = v31;\n            if ((v36 & 8) != 0) {\n                goto lab_0x40e2b0;\n            } else {\n                goto lab_0x40e220_3;\n            }\n        }\n    }\n  lab_0x40e8b8:\n    // 0x40e8b8\n    *(int64_t *)(v2 - 16) = 9;\n    int64_t v164 = function_40d010(a1, v128, *v56, v127, v122, v104, (int64_t)&g88); // 0x40e8cb\n    int32_t v165 = v164; // 0x40e8d2\n    if (v165 == 1) {\n        goto lab_0x40e934;\n    } else {\n        // 0x40e8d7\n        result = v164;\n        if (v165 != 0) {\n            goto lab_0x40e62b_7;\n        } else {\n            int64_t v166 = *v143; // 0x40e8df\n            if (*v57 == v166) {\n                int64_t v167 = 2 * v166 | 1; // 0x40e9dc\n                *v18 = v167;\n                int64_t * mem2 = realloc((int64_t *)*v144, 8 * (int32_t)v167); // 0x40e9f2\n                result = 12;\n                if (mem2 == NULL) {\n                    goto lab_0x40e62b_7;\n                } else {\n                    // 0x40ea00\n                    *v144 = (int64_t)mem2;\n                    *v143 = *v18;\n                    goto lab_0x40e8ed;\n                }\n            } else {\n                goto lab_0x40e8ed;\n            }\n        }\n    }\n  lab_0x40e8ed:;\n    int64_t * mem3 = calloc(1, 40); // 0x40e8f7\n    result = 12;\n    if (mem3 == NULL) {\n        goto lab_0x40e62b_7;\n    } else {\n        int64_t v168 = (int64_t)mem3; // 0x40e8f7\n        int64_t v169 = *v57; // 0x40e901\n        *(int64_t *)(*v144 + 8 * v169) = v168;\n        *mem3 = v122;\n        *(int64_t *)(v168 + 8) = v104;\n        *v57 = v169 + 1;\n        function_40e000(a1, v55, v168, *v15, *v12);\n        goto lab_0x40e934;\n    }\n}\n"
        },
        {
            "funcName": "function_40ea20",
            "funcStartAddr": "40ea20",
            "funcEndAddr": "40ebd7",
            "decompiledFuncCode": "int64_t function_40ea20(int32_t * a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 72); // 0x40ea34\n    int64_t v3 = *v2; // 0x40ea34\n    int64_t * v4 = (int64_t *)(v1 + 184); // 0x40ea38\n    int64_t v5 = *(int64_t *)(v1 + 152); // 0x40ea3f\n    int64_t v6 = 8 * v3; // 0x40ea46\n    int64_t * v7 = (int64_t *)(v1 + 192); // 0x40ea51\n    int64_t * v8 = (int64_t *)(*v4 + v6);\n    int64_t result; // 0x40ea20\n    if (*v7 < v3) {\n        // 0x40ea5a\n        *v8 = a3;\n        *v7 = v3;\n        result = a3;\n    } else {\n        int64_t v9 = *v8; // 0x40ea90\n        if (v9 == 0) {\n            // 0x40eb68\n            *v8 = a3;\n            result = a3;\n        } else {\n            int64_t v10 = *(int64_t *)(v9 + 80); // 0x40ea9c\n            int64_t v11; // bp-88, 0x40ea20\n            if (a3 == 0) {\n                // 0x40eb20\n                v11 = __asm_movaps(__asm_movdqu(*(int128_t *)v10));\n                int64_t v12 = function_40a330(v1, v3 - 1, *(int32_t *)(v1 + 160)); // 0x40eb40\n                int64_t v13 = function_4098b0((int128_t *)a1, v5, &v11, (int32_t)v12); // 0x40eb52\n                *v8 = v13;\n                result = v13;\n            } else {\n                int64_t v14 = *(int64_t *)(a3 + 80); // 0x40eaa5\n                int64_t v15; // 0x40ea20\n                int32_t v16 = function_409720(&v11, v14, v10, v15); // 0x40eab9\n                *a1 = v16;\n                if (v16 != 0) {\n                    // 0x40ea75\n                    return 0;\n                }\n                int64_t v17 = function_40a330(v1, *v2 - 1, *(int32_t *)(v1 + 160)); // 0x40ead6\n                int64_t v18 = function_4098b0((int128_t *)a1, v5, &v11, (int32_t)v17); // 0x40eaf7\n                *(int64_t *)(*v4 + v6) = v18;\n                result = v18;\n                if (v14 != 0) {\n                    // 0x40eb10\n                    free((int64_t *)v15);\n                    result = v18;\n                }\n            }\n        }\n    }\n    // 0x40ea67\n    if (*(int64_t *)(v5 + 152) == 0) {\n        // 0x40ea75\n        return result;\n    }\n    // 0x40eb78\n    if (result == 0) {\n        // 0x40ea75\n        return 0;\n    }\n    int64_t v19 = result + 16; // 0x40eb7d\n    int64_t v20 = result + 24; // 0x40eb81\n    int32_t v21 = function_40a1e0(v1, v19, v20, v3); // 0x40eb96\n    *a1 = v21;\n    if (v21 != 0) {\n        // 0x40ea75\n        return 0;\n    }\n    // 0x40eb9e\n    if ((*(char *)(result + 104) & 64) == 0) {\n        // 0x40ea75\n        return result;\n    }\n    int32_t v22 = function_40e1a0(v1, v19, v20); // 0x40ebb6\n    *a1 = v22;\n    int64_t result2 = 0; // 0x40ebbc\n    if (v22 == 0) {\n        // 0x40ebbe\n        result2 = *(int64_t *)(*v4 + v6);\n    }\n    // 0x40ea75\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ebe0",
            "funcStartAddr": "40ebe0",
            "funcEndAddr": "40ef04",
            "decompiledFuncCode": "int64_t function_40ebe0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 24); // 0x40ebf9\n    uint64_t v2 = *v1; // 0x40ebf9\n    int64_t * mem = malloc(8); // 0x40ec13\n    if (mem == NULL) {\n        // 0x40eef0\n        return 12;\n    }\n    // 0x40ec26\n    int64_t v3; // bp-152, 0x40ebe0\n    int64_t v4 = &v3; // 0x40ebf5\n    int64_t v5 = (int64_t)mem; // 0x40ec13\n    *mem = *(int64_t *)(a2 + 16);\n    int64_t v6 = v5; // 0x40ec3e\n    int64_t v7; // 0x40ebe0\n    int64_t v8; // 0x40ebe0\n    int64_t v9; // 0x40ebe0\n    int64_t v10; // 0x40ebe0\n    int64_t * v11; // 0x40ebe0\n    int64_t * v12; // 0x40ebe0\n    int64_t v13; // 0x40ebe0\n    int64_t v14; // 0x40ec9e\n    int64_t * v15; // 0x40ecb9\n    int64_t * v16; // 0x40ebe0\n    int64_t v17; // 0x40ed8e\n    if ((int32_t)v5 == 0) {\n        // 0x40ec44\n        v6 = 0;\n        if (v2 >= 1) {\n            // 0x40ec5e\n            v11 = (int64_t *)(v4 + 16);\n            int32_t * v18 = (int32_t *)(v4 + 28);\n            int32_t * v19 = (int32_t *)(a1 + 224);\n            int64_t * v20 = (int64_t *)(a1 + 152);\n            v12 = (int64_t *)(v4 + 8);\n            int64_t * v21 = (int64_t *)(v4 + 40);\n            int64_t * v22 = (int64_t *)(v4 + 48);\n            int64_t * v23 = (int64_t *)(v4 + 32);\n            v13 = a2 + 40;\n            int64_t v24 = v2; // 0x40ebe0\n            while (true) {\n                int64_t v25 = 8 * v24; // 0x40ec61\n                *v11 = v25;\n                if (*(int64_t *)(v25 + a2) == 0) {\n                    uint32_t v26 = *v18 + 1; // 0x40eeb0\n                    *v18 = v26;\n                    if ((int64_t)*v19 < (int64_t)v26) {\n                        // break -> 0x40eec6\n                        break;\n                    }\n                } else {\n                    // 0x40ec79\n                    *v18 = 0;\n                    if (*v19 < 0) {\n                        // break -> 0x40eec6\n                        break;\n                    }\n                }\n                int64_t v27 = *(int64_t *)(a1 + 184); // 0x40ec92\n                v14 = v24 - 1;\n                *(int64_t *)(v4 + 72) = 0;\n                int64_t v28 = *(int64_t *)(v27 - 8 + *v11); // 0x40ecab\n                v9 = v27;\n                if (v28 != 0) {\n                    // 0x40ecb9\n                    v15 = (int64_t *)(v28 + 40);\n                    int64_t v29 = *v20; // 0x40ecbe\n                    v9 = v27;\n                    if (*v15 >= 1) {\n                        // 0x40eccb\n                        *v12 = 0;\n                        int64_t * v30 = (int64_t *)v29; // 0x40ed8a\n                        v16 = (int64_t *)(v29 + 24);\n                        v7 = 0;\n                        while (true) {\n                          lab_0x40ed81:\n                            // 0x40ed81\n                            v17 = *(int64_t *)(8 * v7 + *(int64_t *)(v28 + 48));\n                            int64_t v31 = 16 * v17; // 0x40ed95\n                            int64_t v32 = v31 + *v30; // 0x40ed99\n                            v10 = v32;\n                            if ((*(char *)(v32 + 10) & 16) == 0) {\n                                goto lab_0x40ece0;\n                            } else {\n                                int64_t v33 = *v20; // 0x40eda6\n                                *v21 = v31;\n                                int64_t v34 = v33 + 216; // 0x40edc2\n                                *v22 = v33;\n                                *v23 = *v1;\n                                int64_t v35 = function_40cd80(*(int64_t *)v33, v34, v17, a1, v14); // 0x40edd3\n                                int64_t v36 = *v21; // 0x40edd8\n                                int32_t v37 = v35; // 0x40eddd\n                                int64_t v38 = v35 & 0xffffffff; // 0x40eddf\n                                if (v37 < 1) {\n                                    // 0x40ee40\n                                    v8 = v38;\n                                    if (v37 != 0) {\n                                        goto lab_0x40ed21;\n                                    } else {\n                                        // 0x40ee46\n                                        v10 = *v30 + v36;\n                                        goto lab_0x40ece0;\n                                    }\n                                } else {\n                                    int64_t v39 = (0x100000000 * v35 >> 32) + v14; // 0x40ede6\n                                    v8 = v38;\n                                    if (*v23 < v39) {\n                                        goto lab_0x40ed21;\n                                    } else {\n                                        int64_t v40 = *(int64_t *)(8 * v39 + v34); // 0x40edfc\n                                        if (v40 == 0) {\n                                            // 0x40ee46\n                                            v10 = *v30 + v36;\n                                            goto lab_0x40ece0;\n                                        } else {\n                                            // 0x40ee05\n                                            *v23 = v36;\n                                            int64_t v41 = *(int64_t *)(*(int64_t *)(*v22 + 24) + 8 * v17); // 0x40ee16\n                                            v8 = v38;\n                                            if (function_408600(*(int64_t *)(v40 + 16), v40 + 24, v41) != 0) {\n                                                goto lab_0x40ed21;\n                                            } else {\n                                                // 0x40ee28\n                                                v10 = *v30 + *v23;\n                                                goto lab_0x40ece0;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n              lab_0x40ee58:\n                // 0x40ee58\n                v6 = v9;\n                if ((int32_t)v9 != 0) {\n                    goto lab_0x40ee85_3;\n                }\n                // 0x40ee6f\n                v24 = v14;\n                v6 = 0;\n                if (v14 == 0) {\n                    goto lab_0x40ee85_3;\n                }\n            }\n            // 0x40eec6\n            memset((int64_t *)a2, 0, (int32_t)*v11);\n            free((int64_t *)*(int64_t *)(v4 + 80));\n            return (int32_t)&g88 ^ (int32_t)&g88;\n        }\n    }\n  lab_0x40ee85_3:;\n    int32_t * v42 = (int32_t *)(v4 + 8); // 0x40ee8a\n    *v42 = (int32_t)v6;\n    free((int64_t *)*(int64_t *)(v4 + 80));\n    return (int64_t)*v42;\n  lab_0x40ece0:;\n    int64_t v43 = v10;\n    if ((char)function_40a420(a1, v43, v14) == 0) {\n        goto lab_0x40ed6c;\n    } else {\n        int64_t v44 = *(int64_t *)(*v11 + v43); // 0x40ecf7\n        if (v44 == 0) {\n            goto lab_0x40ed6c;\n        } else {\n            int64_t v45 = *(int64_t *)(*v16 + 8 * v17); // 0x40ed0d\n            v8 = 1;\n            if (function_408600(*(int64_t *)(v44 + 16), v44 + 24, v45) == 0) {\n                goto lab_0x40ed6c;\n            } else {\n                goto lab_0x40ed21;\n            }\n        }\n    }\n  lab_0x40ed6c:;\n    int64_t v46 = *v12 + 1; // 0x40ed6c\n    *v12 = v46;\n    v7 = v46;\n    v9 = v46;\n    if (v46 >= *v15) {\n        // break -> 0x40ee58\n        goto lab_0x40ee58;\n    }\n    goto lab_0x40ed81;\n  lab_0x40ed21:\n    // 0x40ed21\n    if (*(int64_t *)v13 == 0) {\n        goto lab_0x40ed57;\n    } else {\n        int64_t v47 = *(int64_t *)(*v16 + 8 * v17); // 0x40ed42\n        *(int64_t *)(v4 - 16) = v14;\n        int64_t v48 = *(int64_t *)(v4 + 56); // 0x40ed47\n        int64_t v49 = function_408890(a1, v13, v48, v47, (0x100000000 * v8 >> 32) + v14, v17, (int64_t)&g88); // 0x40ed4c\n        if ((char)v49 != 0) {\n            goto lab_0x40ed6c;\n        } else {\n            goto lab_0x40ed57;\n        }\n    }\n  lab_0x40ed57:\n    // 0x40ed57\n    v6 = 12;\n    if ((char)function_406ff0(v4 + 64, v17) == 0) {\n        goto lab_0x40ee85_3;\n    }\n    goto lab_0x40ed6c;\n}\n"
        },
        {
            "funcName": "function_40ef10",
            "funcStartAddr": "40ef10",
            "funcEndAddr": "410e99",
            "decompiledFuncCode": "int64_t function_40ef10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, uint64_t a7, int64_t a8, int64_t a9) {\n    // 0x40ef10\n    int64_t v1; // 0x40ef10\n    int64_t v2 = v1;\n    int64_t v3; // bp-312, 0x40ef10\n    __asm_rep_stosq_memset((char *)&v3, 0, 32);\n    int64_t v4 = *(int64_t *)(a1 + 32); // 0x40ef5c\n    char * v5 = (char *)v4; // 0x40ef68\n    char * v6 = v5; // 0x40ef70\n    if (v4 != 0) {\n        unsigned char v7 = *(char *)(a1 + 56); // 0x40ef72\n        v6 = NULL;\n        if (a4 != a5 && (v7 & 8) != 0) {\n            // 0x40ef88\n            v6 = v7 % 2 == 0 ? v5 : NULL;\n        }\n    }\n    int64_t * v8 = (int64_t *)(a1 + 48); // 0x40efa5\n    uint64_t v9 = *v8; // 0x40efa5\n    int64_t v10 = 0; // 0x40efb1\n    int64_t v11 = a7; // 0x40efb1\n    if (v9 < a7) {\n        // 0x40efb3\n        v10 = -1 - v9 + a7;\n        v11 = v9 + 1;\n    }\n    int64_t v12 = *(int64_t *)(a1 + 16); // 0x40efdd\n    if (v12 == 0) {\n        // 0x40f980\n        return 1;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40efed\n    int64_t v14 = *v13; // 0x40efed\n    if (v14 == 0) {\n        // 0x40f980\n        return 1;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 80); // 0x40effa\n    int64_t v16 = *v15; // 0x40effa\n    if (v16 == 0) {\n        // 0x40f980\n        return 1;\n    }\n    int64_t * v17 = (int64_t *)(a1 + 88); // 0x40f007\n    int64_t v18 = *v17; // 0x40f007\n    if (v18 == 0) {\n        // 0x40f980\n        return 1;\n    }\n    int64_t * v19 = (int64_t *)(a1 + 96); // 0x40f014\n    if (*v19 == 0) {\n        // 0x40f980\n        return 1;\n    }\n    int64_t v20 = a4; // 0x40f024\n    int64_t v21 = a5; // 0x40f024\n    if (*(int64_t *)(v14 + 16) != 0) {\n        goto lab_0x40f058;\n    } else {\n        // 0x40f026\n        v20 = a4;\n        v21 = a5;\n        if (*(int64_t *)(v16 + 16) != 0) {\n            goto lab_0x40f058;\n        } else {\n            // 0x40f02d\n            if (*(int64_t *)(v18 + 16) == 0) {\n                goto lab_0x40f03a;\n            } else {\n                // 0x40f034\n                if (*(char *)(a1 + 56) < 0) {\n                    goto lab_0x40f058;\n                } else {\n                    goto lab_0x40f03a;\n                }\n            }\n        }\n    }\n  lab_0x40f960_9:;\n    // 0x40f960\n    int64_t v22; // 0x40ef10\n    free((int64_t *)v22);\n    int64_t * v23; // 0x40ef10\n    int64_t v24; // 0x40ef10\n    int64_t v25; // 0x40ef10\n    if (*v23 != 0) {\n        // 0x410178\n        function_408270(&v3);\n        free((int64_t *)v24);\n        free((int64_t *)v25);\n    }\n    // 0x40f978\n    function_408230(&v3);\n    // 0x40f980\n    int64_t v26; // 0x40ef10\n    return v26 & 0xffffffff;\n  lab_0x40fec8_3:;\n    // 0x40fec8\n    int32_t v27; // 0x40ef10\n    int32_t v28 = v27; // bp-392, 0x40fec8\n    int32_t v29; // 0x40ef10\n    int32_t v30 = v29; // 0x40fed2\n    int64_t v31; // 0x40ef10\n    int64_t v32 = v31; // 0x40fed2\n    int64_t v33 = 0; // 0x40fed2\n    int64_t v34; // 0x40ef10\n    int64_t v35 = v34; // 0x40fed2\n    int64_t v36; // 0x40ef10\n    int64_t v37 = v36; // 0x40fed2\n    int64_t v38; // 0x40ef10\n    int64_t v39 = v38; // 0x40fed2\n    int64_t * v40; // 0x40ef10\n    v23 = v40;\n    v26 = 12;\n    int64_t v41; // 0x40ef10\n    v25 = v41;\n    int64_t v42; // 0x40ef10\n    v24 = v42;\n    v22 = 0;\n    int64_t v43; // 0x40ef10\n    if (v43 == 0) {\n        goto lab_0x40f960_9;\n    } else {\n        goto lab_0x40f6b8;\n    }\n  lab_0x40f75f:;\n    // 0x40f75f\n    int64_t v44; // 0x40ef10\n    int64_t v45 = v44;\n    int64_t v46; // 0x40ef10\n    int64_t v47 = v46;\n    int64_t v48; // 0x40ef10\n    int64_t v49 = v48;\n    int32_t v50; // 0x40ef10\n    int32_t v51 = v50;\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v52; // 0x40ef10\n    int64_t v53 = v52; // 0x40ef10\n    int128_t v54; // 0x40ef10\n    int128_t v55 = v54; // 0x40ef10\n    int64_t v56; // 0x40ef10\n    int64_t v57 = v56; // 0x40ef10\n    int32_t v58; // 0x40ef10\n    int64_t v59; // 0x40ef10\n    int64_t v60; // 0x40ef10\n    int64_t v61; // 0x40ef10\n    int64_t v62; // 0x40ef10\n    int64_t v63; // 0x40ef10\n    int64_t v64; // 0x40ef10\n    int64_t v65; // 0x40ef10\n    int64_t v66; // 0x40ef10\n    int64_t v67; // bp-376, 0x40ef10\n    int64_t v68; // 0x40ef10\n    int64_t * mem; // 0x40ffdf\n    int64_t v69; // 0x40ef10\n    int64_t * mem2; // 0x410006\n    int64_t v70; // 0x410006\n    int128_t v71; // 0x41002e\n    int64_t v72; // 0x40f10d\n    char * v73; // 0x40ef10\n    char * v74; // 0x40ef10\n    int64_t v75; // 0x40ef10\n    int128_t v76; // 0x40ef10\n    switch (v45) {\n        case -1: {\n            goto lab_0x40fdc0;\n        }\n        case -2: {\n            goto lab_0x40f960_9;\n        }\n        default: {\n            // 0x40f773\n            int64_t v77; // 0x40ef10\n            if (v11 < 2 | (*v73 & 16) != 0) {\n                // 0x40f930\n                v65 = v45;\n                v64 = v43;\n                if (*v40 == 0) {\n                    goto lab_0x40f943_2;\n                }\n                int64_t v78 = *(int64_t *)(8 * v45 + v43); // 0x40ff8e\n                int64_t v79 = function_40a550(&v3, *(int64_t *)(v78 + 16), v78 + 24, v45); // 0x40ff9a\n                v77 = v79;\n            } else {\n                int64_t v80 = *(int64_t *)(8 * v45 + v43); // 0x40f7a7\n                int64_t v81 = function_40a550(&v3, *(int64_t *)(v80 + 16), v80 + 24, v45); // 0x40f7b3\n                v77 = v81;\n                if (*v74 % 2 == 0) {\n                    // 0x40f7d5\n                    v65 = v45;\n                    v64 = v43;\n                    v77 = v81;\n                    if (*v40 == 0) {\n                        goto lab_0x40f943_2;\n                    }\n                }\n            }\n            // 0x40ffaf\n            if (v45 >= 0x1fffffffffffffff) {\n                // break -> 0x40f960\n                break;\n            }\n            int64_t v82 = v45 + 1; // 0x40ffcf\n            int32_t size = 8 * (int32_t)v82; // 0x40ffdf\n            mem = malloc(size);\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if (mem == NULL) {\n                // break -> 0x40f960\n                break;\n            }\n            int64_t v83 = v77;\n            v69 = (int64_t)mem;\n            if (*v40 == 0) {\n                int128_t v84 = __asm_pxor(v54, v54); // 0x40fd40\n                v67 = v69;\n                __asm_movaps(v84);\n                int64_t v85 = function_40ebe0(v72, v75); // 0x40fd87\n                free(NULL);\n                int32_t v86 = v85;\n                v58 = v86;\n                v68 = 0;\n                v66 = v83;\n                v76 = v84;\n                v63 = v85;\n                if (v86 != 0) {\n                    goto lab_0x410572;\n                } else {\n                    // 0x40fda5\n                    v60 = v45;\n                    if (*mem != 0) {\n                        goto lab_0x410118;\n                    }\n                    // 0x40fdaf\n                    free(mem);\n                    v53 = v83;\n                    v55 = v84;\n                    v57 = v69;\n                    goto lab_0x40fdc0;\n                }\n            } else {\n                // 0x410003\n                mem2 = malloc(size);\n                v70 = (int64_t)mem2;\n                int64_t v87 = v45; // 0x410016\n                if (mem2 == NULL) {\n                    // 0x4105b4\n                    free(mem);\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    goto lab_0x40f960_9;\n                }\n                v61 = v83;\n                v62 = v82;\n                int128_t v88 = v54;\n                memset(mem2, 0, 8 * (int32_t)v62);\n                v71 = __asm_pxor(v88, v88);\n                __asm_movaps(v71);\n                v67 = v69;\n                int64_t v89 = function_40ebe0(v72, v75); // 0x410071\n                free(NULL);\n                int32_t v90 = v89;\n                v58 = v90;\n                v68 = v70;\n                v66 = v61;\n                v76 = v71;\n                v63 = v89;\n                while (v90 == 0) {\n                    // 0x410093\n                    v59 = v87;\n                    if (*mem != 0) {\n                        goto lab_0x4100ed_2;\n                    }\n                    // 0x410099\n                    if (*mem2 != 0) {\n                        goto lab_0x4100ed_2;\n                    }\n                    int64_t v91 = v59; // 0x4100b8\n                    if (v59 == 0) {\n                        goto lab_0x4101a0_2;\n                    }\n                    int64_t v92; // 0x40ef10\n                    int64_t v93; // 0x40ef10\n                    int64_t v94; // 0x4100be\n                    while (true) {\n                        // 0x4100be\n                        v92 = v91;\n                        v93 = v92 - 1;\n                        v94 = *(int64_t *)(8 * v93 + v43);\n                        if (v94 != 0) {\n                            // 0x4100c7\n                            if ((*(char *)(v94 + 104) & 16) != 0) {\n                                // break -> 0x4100cd\n                                break;\n                            }\n                        }\n                        // 0x4100b0\n                        v91 = v93;\n                        if (v93 == 0) {\n                            goto lab_0x4101a0_2;\n                        }\n                    }\n                    int64_t v95 = function_40a550(&v3, *(int64_t *)(v94 + 16), v94 + 24, v93); // 0x4100e0\n                    v87 = v93;\n                    v61 = v95;\n                    v62 = v92;\n                    v88 = v71;\n                    memset(mem2, 0, 8 * (int32_t)v62);\n                    v71 = __asm_pxor(v88, v88);\n                    __asm_movaps(v71);\n                    v67 = v69;\n                    v89 = function_40ebe0(v72, v75);\n                    free(NULL);\n                    v90 = v89;\n                    v58 = v90;\n                    v68 = v70;\n                    v66 = v61;\n                    v76 = v71;\n                    v63 = v89;\n                }\n                goto lab_0x410572;\n            }\n        }\n    }\n  lab_0x40fbde:;\n    // 0x40fbde\n    int64_t v96; // 0x40ef10\n    int64_t v97 = v96 + 1; // 0x40fbde\n    int64_t v98; // 0x40ef10\n    int64_t v99 = v98; // 0x40fbe6\n    int64_t v100; // 0x40ef10\n    int64_t v101 = v100; // 0x40fbe6\n    int64_t v102; // 0x40ef10\n    int64_t v103 = v102; // 0x40fbe6\n    int64_t v104; // 0x40ef10\n    int64_t v105 = v104; // 0x40fbe6\n    int64_t v106; // 0x40ef10\n    int64_t v107 = v106; // 0x40fbe6\n    int64_t v108 = v97; // 0x40fbe6\n    int64_t v109 = v98; // 0x40fbe6\n    int64_t v110 = v100; // 0x40fbe6\n    int64_t v111 = v102; // 0x40fbe6\n    int64_t v112 = v106; // 0x40fbe6\n    int64_t v113 = v104; // 0x40fbe6\n    int64_t v114 = v106; // 0x40fbe6\n    int64_t v115 = v36; // 0x40fbe6\n    int64_t v116; // 0x40ef10\n    int64_t v117 = v116; // 0x40fbe6\n    int64_t * v118; // 0x40fa70\n    if (v97 >= *v118) {\n        // break -> 0x40ff33\n        goto lab_0x40ff33;\n    }\n    goto lab_0x40fbec;\n  lab_0x40fad0:;\n    // 0x40fad0\n    int64_t v119; // 0x40ef10\n    int64_t v121; // 0x40fbf4\n    int64_t v135 = function_40cd80(v36, a1 + 216, v121, v72, v119); // 0x40fade\n    int64_t v120; // 0x40ef10\n    v98 = v120;\n    v100 = v72;\n    v102 = v121;\n    v104 = v36;\n    int64_t v136; // 0x40ef10\n    v106 = v136;\n    v116 = v121;\n    int64_t v137; // 0x40ef10\n    int64_t v138; // 0x40ef10\n    int64_t v139; // 0x40ef10\n    int64_t v140; // 0x40ef10\n    int32_t v141; // bp-388, 0x40ef10\n    int64_t v142; // 0x40fb3e\n    int64_t * v143; // 0x40f082\n    int32_t v127; // 0x40ef10\n    int64_t v144; // 0x40ef10\n    if ((int32_t)v135 == 0) {\n        goto lab_0x40fbde;\n    } else {\n        int64_t v145 = (0x100000000 * v135 >> 32) + v136; // 0x40faee\n        int32_t v146 = function_407bd0(v72, v145);\n        v141 = v146;\n        v27 = v146;\n        v31 = v120;\n        v34 = v119;\n        v38 = v121;\n        if (v146 != 0) {\n            goto lab_0x40fec8_3;\n        }\n        int64_t v147 = 8 * v145; // 0x40fb36\n        v142 = v147 + v43;\n        int64_t v148 = *v8 + 24 * *(int64_t *)(*v143 + 8 * v121); // 0x40fb4e\n        int64_t * v149 = (int64_t *)v142; // 0x40fb52\n        int64_t v150 = *v149; // 0x40fb52\n        if (v150 == 0) {\n            // 0x40fc70\n            v67 = __asm_movaps(__asm_movdqu(*(int128_t *)v148));\n            int64_t v151 = *(int64_t *)(v148 + 16); // 0x40fc83\n            int64_t v152 = function_40a330(v72, v145 - 1, v127); // 0x40fc96\n            int64_t v153 = v152 & 0xffffffff; // 0x40fcae\n            int64_t v154 = function_4098b0((int128_t *)&v141, a1, &v67, (int32_t)v152); // 0x40fcb0\n            *v149 = v154;\n            v98 = v151;\n            v100 = v153;\n            v102 = v43;\n            v104 = v144;\n            v106 = v136;\n            v116 = v147;\n            v140 = v151;\n            v138 = v153;\n            v139 = v144;\n            v137 = v147;\n            if (v154 != 0) {\n                goto lab_0x40fbde;\n            } else {\n                goto lab_0x40fcd0;\n            }\n        } else {\n            int64_t v155 = function_409720(&v67, *(int64_t *)(v150 + 80), v148, v72); // 0x40fb6a\n            int32_t v156 = v155;\n            v141 = v156;\n            v27 = v156;\n            v31 = v120;\n            v34 = v142;\n            v38 = v147;\n            if (v156 != 0) {\n                goto lab_0x40fec8_3;\n            }\n            int64_t v157 = function_40a330(v72, v145 - 1, v127); // 0x40fb8c\n            int64_t v158 = v157 & 0xffffffff; // 0x40fba4\n            int64_t v159 = function_4098b0((int128_t *)&v141, a1, &v67, (int32_t)v157); // 0x40fbae\n            *v149 = v159;\n            free((int64_t *)v120);\n            v98 = v120;\n            v100 = v158;\n            v102 = v43;\n            v104 = v120;\n            v106 = v136;\n            v116 = v142;\n            v140 = v120;\n            v138 = v158;\n            v139 = v120;\n            v137 = v142;\n            if (*v149 == 0) {\n                goto lab_0x40fcd0;\n            } else {\n                goto lab_0x40fbde;\n            }\n        }\n    }\n  lab_0x40fab1:;\n    // 0x40fab1\n    int64_t v132; // 0x40ef10\n    int64_t v160 = v132;\n    v98 = v120;\n    int64_t v129; // 0x40fc44\n    v100 = v129;\n    v102 = v160;\n    v104 = v72;\n    v106 = v119;\n    v116 = v121;\n    uint64_t v125; // 0x40fc08\n    uint64_t v126; // 0x40fc2e\n    int64_t v128; // 0x40fc3f\n    if ((v125 & 0x2000) != 0 == (v126 & 2) == 0) {\n        goto lab_0x40fbde;\n    } else {\n        uint32_t v161 = (int32_t)v128 & 128; // 0x40fabe\n        if (v161 == 0) {\n            goto lab_0x40fad0;\n        } else {\n            // 0x40fac6\n            v98 = v120;\n            v100 = v161;\n            v102 = v160;\n            v104 = v72;\n            v106 = v119;\n            v116 = v121;\n            if ((v126 & 8) == 0) {\n                goto lab_0x40fbde;\n            } else {\n                goto lab_0x40fad0;\n            }\n        }\n    }\n  lab_0x40fcd0:\n    // 0x40fcd0\n    v98 = v140;\n    v100 = v138;\n    v102 = v43;\n    v104 = v139;\n    v106 = v136;\n    v116 = v137;\n    v27 = v141;\n    v31 = v140;\n    v34 = v142;\n    v38 = v137;\n    if (v141 != 0) {\n        goto lab_0x40fec8_3;\n    }\n    goto lab_0x40fbde;\n  lab_0x40f943_2:\n    // 0x40f943\n    v23 = v40;\n    int64_t v162; // 0x40f495\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v163; // 0x40ef10\n    int64_t v164; // 0x40ef10\n    int64_t v165; // 0x40ef10\n    int64_t v166; // 0x410307\n    if (v11 != 0) {\n        // 0x4102e8\n        v165 = a8 + 16;\n        v166 = 16 * v11 + a8;\n        v163 = v165;\n        if (v11 < 2) {\n            // 0x4105f4\n            *(int64_t *)a8 = 0;\n            *(int64_t *)(a8 + 8) = v65;\n            v164 = 0;\n            goto lab_0x4103c2;\n        } else {\n            goto lab_0x410320;\n        }\n    } else {\n        goto lab_0x40f960_9;\n    }\n  lab_0x410118:\n    // 0x410118\n    free((int64_t *)v43);\n    v65 = v60;\n    v64 = v69;\n    goto lab_0x40f943_2;\n  lab_0x4100ed_2:;\n    int64_t v167 = function_409da0(a1, v69, v70, v62); // 0x4100fb\n    free(mem2);\n    int32_t v168 = v167;\n    v60 = v59;\n    v58 = v168;\n    v68 = 0;\n    v66 = v61;\n    v76 = v71;\n    v63 = v167;\n    if (v168 != 0) {\n        goto lab_0x410572;\n    } else {\n        goto lab_0x410118;\n    }\n  lab_0x4101a0_2:\n    // 0x4101a0\n    free(mem);\n    free(mem2);\n    function_408270(&v3);\n    int32_t v169 = v51; // 0x4101c0\n    int64_t v170 = v61; // 0x4101c0\n    int128_t v171 = v71; // 0x4101c0\n    int64_t v172; // bp-384, 0x40ef10\n    int64_t v173 = v172; // 0x4101c0\n    int64_t v174 = v49; // 0x4101c0\n    int64_t v175 = v47; // 0x4101c0\n    int64_t v176 = v69; // 0x4101c0\n    goto lab_0x40fdd0;\n  lab_0x40f684:;\n    // 0x40f684\n    int64_t v298; // 0x40ef10\n    int64_t v469 = v298;\n    int64_t v297; // 0x40ef10\n    int64_t v470 = v297;\n    int64_t v296; // 0x40ef10\n    int64_t v471 = v296;\n    int64_t v293; // 0x40ef10\n    int64_t v472 = v293;\n    int64_t v291; // 0x40ef10\n    int64_t v473 = v291;\n    int64_t v294; // 0x40ef10\n    int32_t v474 = (int32_t)v294 + 1; // 0x40f688\n    int64_t v326; // 0x40ef10\n    int64_t v475 = (int64_t)*(char *)(v294 + v326); // 0x40f698\n    int64_t v282; // 0x40ef10\n    int64_t * v476 = (int64_t *)(v282 + 88); // 0x40f69c\n    int64_t v477 = *v476; // 0x40f69c\n    int64_t v295; // 0x40ef10\n    int64_t v478 = v295; // 0x40f6a3\n    int64_t v479 = v477; // 0x40f6a3\n    int64_t v480; // 0x40ef10\n    int64_t v292; // 0x40ef10\n    int64_t v481; // 0x40ef10\n    int64_t v482; // 0x40ef10\n    int64_t v347; // 0x40ef10\n    if (v477 == 0) {\n        int64_t v483 = v292;\n        int64_t v484 = *(int64_t *)(v282 + 96); // 0x40fce8\n        while (v484 == 0) {\n            // 0x40fee0\n            if ((char)function_40b040(a1, v282, v472, v483, v471) == 0) {\n                // 0x40fef8\n                v28 = 12;\n                v30 = v474;\n                v32 = v473;\n                v33 = 0;\n                v35 = v471;\n                v37 = v470;\n                v39 = v469;\n                v23 = v40;\n                v26 = 12;\n                v25 = v41;\n                v24 = v42;\n                v22 = 0;\n                if (v43 != 0) {\n                    goto lab_0x40f6b8;\n                } else {\n                    goto lab_0x40f960_9;\n                }\n            }\n            int64_t v485 = *v476; // 0x40f69c\n            v478 = a1;\n            v479 = v485;\n            if (v485 != 0) {\n                goto lab_0x40f6a9;\n            }\n            v484 = *(int64_t *)(v282 + 96);\n        }\n        int64_t v486 = v484 + 8 * v475;\n        int64_t v487 = function_40a330(v72, (int64_t)v474 - 1, v127) % 2 == 0 ? v486 : v486 + 2048;\n        v482 = v347;\n        v480 = v487;\n        v481 = v72;\n    } else {\n      lab_0x40f6a9:\n        // 0x40f6a9\n        v482 = v472;\n        v480 = v479 + 8 * v475;\n        v481 = v478;\n    }\n    int64_t v488 = *(int64_t *)v480;\n    v30 = v474;\n    v32 = v473;\n    v33 = v488;\n    v35 = v471;\n    v37 = v470;\n    v39 = v469;\n    int32_t v489 = v474; // 0x40f6b6\n    int64_t v490 = v473; // 0x40f6b6\n    int64_t v491 = v482; // 0x40f6b6\n    int64_t v492 = v488; // 0x40f6b6\n    int64_t v493 = v481; // 0x40f6b6\n    int64_t v494 = v471; // 0x40f6b6\n    int64_t v495 = v470; // 0x40f6b6\n    int64_t v496 = v469; // 0x40f6b6\n    if (v43 == 0) {\n        goto lab_0x40f6ce;\n    } else {\n        goto lab_0x40f6b8;\n    }\n  lab_0x40fa70:;\n    // 0x40fa70\n    int64_t v300; // 0x40ef10\n    int64_t v497 = v300;\n    int64_t v299; // 0x40ef10\n    int64_t v498 = v299;\n    v118 = (int64_t *)(v282 + 16);\n    int64_t v277; // 0x40ef10\n    v109 = v277;\n    int64_t v284; // 0x40f649\n    v110 = v284;\n    int64_t v278; // 0x40ef10\n    v111 = v278;\n    v112 = v498;\n    v113 = v497;\n    int64_t v280; // 0x40ef10\n    v114 = v280;\n    int64_t v281; // 0x40ef10\n    v115 = v281;\n    int64_t v283; // 0x40ef10\n    v117 = v283;\n    if (*v118 >= 1) {\n        int64_t * v122 = (int64_t *)(v282 + 24); // 0x40fbec\n        v136 = v29;\n        v99 = v277;\n        v101 = v284;\n        v103 = v278;\n        v105 = v497;\n        v107 = v498;\n        v108 = 0;\n        while (true) {\n          lab_0x40fbec:\n            // 0x40fbec\n            v96 = v108;\n            v119 = v107;\n            v36 = v105;\n            v120 = v99;\n            v121 = *(int64_t *)(*v122 + 8 * v96);\n            int64_t v123 = 16 * v121 + v36; // 0x40fbff\n            v98 = v120;\n            v100 = v101;\n            v102 = v103;\n            v104 = v36;\n            v106 = v119;\n            v116 = v121;\n            if ((*(char *)(v123 + 10) & 16) == 0) {\n                goto lab_0x40fbde;\n            } else {\n                uint32_t v124 = *(int32_t *)(v123 + 8); // 0x40fc08\n                if ((v124 & 0x3ff00) == 0) {\n                    goto lab_0x40fad0;\n                } else {\n                    // 0x40fc17\n                    v125 = (int64_t)v124;\n                    v126 = function_40a330(v72, v119, v127);\n                    v128 = v125 / 256;\n                    v129 = v128 & 0xff03ff;\n                    if ((v125 & 1024) != 0) {\n                        // 0x40faa0\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v128;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v126 % 2 == 0) {\n                            goto lab_0x40fbde;\n                        } else {\n                            uint32_t v130 = (int32_t)v128 & 8; // 0x40faa8\n                            int64_t v131 = v130; // 0x40faa8\n                            v132 = v131;\n                            v98 = v120;\n                            v100 = v129;\n                            v102 = v131;\n                            v104 = v72;\n                            v106 = v119;\n                            v116 = v121;\n                            if (v130 != 0) {\n                                goto lab_0x40fbde;\n                            } else {\n                                goto lab_0x40fab1;\n                            }\n                        }\n                    } else {\n                        uint32_t v133 = (int32_t)v128 & 8; // 0x40fc52\n                        int64_t v134 = v133; // 0x40fc52\n                        v132 = v134;\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v134;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v133 == 0 || v126 % 2 == 0) {\n                            goto lab_0x40fab1;\n                        } else {\n                            goto lab_0x40fbde;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40ff33:\n    // 0x40ff33\n    v28 = 0;\n    v291 = v109;\n    v292 = v110;\n    v293 = v111;\n    v294 = v112;\n    v295 = v113;\n    v296 = v114;\n    v297 = v115;\n    v298 = v117;\n    goto lab_0x40f684;\n  lab_0x40f6ce:;\n    int64_t v499 = v496;\n    int64_t v500 = v495;\n    int64_t v501 = v494;\n    int64_t v502 = v490;\n    int32_t v503 = v489;\n    int32_t v504 = v503; // 0x40f6d1\n    int64_t v505 = v491; // 0x40f6d1\n    int64_t v506 = v492; // 0x40f6d1\n    int64_t v507 = v493; // 0x40f6d1\n    int64_t v265; // 0x40ef10\n    int64_t v263; // 0x40ef10\n    int64_t v264; // 0x40ef10\n    int32_t v261; // 0x40ef10\n    int64_t v262; // 0x40ef10\n    int64_t v260; // 0x40ef10\n    int64_t v276; // 0x40ef10\n    int64_t v259; // 0x40ef10\n    int64_t v275; // 0x40ef10\n    int64_t v274; // 0x40ef10\n    int32_t v258; // 0x40ef10\n    int32_t v272; // 0x40ef10\n    int64_t v348; // 0x40ef10\n    char v349; // 0x40ef10\n    if (v492 == 0) {\n        // 0x40f6d7\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 != 0) {\n            // break (via goto) -> 0x40f960\n            goto lab_0x40f960_9;\n        }\n        // 0x40f6ee\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v503;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v43 == 0) {\n            // break -> 0x40f74d\n            goto lab_0x40f74d_6;\n        }\n        int32_t v508 = v503; // 0x40f706\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v503;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if ((v349 & (char)v274) != 0) {\n            // break -> 0x40f74d\n            goto lab_0x40f74d_6;\n        }\n        int32_t v509 = v508;\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v509;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v509 > -1) {\n            // break (via goto) -> 0x40f74d\n            goto lab_0x40f74d_6;\n        }\n        int64_t v510 = (int64_t)v509 + 1;\n        int64_t v511; // 0x40f733\n        while (*(int64_t *)(8 * v510 + v43) == 0) {\n            // 0x40f733\n            v511 = v510 + 1;\n            v258 = v272;\n            v259 = v275;\n            v260 = v276;\n            v261 = 0;\n            v262 = v502;\n            v263 = v501;\n            v264 = v500;\n            v265 = v499;\n            if (v511 > 0) {\n                // break (via goto) -> 0x40f74d\n                goto lab_0x40f74d_6;\n            }\n            v510 = v511;\n        }\n        int64_t v512 = function_40ea20(&v28, &v3, 0); // 0x40f9b5\n        uint32_t v513 = v28; // 0x40f9ba\n        int32_t v514 = v510;\n        while (v513 == 0) {\n            // 0x40f9c5\n            v508 = v514;\n            if (v512 != 0) {\n                // 0x40f5e0\n                v504 = v514;\n                v505 = v513;\n                v506 = v512;\n                v507 = v348;\n                goto lab_0x40f5e0_2;\n            }\n            v509 = v508;\n            v258 = v272;\n            v259 = v275;\n            v260 = v276;\n            v261 = v509;\n            v262 = v502;\n            v263 = v501;\n            v264 = v500;\n            v265 = v499;\n            if (v509 > -1) {\n                // break (via goto) -> 0x40f74d\n                goto lab_0x40f74d_6;\n            }\n            // 0x40f720\n            v510 = (int64_t)v509 + 1;\n            while (*(int64_t *)(8 * v510 + v43) == 0) {\n                // 0x40f733\n                v511 = v510 + 1;\n                v258 = v272;\n                v259 = v275;\n                v260 = v276;\n                v261 = 0;\n                v262 = v502;\n                v263 = v501;\n                v264 = v500;\n                v265 = v499;\n                if (v511 > 0) {\n                    // break (via goto) -> 0x40f74d\n                    goto lab_0x40f74d_6;\n                }\n                v510 = v511;\n            }\n            // 0x40f9a0\n            v512 = function_40ea20(&v28, &v3, 0);\n            v513 = v28;\n            v514 = v510;\n        }\n        // 0x40f9e0\n        v504 = v514;\n        v505 = v513;\n        v506 = v512;\n        v507 = v348;\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v514;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v512 == 0) {\n            // break -> 0x40f74d\n            goto lab_0x40f74d_6;\n        }\n    }\n    goto lab_0x40f5e0_2;\n  lab_0x40f6b8:;\n    int64_t v564 = function_40ea20(&v28, &v3, v33); // 0x40f6c6\n    v489 = v30;\n    v490 = v32;\n    v491 = v33;\n    v492 = v564;\n    v493 = v348;\n    v494 = v35;\n    v495 = v37;\n    v496 = v39;\n    goto lab_0x40f6ce;\n  lab_0x40f5e0_2:;\n    int64_t v515 = v507;\n    int64_t v516 = v506;\n    int64_t v517 = v505;\n    int32_t v518 = v504;\n    int64_t v519 = v518; // 0x40f5e3\n    char v520 = *(char *)(v516 + 104); // 0x40f605\n    int64_t v521 = v274; // 0x40f60b\n    int64_t v522 = v275; // 0x40f60b\n    int64_t v523 = v276; // 0x40f60b\n    int64_t v524 = v517; // 0x40f60b\n    int64_t v525 = v515; // 0x40f60b\n    int64_t v526; // 0x40ef10\n    int64_t v527; // 0x40ef10\n    if ((v520 & 16) == 0) {\n        goto lab_0x40f638;\n    } else {\n        // 0x40f60d\n        v527 = v517;\n        v526 = v515;\n        if (v520 < 0) {\n            int64_t v528 = v516 + 24; // 0x40fa04\n            int64_t v529 = function_40a550(&v3, *(int64_t *)(v516 + 16), v528, v519); // 0x40fa0e\n            v527 = v528;\n            v526 = v72;\n            v521 = v274;\n            v522 = v275;\n            v523 = v276;\n            v524 = v528;\n            v525 = v72;\n            if (v529 == 0) {\n                goto lab_0x40f638;\n            } else {\n                goto lab_0x40f615;\n            }\n        } else {\n            goto lab_0x40f615;\n        }\n    }\n  lab_0x40f638:;\n    // 0x40f638\n    char v273; // 0x40ef10\n    char v530 = v273 & (char)(v282 == v516); // 0x40f5ee\n    int32_t v531 = v530 == 0 ? (int64_t)v272 : v284;\n    int64_t v243 = v499; // 0x40f643\n    int64_t v244 = v516; // 0x40f643\n    int64_t v245 = v500; // 0x40f643\n    int64_t v246 = v501; // 0x40f643\n    int64_t v247 = v525; // 0x40f643\n    int64_t v248 = v519; // 0x40f643\n    int64_t v249 = v524; // 0x40f643\n    int64_t v250 = v502; // 0x40f643\n    int64_t v252 = v523; // 0x40f643\n    int64_t v253 = v522; // 0x40f643\n    int64_t v254 = v521; // 0x40f643\n    char v255 = v530; // 0x40f643\n    int32_t v256 = v518; // 0x40f643\n    int32_t v257 = v531; // 0x40f643\n    v258 = v531;\n    v259 = v522;\n    v260 = v523;\n    v261 = v518;\n    v262 = v502;\n    v263 = v501;\n    v264 = v500;\n    v265 = v499;\n    if (v519 >= a6) {\n        // break -> 0x40f74d\n        goto lab_0x40f74d_6;\n    }\n    goto lab_0x40f649;\n  lab_0x40f615:\n    // 0x40f615\n    v521 = 1;\n    v522 = v519;\n    v523 = 0;\n    v524 = v527;\n    v525 = v526;\n    v50 = v518;\n    v52 = v502;\n    v48 = v501;\n    v46 = v500;\n    v44 = v519;\n    v56 = v499;\n    int32_t v309; // 0x40ef10\n    if (v309 == 0) {\n        goto lab_0x40f75f;\n    }\n    goto lab_0x40f638;\n  lab_0x40f410:\n    // 0x40f410\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v353; // 0x40ef10\n    int64_t v179; // 0x40f2fc\n    if (v179 > v353) {\n        // break -> 0x40f960\n        goto lab_0x40f960_9;\n    }\n    char v532 = 0;\n    int64_t v533 = v353;\n    int64_t v534 = 0; // 0x40f45f\n    if (v533 < a3) {\n        // 0x40f461\n        v534 = (int64_t)*(char *)(v533 + a2);\n    }\n    int64_t v535 = v534;\n    int64_t v536 = v535; // 0x40f469\n    int64_t v313; // 0x40f07e\n    if (v313 != 0) {\n        // 0x40f46b\n        v536 = (int64_t)*(char *)(v535 + v313);\n    }\n    int64_t v345; // 0x40ef10\n    while (*(char *)(v536 + v345) == 0) {\n        int64_t v537 = v533 - 1; // 0x40f448\n        if (v537 < v179) {\n            // 0x410218\n            v172 = v537;\n            v23 = v40;\n            v26 = 1;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            goto lab_0x40f960_9;\n        }\n        v532 = 1;\n        v533 = v537;\n        v534 = 0;\n        if (v533 < a3) {\n            // 0x40f461\n            v534 = (int64_t)*(char *)(v533 + a2);\n        }\n        // 0x40f466\n        v535 = v534;\n        v536 = v535;\n        if (v313 != 0) {\n            // 0x40f46b\n            v536 = (int64_t)*(char *)(v535 + v313);\n        }\n    }\n    // 0x40f475\n    int32_t v356; // 0x40ef10\n    int32_t v235 = v356; // 0x40f477\n    int64_t v355; // 0x40ef10\n    int64_t v236 = v355; // 0x40f477\n    int128_t v354; // 0x40ef10\n    int128_t v237 = v354; // 0x40f477\n    int64_t v238 = v353; // 0x40f477\n    int64_t v239 = a3; // 0x40f477\n    int64_t v240 = v179; // 0x40f477\n    int64_t v350; // 0x40ef10\n    int64_t v241 = v350; // 0x40f477\n    if (v532 != 0) {\n        // 0x40f479\n        v172 = v533;\n        v235 = v356;\n        v236 = v355;\n        v237 = v354;\n        v238 = v533;\n        v239 = a3;\n        v240 = v179;\n        v241 = v350;\n    }\n    goto lab_0x40f488;\n  lab_0x40f488:;\n    int64_t v538 = v238;\n    v162 = function_40a620(&v3, v538, v127);\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if ((int32_t)v162 != 0) {\n        // break -> 0x40f960\n        goto lab_0x40f960_9;\n    }\n    int64_t v234 = v241;\n    int64_t v233 = v240;\n    int64_t v232 = v239;\n    v54 = v237;\n    int64_t v231 = v236;\n    int32_t v215 = v235;\n    int64_t v285; // 0x40ef10\n    int32_t v339; // 0x40f31f\n    if (v285 == 0 || v339 == 1) {\n        goto lab_0x40f4cc;\n    } else {\n        // 0x40f4bb\n        v169 = v215;\n        v170 = v231;\n        v171 = v54;\n        v173 = v538;\n        v174 = v232;\n        v175 = v233;\n        v176 = v234;\n        int32_t * v539; // 0x40ef10\n        if (*v539 == -1) {\n            goto lab_0x40fdd0;\n        } else {\n            goto lab_0x40f4cc;\n        }\n    }\n  lab_0x40fe0c:;\n    // 0x40fe0c\n    int64_t v191; // 0x40ef10\n    int64_t v540 = v191;\n    uint64_t v541 = v540 - v1; // 0x40fe73\n    int64_t v542; // 0x40fe97\n    if (v285 <= v541) {\n        // 0x40fe85\n        v542 = function_40a620(&v3, v540, v127);\n        v23 = v40;\n        v26 = v542;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if ((int32_t)v542 != 0) {\n            // break (via goto) -> 0x40f960\n            goto lab_0x40f960_9;\n        }\n    }\n    int64_t v543 = v345; // 0x40fe36\n    if (v540 < a3) {\n        // 0x40fe38\n        v543 = (int64_t)*(char *)(v541 + v326) + v345;\n    }\n    // 0x40fe47\n    int32_t v188; // 0x40ef10\n    v235 = v188;\n    int64_t v189; // 0x40ef10\n    v236 = v189;\n    int128_t v190; // 0x40ef10\n    v237 = v190;\n    v238 = v540;\n    int64_t v192; // 0x40ef10\n    v239 = v192;\n    int64_t v193; // 0x40ef10\n    v240 = v193;\n    v241 = v179;\n    int64_t v180; // 0x40f30b\n    int64_t v178; // 0x40ef10\n    while (*(char *)v543 == 0) {\n        int64_t v544 = v540 + v178; // 0x40fe53\n        v172 = v544;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v544 < v179 || v544 > v180) {\n            // break (via goto) -> 0x40f960\n            goto lab_0x40f960_9;\n        }\n        v540 = v544;\n        v541 = v540 - v1;\n        if (v285 <= v541) {\n            // 0x40fe85\n            v542 = function_40a620(&v3, v540, v127);\n            v23 = v40;\n            v26 = v542;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if ((int32_t)v542 != 0) {\n                // break (via goto) -> 0x40f960\n                goto lab_0x40f960_9;\n            }\n        }\n        // 0x40fe30\n        v543 = v345;\n        if (v540 < a3) {\n            // 0x40fe38\n            v543 = (int64_t)*(char *)(v541 + v326) + v345;\n        }\n        // 0x40fe47\n        v235 = v188;\n        v236 = v189;\n        v237 = v190;\n        v238 = v540;\n        v239 = v192;\n        v240 = v193;\n        v241 = v179;\n    }\n    goto lab_0x40f488;\n  lab_0x40f86c:;\n    // 0x40f86c\n    int64_t v358; // 0x40ef10\n    int64_t v545 = v358;\n    int64_t v357; // 0x40ef10\n    int64_t v546 = v357;\n    v235 = v356;\n    v236 = v355;\n    v237 = v354;\n    v238 = v546;\n    v239 = v545;\n    int64_t v351; // 0x40ef10\n    v240 = v351;\n    v241 = v350;\n    char * v346; // 0x40ef10\n    if (v180 == v546) {\n        int64_t v547 = 0; // 0x40f883\n        if (v180 < a3) {\n            // 0x40f885\n            v547 = (int64_t)*v346;\n        }\n        int64_t v548 = v547;\n        int64_t v549 = v548; // 0x40f899\n        if (v313 != 0) {\n            // 0x40f89b\n            v549 = (int64_t)*(char *)(v548 + v313);\n        }\n        // 0x40f89f\n        v235 = v356;\n        v236 = v355;\n        v237 = v354;\n        v238 = v546;\n        v239 = v545;\n        v240 = v351;\n        v241 = v350;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (*(char *)(v549 + v345) == 0) {\n            // break -> 0x40f960\n            goto lab_0x40f960_9;\n        }\n    }\n    goto lab_0x40f488;\n  lab_0x40f4cc:;\n    int64_t v550 = *v13; // 0x40f4f3\n    v28 = 0;\n    int64_t v218 = v347; // 0x40f527\n    int64_t v220 = v72; // 0x40f527\n    int64_t v222 = v550; // 0x40f527\n    int64_t v223; // 0x40ef10\n    int64_t v221; // 0x40ef10\n    int64_t v219; // 0x40ef10\n    if (*(char *)(v550 + 104) >= 0) {\n        goto lab_0x40f570;\n    } else {\n        uint64_t v551 = function_40a330(v72, (int64_t)v215 - 1, v127); // 0x40f537\n        if (v551 % 2 != 0) {\n            // 0x4101c8\n            v219 = v347;\n            v221 = v72;\n            v223 = *v15;\n            goto lab_0x4101cc;\n        } else {\n            int32_t v552 = v551; // 0x40f544\n            v218 = v347;\n            v220 = v72;\n            v222 = v550;\n            if (v552 == 0) {\n                goto lab_0x40f570;\n            } else {\n                int64_t v553 = v551 & 6; // 0x40f54a\n                if (v553 == 6) {\n                    // 0x410560\n                    v219 = 6;\n                    v221 = v72;\n                    v223 = *v19;\n                    goto lab_0x4101cc;\n                } else {\n                    if ((v551 & 2) != 0) {\n                        // 0x410290\n                        v219 = v553;\n                        v221 = v72;\n                        v223 = *v17;\n                        goto lab_0x4101cc;\n                    } else {\n                        // 0x40f55e\n                        v218 = v553;\n                        v220 = v72;\n                        v222 = v550;\n                        if ((v551 & 4) != 0) {\n                            int64_t v554 = *(int64_t *)(v550 + 80); // 0x4102a0\n                            int64_t v555 = function_4098b0((int128_t *)&v28, a1, (int64_t *)v554, v552); // 0x4102b1\n                            v219 = v554;\n                            v221 = v348;\n                            v223 = v555;\n                            goto lab_0x4101cc;\n                        } else {\n                            goto lab_0x40f570;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40f570:;\n    int64_t v198 = v222;\n    int64_t v202 = v220;\n    int64_t v200 = v218;\n    int64_t v242; // 0x40ef10\n    char v197; // 0x40ef10\n    int64_t v201; // 0x40ef10\n    int64_t v199; // 0x40ef10\n    char v196; // 0x40ef10\n    if (v43 == 0) {\n        goto lab_0x40f594;\n    } else {\n        // 0x40f57d\n        *(int64_t *)(8 * (int64_t)v215 + v43) = v198;\n        if (*v40 != 0) {\n            int64_t v556 = v198 + 16; // 0x410518\n            int64_t v557 = v198 + 24; // 0x41051c\n            int64_t v558 = function_40a1e0(v72, v556, v557, 0); // 0x41052b\n            int32_t v559 = v558; // 0x410530\n            v28 = v559;\n            v242 = v558;\n            if (v559 != 0) {\n                goto lab_0x41061e;\n            } else {\n                char * v560 = (char *)(v198 + 104); // 0x41053f\n                char v561 = *v560; // 0x41053f\n                v196 = 0;\n                v197 = v561;\n                v199 = v557;\n                v201 = v72;\n                if ((v561 & 64) != 0) {\n                    int64_t v562 = function_40e1a0(v72, v556, v557); // 0x4105da\n                    int32_t v563 = v562; // 0x4105df\n                    v28 = v563;\n                    v242 = v562;\n                    if (v563 != 0) {\n                        goto lab_0x41061e;\n                    } else {\n                        // 0x4105ea\n                        v196 = 0;\n                        v197 = *v560;\n                        v199 = v557;\n                        v201 = v72;\n                        goto lab_0x40f5a8;\n                    }\n                } else {\n                    goto lab_0x40f5a8;\n                }\n            }\n        } else {\n            goto lab_0x40f594;\n        }\n    }\n  lab_0x40fdd0:;\n    int64_t v177 = v173 + v178; // 0x40fdd8\n    v172 = v177;\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v177 < v179 || v177 > v180) {\n        // break -> 0x40f960\n        goto lab_0x40f960_9;\n    }\n    int32_t v181 = v169; // 0x40fe06\n    int64_t v182 = v170; // 0x40fe06\n    int128_t v183 = v171; // 0x40fe06\n    int64_t v184 = v177; // 0x40fe06\n    int64_t v185 = v174; // 0x40fe06\n    int64_t v186 = v175; // 0x40fe06\n    int64_t v187 = v176; // 0x40fe06\n    v188 = v169;\n    v189 = v170;\n    v190 = v171;\n    v191 = v177;\n    v192 = v174;\n    v193 = v175;\n    int32_t v194; // 0x40ef10\n    if (v194 < 9) {\n        goto lab_0x40f3d8;\n    } else {\n        goto lab_0x40fe0c;\n    }\n  lab_0x40f594:;\n    // 0x40f594\n    char v195; // 0x40f3b6\n    v196 = v195;\n    v197 = *(char *)(v198 + 104);\n    v199 = v200;\n    v201 = v202;\n    goto lab_0x40f5a8;\n  lab_0x40f5a8:;\n    int64_t v203 = v201;\n    int64_t v204 = v199;\n    char v205 = v196;\n    int64_t v206; // 0x40ef10\n    int64_t v207; // 0x40ef10\n    int64_t v208; // 0x40ef10\n    int64_t v209; // 0x40ef10\n    int64_t v210; // 0x40ef10\n    int64_t v211; // 0x40ef10\n    int64_t v212; // 0x40ef10\n    int64_t v213; // 0x40ef10\n    if ((v197 & 16) != 0) {\n        // 0x410238\n        if (*(char *)(v198 + 104) < 0) {\n            int64_t v214 = v215;\n            int64_t v216 = v198 + 24; // 0x4102c9\n            int64_t v217 = function_40a550(&v3, *(int64_t *)(v198 + 16), v216, v214); // 0x4102d0\n            v206 = v214;\n            v213 = 0;\n            v212 = v216;\n            v210 = v72;\n            v208 = -1;\n            v207 = v214;\n            v211 = v216;\n            v209 = v72;\n            if (v217 == 0) {\n                goto lab_0x40f5c0;\n            } else {\n                goto lab_0x410243;\n            }\n        } else {\n            // 0x410238\n            v207 = v215;\n            v211 = v204;\n            v209 = v203;\n            goto lab_0x410243;\n        }\n    } else {\n        // 0x40f5a8\n        v206 = v215;\n        v213 = 0;\n        v212 = v204;\n        v210 = v203;\n        v208 = -1;\n        goto lab_0x40f5c0;\n    }\n  lab_0x4101cc:\n    // 0x4101cc\n    v218 = v219;\n    v220 = v221;\n    v222 = v223;\n    int64_t v224; // 0x40ef10\n    int64_t v225; // 0x40ef10\n    int64_t v226; // 0x40ef10\n    int64_t v227; // 0x40ef10\n    int32_t v228; // 0x40ef10\n    int64_t v229; // 0x40ef10\n    int128_t v230; // 0x40ef10\n    if (v223 != 0) {\n        goto lab_0x40f570;\n    } else {\n        // 0x4101d5\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 == 12) {\n            // break -> 0x40f960\n            goto lab_0x40f960_9;\n        }\n        // 0x4101e9\n        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1073, \"check_matching\");\n        v228 = v215;\n        v229 = v231;\n        v230 = v54;\n        v227 = a1;\n        v225 = v232;\n        v226 = v233;\n        v224 = v234;\n      lab_0x410208_2:\n        // 0x410208\n        v172 = v227;\n        v235 = v228;\n        v236 = v229;\n        v237 = v230;\n        v238 = v227;\n        v239 = v225;\n        v240 = v226;\n        v241 = v224;\n        goto lab_0x40f488;\n    }\n  lab_0x41061e:\n    // 0x41061e\n    v50 = v215;\n    v52 = v231;\n    v48 = v232;\n    v46 = v233;\n    v44 = 0x100000000 * v242 >> 32;\n    v56 = v234;\n    goto lab_0x40f75f;\n  lab_0x40f5c0:\n    // 0x40f5c0\n    v243 = v234;\n    v244 = v198;\n    v245 = v233;\n    v246 = v232;\n    v247 = v210;\n    v248 = v206;\n    v249 = v212;\n    v250 = v231;\n    int64_t v251; // 0x40f3a7\n    v252 = v251;\n    v253 = v208;\n    v254 = v213;\n    v255 = v205;\n    v256 = v215;\n    v257 = v215;\n    v258 = v215;\n    v259 = v208;\n    v260 = v251;\n    v261 = v215;\n    v262 = v231;\n    v263 = v232;\n    v264 = v233;\n    v265 = v234;\n    int64_t v266; // 0x40ef10\n    int64_t v267; // bp-576, 0x40ef10\n    int32_t v268; // bp-688, 0x40ef10\n    int32_t result; // bp-692, 0x40ef10\n    int64_t v269; // 0x4106ae\n    int64_t v270; // 0x410723\n    int64_t * v271; // 0x410723\n    if (v206 < a6) {\n        while (true) {\n          lab_0x40f649:\n            // 0x40f649\n            v272 = v257;\n            v29 = v256;\n            v273 = v255;\n            v274 = v254;\n            v275 = v253;\n            v276 = v252;\n            v277 = v250;\n            v278 = v249;\n            int64_t v279 = v248;\n            v280 = v246;\n            v281 = v245;\n            v282 = v244;\n            v283 = v243;\n            v284 = v279 + 1;\n            if (v2 < a3 == v284 >= v2 || v285 < a3 == v284 >= v285) {\n                int32_t v286 = function_407a80(v72, v279 + 2 & 0xffffffff);\n                v28 = v286;\n                if (v286 != 0) {\n                    // 0x40ff58\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    if (v286 != 12) {\n                        // 0x41064d\n                        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1128, \"check_matching\");\n                        v267 = v283;\n                        v269 = *(int64_t *)0x40835000002340;\n                        result = 0;\n                        if (v269 == 0) {\n                            int64_t v287 = function_409bb0(&result, 0x40840800000000, (int64_t *)\"check_matching\", 0x40835000002340, v280, v281); // 0x410b6b\n                            *(int64_t *)0x656765722f628cac = v287;\n                            // 0x4106e9\n                            return result;\n                        }\n                        // 0x410700\n                        v268 = 0;\n                        int64_t v288 = function_409bb0(&v268, 0x40840800000000, (int64_t *)\"check_matching\", 0x40835000002340, v280, v281); // 0x410713\n                        uint32_t result2 = v268; // 0x41071b\n                        if (result2 != 0) {\n                            // 0x4106e9\n                            return result2;\n                        }\n                        // 0x410723\n                        v270 = v288 + 56;\n                        v271 = (int64_t *)v270;\n                        int64_t v289 = *v271; // 0x410723\n                        if (v289 != 0) {\n                            goto lab_0x4107b0;\n                        } else {\n                            // 0x410735\n                            *(int64_t *)(v288 + 64) = 0;\n                            *v271 = 0x676e69686374;\n                            int64_t * mem3 = malloc(0x4b431ba0); // 0x410749\n                            *(int64_t *)(v288 + 72) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x4106e9\n                                return 12;\n                            }\n                            // 0x410757\n                            v268 = 0;\n                            v266 = v289;\n                            goto lab_0x41077a;\n                        }\n                    } else {\n                        goto lab_0x40f960_9;\n                    }\n                }\n                int64_t v290 = v29; // 0x40fa54\n                v291 = v277;\n                v292 = v284;\n                v293 = v278;\n                v294 = v290;\n                v295 = v72;\n                v296 = v280;\n                v297 = v281;\n                v298 = v283;\n                v299 = v290;\n                v300 = v72;\n                if ((*(char *)(v282 + 104) & 32) == 0) {\n                    goto lab_0x40f684;\n                } else {\n                    goto lab_0x40fa70;\n                }\n            } else {\n                // 0x40f679\n                v291 = v277;\n                v292 = v284;\n                v293 = v278;\n                v294 = v279;\n                v295 = v247;\n                v296 = v280;\n                v297 = v281;\n                v298 = v283;\n                v299 = v279;\n                v300 = v247;\n                if ((*(char *)(v282 + 104) & 32) != 0) {\n                    goto lab_0x40fa70;\n                } else {\n                    goto lab_0x40f684;\n                }\n            }\n        }\n    }\n  lab_0x40f74d_6:;\n    int64_t v301 = v265;\n    int64_t v302 = v264;\n    int64_t v303 = v263;\n    int64_t v304 = v262;\n    int32_t v305 = v261;\n    int64_t v306 = v260;\n    int64_t v307 = v259;\n    v50 = v305;\n    v52 = v304;\n    v48 = v303;\n    v46 = v302;\n    v44 = v307;\n    v56 = v301;\n    if (v306 != 0) {\n        int64_t * v308 = (int64_t *)v306; // 0x40f75c\n        *v308 = *v308 + (int64_t)v258;\n        v50 = v305;\n        v52 = v304;\n        v48 = v303;\n        v46 = v302;\n        v44 = v307;\n        v56 = v301;\n    }\n    goto lab_0x40f75f;\n  lab_0x410243:\n    // 0x410243\n    v206 = v207;\n    v213 = 1;\n    v212 = v211;\n    v210 = v209;\n    v208 = v207;\n    v50 = v215;\n    v52 = v231;\n    v48 = v232;\n    v46 = v233;\n    v44 = v207;\n    v56 = v234;\n    if (v309 != 0) {\n        goto lab_0x40f5c0;\n    } else {\n        goto lab_0x40f75f;\n    }\n  lab_0x40fdc0:\n    // 0x40fdc0\n    function_408270(&v3);\n    v169 = v51;\n    v170 = v53;\n    v171 = v55;\n    v173 = v172;\n    v174 = v49;\n    v175 = v47;\n    v176 = v57;\n    goto lab_0x40fdd0;\n  lab_0x410572:\n    // 0x410572\n    free(mem);\n    free((int64_t *)v68);\n    v53 = v66;\n    v55 = v76;\n    v57 = v69;\n    if (v58 != 1) {\n        // 0x40f960\n        v23 = v40;\n        v26 = v63 & 0xffffffff;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        goto lab_0x40f960_9;\n    }\n    goto lab_0x40fdc0;\n  lab_0x40f058:;\n    int64_t v310 = v21;\n    int64_t v311 = v20;\n    int32_t v312 = 1; // 0x40f069\n    if (v11 == 0) {\n        // 0x40f3e0\n        v312 = *(int64_t *)(a1 + 152) != 0;\n    }\n    // 0x40f06f\n    v313 = *(int64_t *)(a1 + 40);\n    v143 = (int64_t *)(a1 + 24);\n    int32_t * v314 = (int32_t *)(a1 + 180); // 0x40f086\n    int64_t v315 = v12 + 1; // 0x40f09d\n    int64_t v316 = (int64_t)*v314; // 0x40f0a6\n    int64_t v317 = v315 - v316; // 0x40f0a9\n    int64_t v318 = v317 < 0 == ((v317 ^ v315) & (v315 ^ v316)) < 0 ? v315 : v316; // 0x40f0b4\n    int64_t v319 = a3 + 1; // 0x40f0b8\n    int64_t v320 = v318 - v319; // 0x40f0cc\n    int64_t v321 = v320 < 0 == ((v320 ^ v318) & (v318 ^ v319)) < 0 == (v320 != 0) ? v319 : v318; // 0x40f0d7\n    v3 = a2;\n    v72 = &v3;\n    int64_t v322 = function_406ee0(v72, v321); // 0x40f13c\n    int64_t v323; // 0x40ef10\n    int64_t v324; // 0x40ef10\n    int64_t v325; // 0x40ef10\n    if ((int32_t)v322 != 0) {\n        // 0x40f06f\n        v23 = (int64_t *)(a1 + 152);\n        v26 = v322;\n        goto lab_0x40f960_9;\n    } else {\n        // 0x40f14d\n        v309 = v312;\n        if ((*v143 & 0x400000 || v313) != 0) {\n            goto lab_0x40f1a3;\n        } else {\n            // 0x40f183\n            v323 = a2;\n            v324 = a2;\n            v325 = a3;\n            if (*v314 < 2) {\n                goto lab_0x40f1a5;\n            } else {\n                goto lab_0x40f1a3;\n            }\n        }\n    }\n  lab_0x40f1a3:\n    // 0x40f1a3\n    v324 = v323;\n    v325 = 0;\n    goto lab_0x40f1a5;\n  lab_0x40f03a:\n    // 0x40f03a\n    v20 = 0;\n    v21 = 0;\n    if (a4 != 0 == (a5 != 0)) {\n        // 0x40f980\n        return 1;\n    }\n    goto lab_0x40f058;\n  lab_0x40f1a5:\n    // 0x40f1a5\n    v285 = v325;\n    v326 = v324;\n    v40 = (int64_t *)(a1 + 152);\n    int64_t v327 = *v40; // 0x40f1e1\n    int64_t v328 = 2 * v327; // 0x40f1fb\n    int64_t v329; // 0x40ef10\n    int64_t v330; // 0x40ef10\n    if (v328 < 1) {\n        goto lab_0x40f25c;\n    } else {\n        // 0x40f20b\n        v23 = v40;\n        v26 = 12;\n        if (v328 > 0x666666666666666) {\n            goto lab_0x40f960_9;\n        } else {\n            int32_t v331 = v327;\n            int64_t * mem4 = malloc(80 * v331); // 0x40f226\n            int64_t v332 = (int64_t)mem4; // 0x40f226\n            int64_t * mem5 = malloc(16 * v331); // 0x40f23d\n            int64_t v333 = (int64_t)mem5; // 0x40f23d\n            v330 = v332;\n            v329 = v333;\n            v23 = v40;\n            v26 = 12;\n            v25 = v332;\n            v24 = v333;\n            if (mem4 == NULL || mem5 == NULL) {\n                goto lab_0x40f960_9;\n            } else {\n                goto lab_0x40f25c;\n            }\n        }\n    }\n  lab_0x40f25c:\n    // 0x40f25c\n    v42 = v329;\n    v41 = v330;\n    int64_t v334; // 0x40ef10\n    if (v11 < 2) {\n        // 0x410150\n        v334 = 0;\n        if ((*(char *)(a1 + 176) & 2) != 0) {\n            goto lab_0x40f286;\n        } else {\n            goto lab_0x40f2c2;\n        }\n    } else {\n        goto lab_0x40f286;\n    }\n  lab_0x40f286:\n    // 0x40f286\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    if (v2 < 0x1fffffffffffffff) {\n        // 0x40f2a1\n        g94 = &v267;\n        int64_t * mem6 = malloc(8 * (int32_t)v2 + 8); // 0x40f2a9\n        int64_t v335 = (int64_t)mem6; // 0x40f2a9\n        v334 = v335;\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v335;\n        if (mem6 == NULL) {\n            goto lab_0x40f960_9;\n        } else {\n            goto lab_0x40f2c2;\n        }\n    } else {\n        goto lab_0x40f960_9;\n    }\n  lab_0x40f2c2:\n    // 0x40f2c2\n    v43 = v334;\n    v172 = v311;\n    int64_t v336 = v311 - v310; // 0x40f2e8\n    bool v337 = v336 == 0 | v336 < 0 != ((v336 ^ v311) & (v310 ^ v311)) < 0;\n    int32_t v338 = v337; // 0x40f2eb\n    v339 = *v314;\n    int32_t v340 = 8; // 0x40f331\n    if (v6 != NULL) {\n        int32_t v341 = 4; // 0x40f33b\n        if (v339 != 1) {\n            // 0x40f33d\n            v341 = 4 * (int32_t)((*v143 & 0x400000 | v313) == 0);\n        }\n        // 0x40f360\n        v340 = 2 * v338 | (int32_t)(v313 != 0) | v341;\n    }\n    // 0x40f37c\n    v179 = v337 ? v311 : v310;\n    v180 = v336 < 0 == ((v336 ^ v311) & (v310 ^ v311)) < 0 ? v311 : v310;\n    int64_t v342 = v311 - v180; // 0x40f37c\n    int64_t v343 = v311 - v179; // 0x40f384\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v342 < 0 == ((v342 ^ v311) & (v180 ^ v311)) < 0 != v342 != 0 && v343 < 0 == ((v343 ^ v311) & (v179 ^ v311)) < 0) {\n        int64_t v344 = 0x100000000 * a9 >> 32;\n        v194 = v340;\n        v251 = v337 ? (int64_t)&v172 : 0;\n        v195 = v251 != 0;\n        v345 = (int64_t)v6;\n        v346 = (char *)(v180 + a2);\n        v127 = v344;\n        v178 = (int32_t)!((v336 == 0 | v336 < 0 != ((v336 ^ v311) & (v310 ^ v311)) < 0)) + v338;\n        v347 = v344 & 0xffffffff;\n        v348 = &v28;\n        v144 = &v141;\n        v349 = (char)v309 ^ 1;\n        v73 = (char *)(a1 + 56);\n        v74 = (char *)(a1 + 176);\n        v75 = &v67;\n        v184 = v311;\n        v185 = a5;\n        v186 = a6;\n        v187 = v327;\n        while (true) {\n          lab_0x40f3d8:\n            // 0x40f3d8\n            v350 = v187;\n            v351 = v186;\n            int64_t v352 = v185;\n            v353 = v184;\n            v354 = v183;\n            v355 = v182;\n            v356 = v181;\n            v235 = v356;\n            v236 = v355;\n            v237 = v354;\n            v238 = v353;\n            v239 = v352;\n            v240 = v351;\n            v241 = v350;\n            v188 = v356;\n            v189 = v355;\n            v190 = v354;\n            v191 = v353;\n            v192 = v352;\n            v193 = v351;\n            switch (g94) {\n                case 0: {\n                    goto lab_0x40f410;\n                }\n                case 1: {\n                    goto lab_0x40f410;\n                }\n                case 2: {\n                    // 0x40f8c8\n                    v357 = v353;\n                    v358 = v352;\n                    if (v180 > v353) {\n                        // 0x40f8cf\n                        v235 = v356;\n                        v236 = v355;\n                        v237 = v354;\n                        v238 = v353;\n                        v239 = v352;\n                        v240 = v351;\n                        v241 = v350;\n                        int64_t v359 = v353; // 0x40f8e5\n                        if (*(char *)((int64_t)*(char *)(v353 + a2) + v345) != 0) {\n                            goto lab_0x40f488;\n                        } else {\n                            int64_t v360 = v359 + 1;\n                            while (v180 != v360) {\n                                // 0x40f900\n                                v359 = v360;\n                                v228 = v356;\n                                v229 = v355;\n                                v230 = v354;\n                                v227 = v360;\n                                v225 = v352;\n                                v226 = v351;\n                                v224 = v350;\n                                if (*(char *)((int64_t)*(char *)(v360 + a2) + v345) != 0) {\n                                    goto lab_0x410208_2;\n                                }\n                                v360 = v359 + 1;\n                            }\n                            // 0x40f91a\n                            v172 = v180;\n                            v357 = v360;\n                            v358 = v352;\n                            goto lab_0x40f86c;\n                        }\n                    } else {\n                        goto lab_0x40f86c;\n                    }\n                }\n                case 3: {\n                    // 0x40f7f0\n                    v357 = v353;\n                    v358 = v352;\n                    if (v180 > v353) {\n                        unsigned char v361 = *(char *)(v313 + (int64_t)*(char *)(v353 + a2)); // 0x40f808\n                        v235 = v356;\n                        v236 = v355;\n                        v237 = v354;\n                        v238 = v353;\n                        v239 = v352;\n                        v240 = v351;\n                        v241 = v350;\n                        int64_t v362 = v353; // 0x40f819\n                        if (*(char *)((int64_t)v361 + v345) != 0) {\n                            goto lab_0x40f488;\n                        } else {\n                            int64_t v363 = v362 + 1;\n                            while (v180 != v363) {\n                                unsigned char v364 = *(char *)(v313 + (int64_t)*(char *)(v363 + a2)); // 0x40f845\n                                v362 = v363;\n                                v228 = v356;\n                                v229 = v355;\n                                v230 = v354;\n                                v227 = v363;\n                                v225 = a2;\n                                v226 = v351;\n                                v224 = v350;\n                                if (*(char *)((int64_t)v364 + v345) != 0) {\n                                    goto lab_0x410208_2;\n                                }\n                                v363 = v362 + 1;\n                            }\n                            // 0x40f85f\n                            v172 = v180;\n                            v357 = v363;\n                            v358 = a2;\n                            goto lab_0x40f86c;\n                        }\n                    } else {\n                        goto lab_0x40f86c;\n                    }\n                }\n                case 4: {\n                    goto lab_0x40f488;\n                }\n                default: {\n                    goto lab_0x40fe0c;\n                }\n            }\n        }\n    }\n    goto lab_0x40f960_9;\n  lab_0x4107b0:;\n    int64_t v365 = v269 + 8; // 0x4107bd\n    int64_t result3 = function_4090b0((int128_t *)\"check_matching\", v365, v270); // 0x4107c9\n    int32_t v366 = result3; // 0x4107ce\n    result = v366;\n    int64_t v367 = v280; // 0x4107d4\n    int64_t v368 = v281; // 0x4107d4\n    int64_t v369 = 0; // 0x4107d4\n    if (v366 != 0) {\n        // 0x4106e9\n        return result3;\n    }\n    goto lab_0x410c60;\n  lab_0x410c60:;\n    int64_t v370 = v368;\n    int64_t v371 = v367;\n    int64_t v372 = *(int64_t *)((int64_t)\"lib/regexec.c\" + 48); // 0x410c60\n    int64_t v373 = 40 * *(int64_t *)(v372 + 8 * v369); // 0x410c71\n    int64_t v374 = 0x40837000000000; // 0x410c79\n    int64_t v375 = v371; // 0x410c79\n    int64_t v376 = v370; // 0x410c79\n    int64_t v377; // 0x40ef10\n    int64_t v378; // 0x40ef10\n    int64_t v379; // 0x40ef10\n    int64_t v380; // 0x40ef10\n    int64_t v381; // 0x40ef10\n    int64_t v382; // 0x40ef10\n    int64_t v383; // 0x410c8c\n    int64_t v384; // 0x410c98\n    if (*(int64_t *)(v373 + 0x40837000000010) < 1128) {\n        // 0x410c7f\n        v374 = 0x40837000000000;\n        v375 = v371;\n        v376 = v370;\n        if (*(int64_t *)(v373 + 0x40837000000008) < 1128) {\n            goto lab_0x410d1d;\n        } else {\n            // 0x410c89\n            v383 = *(int64_t *)0x40840800000000;\n            int64_t v385 = 16 * *(int64_t *)(v373 + 0x40837000000000); // 0x410c94\n            v384 = *(int64_t *)(v383 + v385);\n            v377 = v383;\n            v380 = v385;\n            v378 = 0;\n            v381 = 0x61666e5f6b6e696c;\n            v382 = -1;\n            v379 = -1;\n            if (*(int64_t *)(v373 + 0x40837000000018) == 1128) {\n                goto lab_0x410d76;\n            } else {\n                goto lab_0x410cce;\n            }\n        }\n    } else {\n        goto lab_0x410d1d;\n    }\n  lab_0x410d1d:;\n    int64_t v386 = v376;\n    int64_t v387 = v375;\n    int64_t v388 = v369 + 1; // 0x410d1d\n    v367 = v387;\n    v368 = v386;\n    v369 = v388;\n    if (v388 >= *(int64_t *)((int64_t)\"lib/regexec.c\" + 40)) {\n        // 0x410d2b\n        result = 0;\n        int64_t v389 = function_409bb0(&result, 0x40840800000000, (int64_t *)\"check_matching\", v374, v387, v386); // 0x4107f8\n        *(int64_t *)0x656765722f628cac = v389;\n        uint32_t v390 = result; // 0x410801\n        // 0x4106e9\n        return v390 != 0 ? (int64_t)v390 : 0;\n    }\n    goto lab_0x410c60;\n  lab_0x41077a:;\n    int64_t v391 = *(int64_t *)(8 * v266 + 0x61666e5f6b6e696c); // 0x410781\n    int64_t v392 = *(int64_t *)0x40840800000038; // 0x410789\n    int32_t v393 = function_408b40(v271, (int128_t *)(v392 + 24 * v391)); // 0x410797\n    v268 = v393;\n    if (v393 != 0) {\n        // 0x4106e9\n        return 12;\n    }\n    int64_t v394 = v266 + 1; // 0x410770\n    v266 = v394;\n    if (v394 > 0x676e69686373) {\n        goto lab_0x4107b0;\n    } else {\n        goto lab_0x41077a;\n    }\n  lab_0x410d76:;\n    int64_t v395 = v382;\n    int64_t v396 = v381; // 0x40ef10\n    int64_t v397 = v379; // 0x40ef10\n    goto lab_0x410d76_2;\n  lab_0x410cce:;\n    int64_t v410 = v378;\n    int64_t v414 = v380;\n    int64_t v412 = v377;\n    int64_t v416 = *(int64_t *)(8 * v410 + 0x61666e5f6b6e696c); // 0x410cd2\n    int64_t v417 = 16 * v416 + v412; // 0x410cdd\n    int64_t v411; // 0x40ef10\n    int64_t v415; // 0x40ef10\n    int64_t result4; // 0x40ef10\n    int64_t v413; // 0x40ef10\n    if ((*(char *)(v417 + 8) || 1) == 9) {\n        // 0x410cec\n        if (v384 != *(int64_t *)v417) {\n            goto lab_0x410cc0;\n        } else {\n            int64_t v418 = function_40ae10(0x40840800000000, v416, (int64_t)\"check_matching\", v365); // 0x410cfc\n            result4 = v418;\n            if ((int32_t)v418 != 0) {\n                // 0x4106e9\n                return result4;\n            }\n            int64_t v419 = v410 + 1; // 0x410d09\n            v374 = v365;\n            v375 = v384;\n            v376 = v370;\n            if (v419 < 0x676e69686374) {\n                // 0x410d09\n                v411 = *(int64_t *)0x40840800000000;\n                v413 = v365;\n                v415 = v419;\n                goto lab_0x410cca;\n            } else {\n                goto lab_0x410d1d;\n            }\n        }\n    } else {\n        goto lab_0x410cc0;\n    }\n  lab_0x410d76_2:;\n    int64_t v398 = v397;\n    int64_t v399 = v396;\n    int64_t v400 = *(int64_t *)v399; // 0x410d76\n    int64_t v401 = 16 * v400 + v383; // 0x410d80\n    char v402 = *(char *)(v401 + 8); // 0x410d83\n    int64_t v403; // 0x40ef10\n    int64_t v404; // 0x40ef10\n    int64_t v405; // 0x40ef10\n    int64_t v406; // 0x410d69\n    if (v402 != 8) {\n        // 0x410d60\n        v406 = v398;\n        if (v402 != 9) {\n            goto lab_0x410d6d;\n        } else {\n            // 0x410d66\n            v406 = v384 == *(int64_t *)v401 ? v400 : v398;\n            goto lab_0x410d6d;\n        }\n    } else {\n        int64_t v407 = v384 == *(int64_t *)v401 ? v400 : v395; // 0x410d91\n        int64_t v408 = v399 + 8; // 0x410d95\n        v381 = v408;\n        v382 = v407;\n        v379 = v398;\n        v404 = v408;\n        v405 = v407;\n        v403 = v398;\n        if (v408 != 0x6169a9d2b6b1850c) {\n            goto lab_0x410d76;\n        } else {\n            goto lab_0x410d9e;\n        }\n    }\n  lab_0x410cc0:;\n    int64_t v409 = v410 + 1; // 0x410cc0\n    v411 = v412;\n    v413 = v414;\n    v415 = v409;\n    v374 = v414;\n    v375 = v384;\n    v376 = v370;\n    if (v409 > 0x676e69686373) {\n        goto lab_0x410d1d;\n    } else {\n        goto lab_0x410cca;\n    }\n  lab_0x410cca:\n    // 0x410cca\n    v377 = v411;\n    v380 = v413;\n    v378 = v415;\n    goto lab_0x410cce;\n  lab_0x410d6d:;\n    int64_t v420 = v399 + 8; // 0x410d6d\n    v396 = v420;\n    v397 = v406;\n    v404 = 0x6169a9d2b6b1850c;\n    v405 = v395;\n    v403 = v406;\n    if (v420 == 0x6169a9d2b6b1850c) {\n        goto lab_0x410d9e;\n    } else {\n        goto lab_0x410d76_2;\n    }\n  lab_0x410d9e:;\n    int64_t v421 = v403;\n    int64_t v422 = v405;\n    int64_t v423; // 0x40ef10\n    if (v422 >= 0) {\n        int64_t v424 = function_40ae10(0x40840800000000, v422, (int64_t)\"check_matching\", v365); // 0x410e4b\n        result4 = v424;\n        if ((int32_t)v424 != 0) {\n            // 0x4106e9\n            return result4;\n        }\n        // 0x410e58\n        v374 = v365;\n        v375 = v384;\n        v376 = v421;\n        v423 = v365;\n        if (v421 < 0) {\n            goto lab_0x410d1d;\n        } else {\n            goto lab_0x410dbb;\n        }\n    } else {\n        // 0x410daf\n        v374 = v404;\n        v375 = v384;\n        v376 = v421;\n        v423 = v404;\n        if (v421 < 0) {\n            goto lab_0x410d1d;\n        } else {\n            goto lab_0x410dbb;\n        }\n    }\n  lab_0x410dbb:;\n    int64_t v425 = v423; // 0x410dcb\n    int64_t v426 = 0; // 0x410dcb\n    goto lab_0x410de2;\n  lab_0x410de2:;\n    int64_t v427 = v426;\n    int64_t v428 = v425;\n    int64_t v429 = *(int64_t *)(8 * v427 + 0x61666e5f6b6e696c); // 0x410de2\n    int64_t v430 = 24 * v429; // 0x410df2\n    int64_t v431 = *(int64_t *)0x40840800000038 + v430; // 0x410df6\n    int64_t v432 = v430; // 0x410e09\n    int64_t v433; // 0x40ef10\n    int64_t v434; // 0x40ef10\n    int64_t v435; // 0x40ef10\n    if (function_408600(*(int64_t *)(v431 + 8), v431 + 16, v421) != 0) {\n        goto lab_0x410dd0;\n    } else {\n        int64_t v436 = *(int64_t *)0x40840800000030 + v430; // 0x410e0b\n        int64_t v437 = function_408600(*(int64_t *)(v436 + 8), v436 + 16, v421); // 0x410e18\n        v432 = v436;\n        if (v437 != 0) {\n            goto lab_0x410dd0;\n        } else {\n            int64_t v438 = function_40ae10(0x40840800000000, v429, (int64_t)\"check_matching\", v365); // 0x410e30\n            result4 = v438;\n            v435 = v365;\n            v434 = v427;\n            v433 = v436;\n            if ((int32_t)v438 != 0) {\n                // 0x4106e9\n                return result4;\n            }\n            goto lab_0x410dd4;\n        }\n    }\n  lab_0x410dd0:\n    // 0x410dd0\n    v435 = v428;\n    v434 = v427 + 1;\n    v433 = v432;\n    goto lab_0x410dd4;\n  lab_0x410dd4:\n    // 0x410dd4\n    v374 = v435;\n    v375 = v384;\n    v376 = v433;\n    v425 = v435;\n    v426 = v434;\n    if (v434 > 0x676e69686373) {\n        goto lab_0x410d1d;\n    } else {\n        goto lab_0x410de2;\n    }\n  lab_0x410320:\n    // 0x410320\n    *(int64_t *)(v163 + 8) = -1;\n    int64_t v439 = v163 + 16; // 0x410324\n    *(int64_t *)v163 = -1;\n    v163 = v439;\n    int64_t v440; // 0x40ef10\n    int64_t * v441; // 0x410341\n    if (v166 != v439) {\n        goto lab_0x410320;\n    } else {\n        // 0x410331\n        v441 = (int64_t *)a8;\n        *v441 = 0;\n        *(int64_t *)(a8 + 8) = v65;\n        v164 = 0;\n        if (v11 == 1 | (*v73 & 16) != 0) {\n            goto lab_0x4103c2;\n        } else {\n            // 0x410372\n            v440 = 0;\n            if (*v74 % 2 == 0) {\n                goto lab_0x410392;\n            } else {\n                int64_t v442 = *v40; // 0x410386\n                v440 = v442 >= 0 == (v442 != 0);\n                goto lab_0x410392;\n            }\n        }\n    }\n  lab_0x4103c2:;\n    int64_t v443 = a8; // 0x4103fd\n    int64_t v444 = 0; // 0x4103fd\n    int64_t v445 = v164; // 0x4103fd\n    goto lab_0x410403;\n  lab_0x410403:;\n    int64_t v446 = v445;\n    int64_t v447 = v443;\n    int64_t * v448; // 0x40ef10\n    int64_t v449; // 0x40ef10\n    int64_t v450; // 0x40ef10\n    int64_t * v451; // 0x410409\n    int64_t v452; // 0x410409\n    int64_t v453; // 0x41062b\n    if (v446 == -1) {\n        goto lab_0x410423;\n    } else {\n        // 0x410409\n        v451 = (int64_t *)(v447 + 8);\n        v452 = *v451;\n        char v454; // 0x40ef10\n        if (v454 != 0) {\n            // 0x410626\n            v453 = v285;\n            if (v285 == v446) {\n                goto lab_0x41062f;\n            } else {\n                // 0x41062b\n                v453 = *(int64_t *)(8 * v446 + v1);\n                goto lab_0x41062f;\n            }\n        } else {\n            // 0x410409\n            v448 = (int64_t *)v447;\n            v449 = v446;\n            v450 = v452;\n            goto lab_0x410416;\n        }\n    }\n  lab_0x410423:;\n    int64_t v455 = v444 + 1; // 0x410423\n    if (v455 != v11) {\n        int64_t v456 = v447 + 16; // 0x410427\n        v443 = v456;\n        v444 = v455;\n        v445 = *(int64_t *)v456;\n        goto lab_0x410403;\n    } else {\n        if (v10 < 1) {\n            goto lab_0x410488;\n        } else {\n            // 0x41043b\n            goto lab_0x410478;\n        }\n    }\n  lab_0x410392:;\n    int64_t v457 = function_40d730(a1, &v3, v11, a8, v440); // 0x4103aa\n    v23 = v40;\n    v26 = v457;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    if ((int32_t)v457 != 0) {\n        goto lab_0x40f960_9;\n    } else {\n        // 0x4103b7\n        v164 = *v441;\n        goto lab_0x4103c2;\n    }\n  lab_0x410488:;\n    int64_t v458 = *(int64_t *)(a1 + 224); // 0x410495\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v459; // 0x40ef10\n    int64_t v460; // 0x4104ad\n    int64_t v461; // 0x40ef10\n    if (v458 == 0) {\n        goto lab_0x40f960_9;\n    } else {\n        // 0x4104a5\n        v460 = v11 - 1;\n        v23 = v40;\n        v26 = v162;\n        v25 = v41;\n        v24 = v42;\n        v22 = v64;\n        if (v460 != 0) {\n            // 0x4104b8\n            v461 = a8 + 24;\n            v459 = 0;\n            goto lab_0x4104b8_2;\n        } else {\n            goto lab_0x40f960_9;\n        }\n    }\n  lab_0x41062f:;\n    int64_t v462 = v453;\n    int64_t * v463 = (int64_t *)v447;\n    *v463 = v462;\n    v448 = v463;\n    v449 = v462;\n    v450 = v285;\n    if (v285 == v452) {\n        goto lab_0x410416;\n    } else {\n        // 0x410637\n        v448 = v463;\n        v449 = v462;\n        v450 = *(int64_t *)(8 * v452 + v1);\n        goto lab_0x410416;\n    }\n  lab_0x410416:\n    // 0x410416\n    *v448 = v449 + v172;\n    *v451 = v450 + v172;\n    goto lab_0x410423;\n  lab_0x410478:\n    // 0x410478\n    *(int64_t *)v166 = -1;\n    *(int64_t *)(v166 + 8) = -1;\n    if (16 * (v11 + v10) + a8 != v166 + 16) {\n        goto lab_0x410478;\n    } else {\n        goto lab_0x410488;\n    }\n  lab_0x4104b8_2:;\n    int64_t v464 = v459;\n    int64_t * v465 = (int64_t *)(8 * v464 + v458); // 0x4104b8\n    int64_t v466 = *v465; // 0x4104b8\n    if (v466 == v464) {\n        goto lab_0x410507;\n    } else {\n        int64_t v467 = 16 * v464; // 0x4104e0\n        *(int64_t *)(v467 + v165) = *(int64_t *)(16 * v466 + v165);\n        *(int64_t *)(v467 + v461) = *(int64_t *)(16 * *v465 + v461);\n        goto lab_0x410507;\n    }\n  lab_0x410507:;\n    int64_t v468 = v464 + 1; // 0x410507\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    v459 = v468;\n    if (v468 != v460) {\n        goto lab_0x4104b8_2;\n    } else {\n        goto lab_0x40f960_9;\n    }\n}\n"
        },
        {
            "funcName": "function_410ea0",
            "funcStartAddr": "410ea0",
            "funcEndAddr": "4110bd",
            "decompiledFuncCode": "int64_t function_410ea0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    int32_t * v1 = (int32_t *)(a2 + 144); // 0x410eb6\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x410ebd\n    if (*v1 != 1) {\n        int64_t v3 = function_4085b0(a2, a2); // 0x410ec9\n        if ((int32_t)v3 > 1) {\n            // 0x410f18\n            *(int32_t *)a1 = 1;\n            *(int32_t *)(a1 + 8) = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * a2);\n            *v2 = (0x100000000 * v3 >> 32) + a2;\n            return 0;\n        }\n    }\n    char * v4 = (char *)(a3 + 8); // 0x410ed3\n    char v5 = *v4; // 0x410ed3\n    int64_t v6 = a2 + (0x100000000 * a4 >> 32); // 0x410ed7\n    *v2 = v6;\n    int64_t v7; // 0x410ea0\n    int64_t v8; // 0x410ea0\n    char v9; // 0x410ea0\n    int64_t v10; // 0x410ea0\n    int64_t v11; // 0x410ea0\n    char v12; // 0x410ea0\n    int64_t v13; // 0x410ea0\n    int64_t v14; // 0x410ea0\n    int64_t v15; // 0x410ea0\n    int64_t v16; // 0x410ea0\n    int64_t * v17; // 0x410f40\n    int64_t * v18; // 0x410ea0\n    int64_t * v19; // 0x410ea0\n    int64_t * v20; // 0x410ea0\n    switch (v5) {\n        case 30: {\n        }\n        case 28: {\n        }\n        case 26: {\n            // 0x410f40\n            v17 = (int64_t *)(a2 + 104);\n            if (v6 >= *v17) {\n                // 0x410f08\n                return 7;\n            }\n            // 0x410f4a\n            v18 = (int64_t *)(a2 + 40);\n            v19 = (int64_t *)(a2 + 8);\n            v20 = (int64_t *)(a1 + 8);\n            v12 = v5;\n            v14 = a2;\n            v10 = 0;\n            v7 = v6;\n            while (true) {\n              lab_0x410f72:\n                // 0x410f72\n                v8 = v7;\n                v11 = v10;\n                v15 = v14;\n                if (v12 == 30) {\n                    // 0x410ff0\n                    if (*(char *)(a2 + 139) == 0) {\n                        goto lab_0x410f79;\n                    } else {\n                        // 0x410ffe\n                        if (*(char *)(a2 + 140) == 0) {\n                            int64_t v21 = v8 + 1; // 0x411068\n                            *v2 = v21;\n                            v13 = v21;\n                            v16 = v15;\n                            v9 = *(char *)(v8 + v15 + *v18);\n                            goto lab_0x410f8a;\n                        } else {\n                            // 0x411008\n                            if (v8 == *(int64_t *)(a2 + 48)) {\n                                goto lab_0x41101d;\n                            } else {\n                                // 0x41100e\n                                if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v8) == -1) {\n                                    goto lab_0x410f79;\n                                } else {\n                                    goto lab_0x41101d;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x410f79;\n                }\n            }\n          lab_0x410f08_3:\n            // 0x410f08\n            return 0;\n        }\n    }\n    if ((char)a6 == 0 == v5 == 22) {\n        // 0x411080\n        int64_t v22; // bp-56, 0x410ea0\n        function_406b10(&v22, a2, a5);\n        char v23; // 0x410ea0\n        if (v23 != 21) {\n            // 0x410f08\n            return 11;\n        }\n    }\n    // 0x410ef9\n    *(int32_t *)a1 = 0;\n    int64_t v24; // 0x410ea0\n    *(char *)(a1 + 8) = *(char *)&v24;\n    // 0x410f08\n    return 0;\n  lab_0x410f79:;\n    int64_t v25 = v8 + 1; // 0x410f7d\n    *v2 = v25;\n    v13 = v25;\n    v16 = v15;\n    v9 = *(char *)(*v19 + v8);\n    goto lab_0x410f8a;\n  lab_0x410f8a:;\n    uint64_t v26 = v13;\n    if (*v17 <= v26) {\n        // break -> 0x410f08\n        goto lab_0x410f08_3;\n    }\n    // 0x410f90\n    if (*(char *)&v24 == v9) {\n        // 0x410f95\n        if (*(char *)(*v19 + v26) == 93) {\n            // 0x410f9f\n            *v2 = v26 + 1;\n            *(char *)(*v20 + (0x100000000 * v11 >> 32)) = 0;\n            unsigned char v27 = *v4; // 0x410fb0\n            v24 = v27;\n            switch (v27) {\n                case 28: {\n                    // 0x4110b0\n                    *(int32_t *)a1 = 2;\n                    goto lab_0x410f08_3;\n                }\n                case 30: {\n                    // 0x4110a3\n                    *(int32_t *)a1 = 4;\n                    goto lab_0x410f08_3;\n                }\n                default: {\n                    // 0x410fc6\n                    if (v27 != 26) {\n                        goto lab_0x410f08_3;\n                    } else {\n                        // 0x410fd1\n                        *(int32_t *)a1 = 3;\n                        goto lab_0x410f08_3;\n                    }\n                }\n            }\n        }\n    }\n    // 0x410f58\n    *(char *)(*v20 + v11) = v9;\n    if (v11 == 31) {\n        // break -> 0x410f08\n        goto lab_0x410f08_3;\n    }\n    // 0x410f6a\n    v12 = *v4;\n    v14 = v16;\n    v10 = v11 + 1;\n    v7 = *v2;\n    goto lab_0x410f72;\n  lab_0x41101d:;\n    int64_t v28 = *(int64_t *)(a2 + 24); // 0x41101d\n    char v29 = *(char *)(*(int64_t *)(v28 + 8 * v8) + v15 + *v18); // 0x41102c\n    if (v29 <= -1) {\n        goto lab_0x410f79;\n    } else {\n        int64_t v30 = 1; // 0x411047\n        int64_t v31 = v15; // 0x411047\n        if (*v1 != 1) {\n            // 0x411049\n            v30 = 0x100000000 * function_4085b0(a2, v8) >> 32;\n            v31 = v8;\n        }\n        int64_t v32 = v30 + v8; // 0x411056\n        *v2 = v32;\n        v13 = v32;\n        v16 = v31;\n        v9 = v29;\n        goto lab_0x410f8a;\n    }\n}\n"
        },
        {
            "funcName": "function_4110c0",
            "funcStartAddr": "4110c0",
            "funcEndAddr": "411763",
            "decompiledFuncCode": "int64_t function_4110c0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x4110ce\n    uint64_t v3 = *v2; // 0x4110ce\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x4111e8\n        *(char *)(v1 + 8) = 2;\n        // 0x4111ee\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x4110df\n    char * v5 = (char *)(v1 + 10); // 0x4110e3\n    int32_t v6 = *(int32_t *)(a2 + 144); // 0x4110eb\n    int64_t v7 = v4 + v3;\n    unsigned char v8 = *(char *)v7; // 0x4110f4\n    char v9 = *v5 & -97;\n    *v5 = v9;\n    *(char *)a1 = v8;\n    char v10; // 0x4110c0\n    if (v6 < 2) {\n        if (v8 == 92) {\n            goto lab_0x4111c0;\n        } else {\n            // 0x411186\n            *(char *)(v1 + 8) = 1;\n            uint16_t v11 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)*__ctype_b_loc()); // 0x41119b\n            v10 = 64 * ((char)(v11 / 8) % 2 | (char)(v8 == 95)) | v9;\n            goto lab_0x411165;\n        }\n    } else {\n        // 0x411109\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x41110f\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                int32_t * v12 = (int32_t *)(v1 + 8); // 0x411270\n                *v12 = *v12 & -0x200100 | 0x200001;\n                // 0x4111ee\n                return 1;\n            }\n        }\n        if (v8 == 92) {\n            goto lab_0x4111c0;\n        } else {\n            // 0x411128\n            *(char *)(v1 + 8) = 1;\n            int32_t wc = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3); // 0x411135\n            v10 = 64 * (char)(wc == 95 | iswalnum(wc) != 0) | *v5 & -65;\n            goto lab_0x411165;\n        }\n    }\n  lab_0x4111c0:;\n    uint64_t v13 = v3 + 1;\n    if (v13 >= *(int64_t *)(a2 + 88)) {\n        // 0x4111cb\n        *(char *)(v1 + 8) = 36;\n        return 1;\n    }\n    // 0x411200\n    char v14; // 0x4110c0\n    int32_t v15; // 0x4116c7\n    if (*(char *)(a2 + 139) != 0) {\n        if (v6 < 2) {\n            goto lab_0x4116e2;\n        } else {\n            int64_t v16 = *(int64_t *)(a2 + 16) + 4 * v13;\n            v15 = *(int32_t *)v16;\n            if (v15 == -1) {\n                goto lab_0x41174b;\n            } else {\n                // 0x4116cf\n                if (*(int64_t *)(a2 + 48) == v3 + 2) {\n                    goto lab_0x4116e2;\n                } else {\n                    // 0x4116da\n                    if (*(int32_t *)(v16 + 4) == -1) {\n                        goto lab_0x41174b;\n                    } else {\n                        goto lab_0x4116e2;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x41120e\n        v14 = *(char *)(v4 + v13);\n        goto lab_0x41121b;\n    }\n  lab_0x411165:\n    // 0x411165\n    *v5 = v10;\n    g90 = v8 - 10;\n    switch (v8) {\n        case 10: {\n            // 0x4113f8\n            if ((a3 & 2048) == 0) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x41140a\n            *(char *)(v1 + 8) = 10;\n            // 0x4111ee\n            return 1;\n        }\n        case 36: {\n            if ((a3 & 8) != 0) {\n                // 0x411460\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x4111ee\n                return 1;\n            }\n            int64_t v17 = v3 + 1; // 0x411426\n            if (v17 == *(int64_t *)(a2 + 88)) {\n                // 0x411460\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x4111ee\n                return 1;\n            }\n            // 0x411430\n            *v2 = v17;\n            int64_t v18; // bp-72, 0x4110c0\n            function_4110c0(&v18, a2, a3);\n            *v2 = *v2 - 1;\n            char v19; // 0x4110c0\n            if (v19 < 11) {\n                // 0x411460\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x4111ee\n                return 1;\n            }\n            // break -> 0x4111ee\n            break;\n        }\n        case 40: {\n            // 0x4112c8\n            if ((a3 & 0x2000) == 0) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x4112da\n            *(char *)(v1 + 8) = 8;\n            // 0x4111ee\n            return 1;\n        }\n        case 41: {\n            // 0x4112e8\n            if ((a3 & 0x2000) == 0) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x4112fa\n            *(char *)(v1 + 8) = 9;\n            // 0x4111ee\n            return 1;\n        }\n        case 42: {\n            // 0x411308\n            *(char *)(v1 + 8) = 11;\n            // 0x4111ee\n            return 1;\n        }\n        case 43: {\n            // 0x411320\n            if ((a3 & 1026) != 0) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x411332\n            *(char *)(v1 + 8) = 18;\n            // 0x4111ee\n            return 1;\n        }\n        case 46: {\n            // 0x411340\n            *(char *)(v1 + 8) = 5;\n            // 0x4111ee\n            return 1;\n        }\n        case 63: {\n            // 0x411350\n            if ((a3 & 1026) != 0) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x411362\n            *(char *)(v1 + 8) = 19;\n            // 0x4111ee\n            return 1;\n        }\n        case 91: {\n            // 0x411370\n            *(char *)(v1 + 8) = 20;\n            // 0x4111ee\n            return 1;\n        }\n        case 94: {\n            if ((a3 & 0x800008) == 0 == (v3 != 0)) {\n                // 0x41171a\n                if ((a3 & 2048) == 0 | *(char *)(v7 - 1) != 10) {\n                    // 0x4111ee\n                    return 1;\n                }\n            }\n            // 0x411392\n            *(char *)(v1 + 8) = 12;\n            *(int32_t *)a1 = 16;\n            // 0x4111ee\n            return 1;\n        }\n        case 123: {\n            // 0x4113b0\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x4113c9\n            *(char *)(v1 + 8) = 23;\n            // 0x4111ee\n            return 1;\n        }\n        case 124: {\n            // 0x4113d8\n            if ((a3 & 0x8400) != 0x8000) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x41140a\n            *(char *)(v1 + 8) = 10;\n            // 0x4111ee\n            return 1;\n        }\n        case 125: {\n            // 0x411478\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x4111ee\n                return 1;\n            }\n            // 0x411491\n            *(char *)(v1 + 8) = 24;\n            // 0x4111ee\n            return 1;\n        }\n    }\n    // 0x4111ee\n    return 1;\n  lab_0x4116e2:;\n    int64_t v20 = *(int64_t *)(a2 + 40); // 0x4116ee\n    if (*(char *)(a2 + 140) == 0) {\n        // 0x411738\n        v14 = *(char *)(v20 + a2 + v13);\n        goto lab_0x41121b;\n    } else {\n        int64_t v21 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v13); // 0x4116fb\n        char v22 = *(char *)(v20 + a2 + v21); // 0x4116ff\n        v14 = v22;\n        if (v22 > -1) {\n            goto lab_0x41121b;\n        } else {\n            // 0x41120e\n            v14 = *(char *)(v4 + v13);\n            goto lab_0x41121b;\n        }\n    }\n  lab_0x41121b:;\n    int64_t v23 = v14;\n    int32_t v24 = v14;\n    *(char *)a1 = v14;\n    *(char *)(v1 + 8) = 1;\n    int64_t v25; // 0x4110c0\n    int64_t v26; // 0x4110c0\n    int32_t wc2; // 0x4110c0\n    int32_t v27; // 0x4110c0\n    int32_t v28; // 0x4110c0\n    char v29; // 0x4110c0\n    if (v6 < 2) {\n        uint16_t v30 = *(int16_t *)(2 * v23 + (int64_t)*__ctype_b_loc()); // 0x41129c\n        char v31 = *v5; // 0x4112b0\n        v29 = 64 * ((char)(v30 / 8) % 2 | (char)(v14 == 95)) | v31 & -65;\n        v28 = v24;\n        v26 = v23;\n        goto lab_0x411253;\n    } else {\n        // 0x411227\n        v27 = v24;\n        wc2 = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v13);\n        v25 = v23;\n        goto lab_0x41122e;\n    }\n  lab_0x41174b:;\n    unsigned char v32 = *(char *)(v4 + v13); // 0x41174b\n    *(char *)(v1 + 8) = 1;\n    *(char *)a1 = v32;\n    v27 = v32;\n    wc2 = v15;\n    v25 = v32;\n    goto lab_0x41122e;\n  lab_0x41122e:;\n    int32_t v33 = iswalnum(wc2); // 0x411230\n    v29 = 64 * (char)(wc2 == 95 | v33 != 0) | *v5 & -65;\n    v28 = v27;\n    v26 = v25;\n    goto lab_0x411253;\n  lab_0x411253:\n    // 0x411253\n    *v5 = v29;\n    uint64_t v34 = v26 + 0xffffffd9; // 0x411253\n    g91 = v34 % 256;\n    switch ((char)v34) {\n        case 0: {\n            // 0x41168b\n            if ((a3 & 0x80000) == 0) {\n                // 0x41169d\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 128;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 1: {\n            // 0x411674\n            if ((a3 & 0x2000) != 0) {\n                // 0x4111ee\n                return 2;\n            }\n            // 0x4112da\n            *(char *)(v1 + 8) = 8;\n            // 0x4111ee\n            return 2;\n        }\n        case 2: {\n            // 0x41165d\n            if ((a3 & 0x2000) != 0) {\n                // 0x4111ee\n                return 2;\n            }\n            // 0x4112fa\n            *(char *)(v1 + 8) = 9;\n            // 0x4111ee\n            return 2;\n        }\n        case 4: {\n            // 0x411642\n            if ((a3 & 1026) != 2) {\n                // 0x4111ee\n                return 2;\n            }\n            // 0x411332\n            *(char *)(v1 + 8) = 18;\n            // 0x4111ee\n            return 2;\n        }\n        case 10: {\n        }\n        case 11: {\n        }\n        case 12: {\n        }\n        case 13: {\n        }\n        case 14: {\n        }\n        case 15: {\n        }\n        case 16: {\n        }\n        case 17: {\n        }\n        case 18: {\n            // 0x41161a\n            if ((a3 & 0x4000) == 0) {\n                // 0x41162c\n                *(char *)(v1 + 8) = 4;\n                *a1 = (int64_t)(v28 - 49);\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 21: {\n            // 0x4115f9\n            if ((a3 & 0x80000) == 0) {\n                // 0x41160b\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 6;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 23: {\n            // 0x4115d8\n            if ((a3 & 0x80000) == 0) {\n                // 0x4115ea\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 9;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 24: {\n            // 0x4115bd\n            if ((a3 & 1026) != 2) {\n                // 0x4111ee\n                return 2;\n            }\n            // 0x411362\n            *(char *)(v1 + 8) = 19;\n            // 0x4111ee\n            return 2;\n        }\n        case 27: {\n            // 0x41159c\n            if ((a3 & 0x80000) == 0) {\n                // 0x4115ae\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 512;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 44: {\n            // 0x411581\n            if ((a3 & 0x80000) == 0) {\n                // 0x411593\n                *(char *)(v1 + 8) = 35;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 48: {\n            // 0x411566\n            if ((a3 & 0x80000) == 0) {\n                // 0x411578\n                *(char *)(v1 + 8) = 33;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 57: {\n            // 0x411545\n            if ((a3 & 0x80000) == 0) {\n                // 0x411557\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 64;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 59: {\n            // 0x411524\n            if ((a3 & 0x80000) == 0) {\n                // 0x411536\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 256;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 76: {\n            // 0x411509\n            if ((a3 & 0x80000) == 0) {\n                // 0x41151b\n                *(char *)(v1 + 8) = 34;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 80: {\n            // 0x4114ee\n            if ((a3 & 0x80000) == 0) {\n                // 0x411500\n                *(char *)(v1 + 8) = 32;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 84: {\n            // 0x4114d0\n            if ((a3 & 0x1200) != 512) {\n                // 0x4111ee\n                return 2;\n            }\n            // 0x4113c9\n            *(char *)(v1 + 8) = 23;\n            // 0x4111ee\n            return 2;\n        }\n        case 85: {\n            // 0x4114b5\n            if ((a3 & 0x8400) == 0) {\n                // 0x4114c7\n                *(char *)(v1 + 8) = 10;\n            }\n            // 0x4111ee\n            return 2;\n        }\n        case 86: {\n            // 0x41149a\n            if ((a3 & 0x1200) != 512) {\n                // 0x4111ee\n                return 2;\n            }\n            // 0x411491\n            *(char *)(v1 + 8) = 24;\n            // 0x4111ee\n            return 2;\n        }\n    }\n    // 0x4111ee\n    return 2;\n}\n"
        },
        {
            "funcName": "function_411770",
            "funcStartAddr": "411770",
            "funcEndAddr": "411826",
            "decompiledFuncCode": "int64_t function_411770(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a1 + 72);\n    int64_t result2 = -1;\n    *v1 = (0x100000000 * function_4110c0((int64_t *)a2, a1, a3) >> 32) + *v1;\n    char v2 = *(char *)(a2 + 8); // 0x4117a9\n    int64_t result = result2; // 0x411770\n    switch (v2) {\n        case 2: {\n            // 0x411807\n            return -2;\n        }\n        case 24: {\n            // 0x411807\n            return result;\n        }\n    }\n    // 0x4117b6\n    int64_t v3; // 0x411770\n    unsigned char v4 = (char)v3; // 0x41179e\n    while (v4 != 44) {\n        int64_t v5 = -2; // 0x4117bd\n        if (v2 == 1) {\n            // 0x4117c8\n            v5 = -2;\n            if (result2 != -2 && v4 <= 57) {\n                int64_t v6 = v4; // 0x41179e\n                if (result2 == -1) {\n                    // 0x411818\n                    v5 = v6 - 48;\n                } else {\n                    int64_t v7 = 10 * result2 + v6; // 0x4117df\n                    int64_t v8 = v7 - 0x8030; // 0x4117e8\n                    v5 = v8 < 0 == (0x802f - v7 & v7) < 0 == (v8 != 0) ? 0x8000 : v7 - 48;\n                }\n            }\n        }\n        // 0x411790\n        result2 = v5;\n        *v1 = (0x100000000 * function_4110c0((int64_t *)a2, a1, a3) >> 32) + *v1;\n        v2 = *(char *)(a2 + 8);\n        result = result2;\n        switch (v2) {\n            case 2: {\n                // 0x411807\n                return -2;\n            }\n            case 24: {\n                // 0x411807\n                return result;\n            }\n        }\n        // 0x4117b6\n        int64_t v9; // 0x411770\n        v4 = *(char *)&v9;\n    }\n    // 0x411807\n    return result2;\n}\n"
        },
        {
            "funcName": "function_411830",
            "funcStartAddr": "411830",
            "funcEndAddr": "412d14",
            "decompiledFuncCode": "int64_t function_411830(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x411830\n    int128_t v1; // 0x411830\n    int128_t v2 = v1;\n    int64_t v3 = a6;\n    int64_t v4 = a3;\n    int64_t v5; // bp-280, 0x411830\n    int64_t v6 = &v5; // 0x41183a\n    unsigned char v7 = *(char *)(a3 + 8); // 0x411849\n    int64_t v8 = v7; // 0x411849\n    int64_t v9 = v4; // 0x411855\n    v4 = v8;\n    g92 = v8;\n    int32_t v10 = v7;\n    int64_t * v11; // 0x411830\n    int32_t v12; // 0x411830\n    int64_t v13; // 0x411830\n    int64_t v14; // bp-88, 0x411830\n    int64_t v15; // 0x411830\n    int64_t v16; // 0x41258b\n    char v17; // 0x412592\n    int64_t * mem2; // 0x411f79\n    int64_t v18; // 0x411f79\n    int64_t * v19; // 0x411fa0\n    char * v20; // 0x411fa7\n    switch (v7) {\n        case 1: {\n            int64_t v21 = a2 + 112; // 0x4120f7\n            int64_t v22 = a2 + 128; // 0x4120fb\n            int64_t v23 = function_409270(v21, v22, 0, 0, v9); // 0x412108\n            if (v23 == 0) {\n                // 0x4121c1\n                *(int32_t *)a6 = 12;\n                // 0x4119a8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x41211b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                int64_t * v24 = (int64_t *)(a1 + 72); // 0x412138\n                int64_t v25 = &v14;\n                int64_t v26 = 0x100000000 * v23 >> 32; // 0x4121a5\n                uint64_t v27 = *v24; // 0x412138\n                while (*(int64_t *)(a1 + 104) > v27) {\n                    // 0x412146\n                    if (v27 == *(int64_t *)(a1 + 48)) {\n                        // break -> 0x4118d0\n                        break;\n                    }\n                    // 0x412150\n                    if (*(int32_t *)(*(int64_t *)(a1 + 16) + 4 * v27) != -1) {\n                        // break -> 0x4118d0\n                        break;\n                    }\n                    // 0x41215e\n                    *v24 = (0x100000000 * function_4110c0((int64_t *)v9, a1, a4) >> 32) + *v24;\n                    int64_t v28 = function_409270(v21, v22, 0, 0, v9); // 0x412181\n                    v26 = function_409270(v21, v22, (int32_t)v26, (int32_t)v28, v25);\n                    if (v28 == 0 || v26 == 0) {\n                        // 0x4121c1\n                        *(int32_t *)a6 = 12;\n                        // 0x4119a8\n                        *(int64_t *)(v6 + 24) = 0;\n                        // 0x4118fa\n                        return *(int64_t *)(v6 + 24);\n                    }\n                    v27 = *v24;\n                }\n            }\n            goto lab_0x4118d0;\n        }\n        case 4: {\n            int64_t v29 = 1 << v10 % 32; // 0x4121e1\n            if ((*(int64_t *)(a2 + 168) & v29) == 0) {\n                // 0x41285c\n                *(int32_t *)a6 = 6;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v30 = (int64_t *)(a2 + 160); // 0x4121fc\n            *v30 = *v30 | v29;\n            if (function_409270(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x4121c1\n                *(int32_t *)a6 = 12;\n                // 0x4119a8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v31 = (int64_t *)(a2 + 152); // 0x41221d\n            *v31 = *v31 + 1;\n            char * v32 = (char *)(a2 + 176); // 0x412225\n            *v32 = *v32 | 2;\n            goto lab_0x4118d0;\n        }\n        case 5: {\n            // 0x412231\n            if (function_409270(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x4121c1\n                *(int32_t *)a6 = 12;\n                // 0x4119a8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x41225b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                char * v33 = (char *)(a2 + 176); // 0x412268\n                *v33 = *v33 | 2;\n            }\n            goto lab_0x4118d0;\n        }\n        case 8: {\n            int64_t * v34 = (int64_t *)(a2 + 48); // 0x411911\n            uint64_t v35 = *v34; // 0x411911\n            v5 = a5;\n            *v34 = v35 + 1;\n            int64_t v36 = function_4110c0((int64_t *)v9, a1, a4 | 0x800000); // 0x411936\n            int64_t * v37 = (int64_t *)(a1 + 72); // 0x41193d\n            *v37 = (0x100000000 * v36 >> 32) + *v37;\n            char * v38 = (char *)(v9 + 8); // 0x411943\n            int64_t v39 = 0; // 0x411949\n            if (*v38 != 9) {\n                // 0x41194f\n                v4 = v9;\n                int64_t v40 = function_412e60(a1, a2, v9, a4, v5 + 1, a6); // 0x41196b\n                if (*(int32_t *)&v3 != 0) {\n                    // 0x4119a8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x4118fa\n                    return *(int64_t *)(v6 + 24);\n                }\n                // 0x411979\n                v39 = v40;\n                if (*v38 != 9) {\n                    if (v40 != 0) {\n                        // 0x41198a\n                        function_406aa0(v40, 0x407cb0, 0);\n                    }\n                    // 0x411999\n                    *(int32_t *)a6 = 8;\n                  lab_0x4119a8:\n                    // 0x4119a8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x4118fa\n                    return *(int64_t *)(v6 + 24);\n                }\n            }\n            // 0x4123d2\n            if (v35 < 9) {\n                int32_t v41 = 1 << (int32_t)v35 % 32;\n                v4 = v41;\n                int64_t * v42 = (int64_t *)(a2 + 168); // 0x41242a\n                *v42 = *v42 | (int64_t)v41;\n            }\n            int64_t v43 = function_409270(a2 + 112, a2 + 128, (int32_t)v39, 0, (int64_t)&v14); // 0x4123fd\n            if (v43 == 0) {\n                // 0x4121c1\n                *(int32_t *)a6 = 12;\n                // 0x4119a8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x412410\n            *(int64_t *)(v43 + 40) = v35;\n            goto lab_0x4118d0;\n        }\n        case 9: {\n            if ((a4 & 0x20000) == 0) {\n                // 0x4123b9\n                *(int32_t *)a6 = 16;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x4118a0;\n        }\n        case 11: {\n            goto lab_0x411881;\n        }\n        case 12: {\n            char * v44 = (char *)(a2 + 176); // 0x412286\n            unsigned char v45 = *v44; // 0x412286\n            if ((v45 & 16) != 0) {\n                // 0x4122e0\n            } else {\n                int64_t v46 = v45; // 0x412286\n                *v44 = v45 | 16;\n                v13 = 0;\n                v15 = 0;\n                if ((v46 & 8) != 0) {\n                    goto lab_0x412ad5;\n                } else {\n                    // 0x4122a7\n                    *(int64_t *)(a2 + 184) = 0x3ff000000000000;\n                    *(int64_t *)(a2 + 192) = 0x7fffffe87fffffe;\n                    v13 = 128;\n                    v15 = 2;\n                    if ((v46 & 4) == 0) {\n                        goto lab_0x412ad5;\n                    } else {\n                        // 0x4122d1\n                        __asm_movups(*(int128_t *)(a2 + 200), __asm_pxor(v2, v2));\n                        v12 = *(int32_t *)&v4;\n                        goto lab_0x4122e0_2;\n                    }\n                }\n            }\n        }\n        case 18: {\n            goto lab_0x411881;\n        }\n        case 19: {\n            goto lab_0x411881;\n        }\n        case 20: {\n            int64_t * mem = calloc(32, 1); // 0x411f63\n            v5 = (int64_t)mem;\n            mem2 = calloc(80, 1);\n            if (mem == NULL || mem2 == NULL) {\n                // 0x412846\n                free((int64_t *)v5);\n                free(mem2);\n                // 0x4121c1\n                *(int32_t *)a6 = 12;\n                // 0x4119a8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x411f95\n            v18 = (int64_t)mem2;\n            v19 = (int64_t *)v9;\n            int64_t v47 = function_406b10(v19, a1, a4); // 0x411fa0\n            v20 = (char *)(v9 + 8);\n            char v48 = *v20; // 0x411fa7\n            v17 = v48;\n            v16 = v47;\n            switch (v48) {\n                case 2: {\n                    // 0x41281a\n                    *(int32_t *)a6 = 2;\n                    v11 = (int64_t *)(v6 + 48);\n                    goto lab_0x4124eb_3;\n                }\n                case 25: {\n                    char * v49 = (char *)(v18 + 32); // 0x41255e\n                    *v49 = *v49 | 1;\n                    if ((a4 & 256) != 0) {\n                        int64_t * v50 = (int64_t *)v5; // 0x412572\n                        *v50 = *v50 | 1024;\n                    }\n                    int64_t * v51 = (int64_t *)(a1 + 72); // 0x41257c\n                    *v51 = *v51 + (0x100000000 * v47 >> 32);\n                    v16 = function_406b10(v19, a1, a4);\n                    v17 = *v20;\n                    if (v17 == 2) {\n                        // 0x41281a\n                        *(int32_t *)a6 = 2;\n                        v11 = (int64_t *)(v6 + 48);\n                        goto lab_0x4124eb_3;\n                    } else {\n                        goto lab_0x411fc2;\n                    }\n                }\n                default: {\n                    goto lab_0x411fc2;\n                }\n            }\n        }\n        case 23: {\n            if ((a4 & 0x1000000) != 0) {\n              lab_0x411ba5:\n                // 0x411ba5\n                *(int64_t *)(v6 + 24) = 0;\n                *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n                // 0x4118fa\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x411881;\n        }\n        case 24: {\n            goto lab_0x4118a0;\n        }\n        case 32: {\n            goto lab_0x412064;\n        }\n        case 33: {\n            goto lab_0x412064;\n        }\n        case 34: {\n            goto lab_0x4120b0;\n        }\n        case 35: {\n            goto lab_0x4120b0;\n        }\n        case 36: {\n            // 0x4120d2\n            *(int32_t *)a6 = 5;\n            // 0x4118fa\n            return *(int64_t *)(v6 + 24);\n        }\n        default: {\n            goto lab_0x4119a8;\n        }\n    }\n  lab_0x411ebb:;\n    // 0x411ebb\n    int64_t * v52; // 0x411830\n    if (*v52 == 0) {\n        goto lab_0x4119a8;\n    } else {\n        goto lab_0x411c5b;\n    }\n  lab_0x411c5b:\n    // 0x411c5b\n    function_406aa0(*v52, 0x407cb0, 0);\n    *v52 = 0;\n    return *(int64_t *)(v6 + 24);\n  lab_0x411d52:;\n    // 0x411d52\n    int64_t v53; // 0x411830\n    char * v54 = (char *)(v53 + 8);\n    char * v55 = v54; // 0x411d5b\n    int128_t v56; // 0x411830\n    int128_t v57 = v56; // 0x411d5b\n    int64_t * v58; // 0x4118d0\n    int64_t * v59; // 0x411830\n    if ((*v58 & 0x200000) == 0) {\n        // 0x41282a\n        if (*v54 != 2) {\n            // 0x411eb0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x411ebb;\n        } else {\n            // 0x412836\n            *(int32_t *)*v59 = 9;\n            goto lab_0x411ebb;\n        }\n    }\n    goto lab_0x411d61;\n  lab_0x411e74:;\n    // 0x411e74\n    int64_t v83; // 0x411830\n    int64_t v336 = v83; // 0x411e76\n    int64_t v337 = v336 - 0x7fff; // 0x411e76\n    int64_t v84; // 0x411830\n    int64_t v316 = v84; // 0x411e84\n    if (v337 < 0 == (0x7ffe - v336 & v336) < 0 == (v337 != 0)) {\n        // 0x411e86\n        *(int32_t *)*v59 = 15;\n        goto lab_0x411ebb;\n    }\n    goto lab_0x411e19;\n  lab_0x411db9:;\n    int64_t v338 = *v58; // 0x411db9\n    v4 = v338;\n    int128_t v80; // 0x411d25\n    int128_t * v78; // 0x411830\n    *v78 = (int128_t)__asm_movaps(v80);\n    int64_t v66; // 0x411830\n    int64_t v339 = function_411770(v66, v53, v338); // 0x411dc9\n    v5 = v339;\n    v56 = __asm_movdqa(*v78);\n    int64_t v81; // 0x411830\n    if (v339 == -2) {\n        goto lab_0x411d52;\n    } else {\n        int64_t v340 = v81;\n        if (v339 != -1 == v339 < v340) {\n            // 0x411eb0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x411ebb;\n        }\n        // 0x411df5\n        if (*(char *)(v53 + 8) != 24) {\n            // 0x411eb0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x411ebb;\n        }\n        // 0x411e01\n        v83 = v339;\n        v84 = v340;\n        if (v339 != -1) {\n            goto lab_0x411e74;\n        } else {\n            int64_t v341 = v340 - 0x7fff; // 0x411e0a\n            v316 = v340;\n            if (v341 < 0 == (0x7ffe - v340 & v340) < 0 == (v341 != 0)) {\n                // 0x411e86\n                *(int32_t *)*v59 = 15;\n                goto lab_0x411ebb;\n            }\n            goto lab_0x411e19;\n        }\n    }\n  lab_0x411d61:;\n    // 0x411d61\n    int64_t * v60; // 0x4119d6\n    int64_t v61; // 0x4119d6\n    *v60 = v61;\n    int128_t * v62; // 0x4119da\n    *v62 = (int128_t)__asm_movaps(v57);\n    *v55 = 1;\n    int64_t v63 = *v52; // 0x411d75\n    int64_t v64 = v53; // 0x411d75\n    int64_t v65 = v66; // 0x411d75\n    goto lab_0x411b4e;\n  lab_0x411d80:\n    // 0x411d80\n    if (*(int32_t *)*v59 != 0) {\n        // 0x4119a8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x411d8f;\n  lab_0x411e19:;\n    int64_t v315 = v316;\n    int64_t v317 = *v58; // 0x411e19\n    v4 = v317;\n    int64_t v318 = function_4110c0((int64_t *)v53, v66, v317); // 0x411e24\n    int64_t v319 = *v52; // 0x411e29\n    *v60 = *v60 + (0x100000000 * v318 >> 32);\n    int64_t v127; // 0x411830\n    int64_t v99; // 0x411830\n    int64_t v132; // 0x411830\n    int64_t v128; // 0x411830\n    int64_t v101; // 0x411830\n    int64_t v135; // 0x411830\n    int64_t v102; // 0x411830\n    int64_t v103; // 0x411830\n    int64_t v136; // 0x411830\n    int64_t v129; // 0x411830\n    int64_t v134; // 0x411830\n    int64_t v100; // 0x411830\n    int64_t v133; // 0x411830\n    int64_t * v89; // 0x411830\n    int64_t * v110; // 0x411830\n    int64_t * v118; // 0x411830\n    int64_t v114; // 0x411830\n    char * v108; // 0x411830\n    if (v319 == 0) {\n        goto lab_0x411d80;\n    } else {\n        int64_t v320 = v5; // 0x411e3d\n        if ((v320 || v315) != 0) {\n            if (v315 < 1) {\n                // 0x412d08\n                v4 = 0;\n                v132 = 0;\n                v133 = v315;\n                v134 = *v52;\n                v135 = v53;\n                v136 = v66;\n                goto lab_0x411f32;\n            } else {\n                int64_t v321; // 0x411830\n                int64_t v322; // 0x411830\n                int64_t v323; // 0x411830\n                int64_t v324; // 0x411830\n                int64_t v325; // 0x411830\n                if (v315 == 1) {\n                    int64_t v326 = *v52; // 0x412cd7\n                    v321 = v320;\n                    v322 = v53;\n                    v323 = v326;\n                    v324 = v66;\n                    v325 = v326;\n                } else {\n                    int64_t v327 = *v110; // 0x411bd3\n                    int64_t v328 = *v52; // 0x411bd8\n                    *v89 = v66;\n                    *v118 = v53;\n                    int64_t v329 = v327 + 112; // 0x411bef\n                    int64_t v330 = v327 + 128; // 0x411bf3\n                    int64_t v331 = 2; // 0x411bfd\n                    int64_t v332 = function_409350(v328, *v110); // 0x411c1a\n                    v4 = v328;\n                    *v108 = 16;\n                    int64_t v333 = function_409270(v329, v330, (int32_t)v328, (int32_t)v332, v114); // 0x411c3e\n                    if (v332 == 0 || v333 == 0) {\n                        // 0x411c50\n                        *(int32_t *)*v59 = 12;\n                        goto lab_0x411c5b;\n                    }\n                    // 0x411c05\n                    v331++;\n                    int64_t v334 = v333; // 0x411c0c\n                    int64_t v335 = v332; // 0x411c0c\n                    while (v315 >= v331) {\n                        // 0x411c12\n                        v332 = function_409350(v335, *v110);\n                        v4 = v334;\n                        *v108 = 16;\n                        v333 = function_409270(v329, v330, (int32_t)v334, (int32_t)v332, v114);\n                        if (v332 == 0 || v333 == 0) {\n                            // 0x411c50\n                            *(int32_t *)*v59 = 12;\n                            goto lab_0x411c5b;\n                        }\n                        // 0x411c05\n                        v331++;\n                        v334 = v333;\n                        v335 = v332;\n                    }\n                    // 0x411ed0\n                    v321 = v5;\n                    v322 = *v118;\n                    v323 = v332;\n                    v324 = *v89;\n                    v325 = v333;\n                }\n                // 0x411ee3\n                v4 = v325;\n                v127 = v325;\n                v128 = v322;\n                v129 = v324;\n                v99 = v325;\n                v100 = v315;\n                v101 = v322;\n                v102 = v323;\n                v103 = v324;\n                if (v315 != v321) {\n                    goto lab_0x411f0f;\n                } else {\n                    goto lab_0x411ef0;\n                }\n            }\n        } else {\n            // 0x411e4a\n            v4 = 0;\n            function_406aa0(v319, 0x407cb0, 0);\n            if (*(int32_t *)*v59 != 0) {\n                goto lab_0x411c5b;\n            }\n            goto lab_0x411d8f;\n        }\n    }\n  lab_0x411b4e:;\n    uint32_t v67 = *(int32_t *)*v59; // 0x411b53\n    v4 = v67;\n    if (v63 == 0 == (v67 != 0)) {\n        goto lab_0x411ebb;\n    }\n    // 0x411b62\n    *v52 = v63;\n    int64_t v68 = v63; // 0x411b62\n    int64_t v69 = v64; // 0x411b62\n    int64_t v70 = v65; // 0x411b62\n    goto lab_0x411b67;\n  lab_0x411d8f:\n    // 0x411d8f\n    *v52 = 0;\n    v68 = 0;\n    v69 = v53;\n    v70 = v66;\n    goto lab_0x411b67;\n  lab_0x411ce8:;\n    // 0x411ce8\n    int64_t v96; // 0x411830\n    int64_t v104 = v96;\n    function_406aa0(v104, 0x406c40, (int32_t)*(int64_t *)(v104 + 40));\n    goto lab_0x411cf9;\n  lab_0x411a4a:;\n    // 0x411a4a\n    int64_t v94; // 0x411830\n    int64_t v105 = v94;\n    int64_t v93; // 0x411830\n    int64_t v106 = v93;\n    int64_t v92; // 0x411830\n    int64_t v107 = v92;\n    char v90; // 0x411830\n    *v108 = v90;\n    int64_t v109 = *v110; // 0x411a51\n    int64_t v111 = v109 + 112; // 0x411a63\n    int64_t v112 = v109 + 128; // 0x411a67\n    int64_t v113 = function_409270(v111, v112, (int32_t)v107, 0, v114); // 0x411a74\n    v4 = v113;\n    if (v113 == 0) {\n        // 0x411c50\n        *(int32_t *)*v59 = 12;\n        goto lab_0x411c5b;\n    }\n    // 0x411a85\n    int64_t v91; // 0x411830\n    int64_t v115 = v91 + 2; // 0x411a85\n    int64_t v116 = v113; // 0x411a8d\n    int64_t v117 = v106; // 0x411a8d\n    if (v115 <= v5) {\n        // 0x411a93\n        *v118 = v106;\n        int64_t v119 = v115; // 0x411a9b\n        int64_t v120 = v107; // 0x411a9b\n        v120 = function_409350(v120, *v110);\n        v4 = v113;\n        *v108 = 16;\n        int64_t v121 = function_409270(v111, v112, (int32_t)v113, (int32_t)v120, v114); // 0x411aca\n        if (v120 == 0 || v121 == 0) {\n            // 0x411c50\n            *(int32_t *)*v59 = 12;\n            goto lab_0x411c5b;\n        }\n        // 0x411ae1\n        v4 = v121;\n        *v108 = 10;\n        int64_t v122 = function_409270(v111, v112, (int32_t)v121, 0, v114); // 0x411afc\n        if (v122 == 0) {\n            // 0x411c50\n            *(int32_t *)*v59 = 12;\n            goto lab_0x411c5b;\n        }\n        // 0x411b0d\n        v119++;\n        int64_t v123 = v122; // 0x411b15\n        while (v119 <= v5) {\n            // 0x411a9e\n            v120 = function_409350(v120, *v110);\n            v4 = v123;\n            *v108 = 16;\n            v121 = function_409270(v111, v112, (int32_t)v123, (int32_t)v120, v114);\n            if (v120 == 0 || v121 == 0) {\n                // 0x411c50\n                *(int32_t *)*v59 = 12;\n                goto lab_0x411c5b;\n            }\n            // 0x411ae1\n            v4 = v121;\n            *v108 = 10;\n            v122 = function_409270(v111, v112, (int32_t)v121, 0, v114);\n            if (v122 == 0) {\n                // 0x411c50\n                *(int32_t *)*v59 = 12;\n                goto lab_0x411c5b;\n            }\n            // 0x411b0d\n            v119++;\n            v123 = v122;\n        }\n        // 0x411b17\n        v4 = v122;\n        v116 = v122;\n        v117 = *v118;\n    }\n    int64_t v124 = v117;\n    int64_t v125 = v116; // 0x411b2d\n    int64_t v126 = *v89; // 0x411b1f\n    v127 = v125;\n    v128 = v124;\n    v129 = v105;\n    if (v126 == 0) {\n        goto lab_0x411ef0;\n    } else {\n        // 0x411b2d\n        *v108 = 16;\n        v63 = function_409270(v111, v112, (int32_t)v126, (int32_t)v125, v114);\n        v64 = v124;\n        v65 = v105;\n        goto lab_0x411b4e;\n    }\n  lab_0x411b67:;\n    unsigned char v71 = *(char *)(v69 + 8); // 0x411b67\n    if ((*v58 & 0x1000000) != 0) {\n        if (v71 != 11 != v71 != 23) {\n            // 0x411b8c\n            if (v68 == 0) {\n                goto lab_0x411ba5;\n            } else {\n                // 0x411b96\n                function_406aa0(v68, 0x407cb0, 0);\n                goto lab_0x411ba5;\n            }\n        }\n    }\n    char v72 = v71; // 0x4118f4\n    int64_t v73 = v70; // 0x4118f4\n    int64_t v74 = v69; // 0x4118f4\n    if (v71 >= 24) {\n        // break -> 0x4118fa\n        goto lab_0x4118fa_2;\n    }\n    goto lab_0x4119c0;\n  lab_0x411cf9:\n    // 0x411cf9\n    v90 = v5 == -1 ? 11 : 10;\n    int64_t v95; // 0x411830\n    v91 = v95;\n    v92 = v104;\n    int64_t v97; // 0x411830\n    v93 = v97;\n    int64_t v98; // 0x411830\n    v94 = v98;\n    goto lab_0x411a4a;\n  lab_0x411ef0:\n    // 0x411ef0\n    *v52 = v127;\n    v68 = v127;\n    v69 = v128;\n    v70 = v129;\n    goto lab_0x411b67;\n  lab_0x411f0f:\n    // 0x411f0f\n    *v89 = v99;\n    int64_t v130 = function_409350(v102, *v110); // 0x411f1c\n    int64_t v131 = *v89; // 0x411f21\n    v4 = v131;\n    v132 = v131;\n    v133 = v100;\n    v134 = v130;\n    v135 = v101;\n    v136 = v103;\n    if (v130 == 0) {\n        // 0x411c50\n        *(int32_t *)*v59 = 12;\n        goto lab_0x411c5b;\n    }\n    goto lab_0x411f32;\n  lab_0x411f32:\n    // 0x411f32\n    *v89 = v132;\n    v95 = v133;\n    v96 = v134;\n    v97 = v135;\n    v98 = v136;\n    if (*(char *)(v134 + 48) != 17) {\n        goto lab_0x411cf9;\n    } else {\n        goto lab_0x411ce8;\n    }\n  lab_0x412b2a:;\n    // 0x412b2a\n    uint64_t v137; // 0x411830\n    int64_t v138 = 1 << v137;\n    v4 = v138;\n    int64_t * v139; // 0x411830\n    *v139 = *v139 | v138;\n    goto lab_0x412b18;\n  lab_0x412b18:;\n    int64_t v140 = v137 + 1; // 0x412b20\n    if (v137 == 63) {\n        // break -> 0x412b39\n        goto lab_0x412b39;\n    }\n    goto lab_0x412b22;\n  lab_0x4124eb_3:\n    // 0x4124eb\n    free((int64_t *)v5);\n    function_407c60(v18);\n    if (*(int32_t *)*v11 != 0) {\n        // 0x4119a8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x41250d\n    *(int64_t *)(v6 + 24) = 0;\n    goto lab_0x4118d0;\n  lab_0x41298e:;\n    // 0x41298e\n    int64_t * v177; // 0x411830\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x4124eb_3;\n  lab_0x412b96_3:\n    // 0x412b96\n    *(int32_t *)*v177 = 11;\n    v11 = v177;\n    goto lab_0x4124eb_3;\n  lab_0x412a95_5:\n    // 0x412a95\n    *(int32_t *)*v177 = 3;\n    v11 = v177;\n    goto lab_0x4124eb_3;\n  lab_0x412054:;\n    // 0x412054\n    int64_t v188; // 0x412029\n    int64_t v254 = v188 & 0xffffffff; // 0x41202e\n    int64_t v234; // 0x411830\n    int64_t v255; // 0x411830\n    int64_t v235; // 0x411830\n    int64_t * v152; // 0x412004\n    int32_t * v168; // 0x411830\n    int64_t v178; // 0x411830\n    int64_t * v179; // 0x411830\n    int64_t * v180; // 0x411830\n    int64_t * v181; // 0x411830\n    int64_t * v182; // 0x411830\n    int64_t v148; // 0x411fd3\n    int64_t * v149; // 0x411fee\n    int64_t v151; // 0x412004\n    switch (g93) {\n        case 0: {\n            unsigned char v256 = *(char *)v151; // 0x412491\n            unsigned char v257 = v256 % 64;\n            int64_t v258 = v257 == 0 ? 1 : 1 << (int64_t)v257;\n            v4 = v258;\n            int64_t * v259 = (int64_t *)(v148 + (int64_t)(v256 / 8 & 24)); // 0x4124a8\n            *v259 = v258 | *v259;\n            v255 = v254;\n            goto lab_0x41244f;\n        }\n        case 1: {\n            int64_t v260 = *v181; // 0x41246d\n            v4 = v260;\n            int64_t v261 = *mem2; // 0x412471\n            int64_t v262 = v260; // 0x41247a\n            int64_t v263 = v261; // 0x41247a\n            if (v260 == *v182) {\n                int64_t v264 = 2 * v260 | 1; // 0x412896\n                *v182 = v264;\n                int64_t * mem3 = realloc((int64_t *)v261, 4 * (int32_t)v264); // 0x4128a8\n                if (mem3 == NULL) {\n                    goto lab_0x41298e;\n                }\n                // 0x4128b6\n                v263 = (int64_t)mem3;\n                *mem2 = v263;\n                v262 = *v181;\n                v4 = v262;\n            }\n            // 0x412480\n            *v181 = v262 + 1;\n            *(int32_t *)(4 * v4 + v263) = *v168;\n            v255 = v254;\n            goto lab_0x41244f;\n        }\n        case 2: {\n            int32_t v265 = function_40be40(v148, *v152); // 0x412445\n            *(int32_t *)*v177 = v265;\n            v255 = v254;\n            v11 = v177;\n            if (v265 != 0) {\n                goto lab_0x4124eb_3;\n            }\n            goto lab_0x41244f;\n        }\n        case 3: {\n            int32_t v266 = function_40be40(v148, *v152); // 0x41252d\n            *(int32_t *)*v177 = v266;\n            v255 = v254;\n            v11 = v177;\n            if (v266 != 0) {\n                goto lab_0x4124eb_3;\n            }\n            goto lab_0x41244f;\n        }\n        case 4: {\n            int64_t v267 = *(int64_t *)(a1 + 120); // 0x4124b3\n            *v179 = *v149;\n            int64_t v268 = function_40be90(v267, v148, v18 + 24, v178, v180, *v152, (int64_t)&g88); // 0x4124d3\n            int32_t v269 = v268; // 0x4124dd\n            *(int32_t *)*v177 = v269;\n            v3 = *v179;\n            v255 = v254;\n            v11 = v177;\n            if (v269 != 0) {\n                goto lab_0x4124eb_3;\n            }\n            goto lab_0x41244f;\n        }\n        default: {\n            // 0x412c94\n            __assert_fail(\"0\", \"lib/regcomp.c\", 3315, \"parse_bracket_exp\");\n            v234 = &g88;\n            v235 = (int64_t)\"parse_bracket_exp\";\n            goto lab_0x412cad_3;\n        }\n    }\n  lab_0x4125b5:\n    // 0x4125b5\n    *(int32_t *)*v177 = 7;\n    v11 = v177;\n    goto lab_0x4124eb_3;\n  lab_0x41244f:;\n    int64_t v270 = v255;\n    int64_t v183 = v270; // 0x411830\n    int64_t v184 = 0; // 0x411830\n    int64_t * v156; // 0x411830\n    int64_t * v163; // 0x411830\n    switch (*v20) {\n        case 2: {\n            goto lab_0x4125b5;\n        }\n        case 21: {\n            // 0x4128c3\n            *v156 = *v156 + (0x100000000 * v270 >> 32);\n            if (*(char *)(v6 + 56) != 0) {\n                // 0x4128d1\n                v4 = v5 + 32;\n                int64_t v271 = v5; // 0x4128d8\n                int64_t * v272 = (int64_t *)v271; // 0x4128dc\n                *v272 = -1 - *v272;\n                v271 += 8;\n                while (v4 != v271) {\n                    // 0x4128dc\n                    v272 = (int64_t *)v271;\n                    *v272 = -1 - *v272;\n                    v271 += 8;\n                }\n            }\n            uint32_t v273 = *(int32_t *)(*v163 + 180); // 0x4128ed\n            v4 = v273;\n            if (v273 >= 2) {\n                int64_t v274 = 0;\n                int64_t * v275 = (int64_t *)(v274 + v5); // 0x41290b\n                *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                int64_t v276 = v274 + 8; // 0x412917\n                while (v274 != 24) {\n                    // 0x412907\n                    v274 = v276;\n                    v275 = (int64_t *)(v274 + v5);\n                    *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                    v276 = v274 + 8;\n                }\n            }\n            // 0x412919\n            if (*v181 != 0) {\n                goto lab_0x41299e;\n            } else {\n                // 0x412920\n                if (*(int64_t *)(v18 + 48) != 0) {\n                    goto lab_0x41299e;\n                } else {\n                    // 0x412927\n                    if (*(int64_t *)(v18 + 56) != 0) {\n                        goto lab_0x41299e;\n                    } else {\n                        // 0x41292e\n                        if (*(int64_t *)(v18 + 64) != 0) {\n                            goto lab_0x41299e;\n                        } else {\n                            int64_t v277 = v4; // 0x412935\n                            v4 = v277 + 0xffffffff & 0xffffffff;\n                            if ((int32_t)v277 < 2) {\n                                goto lab_0x412948;\n                            } else {\n                                // 0x41293a\n                                if (*(int64_t *)v178 != 0) {\n                                    goto lab_0x41299e;\n                                } else {\n                                    // 0x412941\n                                    if (*(char *)(v18 + 32) % 2 != 0) {\n                                        goto lab_0x41299e;\n                                    } else {\n                                        goto lab_0x412948;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        default: {\n            goto lab_0x411fee;\n        }\n    }\n  lab_0x41272f:;\n    // 0x41272f\n    int64_t v203; // 0x411830\n    int64_t v278 = (int64_t)*(char *)v203;\n    int64_t v220 = v278; // 0x412731\n    int64_t v216; // 0x411830\n    char v218; // 0x411830\n    int64_t v217; // 0x411830\n    int64_t v219; // 0x411830\n    int64_t * v162; // 0x411830\n    int32_t v197; // 0x4126f6\n    if (v197 == 0) {\n        goto lab_0x412b89;\n    } else {\n        // 0x412737\n        v218 = 0;\n        v219 = v278;\n        if (v197 != 3) {\n            goto lab_0x41274a;\n        } else {\n            int64_t v279 = *v162; // 0x41273e\n            v3 = v279;\n            v216 = v279;\n            v217 = v278;\n            goto lab_0x412746;\n        }\n    }\n  lab_0x412b89:;\n    // 0x412b89\n    int64_t v161; // 0x411830\n    v218 = *(char *)v161;\n    v219 = v220;\n    goto lab_0x41274a;\n  lab_0x412746:\n    // 0x412746\n    v218 = *(char *)v216;\n    v219 = v217;\n    goto lab_0x41274a;\n  lab_0x41274a:;\n    int64_t v280 = v219;\n    unsigned char v281 = v218;\n    int64_t v282; // 0x411830\n    int64_t v283; // 0x411830\n    int32_t v284; // 0x411830\n    char * v165; // 0x411830\n    int32_t v195; // 0x4126cd\n    if (v195 == 0) {\n        goto lab_0x412b54;\n    } else {\n        // 0x412753\n        v283 = v281;\n        v284 = v197;\n        v282 = (int64_t)*v168;\n        if (*v165 != 0) {\n            goto lab_0x412b54;\n        } else {\n            goto lab_0x412763;\n        }\n    }\n  lab_0x412b54:;\n    // 0x412b54\n    int32_t * v170; // 0x411830\n    *v170 = (int32_t)v281;\n    int64_t * v171; // 0x411830\n    *v171 = v4;\n    int64_t v285 = function_407220(v280, v4); // 0x412b60\n    v4 = *v171;\n    v283 = (int64_t)*v170;\n    int32_t * v160; // 0x411830\n    v284 = *v160;\n    v282 = v285 & 0xffffffff;\n    goto lab_0x412763;\n  lab_0x412763:;\n    int64_t v286 = v282;\n    int32_t v287 = v284;\n    int64_t v288 = v283;\n    int64_t v289; // 0x411830\n    int64_t v290; // 0x411830\n    if (v287 == 0) {\n        goto lab_0x412aa5;\n    } else {\n        int64_t v291 = (int64_t)*(int32_t *)v161; // 0x41276b\n        v3 = v291;\n        v289 = v291;\n        v290 = v286;\n        if (v287 == 3) {\n            goto lab_0x412aa5;\n        } else {\n            goto lab_0x41277c;\n        }\n    }\n  lab_0x412aa5:\n    // 0x412aa5\n    *v170 = (int32_t)v286;\n    *v171 = v4;\n    int64_t v292 = function_407220(v288, v4); // 0x412ab4\n    v4 = *v171;\n    int64_t v293 = v292 & 0xffffffff; // 0x412ac3\n    v3 = v293;\n    v289 = v293;\n    v290 = (int64_t)*v170;\n    goto lab_0x41277c;\n  lab_0x41277c:;\n    int32_t v294 = v290;\n    if (v294 == -1) {\n        goto lab_0x412a95_5;\n    }\n    uint32_t v295 = (int32_t)v289; // 0x412786\n    if (v295 == -1) {\n        goto lab_0x412a95_5;\n    }\n    // 0x412790\n    if (v294 > v295 == ((*v149 & 0x10000) != 0)) {\n        goto lab_0x412b96_3;\n    }\n    int64_t v296 = v4; // 0x4127a4\n    int32_t v297 = v294; // 0x4127a7\n    int64_t * v172; // 0x411830\n    int32_t * v173; // 0x411830\n    int32_t * v174; // 0x411830\n    int64_t * v175; // 0x411830\n    int64_t * v176; // 0x411830\n    if (v296 != 0) {\n        int64_t v298 = *(int64_t *)(v296 + 64); // 0x4127a9\n        int64_t v299 = *(int64_t *)(v296 + 8); // 0x4127ad\n        int32_t v300 = v294; // 0x4127b6\n        int64_t v301 = v298; // 0x4127b6\n        int64_t v302 = v299; // 0x4127b6\n        if (v298 == *v172) {\n            // 0x412c12\n            *v173 = v295;\n            *v174 = v294;\n            *v171 = v4;\n            int64_t v303 = 2 * v298 | 1; // 0x412c2c\n            int64_t v304 = 4 * v303; // 0x412c30\n            *v172 = v303;\n            *v175 = v304;\n            *v176 = (int64_t)realloc((int64_t *)v299, (int32_t)v304);\n            int64_t * mem4 = realloc((int64_t *)*(int64_t *)(*v171 + 16), (int32_t)*v175); // 0x412c60\n            int64_t v305 = *v176; // 0x412c65\n            if (v305 == 0) {\n                // 0x412cad\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x412cad_3;\n            }\n            int64_t v306 = *v171; // 0x412c72\n            v4 = v306;\n            v300 = *v174;\n            v3 = (int64_t)*v173;\n            if (mem4 == NULL) {\n                // 0x412cad\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x412cad_3;\n            }\n            // 0x412c83\n            *(int64_t *)(v306 + 16) = (int64_t)mem4;\n            v301 = *(int64_t *)(v4 + 64);\n            *(int64_t *)(v4 + 8) = v305;\n            v302 = v305;\n        }\n        int64_t v307 = 4 * v301; // 0x4127bc\n        *(int32_t *)(v302 + v307) = v300;\n        *(int64_t *)(v4 + 64) = v301 + 1;\n        *(int32_t *)(*(int64_t *)(v4 + 16) + v307) = (int32_t)v3;\n        v297 = v300;\n    }\n    int64_t v308 = 0;\n    uint32_t v309 = (int32_t)v308; // 0x4127e2\n    int64_t v310; // 0x4127f2\n    int64_t * v311; // 0x4127f9\n    if (v297 <= v309) {\n        // 0x4127e7\n        if ((int32_t)v3 >= v309) {\n            // 0x4127ec\n            v310 = v308 >> 6;\n            v4 = v310;\n            v311 = (int64_t *)(8 * v310 + v148);\n            *v311 = *v311 | 1 << v308 % 64;\n        }\n    }\n    int64_t v312 = v308 + 1; // 0x412808\n    while (v308 != 255) {\n        // 0x4127e0\n        v308 = v312;\n        v309 = (int32_t)v308;\n        if (v297 <= v309) {\n            // 0x4127e7\n            if ((int32_t)v3 >= v309) {\n                // 0x4127ec\n                v310 = v308 >> 6;\n                v4 = v310;\n                v311 = (int64_t *)(8 * v310 + v148);\n                *v311 = *v311 | 1 << v308 % 64;\n            }\n        }\n        // 0x4127fe\n        v312 = v308 + 1;\n    }\n    // 0x41280a\n    *(int32_t *)*v177 = 0;\n    int64_t v194; // 0x4126c8\n    v255 = v194 & 0xffffffff;\n    goto lab_0x41244f;\n  lab_0x411881:\n    if ((a4 & 32) != 0) {\n        // 0x411ba5\n        *(int64_t *)(v6 + 24) = 0;\n        *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    if ((a4 & 16) != 0) {\n        // 0x4125c5\n        v5 = a5;\n        int64_t v313 = function_4110c0((int64_t *)v9, a1, a4); // 0x4125d5\n        int64_t * v314 = (int64_t *)(a1 + 72); // 0x4125e7\n        *v314 = (0x100000000 * v313 >> 32) + *v314;\n        function_411830(a1, a2, v9, a4, v5, a6);\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4118a0;\n  lab_0x4118a0:\n    // 0x4118a0\n    *(char *)(v9 + 8) = 1;\n    if (function_409270(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n        // 0x4121c1\n        *(int32_t *)a6 = 12;\n        // 0x4119a8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4118d0;\n  lab_0x412064:;\n    int64_t v223 = &g2; // 0x412080\n    int64_t v222 = (int64_t)\"alnum\"; // 0x412080\n    bool v224 = v7 == 33; // 0x412080\n    goto lab_0x412084;\n  lab_0x4120b0:\n    // 0x4120b0\n    v223 = (int64_t)&g5;\n    v222 = (int64_t)\"space\";\n    v224 = v7 == 35;\n    goto lab_0x412084;\n  lab_0x4118d0:\n    // 0x4118d0\n    v58 = (int64_t *)(v6 + 8);\n    int64_t v144 = function_4110c0((int64_t *)v9, a1, *v58); // 0x4118db\n    unsigned char v145 = *(char *)(v9 + 8); // 0x4118e0\n    int64_t * v146 = (int64_t *)(a1 + 72); // 0x4118e8\n    *v146 = *v146 + (0x100000000 * v144 >> 32);\n    if (v145 >= 24) {\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x4119c0\n    v52 = (int64_t *)(v6 + 24);\n    int64_t v147 = v6 + 32;\n    v89 = (int64_t *)v147;\n    v78 = (int128_t *)v147;\n    v59 = (int64_t *)(v6 + 48);\n    v110 = (int64_t *)(v6 + 16);\n    v118 = (int64_t *)(v6 + 56);\n    v114 = v6 + 192;\n    v108 = (char *)(v6 + 200);\n    v72 = v145;\n    v73 = a1;\n    v74 = v9;\n    while (true) {\n      lab_0x4119c0:;\n        unsigned char v75 = v72;\n        if ((1 << (int64_t)(v75 % 64) & 0x8c0800) == 0) {\n            // break -> 0x4118fa\n            break;\n        }\n        // 0x4119d6\n        v53 = v74;\n        v66 = v73;\n        v60 = (int64_t *)(v66 + 72);\n        v61 = *v60;\n        v62 = (int128_t *)v53;\n        int128_t v76 = __asm_movdqa(*v62); // 0x4119da\n        if (v75 == 23) {\n            int64_t v77 = *v58; // 0x411d10\n            v4 = v77;\n            *v78 = (int128_t)__asm_movaps(v76);\n            int64_t v79 = function_411770(v66, v53, v77); // 0x411d20\n            v80 = __asm_movdqa(*v78);\n            v5 = v79;\n            v56 = v80;\n            switch (v79) {\n                case -1: {\n                    // 0x411da0\n                    if (*(char *)(v53 + 8) != 1) {\n                        // 0x411eb0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x411ebb;\n                    }\n                    // 0x411dac\n                    v81 = 0;\n                    if (*(char *)v53 != 44) {\n                        // 0x411eb0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x411ebb;\n                    }\n                    goto lab_0x411db9;\n                }\n                case -2: {\n                    goto lab_0x411d52;\n                }\n                default: {\n                    char * v82 = (char *)(v53 + 8);\n                    v56 = v80;\n                    v83 = v79;\n                    v84 = v79;\n                    switch (*v82) {\n                        case 24: {\n                            goto lab_0x411e74;\n                        }\n                        case 1: {\n                            // 0x411e93\n                            v81 = v79;\n                            if (*(char *)v53 == 44) {\n                                goto lab_0x411db9;\n                            } else {\n                                // 0x411e9e\n                                v55 = v82;\n                                v57 = v80;\n                                if ((*v58 & 0x200000) == 0) {\n                                    // 0x411eb0\n                                    *(int32_t *)*v59 = 10;\n                                    goto lab_0x411ebb;\n                                }\n                                goto lab_0x411d61;\n                            }\n                        }\n                        default: {\n                            goto lab_0x411d52;\n                        }\n                    }\n                }\n            }\n        } else {\n            int64_t v85 = *v58;\n            v4 = v85;\n            int64_t v86 = function_4110c0((int64_t *)v53, v66, v85);\n            *v60 = (0x100000000 * v86 >> 32) + *v60;\n            int64_t v87 = *v52;\n            if (v75 == 19) {\n                if (v87 == 0) {\n                    goto lab_0x411d80;\n                } else {\n                    int64_t v88 = v75 == 18; // 0x4119c9\n                    v5 = 1;\n                    *v89 = 0;\n                    v90 = 10;\n                    v91 = v88;\n                    v92 = v87;\n                    v93 = v53;\n                    v94 = v66;\n                    v95 = v88;\n                    v96 = v87;\n                    v97 = v53;\n                    v98 = v66;\n                    if (*(char *)(v87 + 48) == 17) {\n                        goto lab_0x411ce8;\n                    } else {\n                        goto lab_0x411a4a;\n                    }\n                }\n            } else {\n                if (v87 == 0) {\n                    goto lab_0x411d80;\n                } else {\n                    if (v75 == 18) {\n                        // 0x411efa\n                        v5 = -1;\n                        v4 = v87;\n                        v99 = v87;\n                        v100 = 1;\n                        v101 = v53;\n                        v102 = v87;\n                        v103 = v66;\n                        goto lab_0x411f0f;\n                    } else {\n                        // 0x411a23\n                        v5 = -1;\n                        if (*(char *)(v87 + 48) == 17) {\n                            // 0x411cd0\n                            *v89 = 0;\n                            v95 = 0;\n                            v96 = *v52;\n                            v97 = v53;\n                            v98 = v66;\n                            goto lab_0x411ce8;\n                        } else {\n                            // 0x411a32\n                            *v89 = 0;\n                            v90 = 11;\n                            v91 = 0;\n                            v92 = v87;\n                            v93 = v53;\n                            v94 = v66;\n                            goto lab_0x411a4a;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // 0x4118fa\n    return *(int64_t *)(v6 + 24);\n  lab_0x411fc2:\n    // 0x411fc2\n    if (v17 == 21) {\n        // 0x4125aa\n        *v20 = 1;\n    }\n    // 0x411fca\n    v148 = v5;\n    v149 = (int64_t *)(v6 + 8);\n    int64_t v150 = v6 + 112; // 0x411fff\n    v151 = v6 + 120;\n    v152 = (int64_t *)v151;\n    int64_t v153; // bp-120, 0x411830\n    int64_t v154 = &v153;\n    int32_t * v155 = (int32_t *)v150; // 0x412009\n    v156 = (int64_t *)(a1 + 72);\n    int64_t v157 = v6 + 144;\n    int64_t v158 = v6 + 192;\n    int64_t v159 = v6 + 128;\n    v160 = (int32_t *)v159;\n    v161 = v6 + 136;\n    v162 = (int64_t *)v161;\n    v163 = (int64_t *)(v6 + 16);\n    int64_t v164 = v6 + 64;\n    v165 = (char *)v164;\n    bool v166; // 0x411830\n    int64_t v167 = v166 ? -1 : 1;\n    v168 = (int32_t *)v151;\n    int64_t v169 = v6 + 72;\n    v170 = (int32_t *)v169;\n    v171 = (int64_t *)v164;\n    v172 = (int64_t *)(v6 + 32);\n    v173 = (int32_t *)(v6 + 92);\n    v174 = (int32_t *)(v6 + 88);\n    v175 = (int64_t *)(v6 + 80);\n    v176 = (int64_t *)v169;\n    v177 = (int64_t *)(v6 + 48);\n    v178 = v18 + 72;\n    v179 = (int64_t *)(v6 - 16);\n    v180 = (int64_t *)(v6 + 104);\n    v181 = (int64_t *)(v18 + 40);\n    v182 = (int64_t *)(v6 + 24);\n    v183 = v16 & 0xffffffff;\n    v184 = 1;\n    int32_t v185; // 0x411830\n    while (true) {\n      lab_0x411fee:\n        // 0x411fee\n        v3 = v184;\n        int64_t v186 = *v149; // 0x411fee\n        v3 = v184;\n        *v152 = v154;\n        *v155 = 3;\n        int32_t v187 = function_410ea0(v150, a1, v9, v183, v186, (int32_t)v184);\n        v185 = v187;\n        if (v187 != 0) {\n            // break -> 0x412604\n            break;\n        }\n        // 0x41201e\n        g93 = v6 - 8;\n        v188 = function_406b10(v19, a1, *v149);\n        if ((*v155 - 2 & -3) == 0) {\n            goto lab_0x412054;\n        } else {\n            unsigned char v189 = *v20; // 0x41203c\n            v4 = v189;\n            switch (v189) {\n                case 2: {\n                    goto lab_0x4125b5;\n                }\n                case 22: {\n                    int64_t v190 = 0x100000000 * v188;\n                    *v156 = *v156 + (v190 >> 32);\n                    int64_t v191 = *v149; // 0x41264b\n                    int64_t v192 = function_406b10((int64_t *)v157, a1, v191); // 0x41265b\n                    unsigned char v193 = *(char *)(v6 + 152); // 0x412660\n                    v4 = v193;\n                    switch (v193) {\n                        case 2: {\n                            goto lab_0x4125b5;\n                        }\n                        case 21: {\n                            // 0x412875\n                            *v156 = *v156 + (-v190 >> 32);\n                            *v20 = 1;\n                            goto lab_0x412054;\n                        }\n                        default: {\n                            // 0x41267a\n                            *v160 = 3;\n                            *v162 = v158;\n                            if ((int32_t)function_410ea0(v159, a1, v157, v192 & 0xffffffff, v191, 1) != 0) {\n                                // break -> 0x412604\n                                break;\n                            }\n                            // 0x4126bd\n                            v194 = function_406b10(v19, a1, *v149);\n                            v195 = *v155;\n                            int32_t v196 = *(int32_t *)(*v163 + 180); // 0x4126de\n                            v4 = v196 < 2 == (1 - v196 & v196) < 0 ? v18 : 0;\n                            if ((v195 - 2 & -3) == 0) {\n                                goto lab_0x412b96_3;\n                            }\n                            // 0x4126f6\n                            v197 = *v160;\n                            if ((v197 - 2 & -3) == 0) {\n                                goto lab_0x412b96_3;\n                            }\n                            // 0x412709\n                            *v165 = (char)(v195 == 3);\n                            if (v195 == 3) {\n                                int64_t v198 = *v152; // 0x412bdd\n                                int64_t v199 = -1; // 0x412bee\n                                int64_t v200 = v198; // 0x412bee\n                                int64_t v201; // 0x411830\n                                while (v199 != 0) {\n                                    int64_t v202 = v200;\n                                    v199--;\n                                    v200 = v202 + v167;\n                                    v201 = v199;\n                                    if (*(char *)v202 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                }\n                                if (-v201 >= 4) {\n                                    goto lab_0x412a95_5;\n                                }\n                                // 0x412c00\n                                v203 = v198;\n                                if (v197 == 3) {\n                                    // 0x412a71\n                                    int64_t v204; // 0x411830\n                                    while (v204 != 0) {\n                                        int64_t v205; // 0x411830\n                                        int64_t v206 = v205;\n                                        char v207 = *(char *)v206; // 0x412a7f\n                                        int64_t v208; // 0x411830\n                                        int64_t v209 = v208 - 1; // 0x412a7f\n                                        v204 = v209;\n                                        v205 = v206 + v167;\n                                        int64_t v210 = v209; // 0x412a7f\n                                        if (v207 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v208 = v204;\n                                        v210 = 0;\n                                    }\n                                    v203 = v198;\n                                }\n                                goto lab_0x41272f;\n                            } else {\n                                if (v197 == 3) {\n                                    int64_t v211 = *v162; // 0x412ba6\n                                    v3 = v211;\n                                    int64_t v212 = v211; // 0x412bb7\n                                    int64_t v213 = -1; // 0x412bb7\n                                    int64_t v214 = 0; // 0x412bb7\n                                    while (v213 != 0) {\n                                        int64_t v215 = v212;\n                                        v213--;\n                                        v212 = v215 + v167;\n                                        v214 = v213;\n                                        if (*(char *)v215 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v214 = 0;\n                                    }\n                                    if (-v214 >= 4) {\n                                        goto lab_0x412a95_5;\n                                    }\n                                    // 0x412bcd\n                                    v203 = v151;\n                                    v216 = v211;\n                                    v217 = 0;\n                                    if (v195 != 0) {\n                                        goto lab_0x412746;\n                                    } else {\n                                        goto lab_0x41272f;\n                                    }\n                                } else {\n                                    // 0x412721\n                                    v203 = v151;\n                                    if (v195 != 0) {\n                                        // 0x412b7d\n                                        v218 = 0;\n                                        v219 = 0;\n                                        v220 = 0;\n                                        if (v197 != 0) {\n                                            goto lab_0x41274a;\n                                        } else {\n                                            goto lab_0x412b89;\n                                        }\n                                    } else {\n                                        goto lab_0x41272f;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    goto lab_0x412054;\n                }\n            }\n        }\n    }\n    // 0x412604\n    *(int32_t *)*v177 = v185;\n    v11 = v177;\n    goto lab_0x4124eb_3;\n  lab_0x412084:;\n    int64_t v221 = *(int64_t *)(a1 + 120);\n    v4 = v222;\n    v3 = a6;\n    if (!(((int32_t)a6 == 0 | function_40c660(a2, v221, (char *)v222, (int64_t *)v223, (int64_t)v224, a6) != 0))) {\n        // 0x4119a8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4118d0;\n  lab_0x412539:;\n    // 0x412539\n    int64_t v225; // 0x4122e5\n    int64_t v226; // 0x4122e9\n    if (function_409270(v225, v226, 0, 0, v9) == 0) {\n        // 0x4121c1\n        *(int32_t *)a6 = 12;\n        // 0x4119a8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x4118fa\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x41238f;\n  lab_0x412ad5:;\n    int16_t * v250 = *__ctype_b_loc(); // 0x412ae9\n    v3 = (v13 | 256) - 64 * v15;\n    int64_t v251 = v13; // 0x412aff\n    int64_t v252 = 8 * v15 + a2; // 0x412aff\n    int64_t v141 = 2 * v13 + (int64_t)v250; // 0x412aff\n    while (true) {\n        int64_t v143 = v251;\n        v139 = (int64_t *)(v252 + 184);\n        v140 = 0;\n        while (true) {\n          lab_0x412b22:\n            // 0x412b22\n            v137 = v140;\n            if ((*(char *)(2 * v137 + v141) & 8) == 0) {\n                int64_t v142 = v137 + v143; // 0x412b10\n                v4 = v142 & 0xffffffff;\n                if ((int32_t)v142 == 95) {\n                    goto lab_0x412b2a;\n                } else {\n                    goto lab_0x412b18;\n                }\n            } else {\n                goto lab_0x412b2a;\n            }\n        }\n      lab_0x412b39:;\n        int64_t v253 = v143 + 64; // 0x412b39\n        v12 = v10;\n        v251 = v253 & 0xffffffff;\n        v252 += 8;\n        v141 += 128;\n        if ((int32_t)v3 == (int32_t)v253) {\n            // break -> 0x4122e0\n            break;\n        }\n    }\n    goto lab_0x4122e0_2;\n  lab_0x41238f:;\n    int64_t v227 = function_4110c0((int64_t *)v9, a1, a4); // 0x41239a\n    int64_t * v228 = (int64_t *)(a1 + 72); // 0x4123a1\n    *v228 = (0x100000000 * v227 >> 32) + *v228;\n    // 0x4118fa\n    return *(int64_t *)(v6 + 24);\n  lab_0x4122e0_2:;\n    int32_t v229 = v12;\n    v225 = a2 + 112;\n    v226 = a2 + 128;\n    if ((v229 - 256 & -257) != 0) {\n        goto lab_0x412539;\n    } else {\n        int32_t * v230 = (int32_t *)v9;\n        int64_t v231; // 0x411830\n        if (v229 == 256) {\n            // 0x41261a\n            *v230 = 6;\n            v4 = 0;\n            v231 = function_409270(v225, v226, 0, 0, v9);\n        } else {\n            // 0x41230f\n            *v230 = 5;\n            v4 = 0;\n            v231 = function_409270(v225, v226, 0, 0, v9);\n        }\n        // 0x412334\n        *v230 = 10;\n        int64_t v232 = function_409270(v225, v226, 0, 0, v9); // 0x412341\n        int64_t v233 = function_409270(v225, v226, (int32_t)v231, (int32_t)v232, (int64_t)&v14); // 0x412365\n        if (v233 == 0 || v231 == 0 || v232 == 0) {\n            // 0x4121c1\n            *(int32_t *)a6 = 12;\n            // 0x4119a8\n            *(int64_t *)(v6 + 24) = 0;\n            // 0x4118fa\n            return *(int64_t *)(v6 + 24);\n        }\n        goto lab_0x41238f;\n    }\n  lab_0x412cad_3:\n    // 0x412cad\n    *v182 = v234;\n    free((int64_t *)v235);\n    free((int64_t *)*v182);\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x4124eb_3;\n  lab_0x41299e:;\n    int64_t v236 = *v163; // 0x41299e\n    char * v237 = (char *)(v236 + 176); // 0x4129aa\n    *v237 = *v237 | 2;\n    int64_t v238 = v236 + 112; // 0x4129b1\n    int64_t v239 = v236 + 128; // 0x4129b5\n    char * v240 = (char *)(v6 + 168); // 0x4129c2\n    *v240 = 6;\n    int64_t * v241 = (int64_t *)(v6 + 160); // 0x4129ca\n    *v241 = v18;\n    int64_t v242 = function_409270(v238, v239, 0, 0, v154); // 0x4129d2\n    *v182 = v242;\n    int64_t v243 = v5 + 32; // 0x4129e3\n    v4 = v243;\n    int64_t v244 = v5; // 0x4129ed\n    if (v242 == 0) {\n        goto lab_0x41298e;\n    } else {\n        while (*(int64_t *)v244 == 0) {\n            int64_t v245 = v244 + 8; // 0x4129f5\n            v244 = v245;\n            if (v243 == v245) {\n                // 0x4129fe\n                free((int64_t *)v5);\n                goto lab_0x4118d0;\n            }\n        }\n        // 0x412a0c\n        *v240 = 3;\n        *v241 = v5;\n        int64_t v246 = function_409270(v238, v239, 0, 0, v154); // 0x412a2d\n        if (v246 == 0) {\n            goto lab_0x41298e;\n        } else {\n            // 0x412a3b\n            *(char *)(v6 + 200) = 10;\n            int64_t v247 = function_409270(v238, v239, (int32_t)v246, (int32_t)*v182, v158); // 0x412a59\n            *v182 = v247;\n            if (v247 != 0) {\n                goto lab_0x4118d0;\n            } else {\n                goto lab_0x41298e;\n            }\n        }\n    }\n  lab_0x412948:\n    // 0x412948\n    function_407c60(v18);\n    *(char *)(v6 + 168) = 3;\n    *(int64_t *)(v6 + 160) = v5;\n    int64_t v248 = *v163; // 0x41296b\n    int64_t v249 = function_409270(v248 + 112, v248 + 128, 0, 0, v154); // 0x41297b\n    *v182 = v249;\n    if (v249 != 0) {\n        goto lab_0x4118d0;\n    } else {\n        goto lab_0x41298e;\n    }\n}\n"
        },
        {
            "funcName": "function_412d20",
            "funcStartAddr": "412d20",
            "funcEndAddr": "412e5e",
            "decompiledFuncCode": "int64_t function_412d20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result = function_411830(a1, a2, a3, a4, a5, a6); // 0x412d4a\n    int64_t v1; // 0x412d20\n    if ((int32_t)v1 != 0 == result == 0) {\n        // 0x412df5\n        return 0;\n    }\n    char * v2 = (char *)(a3 + 8); // 0x412d68\n    char v3 = *v2; // 0x412d68\n    if ((v3 & -9) == 2) {\n        // 0x412df5\n        return result;\n    }\n    // 0x412d76\n    int64_t v4; // bp-72, 0x412d20\n    int64_t v5 = &v4;\n    int64_t v6 = result;\n    int64_t result2 = v6; // 0x412d78\n    if (a5 != 0 == v3 == 9) {\n        return result2;\n    }\n    int64_t v7 = function_411830(a1, a2, a3, a4, a5, a6); // 0x412d93\n    int32_t v8 = v7;\n    if (v7 == 0 == (v8 != 0)) {\n        // 0x412e1c\n        result2 = 0;\n        if (v6 == 0) {\n            return result2;\n        } else {\n            // 0x412e21\n            function_406aa0(v6, 0x407cb0, 0);\n            result2 = 0;\n            return result2;\n        }\n    }\n    int64_t v9; // 0x412dd5\n    char v10; // 0x412de7\n    while (v6 != 0 && v7 != 0) {\n        // 0x412db0\n        v9 = function_409270(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n        if (v9 == 0) {\n            // 0x412e35\n            function_406aa0(v7, 0x407cb0, 0);\n            function_406aa0(v6, 0x407cb0, 0);\n            *(int32_t *)a6 = 12;\n            result2 = 0;\n            return result2;\n        }\n        // 0x412de4\n        v10 = *v2;\n        result2 = v9;\n        if ((v10 & -9) == 2) {\n            return result2;\n        }\n        v6 = v9;\n        result2 = v6;\n        if (a5 != 0 == v10 == 9) {\n            return result2;\n        }\n        // 0x412d7f\n        v7 = function_411830(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x412e1c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x412e21\n                function_406aa0(v6, 0x407cb0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n    }\n    int64_t v11 = v6 == 0 ? v7 : v6; // 0x412e13\n    char v12 = *v2; // 0x412d68\n    result2 = v11;\n    while ((v12 & -9) != 2) {\n        // 0x412d76\n        v6 = v11;\n        result2 = v6;\n        if (a5 != 0 == v12 == 9) {\n            return result2;\n        }\n        // 0x412d7f\n        v7 = function_411830(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x412e1c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x412e21\n                function_406aa0(v6, 0x407cb0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n        while (v6 != 0 && v7 != 0) {\n            // 0x412db0\n            v9 = function_409270(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n            if (v9 == 0) {\n                // 0x412e35\n                function_406aa0(v7, 0x407cb0, 0);\n                function_406aa0(v6, 0x407cb0, 0);\n                *(int32_t *)a6 = 12;\n                result2 = 0;\n                return result2;\n            }\n            // 0x412de4\n            v10 = *v2;\n            result2 = v9;\n            if ((v10 & -9) == 2) {\n                return result2;\n            }\n            v6 = v9;\n            result2 = v6;\n            if (a5 != 0 == v10 == 9) {\n                return result2;\n            }\n            // 0x412d7f\n            v7 = function_411830(a1, a2, a3, a4, a5, a6);\n            v8 = v7;\n            if (v7 == 0 == (v8 != 0)) {\n                // 0x412e1c\n                result2 = 0;\n                if (v6 == 0) {\n                    return result2;\n                } else {\n                    // 0x412e21\n                    function_406aa0(v6, 0x407cb0, 0);\n                    result2 = 0;\n                    return result2;\n                }\n            }\n        }\n        // 0x412e10\n        v11 = v6 == 0 ? v7 : v6;\n        v12 = *v2;\n        result2 = v11;\n    }\n  lab_0x412df5_2:\n    // 0x412df5\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412e60",
            "funcStartAddr": "412e60",
            "funcEndAddr": "412fb1",
            "decompiledFuncCode": "int64_t function_412e60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a2 + 168); // 0x412e82\n    int64_t v2 = function_412d20(a1, a2, a3, a4, a5, a6); // 0x412e92\n    int64_t v3; // 0x412e60\n    if ((int32_t)v3 != 0 && v2 == 0) {\n        // 0x412eb1\n        return 0;\n    }\n    char * v4 = (char *)(a3 + 8); // 0x412f49\n    int64_t * v5 = (int64_t *)(a1 + 72);\n    int64_t v6 = a2 + 112;\n    int64_t v7; // bp-72, 0x412e60\n    int64_t v8 = &v7;\n    int64_t v9 = v2;\n    int64_t result = v9; // 0x412f4d\n    while (*v4 == 10) {\n        // 0x412f53\n        *v5 = (0x100000000 * function_4110c0((int64_t *)a3, a1, a4 | 0x800000) >> 32) + *v5;\n        char v10 = *v4; // 0x412f6f\n        int64_t v11 = 0; // 0x412f7b\n        if ((v10 & -9) != 2 && a5 != 0 != (v10 == 9)) {\n            // 0x412ed7\n            v11 = function_412d20(a1, a2, a3, a4, a5, a6);\n            int64_t v12; // 0x412e60\n            if (v11 == 0 == (*(int32_t *)&v12 != 0)) {\n                // 0x412f94\n                result = 0;\n                if (v9 == 0) {\n                    return result;\n                } else {\n                    // 0x412f9d\n                    function_406aa0(v9, 0x407cb0, 0);\n                    result = 0;\n                    return result;\n                }\n            }\n        }\n        int64_t v13 = function_409270(v6, a2 + 128, (int32_t)v9, (int32_t)v11, v8); // 0x412f3c\n        if (v13 == 0) {\n            // 0x412f88\n            *(int32_t *)a6 = 12;\n            result = 0;\n            return result;\n        }\n        v9 = v13;\n        result = v9;\n    }\n  lab_0x412eb1:\n    // 0x412eb1\n    return result;\n}\n"
        },
        {
            "funcName": "function_412fc0",
            "funcStartAddr": "412fc0",
            "funcEndAddr": "413d6a",
            "decompiledFuncCode": "int64_t function_412fc0(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412fc0\n    int128_t v1; // 0x412fc0\n    int128_t v2 = v1;\n    int64_t v3; // 0x412fc0\n    int64_t v4 = v3;\n    char * v5 = (char *)(a1 + 56); // 0x412fdd\n    *v5 = *v5 & -112;\n    int64_t v6 = a1 + 8;\n    int64_t * v7 = (int64_t *)v6; // 0x412fe1\n    int32_t result = 0; // bp-268, 0x412fe9\n    *(int64_t *)(a1 + 24) = a4;\n    int64_t * v8 = (int64_t *)(a1 + 16); // 0x412ff8\n    *v8 = 0;\n    int64_t * v9 = (int64_t *)(a1 + 48); // 0x413000\n    *v9 = 0;\n    int64_t v10 = v6; // 0x413008\n    int64_t v11 = a1; // 0x413008\n    if (*v7 < 232) {\n        int64_t * v12 = (int64_t *)a1; // 0x413b48\n        int64_t * mem = realloc(v12, 232); // 0x413b48\n        if (mem == NULL) {\n            // 0x41390b\n            return 12;\n        }\n        // 0x413b59\n        v11 = (int64_t)mem;\n        *v7 = 232;\n        *v12 = v11;\n        v10 = v11 + 8;\n    }\n    // 0x41300e\n    *v8 = 232;\n    int64_t v13 = v10 & -8; // 0x41301f\n    int64_t * v14 = (int64_t *)v11; // 0x413023\n    *v14 = 0;\n    *(int64_t *)(v11 + 224) = 0;\n    __asm_rep_stosq_memset((char *)v13, 0, (v11 + 232 - v13) / 8 % 0x20000000);\n    *(int32_t *)(v11 + 128) = 15;\n    int64_t v15; // 0x412fc0\n    int64_t v16; // 0x412fc0\n    uint64_t v17; // 0x412fc0\n    int64_t v18; // 0x412fc0\n    int64_t v19; // 0x412fc0\n    int64_t v20; // 0x413061\n    int64_t * v21; // 0x4130ad\n    int32_t * v22; // 0x4130bb\n    char * v23; // 0x413118\n    if (a3 < 0x555555555555555) {\n        // 0x413061\n        v20 = a3 + 1;\n        *(int64_t *)v10 = v20;\n        *v14 = (int64_t)malloc(16 * (int32_t)v20);\n        int64_t size = 1; // 0x413081\n        int64_t v24 = 0; // 0x413081\n        if (a3 != 0) {\n            int64_t v25 = 2; // 0x413090\n            int64_t v26 = v25; // 0x413096\n            while (v25 <= a3) {\n                // 0x413090\n                v25 = 2 * v26;\n                v26 = v25;\n            }\n            // 0x413098\n            size = v25;\n            v24 = v25 - 1;\n        }\n        int64_t * mem2 = calloc(24, (int32_t)size); // 0x4130a1\n        *(int64_t *)(v11 + 136) = v24;\n        v21 = (int64_t *)(v11 + 64);\n        *v21 = (int64_t)mem2;\n        int32_t v27 = __ctype_get_mb_cur_max(); // 0x4130b1\n        v22 = (int32_t *)(v11 + 180);\n        *v22 = v27;\n        char * v28 = nl_langinfo(14); // 0x4130c1\n        if ((*v28 & -33) == 85) {\n            int64_t v29 = (int64_t)v28; // 0x4130c1\n            if ((*(char *)(v29 + 1) & -33) == 84) {\n                // 0x4130dd\n                if ((*(char *)(v29 + 2) & -33) == 70) {\n                    int64_t v30 = v29 + 3; // 0x4130eb\n                    bool v31; // 0x412fc0\n                    int64_t v32 = v31 ? -1 : 1; // 0x413101\n                    int64_t v33 = (int64_t)&g13; // 0x412fc0\n                    int64_t v34 = v30 + (int64_t)(*(char *)v30 == 45); // 0x412fc0\n                    int64_t v35 = 2; // 0x413101\n                    unsigned char v36 = *(char *)v34; // 0x413101\n                    char v37 = *(char *)v33; // 0x413101\n                    char v38 = v37; // 0x413101\n                    bool v39 = false; // 0x413101\n                    while (v36 == v37) {\n                        v35--;\n                        v33 += v32;\n                        v34 += v32;\n                        v38 = v36;\n                        v39 = true;\n                        if (v35 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v36 = *(char *)v34;\n                        v37 = *(char *)v33;\n                        v38 = v37;\n                        v39 = false;\n                    }\n                    unsigned char v40 = v38;\n                    if ((v36 >= v40 && !v39) == v36 < v40) {\n                        char * v41 = (char *)(v11 + 176); // 0x41310c\n                        *v41 = *v41 | 4;\n                    }\n                }\n            }\n        }\n        // 0x413118\n        v23 = (char *)(v11 + 176);\n        char v42 = *v23; // 0x413118\n        *v23 = v42 & -9;\n        if (*v22 < 2) {\n            goto lab_0x413143;\n        } else {\n            if ((v42 & 4) == 0) {\n                int64_t * mem3 = calloc(32, 1); // 0x4139ba\n                int64_t * v43 = (int64_t *)(v11 + 120); // 0x4139bf\n                *v43 = (int64_t)mem3;\n                int64_t v44 = 0; // 0x4139c6\n                if (mem3 == NULL) {\n                    // 0x4139a0\n                    result = 12;\n                    goto lab_0x41397e;\n                } else {\n                    while (true) {\n                        int64_t v45 = v44;\n                        v16 = 0;\n                        v18 = 8 * v45;\n                        while (true) {\n                          lab_0x4139f6_2:\n                            // 0x4139f6\n                            v19 = v18;\n                            v17 = v16;\n                            int32_t wc = v19; // 0x4139f6\n                            int32_t v46 = btowc(wc); // 0x4139ff\n                            int64_t v47 = v19 & 0xffffff80; // 0x413a0d\n                            if (v46 == -1) {\n                                if (v47 != 0) {\n                                    goto lab_0x4139eb;\n                                } else {\n                                    // 0x4139e4\n                                    *v23 = *v23 | 8;\n                                    goto lab_0x4139eb;\n                                }\n                            } else {\n                                int64_t * v48 = (int64_t *)(*v43 + v45); // 0x413a25\n                                *v48 = *v48 | 1 << v17 % 64;\n                                if (v47 != 0) {\n                                    goto lab_0x4139eb;\n                                } else {\n                                    if (v46 != wc) {\n                                        // 0x4139e4\n                                        *v23 = *v23 | 8;\n                                        goto lab_0x4139eb;\n                                    } else {\n                                        int64_t v49 = v17 + 1; // 0x413a30\n                                        v15 = v49;\n                                        if ((int32_t)v49 == 64) {\n                                            // break -> 0x413a40\n                                            break;\n                                        }\n                                        goto lab_0x4139f6;\n                                    }\n                                }\n                            }\n                        }\n                      lab_0x413a40:\n                        // 0x413a40\n                        v44 = v45 + 8;\n                        if (v45 == 24) {\n                            // break -> 0x413143\n                            break;\n                        }\n                    }\n                    goto lab_0x413143;\n                }\n            } else {\n                // 0x41313b\n                *(int64_t *)(v11 + 120) = (int64_t)&g14;\n                goto lab_0x413143;\n            }\n        }\n    } else {\n        // 0x4139a0\n        result = 12;\n        goto lab_0x41397e;\n    }\n  lab_0x4139eb:;\n    int64_t v50 = v17 + 1; // 0x4139eb\n    v15 = v50;\n    if ((int32_t)v50 == 64) {\n        // break -> 0x413a40\n        goto lab_0x413a40;\n    }\n    goto lab_0x4139f6;\n  lab_0x4139f6:\n    // 0x4139f6\n    v16 = v15 & 0xffffffff;\n    v18 = v19 + 1 & 0xffffffff;\n    goto lab_0x4139f6_2;\n  lab_0x413c00_2:\n    // 0x413c00\n    result = 0;\n    int64_t v51; // 0x412fc0\n    int64_t v52 = v51; // 0x413c08\n    int64_t v53 = v51; // 0x413c08\n    goto lab_0x413309;\n  lab_0x4134f0:;\n    // 0x4134f0\n    int64_t * v83; // 0x412fc0\n    int64_t v91 = *v83; // 0x4134f0\n    int64_t v92 = function_406aa0(v91, 0x409620, (int32_t)a1); // 0x4134fc\n    int64_t v93 = v92; // 0x413503\n    int64_t v94 = v91; // 0x413503\n    int64_t v95; // 0x412fc0\n    int64_t v73; // 0x412fc0\n    int64_t v96; // bp-232, 0x412fc0\n    int64_t v68; // bp-248, 0x412fc0\n    int64_t * v80; // 0x413447\n    int64_t * v97; // 0x412fc0\n    if ((int32_t)v92 != 0) {\n        goto lab_0x413718_2;\n    } else {\n        int64_t v98 = *v83; // 0x413509\n        int64_t v99 = function_406aa0(v98, 0x40bb50, (int32_t)v73); // 0x413515\n        v93 = v99;\n        v94 = v98;\n        if ((int32_t)v99 != 0) {\n            goto lab_0x413718_2;\n        } else {\n            // 0x413522\n            function_408ae0(*v83, 0x408830, v73);\n            int64_t v100 = *v83; // 0x413533\n            int64_t v101 = function_408ae0(v100, 0x408330, v73); // 0x41353f\n            v93 = v101;\n            v94 = v100;\n            if ((int32_t)v101 != 0) {\n                goto lab_0x413718_2;\n            } else {\n                // 0x413558\n                v97 = (int64_t *)(v73 + 16);\n                int64_t v102 = 0; // 0x412fc0\n                int64_t v103 = 0; // 0x412fc0\n                int64_t v104; // 0x412fc0\n                while (true) {\n                    int64_t v105 = *v97; // 0x413558\n                    int64_t v106 = v105; // 0x41355c\n                    int64_t v107 = v102; // 0x41355c\n                    int64_t v108 = v103; // 0x41355c\n                    int64_t v109 = v103; // 0x41355c\n                    int64_t v110 = v102; // 0x41355c\n                    v104 = v103;\n                    int64_t v111; // 0x412fc0\n                    if (v105 == v103) {\n                      lab_0x41357c:\n                        // 0x41357c\n                        v111 = v109;\n                        if ((char)v110 == 0) {\n                            // break -> 0x413610\n                            break;\n                        }\n                      lab_0x413585:\n                        // 0x413585\n                        v106 = v111;\n                        v107 = 0;\n                        v108 = 0;\n                    }\n                    int64_t v112 = v107;\n                    int64_t v113 = v106; // 0x413576\n                    int64_t v114 = v108;\n                    int64_t v115; // 0x413572\n                    while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                        // 0x413572\n                        v115 = v114 + 1;\n                        v109 = v113;\n                        v110 = v112;\n                        v104 = v115;\n                        if (v113 == v115) {\n                            goto lab_0x41357c;\n                        }\n                        v114 = v115;\n                    }\n                    int64_t v116 = function_408d10((int128_t *)&v68, v73, v114, 1); // 0x4135a3\n                    if ((int32_t)v116 != 0) {\n                        // 0x413718\n                        v93 = v116;\n                        v94 = &v68;\n                        goto lab_0x413718_2;\n                    }\n                    int64_t v117 = v114 + 1; // 0x4135b9\n                    v102 = v112;\n                    v103 = v117;\n                    while (*(int64_t *)((0x1800000000 * v114 >> 32) + 8 + *v80) == 0) {\n                        // 0x4135c5\n                        free((int64_t *)v96);\n                        int64_t v118 = *v97; // 0x4135d5\n                        v111 = v118;\n                        if (v118 == v117) {\n                            goto lab_0x413585;\n                        }\n                        v112 = 1;\n                        v113 = v118;\n                        v114 = v117;\n                        while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                            // 0x413572\n                            v115 = v114 + 1;\n                            v109 = v113;\n                            v110 = v112;\n                            v104 = v115;\n                            if (v113 == v115) {\n                                goto lab_0x41357c;\n                            }\n                            v114 = v115;\n                        }\n                        // 0x413590\n                        v116 = function_408d10((int128_t *)&v68, v73, v114, 1);\n                        if ((int32_t)v116 != 0) {\n                            // 0x413718\n                            v93 = v116;\n                            v94 = &v68;\n                            goto lab_0x413718_2;\n                        }\n                        // 0x4135b0\n                        v117 = v114 + 1;\n                        v102 = v112;\n                        v103 = v117;\n                    }\n                }\n                // 0x413610\n                v95 = v104;\n                if ((*v5 & 16) != 0) {\n                    goto lab_0x413728;\n                } else {\n                    // 0x41361a\n                    if (*v9 == 0) {\n                        goto lab_0x413728;\n                    } else {\n                        // 0x413625\n                        if (*(char *)(v73 + 176) % 2 == 0) {\n                            goto lab_0x413728;\n                        } else {\n                            goto lab_0x413633;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x413718_2:\n    // 0x413718\n    result = v93;\n    int64_t v67 = v94; // 0x413720\n    goto lab_0x413928;\n  lab_0x4137b8:;\n    // 0x4137b8\n    int64_t v140; // 0x412fc0\n    int64_t v141 = v140 + 1; // 0x4137b8\n    uint64_t v78; // 0x412fc0\n    if (v78 <= v141) {\n        // break -> 0x413860\n        goto lab_0x413860;\n    }\n    int64_t v142 = v141; // 0x412fc0\n    goto lab_0x4137c5_2;\n  lab_0x413143:;\n    // 0x413143\n    int64_t v129; // bp-208, 0x412fc0\n    int64_t v124; // bp-216, 0x412fc0\n    int64_t * v158; // 0x413164\n    int64_t v128; // 0x413164\n    if (*v14 == 0) {\n        // 0x4139a0\n        result = 12;\n        goto lab_0x41397e;\n    } else {\n        // 0x41314d\n        if (*v21 == 0) {\n            // 0x4139a0\n            result = 12;\n            goto lab_0x41397e;\n        } else {\n            // 0x413158\n            v158 = (int64_t *)(a1 + 40);\n            v128 = *v158;\n            result = 0;\n            __asm_rep_stosq_memset((char *)&v129, 0, 18);\n            v124 = a2;\n            if (a3 != 0) {\n                int64_t v159 = &v124; // 0x4135e5\n                int64_t v160 = function_406ee0(v159, v20); // 0x4135ea\n                v93 = v160;\n                v94 = v159;\n                if ((int32_t)v160 != 0) {\n                    goto lab_0x413718_2;\n                } else {\n                    // 0x4135f7\n                    goto lab_0x413202;\n                }\n            } else {\n                goto lab_0x413202;\n            }\n        }\n    }\n  lab_0x41397e:\n    // 0x41397e\n    function_40bbe0(v11);\n    *(int64_t *)a1 = 0;\n    *v7 = 0;\n    // 0x41390b\n    return result;\n  lab_0x413202:;\n    int64_t v125 = a4 & 0x400000; // 0x413187\n    int32_t v126 = *v22;\n    int64_t v127 = (v128 | v125) == 0 ? a2 : v129;\n    v129 = v127;\n    if (v125 == 0) {\n        if (v126 > 1) {\n            int64_t v130 = &v124;\n            function_4072d0(v130);\n            result = 0;\n            v52 = v130;\n            v53 = v130;\n        } else {\n            if ((v128 || v125) != 0) {\n                int64_t v131 = a3 - v4; // 0x413296\n                int64_t v132 = v131 == 0 | v131 < 0 != ((v131 ^ a3) & (v4 ^ a3)) < 0 ? a3 : v4; // 0x4132a6\n                if (v132 > v3) {\n                    unsigned char v133 = *(char *)(2 * v3 + v124); // 0x4132dd\n                    *(char *)(v127 + v3) = *(char *)(v128 + (int64_t)v133);\n                    int64_t v134 = v3 + 1; // 0x4132e8\n                    int64_t v135 = v134; // 0x4132ef\n                    if (v132 != v134) {\n                        unsigned char v136 = *(char *)(v135 + v3 + v124); // 0x4132dd\n                        *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                        int64_t v137 = v135 + 1; // 0x4132e8\n                        v135 = v137;\n                        while (v132 != v137) {\n                            // 0x4132c0\n                            v136 = *(char *)(v135 + v3 + v124);\n                            *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                            v137 = v135 + 1;\n                            v135 = v137;\n                        }\n                    }\n                }\n            }\n            // 0x4132f1\n            result = 0;\n            v52 = &v124;\n            v53 = v126;\n        }\n        goto lab_0x413309;\n    } else {\n        // 0x413218\n        v51 = &v124;\n        if (v126 < 2) {\n            // 0x413b28\n            function_407250(v51);\n            result = 0;\n            v52 = v51;\n            v53 = v51;\n            goto lab_0x413309;\n        } else {\n            int64_t v138 = function_407480(v51); // 0x413226\n            v93 = v138;\n            v94 = v51;\n            // 0x413221\n            while ((int32_t)v138 == 0) {\n                if (v3 >= a3) {\n                    goto lab_0x413c00_2;\n                }\n                // 0x413241\n                if (v4 > v3 + (int64_t)*v22) {\n                    goto lab_0x413c00_2;\n                }\n                int64_t v139 = function_406ee0(v51, 2 * v4); // 0x413269\n                v93 = v139;\n                v94 = v51;\n                if ((int32_t)v139 != 0) {\n                    // break -> 0x413718\n                    break;\n                }\n                v138 = function_407480(v51);\n                v93 = v138;\n                v94 = v51;\n            }\n            goto lab_0x413718_2;\n        }\n    }\n  lab_0x413928:;\n    int64_t * v119 = (int64_t *)(v67 + 112); // 0x413928\n    int64_t v120 = *v119; // 0x413928\n    if (v120 != 0) {\n        int64_t * v121 = (int64_t *)v120; // 0x413938\n        int64_t v122 = *v121; // 0x413938\n        free(v121);\n        while (v122 != 0) {\n            // 0x413938\n            v121 = (int64_t *)v122;\n            v122 = *v121;\n            free(v121);\n        }\n    }\n    // 0x413948\n    *v119 = 0;\n    int64_t * v123 = (int64_t *)(v67 + 32); // 0x413950\n    *(int32_t *)(v67 + 128) = 15;\n    *(int64_t *)(v67 + 104) = 0;\n    free((int64_t *)*v123);\n    *v123 = 0;\n    function_408230(&v124);\n    goto lab_0x41397e;\n  lab_0x413309:;\n    int64_t v54 = v53;\n    int64_t v55 = v52;\n    *v9 = 0;\n    *(int64_t *)(v54 + 216) = a4;\n    int32_t v56; // bp-264, 0x412fc0\n    function_4110c0((int64_t *)&v56, v55, a4 | 0x800000);\n    int64_t v57 = &v56; // 0x413341\n    int64_t v58 = function_412e60(v55, a1, v57, a4, 0, (int64_t)&result); // 0x413358\n    int64_t v59; // 0x412fc0\n    int64_t v60; // 0x412fc0\n    int64_t v61; // 0x412fc0\n    int64_t v62; // 0x412fc0\n    int64_t v63; // 0x413ba9\n    int64_t v64; // 0x413bb7\n    int64_t v65; // 0x412fc0\n    int64_t v66; // 0x413bd2\n    if (result != 0) {\n        if (v58 == 0) {\n            // 0x413d22\n            *(int64_t *)(v11 + 104) = 0;\n            v67 = v55;\n            goto lab_0x413928;\n        } else {\n            // 0x413ba9\n            v63 = v54 + 112;\n            v64 = v54 + 128;\n            v65 = &v68;\n            v66 = function_409270(v63, v64, 0, 0, v65);\n            goto lab_0x4133a7;\n        }\n    } else {\n        int64_t v69 = v54 + 112; // 0x413369\n        int64_t v70 = v54 + 128; // 0x413377\n        int64_t v71 = &v68;\n        int64_t v72 = function_409270(v69, v70, 0, 0, v71); // 0x413392\n        v65 = v71;\n        v64 = v70;\n        v66 = v72;\n        v63 = v69;\n        v62 = 2;\n        v61 = v72;\n        v60 = v69;\n        v59 = v72;\n        if (v58 == 0) {\n            goto lab_0x4133c6;\n        } else {\n            goto lab_0x4133a7;\n        }\n    }\n  lab_0x4133c6:\n    // 0x4133c6\n    v73 = v60;\n    int64_t * v74; // 0x412fc0\n    int64_t * v75; // 0x4133e2\n    int64_t * v76; // 0x41347d\n    int64_t * v77; // 0x412fc0\n    if (v61 == 0 || v59 == 0) {\n        // 0x413be8\n        result = 12;\n        *(int64_t *)(v11 + 104) = 0;\n        v67 = v73;\n        goto lab_0x413928;\n    } else {\n        // 0x4133de\n        v78 = v62;\n        v75 = (int64_t *)(v11 + 104);\n        *v75 = v59;\n        int32_t v79 = (int32_t)*(int64_t *)(v73 + 8);\n        int32_t size2 = 8 * v79; // 0x4133ff\n        int64_t * mem4 = malloc(size2); // 0x4133ff\n        *(int64_t *)(v73 + 24) = (int64_t)mem4;\n        int64_t * mem5 = malloc(size2); // 0x413413\n        *(int64_t *)(v73 + 32) = (int64_t)mem5;\n        int32_t size3 = 24 * v79; // 0x413424\n        int64_t * mem6 = malloc(size3); // 0x413424\n        *(int64_t *)(v73 + 40) = (int64_t)mem6;\n        int64_t * mem7 = malloc(size3); // 0x413435\n        v80 = (int64_t *)(v73 + 48);\n        *v80 = (int64_t)mem7;\n        if (mem4 == NULL | mem5 == NULL || mem6 == NULL || mem7 == NULL) {\n            // 0x413920\n            result = 12;\n            v67 = v73;\n            goto lab_0x413928;\n        } else {\n            int64_t v81 = *v9; // 0x41346c\n            int64_t * mem8 = malloc(8 * (int32_t)v81); // 0x413478\n            int64_t v82 = (int64_t)mem8; // 0x413478\n            v76 = (int64_t *)(v73 + 224);\n            *v76 = v82;\n            if (mem8 == NULL) {\n                // 0x41346c\n                v83 = (int64_t *)(v73 + 104);\n                goto lab_0x4134f0;\n            } else {\n                // 0x413489\n                if (v81 != 0) {\n                    int64_t v84 = 0;\n                    *(int64_t *)(8 * v84 + v82) = v84;\n                    int64_t v85 = v84 + 1; // 0x413494\n                    while (v85 != v81) {\n                        // 0x413490\n                        v84 = v85;\n                        *(int64_t *)(8 * v84 + v82) = v84;\n                        v85 = v84 + 1;\n                    }\n                }\n                // 0x41349d\n                v77 = (int64_t *)(v73 + 104);\n                function_408ae0(*v77, 0x4087a0, v73);\n                int64_t v86 = *v9; // 0x4134ae\n                int64_t v87 = *v76;\n                v74 = (int64_t *)v87;\n                if (v86 == 0) {\n                    goto lab_0x4134df;\n                } else {\n                    // 0x4134bb\n                    v83 = v77;\n                    if (*v74 == 0) {\n                        int64_t v88 = 1; // 0x4134d6\n                        while (v88 != v86) {\n                            int64_t v89 = v88; // 0x4134d4\n                            v83 = v77;\n                            if (*(int64_t *)(8 * v88 + v87) != v88) {\n                                goto lab_0x4134f0;\n                            }\n                            v88 = v89 + 1;\n                        }\n                        goto lab_0x4134df;\n                    } else {\n                        goto lab_0x4134f0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4133a7:;\n    int64_t v90 = function_409270(v63, v64, (int32_t)v58, (int32_t)v66, v65); // 0x4133bb\n    v62 = 16;\n    v61 = v66;\n    v60 = v63;\n    v59 = v90;\n    goto lab_0x4133c6;\n  lab_0x4134df:\n    // 0x4134df\n    free(v74);\n    *v76 = 0;\n    v83 = v77;\n    goto lab_0x4134f0;\n  lab_0x413728:\n    // 0x413728\n    if (*(int64_t *)(v73 + 152) != 0) {\n        goto lab_0x413633;\n    } else {\n        goto lab_0x413736;\n    }\n  lab_0x413633:;\n    int64_t size4 = 24 * v95; // 0x413637\n    int64_t * mem9 = malloc((int32_t)size4); // 0x41363b\n    int64_t v161 = (int64_t)mem9; // 0x41363b\n    int64_t * v162 = (int64_t *)(v73 + 56); // 0x413640\n    *v162 = v161;\n    if (mem9 == NULL) {\n        // 0x413d00\n        result = 12;\n        v67 = size4;\n        goto lab_0x413928;\n    } else {\n        if (v95 != 0) {\n            int128_t v163 = __asm_pxor(v2, v2); // 0x413668\n            __asm_movups(*(int128_t *)mem9, v163);\n            *(int64_t *)(v161 + 16) = 0;\n            uint64_t v164 = *v97; // 0x41367f\n            int64_t v165 = 1; // 0x413686\n            int128_t v166 = v163; // 0x413686\n            int64_t v167 = v164; // 0x413686\n            if (v164 > 1) {\n                int128_t v168 = v166;\n                int128_t v169 = __asm_pxor(v168, v168); // 0x413668\n                int64_t v170 = v165 + 1; // 0x41366c\n                int64_t v171 = *v162 + 24 * v165; // 0x413670\n                __asm_movups(*(int128_t *)v171, v169);\n                *(int64_t *)(v171 + 16) = 0;\n                uint64_t v172 = *v97; // 0x41367f\n                v165 = v170;\n                v167 = v172;\n                while (v172 > v170) {\n                    // 0x413660\n                    v168 = v169;\n                    v169 = __asm_pxor(v168, v168);\n                    v170 = v165 + 1;\n                    v171 = *v162 + 24 * v165;\n                    __asm_movups(*(int128_t *)v171, v169);\n                    *(int64_t *)(v171 + 16) = 0;\n                    v172 = *v97;\n                    v165 = v170;\n                    v167 = v172;\n                }\n            }\n            int64_t v173 = v167;\n            if (v173 != 0) {\n                int64_t v174 = *v80; // 0x41369a\n                int64_t v175 = 0;\n                int64_t v176 = 24 * v175; // 0x4136aa\n                int64_t v177 = v176 + v174; // 0x4136b7\n                int64_t v178 = *(int64_t *)(v177 + 8); // 0x4136ba\n                int64_t v179 = v173; // 0x4136c3\n                int64_t v180 = v174; // 0x4136c3\n                int64_t v181; // 0x412fc0\n                int64_t v182; // 0x4136fe\n                int64_t v183; // 0x413707\n                int64_t v184; // 0x4136d0\n                int64_t v185; // 0x4136d9\n                if (v178 >= 0 == (v178 != 0)) {\n                    // 0x4136ed\n                    v181 = *(int64_t *)(v177 + 16);\n                    v185 = 0;\n                    v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                    v183 = function_406f80(v182, v175);\n                    v93 = 12;\n                    v94 = v182;\n                    if ((char)v183 == 0) {\n                        goto lab_0x413718_2;\n                    }\n                    // 0x4136d0\n                    v184 = *v80;\n                    v185++;\n                    v181 = 0x100000000 * v181 >> 32;\n                    while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                        // 0x4136ed\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_406f80(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x413718_2;\n                        }\n                        // 0x4136d0\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                    }\n                    // 0x413b80\n                    v179 = *v97;\n                    v180 = v184;\n                }\n                // 0x413b80\n                v174 = v180;\n                int64_t v186 = v179; // 0x413b8b\n                int64_t v187 = v175 + 1; // 0x413b80\n                while (v186 > v187) {\n                    // 0x41369e\n                    v175 = v187;\n                    v176 = 24 * v175;\n                    v177 = v176 + v174;\n                    v178 = *(int64_t *)(v177 + 8);\n                    v179 = v186;\n                    v180 = v174;\n                    if (v178 >= 0 == (v178 != 0)) {\n                        // 0x4136ed\n                        v181 = *(int64_t *)(v177 + 16);\n                        v185 = 0;\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_406f80(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x413718_2;\n                        }\n                        // 0x4136d0\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                        while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                            // 0x4136ed\n                            v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                            v183 = function_406f80(v182, v175);\n                            v93 = 12;\n                            v94 = v182;\n                            if ((char)v183 == 0) {\n                                goto lab_0x413718_2;\n                            }\n                            // 0x4136d0\n                            v184 = *v80;\n                            v185++;\n                            v181 = 0x100000000 * v181 >> 32;\n                        }\n                        // 0x413b80\n                        v179 = *v97;\n                        v180 = v184;\n                    }\n                    // 0x413b80\n                    v174 = v180;\n                    v186 = v179;\n                    v187 = v175 + 1;\n                }\n            }\n        }\n        goto lab_0x413736;\n    }\n  lab_0x413736:\n    // 0x413736\n    result = 0;\n    unsigned char result2 = *v23 / 4 & (char)(v125 == 0); // 0x413750\n    if (result2 != 0) {\n        // 0x413a70\n        if (*v158 == 0) {\n            // 0x413a7b\n            if (*(int64_t *)(v11 + 16) != 0) {\n                // 0x413a88\n                return result2;\n            }\n            int64_t v188 = *(int64_t *)(v11 + 152); // 0x413d36\n            *v22 = 1;\n            *v23 = 2 * (char)(v188 >= 0 == (v188 != 0)) | *v23 & -7;\n        }\n    }\n    int64_t v155 = &v68; // 0x41375c\n    int64_t v189 = *(int64_t *)(*(int64_t *)(*v75 + 24) + 56); // 0x413763\n    *(int64_t *)(v11 + 144) = v189;\n    int64_t * v153 = (int64_t *)(v11 + 48); // 0x413772\n    int64_t v190 = function_4096a0(v155, *v153 + 24 * v189); // 0x41377a\n    int64_t v191 = v190 & 0xffffffff; // 0x41377f\n    int32_t v192 = v190; // 0x413782\n    v56 = v192;\n    int64_t v154 = v155; // 0x413788\n    int64_t v156 = v191; // 0x413788\n    if (v192 != 0) {\n        goto lab_0x41389f;\n    } else {\n        // 0x41378e\n        if (*(int64_t *)(v11 + 152) >= 1) {\n            int64_t v152 = &v96;\n            v142 = 0;\n            while (true) {\n              lab_0x4137c5_2:\n                // 0x4137c5\n                v140 = v142;\n                int64_t v143 = *v14; // 0x4137ca\n                int64_t v144 = *(int64_t *)(v96 + 8 * v140); // 0x4137cd\n                int64_t v145 = 16 * v144 + v143; // 0x4137d8\n                if (*(char *)(v145 + 8) == 4) {\n                    int64_t * v146 = (int64_t *)v145;\n                    int64_t v147 = 0;\n                    int64_t v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143; // 0x4137f9\n                    int64_t v149; // 0x41380a\n                    int64_t v150; // 0x413820\n                    int64_t v151; // 0x41383f\n                    if (*(char *)(v148 + 8) == 9) {\n                        // 0x413802\n                        if (*(int64_t *)v148 == *v146) {\n                            // 0x41380a\n                            v149 = *(int64_t *)(v11 + 40);\n                            v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                            if (function_408600(v78, v152, v150) != 0) {\n                                goto lab_0x4137b8;\n                            } else {\n                                // 0x413830\n                                v151 = function_408b40(&v68, (int128_t *)(*v153 + 24 * v150));\n                                if ((int32_t)v151 != 0) {\n                                    // 0x413cc0\n                                    v154 = v155;\n                                    v156 = v151 & 0xffffffff;\n                                    goto lab_0x41389f;\n                                } else {\n                                    // 0x4137c5\n                                    v142 = 1;\n                                    goto lab_0x4137c5_2;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v157 = v147 + 1; // 0x4137e8\n                    while (v78 != v157) {\n                        // 0x4137f1\n                        v147 = v157;\n                        v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143;\n                        if (*(char *)(v148 + 8) == 9) {\n                            // 0x413802\n                            if (*(int64_t *)v148 == *v146) {\n                                // 0x41380a\n                                v149 = *(int64_t *)(v11 + 40);\n                                v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                                if (function_408600(v78, v152, v150) != 0) {\n                                    goto lab_0x4137b8;\n                                } else {\n                                    // 0x413830\n                                    v151 = function_408b40(&v68, (int128_t *)(*v153 + 24 * v150));\n                                    if ((int32_t)v151 != 0) {\n                                        // 0x413cc0\n                                        v154 = v155;\n                                        v156 = v151 & 0xffffffff;\n                                        goto lab_0x41389f;\n                                    } else {\n                                        // 0x4137c5\n                                        v142 = 1;\n                                        goto lab_0x4137c5_2;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x4137e8\n                        v157 = v147 + 1;\n                    }\n                }\n                goto lab_0x4137b8;\n            }\n        }\n      lab_0x413860:;\n        int64_t v193 = function_4098b0((int128_t *)&v56, v11, &v68, 0); // 0x41386d\n        *(int64_t *)(v11 + 72) = v193;\n        if (v193 == 0) {\n            goto lab_0x413b18;\n        } else {\n            // 0x41387f\n            if (*(char *)(v193 + 104) < 0) {\n                int64_t v194 = function_4098b0((int128_t *)&v56, v11, &v68, 1); // 0x413ac0\n                int64_t * v195 = (int64_t *)(v11 + 80); // 0x413ad0\n                *v195 = v194;\n                int64_t v196 = function_4098b0((int128_t *)&v56, v11, &v68, 2); // 0x413ad9\n                int64_t * v197 = (int64_t *)(v11 + 88); // 0x413ae9\n                *v197 = v196;\n                int64_t v198 = function_4098b0((int128_t *)&v56, v11, &v68, 6); // 0x413af2\n                *(int64_t *)(v11 + 96) = v198;\n                if (*v195 == 0) {\n                    goto lab_0x413b18;\n                } else {\n                    // 0x413b02\n                    if (v198 != 0 == (*v197 != 0)) {\n                        goto lab_0x413895;\n                    } else {\n                        goto lab_0x413b18;\n                    }\n                }\n            } else {\n                // 0x413889\n                *(int64_t *)(v11 + 96) = v193;\n                *(int64_t *)(v11 + 88) = v193;\n                *(int64_t *)(v11 + 80) = v193;\n                goto lab_0x413895;\n            }\n        }\n    }\n  lab_0x41389f:\n    // 0x41389f\n    result = v156;\n    int64_t * v199 = (int64_t *)(v154 + 112); // 0x4138a8\n    int64_t v200 = *v199; // 0x4138a8\n    if (v200 != 0) {\n        int64_t * v201 = (int64_t *)v200; // 0x4138b8\n        int64_t v202 = *v201; // 0x4138b8\n        free(v201);\n        while (v202 != 0) {\n            // 0x4138b8\n            v201 = (int64_t *)v202;\n            v202 = *v201;\n            free(v201);\n        }\n    }\n    // 0x4138c8\n    *v199 = 0;\n    int64_t * v203 = (int64_t *)(v154 + 32); // 0x4138d1\n    *(int32_t *)(v154 + 128) = 15;\n    *(int64_t *)(v154 + 104) = 0;\n    free((int64_t *)*v203);\n    *v203 = 0;\n    function_408230(&v124);\n    if (result == 0) {\n        // 0x41390b\n        return result;\n    }\n    goto lab_0x41397e;\n  lab_0x413b18:\n    // 0x413b18\n    v154 = v57;\n    v156 = v56;\n    goto lab_0x41389f;\n  lab_0x413895:\n    // 0x413895\n    free((int64_t *)v96);\n    v154 = v96;\n    v156 = v191;\n    goto lab_0x41389f;\n}\n"
        },
        {
            "funcName": "function_413d70",
            "funcStartAddr": "413d70",
            "funcEndAddr": "413dd7",
            "decompiledFuncCode": "int64_t function_413d70(int64_t a1, int64_t a2, int64_t a3) {\n    char * v1 = (char *)(a3 + 56); // 0x413d90\n    *v1 = *v1 & 111 | (char)(g86 / 0x200000) & 16 | -128;\n    int64_t v2; // 0x413d70\n    int64_t v3 = function_412fc0(a3, a1, a2, g86, a1, v2); // 0x413da5\n    if ((int32_t)v3 == 0) {\n        // 0x413dd0\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)((0x100000000 * v3 >> 29) + (int64_t)&g15); // 0x413db7\n    return (int64_t)dcgettext(NULL, (char *)(v4 + (int64_t)\"Success\"), 5);\n}\n"
        },
        {
            "funcName": "function_413de0",
            "funcStartAddr": "413de0",
            "funcEndAddr": "413def",
            "decompiledFuncCode": "int64_t function_413de0(int64_t a1) {\n    int64_t result = g86; // 0x413de0\n    g86 = a1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_413df0",
            "funcStartAddr": "413df0",
            "funcEndAddr": "413eb3",
            "decompiledFuncCode": "int64_t function_413df0(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 32); // 0x413df6\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(v1 + 248) = 0;\n    int64_t v2 = v1 + 8 & -8; // 0x413e1a\n    __asm_rep_stosq_memset((char *)v2, 0, (v1 + 256 - v2) / 8 % 0x20000000);\n    int64_t * v3 = (int64_t *)(a1 + 72); // 0x413e33\n    int64_t v4 = *v3; // 0x413e33\n    function_40c8a0(a1, v4 + 16, v4 + 24, v1);\n    int64_t v5 = *(int64_t *)(a1 + 80); // 0x413e45\n    int64_t v6 = v5; // 0x413e4f\n    if (*v3 != v5) {\n        // 0x413e51\n        function_40c8a0(a1, v5 + 16, v5 + 24, v1);\n        v6 = *v3;\n    }\n    int64_t v7 = *(int64_t *)(a1 + 88); // 0x413e69\n    int64_t v8 = v6; // 0x413e71\n    if (v7 != v6) {\n        // 0x413e73\n        function_40c8a0(a1, v7 + 16, v7 + 24, v1);\n        v8 = *v3;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 96); // 0x413e8b\n    if (v9 != v8) {\n        // 0x413e95\n        function_40c8a0(a1, v9 + 16, v9 + 24, v1);\n    }\n    char * v10 = (char *)(a1 + 56); // 0x413ea8\n    *v10 = *v10 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_413ec0",
            "funcStartAddr": "413ec0",
            "funcEndAddr": "41444b",
            "decompiledFuncCode": "int64_t function_413ec0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x413ec0\n    if (a4 < 0 || a4 > a3) {\n        // 0x413fef\n        return -1;\n    }\n    int64_t v1 = a5 + a4; // 0x413ec5\n    int64_t v2 = a3; // 0x413f01\n    if (v1 > a3) {\n        goto lab_0x413f2c;\n    } else {\n        // 0x413f07\n        v2 = a3;\n        if (a5 > -1 == v1 < a4) {\n            goto lab_0x413f2c;\n        } else {\n            if (v1 < 0) {\n                goto lab_0x4141e8;\n            } else {\n                // 0x413f1e\n                v2 = v1;\n                if (a5 >= 0 || v1 < a4) {\n                    goto lab_0x413f2c;\n                } else {\n                    goto lab_0x4141e8;\n                }\n            }\n        }\n    }\n  lab_0x413f2c:;\n    char * v3 = (char *)(a1 + 56); // 0x413f2c\n    int64_t v4 = (int64_t)*v3; // 0x413f2c\n    int64_t v5 = v4; // 0x413f42\n    int64_t v6 = v2; // 0x413f42\n    if (v2 > a4) {\n        // 0x413f44\n        v5 = v4;\n        v6 = v2;\n        if ((v4 & 8) == 0 == (*(int64_t *)(a1 + 32) != 0)) {\n            // 0x414140\n            function_413df0(a1);\n            v5 = (int64_t)*v3;\n            v6 = v2;\n        }\n    }\n    goto lab_0x413f53;\n  lab_0x413f53:;\n    int64_t size = 16; // 0x413f55\n    int64_t v7 = 0; // 0x413f55\n    int64_t v8 = 1; // 0x413f55\n    int64_t v9; // 0x413ec0\n    if (a7 == 0 || (v5 & 16) != 0) {\n        goto lab_0x413f81;\n    } else {\n        uint64_t v10 = *(int64_t *)(a1 + 48); // 0x413f67\n        if ((v5 & 6) == 4) {\n            int64_t v11 = *(int64_t *)a7; // 0x414100\n            if (v11 > v10) {\n                // 0x413f73\n                v9 = v10 + 1;\n                goto lab_0x413f7a;\n            } else {\n                // 0x41410d\n                v9 = v11;\n                size = 16;\n                v7 = 0;\n                v8 = 1;\n                if (v11 >= 0 == (v11 != 0)) {\n                    goto lab_0x413f7a;\n                } else {\n                    goto lab_0x413f81;\n                }\n            }\n        } else {\n            // 0x413f73\n            v9 = v10 + 1;\n            goto lab_0x413f7a;\n        }\n    }\n  lab_0x413f81:;\n    int64_t * mem = malloc((int32_t)size); // 0x413f90\n    if (mem == NULL) {\n        // 0x413fef\n        return -2;\n    }\n    uint64_t v12 = v8;\n    int64_t v13 = (int64_t)mem; // 0x413f90\n    int64_t result = -1; // 0x413ec0\n    int64_t v14; // 0x413ec0\n    int64_t v15; // 0x413ec0\n    int64_t v16; // 0x413ec0\n    int64_t v17; // 0x413ec0\n    int64_t v18; // 0x413ec0\n    int64_t v19; // 0x413ec0\n    int64_t v20; // 0x413ec0\n    int64_t v21; // 0x413ec0\n    int64_t v22; // 0x413ec0\n    int64_t v23; // 0x413ec0\n    int64_t v24; // 0x413ec0\n    int64_t v25; // 0x413ec0\n    int64_t v26; // 0x413ec0\n    int64_t v27; // 0x413ec0\n    int64_t v28; // 0x413ec0\n    int64_t v29; // 0x413ec0\n    int64_t v30; // 0x413ec0\n    int64_t v31; // 0x413ec0\n    int64_t v32; // 0x413ec0\n    int64_t v33; // 0x413ec0\n    int64_t v34; // 0x413ec0\n    int64_t v35; // 0x413ec0\n    int64_t v36; // 0x413ec0\n    int64_t v37; // 0x413ec0\n    int64_t v38; // 0x413ec0\n    char * v39; // 0x414011\n    switch ((int32_t)v40) {\n        case 0: {\n            // 0x414008\n            v14 = v7;\n            v36 = a2;\n            v26 = a3;\n            v31 = v6;\n            v16 = v6;\n            v21 = a6;\n            if (v14 == 0) {\n                goto lab_0x4140d8;\n            } else {\n                // 0x414011\n                v39 = (char *)(a1 + 56);\n                int64_t v41 = v12 + 1; // 0x414016\n                unsigned char v42 = *v39 / 2 % 4;\n                switch (v42) {\n                    case 0: {\n                        int32_t size2 = 8 * (int32_t)v41; // 0x414190\n                        int64_t * mem2 = malloc(size2); // 0x414190\n                        int64_t v43 = (int64_t)mem2; // 0x414190\n                        *(int64_t *)(v14 + 8) = v43;\n                        v35 = v41;\n                        v25 = a3;\n                        int64_t v44; // 0x413ec0\n                        v30 = v44;\n                        v15 = v44;\n                        v20 = 0;\n                        if (mem2 == NULL) {\n                            goto lab_0x4140bd;\n                        } else {\n                            int64_t * mem3 = malloc(size2); // 0x4141b5\n                            *(int64_t *)(v14 + 16) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x4142aa\n                                free(mem2);\n                                v35 = v41;\n                                v25 = a3;\n                                v30 = v43;\n                                v15 = v44;\n                                v20 = 0;\n                                goto lab_0x4140bd;\n                            } else {\n                                // 0x4141d2\n                                *(int64_t *)v14 = v41;\n                                v34 = v41;\n                                v24 = a3;\n                                v29 = v43;\n                                v19 = 1;\n                                goto lab_0x414047;\n                            }\n                        }\n                    }\n                    case 1: {\n                        int64_t * v45 = (int64_t *)v14; // 0x41422e\n                        v34 = a2;\n                        v24 = a3;\n                        v29 = v6;\n                        v19 = 1;\n                        if (*v45 >= v41) {\n                            goto lab_0x414047;\n                        } else {\n                            int64_t v46 = 8 * v41; // 0x414238\n                            int64_t * v47 = (int64_t *)(v14 + 8); // 0x414240\n                            int32_t v48 = v46; // 0x414257\n                            int64_t * mem4 = realloc((int64_t *)*v47, v48); // 0x414257\n                            v35 = v46;\n                            v25 = 1;\n                            v30 = v41;\n                            v15 = v6;\n                            v20 = 0;\n                            if (mem4 == NULL) {\n                                goto lab_0x4140bd;\n                            } else {\n                                int64_t * v49 = (int64_t *)(v14 + 16); // 0x414269\n                                int64_t * mem5 = realloc((int64_t *)*v49, v48); // 0x414271\n                                if (mem5 == NULL) {\n                                    // 0x4142ba\n                                    free(mem4);\n                                    v35 = v46;\n                                    v25 = 1;\n                                    v30 = v41;\n                                    v15 = v6;\n                                    v20 = 0;\n                                    goto lab_0x4140bd;\n                                } else {\n                                    // 0x414286\n                                    *v47 = (int64_t)mem4;\n                                    *v49 = (int64_t)mem5;\n                                    *v45 = v41;\n                                    v34 = v46;\n                                    v24 = 1;\n                                    v29 = v41;\n                                    v19 = 1;\n                                    goto lab_0x414047;\n                                }\n                            }\n                        }\n                    }\n                    default: {\n                        // 0x41402e\n                        v38 = a2;\n                        v28 = a3;\n                        v33 = v6;\n                        v18 = v6;\n                        v23 = a6;\n                        if (v42 != 2) {\n                            goto lab_0x4142fc;\n                        } else {\n                            // 0x414037\n                            v34 = a2;\n                            v24 = a3;\n                            v29 = v6;\n                            v19 = 2;\n                            v37 = a2;\n                            v27 = a3;\n                            v32 = v6;\n                            v17 = v6;\n                            v22 = a6;\n                            if (v12 > *(int64_t *)v14) {\n                                goto lab_0x4142e3;\n                            } else {\n                                goto lab_0x414047;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case 1: {\n            goto lab_0x413fe7;\n        }\n        default: {\n            goto lab_0x413fe0;\n        }\n    }\n  lab_0x4141e8:\n    // 0x4141e8\n    v5 = (int64_t)*(char *)(a1 + 56);\n    v6 = 0;\n    goto lab_0x413f53;\n  lab_0x413fe0:\n    // 0x413fe0\n    result = -2;\n  lab_0x413fe7:\n    // 0x413fe7\n    free(mem);\n    // 0x413fef\n    return result;\n  lab_0x4140d8:;\n    int64_t v50 = *mem; // 0x4140dd\n    result = v50;\n    if ((char)a8 == 0) {\n        // 0x413fe7\n        free(mem);\n        // 0x413fef\n        return result;\n    }\n    if (v50 == a4) {\n        // 0x413fe7\n        free(mem);\n        // 0x413fef\n        return *(int64_t *)(v13 + 8) - v50;\n    }\n    // 0x4142ca\n    __assert_fail(\"pmatch[0].rm_so == start\", \"lib/regexec.c\", 445, \"re_search_stub\");\n    v37 = v36;\n    v27 = v26;\n    v32 = v31;\n    v17 = v16;\n    v22 = v21;\n    goto lab_0x4142e3;\n  lab_0x413f7a:\n    // 0x413f7a\n    size = 16 * v9;\n    v7 = a7;\n    v8 = v9;\n    goto lab_0x413f81;\n  lab_0x4142e3:\n    // 0x4142e3\n    __assert_fail(\"regs->num_regs >= nregs\", \"lib/regexec.c\", 506, \"re_copy_regs\");\n    v38 = v37;\n    v28 = v27;\n    v33 = v32;\n    v18 = v17;\n    v23 = v22;\n    goto lab_0x4142fc;\n  lab_0x4142fc:\n    // 0x4142fc\n    __assert_fail(\"regs_allocated == REGS_FIXED\", \"lib/regexec.c\", 504, \"re_copy_regs\");\n    if ((v18 || v28) <= -1) {\n        // 0x413fef\n        return -2;\n    }\n    int64_t size3 = v18 + 504; // 0x41436c\n    if ((size3 & (v18 ^ -0x8000000000000000)) < 0) {\n        // 0x413fef\n        return -2;\n    }\n    int64_t * v51 = NULL; // 0x414378\n    int64_t v52 = (int64_t)\"lib/regexec.c\"; // 0x414378\n    if (v18 != 0) {\n        int64_t * mem6 = malloc((int32_t)size3); // 0x4143e2\n        if (mem6 == NULL) {\n            // 0x413fef\n            return -2;\n        }\n        int64_t v53 = (int64_t)mem6; // 0x4143e2\n        memcpy(mem6, (int64_t *)\"lib/regexec.c\", 504);\n        memcpy((int64_t *)(v53 + 504), (int64_t *)\"re_copy_regs\", (int32_t)v18);\n        v51 = mem6;\n        v52 = v53;\n    }\n    int64_t result2 = function_413ec0((int64_t)\"regs_allocated == REGS_FIXED\", v52, size3, v23, v38, v28, v33, a6 % 256); // 0x4143a3\n    free(v51);\n    // 0x413fef\n    return result2;\n  lab_0x4140bd:\n    // 0x4140bd\n    *v39 = *v39 & -7 | 2 * (char)v20;\n    v36 = v35;\n    v26 = v25;\n    v31 = v30;\n    v16 = v15;\n    v21 = v20;\n    if (v20 == 0) {\n        goto lab_0x413fe0;\n    } else {\n        goto lab_0x4140d8;\n    }\n  lab_0x414047:;\n    int64_t v54 = v19;\n    int64_t v55 = v29;\n    int64_t v56 = v24;\n    int64_t v57 = v34;\n    int64_t v58 = 0; // 0x41404a\n    int64_t v59 = v6; // 0x41404a\n    if (v12 >= 1) {\n        int64_t v60 = *(int64_t *)(v14 + 8); // 0x414050\n        int64_t v61 = 0; // 0x414067\n        int64_t v62 = 2 * v61; // 0x414070\n        *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n        int64_t v63 = *(int64_t *)(v13 + 8 + v62); // 0x414079\n        *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n        v61 += 8;\n        v58 = v12;\n        v59 = v60;\n        while (v61 != 8 * v12) {\n            // 0x414070\n            v62 = 2 * v61;\n            *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n            v63 = *(int64_t *)(v13 + 8 + v62);\n            *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n            v61 += 8;\n            v58 = v12;\n            v59 = v60;\n        }\n    }\n    int64_t v64 = v59;\n    int64_t v65 = v58;\n    int64_t * v66 = (int64_t *)v14; // 0x41408b\n    v35 = v57;\n    v25 = v56;\n    v30 = v55;\n    v15 = v64;\n    v20 = v54;\n    if (*v66 > v65) {\n        int64_t v67 = v65 + 1; // 0x4140a8\n        int64_t v68 = 8 * v65; // 0x4140ac\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n        v35 = v57;\n        v25 = v56;\n        v30 = v55;\n        v15 = v64;\n        v20 = v54;\n        while (*v66 > v67) {\n            int64_t v69 = v67;\n            v67 = v69 + 1;\n            v68 = 8 * v69;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n            v35 = v57;\n            v25 = v56;\n            v30 = v55;\n            v15 = v64;\n            v20 = v54;\n        }\n    }\n    goto lab_0x4140bd;\n}\n"
        },
        {
            "funcName": "function_414450",
            "funcStartAddr": "414450",
            "funcEndAddr": "414560",
            "decompiledFuncCode": "int64_t function_414450(int64_t a1, int64_t str, uint64_t a3) {\n    // 0x414450\n    *(int64_t *)a1 = 0;\n    *(int64_t *)(a1 + 8) = 0;\n    *(int64_t *)(a1 + 16) = 0;\n    int64_t * mem = malloc(256); // 0x414495\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x41449a\n    *v1 = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x414550\n        return 12;\n    }\n    int64_t v2 = (a3 % 2 == 0 ? 0x10102c6 : 0x3b2fc) | 0x200000 * a3 & 0x400000; // 0x4144b7\n    int64_t v3 = (a3 & 4) != 0 ? v2 & 0x143b2be | 256 : v2;\n    *(int64_t *)(a1 + 40) = 0;\n    char * v4 = (char *)(a1 + 56); // 0x4144d2\n    *v4 = ((a3 & 4) != 0 ? -128 : 0) | 2 * (char)a3 & 16 | *v4 & 111;\n    int64_t v5; // 0x414450\n    int64_t v6 = function_412fc0(a1, str, (int64_t)strlen((char *)str), v3, v5, v5); // 0x4144f7\n    int32_t v7 = v6; // 0x4144fe\n    int64_t v8 = 8; // 0x414501\n    if (v7 != 16) {\n        // 0x414503\n        v8 = v6 & 0xffffffff;\n        if (v7 == 0) {\n            // 0x414507\n            function_413df0(a1);\n            // 0x41450f\n            return v8 & 0xffffffff;\n        }\n    }\n    // 0x41453d\n    free((int64_t *)*v1);\n    *v1 = 0;\n    // 0x41450f\n    return v8 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_414560",
            "funcStartAddr": "414560",
            "funcEndAddr": "4145dd",
            "decompiledFuncCode": "int64_t function_414560(int64_t a1, int64_t a2, int64_t a3, uint64_t a4) {\n    int64_t v1 = *(int64_t *)((0x100000000 * a1 >> 29) + (int64_t)&g15); // 0x414581\n    char * str = dcgettext(NULL, (char *)(v1 + (int64_t)\"Success\"), 5); // 0x414592\n    int64_t result = (int64_t)strlen(str) + 1; // 0x4145a2\n    if (a4 == 0) {\n        // 0x4145be\n        return result;\n    }\n    int64_t v2 = result; // 0x4145b1\n    if (result > a4) {\n        // 0x4145d0\n        v2 = a4 - 1;\n        *(char *)(v2 + a3) = 0;\n    }\n    // 0x4145b3\n    memcpy((int64_t *)a3, (int64_t *)str, (int32_t)v2);\n    // 0x4145be\n    return result;\n}\n"
        },
        {
            "funcName": "function_4145e0",
            "funcStartAddr": "4145e0",
            "funcEndAddr": "414624",
            "decompiledFuncCode": "int64_t function_4145e0(int64_t a1) {\n    if (a1 != 0) {\n        // 0x4145ec\n        function_40bbe0(a1);\n    }\n    // 0x4145f1\n    *(int64_t *)a1 = 0;\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x4145f8\n    *(int64_t *)(a1 + 8) = 0;\n    free((int64_t *)*v1);\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)(a1 + 40); // 0x414611\n    free((int64_t *)*v2);\n    *v2 = 0;\n    return &g88;\n}\n"
        },
        {
            "funcName": "function_414630",
            "funcStartAddr": "414630",
            "funcEndAddr": "4146c6",
            "decompiledFuncCode": "int64_t function_414630(int64_t a1, int64_t str, int64_t a3, int64_t a4, int64_t a5) {\n    if ((a5 & 0xfffffff8) != 0) {\n        // 0x4146c0\n        return 2;\n    }\n    int64_t v1; // 0x414630\n    int64_t v2; // 0x414630\n    int64_t v3; // 0x414630\n    int64_t v4; // 0x414630\n    int64_t v5; // 0x414630\n    int64_t v6; // 0x414630\n    if ((a5 & 4) != 0) {\n        int64_t v7 = *(int64_t *)(a4 + 8); // 0x4146a3\n        v5 = 0;\n        v1 = a4;\n        v3 = v7;\n        v6 = 0;\n        v2 = a4;\n        v4 = v7;\n        if ((*(char *)(a1 + 56) & 16) != 0) {\n            goto lab_0x414676;\n        } else {\n            goto lab_0x4146ad;\n        }\n    } else {\n        int64_t len = strlen((char *)str); // 0x41465d\n        v5 = 0;\n        v1 = 0;\n        v3 = len;\n        v6 = 0;\n        v2 = 0;\n        v4 = len;\n        if ((*(char *)(a1 + 56) & 16) == 0) {\n            goto lab_0x4146ad;\n        } else {\n            goto lab_0x414676;\n        }\n    }\n  lab_0x414676:;\n    int64_t v8 = v3;\n    return (int32_t)function_40ef10(a1, str, v8, v1, v8, v8, v6, v5, a5 & 0xffffffff) != 0;\n  lab_0x4146ad:\n    // 0x4146ad\n    v5 = a4;\n    v1 = v2;\n    v3 = v4;\n    v6 = a3;\n    goto lab_0x414676;\n}\n"
        },
        {
            "funcName": "function_4146d0",
            "funcStartAddr": "4146d0",
            "funcEndAddr": "4146e8",
            "decompiledFuncCode": "int64_t function_4146d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4146d0\n    return function_413ec0(a1, a2, a3, a4, 0, a3, a5, 1);\n}\n"
        },
        {
            "funcName": "function_4146f0",
            "funcStartAddr": "4146f0",
            "funcEndAddr": "414705",
            "decompiledFuncCode": "int64_t function_4146f0(int64_t a1, int64_t a2, int64_t a3, int32_t a4, int64_t a5, int32_t a6) {\n    // 0x4146f0\n    return function_413ec0(a1, a2, a3, (int64_t)a4, a5, a3, (int64_t)a6, 0);\n}\n"
        },
        {
            "funcName": "function_414710",
            "funcStartAddr": "414710",
            "funcEndAddr": "41472a",
            "decompiledFuncCode": "int64_t function_414710(int64_t a1, int64_t a2) {\n    // 0x414710\n    int64_t result; // 0x414710\n    return result;\n}\n"
        },
        {
            "funcName": "function_414730",
            "funcStartAddr": "414730",
            "funcEndAddr": "41474c",
            "decompiledFuncCode": "int64_t function_414730(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x414730\n    int64_t result; // 0x414730\n    return result;\n}\n"
        },
        {
            "funcName": "function_414750",
            "funcStartAddr": "414750",
            "funcEndAddr": "41478c",
            "decompiledFuncCode": "int64_t function_414750(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)(a1 + 56);\n    char v2 = *v1 & -7;\n    if (a3 == 0) {\n        // 0x414770\n        *v1 = v2;\n        *(int64_t *)a2 = 0;\n        *(int64_t *)(a2 + 16) = 0;\n        *(int64_t *)(a2 + 8) = 0;\n        int64_t result; // 0x414750\n        return result;\n    }\n    unsigned char result2 = v2 | 2;\n    *v1 = result2;\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 8) = a4;\n    *(int64_t *)(a2 + 16) = a5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_414790",
            "funcStartAddr": "414790",
            "funcEndAddr": "4147ed",
            "decompiledFuncCode": "int64_t function_414790(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x414797\n    int64_t v2; // 0x414790\n    int64_t result = function_405ae0(a1, v2); // 0x4147a8\n    if ((v2 & 32) != 0) {\n        // 0x4147d0\n        if ((int32_t)result == 0) {\n            // 0x4147d4\n            *__errno_location() = 0;\n        }\n        // 0x4147ca\n        return 0xffffffff;\n    }\n    // 0x4147b1\n    if ((int32_t)result == 0) {\n        // 0x4147ca\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4147b8\n    if (v1 == 0) {\n        // 0x4147ba\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4147ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4147f0",
            "funcStartAddr": "4147f0",
            "funcEndAddr": "41484e",
            "decompiledFuncCode": "int64_t function_4147f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4147f6\n    if (locale == NULL) {\n        // 0x414823\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4147f6\n    bool v2; // 0x4147f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g17; // 0x4147f0\n    int64_t v5 = v1; // 0x4147f0\n    int64_t v6 = 2; // 0x414815\n    unsigned char v7 = *(char *)v5; // 0x414815\n    char v8 = *(char *)v4; // 0x414815\n    char v9 = v8; // 0x414815\n    bool v10 = false; // 0x414815\n    while (v7 == v8) {\n        // 0x414808\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x414821\n    int64_t v13 = v1; // 0x414821\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x414823\n        return 0;\n    }\n    int64_t v14 = 6; // 0x414821\n    unsigned char v15 = *(char *)v13; // 0x41483d\n    char v16 = *(char *)v12; // 0x41483d\n    char v17 = v16; // 0x41483d\n    bool v18 = false; // 0x41483d\n    while (v15 == v16) {\n        // 0x414830\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_414850",
            "funcStartAddr": "414850",
            "funcEndAddr": "414db2",
            "decompiledFuncCode": "int64_t function_414850(void) {\n    char * v1 = nl_langinfo(14); // 0x414866\n    char * v2 = g84; // 0x41486b\n    char * v3; // 0x414850\n    int64_t v4; // 0x414850\n    int64_t v5; // 0x414850\n    int64_t v6; // 0x414850\n    int64_t v7; // 0x414850\n    int32_t size; // 0x414850\n    int32_t size2; // 0x414850\n    int32_t len; // 0x414922\n    int64_t v8; // 0x414922\n    char * env_val; // 0x41490d\n    if (v2 == NULL) {\n        // 0x414908\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x414975;\n        } else {\n            // 0x41491a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x414975;\n            } else {\n                // 0x41491f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x41490d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x414da5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x414975;\n                    } else {\n                        // 0x414d19\n                        size2 = len + 14;\n                        goto lab_0x41493b;\n                    }\n                } else {\n                    goto lab_0x41493b;\n                }\n            }\n        }\n    } else {\n        // 0x414850\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x41488a;\n    }\n  lab_0x414bbc:;\n    // 0x414bbc\n    struct _IO_FILE * stream; // 0x4149fb\n    int32_t v10 = __uflow(stream); // 0x414bbf\n    int64_t v11; // 0x414850\n    int64_t v12 = v11; // 0x414bc9\n    int64_t v13; // 0x414850\n    int64_t v14 = v13; // 0x414bc9\n    int32_t v15 = v10; // 0x414bc9\n    int64_t v16; // 0x414850\n    int64_t v17 = v16; // 0x414bc9\n    int64_t v18 = v11; // 0x414bc9\n    int64_t v19 = v13; // 0x414bc9\n    int64_t v20 = v16; // 0x414bc9\n    if (v10 == -1) {\n        // break -> 0x414bcf\n        goto lab_0x414bcf;\n    }\n    goto lab_0x414a49;\n  lab_0x414a3e:;\n    // 0x414a3e\n    int64_t v90; // 0x414850\n    int64_t * v32; // 0x414a30\n    *v32 = v90 + 1;\n    int64_t v89; // 0x414850\n    v12 = v89;\n    int64_t v91; // 0x414850\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x414850\n    v17 = v92;\n    goto lab_0x414a49;\n  lab_0x414a49:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x414850\n    int32_t v25; // bp-120, 0x414850\n    int32_t v26; // bp-184, 0x414850\n    int64_t v27; // 0x4149fb\n    int64_t v28; // 0x414a18\n    int64_t v29; // 0x414a1d\n    int64_t * v30; // 0x414a34\n    switch (c) {\n        case 32: {\n            goto lab_0x414a30;\n        }\n        case 10: {\n            goto lab_0x414a30;\n        }\n        case 9: {\n            goto lab_0x414a30;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x414c21\n            int32_t v33; // 0x414850\n            char v34; // 0x414850\n            int32_t v35; // 0x414c2e\n            if (v31 < *v30) {\n                // 0x414c00\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x414c2b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x414c21\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x414c00\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x414c2b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x414c10\n                v36 = v33;\n            }\n            // 0x414cff\n            if (v36 == -1) {\n                // break -> 0x414bcf\n                break;\n            }\n            goto lab_0x414a30;\n        }\n        default: {\n            // 0x414a5f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x414bcf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x414a88\n            int64_t v39 = v37 + 4; // 0x414a8a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x414a96\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x414a98\n            while (v41 == 0) {\n                // 0x414a88\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x414ab6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x414ac2\n            int64_t v45 = v43 + 4; // 0x414ac4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x414ad0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x414ad2\n            while (v47 == 0) {\n                // 0x414ac2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x414abf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x414ae8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x414af8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x414afc\n            int64_t v52 = v51 + v48; // 0x414b05\n            int64_t * mem; // 0x414850\n            int64_t v53; // 0x414850\n            int64_t v54; // 0x414850\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x414c3b\n                int64_t v56 = v55 + 3; // 0x414c47\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x414b21\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x414b30\n            if (mem == NULL) {\n                // 0x414d5c\n                free((int64_t *)v21);\n                function_405ae0(v27, v53);\n                v24 = (int64_t)&g5;\n                goto lab_0x4149d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x414b48\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x414b52\n            uint32_t v62 = (int32_t)v59; // 0x414b55\n            int64_t v63; // 0x414850\n            if (v62 >= 8) {\n                // 0x414c64\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x414c7e\n                int64_t v66 = v61 - v65; // 0x414c82\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x414c8d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x414c9e\n                    int64_t v70 = v69 & 0xffffffff; // 0x414c9e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x414c9b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x414d2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x414b67\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x414b6b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x414b7b\n            int64_t v74 = v60 - 1; // 0x414b7f\n            uint32_t v75 = (int32_t)v73; // 0x414b84\n            int64_t v76; // 0x414850\n            if (v75 >= 8) {\n                // 0x414cb2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x414cbc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x414ccc\n                int64_t v80 = v74 - v79; // 0x414cd0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x414cdb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x414ceb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x414ce9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x414d46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x414d4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x414b96\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x414b9a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x414d93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x414bae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x414a3e;\n            } else {\n                goto lab_0x414bbc;\n            }\n        }\n    }\n  lab_0x414a30:;\n    int64_t v93 = v23; // 0x414850\n    int64_t v94 = v22; // 0x414850\n    int64_t v95 = v21; // 0x414850\n    goto lab_0x414a30_2;\n  lab_0x414975:;\n    int64_t * mem3 = malloc(size); // 0x414975\n    int64_t v97 = (int64_t)&g5; // 0x414980\n    int64_t v98; // 0x414850\n    int64_t path; // 0x414850\n    if (mem3 == NULL) {\n        goto lab_0x414952;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x414975\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x414996;\n    }\n  lab_0x41488a:;\n    int64_t str = v1 == NULL ? (int64_t)&g5 : (int64_t)v1; // 0x41487d\n    char v100 = *v3; // 0x41488a\n    int64_t v101; // 0x414850\n    if (v100 == 0) {\n        // 0x4148e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x414850\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x414850\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4148d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4148d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4148a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4148ad\n        char v107 = *(char *)v106; // 0x4148b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4148e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4148bb\n    v104 = v103 + 1;\n  lab_0x4148d7:\n    // 0x4148e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x414952:;\n    char * v108 = (char *)v97;\n    g84 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x41488a;\n  lab_0x414996:;\n    int64_t v109 = v98 + path; // 0x414996\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4149c2\n    v24 = (int64_t)&g5;\n    if (fd >= 0) {\n        // 0x4149f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x414d22\n            close(fd);\n            v24 = (int64_t)&g5;\n        } else {\n            // 0x414a15\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x414a30_2:;\n                uint64_t v96 = *v32; // 0x414a30\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x414bbc;\n                } else {\n                    goto lab_0x414a3e;\n                }\n            }\n          lab_0x414bcf:\n            // 0x414bcf\n            function_405ae0(v27, v19);\n            v24 = (int64_t)&g5;\n            if (v18 != 0) {\n                // 0x414bee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4149d4;\n  lab_0x41493b:;\n    int64_t * mem4 = malloc(size2); // 0x41493b\n    v97 = (int64_t)&g5;\n    if (mem4 != NULL) {\n        // 0x4149e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x414996;\n    } else {\n        goto lab_0x414952;\n    }\n  lab_0x4149d4:\n    // 0x4149d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x414952;\n}\n"
        },
        {
            "funcName": "function_414dc0",
            "funcStartAddr": "414dc0",
            "funcEndAddr": "414e1d",
            "decompiledFuncCode": "int64_t function_414dc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x414dc0\n    return function_401778();\n}\n"
        },
        {
            "funcName": "function_414e20",
            "funcStartAddr": "414e20",
            "funcEndAddr": "414e21",
            "decompiledFuncCode": "int64_t function_414e20(void) {\n    // 0x414e20\n    int64_t result; // 0x414e20\n    return result;\n}\n"
        },
        {
            "funcName": "function_414e30",
            "funcStartAddr": "414e30",
            "funcEndAddr": "414e48",
            "decompiledFuncCode": "int64_t function_414e30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x414e30\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g22);\n}\n"
        },
        {
            "funcName": "function_414e48",
            "funcStartAddr": "414e48",
            "funcEndAddr": "414e68",
            "decompiledFuncCode": "int64_t function_414e48(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g18; // 0x414e52\n    while (*(int64_t *)v1 != -1) {\n        // 0x414e53\n        v1 -= 8;\n    }\n    // 0x414e64\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_nl.elf"
}