{
    "funcInfo": [
        {
            "funcName": "function_402360",
            "funcStartAddr": "402360",
            "funcEndAddr": "402365",
            "decompiledFuncCode": "int64_t function_402360(void) {\n    // 0x402360\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402365",
            "funcStartAddr": "402365",
            "funcEndAddr": "40236a",
            "decompiledFuncCode": "int64_t function_402365(void) {\n    // 0x402365\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40236a",
            "funcStartAddr": "40236a",
            "funcEndAddr": "40236f",
            "decompiledFuncCode": "int64_t function_40236a(void) {\n    // 0x40236a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40236f",
            "funcStartAddr": "40236f",
            "funcEndAddr": "402374",
            "decompiledFuncCode": "int64_t function_40236f(void) {\n    // 0x40236f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402374",
            "funcStartAddr": "402374",
            "funcEndAddr": "402379",
            "decompiledFuncCode": "int64_t function_402374(void) {\n    // 0x402374\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402379",
            "funcStartAddr": "402379",
            "funcEndAddr": "40237e",
            "decompiledFuncCode": "int64_t function_402379(void) {\n    // 0x402379\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40237e",
            "funcStartAddr": "40237e",
            "funcEndAddr": "402383",
            "decompiledFuncCode": "int64_t function_40237e(void) {\n    // 0x40237e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402390",
            "funcStartAddr": "402390",
            "funcEndAddr": "4028a0",
            "decompiledFuncCode": "int64_t function_402390(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x40239a\n    function_4072f0(a2);\n    setlocale(LC_ALL, (char *)&g13);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    char * v2 = (char *)*(int64_t *)localeconv(); // 0x4023ea\n    char * str = *v2 == 0 ? \".\" : v2; // 0x4023f5\n    g46 = str;\n    g45 = strlen(str);\n    function_410340(0x405530, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v3 = 0; // 0x40241b\n    int64_t v4 = 0; // 0x40241b\n    int64_t v5 = 0; // 0x40241b\n    int64_t v6; // 0x402390\n    int64_t v7; // 0x402433\n    while (true) {\n      lab_0x402420_3:\n        // 0x402420\n        v6 = v3;\n        while (true) {\n            // 0x402420\n            int32_t v8; // 0x402390\n            while (true) {\n                // 0x402420\n                v7 = function_40add0(v1, a2, \"c:fLt\", &g3, 0, a6);\n                v8 = v7;\n                switch (v8) {\n                    case -1: {\n                        goto lab_0x402543;\n                    }\n                    case 99: {\n                        goto lab_0x402520;\n                    }\n                    default: {\n                        if (v8 > 99) {\n                            // break -> 0x402450\n                            break;\n                        }\n                        if (v8 == -130) {\n                            // 0x402875\n                            function_404870(0);\n                            // UNREACHABLE\n                        }\n                        if (v8 != 76) {\n                            if (v8 == -131) {\n                                // 0x4024c9\n                                function_409420((int64_t)g35, \"stat\", \"GNU coreutils\", (int64_t)g24, \"Michael Meskes\", 0);\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x4024b6;\n                        }\n                        // 0x40249b\n                        g48 = 1;\n                        goto lab_0x402420;\n                    }\n                }\n            }\n            // 0x402450\n            while (v8 != 116) {\n                if (v8 == 128) {\n                    int64_t v9 = g64; // 0x402463\n                    g47 = 1;\n                    *(int64_t *)0x617310 = (int64_t)&g13;\n                    v3 = v9;\n                    goto lab_0x402420_3;\n                }\n                // 0x4024b0\n                if (v8 != 102) {\n                    // 0x4024b6\n                    function_404870(1);\n                    // UNREACHABLE\n                }\n                while (true) {\n                    // 0x402420\n                    v7 = function_40add0(v1, a2, \"c:fLt\", &g3, 0, a6);\n                    v8 = v7;\n                    switch (v8) {\n                        case -1: {\n                            goto lab_0x402543;\n                        }\n                        case 99: {\n                            goto lab_0x402520;\n                        }\n                        default: {\n                            if (v8 > 99) {\n                                // break -> 0x402450\n                                break;\n                            }\n                            if (v8 == -130) {\n                                // 0x402875\n                                function_404870(0);\n                                // UNREACHABLE\n                            }\n                            if (v8 != 76) {\n                                if (v8 == -131) {\n                                    // 0x4024c9\n                                    function_409420((int64_t)g35, \"stat\", \"GNU coreutils\", (int64_t)g24, \"Michael Meskes\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x4024b6;\n                            }\n                            // 0x40249b\n                            g48 = 1;\n                            goto lab_0x402420;\n                        }\n                    }\n                }\n            }\n        }\n      lab_0x402520:\n        // 0x402520\n        g47 = 0;\n        g23 = (char *)&g12;\n        v3 = g64;\n        goto lab_0x402420_3;\n    }\n  lab_0x402543:\n    // 0x402543\n    if (*(int32_t *)0x61739c == (int32_t)a1) {\n        // 0x40287c\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x4024b6\n        function_404870(1);\n        // UNREACHABLE\n    }\n    int64_t v10; // 0x402390\n    int64_t v11; // 0x402390\n    if (v6 == 0) {\n        // 0x40282c\n        v11 = function_403e80(v5, v4, 0);\n        v10 = function_403e80(v5, v4, 1);\n    } else {\n        int64_t v12 = function_40bd00(v6, \"%N\"); // 0x402566\n        v11 = v6;\n        v10 = v6;\n        if (v12 != 0) {\n            char * env_val = getenv(\"QUOTING_STYLE\"); // 0x40257a\n            if (env_val == NULL) {\n                // 0x40285a\n                function_4088b0(0, 4);\n                v11 = v6;\n                v10 = v6;\n            } else {\n                int64_t v13 = (int64_t)env_val; // 0x40257a\n                int64_t v14 = function_405190(v13, g10, (int64_t *)&g9, 4); // 0x40259d\n                if ((int32_t)v14 < 0) {\n                    // 0x4027e4\n                    function_4088b0(0, 4);\n                    function_408f10(v13);\n                    error(0, (int32_t)\"ignoring invalid value of environment variable QUOTING_STYLE: %s\" ^ (int32_t)\"ignoring invalid value of environment variable QUOTING_STYLE: %s\", dcgettext(NULL, \"ignoring invalid value of environment variable QUOTING_STYLE: %s\", 5));\n                    v11 = v6;\n                    v10 = v6;\n                } else {\n                    int32_t v15 = *(int32_t *)((0x100000000 * v14 >> 30) + (int64_t)&g9); // 0x4025ae\n                    function_4088b0(0, v15);\n                    v11 = v6;\n                    v10 = v6;\n                }\n            }\n        }\n    }\n    uint64_t v16 = (int64_t)g33; // 0x4025bf\n    if (v1 <= v16) {\n        // 0x402767\n        return 0;\n    }\n    int64_t v17 = v7 & 0xffffffff; // 0x402438\n    int64_t v18 = v11;\n    int64_t v19 = a2 + 8 + 8 * (((v16 ^ 0xffffffff) + a1 & 0xffffffff) + (int64_t)g33); // 0x4025de\n    bool v20; // 0x402390\n    int64_t v21 = v20 ? -1 : 1; // 0x402648\n    int32_t v22; // 0x402390\n    int64_t v23 = (v22 & 0xb000) != 0x2000 ? v18 : v10;\n    int64_t v24 = 0x100000000 * v16 / 0x20000000 + a2; // 0x4025e9\n    int64_t v25 = 1; // 0x4025e9\n    int64_t v26; // 0x402390\n    int64_t v27; // 0x402390\n    int64_t v28; // 0x402390\n    int64_t v29; // 0x402390\n    int64_t v30; // bp-200, 0x402390\n    int64_t v31; // 0x402390\n    int64_t v32; // 0x402638\n    while (true) {\n      lab_0x402638:\n        // 0x402638\n        v26 = v25;\n        v28 = v24;\n        v32 = *(int64_t *)v28;\n        int64_t v33 = 2; // 0x402648\n        int64_t v34 = v32;\n        int64_t v35 = (int64_t)\"-\";\n        unsigned char v36 = *(char *)v34; // 0x402648\n        char v37 = *(char *)v35; // 0x402648\n        char v38 = v37; // 0x402648\n        bool v39 = false; // 0x402648\n        while (v36 == v37) {\n            v33--;\n            int64_t v40 = v35 + v21; // 0x402648\n            int64_t v41 = v34 + v21; // 0x402648\n            v38 = v36;\n            v39 = true;\n            if (v33 == 0) {\n                // break -> \n                break;\n            }\n            v34 = v41;\n            v35 = v40;\n            v36 = *(char *)v34;\n            v37 = *(char *)v35;\n            v38 = v37;\n            v39 = false;\n        }\n        bool v42 = v39;\n        unsigned char v43 = v38;\n        if (v5 != 0) {\n            if ((v36 >= v43 && !v42) == v36 < v43) {\n                // 0x4026c3\n                function_408cc0(4, v32);\n                error(0, (int32_t)\"using %s to denote standard input does not work in file system mode\" ^ (int32_t)\"using %s to denote standard input does not work in file system mode\", dcgettext(NULL, \"using %s to denote standard input does not work in file system mode\", 5));\n                v27 = (int32_t)&g65 ^ (int32_t)&g65;\n                goto lab_0x402625;\n            } else {\n                // 0x4025f3\n                if (statfs((char *)v32, (struct statfs *)&v30) != 0) {\n                    // 0x402781\n                    function_408cc0(4, v32);\n                    v31 = (int64_t)\"cannot read file system information for %s\";\n                    goto lab_0x40279d;\n                } else {\n                    // 0x402608\n                    int64_t v44; // bp-1, 0x402390\n                    int64_t v45 = function_4037b0(v18, &v44, v32, 0x402b30, &v30); // 0x40261d\n                    v27 = v45 & 0xffffffff ^ 1;\n                    goto lab_0x402625;\n                }\n            }\n        } else {\n            if ((v36 >= v43 && !v42) == v36 < v43) {\n                int32_t v46 = __fxstat(1, 0, (struct stat *)&v30); // 0x402724\n                v29 = 0;\n                if (v46 == 0) {\n                    goto lab_0x40268e;\n                } else {\n                    // 0x402733\n                    error(0, *__errno_location(), dcgettext(NULL, \"cannot stat standard input\", 5));\n                    v27 = (int32_t)&g65 ^ (int32_t)&g65;\n                    goto lab_0x402625;\n                }\n            } else {\n                char * v47 = (char *)v32;\n                int32_t v48; // 0x402390\n                if (g48 == 0) {\n                    // 0x4026fc\n                    v48 = __lxstat(1, v47, (struct stat *)&v30);\n                } else {\n                    // 0x40266c\n                    v48 = __xstat(1, v47, (struct stat *)&v30);\n                }\n                // 0x402683\n                v29 = v17;\n                if (v48 != 0) {\n                    // 0x4027c6\n                    function_408cc0(4, v32);\n                    v31 = (int64_t)\"cannot stat %s\";\n                    goto lab_0x40279d;\n                } else {\n                    goto lab_0x40268e;\n                }\n            }\n        }\n    }\n  lab_0x402767:;\n    // 0x402767\n    int64_t v49; // 0x402390\n    return v49 ^ 1;\n  lab_0x402625:;\n    int64_t v50 = v28 + 8; // 0x402628\n    v49 = v27 & v26;\n    v24 = v50;\n    v25 = v49;\n    if (v19 == v50) {\n        // break -> 0x402767\n        goto lab_0x402767;\n    }\n    goto lab_0x402638;\n  lab_0x40268e:;\n    int64_t v51 = function_4037b0(v23, (int64_t *)v29, v32, 0x4042e0, &v30); // 0x4026b6\n    v27 = v51 & 0xffffffff ^ 1;\n    goto lab_0x402625;\n  lab_0x40279d:\n    // 0x40279d\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v31, 5));\n    v27 = (int32_t)&g65 ^ (int32_t)&g65;\n    goto lab_0x402625;\n  lab_0x402420_2:\n    // 0x402420\n    goto lab_0x402420_3;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4028a0",
            "funcEndAddr": "4028cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4028a0\n    int64_t v1; // 0x4028a0\n    __libc_start_main(0x402390, (int32_t)a4, (char **)&v1, (void (*)())0x4102d0, (void (*)())0x410330, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4028cb",
            "funcStartAddr": "4028cb",
            "funcEndAddr": "4028ea",
            "decompiledFuncCode": "int64_t function_4028cb(void) {\n    // 0x4028cb\n    return &g34;\n}\n"
        },
        {
            "funcName": "function_4028ea",
            "funcStartAddr": "4028ea",
            "funcEndAddr": "402921",
            "decompiledFuncCode": "int64_t function_4028ea(void) {\n    // 0x4028ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402921",
            "funcStartAddr": "402921",
            "funcEndAddr": "402978",
            "decompiledFuncCode": "int64_t function_402921(void) {\n    // 0x402921\n    if (g38 != 0) {\n        // 0x402977\n        int64_t result; // 0x402921\n        return result;\n    }\n    int64_t v1 = g39; // 0x402954\n    int64_t result2; // 0x402966\n    if (g39 >= ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x402966\n        result2 = function_4028cb();\n        g38 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x402956\n        v1++;\n    }\n    // 0x40294a\n    g39 = v1;\n    // 0x402966\n    result2 = function_4028cb();\n    g38 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402978",
            "funcStartAddr": "402978",
            "funcEndAddr": "40297d",
            "decompiledFuncCode": "int64_t function_402978(void) {\n    // 0x402978\n    return function_4028ea();\n}\n"
        },
        {
            "funcName": "function_402980",
            "funcStartAddr": "402980",
            "funcEndAddr": "402a27",
            "decompiledFuncCode": "int64_t function_402980(int64_t a1, int64_t a2, char * str3, char * str2) {\n    uint64_t v1 = a2 + a1; // 0x402989\n    int64_t str = a1 + 1; // 0x40298f\n    if (str >= v1) {\n        // 0x402a0c\n        return (int64_t)strcpy((char *)str, str2);\n    }\n    int64_t str5 = str;\n    uint64_t v2 = str;\n    char v3 = *(char *)v2; // 0x4029d1\n    int32_t c = v3; // 0x4029da\n    char * found_char_pos = strchr(\"'-+ #0I\", c); // 0x4029e0\n    while (found_char_pos != NULL) {\n        int64_t v4 = str5; // 0x4029be\n        if (strchr(str3, c) != NULL) {\n            // 0x4029c0\n            *(char *)str5 = v3;\n            v4 = str5 + 1;\n        }\n        int64_t v5 = v2 + 1; // 0x4029c8\n        int64_t str4 = v4; // 0x4029cf\n        if (v1 <= v5) {\n            // 0x402a0c\n            return (int64_t)strcpy((char *)str4, str2);\n        }\n        str5 = v4;\n        v2 = v5;\n        v3 = *(char *)v2;\n        c = v3;\n        found_char_pos = strchr(\"'-+ #0I\", c);\n    }\n    // 0x4029ea\n    if (v1 <= v2) {\n        // 0x402a0c\n        return (int64_t)strcpy((char *)str5, str2);\n    }\n    int64_t v6 = (int64_t)found_char_pos; // 0x4029e0\n    int64_t v7 = v1 - v2; // 0x4029ef\n    *(char *)(str5 + v6) = v3;\n    int64_t v8 = v6 + 1; // 0x402a00\n    if (v7 == v8) {\n        // 0x402a0c\n        return (int64_t)strcpy((char *)(str5 + v7), str2);\n    }\n    int64_t v9 = v8;\n    *(char *)(v9 + str5) = *(char *)(v9 + v2);\n    int64_t v10 = v9 + 1; // 0x402a00\n    while (v7 != v10) {\n        // 0x4029f8\n        v9 = v10;\n        *(char *)(v9 + str5) = *(char *)(v9 + v2);\n        v10 = v9 + 1;\n    }\n    // 0x402a0c\n    return (int64_t)strcpy((char *)(str5 + v7), str2);\n}\n"
        },
        {
            "funcName": "function_402a30",
            "funcStartAddr": "402a30",
            "funcEndAddr": "402a63",
            "decompiledFuncCode": "int64_t function_402a30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x402a30\n    function_402980(a1, a2, \"-#0\", \"lx\");\n    return __printf_chk(1, (char *)a1);\n}\n"
        },
        {
            "funcName": "function_402a70",
            "funcStartAddr": "402a70",
            "funcEndAddr": "402aa3",
            "decompiledFuncCode": "int64_t function_402a70(int64_t a1, int64_t a2, char * a3) {\n    // 0x402a70\n    function_402980(a1, a2, \"-\", \"s\");\n    return __printf_chk(1, (char *)a1);\n}\n"
        },
        {
            "funcName": "function_402ab0",
            "funcStartAddr": "402ab0",
            "funcEndAddr": "402ae3",
            "decompiledFuncCode": "int64_t function_402ab0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x402ab0\n    function_402980(a1, a2, \"'-0\", \"lu\");\n    return __printf_chk(1, (char *)a1);\n}\n"
        },
        {
            "funcName": "function_402af0",
            "funcStartAddr": "402af0",
            "funcEndAddr": "402b23",
            "decompiledFuncCode": "int64_t function_402af0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x402af0\n    function_402980(a1, a2, \"'-+ 0\", \"ld\");\n    return __printf_chk(1, (char *)a1);\n}\n"
        },
        {
            "funcName": "function_402b30",
            "funcStartAddr": "402b30",
            "funcEndAddr": "4037af",
            "decompiledFuncCode": "int64_t function_402b30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a3 + 0xffffffad; // 0x402b31\n    g71 = v1 & 0xffffffff;\n    switch ((int32_t)v1) {\n        case 0: {\n            int64_t v2 = *(int64_t *)(a6 + 72); // 0x402b50\n            if (v2 != 0) {\n                // 0x402b5d\n                function_402ab0(a1, a2, v2);\n                // 0x402b68\n                return 0;\n            }\n          lab_0x402b59:\n            // 0x402b5d\n            function_402ab0(a1, a2, *(int64_t *)(a6 + 8));\n            // 0x402b68\n            return 0;\n        }\n        case 1: {\n            // 0x402b88\n            if (a6 == 0x28cd3d45) {\n                // 0x402c40\n                function_402a70(a1, a2, (char *)(int64_t)\"cramfs\");\n                // 0x402b68\n                return 0;\n            }\n            int64_t v3; // 0x402b30\n            if (a6 > 0x28cd3d45) {\n                // 0x402b9e\n                if (a6 == 0x65735543) {\n                    // 0x402c40\n                    function_402a70(a1, a2, (char *)(int64_t)\"fusectl\");\n                    // 0x402b68\n                    return 0;\n                }\n                if (a6 > 0x65735543) {\n                    // 0x402bb1\n                    if (a6 == 0x858458f6) {\n                        // 0x402c40\n                        function_402a70(a1, a2, (char *)(int64_t)\"ramfs\");\n                        // 0x402b68\n                        return 0;\n                    }\n                    if (a6 > 0x858458f6) {\n                        // 0x402bc5\n                        if (a6 == 0xc97e8168) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"logfs\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > 0xc97e8168) {\n                            // 0x402bd9\n                            if (a6 == 0xf97cff8c) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"selinux\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0xf97cff8c) {\n                                // 0x402ce0\n                                v3 = (int64_t)\"smb2\";\n                                switch (a6) {\n                                    case 0xfe534d42: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0xff534d42: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"cifs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402d07\n                                        if (a6 == 0xf995e849) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"hpfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                      lab_0x402c1d:\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x402bed\n                                v3 = (int64_t)\"efivarfs\";\n                                switch (a6) {\n                                    case 0xde5e81e4: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0xf2f52010: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"f2fs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    case 0xcafe4a11: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"bpf_fs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x402d48\n                            if (a6 == 0xaad7aaea) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"panfs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0xaad7aaea) {\n                                // 0x402da0\n                                v3 = (int64_t)\"vmhgfs\";\n                                switch (a6) {\n                                    case 0xbacbacbc: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0xbeefdead: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"snfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402dc7\n                                        if (a6 == 0xabba1974) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"xenfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x402d59\n                                v3 = (int64_t)\"hugetlbfs\";\n                                switch (a6) {\n                                    case 0x958458f6: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0xa501fcf5: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"vxfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402d81\n                                        if (a6 == 0x9123683e) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"btrfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // 0x4031f0\n                        if (a6 == 0x73636673) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"securityfs\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > 0x73636673) {\n                            // 0x403203\n                            if (a6 == 0x7461636f) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"ocfs2\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x7461636f) {\n                                // 0x403250\n                                v3 = (int64_t)\"overlayfs\";\n                                switch (a6) {\n                                    case 0x794c7630: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x7c7c6673: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"prl_fs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403274\n                                        if (a6 == 0x74726163) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"tracefs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x403212\n                                v3 = (int64_t)\"btrfs_test\";\n                                switch (a6) {\n                                    case 0x73727279: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x73757245: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"coda\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403236\n                                        if (a6 == 0x73717368) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"squashfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x403290\n                            if (a6 == 0x68191122) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"qnx6\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x68191122) {\n                                // 0x4032a3\n                                v3 = (int64_t)\"nfsd\";\n                                switch (a6) {\n                                    case 0x6e667364: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x6e736673: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"nsfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x4032c7\n                                        if (a6 == 0x6b414653) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"k-afs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x403520\n                                v3 = (int64_t)\"fuseblk\";\n                                switch (a6) {\n                                    case 0x65735546: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x67596969: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"rpc_pipefs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // 0x4030a0\n                    if (a6 == 0x534f434b) {\n                        // 0x402c40\n                        function_402a70(a1, a2, (char *)(int64_t)\"sockfs\");\n                        // 0x402b68\n                        return 0;\n                    }\n                    if (a6 > 0x534f434b) {\n                        // 0x403110\n                        if (a6 == 0x6165676c) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"pstorefs\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > 0x6165676c) {\n                            // 0x403123\n                            if (a6 == 0x62656572) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"sysfs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x62656572) {\n                                // 0x403170\n                                v3 = (int64_t)\"debugfs\";\n                                switch (a6) {\n                                    case 0x64626720: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x64646178: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"daxfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403194\n                                        if (a6 == 0x63677270) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"cgroup2fs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x403132\n                                v3 = (int64_t)\"bdevfs\";\n                                switch (a6) {\n                                    case 0x62646576: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x62656570: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"configfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403156\n                                        if (a6 == 0x61756673) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"aufs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x403330\n                            if (a6 == 0x58295829) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"zsmallocfs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x58295829) {\n                                // 0x403343\n                                v3 = (int64_t)\"aafs\";\n                                switch (a6) {\n                                    case 0x5a3c69f0: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x61636673: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"acfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403367\n                                        if (a6 == 0x58465342) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"xfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x4035e0\n                                v3 = (int64_t)\"ufs\";\n                                switch (a6) {\n                                    case 0x54190100: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x565a4653: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"vzfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // 0x4030af\n                        if (a6 == 0x453dcd28) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"cramfs-wend\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > 0x453dcd28) {\n                            // 0x4030c2\n                            if (a6 == 0x5346314d) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"m1fs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x5346314d) {\n                                // 0x4031b0\n                                v3 = (int64_t)\"wslfs\";\n                                switch (a6) {\n                                    case 0x53464846: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x5346544e: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"ntfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x4031d4\n                                        if (a6 == 0x5346414f) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"afs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x4030d5\n                                v3 = (int64_t)\"pipefs\";\n                                switch (a6) {\n                                    case 0x50495045: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x52654973: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"reiserfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x4030f9\n                                        if (a6 == 0x47504653) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"gpfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x4032e0\n                            if (a6 == 0x3153464a) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"jfs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x3153464a) {\n                                // 0x4032f3\n                                v3 = (int64_t)\"binfmt_misc\";\n                                switch (a6) {\n                                    case 0x42494e4d: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x43415d53: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"smackfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403317\n                                        if (a6 == 0x42465331) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"befs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x4034f0\n                                v3 = (int64_t)\"inotifyfs\";\n                                switch (a6) {\n                                    case 0x2bad1dea: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x2fc12fc1: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"zfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x402de0\n                if (a6 == 0xadf5) {\n                    // 0x402c40\n                    function_402a70(a1, a2, (char *)(int64_t)\"adfs\");\n                    // 0x402b68\n                    return 0;\n                }\n                if (a6 > 0xadf5) {\n                    // 0x402df3\n                    if (a6 == 0x12ff7b5) {\n                        // 0x402c40\n                        function_402a70(a1, a2, (char *)(int64_t)\"sysv4\");\n                        // 0x402b68\n                        return 0;\n                    }\n                    if (a6 > 0x12ff7b5) {\n                        // 0x402e68\n                        if (a6 == 0xbd00bd0) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"lustre\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > 0xbd00bd0) {\n                            // 0x402e7b\n                            if (a6 == 0x19800202) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"mqueue\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x19800202) {\n                                // 0x402ec8\n                                v3 = (int64_t)\"bfs\";\n                                switch (a6) {\n                                    case 0x1badface: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x24051905: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"ubifs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402eec\n                                        if (a6 == 0x19830326) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"fhgfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x402e8a\n                                v3 = (int64_t)\"balloon-kvm-fs\";\n                                switch (a6) {\n                                    case 0x13661366: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x15013346: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"udf\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402eae\n                                        if (a6 == 0x11307854) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"inodefs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x403470\n                            if (a6 == 0x13111a8) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"ibrix\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x13111a8) {\n                                // 0x40347f\n                                v3 = (int64_t)\"anon-inode FS\";\n                                switch (a6) {\n                                    case 0x9041934: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0xbad1dea: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"futexfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x4034a3\n                                        if (a6 == 0x7655821) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"rdt\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x4034c0\n                                v3 = (int64_t)\"sysv2\";\n                                switch (a6) {\n                                    case 0x12ff7b6: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x12ff7b7: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"coh\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // 0x402e02\n                        if (a6 == (int64_t)&g17) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"efs\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > (int64_t)&g17) {\n                            // 0x402e15\n                            if (a6 == 0x1021997) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"v9fs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x1021997) {\n                                // 0x402f08\n                                v3 = (int64_t)\"xia\";\n                                switch (a6) {\n                                    case 0x12fd16d: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x12ff7b4: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"xenix\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402f2c\n                                        if (a6 == 0x1161970) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"gfs/gfs2\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x402e28\n                                v3 = (int64_t)\"ceph\";\n                                switch (a6) {\n                                    case 0xc36400: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x1021994: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"tmpfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402e4c\n                                        if (a6 == 0xc0ffee) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"hostfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x403420\n                            if (a6 == 0xef53) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"ext2/ext3\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0xef53) {\n                                // 0x403433\n                                v3 = (int64_t)\"ufs\";\n                                switch (a6) {\n                                    case 0x11954: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x27e0eb: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"cgroupfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403457\n                                        if (a6 == 0xf15f) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"ecryptfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x403550\n                                v3 = (int64_t)\"affs\";\n                                switch (a6) {\n                                    case 0xadff: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0xef51: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"ext2\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // 0x402f48\n                    if (a6 == 0x4244) {\n                        // 0x402c40\n                        function_402a70(a1, a2, (char *)(int64_t)\"hfs\");\n                        // 0x402b68\n                        return 0;\n                    }\n                    if (a6 > 0x4244) {\n                        // 0x402fc0\n                        if (a6 == 0x5df5) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"exofs\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > 0x5df5) {\n                            // 0x402fd3\n                            if (a6 == 0x9660) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"isofs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x9660) {\n                                // 0x403020\n                                v3 = (int64_t)\"openprom\";\n                                switch (a6) {\n                                    case 0x9fa1: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x9fa2: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"usbdevfs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403044\n                                        if (a6 == 0x9fa0) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"proc\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x402fe2\n                                v3 = (int64_t)\"romfs\";\n                                switch (a6) {\n                                    case 0x7275: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x72b6: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"jffs2\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403006\n                                        if (a6 == 0x6969) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"nfs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x4033d0\n                            if (a6 == 0x4d44) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"msdos\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x4d44) {\n                                // 0x4033e3\n                                v3 = (int64_t)\"smb\";\n                                switch (a6) {\n                                    case 0x517b: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x564c: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"novell\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403407\n                                        if (a6 == 0x4d5a) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"minix3\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x403580\n                                v3 = (int64_t)\"hfs+\";\n                                switch (a6) {\n                                    case 0x482b: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x4858: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"hfsx\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        // 0x402f57\n                        if (a6 == 0x138f) {\n                            // 0x402c40\n                            function_402a70(a1, a2, (char *)(int64_t)\"minix (30 char.)\");\n                            // 0x402b68\n                            return 0;\n                        }\n                        if (a6 > 0x138f) {\n                            // 0x402f6a\n                            if (a6 == 0x3434) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"nilfs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 0x3434) {\n                                // 0x403060\n                                v3 = (int64_t)\"isofs\";\n                                switch (a6) {\n                                    case 0x4004: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x4006: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"fat\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x403084\n                                        if (a6 == 0x4000) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"isofs\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x402f7d\n                                v3 = (int64_t)\"minix v2\";\n                                switch (a6) {\n                                    case 0x2468: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x2478: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"minix v2 (30 char.)\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x402fa1\n                                        if (a6 == 0x1cd1) {\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)(int64_t)\"devpts\");\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x403380\n                            if (a6 == 1984) {\n                                // 0x402c40\n                                function_402a70(a1, a2, (char *)(int64_t)\"jffs\");\n                                // 0x402b68\n                                return 0;\n                            }\n                            if (a6 > 1984) {\n                                // 0x403393\n                                v3 = (int64_t)\"ext\";\n                                switch (a6) {\n                                    case 0x137d: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 0x137f: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"minix\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        // 0x4033b7\n                                        v3 = (int64_t)\"devfs\";\n                                        if (a6 == 0x1373) {\n                                          lab_0x402c40:\n                                            // 0x402c40\n                                            function_402a70(a1, a2, (char *)v3);\n                                            // 0x402b68\n                                            return 0;\n                                        }\n                                        // 0x402c1d\n                                        __sprintf_chk((char *)&g44, 1, 29, \"UNKNOWN (0x%lx)\", (int32_t)a6);\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)&g44);\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                }\n                            } else {\n                                // 0x4035b0\n                                v3 = (int64_t)\"qnx4\";\n                                switch (a6) {\n                                    case 47: {\n                                        goto lab_0x402c40;\n                                    }\n                                    case 391: {\n                                        // 0x402c40\n                                        function_402a70(a1, a2, (char *)(int64_t)\"autofs\");\n                                        // 0x402b68\n                                        return 0;\n                                    }\n                                    default: {\n                                        goto lab_0x402c1d;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case 14: {\n            // 0x402c50\n            function_402af0(a1, a2, *(int64_t *)(a6 + 32));\n            // 0x402b68\n            return 0;\n        }\n        case 15: {\n            // 0x402c60\n            function_402af0(a1, a2, *(int64_t *)(a6 + 16));\n            // 0x402b68\n            return 0;\n        }\n        case 16: {\n            // 0x402b5d\n            function_402ab0(a1, a2, *(int64_t *)(a6 + 40));\n            // 0x402b68\n            return 0;\n        }\n        case 17: {\n            // 0x402cd0\n            function_402af0(a1, a2, *(int64_t *)(a6 + 48));\n            // 0x402b68\n            return 0;\n        }\n        case 19: {\n            // 0x402c70\n            function_402af0(a1, a2, *(int64_t *)(a6 + 24));\n            // 0x402b68\n            return 0;\n        }\n        case 22: {\n            uint32_t v4 = *(int32_t *)(a6 + 56); // 0x402c80\n            uint32_t v5 = *(int32_t *)(a6 + 60); // 0x402c84\n            function_402a30(a1, a2, 0x100000000 * (int64_t)v4 | (int64_t)v5);\n            // 0x402b68\n            return 0;\n        }\n        case 25: {\n            // 0x402ca0\n            function_402ab0(a1, a2, *(int64_t *)(a6 + 64));\n            // 0x402b68\n            return 0;\n        }\n        case 27: {\n            // 0x402cb0\n            function_402a70(a1, a2, (char *)a5);\n            // 0x402b68\n            return 0;\n        }\n        case 32: {\n            goto lab_0x402b59;\n        }\n        case 33: {\n            // 0x402b78\n            function_402a30(a1, a2, a6);\n            // 0x402b68\n            return 0;\n        }\n        default: {\n            int64_t v6 = (int64_t)g35; // 0x402d20\n            int64_t * v7 = (int64_t *)(v6 + 40); // 0x402d27\n            uint64_t v8 = *v7; // 0x402d27\n            if (v8 >= *(int64_t *)(v6 + 48)) {\n                // 0x40370a\n                __overflow(g35, 63);\n            } else {\n                // 0x402d35\n                *v7 = v8 + 1;\n                *(char *)v8 = 63;\n            }\n            // 0x402b68\n            return 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4037b0",
            "funcStartAddr": "4037b0",
            "funcEndAddr": "403d69",
            "decompiledFuncCode": "int64_t function_4037b0(int64_t str, int64_t * a2, int64_t a3, int64_t a4, int64_t * a5) {\n    int64_t v1 = (int64_t)strlen((char *)str) + 3; // 0x4037d9\n    int64_t v2 = function_409560(v1); // 0x4037dd\n    char v3 = v1;\n    int64_t * v4 = (int64_t *)v2;\n    char result = 0; // 0x4037f1\n    if (v3 == 0) {\n      lab_0x4038c5_2:\n        // 0x4038c5\n        free(v4);\n        fputs_unlocked(g23, g35);\n        return result;\n    }\n    char v5 = 0;\n    char v6 = v3; // 0x403826\n    int64_t v7 = str; // 0x4037b0\n    int64_t v8; // 0x4037b0\n    int64_t v9; // 0x4037b0\n    int64_t v10; // 0x4037b0\n    int64_t v11; // 0x4037b0\n    int64_t v12; // 0x4037b0\n    int64_t v13; // 0x4037b0\n    char v14; // 0x4037b0\n    char v15; // 0x4037b0\n    char v16; // 0x4037b0\n    int64_t v17; // 0x4037b0\n    char v18; // 0x403850\n    int64_t v19; // 0x4039ed\n    int64_t v20; // 0x4039f8\n    int64_t str2; // 0x403833\n    while (true) {\n      lab_0x403833:\n        // 0x403833\n        v16 = v5;\n        v11 = v7;\n        unsigned char v21 = v6;\n        str2 = v11 + 1;\n        while (v21 != 37) {\n            if (v21 != 92) {\n                int64_t v22 = (int64_t)g35; // 0x403800\n                int64_t * v23 = (int64_t *)(v22 + 40); // 0x403807\n                uint64_t v24 = *v23; // 0x403807\n                if (v24 >= *(int64_t *)(v22 + 48)) {\n                    // 0x403ac8\n                    __overflow(g35, (int32_t)v21);\n                    v15 = v16;\n                    v13 = v11;\n                    v7 = str2;\n                    goto lab_0x403826;\n                } else {\n                    // 0x403815\n                    *v23 = v24 + 1;\n                    *(char *)v24 = v21;\n                    v15 = v16;\n                    v13 = v11;\n                    v7 = str2;\n                    goto lab_0x403826;\n                }\n            }\n            // 0x403847\n            if (g47 != 0) {\n                // 0x403850\n                v18 = *(char *)str2;\n                if ((v18 & -8) == 48) {\n                    int64_t v25 = v11 + 2; // 0x403a60\n                    char v26 = *(char *)v25; // 0x403a60\n                    int64_t v27 = (int64_t)v18 + 0xffffffd0 & 0xffffffff; // 0x403a69\n                    v8 = v27;\n                    v12 = v25;\n                    if ((v26 & -8) == 48) {\n                        int64_t v28 = 8 * v27 + 0xffffffd0 + (int64_t)v26 & 0xffffffff; // 0x403a79\n                        int64_t v29 = v11 + 3; // 0x403a7e\n                        char v30 = *(char *)v29; // 0x403a7e\n                        v8 = v28;\n                        v12 = v29;\n                        if ((v30 & -8) == 48) {\n                            // 0x403a8f\n                            v8 = 8 * v28 + 0xffffffd0 + (int64_t)v30 & 0xffffffff;\n                            v12 = v11 + 4;\n                            goto lab_0x403a98;\n                        } else {\n                            goto lab_0x403a98;\n                        }\n                    } else {\n                        goto lab_0x403a98;\n                    }\n                }\n                if (v18 == 120) {\n                    int16_t ** v31 = __ctype_b_loc(); // 0x4039e8\n                    v19 = v11 + 2;\n                    unsigned char v32 = *(char *)v19; // 0x4039ed\n                    v20 = (int64_t)*v31 + 1;\n                    v9 = 120;\n                    if ((*(char *)(v20 + 2 * (int64_t)v32) & 16) != 0) {\n                        int64_t v33 = v32; // 0x403ae3\n                        if (v32 < 103) {\n                            // 0x403b85\n                            v17 = v33 + 0xffffffa9;\n                            goto lab_0x403b00;\n                        } else {\n                            // 0x403af0\n                            v17 = (v32 < 71 ? 0xffffffc9 : 0xffffffd0) + v33;\n                            goto lab_0x403b00;\n                        }\n                    } else {\n                        goto lab_0x403a09;\n                    }\n                }\n                if (v18 != 0) {\n                    int64_t v34 = v18; // 0x4039d3\n                    g66 = v18 - 34;\n                    v9 = v34;\n                    v14 = v18;\n                    v10 = v34;\n                    switch (v18) {\n                        case 34: {\n                            goto lab_0x403a30;\n                        }\n                        case 92: {\n                            goto lab_0x403a30;\n                        }\n                        case 97: {\n                            // 0x403b8d\n                            v14 = 7;\n                            v10 = 7;\n                            goto lab_0x403a30;\n                        }\n                        case 98: {\n                            // 0x403b9d\n                            v14 = 8;\n                            v10 = 8;\n                            goto lab_0x403a30;\n                        }\n                        case 101: {\n                            // 0x403bad\n                            v14 = 27;\n                            v10 = 27;\n                            goto lab_0x403a30;\n                        }\n                        case 102: {\n                            // 0x403bbd\n                            v14 = 12;\n                            v10 = 12;\n                            goto lab_0x403a30;\n                        }\n                        case 110: {\n                            // 0x403bcd\n                            v14 = 10;\n                            v10 = 10;\n                            goto lab_0x403a30;\n                        }\n                        case 114: {\n                            // 0x403bdd\n                            v14 = 13;\n                            v10 = 13;\n                            goto lab_0x403a30;\n                        }\n                        case 116: {\n                            // 0x403bed\n                            v14 = 9;\n                            v10 = 9;\n                            goto lab_0x403a30;\n                        }\n                        case 118: {\n                            // 0x403bfd\n                            v14 = 11;\n                            v10 = 11;\n                            goto lab_0x403a30;\n                        }\n                        default: {\n                            goto lab_0x403a09;\n                        }\n                    }\n                }\n                // 0x403873\n                error(0, (int32_t)\"warning: backslash at end of format\" ^ (int32_t)\"warning: backslash at end of format\", dcgettext(NULL, \"warning: backslash at end of format\", 5));\n            }\n            int64_t v35 = (int64_t)g35; // 0x403892\n            int64_t * v36 = (int64_t *)(v35 + 40); // 0x403899\n            uint64_t v37 = *v36; // 0x403899\n            if (v37 >= *(int64_t *)(v35 + 48)) {\n                // 0x403b70\n                __overflow(g35, 92);\n                v15 = v16;\n                v13 = v11;\n                v7 = str2;\n                goto lab_0x403826;\n            }\n            // 0x4038a7\n            *v36 = v37 + 1;\n            *(char *)v37 = 92;\n            char v38 = *(char *)str2; // 0x4038b8\n            result = v16;\n            if (v38 == 0) {\n                goto lab_0x4038c5_2;\n            }\n            v11 = str2;\n            v21 = v38;\n            str2 = v11 + 1;\n        }\n        int64_t str3 = str2 + (int64_t)strspn((char *)str2, \"'-+ #0I\"); // 0x40390a\n        int64_t v39 = str3 + (int64_t)strspn((char *)str3, \"0123456789\"); // 0x403917\n        char v40 = *(char *)v39; // 0x40391a\n        int64_t v41 = v39; // 0x403923\n        char v42 = v40; // 0x403923\n        if (v40 == 46) {\n            int64_t str4 = v39 + 1; // 0x403925\n            v41 = str4 + (int64_t)strspn((char *)str4, \"0123456789\");\n            v42 = *(char *)v41;\n        }\n        int64_t v43 = v41;\n        int64_t v44 = v43 - str2; // 0x403946\n        memcpy(v4, (int64_t *)v11, (int32_t)(v44 + 1));\n        int64_t v45 = v43; // 0x4037b0\n        switch (v42) {\n            case 0: {\n                // 0x403990\n                v45 = v43 - 1;\n            }\n            case 37: {\n                if (v44 != 0) {\n                    // break -> 0x403c5f\n                    break;\n                }\n                int64_t v46 = v45;\n                int64_t v47 = (int64_t)g35; // 0x40399d\n                int64_t v48 = v46 + 1; // 0x4039a4\n                int64_t * v49 = (int64_t *)(v47 + 40); // 0x4039a8\n                uint64_t v50 = *v49; // 0x4039a8\n                if (v50 >= *(int64_t *)(v47 + 48)) {\n                    // 0x403b60\n                    __overflow(g35, 37);\n                    v15 = v16;\n                    v13 = v46;\n                    v7 = v48;\n                } else {\n                    // 0x4039b6\n                    *v49 = v50 + 1;\n                    *(char *)v50 = 37;\n                    v15 = v16;\n                    v13 = v46;\n                    v7 = v48;\n                }\n                // break -> 0x403826\n                break;\n            }\n            default: {\n                // 0x403963\n                v15 = v16 | (char)a4;\n                v13 = v43;\n                v7 = v43 + 1;\n                // break -> 0x403826\n                break;\n            }\n        }\n        goto lab_0x403826;\n    }\n    int64_t v51; // 0x403ca9\n    if (v51 == 0) {\n        // branch -> 0x403cbe\n    }\n    int64_t v52; // 0x403ccb\n    if (v52 == 0) {\n        // 0x403d08\n    }\n  lab_0x403826:\n    // 0x403826\n    v5 = v15;\n    v6 = *(char *)(v13 + 1);\n    result = v5;\n    if (v6 == 0) {\n        goto lab_0x4038c5_2;\n    }\n    goto lab_0x403833;\n  lab_0x403a98:;\n    int64_t v53 = v8;\n    int64_t v54 = (int64_t)g35; // 0x403a98\n    int64_t * v55 = (int64_t *)(v54 + 40); // 0x403a9f\n    uint64_t v56 = *v55; // 0x403a9f\n    if (v56 >= *(int64_t *)(v54 + 48)) {\n        // 0x403c32\n        __overflow(g35, (int32_t)v53 % 256);\n        goto lab_0x403ab8;\n    } else {\n        // 0x403aad\n        *v55 = v56 + 1;\n        *(char *)v56 = (char)v53;\n        goto lab_0x403ab8;\n    }\n  lab_0x403ab8:\n    // 0x403ab8\n    v15 = v16;\n    v13 = v12 - 1;\n    v7 = v12;\n    goto lab_0x403826;\n  lab_0x403a09:\n    // 0x403a09\n    error(0, (int32_t)\"warning: unrecognized escape '\\\\%c'\" ^ (int32_t)\"warning: unrecognized escape '\\\\%c'\", dcgettext(NULL, \"warning: unrecognized escape '\\\\%c'\", 5));\n    v14 = v18;\n    v10 = v9;\n    goto lab_0x403a30;\n  lab_0x403a30:;\n    int64_t v57 = (int64_t)g35; // 0x403a30\n    int64_t v58 = v11 + 2; // 0x403a37\n    int64_t * v59 = (int64_t *)(v57 + 40); // 0x403a3b\n    uint64_t v60 = *v59; // 0x403a3b\n    if (v60 >= *(int64_t *)(v57 + 48)) {\n        // 0x403c21\n        __overflow(g35, (int32_t)v10 % 256);\n        v15 = v16;\n        v13 = str2;\n        v7 = v58;\n        goto lab_0x403826;\n    } else {\n        // 0x403a49\n        *v59 = v60 + 1;\n        *(char *)v60 = v14;\n        v15 = v16;\n        v13 = str2;\n        v7 = v58;\n        goto lab_0x403826;\n    }\n  lab_0x403b00:;\n    int64_t v61 = v17 & 0xffffffff;\n    int64_t v62 = v11 + 3; // 0x403b00\n    unsigned char v63 = *(char *)v62; // 0x403b00\n    int64_t v64 = v61; // 0x403b11\n    int64_t v65 = v19; // 0x403b11\n    int64_t v66; // 0x4037b0\n    if ((*(char *)(2 * (int64_t)v63 + v20) & 16) == 0) {\n        goto lab_0x403b30;\n    } else {\n        int64_t v67 = v63; // 0x403b13\n        if (v63 < 103) {\n            // 0x403b2b\n            v66 = v67 + 0xffffffa9;\n            goto lab_0x403b2e;\n        } else {\n            // 0x403c0d\n            v66 = (v63 < 71 ? 0xffffffc9 : 0xffffffd0) + v67;\n            goto lab_0x403b2e;\n        }\n    }\n  lab_0x403b30:;\n    int64_t v68 = v65;\n    int64_t v69 = v64;\n    int64_t v70 = (int64_t)g35; // 0x403b30\n    int64_t v71 = v68 + 1; // 0x403b37\n    int64_t * v72 = (int64_t *)(v70 + 40); // 0x403b3b\n    uint64_t v73 = *v72; // 0x403b3b\n    if (v73 >= *(int64_t *)(v70 + 48)) {\n        // 0x403c52\n        __overflow(g35, (int32_t)v69 % 256);\n        v15 = v16;\n        v13 = v68;\n        v7 = v71;\n        goto lab_0x403826;\n    } else {\n        // 0x403b49\n        *v72 = v73 + 1;\n        *(char *)v73 = (char)v69;\n        v15 = v16;\n        v13 = v68;\n        v7 = v71;\n        goto lab_0x403826;\n    }\n  lab_0x403b2e:\n    // 0x403b2e\n    v64 = v66 + 16 * v61 & 0xffffffff;\n    v65 = v62;\n    goto lab_0x403b30;\n}\n"
        },
        {
            "funcName": "function_403d70",
            "funcStartAddr": "403d70",
            "funcEndAddr": "403e7d",
            "decompiledFuncCode": "int64_t function_403d70(int64_t a1) {\n    // 0x403d70\n    if (g41 == 0) {\n        int64_t v1 = function_40b0c0(0); // 0x403e32\n        g40 = v1;\n        if (v1 == 0) {\n            // 0x403e4f\n            error(0, *__errno_location(), \"%s\", dcgettext(NULL, \"cannot read table of mounted file systems\", 5));\n        }\n        // 0x403e43\n        g41 = 1;\n    }\n    char * str = (char *)a1; // 0x403d96\n    int64_t v2; // bp-312, 0x403d70\n    if (__xstat(1, str, (struct stat *)&v2) != 0 || g40 == 0) {\n        // 0x403e1a\n        return 0;\n    }\n    // 0x403db9\n    int64_t v3; // bp-168, 0x403d70\n    int64_t result; // 0x403d70\n    int64_t * v4; // 0x403d70\n    char * v5; // 0x403dc2\n    int64_t v6; // 0x403d70\n    int32_t v7; // 0x403d70\n    if (*(char *)(g40 + 40) % 2 != 0) {\n        // 0x403dbf\n        v4 = (int64_t *)g40;\n        v5 = (char *)*v4;\n        if (*v5 == 47) {\n            // 0x403dc8\n            if (strcmp((char *)*(int64_t *)(g40 + 8), str) == 0) {\n                // 0x403dd8\n                if (v6 == (int64_t)v7 == __xstat(1, v5, (struct stat *)&v3) == 0) {\n                    // 0x403e00\n                    if (v2 == v3) {\n                        // 0x403e0e\n                        result = *v4;\n                        return result;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v8 = *(int64_t *)(g40 + 48); // 0x403db0\n    result = 0;\n    while (v8 != 0) {\n        int64_t v9 = v8;\n        if (*(char *)(v9 + 40) % 2 != 0) {\n            // 0x403dbf\n            v4 = (int64_t *)v9;\n            v5 = (char *)*v4;\n            if (*v5 == 47) {\n                // 0x403dc8\n                if (strcmp((char *)*(int64_t *)(v9 + 8), str) == 0) {\n                    // 0x403dd8\n                    if (v6 == (int64_t)v7 == __xstat(1, v5, (struct stat *)&v3) == 0) {\n                        // 0x403e00\n                        if (v2 == v3) {\n                            // 0x403e0e\n                            result = *v4;\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n        // 0x403db0\n        v8 = *(int64_t *)(v9 + 48);\n        result = 0;\n    }\n  lab_0x403e1a:\n    // 0x403e1a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e80",
            "funcStartAddr": "403e80",
            "funcEndAddr": "403f85",
            "decompiledFuncCode": "int64_t function_403e80(int64_t a1, int64_t a2, int32_t a3) {\n    // 0x403e80\n    if ((char)a1 != 0) {\n        if ((char)a2 != 0) {\n            // 0x403e8e\n            return function_409790(\"%n %i %l %t %s %S %b %f %a %c %d\\n\");\n        }\n        // 0x403e9c\n        return function_409790(dcgettext(NULL, \"  File: \\\"%n\\\"\\n    ID: %-8i Namelen: %-7l Type: %T\\nBlock size: %-10s Fundamental block size: %S\\nBlocks: Total: %-10b Free: %-10f Available: %a\\nInodes: Total: %-10c Free: %d\\n\", 5));\n    }\n    if ((char)a2 != 0) {\n        // 0x403ebe\n        return function_409790(\"%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o\\n\");\n    }\n    int64_t v1 = function_409790(dcgettext(NULL, \"  File: %N\\n  Size: %-10s\\tBlocks: %-10b IO Block: %-6o %F\\n\", 5)); // 0x403ee2\n    char * v2 = (char)a3 != 0 ? \"Device: %Dh/%dd\\tInode: %-10i  Links: %-5h Device type: %t,%T\\n\" : \"Device: %Dh/%dd\\tInode: %-10i  Links: %h\\n\"; // 0x403eff\n    int64_t v3; // 0x403e80\n    int64_t v4 = function_409820(\"%s%s\", v1, (int64_t)dcgettext(NULL, v2, 5), v3, v3, v3); // 0x403f11\n    free((int64_t *)v1);\n    int64_t v5 = function_409820(\"%s%s\", v4, (int64_t)dcgettext(NULL, \"Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)\\n\", 5), v3, v3, v3); // 0x403f3f\n    free((int64_t *)v4);\n    int64_t result = function_409820(\"%s%s\", v5, (int64_t)dcgettext(NULL, \"Access: %x\\nModify: %y\\nChange: %z\\n Birth: %w\\n\", 5), v3, v3, v3); // 0x403f6d\n    free((int64_t *)v5);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f90",
            "funcStartAddr": "403f90",
            "funcEndAddr": "4042d8",
            "decompiledFuncCode": "int64_t function_403f90(int64_t a1, int64_t a2, int64_t a3, uint64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = function_40aed0(a1, 46, a2); // 0x403fb7\n    int32_t v2 = 0; // 0x403fbf\n    int64_t v3 = 0; // 0x403fbf\n    int64_t v4 = a2; // 0x403fbf\n    int64_t v5; // 0x403f90\n    int64_t v6; // 0x403f90\n    int64_t v7; // 0x403f90\n    int64_t v8; // 0x403f90\n    int64_t v9; // 0x403f90\n    int64_t v10; // 0x403f90\n    int64_t v11; // 0x403f90\n    int32_t v12; // 0x403f90\n    int64_t v13; // 0x403f90\n    int32_t v14; // 0x403f90\n    int32_t v15; // 0x403f90\n    if (v1 == 0) {\n        goto lab_0x404120;\n    } else {\n        // 0x403fc5\n        *(char *)(a2 + a1) = 0;\n        char * str = (char *)(v1 + 1); // 0x403fd0\n        char v16 = *str; // 0x403fd0\n        int64_t v17 = v1 - a1; // 0x403fd4\n        if (v16 == 57 || (int32_t)v16 < 57) {\n            int64_t str_as_l = strtol(str, NULL, 10); // 0x4040d8\n            int64_t v18 = 0x100000000 * v17 >> 32; // 0x4040e2\n            int64_t v19 = str_as_l - 0x7fffffff; // 0x4040e7\n            int64_t v20 = v19 < 0 == (0x7ffffffe - str_as_l & str_as_l) < 0 == (v19 != 0) ? 0x7fffffff : str_as_l; // 0x4040ed\n            int64_t v21 = v20 & 0xffffffff; // 0x4040f3\n            v2 = 0;\n            v3 = v21;\n            v4 = v18;\n            if ((int32_t)v20 == 0) {\n                goto lab_0x404120;\n            } else {\n                char v22 = *(char *)(v1 - 1); // 0x4040fb\n                v11 = v18;\n                v8 = v21;\n                v14 = 0;\n                v9 = v21;\n                v5 = v18;\n                if (v22 == 57 || (int32_t)v22 < 57) {\n                    goto lab_0x403ff9;\n                } else {\n                    goto lab_0x404117;\n                }\n            }\n        } else {\n            char v23 = *(char *)(v1 - 1); // 0x403fe3\n            v11 = v17;\n            v8 = 9;\n            v15 = 0;\n            v12 = 1;\n            v10 = 9;\n            v13 = 1;\n            v6 = v17;\n            v7 = a4;\n            if (v23 == 57 || (int32_t)v23 < 57) {\n                goto lab_0x403ff9;\n            } else {\n                goto lab_0x40414b;\n            }\n        }\n    }\n  lab_0x404120:;\n    int64_t v24 = 1;\n    int64_t v25 = (v3 & 0xffffffff) + 1; // 0x404133\n    int64_t v26 = 10 * v24; // 0x404136\n    int64_t v27 = v25; // 0x40413b\n    while ((int32_t)v25 != 9) {\n        // 0x404130\n        v24 = v26 & 0xfffffffe;\n        v25 = (v27 & 0xffffffff) + 1;\n        v26 = 10 * v24;\n        v27 = v25;\n    }\n    int64_t v28 = 0xa00000000 * v24 >> 32; // 0x404140\n    v15 = v2;\n    v12 = v26;\n    v10 = v3;\n    v13 = v28;\n    v6 = v4;\n    v7 = a4 / v28;\n    goto lab_0x40414b;\n  lab_0x40414b:;\n    int64_t v29 = a3; // 0x40414e\n    int64_t v30 = v7; // 0x40414e\n    int64_t v31; // 0x403f90\n    int64_t v32; // 0x403f90\n    if (a3 < 0 == (a4 != 0)) {\n        uint32_t v33 = 0x3b9aca00 / v12 - (int32_t)v7 + (int32_t)(a4 % v13 != 0); // 0x40420e\n        int64_t v34 = v33; // 0x40420e\n        int64_t v35 = (int64_t)(v33 != 0) + a3; // 0x404217\n        v29 = v35;\n        v30 = v34;\n        if (v35 != 0) {\n            goto lab_0x404159;\n        } else {\n            // 0x404225\n            function_402980(a1, v6, \"'-+ 0\", \".0f\");\n            __asm_movsd(-0x4030000000000000);\n            v31 = v34;\n            v32 = __printf_chk(1, (char *)a1);\n            goto lab_0x404169;\n        }\n    } else {\n        goto lab_0x404159;\n    }\n  lab_0x404159:\n    // 0x404159\n    v31 = v30;\n    v32 = function_402af0(a1, v6, v29);\n    goto lab_0x404169;\n  lab_0x403ff9:\n    // 0x403ff9\n    *(char *)v1 = 0;\n    int64_t v49 = v1 - 1; // 0x404000\n    char v50 = *(char *)(v1 - 2); // 0x404004\n    int64_t v51 = v49; // 0x40400f\n    while (v50 == 57 || (int32_t)v50 < 57) {\n        // 0x404000\n        v49 = v51 - 1;\n        v50 = *(char *)(v51 - 2);\n        v51 = v49;\n    }\n    char * str2 = (char *)v49; // 0x404020\n    int64_t str_as_l2 = strtol(str2, NULL, 10); // 0x404020\n    int64_t v52 = str_as_l2 - 0x7fffffff; // 0x40402f\n    uint64_t v53 = v52 < 0 == (0x7ffffffe - str_as_l2 & str_as_l2) < 0 == (v52 != 0) ? 0x7fffffff : str_as_l2; // 0x404035\n    int32_t v45 = v53; // 0x40403c\n    v14 = v45;\n    v9 = v8;\n    v5 = v11;\n    int64_t v47; // 0x403f90\n    int64_t v48; // 0x404079\n    int64_t v46; // 0x404290\n    if (v45 < 2) {\n        goto lab_0x404117;\n    } else {\n        uint64_t v54 = v49 + (int64_t)(*str2 == 48); // 0x404055\n        uint64_t v55 = (int64_t)g45; // 0x404058\n        int64_t v56 = v54 - a1; // 0x404062\n        v14 = v45;\n        v9 = v8;\n        v5 = v56;\n        if (v53 > v55) {\n            int64_t v57 = v53 - v55; // 0x40406e\n            v14 = v45;\n            v9 = v8;\n            v5 = v56;\n            if ((int32_t)v57 < 2) {\n                goto lab_0x404117;\n            } else {\n                // 0x404079\n                v48 = (v57 & 0xffffffff) - v8;\n                v14 = v45;\n                v9 = v8;\n                v5 = v56;\n                if ((int32_t)v48 < 2) {\n                    goto lab_0x404117;\n                } else {\n                    // 0x404084\n                    v47 = a1;\n                    v46 = 0;\n                    if (v54 <= a1) {\n                        goto lab_0x40429c;\n                    } else {\n                        char v58 = *(char *)a1; // 0x4040b3\n                        int64_t v59 = 1; // 0x4040b9\n                        int64_t v60 = a1; // 0x4040b9\n                        if (v58 != 45) {\n                            // 0x4040a0\n                            v59 = 0;\n                            *(char *)a1 = v58;\n                            v60 = a1 + 1;\n                        }\n                        int64_t v61 = v60;\n                        int64_t v62 = v59;\n                        int64_t v63 = a1 + 1; // 0x4040a6\n                        int64_t v64 = v63; // 0x4040ad\n                        while (v54 != v63) {\n                            int64_t v65 = v61;\n                            v58 = *(char *)v64;\n                            v59 = 1;\n                            v60 = v65;\n                            if (v58 != 45) {\n                                // 0x4040a0\n                                v59 = v62;\n                                *(char *)v65 = v58;\n                                v60 = v65 + 1;\n                            }\n                            // 0x4040a6\n                            v61 = v60;\n                            v62 = v59;\n                            v63 = v64 + 1;\n                            v64 = v63;\n                        }\n                        // 0x40428d\n                        v46 = v61 - a1;\n                        v14 = v45;\n                        v9 = v8;\n                        v5 = v46;\n                        v47 = v61;\n                        if ((char)v62 != 0) {\n                            goto lab_0x404117;\n                        } else {\n                            goto lab_0x40429c;\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x404117;\n        }\n    }\n  lab_0x404169:;\n    int64_t result = v32;\n    int32_t v36 = v10; // 0x404169\n    if (v36 == 0) {\n        // 0x4041cc\n        return result;\n    }\n    int32_t v37 = v36 - 9; // 0x40416d\n    uint64_t v38 = (int64_t)v15; // 0x40417a\n    int64_t v39 = v37 == 0 | v37 < 0 != (8 - v36 & v36) < 0 ? v10 & 0xffffffff : 9; // 0x40417e\n    uint64_t v40 = (int32_t)result < 0 ? 0 : result & 0xffffffff; // 0x404185\n    int64_t v41 = 0; // 0x40418d\n    if (v40 < v38) {\n        int64_t v42 = v38 - v40; // 0x404192\n        int32_t v43 = g45; // 0x404195\n        int64_t v44 = 0x100000000 * v42 >> 32 > (int64_t)v43 ? (int64_t)((int32_t)v42 - (int32_t)v39 - v43) : 0; // 0x4041a8\n        v41 = v44;\n    }\n    int64_t result2 = v10 - v39 & 0xffffffff; // 0x404181\n    __printf_chk(1, \"%s%.*d%-*.*d\", g46, v39, v31 & 0xffffffff, v41, result2, 0);\n    // 0x4041cc\n    return result2;\n  lab_0x404117:\n    // 0x404117\n    v2 = v14;\n    v3 = v9;\n    v4 = v5;\n    v15 = v14;\n    v12 = 1;\n    v10 = v9;\n    v13 = 1;\n    v6 = v5;\n    v7 = a4;\n    if ((int32_t)v9 > 8) {\n        goto lab_0x40414b;\n    } else {\n        goto lab_0x404120;\n    }\n  lab_0x40429c:\n    // 0x40429c\n    v14 = v45;\n    v9 = v8;\n    v5 = v46 + (int64_t)__sprintf_chk((char *)v47, 1, -1, \"%d\", v48 & 0xffffffff);\n    goto lab_0x404117;\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "404867",
            "decompiledFuncCode": "int64_t function_4042e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a3 + 0xffffffbf; // 0x4042e2\n    g72 = v1 & 0xffffffff;\n    int64_t v2 = (int64_t)\"-\"; // 0x4042fe\n    int64_t v3; // 0x4042e0\n    int64_t v4; // 0x4042e0\n    int64_t v5; // 0x4042e0\n    int64_t v6; // 0x4042e0\n    int64_t v7; // 0x4042e0\n    int64_t v8; // 0x4042e0\n    switch ((int32_t)v1) {\n        case 0: {\n            // 0x404730\n            function_4059b0(a6);\n            *(char *)&g43 = 0;\n            function_402a70(a1, a2, (char *)&g42);\n            // 0x404325\n            return 0;\n        }\n        case 1: {\n            // 0x404718\n            function_402ab0(a1, a2, 512);\n            // 0x404325\n            return 0;\n        }\n        case 2: {\n            int32_t * err_num = __errno_location(); // 0x4046a4\n            *err_num = 95;\n            function_408cc0(4, a5);\n            error(0, *err_num, dcgettext(NULL, \"failed to get security context of %s\", 5));\n            *(int16_t *)(a2 + a1) = 115;\n            __printf_chk(1, (char *)a1);\n            // 0x404325\n            return 1;\n        }\n        case 3: {\n            // 0x404690\n            function_402a30(a1, a2, a6);\n            // 0x404325\n            return 0;\n        }\n        case 5: {\n          lab_0x404680:\n            // 0x404315\n            function_402a70(a1, a2, (char *)function_405740(a6));\n            // 0x404325\n            return 0;\n        }\n        case 6: {\n            struct group * v9 = getgrgid(*(int32_t *)(a6 + 32)); // 0x404664\n            v4 = (int64_t)v9;\n            if (v9 == NULL) {\n                // 0x40435d\n                function_402a70(a1, a2, (char *)(int64_t)\"UNKNOWN\");\n                // 0x404325\n                return 0;\n            }\n            goto lab_0x4045a7;\n        }\n        case 13: {\n            int64_t v10 = function_4088a0(0); // 0x4045d5\n            function_402a70(a1, a2, (char *)function_408cc0(v10 & 0xffffffff, a5));\n            if ((*(int32_t *)(a6 + 24) & 0xf000) != 0xa000) {\n                // 0x404325\n                return 0;\n            }\n            int64_t v11 = function_405090(a5, *(int64_t *)(a6 + 48)); // 0x40461a\n            if (v11 == 0) {\n                // 0x404819\n                function_408cc0(4, a5);\n                error(0, *__errno_location(), dcgettext(NULL, \"cannot read symbolic link %s\", 5));\n                // 0x404325\n                return 1;\n            }\n            // 0x40462f\n            __printf_chk(1, \" -> \");\n            int64_t v12 = function_408cc0(function_4088a0(0) & 0xffffffff, v11); // 0x40464c\n            v5 = 0;\n            v3 = v11;\n            v7 = v12;\n            goto lab_0x404480;\n        }\n        case 19: {\n            uint64_t v13 = *(int64_t *)(a6 + 40); // 0x4045b0\n            v6 = v13 % 256;\n            v8 = v13 / 0x1000 & 0xfffffffffff00;\n            goto lab_0x4043a0;\n        }\n        case 20: {\n            struct passwd * v14 = getpwuid(*(int32_t *)(a6 + 28)); // 0x404594\n            v2 = (int64_t)\"UNKNOWN\";\n            v4 = (int64_t)v14;\n            if (v14 == NULL) {\n              lab_0x40435d:\n                // 0x40435d\n                function_402a70(a1, a2, (char *)v2);\n                // 0x404325\n                return 0;\n            }\n            goto lab_0x4045a7;\n        }\n        case 22: {\n            // 0x404580\n            function_403f90(a1, a2, 0, 0, a5, a6);\n            // 0x404325\n            return 0;\n        }\n        case 23: {\n            // 0x404568\n            function_403f90(a1, a2, *(int64_t *)(a6 + 72), *(int64_t *)(a6 + 80), a5, a6);\n            // 0x404325\n            return 0;\n        }\n        case 24: {\n            // 0x404550\n            function_403f90(a1, a2, *(int64_t *)(a6 + 88), *(int64_t *)(a6 + 96), a5, a6);\n            // 0x404325\n            return 0;\n        }\n        case 25: {\n            // 0x404538\n            function_403f90(a1, a2, *(int64_t *)(a6 + 104), *(int64_t *)(a6 + 112), a5, a6);\n            // 0x404325\n            return 0;\n        }\n        case 32: {\n            // 0x404500\n            function_402980(a1, a2, \"-#0\", \"lo\");\n            __printf_chk(1, (char *)a1);\n            // 0x404325\n            return 0;\n        }\n        case 33: {\n            // 0x4044f0\n            function_402ab0(a1, a2, *(int64_t *)(a6 + 64));\n            // 0x404325\n            return 0;\n        }\n        case 35: {\n            // 0x4044e0\n            function_402ab0(a1, a2, a6);\n            // 0x404325\n            return 0;\n        }\n        case 37: {\n            // 0x4044d0\n            function_402a30(a1, a2, (int64_t)*(int32_t *)(a6 + 24));\n            // 0x404325\n            return 0;\n        }\n        case 38: {\n            // 0x4044c0\n            function_402ab0(a1, a2, (int64_t)*(int32_t *)(a6 + 32));\n            // 0x404325\n            return 0;\n        }\n        case 39: {\n            // 0x4044b0\n            function_402ab0(a1, a2, *(int64_t *)(a6 + 16));\n            // 0x404325\n            return 0;\n        }\n        case 40: {\n            // 0x4044a0\n            function_402ab0(a1, a2, *(int64_t *)(a6 + 8));\n            // 0x404325\n            return 0;\n        }\n        case 44: {\n            // 0x404410\n            if (g48 != 0) {\n                goto lab_0x40442d;\n            } else {\n                // 0x404419\n                if ((*(int32_t *)(a6 + 24) & 0xf000) == 0xa000) {\n                    goto lab_0x404790;\n                } else {\n                    goto lab_0x40442d;\n                }\n            }\n        }\n        case 45: {\n            // 0x404400\n            function_402a70(a1, a2, (char *)a5);\n            // 0x404325\n            return 0;\n        }\n        case 46: {\n            int64_t v15 = *(int64_t *)(a6 + 56); // 0x4043da\n            function_402ab0(a1, a2, v15 < 0x2000000000000001 ? v15 : 512);\n            // 0x404325\n            return 0;\n        }\n        case 50: {\n            // 0x4043b8\n            function_402af0(a1, a2, *(int64_t *)(a6 + 48));\n            // 0x404325\n            return 0;\n        }\n        case 51: {\n            uint64_t v16 = *(int64_t *)(a6 + 40); // 0x404380\n            v6 = v16 / 256 % 0x1000;\n            v8 = v16 / 0x100000000 & 0xfffff000;\n            goto lab_0x4043a0;\n        }\n        case 52: {\n            // 0x404370\n            function_402ab0(a1, a2, (int64_t)*(int32_t *)(a6 + 28));\n            // 0x404325\n            return 0;\n        }\n        case 54: {\n            goto lab_0x40435d;\n        }\n        case 55: {\n            goto lab_0x404680;\n        }\n        case 56: {\n            goto lab_0x404680;\n        }\n        case 57: {\n            goto lab_0x404680;\n        }\n        default: {\n            int64_t v17 = (int64_t)g35; // 0x404760\n            int64_t * v18 = (int64_t *)(v17 + 40); // 0x404767\n            uint64_t v19 = *v18; // 0x404767\n            if (v19 >= *(int64_t *)(v17 + 48)) {\n                // 0x404808\n                __overflow(g35, 63);\n            } else {\n                // 0x404775\n                *v18 = v19 + 1;\n                *(char *)v19 = 63;\n            }\n            // 0x404325\n            return 0;\n        }\n    }\n  lab_0x4045a7:\n    // 0x40435d\n    function_402a70(a1, a2, (char *)*(int64_t *)v4);\n    // 0x404325\n    return 0;\n  lab_0x404480:\n    // 0x404480\n    function_402a70(a1, a2, (char *)v7);\n    free((int64_t *)v3);\n    // 0x404325\n    return v5 & 0xffffffff;\n  lab_0x4043a0:\n    // 0x4043a0\n    function_402a30(a1, a2, v8 & 0xffffff00 | v6);\n    // 0x404325\n    return 0;\n  lab_0x40442d:;\n    char * v20 = canonicalize_file_name((char *)a5); // 0x404439\n    int64_t v21 = (int64_t)v20; // 0x404439\n    if (v20 == NULL) {\n        // 0x4047be\n        function_408cc0(4, a5);\n        error(0, *__errno_location(), dcgettext(NULL, \"failed to canonicalize %s\", 5));\n        v5 = 1;\n        v3 = v21;\n        v7 = (int64_t)&g1;\n        goto lab_0x404480;\n    } else {\n        int64_t v22 = function_403d70(v21); // 0x404461\n        free((int64_t *)v20);\n        v5 = 0;\n        v3 = 0;\n        v7 = v22;\n        if (v22 == 0) {\n            goto lab_0x404790;\n        } else {\n            goto lab_0x404480;\n        }\n    }\n  lab_0x404790:;\n    int64_t v23 = function_404d10(a5, a6); // 0x404796\n    v5 = 1;\n    v3 = 0;\n    v7 = (int64_t)&g1;\n    if (v23 != 0) {\n        int64_t v24 = function_403d70(v23); // 0x4047a6\n        v5 = 0;\n        v3 = v23;\n        v7 = v24 == 0 ? v23 : v24;\n    }\n    goto lab_0x404480;\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "404d0d",
            "decompiledFuncCode": "int64_t function_404870(int64_t a1) {\n    int32_t status = a1; // 0x404886\n    if (status != 0) {\n        // 0x40488a\n        __fprintf_chk(g37, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4048af\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4048b6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Display file or file system status.\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"  -L, --dereference     follow links\\n  -f, --file-system     display file system status instead of file status\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"  -c  --format=FORMAT   use the specified FORMAT instead of the default;\\n                          output a newline after each use of FORMAT\\n      --printf=FORMAT   like --format, but interpret backslash escapes,\\n                          and do not output a mandatory trailing newline;\\n                          if you want a newline, include \\\\n in FORMAT\\n  -t, --terse           print the information in terse form\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe valid format sequences for files (without --file-system):\\n\\n  %a   access rights in octal (note '#' and '0' printf flags)\\n  %A   access rights in human readable form\\n  %b   number of blocks allocated (see %B)\\n  %B   the size in bytes of each block reported by %b\\n  %C   SELinux security context string\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"  %d   device number in decimal\\n  %D   device number in hex\\n  %f   raw mode in hex\\n  %F   file type\\n  %g   group ID of owner\\n  %G   group name of owner\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"  %h   number of hard links\\n  %i   inode number\\n  %m   mount point\\n  %n   file name\\n  %N   quoted file name with dereference if symbolic link\\n  %o   optimal I/O transfer size hint\\n  %s   total size, in bytes\\n  %t   major device type in hex, for character/block device special files\\n  %T   minor device type in hex, for character/block device special files\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"  %u   user ID of owner\\n  %U   user name of owner\\n  %w   time of file birth, human-readable; - if unknown\\n  %W   time of file birth, seconds since Epoch; 0 if unknown\\n  %x   time of last access, human-readable\\n  %X   time of last access, seconds since Epoch\\n  %y   time of last data modification, human-readable\\n  %Y   time of last data modification, seconds since Epoch\\n  %z   time of last status change, human-readable\\n  %Z   time of last status change, seconds since Epoch\\n\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"Valid format sequences for file systems:\\n\\n  %a   free blocks available to non-superuser\\n  %b   total data blocks in file system\\n  %c   total file nodes in file system\\n  %d   free file nodes in file system\\n  %f   free blocks in file system\\n\", 5), g35);\n    fputs_unlocked(dcgettext(NULL, \"  %i   file system ID in hex\\n  %l   maximum length of filenames\\n  %n   file name\\n  %s   block size (for faster transfers)\\n  %S   fundamental block size (for block counts)\\n  %t   file system type in hex\\n  %T   file system type in human readable form\\n\", 5), g35);\n    int128_t v1; // 0x404870\n    int64_t v2 = v1; // 0x404a98\n    int64_t v3 = v1; // 0x404a98\n    int64_t v4; // 0x404870\n    __printf_chk(1, dcgettext(NULL, \"\\n--terse is equivalent to the following FORMAT:\\n    %s\", 5), (int32_t *)\"%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %W %o\\n\", (char *)v4, v4, (float64_t)v2, (int32_t)v4, (float64_t)v3);\n    __printf_chk(1, dcgettext(NULL, \"--terse --file-system is equivalent to the following FORMAT:\\n    %s\", 5), (int32_t *)\"%n %i %l %t %s %S %b %f %a %c %d\\n\", v4, v4, v4, (char *)v2, (char *)v3);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v5 = &g2; // bp-136, 0x404ae7\n    bool v6; // 0x404870\n    int64_t v7 = v6 ? -1 : 1;\n    int64_t v8 = &v5;\n    int64_t v9 = v8 + 16; // 0x404b70\n    int64_t v10 = *(int64_t *)v9; // 0x404b74\n    int64_t v11 = 5; // 0x404b7a\n    while (v10 != 0) {\n        int64_t v12 = (int64_t)\"stat\";\n        int64_t v13 = v10;\n        unsigned char v14 = *(char *)v12; // 0x404b86\n        char v15 = *(char *)v13; // 0x404b86\n        char v16 = v15; // 0x404b86\n        bool v17 = false; // 0x404b86\n        while (v14 == v15) {\n            // 0x404b7c\n            v11--;\n            int64_t v18 = v13 + v7; // 0x404b86\n            int64_t v19 = v12 + v7; // 0x404b86\n            v16 = v14;\n            v17 = true;\n            if (v11 == 0) {\n                // break -> \n                break;\n            }\n            v12 = v19;\n            v13 = v18;\n            v14 = *(char *)v12;\n            v15 = *(char *)v13;\n            v16 = v15;\n            v17 = false;\n        }\n        unsigned char v20 = v16;\n        if ((v14 >= v20 && !v17) == v14 < v20) {\n            // break -> 0x404b92\n            break;\n        }\n        v8 = v9;\n        v9 = v8 + 16;\n        v10 = *(int64_t *)v9;\n        v11 = 5;\n    }\n    // 0x404b92\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v8 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x404ca4;\n        } else {\n            // 0x404c8e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404ce3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404bf4;\n            } else {\n                goto lab_0x404ca4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x404bf4;\n        } else {\n            // 0x404bda\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404ce3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404bf4;\n            } else {\n                goto lab_0x404bf4;\n            }\n        }\n    }\n  lab_0x404ca4:\n    // 0x404ca4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404c34\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4048af\n    exit(status);\n    // UNREACHABLE\n  lab_0x404bf4:\n    // 0x404bf4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404c34\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4048af\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404d10",
            "funcStartAddr": "404d10",
            "funcEndAddr": "405090",
            "decompiledFuncCode": "int64_t function_404d10(int64_t path, int64_t a2) {\n    // 0x404d10\n    int64_t v1; // bp-344, 0x404d10\n    int64_t v2 = function_408f30(&v1); // 0x404d2f\n    int32_t * err_num = __errno_location(); // 0x404d37\n    if ((int32_t)v2 != 0) {\n        // 0x405038\n        error(0, *err_num, dcgettext(NULL, \"cannot get current directory\", 5));\n        // 0x404f40\n        return 0;\n    }\n    // 0x404d48\n    int64_t v3; // 0x404d10\n    int64_t result; // 0x404d10\n    int64_t v4; // 0x404d10\n    int64_t v5; // bp-328, 0x404d10\n    if ((*(int32_t *)(a2 + 24) & 0xf000) == 0x4000) {\n        int128_t v6 = __asm_movdqu(*(int128_t *)&v4); // 0x404f50\n        int128_t v7 = __asm_movdqu(*(int128_t *)(a2 + 16)); // 0x404f54\n        int128_t v8 = __asm_movdqu(*(int128_t *)(a2 + 32)); // 0x404f5c\n        int128_t v9 = __asm_movdqu(*(int128_t *)(a2 + 48)); // 0x404f61\n        v5 = __asm_movaps(v6);\n        int128_t v10 = __asm_movdqu(*(int128_t *)(a2 + 64)); // 0x404f6d\n        int128_t v11 = __asm_movdqu(*(int128_t *)(a2 + 80)); // 0x404f72\n        __asm_movaps(v7);\n        int128_t v12 = __asm_movdqu(*(int128_t *)(a2 + 96)); // 0x404f7e\n        int128_t v13 = __asm_movdqu(*(int128_t *)(a2 + 112)); // 0x404f83\n        int128_t v14 = __asm_movdqu(*(int128_t *)(a2 + 128)); // 0x404f88\n        __asm_movaps(v8);\n        __asm_movaps(v9);\n        __asm_movaps(v10);\n        __asm_movaps(v11);\n        __asm_movaps(v12);\n        __asm_movaps(v13);\n        __asm_movaps(v14);\n        int32_t v15 = chdir((char *)path); // 0x404fc1\n        v4 = path;\n        v3 = path;\n        if (v15 >= 0) {\n            goto lab_0x404eb7;\n        } else {\n            goto lab_0x404fd1;\n        }\n    } else {\n        int64_t str = function_4055d0(); // 0x404d5e\n        int32_t len = strlen((char *)str); // 0x404d69\n        int64_t * v16 = (int64_t *)str; // 0x404d89\n        int64_t * dest_mem = memcpy((int64_t *)((int64_t)&v1 + 15 - ((int64_t)len + 24 & -16) & -16), v16, len + 1); // 0x404d89\n        int64_t v17 = (int64_t)dest_mem; // 0x404d89\n        free(v16);\n        if (chdir((char *)dest_mem) < 0) {\n            // 0x405060\n            v4 = v17;\n            v3 = v17;\n            goto lab_0x404fd1;\n        } else {\n            // 0x404da9\n            if (__xstat(1, \".\", (struct stat *)&v5) >= 0) {\n                goto lab_0x404eb7;\n            } else {\n                // 0x404dc7\n                function_408cc0(4, v17);\n                error(0, *err_num, dcgettext(NULL, \"cannot stat current directory (now %s)\", 5));\n                result = 0;\n                goto lab_0x404f18;\n            }\n        }\n    }\n  lab_0x404eb7:;\n    // 0x404eb7\n    int128_t v18; // bp-184, 0x404d10\n    int64_t v19; // 0x404d10\n    if (__xstat(1, \"..\", (struct stat *)&v18) >= 0) {\n        int64_t v20 = v5; // 0x404e08\n        while (false && v20 == (int64_t)v18) {\n            // 0x404e30\n            if (chdir(\"..\") < 0) {\n                // 0x405010\n                function_408cc0(4, (int64_t)\"..\");\n                v19 = (int64_t)\"cannot change to directory %s\";\n                goto lab_0x404ef1;\n            }\n            int128_t v21 = __asm_movdqa(0); // 0x404e42\n            int128_t v22; // 0x404d10\n            int128_t v23 = __asm_movdqa(v22); // 0x404e4a\n            int128_t v24 = __asm_movdqa(v22); // 0x404e52\n            int128_t v25 = __asm_movdqa(v22); // 0x404e5a\n            v5 = __asm_movaps(v21);\n            int128_t v26 = __asm_movdqa(v22); // 0x404e66\n            int128_t v27 = __asm_movdqa(v22); // 0x404e6b\n            int128_t v28 = __asm_movdqa(v22); // 0x404e70\n            int128_t v29 = __asm_movdqa(v22); // 0x404e75\n            __asm_movaps(v23);\n            int128_t v30 = __asm_movdqa(v22); // 0x404e81\n            __asm_movaps(v24);\n            __asm_movaps(v25);\n            __asm_movaps(v26);\n            __asm_movaps(v27);\n            __asm_movaps(v28);\n            __asm_movaps(v29);\n            __asm_movaps(v30);\n            if (__xstat(1, \"..\", (struct stat *)&v18) < 0) {\n                // 0x404ed5\n                function_408cc0(4, (int64_t)\"..\");\n                v19 = (int64_t)\"cannot stat %s\";\n                goto lab_0x404ef1;\n            }\n            v20 = v5;\n        }\n        // 0x404f18\n        int64_t v31; // 0x404d10\n        result = v20 != (int64_t)v18 ? v20 : v31;\n        goto lab_0x404f18;\n    } else {\n        // 0x404ed5\n        function_408cc0(4, (int64_t)\"..\");\n        v19 = (int64_t)\"cannot stat %s\";\n        goto lab_0x404ef1;\n    }\n  lab_0x404fd1:\n    // 0x404fd1\n    function_408cc0(4, v3);\n    error(0, *err_num, dcgettext(NULL, \"cannot change to directory %s\", 5));\n    // 0x404f40\n    return 0;\n  lab_0x404f18:\n    // 0x404f18\n    if ((int32_t)function_408f80(&v1) != 0) {\n        // 0x405068\n        error(1, *err_num, dcgettext(NULL, \"failed to return to initial working directory\", 5));\n        return &g65;\n    }\n    // 0x404f30\n    function_408fa0(&v1);\n    // 0x404f40\n    return result;\n  lab_0x404ef1:\n    // 0x404ef1\n    v4 = v19;\n    error(0, *err_num, dcgettext(NULL, (char *)v19, 5));\n    result = 0;\n    goto lab_0x404f18;\n}\n"
        },
        {
            "funcName": "function_405090",
            "funcStartAddr": "405090",
            "funcEndAddr": "40517f",
            "decompiledFuncCode": "int64_t function_405090(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x4050c9\n    int64_t * mem = malloc((int32_t)size); // 0x4050d3\n    int64_t result = 0; // 0x4050de\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x4050e9\n        if (v1 < 0) {\n            // 0x405148\n            if (*__errno_location() != 34) {\n                // 0x405152\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x4050e9\n        int64_t v3; // 0x405090\n        if (buf_size > v2) {\n            // 0x405160\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x4050fb\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x405108\n            int64_t * mem2 = malloc((int32_t)size2); // 0x40510e\n            if (mem2 == NULL) {\n                // 0x40511b\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x405148\n                if (*__errno_location() != 34) {\n                    // 0x405152\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x4050f6\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x405160\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x4050fb\n            free(buf);\n        }\n        // 0x405130\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x405170\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x40511b_2:\n    // 0x40511b\n    return result;\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "40518a",
            "decompiledFuncCode": "int64_t function_405180(void) {\n    // 0x405180\n    return function_404870(1);\n}\n"
        },
        {
            "funcName": "function_405190",
            "funcStartAddr": "405190",
            "funcEndAddr": "4052a6",
            "decompiledFuncCode": "int64_t function_405190(int64_t a1, char ** a2, int64_t * a3, int64_t n) {\n    char * str = (char *)a1; // 0x4051b1\n    int32_t len = strlen(str); // 0x4051b1\n    if (a2 == NULL) {\n        // 0x40527d\n        return -1;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = -1;\n    int64_t * str3 = (int64_t *)(v3 * n + v1);\n    int32_t v4 = 0;\n    int64_t v5 = 0; // 0x405217\n    int64_t v6 = v1; // 0x405190\n    int64_t v7 = v2; // 0x40521e\n    int64_t str4; // 0x405190\n    int64_t v8; // 0x405190\n    int32_t v9; // 0x405190\n    int32_t v10; // 0x405190\n    int32_t v11; // 0x405190\n    int64_t v12; // 0x405190\n    int64_t result; // 0x405190\n    int32_t v13; // 0x405213\n    char * str2; // 0x405232\n    while (true) {\n        // 0x405227\n        str4 = v6;\n        v8 = v5;\n        v10 = v4;\n        str2 = (char *)v7;\n        v9 = v10;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40523b\n            result = v8;\n            if (len == strlen(str2)) {\n                // 0x40527d\n                return result;\n            }\n            if (v3 == -1) {\n                // break -> 0x40524f\n                break;\n            }\n            // 0x4051e0\n            v9 = 1;\n            if (a3 != NULL) {\n                // 0x4051ee\n                v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                v9 = v13;\n            }\n        }\n        // 0x405217\n        v4 = v9;\n        v5 = v8 + 1;\n        v7 = *(int64_t *)(8 * v5 + v2);\n        v6 = str4 + n;\n        v12 = v3;\n        v11 = v4;\n        if (v7 == 0) {\n            return (char)v11 == 0 ? v12 : -2;\n        }\n    }\n    int64_t v14 = v8 + 1; // 0x405253\n    int64_t v15 = *(int64_t *)(8 * v14 + v2); // 0x40525a\n    v12 = v8;\n    v11 = v10;\n    while (v15 != 0) {\n        // 0x405227\n        v3 = v8;\n        str3 = (int64_t *)(v3 * n + v1);\n        v4 = v10;\n        v5 = v14;\n        v6 = str4 + n;\n        v7 = v15;\n        while (true) {\n            // 0x405227\n            str4 = v6;\n            v8 = v5;\n            v10 = v4;\n            str2 = (char *)v7;\n            v9 = v10;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40523b\n                result = v8;\n                if (len == strlen(str2)) {\n                    // 0x40527d\n                    return result;\n                }\n                if (v3 == -1) {\n                    // break -> 0x40524f\n                    break;\n                }\n                // 0x4051e0\n                v9 = 1;\n                if (a3 != NULL) {\n                    // 0x4051ee\n                    v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                    v9 = v13;\n                }\n            }\n            // 0x405217\n            v4 = v9;\n            v5 = v8 + 1;\n            v7 = *(int64_t *)(8 * v5 + v2);\n            v6 = str4 + n;\n            v12 = v3;\n            v11 = v4;\n            if (v7 == 0) {\n                return (char)v11 == 0 ? v12 : -2;\n            }\n        }\n        // 0x40524f\n        v14 = v8 + 1;\n        v15 = *(int64_t *)(8 * v14 + v2);\n        v12 = v8;\n        v11 = v10;\n    }\n  lab_0x405268:\n    // 0x40527d\n    return (char)v11 == 0 ? v12 : -2;\n}\n"
        },
        {
            "funcName": "function_4052b0",
            "funcStartAddr": "4052b0",
            "funcEndAddr": "405321",
            "decompiledFuncCode": "int64_t function_4052b0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x4052b0\n    if (a3 == -1) {\n        // 0x405310\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x4052c5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x4052d4\n    function_408ef0(1, a1);\n    function_408be0(0, 8, a2);\n    error(0, 0, format);\n    return &g65;\n}\n"
        },
        {
            "funcName": "function_405330",
            "funcStartAddr": "405330",
            "funcEndAddr": "405448",
            "decompiledFuncCode": "int64_t function_405330(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40535d\n    fputs_unlocked(v1, g37);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x4053d0\n        int64_t v5; // 0x4053d7\n        int64_t v6; // 0x4053f7\n        while (v3 != 0) {\n            // 0x4053bb\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x405380\n                break;\n            }\n            // 0x4053cd\n            v4 = v3 + 1;\n            v5 = function_408f10(v2);\n            __fprintf_chk(g37, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x405400\n                goto lab_0x405400;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x405383\n        int64_t v8 = function_408f10(v2); // 0x40538d\n        __fprintf_chk(g37, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x4053ad\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x4053bb\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x405380\n                    break;\n                }\n                // 0x4053cd\n                v4 = v3 + 1;\n                v5 = function_408f10(v2);\n                __fprintf_chk(g37, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x405400\n                    goto lab_0x405400;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x405380\n            v7 = v3 + 1;\n            v8 = function_408f10(v2);\n            __fprintf_chk(g37, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x405400:;\n    int64_t v10 = (int64_t)g37; // 0x405400\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x405407\n    uint64_t result = *v11; // 0x405407\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x405430\n        return __overflow(g37, 10);\n    }\n    // 0x405411\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405450",
            "funcStartAddr": "405450",
            "funcEndAddr": "4054c0",
            "decompiledFuncCode": "int64_t function_405450(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = function_405190(a2, (char **)a3, (int64_t *)a4, a5); // 0x40547c\n    int64_t result = v1; // 0x405484\n    if (v1 < 0) {\n        // 0x405498\n        function_4052b0(a1, a2, v1);\n        function_405330(a3, a4, a5);\n        result = -1;\n    }\n    // 0x405486\n    return result;\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "40550d",
            "decompiledFuncCode": "int64_t function_4054c0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x4054c0\n    if (result == 0) {\n        // 0x405501\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x4054f8\n    int32_t n = a4; // 0x4054f8\n    int64_t v1 = result; // 0x4054ff\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x405501\n        return result;\n    }\n    int64_t str3 = str2; // 0x4054ff\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x4054e0\n    int64_t result2 = 0; // 0x4054ed\n    while (v2 != 0) {\n        // 0x4054ef\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x405501\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x405501\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405510",
            "funcStartAddr": "405510",
            "funcEndAddr": "405518",
            "decompiledFuncCode": "int64_t function_405510(int64_t a1) {\n    // 0x405510\n    g50 = a1;\n    int64_t result; // 0x405510\n    return result;\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "405528",
            "decompiledFuncCode": "int64_t function_405520(int64_t a1) {\n    // 0x405520\n    g49 = a1;\n    int64_t result; // 0x405520\n    return result;\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "4055ce",
            "decompiledFuncCode": "int64_t function_405530(void) {\n    // 0x405530\n    int32_t * err_num; // 0x405546\n    if ((int32_t)function_40c640((int64_t)g35) == 0) {\n        goto lab_0x40555c;\n    } else {\n        // 0x405546\n        err_num = __errno_location();\n        if (g49 == 0) {\n            goto lab_0x405573;\n        } else {\n            // 0x405557\n            if (*err_num != 32) {\n                goto lab_0x405573;\n            } else {\n                goto lab_0x40555c;\n            }\n        }\n    }\n  lab_0x40555c:;\n    int64_t result = function_40c640((int64_t)g37); // 0x405563\n    if ((int32_t)result == 0) {\n        // 0x40556c\n        return result;\n    }\n    // 0x4055ae\n    _exit(g25);\n    // UNREACHABLE\n  lab_0x405573:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40557f\n    if (g50 == 0) {\n        // 0x4055b9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405593\n        error(0, *err_num, \"%s: %s\", (char *)function_408d60((int64_t)g50), v1);\n    }\n    // 0x4055ae\n    _exit(g25);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4055d0",
            "funcStartAddr": "4055d0",
            "funcEndAddr": "4055e8",
            "decompiledFuncCode": "int64_t function_4055d0(void) {\n    // 0x4055d0\n    int64_t v1; // 0x4055d0\n    int64_t result = function_405650(v1); // 0x4055d4\n    if (result != 0) {\n        // 0x4055de\n        return result;\n    }\n    // 0x4055e3\n    function_4097b0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "40564d",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t a1) {\n    // 0x4055f0\n    int64_t v1; // 0x4055f0\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x4055fe\n    int64_t v3 = function_4056b0(a1, v1); // 0x405602\n    int64_t result = v3 - a1; // 0x40560a\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x405633\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x405620\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x405633\n            break;\n        }\n        result2--;\n    }\n    // 0x405633\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "4056aa",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1) {\n    // 0x405650\n    int64_t v1; // 0x405650\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x40566f\n    if (mem == NULL) {\n        // 0x405696\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x405685\n    int64_t v3; // 0x405650\n    if (v2 == 0) {\n        // 0x4056a0\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x405685\n    *(char *)(v3 + result) = 0;\n    // 0x405696\n    return result;\n}\n"
        },
        {
            "funcName": "function_4056b0",
            "funcStartAddr": "4056b0",
            "funcEndAddr": "40570b",
            "decompiledFuncCode": "int64_t function_4056b0(int64_t a1, int64_t a2) {\n    // 0x4056b0\n    int64_t v1; // 0x4056b0\n    char v2 = v1;\n    int64_t v3 = a1; // 0x4056b9\n    int64_t v4 = a1; // 0x4056b9\n    char v5 = v2; // 0x4056b9\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x4056c4\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x4056c0\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x4056ce\n    if (v5 == 0) {\n      lab_0x40570a:\n        // 0x40570a\n        return result;\n    }\n    int64_t v7 = v4; // 0x4056f8\n    int64_t v8 = 0; // 0x4056f8\n    int64_t v9; // 0x4056b0\n    int64_t v10; // 0x4056fa\n    char v11; // 0x4056fe\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x4056f5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x4056fa\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4056f5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x4056ea\n    char v14 = *(char *)v13; // 0x4056ee\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4056f5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x4056fa\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x4056f5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x4056e0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x40570a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405710",
            "funcStartAddr": "405710",
            "funcEndAddr": "40573b",
            "decompiledFuncCode": "int64_t function_405710(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x405714\n    int64_t result = len; // 0x405714\n    if (len < 2) {\n        // 0x40572a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x405728\n    while (*(char *)(v1 + str) == 47) {\n        // 0x405730\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40572a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40572a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "405824",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1) {\n    int32_t v1 = *(int32_t *)(a1 + 24); // 0x405740\n    switch (((v1 & 0xf000) - 0x1000) / 0x1000) {\n        case 7: {\n            // 0x4057a0\n            if (*(int64_t *)(a1 + 48) != 0) {\n                // 0x4057b8\n                return (int64_t)dcgettext(NULL, \"regular file\", 5);\n            }\n            // break -> 0x4057a7\n            break;\n        }\n        case 3: {\n            // 0x4057d8\n            return (int64_t)dcgettext(NULL, \"directory\", 5);\n        }\n        case 9: {\n            // 0x4057f8\n            return (int64_t)dcgettext(NULL, \"symbolic link\", 5);\n        }\n        case 5: {\n            // 0x405808\n            return (int64_t)dcgettext(NULL, \"block special file\", 5);\n        }\n        case 1: {\n            // 0x4057c8\n            return (int64_t)dcgettext(NULL, \"character special file\", 5);\n        }\n        case 0: {\n            // 0x405818\n            return (int64_t)dcgettext(NULL, \"fifo\", 5);\n        }\n        case 11: {\n            // 0x4057e8\n            return (int64_t)dcgettext(NULL, \"socket\", 5);\n        }\n        default: {\n            // 0x40578a\n            return (int64_t)dcgettext(NULL, \"weird file\", 5);\n        }\n    }\n    // 0x4057a7\n    return (int64_t)dcgettext(NULL, \"regular empty file\", 5);\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "4059a3",
            "decompiledFuncCode": "int64_t function_405830(int32_t a1, int64_t a2) {\n    int32_t v1 = a1 & 0xf000; // 0x405837\n    char v2 = 45; // 0x405830\n    int64_t v3; // 0x405830\n    uint64_t v4; // 0x405830\n    switch ((v1 - 0x1000) / 0x1000) {\n        case 3: {\n            // 0x405899\n            v2 = 100;\n        }\n        case 7: {\n          lab_0x405899:\n            // 0x405899\n            v4 = (int64_t)a1;\n            *(char *)a2 = v2;\n            *(char *)(a2 + 1) = (v4 & 256) == 0 ? 45 : 114;\n            int64_t v5 = v4 & 128; // 0x4058b2\n            char v6 = v5; // 0x4058ba\n            *(char *)(a2 + 2) = (v6 - ((char)(v5 == 0) | v6) & -74) + 119;\n            int64_t v7 = v4 & 64; // 0x4058c7\n            int64_t v8 = v7 - (v7 | (int64_t)(v7 == 0)); // 0x4058cd\n            if ((v4 & 2048) == 0) {\n                // 0x405970\n                v3 = (v8 & 0xffffffb5) + 120 & 0xfffffffd;\n            } else {\n                // 0x4058db\n                v3 = (v8 & 0xffffffe0) + 115 & 0xfffffff3;\n            }\n            // break -> 0x4058e1\n            break;\n        }\n        case 5: {\n            // 0x405899\n            v2 = 98;\n            // branch (via goto) -> 0x405899\n            goto lab_0x405899;\n        }\n        case 1: {\n            // 0x405899\n            v2 = 99;\n            // branch (via goto) -> 0x405899\n            goto lab_0x405899;\n        }\n        case 9: {\n            // 0x405899\n            v2 = 108;\n            // branch (via goto) -> 0x405899\n            goto lab_0x405899;\n        }\n        case 0: {\n            // 0x405899\n            v2 = 112;\n            // branch (via goto) -> 0x405899\n            goto lab_0x405899;\n        }\n        default: {\n            // 0x405886\n            v2 = v1 != 0xc000 ? 63 : 115;\n            // branch (via goto) -> 0x405899\n            goto lab_0x405899;\n        }\n    }\n    // 0x4058e1\n    *(char *)(a2 + 3) = (char)v3;\n    int64_t v9 = v4 & 32; // 0x4058e6\n    char v10 = v9; // 0x4058ec\n    *(char *)(a2 + 4) = (v10 - ((char)(v9 == 0) | v10) & -69) + 114;\n    int64_t v11 = v4 & 16; // 0x4058f9\n    char v12 = v11; // 0x4058ff\n    *(char *)(a2 + 5) = (v12 - ((char)(v11 == 0) | v12) & -74) + 119;\n    int64_t v13 = v4 & 8; // 0x40590c\n    int64_t v14 = v13 - (v13 | (int64_t)(v13 == 0)); // 0x405912\n    int64_t v15; // 0x405830\n    if ((v4 & 1024) == 0) {\n        // 0x405980\n        v15 = (v14 & 0xffffffb5) + 120 & 0xfffffffd;\n    } else {\n        // 0x40591c\n        v15 = (v14 & 0xffffffe0) + 115 & 0xfffffff3;\n    }\n    // 0x405922\n    *(char *)(a2 + 6) = (char)v15;\n    int64_t v16 = v4 & 4; // 0x405927\n    char v17 = v16; // 0x40592d\n    *(char *)(a2 + 7) = (v17 - ((char)(v16 == 0) | v17) & -69) + 114;\n    int64_t v18 = v4 & 2; // 0x40593a\n    char v19 = v18; // 0x405940\n    *(char *)(a2 + 8) = (v19 - ((char)(v18 == 0) | v19) & -74) + 119;\n    char v20 = v4 % 2 == 0; // 0x405953\n    if ((v4 & 512) == 0) {\n        // 0x405990\n        *(char *)(a2 + 9) = (v20 & -75) + 120;\n        *(int16_t *)(a2 + 10) = 32;\n        return 32;\n    }\n    // 0x40595d\n    *(char *)(a2 + 9) = (v20 & -32) + 116;\n    *(int16_t *)(a2 + 10) = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "function_4059b0",
            "funcStartAddr": "4059b0",
            "funcEndAddr": "4059b8",
            "decompiledFuncCode": "int64_t function_4059b0(int64_t a1) {\n    // 0x4059b0\n    int64_t v1; // 0x4059b0\n    return function_405830(*(int32_t *)(a1 + 24), v1);\n}\n"
        },
        {
            "funcName": "function_4059c0",
            "funcStartAddr": "4059c0",
            "funcEndAddr": "405a5c",
            "decompiledFuncCode": "int64_t function_4059c0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x4059c0\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x4059e5\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x405a16\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x405a38\n    int64_t v4 = v2 - 1; // 0x405a48\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x405a50\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405a60",
            "funcStartAddr": "405a60",
            "funcEndAddr": "405aa1",
            "decompiledFuncCode": "int64_t function_405a60(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x405a99\n        return result;\n    }\n    int32_t ** v1 = __ctype_tolower_loc(); // 0x405a73\n    int64_t v2 = a3; // 0x405a78\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x405a80\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x405a88\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x405a80\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x405a99\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ab0",
            "funcStartAddr": "405ab0",
            "funcEndAddr": "405af1",
            "decompiledFuncCode": "int64_t function_405ab0(int64_t result, int64_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x405ae9\n        return result;\n    }\n    int32_t ** v1 = __ctype_toupper_loc(); // 0x405ac3\n    int64_t v2 = a3; // 0x405ac8\n    v2--;\n    unsigned char v3 = *(char *)(v2 + a2); // 0x405ad0\n    int32_t v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x405ad8\n    *(char *)(v2 + result) = (char)v4;\n    while (v2 != 0) {\n        // 0x405ad0\n        v2--;\n        v3 = *(char *)(v2 + a2);\n        v4 = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        *(char *)(v2 + result) = (char)v4;\n    }\n    // 0x405ae9\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b00",
            "funcStartAddr": "405b00",
            "funcEndAddr": "4072c5",
            "decompiledFuncCode": "int64_t function_405b00(int32_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a3;\n    int64_t v2 = a1;\n    int64_t v3 = a2; // bp-1224, 0x405b24\n    char v4 = *(char *)&v1; // 0x405b4c\n    v3 = a2;\n    int64_t result = 0; // 0x405b54\n    int64_t v5 = v2; // 0x405b54\n    char v6; // 0x405b00\n    char v7; // 0x405b00\n    char v8; // 0x405b00\n    char v9; // 0x405b00\n    char v10; // 0x405b00\n    char v11; // 0x405b00\n    char v12; // 0x405b00\n    char v13; // 0x405b00\n    char v14; // 0x405b00\n    char v15; // 0x405b00\n    int64_t v16; // 0x405b00\n    int64_t v17; // 0x405b00\n    int64_t v18; // 0x405b00\n    int64_t v19; // 0x405b00\n    int64_t v20; // 0x405b00\n    int64_t v21; // 0x405b00\n    int64_t v22; // 0x405b00\n    int64_t v23; // 0x405b00\n    int64_t v24; // 0x405b00\n    int64_t v25; // 0x405b00\n    int64_t v26; // 0x405b00\n    int64_t v27; // 0x405b00\n    int64_t v28; // 0x405b00\n    int64_t v29; // 0x405b00\n    char v30; // 0x405b00\n    int64_t v31; // 0x405b00\n    int64_t v32; // 0x405b00\n    int64_t v33; // 0x405b00\n    int64_t v34; // 0x405b00\n    int64_t v35; // 0x405b00\n    int64_t v36; // 0x405b00\n    int64_t v37; // 0x405b00\n    int64_t v38; // 0x405b00\n    char * v39; // 0x405b00\n    int64_t v40; // 0x405b00\n    char * v41; // 0x405b00\n    int64_t v42; // 0x405b00\n    int64_t * str; // 0x405b00\n    char * v43; // 0x405b00\n    int64_t * v44; // 0x405b00\n    int64_t format; // 0x405b00\n    int16_t * v45; // 0x405b00\n    int64_t * v46; // 0x405b00\n    int32_t * v47; // 0x405b00\n    int32_t * v48; // 0x405b00\n    int64_t v49; // 0x405b15\n    int64_t * v50; // 0x405b00\n    int64_t * v51; // 0x405b00\n    int64_t * v52; // 0x405b00\n    int64_t * v53; // 0x405b00\n    int64_t * v54; // 0x405b00\n    int64_t * v55; // 0x405b00\n    int32_t * v56; // 0x405b00\n    int64_t v57; // 0x405b00\n    char * v58; // 0x405b00\n    int64_t * v59; // 0x405b00\n    int32_t * v60; // 0x405b00\n    int64_t * v61; // 0x405b00\n    int64_t * v62; // 0x405b00\n    int64_t * tm; // 0x405b00\n    int64_t v63; // 0x405b00\n    int32_t * v64; // 0x405b00\n    int64_t * v65; // 0x405b00\n    int64_t str2; // 0x405b00\n    if (v4 != 0) {\n        // 0x405b6a\n        v49 = &v3;\n        tm = (int64_t *)(v49 + 8);\n        v63 = v49 + 48;\n        v64 = (int32_t *)v63;\n        v65 = (int64_t *)(v49 + 1232);\n        str2 = v49 + 144;\n        int64_t v66 = v49 + 64;\n        v39 = (char *)v66;\n        v40 = v49 + 135;\n        v41 = (char *)v63;\n        v42 = v49 + 44;\n        str = (int64_t *)(v49 + 32);\n        int64_t v67 = v49 + 72;\n        v43 = (char *)v67;\n        v44 = (int64_t *)v63;\n        format = v49 + 112;\n        v45 = (int16_t *)format;\n        v46 = (int64_t *)(v49 + 16);\n        v47 = (int32_t *)(v49 + 1240);\n        v48 = (int32_t *)v66;\n        v50 = (int64_t *)(v49 - 8);\n        v51 = (int64_t *)(v49 - 16);\n        v52 = (int64_t *)(v49 + 24);\n        v53 = (int64_t *)v66;\n        int64_t v68 = v49 + 80;\n        v54 = (int64_t *)v68;\n        v55 = (int64_t *)v67;\n        v56 = (int32_t *)v67;\n        v57 = v49 + 145;\n        int64_t v69 = v49 + 88;\n        v58 = (char *)v69;\n        v59 = (int64_t *)v69;\n        v60 = (int32_t *)v68;\n        v61 = (int64_t *)(v49 + 104);\n        v62 = (int64_t *)(v49 + 96);\n        v30 = v4;\n        v33 = a3;\n        v19 = 0;\n        v22 = v2;\n        while (true) {\n          lab_0x405b6a:\n            // 0x405b6a\n            v23 = v22;\n            v20 = v19;\n            int64_t v70 = v33;\n            char v71 = v30;\n            char v72 = v7;\n            char v73 = v6;\n            if (v71 == 37) {\n                char v74 = v73; // 0x405bf4\n                char v75 = v72; // 0x405bf4\n                int64_t v76 = v70; // 0x405bf4\n                int64_t v77 = 0; // 0x405bf4\n                int64_t v78 = (int64_t)*(char *)(v49 + 43); // 0x405bf4\n                int64_t v79 = 0; // 0x405bf4\n                int64_t v80; // 0x405b00\n                while (true) {\n                  lab_0x405bf8_2:\n                    // 0x405bf8\n                    v16 = v78;\n                    v10 = v74;\n                    v11 = v75;\n                    v34 = v76;\n                    v26 = v77;\n                    v17 = v79;\n                    while (true) {\n                      lab_0x405bf8:;\n                        int64_t v81 = v26;\n                        char v82 = v11;\n                        char v83 = v10;\n                        int64_t v84 = v34 + 1; // 0x405bf8\n                        char v85 = *(char *)v84; // 0x405bfc\n                        v14 = v83;\n                        v15 = v82;\n                        v31 = 48;\n                        v36 = v84;\n                        v28 = v81;\n                        if (v85 == 48) {\n                            goto lab_0x405c28;\n                        } else {\n                            // 0x405c08\n                            v18 = v17;\n                            v27 = v81;\n                            v35 = v84;\n                            v80 = v85;\n                            v13 = v82;\n                            v12 = v83;\n                            while (v12 <= v13) {\n                                if (v80 != 35) {\n                                    // 0x405c30\n                                    v14 = v12;\n                                    v15 = v13;\n                                    v31 = v80;\n                                    v36 = v35;\n                                    v28 = v27;\n                                    if ((char)v80 == 45) {\n                                        goto lab_0x405c28;\n                                    } else {\n                                        int64_t v86 = v80 & 0xffffffff;\n                                        v38 = v86;\n                                        v37 = v35;\n                                        v32 = 0xffffffff;\n                                        v29 = v86;\n                                        if ((int32_t)v80 < 58) {\n                                            goto lab_0x405c91;\n                                        } else {\n                                            goto lab_0x405c48_2;\n                                        }\n                                    }\n                                }\n                                int64_t v87 = v35 + 1; // 0x405c0e\n                                char v88 = *(char *)v87; // 0x405c12\n                                int64_t v89 = v88; // 0x405c12\n                                v14 = v88;\n                                v15 = 48;\n                                v31 = v89;\n                                v36 = v87;\n                                v28 = 1;\n                                if (v88 == 48) {\n                                    goto lab_0x405c28;\n                                }\n                                v27 = 1;\n                                v35 = v87;\n                                v80 = v89;\n                                v13 = 48;\n                                v12 = v88;\n                            }\n                            char v90 = v80;\n                            v74 = v12;\n                            v75 = v13;\n                            v76 = v35;\n                            v77 = v27;\n                            v78 = 1;\n                            v79 = v18;\n                            if (v90 != 94) {\n                                // 0x405c80\n                                v14 = v12;\n                                v15 = v13;\n                                v31 = v80;\n                                v36 = v35;\n                                v28 = v27;\n                                if (v90 != 95) {\n                                    // break (via goto) -> 0x405c84\n                                    goto lab_0x405c84;\n                                }\n                                goto lab_0x405c28;\n                            } else {\n                                goto lab_0x405bf8_2;\n                            }\n                        }\n                    }\n                }\n              lab_0x405c84:;\n                int64_t v91 = v80 & 0xffffffff;\n                v38 = v91;\n                v37 = v35;\n                v32 = 0xffffffff;\n                v29 = v91;\n                if ((int32_t)v80 < 58) {\n                    goto lab_0x405c91;\n                } else {\n                    goto lab_0x405c48_2;\n                }\n            } else {\n                int64_t v92 = v3 - v20; // 0x405b72\n                v1 = v92;\n                if (v92 < 2) {\n                    // break -> 0x405bb3\n                    break;\n                }\n                int64_t v93 = 0; // 0x405b7e\n                if (v23 != 0) {\n                    // 0x405b80\n                    *(char *)v23 = v71;\n                    v93 = v23 + 1;\n                }\n                // 0x405b87\n                v8 = v73;\n                v9 = v72;\n                v25 = v70;\n                v21 = v20 + 1;\n                v24 = v93;\n                goto lab_0x405b8e;\n            }\n        }\n      lab_0x405bb3_11:\n        // 0x405bb3\n        return 0;\n    }\n    goto lab_0x405b9b_2;\n  lab_0x405c28:\n    // 0x405c28\n    v10 = v14;\n    v11 = v15;\n    v34 = v36;\n    v26 = v28;\n    v17 = v31 & 0xffffffff;\n    goto lab_0x405bf8;\n  lab_0x405cde:;\n    // 0x405cde\n    int64_t v94; // 0x405c9b\n    v38 = v94;\n    int64_t v95; // 0x405c93\n    v37 = v95;\n    v32 = 0x7fffffff;\n    v29 = v94;\n    int64_t v96; // 0x405c9d\n    if ((int32_t)v96 >= 10) {\n        // break -> 0x405c48\n        goto lab_0x405c48_2;\n    }\n    // 0x405ce3\n    int64_t v97; // 0x405b00\n    int64_t v98 = v97 + 2; // 0x405ce3\n    int64_t v99 = (int64_t)*(char *)v98; // 0x405ce3\n    int64_t v100 = v99 + 0xffffffd0 & 0xffffffff; // 0x405cf2\n    v1 = v100;\n    int64_t v101 = v100; // 0x405cf5\n    int64_t v102 = v99; // 0x405cf5\n    int64_t v103 = v99 & 0xffffffff; // 0x405cf5\n    int64_t v104 = v98; // 0x405cf5\n    int64_t v105 = 0x7fffffff; // 0x405cf5\n    goto lab_0x405cba;\n  lab_0x405cba:;\n    int64_t v106 = v105;\n    int64_t v107 = v104;\n    int64_t v108 = v107; // 0x405cbd\n    int64_t v109 = v106; // 0x405cbd\n    if ((int32_t)v101 >= 10) {\n        // 0x405cbf\n        v38 = v103;\n        v37 = v107;\n        v32 = v106;\n        v29 = v102 & 0xffffffff;\n        goto lab_0x405c48_2;\n    }\n    goto lab_0x405c93;\n  lab_0x405c91:\n    // 0x405c91\n    v108 = v35;\n    v109 = 0;\n    while (true) {\n      lab_0x405c93:;\n        int64_t v110 = v109;\n        v97 = v108;\n        v95 = v97 + 1;\n        int64_t v111 = (int64_t)*(char *)v95; // 0x405c93\n        v94 = v111 & 0xffffffff;\n        v96 = v111 + 0xffffffd0;\n        int64_t v112 = v96 & 0xffffffff; // 0x405c9d\n        v1 = v112;\n        int32_t v113 = v110; // 0x405ca0\n        if (v113 > 0xccccccc) {\n            goto lab_0x405cde;\n        } else {\n            char v114 = *(char *)v97; // 0x405ca8\n            if (v113 != 0xccccccc || v114 < 56) {\n                // 0x405cad\n                v101 = v112;\n                v102 = v111;\n                v103 = v94;\n                v104 = v95;\n                v105 = 10 * v110 + 0xffffffd0 + (int64_t)v114 & 0xffffffff;\n                goto lab_0x405cba;\n            } else {\n                goto lab_0x405cde;\n            }\n        }\n    }\n    goto lab_0x405c48_2;\n  lab_0x405c48_2:;\n    int64_t v115 = v32;\n    int64_t v116 = v37;\n    int64_t v117 = v38; // 0x405b00\n    int64_t v118 = v116; // 0x405b00\n    int64_t v119 = 0; // 0x405b00\n    int64_t v120; // 0x405b00\n    switch ((char)v120) {\n        case 69: {\n        }\n        case 79: {\n            int64_t v121 = v116 + 1; // 0x405cc8\n            v117 = (int64_t)*(char *)v121;\n            v118 = v121;\n            v119 = v29;\n            // break -> 0x405c5e\n            break;\n        }\n    }\n    int64_t v122 = v119;\n    int64_t v123 = v118;\n    int64_t v124 = v117;\n    g67 = v124 % 256;\n    char v125 = v124;\n    int64_t v126 = v124; // 0x405c61\n    int64_t v127 = v16; // 0x405c61\n    int64_t v128 = 0; // 0x405c61\n    int64_t v129 = 1; // 0x405c61\n    int64_t v130 = v123; // 0x405c61\n    int64_t v131 = v16; // 0x405c61\n    int64_t v132 = v123; // 0x405c61\n    int64_t v133 = 0; // 0x405c61\n    int64_t v134; // 0x405b00\n    int64_t v135; // 0x405b00\n    int64_t v136; // 0x405b00\n    int64_t v137; // 0x405b00\n    int64_t v138; // 0x405b00\n    int64_t v139; // 0x405b00\n    int64_t v140; // 0x405b00\n    int64_t v141; // 0x405b00\n    int64_t v142; // 0x405b00\n    int64_t v143; // 0x405b00\n    int64_t v144; // 0x405b00\n    int64_t v145; // 0x405b00\n    int64_t v146; // 0x405b00\n    int64_t v147; // 0x405b00\n    int64_t v148; // 0x405b00\n    int64_t v149; // 0x405b00\n    int64_t v150; // 0x405b00\n    int64_t v151; // 0x405b00\n    int64_t v152; // 0x405b00\n    int64_t v153; // 0x405b00\n    int64_t v154; // 0x405b00\n    int64_t v155; // 0x405b00\n    int64_t v156; // 0x405b00\n    int64_t v157; // 0x405b00\n    int64_t v158; // 0x405b00\n    int64_t v159; // 0x405b00\n    int64_t v160; // 0x405b00\n    int64_t v161; // 0x405b00\n    int64_t v162; // 0x405b00\n    int64_t v163; // 0x405b00\n    int64_t v164; // 0x405b00\n    int64_t v165; // 0x405b00\n    int64_t v166; // 0x405b00\n    int64_t v167; // 0x405b00\n    int64_t v168; // 0x405b00\n    int64_t v169; // 0x405b00\n    int64_t v170; // 0x405b00\n    int64_t v171; // 0x405b00\n    int64_t v172; // 0x405b00\n    int64_t v173; // 0x405b00\n    int64_t v174; // 0x405b00\n    int64_t v175; // 0x405b00\n    int64_t v176; // 0x405b00\n    int64_t v177; // 0x405b00\n    int64_t v178; // 0x405b00\n    int64_t v179; // 0x405b00\n    int64_t v180; // 0x405b00\n    int64_t v181; // 0x405b00\n    int64_t v182; // 0x405b00\n    int64_t v183; // 0x405b00\n    int64_t v184; // 0x405b00\n    int64_t v185; // 0x405b00\n    int32_t v186; // 0x405b00\n    switch (v125) {\n        case 0: {\n            // 0x406be3\n            v177 = v123 - 1;\n            goto lab_0x406ad7;\n        }\n        case 37: {\n            int64_t v187 = v3 - v20; // 0x406b7e\n            v1 = v187;\n            int32_t v188 = v115; // 0x406b81\n            int64_t v189 = 0x100000000 * v115 >> 32;\n            int64_t v190 = v188 >= 0 ? v189 : 0; // 0x406b86\n            int64_t v191 = v190 != 0 ? v190 : 1; // 0x406b8b\n            v134 = v187;\n            v162 = v190;\n            v176 = 1;\n            v160 = v123;\n            v161 = v123;\n            v142 = v16;\n            v152 = v191;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x406983;\n            } else {\n                // 0x406b98\n                if (v191 >= v187) {\n                    // break -> 0x405bb3\n                    break;\n                }\n                // 0x406ba1\n                v155 = v191;\n                v156 = 0;\n                if (v23 != 0) {\n                    int64_t v192 = v124; // 0x406bad\n                    int64_t v193 = v23; // 0x406bad\n                    if (v188 >= 2) {\n                        int64_t v194 = v189 - 1; // 0x406bb2\n                        v1 = v194;\n                        int64_t v195 = v194 + v23; // 0x406bb6\n                        int64_t * v196 = (int64_t *)v23;\n                        int32_t v197 = v194;\n                        if (v18 == 48) {\n                            // 0x407246\n                            memset(v196, 48, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        } else {\n                            // 0x406bc4\n                            memset(v196, 32, v197);\n                            v192 = (int64_t)*(char *)v123;\n                            v193 = v195;\n                        }\n                    }\n                    // 0x406bd7\n                    *(char *)v193 = (char)v192;\n                    v155 = v191;\n                    v156 = v193 + 1;\n                }\n                goto lab_0x406526;\n            }\n        }\n        case 58: {\n            int64_t v198 = v123 + 1; // 0x406c3f\n            char v199 = *(char *)v198; // 0x406c3f\n            v1 = v198;\n            int64_t v200 = v198; // 0x406c4f\n            char v201 = v199; // 0x406c4f\n            int64_t v202 = 1; // 0x406c4f\n            if (v199 == 58) {\n                int64_t v203 = 2; // 0x406c77\n                int64_t v204 = v203 + v123; // 0x406c7b\n                char v205 = *(char *)v204; // 0x406c7b\n                v1 = v204;\n                v200 = v204;\n                v201 = v205;\n                v202 = v203;\n                int64_t v206 = v203; // 0x406c86\n                while (v205 == 58) {\n                    // 0x406c77\n                    v203 = v206 + 1;\n                    v204 = v203 + v123;\n                    v205 = *(char *)v204;\n                    v1 = v204;\n                    v200 = v204;\n                    v201 = v205;\n                    v202 = v203;\n                    v206 = v203;\n                }\n            }\n            // 0x406c51\n            v130 = v123;\n            v131 = v16;\n            v132 = v200;\n            v133 = v202;\n            if (v201 != 122) {\n                goto lab_0x406948;\n            } else {\n                goto lab_0x406a20;\n            }\n        }\n        case 65: {\n            goto lab_0x405d10;\n        }\n        case 66: {\n            goto lab_0x405d10;\n        }\n        case 67: {\n            // 0x406873\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x4062b2;\n            } else {\n                // 0x40687d\n                *v41 = 0;\n                int32_t v207 = *(int32_t *)(*tm + 20); // 0x406892\n                int32_t v208 = v207 / 100; // 0x4068a3\n                int32_t v209 = v208 + 19; // 0x4068a7\n                int32_t v210 = v207 + 1900; // 0x4068bb\n                v171 = v123;\n                v168 = v115;\n                v182 = v209 - (int32_t)(-100 * v208 + v207 < 0 == v209 >= 0 == (v209 != 0));\n                v178 = 0;\n                v157 = v210 < 0 != ((v210 ^ v207) & (v207 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40629f;\n            }\n        }\n        case 68: {\n            // 0x406007\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x406948;\n            } else {\n                // 0x406010\n                *v44 = (int64_t)\"%m/%d/%y\";\n                goto lab_0x406019;\n            }\n        }\n        case 70: {\n            // 0x406109\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 != 0) {\n                goto lab_0x406948;\n            } else {\n                // 0x406112\n                *v44 = (int64_t)\"%Y-%m-%d\";\n                goto lab_0x406019;\n            }\n        }\n        case 71: {\n            goto lab_0x406120;\n        }\n        case 72: {\n            // 0x4063b2\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x4063bc\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 8);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x406290;\n            }\n        }\n        case 73: {\n            // 0x4063cf\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x4063d9\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)v42;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x406290;\n            }\n        }\n        case 77: {\n            // 0x4063e8\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x4063f2\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 4);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x406290;\n            }\n        }\n        case 78: {\n            // 0x406405\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                uint32_t v211 = (int32_t)v115; // 0x40640f\n                if (v211 != -1) {\n                    int64_t v212 = (int64_t)*v47;\n                    int64_t v213 = v212; // 0x4070a1\n                    int64_t v214 = v115; // 0x4070a1\n                    int64_t v215 = v212; // 0x4070a1\n                    if (v211 <= 8) {\n                        int64_t v216 = v213;\n                        int64_t v217 = (v214 & 0xffffffff) + 1; // 0x4070c5\n                        int64_t v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31); // 0x4070d0\n                        v214 = v217;\n                        v215 = v218;\n                        while ((int32_t)v217 != 9) {\n                            // 0x4070c0\n                            v216 = v218;\n                            v217 = (v214 & 0xffffffff) + 1;\n                            v218 = ((int32_t)(0x66666667 * (0x100000000 * v216 >> 32) / 0x100000000) >> 2) - ((int32_t)v216 >> 31);\n                            v214 = v217;\n                            v215 = v218;\n                        }\n                    }\n                    // 0x4070d7\n                    v167 = v115;\n                    v181 = v215;\n                    v138 = v115 & 0xffffffff;\n                    v148 = v18;\n                } else {\n                    // 0x406418\n                    v167 = 9;\n                    v181 = (int64_t)*v47;\n                    v138 = 9;\n                    v148 = v18;\n                }\n                goto lab_0x406290;\n            }\n        }\n        case 80: {\n            goto lab_0x406435;\n        }\n        case 82: {\n            // 0x4063a4\n            *v44 = (int64_t)\"%H:%M\";\n            goto lab_0x406019;\n        }\n        case 83: {\n            // 0x406820\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x40682a\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)*tm;\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x406290;\n            }\n        }\n        case 84: {\n            // 0x406c69\n            *v44 = (int64_t)\"%H:%M:%S\";\n            goto lab_0x406019;\n        }\n        case 85: {\n            // 0x40683c\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                int64_t v219 = *tm; // 0x406846\n                v186 = *(int32_t *)(v219 + 28) + 7 - *(int32_t *)(v219 + 24);\n                goto lab_0x40685d;\n            }\n        }\n        case 86: {\n            goto lab_0x406120;\n        }\n        case 87: {\n            // 0x4068ce\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                int64_t v220 = *tm; // 0x4068d4\n                int32_t v221 = *(int32_t *)(v220 + 24); // 0x4068de\n                int32_t v222 = v221 + 6; // 0x4068e2\n                *v64 = v221;\n                int32_t v223 = *(int32_t *)(v220 + 28); // 0x406905\n                v186 = 1 - v221 + v223 + 7 * ((v222 + (int32_t)(-0x6db6db6d * (int64_t)v222 / 0x100000000) >> 2) - (v222 >> 31));\n                goto lab_0x40685d;\n            }\n        }\n        case 88: {\n            goto lab_0x405e50;\n        }\n        case 89: {\n            // 0x4067cd\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            v130 = v123;\n            v131 = v16;\n            switch ((int32_t)v122) {\n                case 69: {\n                    goto lab_0x4062b2;\n                }\n                case 79: {\n                    goto lab_0x406948;\n                }\n                default: {\n                    // 0x4067e1\n                    *v41 = 0;\n                    int32_t v224 = *(int32_t *)(*tm + 20); // 0x4067f1\n                    int32_t v225 = v224 + 1900; // 0x4067f4\n                    v174 = v123;\n                    v164 = v115;\n                    v185 = v225;\n                    v180 = 0;\n                    v159 = v225 < 0 != ((v225 ^ v224) & (v224 ^ -0x80000000)) < 0;\n                    v136 = 4;\n                    v145 = v18;\n                    goto lab_0x406810;\n                }\n            }\n        }\n        case 90: {\n            char v226 = v27; // 0x4062d4\n            *v43 = v226;\n            *v39 = v226 != 0 ? 0 : (char)v16;\n            int32_t len = strlen((char *)*str); // 0x4062ef\n            uint64_t v227 = (int64_t)len; // 0x4062ef\n            int64_t v228 = 0x100000000 * v115 >> 32;\n            uint64_t v229 = (int32_t)v115 >= 0 ? v228 : 0; // 0x406305\n            int64_t v230 = v229 <= v227 ? v227 : v229; // 0x40630d\n            int64_t v231 = v3 - v20; // 0x406311\n            v1 = v231;\n            *v44 = v230;\n            if (v231 <= v230) {\n                // break -> 0x405bb3\n                break;\n            }\n            int64_t v232 = v230; // 0x406325\n            int64_t v233 = 0; // 0x406325\n            if (v23 != 0) {\n                char v234 = *v39; // 0x40632a\n                char v235 = *v43; // 0x406330\n                char v236 = v235; // 0x406336\n                char v237 = v234; // 0x406336\n                int64_t v238 = v23; // 0x406336\n                if (v229 > v227) {\n                    int64_t v239 = v228 - v227; // 0x40633b\n                    v1 = v239;\n                    int64_t v240 = v239 + v23; // 0x40633e\n                    if (v18 == 48) {\n                        // 0x40725e\n                        memset((int64_t *)v23, 48, (int32_t)v239);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    } else {\n                        // 0x40634c\n                        *v43 = v235;\n                        *v39 = v234;\n                        memset((int64_t *)v23, 32, (int32_t)v1);\n                        v236 = *v43;\n                        v237 = *v39;\n                        v238 = v240;\n                    }\n                }\n                int64_t v241 = v238;\n                v1 = v227;\n                int64_t v242 = *str; // 0x406375\n                if (v236 != 0) {\n                    // 0x40719c\n                    function_405a60(v241, v242, v227);\n                } else {\n                    // 0x406386\n                    if (v237 == 0) {\n                        // 0x407192\n                        memcpy((int64_t *)v241, (int64_t *)v242, len);\n                    } else {\n                        // 0x40638f\n                        function_405ab0(v241, v242, v227);\n                    }\n                }\n                // 0x406394\n                v232 = *v44;\n                v233 = v241 + v227;\n            }\n            // 0x406397\n            v8 = v12;\n            v9 = v13;\n            v25 = v123;\n            v21 = v232 + v20;\n            v24 = v233;\n            goto lab_0x405b8e;\n        }\n        case 97: {\n            goto lab_0x405d10;\n        }\n        case 98: {\n            goto lab_0x406931;\n        }\n        case 99: {\n            goto lab_0x405e50;\n        }\n        case 100: {\n            // 0x406b0d\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x406b17\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 12);\n                v138 = 2;\n                v148 = v18;\n                goto lab_0x406290;\n            }\n        }\n        case 101: {\n            // 0x406b2a\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x406b34\n                v183 = *tm + 12;\n                goto lab_0x406461;\n            }\n        }\n        case 103: {\n            goto lab_0x406120;\n        }\n        case 104: {\n            goto lab_0x406931;\n        }\n        case 106: {\n            // 0x406b41\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x406b4b\n                *v41 = 0;\n                int32_t v243 = *(int32_t *)(*tm + 28); // 0x406b5b\n                int32_t v244 = v243 + 1; // 0x406b5e\n                v171 = v123;\n                v168 = v115;\n                v182 = v244;\n                v178 = 0;\n                v157 = v244 < 0 != (v244 & (v243 ^ -0x80000000)) < 0;\n                v139 = 3;\n                v149 = v18;\n                goto lab_0x40629f;\n            }\n        }\n        case 107: {\n            // 0x40644f\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x406459\n                v183 = *tm + 8;\n                goto lab_0x406461;\n            }\n        }\n        case 108: {\n            // 0x406486\n            v183 = v42;\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                goto lab_0x406461;\n            }\n        }\n        case 109: {\n            // 0x406496\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x4064a0\n                *v41 = 0;\n                int32_t v245 = *(int32_t *)(*tm + 16); // 0x4064b0\n                int32_t v246 = v245 + 1; // 0x4064b3\n                v171 = v123;\n                v168 = v115;\n                v182 = v246;\n                v178 = 0;\n                v157 = v246 < 0 != (v246 & (v245 ^ -0x80000000)) < 0;\n                v139 = 2;\n                v149 = v18;\n                goto lab_0x40629f;\n            }\n        }\n        case 110: {\n            int32_t v247 = v115; // 0x4064c4\n            int64_t v248 = 0x100000000 * v115 >> 32;\n            int64_t v249 = v247 >= 0 ? v248 : 0; // 0x4064d5\n            int64_t v250 = v249 == 0 ? 1 : v249; // 0x4064db\n            if (v3 - v20 <= v250) {\n                // break -> 0x405bb3\n                break;\n            }\n            // 0x4064ef\n            v155 = v250;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v251 = v23; // 0x4064f7\n                if (v247 >= 2) {\n                    int64_t v252 = v248 - 1; // 0x4064fc\n                    v1 = v252;\n                    int64_t v253 = v252 + v23; // 0x406500\n                    int64_t * v254 = (int64_t *)v23;\n                    int32_t v255 = v252;\n                    if (v18 == 48) {\n                        // 0x4071eb\n                        memset(v254, 48, v255);\n                        v251 = v253;\n                    } else {\n                        // 0x40650e\n                        memset(v254, 32, v255);\n                        v251 = v253;\n                    }\n                }\n                // 0x40651e\n                *(char *)v251 = 10;\n                v155 = v250;\n                v156 = v251 + 1;\n            }\n            goto lab_0x406526;\n        }\n        case 112: {\n            // 0x406c61\n            v129 = 0;\n            goto lab_0x406435;\n        }\n        case 113: {\n            // 0x406531\n            v172 = v123;\n            v169 = v115;\n            v140 = 1;\n            v150 = v18;\n            if ((int32_t)v122 == 79) {\n                goto lab_0x4062b2;\n            } else {\n                // 0x406549\n                *v41 = 0;\n                v173 = v123;\n                v163 = v115;\n                v184 = (int64_t)((11 * *(int32_t *)(*tm + 16) >> 5) + 1);\n                v179 = 0;\n                v158 = 0;\n                v141 = 1;\n                v151 = v18;\n                goto lab_0x406560;\n            }\n        }\n        case 114: {\n            goto lab_0x405e5d;\n        }\n        case 115: {\n            int64_t v256 = *tm; // 0x405e7d\n            *v39 = (char)v16;\n            int128_t v257 = __asm_movdqu(*(int128_t *)(v256 + 32)); // 0x405e9f\n            int128_t v258 = __asm_movdqu(*(int128_t *)v256); // 0x405ea4\n            int128_t v259 = __asm_movdqu(*(int128_t *)(v256 + 16)); // 0x405ea8\n            *(int128_t *)str2 = (int128_t)__asm_movaps(v258);\n            *(int128_t *)(v49 + 160) = (int128_t)__asm_movaps(v259);\n            *(int128_t *)v63 = (int128_t)__asm_movaps(v257);\n            *(int128_t *)(v49 + 176) = (int128_t)__asm_movaps(v257);\n            *(int64_t *)(v49 + 192) = *(int64_t *)(v256 + 48);\n            int64_t v260 = function_40c500(*v65, str2, v1, v124); // 0x405ed6\n            int64_t v261 = v260;\n            int64_t v262 = v261 >> 63; // 0x405f08\n            int64_t v263 = (v261 >> 63 & -10) + v261; // 0x405f15\n            int64_t v264 = (v260 < 0 ? -v263 : v263) + 48; // 0x405f28\n            v1 = v264 & 0xffffffff;\n            int64_t v265 = v40 - 1; // 0x405f2b\n            *(char *)v265 = (char)v264;\n            int64_t v266 = v265; // 0x405f36\n            while (v262 != 0) {\n                // 0x405ef0\n                v261 = v262;\n                v262 = v261 >> 63;\n                v263 = (v261 >> 63 & -10) + v261;\n                v264 = (v260 < 0 ? -v263 : v263) + 48;\n                v1 = v264 & 0xffffffff;\n                v265 = v266 - 1;\n                *(char *)v265 = (char)v264;\n                v266 = v265;\n            }\n            int64_t v267 = (int64_t)*v39; // 0x405edb\n            int32_t v268 = v115; // 0x405f38\n            int64_t v269 = v268 >= 0 == (v268 != 0) ? v115 & 0xffffffff : 1; // 0x405f40\n            v170 = v123;\n            v166 = v115;\n            v135 = v269;\n            v144 = v267;\n            v147 = v18;\n            v154 = v265;\n            v175 = v123;\n            v165 = v115;\n            v137 = v269;\n            v143 = v267;\n            v146 = v18;\n            v153 = v265;\n            if (v260 < 0) {\n                goto lab_0x406ca8;\n            } else {\n                goto lab_0x405f4d;\n            }\n        }\n        case 116: {\n            int32_t v270 = v115; // 0x406724\n            int64_t v271 = 0x100000000 * v115 >> 32;\n            int64_t v272 = v270 >= 0 ? v271 : 0; // 0x406735\n            int64_t v273 = v272 == 0 ? 1 : v272; // 0x40673b\n            if (v3 - v20 <= v273) {\n                // break -> 0x405bb3\n                break;\n            }\n            // 0x40674f\n            v155 = v273;\n            v156 = 0;\n            if (v23 != 0) {\n                int64_t v274 = v23; // 0x40675b\n                if (v270 >= 2) {\n                    int64_t v275 = v271 - 1; // 0x406760\n                    v1 = v275;\n                    int64_t v276 = v275 + v23; // 0x406764\n                    int64_t * v277 = (int64_t *)v23;\n                    int32_t v278 = v275;\n                    if (v18 == 48) {\n                        // 0x407200\n                        memset(v277, 48, v278);\n                        v274 = v276;\n                    } else {\n                        // 0x406772\n                        memset(v277, 32, v278);\n                        v274 = v276;\n                    }\n                }\n                // 0x406782\n                *(char *)v274 = 9;\n                v155 = v273;\n                v156 = v274 + 1;\n            }\n            goto lab_0x406526;\n        }\n        case 117: {\n            int32_t v279 = *(int32_t *)(*tm + 24); // 0x40679f\n            int32_t v280 = v279 + 6; // 0x4067a2\n            *v64 = v279;\n            v167 = v115;\n            v181 = v279 + 7 + -7 * ((v280 + (int32_t)(-0x6db6db6d * (int64_t)v280 / 0x100000000) >> 2) - (v280 >> 31));\n            v138 = 1;\n            v148 = v18;\n            goto lab_0x406290;\n        }\n        case 119: {\n            // 0x406918\n            v130 = v123;\n            v131 = v16;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x406948;\n            } else {\n                // 0x40691e\n                v167 = v115;\n                v181 = (int64_t)*(int32_t *)(*tm + 24);\n                v138 = 1;\n                v148 = v18;\n                goto lab_0x406290;\n            }\n        }\n        case 120: {\n            goto lab_0x405e50;\n        }\n        case 121: {\n            // 0x406bf0\n            v172 = v123;\n            v169 = v115;\n            v140 = 0;\n            v150 = v18;\n            if ((int32_t)v122 == 69) {\n                goto lab_0x4062b2;\n            } else {\n                int32_t v281 = *(int32_t *)(*tm + 20); // 0x406c0a\n                int32_t v282 = v281 % 100;\n                int64_t v283 = v282; // 0x406c22\n                v167 = v115;\n                v181 = v283;\n                v138 = 2;\n                v148 = v18;\n                if (v282 < 0) {\n                    int32_t v284 = v281 + 1901; // 0x406c31\n                    int64_t v285 = v284 == 0 | v284 < 0 != ((v284 ^ v281) & (v281 ^ -0x80000000)) < 0 ? -v283 : v283 + 100; // 0x406c37\n                    v167 = v115;\n                    v181 = v285 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n                goto lab_0x406290;\n            }\n        }\n        case 122: {\n            goto lab_0x406a20;\n        }\n        default: {\n            goto lab_0x406948;\n        }\n    }\n  lab_0x405b8e:\n    // 0x405b8e\n    v5 = v24;\n    result = v21;\n    int64_t v286 = v25 + 1; // 0x405b8e\n    char v287 = *(char *)v286; // 0x405b8e\n    v6 = v8;\n    v7 = v9;\n    v30 = v287;\n    v33 = v286;\n    v19 = result;\n    v22 = v5;\n    if (v287 == 0) {\n        // 0x405b9b\n        goto lab_0x405b9b_2;\n    }\n    goto lab_0x405b6a;\n  lab_0x405d10:\n    // 0x405d10\n    v130 = v123;\n    v131 = v16;\n    int64_t v288; // 0x405b00\n    if ((int32_t)v122 != 0) {\n        goto lab_0x406948;\n    } else {\n        // 0x405d19\n        v288 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff;\n        goto lab_0x405d20;\n    }\n  lab_0x406120:\n    // 0x406120\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 69) {\n        goto lab_0x406948;\n    } else {\n        int64_t v289 = *tm; // 0x40612a\n        int32_t v290 = *(int32_t *)(v289 + 20); // 0x40612f\n        uint32_t v291 = *(int32_t *)(v289 + 28); // 0x406132\n        uint32_t v292 = *(int32_t *)(v289 + 24); // 0x406136\n        *v64 = v290;\n        int32_t v293 = v290 - 100 + (v290 >> 31 & 400); // 0x40614d\n        int32_t v294 = v291 - v292; // 0x406154\n        int32_t v295 = v294 + 382; // 0x406157\n        int32_t v296 = v291 - 379 - v294 + 7 * ((v295 + (int32_t)(-0x6db6db6d * (int64_t)v295 / 0x100000000) >> 2) - (v295 >> 31)); // 0x40617e\n        int32_t v297; // 0x405b00\n        int32_t v298; // 0x406209\n        if (v296 < 0) {\n            // 0x407017\n            v1 = 365;\n            int64_t v299 = 365; // 0x407023\n            if ((v293 + 3) % 4 == 0) {\n                int32_t v300 = v293 - 1;\n                v1 = 366;\n                v299 = 366;\n                if (v300 % 100 - v300 == 1 - v293) {\n                    uint32_t v301 = v300 % 400;\n                    int64_t v302 = v301; // 0x40704e\n                    int64_t v303 = v302 + 366 + (v302 ^ 0xffffffff) + (int64_t)(v301 == 0) & 0xffffffff; // 0x407057\n                    v1 = v303;\n                    v299 = v303;\n                }\n            }\n            int64_t v304 = v299; // 0x40705d\n            int64_t v305; // 0x406132\n            int64_t v306 = v304 + v305; // 0x40705d\n            int64_t v307; // 0x406136\n            int64_t v308 = v306 - v307 + 382; // 0x407071\n            v297 = (int32_t)(v306 - v308) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v308 >> 32) / 0x100000000 + v308) >> 2) - ((int32_t)v308 >> 31));\n        } else {\n            int64_t v309 = 365; // 0x406195\n            if (v293 % 4 == 0) {\n                // 0x406197\n                v309 = 366;\n                if (v293 % 100 == 0) {\n                    // 0x4061bc\n                    v309 = v293 == 0 ? 366 : 365;\n                }\n            }\n            int64_t v310 = (int64_t)v291 - v309; // 0x4061e0\n            int64_t v311 = v310 - (int64_t)v292 + 382; // 0x4061e7\n            v298 = (int32_t)(v310 - v311) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v311 >> 32) / 0x100000000 + v311) >> 2) - ((int32_t)v311 >> 31));\n            v297 = v298 >= 0 ? v298 : v296;\n        }\n        int64_t v312 = (v298 >> 31) + 1;\n        if (v125 == 71) {\n            uint32_t v313 = *v64; // 0x407105\n            *v41 = 0;\n            int32_t v314 = -1900 - (int32_t)v312; // 0x407119\n            int32_t v315 = v313 - v314; // 0x40711c\n            v171 = v123;\n            v168 = v115;\n            v182 = v312 + 1900 + (int64_t)v313 & 0xffffffff;\n            v178 = 0;\n            v157 = v315 < 0 != ((v315 ^ v313) & (v313 ^ v314)) < 0;\n            v139 = 4;\n            v149 = v18;\n            goto lab_0x40629f;\n        } else {\n            if (v125 != 103) {\n                int32_t v316 = v297;\n                int32_t v317 = v316 < 0 ? 2 : 1; // 0x4070fa\n                v167 = v115;\n                v181 = v317 + (v316 + (int32_t)(-0x6db6db6d * (int64_t)v316 / 0x100000000) >> 2);\n                v138 = 2;\n                v148 = v18;\n            } else {\n                int32_t v318 = *v64; // 0x40622f\n                int32_t v319 = v312; // 0x40625a\n                int32_t v320 = (v318 % 100 + v319) % 100;\n                int64_t v321 = v320; // 0x406270\n                v167 = v115;\n                v181 = v321;\n                v138 = 2;\n                v148 = v18;\n                if (v320 < 0) {\n                    int32_t v322 = -1900 - v319; // 0x406280\n                    int32_t v323 = v318 - v322; // 0x406285\n                    int64_t v324 = v323 < 0 == ((v323 ^ v318) & (v318 ^ v322)) < 0 ? v321 + 100 : -v321; // 0x406288\n                    v167 = v115;\n                    v181 = v324 & 0xffffffff;\n                    v138 = 2;\n                    v148 = v18;\n                }\n            }\n            goto lab_0x406290;\n        }\n    }\n  lab_0x406435:\n    // 0x406435\n    v126 = 112;\n    v127 = (char)v27 != 0 ? 0 : v16;\n    v128 = ((char)v27 != 0 ? v27 : v129) & 0xffffffff;\n    goto lab_0x405e5d;\n  lab_0x405e50:\n    // 0x405e50\n    v126 = v124;\n    v127 = v16;\n    v128 = 0;\n    v130 = v123;\n    v131 = v16;\n    if ((int32_t)v122 == 79) {\n        goto lab_0x406948;\n    } else {\n        goto lab_0x405e5d;\n    }\n  lab_0x406931:;\n    int64_t v660 = ((char)v27 != 0 ? v27 : v16) & 0xffffffff; // 0x406934\n    v288 = v660;\n    v130 = v123;\n    v131 = v660;\n    if ((int32_t)v122 == 0) {\n        goto lab_0x405d20;\n    } else {\n        goto lab_0x406948;\n    }\n  lab_0x405e5d:;\n    int64_t v325 = v128;\n    int64_t v326 = v127;\n    int64_t v327 = v126;\n    *v45 = 0x2520;\n    int64_t v328 = v327; // 0x405e6a\n    int64_t v329 = v123; // 0x405e6a\n    int64_t v330 = v115; // 0x405e6a\n    int64_t v331 = 0; // 0x405e6a\n    int64_t v332 = v326; // 0x405e6a\n    int64_t v333 = v18; // 0x405e6a\n    int64_t v334 = v325; // 0x405e6a\n    int64_t v335; // 0x405b00\n    int64_t v336; // 0x405b00\n    int64_t v337; // 0x405b00\n    int64_t v338; // 0x405b00\n    int64_t v339; // 0x405b00\n    int64_t v340; // 0x405b00\n    int64_t v341; // 0x405b00\n    int64_t v342; // 0x405b00\n    if ((int32_t)v122 != 0) {\n        goto lab_0x4062bf;\n    } else {\n        // 0x405e70\n        v340 = *v46;\n        v342 = v327;\n        v341 = v115;\n        v338 = v123;\n        v339 = v122;\n        v335 = v326;\n        v336 = v18;\n        v337 = v325;\n        goto lab_0x405d40;\n    }\n  lab_0x406a20:;\n    int64_t v343 = v132;\n    int64_t v344 = *tm; // 0x406a20\n    v8 = v12;\n    v9 = v13;\n    v25 = v343;\n    v21 = v20;\n    v24 = v23;\n    int64_t v345; // 0x405b00\n    uint32_t v346; // 0x406a6e\n    uint32_t v347; // 0x406aa3\n    int32_t v348; // 0x406aa7\n    if (*(int32_t *)(v344 + 32) < 0) {\n        goto lab_0x405b8e;\n    } else {\n        int64_t v349 = *(int64_t *)(v344 + 40); // 0x406a30\n        int32_t v350 = v349; // 0x406a3a\n        int64_t v351 = 1; // 0x406a3c\n        if (v350 >= 0) {\n            // 0x406a3e\n            v351 = 0;\n            if (v350 == 0) {\n                // 0x406a46\n                v351 = *(char *)*str == 45;\n            }\n        }\n        // 0x406a52\n        v345 = v351;\n        int64_t v352 = 0x100000000 * v349 >> 32; // 0x406a5e\n        int32_t v353 = v350 >> 31; // 0x406a62\n        *v48 = v353;\n        v346 = ((int32_t)(-0x6e5d4c3b * v352 / 0x100000000) + v350 >> 11) - v353;\n        *v64 = v346;\n        int32_t v354 = ((int32_t)(-0x77777777 * v352 / 0x100000000 + v349) >> 5) - *v48; // 0x406a80\n        v347 = -60 * ((v354 + (int32_t)(-0x77777777 * (int64_t)v354 / 0x100000000) >> 5) - (v354 >> 31)) + v354;\n        v348 = -60 * v354 + v350;\n        v177 = v343;\n        switch (v133) {\n            case 1: {\n                goto lab_0x407176;\n            }\n            case 0: {\n                // 0x4071a6\n                *v41 = 1;\n                v171 = v343;\n                v168 = v115;\n                v182 = v347 + 100 * v346;\n                v178 = 0;\n                v157 = v345;\n                v139 = 5;\n                v149 = v18;\n                goto lab_0x40629f;\n            }\n            case 2: {\n                goto lab_0x407152;\n            }\n            case 3: {\n                if (v348 != 0) {\n                    goto lab_0x407152;\n                } else {\n                    if (v347 != 0) {\n                        goto lab_0x407176;\n                    } else {\n                        // 0x4071c7\n                        *v41 = 1;\n                        v171 = v343;\n                        v168 = v115;\n                        v182 = v346;\n                        v178 = v347;\n                        v157 = v345;\n                        v139 = 3;\n                        v149 = v18;\n                        goto lab_0x40629f;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x406ad7;\n            }\n        }\n    }\n  lab_0x406948:;\n    int64_t v355 = v130 + 1; // 0x40694c\n    v1 = v355 & 0xffffffff;\n    int64_t v356 = v130 - 1;\n    int64_t v357 = v356; // 0x40695e\n    while (*(char *)v356 != 37) {\n        // 0x40694f\n        v356 = v357 - 1;\n        v357 = v356;\n    }\n    int64_t v358 = 0x100000000 * (v355 - v356) >> 32; // 0x406969\n    int64_t v359 = v3 - v20; // 0x40696f\n    v1 = v359;\n    int64_t v360 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x406977\n    v134 = v359;\n    v162 = v360;\n    v176 = v358;\n    v160 = v130;\n    v161 = v356;\n    v142 = v131;\n    v152 = v358 >= v360 ? v358 : v360;\n    goto lab_0x406983;\n  lab_0x406983:\n    // 0x406983\n    if (v134 <= v152) {\n        // break -> 0x405bb3\n        goto lab_0x405bb3_11;\n    }\n    int64_t v361 = v160;\n    int64_t v362 = v361; // 0x40698f\n    int64_t v363 = 0; // 0x40698f\n    if (v23 != 0) {\n        int64_t v364 = v142;\n        int64_t v365 = v161;\n        int64_t v366 = v176;\n        int64_t v367 = v366; // 0x406998\n        int64_t v368 = v361; // 0x406998\n        int64_t v369 = v365; // 0x406998\n        int64_t v370 = v364; // 0x406998\n        int64_t v371 = v23; // 0x406998\n        if (v366 < v162) {\n            // 0x40699a\n            *v54 = v366;\n            int64_t v372 = (0x100000000 * v115 >> 32) - v366; // 0x4069a2\n            v1 = v372;\n            *v55 = v361;\n            int64_t v373 = v372 + v23; // 0x4069aa\n            *v53 = v365;\n            *v41 = (char)v364;\n            int64_t * v374 = (int64_t *)v23;\n            int32_t v375 = v1;\n            if (v18 == 48) {\n                // 0x406f24\n                memset(v374, 48, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            } else {\n                // 0x4069c2\n                memset(v374, 32, v375);\n                v367 = *v54;\n                v368 = *v55;\n                v369 = *v53;\n                v370 = (int64_t)*v41;\n                v371 = v373;\n            }\n        }\n        int64_t v376 = v371;\n        int64_t v377 = v369;\n        *v53 = v368;\n        v1 = v367;\n        *v44 = v367;\n        if ((char)v370 == 0) {\n            // 0x406d6e\n            memcpy((int64_t *)v376, (int64_t *)v377, (int32_t)v1);\n        } else {\n            // 0x406a03\n            function_405ab0(v376, v377, v1);\n        }\n        // 0x406a12\n        v362 = *v53;\n        v363 = *v44 + v376;\n    }\n    // 0x406a15\n    v8 = v12;\n    v9 = v13;\n    v25 = v362;\n    v21 = v152 + v20;\n    v24 = v363;\n    goto lab_0x405b8e;\n  lab_0x406ad7:;\n    int64_t v378 = v177;\n    int64_t v379 = v3 - v20; // 0x406ae0\n    v1 = v379;\n    v130 = v378;\n    v131 = v16;\n    if (*(char *)v378 != 37) {\n        goto lab_0x406948;\n    } else {\n        int64_t v380 = (int32_t)v115 >= 0 ? 0x100000000 * v115 >> 32 : 0; // 0x406ae8\n        v134 = v379;\n        v162 = v380;\n        v176 = 1;\n        v160 = v378;\n        v161 = v378;\n        v142 = v16;\n        v152 = v380 != 0 ? v380 : 1;\n        goto lab_0x406983;\n    }\n  lab_0x4062b2:\n    // 0x4062b2\n    *v45 = 0x2520;\n    v328 = v124;\n    v329 = v172;\n    v330 = v169;\n    v331 = v140;\n    v332 = v16;\n    v333 = v150;\n    v334 = 0;\n    goto lab_0x4062bf;\n  lab_0x406019:\n    // 0x406019\n    *v50 = (int64_t)*v47;\n    *v51 = *v65;\n    int64_t v643 = *v44; // 0x406042\n    v1 = v643;\n    uint64_t v644 = function_405b00(0, -1, v643, *tm, v16, *v52); // 0x406047\n    int64_t v645 = 0x100000000 * v115 >> 32;\n    uint64_t v646 = (int32_t)v115 >= 0 ? v645 : 0; // 0x406060\n    int64_t v647 = v644 >= v646 ? v644 : v646; // 0x406068\n    int64_t v648 = v3 - v20; // 0x40606c\n    *v53 = v647;\n    if (v648 <= v647) {\n        // break -> 0x405bb3\n        goto lab_0x405bb3_11;\n    }\n    int64_t v649 = v647; // 0x406080\n    int64_t v650 = 0; // 0x406080\n    if (v23 != 0) {\n        int64_t v651 = v644; // 0x406085\n        int64_t v652 = v648; // 0x406085\n        int64_t v653 = v23; // 0x406085\n        if (v644 < v646) {\n            // 0x406087\n            *v54 = v644;\n            int64_t v654 = v645 - v644; // 0x40608f\n            v1 = v654;\n            *v55 = v648;\n            int64_t v655 = v654 + v23; // 0x406097\n            int64_t * v656 = (int64_t *)v23;\n            int32_t v657 = v1;\n            if (v18 == 48) {\n                // 0x406ff8\n                memset(v656, 48, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            } else {\n                // 0x4060a5\n                memset(v656, 32, v657);\n                v651 = *v54;\n                v652 = *v55;\n                v653 = v655;\n            }\n        }\n        // 0x4060bf\n        *v55 = v651;\n        *v50 = (int64_t)*v47;\n        *v51 = *v65;\n        int64_t v658 = *v44; // 0x4060e6\n        v1 = v658;\n        function_405b00((int32_t)v653, v652, v658, *tm, v16, *v52);\n        v649 = *v53;\n        v650 = *v55 + v653;\n    }\n    // 0x4060fc\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v649 + v20;\n    v24 = v650;\n    goto lab_0x405b8e;\n  lab_0x405d20:\n    // 0x405d20\n    *v45 = 0x2520;\n    v340 = *v46;\n    v342 = v124;\n    v341 = v115;\n    v338 = v123;\n    v339 = 0;\n    v335 = v288;\n    v336 = v18;\n    v337 = 0;\n    goto lab_0x405d40;\n  lab_0x406461:;\n    int64_t v659 = (int64_t)*(int32_t *)v183;\n    v167 = v115;\n    v181 = v659;\n    v138 = 2;\n    v148 = v18;\n    switch ((int32_t)v18) {\n        case 48: {\n            goto lab_0x406290;\n        }\n        case 45: {\n            goto lab_0x406290;\n        }\n        default: {\n            // 0x40647b\n            v167 = v115;\n            v181 = v659;\n            v138 = 2;\n            v148 = 95;\n            goto lab_0x406290;\n        }\n    }\n  lab_0x406526:\n    // 0x406526\n    v8 = v12;\n    v9 = v13;\n    v25 = v123;\n    v21 = v155 + v20;\n    v24 = v156;\n    goto lab_0x405b8e;\n  lab_0x4062bf:\n    // 0x4062bf\n    *(char *)(v49 + 114) = (char)v122;\n    v340 = v49 + 115;\n    v342 = v328;\n    v341 = v330;\n    v338 = v329;\n    v339 = v331 & 0xffffffff;\n    v335 = v332;\n    v336 = v333;\n    v337 = v334;\n    goto lab_0x405d40;\n  lab_0x406ca8:;\n    int64_t v630 = v153;\n    int64_t v631 = v143;\n    int64_t v632 = v137;\n    int64_t v633 = v165;\n    int64_t v634 = v175;\n    *v41 = 45;\n    char v436 = 45; // 0x406cb6\n    int64_t v437 = v634; // 0x406cb6\n    int64_t v438 = v633; // 0x406cb6\n    int64_t v439 = v632; // 0x406cb6\n    int64_t v440 = v631; // 0x406cb6\n    int64_t v441 = v146; // 0x406cb6\n    int64_t v442 = v630; // 0x406cb6\n    int32_t v429; // 0x405b00\n    int64_t v433; // 0x405b00\n    int64_t v434; // 0x405b00\n    int64_t v435; // 0x405b00\n    int64_t v432; // 0x405b00\n    int64_t v431; // 0x405b00\n    int64_t v430; // 0x405b00\n    if ((int32_t)v146 != 45) {\n        goto lab_0x4065f0;\n    } else {\n        // 0x406ca8\n        v429 = v633;\n        v430 = 45;\n        v431 = v634;\n        v432 = v633;\n        v433 = v632;\n        v434 = v631;\n        v435 = v630;\n        goto lab_0x406cbc;\n    }\n  lab_0x405f4d:;\n    int64_t v524 = v135;\n    int64_t v523 = v166;\n    int64_t v522 = v40 - v154; // 0x405f59\n    char v505; // 0x405b00\n    int64_t v510; // 0x405b00\n    int64_t v511; // 0x405b00\n    int64_t v512; // 0x405b00\n    int64_t v509; // 0x405b00\n    int64_t v506; // 0x405b00\n    int64_t v508; // 0x405b00\n    int64_t v507; // 0x405b00\n    if ((int32_t)v147 == 45) {\n        goto lab_0x405f74;\n    } else {\n        int32_t v635 = v524 - v522; // 0x405f6b\n        if (v635 >= 0 == (v635 != 0)) {\n            int64_t v636; // 0x405f5c\n            int32_t v637; // 0x405f5f\n            if (v637 == 95) {\n                // 0x406e6e\n                *v41 = 0;\n                v505 = 0;\n                v506 = v636;\n                int64_t v638; // 0x405b00\n                v507 = v638;\n                v508 = v523;\n                int64_t v639; // 0x405f68\n                v509 = v639;\n                v510 = v524;\n                int64_t v640; // 0x405b00\n                v511 = v640;\n                int64_t v641; // 0x405b00\n                v512 = v641;\n                goto lab_0x406e73;\n            } else {\n                int64_t v642 = 0x100000000 * v524 >> 32; // 0x40713b\n                v1 = v642;\n                if (v642 >= v636) {\n                    // break -> 0x405bb3\n                    goto lab_0x405bb3_11;\n                }\n                // 0x407147\n                goto lab_0x4066c5;\n            }\n        } else {\n            goto lab_0x405f74;\n        }\n    }\n  lab_0x406290:\n    // 0x406290\n    *v41 = 0;\n    v171 = v123;\n    v168 = v167;\n    v182 = v181;\n    v178 = 0;\n    v157 = 0;\n    v139 = v138;\n    v149 = v148;\n    goto lab_0x40629f;\n  lab_0x40629f:;\n    int64_t v596 = v149;\n    int64_t v597 = v139;\n    int64_t v598 = v157;\n    int64_t v599 = v178;\n    int64_t v600 = v182;\n    int64_t v601 = v168;\n    int64_t v602 = v171;\n    v174 = v602;\n    v164 = v601;\n    v185 = v600;\n    v180 = v599;\n    v159 = v598;\n    v136 = v597;\n    v145 = v596;\n    int64_t v603; // 0x405b00\n    int64_t v604; // 0x405b00\n    int64_t v605; // 0x405b00\n    int64_t v606; // 0x405b00\n    int64_t v607; // 0x405b00\n    int64_t v608; // 0x405b00\n    int64_t v609; // 0x405b00\n    if ((int32_t)v122 != 79) {\n        goto lab_0x406810;\n    } else {\n        // 0x4062a9\n        v172 = v602;\n        v169 = v601;\n        v140 = v597;\n        v150 = v596;\n        v607 = v602;\n        v606 = v601;\n        v609 = v600;\n        v608 = v599;\n        v605 = v598;\n        v603 = v597;\n        v604 = v596;\n        if ((char)v598 != 0) {\n            goto lab_0x406819;\n        } else {\n            goto lab_0x4062b2;\n        }\n    }\n  lab_0x40685d:;\n    int32_t v610 = v186;\n    int64_t v611 = -0x6db6db6d * (int64_t)v610 / 0x100000000;\n    v1 = v611;\n    v167 = v115;\n    v181 = (v610 + (int32_t)v611 >> 2) - (v610 >> 31);\n    v138 = 2;\n    v148 = v18;\n    goto lab_0x406290;\n  lab_0x406810:\n    // 0x406810\n    v173 = v174;\n    v163 = v164;\n    v184 = v185;\n    v179 = v180;\n    v158 = v159;\n    v141 = v136;\n    v151 = v145;\n    v607 = v174;\n    v606 = v164;\n    v609 = v185;\n    v608 = v180;\n    v605 = v159;\n    v603 = v136;\n    v604 = v145;\n    if ((char)v159 == 0) {\n        goto lab_0x406560;\n    } else {\n        goto lab_0x406819;\n    }\n  lab_0x405d40:;\n    int64_t v381 = v337;\n    int64_t v382 = v336;\n    int64_t v383 = v341;\n    *(char *)v340 = (char)v342;\n    v1 = format;\n    *(char *)(v340 + 1) = 0;\n    *v44 = v338;\n    *v56 = (int32_t)v339;\n    *v39 = (char)v335;\n    int32_t copied_chars = strftime((char *)str2, 1024, (char *)format, (struct tm *)*tm); // 0x405d6c\n    int64_t v384 = *v44; // 0x405d71\n    v8 = v12;\n    v9 = v13;\n    v25 = v384;\n    v21 = v20;\n    v24 = v23;\n    int64_t v385; // 0x405b00\n    int64_t v386; // 0x405b00\n    int64_t v387; // 0x405b00\n    int64_t v388; // 0x405b00\n    int64_t v389; // 0x405b00\n    int64_t v390; // 0x405b00\n    int64_t v391; // 0x405b00\n    int64_t v392; // 0x405b00\n    int64_t v393; // 0x405b00\n    int64_t v394; // 0x405b00\n    int64_t v395; // 0x405b00\n    int64_t v396; // 0x405b00\n    if (copied_chars == 0) {\n        goto lab_0x405b8e;\n    } else {\n        uint64_t v397 = (int64_t)copied_chars - 1; // 0x405d7f\n        int64_t v398 = 0x100000000 * v383 >> 32;\n        uint64_t v399 = (int32_t)v383 >= 0 ? v398 : 0; // 0x405d91\n        int64_t v400 = v397 >= v399 ? v397 : v399; // 0x405d99\n        int64_t v401 = v3 - v20; // 0x405d9d\n        v1 = v401;\n        if (v401 <= v400) {\n            // break -> 0x405bb3\n            goto lab_0x405bb3_11;\n        }\n        // 0x405da9\n        v392 = v400;\n        v391 = v384;\n        v388 = v20;\n        v390 = 0;\n        if (v23 == 0) {\n            goto lab_0x405e46;\n        } else {\n            char v402 = *v39; // 0x405db7\n            int64_t v403 = v397; // 0x405dc0\n            int64_t v404 = v384; // 0x405dc0\n            char v405 = v402; // 0x405dc0\n            int64_t v406 = v23; // 0x405dc0\n            if (v397 < v399 == *v56 == 0) {\n                // 0x405dc7\n                *v55 = v397;\n                int64_t v407 = v398 - v397; // 0x405dcf\n                v1 = v407;\n                *v53 = v384;\n                int64_t v408 = v407 + v23; // 0x405dd7\n                *v41 = v402;\n                int64_t * v409 = (int64_t *)v23;\n                int32_t v410 = v1;\n                if ((int32_t)v382 == 48) {\n                    // 0x406d96\n                    memset(v409, 48, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                } else {\n                    // 0x405dea\n                    memset(v409, 32, v410);\n                    v403 = *v55;\n                    v404 = *v53;\n                    v405 = *v41;\n                    v406 = v408;\n                }\n            }\n            int64_t v411 = v406;\n            *v53 = v404;\n            v1 = v403;\n            *v44 = v403;\n            v393 = v400;\n            v396 = v57;\n            v395 = v411;\n            v385 = v405;\n            v386 = v20;\n            if ((char)v381 != 0) {\n                // 0x406d82\n                function_405a60(v411, v57, v1);\n                v394 = v400;\n                v387 = v20;\n                v389 = v411;\n                goto lab_0x405e43;\n            } else {\n                goto lab_0x405e2b;\n            }\n        }\n    }\n  lab_0x406560:;\n    int64_t v412 = v151;\n    int64_t v413 = v141;\n    int64_t v414 = v163;\n    int64_t v415 = v173;\n    *v39 = (char)v158;\n    int64_t v416 = v184; // 0x406573\n    int64_t v417 = v40 - 1;\n    int64_t v418 = v417; // 0x406580\n    if (v179 % 2 != 0) {\n        // 0x406582\n        *(char *)v417 = 58;\n        v418 = v40 - 2;\n    }\n    int64_t v419 = v418;\n    uint32_t v420 = (int32_t)v179 >> 1; // 0x406595\n    int64_t v421 = 0xcccccccd * v416 / 0x800000000; // 0x406597\n    v1 = v421;\n    *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    while (v416 < 10 != (v420 == 0)) {\n        // 0x4065ba\n        v416 = v1 & 0xffffffff;\n        int64_t v422 = v420; // 0x4065bc\n        int64_t v423 = v419;\n        v417 = v423 - 1;\n        v418 = v417;\n        if (v422 % 2 != 0) {\n            // 0x406582\n            *(char *)v417 = 58;\n            v418 = v423 - 2;\n        }\n        // 0x406590\n        v419 = v418;\n        v420 = (int32_t)v422 >> 1;\n        v421 = 0xcccccccd * v416 / 0x800000000;\n        v1 = v421;\n        *(char *)v419 = (char)v416 + 48 + -10 * (char)v421;\n    }\n    int32_t v424 = v413; // 0x4065c6\n    int32_t v425 = v414;\n    int32_t v426 = v424 - v425; // 0x4065c6\n    int64_t v427 = v426 < 0 == ((v426 ^ v424) & (int32_t)(v413 ^ v414)) < 0 ? v413 : v414;\n    int64_t v428 = v427 & 0xffffffff; // 0x4065c9\n    v175 = v415;\n    v165 = v414;\n    v137 = v428;\n    v143 = v16;\n    v146 = v412;\n    v153 = v419;\n    if (*v39 != 0) {\n        goto lab_0x406ca8;\n    } else {\n        // 0x4065d6\n        v170 = v415;\n        v166 = v414;\n        v135 = v428;\n        v144 = v16;\n        v147 = v412;\n        v154 = v419;\n        if (*v41 == 0) {\n            goto lab_0x405f4d;\n        } else {\n            // 0x4065e1\n            v429 = v425;\n            v430 = 43;\n            v431 = v415;\n            v432 = v414;\n            v433 = v428;\n            v434 = v16;\n            v435 = v419;\n            if ((int32_t)v412 == 45) {\n                goto lab_0x406cbc;\n            } else {\n                // 0x4065eb\n                *v41 = 43;\n                v436 = 43;\n                v437 = v415;\n                v438 = v414;\n                v439 = v428;\n                v440 = v16;\n                v441 = v412;\n                v442 = v419;\n                goto lab_0x4065f0;\n            }\n        }\n    }\n  lab_0x4065f0:;\n    int64_t v443 = v442;\n    int64_t v444 = v441;\n    int64_t v445 = v440;\n    int64_t v446 = v439;\n    int64_t v447 = v438;\n    int64_t v448 = v437;\n    int64_t v449 = v40 - v443; // 0x406600\n    int64_t v450 = (v449 ^ 0xffffffff) + v446; // 0x406603\n    uint64_t v451 = v3 - v20; // 0x406606\n    int64_t v452; // 0x405b00\n    int64_t v453; // 0x405b00\n    int64_t v454; // 0x405b00\n    int64_t v455; // 0x405b00\n    int64_t v456; // 0x405b00\n    int64_t v457; // 0x405b00\n    int64_t v458; // 0x405b00\n    int64_t v459; // 0x405b00\n    int64_t v460; // 0x405b00\n    int64_t v461; // 0x405b00\n    int64_t v462; // 0x405b00\n    int64_t v463; // 0x405b00\n    int64_t v464; // 0x405b00\n    int64_t v465; // 0x405b00\n    int64_t v466; // 0x405b00\n    int64_t v467; // 0x405b00\n    int64_t v468; // 0x405b00\n    int64_t v469; // 0x405b00\n    int64_t v470; // 0x405b00\n    int64_t v471; // 0x405b00\n    int64_t v472; // 0x405b00\n    int64_t v473; // 0x405b00\n    int64_t v474; // 0x405b00\n    int64_t v475; // 0x405b00\n    int64_t v476; // 0x405b00\n    int64_t v477; // 0x40664a\n    if ((int32_t)v450 < 1) {\n        int64_t v478 = 0x100000000 * v447 >> 32;\n        int64_t v479 = (int32_t)v447 >= 0 ? v478 : 0; // 0x406dcd\n        int64_t v480 = v479 != 0 ? v479 : 1; // 0x406dd3\n        if (v480 >= v451) {\n            // break -> 0x405bb3\n            goto lab_0x405bb3_11;\n        }\n        int64_t v481 = v449; // 0x406de3\n        int64_t v482 = v480; // 0x406de3\n        int64_t v483 = v479; // 0x406de3\n        int64_t v484 = v446; // 0x406de3\n        int64_t v485 = v445; // 0x406de3\n        int64_t v486 = 0; // 0x406de3\n        if (v23 != 0) {\n            int32_t v487 = v446; // 0x406de5\n            int64_t v488 = v449; // 0x406de8\n            int64_t v489 = v480; // 0x406de8\n            int64_t v490 = v479; // 0x406de8\n            int64_t v491 = v446; // 0x406de8\n            int64_t v492 = v445; // 0x406de8\n            int64_t v493 = v23; // 0x406de8\n            if (v487 == 0 && v479 >= 2) {\n                // 0x406df0\n                *v61 = v449;\n                int64_t v494 = v478 - 1; // 0x406df8\n                v1 = v494;\n                *v62 = v480;\n                *v59 = v479;\n                *v53 = v494 + v23;\n                *v60 = v487;\n                *v43 = (char)v445;\n                if ((int32_t)v444 == 48) {\n                    // 0x407215\n                    int64_t * v495; // 0x405b00\n                    int32_t v496; // 0x405b00\n                    memset(v495, 48, v496);\n                    int64_t v497 = *v53; // 0x407222\n                    unsigned char v498 = *v43; // 0x407227\n                    uint32_t v499 = *v60; // 0x40722d\n                    int64_t v500 = *v59; // 0x407232\n                    int64_t v501 = *v62; // 0x407237\n                    int64_t v502 = *v61; // 0x40723c\n                    v488 = v502;\n                    v489 = v501;\n                    v490 = v500;\n                    v491 = v499;\n                    v492 = v498;\n                    v493 = v497;\n                } else {\n                    // 0x406e23\n                    memset((int64_t *)v23, 32, (int32_t)v1);\n                    v488 = *v61;\n                    v489 = *v62;\n                    v490 = *v59;\n                    v491 = (int64_t)*v60;\n                    v492 = (int64_t)*v43;\n                    v493 = *v53;\n                }\n            }\n            // 0x406e4f\n            *(char *)v493 = *v41;\n            v481 = v488;\n            v482 = v489;\n            v483 = v490;\n            v484 = v491;\n            v485 = v492;\n            v486 = v493 + 1;\n        }\n        int64_t v503 = v482 + v20; // 0x406e60\n        v472 = v3 - v503;\n        v476 = v481;\n        v473 = v447;\n        v468 = v448;\n        v469 = v483;\n        v453 = v484;\n        v457 = v485;\n        v459 = v444;\n        v461 = v443;\n        v462 = v503;\n        v466 = v486;\n        goto lab_0x405f86;\n    } else {\n        int32_t v504 = v444; // 0x406612\n        v505 = v436;\n        v506 = v451;\n        v507 = v448;\n        v508 = v447;\n        v509 = v450;\n        v510 = v446;\n        v511 = v445;\n        v512 = v443;\n        if (v504 == 95) {\n            goto lab_0x406e73;\n        } else {\n            // 0x40661c\n            if (0x100000000 * v446 >> 32 >= v451) {\n                // break -> 0x405bb3\n                goto lab_0x405bb3_11;\n            }\n            int64_t v513 = 0x100000000 * v447 >> 32;\n            int64_t v514 = (int32_t)v447 >= 0 ? v513 : 0; // 0x406637\n            v1 = v514;\n            uint64_t v515 = v514 != 0 ? v514 : 1; // 0x40663d\n            if (v515 >= v451) {\n                // break -> 0x405bb3\n                goto lab_0x405bb3_11;\n            }\n            // 0x40664a\n            v477 = v515 + v20;\n            int64_t v516 = 0x100000000 * v450 >> 32; // 0x40664d\n            v475 = v449;\n            v467 = v448;\n            v471 = v516;\n            v452 = v446;\n            v456 = v445;\n            v458 = v444;\n            v460 = v443;\n            v463 = v477;\n            v465 = 0;\n            if (v23 == 0) {\n                goto lab_0x406710;\n            } else {\n                int32_t v517 = v446; // 0x40665c\n                v474 = v449;\n                v470 = v516;\n                v454 = v446;\n                v455 = v445;\n                v464 = v23;\n                if (v517 == 0 && v514 >= 2) {\n                    // 0x406667\n                    *v59 = v516;\n                    int64_t v518 = v513 - 1; // 0x40666f\n                    v1 = v518;\n                    *v54 = v449;\n                    int64_t v519 = v518 + v23; // 0x406678\n                    *v56 = v517;\n                    *v39 = (char)v445;\n                    int64_t * v520 = (int64_t *)v23;\n                    int32_t v521 = v1;\n                    if (v504 == 48) {\n                        // 0x40727f\n                        memset(v520, 48, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    } else {\n                        // 0x406690\n                        memset(v520, 32, v521);\n                        v474 = *v54;\n                        v470 = *v59;\n                        v454 = (int64_t)*v56;\n                        v455 = (int64_t)*v39;\n                        v464 = v519;\n                    }\n                }\n                // 0x4066b5\n                *(char *)v464 = *v41;\n                goto lab_0x4066c5;\n            }\n        }\n    }\n  lab_0x405f74:\n    // 0x405f74\n    v472 = v3 - v20;\n    v476 = v522;\n    v473 = v523;\n    v468 = v170;\n    v469 = (int32_t)v523 >= 0 ? 0x100000000 * v523 >> 32 : 0;\n    v453 = v524;\n    v457 = v144;\n    v459 = v147;\n    v461 = v154;\n    v462 = v20;\n    v466 = v23;\n    goto lab_0x405f86;\n  lab_0x407176:\n    // 0x407176\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v347 + 100 * v346;\n    v178 = 4;\n    v157 = v345;\n    v139 = 6;\n    v149 = v18;\n    goto lab_0x40629f;\n  lab_0x407152:\n    // 0x407152\n    *v41 = 1;\n    v171 = v343;\n    v168 = v115;\n    v182 = v348 + 0x2710 * v346 + 100 * v347;\n    v178 = 20;\n    v157 = v345;\n    v139 = 9;\n    v149 = v18;\n    goto lab_0x40629f;\n  lab_0x406819:\n    // 0x406819\n    v173 = v607;\n    v163 = v606;\n    v184 = -v609 & 0xffffffff;\n    v179 = v608;\n    v158 = v605;\n    v141 = v603;\n    v151 = v604;\n    goto lab_0x406560;\n  lab_0x406cbc:;\n    int64_t v612 = 0x100000000 * v432 >> 32;\n    int64_t v613 = v429 >= 0 ? v612 : 0; // 0x406cd2\n    uint64_t v614 = v613 != 0 ? v613 : 1; // 0x406cd8\n    if (v3 - v20 <= v614) {\n        // break -> 0x405bb3\n        goto lab_0x405bb3_11;\n    }\n    int64_t v615 = v434;\n    int64_t v616 = v433;\n    int64_t v617 = v613; // 0x406ceb\n    int64_t v618 = v616; // 0x406ceb\n    int64_t v619 = v615; // 0x406ceb\n    int64_t v620 = 0; // 0x406ceb\n    if (v23 != 0) {\n        int64_t v621 = v430;\n        int32_t v622 = v616; // 0x406ced\n        int64_t v623 = v621; // 0x406cf0\n        int64_t v624 = v613; // 0x406cf0\n        int64_t v625 = v616; // 0x406cf0\n        int64_t v626 = v615; // 0x406cf0\n        int64_t v627 = v23; // 0x406cf0\n        if (v622 == 0 && v613 >= 2) {\n            // 0x406cf8\n            *v58 = (char)v621;\n            int64_t v628 = v612 - 1; // 0x406d07\n            *v54 = v613;\n            v1 = v628;\n            *v56 = v622;\n            *v39 = (char)v615;\n            *v44 = v628;\n            memset((int64_t *)v23, 32, (int32_t)v628);\n            v624 = *v54;\n            v623 = (int64_t)*v58;\n            v625 = (int64_t)*v56;\n            v626 = (int64_t)*v39;\n            v627 = *v44 + v23;\n        }\n        // 0x406d44\n        *(char *)v627 = (char)v623;\n        v617 = v624;\n        v618 = v625;\n        v619 = v626;\n        v620 = v627 + 1;\n    }\n    int64_t v629 = v614 + v20; // 0x406d4f\n    v472 = v3 - v629;\n    v476 = v40 - v435;\n    v473 = v432;\n    v468 = v431;\n    v469 = v617;\n    v453 = v618;\n    v457 = v619;\n    v459 = 45;\n    v461 = v435;\n    v462 = v629;\n    v466 = v620;\n    goto lab_0x405f86;\n  lab_0x405f86:;\n    uint64_t v525 = v469;\n    uint64_t v526 = v476;\n    int64_t v527 = v526 >= v525 ? v526 : v525; // 0x405f8c\n    if (v527 >= v472) {\n        // break -> 0x405bb3\n        goto lab_0x405bb3_11;\n    }\n    int64_t v528 = v466;\n    int64_t v529 = v462;\n    int64_t v530 = v468;\n    v392 = v527;\n    v391 = v530;\n    v388 = v529;\n    v390 = 0;\n    if (v528 == 0) {\n        goto lab_0x405e46;\n    } else {\n        int64_t v531 = v457;\n        int64_t v532 = v526; // 0x405fa5\n        int64_t v533 = v530; // 0x405fa5\n        int64_t v534 = v531; // 0x405fa5\n        int64_t v535 = v528; // 0x405fa5\n        if (v526 < v525 == (int32_t)v453 == 0) {\n            // 0x405fac\n            *v55 = v526;\n            int64_t v536 = (0x100000000 * v473 >> 32) - v526; // 0x405fb4\n            v1 = v536;\n            *v53 = v530;\n            *v41 = (char)v531;\n            if ((int32_t)v459 == 48) {\n                // 0x406ef7\n                int64_t * v537; // 0x405b00\n                int32_t v538; // 0x405b00\n                memset(v537, 48, v538);\n                unsigned char v539 = *v41; // 0x406f07\n                int64_t v540 = *v53; // 0x406f0d\n                int64_t v541 = *v55; // 0x406f12\n                v532 = v541;\n                v533 = v540;\n                v534 = v539;\n                int64_t v542; // 0x405fbc\n                v535 = v542;\n            } else {\n                // 0x405fcf\n                memset((int64_t *)v528, 32, (int32_t)v1);\n                v532 = *v55;\n                v533 = *v53;\n                v534 = (int64_t)*v41;\n                v535 = v528 + v536;\n            }\n        }\n        // 0x405fef\n        *v53 = v533;\n        v1 = v532;\n        *v44 = v532;\n        v393 = v527;\n        v396 = v461;\n        v395 = v535;\n        v385 = v534;\n        v386 = v529;\n        goto lab_0x405e2b;\n    }\n  lab_0x405e46:\n    // 0x405e46\n    v8 = v12;\n    v9 = v13;\n    v25 = v391;\n    v21 = v388 + v392;\n    v24 = v390;\n    goto lab_0x405b8e;\n  lab_0x406e73:;\n    int64_t v543 = v509;\n    int64_t v544 = 0x100000000 * v543 >> 32; // 0x406e73\n    if (v544 >= v506) {\n        // break -> 0x405bb3\n        goto lab_0x405bb3_11;\n    }\n    int64_t v545 = v512;\n    int64_t v546 = v511;\n    int64_t v547 = v510;\n    int64_t v548 = v508;\n    int64_t v549 = v507;\n    char v550 = v505; // 0x406e82\n    int64_t v551 = v543 & 0xffffffff; // 0x406e82\n    int64_t v552 = v547; // 0x406e82\n    int64_t v553 = v546; // 0x406e82\n    int64_t v554 = 0; // 0x406e82\n    if (v23 != 0) {\n        // 0x406e84\n        v1 = v544;\n        *v60 = (int32_t)v543;\n        *v56 = (int32_t)v547;\n        *v39 = (char)v546;\n        memset((int64_t *)v23, 32, (int32_t)v544);\n        v550 = *v41;\n        v551 = (int64_t)*v60;\n        v552 = (int64_t)*v56;\n        v553 = (int64_t)*v39;\n        v554 = v544 + v23;\n    }\n    int64_t v555 = v554;\n    int64_t v556 = v553;\n    int64_t v557 = v552;\n    int64_t v558 = v551;\n    char v559 = v550; // 0x406ed0\n    int64_t v560 = v544 + v20; // 0x406eb8\n    int32_t v561 = v558; // 0x406ebe\n    int32_t v562 = v561 - (int32_t)v548; // 0x406ebe\n    int64_t v563 = v562 < 0 == ((v562 ^ v561) & (int32_t)(v558 ^ v548)) < 0 ? 0 : v548 - v558 & 0xffffffff; // 0x406ec6\n    int64_t v564 = v3 - v560; // 0x406ecd\n    int64_t v565 = 0x100000000 * v563 >> 32;\n    if (v559 != 0) {\n        int64_t v566 = v563 != 0 ? v565 : 1; // 0x406f6b\n        if (v566 >= v564) {\n            // break -> 0x405bb3\n            goto lab_0x405bb3_11;\n        }\n        int64_t v567 = v566; // 0x406f7b\n        int64_t v568 = v565; // 0x406f7b\n        int64_t v569 = v557; // 0x406f7b\n        int64_t v570 = v556; // 0x406f7b\n        int64_t v571 = 0; // 0x406f7b\n        if (v555 != 0) {\n            int32_t v572 = v557; // 0x406f7d\n            char v573 = v559; // 0x406f80\n            int64_t v574 = v566; // 0x406f80\n            int64_t v575 = v565; // 0x406f80\n            int64_t v576 = v557; // 0x406f80\n            int64_t v577 = v556; // 0x406f80\n            int64_t v578 = v555; // 0x406f80\n            if (v572 == 0 && v565 >= 2) {\n                int64_t v579 = v565 - 1; // 0x406f88\n                *v59 = v566;\n                v1 = v579;\n                *v60 = v572;\n                *v43 = (char)v556;\n                *v53 = v565;\n                memset((int64_t *)v555, 32, (int32_t)v579);\n                v574 = *v59;\n                v575 = *v53;\n                v573 = *v41;\n                v576 = (int64_t)*v60;\n                v577 = (int64_t)*v43;\n                v578 = v579 + v555;\n            }\n            // 0x406fc8\n            v568 = v575;\n            v567 = v574;\n            *(char *)v578 = v573;\n            v569 = v576;\n            v570 = v577;\n            v571 = v578 + 1;\n        }\n        int64_t v580 = v567 + v560; // 0x406fd9\n        v472 = v3 - v580;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v568;\n        v453 = v569;\n        v457 = v570;\n        v459 = 95;\n        v461 = v545;\n        v462 = v580;\n        v466 = v571;\n    } else {\n        // 0x406edb\n        v472 = v564;\n        v476 = v40 - v545;\n        v473 = v563;\n        v468 = v549;\n        v469 = v565;\n        v453 = v557;\n        v457 = v556;\n        v459 = 95;\n        v461 = v545;\n        v462 = v560;\n        v466 = v555;\n    }\n    goto lab_0x405f86;\n  lab_0x405e2b:;\n    int64_t v581 = v386;\n    int64_t v582 = v395;\n    int64_t v583 = v396;\n    int64_t v584 = v393;\n    if ((char)v385 == 0) {\n        // 0x406c90\n        memcpy((int64_t *)v582, (int64_t *)v583, (int32_t)v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    } else {\n        // 0x405e34\n        function_405ab0(v582, v583, v1);\n        v394 = v584;\n        v387 = v581;\n        v389 = v582;\n    }\n    goto lab_0x405e43;\n  lab_0x406710:;\n    int64_t v585 = v463 + v471; // 0x406714\n    v472 = v3 - v585;\n    v476 = v475;\n    v473 = 0;\n    v468 = v467;\n    v469 = 0;\n    v453 = v452;\n    v457 = v456;\n    v459 = v458;\n    v461 = v460;\n    v462 = v585;\n    v466 = v465;\n    goto lab_0x405f86;\n  lab_0x4066c5:;\n    int64_t v586 = v464 + 1;\n    int64_t v587 = v477;\n    int64_t v588 = v443;\n    int64_t v589 = v444;\n    int64_t v590 = v455;\n    int64_t v591 = v454;\n    int64_t v592 = v470;\n    int64_t v593 = v448;\n    int64_t v594 = v474;\n    v475 = v594;\n    v467 = v593;\n    v471 = v592;\n    v452 = v591;\n    v456 = v590;\n    v458 = v589;\n    v460 = v588;\n    v463 = v587;\n    v465 = 0;\n    if (v586 != 0) {\n        // 0x4066ca\n        v1 = v592;\n        *v59 = v594;\n        *v60 = (int32_t)v591;\n        *v55 = v593;\n        *v39 = (char)v590;\n        *v44 = v592;\n        memset((int64_t *)v586, 48, (int32_t)v592);\n        int64_t v595 = *v44; // 0x4066f3\n        v475 = *v59;\n        v467 = *v55;\n        v471 = v595;\n        v452 = (int64_t)*v60;\n        v456 = (int64_t)*v39;\n        v458 = v589;\n        v460 = v588;\n        v463 = v587;\n        v465 = v595 + v586;\n    }\n    goto lab_0x406710;\n  lab_0x405e43:\n    // 0x405e43\n    v392 = v394;\n    v391 = *v53;\n    v388 = v387;\n    v390 = *v44 + v389;\n    goto lab_0x405e46;\n  lab_0x405b9b_2:\n    // 0x405b9b\n    if (v3 != 0 && v5 != 0) {\n        // 0x405ba7\n        *(char *)v5 = 0;\n    }\n    // 0x405bb3\n    return result;\n}\n"
        },
        {
            "funcName": "function_4072d0",
            "funcStartAddr": "4072d0",
            "funcEndAddr": "4072ef",
            "decompiledFuncCode": "int64_t function_4072d0(int64_t * a1, int64_t a2, char * a3, int64_t * a4, int64_t a5, int64_t a6) {\n    char v1 = 0; // bp-9, 0x4072d4\n    int64_t result = function_405b00((int32_t)(int64_t)a1, a2, (int64_t)a3, (int64_t)a4, 0, (int64_t)&v1); // 0x4072e5\n    return result;\n}\n"
        },
        {
            "funcName": "function_4072f0",
            "funcStartAddr": "4072f0",
            "funcEndAddr": "407389",
            "decompiledFuncCode": "int64_t function_4072f0(int64_t str) {\n    // 0x4072f0\n    if (str == 0) {\n        // 0x407369\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g37);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4072fe\n    int64_t result = (int64_t)found_char_pos; // 0x4072fe\n    if (found_char_pos == NULL) {\n        // 0x407359\n        g51 = str;\n        g36 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x407308\n    if (v1 - str < 7) {\n        // 0x407359\n        g51 = str;\n        g36 = str;\n        return result;\n    }\n    // 0x407318\n    bool v2; // 0x4072f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4072f0\n    int64_t v5 = result - 6; // 0x4072f0\n    int64_t v6 = 7; // 0x407326\n    unsigned char v7 = *(char *)v5; // 0x407326\n    char v8 = *(char *)v4; // 0x407326\n    char v9 = v8; // 0x407326\n    bool v10 = false; // 0x407326\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x407330\n    int64_t v13 = v1; // 0x407330\n    int64_t v14 = 3; // 0x407330\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x407359\n        g51 = str;\n        g36 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x407342\n    char v16 = *(char *)v12; // 0x407342\n    char v17 = v16; // 0x407342\n    bool v18 = false; // 0x407342\n    while (v15 == v16) {\n        // 0x407332\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40734c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40734e\n        v20 = result + 4;\n        g34 = v20;\n    }\n    // 0x407359\n    g51 = v20;\n    g36 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407390",
            "funcStartAddr": "407390",
            "funcEndAddr": "407482",
            "decompiledFuncCode": "int64_t function_407390(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4073a4\n    int64_t result = (int64_t)v1; // 0x4073a4\n    if (result != a1) {\n        // 0x4073b1\n        return result;\n    }\n    int64_t v2 = function_40c750(); // 0x4073c0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x407476\n    if (v3 == 85) {\n        // 0x4073d0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x407468\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x4073fe\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x40740b\n        // 0x4073b1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x407468\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x40744d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x40745a\n    // 0x4073b1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_407490",
            "funcStartAddr": "407490",
            "funcEndAddr": "4074e7",
            "decompiledFuncCode": "int64_t function_407490(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x407490\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4074d8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4074e7",
            "funcStartAddr": "4074e7",
            "funcEndAddr": "4086b1",
            "decompiledFuncCode": "int64_t function_4074e7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x407531\n    int64_t v3 = 0; // 0x407531\n    int64_t v4; // 0x4074e7\n    int64_t v5; // 0x4074e7\n    int64_t v6; // 0x4074e7\n    int64_t v7; // 0x4074e7\n    int64_t v8; // 0x4074e7\n    int64_t v9; // 0x4074e7\n    int64_t v10; // 0x4074e7\n    int64_t v11; // 0x4074e7\n    int64_t v12; // 0x4074e7\n    int64_t v13; // 0x4074e7\n    int64_t v14; // 0x4074e7\n    int64_t v15; // 0x4074e7\n    int64_t v16; // 0x4074e7\n    int64_t v17; // 0x4074e7\n    int64_t v18; // 0x4074e7\n    int64_t result; // 0x4074e7\n    int64_t v19; // 0x4074e7\n    int32_t wc; // bp+132, 0x4074e7\n    int64_t ps; // bp+136, 0x4074e7\n    char v20; // 0x407aa0\n    int64_t v21; // 0x407aa0\n    int64_t v22; // 0x407e48\n    int64_t v23; // 0x4074e7\n    int64_t v24; // 0x407e67\n    int32_t v25; // 0x4074e7\n    while (true) {\n      lab_0x407538_2:\n        // 0x407538\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4074e7\n        int64_t v27; // 0x40756c\n        while (true) {\n          lab_0x407538:\n            // 0x407538\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x407543\n            if (v15 == -1) {\n                // 0x407545\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x407553\n            if (v28) {\n                // break (via goto) -> 0x407cb8\n                goto lab_0x407cb8;\n            }\n            // 0x40755c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g73 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x407b4b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x407691;\n                    }\n                    // 0x407f6d\n                    v26 = v5 + 1;\n                    goto lab_0x407538;\n                }\n                case 7: {\n                    goto lab_0x407691;\n                }\n                case 8: {\n                    goto lab_0x407691;\n                }\n                case 9: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x407691;\n                }\n                case 12: {\n                    goto lab_0x407691;\n                }\n                case 13: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40765d;\n                }\n                case 36: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x407691;\n                }\n                case 38: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x407691;\n                }\n                case 44: {\n                    goto lab_0x407691;\n                }\n                case 45: {\n                    goto lab_0x407691;\n                }\n                case 46: {\n                    goto lab_0x407691;\n                }\n                case 47: {\n                    goto lab_0x407691;\n                }\n                case 48: {\n                    goto lab_0x407691;\n                }\n                case 49: {\n                    goto lab_0x407691;\n                }\n                case 50: {\n                    goto lab_0x407691;\n                }\n                case 51: {\n                    goto lab_0x407691;\n                }\n                case 52: {\n                    goto lab_0x407691;\n                }\n                case 53: {\n                    goto lab_0x407691;\n                }\n                case 54: {\n                    goto lab_0x407691;\n                }\n                case 55: {\n                    goto lab_0x407691;\n                }\n                case 56: {\n                    goto lab_0x407691;\n                }\n                case 57: {\n                    goto lab_0x407691;\n                }\n                case 58: {\n                    goto lab_0x407691;\n                }\n                case 59: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x407691;\n                }\n                case 66: {\n                    goto lab_0x407691;\n                }\n                case 67: {\n                    goto lab_0x407691;\n                }\n                case 68: {\n                    goto lab_0x407691;\n                }\n                case 69: {\n                    goto lab_0x407691;\n                }\n                case 70: {\n                    goto lab_0x407691;\n                }\n                case 71: {\n                    goto lab_0x407691;\n                }\n                case 72: {\n                    goto lab_0x407691;\n                }\n                case 73: {\n                    goto lab_0x407691;\n                }\n                case 74: {\n                    goto lab_0x407691;\n                }\n                case 75: {\n                    goto lab_0x407691;\n                }\n                case 76: {\n                    goto lab_0x407691;\n                }\n                case 77: {\n                    goto lab_0x407691;\n                }\n                case 78: {\n                    goto lab_0x407691;\n                }\n                case 79: {\n                    goto lab_0x407691;\n                }\n                case 80: {\n                    goto lab_0x407691;\n                }\n                case 81: {\n                    goto lab_0x407691;\n                }\n                case 82: {\n                    goto lab_0x407691;\n                }\n                case 83: {\n                    goto lab_0x407691;\n                }\n                case 84: {\n                    goto lab_0x407691;\n                }\n                case 85: {\n                    goto lab_0x407691;\n                }\n                case 86: {\n                    goto lab_0x407691;\n                }\n                case 87: {\n                    goto lab_0x407691;\n                }\n                case 88: {\n                    goto lab_0x407691;\n                }\n                case 89: {\n                    goto lab_0x407691;\n                }\n                case 90: {\n                    goto lab_0x407691;\n                }\n                case 91: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x407691;\n                }\n                case 94: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x407691;\n                }\n                case 96: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x407691;\n                }\n                case 98: {\n                    goto lab_0x407691;\n                }\n                case 99: {\n                    goto lab_0x407691;\n                }\n                case 100: {\n                    goto lab_0x407691;\n                }\n                case 101: {\n                    goto lab_0x407691;\n                }\n                case 102: {\n                    goto lab_0x407691;\n                }\n                case 103: {\n                    goto lab_0x407691;\n                }\n                case 104: {\n                    goto lab_0x407691;\n                }\n                case 105: {\n                    goto lab_0x407691;\n                }\n                case 106: {\n                    goto lab_0x407691;\n                }\n                case 107: {\n                    goto lab_0x407691;\n                }\n                case 108: {\n                    goto lab_0x407691;\n                }\n                case 109: {\n                    goto lab_0x407691;\n                }\n                case 110: {\n                    goto lab_0x407691;\n                }\n                case 111: {\n                    goto lab_0x407691;\n                }\n                case 112: {\n                    goto lab_0x407691;\n                }\n                case 113: {\n                    goto lab_0x407691;\n                }\n                case 114: {\n                    goto lab_0x407691;\n                }\n                case 115: {\n                    goto lab_0x407691;\n                }\n                case 116: {\n                    goto lab_0x407691;\n                }\n                case 117: {\n                    goto lab_0x407691;\n                }\n                case 118: {\n                    goto lab_0x407691;\n                }\n                case 119: {\n                    goto lab_0x407691;\n                }\n                case 120: {\n                    goto lab_0x407691;\n                }\n                case 121: {\n                    goto lab_0x407691;\n                }\n                case 122: {\n                    goto lab_0x407691;\n                }\n                case 123: {\n                    goto lab_0x407635;\n                }\n                case 124: {\n                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x407635;\n                }\n                case 126: {\n                    goto lab_0x40765d;\n                }\n                default: {\n                    goto lab_0x407a35;\n                }\n            }\n        }\n      lab_0x407a35:\n        if (v23 != 1) {\n            // 0x407da0\n            ps = 0;\n            int64_t len = v15; // 0x407db0\n            if (v15 == -1) {\n                // 0x407db2\n                len = strlen((char *)str);\n            }\n            // 0x407dde\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x407e3f:\n                // 0x407e3f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x407e44\n                int64_t v30 = v29 + str;\n                v24 = function_40ae50(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4083ba_2;\n                    }\n                    case -1: {\n                        goto lab_0x4083ba_2;\n                    }\n                    case -2: {\n                        // 0x40849d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4084d7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4084da\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4084e7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4084e0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4083ba\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4083ba_2;\n                    }\n                    case 1: {\n                        goto lab_0x407e10;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x407ebc\n                        char v34 = *(char *)v33; // 0x407ecd\n                        unsigned char v35; // 0x4074e7\n                        if (v34 < 125) {\n                            // 0x407ed8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x407eef\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x407ec0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x407ecd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x407ed8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x407eef\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x407ec0\n                            v33++;\n                        }\n                        goto lab_0x407e10;\n                    }\n                }\n            }\n            goto lab_0x4083ba_2;\n        } else {\n            // 0x407a84\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x407691;\n        }\n    }\n  lab_0x407cb8:\n    // 0x407cb8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4085ba\n        if (v8 > result) {\n            // 0x4085c3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4078e7\n        return result;\n    }\n    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x407691:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4076a0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4078aa_2;\n        }\n    }\n    int64_t v39 = result; // 0x4077a1\n    char v40 = v20; // 0x4077a1\n    int64_t v41 = v38; // 0x4077a1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4077a1\n    int64_t v43 = v36; // 0x4077a1\n    goto lab_0x40771d;\n  lab_0x4078aa_2:\n    // 0x4078e7\n    return function_407490(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4083ba_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x407691;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x407f8e\n        int64_t v50 = v5 + 1; // 0x408071\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x408078\n        char v52 = v20; // 0x408078\n        int64_t v53 = result; // 0x408078\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x408041\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x408045\n            int64_t v56 = v54 + 1; // 0x40804a\n            int64_t v57 = v51 + 1; // 0x408071\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40803c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x408041\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x408045\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40771d;\n    }\n  lab_0x407e10:\n    // 0x407e10\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x407e2f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x407e32\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4083ba\n        goto lab_0x4083ba_2;\n    }\n    goto lab_0x407e3f;\n  lab_0x40765d:\n    // 0x40765d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4078aa_2;\n    }\n    goto lab_0x407691;\n  lab_0x407635:;\n    bool v60 = v15 == 1; // 0x407640\n    if (v15 == -1) {\n        // 0x407642\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40764e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x407691;\n    } else {\n        goto lab_0x40765d;\n    }\n  lab_0x40771d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x407722\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x407726\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x407538_2;\n}\n"
        },
        {
            "funcName": "function_4086c0",
            "funcStartAddr": "4086c0",
            "funcEndAddr": "40885e",
            "decompiledFuncCode": "int64_t function_4086c0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4086c2\n    int32_t * v3 = __errno_location(); // 0x4086dc\n    int64_t v4 = (int64_t)g27; // 0x4086e1\n    int32_t v5 = *v3; // 0x4086eb\n    int64_t v6 = v4; // 0x408701\n    if (v2 >= (int64_t)*(int32_t *)&g30) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x408859\n            function_4097b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x408710\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x408717\n        int64_t v9; // 0x4086c0\n        if (g27 == &g28) {\n            int64_t v10 = function_4095c0(0, v8); // 0x40883a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g28); // 0x40883f\n            *(int64_t *)&g27 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4095c0(v4, v8); // 0x40872b\n            *(int64_t *)&g27 = v12;\n            v9 = v12;\n        }\n        // 0x40873a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g30; // 0x40873a\n        int32_t v14 = v7; // 0x408741\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g30 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x408771\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40877b\n    int64_t * v17 = (int64_t *)v15; // 0x40877e\n    uint64_t v18 = *v17; // 0x40877e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x408781\n    int64_t result = *v19; // 0x408781\n    int64_t v20; // 0x4086c0\n    uint64_t v21 = function_407490(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4087a4\n    if (v18 > v21) {\n        // 0x40881b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4087b7\n    *v17 = v22;\n    if (result != (int64_t)&g52) {\n        // 0x4087c7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_409560(v22); // 0x4087e1\n    *v19 = result2;\n    int64_t v23; // 0x4086c0\n    function_407490(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40881b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408860",
            "funcStartAddr": "408860",
            "funcEndAddr": "408894",
            "decompiledFuncCode": "int64_t function_408860(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x408867\n    int64_t result = function_409760(a1 == 0 ? (int64_t)&g53 : a1, 56); // 0x408886\n    return result;\n}\n"
        },
        {
            "funcName": "function_4088a0",
            "funcStartAddr": "4088a0",
            "funcEndAddr": "4088af",
            "decompiledFuncCode": "int64_t function_4088a0(int32_t a1) {\n    uint32_t result = *((a1 == 0 ? (int32_t *)&g53 : (int32_t *)(int64_t)a1)); // 0x4088ac\n    return result;\n}\n"
        },
        {
            "funcName": "function_4088b0",
            "funcStartAddr": "4088b0",
            "funcEndAddr": "4088bf",
            "decompiledFuncCode": "int64_t function_4088b0(int32_t a1, int32_t a2) {\n    // 0x4088b0\n    *((a1 == 0 ? (int32_t *)&g53 : (int32_t *)(int64_t)a1)) = a2;\n    return (int64_t)&g53;\n}\n"
        },
        {
            "funcName": "function_4088c0",
            "funcStartAddr": "4088c0",
            "funcEndAddr": "4088f3",
            "decompiledFuncCode": "int64_t function_4088c0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g53 + 8 : a1 + 8; // 0x4088d9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4088de\n    uint32_t v3 = *v2; // 0x4088de\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4088e2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_408900",
            "funcStartAddr": "408900",
            "funcEndAddr": "408913",
            "decompiledFuncCode": "int64_t function_408900(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g53 + 4 : a1 + 4); // 0x40890c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_408920",
            "funcStartAddr": "408920",
            "funcEndAddr": "40894b",
            "decompiledFuncCode": "int64_t function_408920(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g53 : a1; // 0x408928\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x408945\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40893c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g53;\n}\n"
        },
        {
            "funcName": "function_408950",
            "funcStartAddr": "408950",
            "funcEndAddr": "4089c2",
            "decompiledFuncCode": "int64_t function_408950(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g53 : a5; // 0x408972\n    int32_t * v2 = __errno_location(); // 0x40897b\n    uint32_t v3 = *(int32_t *)v1; // 0x40899b\n    int64_t result = function_407490(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4089aa\n    return result;\n}\n"
        },
        {
            "funcName": "function_4089d0",
            "funcStartAddr": "4089d0",
            "funcEndAddr": "408ab1",
            "decompiledFuncCode": "int64_t function_4089d0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g53 : a4; // 0x4089f2\n    int32_t * v2 = __errno_location(); // 0x4089f8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x408a17\n    int32_t * v4 = (int32_t *)v1; // 0x408a1a\n    int64_t v5 = function_407490(0, 0, a1, a2, (int64_t)*v4, v3); // 0x408a35\n    int64_t v6 = v5 + 1; // 0x408a3a\n    int64_t result = function_409560(v6); // 0x408a4f\n    function_407490(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x408a94\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x408a9d\n    return result;\n}\n"
        },
        {
            "funcName": "function_408ac0",
            "funcStartAddr": "408ac0",
            "funcEndAddr": "408aca",
            "decompiledFuncCode": "int64_t function_408ac0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408ac0\n    return function_4089d0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_408ad0",
            "funcStartAddr": "408ad0",
            "funcEndAddr": "408b65",
            "decompiledFuncCode": "int64_t function_408ad0(void) {\n    uint32_t v1 = *(int32_t *)&g30; // 0x408ad0\n    int64_t v2 = v1; // 0x408ad0\n    int64_t v3 = v2; // 0x408ae4\n    if (v1 >= 2) {\n        int64_t v4 = &g30;\n        int64_t v5 = v4 + 16; // 0x408b03\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g65;\n        while (v5 != (int64_t)g27 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x408b00\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g65;\n        }\n    }\n    int64_t v6 = v3; // 0x408b1d\n    if (g28 != 0x6174a0) {\n        // 0x408b1f\n        free((int64_t *)g28);\n        g28 = 256;\n        *(int64_t *)&g29 = (int64_t)&g52;\n        v6 = &g65;\n    }\n    int64_t result = v6; // 0x408b41\n    if (g27 != &g28) {\n        // 0x408b43\n        free(g27);\n        *(int64_t *)&g27 = (int64_t)&g28;\n        result = &g65;\n    }\n    // 0x408b56\n    *(int32_t *)&g30 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408b70",
            "funcStartAddr": "408b70",
            "funcEndAddr": "408b81",
            "decompiledFuncCode": "int64_t function_408b70(void) {\n    // 0x408b70\n    int64_t v1; // 0x408b70\n    return function_4086c0(v1, v1, -1, (int64_t *)&g53);\n}\n"
        },
        {
            "funcName": "function_408b90",
            "funcStartAddr": "408b90",
            "funcEndAddr": "408b9a",
            "decompiledFuncCode": "int64_t function_408b90(void) {\n    // 0x408b90\n    int64_t v1; // 0x408b90\n    return function_4086c0(v1, v1, v1, (int64_t *)&g53);\n}\n"
        },
        {
            "funcName": "function_408ba0",
            "funcStartAddr": "408ba0",
            "funcEndAddr": "408bb6",
            "decompiledFuncCode": "int64_t function_408ba0(int64_t a1) {\n    // 0x408ba0\n    return function_4086c0(0, a1, -1, (int64_t *)&g53);\n}\n"
        },
        {
            "funcName": "function_408bc0",
            "funcStartAddr": "408bc0",
            "funcEndAddr": "408bd2",
            "decompiledFuncCode": "int64_t function_408bc0(int64_t a1, int64_t a2) {\n    // 0x408bc0\n    return function_4086c0(0, a1, a2, (int64_t *)&g53);\n}\n"
        },
        {
            "funcName": "function_408be0",
            "funcStartAddr": "408be0",
            "funcEndAddr": "408c48",
            "decompiledFuncCode": "int64_t function_408be0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408bf0\n    return function_4086c0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408c50",
            "funcStartAddr": "408c50",
            "funcEndAddr": "408cb4",
            "decompiledFuncCode": "int64_t function_408c50(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408c60\n    return function_4086c0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_408cc0",
            "funcStartAddr": "408cc0",
            "funcEndAddr": "408ccc",
            "decompiledFuncCode": "int64_t function_408cc0(int64_t a1, int64_t a2) {\n    // 0x408cc0\n    return function_408be0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_408cd0",
            "funcStartAddr": "408cd0",
            "funcEndAddr": "408cdf",
            "decompiledFuncCode": "int64_t function_408cd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408cd0\n    return function_408c50(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_408ce0",
            "funcStartAddr": "408ce0",
            "funcEndAddr": "408d50",
            "decompiledFuncCode": "int64_t function_408ce0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g53); // 0x408ced\n    int128_t v2 = __asm_movdqa(g54); // 0x408cf5\n    int128_t v3 = __asm_movdqa(g55); // 0x408cfd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x408d12\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x408d28\n    uint32_t v6 = *v5; // 0x408d28\n    uint32_t v7 = (int32_t)a3 % 32; // 0x408d2d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4086c0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_408d50",
            "funcStartAddr": "408d50",
            "funcEndAddr": "408d5d",
            "decompiledFuncCode": "int64_t function_408d50(int64_t a1, int64_t a2) {\n    // 0x408d50\n    return function_408ce0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_408d60",
            "funcStartAddr": "408d60",
            "funcEndAddr": "408d71",
            "decompiledFuncCode": "int64_t function_408d60(int64_t a1) {\n    // 0x408d60\n    return function_408ce0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_408d80",
            "funcStartAddr": "408d80",
            "funcEndAddr": "408d8a",
            "decompiledFuncCode": "int64_t function_408d80(void) {\n    // 0x408d80\n    int64_t v1; // 0x408d80\n    return function_408ce0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_408d90",
            "funcStartAddr": "408d90",
            "funcEndAddr": "408dfe",
            "decompiledFuncCode": "int64_t function_408d90(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408daa\n    return function_4086c0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408e00",
            "funcStartAddr": "408e00",
            "funcEndAddr": "408e6c",
            "decompiledFuncCode": "int64_t function_408e00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g53); // 0x408e07\n    int128_t v2 = __asm_movdqa(g54); // 0x408e0f\n    int128_t v3 = __asm_movdqa(g55); // 0x408e17\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x408e39\n    if (a2 == 0 || a3 == 0) {\n        // 0x408e67\n        abort();\n        // UNREACHABLE\n    }\n    // 0x408e4a\n    return function_4086c0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_408e70",
            "funcStartAddr": "408e70",
            "funcEndAddr": "408e79",
            "decompiledFuncCode": "int64_t function_408e70(void) {\n    // 0x408e70\n    int64_t v1; // 0x408e70\n    return function_408e00(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_408e80",
            "funcStartAddr": "408e80",
            "funcEndAddr": "408e97",
            "decompiledFuncCode": "int64_t function_408e80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408e80\n    return function_408e00(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_408ea0",
            "funcStartAddr": "408ea0",
            "funcEndAddr": "408eb3",
            "decompiledFuncCode": "int64_t function_408ea0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x408ea0\n    return function_408e00(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_408ec0",
            "funcStartAddr": "408ec0",
            "funcEndAddr": "408eca",
            "decompiledFuncCode": "int64_t function_408ec0(void) {\n    // 0x408ec0\n    int64_t v1; // 0x408ec0\n    return function_4086c0(v1, v1, v1, &g26);\n}\n"
        },
        {
            "funcName": "function_408ed0",
            "funcStartAddr": "408ed0",
            "funcEndAddr": "408ee2",
            "decompiledFuncCode": "int64_t function_408ed0(int64_t a1, int64_t a2) {\n    // 0x408ed0\n    return function_4086c0(0, a1, a2, &g26);\n}\n"
        },
        {
            "funcName": "function_408ef0",
            "funcStartAddr": "408ef0",
            "funcEndAddr": "408f01",
            "decompiledFuncCode": "int64_t function_408ef0(int64_t a1, int64_t a2) {\n    // 0x408ef0\n    return function_4086c0(a1, a2, -1, &g26);\n}\n"
        },
        {
            "funcName": "function_408f10",
            "funcStartAddr": "408f10",
            "funcEndAddr": "408f26",
            "decompiledFuncCode": "int64_t function_408f10(int64_t a1) {\n    // 0x408f10\n    return function_4086c0(0, a1, -1, &g26);\n}\n"
        },
        {
            "funcName": "function_408f30",
            "funcStartAddr": "408f30",
            "funcEndAddr": "408f7a",
            "decompiledFuncCode": "int64_t function_408f30(int64_t * a1) {\n    int64_t * v1 = (int64_t *)((int64_t)a1 + 8); // 0x408f3b\n    *v1 = 0;\n    int64_t v2; // 0x408f30\n    int32_t v3 = function_40c6a0((int64_t *)\".\", 0x80000, v2); // 0x408f4f\n    *(int32_t *)a1 = v3;\n    if (v3 >= 0) {\n        // 0x408f57\n        return 0;\n    }\n    int64_t v4 = function_409bb0(0, 0); // 0x408f64\n    *v1 = v4;\n    return v4 == 0 ? 0xffffffff : 0;\n}\n"
        },
        {
            "funcName": "function_408f80",
            "funcStartAddr": "408f80",
            "funcEndAddr": "408f99",
            "decompiledFuncCode": "int64_t function_408f80(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int32_t fd = v1;\n    if (fd < 0) {\n        // 0x408f90\n        return function_409940(*(int64_t *)(v1 + 8));\n    }\n    // 0x408f86\n    return fchdir(fd);\n}\n"
        },
        {
            "funcName": "function_408fa0",
            "funcStartAddr": "408fa0",
            "funcEndAddr": "408fb9",
            "decompiledFuncCode": "int64_t function_408fa0(int64_t * a1) {\n    // 0x408fa0\n    int64_t v1; // 0x408fa0\n    uint32_t fd = (int32_t)v1;\n    if (fd >= 0) {\n        // 0x408faa\n        close(fd);\n    }\n    // 0x408faf\n    free((int64_t *)*(int64_t *)((int64_t)a1 + 8));\n    return &g65;\n}\n"
        },
        {
            "funcName": "function_408fc0",
            "funcStartAddr": "408fc0",
            "funcEndAddr": "40939d",
            "decompiledFuncCode": "int64_t function_408fc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x409058\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x408fdc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x408ff6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40903b\n    if (a6 < 10) {\n        // 0x40904a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x409142\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4093a0",
            "funcStartAddr": "4093a0",
            "funcEndAddr": "4093c0",
            "decompiledFuncCode": "int64_t function_4093a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4093a0\n    if (a5 == 0) {\n        // 0x4093bb\n        return function_408fc0(a1, a2, a3, a4, a5, 0, (int64_t)&g65);\n    }\n    int64_t v1 = 0; // 0x4093a7\n    v1++;\n    int64_t v2 = v1; // 0x4093b9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4093b0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4093bb\n    return function_408fc0(a1, a2, a3, a4, a5, v2, (int64_t)&g65);\n}\n"
        },
        {
            "funcName": "function_4093c0",
            "funcStartAddr": "4093c0",
            "funcEndAddr": "409420",
            "decompiledFuncCode": "int64_t function_4093c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4093c0\n    int64_t v3 = &v2; // 0x4093c0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4093f3\n    int64_t v6; // 0x4093dd\n    int64_t * v7; // 0x4093fb\n    int64_t v8; // 0x4093fb\n    int64_t v9; // 0x409407\n    if (v5 < 48) {\n        // 0x4093d0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x409413\n            break;\n        }\n    } else {\n        // 0x4093fb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x409413\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4093f1\n    while (v4 != 9) {\n        // 0x4093e9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4093d0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x409413\n                break;\n            }\n        } else {\n            // 0x4093fb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x409413\n                break;\n            }\n        }\n        // 0x4093e9\n        v10 = 10;\n    }\n    // 0x409413\n    return function_408fc0(a1, a2, a3, a4, v3, v10, (int64_t)&g65);\n}\n"
        },
        {
            "funcName": "function_409420",
            "funcStartAddr": "409420",
            "funcEndAddr": "4094dc",
            "decompiledFuncCode": "int64_t function_409420(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x409420\n    int64_t v1; // bp-168, 0x409420\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x409420\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x409420\n    int64_t v8; // 0x409420\n    int64_t v9; // bp-56, 0x409420\n    int64_t v10; // 0x409485\n    int64_t v11; // 0x4094a9\n    if ((int32_t)v6 < 48) {\n        // 0x409470\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4094c0\n            break;\n        }\n    } else {\n        // 0x4094a2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4094c0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40949a\n    int64_t v13 = 10; // 0x40949a\n    while (v5 != 9) {\n        // 0x40949c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x409470\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4094c0\n                break;\n            }\n        } else {\n            // 0x4094a2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4094c0\n                break;\n            }\n        }\n        // 0x409492\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4094c0\n    int64_t v14; // bp-136, 0x409420\n    int64_t result = function_408fc0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g65); // 0x4094cf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4094e0",
            "funcStartAddr": "4094e0",
            "funcEndAddr": "409554",
            "decompiledFuncCode": "int64_t function_4094e0(int64_t a1) {\n    // 0x4094e0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x409543\n    return fputs_unlocked(v1, g35);\n}\n"
        },
        {
            "funcName": "function_409560",
            "funcStartAddr": "409560",
            "funcEndAddr": "40957a",
            "decompiledFuncCode": "int64_t function_409560(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x409564\n    if (size != 0 != (mem == NULL)) {\n        // 0x409573\n        return (int64_t)mem;\n    }\n    // 0x409575\n    function_4097b0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409580",
            "funcStartAddr": "409580",
            "funcEndAddr": "4095a1",
            "decompiledFuncCode": "int64_t function_409580(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x409583\n    int64_t v2 = v1; // 0x409583\n    if (v2 < 0) {\n        // 0x40959b\n        function_4097b0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409599\n        return function_409560(v2);\n    }\n    // 0x40959b\n    function_4097b0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4095b0",
            "funcStartAddr": "4095b0",
            "funcEndAddr": "4095b2",
            "decompiledFuncCode": "int64_t function_4095b0(void) {\n    // 0x4095b0\n    int64_t v1; // 0x4095b0\n    return function_409560(v1);\n}\n"
        },
        {
            "funcName": "function_4095c0",
            "funcStartAddr": "4095c0",
            "funcEndAddr": "4095f6",
            "decompiledFuncCode": "int64_t function_4095c0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4095e8\n        free(v1);\n        return (int32_t)&g65 ^ (int32_t)&g65;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4095d1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4095e0\n        return (int64_t)mem;\n    }\n    // 0x4095f1\n    function_4097b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409600",
            "funcStartAddr": "409600",
            "funcEndAddr": "409621",
            "decompiledFuncCode": "int64_t function_409600(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x409603\n    int64_t v2 = v1; // 0x409603\n    if (v2 < 0) {\n        // 0x40961b\n        function_4097b0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409619\n        return function_4095c0(a1, v2);\n    }\n    // 0x40961b\n    function_4097b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409630",
            "funcStartAddr": "409630",
            "funcEndAddr": "4096b6",
            "decompiledFuncCode": "int64_t function_409630(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40968b\n            function_4097b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4095c0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x409673\n    if (a2 == 0) {\n        // 0x409698\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x409678\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40968b\n        function_4097b0(a1);\n        // UNREACHABLE\n    }\n    // 0x40965a\n    *(int64_t *)a2 = v2;\n    return function_4095c0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4096c0",
            "funcStartAddr": "4096c0",
            "funcEndAddr": "409710",
            "decompiledFuncCode": "int64_t function_4096c0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4096c0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40970a\n            function_4097b0(a1);\n            // UNREACHABLE\n        }\n        // 0x4096e2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4095c0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4096f5\n        *(int64_t *)a2 = 128;\n        return function_4095c0(0, 128);\n    }\n    // 0x409708\n    if (a2 < 0) {\n        // 0x40970a\n        function_4097b0(a1);\n        // UNREACHABLE\n    }\n    // 0x4096e2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4095c0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_409710",
            "funcStartAddr": "409710",
            "funcEndAddr": "409727",
            "decompiledFuncCode": "int64_t function_409710(int64_t a1, int64_t a2) {\n    // 0x409710\n    return (int64_t)memset((int64_t *)function_409560(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_409730",
            "funcStartAddr": "409730",
            "funcEndAddr": "40975e",
            "decompiledFuncCode": "int64_t function_409730(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x409737\n    if ((int64_t)v1 < 0) {\n        // 0x409759\n        function_4097b0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x409759\n        function_4097b0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40974a\n    if (mem != NULL) {\n        // 0x409754\n        return (int64_t)mem;\n    }\n    // 0x409759\n    function_4097b0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409760",
            "funcStartAddr": "409760",
            "funcEndAddr": "409788",
            "decompiledFuncCode": "int64_t function_409760(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409560(a2); // 0x40976f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_409790",
            "funcStartAddr": "409790",
            "funcEndAddr": "4097a3",
            "decompiledFuncCode": "int64_t function_409790(char * str) {\n    // 0x409790\n    return function_409760((int64_t)str, (int64_t)strlen(str) + 1);\n}\n"
        },
        {
            "funcName": "function_4097b0",
            "funcStartAddr": "4097b0",
            "funcEndAddr": "4097e1",
            "decompiledFuncCode": "int64_t function_4097b0(int64_t a1) {\n    // 0x4097b0\n    error(g25, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4097f0",
            "funcStartAddr": "4097f0",
            "funcEndAddr": "40981f",
            "decompiledFuncCode": "int64_t function_4097f0(int64_t a1, int64_t a2) {\n    int64_t result = function_409bb0(0, 0); // 0x4097f5\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x409802\n        return result;\n    }\n    // 0x40981a\n    function_4097b0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409820",
            "funcStartAddr": "409820",
            "funcEndAddr": "4098b4",
            "decompiledFuncCode": "int64_t function_409820(char * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409820\n    int64_t v1; // 0x409820\n    if ((char)v1 != 0) {\n        // 0x409844\n        int128_t v2; // 0x409820\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int64_t v3 = 8; // bp-208, 0x409888\n    return function_40ce40((int64_t)a1, &v3);\n}\n"
        },
        {
            "funcName": "function_4098c0",
            "funcStartAddr": "4098c0",
            "funcEndAddr": "409900",
            "decompiledFuncCode": "int64_t function_4098c0(int32_t fd) {\n    // 0x4098c0\n    if (fd < 0) {\n        // 0x4098c4\n        int64_t result; // 0x4098c0\n        return result;\n    }\n    int32_t result2 = close(fd); // 0x4098cc\n    if (result2 == 0) {\n        // 0x4098d5\n        return result2;\n    }\n    // 0x4098da\n    __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 64, \"cdb_free\");\n    return &g65;\n}\n"
        },
        {
            "funcName": "function_409900",
            "funcStartAddr": "409900",
            "funcEndAddr": "409937",
            "decompiledFuncCode": "int64_t function_409900(int32_t * a1) {\n    // 0x409900\n    int64_t path; // 0x409900\n    int32_t fd = path;\n    uint32_t v1 = openat(fd, (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x409912\n    int64_t result = 0xffffffff; // 0x409919\n    if (v1 >= 0) {\n        // 0x40991b\n        function_4098c0(fd);\n        *a1 = v1;\n        result = 0;\n    }\n    // 0x409928\n    return result;\n}\n"
        },
        {
            "funcName": "function_409940",
            "funcStartAddr": "409940",
            "funcEndAddr": "409bb0",
            "decompiledFuncCode": "int64_t function_409940(int64_t a1) {\n    char * path = (char *)a1; // 0x40994f\n    uint32_t result = chdir(path); // 0x40994f\n    if (result == 0) {\n        // 0x409a86\n        return 0;\n    }\n    int32_t * v1 = __errno_location(); // 0x40995e\n    if (*v1 != 36) {\n        // 0x409a86\n        return result;\n    }\n    int32_t len = strlen(path); // 0x409972\n    int32_t fd = -100; // bp-44, 0x409977\n    if (len == 0) {\n        // 0x409b92\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g65;\n    }\n    if (len < 0x1000) {\n        // 0x409b79\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x409b92\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g65;\n    }\n    int64_t v2 = len; // 0x409972\n    int32_t ini_seg_bytes = strspn(path, \"/\"); // 0x40999f\n    int64_t v3; // 0x409940\n    if (ini_seg_bytes == 2) {\n        int64_t v4 = function_40aed0(a1 + 3, 47, v2 - 3); // 0x409ac5\n        if (v4 == 0) {\n            // 0x409a86\n            return 0xffffffff;\n        }\n        char * v5 = (char *)v4; // 0x409ad2\n        *v5 = 0;\n        int64_t v6 = function_409900(&fd); // 0x409add\n        *v5 = 47;\n        if ((int32_t)v6 != 0) {\n            goto lab_0x409a70;\n        } else {\n            int64_t str = v4 + 1; // 0x409ae9\n            v3 = str + (int64_t)strspn((char *)str, \"/\");\n            goto lab_0x4099bd;\n        }\n    } else {\n        // 0x4099b1\n        v3 = a1;\n        if (ini_seg_bytes != 0) {\n            // 0x409a98\n            if ((int32_t)function_409900(&fd) != 0) {\n                goto lab_0x409a70;\n            } else {\n                // 0x409aab\n                v3 = (int64_t)ini_seg_bytes + a1;\n                goto lab_0x4099bd;\n            }\n        } else {\n            goto lab_0x4099bd;\n        }\n    }\n  lab_0x409a70:\n    // 0x409a70\n    function_4098c0(fd);\n    // 0x409a86\n    return 0xffffffff;\n  lab_0x4099bd:\n    // 0x4099bd\n    if (*(char *)v3 == 47) {\n      lab_0x409b47:\n        // 0x409b47\n        __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 162, \"chdir_long\");\n        // 0x409b60\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x409b79\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x409b92\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g65;\n    }\n    uint64_t v7 = v2 + a1; // 0x4099c7\n    if (v7 < v3) {\n        // 0x409b60\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x409b79\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x409b92\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g65;\n    }\n    int64_t v8 = v3; // 0x409a3d\n    int64_t v9 = v3; // 0x409a3d\n    if (v7 - v3 > 4095) {\n        int64_t * v10 = memrchr((int64_t *)v8, 47, 0x1000); // 0x4099e5\n        while (v10 != NULL) {\n            int64_t v11 = (int64_t)v10; // 0x4099e5\n            *(char *)v10 = 0;\n            if (v11 - v8 > 4095) {\n                // 0x409b2e\n                __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 179, \"chdir_long\");\n                goto lab_0x409b47;\n            }\n            int64_t v12 = function_409900(&fd); // 0x409a10\n            *(char *)v10 = 47;\n            if ((int32_t)v12 != 0) {\n                goto lab_0x409a70;\n            }\n            int64_t str2 = v11 + 1; // 0x409a1c\n            int64_t v13 = str2 + (int64_t)strspn((char *)str2, \"/\"); // 0x409a2d\n            v8 = v13;\n            v9 = v13;\n            if (v7 - v13 <= 4095) {\n                goto lab_0x409a3f;\n            }\n            v10 = memrchr((int64_t *)v8, 47, 0x1000);\n        }\n        // 0x409b08\n        *v1 = 36;\n        // 0x409a86\n        return 0xffffffff;\n    }\n  lab_0x409a3f:\n    // 0x409a3f\n    if (v7 > v9) {\n        // 0x409a44\n        if ((int32_t)function_409900(&fd) != 0) {\n            goto lab_0x409a70;\n        } else {\n            goto lab_0x409a55;\n        }\n    } else {\n        goto lab_0x409a55;\n    }\n  lab_0x409a55:\n    // 0x409a55\n    if (fchdir(fd) == 0) {\n        // 0x409b20\n        function_4098c0(fd);\n        // 0x409a86\n        return 0;\n    }\n    goto lab_0x409a70;\n}\n"
        },
        {
            "funcName": "function_409bb0",
            "funcStartAddr": "409bb0",
            "funcEndAddr": "40a072",
            "decompiledFuncCode": "int64_t function_409bb0(int32_t a1, int32_t a2) {\n    // 0x409bb0\n    int32_t size; // 0x409bb0\n    int32_t v1; // 0x409bb0\n    int32_t v2; // 0x409bb0\n    if (a2 != 0) {\n        // 0x409c10\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x409be2;\n        } else {\n            goto lab_0x409c2c;\n        }\n    } else {\n        // 0x409bd0\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x409fd0\n            *__errno_location() = 22;\n            // 0x409bf6\n            return 0;\n        }\n        goto lab_0x409be2;\n    }\n  lab_0x409f70:;\n    // 0x409f70\n    int32_t v3; // 0x409f6a\n    int64_t v4 = v3; // 0x409f72\n    int64_t v5; // 0x409bb0\n    int64_t dirp2 = v5; // 0x409f72\n    int32_t * v6; // 0x409cb6\n    if (v3 != 0) {\n        goto lab_0x409f81;\n    } else {\n        // 0x409f74\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x409f81;\n    }\n  lab_0x409d82:;\n    // 0x409d82\n    int64_t v7; // 0x409bb0\n    int64_t v8 = v7;\n    int64_t v9; // 0x409bb0\n    int64_t v10 = v9 + 19; // 0x409d82\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x409bb0\n    int64_t v12; // 0x409bb0\n    int32_t v13; // 0x409bb0\n    int32_t fd; // 0x409cd2\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x409db5\n        if (v11 == v12) {\n            // break -> 0x409dd0\n            goto lab_0x409dd0;\n        }\n    }\n    int64_t v14 = v8; // 0x409bb0\n    goto lab_0x409d40_2;\n  lab_0x40a04e_2:\n    // 0x40a04e\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x409f81;\n  lab_0x409be2:;\n    int64_t * mem = malloc(size); // 0x409be7\n    int32_t v41 = (int64_t)mem; // 0x409bec\n    int32_t result = v41; // 0x409bf4\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x409bf6\n        return result;\n    }\n    goto lab_0x409c2c;\n  lab_0x409c2c:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x409c31\n    int64_t v46 = v45 - 1; // 0x409c40\n    *(char *)v46 = 0;\n    int64_t v47; // 0x409bb0\n    int64_t v48; // 0x409bb0\n    int32_t * v49; // 0x409bb0\n    int64_t v50; // 0x409bb0\n    int64_t v33; // 0x409bb0\n    int64_t v40; // 0x409bb0\n    int64_t v51; // 0x409bb0\n    int32_t v38; // 0x409bb0\n    int32_t v52; // 0x409bb0\n    int32_t v53; // 0x409bb0\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x409fa8;\n    } else {\n        // 0x409c56\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x409fa8;\n        } else {\n            // 0x409c81\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x409ec8;\n            } else {\n                // 0x409cb6\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x409cc3\n                int32_t v55 = v42; // 0x409cc3\n                int64_t v56 = v11; // 0x409cc3\n                int64_t v57 = v46; // 0x409cc3\n                int64_t v58 = 0; // 0x409cc3\n                int32_t fd2 = -100; // 0x409cc3\n                int64_t dirp3; // 0x409bb0\n                while (true) {\n                    // 0x409cc6\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x409ff7\n                        break;\n                    }\n                    // 0x409ce2\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x40a008\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x409fed;\n                        } else {\n                            // 0x40a011\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x409fed;\n                        }\n                    }\n                    // 0x409cfb\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x409d00\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x409fe9\n                            v40 = (int64_t)*v6;\n                            goto lab_0x409fed;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x409d27\n                    if (dirp == NULL) {\n                        // 0x409fe9\n                        v40 = (int64_t)*v6;\n                        goto lab_0x409fed;\n                    }\n                    // 0x409d38\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x409d40_2:;\n                        int64_t v15 = v14; // 0x409bb0\n                        int64_t v16; // 0x409bb0\n                        int64_t v17; // 0x409bb0\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x409d4b\n                            int64_t v20; // 0x409bb0\n                            int64_t v21; // 0x409bb0\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x409f20\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x409f70;\n                                }\n                                // 0x409f2d\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x409f38\n                                if (v23 == NULL) {\n                                    // 0x409f6a\n                                    v3 = *v6;\n                                    goto lab_0x409f70;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x409d82;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x409d63\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x409f50\n                            if (*(char *)v28 != 0) {\n                                // 0x409f5a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x409d63\n                                    break;\n                                }\n                            }\n                            // 0x409d40\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x409d82;\n                        } else {\n                            // 0x409d68\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x409d7d\n                            int64_t v32; // 0x409bb0\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x409d40\n                                v14 = v31;\n                                goto lab_0x409d40_2;\n                            } else {\n                                goto lab_0x409d82;\n                            }\n                        }\n                    }\n                  lab_0x409dd0:;\n                    int64_t v61 = v38; // 0x409dd8\n                    uint64_t v62 = v57 - v61; // 0x409dd8\n                    int32_t len = strlen(str); // 0x409ddd\n                    uint64_t v63 = (int64_t)len; // 0x409ddd\n                    int32_t v64 = v60; // 0x409de8\n                    int32_t v65 = v38; // 0x409de8\n                    int64_t dest_mem = v57; // 0x409de8\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x40a060\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x409f81;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x409df6\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x409e01\n                        uint64_t v68 = v67 + v66; // 0x409e05\n                        if (v68 < v66) {\n                            goto lab_0x40a04e_2;\n                        }\n                        // 0x409e18\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x409e20\n                        if (mem2 == NULL) {\n                            goto lab_0x40a04e_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x409e20\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x409e7d\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x409eae\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x409fb0;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x409ec8;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x409ff7\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x409f89;\n                } else {\n                    goto lab_0x409f81;\n                }\n            }\n        }\n    }\n  lab_0x409fa8:\n    // 0x409fa8\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x409fb0;\n  lab_0x409fb0:;\n    int64_t v77 = (int64_t)*v49; // 0x409fb6\n    int64_t v34 = v77; // 0x409fba\n    int32_t * v35 = v49; // 0x409fba\n    int32_t * v36 = v49; // 0x409fba\n    int32_t v37 = v53; // 0x409fba\n    int64_t v39 = v77; // 0x409fba\n    if (a1 != 0) {\n        goto lab_0x409f91;\n    } else {\n        goto lab_0x409fbc;\n    }\n  lab_0x409f91:\n    // 0x409f91\n    *v35 = (int32_t)v34;\n    // 0x409bf6\n    return 0;\n  lab_0x409fbc:\n    // 0x409fbc\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x409f91;\n  lab_0x409ec8:\n    // 0x409ec8\n    if (v51 == v47 - 1 + v48) {\n        // 0x40a037\n        int64_t v78; // 0x409bb0\n        int64_t v79 = v78 - 1; // 0x40a03c\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x409ef2\n    int32_t v81 = v50 - v51; // 0x409ef2\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x409efd\n    if (a2 == 0) {\n        // 0x40a020\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x409bf6\n    return result2;\n  lab_0x409f89:\n    // 0x409f89\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x409fbc;\n    } else {\n        goto lab_0x409f91;\n    }\n  lab_0x409f81:\n    // 0x409f81\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x409f89;\n  lab_0x409fed:\n    // 0x409fed\n    close(fd);\n    v33 = v40;\n    goto lab_0x409f89;\n}\n"
        },
        {
            "funcName": "function_40a080",
            "funcStartAddr": "40a080",
            "funcEndAddr": "40a15f",
            "decompiledFuncCode": "int64_t function_40a080(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40a08c\n    uint32_t v2 = *v1; // 0x40a08c\n    int64_t v3 = a2 & 0xffffffff; // 0x40a091\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x40a094\n    uint64_t v5 = (int64_t)*v4; // 0x40a094\n    int64_t v6; // 0x40a102\n    if (v3 <= v5) {\n      lab_0x40a0fc_2:\n        // 0x40a0fc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x40a082\n    int64_t v8 = v2; // 0x40a080\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40a0fc\n        goto lab_0x40a0fc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x40a0b8\n    int64_t v17; // 0x40a0c6\n    int64_t * v18; // 0x40a0e0\n    int64_t * v19; // 0x40a0e3\n    int64_t v20; // 0x40a0ee\n    int64_t v21; // 0x40a0c6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x40a0c3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x40a0e0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x40a0f7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40a0fc\n            goto lab_0x40a0fc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40a0fc\n            goto lab_0x40a0fc_2;\n        }\n        // 0x40a0b2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40a13b\n    int64_t * v23 = (int64_t *)v22; // 0x40a140\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x40a143\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x40a140\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x40a157\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40a0ad\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40a0fc\n            goto lab_0x40a0fc_2;\n        }\n        // 0x40a0b2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x40a0c3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x40a0e0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x40a0f7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40a0fc\n                goto lab_0x40a0fc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40a0fc\n                goto lab_0x40a0fc_2;\n            }\n            // 0x40a0b2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x40a120\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x40a140\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x40a157\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40a0fc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a160",
            "funcStartAddr": "40a160",
            "funcEndAddr": "40a77c",
            "decompiledFuncCode": "int64_t function_40a160(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40a17f\n    int64_t v2 = *v1; // 0x40a17f\n    char * str2 = (char *)v2; // 0x40a18c\n    char c = *str2; // 0x40a18c\n    int64_t v3 = v2; // 0x40a1b8\n    int64_t v4 = 0; // 0x40a160\n    int32_t v5; // 0x40a160\n    int64_t v6; // 0x40a160\n    int64_t v7; // 0x40a160\n    int64_t v8; // 0x40a160\n    int64_t v9; // 0x40a160\n    int64_t v10; // 0x40a160\n    int64_t v11; // 0x40a160\n    int64_t v12; // 0x40a160\n    int64_t v13; // 0x40a160\n    int64_t str3; // 0x40a160\n    int64_t v14; // 0x40a160\n    int64_t v15; // 0x40a160\n    int64_t v16; // 0x40a160\n    int64_t v17; // 0x40a160\n    int32_t v18; // 0x40a160\n    int32_t v19; // 0x40a160\n    int32_t v20; // 0x40a160\n    int32_t v21; // 0x40a160\n    int32_t v22; // 0x40a160\n    int32_t v23; // 0x40a160\n    int32_t v24; // 0x40a160\n    int32_t v25; // 0x40a160\n    int32_t v26; // 0x40a160\n    int32_t v27; // 0x40a160\n    int32_t v28; // 0x40a160\n    int32_t v29; // 0x40a160\n    int64_t nmemb; // 0x40a160\n    int64_t v30; // 0x40a160\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40a1bc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x40a1b8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x40a1c8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40a1ce\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x40a198\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40a1fc\n                int64_t v34; // 0x40a160\n                int64_t v35; // 0x40a160\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x40a205\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x40a380;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x40a216\n                int64_t v37 = *(int64_t *)v36; // 0x40a21a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x40a1f0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x40a205\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x40a380;\n                        }\n                    }\n                    // 0x40a216\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x40a266:\n                    // 0x40a266\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x40a2c0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x40a430\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x40a2c0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x40a3e0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40a28a;\n                                } else {\n                                    // 0x40a3ec\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40a28a;\n                                    } else {\n                                        // 0x40a3fa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40a28a;\n                                        } else {\n                                            goto lab_0x40a2c0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40a28a;\n                            }\n                        }\n                    }\n                }\n              lab_0x40a2d1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x40a4a6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x40a652\n                            flockfile(g37);\n                            int64_t v41 = *v1; // 0x40a672\n                            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40a6bf\n                            int64_t v43 = (int64_t)g37;\n                            int64_t v44 = v43; // 0x40a6d9\n                            int64_t v45; // 0x40a6db\n                            if (*(char *)v42 != 0) {\n                                // 0x40a6db\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g37;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x40a6d3\n                            while (v17 + nmemb != v42) {\n                                // 0x40a6d5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40a6db\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g37;\n                                }\n                                // 0x40a6c8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x40a700\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g37);\n                            v40 = *v1;\n                        } else {\n                            // 0x40a4b4\n                            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40a60f\n                        free((int64_t *)v17);\n                    }\n                    // 0x40a509\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x40a520\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40a3ce\n                    return 63;\n                }\n                // 0x40a2f0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x40a374\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x40a380:;\n                    int32_t * v49 = (int32_t *)a7; // 0x40a390\n                    uint32_t v50 = *v49; // 0x40a390\n                    int64_t v51 = v50; // 0x40a390\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40a39a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x40a3a3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40a5cf\n                                __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40a57a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40a3ce\n                            return 63;\n                        }\n                        // 0x40a418\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40a72f\n                                    __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40a62d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x40a640\n                                // 0x40a3ce\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40a53e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x40a552\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40a3bb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40a3be\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x40a3c2\n                    int64_t result = v59; // 0x40a3c8\n                    if (v58 != 0) {\n                        // 0x40a3ca\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40a3ce\n                    return result;\n                }\n            } else {\n                // 0x40a1ce\n                v5 = v32;\n            }\n            // break -> 0x40a2f5\n            break;\n        }\n    }\n    // 0x40a2f5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40a30d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x40a317\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40a3ce\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x40a459\n        __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x40a346\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x40a356\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x40a2c0:\n    // 0x40a2c0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x40a2c0\n    int64_t v63 = *(int64_t *)v62; // 0x40a2c4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x40a2d1\n        goto lab_0x40a2d1;\n    }\n    goto lab_0x40a266;\n  lab_0x40a28a:\n    // 0x40a28a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x40a160\n    int32_t v65; // 0x40a160\n    int32_t v66; // 0x40a160\n    if (v27 != 0) {\n        goto lab_0x40a2c0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x40a440\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x40a2c0;\n            } else {\n                goto lab_0x40a2b1;\n            }\n        } else {\n            // 0x40a2a5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40a59c\n                int64_t v67 = (int64_t)mem; // 0x40a59c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x40a2c0;\n                } else {\n                    // 0x40a5af\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x40a2b1;\n                }\n            } else {\n                goto lab_0x40a2b1;\n            }\n        }\n    }\n  lab_0x40a2b1:\n    // 0x40a2b1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x40a2c0;\n}\n"
        },
        {
            "funcName": "function_40a780",
            "funcStartAddr": "40a780",
            "funcEndAddr": "40ad46",
            "decompiledFuncCode": "int64_t function_40a780(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x40a7a1\n    if (v3 < 1) {\n        // 0x40a95e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40a79d\n    int32_t v5 = *(int32_t *)a7; // 0x40a7a9\n    uint64_t v6 = a1 & 0xffffffff; // 0x40a7ab\n    int64_t v7 = v2; // 0x40a7b0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x40a7b3\n    *v8 = 0;\n    int64_t v9; // 0x40a780\n    int64_t v10; // 0x40a780\n    int64_t v11; // 0x40a780\n    int64_t v12; // 0x40a780\n    int64_t str; // 0x40a780\n    int64_t v13; // 0x40a780\n    int64_t v14; // 0x40a780\n    int64_t v15; // 0x40a780\n    int64_t v16; // 0x40a780\n    int64_t v17; // 0x40a780\n    int32_t v18; // 0x40a780\n    char v19; // 0x40a780\n    if (v5 == 0) {\n        // 0x40a998\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40a7ca;\n    } else {\n        // 0x40a7c3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x40a810\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x40a813\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40a8d8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x40a826\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x40a836\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40a8ec;\n                } else {\n                    goto lab_0x40a848;\n                }\n            }\n        } else {\n            goto lab_0x40a7ca;\n        }\n    }\n  lab_0x40a7ca:\n    // 0x40a7ca\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x40a7d0\n    *v24 = 0;\n    int64_t v25; // 0x40a780\n    int64_t v26; // 0x40a780\n    int64_t v27; // 0x40a780\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x40a8c0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40a8cd;\n        }\n        case 43: {\n            // 0x40abd0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40a8cd;\n        }\n        default: {\n            // 0x40a7ec\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40ab4f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40ac68\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40a8cd;\n                } else {\n                    // 0x40ab5d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40a7fa;\n                }\n            } else {\n                goto lab_0x40a7fa;\n            }\n        }\n    }\n  lab_0x40a8d8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40a8df\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x40a848;\n    } else {\n        goto lab_0x40a8ec;\n    }\n  lab_0x40a7fa:\n    // 0x40a7fa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40a8cd;\n  lab_0x40a8cd:\n    // 0x40a8cd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40a8d8;\n  lab_0x40a848:;\n    uint32_t v30 = *(int32_t *)a7; // 0x40a848\n    int64_t v31 = v30; // 0x40a848\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40a84a\n    if ((int64_t)*v32 > v31) {\n        // 0x40a84f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x40a852\n    if (*v33 > v30) {\n        // 0x40a857\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40a85a\n    int64_t v35 = v31; // 0x40a85e\n    int64_t v36 = v15; // 0x40a85e\n    int64_t v37; // 0x40a780\n    int64_t v38; // 0x40a780\n    int64_t v39; // 0x40a780\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40a9c8\n        int64_t v41 = v40; // 0x40a9c8\n        v2 = v41;\n        int64_t v42; // 0x40a780\n        if (*v33 == v40) {\n            // 0x40abb0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40abb8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40a9d4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40a9d8\n                function_40a080(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40a9e8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40a9f1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40a9fa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40aa11\n            int64_t v47 = v45 & 0xffffffff; // 0x40aa15\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40aa1e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40aa24\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40aa26;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40aa00\n            int64_t v49 = v48 & 0xffffffff; // 0x40aa00\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40aa11\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40aa1e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40aa24\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40aa26;\n                    }\n                }\n                // 0x40aa00\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40abc8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40aa26;\n    } else {\n        goto lab_0x40a864;\n    }\n  lab_0x40a8ec:\n    // 0x40a8ec\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40a8ef\n    int64_t v51 = v12; // 0x40a8ef\n    int64_t v52 = v14; // 0x40a8ef\n    if (*(char *)v10 == 0) {\n        goto lab_0x40a848;\n    } else {\n        goto lab_0x40a8f5;\n    }\n  lab_0x40a864:;\n    int32_t v53 = v35; // 0x40a864\n    int64_t v54; // 0x40a780\n    int64_t v55; // 0x40a780\n    int64_t v56; // 0x40a780\n    int64_t v57; // 0x40a780\n    int64_t v58; // 0x40a780\n    int64_t v59; // 0x40a780\n    char * v60; // 0x40a780\n    int64_t v61; // 0x40a780\n    int64_t v62; // 0x40a879\n    int64_t v63; // 0x40a780\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40a9b3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40a9b6;\n    } else {\n        // 0x40a86c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x40a780\n        int64_t v66 = v65 ? -1 : 1; // 0x40a880\n        int64_t v67 = (int64_t)\"--\"; // 0x40a780\n        int64_t v68 = v62; // 0x40a780\n        int64_t v69 = 3; // 0x40a880\n        unsigned char v70 = *(char *)v68; // 0x40a880\n        char v71 = *(char *)v67; // 0x40a880\n        char v72 = v71; // 0x40a880\n        bool v73 = false; // 0x40a880\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40a970\n            if (*(char *)v62 == 45) {\n                // 0x40aa30\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40aa30\n                if (c == 0) {\n                    goto lab_0x40a97a;\n                } else {\n                    // 0x40aa3d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40aac0;\n                    } else {\n                        if (c == 45) {\n                            // 0x40aca3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40ab15;\n                        } else {\n                            // 0x40aa4e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40aac0;\n                            } else {\n                                // 0x40aa53\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40aa74;\n                                } else {\n                                    // 0x40aa5a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40aac0;\n                                    } else {\n                                        goto lab_0x40aa74;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40a97a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x40a890\n            v2 = v75;\n            int32_t v76 = *v32; // 0x40a893\n            int64_t v77 = v35 + 1; // 0x40a896\n            int32_t v78 = v77; // 0x40a899\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40ac00\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x40a8a7\n                    function_40a080(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x40a8b5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40a9b6;\n        }\n    }\n  lab_0x40a8f5:;\n    // 0x40a8f5\n    int64_t v79; // bp-104, 0x40a780\n    int64_t v80 = &v79; // 0x40a78a\n    int64_t v81 = v50 + 1; // 0x40a8f5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40a8fc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40a901\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40a905\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40a909\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40a911\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40a916\n    int32_t c2 = v84; // 0x40a916\n    char * found_char_pos = strchr(str2, c2); // 0x40a916\n    int64_t v87 = *v82; // 0x40a91b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40a925\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40a930\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40ac20\n            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40abed\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40a95e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40a916\n    char v91 = *(char *)(v90 + 1); // 0x40a94b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40a905\n        if (v91 != 58) {\n            // 0x40a95e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40ab74\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40ac78\n                *v8 = 0;\n            } else {\n                // 0x40ac5c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40ab9e\n            *v83 = 0;\n            // 0x40a95e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40ab7e\n        if (v93 != 0) {\n            // 0x40ac10\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40ab9e\n            *v83 = 0;\n            // 0x40a95e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40ab91\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40ab9e\n            *v83 = 0;\n            // 0x40a95e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40acda\n            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40ac8a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40ac91\n        // 0x40ab9e\n        *v83 = 0;\n        // 0x40a95e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40aae9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40aaeb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40ad10\n                __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40acc1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40acc8\n            // 0x40a95e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40aaf6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40aafa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40ab15;\n  lab_0x40aa26:\n    // 0x40aa26\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x40a864;\n  lab_0x40ab15:;\n    int64_t v99 = function_40a160(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40ab33\n    // 0x40a95e\n    return v99 & 0xffffffff;\n  lab_0x40a9b6:;\n    int32_t v100 = v55; // 0x40a9b6\n    if (v100 != (int32_t)v59) {\n        // 0x40a9ba\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40a95e\n    return 0xffffffff;\n  lab_0x40a97a:\n    // 0x40a97a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40a981\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40a95e\n    return v99 & 0xffffffff;\n  lab_0x40aac0:\n    // 0x40aac0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40a8f5;\n  lab_0x40aa74:\n    // 0x40aa74\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_40a160(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40aa9a\n    if ((int32_t)v101 != -1) {\n        // 0x40a95e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40aaaf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40aac0;\n}\n"
        },
        {
            "funcName": "function_40ad50",
            "funcStartAddr": "40ad50",
            "funcEndAddr": "40ada6",
            "decompiledFuncCode": "int64_t function_40ad50(int64_t a1) {\n    // 0x40ad50\n    *(int32_t *)&g56 = g33;\n    *(int32_t *)&g57 = g32;\n    int64_t v1; // 0x40ad50\n    int64_t result = function_40a780(v1, v1, v1, v1, v1, v1, &g56, a1 & 0xffffffff); // 0x40ad76\n    g33 = *(int32_t *)&g56;\n    g64 = g59;\n    *(int32_t *)&g31 = g58;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40adb0",
            "funcStartAddr": "40adb0",
            "funcEndAddr": "40adc8",
            "decompiledFuncCode": "int64_t function_40adb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40adb0\n    return function_40ad50(1);\n}\n"
        },
        {
            "funcName": "function_40add0",
            "funcStartAddr": "40add0",
            "funcEndAddr": "40ade3",
            "decompiledFuncCode": "int64_t function_40add0(int64_t a1, int64_t a2, char * a3, char (**a4)[12], int32_t a5, int64_t a6) {\n    // 0x40add0\n    return function_40ad50(0);\n}\n"
        },
        {
            "funcName": "function_40adf0",
            "funcStartAddr": "40adf0",
            "funcEndAddr": "40ae05",
            "decompiledFuncCode": "int64_t function_40adf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40adf0\n    return function_40a780(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40ae10",
            "funcStartAddr": "40ae10",
            "funcEndAddr": "40ae26",
            "decompiledFuncCode": "int64_t function_40ae10(void) {\n    // 0x40ae10\n    return function_40ad50(0);\n}\n"
        },
        {
            "funcName": "function_40ae30",
            "funcStartAddr": "40ae30",
            "funcEndAddr": "40ae48",
            "decompiledFuncCode": "int64_t function_40ae30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40ae30\n    return function_40a780(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40ae50",
            "funcStartAddr": "40ae50",
            "funcEndAddr": "40aeca",
            "decompiledFuncCode": "int64_t function_40ae50(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40ae5b\n    int64_t v2 = (int64_t)&g13; // 0x40ae5b\n    int32_t * pwc; // 0x40ae50\n    int64_t v3; // 0x40ae50\n    int64_t n; // 0x40ae50\n    if (a2 == 0) {\n        goto lab_0x40aea2;\n    } else {\n        // 0x40ae5d\n        if (a3 == 0) {\n            // 0x40ae88\n            return -2;\n        }\n        // 0x40ae69\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40aea2;\n        } else {\n            goto lab_0x40ae74;\n        }\n    }\n  lab_0x40aea2:\n    // 0x40aea2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40ae50\n    pwc = (int32_t *)&v4;\n    goto lab_0x40ae74;\n  lab_0x40ae74:;\n    char * wstr = (char *)v3; // 0x40ae7a\n    int64_t ps; // 0x40ae50\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40ae7a\n    int64_t result = v5; // 0x40ae7a\n    if (v5 < 0xfffffffe) {\n        // 0x40ae88\n        return result;\n    }\n    int64_t result2 = result; // 0x40aeb9\n    if ((char)function_40c6f0(0, v3) == 0) {\n        // 0x40aebb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40ae88\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40aed0",
            "funcStartAddr": "40aed0",
            "funcEndAddr": "40afd4",
            "decompiledFuncCode": "int64_t function_40aed0(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x40aed0\n    if (a3 == 0) {\n        // 0x40af09\n        return 0;\n    }\n    int64_t v1 = result; // 0x40aedc\n    int64_t v2 = a3; // 0x40aedc\n    int64_t result2; // 0x40aed0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40aede\n        int64_t v4 = result; // 0x40aee1\n        if ((char)result == v3) {\n            // 0x40af09\n            return result;\n        }\n        int64_t v5 = a3; // 0x40aee1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40aef0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40af10;\n            }\n            // 0x40aef6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40af09\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40af09\n        return result2;\n    }\n  lab_0x40af10:;\n    int64_t result3 = v1; // 0x40af3d\n    int64_t v6 = v2; // 0x40af3d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x40af1f\n        int64_t v8 = 0x10000 * v7 | v7; // 0x40af2c\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x40af36\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x40af56\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x40af85\n            int64_t v12 = v1 + 8; // 0x40af89\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x40af73\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40af9c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x40af93\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x40af09\n                return 0;\n            }\n        }\n    }\n  lab_0x40af9c:;\n    char v14 = a2; // 0x40af9c\n    if (*(char *)result3 == v14) {\n        // 0x40af09\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x40afb0\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x40af09\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x40af09\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40afe0",
            "funcStartAddr": "40afe0",
            "funcEndAddr": "40b06a",
            "decompiledFuncCode": "int64_t function_40afe0(int64_t str, int64_t a2, int64_t a3) {\n    uint64_t result = (int64_t)strlen((char *)str) + 1; // 0x40afee\n    int64_t v1 = str; // 0x40aff2\n    int64_t v2 = 0; // 0x40aff2\n    int64_t v3; // 0x40afe0\n    char v4; // 0x40b007\n    int64_t v5; // 0x40b00b\n    while (true) {\n      lab_0x40b007:;\n        int64_t v6 = v2;\n        v3 = v1;\n        int64_t v7 = v6 + str;\n        v4 = *(char *)v7;\n        v5 = v6 + 1;\n        if (v4 != 92) {\n            goto lab_0x40aff8;\n        } else {\n            int64_t v8 = v6 + 4; // 0x40b015\n            if (v8 >= result) {\n                goto lab_0x40aff8;\n            } else {\n                char v9 = *(char *)(v5 + str); // 0x40b01e\n                if ((v9 & -4) == 48) {\n                    char v10 = *(char *)(v7 + 2); // 0x40b02d\n                    if ((v10 & -8) == 48) {\n                        char v11 = *(char *)(v7 + 3); // 0x40b03d\n                        if ((v11 & -8) == 48) {\n                            // 0x40b04c\n                            *(char *)v3 = 8 * (v10 + 8 * v9) + 80 + v11;\n                            v2 = v8;\n                            goto lab_0x40b004;\n                        } else {\n                            goto lab_0x40aff8;\n                        }\n                    } else {\n                        goto lab_0x40aff8;\n                    }\n                } else {\n                    goto lab_0x40aff8;\n                }\n            }\n        }\n    }\n    // 0x40b068\n    return result;\n  lab_0x40aff8:\n    // 0x40aff8\n    *(char *)v3 = v4;\n    v2 = v5;\n    if (result <= v5) {\n        return result;\n    }\n    goto lab_0x40b004;\n  lab_0x40b004:\n    // 0x40b004\n    v1 = v3 + 1;\n    goto lab_0x40b007;\n}\n"
        },
        {
            "funcName": "function_40b070",
            "funcStartAddr": "40b070",
            "funcEndAddr": "40b0b2",
            "decompiledFuncCode": "int64_t function_40b070(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40b077\n    free(v1);\n    free((int64_t *)*(int64_t *)(a1 + 8));\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    if ((*(char *)(a1 + 40) & 4) == 0) {\n        // 0x40b094\n        free(v1);\n        return &g65;\n    }\n    // 0x40b0a0\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free(v1);\n    return &g65;\n}\n"
        },
        {
            "funcName": "function_40b0c0",
            "funcStartAddr": "40b0c0",
            "funcEndAddr": "40b87f",
            "decompiledFuncCode": "int64_t function_40b0c0(int32_t a1) {\n    // 0x40b0c0\n    int64_t v1; // bp-152, 0x40b0c0\n    int64_t v2 = &v1; // 0x40b0d4\n    struct _IO_FILE * file = fopen(\"/proc/self/mountinfo\", \"r\"); // 0x40b0d8\n    bool v3; // 0x40b0c0\n    bool v4; // 0x40b0c0\n    int64_t * v5; // 0x40b0c0\n    int64_t v6; // 0x40b0c0\n    int64_t v7; // 0x40b0c0\n    int64_t v8; // 0x40b0c0\n    int64_t v9; // 0x40b0c0\n    int64_t v10; // 0x40b0c0\n    int64_t v11; // 0x40b0c0\n    int64_t v12; // 0x40b0c0\n    int64_t v13; // 0x40b0c0\n    int64_t v14; // 0x40b0c0\n    int32_t * v15; // 0x40b0c0\n    int32_t v16; // 0x40b0c0\n    struct mntent * v17; // 0x40b0c0\n    char v18; // 0x40b0c0\n    char v19; // 0x40b0c0\n    int64_t v20; // bp-80, 0x40b0c0\n    int32_t * v21; // 0x40b122\n    char * v22; // 0x40b2a4\n    unsigned char v23; // 0x40b798\n    int64_t v24; // 0x40b30a\n    unsigned char v25; // 0x40b4c0\n    bool v26; // 0x40b0c0\n    int64_t * v27; // 0x40b0c0\n    int64_t v28; // 0x40b0c0\n    int64_t v29; // 0x40b0c0\n    struct _IO_FILE * v30; // 0x40b4fa\n    int64_t v31; // 0x40b545\n    char * v32; // 0x40b581\n    int64_t v33; // 0x40b6e4\n    char ** v34; // 0x40b122\n    int64_t v35; // 0x40b234\n    bool v36; // 0x40b0c0\n    bool v37; // 0x40b0c0\n    if (file == NULL) {\n        // 0x40b4f0\n        v30 = setmntent(\"/etc/mtab\", \"r\");\n        if (v30 == NULL) {\n            // 0x40b37a\n            return 0;\n        }\n        int64_t v38 = &v20; // 0x40b50e\n        struct mntent * v39 = getmntent(v30); // 0x40b51a\n        v12 = v38;\n        if (v39 != NULL) {\n            // 0x40b530\n            v29 = v26 ? -1 : 1;\n            v17 = v39;\n            v10 = v38;\n            while (true) {\n              lab_0x40b530:\n                // 0x40b530\n                v11 = v10;\n                int64_t v40 = (int64_t)v17;\n                char * v41 = hasmntopt(v17, \"bind\"); // 0x40b538\n                v31 = function_409560(56);\n                int64_t v42 = function_409790((char *)*(int64_t *)v17); // 0x40b551\n                int64_t * v43 = (int64_t *)v31; // 0x40b55a\n                *v43 = v42;\n                int64_t v44 = function_409790((char *)*(int64_t *)(v40 + 8)); // 0x40b55d\n                *(int64_t *)(v31 + 16) = 0;\n                *(int64_t *)(v31 + 8) = v44;\n                int64_t v45 = function_409790((char *)*(int64_t *)(v40 + 16)); // 0x40b572\n                v32 = (char *)(v31 + 40);\n                *v32 = *v32 | 4;\n                *(int64_t *)(v31 + 24) = v45;\n                int64_t v46 = 7; // 0x40b594\n                int64_t v47 = v45;\n                int64_t v48 = (int64_t)\"autofs\";\n                unsigned char v49 = *(char *)v47; // 0x40b594\n                char v50 = *(char *)v48; // 0x40b594\n                char v51 = v50; // 0x40b594\n                bool v52 = false; // 0x40b594\n                while (v49 == v50) {\n                    v46--;\n                    int64_t v53 = v48 + v29; // 0x40b594\n                    int64_t v54 = v47 + v29; // 0x40b594\n                    v51 = v49;\n                    v52 = true;\n                    if (v46 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v47 = v54;\n                    v48 = v53;\n                    v49 = *(char *)v47;\n                    v50 = *(char *)v48;\n                    v51 = v50;\n                    v52 = false;\n                }\n                unsigned char v55 = v51;\n                int64_t v56 = v45; // 0x40b59d\n                int64_t v57 = 5; // 0x40b59d\n                char v58 = 1; // 0x40b59d\n                if ((v49 >= v55 && !v52) != v49 < v55) {\n                    int64_t v59 = v56;\n                    int64_t v60 = (int64_t)\"proc\";\n                    unsigned char v61 = *(char *)v59; // 0x40b5b0\n                    char v62 = *(char *)v60; // 0x40b5b0\n                    char v63 = v62; // 0x40b5b0\n                    bool v64 = false; // 0x40b5b0\n                    while (v61 == v62) {\n                        int64_t v65 = v57 - 1; // 0x40b5b0\n                        int64_t v66 = v60 + v29; // 0x40b5b0\n                        v56 = v59 + v29;\n                        v57 = v65;\n                        v63 = v61;\n                        v64 = true;\n                        if (v65 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v59 = v56;\n                        v60 = v66;\n                        v61 = *(char *)v59;\n                        v62 = *(char *)v60;\n                        v63 = v62;\n                        v64 = false;\n                    }\n                    unsigned char v67 = v63;\n                    int64_t v68 = v45; // 0x40b5b9\n                    int64_t v69 = 6; // 0x40b5b9\n                    v58 = 1;\n                    if ((v61 >= v67 && !v64) != v61 < v67) {\n                        int64_t v70 = v68;\n                        int64_t v71 = (int64_t)\"subfs\";\n                        unsigned char v72 = *(char *)v70; // 0x40b5cc\n                        char v73 = *(char *)v71; // 0x40b5cc\n                        char v74 = v73; // 0x40b5cc\n                        bool v75 = false; // 0x40b5cc\n                        while (v72 == v73) {\n                            int64_t v76 = v69 - 1; // 0x40b5cc\n                            int64_t v77 = v71 + v29; // 0x40b5cc\n                            v68 = v70 + v29;\n                            v69 = v76;\n                            v74 = v72;\n                            v75 = true;\n                            if (v76 == 0) {\n                                // break -> \n                                break;\n                            }\n                            v70 = v68;\n                            v71 = v77;\n                            v72 = *(char *)v70;\n                            v73 = *(char *)v71;\n                            v74 = v73;\n                            v75 = false;\n                        }\n                        unsigned char v78 = v74;\n                        int64_t v79 = v45; // 0x40b5d5\n                        int64_t v80 = 8; // 0x40b5d5\n                        v58 = 1;\n                        if ((v72 >= v78 && !v75) != v72 < v78) {\n                            int64_t v81 = v79;\n                            int64_t v82 = (int64_t)\"debugfs\";\n                            unsigned char v83 = *(char *)v81; // 0x40b5e8\n                            char v84 = *(char *)v82; // 0x40b5e8\n                            char v85 = v84; // 0x40b5e8\n                            bool v86 = false; // 0x40b5e8\n                            while (v83 == v84) {\n                                int64_t v87 = v80 - 1; // 0x40b5e8\n                                int64_t v88 = v82 + v29; // 0x40b5e8\n                                v79 = v81 + v29;\n                                v80 = v87;\n                                v85 = v83;\n                                v86 = true;\n                                if (v87 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v81 = v79;\n                                v82 = v88;\n                                v83 = *(char *)v81;\n                                v84 = *(char *)v82;\n                                v85 = v84;\n                                v86 = false;\n                            }\n                            unsigned char v89 = v85;\n                            int64_t v90 = v45; // 0x40b5f1\n                            int64_t v91 = 7; // 0x40b5f1\n                            v58 = 1;\n                            if ((v83 >= v89 && !v86) != v83 < v89) {\n                                int64_t v92 = v90;\n                                int64_t v93 = (int64_t)\"devpts\";\n                                unsigned char v94 = *(char *)v92; // 0x40b604\n                                char v95 = *(char *)v93; // 0x40b604\n                                char v96 = v95; // 0x40b604\n                                bool v97 = false; // 0x40b604\n                                while (v94 == v95) {\n                                    int64_t v98 = v91 - 1; // 0x40b604\n                                    int64_t v99 = v93 + v29; // 0x40b604\n                                    v90 = v92 + v29;\n                                    v91 = v98;\n                                    v96 = v94;\n                                    v97 = true;\n                                    if (v98 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v92 = v90;\n                                    v93 = v99;\n                                    v94 = *(char *)v92;\n                                    v95 = *(char *)v93;\n                                    v96 = v95;\n                                    v97 = false;\n                                }\n                                unsigned char v100 = v96;\n                                int64_t v101 = v45; // 0x40b60d\n                                int64_t v102 = 8; // 0x40b60d\n                                v58 = 1;\n                                if ((v94 >= v100 && !v97) != v94 < v100) {\n                                    int64_t v103 = v101;\n                                    int64_t v104 = (int64_t)\"fusectl\";\n                                    unsigned char v105 = *(char *)v103; // 0x40b620\n                                    char v106 = *(char *)v104; // 0x40b620\n                                    char v107 = v106; // 0x40b620\n                                    bool v108 = false; // 0x40b620\n                                    while (v105 == v106) {\n                                        int64_t v109 = v102 - 1; // 0x40b620\n                                        int64_t v110 = v104 + v29; // 0x40b620\n                                        v101 = v103 + v29;\n                                        v102 = v109;\n                                        v107 = v105;\n                                        v108 = true;\n                                        if (v109 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v103 = v101;\n                                        v104 = v110;\n                                        v105 = *(char *)v103;\n                                        v106 = *(char *)v104;\n                                        v107 = v106;\n                                        v108 = false;\n                                    }\n                                    unsigned char v111 = v107;\n                                    int64_t v112 = v45; // 0x40b629\n                                    int64_t v113 = 7; // 0x40b629\n                                    v58 = 1;\n                                    if ((v105 >= v111 && !v108) != v105 < v111) {\n                                        int64_t v114 = v112;\n                                        int64_t v115 = (int64_t)\"mqueue\";\n                                        unsigned char v116 = *(char *)v114; // 0x40b63c\n                                        char v117 = *(char *)v115; // 0x40b63c\n                                        char v118 = v117; // 0x40b63c\n                                        bool v119 = false; // 0x40b63c\n                                        while (v116 == v117) {\n                                            int64_t v120 = v113 - 1; // 0x40b63c\n                                            int64_t v121 = v115 + v29; // 0x40b63c\n                                            v112 = v114 + v29;\n                                            v113 = v120;\n                                            v118 = v116;\n                                            v119 = true;\n                                            if (v120 == 0) {\n                                                // break -> \n                                                break;\n                                            }\n                                            v114 = v112;\n                                            v115 = v121;\n                                            v116 = *(char *)v114;\n                                            v117 = *(char *)v115;\n                                            v118 = v117;\n                                            v119 = false;\n                                        }\n                                        unsigned char v122 = v118;\n                                        int64_t v123 = v45; // 0x40b645\n                                        int64_t v124 = 11; // 0x40b645\n                                        v58 = 1;\n                                        if ((v116 >= v122 && !v119) != v116 < v122) {\n                                            int64_t v125 = v123;\n                                            int64_t v126 = (int64_t)\"rpc_pipefs\";\n                                            unsigned char v127 = *(char *)v125; // 0x40b658\n                                            char v128 = *(char *)v126; // 0x40b658\n                                            char v129 = v128; // 0x40b658\n                                            bool v130 = false; // 0x40b658\n                                            while (v127 == v128) {\n                                                int64_t v131 = v124 - 1; // 0x40b658\n                                                int64_t v132 = v126 + v29; // 0x40b658\n                                                v123 = v125 + v29;\n                                                v124 = v131;\n                                                v129 = v127;\n                                                v130 = true;\n                                                if (v131 == 0) {\n                                                    // break -> \n                                                    break;\n                                                }\n                                                v125 = v123;\n                                                v126 = v132;\n                                                v127 = *(char *)v125;\n                                                v128 = *(char *)v126;\n                                                v129 = v128;\n                                                v130 = false;\n                                            }\n                                            unsigned char v133 = v129;\n                                            int64_t v134 = v45; // 0x40b661\n                                            int64_t v135 = 6; // 0x40b661\n                                            v58 = 1;\n                                            if ((v127 >= v133 && !v130) != v127 < v133) {\n                                                int64_t v136 = v134;\n                                                int64_t v137 = (int64_t)\"sysfs\";\n                                                unsigned char v138 = *(char *)v136; // 0x40b670\n                                                char v139 = *(char *)v137; // 0x40b670\n                                                char v140 = v139; // 0x40b670\n                                                bool v141 = false; // 0x40b670\n                                                while (v138 == v139) {\n                                                    int64_t v142 = v135 - 1; // 0x40b670\n                                                    int64_t v143 = v137 + v29; // 0x40b670\n                                                    v134 = v136 + v29;\n                                                    v135 = v142;\n                                                    v140 = v138;\n                                                    v141 = true;\n                                                    if (v142 == 0) {\n                                                        // break -> \n                                                        break;\n                                                    }\n                                                    v136 = v134;\n                                                    v137 = v143;\n                                                    v138 = *(char *)v136;\n                                                    v139 = *(char *)v137;\n                                                    v140 = v139;\n                                                    v141 = false;\n                                                }\n                                                unsigned char v144 = v140;\n                                                int64_t v145 = v45; // 0x40b679\n                                                int64_t v146 = 6; // 0x40b679\n                                                v58 = 1;\n                                                if ((v138 >= v144 && !v141) != v138 < v144) {\n                                                    int64_t v147 = v145;\n                                                    int64_t v148 = (int64_t)\"devfs\";\n                                                    unsigned char v149 = *(char *)v147; // 0x40b688\n                                                    char v150 = *(char *)v148; // 0x40b688\n                                                    char v151 = v150; // 0x40b688\n                                                    bool v152 = false; // 0x40b688\n                                                    while (v149 == v150) {\n                                                        int64_t v153 = v146 - 1; // 0x40b688\n                                                        int64_t v154 = v148 + v29; // 0x40b688\n                                                        v145 = v147 + v29;\n                                                        v146 = v153;\n                                                        v151 = v149;\n                                                        v152 = true;\n                                                        if (v153 == 0) {\n                                                            // break -> \n                                                            break;\n                                                        }\n                                                        v147 = v145;\n                                                        v148 = v154;\n                                                        v149 = *(char *)v147;\n                                                        v150 = *(char *)v148;\n                                                        v151 = v150;\n                                                        v152 = false;\n                                                    }\n                                                    unsigned char v155 = v151;\n                                                    int64_t v156 = v45; // 0x40b691\n                                                    int64_t v157 = 7; // 0x40b691\n                                                    v58 = 1;\n                                                    if ((v149 >= v155 && !v152) != v149 < v155) {\n                                                        int64_t v158 = v156;\n                                                        int64_t v159 = (int64_t)\"kernfs\";\n                                                        unsigned char v160 = *(char *)v158; // 0x40b6a0\n                                                        char v161 = *(char *)v159; // 0x40b6a0\n                                                        char v162 = v161; // 0x40b6a0\n                                                        bool v163 = false; // 0x40b6a0\n                                                        while (v160 == v161) {\n                                                            int64_t v164 = v157 - 1; // 0x40b6a0\n                                                            int64_t v165 = v159 + v29; // 0x40b6a0\n                                                            v156 = v158 + v29;\n                                                            v157 = v164;\n                                                            v162 = v160;\n                                                            v163 = true;\n                                                            if (v164 == 0) {\n                                                                // break -> \n                                                                break;\n                                                            }\n                                                            v158 = v156;\n                                                            v159 = v165;\n                                                            v160 = *(char *)v158;\n                                                            v161 = *(char *)v159;\n                                                            v162 = v161;\n                                                            v163 = false;\n                                                        }\n                                                        unsigned char v166 = v162;\n                                                        v58 = 1;\n                                                        if ((v160 >= v166 && !v163) != v160 < v166) {\n                                                            char * str = (char *)v45; // 0x40b6b7\n                                                            v58 = 1;\n                                                            if (strcmp(str, \"ignore\") != 0) {\n                                                                // 0x40b6c5\n                                                                v58 = v41 == NULL == strcmp(str, \"none\") == 0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                // 0x40b6e0\n                v33 = *v43;\n                *v32 = *v32 & -2 | v58;\n                char * str2 = (char *)v33; // 0x40b6f7\n                v19 = 1;\n                if (strchr(str2, 58) == NULL) {\n                    // 0x40b798\n                    v23 = *str2;\n                    if (v23 == 47) {\n                        // 0x40b830\n                        v3 = true;\n                        v37 = false;\n                        if (*(char *)(v33 + 1) != 47) {\n                            goto lab___crit_edge183;\n                        } else {\n                            int64_t v167; // 0x40b0c0\n                            unsigned char v168 = *(char *)v167; // 0x40b848\n                            int64_t v169; // 0x40b0c0\n                            char v170 = *(char *)v169; // 0x40b848\n                            while (v168 == v170) {\n                                // 0x40b83b\n                                int64_t v171; // 0x40b0c0\n                                int64_t v172 = v171;\n                                int64_t v173 = v172 - 1; // 0x40b848\n                                int64_t v174; // 0x40b0c0\n                                v169 = v174 + v29;\n                                int64_t v175; // 0x40b0c0\n                                v167 = v175 + v29;\n                                v171 = v173;\n                                char v176 = v168; // 0x40b848\n                                bool v177 = true; // 0x40b848\n                                if (v173 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v175 = v167;\n                                v174 = v169;\n                                v168 = *(char *)v175;\n                                v170 = *(char *)v174;\n                                v176 = v170;\n                                v177 = false;\n                            }\n                            unsigned char v178 = v170;\n                            v19 = 1;\n                            int64_t v179 = v45; // 0x40b851\n                            int64_t v180 = 5; // 0x40b851\n                            if ((v168 >= v178 && true) == v168 < v178) {\n                                goto lab_0x40b70a;\n                            } else {\n                                int64_t v181 = v179;\n                                int64_t v182 = (int64_t)\"cifs\";\n                                unsigned char v183 = *(char *)v181; // 0x40b864\n                                char v184 = *(char *)v182; // 0x40b864\n                                char v185 = v184; // 0x40b864\n                                bool v186 = false; // 0x40b864\n                                while (v183 == v184) {\n                                    int64_t v187 = v180 - 1; // 0x40b864\n                                    int64_t v188 = v182 + v29; // 0x40b864\n                                    v179 = v181 + v29;\n                                    v180 = v187;\n                                    v185 = v183;\n                                    v186 = true;\n                                    if (v187 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v181 = v179;\n                                    v182 = v188;\n                                    v183 = *(char *)v181;\n                                    v184 = *(char *)v182;\n                                    v185 = v184;\n                                    v186 = false;\n                                }\n                                unsigned char v189 = v185;\n                                v19 = 1;\n                                if ((v183 >= v189 && !v186) == v183 < v189) {\n                                    goto lab_0x40b70a;\n                                } else {\n                                    goto lab_0x40b7a2;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40b7a2;\n                    }\n                } else {\n                    goto lab_0x40b70a;\n                }\n            }\n        }\n      lab_0x40b738:\n        // 0x40b738\n        v9 = v12;\n        v13 = v12;\n        if (endmntent(v30) != 0) {\n            goto lab_0x40b36d;\n        } else {\n            goto lab_0x40b748;\n        }\n    } else {\n        int64_t v190 = &v20; // 0x40b0f2\n        int64_t v191 = v2 + 88; // 0x40b118\n        int64_t v192 = v2 + 80; // 0x40b11d\n        v34 = (char **)v192;\n        v21 = (int32_t *)v191;\n        if (__getdelim(v34, v21, 10, file) == -1) {\n            // 0x40b0e6\n            v5 = (int64_t *)v192;\n            v8 = v190;\n        } else {\n            int64_t v193 = v2 + 31; // 0x40b13a\n            int64_t * v194 = (int64_t *)(v2 - 16); // 0x40b13f\n            int64_t v195 = v2 + 44; // 0x40b140\n            int64_t v196 = v2 + 40; // 0x40b146\n            v27 = (int64_t *)v192;\n            int64_t v197 = v2 + 64; // 0x40b158\n            int64_t v198 = v2 + 32; // 0x40b162\n            int32_t * v199 = (int32_t *)(v2 + 36);\n            int32_t * v200 = (int32_t *)(v2 + 68);\n            int32_t * v201 = (int32_t *)v195;\n            int64_t v202 = v2 + 60;\n            int64_t v203 = v2 + 56;\n            int64_t v204 = v2 + 52;\n            int64_t v205 = v2 + 48;\n            v28 = v26 ? -1 : 1;\n            int32_t * v206 = (int32_t *)v203;\n            int32_t * v207 = (int32_t *)v196;\n            int32_t * v208 = (int32_t *)v197;\n            v6 = v190;\n            while (true) {\n              lab_0x40b131:\n                // 0x40b131\n                v7 = v6;\n                int64_t str4; // 0x40b187\n                while (true) {\n                    // 0x40b131\n                    *v194 = v193;\n                    *(int64_t *)(v2 - 24) = v195;\n                    *(int64_t *)(v2 - 32) = v196;\n                    int64_t str3 = *v27; // 0x40b14c\n                    if ((sscanf((char *)str3, \"%*u %*u %u:%u %n%*s%n %n%*s%n%c\", (int64_t *)v198, v199, (int64_t *)v197, v200) & -5) == 3) {\n                        // 0x40b178\n                        str4 = function_40bd00(*v27 + (int64_t)*v201, \" - \");\n                        if (str4 != 0) {\n                            // 0x40b198\n                            *v194 = v193;\n                            if ((sscanf((char *)str4, \" - %n%*s%n %n%*s%n %c\", (int32_t **)v205, (int64_t *)v204, (char **)v203, (int32_t **)v202) & -5) == 1) {\n                                // break -> 0x40b1ce\n                                break;\n                            }\n                        }\n                    }\n                    // 0x40b110\n                    v5 = v27;\n                    v8 = v7;\n                    if (__getdelim(v34, v21, 10, file) == -1) {\n                        // break (via goto) -> 0x40b348\n                        goto lab_0x40b348_2;\n                    }\n                }\n                // 0x40b1ce\n                *(char *)(*v27 + (int64_t)*v200) = 0;\n                int64_t v209 = *v27; // 0x40b1e2\n                *(char *)(v209 + (int64_t)*v201) = 0;\n                *(char *)(str4 + (int64_t)*(int32_t *)v204) = 0;\n                *(char *)(str4 + (int64_t)*(int32_t *)v202) = 0;\n                function_40afe0(str4 + (int64_t)*v206, (int64_t)\" - %n%*s%n %n%*s%n %c\", v209);\n                function_40afe0(*v27 + (int64_t)*v207, (int64_t)\" - %n%*s%n %n%*s%n %c\", v209);\n                function_40afe0(*v27 + (int64_t)*v208, (int64_t)\" - %n%*s%n %n%*s%n %c\", v209);\n                v35 = function_409560(56);\n                int64_t v210 = function_409790((char *)(str4 + (int64_t)*v206)); // 0x40b244\n                int64_t * v211 = (int64_t *)v35; // 0x40b253\n                *v211 = v210;\n                int64_t v212 = function_409790((char *)(*v27 + (int64_t)*v207)); // 0x40b256\n                *(int64_t *)(v35 + 8) = v212;\n                int64_t v213 = function_409790((char *)(*v27 + (int64_t)*v208)); // 0x40b269\n                *(int64_t *)(v35 + 16) = v213;\n                int64_t v214 = function_409790((char *)(str4 + (int64_t)*(int32_t *)v205)); // 0x40b27a\n                uint32_t v215 = *(int32_t *)v198; // 0x40b27f\n                *(int64_t *)(v35 + 24) = v214;\n                uint32_t v216 = *v199; // 0x40b299\n                int64_t v217 = 0x100000000 * (int64_t)v215; // 0x40b2a0\n                v22 = (char *)(v35 + 40);\n                *v22 = *v22 | 4;\n                int64_t v218 = v215 < 0xfffff001 ? v217 : v217 + 0xfffffffffff; // 0x40b2ac\n                int64_t v219 = v218 | (int64_t)(256 * v215 & 0xfff00) | (int64_t)(v216 % 256) | 0x1000 * (int64_t)v216 & 0xffffff00000; // 0x40b2cd\n                int64_t v220 = 7; // 0x40b2d0\n                int64_t v221 = v214;\n                int64_t v222 = (int64_t)\"autofs\";\n                unsigned char v223 = *(char *)v221; // 0x40b2d0\n                char v224 = *(char *)v222; // 0x40b2d0\n                char v225 = v224; // 0x40b2d0\n                bool v226 = false; // 0x40b2d0\n                while (v223 == v224) {\n                    v220--;\n                    int64_t v227 = v222 + v28; // 0x40b2d0\n                    int64_t v228 = v221 + v28; // 0x40b2d0\n                    v225 = v223;\n                    v226 = true;\n                    if (v220 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v221 = v228;\n                    v222 = v227;\n                    v223 = *(char *)v221;\n                    v224 = *(char *)v222;\n                    v225 = v224;\n                    v226 = false;\n                }\n                unsigned char v229 = v225;\n                *(int64_t *)(v35 + 32) = v219;\n                int64_t v230 = v214; // 0x40b2dd\n                int64_t v231 = 5; // 0x40b2dd\n                char v232 = 1; // 0x40b2dd\n                if ((v223 >= v229 && !v226) != v223 < v229) {\n                    int64_t v233 = v230;\n                    int64_t v234 = (int64_t)\"proc\";\n                    unsigned char v235 = *(char *)v233; // 0x40b2ec\n                    char v236 = *(char *)v234; // 0x40b2ec\n                    char v237 = v236; // 0x40b2ec\n                    bool v238 = false; // 0x40b2ec\n                    while (v235 == v236) {\n                        int64_t v239 = v231 - 1; // 0x40b2ec\n                        int64_t v240 = v234 + v28; // 0x40b2ec\n                        v230 = v233 + v28;\n                        v231 = v239;\n                        v237 = v235;\n                        v238 = true;\n                        if (v239 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v233 = v230;\n                        v234 = v240;\n                        v235 = *(char *)v233;\n                        v236 = *(char *)v234;\n                        v237 = v236;\n                        v238 = false;\n                    }\n                    unsigned char v241 = v237;\n                    v232 = 1;\n                    int64_t v242 = v214; // 0x40b2f5\n                    int64_t v243 = 6; // 0x40b2f5\n                    if ((v235 >= v241 && !v238) != v235 < v241) {\n                        int64_t v244 = v242;\n                        int64_t v245 = (int64_t)\"subfs\";\n                        unsigned char v246 = *(char *)v244; // 0x40b39d\n                        char v247 = *(char *)v245; // 0x40b39d\n                        char v248 = v247; // 0x40b39d\n                        bool v249 = false; // 0x40b39d\n                        while (v246 == v247) {\n                            int64_t v250 = v243 - 1; // 0x40b39d\n                            int64_t v251 = v245 + v28; // 0x40b39d\n                            v242 = v244 + v28;\n                            v243 = v250;\n                            v248 = v246;\n                            v249 = true;\n                            if (v250 == 0) {\n                                // break -> \n                                break;\n                            }\n                            v244 = v242;\n                            v245 = v251;\n                            v246 = *(char *)v244;\n                            v247 = *(char *)v245;\n                            v248 = v247;\n                            v249 = false;\n                        }\n                        unsigned char v252 = v248;\n                        v232 = 1;\n                        int64_t v253 = v214; // 0x40b3a6\n                        int64_t v254 = 8; // 0x40b3a6\n                        if ((v246 >= v252 && !v249) != v246 < v252) {\n                            int64_t v255 = v253;\n                            int64_t v256 = (int64_t)\"debugfs\";\n                            unsigned char v257 = *(char *)v255; // 0x40b3b9\n                            char v258 = *(char *)v256; // 0x40b3b9\n                            char v259 = v258; // 0x40b3b9\n                            bool v260 = false; // 0x40b3b9\n                            while (v257 == v258) {\n                                int64_t v261 = v254 - 1; // 0x40b3b9\n                                int64_t v262 = v256 + v28; // 0x40b3b9\n                                v253 = v255 + v28;\n                                v254 = v261;\n                                v259 = v257;\n                                v260 = true;\n                                if (v261 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v255 = v253;\n                                v256 = v262;\n                                v257 = *(char *)v255;\n                                v258 = *(char *)v256;\n                                v259 = v258;\n                                v260 = false;\n                            }\n                            unsigned char v263 = v259;\n                            v232 = 1;\n                            int64_t v264 = v214; // 0x40b3c2\n                            int64_t v265 = 7; // 0x40b3c2\n                            if ((v257 >= v263 && !v260) != v257 < v263) {\n                                int64_t v266 = v264;\n                                int64_t v267 = (int64_t)\"devpts\";\n                                unsigned char v268 = *(char *)v266; // 0x40b3d5\n                                char v269 = *(char *)v267; // 0x40b3d5\n                                char v270 = v269; // 0x40b3d5\n                                bool v271 = false; // 0x40b3d5\n                                while (v268 == v269) {\n                                    int64_t v272 = v265 - 1; // 0x40b3d5\n                                    int64_t v273 = v267 + v28; // 0x40b3d5\n                                    v264 = v266 + v28;\n                                    v265 = v272;\n                                    v270 = v268;\n                                    v271 = true;\n                                    if (v272 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v266 = v264;\n                                    v267 = v273;\n                                    v268 = *(char *)v266;\n                                    v269 = *(char *)v267;\n                                    v270 = v269;\n                                    v271 = false;\n                                }\n                                unsigned char v274 = v270;\n                                v232 = 1;\n                                int64_t v275 = v214; // 0x40b3de\n                                int64_t v276 = 8; // 0x40b3de\n                                if ((v268 >= v274 && !v271) != v268 < v274) {\n                                    int64_t v277 = v275;\n                                    int64_t v278 = (int64_t)\"fusectl\";\n                                    unsigned char v279 = *(char *)v277; // 0x40b3f1\n                                    char v280 = *(char *)v278; // 0x40b3f1\n                                    char v281 = v280; // 0x40b3f1\n                                    bool v282 = false; // 0x40b3f1\n                                    while (v279 == v280) {\n                                        int64_t v283 = v276 - 1; // 0x40b3f1\n                                        int64_t v284 = v278 + v28; // 0x40b3f1\n                                        v275 = v277 + v28;\n                                        v276 = v283;\n                                        v281 = v279;\n                                        v282 = true;\n                                        if (v283 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v277 = v275;\n                                        v278 = v284;\n                                        v279 = *(char *)v277;\n                                        v280 = *(char *)v278;\n                                        v281 = v280;\n                                        v282 = false;\n                                    }\n                                    unsigned char v285 = v281;\n                                    v232 = 1;\n                                    int64_t v286 = v214; // 0x40b3fa\n                                    int64_t v287 = 7; // 0x40b3fa\n                                    if ((v279 >= v285 && !v282) != v279 < v285) {\n                                        int64_t v288 = v286;\n                                        int64_t v289 = (int64_t)\"mqueue\";\n                                        unsigned char v290 = *(char *)v288; // 0x40b40d\n                                        char v291 = *(char *)v289; // 0x40b40d\n                                        char v292 = v291; // 0x40b40d\n                                        bool v293 = false; // 0x40b40d\n                                        while (v290 == v291) {\n                                            int64_t v294 = v287 - 1; // 0x40b40d\n                                            int64_t v295 = v289 + v28; // 0x40b40d\n                                            v286 = v288 + v28;\n                                            v287 = v294;\n                                            v292 = v290;\n                                            v293 = true;\n                                            if (v294 == 0) {\n                                                // break -> \n                                                break;\n                                            }\n                                            v288 = v286;\n                                            v289 = v295;\n                                            v290 = *(char *)v288;\n                                            v291 = *(char *)v289;\n                                            v292 = v291;\n                                            v293 = false;\n                                        }\n                                        unsigned char v296 = v292;\n                                        v232 = 1;\n                                        int64_t v297 = v214; // 0x40b416\n                                        int64_t v298 = 11; // 0x40b416\n                                        if ((v290 >= v296 && !v293) != v290 < v296) {\n                                            int64_t v299 = v297;\n                                            int64_t v300 = (int64_t)\"rpc_pipefs\";\n                                            unsigned char v301 = *(char *)v299; // 0x40b429\n                                            char v302 = *(char *)v300; // 0x40b429\n                                            char v303 = v302; // 0x40b429\n                                            bool v304 = false; // 0x40b429\n                                            while (v301 == v302) {\n                                                int64_t v305 = v298 - 1; // 0x40b429\n                                                int64_t v306 = v300 + v28; // 0x40b429\n                                                v297 = v299 + v28;\n                                                v298 = v305;\n                                                v303 = v301;\n                                                v304 = true;\n                                                if (v305 == 0) {\n                                                    // break -> \n                                                    break;\n                                                }\n                                                v299 = v297;\n                                                v300 = v306;\n                                                v301 = *(char *)v299;\n                                                v302 = *(char *)v300;\n                                                v303 = v302;\n                                                v304 = false;\n                                            }\n                                            unsigned char v307 = v303;\n                                            v232 = 1;\n                                            int64_t v308 = v214; // 0x40b432\n                                            int64_t v309 = 6; // 0x40b432\n                                            if ((v301 >= v307 && !v304) != v301 < v307) {\n                                                int64_t v310 = v308;\n                                                int64_t v311 = (int64_t)\"sysfs\";\n                                                unsigned char v312 = *(char *)v310; // 0x40b445\n                                                char v313 = *(char *)v311; // 0x40b445\n                                                char v314 = v313; // 0x40b445\n                                                bool v315 = false; // 0x40b445\n                                                while (v312 == v313) {\n                                                    int64_t v316 = v309 - 1; // 0x40b445\n                                                    int64_t v317 = v311 + v28; // 0x40b445\n                                                    v308 = v310 + v28;\n                                                    v309 = v316;\n                                                    v314 = v312;\n                                                    v315 = true;\n                                                    if (v316 == 0) {\n                                                        // break -> \n                                                        break;\n                                                    }\n                                                    v310 = v308;\n                                                    v311 = v317;\n                                                    v312 = *(char *)v310;\n                                                    v313 = *(char *)v311;\n                                                    v314 = v313;\n                                                    v315 = false;\n                                                }\n                                                unsigned char v318 = v314;\n                                                v232 = 1;\n                                                int64_t v319 = v214; // 0x40b44e\n                                                int64_t v320 = 6; // 0x40b44e\n                                                if ((v312 >= v318 && !v315) != v312 < v318) {\n                                                    int64_t v321 = v319;\n                                                    int64_t v322 = (int64_t)\"devfs\";\n                                                    unsigned char v323 = *(char *)v321; // 0x40b461\n                                                    char v324 = *(char *)v322; // 0x40b461\n                                                    char v325 = v324; // 0x40b461\n                                                    bool v326 = false; // 0x40b461\n                                                    while (v323 == v324) {\n                                                        int64_t v327 = v320 - 1; // 0x40b461\n                                                        int64_t v328 = v322 + v28; // 0x40b461\n                                                        v319 = v321 + v28;\n                                                        v320 = v327;\n                                                        v325 = v323;\n                                                        v326 = true;\n                                                        if (v327 == 0) {\n                                                            // break -> \n                                                            break;\n                                                        }\n                                                        v321 = v319;\n                                                        v322 = v328;\n                                                        v323 = *(char *)v321;\n                                                        v324 = *(char *)v322;\n                                                        v325 = v324;\n                                                        v326 = false;\n                                                    }\n                                                    unsigned char v329 = v325;\n                                                    v232 = 1;\n                                                    int64_t v330 = v214; // 0x40b46a\n                                                    int64_t v331 = 7; // 0x40b46a\n                                                    if ((v323 >= v329 && !v326) != v323 < v329) {\n                                                        int64_t v332 = v330;\n                                                        int64_t v333 = (int64_t)\"kernfs\";\n                                                        unsigned char v334 = *(char *)v332; // 0x40b47d\n                                                        char v335 = *(char *)v333; // 0x40b47d\n                                                        char v336 = v335; // 0x40b47d\n                                                        bool v337 = false; // 0x40b47d\n                                                        while (v334 == v335) {\n                                                            int64_t v338 = v331 - 1; // 0x40b47d\n                                                            int64_t v339 = v333 + v28; // 0x40b47d\n                                                            v330 = v332 + v28;\n                                                            v331 = v338;\n                                                            v336 = v334;\n                                                            v337 = true;\n                                                            if (v338 == 0) {\n                                                                // break -> \n                                                                break;\n                                                            }\n                                                            v332 = v330;\n                                                            v333 = v339;\n                                                            v334 = *(char *)v332;\n                                                            v335 = *(char *)v333;\n                                                            v336 = v335;\n                                                            v337 = false;\n                                                        }\n                                                        unsigned char v340 = v336;\n                                                        v232 = 1;\n                                                        if ((v334 >= v340 && !v337) != v334 < v340) {\n                                                            char * str5 = (char *)v214; // 0x40b494\n                                                            v232 = 1;\n                                                            if (strcmp(str5, \"ignore\") != 0) {\n                                                                // 0x40b4a1\n                                                                v232 = strcmp(str5, \"none\") == 0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                // 0x40b2fb\n                v24 = *v211;\n                *v22 = *v22 & -2 | v232;\n                char * str6 = (char *)v24; // 0x40b313\n                v18 = 1;\n                if (strchr(str6, 58) == NULL) {\n                    // 0x40b4c0\n                    v25 = *str6;\n                    if (v25 == 47) {\n                        // 0x40b7c0\n                        v4 = true;\n                        v36 = false;\n                        if (*(char *)(v24 + 1) != 47) {\n                            goto lab___crit_edge191;\n                        } else {\n                            int64_t v341; // 0x40b0c0\n                            unsigned char v342 = *(char *)v341; // 0x40b7d8\n                            int64_t v343; // 0x40b0c0\n                            char v344 = *(char *)v343; // 0x40b7d8\n                            while (v342 == v344) {\n                                // 0x40b7cb\n                                int64_t v345; // 0x40b0c0\n                                int64_t v346 = v345;\n                                int64_t v347 = v346 - 1; // 0x40b7d8\n                                int64_t v348; // 0x40b0c0\n                                v343 = v348 + v28;\n                                int64_t v349; // 0x40b0c0\n                                v341 = v349 + v28;\n                                v345 = v347;\n                                char v350 = v342; // 0x40b7d8\n                                bool v351 = true; // 0x40b7d8\n                                if (v347 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v349 = v341;\n                                v348 = v343;\n                                v342 = *(char *)v349;\n                                v344 = *(char *)v348;\n                                v350 = v344;\n                                v351 = false;\n                            }\n                            unsigned char v352 = v344;\n                            v18 = 1;\n                            int64_t v353 = v214; // 0x40b7e1\n                            int64_t v354 = 5; // 0x40b7e1\n                            if ((v342 >= v352 && true) == v342 < v352) {\n                                goto lab_0x40b326;\n                            } else {\n                                int64_t v355 = v353;\n                                int64_t v356 = (int64_t)\"cifs\";\n                                unsigned char v357 = *(char *)v355; // 0x40b7f4\n                                char v358 = *(char *)v356; // 0x40b7f4\n                                char v359 = v358; // 0x40b7f4\n                                bool v360 = false; // 0x40b7f4\n                                while (v357 == v358) {\n                                    int64_t v361 = v354 - 1; // 0x40b7f4\n                                    int64_t v362 = v356 + v28; // 0x40b7f4\n                                    v353 = v355 + v28;\n                                    v354 = v361;\n                                    v359 = v357;\n                                    v360 = true;\n                                    if (v361 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v355 = v353;\n                                    v356 = v362;\n                                    v357 = *(char *)v355;\n                                    v358 = *(char *)v356;\n                                    v359 = v358;\n                                    v360 = false;\n                                }\n                                unsigned char v363 = v359;\n                                v18 = 1;\n                                if ((v357 >= v363 && !v360) == v357 < v363) {\n                                    goto lab_0x40b326;\n                                } else {\n                                    goto lab_0x40b4cb;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40b4cb;\n                    }\n                } else {\n                    goto lab_0x40b326;\n                }\n            }\n        }\n      lab_0x40b348_2:;\n        int64_t v364 = (int64_t)file; // 0x40b0d8\n        free((int64_t *)*v5);\n        if ((*(char *)file & 32) != 0) {\n            int32_t * v365 = __errno_location(); // 0x40b810\n            int32_t v366 = *v365; // 0x40b818\n            function_40ced0(v364, v191);\n            *v365 = v366;\n            v14 = v8;\n            v15 = v365;\n            v16 = v366;\n            goto lab_0x40b753;\n        } else {\n            // 0x40b35c\n            v9 = v8;\n            v13 = v8;\n            if ((int32_t)function_40ced0(v364, v191) == -1) {\n                goto lab_0x40b748;\n            } else {\n                goto lab_0x40b36d;\n            }\n        }\n    }\n  lab_0x40b326:\n    // 0x40b326\n    *v22 = *v22 & -3 | 2 * v18;\n    *(int64_t *)v7 = v35;\n    int64_t v367 = v35 + 48; // 0x40b338\n    v6 = v367;\n    v5 = v27;\n    v8 = v367;\n    if (__getdelim(v34, v21, 10, file) == -1) {\n        // break -> 0x40b348\n        goto lab_0x40b348_2;\n    }\n    goto lab_0x40b131;\n  lab_0x40b4cb:;\n    bool v368 = v25 > 45; // 0x40b4d8\n    int64_t v369 = (int64_t)\"-hosts\"; // 0x40b4d8\n    int64_t v370 = v24; // 0x40b4d8\n    v4 = v25 > 45;\n    v36 = false;\n    if (v25 == 45) {\n        int64_t v371 = 6; // 0x40b0c0\n        v4 = v368;\n        v36 = true;\n        while (v371 != 0) {\n            int64_t v372 = v370 + v28; // 0x40b4d8\n            int64_t v373 = v369 + v28; // 0x40b4d8\n            unsigned char v374 = *(char *)v372;\n            unsigned char v375 = *(char *)v373; // 0x40b4d8\n            v371--;\n            v368 = v375 < v374;\n            v369 = v373;\n            v370 = v372;\n            v4 = v375 < v374;\n            v36 = false;\n            if (v375 != v374) {\n                // break -> ._crit_edge191\n                break;\n            }\n            v4 = v368;\n            v36 = true;\n        }\n    }\n    goto lab___crit_edge191;\n  lab___crit_edge191:;\n    bool v376 = v4;\n    v18 = !((v376 | v36)) == v376;\n    goto lab_0x40b326;\n  lab_0x40b70a:\n    // 0x40b70a\n    *(int64_t *)(v31 + 32) = -1;\n    *v32 = *v32 & -3 | 2 * v19;\n    *(int64_t *)v11 = v31;\n    int64_t v377 = v31 + 48; // 0x40b723\n    struct mntent * v378 = getmntent(v30); // 0x40b727\n    v17 = v378;\n    v10 = v377;\n    v12 = v377;\n    if (v378 == NULL) {\n        // break -> 0x40b738\n        goto lab_0x40b738;\n    }\n    goto lab_0x40b530;\n  lab_0x40b7a2:;\n    bool v379 = v23 > 45; // 0x40b7af\n    int64_t v380 = (int64_t)\"-hosts\"; // 0x40b7af\n    int64_t v381 = v33; // 0x40b7af\n    v3 = v23 > 45;\n    v37 = false;\n    if (v23 == 45) {\n        int64_t v382 = 6; // 0x40b0c0\n        v3 = v379;\n        v37 = true;\n        while (v382 != 0) {\n            int64_t v383 = v381 + v29; // 0x40b7af\n            int64_t v384 = v380 + v29; // 0x40b7af\n            unsigned char v385 = *(char *)v383;\n            unsigned char v386 = *(char *)v384; // 0x40b7af\n            v382--;\n            v379 = v386 < v385;\n            v380 = v384;\n            v381 = v383;\n            v3 = v386 < v385;\n            v37 = false;\n            if (v386 != v385) {\n                // break -> ._crit_edge183\n                break;\n            }\n            v3 = v379;\n            v37 = true;\n        }\n    }\n    goto lab___crit_edge183;\n  lab___crit_edge183:;\n    bool v387 = v3;\n    v19 = !((v387 | v37)) == v387;\n    goto lab_0x40b70a;\n  lab_0x40b36d:\n    // 0x40b36d\n    *(int64_t *)v9 = 0;\n    // 0x40b37a\n    return *(int64_t *)(v2 + 72);\n  lab_0x40b748:;\n    int32_t * v388 = __errno_location(); // 0x40b748\n    v14 = v13;\n    v15 = v388;\n    v16 = *v388;\n    goto lab_0x40b753;\n  lab_0x40b753:\n    // 0x40b753\n    *(int64_t *)v14 = 0;\n    int64_t * v389 = (int64_t *)(v2 + 72); // 0x40b75b\n    int64_t v390 = *v389; // 0x40b75b\n    if (v390 == 0) {\n        // 0x40b77e\n        *v15 = v16;\n        return 0;\n    }\n    int64_t v391 = *(int64_t *)(v390 + 48); // 0x40b768\n    function_40b070(v390);\n    *v389 = v391;\n    int64_t v392 = v391; // 0x40b77c\n    while (v391 != 0) {\n        // 0x40b768\n        v391 = *(int64_t *)(v392 + 48);\n        function_40b070(v392);\n        *v389 = v391;\n        v392 = v391;\n    }\n    // 0x40b77e\n    *v15 = v16;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b880",
            "funcStartAddr": "40b880",
            "funcEndAddr": "40b9ae",
            "decompiledFuncCode": "int64_t function_40b880(int64_t a1, uint64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 1; // 0x40b8a7\n    int64_t v2 = 0; // 0x40b8a7\n    int64_t v3 = -1; // 0x40b8a7\n    int64_t v4; // 0x40b880\n    int64_t v5; // 0x40b880\n    int64_t v6; // 0x40b880\n    if (a2 <= 1) {\n        // 0x40b8d3\n        *a3 = 1;\n        v5 = -1;\n        v4 = -1;\n        v6 = 1;\n    } else {\n        int64_t v7; // 0x40b880\n        int64_t v8; // 0x40b880\n        int64_t v9; // 0x40b880\n        int64_t v10; // 0x40b880\n        while (true) {\n            // 0x40b8a9\n            v9 = v3;\n            int64_t v11 = v9 + a1; // 0x40b8a9\n            char * v12 = (char *)(v11 + 1);\n            int64_t v13 = 1;\n            unsigned char v14 = *(char *)(v13 + v11); // 0x40b8ad\n            unsigned char v15 = *(char *)(v1 + a1); // 0x40b8b2\n            int64_t v16 = v1; // 0x40b8b5\n            int64_t v17 = v1; // 0x40b8b5\n            int64_t v18 = v13; // 0x40b8b5\n            int64_t v19 = v2; // 0x40b8b5\n            int64_t v20 = 1; // 0x40b8b5\n            char v21 = v14; // 0x40b8b5\n            char v22 = v15; // 0x40b8b5\n            unsigned char v23; // 0x40b8ad\n            unsigned char v24; // 0x40b8b2\n            int64_t v25; // 0x40b8c7\n            if (v15 < v14) {\n                v10 = v16;\n                v25 = v10 + 1;\n                if (v25 >= a2) {\n                    // break (via goto) -> 0x40b8d3\n                    goto lab_0x40b8d3;\n                }\n                // 0x40b8a9\n                v23 = *v12;\n                v24 = *(char *)(v25 + a1);\n                while (v24 < v23) {\n                    // 0x40b8bb\n                    v10 = v25;\n                    v25 = v10 + 1;\n                    if (v25 >= a2) {\n                        // break (via goto) -> 0x40b8d3\n                        goto lab_0x40b8d3;\n                    }\n                    // 0x40b8a9\n                    v23 = *v12;\n                    v24 = *(char *)(v25 + a1);\n                }\n                // 0x40b938\n                v17 = v25;\n                v18 = 1;\n                v19 = v10;\n                v20 = v10 - v9;\n                v21 = v23;\n                v22 = v24;\n            }\n            // 0x40b938\n            v3 = v19;\n            while (v22 == v21) {\n                int64_t v26 = v18;\n                v13 = v26 == v20 ? 1 : v26 + 1;\n                int64_t v27 = v26 == v20 ? v17 : v3;\n                int64_t v28 = v27 + v13; // 0x40b8a0\n                v8 = v9;\n                v7 = v20;\n                if (v28 >= a2) {\n                    goto lab_0x40b8d3_3;\n                }\n                v14 = *(char *)(v13 + v11);\n                v15 = *(char *)(v28 + a1);\n                v16 = v28;\n                v17 = v28;\n                v18 = v13;\n                v19 = v27;\n                v21 = v14;\n                v22 = v15;\n                if (v15 < v14) {\n                    v10 = v16;\n                    v25 = v10 + 1;\n                    if (v25 >= a2) {\n                        // break (via goto) -> 0x40b8d3\n                        goto lab_0x40b8d3;\n                    }\n                    // 0x40b8a9\n                    v23 = *v12;\n                    v24 = *(char *)(v25 + a1);\n                    while (v24 < v23) {\n                        // 0x40b8bb\n                        v10 = v25;\n                        v25 = v10 + 1;\n                        if (v25 >= a2) {\n                            // break (via goto) -> 0x40b8d3\n                            goto lab_0x40b8d3;\n                        }\n                        // 0x40b8a9\n                        v23 = *v12;\n                        v24 = *(char *)(v25 + a1);\n                    }\n                    // 0x40b938\n                    v17 = v25;\n                    v18 = 1;\n                    v19 = v10;\n                    v20 = v10 - v9;\n                    v21 = v23;\n                    v22 = v24;\n                }\n                // 0x40b938\n                v3 = v19;\n            }\n            // 0x40b93a\n            v1 = v3 + 2;\n            v2 = v3 + 1;\n            v8 = v3;\n            v7 = 1;\n            if (v1 >= a2) {\n                goto lab_0x40b8d3_3;\n            }\n        }\n      lab_0x40b8d3:\n        // 0x40b8d3\n        v8 = v9;\n        v7 = v10 - v9;\n      lab_0x40b8d3_3:\n        // 0x40b8d3\n        *a3 = v7;\n        int64_t v29 = 1; // 0x40b8f7\n        int64_t v30 = -1; // 0x40b8f7\n        int64_t v31 = 0; // 0x40b8f7\n        v5 = v8;\n        v4 = -1;\n        v6 = 1;\n        if (a2 > 1) {\n            int64_t v32; // 0x40b880\n            int64_t v33; // 0x40b880\n            while (true) {\n                // 0x40b8f9\n                v32 = v30;\n                int64_t v34 = v32 + a1; // 0x40b8f9\n                char * v35 = (char *)(v34 + 1);\n                int64_t v36 = 1;\n                unsigned char v37 = *(char *)(v36 + v34); // 0x40b8fd\n                unsigned char v38 = *(char *)(v29 + a1); // 0x40b902\n                int64_t v39 = v29; // 0x40b906\n                int64_t v40 = v29; // 0x40b906\n                int64_t v41 = 1; // 0x40b906\n                int64_t v42 = v36; // 0x40b906\n                int64_t v43 = v31; // 0x40b906\n                char v44 = v37; // 0x40b906\n                char v45 = v38; // 0x40b906\n                int64_t v46; // 0x40b914\n                unsigned char v47; // 0x40b8fd\n                unsigned char v48; // 0x40b902\n                if (v38 > v37) {\n                    v33 = v39;\n                    v46 = v33 + 1;\n                    if (v46 >= a2) {\n                        // break (via goto) -> 0x40b920\n                        goto lab_0x40b920;\n                    }\n                    // 0x40b8f9\n                    v47 = *v35;\n                    v48 = *(char *)(v46 + a1);\n                    while (v48 > v47) {\n                        // 0x40b908\n                        v33 = v46;\n                        v46 = v33 + 1;\n                        if (v46 >= a2) {\n                            // break (via goto) -> 0x40b920\n                            goto lab_0x40b920;\n                        }\n                        // 0x40b8f9\n                        v47 = *v35;\n                        v48 = *(char *)(v46 + a1);\n                    }\n                    // 0x40b958\n                    v40 = v46;\n                    v41 = v33 - v32;\n                    v42 = 1;\n                    v43 = v33;\n                    v44 = v47;\n                    v45 = v48;\n                }\n                int64_t v49 = v43;\n                while (v45 == v44) {\n                    int64_t v50 = v42;\n                    v36 = v50 == v41 ? 1 : v50 + 1;\n                    int64_t v51 = v50 == v41 ? v40 : v49;\n                    int64_t v52 = v51 + v36; // 0x40b8f0\n                    v5 = v8;\n                    v4 = v32;\n                    v6 = v41;\n                    if (v52 >= a2) {\n                        goto lab_0x40b920_3;\n                    }\n                    v37 = *(char *)(v36 + v34);\n                    v38 = *(char *)(v52 + a1);\n                    v39 = v52;\n                    v40 = v52;\n                    v42 = v36;\n                    v43 = v51;\n                    v44 = v37;\n                    v45 = v38;\n                    if (v38 > v37) {\n                        v33 = v39;\n                        v46 = v33 + 1;\n                        if (v46 >= a2) {\n                            // break (via goto) -> 0x40b920\n                            goto lab_0x40b920;\n                        }\n                        // 0x40b8f9\n                        v47 = *v35;\n                        v48 = *(char *)(v46 + a1);\n                        while (v48 > v47) {\n                            // 0x40b908\n                            v33 = v46;\n                            v46 = v33 + 1;\n                            if (v46 >= a2) {\n                                // break (via goto) -> 0x40b920\n                                goto lab_0x40b920;\n                            }\n                            // 0x40b8f9\n                            v47 = *v35;\n                            v48 = *(char *)(v46 + a1);\n                        }\n                        // 0x40b958\n                        v40 = v46;\n                        v41 = v33 - v32;\n                        v42 = 1;\n                        v43 = v33;\n                        v44 = v47;\n                        v45 = v48;\n                    }\n                    // 0x40b958\n                    v49 = v43;\n                }\n                int64_t v53 = v49 + 2; // 0x40b8f0\n                v29 = v53;\n                v30 = v49;\n                v31 = v49 + 1;\n                v5 = v8;\n                v4 = v49;\n                v6 = 1;\n                if (v53 >= a2) {\n                    goto lab_0x40b920_3;\n                }\n            }\n          lab_0x40b920:\n            // 0x40b920\n            v5 = v8;\n            v4 = v32;\n            v6 = v33 - v32;\n        }\n    }\n  lab_0x40b920_3:;\n    int64_t v54 = v4 + 1; // 0x40b920\n    int64_t v55 = v5 + 1; // 0x40b924\n    int64_t result = v55; // 0x40b92b\n    if (v54 >= v55) {\n        // 0x40b92d\n        *a3 = v6;\n        result = v54;\n    }\n    // 0x40b933\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b9b0",
            "funcStartAddr": "40b9b0",
            "funcEndAddr": "40bcf9",
            "decompiledFuncCode": "int64_t function_40b9b0(int64_t a1, int64_t a2, int64_t str, int64_t a4) {\n    // 0x40b9b0\n    int64_t v1; // 0x40b9b0\n    int64_t v2; // bp-2112, 0x40b9b0\n    int64_t v3; // 0x40b9b0\n    if (a4 < 3) {\n        // 0x40bcd0\n        v2 = 1;\n        v1 = a4 - 1;\n        v3 = 1;\n    } else {\n        // 0x40b9d7\n        int64_t v4; // 0x40b9b0\n        v1 = function_40b880(str, a4, &v2, a4, v4, v4);\n        v3 = v2;\n    }\n    // 0x40b9f4\n    int64_t v5; // bp-2184, 0x40b9b0\n    int64_t v6 = &v5; // 0x40b9c6\n    int64_t n = v1;\n    int64_t v7; // bp-2104, 0x40b9b0\n    int64_t v8 = &v7; // 0x40ba01\n    *(int64_t *)v8 = a4;\n    v8 += 8;\n    int64_t v9; // bp-56, 0x40b9b0\n    while (v8 != (int64_t)&v9) {\n        // 0x40ba08\n        *(int64_t *)v8 = a4;\n        v8 += 8;\n    }\n    int64_t str2 = v3 + str; // 0x40ba19\n    int64_t v10; // 0x40b9b0\n    int64_t result; // 0x40b9b0\n    if (a4 == 0) {\n        // 0x40bb6a\n        v10 = -1;\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x40bb7f\n            return 0;\n        }\n    } else {\n        int64_t v11 = a4 - 1;\n        int64_t v12 = v6 + 80; // 0x40ba45\n        int64_t v13 = str + 1; // 0x40ba41\n        *(int64_t *)(8 * (int64_t)*(char *)str + v12) = v11 + str - str;\n        while (a4 + str != v13) {\n            int64_t v14 = v13;\n            unsigned char v15 = *(char *)v14; // 0x40ba38\n            v13 = v14 + 1;\n            *(int64_t *)(8 * (int64_t)v15 + v12) = v11 + str - v14;\n        }\n        // 0x40ba4f\n        v10 = v11;\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x40bb9b\n            if (function_40aed0(a2 + a1, 0, a4 - a2) != 0) {\n                // 0x40bb7f\n                return 0;\n            }\n            int64_t v16 = a4 - v3; // 0x40bbb2\n            int64_t v17 = 0;\n            int64_t v18 = 0; // 0x40b9b0\n            int64_t v19 = a4;\n            while (v19 != 0) {\n                int64_t v20 = v17;\n                int64_t v21 = 0x100000000 * v18;\n                uint64_t v22 = *(int64_t *)(8 * (int64_t)*(char *)(a1 - 1 + v19) + v12); // 0x40bc34\n                int64_t v23; // 0x40b9b0\n                int64_t v24; // 0x40b9b0\n                if (v22 != 0) {\n                    int64_t v25 = v22; // 0x40bbd5\n                    if (v22 < v3) {\n                        // 0x40bbd7\n                        v25 = v21 != 0 ? 0x100000000 * v16 >> 32 : v22;\n                    }\n                    // 0x40bbe0\n                    v23 = 0;\n                    v24 = v25 + v20;\n                } else {\n                    uint64_t v26 = v21 >> 32; // 0x40bc1b\n                    int64_t v27 = v26 >= n ? v26 : n; // 0x40bc44\n                    if (v27 >= v11) {\n                        // 0x40bc80\n                        if (v26 < n) {\n                            int64_t v28 = v20 + a1; // 0x40bc8d\n                            char * v29; // 0x40b9b0\n                            char v30 = *v29; // 0x40bc91\n                            int64_t v31; // 0x40bb9b\n                            char v32 = *(char *)(v28 + v31); // 0x40bc96\n                            int64_t v33 = v31; // 0x40bc9a\n                            if (v32 == v30) {\n                                int64_t v34 = v33;\n                                while (v26 != v34) {\n                                    int64_t v35 = v34 - 1;\n                                    char v36 = *(char *)(v35 + v28); // 0x40bca0\n                                    char v37 = *(char *)(v35 + str); // 0x40bca5\n                                    v33 = v35;\n                                    if (v37 != v36) {\n                                        // break -> 0x40bcb8\n                                        break;\n                                    }\n                                    v34 = v33;\n                                }\n                            }\n                        }\n                        // 0x40bcb8\n                        if (v26 + 1 > n) {\n                            // 0x40bcf0\n                            result = v20 + a1;\n                            return result;\n                        }\n                        // 0x40bcc1\n                        v23 = v16;\n                        v24 = v20 + v3;\n                    } else {\n                        int64_t v38 = v27;\n                        char v39 = *(char *)(v20 + a1 + v38); // 0x40bc61\n                        while (*(char *)(v38 + str) == v39) {\n                            int64_t v40 = v38 + 1; // 0x40bc58\n                            if (v40 == v11) {\n                                goto lab_0x40bc80;\n                            }\n                            v38 = v40;\n                            v39 = *(char *)(v20 + a1 + v38);\n                        }\n                        // 0x40bc6b\n                        v23 = 0;\n                        v24 = v38 + v20 + 1 - n;\n                    }\n                }\n                // 0x40bbe6\n                v17 = v24;\n                int64_t v41 = v17 + a4; // 0x40bbe9\n                v18 = v23;\n                if (function_40aed0(v19 + a1, 0, v41 - v19) != 0) {\n                    // break -> 0x40bb7f\n                    break;\n                }\n                v19 = v41;\n            }\n            // 0x40bb7f\n            return 0;\n        }\n    }\n    uint64_t v42 = a4 - n; // 0x40ba6e\n    int64_t v43 = (v42 < n ? n : v42) + 1; // 0x40ba7b\n    v2 = v43;\n    int64_t v44 = function_40aed0(a2 + a1, 0, a4 - a2); // 0x40bac0\n    if (a4 == 0) {\n        // 0x40bb7f\n        return 0;\n    }\n    int64_t v45 = n - 1;\n    int64_t v46 = v44; // 0x40b9b0\n    int64_t v47 = a4; // 0x40baa6\n    int64_t v48 = 0;\n    int64_t v49; // 0x40b9b0\n    int64_t v50; // 0x40b9b0\n    int64_t v51; // 0x40b9b0\n    int64_t v52; // 0x40b9b0\n    int64_t v53; // 0x40bad6\n    int64_t v54; // 0x40baf1\n    while (true) {\n      lab_0x40bad3:\n        // 0x40bad3\n        result = 0;\n        if (v46 != 0) {\n            // break -> 0x40bb7f\n            break;\n        }\n        // 0x40bae1\n        v49 = v47;\n        v53 = 0x100000000 * v48 >> 32;\n        unsigned char v55 = *(char *)(a1 - 1 + v49); // 0x40bae1\n        int64_t v56 = *(int64_t *)(v6 + 80 + 8 * (int64_t)v55); // 0x40bae7\n        v51 = v56;\n        v50 = v53;\n        if (v56 != 0) {\n            goto lab_0x40baa0;\n        } else {\n            // 0x40baf1\n            v54 = v53 + a1;\n            if (n >= v10) {\n                goto lab_0x40bb23;\n            } else {\n                // 0x40bafa\n                v52 = n;\n                if (*(char *)(v54 + n) == *(char *)(n + str)) {\n                    int64_t v57 = n + 1; // 0x40bb1a\n                    while (v57 < v10) {\n                        int64_t v58 = v57; // 0x40bb18\n                        v52 = v57;\n                        if (*(char *)(v57 + str) != *(char *)(v57 + v54)) {\n                            goto lab_0x40bb60;\n                        }\n                        v57 = v58 + 1;\n                    }\n                    goto lab_0x40bb23;\n                } else {\n                    goto lab_0x40bb60;\n                }\n            }\n        }\n    }\n  lab_0x40bb7f_3:\n    // 0x40bb7f\n    return result;\n  lab_0x40bb60:\n    // 0x40bb60\n    v51 = v52;\n    v50 = 1 - n + v53;\n    goto lab_0x40baa0;\n  lab_0x40baa0:;\n    int64_t v59 = v50 + v51; // 0x40baa0\n    goto lab_0x40baa3;\n  lab_0x40baa3:\n    // 0x40baa3\n    v48 = v59;\n    v47 = v48 + a4;\n    v46 = function_40aed0(v49 + a1, 0, v47 - v49);\n    result = 0;\n    if (v47 == 0) {\n        // break -> 0x40bb7f\n        goto lab_0x40bb7f_3;\n    }\n    goto lab_0x40bad3;\n  lab_0x40bb23:\n    // 0x40bb23\n    result = v54;\n    if (n == 0) {\n        // break -> 0x40bb7f\n        goto lab_0x40bb7f_3;\n    }\n    // 0x40bb2d\n    if (*(char *)(v54 + v45) == *(char *)(v45 + str)) {\n        result = v54;\n        if (v45 == 0) {\n            // break (via goto) -> 0x40bb7f\n            goto lab_0x40bb7f_3;\n        }\n        int64_t v60 = v45 - 1; // 0x40bb4a\n        int64_t v61 = v60; // 0x40bb48\n        while (*(char *)(v60 + str) == *(char *)(v60 + v54)) {\n            // 0x40bb4a\n            result = v54;\n            if (v61 == 0) {\n                // break (via goto) -> 0x40bb7f\n                goto lab_0x40bb7f_3;\n            }\n            // 0x40bb40\n            v60 = v61 - 1;\n            v61 = v60;\n        }\n    }\n    // 0x40bb91\n    v59 = v53 + v43;\n    goto lab_0x40baa3;\n}\n"
        },
        {
            "funcName": "function_40bd00",
            "funcStartAddr": "40bd00",
            "funcEndAddr": "40c094",
            "decompiledFuncCode": "int64_t function_40bd00(int64_t result, char * str) {\n    int64_t v1 = (int64_t)str;\n    char v2 = result;\n    char c = v1;\n    if (v2 == 0) {\n        // 0x40bdc5\n        return c == 0 ? result : 0;\n    }\n    int64_t v3 = result; // 0x40bd20\n    int64_t v4 = v1; // 0x40bd20\n    if (c == 0) {\n        // 0x40bdc5\n        return result;\n    }\n    int64_t v5 = 1; // 0x40bd20\n    v3++;\n    v4++;\n    unsigned char v6 = *(char *)v4; // 0x40bd51\n    v5 &= (int64_t)(c == v2);\n    char v7 = *(char *)v3; // 0x40bd57\n    while (v7 != 0) {\n        // 0x40bd40\n        if (v6 == 0) {\n            goto lab_0x40bd65;\n        }\n        char v8 = v6;\n        v3++;\n        v4++;\n        v6 = *(char *)v4;\n        v5 &= (int64_t)(v8 == v7);\n        v7 = *(char *)v3;\n    }\n    // 0x40bd5e\n    if (v6 != 0) {\n        // 0x40bdc5\n        return 0;\n    }\n  lab_0x40bd65:\n    // 0x40bd65\n    if (v5 != 0) {\n        // 0x40bdc5\n        return result;\n    }\n    uint64_t v9 = v4 - v1; // 0x40bd77\n    char * found_char_pos = strchr((char *)(result + 1), (int32_t)c); // 0x40bd7e\n    int64_t result2 = (int64_t)found_char_pos; // 0x40bd7e\n    if (v9 == 1 || found_char_pos == NULL) {\n        // 0x40bdc5\n        return result2;\n    }\n    uint64_t v10 = v9 + result; // 0x40bd91\n    int64_t v11 = v10 < result2 ? 1 : v10 - result2; // 0x40bda7\n    if (v9 >= 32) {\n        // 0x40bdc5\n        return function_40b9b0(result2, v11, v1, v9);\n    }\n    int64_t v12; // 0x40bd00\n    int64_t v13; // bp-64, 0x40bd00\n    int64_t v14; // 0x40bd00\n    if (v9 < 3) {\n        // 0x40c069\n        v13 = 1;\n        v12 = v9 - 1;\n        v14 = 1;\n    } else {\n        // 0x40bdea\n        v12 = function_40b880(v1, v9, &v13, (int64_t)v6, v11, v1 % 256);\n        v14 = v13;\n    }\n    int64_t n = v12;\n    int64_t v15; // 0x40bd00\n    int64_t v16; // 0x40bd00\n    int64_t v17; // 0x40bd00\n    int64_t v18; // 0x40bd00\n    int64_t v19; // 0x40bd00\n    int64_t v20; // 0x40bf70\n    int64_t v21; // 0x40bd00\n    int64_t v22; // 0x40bd00\n    if (memcmp((int64_t *)str, (int64_t *)(v14 + v1), (int32_t)n) != 0) {\n        uint64_t v23 = v9 - n; // 0x40bf63\n        v20 = (v23 < n ? n : v23) + 1;\n        v13 = v20;\n        if (v9 == 0 | function_40aed0(v11 + result2, 0, v9 - v11) != 0) {\n            // 0x40bdc5\n            return 0;\n        }\n        // 0x40bfb8\n        v21 = n - 1;\n        int64_t v24 = 0x100000000 - 0x100000000 * n >> 32;\n        v15 = v9;\n        v17 = 0;\n        while (true) {\n          lab_0x40bfb8:\n            // 0x40bfb8\n            v18 = v17;\n            v16 = v15;\n            v22 = v18 + result2;\n            if (v9 > n) {\n                // 0x40bfc1\n                if (*(char *)(v22 + n) == *(char *)(n + v1)) {\n                    int64_t v25 = n + 1; // 0x40bfea\n                    while (v9 > v25) {\n                        int64_t v26 = v25; // 0x40bfe8\n                        int64_t v27 = v25; // 0x40bfe8\n                        if (*(char *)(v25 + v1) != *(char *)(v25 + v22)) {\n                            // 0x40c030\n                            v19 = v18 + v24 + v27;\n                            goto lab_0x40c03d;\n                        }\n                        v25 = v26 + 1;\n                    }\n                    goto lab_0x40bff3;\n                } else {\n                    // 0x40c030\n                    v19 = v18 + v24 + n;\n                    goto lab_0x40c03d;\n                }\n            } else {\n                goto lab_0x40bff3;\n            }\n        }\n      lab_0x40bdc5_3:\n        // 0x40bdc5\n        return 0;\n    }\n    // 0x40be37\n    if (v9 == 0 | function_40aed0(v11 + result2, 0, v9 - v11) != 0) {\n        // 0x40bdc5\n        return 0;\n    }\n    int64_t v28 = n - 1; // 0x40be37\n    char * v29 = (char *)(v28 + v1);\n    int64_t v30 = 0x100000000 * (v9 - v14) / 0x100000000;\n    int64_t v31 = 0x100000000 - 0x100000000 * n >> 32;\n    int64_t v32 = v9; // 0x40bd00\n    int64_t v33 = 0; // 0x40bd00\n    int64_t v34 = 0; // 0x40bd00\n    int64_t v35; // 0x40bd00\n    uint64_t v36; // 0x40bd00\n    int64_t v37; // 0x40bd00\n    int64_t v38; // 0x40bd00\n    while (true) {\n      lab_0x40be92:\n        // 0x40be92\n        v36 = v34;\n        v37 = v33;\n        v35 = v32;\n        int64_t v39 = n >= v36 ? n : v36; // 0x40be98\n        if (v9 > v39) {\n            // 0x40bea1\n            v38 = v39;\n            if (*(char *)(v39 + v37 + result2) != *(char *)(v39 + v1)) {\n                goto lab_0x40bf40;\n            } else {\n                int64_t v40; // 0x40bd00\n                while (v9 != v40 + 1) {\n                    // 0x40bec0\n                    int64_t v41; // 0x40bd00\n                    int64_t v42; // 0x40beca\n                    char v43 = *(char *)(v42 + v41); // 0x40bec0\n                    char v44 = *(char *)(v42 + v1); // 0x40bec4\n                    v40 = v42;\n                    v38 = v42;\n                    if (v44 != v43) {\n                        goto lab_0x40bf40;\n                    }\n                    int64_t v45 = v40;\n                    v42 = v45 + 1;\n                }\n                goto lab_0x40bed3;\n            }\n        } else {\n            goto lab_0x40bed3;\n        }\n    }\n  lab_0x40c08c:\n    // 0x40bdc5\n    return v37 + result2;\n  lab_0x40bff3:\n    // 0x40bff3\n    if (n == 0) {\n        return 0;\n    }\n    // 0x40bffd\n    int64_t result3; // 0x40bd00\n    if (*(char *)(v22 + v21) == *(char *)(v21 + v1)) {\n        result3 = v22;\n        if (v21 == 0) {\n            return result3;\n        }\n        int64_t v46 = v21 - 1; // 0x40c01a\n        int64_t v47 = v46; // 0x40c018\n        while (*(char *)(v46 + v1) == *(char *)(v46 + v22)) {\n            // 0x40c01a\n            result3 = v22;\n            if (v47 == 0) {\n                return result3;\n            }\n            // 0x40c010\n            v46 = v47 - 1;\n            v47 = v46;\n        }\n    }\n    // 0x40c048\n    v19 = v18 + v20;\n    goto lab_0x40c03d;\n  lab_0x40c03d:;\n    int64_t v48 = v19 + v9; // 0x40bf98\n    int64_t v49 = function_40aed0(v16 + result2, 0, v48 - v16); // 0x40bfa9\n    v15 = v48;\n    v17 = v19;\n    if (v48 == 0 || v49 != 0) {\n        // break -> 0x40bdc5\n        goto lab_0x40bdc5_3;\n    }\n    goto lab_0x40bfb8;\n  lab_0x40bf40:;\n    int64_t v50 = 0; // 0x40bf50\n    int64_t v51 = v37 + v31 + v38; // 0x40bf50\n    goto lab_0x40bf2f;\n  lab_0x40bed3:;\n    int64_t v54 = n; // 0x40bedb\n    if (n > v36) {\n        int64_t v55 = v37 + result2; // 0x40bee6\n        v54 = n;\n        if (*v29 == *(char *)(v55 + v28)) {\n            int64_t v56 = v28;\n            v54 = v56;\n            while (v36 != v56) {\n                int64_t v57 = v56 - 1;\n                int64_t v58 = v57; // 0x40bf0a\n                v54 = v56;\n                if (*(char *)(v57 + v1) != *(char *)(v57 + v55)) {\n                    // break -> 0x40bf18\n                    break;\n                }\n                v56 = v58;\n                v54 = v56;\n            }\n        }\n    }\n    // 0x40bf18\n    if (v36 + 1 > v54) {\n        // break -> 0x40c08c\n        goto lab_0x40c08c;\n    }\n    // 0x40bf25\n    v50 = v30;\n    v51 = v37 + v14;\n    goto lab_0x40bf2f;\n  lab_0x40bf2f:;\n    int64_t v52 = v51 + v9; // 0x40be60\n    int64_t v53 = function_40aed0(v35 + result2, 0, v52 - v35); // 0x40be76\n    result3 = 0;\n    v32 = v52;\n    v33 = v51;\n    v34 = v50;\n    if (v52 == 0 || v53 != 0) {\n      lab_0x40bdc5_3:\n        // 0x40bdc5\n        return result3;\n    }\n    goto lab_0x40be92;\n}\n"
        },
        {
            "funcName": "function_40c0a0",
            "funcStartAddr": "40c0a0",
            "funcEndAddr": "40c0e5",
            "decompiledFuncCode": "int64_t function_40c0a0(int64_t a1) {\n    // 0x40c0a0\n    int32_t v1; // 0x40c0a0\n    if (*(char *)(a1 + 8) != 0) {\n        // 0x40c0d0\n        v1 = setenv(\"TZ\", (char *)(a1 + 9), 1);\n    } else {\n        // 0x40c0aa\n        v1 = unsetenv(\"TZ\");\n    }\n    int64_t result = 0; // 0x40c0b8\n    if (v1 == 0) {\n        // 0x40c0ba\n        tzset();\n        result = 1;\n    }\n    // 0x40c0c4\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c0f0",
            "funcStartAddr": "40c0f0",
            "funcEndAddr": "40c119",
            "decompiledFuncCode": "int64_t function_40c0f0(int64_t a1) {\n    // 0x40c0f0\n    if (a1 == 0) {\n        // 0x40c110\n        int64_t result; // 0x40c0f0\n        return result;\n    }\n    int64_t * v1 = (int64_t *)a1; // 0x40c100\n    int64_t v2 = *v1; // 0x40c100\n    free(v1);\n    while (v2 != 0) {\n        // 0x40c100\n        v1 = (int64_t *)v2;\n        v2 = *v1;\n        free(v1);\n    }\n    // 0x40c110\n    return &g65;\n}\n"
        },
        {
            "funcName": "function_40c120",
            "funcStartAddr": "40c120",
            "funcEndAddr": "40c161",
            "decompiledFuncCode": "int64_t function_40c120(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40c12d\n    int64_t v2 = function_40c0a0(a1); // 0x40c13b\n    int32_t v3 = *v1; // 0x40c144\n    if ((char)v2 == 0) {\n        // 0x40c146\n        v3 = *v1;\n    }\n    // 0x40c149\n    function_40c0f0(a1);\n    *v1 = v3;\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40c170",
            "funcStartAddr": "40c170",
            "funcEndAddr": "40c1ff",
            "decompiledFuncCode": "int64_t function_40c170(int64_t str, int64_t a2, int64_t a3) {\n    int64_t result2; // 0x40c170\n    if (str == 0) {\n        int64_t * mem = malloc(128); // 0x40c1dd\n        int64_t result = (int64_t)mem; // 0x40c1dd\n        result2 = result;\n        if (mem != NULL) {\n            // 0x40c1ea\n            *mem = 0;\n            *(int16_t *)(result + 8) = 0;\n            return result;\n        }\n    } else {\n        int32_t len = strlen((char *)str); // 0x40c17c\n        uint64_t v1 = (int64_t)len + 1; // 0x40c186\n        int64_t * mem2 = malloc(v1 >= 118 ? len + 18 & -8 : 128); // 0x40c19a\n        int64_t v2 = (int64_t)mem2; // 0x40c19a\n        result2 = v2;\n        if (mem2 != NULL) {\n            // 0x40c1a7\n            *mem2 = 0;\n            int64_t v3 = v2 + 9; // 0x40c1b3\n            *(int16_t *)(v2 + 8) = 1;\n            memcpy((int64_t *)v3, (int64_t *)str, (int32_t)v1);\n            *(char *)(v3 + v1) = 0;\n            result2 = v2;\n        }\n    }\n    // 0x40c1cb\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c200",
            "funcStartAddr": "40c200",
            "funcEndAddr": "40c375",
            "decompiledFuncCode": "int64_t function_40c200(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 48); // 0x40c20e\n    uint64_t v2 = *v1; // 0x40c20e\n    if (v2 == 0) {\n        // 0x40c2b1\n        return 1;\n    }\n    int64_t v3; // 0x40c200\n    if (v2 >= a2) {\n        int64_t v4 = a2 + 56; // 0x40c226\n        v3 = v4;\n        if (v2 < v4) {\n            // 0x40c2b1\n            return 1;\n        }\n    }\n    char * str2 = (char *)v2; // 0x40c234\n    if (*str2 == 0) {\n        // 0x40c2a8\n        *v1 = (int64_t)&g13;\n        // 0x40c2b1\n        return 1;\n    }\n    int64_t str = a1 + 9; // 0x40c239\n    if (strcmp((char *)str, str2) == 0) {\n        // 0x40c2a8\n        *v1 = str;\n        // 0x40c2b1\n        return 1;\n    }\n    int64_t v5 = a1;\n    int64_t v6 = str;\n    char * str3 = (char *)v6; // 0x40c257\n    int64_t v7; // 0x40c200\n    int64_t v8; // 0x40c200\n    int64_t v9; // 0x40c200\n    int64_t v10; // 0x40c25c\n    if (*str3 == 0) {\n        // 0x40c25c\n        v10 = v5 + 9;\n        if (v6 != v10) {\n            // break (via goto) -> 0x40c2e8\n            goto lab_0x40c2e8;\n        }\n        // 0x40c269\n        if (*(char *)(v5 + 8) == 0) {\n            // 0x40c318\n            v8 = 0;\n            v9 = v3;\n            v7 = (int64_t)strlen(str2) + 1;\n            goto lab_0x40c326;\n        }\n    }\n    int64_t v11 = v6 + 1 + (int64_t)strlen(str3); // 0x40c27b\n    char * str5 = (char *)v11;\n    int64_t v12; // 0x40c200\n    int64_t v13; // 0x40c285\n    int64_t str4; // 0x40c28e\n    int32_t strcmp_rc; // 0x40c29b\n    while (*str5 == 0) {\n        // 0x40c285\n        v13 = *(int64_t *)v5;\n        if (v13 == 0) {\n            // break -> 0x40c248\n            break;\n        }\n        // 0x40c28e\n        str4 = v13 + 9;\n        strcmp_rc = strcmp((char *)str4, str2);\n        v12 = str4;\n        if (strcmp_rc == 0) {\n            // 0x40c2a8\n            *v1 = v12;\n            // 0x40c2b1\n            return 1;\n        }\n        v5 = v13;\n        v6 = str4;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40c25c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40c2e8\n                goto lab_0x40c2e8;\n            }\n            // 0x40c269\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40c318\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40c326;\n            }\n        }\n        // 0x40c273\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n    }\n    // 0x40c2a8\n    *v1 = v11;\n    while (strcmp(str5, str2) != 0) {\n        // 0x40c257\n        v6 = v11;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x40c25c\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x40c2e8\n                goto lab_0x40c2e8;\n            }\n            // 0x40c269\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x40c318\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x40c326;\n            }\n        }\n        // 0x40c273\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n        while (*str5 == 0) {\n            // 0x40c285\n            v13 = *(int64_t *)v5;\n            if (v13 == 0) {\n                // break -> 0x40c248\n                break;\n            }\n            // 0x40c28e\n            str4 = v13 + 9;\n            strcmp_rc = strcmp((char *)str4, str2);\n            v12 = str4;\n            if (strcmp_rc == 0) {\n                // 0x40c2a8\n                *v1 = v12;\n                // 0x40c2b1\n                return 1;\n            }\n            v5 = v13;\n            v6 = str4;\n            str3 = (char *)v6;\n            if (*str3 == 0) {\n                // 0x40c25c\n                v10 = v5 + 9;\n                if (v6 != v10) {\n                    // break (via goto) -> 0x40c2e8\n                    goto lab_0x40c2e8;\n                }\n                // 0x40c269\n                if (*(char *)(v5 + 8) == 0) {\n                    // 0x40c318\n                    v8 = 0;\n                    v9 = v3;\n                    v7 = (int64_t)strlen(str2) + 1;\n                    goto lab_0x40c326;\n                }\n            }\n            // 0x40c273\n            v11 = v6 + 1 + (int64_t)strlen(str3);\n            str5 = (char *)v11;\n        }\n        // 0x40c2a8\n        *v1 = v11;\n    }\n    // 0x40c2b1\n    return 1;\n  lab_0x40c2e8:;\n    int64_t v14 = (int64_t)strlen(str2) + 1; // 0x40c2f0\n    int64_t v15 = v6 - v10; // 0x40c2f7\n    int64_t v16 = -1 - v15;\n    v8 = v15;\n    v9 = v16;\n    v7 = v14;\n    if (v14 > v16) {\n        // 0x40c305\n        *__errno_location() = 12;\n        // 0x40c2b1\n        return 0;\n    }\n    goto lab_0x40c326;\n  lab_0x40c326:\n    // 0x40c326\n    if (v7 + v8 < 119) {\n        // 0x40c32f\n        memcpy((int64_t *)v6, (int64_t *)v2, (int32_t)v7);\n        *(char *)(v7 + v6) = 0;\n        // 0x40c2a8\n        *v1 = v6;\n        // 0x40c2b1\n        return 1;\n    }\n    int64_t v17 = function_40c170(v2, v2, v9); // 0x40c353\n    *(int64_t *)v5 = v17;\n    if (v17 == 0) {\n        // 0x40c2b1\n        return 0;\n    }\n    // 0x40c361\n    *(char *)(v17 + 8) = 0;\n    // 0x40c2a8\n    *v1 = v17 + 9;\n    // 0x40c2b1\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40c380",
            "funcStartAddr": "40c380",
            "funcEndAddr": "40c42f",
            "decompiledFuncCode": "int64_t function_40c380(int64_t a1) {\n    char * env_val = getenv(\"TZ\"); // 0x40c38c\n    int64_t v1 = (int64_t)env_val; // 0x40c38c\n    char v2 = *(char *)(a1 + 8);\n    int64_t v3; // 0x40c380\n    if (env_val == NULL) {\n        // 0x40c3f0\n        if (v2 == 0) {\n            // 0x40c3bd\n            return 1;\n        }\n    } else {\n        if (v2 != 0) {\n            // 0x40c3c8\n            v3 = v1;\n            if (strcmp((char *)(a1 + 9), env_val) == 0) {\n                // 0x40c3bd\n                return 1;\n            }\n        }\n    }\n    // 0x40c3a1\n    int64_t v4; // 0x40c380\n    int64_t result = function_40c170(v1, v3, v4); // 0x40c3a4\n    if (result == 0) {\n        // 0x40c3bd\n        return 0;\n    }\n    // 0x40c3b1\n    if ((char)function_40c0a0(a1) != 0) {\n        // 0x40c3bd\n        return result;\n    }\n    int32_t * v5 = __errno_location(); // 0x40c408\n    if (result != 1) {\n        // 0x40c419\n        function_40c0f0(result);\n    }\n    // 0x40c421\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c430",
            "funcStartAddr": "40c430",
            "funcEndAddr": "40c441",
            "decompiledFuncCode": "int64_t function_40c430(int64_t a1) {\n    // 0x40c430\n    if (a1 == 1) {\n        // 0x40c440\n        int64_t result; // 0x40c430\n        return result;\n    }\n    // 0x40c436\n    return function_40c0f0(a1);\n}\n"
        },
        {
            "funcName": "function_40c450",
            "funcStartAddr": "40c450",
            "funcEndAddr": "40c4f5",
            "decompiledFuncCode": "int64_t function_40c450(int64_t a1, int64_t * timep, int64_t * time) {\n    if (a1 == 0) {\n        // 0x40c4e0\n        return (int64_t)gmtime_r((int32_t *)timep, (struct tm *)time);\n    }\n    int64_t v1 = function_40c380(a1); // 0x40c468\n    if (v1 == 0) {\n        // 0x40c49a\n        return 0;\n    }\n    // 0x40c475\n    if (localtime_r((int32_t *)timep, (struct tm *)time) != NULL) {\n        int64_t result = (int64_t)time;\n        if ((char)function_40c200(a1, result) != 0) {\n            // 0x40c494\n            if (v1 == 1 || (char)function_40c120(v1) != 0) {\n                // 0x40c49a\n                return result;\n            }\n            // 0x40c49a\n            return 0;\n        }\n    }\n    if (v1 != 1) {\n        // 0x40c4b6\n        function_40c120(v1);\n    }\n    // 0x40c49a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c500",
            "funcStartAddr": "40c500",
            "funcEndAddr": "40c61c",
            "decompiledFuncCode": "int64_t function_40c500(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40c500\n    int32_t v1; // 0x40c500\n    int32_t v2 = v1;\n    if (a1 == 0) {\n        // 0x40c5f8\n        return function_40c620(a2);\n    }\n    int64_t v3 = function_40c380(a1); // 0x40c517\n    if (v3 == 0) {\n        // 0x40c56e\n        return -1;\n    }\n    int64_t v4 = function_40d6b0(a2); // 0x40c52b\n    int64_t timep = v4; // bp-96, 0x40c530\n    if (v4 == -1) {\n        // 0x40c580\n        int32_t time; // bp-88, 0x40c500\n        if (localtime_r((int32_t *)&timep, (struct tm *)&time) == NULL) {\n            goto lab_0x40c553;\n        } else {\n            int32_t v5 = *(int32_t *)(a2 + 32); // 0x40c594\n            if (v2 >= 0 == v5 > -1 == (v5 == 0 != (v2 == 0))) {\n                goto lab_0x40c553;\n            } else {\n                int32_t v6 = *(int32_t *)(a2 + 16); // 0x40c5b3\n                int32_t v7 = *(int32_t *)(a2 + 20); // 0x40c5b6\n                int32_t v8 = *(int32_t *)(a2 + 12); // 0x40c5c3\n                int32_t v9 = *(int32_t *)(a2 + 8); // 0x40c5cc\n                int32_t v10 = *(int32_t *)(a2 + 4); // 0x40c5d5\n                if ((v7 ^ v1 | v6 ^ v1 | v8 ^ v1 | v9 ^ v1 || v10 ^ v1 || time ^ (int32_t)(int64_t)&time) == 0) {\n                    goto lab_0x40c53b;\n                } else {\n                    goto lab_0x40c553;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40c53b;\n    }\n  lab_0x40c53b:\n    // 0x40c53b\n    if ((char)function_40c200(a1, a2) == 0) {\n        // 0x40c54a\n        timep = -1;\n    }\n    goto lab_0x40c553;\n  lab_0x40c553:\n    if (v3 != 1) {\n        // 0x40c559\n        if ((char)function_40c120(v3) == 0) {\n            // 0x40c56e\n            return -1;\n        }\n    }\n    // 0x40c56e\n    return timep;\n}\n"
        },
        {
            "funcName": "function_40c620",
            "funcStartAddr": "40c620",
            "funcEndAddr": "40c636",
            "decompiledFuncCode": "int64_t function_40c620(int64_t a1) {\n    // 0x40c620\n    *(int32_t *)(a1 + 32) = 0;\n    return function_40d270(a1, 0x401fd0, &g60);\n}\n"
        },
        {
            "funcName": "function_40c640",
            "funcStartAddr": "40c640",
            "funcEndAddr": "40c69d",
            "decompiledFuncCode": "int64_t function_40c640(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x40c647\n    int64_t v2; // 0x40c640\n    int64_t result = function_40ced0(a1, v2); // 0x40c658\n    if ((v2 & 32) != 0) {\n        // 0x40c680\n        if ((int32_t)result == 0) {\n            // 0x40c684\n            *__errno_location() = 0;\n        }\n        // 0x40c67a\n        return 0xffffffff;\n    }\n    // 0x40c661\n    if ((int32_t)result == 0) {\n        // 0x40c67a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x40c668\n    if (v1 == 0) {\n        // 0x40c66a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40c67a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c6a0",
            "funcStartAddr": "40c6a0",
            "funcEndAddr": "40c6ea",
            "decompiledFuncCode": "int64_t function_40c6a0(int64_t * path, int64_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x40c6b3\n    return function_40ccc0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_40c6f0",
            "funcStartAddr": "40c6f0",
            "funcEndAddr": "40c74e",
            "decompiledFuncCode": "int64_t function_40c6f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40c6f6\n    if (locale == NULL) {\n        // 0x40c723\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40c6f6\n    bool v2; // 0x40c6f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g15; // 0x40c6f0\n    int64_t v5 = v1; // 0x40c6f0\n    int64_t v6 = 2; // 0x40c715\n    unsigned char v7 = *(char *)v5; // 0x40c715\n    char v8 = *(char *)v4; // 0x40c715\n    char v9 = v8; // 0x40c715\n    bool v10 = false; // 0x40c715\n    while (v7 == v8) {\n        // 0x40c708\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40c721\n    int64_t v13 = v1; // 0x40c721\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40c723\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40c721\n    unsigned char v15 = *(char *)v13; // 0x40c73d\n    char v16 = *(char *)v12; // 0x40c73d\n    char v17 = v16; // 0x40c73d\n    bool v18 = false; // 0x40c73d\n    while (v15 == v16) {\n        // 0x40c730\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40c750",
            "funcStartAddr": "40c750",
            "funcEndAddr": "40ccb2",
            "decompiledFuncCode": "int64_t function_40c750(void) {\n    char * v1 = nl_langinfo(14); // 0x40c766\n    char * v2 = g61; // 0x40c76b\n    char * v3; // 0x40c750\n    int64_t v4; // 0x40c750\n    int64_t v5; // 0x40c750\n    int64_t v6; // 0x40c750\n    int64_t v7; // 0x40c750\n    int32_t size; // 0x40c750\n    int32_t size2; // 0x40c750\n    int32_t len; // 0x40c822\n    int64_t v8; // 0x40c822\n    char * env_val; // 0x40c80d\n    if (v2 == NULL) {\n        // 0x40c808\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40c875;\n        } else {\n            // 0x40c81a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40c875;\n            } else {\n                // 0x40c81f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40c80d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40cca5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40c875;\n                    } else {\n                        // 0x40cc19\n                        size2 = len + 14;\n                        goto lab_0x40c83b;\n                    }\n                } else {\n                    goto lab_0x40c83b;\n                }\n            }\n        }\n    } else {\n        // 0x40c750\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40c78a;\n    }\n  lab_0x40cabc:;\n    // 0x40cabc\n    struct _IO_FILE * stream; // 0x40c8fb\n    int32_t v10 = __uflow(stream); // 0x40cabf\n    int64_t v11; // 0x40c750\n    int64_t v12 = v11; // 0x40cac9\n    int64_t v13; // 0x40c750\n    int64_t v14 = v13; // 0x40cac9\n    int32_t v15 = v10; // 0x40cac9\n    int64_t v16; // 0x40c750\n    int64_t v17 = v16; // 0x40cac9\n    int64_t v18 = v11; // 0x40cac9\n    int64_t v19 = v13; // 0x40cac9\n    int64_t v20 = v16; // 0x40cac9\n    if (v10 == -1) {\n        // break -> 0x40cacf\n        goto lab_0x40cacf;\n    }\n    goto lab_0x40c949;\n  lab_0x40c93e:;\n    // 0x40c93e\n    int64_t v90; // 0x40c750\n    int64_t * v32; // 0x40c930\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40c750\n    v12 = v89;\n    int64_t v91; // 0x40c750\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40c750\n    v17 = v92;\n    goto lab_0x40c949;\n  lab_0x40c949:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40c750\n    int32_t v25; // bp-120, 0x40c750\n    int32_t v26; // bp-184, 0x40c750\n    int64_t v27; // 0x40c8fb\n    int64_t v28; // 0x40c918\n    int64_t v29; // 0x40c91d\n    int64_t * v30; // 0x40c934\n    switch (c) {\n        case 32: {\n            goto lab_0x40c930;\n        }\n        case 10: {\n            goto lab_0x40c930;\n        }\n        case 9: {\n            goto lab_0x40c930;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40cb21\n            int32_t v33; // 0x40c750\n            char v34; // 0x40c750\n            int32_t v35; // 0x40cb2e\n            if (v31 < *v30) {\n                // 0x40cb00\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40cb2b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40cb21\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40cb00\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40cb2b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40cb10\n                v36 = v33;\n            }\n            // 0x40cbff\n            if (v36 == -1) {\n                // break -> 0x40cacf\n                break;\n            }\n            goto lab_0x40c930;\n        }\n        default: {\n            // 0x40c95f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40cacf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40c988\n            int64_t v39 = v37 + 4; // 0x40c98a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40c996\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40c998\n            while (v41 == 0) {\n                // 0x40c988\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40c9b6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40c9c2\n            int64_t v45 = v43 + 4; // 0x40c9c4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40c9d0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40c9d2\n            while (v47 == 0) {\n                // 0x40c9c2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40c9bf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40c9e8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40c9f8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40c9fc\n            int64_t v52 = v51 + v48; // 0x40ca05\n            int64_t * mem; // 0x40c750\n            int64_t v53; // 0x40c750\n            int64_t v54; // 0x40c750\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40cb3b\n                int64_t v56 = v55 + 3; // 0x40cb47\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40ca21\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40ca30\n            if (mem == NULL) {\n                // 0x40cc5c\n                free((int64_t *)v21);\n                function_40ced0(v27, v53);\n                v24 = (int64_t)&g13;\n                goto lab_0x40c8d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40ca48\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40ca52\n            uint32_t v62 = (int32_t)v59; // 0x40ca55\n            int64_t v63; // 0x40c750\n            if (v62 >= 8) {\n                // 0x40cb64\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40cb7e\n                int64_t v66 = v61 - v65; // 0x40cb82\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40cb8d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40cb9e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40cb9e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40cb9b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40cc2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40ca67\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40ca6b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40ca7b\n            int64_t v74 = v60 - 1; // 0x40ca7f\n            uint32_t v75 = (int32_t)v73; // 0x40ca84\n            int64_t v76; // 0x40c750\n            if (v75 >= 8) {\n                // 0x40cbb2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40cbbc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40cbcc\n                int64_t v80 = v74 - v79; // 0x40cbd0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40cbdb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40cbeb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40cbe9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40cc46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40cc4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40ca96\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40ca9a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40cc93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40caae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40c93e;\n            } else {\n                goto lab_0x40cabc;\n            }\n        }\n    }\n  lab_0x40c930:;\n    int64_t v93 = v23; // 0x40c750\n    int64_t v94 = v22; // 0x40c750\n    int64_t v95 = v21; // 0x40c750\n    goto lab_0x40c930_2;\n  lab_0x40c875:;\n    int64_t * mem3 = malloc(size); // 0x40c875\n    int64_t v97 = (int64_t)&g13; // 0x40c880\n    int64_t v98; // 0x40c750\n    int64_t path; // 0x40c750\n    if (mem3 == NULL) {\n        goto lab_0x40c852;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40c875\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40c896;\n    }\n  lab_0x40c78a:;\n    int64_t str = v1 == NULL ? (int64_t)&g13 : (int64_t)v1; // 0x40c77d\n    char v100 = *v3; // 0x40c78a\n    int64_t v101; // 0x40c750\n    if (v100 == 0) {\n        // 0x40c7e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40c750\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40c750\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40c7d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40c7d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40c7a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40c7ad\n        char v107 = *(char *)v106; // 0x40c7b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40c7e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40c7bb\n    v104 = v103 + 1;\n  lab_0x40c7d7:\n    // 0x40c7e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40c852:;\n    char * v108 = (char *)v97;\n    g61 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40c78a;\n  lab_0x40c896:;\n    int64_t v109 = v98 + path; // 0x40c896\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40c8c2\n    v24 = (int64_t)&g13;\n    if (fd >= 0) {\n        // 0x40c8f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40cc22\n            close(fd);\n            v24 = (int64_t)&g13;\n        } else {\n            // 0x40c915\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40c930_2:;\n                uint64_t v96 = *v32; // 0x40c930\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40cabc;\n                } else {\n                    goto lab_0x40c93e;\n                }\n            }\n          lab_0x40cacf:\n            // 0x40cacf\n            function_40ced0(v27, v19);\n            v24 = (int64_t)&g13;\n            if (v18 != 0) {\n                // 0x40caee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40c8d4;\n  lab_0x40c83b:;\n    int64_t * mem4 = malloc(size2); // 0x40c83b\n    v97 = (int64_t)&g13;\n    if (mem4 != NULL) {\n        // 0x40c8e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40c896;\n    } else {\n        goto lab_0x40c852;\n    }\n  lab_0x40c8d4:\n    // 0x40c8d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40c852;\n}\n"
        },
        {
            "funcName": "function_40ccc0",
            "funcStartAddr": "40ccc0",
            "funcEndAddr": "40cd0e",
            "decompiledFuncCode": "int64_t function_40ccc0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40cccc\n    if (fd >= 3) {\n        // 0x40ccd1\n        return a1 & 0xffffffff;\n    }\n    // 0x40cce0\n    int64_t v1; // 0x40ccc0\n    int64_t v2 = function_40d730(a1, v1); // 0x40cce0\n    int32_t * v3 = __errno_location(); // 0x40cce8\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40cd10",
            "funcStartAddr": "40cd10",
            "funcEndAddr": "40ce37",
            "decompiledFuncCode": "int64_t function_40cd10(int64_t a1, int64_t a2) {\n    int64_t v1 = a2;\n    int128_t v2 = *(int128_t *)&v1; // 0x40cd1e\n    int128_t v3; // 0x40cd10\n    __asm_movups(v3, __asm_movdqu(v2));\n    int64_t result; // 0x40cd10\n    int64_t v4; // 0x40cd10\n    if (a1 == 0) {\n        int64_t v5 = function_409560(1); // 0x40ce05\n        v4 = v5;\n        result = v5;\n    } else {\n        int64_t v6 = v2;\n        int64_t v7 = 0; // 0x40cd4b\n        int64_t v8 = a1; // 0x40cd4b\n        int64_t v9 = v3;\n        int32_t v10 = v3;\n        int64_t str; // 0x40cd10\n        int64_t v11; // 0x40cd10\n        int64_t v12; // 0x40cd10\n        int64_t v13; // 0x40cd10\n        int32_t v14; // 0x40cd10\n        int32_t v15; // 0x40cd52\n        if (v10 < 48) {\n            // 0x40cd50\n            v15 = (int32_t)v9 + 8;\n            v14 = v15;\n            v13 = v15;\n            v11 = v12;\n            str = (v9 & 0xffffffff) + *(int64_t *)(a2 + 16);\n        } else {\n            // 0x40cd7a\n            v14 = v10;\n            v13 = v9;\n            v11 = v12 + 8;\n            str = v12;\n        }\n        uint64_t v16 = v7 + (int64_t)strlen((char *)*(int64_t *)str); // 0x40cd64\n        int64_t v17 = v16 < v7 ? -1 : v16; // 0x40cd67\n        v8--;\n        v7 = v17;\n        while (v8 != 0) {\n            int64_t v18 = v11;\n            v9 = v13;\n            v10 = v14;\n            if (v10 < 48) {\n                // 0x40cd50\n                v15 = (int32_t)v9 + 8;\n                v14 = v15;\n                v13 = v15;\n                v11 = v18;\n                str = (v9 & 0xffffffff) + *(int64_t *)(a2 + 16);\n            } else {\n                // 0x40cd7a\n                v14 = v10;\n                v13 = v9;\n                v11 = v18 + 8;\n                str = v18;\n            }\n            // 0x40cd5c\n            v16 = v7 + (int64_t)strlen((char *)*(int64_t *)str);\n            v17 = v16 < v7 ? -1 : v16;\n            v8--;\n            v7 = v17;\n        }\n        if (v17 >= 0x80000000) {\n            // 0x40ce28\n            *__errno_location() = 75;\n            // 0x40ce13\n            return 0;\n        }\n        int64_t v19 = function_409560(v17 + 1); // 0x40cda1\n        int64_t * v20 = (int64_t *)(v6 + 8);\n        int64_t v21 = v19; // 0x40cdac\n        int64_t v22 = a1; // 0x40cdac\n        uint32_t v23 = (int32_t)v2; // 0x40cde3\n        int64_t v24; // 0x40cd10\n        int64_t v25; // 0x40cdec\n        if (v23 < 48) {\n            // 0x40cdb0\n            *(int32_t *)v6 = v23 + 8;\n            v24 = *(int64_t *)(v6 + 16) + (int64_t)v23;\n        } else {\n            // 0x40cdec\n            v25 = *v20;\n            *v20 = v25 + 8;\n            v24 = v25;\n        }\n        int64_t str2 = *(int64_t *)v24; // 0x40cdbe\n        int32_t len = strlen((char *)str2); // 0x40cdc4\n        memcpy((int64_t *)v21, (int64_t *)str2, len);\n        v21 += (int64_t)len;\n        v22--;\n        v4 = v21;\n        result = v19;\n        while (v22 != 0) {\n            // 0x40cdbe\n            v23 = *(int32_t *)&v1;\n            if (v23 < 48) {\n                // 0x40cdb0\n                *(int32_t *)v6 = v23 + 8;\n                v24 = *(int64_t *)(v6 + 16) + (int64_t)v23;\n            } else {\n                // 0x40cdec\n                v25 = *v20;\n                *v20 = v25 + 8;\n                v24 = v25;\n            }\n            // 0x40cdbe\n            str2 = *(int64_t *)v24;\n            len = strlen((char *)str2);\n            memcpy((int64_t *)v21, (int64_t *)str2, len);\n            v21 += (int64_t)len;\n            v22--;\n            v4 = v21;\n            result = v19;\n        }\n    }\n    // 0x40ce10\n    *(char *)v4 = 0;\n    // 0x40ce13\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ce40",
            "funcStartAddr": "40ce40",
            "funcEndAddr": "40ceca",
            "decompiledFuncCode": "int64_t function_40ce40(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    char v2 = a1;\n    if (v2 == 0) {\n        // 0x40ce78\n        return function_40cd10(0, v1);\n    }\n    if (v2 == 37) {\n        // 0x40ce4f\n        if (*(char *)(a1 + 1) == 115) {\n            int64_t v3 = 1; // 0x40ce6c\n            int64_t v4 = 2 * v3 + a1;\n            char v5 = *(char *)v4; // 0x40ce70\n            int64_t v6 = v3; // 0x40ce76\n            while (v5 != 0) {\n                if (v5 != 37) {\n                    goto lab_0x40ce88_2;\n                }\n                // 0x40ce65\n                if (*(char *)(v4 + 1) != 115) {\n                    goto lab_0x40ce88_2;\n                }\n                v3++;\n                v4 = 2 * v3 + a1;\n                v5 = *(char *)v4;\n                v6 = v3;\n            }\n            // 0x40ce78\n            return function_40cd10(v6, v1);\n        }\n    }\n  lab_0x40ce88_2:;\n    // 0x40ce88\n    int64_t result; // bp-16, 0x40ce40\n    if ((int32_t)function_40d6d0(&result, a1, v1) >= 0) {\n        // 0x40ce9c\n        return result;\n    }\n    // 0x40ceb0\n    if (*__errno_location() != 12) {\n        // 0x40ceba\n        return 0;\n    }\n    // 0x40cec5\n    function_4097b0((int64_t)&result);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40ced0",
            "funcStartAddr": "40ced0",
            "funcEndAddr": "40cf4b",
            "decompiledFuncCode": "int64_t function_40ced0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40ced7\n    if (fileno(stream) < 0) {\n        // 0x40cf37\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40ceea\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40cf1b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40cf37\n            return fclose(stream);\n        }\n    }\n    // 0x40ceec\n    if ((int32_t)function_40cf50(a1, v1) == 0) {\n        // 0x40cf37\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40cef8\n    int32_t v3 = *v2; // 0x40cf00\n    int64_t result = fclose(stream); // 0x40cf0e\n    if (v3 != 0) {\n        // 0x40cf40\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40cf10\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cf50",
            "funcStartAddr": "40cf50",
            "funcEndAddr": "40cf90",
            "decompiledFuncCode": "int64_t function_40cf50(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40cf6a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40cf6a\n        return fflush(stream);\n    }\n    // 0x40cf78\n    function_40cf90(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40cf90",
            "funcStartAddr": "40cf90",
            "funcEndAddr": "40cfe7",
            "decompiledFuncCode": "int64_t function_40cf90(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40cf90\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40cf9a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40cfcb\n    int64_t result = -1; // 0x40cfd4\n    if (v1 != -1) {\n        // 0x40cfd6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40cfe2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cff0",
            "funcStartAddr": "40cff0",
            "funcEndAddr": "40d107",
            "decompiledFuncCode": "int64_t function_40cff0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    int64_t v1 = a1 / 4 + 475 + (int64_t)(a1 % 4 == 0); // 0x40d01e\n    int32_t v2 = (a6 >> 2) + 475 + (int32_t)(a6 % 4 == 0); // 0x40d03a\n    int32_t v3 = v1; // 0x40d043\n    int32_t v4 = ((int32_t)(0x51eb851f * (0x100000000 * v1 >> 32) / 0x100000000) >> 3) - (v3 >> 31); // 0x40d054\n    int32_t v5 = v4 - (int32_t)(-25 * v4 + v3 < 0); // 0x40d064\n    int32_t v6 = v2 / 25; // 0x40d078\n    int32_t v7 = v6 - (int32_t)(-25 * v6 + v2 < 0); // 0x40d089\n    return (0x100000000 * a5 >> 32) - (0x100000000 * a10 >> 32) + 60 * ((0x100000000 * a4 >> 32) - (0x100000000 * a9 >> 32) + 60 * ((0x100000000 * a3 >> 32) - (0x100000000 * a8 >> 32) + 24 * (365 * (a1 - (int64_t)a6) + a2 - (0x100000000 * a7 >> 32) + (int64_t)(v3 - v2 - v5 + (v5 >> 2) + v7 - (v7 >> 2)))));\n}\n"
        },
        {
            "funcName": "function_40d110",
            "funcStartAddr": "40d110",
            "funcEndAddr": "40d1a1",
            "decompiledFuncCode": "int64_t function_40d110(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int32_t a5, uint64_t a6, int64_t a7) {\n    if (a7 != 0) {\n        uint32_t v1 = *(int32_t *)a7; // 0x40d11e\n        uint32_t v2 = *(int32_t *)(a7 + 4); // 0x40d123\n        uint32_t v3 = *(int32_t *)(a7 + 8); // 0x40d129\n        uint32_t v4 = *(int32_t *)(a7 + 28); // 0x40d12f\n        int32_t v5 = *(int32_t *)(a7 + 20); // 0x40d135\n        int64_t v6 = function_40cff0(a1, a2, (int64_t)a3, (int64_t)a4, (int64_t)a5, v5, (int64_t)v4, (int64_t)v3, (int64_t)v2, (int64_t)v1); // 0x40d139\n        int64_t result = v6 + a6; // 0x40d142\n        if (((result ^ v6) & (result ^ a6)) >= 0) {\n            // 0x40d147\n            return result;\n        }\n    }\n    if (a6 >= 0) {\n        int64_t v7 = a6 - 0x7ffffffffffffffd; // 0x40d16d\n        int64_t result2 = v7 < 0 == (0x7ffffffffffffffc - a6 & a6) < 0 == (v7 != 0) ? a6 - 1 : 0x7fffffffffffffff; // 0x40d171\n        return result2;\n    }\n    // 0x40d180\n    if (a6 > -0x7fffffffffffffff) {\n        // 0x40d147\n        return -0x8000000000000000;\n    }\n    // 0x40d18f\n    return a6 + 1;\n}\n"
        },
        {
            "funcName": "function_40d1b0",
            "funcStartAddr": "40d1b0",
            "funcEndAddr": "40d26f",
            "decompiledFuncCode": "int64_t function_40d1b0(int64_t a1, int64_t result, uint64_t a3) {\n    if (result == 0 != a3 != 0) {\n        // 0x40d1dd\n        return result;\n    }\n    int64_t v1 = ((int64_t)a3 >> 1) + a3 % 2; // 0x40d21b\n    if (v1 != 0 == (v1 != a3)) {\n        // 0x40d1dd\n        return result;\n    }\n    int64_t v2 = v1; // 0x40d221\n    while (v2 != 0) {\n        // 0x40d228\n        v2 = (v2 >> 1) + v2 % 2;\n    }\n    // 0x40d1dd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d270",
            "funcStartAddr": "40d270",
            "funcEndAddr": "40d6aa",
            "decompiledFuncCode": "int64_t function_40d270(int64_t a1, int64_t a2, int64_t * a3) {\n    int32_t v1 = *(int32_t *)(a1 + 12); // 0x40d28b\n    uint32_t v2 = *(int32_t *)(a1 + 4); // 0x40d293\n    uint32_t v3 = *(int32_t *)(a1 + 8); // 0x40d2a4\n    int32_t v4 = *(int32_t *)(a1 + 16); // 0x40d2a7\n    int32_t v5 = v4 / 12; // 0x40d2c5\n    int32_t v6 = -12 * v5 + v4; // 0x40d2cf\n    int32_t v7 = *(int32_t *)(a1 + 20); // 0x40d2da\n    int64_t v8 = (int64_t)(v5 - (int32_t)(v6 < 0)) + (int64_t)v7; // 0x40d2e1\n    int64_t v9 = 0; // 0x40d2e7\n    if (v8 % 4 == 0) {\n        // 0x40d2e9\n        v9 = 1;\n        if (v8 == (v8 >> 63 & 100)) {\n            // 0x40d550\n            v9 = v8 < 0;\n        }\n    }\n    // 0x40d325\n    int64_t v10; // 0x40d270\n    int32_t v11 = v10;\n    int64_t v12 = v9;\n    uint16_t v13 = *(int16_t *)(2 * (v12 + (int64_t)((v6 >> 31 & 12) + v6) + 4 * v12) + (int64_t)&g16); // 0x40d357\n    int32_t v14 = v11 - 59; // 0x40d370\n    int64_t v15 = v14 == 0 | v14 < 0 != (58 - v11 & v11) < 0 ? v10 & 0xffffffff : 59; // 0x40d373\n    int64_t v16 = (int32_t)v15 >= 0 ? v15 : 0; // 0x40d387\n    int64_t v17 = function_40cff0(v8, (int64_t)v1 - 1 + (int64_t)v13, (int64_t)v3, (int64_t)v2, v16, 70, 0, 0, 0, -v12 & 0xffffffff); // 0x40d3b0\n    int64_t v18; // bp-280, 0x40d270\n    int64_t v19 = &v18; // 0x40d3b5\n    int64_t * v20 = (int64_t *)(v19 + 16);\n    int64_t v21 = v19 + 96; // 0x40d403\n    int64_t v22 = v19 + 80; // 0x40d408\n    int64_t * v23 = (int64_t *)v22;\n    int64_t * v24 = (int64_t *)(v19 - 16);\n    int32_t * v25 = (int32_t *)(v19 + 28);\n    int32_t * v26 = (int32_t *)(v19 + 12);\n    int32_t * v27 = (int32_t *)(v19 + 24);\n    int64_t * v28 = (int64_t *)(v19 + 32);\n    int64_t v29 = v19 + 128;\n    int32_t * v30 = (int32_t *)v29;\n    int64_t v31 = v19 + 40;\n    int32_t * v32 = (int32_t *)v31;\n    int32_t v33 = 6; // 0x40d3d3\n    int64_t v34 = v17; // 0x40d3d3\n    int64_t v35 = v17;\n    uint64_t v36 = 0;\n    int64_t v37 = function_40d1b0(*v20, v22, v21); // 0x40d40d\n    int64_t v38 = *v23; // 0x40d412\n    *v24 = v37;\n    int64_t v39 = function_40d110(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g65); // 0x40d434\n    while (v38 != v39) {\n        // 0x40d444\n        if (v38 != v35 && v38 == v34) {\n            int32_t v40 = *v30; // 0x40d44e\n            if (v40 < 0) {\n                goto lab_0x40d477_3;\n            }\n            int32_t v41 = *v32; // 0x40d45b\n            if (v41 < 0) {\n                if (v36 <= (int64_t)(v40 != 0)) {\n                    goto lab_0x40d477_3;\n                }\n            } else {\n                if (v41 != 0 != v40 != 0) {\n                    goto lab_0x40d477_3;\n                }\n            }\n        }\n        // 0x40d3d8\n        v33--;\n        if (v33 == 0) {\n            // 0x40d537\n            return -1;\n        }\n        // 0x40d3e1\n        *v23 = v39;\n        v34 = v35;\n        v35 = v38;\n        v36 = (int64_t)(*v30 != 0);\n        v37 = function_40d1b0(*v20, v22, v21);\n        v38 = *v23;\n        *v24 = v37;\n        v39 = function_40d110(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g65);\n    }\n    int32_t v42 = *v32; // 0x40d580\n    int32_t v43 = *v30; // 0x40d584\n    int64_t v44 = *(int64_t *)(v19 + 72); // 0x40d58b\n    *(char *)v31 = (char)(v42 == 0);\n    int64_t v45 = v38; // 0x40d5a4\n    int64_t v46 = v44; // 0x40d5a4\n    if (v43 >= 0 && v42 >= 0 && v42 == 0 != (v43 == 0)) {\n        int64_t * v47 = (int64_t *)v31; // 0x40d5c0\n        *v47 = v8;\n        int64_t v48 = v19 + 88; // 0x40d5fb\n        int64_t * v49 = (int64_t *)v48;\n        int64_t v50 = v19 + 160;\n        int64_t v51 = v38; // 0x40d5c5\n        int64_t v52 = 0x92c70; // 0x40d5c5\n        while (true) {\n            int64_t v53 = -v52; // 0x40d5f2\n            int64_t v54 = v53 & 0xffffffff; // 0x40d5f2\n            int64_t v55 = 0x100000000 * v53 >> 32; // 0x40d5f5\n            int64_t v56 = v55 + v51; // 0x40d5f8\n            *v49 = v56;\n            int64_t v57 = v51; // 0x40d600\n            int32_t v58 = 2; // 0x40d600\n            int64_t v59 = v54; // 0x40d600\n            int32_t v60 = 2; // 0x40d600\n            int64_t v61 = v54; // 0x40d600\n            if (((v56 ^ v55) & (v56 ^ v51)) >= 0) {\n              lab_0x40d61e:\n                // 0x40d61e\n                function_40d1b0(*v20, v48, v50);\n                int32_t v62 = *(int32_t *)(v19 + 192); // 0x40d635\n                if (v42 == 0 != (v62 == 0) != v62 >= 0) {\n                    // break -> 0x40d64a\n                    break;\n                }\n                // 0x40d6a0\n                v59 = v61;\n                v58 = v60;\n                v57 = *v23;\n            }\n            int64_t v63 = 2 * v52; // 0x40d5e7\n            int64_t v64 = v57;\n            int32_t v65 = v58; // 0x40d270\n            int64_t v66 = v59; // 0x40d602\n            while (v65 != 1) {\n                int64_t v67 = v66 + v63; // 0x40d602\n                v66 = v67 & 0xffffffff;\n                int64_t v68 = 0x100000000 * v67 >> 32; // 0x40d60b\n                int64_t v69 = v68 + v64; // 0x40d614\n                *v49 = v69;\n                v65 = 1;\n                v60 = 1;\n                v61 = v66;\n                if (((v69 ^ v68) & (v69 ^ v64)) >= 0) {\n                    goto lab_0x40d61e;\n                }\n            }\n            int64_t v70 = v52 + 0x92c70; // 0x40d5d0\n            v45 = v64;\n            v46 = v44;\n            v51 = v64;\n            v52 = v70 & 0xffffffff;\n            if ((int32_t)v70 == 0x100dc400) {\n                goto lab_0x40d480;\n            }\n        }\n        // 0x40d64a\n        *v24 = v50;\n        int64_t v71 = function_40d110(*v47, *v28, *v27, *v26, *v25, *v49, (int64_t)&g65); // 0x40d676\n        *v23 = v71;\n        function_40d1b0(*v20, v22, v21);\n        v45 = *v23;\n        v46 = v44;\n    }\n    goto lab_0x40d480;\n  lab_0x40d477_3:\n    // 0x40d477\n    v45 = v38;\n    v46 = *(int64_t *)(v19 + 72);\n    goto lab_0x40d480;\n  lab_0x40d480:;\n    int64_t v72 = *(int64_t *)(v19 + 56); // 0x40d488\n    int32_t v73 = *(int32_t *)v21; // 0x40d490\n    int32_t v74 = *(int32_t *)(v19 + 64); // 0x40d494\n    int64_t v75 = *(int64_t *)(v19 + 48); // 0x40d49b\n    *(int64_t *)v75 = v45 - (int64_t)*(int32_t *)(v19 + 68) - v72;\n    int64_t result = v45; // 0x40d4a5\n    if (v73 != v74) {\n        int32_t v76 = *v25; // 0x40d4a9\n        int64_t v77 = (int64_t)(v73 == 60 == v74 < 1) - (int64_t)v76 + (int64_t)v74; // 0x40d4c5\n        int64_t v78 = v77 + v45; // 0x40d4c8\n        *v23 = v78;\n        if (((v78 ^ v45) & (v78 ^ v77)) < 0) {\n            // 0x40d537\n            return -1;\n        }\n        // 0x40d4d2\n        *(int64_t *)(v19 + 160) = v78;\n        if (*v20 == 0) {\n            // 0x40d537\n            return -1;\n        }\n        // 0x40d4f3\n        result = *v23;\n    }\n    int128_t v79 = __asm_movdqa(*(int128_t *)v21); // 0x40d4f8\n    int128_t v80 = __asm_movdqa(*(int128_t *)(v19 + 112)); // 0x40d4fe\n    int128_t v81 = __asm_movdqa(*(int128_t *)v29); // 0x40d504\n    __asm_movups(*(int128_t *)v46, v79);\n    __asm_movups(*(int128_t *)(v46 + 16), v80);\n    __asm_movups(*(int128_t *)(v46 + 32), v81);\n    *(int64_t *)(v46 + 48) = *(int64_t *)(v19 + 144);\n    // 0x40d537\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d6b0",
            "funcStartAddr": "40d6b0",
            "funcEndAddr": "40d6cc",
            "decompiledFuncCode": "int64_t function_40d6b0(int64_t a1) {\n    // 0x40d6b0\n    tzset();\n    return function_40d270(a1, 0x401e50, &g62);\n}\n"
        },
        {
            "funcName": "function_40d6d0",
            "funcStartAddr": "40d6d0",
            "funcEndAddr": "40d729",
            "decompiledFuncCode": "int64_t function_40d6d0(int64_t * a1, int64_t a2, int64_t a3) {\n    // 0x40d6d0\n    int32_t v1; // bp-16, 0x40d6d0\n    int64_t v2; // 0x40d6d0\n    int64_t v3 = function_40d880(0, (int64_t *)&v1, a2, a3, v2, v2, v2, (int64_t)&g65); // 0x40d6e5\n    if (v3 == 0) {\n        // 0x40d702\n        return 0xffffffff;\n    }\n    // 0x40d6ef\n    int64_t result; // 0x40d6d0\n    if (v1 > -1) {\n        // 0x40d6fd\n        *a1 = v3;\n        result = v1;\n    } else {\n        // 0x40d708\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x40d702\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d730",
            "funcStartAddr": "40d730",
            "funcEndAddr": "40d73e",
            "decompiledFuncCode": "int64_t function_40d730(int64_t a1, int64_t a2) {\n    // 0x40d730\n    int64_t v1; // 0x40d730\n    return function_40d740(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40d740",
            "funcStartAddr": "40d740",
            "funcEndAddr": "40d875",
            "decompiledFuncCode": "int64_t function_40d740(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x40d820\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40d77c\n    int64_t v2; // 0x40d740\n    if (g63 < 0) {\n        int64_t v3 = function_40d740(fd, 0, v1, a4); // 0x40d7c4\n        int64_t v4 = v3 & 0xffffffff; // 0x40d7c9\n        if ((int32_t)v3 < 0) {\n            // 0x40d7b0\n            return v4 & 0xffffffff;\n        }\n        // 0x40d7cf\n        v2 = v4;\n        if (g63 != -1) {\n            // 0x40d7b0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40d797\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40d7a6\n            g63 = 1;\n            // 0x40d7b0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40d740(fd & 0xffffffff, 0, v1, a4); // 0x40d857\n        int64_t v7 = v6 & 0xffffffff; // 0x40d85c\n        if ((int32_t)v6 < 0) {\n            // 0x40d7b0\n            return v7 & 0xffffffff;\n        }\n        // 0x40d866\n        g63 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40d7df\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40d7ea\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40d7b0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40d802\n    close(fd2);\n    // 0x40d7b0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40d880",
            "funcStartAddr": "40d880",
            "funcEndAddr": "40f399",
            "decompiledFuncCode": "int64_t function_40d880(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x40d880\n    int64_t v1; // bp-1416, 0x40d880\n    int64_t v2; // bp-1656, 0x40d880\n    if ((int32_t)function_40f5c0(a3, &v1, &v2) < 0) {\n        // 0x40def0\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40d88b\n    int64_t v4; // bp-1384, 0x40d880\n    int64_t v5; // bp-1640, 0x40d880\n    int64_t v6; // 0x40d880\n    if ((int32_t)function_40f3a0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x40e7d7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x40e7f3\n            free((int64_t *)v6);\n        }\n        // 0x40e7f8\n        *__errno_location() = 22;\n        // 0x40def0\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x40d8eb\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x40d8f3\n    uint64_t v9 = v8 + v6; // 0x40d8f7\n    int64_t v10; // 0x40d880\n    char * v11; // 0x40d880\n    int64_t v12; // 0x40d880\n    if (v9 < v8) {\n        // 0x40dfa0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40dea9;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x40dfa0\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x40dea9;\n        } else {\n            uint64_t size = v9 + 6; // 0x40d907\n            if (size < 4000) {\n                // 0x40da50\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x40d880\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x40d944;\n            } else {\n                if (size == -1) {\n                    // 0x40dfa0\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x40dea9;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x40d928\n                    if (mem == NULL) {\n                        // 0x40dfa0\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x40dea9;\n                    } else {\n                        // 0x40d93d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x40d944;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40de70_2:;\n    // 0x40de70\n    int64_t v14; // 0x40d880\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x40de78\n    int64_t v17 = v16; // 0x40de86\n    int64_t v18 = v16; // 0x40de86\n    int64_t v19 = v15; // 0x40de86\n    int64_t v20; // 0x40d968\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x40e098;\n    } else {\n        goto lab_0x40de91;\n    }\n  lab_0x40dea9:\n    // 0x40dea9\n    if (v6 != (int64_t)&v4) {\n        // 0x40dec0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40dedc\n        free((int64_t *)v6);\n    }\n    // 0x40dee1\n    *(int32_t *)v10 = 12;\n    // 0x40def0\n    return 0;\n  lab_0x40d944:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x40d97d\n    int64_t v23 = *v22; // 0x40d97d\n    int64_t v24 = 0; // 0x40d983\n    int64_t v25 = v20; // 0x40d983\n    int64_t v26 = v21; // 0x40d983\n    int64_t v27 = 0; // 0x40d983\n    int64_t v28; // 0x40d880\n    int64_t v29; // 0x40d880\n    int64_t v30; // 0x40d880\n    int64_t v31; // 0x40d880\n    int64_t v32; // 0x40d880\n    int64_t v33; // 0x40d880\n    int64_t v34; // 0x40d880\n    if (v23 == a3) {\n        goto lab_0x40df93;\n    } else {\n        int64_t v35 = v23 - a3; // 0x40d989\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40d99b;\n    }\n  lab_0x40df93:;\n    int64_t v36 = v24; // 0x40df96\n    float80_t v37; // 0x40d880\n    float80_t v38 = v37; // 0x40df96\n    float80_t v39; // 0x40d880\n    float80_t v40 = v39; // 0x40df96\n    int64_t v41 = v25; // 0x40df96\n    int64_t v42 = v26; // 0x40df96\n    int64_t v43 = v27; // 0x40df96\n    int64_t v44; // 0x40d880\n    int64_t v45 = v44; // 0x40df96\n    goto lab_0x40daf8;\n  lab_0x40daf8:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x40d880\n    int64_t v51; // 0x40d880\n    int64_t v52; // 0x40d880\n    int64_t v53; // 0x40d880\n    int64_t v54; // 0x40d880\n    int64_t v55; // 0x40d880\n    int64_t v56; // 0x40d880\n    int64_t v57; // 0x40d880\n    int64_t dest_mem2; // 0x40d880\n    int64_t dest_mem3; // 0x40d880\n    int64_t v58; // 0x40d880\n    float80_t v59; // 0x40d880\n    float80_t v60; // 0x40d880\n    float80_t v61; // 0x40d880\n    float80_t v62; // 0x40d880\n    float80_t v63; // 0x40d880\n    uint64_t v64; // 0x40ec26\n    char * v65; // 0x40db0c\n    char v66; // 0x40db0c\n    int64_t v67; // 0x40db34\n    uint32_t v68; // 0x40db38\n    int64_t v69; // 0x40df15\n    char v70; // 0x40d880\n    if (v1 == v49) {\n        // 0x40ec20\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x40f38a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x40ec82;\n            } else {\n                goto lab_0x40de70_2;\n            }\n        } else {\n            // 0x40ec30\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x40ec82;\n            } else {\n                if (v47 != 0) {\n                    // 0x40f24d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40de70_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x40f253\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40ec4e;\n                        } else {\n                            goto lab_0x40f25f;\n                        }\n                    }\n                } else {\n                    // 0x40ec3e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40ec4e;\n                    } else {\n                        goto lab_0x40f25f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40db0c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x40db11\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40e5ac\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x40e6e0\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x40de70_2;\n                } else {\n                    goto lab_0x40df72;\n                }\n            } else {\n                // 0x40df22\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x40df72;\n                } else {\n                    if (v47 != 0) {\n                        // 0x40e810\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x40de70_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x40e816\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x40df40;\n                            } else {\n                                goto lab_0x40e822;\n                            }\n                        }\n                    } else {\n                        // 0x40df30\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x40df40;\n                        } else {\n                            goto lab_0x40e822;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40e5ac\n                abort();\n                // UNREACHABLE\n            }\n            // 0x40db29\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g68 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x40e4a0\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40df77;\n                }\n                case 19: {\n                    // 0x40e490\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40df77;\n                }\n                case 20: {\n                    // 0x40e478\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40df77;\n                }\n                case 21: {\n                    goto lab_0x40e060;\n                }\n                case 22: {\n                    goto lab_0x40e060;\n                }\n                default: {\n                    // 0x40db4a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x40dff0\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x40e00d;\n                        } else {\n                            // 0x40dff7\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x40db80;\n                            } else {\n                                goto lab_0x40e00d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x40db80;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40d99b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x40d880\n    float80_t v77 = v76;\n    float80_t v78; // 0x40d880\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x40d880\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40d99e\n    int64_t v89 = v85; // 0x40d99e\n    int64_t v90 = v84; // 0x40d99e\n    float80_t v91 = v79; // 0x40d99e\n    float80_t v92 = v77; // 0x40d99e\n    int64_t v93 = v75; // 0x40d99e\n    int64_t v94 = v80; // 0x40d99e\n    int64_t v95 = v81; // 0x40d99e\n    int64_t v96 = v82; // 0x40d99e\n    int64_t v97 = v87; // 0x40d99e\n    int64_t v98; // 0x40d880\n    int64_t v99; // 0x40d880\n    int64_t v100; // 0x40d880\n    int64_t v101; // 0x40d880\n    int64_t v102; // 0x40d880\n    if (v82 >= v87) {\n        goto lab_0x40dae9;\n    } else {\n        if (v82 != 0) {\n            // 0x40da80\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x40de70_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x40da86\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40da9b;\n                } else {\n                    goto lab_0x40da8e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x40d9c4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40daae;\n                } else {\n                    goto lab_0x40d9d0;\n                }\n            } else {\n                goto lab_0x40da8e;\n            }\n        }\n    }\n  lab_0x40dae9:\n    // 0x40dae9\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x40daf8;\n  lab_0x40ec82:\n    // 0x40ec82\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40ec8a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40ec9b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x40eca7\n    if (v12 != 0) {\n        // 0x40ecb3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x40ecd2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40ecee\n        free((int64_t *)v6);\n    }\n    // 0x40ecf3\n    *a2 = v46;\n    // 0x40def0\n    return result;\n  lab_0x40e060:\n    // 0x40e060\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x40df77;\n  lab_0x40da8e:\n    // 0x40da8e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x40de70_2;\n    } else {\n        goto lab_0x40da9b;\n    }\n  lab_0x40e098:\n    // 0x40e098\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x40de91;\n  lab_0x40de91:\n    if (v12 == 0) {\n        // 0x40dfa0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40dea9;\n    } else {\n        // 0x40dea1\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x40dea9;\n    }\n  lab_0x40df72:\n    // 0x40df72\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x40df77;\n  lab_0x40db80:;\n    int64_t v273 = (int64_t)v11; // 0x40db80\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x40db87\n    int64_t v275 = v273 + 1; // 0x40db8b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x40db94\n    if (v274 % 2 != 0) {\n        // 0x40db96\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x40db87\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x40dba7\n    if ((v277 & 2) != 0) {\n        // 0x40dba9\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x40dbb3\n    if ((v277 & 4) != 0) {\n        // 0x40dbb5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x40dbbf\n    if ((v277 & 8) != 0) {\n        // 0x40dbc1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x40dbcb\n    if ((v277 & 16) != 0) {\n        // 0x40dbcd\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x40dbd7\n    if ((v277 & 64) != 0) {\n        // 0x40dbd9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x40dbe3\n    if ((v277 & 32) != 0) {\n        // 0x40dbe5\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x40dbed\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x40dbf1\n    int64_t v293 = v290; // 0x40dbf8\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x40dc07\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40dc2a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40dc2e\n    int64_t v298 = v295; // 0x40dc35\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x40dc44\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40db3a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x40dc70\n    int64_t v272; // 0x40d880\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x40dc79\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x40e078;\n        } else {\n            if (v301 == 12) {\n                // 0x40e838\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x40dca0;\n            } else {\n                // 0x40dc90\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x40e070\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x40e078;\n                } else {\n                    goto lab_0x40dca0;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40dca0;\n    }\n  lab_0x40df77:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x40df77\n    int64_t v111 = v55 + 88; // 0x40df7b\n    int64_t v112 = *(int64_t *)v111; // 0x40df7f\n    int64_t v113 = v49 + 1; // 0x40df82\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x40d989\n        int64_t v115 = v114 + v105; // 0x40d98f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x40dfb8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x40de70_2;\n            } else {\n                goto lab_0x40dae9;\n            }\n        } else {\n            goto lab_0x40d99b;\n        }\n    } else {\n        goto lab_0x40df93;\n    }\n  lab_0x40da9b:;\n    int64_t v116 = v80 == v20; // 0x40daa2\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x40d9d0;\n    } else {\n        goto lab_0x40daae;\n    }\n  lab_0x40daae:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x40d880\n    if (v102 != 0) {\n        goto lab_0x40d9d0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x40daca\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x40e085;\n        } else {\n            // 0x40dad8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x40dae9;\n        }\n    }\n  lab_0x40d9d0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x40d9e7\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x40de70_2;\n    } else {\n        // 0x40da0d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x40da35\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x40dae9;\n    }\n  lab_0x40ec4e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x40f214\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x40de70_2;\n        } else {\n            // 0x40f225\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40f23a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x40ec82;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x40ec71\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x40e085;\n        } else {\n            // 0x40ec7f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x40ec82;\n        }\n    }\n  lab_0x40f25f:\n    // 0x40f25f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x40de70_2;\n    } else {\n        goto lab_0x40ec4e;\n    }\n  lab_0x40e00d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x40e00d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x40e011\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x40e015\n    int64_t v123 = 0; // 0x40e01c\n    int64_t v124 = v122; // 0x40e01c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x40e022\n        int64_t v126 = v120; // 0x40e02a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x40efb1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x40efc9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x40efdb\n            int64_t v131 = v128; // 0x40efe4\n            int64_t v132 = v130; // 0x40efe4\n            int64_t v133; // 0x40d880\n            int64_t v134; // 0x40eff6\n            if (v130 < v129) {\n                // 0x40efe6\n                if (v121 == v128) {\n                    // break -> 0x40de00\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x40ddeb\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x40de00\n                        goto lab_0x40de00;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x40efa8\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x40efb1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x40efe6\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x40de00\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x40ddeb\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x40de00\n                            goto lab_0x40de00;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x40efa8\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x40e034\n            if (*(int32_t *)v135 != 5) {\n                // 0x40e5ac\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x40e040\n            int64_t v137 = v136; // 0x40e040\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x40e04d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x40de00:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x40de00\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x40de04\n    int64_t v142; // 0x40d880\n    int64_t v143; // 0x40d880\n    int64_t v144; // 0x40d880\n    if (v140 == v141) {\n        goto lab_0x40e4b0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x40de11\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x40f014\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40f01d\n            if (v141 == v146) {\n                goto lab_0x40e4ce;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x40f043\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40f04a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x40f063\n                int64_t v152 = v151; // 0x40f06c\n                int64_t v153 = v149; // 0x40f06c\n                int64_t v154; // 0x40d880\n                int64_t v155; // 0x40f077\n                if (v151 < v150) {\n                    // 0x40f06e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x40de70_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x40f08a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x40de70_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x40f030\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x40f039\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x40f06e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x40de70_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x40f08a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x40de70_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x40f030\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x40de3c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x40de23\n            if (*(int32_t *)v156 != 5) {\n                // 0x40e5ac\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x40de30\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x40e4b0;\n            } else {\n                goto lab_0x40de3c;\n            }\n        }\n    }\n  lab_0x40dca0:\n    // 0x40dca0\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40dcad\n    int64_t v160 = 0; // 0x40dcb5\n    if (v159 != -1) {\n        // 0x40dcbb\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40e5ac\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x40dcde\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x40dcec\n        if (*(int32_t *)v162 != 5) {\n            // 0x40e5ac\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40dcff\n        int64_t v164; // bp-8, 0x40d880\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x40d880\n    uint64_t v165; // 0x40dd16\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x40e748\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x40dd74\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x40de70_2;\n    } else {\n        // 0x40dd20\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x40dd74\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x40e450\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x40de70_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x40e456\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x40dd42;\n                } else {\n                    goto lab_0x40e462;\n                }\n            }\n        } else {\n            // 0x40dd32\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x40dd42;\n            } else {\n                goto lab_0x40e462;\n            }\n        }\n    }\n  lab_0x40df40:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x40e769\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x40de70_2;\n        } else {\n            // 0x40e781\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40e792\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x40df72;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x40df61\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x40e085;\n        } else {\n            // 0x40df6f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x40df72;\n        }\n    }\n  lab_0x40e822:\n    // 0x40e822\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x40de70_2;\n    } else {\n        goto lab_0x40df40;\n    }\n  lab_0x40e4b0:\n    // 0x40e4b0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x40e4ce;\n  lab_0x40e078:\n    // 0x40e078\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x40dca0;\n  lab_0x40e085:\n    // 0x40e085\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x40e098;\n  lab_0x40e4ce:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x40e4d4\n    v14 = v48;\n    int64_t v170; // 0x40d880\n    int64_t v171; // 0x40d880\n    int64_t * v172; // 0x40d880\n    int64_t v173; // 0x40d880\n    int64_t v174; // bp-760, 0x40d880\n    uint64_t size5; // 0x40e4d8\n    if (v169 == -1) {\n        goto lab_0x40de70_2;\n    } else {\n        // 0x40e4e9\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x40e549;\n        } else {\n            // 0x40e4f5\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x40de70_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40e51d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x40de70_2;\n                } else {\n                    goto lab_0x40e549;\n                }\n            }\n        }\n    }\n  lab_0x40de3c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x40e4ce;\n    } else {\n        // 0x40de45\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x40e4ce;\n        } else {\n            goto lab_0x40de70_2;\n        }\n    }\n  lab_0x40dd42:\n    // 0x40dd42\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x40e709\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x40e724\n            if (v48 == v20 && v46 != 0) {\n                // 0x40e732\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x40dd74\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x40dd63\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x40dd74\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x40de70_2;\n  lab_0x40e462:\n    // 0x40e462\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x40de70_2;\n    } else {\n        goto lab_0x40dd42;\n    }\n  lab_0x40e549:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x40d880\n    int64_t v181; // 0x40d880\n    int64_t v182; // 0x40d880\n    int64_t v183; // 0x40d880\n    int64_t v184; // 0x40d880\n    int64_t v185; // 0x40d880\n    int64_t v186; // 0x40d880\n    int64_t v187; // 0x40d880\n    int64_t v188; // 0x40d880\n    int64_t v189; // 0x40d880\n    int64_t v190; // 0x40d880\n    int64_t v191; // 0x40d880\n    int64_t v192; // 0x40d880\n    int64_t v193; // 0x40d880\n    float80_t v194; // 0x40d880\n    float80_t v195; // 0x40d880\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x40f0c2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x40f0d0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40f1fd\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x40ea09;\n    } else {\n        // 0x40e551\n        int64_t v198; // 0x40d880\n        float80_t v199; // 0x40d880\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x40ed11\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40ed1e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40eb7a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40e57f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x40e588\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40e5ac\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40e5ac\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x40f0f6\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x40f0f6\n                            v181 = v187 + 3;\n                            goto lab_0x40f271;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x40f271;\n                            } else {\n                                goto lab_0x40f132;\n                            }\n                        }\n                    } else {\n                        // 0x40ee03\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x40e9f7;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x40ee11\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40f35a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x40ee58\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x40ee6b\n                                int64_t v207 = v176 & 0xffffffff; // 0x40ee6e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x40ee7c\n                                int64_t v209 = v187 + 1; // 0x40ee99\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40eeae\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x40eebb\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x40ea09;\n                        }\n                    }\n                } else {\n                    // 0x40eba8\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x40eba8\n                        v180 = v187 + 1;\n                        goto lab_0x40f157;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x40f157;\n                        } else {\n                            goto lab_0x40ebc8;\n                        }\n                    }\n                }\n            } else {\n                // 0x40e9e0\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x40e9f7;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40ef2c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40ef3d\n                    char v215 = *v213; // 0x40ef44\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x40ef80\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x40ef8d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x40ef55\n                        v182 = v218;\n                        int64_t v219; // 0x40ef47\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x40ea09;\n                }\n            }\n        } else {\n            float80_t v220; // 0x40d880\n            if (v220 != 0.0L) {\n                // 0x40e5ac\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40ebfb\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40ec0a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x40eee3\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x40ea09;\n        }\n    }\n  lab_0x40ea09:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40ea0c\n    int64_t v229 = v228; // 0x40ea12\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x40ea14\n        int64_t v232 = v231 + v224; // 0x40ea17\n        int64_t v233 = v232 - v225; // 0x40ea1e\n        if ((v230 & 2) != 0) {\n            // 0x40eec3\n            v229 = v233;\n            int64_t v234 = v224; // 0x40eec6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x40eed0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x40eed0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x40ed35\n                int64_t v238 = v224; // 0x40ed3b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x40ed49\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x40ed40\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x40ed55\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x40ed68\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x40ea41\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x40ea61\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x40ea58\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40ea6a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x40ea78\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40e5ac\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x40eaa8\n    int64_t dest_mem5 = v48; // 0x40eab5\n    int64_t v250 = v248; // 0x40eab5\n    int64_t v251 = v47; // 0x40eab5\n    int64_t v252; // 0x40d880\n    if (v47 - v46 > v248) {\n        goto lab_0x40eb30;\n    } else {\n        if (v249 < v46) {\n            // 0x40ed02\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x40de70_2;\n            } else {\n                goto lab_0x40eb30;\n            }\n        } else {\n            // 0x40eac0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x40eb30;\n            } else {\n                if (v47 != 0) {\n                    // 0x40f098\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40de70_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x40f09e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40eade;\n                        } else {\n                            goto lab_0x40f0aa;\n                        }\n                    }\n                } else {\n                    // 0x40eace\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40eade;\n                    } else {\n                        goto lab_0x40f0aa;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40eb30:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x40eb41\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40eb5d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x40df77;\n  lab_0x40e9f7:\n    // 0x40e9f7\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x40ea09;\n  lab_0x40f157:;\n    char * v257 = nl_langinfo(0x10000); // 0x40f18a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40f19b\n    char v259 = *v257; // 0x40f1a2\n    int64_t v260 = v176 & 0xffffffff; // 0x40f1a5\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x40f1b3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x40f1e0\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x40f1ed\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x40ebc8;\n  lab_0x40ebc8:\n    // 0x40ebc8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x40ea09;\n  lab_0x40eade:\n    // 0x40eade\n    if (v48 == 0 || v48 == v20) {\n        // 0x40ed7b\n        int64_t size7; // 0x40d880\n        int64_t * mem12 = malloc((int32_t)size7); // 0x40ed92\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x40de70_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40ed9e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40edc9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x40eb30;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40eb0d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x40de70_2;\n        } else {\n            // 0x40eb1b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x40eb30;\n        }\n    }\n  lab_0x40f0aa:\n    // 0x40f0aa\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x40de70_2;\n    } else {\n        goto lab_0x40eade;\n    }\n  lab_0x40f271:;\n    int64_t v265 = v187 + 4; // 0x40f271\n    char v266 = *nl_langinfo(0x10000); // 0x40f2bc\n    int64_t v267 = v176 & 0xffffffff; // 0x40f2bf\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x40f2c6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x40f2ed\n        int64_t v270 = v265 + 1; // 0x40f2f5\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x40f132;\n  lab_0x40f132:\n    // 0x40f132\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x40ea09;\n}\n"
        },
        {
            "funcName": "function_40f3a0",
            "funcStartAddr": "40f3a0",
            "funcEndAddr": "40f5b9",
            "decompiledFuncCode": "int64_t function_40f3a0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x40f403\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x40f3b8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x40f3c9\n    g69 = v5;\n    int64_t v6; // 0x40f3a0\n    int64_t v7; // 0x40f3a0\n    int64_t v8; // 0x40f3a0\n    int64_t v9; // 0x40f3a0\n    int64_t v10; // 0x40f3a0\n    int64_t v11; // 0x40f3a0\n    int64_t v12; // 0x40f3a0\n    uint32_t v13; // 0x40f4c0\n    int64_t * v14; // 0x40f4f0\n    int64_t v15; // 0x40f4f8\n    uint32_t v16; // 0x40f540\n    uint32_t v17; // 0x40f510\n    int64_t * v18; // 0x40f4a0\n    int64_t v19; // 0x40f4a0\n    int64_t * v20; // 0x40f4b0\n    int64_t v21; // 0x40f4b0\n    int64_t * v22; // 0x40f488\n    int64_t v23; // 0x40f488\n    int64_t * v24; // 0x40f470\n    int64_t v25; // 0x40f470\n    int64_t * v26; // 0x40f590\n    uint32_t v27; // 0x40f450\n    int64_t v28; // 0x40f590\n    int64_t * v29; // 0x40f580\n    int64_t v30; // 0x40f580\n    uint32_t v31; // 0x40f430\n    int64_t * v32; // 0x40f5a8\n    int64_t v33; // 0x40f5a8\n    int64_t v34; // 0x40f553\n    uint32_t v35; // 0x40f410\n    int64_t v36; // 0x40f527\n    uint32_t v37; // 0x40f3d8\n    int32_t * v38; // 0x40f4c0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x40f450\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x40f457\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x40f4a0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x40f463\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x40f3f6\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x40f430\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x40f437\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x40f4b0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x40f443\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x40f3f6\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x40f410\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x40f417\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x40f488\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x40f423\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x40f3f6\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x40f3d8\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x40f3e3\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x40f470\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x40f3ef\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x40f3f6\n            break;\n        }\n        case 11: {\n            // 0x40f4c0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x40f4cf\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x40f590\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x40f4dc\n            *(int64_t *)(v4 + 16) = __asm_movsd_3(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x40f3f6\n            break;\n        }\n        case 12: {\n            // 0x40f4f0\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x40f3f6\n            break;\n        }\n        case 15: {\n            // 0x40f540\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x40f547\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x40f580\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x40f553\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x40f3f6\n            break;\n        }\n        case 16: {\n            // 0x40f510\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x40f51b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x40f5a8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x40f527\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x40f3f6\n            break;\n        }\n        default: {\n            // 0x40f403\n            return 0xffffffff;\n        }\n    }\n    // 0x40f3f6\n    v3++;\n    int64_t v39 = v4 + 32; // 0x40f401\n    while (v3 < v2) {\n        // 0x40f3c0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g69 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x40f450\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x40f457\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x40f4a0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x40f463\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x40f3f6\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x40f430\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x40f437\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x40f4b0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x40f443\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x40f3f6\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x40f410\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x40f417\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x40f488\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x40f423\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x40f3f6\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x40f3d8\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x40f3e3\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x40f470\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x40f3ef\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x40f3f6\n                break;\n            }\n            case 11: {\n                // 0x40f4c0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x40f4cf\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x40f590\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x40f4dc\n                *(int64_t *)(v4 + 16) = __asm_movsd_3(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x40f3f6\n                break;\n            }\n            case 12: {\n                // 0x40f4f0\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x40f3f6\n                break;\n            }\n            case 15: {\n                // 0x40f540\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x40f547\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x40f580\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x40f553\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x40f3f6\n                break;\n            }\n            case 16: {\n                // 0x40f510\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x40f51b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x40f5a8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x40f527\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x40f3f6\n                break;\n            }\n            default: {\n                // 0x40f403\n                return 0xffffffff;\n            }\n        }\n        // 0x40f3f6\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x40f403\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40f5c0",
            "funcStartAddr": "40f5c0",
            "funcEndAddr": "4102c9",
            "decompiledFuncCode": "int64_t function_40f5c0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x40f5c2\n    int64_t v4 = v1 + 16; // 0x40f5c6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x40f5f9\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x40f60e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x40f63b\n    int32_t v8 = 0; // 0x40f640\n    int64_t v9 = 0; // 0x40f640\n    int64_t v10 = v3; // 0x40f640\n    int64_t v11 = a1; // 0x40f640\n    int64_t v12 = 0; // 0x40f640\n    char v13; // 0x40f5c0\n    int64_t v14; // 0x40f5c0\n    int64_t v15; // 0x40f5c0\n    int64_t v16; // 0x40f5c0\n    int64_t v17; // 0x40f5c0\n    int64_t v18; // 0x40f5c0\n    int64_t v19; // 0x40f5c0\n    int64_t v20; // 0x40f5c0\n    int64_t v21; // 0x40f5c0\n    int64_t v22; // 0x40f5c0\n    int64_t v23; // 0x40f5c0\n    int64_t v24; // 0x40f5c0\n    int64_t v25; // 0x40f5c0\n    int64_t v26; // 0x40f5c0\n    int64_t v27; // 0x40f5c0\n    int64_t v28; // 0x40f5c0\n    int64_t v29; // 0x40f5c0\n    int64_t v30; // 0x40f5c0\n    int32_t v31; // 0x40f5c0\n    int64_t v32; // 0x40f5c0\n    int64_t v33; // 0x40f630\n    int64_t v34; // 0x40f680\n    int64_t * v35; // 0x40f6a3\n    int64_t v36; // 0x40f706\n    if (v7 != 0) {\n        // 0x40f630\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x40f5c0\n        int64_t v38 = 7; // 0x40f5c0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x40f5c0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x40f630:\n            // 0x40f630\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x40f673\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x40f688\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x40f6c4\n                int64_t v43 = v42; // 0x40f6c4\n                int64_t v44 = v43; // 0x40f6cd\n                int64_t v45 = v33; // 0x40f6cd\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x40fa60\n                    char v47 = *(char *)v46; // 0x40fa64\n                    int64_t v48 = v46; // 0x40fa6d\n                    while (v47 < 58) {\n                        // 0x40fa60\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x40fa6f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x410105\n                        char v52 = *(char *)v51; // 0x410105\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x410109\n                        int64_t v54 = v33; // 0x41011d\n                        int64_t v55 = v51; // 0x41011d\n                        char v56 = v52; // 0x41011d\n                        int64_t v57 = v53; // 0x41011d\n                        bool v58 = v52 < 58; // 0x41011d\n                        bool v59 = v52 < 58; // 0x41011d\n                        char v60 = v52; // 0x41011d\n                        int64_t v61 = v51; // 0x41011d\n                        int64_t v62; // 0x410132\n                        int64_t v63; // 0x410105\n                        char v64; // 0x410105\n                        int64_t v65; // 0x410109\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x40fd88_9;\n                            }\n                            // 0x410103\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x41011f\n                                if (v64 >= 58) {\n                                    goto lab_0x40fd88_9;\n                                }\n                                // 0x410103\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x4100d8\n                        while (v58) {\n                            // 0x4100de\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x40fd88_9;\n                                }\n                                // 0x410103\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x41011f\n                                    if (v64 >= 58) {\n                                        goto lab_0x40fd88_9;\n                                    }\n                                    // 0x410103\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x4100d4\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x4101dd\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x40fd88_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x4101ee\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x40f5c0\n                v36 = v45;\n                char v70; // 0x40f5c0\n                while (true) {\n                    // 0x40f706\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x40f720\n                                *v41 = *v41 | 2;\n                                // break -> 0x40f700\n                                break;\n                            }\n                            case 43: {\n                                // 0x40f730\n                                *v41 = *v41 | 4;\n                                // break -> 0x40f700\n                                break;\n                            }\n                            case 32: {\n                                // 0x40f740\n                                *v41 = *v41 | 8;\n                                // break -> 0x40f700\n                                break;\n                            }\n                            case 35: {\n                                // 0x40f750\n                                *v41 = *v41 | 16;\n                                // break -> 0x40f700\n                                break;\n                            }\n                            case 48: {\n                                // 0x40f760\n                                *v41 = *v41 | 32;\n                                // break -> 0x40f700\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x40f768\n                                    break;\n                                }\n                                // 0x40f6f6\n                                *v41 = *v41 | 64;\n                                // break -> 0x40f700\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x40f70f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x40f700\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x40f5c0\n                int64_t * v72; // 0x40f691\n                int64_t * v73; // 0x40f69a\n                if (v70 == 42) {\n                    // 0x40f7dd\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x40f7fd\n                    int64_t v75 = v74; // 0x40f7fd\n                    int64_t v76 = v75 + 0xffffffd0; // 0x40f801\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x40f807\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x40fbdd\n                        char v80 = *(char *)v79; // 0x40fbe1\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x40fbdd\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x40fbed\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x40fbf1\n                        int64_t v82 = v36; // 0x40fbf1\n                        int64_t v83 = 0; // 0x40fbf1\n                        if (v80 != 36) {\n                            goto lab_0x40f80d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x40fc22\n                            int64_t v89 = v85; // 0x40fc22\n                            int64_t v90 = v87; // 0x40fc22\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x40fc27\n                            int64_t v95 = v92 + 1; // 0x40fc2a\n                            char v96 = *(char *)v95; // 0x40fc2a\n                            int64_t v97 = v96; // 0x40fc2a\n                            while (v94 < v91) {\n                                // 0x40fc41\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x40fd88_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x40fbfb\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x40fc04\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x40fc41\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x40fd88_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x40fbfb\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x41027b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x40fd88_9;\n                            }\n                            // 0x410289\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x40f81c;\n                        }\n                    } else {\n                        goto lab_0x40f80d;\n                    }\n                } else {\n                    // 0x40f76d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x40f5c0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x40fe8b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x40fe90\n                        int64_t v102 = v71; // 0x40fe99\n                        char * v103 = v100; // 0x40fe99\n                        int64_t v104 = v36; // 0x40fe99\n                        int64_t v105 = v71; // 0x40fe99\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x40fea3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x40fea3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x40fea3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x40feb2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x40fed5\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x40f778;\n                }\n            } else {\n                goto lab_0x40f638;\n            }\n        }\n    }\n  lab_0x40f642:\n    // 0x40f642\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x40f664\n    return 0;\n  lab_0x40fd88_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x40fd93\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x40fda5\n    if (v3 != v115) {\n        // 0x40fdb0\n        free((int64_t *)v115);\n    }\n    // 0x40fdb5\n    *__errno_location() = 22;\n    // 0x40f664\n    return 0xffffffff;\n  lab_0x40ff60_5:;\n    // 0x40ff60\n    int64_t v116; // 0x40f5c0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x40ff65\n    int64_t v119; // 0x40f5c0\n    if (v4 == v117) {\n        goto lab_0x40ff79_3;\n    } else {\n        // 0x40ff67\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x40ff79_3;\n    }\n  lab_0x40ff79_3:;\n    int64_t v120 = *v5; // 0x40ff79\n    int32_t * v121; // 0x40ff89\n    if (v3 == v120) {\n        // 0x40ff89\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x40ff84\n    free((int64_t *)v120);\n    // 0x40ff89\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x40f638:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x40f63b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x40f642\n        goto lab_0x40f642;\n    }\n    goto lab_0x40f630;\n  lab_0x40f80d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x40f80d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x40fbb3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x40fd88_9;\n        }\n        // 0x40fbcb\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x40f81c;\n  lab_0x40f778:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40f77b\n    int64_t v147 = v339; // 0x40f77b\n    int64_t v145 = v338; // 0x40f77b\n    int64_t v143 = v337; // 0x40f77b\n    int64_t v186; // 0x40f5c0\n    int64_t v190; // 0x40f5c0\n    int64_t v189; // 0x40f5c0\n    int64_t v188; // 0x40f5c0\n    int64_t v187; // 0x40f5c0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x40f880;\n    } else {\n        goto lab_0x40f781;\n    }\n  lab_0x40f81c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x40f81c\n    int64_t v132 = v128; // 0x40f823\n    int64_t v133 = v16; // 0x40f823\n    int64_t v134 = v131; // 0x40f823\n    int64_t v135; // 0x40f5c0\n    int64_t v136; // 0x40f5c0\n    int64_t v137; // 0x40f5c0\n    int64_t v138; // 0x40facf\n    if (v16 > v127) {\n        goto lab_0x40f82c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x40fac5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x40ff60_5;\n        }\n        int64_t size = 32 * v138; // 0x40faee\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x41004c\n            if (mem == NULL) {\n                goto lab_0x40ff79_3;\n            }\n            // 0x41006e\n            v135 = (int64_t)mem;\n            goto lab_0x410079;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x40fb0f\n            int64_t v140 = *v6; // 0x40fb14\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x40ff60_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x40fb0f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x410079;\n            } else {\n                goto lab_0x40fb4d;\n            }\n        }\n    }\n  lab_0x40f781:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x40f788\n    int64_t v151 = v146; // 0x40f788\n    int64_t v152 = v144; // 0x40f788\n    uint64_t v153; // 0x40f5c0\n    int64_t v154; // 0x40f5c0\n    int64_t v155; // 0x40f7c7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x40f7cb\n        int64_t v158; // 0x40f5c0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x40f930\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x40f7c3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x40f938\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x40f7c0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x40f7c3\n                    break;\n                }\n            }\n        } else {\n            // 0x40f7d0\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x40f7c3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x40f938\n    int64_t v162 = v161 % 256; // 0x40f944\n    g70 = v162;\n    int64_t v163 = 17; // 0x40f947\n    int64_t v164 = v154; // 0x40f947\n    int64_t v165 = v154; // 0x40f947\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x40f9b1;\n        }\n        case 28: {\n            goto lab_0x40fd02;\n        }\n        case 30: {\n            // 0x40fd2e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x40f959;\n        }\n        case 32: {\n            goto lab_0x40fd02;\n        }\n        case 33: {\n            goto lab_0x40fd02;\n        }\n        case 34: {\n            goto lab_0x40fd02;\n        }\n        case 46: {\n            // 0x40fd1f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x40f959;\n        }\n        case 51: {\n            goto lab_0x40fd3d;\n        }\n        case 60: {\n            goto lab_0x40fd02;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x40fc59\n            int32_t v167 = v166 - 7; // 0x40fc59\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40fc5f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x40f959;\n        }\n        case 63: {\n            goto lab_0x40fcb0;\n        }\n        case 64: {\n            goto lab_0x40fd02;\n        }\n        case 65: {\n            goto lab_0x40fd02;\n        }\n        case 66: {\n            goto lab_0x40fd02;\n        }\n        case 68: {\n            goto lab_0x40fcb0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x40fc6f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x40fc75\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40fc7d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40fc8b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40fc9f\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x40f959;\n        }\n        case 74: {\n            goto lab_0x40fd3d;\n        }\n        case 75: {\n            goto lab_0x40f959;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x40f950\n            int32_t v172 = v171 - 7; // 0x40f950\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x40f956\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x40f959;\n        }\n        case 80: {\n            goto lab_0x40fd3d;\n        }\n        case 83: {\n            goto lab_0x40fd3d;\n        }\n        default: {\n            goto lab_0x40fd88_9;\n        }\n    }\n  lab_0x40f82c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x40f843\n        int64_t v178 = v176; // 0x40f5c0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x40f838\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x40f838\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x40f851\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40f85d\n    int32_t v182 = *v181; // 0x40f85d\n    if (v182 != 0) {\n        // 0x40fede\n        if (v182 != 5) {\n            goto lab_0x40fd88_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x40fee7\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x40f778;\n    } else {\n        // 0x40f867\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40f86d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x40f781;\n        } else {\n            goto lab_0x40f880;\n        }\n    }\n  lab_0x40f880:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x40f880\n    char v197 = *v196; // 0x40f880\n    int64_t * v198; // 0x40f6a8\n    *v198 = v192;\n    int64_t v199; // 0x40f5c0\n    int64_t v200; // 0x40f5c0\n    int64_t v201; // 0x40f5c0\n    int64_t v202; // 0x40f5c0\n    int64_t v203; // 0x40f5c0\n    int64_t * v204; // 0x40f6b1\n    int64_t * v205; // 0x40f6ba\n    int64_t v206; // 0x40f899\n    if (v197 != 42) {\n        char v207 = *v196; // 0x40fa80\n        int64_t v208 = v193; // 0x40fa89\n        char * v209; // 0x40f5c0\n        int64_t v210; // 0x40f5c0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x40fa90\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x40fa94\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x40fa90\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40fa9e\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x40fa80\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x40fab1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x40f781;\n    } else {\n        // 0x40f88f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40f8af\n        int64_t v219 = v218; // 0x40f8af\n        int64_t v220 = v219 + 0xffffffd0; // 0x40f8b3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x40f8b9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x410164\n            char v224 = *(char *)v223; // 0x410168\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x410164\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x410174\n            v201 = v223;\n            int64_t v225 = v219; // 0x410178\n            int64_t v226 = v206; // 0x410178\n            int64_t v227 = 0; // 0x410178\n            if (v224 != 36) {\n                goto lab_0x40f8bf;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x4101a9\n                int64_t v233 = v229; // 0x4101a9\n                int64_t v234 = v231; // 0x4101a9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x4101ae\n                int64_t v239 = v236 + 1; // 0x4101b5\n                char v240 = *(char *)v239; // 0x4101b9\n                int64_t v241 = v240; // 0x4101b9\n                while (v238 < v235) {\n                    // 0x4101c7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x40fd88_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x410182\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x41018b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x4101c7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x40fd88_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x410182\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x410297\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x40fd88_9;\n                }\n                // 0x4102a5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x40f8ce;\n            }\n        } else {\n            goto lab_0x40f8bf;\n        }\n    }\n  lab_0x40f9b1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x40f9b6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x40f9be\n    *a2 = v245;\n    int64_t v246; // 0x40f5c0\n    int64_t v247; // 0x40f5c0\n    int64_t dest_mem; // 0x40f5c0\n    int64_t v248; // 0x40f5c0\n    int64_t v249; // 0x4102b3\n    if (v246 > v245) {\n        // 0x40f9ca\n        goto lab_0x40f638;\n    } else {\n        if (v246 < 0) {\n            // 0x4102b3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40ff60_5;\n        }\n        int64_t v250 = 2 * v246; // 0x40f9e6\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x4102b3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40ff60_5;\n        }\n        int64_t v251 = *v5; // 0x40f9f7\n        int64_t size2 = 176 * v246; // 0x40fa09\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x40fb59\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x4100bc\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x40ff89\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x40ff67\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x40ff79_3;\n            }\n            goto lab_0x40fb74;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x40fa1b\n            if (mem4 == NULL) {\n                // 0x4102b3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40ff60_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x40fa1b\n            int64_t v254 = *v5; // 0x40fa3d\n            int64_t v255 = *a2; // 0x40fa41\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x40fb74;\n            } else {\n                goto lab_0x40fa4f;\n            }\n        }\n    }\n  lab_0x40fd02:\n    // 0x40fd02\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x40fd17\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x40f959;\n  lab_0x40fd3d:;\n    uint32_t v335 = (int32_t)v153; // 0x40fd45\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40fd4b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40fd53\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x40fd61\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40fd6e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40f959;\n  lab_0x40fcb0:;\n    uint32_t v336 = (int32_t)v153; // 0x40fcb8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x40fcbe\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40fcc6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x40fcd4\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40fce1\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40f959;\n  lab_0x40f959:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x40f5c0\n    int64_t v260; // 0x40f5c0\n    int64_t * v261; // 0x40f6bf\n    if (v259 == -1) {\n        // 0x40fe64\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x40fd88_9;\n        }\n        // 0x40fe7c\n        v260 = v148;\n    } else {\n        // 0x40f963\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x40f968\n    int64_t v264 = v258; // 0x40f96f\n    int64_t v265 = v162; // 0x40f96f\n    int64_t v266 = v263; // 0x40f96f\n    int64_t v267; // 0x40f5c0\n    int64_t v268; // 0x40f5c0\n    int64_t v269; // 0x40f5c0\n    int64_t v270; // 0x40f5c0\n    int64_t v271; // 0x40f5c0\n    if (v142 > v262) {\n        goto lab_0x40f975;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x40fdd8\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x40fde2\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x40ff60_5;\n        }\n        int64_t size3 = 32 * v273; // 0x40fe01\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x40fe14\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x40fef9\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x40ff79_3;\n            }\n            goto lab_0x40ff16;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x40fe21\n            if (mem6 == NULL) {\n                // 0x4102b3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40ff60_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x40fe21\n            int64_t v276 = v274 & 0xffffffff; // 0x40fe26\n            int64_t v277 = *v6; // 0x40fe51\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x40ff16;\n            } else {\n                goto lab_0x40fe5b;\n            }\n        }\n    }\n  lab_0x40f975:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40f98b\n        int64_t v282 = v279; // 0x40f5c0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x40f980\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x40f980\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x40f999\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x40f9a5\n    int32_t v286 = *v285; // 0x40f9a5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x40fdca\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x40fd88_9;\n        }\n    } else {\n        // 0x40f9af\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x40f9b1;\n  lab_0x410079:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x410079\n    int64_t * v290; // 0x40f5c0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40fb4d;\n  lab_0x40fb4d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x40f82c;\n  lab_0x40f8bf:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x40f8bf\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x41013a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x40fd88_9;\n        }\n        // 0x410152\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x40f8ce;\n  lab_0x40f8ce:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x40f8ce\n    int64_t v300 = v296; // 0x40f8d5\n    int64_t v301 = v191; // 0x40f8d5\n    int64_t v302 = v299; // 0x40f8d5\n    int64_t v303; // 0x40f5c0\n    int64_t v304; // 0x40f5c0\n    int64_t v305; // 0x40f5c0\n    int64_t v306; // 0x40ffb2\n    if (v191 > v295) {\n        goto lab_0x40f8de;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x40ffa8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x40ff60_5;\n        }\n        int64_t size4 = 32 * v306; // 0x40ffcd\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x4101fe\n            if (mem7 == NULL) {\n                goto lab_0x40ff79_3;\n            }\n            // 0x410220\n            v304 = (int64_t)mem7;\n            goto lab_0x41022b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x40ffee\n            int64_t v308 = *v6; // 0x40fff3\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x40ff60_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x40ffee\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x41022b;\n            } else {\n                goto lab_0x41002c;\n            }\n        }\n    }\n  lab_0x40fb74:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x40f5c0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x40fa4f;\n  lab_0x40fa4f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x40f638;\n  lab_0x40ff16:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x40ff2c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x40fe5b;\n  lab_0x40fe5b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x40f975;\n  lab_0x40f8de:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x40f8f3\n        int64_t v324 = v322; // 0x40f5c0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x40f8e8\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x40f8e8\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x40f901\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x40f90e\n    int32_t v328 = *v327; // 0x40f90e\n    if (v328 != 0) {\n        // 0x410035\n        if (v328 != 5) {\n            goto lab_0x40fd88_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x41003e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x40f918\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x40f921\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x40f781;\n  lab_0x41022b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x41022b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x41002c;\n  lab_0x41002c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x40f8de;\n}\n"
        },
        {
            "funcName": "function_4102d0",
            "funcStartAddr": "4102d0",
            "funcEndAddr": "41032d",
            "decompiledFuncCode": "int64_t function_4102d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4102d0\n    return function_401d70();\n}\n"
        },
        {
            "funcName": "function_410330",
            "funcStartAddr": "410330",
            "funcEndAddr": "410331",
            "decompiledFuncCode": "int64_t function_410330(void) {\n    // 0x410330\n    int64_t result; // 0x410330\n    return result;\n}\n"
        },
        {
            "funcName": "function_410340",
            "funcStartAddr": "410340",
            "funcEndAddr": "410358",
            "decompiledFuncCode": "int64_t function_410340(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x410340\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g22);\n}\n"
        },
        {
            "funcName": "function_410358",
            "funcStartAddr": "410358",
            "funcEndAddr": "410378",
            "decompiledFuncCode": "int64_t function_410358(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g18; // 0x410362\n    while (*(int64_t *)v1 != -1) {\n        // 0x410363\n        v1 -= 8;\n    }\n    // 0x410374\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stat.elf"
}