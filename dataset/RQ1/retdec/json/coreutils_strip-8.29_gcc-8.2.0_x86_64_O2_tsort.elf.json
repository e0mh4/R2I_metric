{
    "funcInfo": [
        {
            "funcName": "function_401700",
            "funcStartAddr": "401700",
            "funcEndAddr": "401705",
            "decompiledFuncCode": "int64_t function_401700(void) {\n    // 0x401700\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401705",
            "funcStartAddr": "401705",
            "funcEndAddr": "40170a",
            "decompiledFuncCode": "int64_t function_401705(void) {\n    // 0x401705\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40170a",
            "funcStartAddr": "40170a",
            "funcEndAddr": "40170f",
            "decompiledFuncCode": "int64_t function_40170a(void) {\n    // 0x40170a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40170f",
            "funcStartAddr": "40170f",
            "funcEndAddr": "401714",
            "decompiledFuncCode": "int64_t function_40170f(void) {\n    // 0x40170f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401714",
            "funcStartAddr": "401714",
            "funcEndAddr": "401719",
            "decompiledFuncCode": "int64_t function_401714(void) {\n    // 0x401714\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401719",
            "funcStartAddr": "401719",
            "funcEndAddr": "40171e",
            "decompiledFuncCode": "int64_t function_401719(void) {\n    // 0x401719\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401720",
            "funcStartAddr": "401720",
            "funcEndAddr": "401e17",
            "decompiledFuncCode": "int64_t function_401720(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x40172d\n    function_402870(a2);\n    setlocale(LC_ALL, (char *)&g2);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401720\n    function_406700(0x402480, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    function_402760(v1, a2, \"tsort\", \"coreutils\", (int64_t)g18, 0x402150);\n    int64_t v3 = function_405f60(v1, a2, (int64_t *)&g2, &g3, 0, 0x402150); // 0x4017a9\n    if ((int32_t)v3 != -1) {\n        // 0x401d88\n        function_402150(1);\n        // UNREACHABLE\n    }\n    int32_t v4 = *(int32_t *)0x60a25c; // 0x4017bd\n    int64_t v5 = v4; // 0x4017bd\n    int32_t v6 = a1; // 0x4017c4\n    int32_t v7 = v6 - v4; // 0x4017c6\n    int64_t v8 = v5; // 0x4017cb\n    int64_t v9 = a2; // 0x4017cb\n    int64_t v10; // 0x401720\n    int64_t v11; // 0x401720\n    char * v12; // 0x401720\n    char * str; // 0x4017e6\n    if (v7 > 1) {\n        goto lab_0x401d59;\n    } else {\n        int64_t v13 = v7; // 0x4017c6\n        if (v4 == v6) {\n            // 0x401ca6\n            v12 = \"-\";\n            v11 = v13;\n            v10 = function_401f80(0);\n            goto lab_0x401823;\n        } else {\n            int64_t v14 = *(int64_t *)(8 * v5 + a2); // 0x4017d9\n            str = (char *)v14;\n            int32_t strcmp_rc = strcmp(str, \"-\"); // 0x4017eb\n            int64_t v15 = function_401f80(0); // 0x4017f9\n            v12 = str;\n            v11 = v13;\n            v10 = v15;\n            if (strcmp_rc == 0) {\n                goto lab_0x401823;\n            } else {\n                int64_t v16 = g30; // 0x401806\n                int64_t v17 = function_4025b0(v14, (int64_t *)\"r\", v16); // 0x401815\n                v12 = str;\n                v11 = v16;\n                v10 = v15;\n                if (v17 == 0) {\n                    goto lab_0x401cdf;\n                } else {\n                    goto lab_0x401823;\n                }\n            }\n        }\n    }\n  lab_0x4018d8:;\n    // 0x4018d8\n    int64_t v18; // 0x401720\n    int64_t v19 = v18; // 0x4018db\n    int64_t v20; // 0x401720\n    int64_t v21 = v20; // 0x4018db\n    int64_t v22 = v18; // 0x4018db\n    int64_t v23 = v20; // 0x4018db\n    int64_t v24; // 0x401720\n    if (v24 != 0) {\n        // break -> 0x401900\n        goto lab_0x401900;\n    }\n    goto lab_0x4018dd;\n  lab_0x401cc6_2:\n    // 0x401cc6\n    __assert_fail(\"!STREQ (str, p->str)\", \"src/tsort.c\", 188, \"search_item\");\n    goto lab_0x401cdf;\n  lab_0x401b60:;\n    // 0x401b60\n    int64_t str10; // 0x401720\n    int64_t v98 = *(int64_t *)(str10 + 48); // 0x401b63\n    puts((char *)*(int64_t *)str10);\n    int64_t v99 = g37; // 0x401b7d\n    int64_t v100 = g35 - 1; // 0x401b84\n    *(int64_t *)g38 = 0;\n    g35 = v100;\n    int64_t v101 = v99; // 0x401b99\n    int64_t v102 = v98; // 0x401b99\n    int64_t v103 = v99; // 0x401b99\n    int64_t v104; // 0x401720\n    int64_t v105; // 0x401720\n    int64_t v106; // 0x401720\n    int64_t v107; // 0x401720\n    int64_t v108; // 0x401720\n    int64_t v109; // 0x401bb8\n    int64_t v110; // 0x401ba0\n    int64_t * v111; // 0x401ba4\n    int64_t v112; // 0x401ba4\n    if (v98 != 0) {\n        v106 = v101;\n        v110 = *(int64_t *)v102;\n        v111 = (int64_t *)(v110 + 32);\n        v112 = *v111 - 1;\n        *v111 = v112;\n        v107 = v106;\n        v104 = 0;\n        if (v112 == 0) {\n            // 0x401bab\n            *(int64_t *)(v106 + 40) = v110;\n            v107 = v110;\n            v104 = 1;\n        }\n        // 0x401bb8\n        v105 = v104;\n        v108 = v107;\n        v109 = *(int64_t *)(v102 + 8);\n        while (v109 != 0) {\n            // 0x401ba0\n            v106 = v108;\n            v110 = *(int64_t *)v109;\n            v111 = (int64_t *)(v110 + 32);\n            v112 = *v111 - 1;\n            *v111 = v112;\n            v107 = v106;\n            v104 = v105;\n            if (v112 == 0) {\n                // 0x401bab\n                *(int64_t *)(v106 + 40) = v110;\n                v107 = v110;\n                v104 = 1;\n            }\n            // 0x401bb8\n            v105 = v104;\n            v108 = v107;\n            v109 += 8;\n        }\n        // 0x401bc2\n        v103 = v108;\n        if ((char)v105 != 0) {\n            // 0x401bc7\n            g37 = v108;\n            v103 = v108;\n        }\n    }\n    int64_t str11 = *(int64_t *)(g38 + 40); // 0x401bce\n    g38 = str11;\n    int64_t v94 = v100; // 0x401bdc\n    int64_t v95 = v103; // 0x401bdc\n    while (str11 != 0) {\n        // 0x401b60\n        v98 = *(int64_t *)(str11 + 48);\n        puts((char *)*(int64_t *)str11);\n        v99 = g37;\n        v100 = g35 - 1;\n        *(int64_t *)g38 = 0;\n        g35 = v100;\n        v101 = v99;\n        v102 = v98;\n        v103 = v99;\n        if (v98 != 0) {\n            v106 = v101;\n            v110 = *(int64_t *)v102;\n            v111 = (int64_t *)(v110 + 32);\n            v112 = *v111 - 1;\n            *v111 = v112;\n            v107 = v106;\n            v104 = 0;\n            if (v112 == 0) {\n                // 0x401bab\n                *(int64_t *)(v106 + 40) = v110;\n                v107 = v110;\n                v104 = 1;\n            }\n            // 0x401bb8\n            v105 = v104;\n            v108 = v107;\n            v109 = *(int64_t *)(v102 + 8);\n            while (v109 != 0) {\n                // 0x401ba0\n                v106 = v108;\n                v110 = *(int64_t *)v109;\n                v111 = (int64_t *)(v110 + 32);\n                v112 = *v111 - 1;\n                *v111 = v112;\n                v107 = v106;\n                v104 = v105;\n                if (v112 == 0) {\n                    // 0x401bab\n                    *(int64_t *)(v106 + 40) = v110;\n                    v107 = v110;\n                    v104 = 1;\n                }\n                // 0x401bb8\n                v105 = v104;\n                v108 = v107;\n                v109 += 8;\n            }\n            // 0x401bc2\n            v103 = v108;\n            if ((char)v105 != 0) {\n                // 0x401bc7\n                g37 = v108;\n                v103 = v108;\n            }\n        }\n        // 0x401bce\n        str11 = *(int64_t *)(g38 + 40);\n        g38 = str11;\n        v94 = v100;\n        v95 = v103;\n    }\n    goto lab_0x401bde;\n  lab_0x401c20:;\n    // 0x401c20\n    int64_t v90; // 0x401720\n    function_404310(0, 3, v90);\n    error(0, (int32_t)\"%s: input contains a loop:\" ^ (int32_t)\"%s: input contains a loop:\", dcgettext(NULL, \"%s: input contains a loop:\", 5));\n    int64_t v113 = (int32_t)\"%s: input contains a loop:\" ^ (int32_t)\"%s: input contains a loop:\"; // 0x401c58\n    int64_t * v30; // 0x401720\n    int64_t v114 = *v30; // 0x401c60\n    int64_t v115 = v113; // 0x401c67\n    if (v114 != 0) {\n        // 0x401c69\n        function_401f10(v114, 0x402030);\n        v115 = 0x402030;\n    }\n    int64_t v116 = v115;\n    while (g36 != 0) {\n        // 0x401c60\n        v114 = *v30;\n        v115 = v116;\n        if (v114 != 0) {\n            // 0x401c69\n            function_401f10(v114, 0x402030);\n            v115 = 0x402030;\n        }\n        // 0x401c73\n        v116 = v115;\n    }\n    int64_t result = 1; // 0x401b29\n    int64_t v89 = v116; // 0x401b29\n    if (g35 == 0) {\n        // break -> 0x401be3\n        goto lab_0x401be3_2;\n    }\n    goto lab_0x401b2f;\n  lab_0x401bde:;\n    // 0x401bde\n    int64_t v92; // 0x401720\n    result = v92;\n    v89 = v95;\n    if (v94 == 0) {\n        // break -> 0x401be3\n        goto lab_0x401be3_2;\n    }\n    goto lab_0x401c20;\n  lab_0x4018dd:;\n    int64_t v25 = v19; // 0x4018e0\n    int64_t v26 = v21; // 0x4018e0\n    goto lab_0x401848;\n  lab_0x401ae0:;\n    // 0x401ae0\n    int32_t v57; // 0x401720\n    int32_t * v55; // 0x4019ed\n    int32_t v56; // 0x4019ed\n    *v55 = v56 + v57;\n    int64_t v76; // 0x401720\n    v18 = v76;\n    int64_t v39; // 0x401949\n    v20 = v39;\n    goto lab_0x4018d8;\n  lab_0x401d59:\n    // 0x401d59\n    function_404490(*(int64_t *)(v9 + 8 + 8 * v8));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    // 0x401d88\n    function_402150(1);\n    // UNREACHABLE\n  lab_0x401823:;\n    char * v78 = v12;\n    function_402530((int64_t)g30, 2, v11);\n    int64_t v28; // bp-72, 0x401720\n    function_4044b0(&v28);\n    char * str2 = (char *)v2;\n    v30 = (int64_t *)(v10 + 16);\n    int64_t v79 = a2; // 0x401839\n    int64_t v29; // 0x401720\n    while (true) {\n        // 0x40183e\n        v25 = v79;\n        v26 = 0;\n        while (true) {\n          lab_0x401848:\n            // 0x401848\n            v24 = v26;\n            int64_t v27 = function_4044c0((int64_t)g30, \" \\t\\n\", 3, &v28); // 0x40185e\n            v29 = v25;\n            switch (v27) {\n                case -1: {\n                    goto lab_0x401b00;\n                }\n                case 0: {\n                    goto lab_0x401d0e;\n                }\n                default: {\n                    // 0x401876\n                    v9 = v25;\n                    if (v10 == 0) {\n                        goto lab_0x401d27;\n                    }\n                    int64_t str3 = *v30; // 0x401889\n                    if (str3 != 0) {\n                        int32_t strcmp_rc2 = strcmp(str2, (char *)*(int64_t *)str3); // 0x4018ca\n                        int32_t v31 = strcmp_rc2; // 0x4018d3\n                        int64_t v32 = str3; // 0x4018d3\n                        int64_t v33 = str3; // 0x4018d3\n                        int64_t v34 = v10; // 0x4018d3\n                        v18 = v10;\n                        v20 = str3;\n                        if (strcmp_rc2 != 0) {\n                            int64_t v35 = *(int64_t *)(v32 + 8); // 0x4018a4\n                            int64_t str4 = v31 < 0 ? v35 : *(int64_t *)(v32 + 16); // 0x4018a4\n                            while (str4 != 0) {\n                                int32_t v36 = *(int32_t *)(str4 + 24); // 0x4018b2\n                                int64_t v37 = v36 != 0 ? v32 : v34; // 0x4018bb\n                                int32_t strcmp_rc3 = strcmp(str2, (char *)*(int64_t *)str4); // 0x4018ca\n                                v32 = str4;\n                                v33 = v36 != 0 ? str4 : v33;\n                                v34 = v37;\n                                if (strcmp_rc3 == 0) {\n                                    goto lab_0x4018d8;\n                                }\n                                v35 = *(int64_t *)(v32 + 8);\n                                str4 = strcmp_rc3 < 0 ? v35 : *(int64_t *)(v32 + 16);\n                            }\n                            // 0x401940\n                            int32_t v38; // 0x401720\n                            v39 = function_401f80(v38);\n                            int32_t v40; // 0x401720\n                            if (v40 < 0) {\n                                // 0x401af0\n                                int64_t * v41; // 0x401720\n                                *v41 = v39;\n                            } else {\n                                // 0x40195d\n                                int64_t * v42; // 0x401720\n                                *v42 = v39;\n                            }\n                            // 0x401961\n                            int64_t str5; // 0x401720\n                            int32_t strcmp_rc4 = strcmp(str2, (char *)*(int64_t *)str5); // 0x40196a\n                            if (strcmp_rc4 == 0) {\n                                goto lab_0x401d40;\n                            }\n                            int64_t * v43 = (int64_t *)(str5 + 16); // 0x401977\n                            int64_t * v44 = (int64_t *)(str5 + 8); // 0x40197c\n                            int64_t str6 = strcmp_rc4 < 0 ? *v44 : *v43; // 0x40197c\n                            int64_t v45; // 0x401720\n                            int64_t v46 = strcmp_rc4 < 0 ? v45 : 1; // 0x401988\n                            int64_t v47 = v46; // 0x401997\n                            if (v39 != str6) {\n                                int32_t strcmp_rc5 = strcmp(str2, (char *)*(int64_t *)str6); // 0x4019c3\n                                int64_t v48 = v46; // 0x4019d4\n                                int64_t str7 = str6; // 0x4019d4\n                                int32_t strcmp_rc6 = strcmp_rc5; // 0x4019d4\n                                if (strcmp_rc5 == 0) {\n                                    goto lab_0x401cc6_2;\n                                }\n                                while (true) {\n                                    int64_t v49 = v48;\n                                    int64_t v50 = 0x100000000 * str7 >> 32;\n                                    int64_t v51; // 0x401720\n                                    if (strcmp_rc6 >= 0) {\n                                        // 0x4019a0\n                                        int32_t * v52; // 0x401720\n                                        *v52 = 1;\n                                        int64_t v53 = *(int64_t *)(v50 + 16); // 0x4019a8\n                                        v51 = v53;\n                                        v47 = v49;\n                                        if (v39 == v53) {\n                                            // break -> 0x4019ed\n                                            break;\n                                        }\n                                    } else {\n                                        // 0x4019dc\n                                        *(int32_t *)(v50 + 24) = -1;\n                                        int64_t v54 = *(int64_t *)(v50 + 8); // 0x4019e4\n                                        v51 = v54;\n                                        v47 = v49;\n                                        if (v39 == v54) {\n                                            // break -> 0x4019ed\n                                            break;\n                                        }\n                                    }\n                                    // 0x4019b1\n                                    str7 = v51;\n                                    strcmp_rc6 = strcmp(str2, (char *)*(int64_t *)str7);\n                                    v48 = v49 & 0xffffffff;\n                                    if (strcmp_rc6 == 0) {\n                                        goto lab_0x401cc6_2;\n                                    }\n                                }\n                            }\n                            // 0x4019ed\n                            v55 = (int32_t *)(str5 + 24);\n                            v56 = *v55;\n                            v57 = v47;\n                            if (v56 == 0) {\n                                goto lab_0x401ae0;\n                            } else {\n                                int32_t v58 = -v57; // 0x4019ff\n                                if (v56 == v58) {\n                                    goto lab_0x401ae0;\n                                } else {\n                                    int32_t * v59 = (int32_t *)(str6 + 24); // 0x401a07\n                                    int64_t v60; // 0x401720\n                                    if (*v59 == v57) {\n                                        if (v57 < 0) {\n                                            int64_t * v61 = (int64_t *)(str6 + 16); // 0x401c94\n                                            *v44 = *v61;\n                                            *v61 = str5;\n                                        } else {\n                                            int64_t * v62 = (int64_t *)(str6 + 8); // 0x401ab9\n                                            *v43 = *v62;\n                                            *v62 = str5;\n                                        }\n                                        // 0x401ac6\n                                        *v59 = 0;\n                                        *v55 = 0;\n                                        v60 = str6;\n                                    } else {\n                                        int64_t v63; // 0x401720\n                                        if (v57 < 0) {\n                                            int64_t * v64 = (int64_t *)(str6 + 16); // 0x401a15\n                                            int64_t v65 = *v64; // 0x401a15\n                                            int64_t * v66 = (int64_t *)(v65 + 8); // 0x401a90\n                                            *v64 = *v66;\n                                            int64_t * v67 = (int64_t *)(v65 + 16); // 0x401a98\n                                            *v66 = str6;\n                                            *v44 = *v67;\n                                            *v67 = str5;\n                                            v63 = v65;\n                                        } else {\n                                            int64_t * v68 = (int64_t *)(str6 + 8); // 0x401a11\n                                            int64_t v69 = *v68; // 0x401a11\n                                            int64_t * v70 = (int64_t *)(v69 + 16); // 0x401a1e\n                                            *v68 = *v70;\n                                            int64_t * v71 = (int64_t *)(v69 + 8); // 0x401a26\n                                            *v70 = str6;\n                                            *v43 = *v71;\n                                            *v71 = str5;\n                                            v63 = v69;\n                                        }\n                                        // 0x401a3a\n                                        *v55 = 0;\n                                        *v59 = 0;\n                                        int32_t * v72 = (int32_t *)(v63 + 24); // 0x401a4b\n                                        int32_t v73 = *v72; // 0x401a4b\n                                        if (v73 == v57) {\n                                            // 0x401a78\n                                            *v55 = v58;\n                                        } else {\n                                            if (v73 == v58) {\n                                                // 0x401a57\n                                                *v59 = v57;\n                                            }\n                                        }\n                                        // 0x401a5b\n                                        *v72 = 0;\n                                        v60 = v63;\n                                    }\n                                    int64_t v74 = v60;\n                                    int64_t * v75 = (int64_t *)(v76 + 16); // 0x401a62\n                                    if (*v75 == str5) {\n                                        // 0x401a80\n                                        *v75 = v74;\n                                        v18 = v76;\n                                        v20 = v39;\n                                    } else {\n                                        // 0x401a68\n                                        *(int64_t *)(v76 + 8) = v74;\n                                        v18 = v76;\n                                        v20 = v39;\n                                    }\n                                    goto lab_0x4018d8;\n                                }\n                            }\n                        } else {\n                            goto lab_0x4018d8;\n                        }\n                    } else {\n                        int64_t v77 = function_401f80((int32_t)v2); // 0x4018ed\n                        *v30 = v77;\n                        v19 = v10;\n                        v21 = v77;\n                        if (v24 != 0) {\n                            // break -> 0x401900\n                            break;\n                        }\n                        goto lab_0x4018dd;\n                    }\n                }\n            }\n        }\n      lab_0x401900:;\n        int64_t str9 = v23;\n        int64_t str8 = *(int64_t *)v24; // 0x401903\n        if (strcmp((char *)str8, (char *)*(int64_t *)str9) != 0) {\n            int64_t * v80 = (int64_t *)(str9 + 32); // 0x401914\n            *v80 = *v80 + 1;\n            int64_t v81 = function_404dc0(16); // 0x40191e\n            int64_t * v82 = (int64_t *)(v24 + 48); // 0x401923\n            *(int64_t *)v81 = str9;\n            *(int64_t *)(v81 + 8) = *v82;\n            *v82 = v81;\n        }\n        // 0x40183e\n        v79 = v22;\n    }\n  lab_0x401b00:;\n    int64_t v83; // 0x401720\n    int64_t v84; // 0x401720\n    if (v24 != 0) {\n        goto lab_0x401dc8;\n    } else {\n        int64_t v85 = *v30; // 0x401b09\n        int64_t v86 = (int64_t)\" \\t\\n\"; // 0x401b10\n        if (v85 != 0) {\n            // 0x401b12\n            function_401f10(v85, 0x401f00);\n            v86 = 0x401f00;\n        }\n        int64_t v87 = v86;\n        int64_t v88 = g35; // 0x401b21\n        result = 0;\n        v89 = v87;\n        if (v88 != 0) {\n            // 0x401b2f\n            v90 = (int64_t)v78;\n            int64_t v91 = 0; // 0x401720\n            while (true) {\n              lab_0x401b2f:\n                // 0x401b2f\n                v92 = 1;\n                int64_t v93 = *v30; // 0x401b2f\n                if (v93 == 0) {\n                    // 0x401c10\n                    str10 = g38;\n                    if (g38 != 0) {\n                        goto lab_0x401b60;\n                    } else {\n                        goto lab_0x401c20;\n                    }\n                } else {\n                    // 0x401b3c\n                    function_401f10(v93, 0x401ff0);\n                    str10 = g38;\n                    if (g38 == 0) {\n                        // 0x401c88\n                        v94 = g35;\n                        v95 = 0x401ff0;\n                        goto lab_0x401bde;\n                    } else {\n                        goto lab_0x401b60;\n                    }\n                }\n            }\n        }\n      lab_0x401be3_2:\n        // 0x401be3\n        if ((int32_t)function_405050((int64_t)g30, v89) == 0) {\n            // 0x401bf7\n            return result;\n        }\n        int32_t v96; // 0x401720\n        if (v96 != 0) {\n            // 0x401d92\n            v83 = (int64_t)v78;\n            goto lab_0x401e01;\n        } else {\n            // 0x401d99\n            v84 = (int64_t)dcgettext(NULL, \"standard input\", 5);\n            goto lab_0x401dad;\n        }\n    }\n  lab_0x401dc8:;\n    int64_t v97 = (int64_t)v78;\n    function_404310(0, 3, v97);\n    error(1, (int32_t)\"%s: input contains an odd number of tokens\" ^ (int32_t)\"%s: input contains an odd number of tokens\", dcgettext(NULL, \"%s: input contains an odd number of tokens\", 5));\n    v83 = v97;\n    goto lab_0x401e01;\n  lab_0x401cdf:\n    // 0x401cdf\n    error(1, *__errno_location(), \"%s\", (char *)function_404310(0, 3, (int64_t)str));\n    v29 = a2;\n  lab_0x401d0e:\n    // 0x401d0e\n    __assert_fail(\"len != 0\", \"src/tsort.c\", 467, \"tsort\");\n    v9 = v29;\n  lab_0x401d27:\n    // 0x401d27\n    __assert_fail(\"root\", \"src/tsort.c\", 138, \"search_item\");\n  lab_0x401d40:\n    // 0x401d40\n    __assert_fail(\"!STREQ (str, s->str)\", \"src/tsort.c\", 174, \"search_item\");\n    v8 = &g53;\n    goto lab_0x401d59;\n  lab_0x401e01:\n    // 0x401e01\n    v84 = function_404310(0, 3, v83);\n    goto lab_0x401dad;\n  lab_0x401dad:\n    // 0x401dad\n    error(1, *__errno_location(), \"%s\", (char *)v84);\n    goto lab_0x401dc8;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401e20",
            "funcEndAddr": "401e4b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401e20\n    int64_t v1; // 0x401e20\n    __libc_start_main(0x401720, (int32_t)a4, (char **)&v1, (void (*)())0x406690, (void (*)())0x4066f0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e4b",
            "funcStartAddr": "401e4b",
            "funcEndAddr": "401e6a",
            "decompiledFuncCode": "int64_t function_401e4b(void) {\n    // 0x401e4b\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_401e6a",
            "funcStartAddr": "401e6a",
            "funcEndAddr": "401ea1",
            "decompiledFuncCode": "int64_t function_401e6a(void) {\n    // 0x401e6a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401ea1",
            "funcStartAddr": "401ea1",
            "funcEndAddr": "401ef8",
            "decompiledFuncCode": "int64_t function_401ea1(void) {\n    // 0x401ea1\n    if (g33 != 0) {\n        // 0x401ef7\n        int64_t result; // 0x401ea1\n        return result;\n    }\n    int64_t v1 = g34; // 0x401ed4\n    int64_t result2; // 0x401ee6\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401ee6\n        result2 = function_401e4b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401ed6\n        v1++;\n    }\n    // 0x401eca\n    g34 = v1;\n    // 0x401ee6\n    result2 = function_401e4b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401ef8",
            "funcStartAddr": "401ef8",
            "funcEndAddr": "401efd",
            "decompiledFuncCode": "int64_t function_401ef8(void) {\n    // 0x401ef8\n    return function_401e6a();\n}\n"
        },
        {
            "funcName": "function_401f00",
            "funcStartAddr": "401f00",
            "funcEndAddr": "401f0b",
            "decompiledFuncCode": "int64_t function_401f00(void) {\n    // 0x401f00\n    g35++;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401f10",
            "funcStartAddr": "401f10",
            "funcEndAddr": "401f75",
            "decompiledFuncCode": "int64_t function_401f10(int64_t a1, int64_t a2) {\n    int64_t v1 = a1;\n    int64_t v2 = *(int64_t *)(v1 + 8); // 0x401f1c\n    char v3; // 0x401f10\n    int64_t v4; // 0x401f10\n    int64_t v5; // 0x401f10\n    int64_t v6; // 0x401f28\n    char v7; // 0x401f10\n    if (v2 == 0) {\n        // 0x401f60\n        if (*(int64_t *)(v1 + 16) == 0) {\n            // break -> 0x401f43\n            break;\n        }\n        // 0x401f60\n        v3 = v4;\n        v5 = v4;\n    } else {\n        // 0x401f25\n        v6 = function_401f10(v2, a2);\n        v7 = v6;\n        v3 = v7;\n        v5 = v6;\n        if (v7 != 0) {\n            // break -> 0x401f43\n            break;\n        }\n    }\n    int64_t result = 1; // 0x401f38\n    while (v3 == 0) {\n        int64_t v8 = *(int64_t *)(v1 + 16); // 0x401f3a\n        v4 = v5;\n        result = v5;\n        if (v8 == 0) {\n            // break -> 0x401f43\n            break;\n        }\n        v1 = v8;\n        v2 = *(int64_t *)(v1 + 8);\n        if (v2 == 0) {\n            // 0x401f60\n            result = a2;\n            if (*(int64_t *)(v1 + 16) == 0) {\n                // break -> 0x401f43\n                break;\n            }\n            // 0x401f60\n            v3 = v4;\n            v5 = v4;\n        } else {\n            // 0x401f25\n            v6 = function_401f10(v2, a2);\n            v7 = v6;\n            v3 = v7;\n            v5 = v6;\n            result = 1;\n            if (v7 != 0) {\n                // break -> 0x401f43\n                break;\n            }\n        }\n        // 0x401f31\n        result = 1;\n    }\n    // 0x401f43\n    return result;\n}\n"
        },
        {
            "funcName": "function_401f80",
            "funcStartAddr": "401f80",
            "funcEndAddr": "401fe2",
            "decompiledFuncCode": "int64_t function_401f80(int32_t a1) {\n    int64_t result = function_404dc0(56); // 0x401f8e\n    int64_t v1 = 0; // 0x401f99\n    if (a1 != 0) {\n        // 0x401f9b\n        v1 = function_404ff0((int64_t)a1);\n    }\n    // 0x401fa6\n    *(int64_t *)result = v1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    *(int32_t *)(result + 24) = 0;\n    *(int64_t *)(result + 32) = 0;\n    *(int64_t *)(result + 40) = 0;\n    *(int64_t *)(result + 48) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ff0",
            "funcStartAddr": "401ff0",
            "funcEndAddr": "402029",
            "decompiledFuncCode": "int64_t function_401ff0(int64_t a1) {\n    // 0x401ff0\n    if (a1 == 0 | *(int64_t *)(a1 + 32) != 0) {\n        // 0x402019\n        return 0;\n    }\n    // 0x401ffd\n    if (g38 == 0) {\n        // 0x402020\n        g38 = a1;\n    } else {\n        // 0x402007\n        *(int64_t *)((int64_t)g37 + 40) = a1;\n    }\n    // 0x402012\n    g37 = a1;\n    // 0x402019\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402030",
            "funcStartAddr": "402030",
            "funcEndAddr": "40214b",
            "decompiledFuncCode": "int64_t function_402030(int64_t a1) {\n    // 0x402030\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x402071\n        return 0;\n    }\n    int64_t v1 = g36; // 0x402039\n    if (v1 == 0) {\n        // 0x402120\n        g36 = a1;\n        return 0;\n    }\n    int64_t v2 = a1 + 48; // 0x402049\n    int64_t v3 = *(int64_t *)v2; // 0x402049\n    if (v3 == 0) {\n        // 0x402071\n        return 0;\n    }\n    int64_t v4 = v2; // 0x402059\n    if (v1 != *(int64_t *)v3) {\n        int64_t v5 = v3 + 8; // 0x402068\n        int64_t result = *(int64_t *)v5; // 0x402068\n        while (result != 0) {\n            // 0x402060\n            v4 = v5;\n            if (v1 == *(int64_t *)result) {\n                goto lab_0x40208c;\n            }\n            v5 = result + 8;\n            result = *(int64_t *)v5;\n        }\n        // 0x402071\n        return result;\n    }\n  lab_0x40208c:;\n    int64_t * v6 = (int64_t *)(a1 + 40); // 0x40208c\n    if (*v6 == 0) {\n        // 0x402130\n        *v6 = v1;\n        g36 = a1;\n        // 0x402071\n        return 0;\n    }\n    int64_t v7 = *(int64_t *)(v1 + 40); // 0x4020ba\n    error(0, 0, \"%s\", (char *)*(int64_t *)v1);\n    int64_t v8 = g36; // 0x4020ce\n    while (v8 != a1) {\n        // 0x4020a0\n        *(int64_t *)(v8 + 40) = 0;\n        g36 = v7;\n        int64_t v9 = v7; // 0x4020b5\n        if (v7 == 0) {\n            // 0x402071\n            return 1;\n        }\n        v7 = *(int64_t *)(v9 + 40);\n        error(0, 0, \"%s\", (char *)*(int64_t *)v9);\n        v8 = g36;\n    }\n    int64_t * v10 = (int64_t *)v4; // 0x4020da\n    int64_t v11 = *v10; // 0x4020da\n    int64_t * v12 = (int64_t *)(*(int64_t *)v11 + 32); // 0x4020e4\n    *v12 = *v12 - 1;\n    *v10 = *(int64_t *)(v11 + 8);\n    int64_t * v13 = (int64_t *)(v8 + 40); // 0x4020f0\n    int64_t v14 = *v13; // 0x4020f0\n    *v13 = 0;\n    while (v14 != 0) {\n        // 0x4020f0\n        v13 = (int64_t *)(v14 + 40);\n        v14 = *v13;\n        *v13 = 0;\n    }\n    // 0x402104\n    g36 = 0;\n    // 0x402071\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402150",
            "funcStartAddr": "402150",
            "funcEndAddr": "40245d",
            "decompiledFuncCode": "int64_t function_402150(int64_t a1) {\n    int32_t status = a1; // 0x402166\n    if (status != 0) {\n        // 0x40216a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40218f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402196\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION] [FILE]\\nWrite totally ordered list consistent with the partial ordering in FILE.\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x402240\n    bool v2; // 0x402150\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4022c0\n    int64_t v6 = *(int64_t *)v5; // 0x4022c4\n    int64_t v7 = 6; // 0x4022ca\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"tsort\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4022d6\n        char v11 = *(char *)v9; // 0x4022d6\n        char v12 = v11; // 0x4022d6\n        bool v13 = false; // 0x4022d6\n        while (v10 == v11) {\n            // 0x4022cc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4022d6\n            int64_t v15 = v8 + v3; // 0x4022d6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4022e2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x4022e2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4023f4;\n        } else {\n            // 0x4023de\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402433\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402344;\n            } else {\n                goto lab_0x4023f4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402344;\n        } else {\n            // 0x40232a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402433\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402344;\n            } else {\n                goto lab_0x402344;\n            }\n        }\n    }\n  lab_0x4023f4:\n    // 0x4023f4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402384\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40218f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402344:\n    // 0x402344\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402384\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40218f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402460",
            "funcStartAddr": "402460",
            "funcEndAddr": "402468",
            "decompiledFuncCode": "int64_t function_402460(int64_t a1) {\n    // 0x402460\n    g40 = a1;\n    int64_t result; // 0x402460\n    return result;\n}\n"
        },
        {
            "funcName": "function_402470",
            "funcStartAddr": "402470",
            "funcEndAddr": "402478",
            "decompiledFuncCode": "int64_t function_402470(int64_t a1) {\n    // 0x402470\n    g39 = a1;\n    int64_t result; // 0x402470\n    return result;\n}\n"
        },
        {
            "funcName": "function_402480",
            "funcStartAddr": "402480",
            "funcEndAddr": "40251e",
            "decompiledFuncCode": "int64_t function_402480(void) {\n    // 0x402480\n    int32_t * err_num; // 0x402496\n    if ((int32_t)function_406060((int64_t)g29) == 0) {\n        goto lab_0x4024ac;\n    } else {\n        // 0x402496\n        err_num = __errno_location();\n        if (g39 == 0) {\n            goto lab_0x4024c3;\n        } else {\n            // 0x4024a7\n            if (*err_num != 32) {\n                goto lab_0x4024c3;\n            } else {\n                goto lab_0x4024ac;\n            }\n        }\n    }\n  lab_0x4024ac:;\n    int64_t result = function_406060((int64_t)g32); // 0x4024b3\n    if ((int32_t)result == 0) {\n        // 0x4024bc\n        return result;\n    }\n    // 0x4024fe\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x4024c3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4024cf\n    if (g40 == 0) {\n        // 0x402509\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4024e3\n        error(0, *err_num, \"%s: %s\", (char *)function_4042e0((int64_t)g40), v1);\n    }\n    // 0x4024fe\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402520",
            "funcStartAddr": "402520",
            "funcEndAddr": "402525",
            "decompiledFuncCode": "int64_t function_402520(void) {\n    // 0x402520\n    int64_t fd; // 0x402520\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402530",
            "funcStartAddr": "402530",
            "funcEndAddr": "402551",
            "decompiledFuncCode": "int64_t function_402530(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402530\n    if (stream == 0) {\n        // 0x402550\n        int64_t result; // 0x402530\n        return result;\n    }\n    // 0x402535\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402560",
            "funcStartAddr": "402560",
            "funcEndAddr": "4025ab",
            "decompiledFuncCode": "int64_t function_402560(int32_t a1, int64_t a2) {\n    int32_t fd = open(\"/dev/null\", O_RDONLY); // 0x402576\n    if (fd == a1) {\n        // 0x402585\n        return 1;\n    }\n    // 0x40257f\n    if (fd < 0) {\n        // 0x402585\n        return 0;\n    }\n    // 0x402590\n    close(fd);\n    *__errno_location() = 9;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4025b0",
            "funcStartAddr": "4025b0",
            "funcEndAddr": "40275f",
            "decompiledFuncCode": "int64_t function_4025b0(int64_t a1, int64_t * a2, int64_t stream) {\n    int32_t v1 = fileno((struct _IO_FILE *)stream); // 0x4025cc\n    int32_t * v2 = __errno_location(); // 0x4025d3\n    int64_t v3 = 0; // 0x4025b0\n    int64_t v4 = 0; // 0x4025b0\n    int64_t v5 = 0; // 0x4025b0\n    int64_t v6 = 0; // 0x4025b0\n    int64_t v7 = 0; // 0x4025b0\n    switch (v1) {\n        case 1: {\n            goto lab_0x402620;\n        }\n        case 2: {\n            goto lab_0x40260a;\n        }\n        case 0: {\n            goto lab_0x40265c;\n        }\n        default: {\n            // 0x4025f5\n            v3 = dup2(2, 2) != 2;\n            goto lab_0x40260a;\n        }\n    }\n  lab_0x402620:;\n    // 0x402620\n    int64_t v8; // 0x4025b0\n    int64_t v9; // 0x4025b0\n    int64_t v10; // 0x4025b0\n    int64_t v11; // 0x4025b0\n    int64_t v12; // 0x4025b0\n    int64_t v13; // 0x4025b0\n    int64_t v14; // 0x402634\n    if (dup2(0, 0) == 0) {\n        // 0x4026a0\n        v10 = 0;\n        v8 = 0;\n        v14 = 0;\n        if (v4 == 0) {\n            goto lab_0x402644;\n        } else {\n            goto lab_0x4026a8;\n        }\n    } else {\n        int64_t v15 = function_402560(0, 0); // 0x40262f\n        v12 = v3;\n        v11 = v4;\n        v9 = 1;\n        v13 = 0;\n        if ((char)v15 == 0) {\n            goto lab_0x40266f;\n        } else {\n            // 0x40263f\n            v14 = v15 & 0xffffffff;\n            v10 = v4;\n            v8 = v14;\n            if (v4 != 0) {\n                goto lab_0x4026a8;\n            } else {\n                goto lab_0x402644;\n            }\n        }\n    }\n  lab_0x40260a:\n    // 0x40260a\n    v4 = dup2(1, 1) != 1;\n    goto lab_0x402620;\n  lab_0x40265c:\n    // 0x40265c\n    v12 = v5;\n    v11 = v6;\n    v9 = v7;\n    v13 = function_405110(a1, (int64_t)a2);\n    goto lab_0x40266f;\n  lab_0x40266f:;\n    int64_t v16 = (int64_t)*v2; // 0x40266f\n    int64_t v17 = v11; // 0x402674\n    int64_t v18 = v13; // 0x402674\n    int64_t v19 = v9; // 0x402674\n    int64_t v20 = v16; // 0x402674\n    int64_t v21 = v11; // 0x402674\n    int64_t v22 = v13; // 0x402674\n    int64_t v23 = v9; // 0x402674\n    int64_t v24 = v16; // 0x402674\n    if ((char)v12 != 0) {\n        goto lab_0x402716;\n    } else {\n        goto lab_0x40267a;\n    }\n  lab_0x402644:\n    // 0x402644\n    v5 = v3;\n    v6 = v10;\n    v7 = v8;\n    if ((char)v3 == 0) {\n        goto lab_0x40265c;\n    } else {\n        int64_t v25 = function_402560(2, 0); // 0x40264d\n        v5 = v25 & 0xffffffff;\n        v6 = v10;\n        v7 = v8;\n        if ((char)v25 == 0) {\n            // 0x402710\n            v21 = v10;\n            v22 = 0;\n            v23 = v8;\n            v24 = (int64_t)*v2;\n            goto lab_0x402716;\n        } else {\n            goto lab_0x40265c;\n        }\n    }\n  lab_0x4026a8:;\n    int64_t v26 = function_402560(1, 0); // 0x4026ad\n    v10 = v26 & 0xffffffff;\n    v8 = v14;\n    int64_t v27; // 0x4025b0\n    int64_t v28; // 0x4025b0\n    int64_t v29; // 0x4025b0\n    if ((char)v26 != 0) {\n        goto lab_0x402644;\n    } else {\n        int64_t v30 = (int64_t)*v2; // 0x4026b8\n        v27 = 0;\n        v28 = v14;\n        v29 = v30;\n        if ((char)v3 != 0) {\n            // 0x402750\n            close(2);\n            v27 = 0;\n            v28 = v14;\n            v29 = v30;\n        }\n        goto lab_0x4026d0;\n    }\n  lab_0x402716:\n    // 0x402716\n    close(2);\n    v17 = v21;\n    v18 = v22;\n    v19 = v23;\n    v20 = v24;\n    goto lab_0x40267a;\n  lab_0x40267a:\n    // 0x40267a\n    v27 = v18;\n    v28 = v19;\n    v29 = v20;\n    int64_t result; // 0x4025b0\n    int64_t v31; // 0x4025b0\n    int64_t v32; // 0x4025b0\n    int64_t v33; // 0x4025b0\n    if ((char)v17 != 0) {\n        goto lab_0x4026d0;\n    } else {\n        // 0x40267f\n        result = v18;\n        v32 = v20;\n        v31 = v18;\n        v33 = v20;\n        if ((char)v19 != 0) {\n            goto lab_0x4026df;\n        } else {\n            goto lab_0x402684;\n        }\n    }\n  lab_0x4026d0:\n    // 0x4026d0\n    close(1);\n    result = v27;\n    v32 = v29;\n    v31 = v27;\n    v33 = v29;\n    if ((char)v28 == 0) {\n        goto lab_0x402684;\n    } else {\n        goto lab_0x4026df;\n    }\n  lab_0x402684:;\n    int64_t result2 = 0; // 0x402687\n    int64_t v34 = v32; // 0x402687\n    if (result != 0) {\n        // 0x402689\n        return result;\n    }\n    goto lab_0x4026eb;\n  lab_0x4026df:\n    // 0x4026df\n    close(0);\n    result2 = v31;\n    v34 = v33;\n    if (v31 != 0) {\n        // 0x402689\n        int64_t v35; // 0x4025b0\n        int64_t result3 = v35;\n        return result3;\n    }\n    goto lab_0x4026eb;\n  lab_0x4026eb:\n    // 0x4026eb\n    *v2 = (int32_t)v34;\n    // 0x402689\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402760",
            "funcStartAddr": "402760",
            "funcEndAddr": "402862",
            "decompiledFuncCode": "int64_t function_402760(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x402760\n    int64_t v1; // 0x402760\n    if ((char)v1 != 0) {\n        // 0x402773\n        int128_t v2; // 0x402760\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g26; // 0x4027aa\n    g26 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x4027bf\n        g26 = v3;\n        g27 = 0;\n        int64_t result; // 0x402760\n        return result;\n    }\n    int64_t result2 = function_405f60(a1, a2, &g4, (int64_t *)&g5, 0, a6); // 0x4027f9\n    int32_t v4 = result2; // 0x4027fe\n    switch (v4) {\n        default: {\n            // 0x402808\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x40282a\n                function_404c20((int64_t)g29, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x4027bf\n            g26 = v3;\n            g27 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_402870",
            "funcStartAddr": "402870",
            "funcEndAddr": "402909",
            "decompiledFuncCode": "int64_t function_402870(int64_t str) {\n    // 0x402870\n    if (str == 0) {\n        // 0x4028e9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40287e\n    int64_t result = (int64_t)found_char_pos; // 0x40287e\n    if (found_char_pos == NULL) {\n        // 0x4028d9\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402888\n    if (v1 - str < 7) {\n        // 0x4028d9\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x402898\n    bool v2; // 0x402870\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402870\n    int64_t v5 = result - 6; // 0x402870\n    int64_t v6 = 7; // 0x4028a6\n    unsigned char v7 = *(char *)v5; // 0x4028a6\n    char v8 = *(char *)v4; // 0x4028a6\n    char v9 = v8; // 0x4028a6\n    bool v10 = false; // 0x4028a6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4028b0\n    int64_t v13 = v1; // 0x4028b0\n    int64_t v14 = 3; // 0x4028b0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4028d9\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4028c2\n    char v16 = *(char *)v12; // 0x4028c2\n    char v17 = v16; // 0x4028c2\n    bool v18 = false; // 0x4028c2\n    while (v15 == v16) {\n        // 0x4028b2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4028cc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4028ce\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x4028d9\n    g41 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402910",
            "funcStartAddr": "402910",
            "funcEndAddr": "402a02",
            "decompiledFuncCode": "int64_t function_402910(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402924\n    int64_t result = (int64_t)v1; // 0x402924\n    if (result != a1) {\n        // 0x402931\n        return result;\n    }\n    int64_t v2 = function_406120(); // 0x402940\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4029f6\n    if (v3 == 85) {\n        // 0x402950\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4029e8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n            return result2;\n        }\n        char v4 = *v1; // 0x40297e\n        int64_t result3 = v4 != 96 ? (int64_t)&g7 : (int64_t)&g10; // 0x40298b\n        // 0x402931\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4029e8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n        return result2;\n    }\n    char v5 = *v1; // 0x4029cd\n    int64_t result4 = v5 != 96 ? (int64_t)&g8 : (int64_t)&g9; // 0x4029da\n    // 0x402931\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402a10",
            "funcStartAddr": "402a10",
            "funcEndAddr": "402a67",
            "decompiledFuncCode": "int64_t function_402a10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402a10\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402a58\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a67",
            "funcStartAddr": "402a67",
            "funcEndAddr": "403c31",
            "decompiledFuncCode": "int64_t function_402a67(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402ab1\n    int64_t v3 = 0; // 0x402ab1\n    int64_t v4; // 0x402a67\n    int64_t v5; // 0x402a67\n    int64_t v6; // 0x402a67\n    int64_t v7; // 0x402a67\n    int64_t v8; // 0x402a67\n    int64_t v9; // 0x402a67\n    int64_t v10; // 0x402a67\n    int64_t v11; // 0x402a67\n    int64_t v12; // 0x402a67\n    int64_t v13; // 0x402a67\n    int64_t v14; // 0x402a67\n    int64_t v15; // 0x402a67\n    int64_t v16; // 0x402a67\n    int64_t v17; // 0x402a67\n    int64_t v18; // 0x402a67\n    int64_t result; // 0x402a67\n    int64_t v19; // 0x402a67\n    int32_t wc; // bp+132, 0x402a67\n    int64_t ps; // bp+136, 0x402a67\n    char v20; // 0x403020\n    int64_t v21; // 0x403020\n    int64_t v22; // 0x4033c8\n    int64_t v23; // 0x402a67\n    int64_t v24; // 0x4033e7\n    int32_t v25; // 0x402a67\n    while (true) {\n      lab_0x402ab8_2:\n        // 0x402ab8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402a67\n        int64_t v27; // 0x402aec\n        while (true) {\n          lab_0x402ab8:\n            // 0x402ab8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402ac3\n            if (v15 == -1) {\n                // 0x402ac5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402ad3\n            if (v28) {\n                // break (via goto) -> 0x403238\n                goto lab_0x403238;\n            }\n            // 0x402adc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g52 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4030cb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402c11;\n                    }\n                    // 0x4034ed\n                    v26 = v5 + 1;\n                    goto lab_0x402ab8;\n                }\n                case 7: {\n                    goto lab_0x402c11;\n                }\n                case 8: {\n                    goto lab_0x402c11;\n                }\n                case 9: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402c11;\n                }\n                case 12: {\n                    goto lab_0x402c11;\n                }\n                case 13: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402bdd;\n                }\n                case 36: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402c11;\n                }\n                case 38: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402c11;\n                }\n                case 44: {\n                    goto lab_0x402c11;\n                }\n                case 45: {\n                    goto lab_0x402c11;\n                }\n                case 46: {\n                    goto lab_0x402c11;\n                }\n                case 47: {\n                    goto lab_0x402c11;\n                }\n                case 48: {\n                    goto lab_0x402c11;\n                }\n                case 49: {\n                    goto lab_0x402c11;\n                }\n                case 50: {\n                    goto lab_0x402c11;\n                }\n                case 51: {\n                    goto lab_0x402c11;\n                }\n                case 52: {\n                    goto lab_0x402c11;\n                }\n                case 53: {\n                    goto lab_0x402c11;\n                }\n                case 54: {\n                    goto lab_0x402c11;\n                }\n                case 55: {\n                    goto lab_0x402c11;\n                }\n                case 56: {\n                    goto lab_0x402c11;\n                }\n                case 57: {\n                    goto lab_0x402c11;\n                }\n                case 58: {\n                    goto lab_0x402c11;\n                }\n                case 59: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402c11;\n                }\n                case 66: {\n                    goto lab_0x402c11;\n                }\n                case 67: {\n                    goto lab_0x402c11;\n                }\n                case 68: {\n                    goto lab_0x402c11;\n                }\n                case 69: {\n                    goto lab_0x402c11;\n                }\n                case 70: {\n                    goto lab_0x402c11;\n                }\n                case 71: {\n                    goto lab_0x402c11;\n                }\n                case 72: {\n                    goto lab_0x402c11;\n                }\n                case 73: {\n                    goto lab_0x402c11;\n                }\n                case 74: {\n                    goto lab_0x402c11;\n                }\n                case 75: {\n                    goto lab_0x402c11;\n                }\n                case 76: {\n                    goto lab_0x402c11;\n                }\n                case 77: {\n                    goto lab_0x402c11;\n                }\n                case 78: {\n                    goto lab_0x402c11;\n                }\n                case 79: {\n                    goto lab_0x402c11;\n                }\n                case 80: {\n                    goto lab_0x402c11;\n                }\n                case 81: {\n                    goto lab_0x402c11;\n                }\n                case 82: {\n                    goto lab_0x402c11;\n                }\n                case 83: {\n                    goto lab_0x402c11;\n                }\n                case 84: {\n                    goto lab_0x402c11;\n                }\n                case 85: {\n                    goto lab_0x402c11;\n                }\n                case 86: {\n                    goto lab_0x402c11;\n                }\n                case 87: {\n                    goto lab_0x402c11;\n                }\n                case 88: {\n                    goto lab_0x402c11;\n                }\n                case 89: {\n                    goto lab_0x402c11;\n                }\n                case 90: {\n                    goto lab_0x402c11;\n                }\n                case 91: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402c11;\n                }\n                case 94: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402c11;\n                }\n                case 96: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402c11;\n                }\n                case 98: {\n                    goto lab_0x402c11;\n                }\n                case 99: {\n                    goto lab_0x402c11;\n                }\n                case 100: {\n                    goto lab_0x402c11;\n                }\n                case 101: {\n                    goto lab_0x402c11;\n                }\n                case 102: {\n                    goto lab_0x402c11;\n                }\n                case 103: {\n                    goto lab_0x402c11;\n                }\n                case 104: {\n                    goto lab_0x402c11;\n                }\n                case 105: {\n                    goto lab_0x402c11;\n                }\n                case 106: {\n                    goto lab_0x402c11;\n                }\n                case 107: {\n                    goto lab_0x402c11;\n                }\n                case 108: {\n                    goto lab_0x402c11;\n                }\n                case 109: {\n                    goto lab_0x402c11;\n                }\n                case 110: {\n                    goto lab_0x402c11;\n                }\n                case 111: {\n                    goto lab_0x402c11;\n                }\n                case 112: {\n                    goto lab_0x402c11;\n                }\n                case 113: {\n                    goto lab_0x402c11;\n                }\n                case 114: {\n                    goto lab_0x402c11;\n                }\n                case 115: {\n                    goto lab_0x402c11;\n                }\n                case 116: {\n                    goto lab_0x402c11;\n                }\n                case 117: {\n                    goto lab_0x402c11;\n                }\n                case 118: {\n                    goto lab_0x402c11;\n                }\n                case 119: {\n                    goto lab_0x402c11;\n                }\n                case 120: {\n                    goto lab_0x402c11;\n                }\n                case 121: {\n                    goto lab_0x402c11;\n                }\n                case 122: {\n                    goto lab_0x402c11;\n                }\n                case 123: {\n                    goto lab_0x402bb5;\n                }\n                case 124: {\n                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402bb5;\n                }\n                case 126: {\n                    goto lab_0x402bdd;\n                }\n                default: {\n                    goto lab_0x402fb5;\n                }\n            }\n        }\n      lab_0x402fb5:\n        if (v23 != 1) {\n            // 0x403320\n            ps = 0;\n            int64_t len = v15; // 0x403330\n            if (v15 == -1) {\n                // 0x403332\n                len = strlen((char *)str);\n            }\n            // 0x40335e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4033bf:\n                // 0x4033bf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4033c4\n                int64_t v30 = v29 + str;\n                v24 = function_405fe0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40393a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40393a_2;\n                    }\n                    case -2: {\n                        // 0x403a1d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403a57\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403a5a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403a67\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403a60\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40393a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40393a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403390;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40343c\n                        char v34 = *(char *)v33; // 0x40344d\n                        unsigned char v35; // 0x402a67\n                        if (v34 < 125) {\n                            // 0x403458\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40346f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403440\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40344d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403458\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40346f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403440\n                            v33++;\n                        }\n                        goto lab_0x403390;\n                    }\n                }\n            }\n            goto lab_0x40393a_2;\n        } else {\n            // 0x403004\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402c11;\n        }\n    }\n  lab_0x403238:\n    // 0x403238\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403b3a\n        if (v8 > result) {\n            // 0x403b43\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402e67\n        return result;\n    }\n    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402c11:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402c20\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402e2a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402d21\n    char v40 = v20; // 0x402d21\n    int64_t v41 = v38; // 0x402d21\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402d21\n    int64_t v43 = v36; // 0x402d21\n    goto lab_0x402c9d;\n  lab_0x402e2a_2:\n    // 0x402e67\n    return function_402a10(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40393a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402c11;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40350e\n        int64_t v50 = v5 + 1; // 0x4035f1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4035f8\n        char v52 = v20; // 0x4035f8\n        int64_t v53 = result; // 0x4035f8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4035c1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4035c5\n            int64_t v56 = v54 + 1; // 0x4035ca\n            int64_t v57 = v51 + 1; // 0x4035f1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4035bc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4035c1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4035c5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402c9d;\n    }\n  lab_0x403390:\n    // 0x403390\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4033af\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4033b2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40393a\n        goto lab_0x40393a_2;\n    }\n    goto lab_0x4033bf;\n  lab_0x402bdd:\n    // 0x402bdd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402e2a_2;\n    }\n    goto lab_0x402c11;\n  lab_0x402bb5:;\n    bool v60 = v15 == 1; // 0x402bc0\n    if (v15 == -1) {\n        // 0x402bc2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402bce\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402c11;\n    } else {\n        goto lab_0x402bdd;\n    }\n  lab_0x402c9d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402ca2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402ca6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402ab8_2;\n}\n"
        },
        {
            "funcName": "function_403c40",
            "funcStartAddr": "403c40",
            "funcEndAddr": "403dde",
            "decompiledFuncCode": "int64_t function_403c40(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403c42\n    int32_t * v3 = __errno_location(); // 0x403c5c\n    int64_t v4 = (int64_t)g21; // 0x403c61\n    int32_t v5 = *v3; // 0x403c6b\n    int64_t v6 = v4; // 0x403c81\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403dd9\n            function_405010(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403c90\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403c97\n        int64_t v9; // 0x403c40\n        if (g21 == &g22) {\n            int64_t v10 = function_404e20(0, v8); // 0x403dba\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x403dbf\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404e20(v4, v8); // 0x403cab\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x403cba\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x403cba\n        int32_t v14 = v7; // 0x403cc1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403cf1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403cfb\n    int64_t * v17 = (int64_t *)v15; // 0x403cfe\n    uint64_t v18 = *v17; // 0x403cfe\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403d01\n    int64_t result = *v19; // 0x403d01\n    int64_t v20; // 0x403c40\n    uint64_t v21 = function_402a10(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403d24\n    if (v18 > v21) {\n        // 0x403d9b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403d37\n    *v17 = v22;\n    if (result != (int64_t)&g42) {\n        // 0x403d47\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404dc0(v22); // 0x403d61\n    *v19 = result2;\n    int64_t v23; // 0x403c40\n    function_402a10(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403d9b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403de0",
            "funcStartAddr": "403de0",
            "funcEndAddr": "403e14",
            "decompiledFuncCode": "int64_t function_403de0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403de7\n    int64_t result = function_404fc0(a1 == 0 ? (int64_t)&g43 : a1, 56); // 0x403e06\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e2f",
            "decompiledFuncCode": "int64_t function_403e20(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g43 : a1); // 0x403e2c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e30",
            "funcStartAddr": "403e30",
            "funcEndAddr": "403e3f",
            "decompiledFuncCode": "int64_t function_403e30(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x403e38\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_403e40",
            "funcStartAddr": "403e40",
            "funcEndAddr": "403e73",
            "decompiledFuncCode": "int64_t function_403e40(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 + 8 : a1 + 8; // 0x403e59\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403e5e\n    uint32_t v3 = *v2; // 0x403e5e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403e62\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403e80",
            "funcStartAddr": "403e80",
            "funcEndAddr": "403e93",
            "decompiledFuncCode": "int64_t function_403e80(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g43 + 4 : a1 + 4); // 0x403e8c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403ea0",
            "funcStartAddr": "403ea0",
            "funcEndAddr": "403ecb",
            "decompiledFuncCode": "int64_t function_403ea0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x403ea8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403ec5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403ebc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403f42",
            "decompiledFuncCode": "int64_t function_403ed0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g43 : a5; // 0x403ef2\n    int32_t * v2 = __errno_location(); // 0x403efb\n    uint32_t v3 = *(int32_t *)v1; // 0x403f1b\n    int64_t result = function_402a10(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403f2a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f50",
            "funcStartAddr": "403f50",
            "funcEndAddr": "404031",
            "decompiledFuncCode": "int64_t function_403f50(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g43 : a4; // 0x403f72\n    int32_t * v2 = __errno_location(); // 0x403f78\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403f97\n    int32_t * v4 = (int32_t *)v1; // 0x403f9a\n    int64_t v5 = function_402a10(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403fb5\n    int64_t v6 = v5 + 1; // 0x403fba\n    int64_t result = function_404dc0(v6); // 0x403fcf\n    function_402a10(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404014\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40401d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "40404a",
            "decompiledFuncCode": "int64_t function_404040(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404040\n    return function_403f50(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "4040e5",
            "decompiledFuncCode": "int64_t function_404050(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x404050\n    int64_t v2 = v1; // 0x404050\n    int64_t v3 = v2; // 0x404064\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x404083\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g53;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404080\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g53;\n        }\n    }\n    int64_t v6 = v3; // 0x40409d\n    if (g22 != 0x60a2e0) {\n        // 0x40409f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g42;\n        v6 = &g53;\n    }\n    int64_t result = v6; // 0x4040c1\n    if (g21 != &g22) {\n        // 0x4040c3\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g53;\n    }\n    // 0x4040d6\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040f0",
            "funcStartAddr": "4040f0",
            "funcEndAddr": "404101",
            "decompiledFuncCode": "int64_t function_4040f0(void) {\n    // 0x4040f0\n    int64_t v1; // 0x4040f0\n    return function_403c40(v1, v1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404110",
            "funcStartAddr": "404110",
            "funcEndAddr": "40411a",
            "decompiledFuncCode": "int64_t function_404110(void) {\n    // 0x404110\n    int64_t v1; // 0x404110\n    return function_403c40(v1, v1, v1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "404136",
            "decompiledFuncCode": "int64_t function_404120(int64_t a1) {\n    // 0x404120\n    return function_403c40(0, a1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404140",
            "funcStartAddr": "404140",
            "funcEndAddr": "404152",
            "decompiledFuncCode": "int64_t function_404140(int64_t a1, int64_t a2) {\n    // 0x404140\n    return function_403c40(0, a1, a2, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404160",
            "funcStartAddr": "404160",
            "funcEndAddr": "4041c8",
            "decompiledFuncCode": "int64_t function_404160(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404170\n    return function_403c40((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4041d0",
            "funcStartAddr": "4041d0",
            "funcEndAddr": "404234",
            "decompiledFuncCode": "int64_t function_4041d0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4041e0\n    return function_403c40((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "40424c",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int64_t a2) {\n    // 0x404240\n    return function_404160(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "40425f",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404250\n    return function_4041d0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "4042d0",
            "decompiledFuncCode": "int64_t function_404260(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x40426d\n    int128_t v2 = __asm_movdqa(g44); // 0x404275\n    int128_t v3 = __asm_movdqa(g45); // 0x40427d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404292\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4042a8\n    uint32_t v6 = *v5; // 0x4042a8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4042ad\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403c40(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042dd",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, int64_t a2) {\n    // 0x4042d0\n    return function_404260(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "4042f1",
            "decompiledFuncCode": "int64_t function_4042e0(int64_t a1) {\n    // 0x4042e0\n    return function_404260(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "40430a",
            "decompiledFuncCode": "int64_t function_404300(void) {\n    // 0x404300\n    int64_t v1; // 0x404300\n    return function_404260(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404310",
            "funcStartAddr": "404310",
            "funcEndAddr": "40437e",
            "decompiledFuncCode": "int64_t function_404310(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40432a\n    return function_403c40((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404380",
            "funcStartAddr": "404380",
            "funcEndAddr": "4043ec",
            "decompiledFuncCode": "int64_t function_404380(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x404387\n    int128_t v2 = __asm_movdqa(g44); // 0x40438f\n    int128_t v3 = __asm_movdqa(g45); // 0x404397\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4043b9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4043e7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4043ca\n    return function_403c40(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "4043f9",
            "decompiledFuncCode": "int64_t function_4043f0(void) {\n    // 0x4043f0\n    int64_t v1; // 0x4043f0\n    return function_404380(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404400",
            "funcStartAddr": "404400",
            "funcEndAddr": "404417",
            "decompiledFuncCode": "int64_t function_404400(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404400\n    return function_404380(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404420",
            "funcStartAddr": "404420",
            "funcEndAddr": "404433",
            "decompiledFuncCode": "int64_t function_404420(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404420\n    return function_404380(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "40444a",
            "decompiledFuncCode": "int64_t function_404440(void) {\n    // 0x404440\n    int64_t v1; // 0x404440\n    return function_403c40(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_404450",
            "funcStartAddr": "404450",
            "funcEndAddr": "404462",
            "decompiledFuncCode": "int64_t function_404450(int64_t a1, int64_t a2) {\n    // 0x404450\n    return function_403c40(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_404470",
            "funcStartAddr": "404470",
            "funcEndAddr": "404481",
            "decompiledFuncCode": "int64_t function_404470(void) {\n    // 0x404470\n    int64_t v1; // 0x404470\n    return function_403c40(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404490",
            "funcStartAddr": "404490",
            "funcEndAddr": "4044a6",
            "decompiledFuncCode": "int64_t function_404490(int64_t a1) {\n    // 0x404490\n    return function_403c40(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_4044b0",
            "funcStartAddr": "4044b0",
            "funcEndAddr": "4044c0",
            "decompiledFuncCode": "int64_t function_4044b0(int64_t * a1) {\n    // 0x4044b0\n    *a1 = 0;\n    *(int64_t *)((int64_t)a1 + 8) = 0;\n    int64_t result; // 0x4044b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4044c0",
            "funcStartAddr": "4044c0",
            "funcEndAddr": "404639",
            "decompiledFuncCode": "int64_t function_4044c0(int64_t a1, char * a2, int64_t a3, int64_t * a4) {\n    // 0x4044c0\n    int128_t v1; // 0x4044c0\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a4;\n    int128_t v4 = __asm_pxor(v2, v2); // 0x4044c2\n    int64_t v5; // bp-88, 0x4044c0\n    int64_t v6 = &v5; // 0x4044d4\n    v5 = __asm_movaps(v4);\n    __asm_movaps(v4);\n    int64_t v7 = v3; // 0x4044e4\n    int64_t v8 = a1; // 0x4044e4\n    int64_t * v9; // 0x4044c0\n    int64_t v10; // 0x4044c0\n    int64_t v11; // 0x4044c0\n    int64_t v12; // 0x4044c0\n    int64_t v13; // 0x4044c0\n    if (a3 == 0) {\n        goto lab_0x40453c;\n    } else {\n        int64_t v14 = (int64_t)a2;\n        int64_t v15 = v14; // 0x4044ee\n        unsigned char v16 = *(char *)v15; // 0x4044f0\n        int64_t v17 = v16; // 0x4044f0\n        v15++;\n        unsigned char v18 = v16 % 64;\n        int64_t * v19 = (int64_t *)((v17 / 8 & 24) + v6); // 0x404507\n        *v19 = (v18 == 0 ? 1 : 1 << (int64_t)v18) | *v19;\n        while (v14 + a3 != v15) {\n            // 0x4044f0\n            v16 = *(char *)v15;\n            v17 = v16;\n            v15++;\n            v18 = v16 % 64;\n            v19 = (int64_t *)((v17 / 8 & 24) + v6);\n            *v19 = (v18 == 0 ? 1 : 1 << (int64_t)v18) | *v19;\n        }\n        int64_t * v20 = (int64_t *)(a1 + 8);\n        uint64_t v21 = *v20; // 0x404510\n        v9 = v20;\n        v10 = v21;\n        v11 = v17;\n        v13 = 1;\n        v12 = v17;\n        if (v21 >= *(int64_t *)(a1 + 16)) {\n            goto lab_0x404546;\n        } else {\n            goto lab_0x404520;\n        }\n    }\n  lab_0x40453c:;\n    int64_t * v22 = (int64_t *)(a1 + 8);\n    uint64_t v23 = *v22; // 0x40453c\n    v9 = v22;\n    v10 = v23;\n    v11 = v7;\n    v13 = v8;\n    v12 = v7;\n    if (v23 < *(int64_t *)(a1 + 16)) {\n        goto lab_0x404520;\n    } else {\n        goto lab_0x404546;\n    }\n  lab_0x404520:\n    // 0x404520\n    *v9 = v10 + 1;\n    int64_t v24 = v11; // 0x404528\n    int64_t v25 = (int64_t)*(char *)v10; // 0x404528\n    int64_t v26 = v13; // 0x404528\n    goto lab_0x40452b;\n  lab_0x404546:;\n    int32_t v56 = __uflow((struct _IO_FILE *)a1); // 0x404549\n    int64_t v57 = v56; // 0x40454e\n    v24 = v12;\n    v25 = v57;\n    v26 = a1;\n    int64_t v28 = v12; // 0x404552\n    int64_t v29 = v57; // 0x404552\n    int64_t v30 = a1; // 0x404552\n    if (v56 >= 0) {\n        goto lab_0x40452b;\n    } else {\n        goto lab_0x404554;\n    }\n  lab_0x40452b:\n    // 0x40452b\n    v8 = v26;\n    v7 = v24;\n    int64_t v27 = *(int64_t *)(8 * (0x100000000 * v25 >> 32) / 64 + v6); // 0x404532\n    v28 = v7;\n    v29 = v25;\n    v30 = v8;\n    if ((1 << v25 % 64 & v27) == 0) {\n        goto lab_0x404554;\n    } else {\n        goto lab_0x40453c;\n    }\n  lab_0x404554:\n    // 0x404554\n    if ((int32_t)v29 < 0) {\n        // 0x4045f3\n        return -1;\n    }\n    int64_t * v31 = (int64_t *)(v3 + 8); // 0x404554\n    int64_t * v32 = (int64_t *)(a1 + 8);\n    int64_t v33 = v29; // 0x4044c0\n    int64_t result = 0;\n    int64_t v34 = *v31;\n    bool v35 = false;\n    int64_t v36; // 0x4044c0\n    int64_t v37; // 0x4044c0\n    int64_t v38; // 0x4044c0\n    int64_t v39; // 0x4044c0\n    int64_t v40; // 0x4044c0\n    int64_t v41; // 0x4045d3\n    if (result != v28) {\n        // 0x404568\n        v40 = result + v34;\n        v39 = v30;\n        v36 = v28;\n        v38 = v34;\n        if (v35) {\n            // break -> 0x4045e8\n            break;\n        }\n    } else {\n        if (v34 == 0) {\n            // 0x404618\n            v37 = 128;\n        } else {\n            if (result >= 0x5555555555555554) {\n                // 0x40462a\n                function_405010(v30);\n                // UNREACHABLE\n            }\n            // 0x4045c2\n            v37 = result + 1 + result / 2;\n        }\n        // 0x4045cd\n        v41 = function_404e20(v34, v37);\n        v40 = v41 + result;\n        v39 = v34;\n        v36 = v37;\n        v38 = v41;\n        if (v35) {\n            // break -> 0x4045e8\n            break;\n        }\n    }\n    int64_t v42 = *(int64_t *)(8 * (0x100000000 * v33 >> 32) / 64 + v6); // 0x404577\n    int64_t v43 = v40; // 0x40457f\n    int64_t v44 = v36; // 0x40457f\n    int64_t v45 = v38; // 0x40457f\n    while ((v42 & 1 << v33 % 64) == 0) {\n        int64_t v46 = v39;\n        *(char *)v40 = (char)v33;\n        uint64_t v47 = *v32; // 0x404587\n        int64_t v48; // 0x4044c0\n        int64_t v49; // 0x4044c0\n        if (v47 >= *(int64_t *)(a1 + 16)) {\n            // 0x404608\n            v48 = __uflow((struct _IO_FILE *)a1);\n            v49 = a1;\n        } else {\n            // 0x404591\n            *v32 = v47 + 1;\n            v48 = (int64_t)*(char *)v47;\n            v49 = v46;\n        }\n        int64_t v50 = result + 1; // 0x404583\n        bool v51 = v50 == 0; // 0x40459e\n        v33 = v48;\n        if (v50 == 0 == (int32_t)v48 < 0) {\n            // 0x4045f3\n            return -1;\n        }\n        int64_t v52 = v49;\n        result = v50;\n        int64_t v53 = v36;\n        v34 = v38;\n        v35 = (int32_t)v48 < 0;\n        if (result != v53) {\n            int64_t v54 = result + v34; // 0x404568\n            v40 = v54;\n            v39 = v52;\n            v36 = v53;\n            v38 = v34;\n            v43 = v54;\n            v44 = v53;\n            v45 = v34;\n            if (v35) {\n                // break -> 0x4045e8\n                break;\n            }\n        } else {\n            if (v34 == 0) {\n                // 0x404618\n                v37 = 128;\n                if (!v51) {\n                    // 0x404628\n                    v37 = v53;\n                    if (result < 0) {\n                        // 0x40462a\n                        function_405010(v52);\n                        // UNREACHABLE\n                    }\n                }\n            } else {\n                if (result >= 0x5555555555555554) {\n                    // 0x40462a\n                    function_405010(v52);\n                    // UNREACHABLE\n                }\n                // 0x4045c2\n                v37 = result + 1 + result / 2;\n            }\n            // 0x4045cd\n            v41 = function_404e20(v34, v37);\n            int64_t v55 = v41 + result; // 0x4045db\n            v40 = v55;\n            v39 = v34;\n            v36 = v37;\n            v38 = v41;\n            v43 = v55;\n            v44 = v37;\n            v45 = v41;\n            if (v35) {\n                // break -> 0x4045e8\n                break;\n            }\n        }\n        // 0x404570\n        v42 = *(int64_t *)(8 * (0x100000000 * v33 >> 32) / 64 + v6);\n        v43 = v40;\n        v44 = v36;\n        v45 = v38;\n    }\n    // 0x4045e8\n    *(char *)v43 = 0;\n    *v31 = v45;\n    *a4 = v44;\n    // 0x4045f3\n    return result;\n}\n"
        },
        {
            "funcName": "function_404640",
            "funcStartAddr": "404640",
            "funcEndAddr": "404819",
            "decompiledFuncCode": "int64_t function_404640(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 512; // 0x404669\n    int64_t v2 = 64; // 0x404669\n    if (a2 != 0) {\n        // 0x40466b\n        v2 = a2 + 1;\n        v1 = 8 * v2;\n        if (v1 > -1 != v2 < 0x2000000000000000) {\n            // 0x40468a\n            function_405010(a1);\n            // UNREACHABLE\n        }\n    }\n    int64_t v3 = 0; // bp-72, 0x4046af\n    int64_t v4 = 0; // 0x4046c4\n    int64_t v5 = v2; // 0x4046c4\n    int64_t v6 = function_404dc0(v1); // 0x4046c4\n    int64_t v7 = function_404dc0(v1); // 0x4046c4\n    int64_t v8; // 0x404640\n    int64_t v9; // 0x404640\n    uint64_t result; // 0x404640\n    while (true) {\n        int64_t v10 = v7;\n        int64_t v11 = v6;\n        uint64_t v12 = v5;\n        result = v4;\n        int64_t v13 = function_4044c0(a1, (char *)a3, a4, &v3); // 0x40471b\n        int64_t v14; // 0x404640\n        int64_t v15; // 0x404640\n        int64_t v16; // 0x404640\n        if (result < v12) {\n            // 0x4046d0\n            v5 = v12;\n            v16 = a1;\n            v14 = v11;\n            v15 = v10;\n            v8 = v11;\n            v9 = v10;\n            if (v13 == -1) {\n                // break -> 0x404787\n                break;\n            }\n        } else {\n            int64_t v17; // 0x404640\n            int64_t v18; // 0x404640\n            if (v11 == 0) {\n                // 0x4047d0\n                v18 = 128;\n                v17 = 16;\n                if (v12 != 0) {\n                    int64_t v19 = 8 * v12; // 0x4047e2\n                    v18 = v19;\n                    v17 = v12;\n                    if (v19 > -1 != v12 < 0x2000000000000000) {\n                        // 0x40468a\n                        function_405010(a1);\n                        // UNREACHABLE\n                    }\n                }\n            } else {\n                // 0x404731\n                if (v12 >= 0xaaaaaaaaaaaaaaa) {\n                    // 0x40468a\n                    function_405010(a1);\n                    // UNREACHABLE\n                }\n                int64_t v20 = v12 + 1 + v12 / 2; // 0x40474a\n                v18 = 8 * v20;\n                v17 = v20;\n            }\n            int64_t v21 = function_404e20(v11, v18); // 0x404762\n            int64_t v22 = function_404e20(v10, v18); // 0x404775\n            v5 = v17;\n            v16 = v10;\n            v14 = v21;\n            v15 = v22;\n            v8 = v21;\n            v9 = v22;\n            if (v13 == -1) {\n                // break -> 0x404787\n                break;\n            }\n        }\n        int64_t v23 = v13 + 1; // 0x4046dd\n        int64_t v24 = v16; // 0x4046e1\n        if (v23 < 0) {\n            // 0x40468a\n            function_405010(v24);\n            // UNREACHABLE\n        }\n        // 0x4046e3\n        v7 = v15;\n        v6 = v14;\n        int64_t v25 = function_404dc0(v23); // 0x4046e6\n        int64_t v26 = 8 * result; // 0x4046eb\n        *(int64_t *)(v7 + v26) = v13;\n        int64_t * dest_mem = memcpy((int64_t *)v25, NULL, (int32_t)v23); // 0x4046fb\n        *(int64_t *)(v6 + v26) = (int64_t)dest_mem;\n        v4 = result + 1;\n    }\n    int64_t v27 = 8 * result; // 0x404787\n    *(int64_t *)(v8 + v27) = 0;\n    *(int64_t *)(v9 + v27) = 0;\n    free(NULL);\n    *(int64_t *)a5 = v8;\n    if (a6 == 0) {\n        // 0x40480f\n        free((int64_t *)v9);\n    } else {\n        // 0x4047b2\n        *(int64_t *)a6 = v9;\n    }\n    // 0x4047ba\n    return result;\n}\n"
        },
        {
            "funcName": "function_404820",
            "funcStartAddr": "404820",
            "funcEndAddr": "404bfd",
            "decompiledFuncCode": "int64_t function_404820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4048b8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40483c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404856\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40489b\n    if (a6 < 10) {\n        // 0x4048aa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4049a2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404c20",
            "decompiledFuncCode": "int64_t function_404c00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404c00\n    if (a5 == 0) {\n        // 0x404c1b\n        return function_404820(a1, a2, a3, a4, a5, 0, (int64_t)&g53);\n    }\n    int64_t v1 = 0; // 0x404c07\n    v1++;\n    int64_t v2 = v1; // 0x404c19\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404c10\n        v1++;\n        v2 = v1;\n    }\n    // 0x404c1b\n    return function_404820(a1, a2, a3, a4, a5, v2, (int64_t)&g53);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c80",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x404c20\n    int64_t v4 = &v3; // 0x404c20\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x404c53\n    int64_t v7; // 0x404c3d\n    int64_t * v8; // 0x404c5b\n    int64_t v9; // 0x404c5b\n    int64_t v10; // 0x404c67\n    if (v6 < 48) {\n        // 0x404c30\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x404c73\n            break;\n        }\n    } else {\n        // 0x404c5b\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x404c73\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x404c51\n    while (v5 != 9) {\n        // 0x404c49\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x404c30\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x404c73\n                break;\n            }\n        } else {\n            // 0x404c5b\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x404c73\n                break;\n            }\n        }\n        // 0x404c49\n        v11 = 10;\n    }\n    // 0x404c73\n    return function_404820(a1, a2, a3, a4, v4, v11, (int64_t)&g53);\n}\n"
        },
        {
            "funcName": "function_404c80",
            "funcStartAddr": "404c80",
            "funcEndAddr": "404d3c",
            "decompiledFuncCode": "int64_t function_404c80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404c80\n    int64_t v1; // bp-168, 0x404c80\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404c80\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404c80\n    int64_t v8; // 0x404c80\n    int64_t v9; // bp-56, 0x404c80\n    int64_t v10; // 0x404ce5\n    int64_t v11; // 0x404d09\n    if ((int32_t)v6 < 48) {\n        // 0x404cd0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404d20\n            break;\n        }\n    } else {\n        // 0x404d02\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404d20\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404cfa\n    int64_t v13 = 10; // 0x404cfa\n    while (v5 != 9) {\n        // 0x404cfc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404cd0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404d20\n                break;\n            }\n        } else {\n            // 0x404d02\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404d20\n                break;\n            }\n        }\n        // 0x404cf2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404d20\n    int64_t v14; // bp-136, 0x404c80\n    int64_t result = function_404820(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g53); // 0x404d2f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d40",
            "funcStartAddr": "404d40",
            "funcEndAddr": "404db4",
            "decompiledFuncCode": "int64_t function_404d40(int64_t a1) {\n    // 0x404d40\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404da3\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_404dc0",
            "funcStartAddr": "404dc0",
            "funcEndAddr": "404dda",
            "decompiledFuncCode": "int64_t function_404dc0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404dc4\n    if (size != 0 != (mem == NULL)) {\n        // 0x404dd3\n        return (int64_t)mem;\n    }\n    // 0x404dd5\n    function_405010(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404de0",
            "funcStartAddr": "404de0",
            "funcEndAddr": "404e01",
            "decompiledFuncCode": "int64_t function_404de0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404de3\n    int64_t v2 = v1; // 0x404de3\n    if (v2 < 0) {\n        // 0x404dfb\n        function_405010(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404df9\n        return function_404dc0(v2);\n    }\n    // 0x404dfb\n    function_405010(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e10",
            "funcStartAddr": "404e10",
            "funcEndAddr": "404e12",
            "decompiledFuncCode": "int64_t function_404e10(void) {\n    // 0x404e10\n    int64_t v1; // 0x404e10\n    return function_404dc0(v1);\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e56",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404e48\n        free(v1);\n        return (int32_t)&g53 ^ (int32_t)&g53;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404e31\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404e40\n        return (int64_t)mem;\n    }\n    // 0x404e51\n    function_405010(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "404e81",
            "decompiledFuncCode": "int64_t function_404e60(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404e63\n    int64_t v2 = v1; // 0x404e63\n    if (v2 < 0) {\n        // 0x404e7b\n        function_405010(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404e79\n        return function_404e20(a1, v2);\n    }\n    // 0x404e7b\n    function_405010(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e90",
            "funcStartAddr": "404e90",
            "funcEndAddr": "404f16",
            "decompiledFuncCode": "int64_t function_404e90(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404eeb\n            function_405010(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404e20(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404ed3\n    if (a2 == 0) {\n        // 0x404ef8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404ed8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404eeb\n        function_405010(a1);\n        // UNREACHABLE\n    }\n    // 0x404eba\n    *(int64_t *)a2 = v2;\n    return function_404e20(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404f20",
            "funcStartAddr": "404f20",
            "funcEndAddr": "404f70",
            "decompiledFuncCode": "int64_t function_404f20(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404f20\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404f6a\n            function_405010(a1);\n            // UNREACHABLE\n        }\n        // 0x404f42\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404e20(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404f55\n        *(int64_t *)a2 = 128;\n        return function_404e20(0, 128);\n    }\n    // 0x404f68\n    if (a2 < 0) {\n        // 0x404f6a\n        function_405010(a1);\n        // UNREACHABLE\n    }\n    // 0x404f42\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404e20(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404f70",
            "funcStartAddr": "404f70",
            "funcEndAddr": "404f87",
            "decompiledFuncCode": "int64_t function_404f70(int64_t a1, int64_t a2) {\n    // 0x404f70\n    return (int64_t)memset((int64_t *)function_404dc0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "404fbe",
            "decompiledFuncCode": "int64_t function_404f90(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404f97\n    if ((int64_t)v1 < 0) {\n        // 0x404fb9\n        function_405010(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404fb9\n        function_405010(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404faa\n    if (mem != NULL) {\n        // 0x404fb4\n        return (int64_t)mem;\n    }\n    // 0x404fb9\n    function_405010(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404fc0",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "404fe8",
            "decompiledFuncCode": "int64_t function_404fc0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404dc0(a2); // 0x404fcf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404ff0",
            "funcStartAddr": "404ff0",
            "funcEndAddr": "405003",
            "decompiledFuncCode": "int64_t function_404ff0(int64_t str) {\n    // 0x404ff0\n    return function_404fc0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405010",
            "funcStartAddr": "405010",
            "funcEndAddr": "405041",
            "decompiledFuncCode": "int64_t function_405010(int64_t a1) {\n    // 0x405010\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405050",
            "funcStartAddr": "405050",
            "funcEndAddr": "4050cb",
            "decompiledFuncCode": "int64_t function_405050(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405057\n    if (fileno(stream) < 0) {\n        // 0x4050b7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40506a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40509b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4050b7\n            return fclose(stream);\n        }\n    }\n    // 0x40506c\n    if ((int32_t)function_4050d0(a1, v1) == 0) {\n        // 0x4050b7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405078\n    int32_t v3 = *v2; // 0x405080\n    int64_t result = fclose(stream); // 0x40508e\n    if (v3 != 0) {\n        // 0x4050c0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405090\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "405110",
            "decompiledFuncCode": "int64_t function_4050d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4050ea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4050ea\n        return fflush(stream);\n    }\n    // 0x4050f8\n    function_4051b0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405110",
            "funcStartAddr": "405110",
            "funcEndAddr": "4051ae",
            "decompiledFuncCode": "int64_t function_405110(int64_t a1, int64_t a2) {\n    char * file_path = (char *)a1; // 0x40511e\n    char * mode = (char *)a2; // 0x40511e\n    int64_t stream; // 0x405110\n    struct _IO_FILE * file = freopen(file_path, mode, (struct _IO_FILE *)stream); // 0x40511e\n    if (a1 == 0 || file == NULL) {\n        // 0x405148\n        return (int64_t)file;\n    }\n    int32_t fd2 = fileno(file); // 0x405133\n    if (dup2(fd2, fd2) >= 0 || *__errno_location() != 9) {\n        // 0x405148\n        return (int64_t)file;\n    }\n    int32_t fd = open(\"/dev/null\", O_CLOEXEC); // 0x40516e\n    if (fd == fd2) {\n        // 0x405191\n        return (int64_t)freopen(file_path, mode, file);\n    }\n    int32_t v1 = dup2(fd, fd2); // 0x405180\n    close(fd);\n    if (v1 < 0) {\n        // 0x405148\n        return (int64_t)file;\n    }\n    // 0x405191\n    return (int64_t)freopen(file_path, mode, file);\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "405207",
            "decompiledFuncCode": "int64_t function_4051b0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4051b0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4051ba\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4051eb\n    int64_t result = -1; // 0x4051f4\n    if (v1 != -1) {\n        // 0x4051f6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405202\n    return result;\n}\n"
        },
        {
            "funcName": "function_405210",
            "funcStartAddr": "405210",
            "funcEndAddr": "4052ef",
            "decompiledFuncCode": "int64_t function_405210(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40521c\n    uint32_t v2 = *v1; // 0x40521c\n    int64_t v3 = a2 & 0xffffffff; // 0x405221\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405224\n    uint64_t v5 = (int64_t)*v4; // 0x405224\n    int64_t v6; // 0x405292\n    if (v3 <= v5) {\n      lab_0x40528c_2:\n        // 0x40528c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405212\n    int64_t v8 = v2; // 0x405210\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40528c\n        goto lab_0x40528c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405248\n    int64_t v17; // 0x405256\n    int64_t * v18; // 0x405270\n    int64_t * v19; // 0x405273\n    int64_t v20; // 0x40527e\n    int64_t v21; // 0x405256\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405253\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405270\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405287\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40528c\n            goto lab_0x40528c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40528c\n            goto lab_0x40528c_2;\n        }\n        // 0x405242\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4052cb\n    int64_t * v23 = (int64_t *)v22; // 0x4052d0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4052d3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4052d0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4052e7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40523d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40528c\n            goto lab_0x40528c_2;\n        }\n        // 0x405242\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405253\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405270\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405287\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40528c\n                goto lab_0x40528c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40528c\n                goto lab_0x40528c_2;\n            }\n            // 0x405242\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4052b0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4052d0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4052e7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40528c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4052f0",
            "funcStartAddr": "4052f0",
            "funcEndAddr": "40590c",
            "decompiledFuncCode": "int64_t function_4052f0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40530f\n    int64_t v2 = *v1; // 0x40530f\n    char * str2 = (char *)v2; // 0x40531c\n    char c = *str2; // 0x40531c\n    int64_t v3 = v2; // 0x405348\n    int64_t v4 = 0; // 0x4052f0\n    int32_t v5; // 0x4052f0\n    int64_t v6; // 0x4052f0\n    int64_t v7; // 0x4052f0\n    int64_t v8; // 0x4052f0\n    int64_t v9; // 0x4052f0\n    int64_t v10; // 0x4052f0\n    int64_t v11; // 0x4052f0\n    int64_t v12; // 0x4052f0\n    int64_t v13; // 0x4052f0\n    int64_t str3; // 0x4052f0\n    int64_t v14; // 0x4052f0\n    int64_t v15; // 0x4052f0\n    int64_t v16; // 0x4052f0\n    int64_t v17; // 0x4052f0\n    int32_t v18; // 0x4052f0\n    int32_t v19; // 0x4052f0\n    int32_t v20; // 0x4052f0\n    int32_t v21; // 0x4052f0\n    int32_t v22; // 0x4052f0\n    int32_t v23; // 0x4052f0\n    int32_t v24; // 0x4052f0\n    int32_t v25; // 0x4052f0\n    int32_t v26; // 0x4052f0\n    int32_t v27; // 0x4052f0\n    int32_t v28; // 0x4052f0\n    int32_t v29; // 0x4052f0\n    int64_t nmemb; // 0x4052f0\n    int64_t v30; // 0x4052f0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40534c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405348\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405358\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40535e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405328\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40538c\n                int64_t v34; // 0x4052f0\n                int64_t v35; // 0x4052f0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405395\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405510;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4053a6\n                int64_t v37 = *(int64_t *)v36; // 0x4053aa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405380\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405395\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405510;\n                        }\n                    }\n                    // 0x4053a6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4053f6:\n                    // 0x4053f6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405450;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4055c0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405450;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405570\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40541a;\n                                } else {\n                                    // 0x40557c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40541a;\n                                    } else {\n                                        // 0x40558a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40541a;\n                                        } else {\n                                            goto lab_0x405450;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40541a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405461:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405636\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4057e2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x405802\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40584f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x405869\n                            int64_t v45; // 0x40586b\n                            if (*(char *)v42 != 0) {\n                                // 0x40586b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405863\n                            while (v17 + nmemb != v42) {\n                                // 0x405865\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40586b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x405858\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405890\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x405644\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40579f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405699\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4056b0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40555e\n                    return 63;\n                }\n                // 0x405480\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405504\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405510:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405520\n                    uint32_t v50 = *v49; // 0x405520\n                    int64_t v51 = v50; // 0x405520\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40552a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405533\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40575f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40570a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40555e\n                            return 63;\n                        }\n                        // 0x4055a8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4058bf\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4057bd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4057d0\n                                // 0x40555e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4056ce\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4056e2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40554b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40554e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405552\n                    int64_t result = v59; // 0x405558\n                    if (v58 != 0) {\n                        // 0x40555a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40555e\n                    return result;\n                }\n            } else {\n                // 0x40535e\n                v5 = v32;\n            }\n            // break -> 0x405485\n            break;\n        }\n    }\n    // 0x405485\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40549d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4054a7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40555e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4055e9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4054d6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4054e6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405450:\n    // 0x405450\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405450\n    int64_t v63 = *(int64_t *)v62; // 0x405454\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405461\n        goto lab_0x405461;\n    }\n    goto lab_0x4053f6;\n  lab_0x40541a:\n    // 0x40541a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4052f0\n    int32_t v65; // 0x4052f0\n    int32_t v66; // 0x4052f0\n    if (v27 != 0) {\n        goto lab_0x405450;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4055d0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405450;\n            } else {\n                goto lab_0x405441;\n            }\n        } else {\n            // 0x405435\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40572c\n                int64_t v67 = (int64_t)mem; // 0x40572c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405450;\n                } else {\n                    // 0x40573f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405441;\n                }\n            } else {\n                goto lab_0x405441;\n            }\n        }\n    }\n  lab_0x405441:\n    // 0x405441\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405450;\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "405ed6",
            "decompiledFuncCode": "int64_t function_405910(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405931\n    if (v3 < 1) {\n        // 0x405aee\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40592d\n    int32_t v5 = *(int32_t *)a7; // 0x405939\n    uint64_t v6 = a1 & 0xffffffff; // 0x40593b\n    int64_t v7 = v2; // 0x405940\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405943\n    *v8 = 0;\n    int64_t v9; // 0x405910\n    int64_t v10; // 0x405910\n    int64_t v11; // 0x405910\n    int64_t v12; // 0x405910\n    int64_t str; // 0x405910\n    int64_t v13; // 0x405910\n    int64_t v14; // 0x405910\n    int64_t v15; // 0x405910\n    int64_t v16; // 0x405910\n    int64_t v17; // 0x405910\n    int32_t v18; // 0x405910\n    char v19; // 0x405910\n    if (v5 == 0) {\n        // 0x405b28\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40595a;\n    } else {\n        // 0x405953\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4059a0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4059a3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405a68;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4059b6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4059c6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405a7c;\n                } else {\n                    goto lab_0x4059d8;\n                }\n            }\n        } else {\n            goto lab_0x40595a;\n        }\n    }\n  lab_0x40595a:\n    // 0x40595a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405960\n    *v24 = 0;\n    int64_t v25; // 0x405910\n    int64_t v26; // 0x405910\n    int64_t v27; // 0x405910\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405a50\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405a5d;\n        }\n        case 43: {\n            // 0x405d60\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405a5d;\n        }\n        default: {\n            // 0x40597c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405cdf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405df8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x405a5d;\n                } else {\n                    // 0x405ced\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40598a;\n                }\n            } else {\n                goto lab_0x40598a;\n            }\n        }\n    }\n  lab_0x405a68:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405a6f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4059d8;\n    } else {\n        goto lab_0x405a7c;\n    }\n  lab_0x40598a:\n    // 0x40598a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x405a5d;\n  lab_0x405a5d:\n    // 0x405a5d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405a68;\n  lab_0x4059d8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4059d8\n    int64_t v31 = v30; // 0x4059d8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4059da\n    if ((int64_t)*v32 > v31) {\n        // 0x4059df\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4059e2\n    if (*v33 > v30) {\n        // 0x4059e7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4059ea\n    int64_t v35 = v31; // 0x4059ee\n    int64_t v36 = v15; // 0x4059ee\n    int64_t v37; // 0x405910\n    int64_t v38; // 0x405910\n    int64_t v39; // 0x405910\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405b58\n        int64_t v41 = v40; // 0x405b58\n        v2 = v41;\n        int64_t v42; // 0x405910\n        if (*v33 == v40) {\n            // 0x405d40\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405d48\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405b64\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405b68\n                function_405210(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405b78\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405b81\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405b8a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405ba1\n            int64_t v47 = v45 & 0xffffffff; // 0x405ba5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405bae\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405bb4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405bb6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405b90\n            int64_t v49 = v48 & 0xffffffff; // 0x405b90\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405ba1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405bae\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405bb4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405bb6;\n                    }\n                }\n                // 0x405b90\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405d58\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405bb6;\n    } else {\n        goto lab_0x4059f4;\n    }\n  lab_0x405a7c:\n    // 0x405a7c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405a7f\n    int64_t v51 = v12; // 0x405a7f\n    int64_t v52 = v14; // 0x405a7f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4059d8;\n    } else {\n        goto lab_0x405a85;\n    }\n  lab_0x4059f4:;\n    int32_t v53 = v35; // 0x4059f4\n    int64_t v54; // 0x405910\n    int64_t v55; // 0x405910\n    int64_t v56; // 0x405910\n    int64_t v57; // 0x405910\n    int64_t v58; // 0x405910\n    int64_t v59; // 0x405910\n    char * v60; // 0x405910\n    int64_t v61; // 0x405910\n    int64_t v62; // 0x405a09\n    int64_t v63; // 0x405910\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405b43\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405b46;\n    } else {\n        // 0x4059fc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405910\n        int64_t v66 = v65 ? -1 : 1; // 0x405a10\n        int64_t v67 = (int64_t)\"--\"; // 0x405910\n        int64_t v68 = v62; // 0x405910\n        int64_t v69 = 3; // 0x405a10\n        unsigned char v70 = *(char *)v68; // 0x405a10\n        char v71 = *(char *)v67; // 0x405a10\n        char v72 = v71; // 0x405a10\n        bool v73 = false; // 0x405a10\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405b00\n            if (*(char *)v62 == 45) {\n                // 0x405bc0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405bc0\n                if (c == 0) {\n                    goto lab_0x405b0a;\n                } else {\n                    // 0x405bcd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405c50;\n                    } else {\n                        if (c == 45) {\n                            // 0x405e33\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405ca5;\n                        } else {\n                            // 0x405bde\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405c50;\n                            } else {\n                                // 0x405be3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405c04;\n                                } else {\n                                    // 0x405bea\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405c50;\n                                    } else {\n                                        goto lab_0x405c04;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405b0a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405a20\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405a23\n            int64_t v77 = v35 + 1; // 0x405a26\n            int32_t v78 = v77; // 0x405a29\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405d90\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405a37\n                    function_405210(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405a45\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405b46;\n        }\n    }\n  lab_0x405a85:;\n    // 0x405a85\n    int64_t v79; // bp-104, 0x405910\n    int64_t v80 = &v79; // 0x40591a\n    int64_t v81 = v50 + 1; // 0x405a85\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405a8c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405a91\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405a95\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405a99\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405aa1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405aa6\n    int32_t c2 = v84; // 0x405aa6\n    char * found_char_pos = strchr(str2, c2); // 0x405aa6\n    int64_t v87 = *v82; // 0x405aab\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405ab5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405ac0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405db0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405d7d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405aee\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405aa6\n    char v91 = *(char *)(v90 + 1); // 0x405adb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405a95\n        if (v91 != 58) {\n            // 0x405aee\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405d04\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405e08\n                *v8 = 0;\n            } else {\n                // 0x405dec\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405d2e\n            *v83 = 0;\n            // 0x405aee\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405d0e\n        if (v93 != 0) {\n            // 0x405da0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405d2e\n            *v83 = 0;\n            // 0x405aee\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405d21\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405d2e\n            *v83 = 0;\n            // 0x405aee\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405e6a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405e1a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405e21\n        // 0x405d2e\n        *v83 = 0;\n        // 0x405aee\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405c79\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405c7b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405ea0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405e51\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405e58\n            // 0x405aee\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405c86\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405c8a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405ca5;\n  lab_0x405bb6:\n    // 0x405bb6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4059f4;\n  lab_0x405ca5:;\n    int64_t v99 = function_4052f0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405cc3\n    // 0x405aee\n    return v99 & 0xffffffff;\n  lab_0x405b46:;\n    int32_t v100 = v55; // 0x405b46\n    if (v100 != (int32_t)v59) {\n        // 0x405b4a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405aee\n    return 0xffffffff;\n  lab_0x405b0a:\n    // 0x405b0a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405b11\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405aee\n    return v99 & 0xffffffff;\n  lab_0x405c50:\n    // 0x405c50\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405a85;\n  lab_0x405c04:\n    // 0x405c04\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4052f0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x405c2a\n    if ((int32_t)v101 != -1) {\n        // 0x405aee\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405c3f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405c50;\n}\n"
        },
        {
            "funcName": "function_405ee0",
            "funcStartAddr": "405ee0",
            "funcEndAddr": "405f36",
            "decompiledFuncCode": "int64_t function_405ee0(int64_t a1) {\n    // 0x405ee0\n    *(int32_t *)&g46 = g27;\n    *(int32_t *)&g47 = g26;\n    int64_t v1; // 0x405ee0\n    int64_t result = function_405910(v1, v1, v1, v1, v1, v1, &g46, a1 & 0xffffffff); // 0x405f06\n    g27 = *(int32_t *)&g46;\n    g51 = g49;\n    *(int32_t *)&g25 = g48;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405f40",
            "funcStartAddr": "405f40",
            "funcEndAddr": "405f58",
            "decompiledFuncCode": "int64_t function_405f40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405f40\n    return function_405ee0(1);\n}\n"
        },
        {
            "funcName": "function_405f60",
            "funcStartAddr": "405f60",
            "funcEndAddr": "405f73",
            "decompiledFuncCode": "int64_t function_405f60(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x405f60\n    return function_405ee0(0);\n}\n"
        },
        {
            "funcName": "function_405f80",
            "funcStartAddr": "405f80",
            "funcEndAddr": "405f95",
            "decompiledFuncCode": "int64_t function_405f80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405f80\n    return function_405910(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405fa0",
            "funcStartAddr": "405fa0",
            "funcEndAddr": "405fb6",
            "decompiledFuncCode": "int64_t function_405fa0(void) {\n    // 0x405fa0\n    return function_405ee0(0);\n}\n"
        },
        {
            "funcName": "function_405fc0",
            "funcStartAddr": "405fc0",
            "funcEndAddr": "405fd8",
            "decompiledFuncCode": "int64_t function_405fc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405fc0\n    return function_405910(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405fe0",
            "funcStartAddr": "405fe0",
            "funcEndAddr": "40605a",
            "decompiledFuncCode": "int64_t function_405fe0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405feb\n    int64_t v2 = (int64_t)&g2; // 0x405feb\n    int32_t * pwc; // 0x405fe0\n    int64_t v3; // 0x405fe0\n    int64_t n; // 0x405fe0\n    if (a2 == 0) {\n        goto lab_0x406032;\n    } else {\n        // 0x405fed\n        if (a3 == 0) {\n            // 0x406018\n            return -2;\n        }\n        // 0x405ff9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406032;\n        } else {\n            goto lab_0x406004;\n        }\n    }\n  lab_0x406032:\n    // 0x406032\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405fe0\n    pwc = (int32_t *)&v4;\n    goto lab_0x406004;\n  lab_0x406004:;\n    char * wstr = (char *)v3; // 0x40600a\n    int64_t ps; // 0x405fe0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40600a\n    int64_t result = v5; // 0x40600a\n    if (v5 < 0xfffffffe) {\n        // 0x406018\n        return result;\n    }\n    int64_t result2 = result; // 0x406049\n    if ((char)function_4060c0(0, v3) == 0) {\n        // 0x40604b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406018\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406060",
            "funcStartAddr": "406060",
            "funcEndAddr": "4060bd",
            "decompiledFuncCode": "int64_t function_406060(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406067\n    int64_t v2; // 0x406060\n    int64_t result = function_405050(a1, v2); // 0x406078\n    if ((v2 & 32) != 0) {\n        // 0x4060a0\n        if ((int32_t)result == 0) {\n            // 0x4060a4\n            *__errno_location() = 0;\n        }\n        // 0x40609a\n        return 0xffffffff;\n    }\n    // 0x406081\n    if ((int32_t)result == 0) {\n        // 0x40609a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406088\n    if (v1 == 0) {\n        // 0x40608a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40609a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4060c0",
            "funcStartAddr": "4060c0",
            "funcEndAddr": "40611e",
            "decompiledFuncCode": "int64_t function_4060c0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4060c6\n    if (locale == NULL) {\n        // 0x4060f3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4060c6\n    bool v2; // 0x4060c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x4060c0\n    int64_t v5 = v1; // 0x4060c0\n    int64_t v6 = 2; // 0x4060e5\n    unsigned char v7 = *(char *)v5; // 0x4060e5\n    char v8 = *(char *)v4; // 0x4060e5\n    char v9 = v8; // 0x4060e5\n    bool v10 = false; // 0x4060e5\n    while (v7 == v8) {\n        // 0x4060d8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4060f1\n    int64_t v13 = v1; // 0x4060f1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4060f3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4060f1\n    unsigned char v15 = *(char *)v13; // 0x40610d\n    char v16 = *(char *)v12; // 0x40610d\n    char v17 = v16; // 0x40610d\n    bool v18 = false; // 0x40610d\n    while (v15 == v16) {\n        // 0x406100\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406120",
            "funcStartAddr": "406120",
            "funcEndAddr": "406682",
            "decompiledFuncCode": "int64_t function_406120(void) {\n    char * v1 = nl_langinfo(14); // 0x406136\n    char * v2 = g50; // 0x40613b\n    char * v3; // 0x406120\n    int64_t v4; // 0x406120\n    int64_t v5; // 0x406120\n    int64_t v6; // 0x406120\n    int64_t v7; // 0x406120\n    int32_t size; // 0x406120\n    int32_t size2; // 0x406120\n    int32_t len; // 0x4061f2\n    int64_t v8; // 0x4061f2\n    char * env_val; // 0x4061dd\n    if (v2 == NULL) {\n        // 0x4061d8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406245;\n        } else {\n            // 0x4061ea\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406245;\n            } else {\n                // 0x4061ef\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4061dd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406675\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406245;\n                    } else {\n                        // 0x4065e9\n                        size2 = len + 14;\n                        goto lab_0x40620b;\n                    }\n                } else {\n                    goto lab_0x40620b;\n                }\n            }\n        }\n    } else {\n        // 0x406120\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40615a;\n    }\n  lab_0x40648c:;\n    // 0x40648c\n    struct _IO_FILE * stream; // 0x4062cb\n    int32_t v10 = __uflow(stream); // 0x40648f\n    int64_t v11; // 0x406120\n    int64_t v12 = v11; // 0x406499\n    int64_t v13; // 0x406120\n    int64_t v14 = v13; // 0x406499\n    int32_t v15 = v10; // 0x406499\n    int64_t v16; // 0x406120\n    int64_t v17 = v16; // 0x406499\n    int64_t v18 = v11; // 0x406499\n    int64_t v19 = v13; // 0x406499\n    int64_t v20 = v16; // 0x406499\n    if (v10 == -1) {\n        // break -> 0x40649f\n        goto lab_0x40649f;\n    }\n    goto lab_0x406319;\n  lab_0x40630e:;\n    // 0x40630e\n    int64_t v90; // 0x406120\n    int64_t * v32; // 0x406300\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406120\n    v12 = v89;\n    int64_t v91; // 0x406120\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406120\n    v17 = v92;\n    goto lab_0x406319;\n  lab_0x406319:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406120\n    int32_t v25; // bp-120, 0x406120\n    int32_t v26; // bp-184, 0x406120\n    int64_t v27; // 0x4062cb\n    int64_t v28; // 0x4062e8\n    int64_t v29; // 0x4062ed\n    int64_t * v30; // 0x406304\n    switch (c) {\n        case 32: {\n            goto lab_0x406300;\n        }\n        case 10: {\n            goto lab_0x406300;\n        }\n        case 9: {\n            goto lab_0x406300;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4064f1\n            int32_t v33; // 0x406120\n            char v34; // 0x406120\n            int32_t v35; // 0x4064fe\n            if (v31 < *v30) {\n                // 0x4064d0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4064fb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4064f1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4064d0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4064fb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4064e0\n                v36 = v33;\n            }\n            // 0x4065cf\n            if (v36 == -1) {\n                // break -> 0x40649f\n                break;\n            }\n            goto lab_0x406300;\n        }\n        default: {\n            // 0x40632f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40649f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406358\n            int64_t v39 = v37 + 4; // 0x40635a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406366\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406368\n            while (v41 == 0) {\n                // 0x406358\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406386\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406392\n            int64_t v45 = v43 + 4; // 0x406394\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4063a0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4063a2\n            while (v47 == 0) {\n                // 0x406392\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40638f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4063b8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4063c8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4063cc\n            int64_t v52 = v51 + v48; // 0x4063d5\n            int64_t * mem; // 0x406120\n            int64_t v53; // 0x406120\n            int64_t v54; // 0x406120\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40650b\n                int64_t v56 = v55 + 3; // 0x406517\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4063f1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406400\n            if (mem == NULL) {\n                // 0x40662c\n                free((int64_t *)v21);\n                function_405050(v27, v53);\n                v24 = (int64_t)&g2;\n                goto lab_0x4062a4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406418\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406422\n            uint32_t v62 = (int32_t)v59; // 0x406425\n            int64_t v63; // 0x406120\n            if (v62 >= 8) {\n                // 0x406534\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40654e\n                int64_t v66 = v61 - v65; // 0x406552\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40655d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40656e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40656e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40656b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4065ff\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406437\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40643b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40644b\n            int64_t v74 = v60 - 1; // 0x40644f\n            uint32_t v75 = (int32_t)v73; // 0x406454\n            int64_t v76; // 0x406120\n            if (v75 >= 8) {\n                // 0x406582\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40658c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40659c\n                int64_t v80 = v74 - v79; // 0x4065a0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4065ab\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4065bb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4065b9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406616\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40661e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406466\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40646a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406663\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40647e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40630e;\n            } else {\n                goto lab_0x40648c;\n            }\n        }\n    }\n  lab_0x406300:;\n    int64_t v93 = v23; // 0x406120\n    int64_t v94 = v22; // 0x406120\n    int64_t v95 = v21; // 0x406120\n    goto lab_0x406300_2;\n  lab_0x406245:;\n    int64_t * mem3 = malloc(size); // 0x406245\n    int64_t v97 = (int64_t)&g2; // 0x406250\n    int64_t v98; // 0x406120\n    int64_t path; // 0x406120\n    if (mem3 == NULL) {\n        goto lab_0x406222;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406245\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406266;\n    }\n  lab_0x40615a:;\n    int64_t str = v1 == NULL ? (int64_t)&g2 : (int64_t)v1; // 0x40614d\n    char v100 = *v3; // 0x40615a\n    int64_t v101; // 0x406120\n    if (v100 == 0) {\n        // 0x4061b4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406120\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406120\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4061a0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4061a7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406170\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40617d\n        char v107 = *(char *)v106; // 0x406182\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4061b4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40618b\n    v104 = v103 + 1;\n  lab_0x4061a7:\n    // 0x4061b4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406222:;\n    char * v108 = (char *)v97;\n    g50 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40615a;\n  lab_0x406266:;\n    int64_t v109 = v98 + path; // 0x406266\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406292\n    v24 = (int64_t)&g2;\n    if (fd >= 0) {\n        // 0x4062c1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4065f2\n            close(fd);\n            v24 = (int64_t)&g2;\n        } else {\n            // 0x4062e5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406300_2:;\n                uint64_t v96 = *v32; // 0x406300\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40648c;\n                } else {\n                    goto lab_0x40630e;\n                }\n            }\n          lab_0x40649f:\n            // 0x40649f\n            function_405050(v27, v19);\n            v24 = (int64_t)&g2;\n            if (v18 != 0) {\n                // 0x4064be\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4062a4;\n  lab_0x40620b:;\n    int64_t * mem4 = malloc(size2); // 0x40620b\n    v97 = (int64_t)&g2;\n    if (mem4 != NULL) {\n        // 0x4062b1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406266;\n    } else {\n        goto lab_0x406222;\n    }\n  lab_0x4062a4:\n    // 0x4062a4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406222;\n}\n"
        },
        {
            "funcName": "function_406690",
            "funcStartAddr": "406690",
            "funcEndAddr": "4066ed",
            "decompiledFuncCode": "int64_t function_406690(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406690\n    return function_401368();\n}\n"
        },
        {
            "funcName": "function_4066f0",
            "funcStartAddr": "4066f0",
            "funcEndAddr": "4066f1",
            "decompiledFuncCode": "int64_t function_4066f0(void) {\n    // 0x4066f0\n    int64_t result; // 0x4066f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406700",
            "funcStartAddr": "406700",
            "funcEndAddr": "406718",
            "decompiledFuncCode": "int64_t function_406700(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406700\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_406718",
            "funcStartAddr": "406718",
            "funcEndAddr": "406738",
            "decompiledFuncCode": "int64_t function_406718(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x406722\n    while (*(int64_t *)v1 != -1) {\n        // 0x406723\n        v1 -= 8;\n    }\n    // 0x406734\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_tsort.elf"
}