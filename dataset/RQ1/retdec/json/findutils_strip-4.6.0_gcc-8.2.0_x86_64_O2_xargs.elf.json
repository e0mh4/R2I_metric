{
    "funcInfo": [
        {
            "funcName": "function_402000",
            "funcStartAddr": "402000",
            "funcEndAddr": "402005",
            "decompiledFuncCode": "int64_t function_402000(void) {\n    // 0x402000\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402005",
            "funcStartAddr": "402005",
            "funcEndAddr": "40200a",
            "decompiledFuncCode": "int64_t function_402005(void) {\n    // 0x402005\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40200a",
            "funcStartAddr": "40200a",
            "funcEndAddr": "40200f",
            "decompiledFuncCode": "int64_t function_40200a(void) {\n    // 0x40200a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40200f",
            "funcStartAddr": "40200f",
            "funcEndAddr": "402014",
            "decompiledFuncCode": "int64_t function_40200f(void) {\n    // 0x40200f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402014",
            "funcStartAddr": "402014",
            "funcEndAddr": "402019",
            "decompiledFuncCode": "int64_t function_402014(void) {\n    // 0x402014\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402019",
            "funcStartAddr": "402019",
            "funcEndAddr": "40201e",
            "decompiledFuncCode": "int64_t function_402019(void) {\n    // 0x402019\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40201e",
            "funcStartAddr": "40201e",
            "funcEndAddr": "402023",
            "decompiledFuncCode": "int64_t function_40201e(void) {\n    // 0x40201e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402023",
            "funcStartAddr": "402023",
            "funcEndAddr": "402028",
            "decompiledFuncCode": "int64_t function_402023(void) {\n    // 0x402023\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402030",
            "funcStartAddr": "402030",
            "funcEndAddr": "402de0",
            "decompiledFuncCode": "int64_t function_402030(int64_t a1, int64_t a2) {\n    int32_t v1 = 0x6f686365; // bp-229, 0x402049\n    int64_t v2 = a2 == 0 ? (int64_t)\"xargs\" : a2;\n    function_4075c0((char *)v2);\n    int64_t v3; // 0x402030\n    function_4053a0(v2, a2, v3);\n    g46 = 0;\n    g49 = getpid();\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"findutils\", \"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"findutils\");\n    if ((int32_t)function_40bc80(0x4058e0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v3) == 0) {\n        // 0x40215d\n        if ((int32_t)function_40bc80(0x403ec0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v3) != 0) {\n            goto lab_0x4020b8;\n        } else {\n            goto lab_0x4020e2;\n        }\n    } else {\n        goto lab_0x4020b8;\n    }\n  lab_0x40222b:;\n    // 0x40222b\n    int64_t v4; // 0x402030\n    int64_t v5; // 0x402030\n    int64_t v6; // 0x402030\n    int64_t v7; // 0x402030\n    int64_t v8; // 0x402030\n    int64_t v9; // 0x402030\n    int32_t v10; // 0x402030\n    int32_t v11; // 0x402030\n    int32_t v12; // 0x402030\n    int32_t v13; // 0x402030\n    if (g94 == NULL) {\n        goto lab_0x40268b;\n    } else {\n        // 0x40223b\n        if (*g94 == 0) {\n            goto lab_0x40268b;\n        } else {\n            // 0x402244\n            g54 = g94;\n            v13 = v12;\n            v11 = v10;\n            v9 = v8;\n            v5 = v4;\n            v7 = v6;\n            goto lab_0x402128;\n        }\n    }\n  lab_0x4021f9:;\n    char * v14 = g94; // 0x4021f9\n    g60 = v14 == NULL ? \"{}\" : v14;\n    g64 = 0;\n    g63 = 0;\n    v13 = v12;\n    v11 = v10;\n    v9 = v8;\n    v5 = v4;\n    v7 = v6;\n    goto lab_0x402128;\n  lab_0x402128:;\n    int64_t v15 = v7;\n    int64_t v16 = v5;\n    int64_t v17 = v9;\n    int32_t v18 = v11;\n    int32_t v19 = v13;\n    int64_t v20; // bp-236, 0x402030\n    int64_t v21; // 0x402039\n    int64_t v22 = function_40b0f0(v21, a2, \"+0a:E:e::i::I:l::L:n:prs:txP:d:\", &g1, &v20, v17); // 0x40213c\n    int64_t v23 = v22; // 0x402144\n    int64_t v24 = v15; // 0x402144\n    int64_t v25 = v16; // 0x402144\n    int64_t v26 = v17; // 0x402144\n    int32_t v27 = v18; // 0x402144\n    int32_t v28 = v19; // 0x402144\n    int64_t str2; // 0x402030\n    int64_t v29; // 0x402030\n    int32_t v30; // 0x402030\n    int32_t v31; // 0x402030\n    if ((int32_t)v22 == -1) {\n        // 0x4026dc\n        str2 = v15;\n        v29 = v17;\n        v30 = v18;\n        v31 = v19;\n        if (v16 == 0x403790 == (g54 != NULL)) {\n            // 0x402cd6\n            error(0, (int32_t)\"warning: the -E option has no effect if -0 or -d is used.\\n\" ^ (int32_t)\"warning: the -E option has no effect if -0 or -d is used.\\n\", dcgettext(NULL, \"warning: the -E option has no effect if -0 or -d is used.\\n\", 5));\n            str2 = v15;\n            v29 = v17;\n            v30 = v18;\n            v31 = v19;\n            goto lab_0x4026f3;\n        } else {\n            goto lab_0x4026f3;\n        }\n    }\n    goto lab_0x40214a;\n  lab_0x40217b:\n    // 0x40217b\n    g45 = 1;\n    v13 = v12;\n    v11 = v10;\n    v9 = v8;\n    v5 = v4;\n    v7 = v6;\n    goto lab_0x402128;\n  lab_0x40268b:\n    // 0x40268b\n    g54 = NULL;\n    v13 = v12;\n    v11 = v10;\n    v9 = v8;\n    v5 = v4;\n    v7 = v6;\n    goto lab_0x402128;\n  lab_0x40244c:;\n    int64_t v46; // 0x402030\n    int64_t v47; // 0x402030\n    int64_t v42; // 0x402030\n    char * endptr; // bp-216, 0x402030\n    int64_t v48; // 0x402030\n    int64_t v34; // 0x40242c\n    unsigned char v35; // 0x40243c\n    if (v35 != 92) {\n        // 0x4026a5\n        error(1, (int32_t)\"Invalid input delimiter specification %s: the delimiter must be either a single character or an escape sequence starting with \\\\.\" ^ (int32_t)\"Invalid input delimiter specification %s: the delimiter must be either a single character or an escape sequence starting with \\\\.\", dcgettext(NULL, \"Invalid input delimiter specification %s: the delimiter must be either a single character or an escape sequence starting with \\\\.\", 5));\n        v42 = 0;\n        goto lab_0x40260c;\n    } else {\n        int64_t v49 = v34 + 1; // 0x402456\n        unsigned char v50 = *(char *)v49; // 0x402456\n        g96 = v50 - 92;\n        v42 = 92;\n        switch (v50) {\n            case 92: {\n                goto lab_0x40260c;\n            }\n            case 97: {\n                // 0x402a38\n                v42 = 7;\n                goto lab_0x40260c;\n            }\n            case 98: {\n                // 0x402a64\n                v42 = 8;\n                goto lab_0x40260c;\n            }\n            case 102: {\n                // 0x402a59\n                v42 = 12;\n                goto lab_0x40260c;\n            }\n            case 110: {\n                // 0x402a4e\n                v42 = 10;\n                goto lab_0x40260c;\n            }\n            case 114: {\n                // 0x402a43\n                v42 = 13;\n                goto lab_0x40260c;\n            }\n            case 116: {\n                // 0x402a7a\n                v42 = 9;\n                goto lab_0x40260c;\n            }\n            case 118: {\n                // 0x402a6f\n                v42 = 11;\n                goto lab_0x40260c;\n            }\n            default: {\n                int32_t * v51 = __errno_location(); // 0x40251a\n                if (v50 == 120) {\n                    // 0x402cfa\n                    *v51 = 0;\n                    endptr = NULL;\n                    int32_t str_as_ul = strtoul((char *)(v34 + 2), &endptr, 16); // 0x402d17\n                    int64_t v52 = str_as_ul; // 0x402d17\n                    v46 = v52;\n                    v48 = (int64_t)\"Invalid escape sequence %s in input delimiter specification; character values must not exceed %lx.\";\n                    v47 = v52;\n                    if (str_as_ul < 256) {\n                        goto lab_0x4025c8;\n                    } else {\n                        goto lab_0x40259d;\n                    }\n                } else {\n                    int16_t * v53 = *__ctype_b_loc(); // 0x402547\n                    int64_t str = v49; // 0x402550\n                    if ((*(char *)((2 * (int64_t)v50 | 1) + (int64_t)v53) & 8) == 0) {\n                        // 0x402d44\n                        error(1, (int32_t)\"Invalid escape sequence %s in input delimiter specification.\" ^ (int32_t)\"Invalid escape sequence %s in input delimiter specification.\", dcgettext(NULL, \"Invalid escape sequence %s in input delimiter specification.\", 5));\n                        str = 0;\n                    }\n                    // 0x40255a\n                    *v51 = 0;\n                    endptr = NULL;\n                    int32_t str_as_ul2 = strtoul((char *)str, &endptr, 8); // 0x402579\n                    int64_t v54 = str_as_ul2; // 0x402579\n                    v46 = v54;\n                    v48 = (int64_t)\"Invalid escape sequence %s in input delimiter specification; character values must not exceed %lo.\";\n                    v47 = v54;\n                    if (str_as_ul2 < 256) {\n                        goto lab_0x4025c8;\n                    } else {\n                        goto lab_0x40259d;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40260c:\n    // 0x40260c\n    *(char *)&g43 = (char)v42;\n    v13 = v12;\n    v11 = v10;\n    v9 = v34;\n    v5 = 0x403790;\n    v7 = v6;\n    goto lab_0x402128;\n  lab_0x4025c8:\n    // 0x4025c8\n    v42 = v47;\n    if (*endptr != 0) {\n        // 0x4025d3\n        error(1, (int32_t)\"Invalid escape sequence %s in input delimiter specification; trailing characters %s not recognised.\" ^ (int32_t)\"Invalid escape sequence %s in input delimiter specification; trailing characters %s not recognised.\", dcgettext(NULL, \"Invalid escape sequence %s in input delimiter specification; trailing characters %s not recognised.\", 5));\n        int64_t v55; // 0x402030\n        v42 = v55;\n    }\n    goto lab_0x40260c;\n  lab_0x40259d:\n    // 0x40259d\n    error(1, 0, dcgettext(NULL, (char *)v48, 5));\n    v47 = v46;\n    goto lab_0x4025c8;\n  lab_0x4020b8:\n    // 0x4020b8\n    error(1, *__errno_location(), dcgettext(NULL, \"The atexit library function failed\", 5));\n    goto lab_0x4020e2;\n  lab_0x4020e2:;\n    int32_t v56 = function_404ea0(&g56, 2048);\n    if (v56 >= 3) {\n        int32_t v57 = sysconf(_SC_ARG_MAX); // 0x4024a9\n        int64_t v58; // 0x402030\n        if (v57 < 1) {\n            // 0x4024da\n            v58 = g58;\n        } else {\n            if (v57 < 2049) {\n                // 0x402da2\n                __assert_fail(\"val > XARGS_POSIX_HEADROOM\", \"xargs.c\", 472, \"main\");\n                // 0x402dbb\n                __assert_fail(\"bc_ctl.arg_max >= LINE_MAX\", \"xargs.c\", 500, \"main\");\n                return &g100;\n            }\n            uint64_t v59 = g58; // 0x4024bf\n            uint64_t v60 = (int64_t)v57 - 2048; // 0x4024c6\n            int64_t v61 = v60 > v59 ? v59 : v60; // 0x4024cf\n            g58 = v61;\n            v58 = v61;\n        }\n        // 0x4024da\n        if (v58 < 2048) {\n            // 0x402dbb\n            __assert_fail(\"bc_ctl.arg_max >= LINE_MAX\", \"xargs.c\", 500, \"main\");\n            return &g100;\n        }\n        // 0x4024eb\n        g62 = 0x404120;\n        function_404f80(&g56);\n    }\n    // 0x402106\n    v21 = a1 & 0xffffffff;\n    int64_t v62 = function_40b0f0(v21, a2, \"+0a:E:e::i::I:l::L:n:prs:txP:d:\", &g1, &v20, v3); // 0x40213c\n    str2 = (int64_t)\"-\";\n    v30 = 1;\n    v31 = 0;\n    bool v41; // 0x402030\n    if ((int32_t)v62 != -1) {\n        // 0x40214a\n        v23 = v62;\n        v24 = (int64_t)\"-\";\n        v25 = 0x4038b0;\n        v27 = 1;\n        v28 = 0;\n        while (true) {\n          lab_0x40214a:\n            // 0x40214a\n            v12 = v28;\n            v10 = v27;\n            v8 = v26;\n            v4 = v25;\n            v6 = v24;\n            int64_t v32 = v23 + 0xffffffd0; // 0x40214a\n            g95 = v32 & 0xffffffff;\n            v13 = 1;\n            v11 = v10;\n            v9 = v8;\n            v5 = v4;\n            v7 = v6;\n            switch ((int32_t)v32) {\n                case 0: {\n                    // 0x402250\n                    *(char *)&g43 = 0;\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = 0x403790;\n                    v7 = v6;\n                    goto lab_0x402128;\n                }\n                case 21: {\n                    goto lab_0x40222b;\n                }\n                case 25: {\n                    goto lab_0x4021f9;\n                }\n                case 28: {\n                    int64_t v33 = function_403570((int64_t)g94, 76, 1, -1, 1); // 0x4021d2\n                    g64 = 0;\n                    g63 = v33;\n                    g60 = NULL;\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = v6;\n                    goto lab_0x402128;\n                }\n                case 32: {\n                    // 0x40218e\n                    g16 = function_403570((int64_t)g94, 80, 0, 0x7fffffff, 1);\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = v6;\n                    goto lab_0x402128;\n                }\n                case 35: {\n                    goto lab_0x402128;\n                }\n                case 49: {\n                    // 0x402472\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = (int64_t)g94;\n                    goto lab_0x402128;\n                }\n                case 52: {\n                    // 0x40242c\n                    v34 = (int64_t)g94;\n                    v35 = *g94;\n                    int64_t v36 = v35; // 0x40243c\n                    int64_t v37 = v34; // 0x402440\n                    int64_t v38 = -1; // 0x402030\n                    while (v38 != 0) {\n                        int64_t v39 = v37;\n                        int64_t v40 = v38 - 1; // 0x402440\n                        v38 = v40;\n                        v37 = v39 + (v41 ? -1 : 1);\n                        if (*(char *)v39 == 0) {\n                            v42 = v36;\n                            if (v40 == -3) {\n                                goto lab_0x40260c;\n                            } else {\n                                goto lab_0x40244c;\n                            }\n                        }\n                    }\n                    goto lab_0x40244c;\n                }\n                case 53: {\n                    goto lab_0x40222b;\n                }\n                case 56: {\n                    // 0x40247e\n                    function_4032b0((int64_t)g31);\n                    // 0x402334\n                    return 0;\n                }\n                case 57: {\n                    goto lab_0x4021f9;\n                }\n                case 60: {\n                    int32_t v43 = 1; // 0x4023eb\n                    if (g94 != NULL) {\n                        // 0x4023f1\n                        v43 = function_403570((int64_t)g94, 108, 1, -1, 1);\n                    }\n                    // 0x402411\n                    g63 = v43;\n                    g64 = 0;\n                    g60 = NULL;\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = v6;\n                    goto lab_0x402128;\n                }\n                case 62: {\n                    int64_t v44 = function_403570((int64_t)g94, 110, 1, -1, 1); // 0x4023b0\n                    g63 = 0;\n                    g64 = v44;\n                    if (v44 != 1 || g60 == NULL) {\n                        // 0x4023d1\n                        g60 = NULL;\n                        v13 = v12;\n                        v11 = v10;\n                        v9 = v8;\n                        v5 = v4;\n                        v7 = v6;\n                    } else {\n                        // 0x40263c\n                        g64 = 0;\n                        v13 = v12;\n                        v11 = v10;\n                        v9 = v8;\n                        v5 = v4;\n                        v7 = v6;\n                    }\n                    goto lab_0x402128;\n                }\n                case 64: {\n                    // 0x402174\n                    g44 = 1;\n                    goto lab_0x40217b;\n                }\n                case 66: {\n                    // 0x402388\n                    v13 = v12;\n                    v11 = 0;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = v6;\n                    goto lab_0x402128;\n                }\n                case 67: {\n                    int64_t v45 = function_403570((int64_t)g94, 115, 1, g57, 0); // 0x402364\n                    if (g57 < v45) {\n                        // 0x40264c\n                        error(0, (int32_t)\"warning: value %ld for -s option is too large, using %ld instead\" ^ (int32_t)\"warning: value %ld for -s option is too large, using %ld instead\", dcgettext(NULL, \"warning: value %ld for -s option is too large, using %ld instead\", 5));\n                    }\n                    // 0x40237c\n                    g58 = v45;\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = v6;\n                    goto lab_0x402128;\n                }\n                case 68: {\n                    goto lab_0x40217b;\n                }\n                case 70: {\n                    // 0x402328\n                    function_404580(\"xargs\");\n                    // 0x402334\n                    return 0;\n                }\n                case 72: {\n                    // 0x402319\n                    *(int32_t *)&g56 = 1;\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = v6;\n                    goto lab_0x402128;\n                }\n                case 80: {\n                    // 0x402262\n                    if (strchr(g94, 61) != NULL) {\n                        // 0x402278\n                        error(1, (int32_t)\"option --%s may not be set to a value which includes `='\" ^ (int32_t)\"option --%s may not be set to a value which includes `='\", dcgettext(NULL, \"option --%s may not be set to a value which includes `='\", 5));\n                    }\n                    // 0x4022b4\n                    g42 = g94;\n                    v13 = v12;\n                    v11 = v10;\n                    v9 = v8;\n                    v5 = v4;\n                    v7 = v6;\n                    if (unsetenv(g94) != 0) {\n                        // 0x4022dc\n                        error(1, *__errno_location(), dcgettext(NULL, \"failed to unset environment variable %s\", 5));\n                        v13 = v12;\n                        v11 = v10;\n                        v9 = v8;\n                        v5 = v4;\n                        v7 = v6;\n                    }\n                    goto lab_0x402128;\n                }\n                default: {\n                    goto lab_0x402491;\n                }\n            }\n        }\n      lab_0x402491:\n        // 0x402491\n        function_4032b0((int64_t)g35);\n        // 0x402334\n        return 1;\n    }\n    goto lab_0x4026f3;\n  lab_0x4026f3:\n    if (v56 != 0) {\n        // 0x402d89\n        __assert_fail(\"BC_INIT_OK == bcstatus\", \"xargs.c\", 674, \"main\");\n        // 0x402da2\n        __assert_fail(\"val > XARGS_POSIX_HEADROOM\", \"xargs.c\", 472, \"main\");\n        // 0x402dbb\n        __assert_fail(\"bc_ctl.arg_max >= LINE_MAX\", \"xargs.c\", 500, \"main\");\n        return &g100;\n    }\n    // 0x4026ff\n    endptr = (char *)0x402ed0;\n    int64_t set; // bp-208, 0x402030\n    sigemptyset((struct _TYPEDEF_sigset_t *)&set);\n    if (sigaction(SIGBUS, (struct sigaction *)&endptr, NULL) != 0) {\n        // 0x402c97\n        error(0, *__errno_location(), dcgettext(NULL, \"Cannot set SIGUSR1 signal handler\", 5));\n    }\n    // 0x402736\n    endptr = (char *)0x403720;\n    sigemptyset((struct _TYPEDEF_sigset_t *)&set);\n    int32_t v63 = sigaction(SIGSYS, (struct sigaction *)&endptr, NULL); // 0x402760\n    int64_t v64 = 0; // 0x402767\n    if (v63 != 0) {\n        char * format = dcgettext(NULL, \"Cannot set SIGUSR2 signal handler\", 5); // 0x402c77\n        error(0, *__errno_location(), format);\n        v64 = (int64_t)format;\n    }\n    // 0x40276d\n    int64_t v65; // 0x402030\n    int64_t v66; // 0x402030\n    if (strcmp((char *)str2, \"-\") != 0) {\n        // 0x402c05\n        g71 = 1;\n        int64_t v67 = function_4036c0(str2, (int64_t)\"-\"); // 0x402c12\n        g73 = (struct _IO_FILE *)v67;\n        v65 = (int64_t)&g1;\n        v66 = v64;\n        if (v67 == 0) {\n            int64_t v68 = function_408c90(0, 8, str2); // 0x402c31\n            char * format2 = dcgettext(NULL, \"Cannot open input file %s\", 5); // 0x402c45\n            error(1, *__errno_location(), format2);\n            v65 = v68;\n            v66 = (int64_t)format2;\n        }\n    } else {\n        // 0x402782\n        *(int64_t *)&g73 = (int64_t)g32;\n        v65 = (int64_t)&g1;\n        v66 = v64;\n    }\n    // 0x402790\n    if (g60 == NULL != (g63 == 0)) {\n        // 0x40279e\n        *(int32_t *)&g56 = 1;\n    }\n    int64_t v69 = a2; // 0x4027ae\n    int64_t v70 = v21; // 0x4027ae\n    if (*(int32_t *)0x61233c == (int32_t)a1) {\n        // 0x4027b0\n        g28 = 0;\n        int64_t v71 = &v1; // bp-224, 0x4027c9\n        v69 = &v71;\n        v70 = 1;\n    }\n    int64_t v72 = v66; // 0x4027d3\n    if (v31 != 0) {\n        // 0x402a85\n        function_404e60();\n        fprintf(g35, dcgettext(NULL, \"Your environment variables take up %lu bytes\\n\", 5));\n        fprintf(g35, dcgettext(NULL, \"POSIX upper limit on argument length (this system): %lu\\n\", 5));\n        fprintf(g35, dcgettext(NULL, \"POSIX smallest allowable upper limit on argument length (all systems): %lu\\n\", 5));\n        function_404e60();\n        fprintf(g35, dcgettext(NULL, \"Maximum length of command we could actually use: %lu\\n\", 5));\n        fprintf(g35, dcgettext(NULL, \"Size of command buffer we are actually using: %lu\\n\", 5));\n        fprintf(g35, dcgettext(NULL, \"Maximum parallelism (--max-procs must be no greater): %lu\\n\", 5));\n        v72 = 0x7fffffff;\n        if (isatty(0) != 0) {\n            // 0x402ba3\n            fprintf(g35, dcgettext(NULL, \"\\nExecution of xargs will continue now, and it will try to read its input and run commands; if this is not what you wanted to happen, please type the end-of-file keystroke.\\n\", 5));\n            v72 = 5;\n            if (v30 != 0) {\n                // 0x402bd0\n                fprintf(g35, dcgettext(NULL, \"Warning: %s will be run at least once.  If you do not want that to happen, then press the interrupt keystroke.\\n\", 5));\n                v72 = *(int64_t *)(8 * (int64_t)g28 + v69);\n            }\n        }\n    }\n    // 0x4027d9\n    int64_t v73; // bp-280, 0x402030\n    int64_t v74 = &v73; // 0x40203f\n    g72 = (char *)function_409680(g58 + 1);\n    g67 = function_409680(g58 + 1);\n    signal(SIGSTOP, SIG_DFL);\n    if (g60 == NULL) {\n        int64_t v75 = g28; // 0x40298b\n        int64_t v76 = v65; // 0x402994\n        int64_t v77 = v72; // 0x402994\n        int64_t v78 = &v20; // 0x402994\n        int64_t v79 = v29; // 0x402994\n        if (v70 > v75) {\n            int64_t * v80 = (int64_t *)(v74 - 8); // 0x40296d\n            int64_t v81 = *(int64_t *)(8 * v75 + v69); // 0x402952\n            int64_t v82 = v81; // 0x402964\n            int64_t v83 = -1;\n            int64_t v84 = 0; // 0x402964\n            int64_t v85; // 0x402030\n            int64_t v86; // 0x402964\n            while (v83 != 0) {\n                v85 = v82;\n                v86 = v83 - 1;\n                v82 = v85 + (v41 ? -1 : 1);\n                v84 = v86;\n                if (*(char *)v85 == 0) {\n                    // break -> 0x40298b\n                    break;\n                }\n                v83 = v86;\n                v84 = 0;\n            }\n            // 0x40298b\n            *v80 = 0;\n            *(int64_t *)(v74 - 16) = (int64_t)g18;\n            int64_t v87 = -1 - v84;\n            function_4047a0(&g56, &g65, v81, v87, 0, 0, (int64_t)&g100);\n            g28 = &g29;\n            int64_t v88 = &g29; // 0x402994\n            int64_t v89 = &g65; // 0x402994\n            while (v70 > (int64_t)(int32_t)&g29) {\n                // 0x402952\n                v81 = *(int64_t *)(8 * v88 + v69);\n                v82 = v81;\n                v83 = -1;\n                v84 = 0;\n                while (v83 != 0) {\n                    v85 = v82;\n                    v86 = v83 - 1;\n                    v82 = v85 + (v41 ? -1 : 1);\n                    v84 = v86;\n                    if (*(char *)v85 == 0) {\n                        // break -> 0x40298b\n                        break;\n                    }\n                    v83 = v86;\n                    v84 = 0;\n                }\n                // 0x40298b\n                *v80 = v89;\n                *(int64_t *)(v74 - 16) = (int64_t)g18;\n                v87 = -1 - v84;\n                function_4047a0(&g56, &g65, v81, v87, 0, 0, (int64_t)&g100);\n                g28 = &g29;\n                v88 = &g29;\n                v89 = &g65;\n            }\n            // 0x40298b\n            v76 = v87;\n            v77 = v81;\n            v78 = *v80;\n            v79 = 0;\n        }\n        // 0x402996\n        g18 = 0;\n        g61 = g65;\n        g69 = g68;\n        if ((int32_t)g68 == -1) {\n            goto lab_0x402a02;\n        } else {\n            int64_t v90 = g63; // 0x4029c1\n            int64_t v91 = g70; // 0x4029cb\n            int64_t v92 = v90; // 0x4029cb\n            if (g63 != 0 && g70 >= v90) {\n                // 0x4029d6\n                v92 = function_404c00(&g56, &g65, v77, v76, v78, v79);\n                g70 = 0;\n                v91 = 0;\n            }\n            int64_t v93 = v91;\n            while ((int32_t)v92 != -1) {\n                // 0x4029c1\n                v90 = g63;\n                v91 = v93;\n                v92 = v90;\n                if (g63 != 0 && v93 >= v90) {\n                    // 0x4029d6\n                    v92 = function_404c00(&g56, &g65, v77, v76, v78, v79);\n                    g70 = 0;\n                    v91 = 0;\n                }\n                // 0x4029b9\n                v93 = v91;\n            }\n            // 0x4029f2\n            if (g65 != g61) {\n                goto lab_0x402a12;\n            } else {\n                goto lab_0x402a02;\n            }\n        }\n      lab_0x402a02:\n        // 0x402a02\n        if (*(int32_t *)(v74 + 12) == 0 || g53 != 0) {\n            // 0x402a21\n            g46 = g47;\n            // 0x402334\n            return g47;\n        }\n        goto lab_0x402a12;\n      lab_0x402a12:\n        // 0x402a12\n        function_404c00(&g56, &g65, v77, v76, v78, v79);\n        // 0x402a21\n        g46 = g47;\n        // 0x402334\n        return g47;\n    }\n    int64_t v94 = function_409680(0x100000000 * v70 >> 29); // 0x40282c\n    int64_t v95 = g28; // 0x402831\n    int64_t v96 = v41 ? -1 : 1;\n    if (v70 > v95) {\n        int64_t v97 = 8 * v95; // 0x402845\n        int64_t v98 = *(int64_t *)(v97 + v69); // 0x40284c\n        int64_t v99 = -1;\n        int64_t v100 = 0; // 0x40284c\n        int64_t v101; // 0x402030\n        int64_t v102; // 0x40284c\n        while (v99 != 0) {\n            v101 = v98;\n            v102 = v99 - 1;\n            v98 = v101 + v96;\n            v100 = v102;\n            if (*(char *)v101 == 0) {\n                // break -> \n                break;\n            }\n            v99 = v102;\n            v100 = 0;\n        }\n        *(int64_t *)(v97 + v94) = -2 - v100;\n        int64_t v103 = v95 + 1; // 0x402859\n        int64_t v104 = v103; // 0x40285f\n        while (v103 != v70) {\n            // 0x402845\n            v97 = 8 * v104;\n            v98 = *(int64_t *)(v97 + v69);\n            v99 = -1;\n            v100 = 0;\n            while (v99 != 0) {\n                v101 = v98;\n                v102 = v99 - 1;\n                v98 = v101 + v96;\n                v100 = v102;\n                if (*(char *)v101 == 0) {\n                    // break -> \n                    break;\n                }\n                v99 = v102;\n                v100 = 0;\n            }\n            *(int64_t *)(v97 + v94) = -2 - v100;\n            v103 = v104 + 1;\n            v104 = v103;\n        }\n    }\n    int64_t v105 = -1; // 0x40286e\n    int64_t v106 = (int64_t)g60; // 0x40286e\n    int64_t v107 = 0; // 0x40286e\n    while (v105 != 0) {\n        int64_t v108 = v106;\n        v105--;\n        v106 = v108 + v96;\n        v107 = v105;\n        if (*(char *)v108 == 0) {\n            // break -> \n            break;\n        }\n        v107 = 0;\n    }\n    int64_t v109 = -2 - v107; // 0x402876\n    g59 = v109;\n    if ((int32_t)v109 == -1) {\n        // 0x402a21\n        g46 = g47;\n        // 0x402334\n        return g47;\n    }\n    int64_t * v110 = (int64_t *)(v74 - 8);\n    int64_t * v111 = (int64_t *)(v74 - 16);\n    function_405050(&g56, &g65);\n    int64_t v112 = g28; // 0x4028b1\n    int64_t v113 = (0x100000000 * v109 >> 32) - 1; // 0x4028b8\n    g68 = 0;\n    int64_t v114 = 8 * v112; // 0x4028c7\n    int64_t v115 = *(int64_t *)(v114 + v94); // 0x4028c7\n    int64_t v116 = *(int64_t *)(v114 + v69); // 0x4028cb\n    *v110 = v112;\n    *v111 = (int64_t)g18;\n    function_4047a0(&g56, &g65, v116, v115 + 1, 0, 0, (int64_t)&g100);\n    g18 = 0;\n    int64_t v117 = &g29; // 0x4028fd\n    int64_t v118 = *v110; // 0x4028fd\n    int64_t v119 = *v111; // 0x4028fd\n    int64_t v120; // 0x402904\n    int64_t v121; // 0x402904\n    int64_t v122; // 0x402908\n    int64_t v123; // 0x402923\n    if (v70 > (int64_t)&g29) {\n        v120 = 8 * v117;\n        v121 = *(int64_t *)(v120 + v94);\n        v122 = *(int64_t *)(v120 + v69);\n        v123 = v117 + 1;\n        *v111 = (int64_t)0;\n        *(int64_t *)(v74 - 24) = v113;\n        *(int64_t *)(v74 - 32) = (int64_t)g72;\n        function_404a40(&g56, &g65, v122, v121, 0, 0, (int64_t)&g100, (int64_t)&g100, (int64_t)&g100);\n        v118 = v121;\n        v119 = v122;\n        while (v70 > v123) {\n            // 0x402900\n            v120 = 8 * v123;\n            v121 = *(int64_t *)(v120 + v94);\n            v122 = *(int64_t *)(v120 + v69);\n            v123++;\n            *v111 = (int64_t)g18;\n            *(int64_t *)(v74 - 24) = v113;\n            *(int64_t *)(v74 - 32) = (int64_t)g72;\n            function_404a40(&g56, &g65, v122, v121, 0, 0, (int64_t)&g100, (int64_t)&g100, (int64_t)&g100);\n            v118 = v121;\n            v119 = v122;\n        }\n    }\n    int64_t v124 = function_404c00(&g56, &g65, v119, v118, 0, 0); // 0x402948\n    while ((int32_t)v124 != -1) {\n        // 0x402894\n        function_405050(&g56, &g65);\n        v112 = g28;\n        v113 = (0x100000000 * v124 >> 32) - 1;\n        g68 = 0;\n        v114 = 8 * v112;\n        v115 = *(int64_t *)(v114 + v94);\n        v116 = *(int64_t *)(v114 + v69);\n        *v110 = v112;\n        *v111 = (int64_t)g18;\n        function_4047a0(&g56, &g65, v116, v115 + 1, 0, 0, (int64_t)&g100);\n        g18 = 0;\n        v117 = &g29;\n        v118 = *v110;\n        v119 = *v111;\n        if (v70 > (int64_t)&g29) {\n            v120 = 8 * v117;\n            v121 = *(int64_t *)(v120 + v94);\n            v122 = *(int64_t *)(v120 + v69);\n            v123 = v117 + 1;\n            *v111 = (int64_t)0;\n            *(int64_t *)(v74 - 24) = v113;\n            *(int64_t *)(v74 - 32) = (int64_t)g72;\n            function_404a40(&g56, &g65, v122, v121, 0, 0, (int64_t)&g100, (int64_t)&g100, (int64_t)&g100);\n            v118 = v121;\n            v119 = v122;\n            while (v70 > v123) {\n                // 0x402900\n                v120 = 8 * v123;\n                v121 = *(int64_t *)(v120 + v94);\n                v122 = *(int64_t *)(v120 + v69);\n                v123++;\n                *v111 = (int64_t)g18;\n                *(int64_t *)(v74 - 24) = v113;\n                *(int64_t *)(v74 - 32) = (int64_t)g72;\n                function_404a40(&g56, &g65, v122, v121, 0, 0, (int64_t)&g100, (int64_t)&g100, (int64_t)&g100);\n                v118 = v121;\n                v119 = v122;\n            }\n        }\n        // 0x40293e\n        v124 = function_404c00(&g56, &g65, v119, v118, 0, 0);\n    }\n    // 0x402a21\n    g46 = g47;\n    // 0x402334\n    return g47;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402de0",
            "funcEndAddr": "402e0b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402de0\n    int64_t v1; // 0x402de0\n    __libc_start_main(0x402030, (int32_t)a4, (char **)&v1, (void (*)())0x40bc10, (void (*)())0x40bc70, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e0b",
            "funcStartAddr": "402e0b",
            "funcEndAddr": "402e2a",
            "decompiledFuncCode": "int64_t function_402e0b(void) {\n    // 0x402e0b\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_402e2a",
            "funcStartAddr": "402e2a",
            "funcEndAddr": "402e61",
            "decompiledFuncCode": "int64_t function_402e2a(void) {\n    // 0x402e2a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402e61",
            "funcStartAddr": "402e61",
            "funcEndAddr": "402eb8",
            "decompiledFuncCode": "int64_t function_402e61(void) {\n    // 0x402e61\n    if (g36 != 0) {\n        // 0x402eb7\n        int64_t result; // 0x402e61\n        return result;\n    }\n    int64_t v1 = g37; // 0x402e94\n    int64_t result2; // 0x402ea6\n    if (g37 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x402ea6\n        result2 = function_402e0b();\n        g36 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x402e96\n        v1++;\n    }\n    // 0x402e8a\n    g37 = v1;\n    // 0x402ea6\n    result2 = function_402e0b();\n    g36 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402eb8",
            "funcStartAddr": "402eb8",
            "funcEndAddr": "402ebd",
            "decompiledFuncCode": "int64_t function_402eb8(void) {\n    // 0x402eb8\n    return function_402e2a();\n}\n"
        },
        {
            "funcName": "function_402ec0",
            "funcStartAddr": "402ec0",
            "funcEndAddr": "402ec1",
            "decompiledFuncCode": "int64_t function_402ec0(void) {\n    // 0x402ec0\n    int64_t result; // 0x402ec0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ed0",
            "funcStartAddr": "402ed0",
            "funcEndAddr": "402ef7",
            "decompiledFuncCode": "int64_t function_402ed0(void) {\n    int64_t result = 0x7fffffff; // 0x402edb\n    if (g16 != 0x7fffffff) {\n        // 0x402edd\n        g16 = &g17;\n        result = &g17;\n    }\n    // 0x402eec\n    g48 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402f00",
            "funcStartAddr": "402f00",
            "funcEndAddr": "402f2a",
            "decompiledFuncCode": "int64_t function_402f00(int64_t a1) {\n    // 0x402f00\n    error(1, (int32_t)\"environment is too large for exec\" ^ (int32_t)\"environment is too large for exec\", dcgettext(NULL, \"environment is too large for exec\", 5));\n    return &g100;\n}\n"
        },
        {
            "funcName": "function_402f30",
            "funcStartAddr": "402f30",
            "funcEndAddr": "40319f",
            "decompiledFuncCode": "int64_t function_402f30(int64_t a1, uint32_t a2) {\n    // 0x402f30\n    int64_t result; // 0x402f30\n    if (g52 == 0) {\n        // 0x402fa2\n        return result;\n    }\n    int64_t v1 = 0; // 0x402f63\n    int32_t options; // 0x402f30\n    int32_t result2; // 0x402f8c\n    while (true) {\n        // 0x402f68\n        g48 = 0;\n        int64_t v2 = (a1 ^ 1) & (int64_t)(v1 >= (int64_t)a2); // 0x402f7e\n        int32_t * v3; // 0x402f30\n        int64_t v4; // 0x402f30\n        int32_t stat_loc; // bp-60, 0x402f30\n        int64_t v5; // 0x402f30\n        while (true) {\n            int64_t v6 = v2;\n            options = v6;\n            while (true) {\n                // 0x402f80\n                result2 = waitpid(-1, &stat_loc, options);\n                if (result2 == -1) {\n                    int32_t * err_num = __errno_location(); // 0x402fb8\n                    if (*err_num != 4) {\n                        // 0x402fc5\n                        error(1, *err_num, dcgettext(NULL, \"error waiting for child process\", 5));\n                    }\n                    // 0x402fe8\n                    if (g48 != 0) {\n                        // break -> 0x402ff2\n                        break;\n                    }\n                } else {\n                    if (result2 == 0) {\n                        // break (via goto) -> 0x402f9a\n                        goto lab_0x402f9a;\n                    }\n                    // 0x403000\n                    if (g50 != 0) {\n                        uint64_t v7 = (int64_t)g50; // 0x403000\n                        v5 = (int64_t)g51;\n                        v4 = 0;\n                        if (*g51 == result2) {\n                            // break (via goto) -> 0x403040\n                            goto lab_0x403040_3;\n                        }\n                        int64_t v8 = 1; // 0x40302d\n                        while (v8 < v7) {\n                            int32_t * v9 = (int32_t *)(4 * v8 + v5);\n                            int64_t v10 = v8; // 0x40302b\n                            v3 = v9;\n                            if (*v9 == result2) {\n                                goto lab_0x403040_2;\n                            }\n                            v8 = v10 + 1 & 0xffffffff;\n                        }\n                        // 0x403038\n                        v4 = v8;\n                        if (v8 != v7) {\n                            // break (via goto) -> 0x403040\n                            goto lab_0x403040_3;\n                        }\n                    }\n                }\n            }\n            // 0x402ff2\n            v2 = (char)a1 == 0 ? 1 : v6 & 0xffffffff;\n        }\n      lab_0x403040_3:\n        // 0x403040\n        v3 = (int32_t *)(4 * v4 + v5);\n      lab_0x403040_2:\n        // 0x403040\n        *v3 = 0;\n        g52--;\n        int32_t v11 = stat_loc; // 0x40305f\n        if ((stat_loc & 0xff00) == 0xff00) {\n            // 0x403127\n            error(124, (int32_t)\"%s: exited with status 255; aborting\" ^ (int32_t)\"%s: exited with status 255; aborting\", dcgettext(NULL, \"%s: exited with status 255; aborting\", 5));\n            v11 = stat_loc;\n        }\n        int32_t v12 = v11; // 0x403068\n        if ((char)v11 == 127) {\n            // 0x4030e2\n            error(125, (int32_t)\"%s: stopped by signal %d\" ^ (int32_t)\"%s: stopped by signal %d\", dcgettext(NULL, \"%s: stopped by signal %d\", 5));\n            v12 = stat_loc;\n        }\n        int64_t v13 = v12;\n        int64_t v14 = v13 % 128 + 1; // 0x40306f\n        int64_t v15 = v14; // 0x403074\n        int64_t v16 = v13; // 0x403074\n        if ((char)v14 >= 2) {\n            // 0x403076\n            error(125, (int32_t)\"%s: terminated by signal %d\" ^ (int32_t)\"%s: terminated by signal %d\", dcgettext(NULL, \"%s: terminated by signal %d\", 5));\n            v15 = &g100;\n            v16 = stat_loc;\n        }\n        // 0x4030b6\n        if ((char)(v16 / 256) != 0) {\n            // 0x4030bb\n            g47 = 123;\n        }\n        // 0x4030c5\n        v1 = v1 + 1 & 0xffffffff;\n        result = v15;\n        if (g52 == 0) {\n            // 0x402fa2\n            return result;\n        }\n    }\n  lab_0x402f9a:\n    // 0x402f9a\n    if (options != 0) {\n        // 0x402fa2\n        return result2;\n    }\n    // 0x403166\n    error(0, (int32_t)\"WARNING: Lost track of %lu child processes\" ^ (int32_t)\"WARNING: Lost track of %lu child processes\", dcgettext(NULL, \"WARNING: Lost track of %lu child processes\", 5));\n    return &g100;\n}\n"
        },
        {
            "funcName": "function_4031a0",
            "funcStartAddr": "4031a0",
            "funcEndAddr": "4032b0",
            "decompiledFuncCode": "int64_t function_4031a0(int64_t a1) {\n    int32_t v1 = g50; // 0x4031ad\n    int64_t v2 = v1; // 0x4031ad\n    int32_t * v3 = g51; // 0x4031b4\n    int64_t v4 = (int64_t)v3; // 0x4031b4\n    int64_t v5; // 0x4031a0\n    int64_t v6; // 0x4031a0\n    int64_t v7; // 0x4031a0\n    int64_t v8; // 0x4031a0\n    int64_t v9; // 0x4031a0\n    int64_t v10; // 0x4031a0\n    int32_t * v11; // 0x4031a0\n    int32_t v12; // 0x4031a0\n    int64_t v13; // 0x4031a0\n    if (v1 == 0) {\n        // 0x40321c\n        v9 = 0;\n        v12 = 32;\n        v10 = 0;\n        v13 = 128;\n        if (v3 == NULL) {\n            goto lab_0x403238;\n        } else {\n            goto lab_0x403225;\n        }\n    } else {\n        // 0x4031c0\n        v11 = v3;\n        v7 = 0;\n        if (*v3 == 0) {\n            goto lab_0x4031fd;\n        } else {\n            int64_t v14 = 1; // 0x4031da\n            int64_t v15 = 4 * v14; // 0x4031e0\n            while (v14 < v2) {\n                int32_t * v16 = (int32_t *)(v15 + v4);\n                v11 = v16;\n                v7 = v14;\n                if (*v16 == 0) {\n                    goto lab_0x4031fd;\n                }\n                v14 = v14 + 1 & 0xffffffff;\n                v15 = 4 * v14;\n            }\n            // 0x4031ed\n            v5 = v4;\n            v8 = v15;\n            v6 = v14;\n            v9 = v15;\n            if (v14 == v2) {\n                goto lab_0x403225;\n            } else {\n                goto lab_0x4031ef;\n            }\n        }\n    }\n  lab_0x4031fd:\n    // 0x4031fd\n    *v11 = (int32_t)a1;\n    g52++;\n    g53 = 1;\n    return v7 & 0xffffffff;\n  lab_0x403238:\n    // 0x403238\n    g50 = v12;\n    int64_t v17 = function_4096d0(v4, v13); // 0x403242\n    g51 = (int32_t *)v17;\n    v5 = v17;\n    v8 = v10;\n    v6 = v2;\n    if (v1 < g50) {\n        int64_t v18 = v2; // 0x40325c\n        *(int32_t *)(4 * v18 + v17) = 0;\n        v18 = v18 + 1 & 0xffffffff;\n        v5 = v17;\n        v8 = v10;\n        v6 = v2;\n        while (v18 < (int64_t)g50) {\n            // 0x403260\n            *(int32_t *)(4 * v18 + v17) = 0;\n            v18 = v18 + 1 & 0xffffffff;\n            v5 = v17;\n            v8 = v10;\n            v6 = v2;\n        }\n    }\n    goto lab_0x4031ef;\n  lab_0x403225:;\n    int64_t v20 = v2 + 1 + v2 / 2; // 0x40322b\n    v12 = v20;\n    v10 = v9;\n    v13 = 4 * v20;\n    goto lab_0x403238;\n  lab_0x4031ef:;\n    int32_t * v19 = (int32_t *)(v8 + v5); // 0x4031f3\n    v11 = v19;\n    v7 = v6;\n    if (*v19 != 0) {\n        // 0x40328f\n        __assert_fail(\"0 == pids[i]\", \"xargs.c\", 1420, \"add_proc\");\n        return &g100;\n    }\n    goto lab_0x4031fd;\n}\n"
        },
        {
            "funcName": "function_4032b0",
            "funcStartAddr": "4032b0",
            "funcEndAddr": "40356b",
            "decompiledFuncCode": "int64_t function_4032b0(int64_t a1) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4032dc\n    fprintf(stream, dcgettext(NULL, \"Usage: %s [OPTION]... COMMAND [INITIAL-ARGS]...\\n\", 5));\n    fputs(dcgettext(NULL, \"Run COMMAND with arguments INITIAL-ARGS and more arguments read from input.\\n\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"Mandatory and optional arguments to long options are also\\nmandatory or optional for the corresponding short option.\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -0, --null                   items are separated by a null, not whitespace;\\n                                 disables quote and backslash processing and\\n                                 logical EOF processing\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -a, --arg-file=FILE          read arguments from FILE, not standard input\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -d, --delimiter=CHARACTER    items in input stream are separated by CHARACTER,\\n                                 not by whitespace; disables quote and backslash\\n                                 processing and logical EOF processing\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -E END                       set logical EOF string; if END occurs as a line\\n                                 of input, the rest of the input is ignored\\n                                 (ignored if -0 or -d was specified)\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -e, --eof[=END]              equivalent to -E END if END is specified;\\n                                 otherwise, there is no end-of-file string\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -I R                         same as --replace=R\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -i, --replace[=R]            replace R in INITIAL-ARGS with names read\\n                                 from standard input; if R is unspecified,\\n                                 assume {}\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -L, --max-lines=MAX-LINES    use at most MAX-LINES non-blank input lines per\\n                                 command line\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -l[MAX-LINES]                similar to -L but defaults to at most one non-\\n                                 blank input line if MAX-LINES is not specified\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -n, --max-args=MAX-ARGS      use at most MAX-ARGS arguments per command line\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -P, --max-procs=MAX-PROCS    run at most MAX-PROCS processes at a time\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -p, --interactive            prompt before running commands\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"      --process-slot-var=VAR   set environment variable VAR in child processes\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -r, --no-run-if-empty        if there are no arguments, then do not run COMMAND;\\n                                 if this option is not given, COMMAND will be\\n                                 run at least once\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -s, --max-chars=MAX-CHARS    limit length of command line to MAX-CHARS\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"      --show-limits            show limits on command-line length\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -t, --verbose                print commands before executing them\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"  -x, --exit                   exit if the size (see -s) is exceeded\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"      --help                   display this help and exit\\n\", 5), stream);\n    fputs(dcgettext(NULL, \"      --version                output version information and exit\\n\", 5), stream);\n    return fputs(dcgettext(NULL, \"\\nReport bugs to <bug-findutils@gnu.org>.\\n\", 5), stream);\n}\n"
        },
        {
            "funcName": "function_403570",
            "funcStartAddr": "403570",
            "funcEndAddr": "4036b2",
            "decompiledFuncCode": "int64_t function_403570(int64_t str, int64_t a2, int32_t result, int64_t result3, int64_t a5) {\n    // 0x403570\n    char * endptr; // bp-48, 0x403570\n    int32_t str_as_l = strtol((char *)str, &endptr, 10); // 0x403595\n    if ((int64_t)endptr != str) {\n        // 0x4035a8\n        if (*endptr == 0) {\n            if (str_as_l < result) {\n                // 0x403610\n                fprintf(g35, dcgettext(NULL, \"%s: value for -%c option should be >= %ld\\n\", 5));\n                if ((int32_t)a5 == 0) {\n                    // 0x4035fe\n                    return result;\n                }\n                // 0x40369c\n                function_4032b0((int64_t)g35);\n                exit(1);\n                // UNREACHABLE\n            }\n            int64_t result2 = str_as_l; // 0x403595\n            if (result3 > -1 != result2 > result3) {\n                // 0x4035fe\n                return result2;\n            }\n            // 0x4035c0\n            fprintf(g35, dcgettext(NULL, \"%s: value for -%c option should be <= %ld\\n\", 5));\n            if ((int32_t)a5 == 0) {\n                // 0x4035fe\n                return result3;\n            }\n            // 0x40369c\n            function_4032b0((int64_t)g35);\n            exit(1);\n            // UNREACHABLE\n        }\n    }\n    // 0x403657\n    fprintf(g35, dcgettext(NULL, \"%s: invalid number for -%c option\\n\", 5));\n    function_4032b0((int64_t)g35);\n    exit(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4036c0",
            "funcStartAddr": "4036c0",
            "funcEndAddr": "403718",
            "decompiledFuncCode": "int64_t function_4036c0(int64_t a1, int64_t a2) {\n    // 0x4036c0\n    int64_t v1; // 0x4036c0\n    int32_t fd = function_405410(a1, 0, v1); // 0x4036d5\n    if (fd < 0) {\n        // 0x4036ef\n        return 0;\n    }\n    struct _IO_FILE * v2 = fdopen(fd, \"r\"); // 0x4036e2\n    if (v2 == NULL) {\n        int32_t * v3 = __errno_location(); // 0x403700\n        close(fd);\n    }\n    // 0x4036ef\n    return (int64_t)v2;\n}\n"
        },
        {
            "funcName": "function_403720",
            "funcStartAddr": "403720",
            "funcEndAddr": "40373b",
            "decompiledFuncCode": "int64_t function_403720(void) {\n    int32_t result = g16; // 0x403729\n    if (g16 >= 2) {\n        // 0x40372b\n        result = g16 - 1;\n        g16 = result;\n    }\n    // 0x40373a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403740",
            "funcStartAddr": "403740",
            "funcEndAddr": "403782",
            "decompiledFuncCode": "int64_t function_403740(void) {\n    // 0x403740\n    if (g60 != NULL || g18 != 0) {\n        // 0x40374a\n        int64_t result; // 0x403740\n        return result;\n    }\n    // 0x403759\n    if (g65 == g61) {\n        // 0x40374a\n        return g61;\n    }\n    uint32_t result2 = *(int32_t *)&g56; // 0x403769\n    if (result2 != 0) {\n        // 0x40374a\n        return result2;\n    }\n    // 0x403773\n    int64_t v1; // 0x403740\n    return function_404c00(&g56, &g65, v1, v1, v1, v1);\n}\n"
        },
        {
            "funcName": "function_403790",
            "funcStartAddr": "403790",
            "funcEndAddr": "4038ae",
            "decompiledFuncCode": "int64_t function_403790(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403790\n    if (g41 != 0) {\n        // 0x403849\n        return 0xffffffff;\n    }\n    int64_t v1 = (int64_t)g72; // 0x40379f\n    int32_t v2 = _IO_getc(g73); // 0x4037d7\n    int32_t v3 = v2; // 0x4037e1\n    int64_t v4 = v1; // 0x4037e1\n    int64_t v5; // 0x403790\n    int64_t v6; // 0x403790\n    if (v2 == -1) {\n      lab_0x403820:;\n        int64_t v7 = (int64_t)g72; // 0x403820\n        g41 = 1;\n        if (v4 == v7) {\n            // 0x403849\n            return 0xffffffff;\n        }\n        // 0x403833\n        *(char *)v4 = 0;\n        v5 = v4;\n        v6 = v7;\n    } else {\n        int64_t v8 = v1;\n        while (v3 != (int32_t)*(char *)&g43) {\n            if (v8 >= g58 + -1 - g69 + v1) {\n                // 0x4037f3\n                function_403740();\n                error(1, (int32_t)\"argument line too long\" ^ (int32_t)\"argument line too long\", dcgettext(NULL, \"argument line too long\", 5));\n            }\n            int64_t v9 = v8 + 1; // 0x4037c8\n            *(char *)v8 = (char)v3;\n            v3 = _IO_getc(g73);\n            v4 = v9;\n            if (v3 == -1) {\n                goto lab_0x403820;\n            }\n            v8 = v9;\n        }\n        // 0x403858\n        g70++;\n        *(char *)v8 = 0;\n        v5 = v8;\n        v6 = (int64_t)g72;\n    }\n    int64_t v10 = v5 + 1 - v6; // 0x40383a\n    int64_t result = v10 & 0xffffffff; // 0x403845\n    if (g60 != NULL) {\n        // 0x403849\n        return result;\n    }\n    // 0x403870\n    function_4047a0(&g56, &g65, v6, 0x100000000 * v10 >> 32, 0, 0, (int64_t)g18);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4038b0",
            "funcStartAddr": "4038b0",
            "funcEndAddr": "403ebb",
            "decompiledFuncCode": "int64_t function_4038b0(void) {\n    // 0x4038b0\n    if (g38 != 0) {\n      lab_0x403b0f:\n        // 0x403b15\n        return 0xffffffff;\n    }\n    int64_t v1 = (int64_t)g72; // 0x4038c5\n    int64_t v2; // bp-72, 0x4038b0\n    int64_t v3 = &v2; // 0x4038ba\n    int32_t v4 = _IO_getc(g73); // 0x403976\n    int64_t v5 = v1; // 0x403981\n    int64_t v6 = 1; // 0x403981\n    int32_t v7; // 0x4038b0\n    int32_t v8; // 0x4038b0\n    int64_t v9; // 0x4038b0\n    int64_t v10; // 0x4038b0\n    int64_t v11; // 0x4038b0\n    int64_t v12; // 0x4038b0\n    int64_t v13; // 0x4038b0\n    int64_t v14; // 0x4038b0\n    int64_t v15; // 0x4038b0\n    int64_t v16; // 0x4038b0\n    int64_t v17; // 0x4038b0\n    int64_t v18; // 0x4038b0\n    int64_t v19; // 0x4038b0\n    int64_t v20; // 0x4038b0\n    int64_t v21; // 0x4038b0\n    int64_t v22; // 0x4038b0\n    int64_t v23; // 0x4038b0\n    int64_t v24; // 0x4038b0\n    int64_t v25; // 0x4038b0\n    int64_t v26; // 0x4038b0\n    int64_t v27; // 0x4038b0\n    int64_t v28; // 0x4038b0\n    uint64_t v29; // 0x4038d7\n    int64_t * v30; // 0x4038b0\n    char * v31; // 0x4038b0\n    int32_t * v32; // 0x4038b0\n    if (v4 == -1) {\n        goto lab_0x403d50;\n    } else {\n        // 0x403987\n        v29 = g58 + -1 - g69 + v1;\n        v30 = (int64_t *)(v3 - 16);\n        v31 = (char *)(v3 + 15);\n        v32 = (int32_t *)(v3 + 8);\n        v7 = v4;\n        v13 = 0;\n        v9 = 1;\n        v21 = -1;\n        v26 = v1;\n        while (true) {\n          lab_0x403987:;\n            int64_t v33 = v26;\n            int64_t v34 = v21;\n            int64_t v35 = v9;\n            int64_t v36 = v13;\n            uint32_t v37 = v7;\n            int64_t v38 = v37;\n            v28 = v33;\n            v22 = v34;\n            v15 = v36;\n            v19 = v38;\n            if (v35 == 1) {\n                goto lab_0x403a4d;\n            } else {\n                // 0x403991\n                v23 = v33;\n                v20 = v34;\n                v10 = v36;\n                v16 = v38;\n                if (v35 != 2) {\n                    goto lab_0x403910;\n                } else {\n                    // 0x40399b\n                    v25 = v33;\n                    v11 = v36;\n                    v17 = 10;\n                    if (v37 == 10) {\n                        goto lab_0x403bdd;\n                    } else {\n                        // 0x40399b\n                        v8 = *v32;\n                        v27 = v33;\n                        v14 = v36;\n                        v18 = v38;\n                        goto lab_0x4039a5;\n                    }\n                }\n            }\n        }\n      lab_0x403b80_4:;\n        int64_t v39 = (int64_t)g72; // 0x403b80\n        g38 = 1;\n        if (v24 == v39) {\n            // 0x403b15\n            return 0xffffffff;\n        }\n        // 0x403b97\n        *(char *)v24 = 0;\n        v12 = v24 + 1 - v39 & 0xffffffff;\n        goto lab_0x403d7b;\n    }\n  lab_0x403d50:;\n    int64_t v40 = (int64_t)g72; // 0x403d50\n    g38 = 1;\n    if (v5 == v40) {\n        // 0x403b15\n        return 0xffffffff;\n    }\n    // 0x403d67\n    *(char *)v5 = 0;\n    int64_t v41 = v5 + 1 - v40 & 0xffffffff; // 0x403d6e\n    v12 = v41;\n    int32_t * v42; // 0x4038b0\n    int64_t v43; // 0x4038b0\n    if ((int32_t)v6 == 2) {\n        // 0x403d67\n        v42 = (int32_t *)(v3 + 8);\n        v43 = v41;\n        goto lab_0x403e60;\n    } else {\n        goto lab_0x403d7b;\n    }\n  lab_0x403a4d:;\n    int64_t v44 = v28;\n    int64_t v45 = v22; // 0x403a54\n    int64_t v46 = v19; // 0x403a54\n    int64_t v47 = v22; // 0x403a54\n    int64_t v48 = v19; // 0x403a54\n    if ((v19 & 0xffffff80) != 0) {\n        goto lab_0x403a97;\n    } else {\n        goto lab_0x403a56;\n    }\n  lab_0x403a97:;\n    int64_t v49 = v48;\n    int32_t v50 = v49;\n    int64_t v51 = v49; // 0x403a9e\n    int64_t v52; // 0x4038b0\n    int64_t v53; // 0x4038b0\n    int64_t v54; // 0x4038b0\n    int64_t v55; // 0x4038b0\n    int64_t v56; // 0x4038b0\n    if (v50 < 13) {\n        goto lab_0x403a73;\n    } else {\n        // 0x403aa0\n        v55 = v44;\n        v53 = v49;\n        v56 = v44;\n        v54 = v47;\n        v52 = v15;\n        if (v50 != 10) {\n            goto lab_0x40391a;\n        } else {\n            goto lab_0x403aaa;\n        }\n    }\n  lab_0x403a56:;\n    int64_t v57 = v46;\n    unsigned char v58 = *(char *)((0x100000000 * v57 >> 31) + (int64_t)*__ctype_b_loc()); // 0x403a61\n    v51 = v57;\n    if (v58 % 2 != 0) {\n        goto lab_0x403a73;\n    } else {\n        int32_t v59 = v57; // 0x403a67\n        v51 = v57;\n        v47 = v45;\n        v48 = v57;\n        if (v59 != 10 == (v59 != 13)) {\n            goto lab_0x403a97;\n        } else {\n            goto lab_0x403a73;\n        }\n    }\n  lab_0x403910:\n    // 0x403910\n    v55 = v23;\n    v53 = v16;\n    v56 = v23;\n    v54 = v20;\n    v52 = v10;\n    if (v16 == 10) {\n        goto lab_0x403aaa;\n    } else {\n        goto lab_0x40391a;\n    }\n  lab_0x403a73:;\n    int32_t v60 = _IO_getc(g73); // 0x403a7a\n    v24 = v44;\n    if (v60 == -1) {\n        // break -> 0x403b80\n        goto lab_0x403b80_4;\n    }\n    int64_t v61 = v60; // 0x403a7a\n    int64_t v62 = 0x100000000 * v51 >> 32; // 0x403a88\n    int64_t v63 = v61 & 0xffffffff; // 0x403a8b\n    v45 = v62;\n    v46 = v63;\n    v47 = v62;\n    v48 = v63;\n    if ((v61 & 0xffffff80) == 0) {\n        goto lab_0x403a56;\n    } else {\n        goto lab_0x403a97;\n    }\n  lab_0x403aaa:;\n    int64_t v64 = v52;\n    int64_t v65 = v54;\n    int64_t v66 = v56;\n    if ((v65 & 0xffffff80) == 0) {\n        // 0x403d00\n        if (*(char *)(2 * v65 + (int64_t)*__ctype_b_loc()) % 2 != 0) {\n            goto lab_0x403abe;\n        } else {\n            // 0x403ab6\n            g70++;\n            goto lab_0x403abe;\n        }\n    } else {\n        // 0x403ab6\n        g70++;\n        goto lab_0x403abe;\n    }\n  lab_0x40391a:;\n    int64_t v67 = v53;\n    int64_t v68 = v55;\n    int64_t v69; // 0x4038b0\n    if (g60 == NULL) {\n        if ((v67 & 0xffffff80) != 0) {\n            goto lab_0x403928;\n        } else {\n            int16_t ** v70 = __ctype_b_loc(); // 0x403c55\n            int64_t v71 = 0x100000000 * v67;\n            if (*(char *)((v71 >> 31) + (int64_t)*v70) % 2 == 0) {\n                goto lab_0x403928;\n            } else {\n                int64_t v72 = (int64_t)g72; // 0x403c6a\n                *(char *)v68 = 0;\n                int64_t v73 = v68 + 1 - v72; // 0x403c7f\n                if (g54 != NULL) {\n                    // 0x403c8a\n                    if (*g54 == *g72) {\n                        // 0x403c92\n                        if (strcmp(g54, g72) == 0) {\n                            // 0x403b01\n                            v69 = v73 & 0xffffffff;\n                            goto lab_0x403b01_2;\n                        }\n                    }\n                }\n                // 0x403ca2\n                *v30 = (int64_t)g18;\n                function_4047a0(&g56, &g65, v72, 0x100000000 * v73 >> 32, 0, 0, (int64_t)&g100);\n                uint32_t v74 = _IO_getc(g73); // 0x403cd7\n                *v31 = 0;\n                int64_t v75 = (int64_t)g72;\n                v24 = v75;\n                if (v74 == -1) {\n                    // break -> 0x403b80\n                    goto lab_0x403b80_4;\n                }\n                // 0x403cec\n                v28 = v75;\n                v22 = v71 >> 32;\n                v15 = 1;\n                v19 = v74;\n                goto lab_0x403a4d;\n            }\n        }\n    } else {\n        goto lab_0x403928;\n    }\n  lab_0x403bdd:;\n    int64_t v76 = v11;\n    int64_t v77 = v25;\n    function_403740();\n    int64_t v78; // 0x4038b0\n    int64_t v79; // 0x4038b0\n    int64_t v80; // 0x4038b0\n    int64_t v81; // 0x4038b0\n    int64_t v82; // 0x4038b0\n    int64_t v83; // 0x4038b0\n    if (*v32 == 34) {\n        // 0x403df0\n        dcgettext(NULL, \"double\", 5);\n        error(1, (int32_t)\"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\" ^ (int32_t)\"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\", dcgettext(NULL, \"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\", 5));\n        v83 = v77;\n        v81 = 10;\n        v78 = 2;\n        v79 = v76;\n        goto lab_0x40395f;\n    } else {\n        // 0x403bf2\n        dcgettext(NULL, \"single\", 5);\n        error(1, (int32_t)\"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\" ^ (int32_t)\"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\", dcgettext(NULL, \"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\", 5));\n        v83 = v77;\n        v81 = 10;\n        v78 = 2;\n        v79 = v76;\n        v82 = v77;\n        v80 = v17;\n        if (*v32 == 10) {\n            goto lab_0x403d20;\n        } else {\n            goto lab_0x40395f;\n        }\n    }\n  lab_0x4039a5:;\n    int64_t v84 = v18;\n    int64_t v85 = v27;\n    v82 = v85;\n    v80 = v84;\n    int64_t v86; // 0x4038b0\n    int64_t v87; // 0x4038b0\n    int64_t v88; // 0x4038b0\n    if (v8 == (int32_t)v84) {\n        goto lab_0x403d20;\n    } else {\n        int64_t v89 = 0x100000000 * v84 >> 32; // 0x4039b0\n        v83 = v85;\n        v81 = v89;\n        v78 = 2;\n        v79 = v14;\n        v88 = v85;\n        v86 = 2;\n        v87 = v14;\n        if ((g55 || (int32_t)v89) != 0) {\n            goto lab_0x40395f;\n        } else {\n            goto lab_0x4039c6;\n        }\n    }\n  lab_0x403928:;\n    int32_t v90 = v67;\n    int64_t v91; // 0x4038b0\n    switch (v90) {\n        case 39: {\n            goto lab_0x403bb0;\n        }\n        case 92: {\n            int32_t v92 = _IO_getc(g73); // 0x403b6f\n            v91 = v92;\n            if (v92 == -1) {\n                // break -> 0x403b80\n                break;\n            }\n            goto lab_0x403949;\n        }\n        case 34: {\n            goto lab_0x403bb0;\n        }\n        default: {\n            // 0x403946\n            v91 = 0x100000000 * v67 >> 32;\n            goto lab_0x403949;\n        }\n    }\n  lab_0x403abe:;\n    int64_t v93 = (int64_t)g72;\n    int64_t v94; // 0x403ae2\n    int64_t v95; // 0x403ae5\n    if (((char)(v66 != v93) || (char)v64) != 0) {\n        // 0x403ad4\n        *(char *)v66 = 0;\n        v94 = v66 + 1 - v93;\n        v95 = v94 & 0xffffffff;\n        if (g54 == NULL) {\n            goto lab_0x403b30;\n        } else {\n            // 0x403aed\n            if (*g54 != *g72) {\n                goto lab_0x403b30;\n            } else {\n                // 0x403af5\n                v69 = v95;\n                if (strcmp(g54, g72) != 0) {\n                    goto lab_0x403b30;\n                } else {\n                    goto lab_0x403b01_2;\n                }\n            }\n        }\n    }\n    uint32_t v96 = _IO_getc(g73); // 0x403a37\n    v24 = v66;\n    if (v96 == -1) {\n        // break -> 0x403b80\n        goto lab_0x403b80_4;\n    }\n    // 0x403a45\n    v28 = v66;\n    v22 = 10;\n    v15 = 0;\n    v19 = v96;\n    goto lab_0x403a4d;\n  lab_0x40395f:;\n    int64_t v97 = v83; // 0x403962\n    int64_t v98 = v81; // 0x403962\n    int64_t v99 = v78; // 0x403962\n    int64_t v100 = v79; // 0x403962\n    int64_t v101 = v83; // 0x403962\n    int64_t v102 = v81; // 0x403962\n    int64_t v103 = v78; // 0x403962\n    int64_t v104 = v79; // 0x403962\n    if (v29 > v83) {\n        goto lab_0x403968;\n    } else {\n        goto lab_0x403a00;\n    }\n  lab_0x403d20:;\n    uint32_t v105 = _IO_getc(g73); // 0x403d2d\n    v24 = v82;\n    if (v105 == -1) {\n        // break -> 0x403b80\n        goto lab_0x403b80_4;\n    }\n    // 0x403d3b\n    v23 = v82;\n    v20 = 0x100000000 * v80 >> 32;\n    v10 = 1;\n    v16 = v105;\n    goto lab_0x403910;\n  lab_0x403bb0:;\n    uint32_t v106 = _IO_getc(g73); // 0x403bb7\n    if (v106 == -1) {\n        int64_t v107 = (int64_t)g72; // 0x403e37\n        g38 = 1;\n        if (v68 == v107) {\n            goto lab_0x403b0f;\n        } else {\n            // 0x403e4e\n            *(char *)v68 = 0;\n            *v32 = v90;\n            v42 = v32;\n            v43 = v68 + 1 - v107 & 0xffffffff;\n            goto lab_0x403e60;\n        }\n    }\n    int64_t v108 = v106;\n    *v32 = v90;\n    v8 = v90;\n    v27 = v68;\n    v14 = 1;\n    v18 = v108;\n    v25 = v68;\n    v11 = 1;\n    v17 = v108;\n    if (v106 != 10) {\n        goto lab_0x4039a5;\n    } else {\n        goto lab_0x403bdd;\n    }\n  lab_0x403968:\n    // 0x403968\n    *(char *)v97 = (char)v98;\n    int64_t v109 = v97 + 1; // 0x40396b\n    int32_t v110 = _IO_getc(g73); // 0x403976\n    v7 = v110;\n    v13 = v100;\n    v9 = v99;\n    v21 = v98;\n    v26 = v109;\n    v5 = v109;\n    v6 = v99;\n    if (v110 == -1) {\n        goto lab_0x403d50;\n    }\n    goto lab_0x403987;\n  lab_0x403a00:\n    // 0x403a00\n    function_403740();\n    error(1, (int32_t)\"argument line too long\" ^ (int32_t)\"argument line too long\", dcgettext(NULL, \"argument line too long\", 5));\n    v97 = v101;\n    v98 = v102;\n    v99 = v103;\n    v100 = v104;\n    goto lab_0x403968;\n  lab_0x4039c6:\n    // 0x4039c6\n    error(0, (int32_t)\"WARNING: a NUL character occurred in the input.  It cannot be passed through in the argument list.  Did you mean to use the --null option?\" ^ (int32_t)\"WARNING: a NUL character occurred in the input.  It cannot be passed through in the argument list.  Did you mean to use the --null option?\", dcgettext(NULL, \"WARNING: a NUL character occurred in the input.  It cannot be passed through in the argument list.  Did you mean to use the --null option?\", 5));\n    g55 = 1;\n    v101 = v88;\n    v102 = 0;\n    v103 = v86;\n    v104 = v87;\n    if (v29 > v88) {\n        goto lab_0x403968;\n    } else {\n        goto lab_0x403a00;\n    }\n  lab_0x403949:\n    // 0x403949\n    v83 = v68;\n    v81 = v91;\n    v78 = 0;\n    v79 = 1;\n    v88 = v68;\n    v86 = 0;\n    v87 = 1;\n    if ((g55 || (int32_t)v91) == 0) {\n        goto lab_0x4039c6;\n    } else {\n        goto lab_0x40395f;\n    }\n  lab_0x403d7b:\n    // 0x403d7b\n    if (*(char *)(v3 + 15) != 0) {\n        // 0x403d82\n        if (g54 != NULL) {\n            // 0x403d8e\n            if (*g54 == *g72) {\n                // 0x403d9c\n                if (strcmp(g54, g72) == 0) {\n                    // 0x403b15\n                    return 0xffffffff;\n                }\n            }\n        }\n    }\n    int64_t v111 = v12; // 0x403db1\n    if (g60 == NULL) {\n        // 0x403db7\n        *(int64_t *)(v3 - 16) = (int64_t)g18;\n        function_4047a0(&g56, &g65, (int64_t)g72, 0x100000000 * v12 >> 32, 0, 0, (int64_t)&g100);\n        v111 = v12;\n    }\n  lab_0x403b15:\n    // 0x403b15\n    return v111 & 0xffffffff;\n  lab_0x403e60:\n    // 0x403e60\n    function_403740();\n    if (*v42 == 34) {\n        // 0x403eaa\n        dcgettext(NULL, \"double\", 5);\n    } else {\n        // 0x403e71\n        dcgettext(NULL, \"single\", 5);\n    }\n    // 0x403e80\n    error(1, (int32_t)\"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\" ^ (int32_t)\"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\", dcgettext(NULL, \"unmatched %s quote; by default quotes are special to xargs unless you use the -0 option\", 5));\n    v12 = v43;\n    goto lab_0x403d7b;\n  lab_0x403b30:\n    // 0x403b30\n    v111 = v95;\n    if (g60 != NULL) {\n        goto lab_0x403b15;\n    } else {\n        // 0x403b3a\n        *v30 = (int64_t)g18;\n        function_4047a0(&g56, &g65, v93, 0x100000000 * v94 >> 32, 0, 0, (int64_t)&g100);\n        v111 = v95;\n        goto lab_0x403b15;\n    }\n  lab_0x403b01_2:\n    // 0x403b01\n    g38 = 1;\n    v111 = v69;\n    if (*v31 == 0) {\n        goto lab_0x403b15;\n    } else {\n        goto lab_0x403b0f;\n    }\n}\n"
        },
        {
            "funcName": "function_403ec0",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "404120",
            "decompiledFuncCode": "int64_t function_403ec0(int64_t a1, int64_t a2) {\n    int32_t pid = getpid(); // 0x403ec4\n    if (pid != g49) {\n        // 0x403f15\n        __assert_fail(\"getpid () == parent\", \"xargs.c\", 1548, \"wait_for_proc_all\");\n        int64_t v1 = 0; // 0x403f3e\n        int64_t v2 = (int64_t)\"xargs.c\"; // 0x403f3e\n        if (g65 != 1) {\n            int64_t v3 = *(int64_t *)(g66 + 8 * v1); // 0x403f6f\n            int64_t v4 = (int64_t)\"%s \"; // 0x403f7c\n            char * format; // 0x403f8a\n            uint32_t err_num; // 0x403f9f\n            if (fprintf(g35, \"%s \", (char *)v3) < 0) {\n                // 0x403f7e\n                format = dcgettext(NULL, \"Failed to write to stderr\", 5);\n                err_num = *__errno_location();\n                error(1, err_num, format);\n                v4 = err_num;\n            }\n            int64_t v5 = v1 + 1; // 0x403f4f\n            v1 = v5;\n            v2 = v4;\n            while (g65 - 1 > v5) {\n                // 0x403f5c\n                v3 = *(int64_t *)(g66 + 8 * v1);\n                v4 = (int64_t)\"%s \";\n                if (fprintf(g35, \"%s \", (char *)v3) < 0) {\n                    // 0x403f7e\n                    format = dcgettext(NULL, \"Failed to write to stderr\", 5);\n                    err_num = *__errno_location();\n                    error(1, err_num, format);\n                    v4 = err_num;\n                }\n                // 0x403f48\n                v5 = v1 + 1;\n                v1 = v5;\n                v2 = v4;\n            }\n        }\n        if ((char)\"getpid () == parent\" == 0) {\n            // 0x404080\n            _IO_putc(10, g35);\n            return 0;\n        }\n        // 0x403fb9\n        if (g40 == NULL) {\n            int64_t v6 = function_4036c0((int64_t)\"/dev/tty\", v2); // 0x4040d5\n            g40 = (struct _IO_FILE *)v6;\n            if (v6 == 0) {\n                // 0x4040ea\n                error(1, *__errno_location(), dcgettext(NULL, \"failed to open /dev/tty for reading\", 5));\n            }\n        }\n        // 0x403fc7\n        fwrite((int64_t *)\"?...\", 1, 4, g35);\n        if ((int32_t)function_409e80((int64_t)g35, 1) != 0) {\n            // 0x404048\n            error(1, *__errno_location(), dcgettext(NULL, \"Failed to write to stderr\", 5));\n        }\n        uint32_t v7 = _IO_getc(g40); // 0x403ff9\n        int64_t v8 = v7; // 0x403ffe\n        int64_t v9 = v8; // 0x403ec0\n        switch (v7) {\n            default: {\n                int32_t v10 = _IO_getc(g40); // 0x40401f\n                while (v10 != -1 == (v10 != 10)) {\n                    // 0x404018\n                    v10 = _IO_getc(g40);\n                }\n                // 0x40402e\n                v9 = v10;\n            }\n            case 10: {\n            }\n            case -1: {\n                int64_t v11 = v9; // 0x404031\n                if ((int32_t)v9 == -1) {\n                    // 0x4040a0\n                    error(1, *__errno_location(), dcgettext(NULL, \"Failed to read from stdin\", 5));\n                    v11 = &g100;\n                }\n                // 0x404033\n                return v11 & -256 | (int64_t)((v8 & 0xffffffdf) == 89);\n            }\n        }\n    }\n    // 0x403ed1\n    if (g39 != 0) {\n        // 0x403eda\n        return pid;\n    }\n    // 0x403ee0\n    g39 = 1;\n    function_402f30(1, 0);\n    g39 = 0;\n    if (g46 == g47) {\n        // 0x403eda\n        return g47;\n    }\n    // 0x403f0a\n    _exit(g47);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "404572",
            "decompiledFuncCode": "int64_t function_404120(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    char * exec_argv[1]; // 0x4044b8\n    int32_t fds[2]; // 0x404194\n    int64_t v1 = 0; // 0x404137\n    if (g16 != 0) {\n        int64_t v2 = g16; // 0x404139\n        v1 = v2;\n        if (g52 >= v2) {\n            function_402f30(0, 1);\n            int64_t v3 = g16; // 0x40415c\n            v1 = v3;\n            while (g52 >= v3) {\n                // 0x404150\n                function_402f30(0, 1);\n                v3 = g16;\n                v1 = v3;\n            }\n        }\n    }\n    // 0x40416c\n    if ((char)v1 == 0 == (g44 != 0)) {\n        // 0x404273\n        return 1;\n    }\n    // 0x404186\n    function_402f30(0, 0);\n    int32_t fd2; // bp-60, 0x404120\n    fds[0] = &fd2;\n    if (pipe(fds) != 0) {\n        // 0x4042a8\n        error(1, *__errno_location(), dcgettext(NULL, \"could not create pipe before fork\", 5));\n    }\n    // 0x4041a1\n    int32_t fd3; // 0x404120\n    function_409d40(fd3, 2, 1, a4);\n    int32_t v4 = fork(); // 0x4041e0\n    int64_t v5 = v4; // 0x4041e5\n    int64_t v6 = 2; // 0x4041e9\n    int32_t pid = v4; // 0x4041e9\n    int64_t v7 = v5; // 0x4041e9\n    if (v4 < 0) {\n        int32_t v8 = *__errno_location(); // 0x4041c5\n        v6 = 2;\n        pid = v4;\n        v7 = v5;\n        if (v8 == 11 && g52 != 0) {\n            function_402f30(0, 1);\n            int32_t v9 = fork(); // 0x4041e0\n            int64_t v10 = v9; // 0x4041e5\n            v6 = 1;\n            pid = v9;\n            v7 = v10;\n            while (v9 < 0) {\n                int32_t v11 = *__errno_location(); // 0x4041c5\n                v6 = 1;\n                pid = v9;\n                v7 = v10;\n                if (v11 != 11 || g52 == 0) {\n                    // break -> 0x4041eb\n                    break;\n                }\n                function_402f30(0, 1);\n                v9 = fork();\n                v10 = v9;\n                v6 = 1;\n                pid = v9;\n                v7 = v10;\n            }\n        }\n    }\n    int64_t v12 = 1; // 0x404120\n    int64_t v13 = v6; // 0x404120\n    int64_t v14; // 0x404120\n    int64_t stat_loc; // bp-52, 0x404120\n    int32_t * err_num2; // 0x404402\n    switch (pid) {\n        case -1: {\n            char * format = dcgettext(NULL, \"cannot fork\", 5); // 0x40439f\n            uint32_t err_num = *__errno_location(); // 0x4043b4\n            error(1, err_num, format);\n            v12 = (int64_t)format;\n            v13 = err_num;\n        }\n        case 0: {\n            // 0x4043bd\n            close(fd2);\n            g47 = 0;\n            function_405550((int64_t)fd2, v13, v12);\n            int64_t v15 = function_4031a0(0); // 0x4043d7\n            int64_t v16 = v15 & 0xffffffff; // 0x4043e5\n            int32_t v17 = v15; // 0x4043ec\n            int32_t size = snprintf(NULL, 0, \"%u\", v17) + 1; // 0x4043f1\n            int64_t * mem = malloc(size); // 0x4043fa\n            err_num2 = __errno_location();\n            if (mem == NULL) {\n                // 0x404527\n                error(0, *err_num2, dcgettext(NULL, \"unable to allocate memory\", 5));\n                v14 = v16;\n            } else {\n                // 0x404413\n                snprintf((char *)mem, size, \"%u\", v17);\n                int64_t v18 = v16; // 0x404432\n                if (g42 != NULL) {\n                    // 0x404434\n                    v18 = v16;\n                    if (setenv(g42, (char *)mem, 1) < 0) {\n                        // 0x40454b\n                        error(0, *err_num2, dcgettext(NULL, \"failed to set environment variable %s\", 5));\n                        v18 = (int64_t)g42;\n                    }\n                }\n                // 0x40444c\n                free(mem);\n                v14 = v18;\n            }\n            // break -> 0x404454\n            break;\n        }\n        default: {\n            // 0x4041fc\n            close(fd3);\n            int32_t v19; // bp-64, 0x404120\n            int64_t v20 = function_408fe0((int64_t)fd2, (int64_t *)&v19, 4); // 0x404213\n            switch (v20) {\n                case 4: {\n                    // 0x404328\n                    close(fd2);\n                    waitpid(pid, (int32_t *)&stat_loc, 0);\n                    switch (v19) {\n                        case 7: {\n                            // 0x404273\n                            return 0;\n                        }\n                        case 2: {\n                            // 0x404382\n                            exit(127);\n                            // UNREACHABLE\n                        }\n                    }\n                    // break -> 0x40434d\n                    break;\n                }\n                case -1: {\n                    // 0x4042f0\n                    close(fd2);\n                    char * format2 = dcgettext(NULL, \"errno-buffer safe_read failed in xargs_do_exec (this is probably a bug, please report it)\", 5); // 0x404305\n                    error(0, *__errno_location(), format2);\n                    // 0x404265\n                    close(fd2);\n                    // 0x404273\n                    return 1;\n                }\n                case 0: {\n                    // 0x4042e0\n                    function_4031a0(v7);\n                    // 0x404265\n                    close(fd2);\n                    // 0x404273\n                    return 1;\n                }\n                default: {\n                    char * format3 = dcgettext(NULL, \"read returned unexpected value %zu; this is probably a bug, please report it\", 5); // 0x404244\n                    error(1, *__errno_location(), format3);\n                    // 0x404265\n                    close(fd2);\n                    // 0x404273\n                    return 1;\n                }\n            }\n            // 0x40434d\n            exit(126);\n            // UNREACHABLE\n        }\n    }\n    int64_t file = v14; // 0x40445b\n    if (g71 == 0) {\n        // 0x4044cb\n        stat_loc = 0x6c756e2f7665642f;\n        close(0);\n        int32_t fd = open((char *)&stat_loc, O_RDONLY); // 0x4044f1\n        file = v14;\n        if (fd < 0) {\n            int64_t v21 = function_408c90(0, 8, (int64_t)&stat_loc); // 0x40450a\n            error(0, *err_num2, \"%s\", (char *)v21);\n            file = v21;\n        }\n    }\n    // 0x40445d\n    if ((char)function_405070(a4) == 0) {\n        // 0x4044b1\n        exec_argv[0] = (char *)a4;\n        execvp((char *)file, exec_argv);\n        if (*err_num2 == 0) {\n            goto lab_0x404480;\n        } else {\n            // 0x40446f\n            write(fd3, (int64_t *)err_num2, 4);\n            goto lab_0x404480;\n        }\n    } else {\n        // 0x404469\n        *err_num2 = 7;\n        // 0x40446f\n        write(fd3, (int64_t *)err_num2, 4);\n        goto lab_0x404480;\n    }\n  lab_0x404480:\n    // 0x404480\n    close(fd3);\n    int32_t err_num3 = *err_num2; // 0x404489\n    if (err_num3 != 7) {\n        // 0x404490\n        error(0, err_num3, \"%s\", (char *)file);\n        if (*err_num2 == 2) {\n            // 0x4044ac\n            _exit(127);\n            // UNREACHABLE\n        }\n    }\n    // 0x4044ac\n    _exit(126);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404580",
            "funcStartAddr": "404580",
            "funcEndAddr": "4045fa",
            "decompiledFuncCode": "int64_t function_404580(char * a1) {\n    // 0x404580\n    int64_t v1; // 0x404580\n    function_409e80((int64_t)g35, v1);\n    char * v2 = dcgettext(NULL, \"Kevin Dalley\", 5); // 0x40459f\n    char * v3 = dcgettext(NULL, \"James Youngman\", 5); // 0x4045b3\n    function_409550((int64_t)g31, (int64_t)a1, \"GNU findutils\", (int64_t)g19, (int64_t)dcgettext(NULL, \"Eric B. Decker\", 5), (int64_t)v3);\n    return (int64_t)v2;\n}\n"
        },
        {
            "funcName": "function_404600",
            "funcStartAddr": "404600",
            "funcEndAddr": "404700",
            "decompiledFuncCode": "int64_t function_404600(int64_t a1, int64_t a2, int32_t a3, uint64_t a4) {\n    int64_t * v1 = (int64_t *)(a2 + 64); // 0x404600\n    uint64_t v2 = *v1; // 0x404600\n    int64_t v3; // 0x404600\n    int64_t v4; // 0x404600\n    if ((char)a3 == 0) {\n        int64_t * v5 = (int64_t *)(a2 + 72); // 0x404670\n        uint64_t v6 = *v5; // 0x404670\n        int64_t v7 = v6; // 0x404677\n        if (v6 <= a4 != v6 != 0) {\n            // 0x40467e\n            *v5 = a4;\n            v7 = a4;\n        }\n        // 0x404682\n        if (v2 != 0 == v7 > v2) {\n            uint64_t v8 = v7 - v2; // 0x4046e0\n            v4 = (v8 == 1 ? -1 : -((v8 / 2))) + a4;\n        } else {\n            // 0x404690\n            v4 = a4 / 2;\n        }\n        goto lab_0x404696;\n    } else {\n        if (v2 < a4) {\n            // 0x40460d\n            *v1 = a4;\n            v3 = a4;\n            goto lab_0x404612;\n        } else {\n            // 0x40460d\n            v3 = v2;\n            if (v2 == 0) {\n                goto lab_0x40461f;\n            } else {\n                goto lab_0x404612;\n            }\n        }\n    }\n  lab_0x404696:;\n    int64_t v9 = v4;\n    int64_t v10 = *(int64_t *)(a1 + 56); // 0x404696\n    int64_t result = v9; // 0x40469d\n    int64_t v11 = v10; // 0x40469d\n    if (v10 == 0) {\n        // 0x40469f\n        return v9 == 0 ? 1 : v9;\n    }\n    goto lab_0x40463b;\n  lab_0x40463b:;\n    uint64_t v12 = v11 + 1; // 0x40463b\n    if (v12 < result) {\n        // 0x404668\n        return result;\n    }\n    // 0x404644\n    return v12 == 0 ? 1 : v12;\n  lab_0x404612:;\n    uint64_t v13 = *(int64_t *)(a2 + 72); // 0x404612\n    if (v13 > v3) {\n        uint64_t v14 = v13 - v3; // 0x4046bf\n        v4 = (v14 == 1 ? 1 : v14 / 2) + a4;\n        goto lab_0x404696;\n    } else {\n        goto lab_0x40461f;\n    }\n  lab_0x40461f:;\n    int64_t v15 = *(int64_t *)(a1 + 56); // 0x40461f\n    int64_t result2 = a4 == -1 ? -1 : a4 + 1; // 0x404632\n    result = result2;\n    v11 = v15;\n    if (v15 == 0) {\n        // 0x404668\n        return result2;\n    }\n    goto lab_0x40463b;\n}\n"
        },
        {
            "funcName": "function_404700",
            "funcStartAddr": "404700",
            "funcEndAddr": "404703",
            "decompiledFuncCode": "int64_t function_404700(void) {\n    // 0x404700\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "404798",
            "decompiledFuncCode": "int64_t function_404710(char * name, uint64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    char * env_val = getenv(name); // 0x404720\n    if (env_val == NULL) {\n        // 0x404750\n        return 0;\n    }\n    if ((int32_t)(int64_t)env_val == 0) {\n        // 0x404750\n        int64_t v1; // 0x404710\n        return (uint64_t)v1 < a2;\n    }\n    // 0x404760\n    error(1, *__errno_location(), dcgettext(NULL, \"Environment variable %s is not set to a valid decimal number\", 5));\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4047a0",
            "funcStartAddr": "4047a0",
            "funcEndAddr": "404a40",
            "decompiledFuncCode": "int64_t function_4047a0(int64_t * a1, int64_t * a2, int64_t str3, int64_t a4, int32_t a5, int32_t a6, int64_t a7) {\n    int64_t v1 = (int64_t)a1;\n    int64_t v2 = v1;\n    if (str3 == 0) {\n        // 0x404a1b\n        __assert_fail(\"arg != NULL\", \"buildcmd.c\", 357, \"bc_push_arg\");\n        return &g100;\n    }\n    int64_t v3 = a6;\n    int64_t str = a5;\n    int64_t v4 = (int64_t)a2;\n    if ((int32_t)a7 == 0) {\n        // 0x404950\n        *(int32_t *)(v4 + 56) = 1;\n        if (str3 != (int64_t)\"do_not_care\") {\n            goto lab_0x4047e6;\n        } else {\n            goto lab_0x404964;\n        }\n    } else {\n        if (str3 == (int64_t)\"do_not_care\") {\n            goto lab_0x404964;\n        } else {\n            goto lab_0x4047e6;\n        }\n    }\n  lab_0x4047e6:;\n    int64_t * v5 = (int64_t *)(v4 + 32);\n    int64_t v6; // 0x4047a0\n    if (v3 + a4 + *v5 > *(int64_t *)(v1 + 24)) {\n        if ((int32_t)a7 != 0) {\n            goto lab_0x4049d0;\n        } else {\n            // 0x4047fe\n            if (*(int64_t *)(v1 + 56) == v4) {\n                goto lab_0x4049d0;\n            } else {\n                // 0x40480b\n                if (*(int64_t *)(v1 + 48) == 0) {\n                    // 0x4049a0\n                    v6 = str3;\n                    if (*(int32_t *)&v2 == 0) {\n                        // 0x404838\n                        function_404c00(a1, a2, str3, a4, str, v3);\n                        goto lab_0x404843;\n                    } else {\n                        goto lab_0x4049ab;\n                    }\n                } else {\n                    goto lab_0x404816;\n                }\n            }\n        }\n    } else {\n        goto lab_0x404843;\n    }\n  lab_0x404964:;\n    uint64_t v7 = *(int64_t *)(v4 + 16); // 0x404967\n    int64_t v8 = *(int64_t *)(v4 + 8); // 0x40496b\n    int64_t v9 = v8; // 0x404972\n    int64_t v10 = v7; // 0x404972\n    int64_t v11 = v8; // 0x404972\n    int64_t v12 = v4; // 0x404972\n    if (v7 <= v4) {\n        goto lab_0x404881;\n    } else {\n        goto lab_0x404978;\n    }\n  lab_0x404843:;\n    int64_t v13 = a4; // 0x404849\n    if ((int32_t)a7 != 0) {\n        goto lab_0x404860;\n    } else {\n        int64_t v14 = *(int64_t *)(v1 + 80); // 0x40484b\n        v13 = a4;\n        if (v14 == 0) {\n            goto lab_0x404860;\n        } else {\n            int64_t v15 = v4 - *(int64_t *)(v1 + 56); // 0x404857\n            v13 = v15;\n            if (v14 == v15) {\n                // 0x404866\n                function_404c00(a1, a2, v4, v14, str, v3);\n                goto lab_0x404874;\n            } else {\n                goto lab_0x404860;\n            }\n        }\n    }\n  lab_0x404881:;\n    // 0x404881\n    int64_t v16; // 0x4047a0\n    int64_t v17; // 0x4047a0\n    if (v9 == 0) {\n        // 0x404a00\n        *(int64_t *)(v4 + 16) = 64;\n        int64_t v18 = function_409680(512); // 0x404a0d\n        *(int64_t *)(v4 + 8) = v18;\n        v16 = v18;\n        v17 = v10;\n    } else {\n        int64_t v19 = 16 * v10; // 0x404891\n        *(int64_t *)(v4 + 16) = 2 * v10;\n        int64_t v20 = function_4096d0(v9, v19); // 0x404899\n        *(int64_t *)(v4 + 8) = v20;\n        v16 = v20;\n        v17 = v19;\n    }\n    // 0x4048a2\n    v11 = v16;\n    v12 = v17;\n    int64_t * v21; // 0x4047a0\n    int64_t v22; // 0x4047a0\n    int64_t v23; // 0x4047a0\n    if (str3 == (int64_t)\"do_not_care\") {\n        goto lab_0x404978;\n    } else {\n        // 0x4048a2\n        v21 = (int64_t *)(v4 + 32);\n        v22 = v16;\n        v23 = v17;\n        goto lab_0x4048b2;\n    }\n  lab_0x404978:\n    // 0x404978\n    *a2 = v12 + 1;\n    *(int64_t *)(8 * v12 + v11) = 0;\n    int64_t result = v11; // 0x404987\n    goto lab_0x404932;\n  lab_0x4049d0:;\n    char * format2 = dcgettext(NULL, \"cannot fit single argument within argument list size limit\", 5); // 0x4049dc\n    v2 = 1;\n    error(1, (int32_t)\"cannot fit single argument within argument list size limit\" ^ (int32_t)\"cannot fit single argument within argument list size limit\", format2);\n    if (*(int64_t *)(v1 + 48) != 0) {\n        goto lab_0x404816;\n    } else {\n        // 0x4049a0\n        v6 = (int64_t)format2;\n        goto lab_0x4049ab;\n    }\n  lab_0x404860:\n    // 0x404860\n    if (*(int64_t *)(v1 + 32) != v4) {\n        goto lab_0x404874;\n    } else {\n        // 0x404866\n        function_404c00(a1, a2, v4, v13, str, v3);\n        goto lab_0x404874;\n    }\n  lab_0x404932:\n    // 0x404932\n    if ((int32_t)a7 == 0) {\n        // 0x40493f\n        return result;\n    }\n    int64_t result2 = result; // 0x404937\n    int64_t v24 = *(int64_t *)(v4 + 32); // 0x404937\n    goto lab_0x40493b;\n  lab_0x404816:;\n    char * format = dcgettext(NULL, \"argument list too long\", 5); // 0x404822\n    error(1, (int32_t)\"argument list too long\" ^ (int32_t)\"argument list too long\", format);\n    // 0x404838\n    function_404c00(a1, a2, (int64_t)format, a4, str, v3);\n    goto lab_0x404843;\n  lab_0x404874:;\n    uint64_t v29 = *(int64_t *)(v4 + 16); // 0x404874\n    int64_t v30 = *(int64_t *)(v4 + 8); // 0x404878\n    v9 = v30;\n    v10 = v29;\n    v21 = v5;\n    v22 = v30;\n    v23 = v4;\n    if (v29 > v4) {\n        goto lab_0x4048b2;\n    } else {\n        goto lab_0x404881;\n    }\n  lab_0x4048b2:;\n    int64_t v31 = *v21; // 0x4048b6\n    *a2 = v23 + 1;\n    int64_t * v32 = (int64_t *)(v4 + 24); // 0x4048bd\n    *(int64_t *)(8 * v23 + v22) = *v32 + v31;\n    int64_t v33 = v31; // 0x4048d0\n    if (a5 != 0) {\n        // 0x4048d2\n        strcpy((char *)(*v32 + v31), (char *)str);\n        int64_t v34 = *v21 + v3; // 0x4048e2\n        *v21 = v34;\n        v33 = v34;\n    }\n    int64_t str2 = *v32 + v33; // 0x4048e9\n    strcpy((char *)str2, (char *)str3);\n    int64_t v35 = *v21 + a4; // 0x4048f8\n    *v21 = v35;\n    int64_t v26; // 0x4047a0\n    int64_t v25; // 0x4047a0\n    int64_t v28; // 0x40490c\n    int64_t v27; // 0x404918\n    if ((int32_t)a7 != 0) {\n        // 0x404990\n        v26 = str2;\n        v25 = v23;\n        result2 = str3;\n        v24 = v35;\n        if (*(int64_t *)(v1 + 32) == str3) {\n            goto lab_0x404927;\n        } else {\n            goto lab_0x40493b;\n        }\n    } else {\n        // 0x40490c\n        v28 = *(int64_t *)(v1 + 80);\n        v27 = str2;\n        if (v28 == 0) {\n            goto lab_0x404921;\n        } else {\n            // 0x404915\n            v27 = str3 - *(int64_t *)(v1 + 56);\n            v26 = v28;\n            v25 = v28;\n            if (v28 == v27) {\n                goto lab_0x404927;\n            } else {\n                goto lab_0x404921;\n            }\n        }\n    }\n  lab_0x40493b:\n    // 0x40493b\n    *(int64_t *)(v4 + 40) = v24;\n    // 0x40493f\n    return result2;\n  lab_0x4049ab:\n    // 0x4049ab\n    if (*(int64_t *)(v1 + 72) != 0) {\n        goto lab_0x404816;\n    } else {\n        // 0x4049b6\n        if (*(int64_t *)(v1 + 80) == 0) {\n            // 0x404838\n            function_404c00(a1, a2, v6, a4, str, v3);\n            goto lab_0x404843;\n        } else {\n            goto lab_0x404816;\n        }\n    }\n  lab_0x404927:\n    // 0x404927\n    result = function_404c00(a1, a2, v25, v26, str, v3);\n    goto lab_0x404932;\n  lab_0x404921:\n    // 0x404921\n    v26 = v27;\n    v25 = v28;\n    if (*(int64_t *)(v1 + 32) != str3) {\n        // 0x40493f\n        return str3;\n    }\n    goto lab_0x404927;\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404bf8",
            "decompiledFuncCode": "int64_t function_404a40(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int32_t a5, int32_t a6, int64_t str6, int64_t a8, int64_t a9) {\n    int64_t v1 = (int64_t)a1;\n    int64_t v2 = *(int64_t *)(v1 + 24); // 0x404a57\n    int64_t v3 = (int64_t)g74; // 0x404a9d\n    if (g74 == NULL) {\n        // 0x404be0\n        v3 = function_409680(v2 + 1);\n        g74 = (char *)v3;\n    }\n    int64_t str4 = a5;\n    int64_t v4 = a6;\n    uint64_t v5 = v4 + a8;\n    int64_t v6 = a3; // 0x404a40\n    int64_t v7 = v3; // 0x404a40\n    int64_t v8 = v2 - 1; // 0x404a40\n    int64_t v9 = a4; // 0x404a40\n    int64_t v10 = a3; // 0x404a40\n    int64_t v11; // 0x404a40\n    int64_t v12; // 0x404a40\n    int64_t v13; // 0x404a40\n    while (true) {\n        int64_t str2 = v10;\n        int64_t n2 = v9;\n        uint64_t v14 = v8;\n        int64_t str = v7;\n        int64_t v15 = function_4066f0(str2, *(int64_t *)(v1 + 48), v6, a4, str4); // 0x404b34\n        if (v15 != 0) {\n            int64_t n = v15 - str2; // 0x404ab3\n            v13 = str;\n            v11 = str2;\n            if (v14 <= n) {\n                // break -> 0x404bb5\n                break;\n            }\n            uint64_t v16 = v14 - n; // 0x404ac8\n            strncpy((char *)str, (char *)str2, (int32_t)n);\n            int64_t str3 = n + str; // 0x404ada\n            v13 = str3;\n            v11 = v15;\n            if (v16 <= v5) {\n                // break -> 0x404bb5\n                break;\n            }\n            int64_t str5 = str3; // 0x404af1\n            if (a5 != 0) {\n                // 0x404af3\n                strcpy((char *)str3, (char *)str4);\n                str5 = str3 + v4;\n            }\n            // 0x404b03\n            strcpy((char *)str5, (char *)str6);\n            int64_t v17 = *(int64_t *)(v1 + 40); // 0x404b10\n            int64_t v18 = str5 + a8; // 0x404b19\n            int64_t v19 = v17 + v15; // 0x404b21\n            v6 = n;\n            v7 = v18;\n            v8 = v16 - v5;\n            v9 = n2 - n - v17;\n            v10 = v19;\n            v12 = v18;\n            if (*(char *)v19 == 0) {\n                goto lab_0x404b6c_2;\n            }\n        } else {\n            // 0x404b47\n            v13 = str;\n            v11 = str2;\n            if (v14 <= n2) {\n                // break -> 0x404bb5\n                break;\n            }\n            int64_t v20 = str2 + n2; // 0x404b55\n            strncpy((char *)str, (char *)str2, (int32_t)n2);\n            int64_t v21 = n2 + str; // 0x404b60\n            v6 = n2;\n            v7 = v21;\n            v8 = v14 - n2;\n            v9 = 0;\n            v10 = v20;\n            v12 = v21;\n            if (*(char *)v20 == 0) {\n                goto lab_0x404b6c_2;\n            }\n        }\n    }\n    // 0x404bb5\n    v12 = v13;\n    if (*(char *)v11 != 0) {\n        // 0x404bbb\n        error(1, (int32_t)\"command too long\" ^ (int32_t)\"command too long\", dcgettext(NULL, \"command too long\", 5));\n        v12 = v13;\n    }\n  lab_0x404b6c_2:\n    // 0x404b6c\n    *(char *)v12 = 0;\n    int64_t v22 = (int64_t)g74; // 0x404b7a\n    return function_4047a0(a1, a2, v22, v12 + 1 - v22, 0, 0, 0x100000000 * a9 >> 32);\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404e51",
            "decompiledFuncCode": "int64_t function_404c00(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404c00\n    function_4047a0(a1, a2, (int64_t)\"do_not_care\", 0, 0, 0, 0);\n    int32_t v1; // 0x404e36\n    if (a2 == NULL) {\n        // 0x404e14\n        __assert_fail(\"state->cmd_argc > 0\", \"buildcmd.c\", 277, \"bc_do_exec\");\n        v1 = sysconf((int32_t)\"state->cmd_argc > 0\" ^ (int32_t)\"state->cmd_argc > 0\");\n        return v1 < 1 ? 0x7fffffffffffffff : (int64_t)v1;\n    }\n    int64_t v2 = (int64_t)a2;\n    int64_t * v3 = (int64_t *)(v2 + 8); // 0x404c37\n    int64_t v4 = 8 * v2; // 0x404c3c\n    if (*(int64_t *)(v4 - 8 + *v3) != 0) {\n        // 0x404dfb\n        __assert_fail(\"state->cmd_argv[state->cmd_argc-1] == NULL\", \"buildcmd.c\", 278, \"bc_do_exec\");\n        // 0x404e14\n        __assert_fail(\"state->cmd_argc > 0\", \"buildcmd.c\", 277, \"bc_do_exec\");\n        v1 = sysconf((int32_t)\"state->cmd_argc > 0\" ^ (int32_t)\"state->cmd_argc > 0\");\n        return v1 < 1 ? 0x7fffffffffffffff : (int64_t)v1;\n    }\n    int64_t v5 = (int64_t)a1;\n    int64_t v6 = function_409680(v4 + 8); // 0x404c53\n    int64_t * v7 = (int64_t *)(v5 + 56); // 0x404c5c\n    int64_t v8 = v6 - 8;\n    int64_t v9 = v2; // 0x404c66\n    int64_t v10 = *v7; // 0x404c66\n    int64_t v11 = v2; // 0x404c66\n    int64_t v12 = 0; // 0x404c66\n    while (true) {\n        int64_t v13 = v12;\n        uint64_t v14 = v11;\n        int64_t v15 = v10;\n        uint64_t v16 = v9;\n        int64_t v17 = v13; // 0x404c73\n        if (v15 != 0) {\n            int64_t v18 = 0; // 0x404c7e\n            v18++;\n            int64_t v19 = 8 * v18; // 0x404c84\n            *(int64_t *)(v19 + v8) = *(int64_t *)(*v3 - 8 + v19);\n            while (v18 != v15) {\n                // 0x404c80\n                v18++;\n                v19 = 8 * v18;\n                *(int64_t *)(v19 + v8) = *(int64_t *)(*v3 - 8 + v19);\n            }\n            // 0x404c93\n            v17 = v13 + v15;\n        }\n        int64_t v20 = v17;\n        int64_t v21; // 0x404c00\n        int64_t v22; // 0x404c00\n        int64_t v23; // 0x404c00\n        if (v14 <= v15 || v20 >= v16) {\n            // 0x404c9b\n            v21 = 8 * v15;\n            v22 = v20;\n            v23 = v15;\n        } else {\n            int64_t v24 = v20 + 1; // 0x404cb5\n            int64_t v25 = v15 + 1; // 0x404cb9\n            int64_t v26 = 8 * v25;\n            *(int64_t *)(v26 + v8) = *(int64_t *)(*v3 - 8 + 8 * v24);\n            int64_t v27 = v24; // 0x404cca\n            int64_t v28 = v25; // 0x404cca\n            while (v14 > v25 && v24 < v16) {\n                // 0x404cb5\n                v24 = v27 + 1;\n                v25 = v28 + 1;\n                v26 = 8 * v25;\n                *(int64_t *)(v26 + v8) = *(int64_t *)(*v3 - 8 + 8 * v24);\n                v27 = v24;\n                v28 = v25;\n            }\n            // 0x404ccc\n            v21 = v26;\n            v22 = v24;\n            v23 = v25;\n            if (v25 < v15) {\n                // break -> 0x404de2\n                break;\n            }\n        }\n        int64_t v29 = v23;\n        *(int64_t *)(v21 + v6) = 0;\n        int64_t v30; // 0x404c00\n        int64_t v31; // 0x404c00\n        int64_t v32; // 0x404c00\n        if ((int32_t)v22 != 0) {\n            int64_t v33 = function_404600(v5, v2, 1, v14); // 0x404dbe\n            int64_t v34 = *v7; // 0x404dc3\n            v31 = v34;\n            v32 = v2;\n            v11 = v33;\n            v30 = v29 + v13 - v34;\n        } else {\n            // 0x404d00\n            if (*v7 + 1 < v14) {\n                int64_t v35 = function_404600(v5, v2, 0, v14); // 0x404d9b\n                v31 = *v7;\n                v32 = v2;\n                v11 = v35;\n                v30 = v13;\n            } else {\n                // 0x404d11\n                error(1, (int32_t)\"can't call exec() due to argument size restrictions\" ^ (int32_t)\"can't call exec() due to argument size restrictions\", dcgettext(NULL, \"can't call exec() due to argument size restrictions\", 5));\n                v31 = *v7;\n                v32 = (int32_t)\"can't call exec() due to argument size restrictions\" ^ (int32_t)\"can't call exec() due to argument size restrictions\";\n                v11 = v14;\n                v30 = v13;\n            }\n        }\n        // 0x404d41\n        v12 = v30;\n        v9 = v32;\n        v10 = v31;\n        if (v12 + 1 >= v9 - v10) {\n            // 0x404d58\n            free((int64_t *)v6);\n            *a2 = v10;\n            *(int64_t *)(v2 + 32) = *(int64_t *)(v2 + 40);\n            *(int64_t *)(v2 + 56) = -0x100000000;\n            return -0x100000000;\n        }\n    }\n    // 0x404de2\n    __assert_fail(\"dst_pos >= ctl->initial_argc\", \"buildcmd.c\", 258, \"copy_args\");\n    // 0x404dfb\n    __assert_fail(\"state->cmd_argv[state->cmd_argc-1] == NULL\", \"buildcmd.c\", 278, \"bc_do_exec\");\n    // 0x404e14\n    __assert_fail(\"state->cmd_argc > 0\", \"buildcmd.c\", 277, \"bc_do_exec\");\n    v1 = sysconf((int32_t)\"state->cmd_argc > 0\" ^ (int32_t)\"state->cmd_argc > 0\");\n    return v1 < 1 ? 0x7fffffffffffffff : (int64_t)v1;\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "404ea0",
            "decompiledFuncCode": "int64_t function_404e60(void) {\n    int64_t str = *(int64_t *)g33; // 0x404e6f\n    int64_t v1 = g33; // 0x404e75\n    int64_t result = 0; // 0x404e75\n    if (str == 0) {\n        // 0x404e96\n        return 0;\n    }\n    int32_t len = strlen((char *)str); // 0x404e80\n    v1 += 8;\n    int64_t str2 = *(int64_t *)v1; // 0x404e89\n    result = result + 1 + (int64_t)len;\n    while (str2 != 0) {\n        // 0x404e80\n        len = strlen((char *)str2);\n        v1 += 8;\n        str2 = *(int64_t *)v1;\n        result = result + 1 + (int64_t)len;\n    }\n    // 0x404e96\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404f80",
            "decompiledFuncCode": "int64_t function_404ea0(int64_t * a1, int64_t a2) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t v2 = function_404e60(); // 0x404eaa\n    *(int64_t *)(v1 + 16) = 0x1000;\n    int32_t v3 = sysconf(_SC_ARG_MAX); // 0x404ebc\n    *(int32_t *)a1 = 0;\n    uint64_t v4 = v3 < 1 ? 0x7fffffffffffffff : (int64_t)v3; // 0x404ed4\n    int64_t * v5 = (int64_t *)(v1 + 8); // 0x404ed8\n    *v5 = v4;\n    if (v2 > v4) {\n        // 0x404f40\n        return 1;\n    }\n    uint64_t v6 = v2 + a2; // 0x404ee1\n    if (v4 <= v6) {\n        // 0x404f40\n        return 2;\n    }\n    uint64_t v7 = v4 - v6; // 0x404eeb\n    *v5 = v7;\n    int64_t v8 = v7 / 8 - 2; // 0x404ef9\n    *(int64_t *)(v1 + 32) = v8;\n    if (v8 == 0) {\n        // 0x404f5a\n        __assert_fail(\"ctl->max_arg_count > 0\", \"buildcmd.c\", 534, \"bc_init_controlinfo\");\n        return &g100;\n    }\n    // 0x404f03\n    *(int64_t *)(v1 + 24) = v7;\n    *(int64_t *)(v1 + 40) = 0;\n    *(int64_t *)(v1 + 48) = 0;\n    *(int64_t *)(v1 + 56) = 0;\n    *(int64_t *)(v1 + 64) = 0x404700;\n    *(int64_t *)(v1 + 72) = 0;\n    *(int64_t *)(v1 + 80) = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "404fa4",
            "decompiledFuncCode": "int64_t function_404f80(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t v2 = *(int64_t *)(v1 + 8); // 0x404f80\n    int64_t result = v2; // 0x404f8a\n    if (v2 >= 0x20000) {\n        uint64_t v3 = *(int64_t *)(v1 + 16); // 0x404f8c\n        result = v3 > 0x20000 ? v3 : 0x20000;\n    }\n    // 0x404f9f\n    *(int64_t *)(v1 + 24) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "405050",
            "decompiledFuncCode": "int64_t function_404fb0(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 24); // 0x404fc0\n    *(int64_t *)a2 = 0;\n    int64_t * v2 = (int64_t *)(a2 + 32); // 0x404fcb\n    *v2 = 0;\n    *(int64_t *)(a2 + 8) = 0;\n    *(int64_t *)(a2 + 16) = 0;\n    *(int64_t *)(a2 + 64) = 0;\n    *(int64_t *)(a2 + 72) = 0;\n    if (v1 >= 0x7ffffffffffff800) {\n        // 0x405034\n        __assert_fail(\"ctl->arg_max <= (LONG_MAX - 2048L)\", \"buildcmd.c\", 588, \"bc_init_state\");\n        return &g100;\n    }\n    int64_t v3 = function_409680(v1 + 1); // 0x405002\n    *(int64_t *)(a2 + 40) = 0;\n    *(int64_t *)(a2 + 24) = v3;\n    *v2 = 0;\n    *(int64_t *)(a2 + 56) = -0x100000000;\n    *(int64_t *)(a2 + 48) = a3;\n    return -0x100000000;\n}\n"
        },
        {
            "funcName": "function_405050",
            "funcStartAddr": "405050",
            "funcEndAddr": "40506e",
            "decompiledFuncCode": "int64_t function_405050(int64_t * a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    *a2 = *(int64_t *)((int64_t)a1 + 56);\n    *(int64_t *)(v1 + 32) = *(int64_t *)(v1 + 40);\n    *(int64_t *)(v1 + 56) = -0x100000000;\n    return -0x100000000;\n}\n"
        },
        {
            "funcName": "function_405070",
            "funcStartAddr": "405070",
            "funcEndAddr": "4050d9",
            "decompiledFuncCode": "int64_t function_405070(int64_t str) {\n    int64_t v1 = 0; // 0x405081\n    int64_t v2 = 0; // 0x405081\n    int64_t v3 = 0; // 0x405081\n    int64_t v4 = 0; // 0x405081\n    if (str != 0) {\n        int32_t len = strlen((char *)str); // 0x405088\n        v1++;\n        int64_t str2 = *(int64_t *)(8 * v1 + str); // 0x405091\n        v2 += (int64_t)len;\n        v3 = v1;\n        v4 = v2;\n        while (str2 != 0) {\n            // 0x405088\n            len = strlen((char *)str2);\n            v1++;\n            str2 = *(int64_t *)(8 * v1 + str);\n            v2 += (int64_t)len;\n            v3 = v1;\n            v4 = v2;\n        }\n    }\n    // 0x40509d\n    int64_t v5; // 0x405070\n    if ((int32_t)function_404710(\"__GNU_FINDUTILS_EXEC_ARG_COUNT_LIMIT\", v3, v5, v5, v5) == 0) {\n        // 0x4050c0\n        return (int32_t)function_404710(\"__GNU_FINDUTILS_EXEC_ARG_LENGTH_LIMIT\", v4, 1, v5, v5) != 0;\n    }\n    // 0x4050b3\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "40515c",
            "decompiledFuncCode": "int64_t function_4050e0(void) {\n    int64_t v1 = function_405aa0(); // 0x4050e9\n    if (v1 == 0) {\n        // 0x40514e\n        return 0xffffffff;\n    }\n    struct __dirstream * dirp = (struct __dirstream *)v1; // 0x405101\n    struct dirent * v2 = readdir(dirp); // 0x405101\n    struct dirent * v3 = v2; // 0x405109\n    int64_t v4 = 0; // 0x405109\n    int64_t v5 = 0xffffffff; // 0x405109\n    if (v2 == NULL) {\n        // 0x405141\n        closedir(dirp);\n        // 0x40514e\n        return 0xffffffff;\n    }\n    int64_t v6; // 0x4050e0\n    struct dirent * v7; // 0x4050e0\n    int64_t v8; // 0x4050e0\n    int64_t v9; // 0x4050e0\n    int64_t v10; // 0x40510b\n    while (true) {\n        // 0x40510b\n        v7 = v3;\n        v8 = v5;\n        v6 = v4;\n        while (true) {\n          lab_0x40510b:\n            // 0x40510b\n            v5 = v8;\n            int64_t v11 = (int64_t)v7;\n            v10 = v11 + 19;\n            if (*(char *)v10 != 46) {\n                goto lab_0x40511e;\n            } else {\n                // 0x405111\n                switch (*(char *)(v11 + 20)) {\n                    case 46: {\n                        goto lab_0x4050fe;\n                    }\n                    case 0: {\n                        goto lab_0x4050fe;\n                    }\n                    default: {\n                        goto lab_0x40511e;\n                    }\n                }\n            }\n        }\n      lab_0x4050fe:\n        // 0x4050fe\n        v4 = v6;\n        v3 = readdir(dirp);\n        if (v3 == NULL) {\n            // 0x405141\n            closedir(dirp);\n            v9 = v5;\n            if ((int32_t)v4 == 0) {\n                return 0xffffffff;\n            } else {\n                return v9 & 0xffffffff;\n            }\n        }\n    }\n  lab_0x405141:\n    // 0x405141\n    closedir(dirp);\n    int64_t v12; // 0x405134\n    v9 = v12;\n    // 0x40514e\n    return v9 & 0xffffffff;\n  lab_0x40511e:;\n    int64_t v13 = function_4055f0(v10, 0); // 0x40512a\n    int32_t v14 = v5; // 0x405132\n    int32_t v15 = v14 - (int32_t)v13; // 0x405132\n    int64_t v16 = v15 < 0 == ((v15 ^ v14) & (int32_t)(v13 ^ v5)) < 0 ? v5 : v13;\n    v12 = v16 & 0xffffffff;\n    struct dirent * v17 = readdir(dirp); // 0x405137\n    v7 = v17;\n    v8 = v12;\n    v6 = 1;\n    if (v17 == NULL) {\n        // break (via goto) -> 0x405141\n        goto lab_0x405141;\n    }\n    goto lab_0x40510b;\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "4051ca",
            "decompiledFuncCode": "int64_t function_405160(int64_t a1, int64_t a2) {\n    int32_t v1 = a1; // 0x405171\n    int64_t v2; // 0x405160\n    if (function_409d40(v1, 1, v2, v2) % 2 != 0) {\n        // 0x40517d\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(a2 + 8); // 0x40518a\n    int64_t v4 = function_405740(1, 4 * *v3 + 4, a2 + 16); // 0x40519e\n    if (v4 == 0) {\n        // 0x40517d\n        return 0xffffffff;\n    }\n    int64_t v5 = *v3; // 0x4051a8\n    *(int64_t *)a2 = v4;\n    *(int32_t *)(4 * v5 + v4) = v1;\n    *v3 = v5 + 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4051d0",
            "funcStartAddr": "4051d0",
            "funcEndAddr": "405251",
            "decompiledFuncCode": "int64_t function_4051d0(int64_t a1, int64_t a2) {\n    int32_t v1 = a1; // 0x4051e2\n    int64_t v2; // 0x4051d0\n    if (function_409d40(v1, 1, v2, v2) % 2 != 0) {\n        // 0x405248\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(a2 + 16); // 0x4051eb\n    uint64_t v4 = *v3; // 0x4051eb\n    uint64_t v5 = *(int64_t *)(a2 + 8); // 0x4051ef\n    if (v4 >= v5) {\n        // 0x405228\n        *(int32_t *)(a2 + 24) = v1;\n        return 0xffffffff;\n    }\n    uint64_t v6 = a1 & 0xffffffff; // 0x4051dc\n    uint32_t v7 = *(int32_t *)(v5 + 4 * v4); // 0x4051fc\n    uint32_t v8 = v7; // 0x405201\n    if (v6 <= (int64_t)v7) {\n        goto lab_0x405244;\n      lab_0x405244:\n        // 0x405244\n        if (v8 == v1) {\n            // 0x405248\n            return 0;\n        }\n        // 0x405228\n        *(int32_t *)(a2 + 24) = v1;\n        return 0xffffffff;\n    }\n    int64_t v9 = v4 + 1;\n    while (v5 != v9) {\n        int64_t v10 = v9 + 1; // 0x405210\n        v8 = *(int32_t *)(v5 - 4 + 4 * v10);\n        if (v6 <= (int64_t)v8) {\n            // 0x405240\n            *v3 = v9;\n            goto lab_0x405244;\n        }\n        v9 = v10;\n    }\n    // 0x405224\n    *v3 = v5;\n    // 0x405228\n    *(int32_t *)(a2 + 24) = v1;\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "4052a5",
            "decompiledFuncCode": "int64_t function_405260(void) {\n    int32_t v1 = sysconf(_SC_OPEN_MAX); // 0x40526a\n    int32_t v2 = v1 == -1 ? 20 : v1;\n    int32_t rlp; // bp-24, 0x405260\n    int32_t v3 = getrlimit(7, (struct rlimit *)&rlp); // 0x405287\n    int32_t result = v2; // 0x405290\n    if (v3 == 0) {\n        int32_t v4 = rlp; // 0x405292\n        result = v4 == -1 ? v2 : v4;\n    }\n    // 0x40529d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052b0",
            "funcStartAddr": "4052b0",
            "funcEndAddr": "405399",
            "decompiledFuncCode": "int64_t function_4052b0(int64_t a1, int64_t a2, int64_t * a3) {\n    // 0x4052b0\n    if ((int32_t)a1 < 1) {\n        // 0x405364\n        return 0;\n    }\n    uint64_t v1 = a1 & 0xffffffff; // 0x4052bc\n    int64_t fds; // bp-568, 0x4052b0\n    int64_t v2 = &fds; // 0x4052cd\n    int64_t v3 = 0;\n    int64_t v4 = v1 - v3; // 0x4052dd\n    int32_t v5 = v4; // 0x4052df\n    int32_t v6 = v5 - 64; // 0x4052df\n    uint64_t v7 = v6 == 0 | v6 < 0 != (63 - v5 & v5) < 0 ? v4 & 0xffffffff : 64; // 0x4052e2\n    int64_t nfds = 0x100000000 * v7 / 0x100000000; // 0x4052e6\n    int64_t v8 = v2; // 0x4052eb\n    int64_t v9 = 0; // 0x4052eb\n    int64_t result; // 0x4052b0\n    int64_t v10; // 0x405313\n    int32_t v11; // 0x405327\n    if (v5 < 1) {\n        // 0x405380\n        if (poll((struct pollfd *)&fds, (int32_t)nfds, 0) == -1) {\n            // break -> 0x405364\n            break;\n        }\n    } else {\n        *(int16_t *)(v8 | 6) = 0;\n        v10 = v9 + 1 & 0xffffffff;\n        *(int16_t *)(v8 | 4) = 5;\n        *(int32_t *)v8 = (int32_t)(v9 + v3);\n        v8 += 8;\n        v9 = v10;\n        while (v10 < v7) {\n            // 0x405300\n            *(int16_t *)(v8 | 6) = 0;\n            v10 = v9 + 1 & 0xffffffff;\n            *(int16_t *)(v8 | 4) = 5;\n            *(int32_t *)v8 = (int32_t)(v9 + v3);\n            v8 += 8;\n            v9 = v10;\n        }\n        // 0x405322\n        v11 = poll((struct pollfd *)&fds, (int32_t)nfds, 0);\n        if (v11 == -1) {\n            // break -> 0x405364\n            break;\n        }\n        for (int64_t i = 0; i < v7; i++) {\n            // 0x405338\n            if (v11 != 0 == (*(int16_t *)(8 * i + (v2 || 6)) != 32)) {\n                // 0x405364\n                result = v11;\n                return result;\n            }\n        }\n    }\n    int64_t v12 = v7 + v3 & 0xffffffff; // 0x405356\n    result = 0;\n    while (v1 > v12) {\n        // 0x4052d4\n        v3 = v12;\n        v4 = v1 - v3;\n        v5 = v4;\n        v6 = v5 - 64;\n        v7 = v6 == 0 | v6 < 0 != (63 - v5 & v5) < 0 ? v4 & 0xffffffff : 64;\n        nfds = 0x100000000 * v7 / 0x100000000;\n        v8 = v2;\n        v9 = 0;\n        if (v5 < 1) {\n            int32_t v13 = poll((struct pollfd *)&fds, (int32_t)nfds, 0); // 0x405385\n            result = 0xffffffff;\n            if (v13 == -1) {\n                // break -> 0x405364\n                break;\n            }\n        } else {\n            *(int16_t *)(v8 | 6) = 0;\n            v10 = v9 + 1 & 0xffffffff;\n            *(int16_t *)(v8 | 4) = 5;\n            *(int32_t *)v8 = (int32_t)(v9 + v3);\n            v8 += 8;\n            v9 = v10;\n            while (v10 < v7) {\n                // 0x405300\n                *(int16_t *)(v8 | 6) = 0;\n                v10 = v9 + 1 & 0xffffffff;\n                *(int16_t *)(v8 | 4) = 5;\n                *(int32_t *)v8 = (int32_t)(v9 + v3);\n                v8 += 8;\n                v9 = v10;\n            }\n            // 0x405322\n            v11 = poll((struct pollfd *)&fds, (int32_t)nfds, 0);\n            result = 0xffffffff;\n            if (v11 == -1) {\n                // break -> 0x405364\n                break;\n            }\n            for (int64_t i = 0; i < v7; i++) {\n                // 0x405338\n                if (v11 != 0 == (*(int16_t *)(8 * i + (v2 || 6)) != 32)) {\n                    // 0x405364\n                    result = v11;\n                    return result;\n                }\n            }\n        }\n        // 0x405356\n        v12 = v7 + v3 & 0xffffffff;\n        result = 0;\n    }\n  lab_0x405364_2:\n    // 0x405364\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053a0",
            "funcStartAddr": "4053a0",
            "funcEndAddr": "405403",
            "decompiledFuncCode": "int64_t function_4053a0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_4050e0(); // 0x4053a4\n    int32_t v2 = v1;\n    int32_t v3 = v2; // 0x4053ab\n    int64_t v4 = v1; // 0x4053ab\n    if (v2 < 0) {\n        // 0x4053ad\n        v4 = function_405260();\n        v3 = v4;\n    }\n    int64_t v5 = 0; // bp-40, 0x4053be\n    function_4052b0(v4 + (int64_t)(v3 != 0x7fffffff) & 0xffffffff, 0x405160, &v5);\n    g78 = v5;\n    g77 = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "40551e",
            "decompiledFuncCode": "int64_t function_405410(int64_t a1, int32_t a2, int64_t a3) {\n    // 0x405410\n    if (g76 == 0) {\n        int32_t fd = function_405b30((int64_t)&g3, 0x80000, a3); // 0x405484\n        if (fd >= 0) {\n            // 0x4054f0\n            int64_t v1; // 0x405410\n            int64_t v2 = function_409d40(fd, 1, a3, v1); // 0x4054f9\n            close(fd);\n            g76 = 1;\n            g75 = (char)v2 % 2;\n        } else {\n            // 0x405488\n            g75 = 0;\n            g76 = 1;\n        }\n    }\n    int64_t v3 = (a2 & 64) != 0 ? a3 & 0xffffffff : 0;\n    int64_t v4 = function_405b30(a1, a2 | 0x80000, v3); // 0x40544a\n    int64_t result = v4 & 0xffffffff; // 0x40544f\n    if ((int32_t)v4 > -1 != (g75 == 0)) {\n        // 0x40545e\n        return result;\n    }\n    // 0x4054d0\n    function_405860(result, 1, v3);\n    return result;\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "40554b",
            "decompiledFuncCode": "int64_t function_405520(void) {\n    // 0x405520\n    free((int64_t *)g78);\n    g78 = 0;\n    g77 = 0;\n    return &g100;\n}\n"
        },
        {
            "funcName": "function_405550",
            "funcStartAddr": "405550",
            "funcEndAddr": "4055f0",
            "decompiledFuncCode": "int64_t function_405550(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_4050e0(); // 0x405564\n    int32_t v2 = v1;\n    int32_t v3 = v2; // 0x40556b\n    int64_t v4 = v1; // 0x40556b\n    if (v2 < 0) {\n        // 0x40556d\n        v4 = function_405260();\n        v3 = v4;\n    }\n    int64_t v5 = g78; // bp-56, 0x405586\n    int64_t result = function_4052b0(v4 + (int64_t)(v3 != 0x7fffffff) & 0xffffffff, 0x4051d0, &v5); // 0x4055a2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "40573e",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t a1, uint32_t a2) {\n    int32_t * err_num = __errno_location(); // 0x405602\n    *err_num = 0;\n    char * str = (char *)a1; // 0x40561d\n    char * endptr; // bp-48, 0x4055f0\n    int64_t str_as_l = strtol(str, &endptr, 10); // 0x40561d\n    if (str_as_l >= 0x7ffffffffffffffe) {\n        // 0x405650\n        error(1, *err_num, \"%s\", str);\n        *err_num = 34;\n        error(1, ERANGE, \"%s\", str);\n        // 0x405671\n        return str_as_l & 0xffffffff;\n    }\n    int64_t v1 = a2; // 0x4055f4\n    if (*endptr != 0) {\n        // 0x4056e0\n        function_408c90(1, v1, a1);\n        function_408c90(0, v1, (int64_t)endptr);\n        error(1, *err_num, dcgettext(NULL, \"Unexpected suffix %s on %s\", 5));\n        return str_as_l & 0xffffffff;\n    }\n    int64_t v2 = (int64_t)endptr; // 0x405692\n    if (v2 == a1) {\n        // 0x4056a1\n        function_408c90(0, v1, v2);\n        error(1, *err_num, dcgettext(NULL, \"Expected an integer: %s\", 5));\n    }\n    // 0x405671\n    return str_as_l & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "40585d",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1, uint64_t a2, uint64_t a3) {\n    int32_t * v1 = __errno_location(); // 0x405751\n    int64_t mem; // 0x405740\n    int64_t size; // 0x405740\n    int64_t v2; // 0x405740\n    int32_t v3; // 0x405756\n    int64_t v4; // 0x405776\n    if (a2 == 0) {\n        goto lab_0x405825;\n    } else {\n        // 0x405762\n        v3 = *v1;\n        if (a3 == 0) {\n            // 0x4057c0\n            v4 = 32;\n            size = 16;\n            if (a2 < 17) {\n                goto lab_0x40579e;\n            } else {\n                goto lab_0x405794;\n            }\n        } else {\n            // 0x40576e\n            mem = a1;\n            if (a3 >= a2) {\n                goto lab_0x4057ac;\n            } else {\n                // 0x405776\n                v4 = 2 * a3;\n                v2 = a2;\n                if (v4 > a3 | -1 * a3 == 0) {\n                    goto lab_0x405794;\n                } else {\n                    goto lab_0x4057e8;\n                }\n            }\n        }\n    }\n  lab_0x405825:\n    // 0x405825\n    __assert_fail(\"wanted > 0u\", \"extendbuf.c\", 71, \"extendbuf\");\n    int64_t result = function_405740((int64_t)\"wanted > 0u\", (int64_t)\"extendbuf.c\", 71); // 0x405844\n    if (result == 0) {\n        // 0x405850\n        free((int64_t *)\"wanted > 0u\");\n        function_4098a0((int64_t)\"wanted > 0u\");\n        // UNREACHABLE\n    }\n    // 0x4057fc\n    return result;\n  lab_0x40579e:\n    if (a1 != 0) {\n        // 0x40580c\n        __assert_fail(\"NULL == existing\", \"extendbuf.c\", 79, \"extendbuf\");\n        goto lab_0x405825;\n    } else {\n        // 0x4057a3\n        *(int64_t *)a3 = size;\n        mem = (int64_t)malloc((int32_t)size);\n        goto lab_0x4057ac;\n    }\n  lab_0x405794:;\n    int64_t v5 = v4;\n    int64_t v6; // 0x405740\n    while (v5 < a2) {\n        int64_t v7 = 2 * v5; // 0x405788\n        if (!((v5 < v7 | -1 * v5 == 0))) {\n            // 0x4057d8\n            size = a2;\n            v6 = a2;\n            if (a3 == 0) {\n                goto lab_0x40579e;\n            } else {\n                goto lab_0x4057e0;\n            }\n        }\n        v5 = v7;\n    }\n    // 0x405799\n    size = v5;\n    v6 = v5;\n    if (a3 != 0) {\n        goto lab_0x4057e0;\n    } else {\n        goto lab_0x40579e;\n    }\n  lab_0x4057ac:\n    // 0x4057ac\n    if (mem == 0) {\n        // 0x4057fc\n        return 0;\n    }\n    // 0x4057b1\n    *v1 = v3;\n    return mem;\n  lab_0x4057e0:\n    // 0x4057e0\n    mem = a1;\n    v2 = v6;\n    if (v6 == a3) {\n        goto lab_0x4057ac;\n    } else {\n        goto lab_0x4057e8;\n    }\n  lab_0x4057e8:\n    // 0x4057e8\n    *(int64_t *)a3 = v2;\n    int64_t * mem2 = realloc((int64_t *)a1, (int32_t)v2); // 0x4057f2\n    if (mem2 == NULL) {\n        // 0x4057fc\n        return 0;\n    }\n    // 0x4057b1\n    *v1 = v3;\n    return (int64_t)mem2;\n}\n"
        },
        {
            "funcName": "function_405860",
            "funcStartAddr": "405860",
            "funcEndAddr": "4058b7",
            "decompiledFuncCode": "int64_t function_405860(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a1; // 0x405873\n    int64_t v2; // 0x405860\n    int64_t v3 = function_409d40(v1, 1, 0, v2); // 0x405873\n    int32_t v4 = v3; // 0x405878\n    if (v4 < 0) {\n        // 0x4058a9\n        return 0xffffffff;\n    }\n    int64_t v5 = v3 & 0xfffffffe | (int64_t)((char)a2 != 0); // 0x405889\n    int64_t result = 0; // 0x405890\n    if ((int32_t)v5 != v4) {\n        // 0x405892\n        result = (int32_t)function_409d40(v1, 2, v5, v3 & 0xffffffff) == -1 ? 0xffffffff : 0;\n    }\n    // 0x4058a9\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "4058ce",
            "decompiledFuncCode": "int64_t function_4058c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4058c0\n    int64_t v1; // 0x4058c0\n    return function_409d40((int32_t)a1, 1030, 0, v1);\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "4058d8",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t a1) {\n    // 0x4058d0\n    g79 = a1;\n    int64_t result; // 0x4058d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4059dd",
            "decompiledFuncCode": "int64_t function_4058e0(int64_t a1, int64_t a2) {\n    int64_t v1 = (int64_t)g32; // 0x4058e4\n    int64_t v2; // 0x4058e0\n    if (function_409ec0(v1) != 0) {\n        int64_t v3 = function_409ef0(v1, 0, 1); // 0x40599a\n        int64_t v4 = (int64_t)g32; // 0x40599f\n        v2 = v4;\n        if ((int32_t)v3 == 0) {\n            int64_t v5 = function_409e80(v4, 0); // 0x405918\n            int64_t v6 = (int64_t)g32; // 0x40591d\n            v2 = v6;\n            if ((int32_t)v5 == 0) {\n                goto lab_0x4059ae;\n            } else {\n                // 0x40592c\n                function_40b2b0(v6);\n                goto lab_0x405938;\n            }\n        } else {\n            goto lab_0x4059ae;\n        }\n    } else {\n        // 0x4058fc\n        if ((int32_t)function_40b2b0(v1) == 0) {\n            // 0x405908\n            return function_405a00();\n        }\n        goto lab_0x405938;\n    }\n  lab_0x4059ae:\n    // 0x4059ae\n    if ((int32_t)function_40b2b0(v2) == 0) {\n        // 0x4059bb\n        return function_405a00();\n    }\n    goto lab_0x405938;\n  lab_0x405938:;\n    char * v7 = dcgettext(NULL, \"error closing file\", 5); // 0x405944\n    int32_t * err_num = __errno_location(); // 0x405953\n    if (g79 == 0) {\n        // 0x4059c8\n        error(0, *err_num, \"%s\", v7);\n    } else {\n        // 0x405960\n        error(0, *err_num, \"%s: %s\", (char *)function_408e10((int64_t)g79), v7);\n    }\n    // 0x40597f\n    function_405a00();\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059e0",
            "funcStartAddr": "4059e0",
            "funcEndAddr": "4059e8",
            "decompiledFuncCode": "int64_t function_4059e0(int64_t a1) {\n    // 0x4059e0\n    g81 = a1;\n    int64_t result; // 0x4059e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4059f0",
            "funcStartAddr": "4059f0",
            "funcEndAddr": "4059f8",
            "decompiledFuncCode": "int64_t function_4059f0(int64_t a1) {\n    // 0x4059f0\n    g80 = a1;\n    int64_t result; // 0x4059f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a00",
            "funcStartAddr": "405a00",
            "funcEndAddr": "405a9e",
            "decompiledFuncCode": "int64_t function_405a00(void) {\n    // 0x405a00\n    int32_t * err_num; // 0x405a16\n    if ((int32_t)function_40b2b0((int64_t)g31) == 0) {\n        goto lab_0x405a2c;\n    } else {\n        // 0x405a16\n        err_num = __errno_location();\n        if (g80 == 0) {\n            goto lab_0x405a43;\n        } else {\n            // 0x405a27\n            if (*err_num != 32) {\n                goto lab_0x405a43;\n            } else {\n                goto lab_0x405a2c;\n            }\n        }\n    }\n  lab_0x405a2c:;\n    int64_t result = function_40b2b0((int64_t)g35); // 0x405a33\n    if ((int32_t)result == 0) {\n        // 0x405a3c\n        return result;\n    }\n    // 0x405a7e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x405a43:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x405a4f\n    if (g81 == 0) {\n        // 0x405a89\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405a63\n        error(0, *err_num, \"%s: %s\", (char *)function_408e10((int64_t)g81), v1);\n    }\n    // 0x405a7e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405aa0",
            "funcStartAddr": "405aa0",
            "funcEndAddr": "405b2e",
            "decompiledFuncCode": "int64_t function_405aa0(void) {\n    // 0x405aa0\n    int64_t name; // 0x405aa0\n    struct __dirstream * dirp = opendir((char *)name); // 0x405aa8\n    if (dirp == NULL) {\n        // 0x405ac2\n        return (int64_t)dirp;\n    }\n    uint32_t v1 = dirfd(dirp); // 0x405ab8\n    if (v1 >= 3) {\n        // 0x405ac2\n        return (int64_t)dirp;\n    }\n    int64_t v2 = function_409080((int64_t)v1, name); // 0x405ad2\n    int32_t * v3 = __errno_location(); // 0x405ada\n    int32_t fd = v2; // 0x405ae2\n    if (fd < 0) {\n        // 0x405aed\n        closedir(dirp);\n        return 0;\n    }\n    struct __dirstream * v4 = fdopendir(fd); // 0x405b13\n    if (v4 == NULL) {\n        // 0x405b24\n        close(fd);\n    }\n    // 0x405aed\n    closedir(dirp);\n    return (int64_t)v4;\n}\n"
        },
        {
            "funcName": "function_405b30",
            "funcStartAddr": "405b30",
            "funcEndAddr": "405b7a",
            "decompiledFuncCode": "int64_t function_405b30(int64_t path, int32_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, oflag); // 0x405b43\n    return function_409090((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_405b80",
            "funcStartAddr": "405b80",
            "funcEndAddr": "405cf6",
            "decompiledFuncCode": "int64_t function_405b80(int64_t a1, int64_t a2, uint64_t a3, int64_t * a4, int64_t a5) {\n    int64_t v1 = a1;\n    if (a3 >= 0x2000000000000000) {\n        // 0x405c98\n        return 0;\n    }\n    int64_t v2 = 8 * a3; // 0x405b9b\n    v1 = v2;\n    int64_t v3; // 0x405b80\n    if (v2 < 4015) {\n        // 0x405bb4\n        int64_t v4; // bp-56, 0x405b80\n        int64_t v5 = 31 - (v2 + 39 & -16) + (int64_t)&v4 & -16; // 0x405bc8\n        v1 = v5;\n        v3 = v5;\n        if (v5 == 0) {\n            // 0x405c98\n            return 0;\n        }\n    } else {\n        int64_t v6 = function_40b890(v2, a2, a3, (int64_t)a4); // 0x405c7b\n        v1 = v6;\n        v3 = v6;\n        if (v6 == 0) {\n            // 0x405c98\n            return 0;\n        }\n    }\n    // 0x405bd5\n    *(int64_t *)(v3 + 8) = 1;\n    if (a3 >= 3) {\n        int64_t v7 = 0;\n        int64_t v8 = 2;\n        char v9 = *(char *)(a2 - 1 + v8); // 0x405bf0\n        int64_t v10 = v7; // 0x405bfa\n        int64_t v11 = v7; // 0x405bfa\n        int64_t v12; // 0x405b80\n        int64_t v13; // 0x405b80\n        int64_t v14; // 0x405cd8\n        int64_t v15; // 0x405c08\n        if (v9 != *(char *)(v7 + a2)) {\n            v12 = v10;\n            while (v12 != 0) {\n                // 0x405c08\n                v15 = v12 - *(int64_t *)(8 * v12 + v1);\n                if (*(char *)(v15 + a2) == v9) {\n                    goto lab_0x405cd8;\n                }\n                v12 = v15;\n            }\n            // 0x405c1b\n            *(int64_t *)(v1 + 8 * v8) = v8;\n            v13 = 0;\n        } else {\n            // 0x405cd8\n            v14 = v11 + 1;\n            *(int64_t *)(v1 + 8 * v8) = v8 - v14;\n            v13 = v14;\n        }\n        // 0x405c22\n        v7 = v13;\n        int64_t v16 = v8 + 1; // 0x405c22\n        while (v16 != a3) {\n            // 0x405bf0\n            v8 = v16;\n            v9 = *(char *)(a2 - 1 + v8);\n            v10 = v7;\n            v11 = v7;\n            if (v9 != *(char *)(v7 + a2)) {\n                v12 = v10;\n                while (v12 != 0) {\n                    // 0x405c08\n                    v15 = v12 - *(int64_t *)(8 * v12 + v1);\n                    if (*(char *)(v15 + a2) == v9) {\n                        goto lab_0x405cd8;\n                    }\n                    v12 = v15;\n                }\n                // 0x405c1b\n                *(int64_t *)(v1 + 8 * v8) = v8;\n                v13 = 0;\n            } else {\n                // 0x405cd8\n                v14 = v11 + 1;\n                *(int64_t *)(v1 + 8 * v8) = v8 - v14;\n                v13 = v14;\n            }\n            // 0x405c22\n            v7 = v13;\n            v16 = v8 + 1;\n        }\n    }\n    // 0x405c2b\n    *a4 = 0;\n    char v17 = *(char *)&v1;\n    char v18 = v17; // 0x405c43\n    int64_t v19 = a1; // 0x405c43\n    int64_t v20 = a1; // 0x405c43\n    int64_t v21 = 0; // 0x405c43\n    if (v17 == 0) {\n        // 0x405c5f\n        function_40b900(v1);\n        return 1;\n    }\n    int64_t v22; // 0x405b80\n    while (true) {\n        char v23 = v18;\n        int64_t v24 = v20; // 0x405c49\n        int64_t v25 = v21; // 0x405c49\n        int64_t v26 = v21; // 0x405c49\n        int64_t v27 = v20; // 0x405c49\n        if (*(char *)(v21 + a2) == v23) {\n          lab_0x405ca0:\n            // 0x405ca0\n            v22 = v27;\n            int64_t v28 = v26 + 1; // 0x405ca0\n            v21 = v28;\n            v20 = v22;\n            if (v28 == a3) {\n                // break -> 0x405cee\n                break;\n            }\n        } else {\n            int64_t v29 = v25;\n            int64_t v30 = v24;\n            while (v29 != 0) {\n                int64_t v31 = *(int64_t *)(8 * v29 + v1); // 0x405c50\n                int64_t v32 = v31 + v30; // 0x405c54\n                int64_t v33 = v29 - v31; // 0x405c57\n                v24 = v32;\n                v25 = v33;\n                v26 = v33;\n                v27 = v32;\n                if (*(char *)(v33 + a2) == v23) {\n                    goto lab_0x405ca0;\n                }\n                v29 = v25;\n                v30 = v24;\n            }\n            // 0x405cc0\n            v21 = 0;\n            v20 = v30 + 1;\n        }\n        // 0x405c40\n        v19++;\n        v18 = *(char *)v19;\n        if (v18 == 0) {\n            // 0x405c5f\n            function_40b900(v1);\n            return 1;\n        }\n    }\n    // 0x405cee\n    *a4 = v22;\n    // 0x405c5f\n    function_40b900(v1);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_405d00",
            "funcStartAddr": "405d00",
            "funcEndAddr": "405d20",
            "decompiledFuncCode": "int64_t function_405d00(void) {\n    // 0x405d00\n    __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g100;\n}\n"
        },
        {
            "funcName": "function_405d20",
            "funcStartAddr": "405d20",
            "funcEndAddr": "4066f0",
            "decompiledFuncCode": "int64_t function_405d20(int64_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = v1; // bp-280, 0x405d41\n    uint64_t v3 = function_40ba40(a2); // 0x405d48\n    if (v3 >= 0x492492492492493) {\n        // 0x4061ed\n        return 0;\n    }\n    int64_t v4 = 0x100000000 * v3 / 0x100000000; // 0x405d6a\n    uint64_t v5 = 56 * v4; // 0x405d7c\n    int64_t v6; // 0x405d20\n    if (v5 < 4015) {\n        // 0x405d8d\n        v6 = (int64_t)&v2 + 31 - (v5 + 39 & -16) & -16;\n    } else {\n        // 0x4061fe\n        v6 = function_40b890(v5, a2, v1, v3);\n    }\n    // 0x405da5\n    if (v6 == 0) {\n        // 0x4061ed\n        return 0;\n    }\n    int64_t ps = 0; // bp-244, 0x405dd1\n    int64_t v7 = v6 + 48 * v4; // 0x405de0\n    int64_t v8 = a2; // 0x405de3\n    char v9 = 0; // 0x405de3\n    int64_t v10 = v6; // 0x405de3\n    int64_t v11; // 0x405d20\n    int32_t v12; // bp-212, 0x405d20\n    char v13; // 0x405d20\n    int32_t len; // 0x405d20\n    int64_t str; // 0x405d20\n    char v14; // 0x405d20\n    while (true) {\n      lab_0x405e95:\n        // 0x405e95\n        v11 = v10;\n        str = v8;\n        v14 = v9;\n        if (v9 == 0) {\n            unsigned char v15 = *(char *)str; // 0x405df7\n            int32_t v16 = *(int32_t *)((int64_t)(4 * v15 / 32) + (int64_t)&g10); // 0x405e02\n            if ((1 << (int32_t)(v15 % 32) & v16) == 0) {\n                int32_t v17 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40621b\n                v14 = 1;\n                if (v17 == 0) {\n                    // break -> 0x4066af\n                    break;\n                }\n                goto lab_0x405ea2;\n            } else {\n                // 0x405e13\n                v12 = v15;\n                v9 = 0;\n                len = 1;\n                v13 = 1;\n                if (v15 == 0) {\n                    goto lab_0x405f57_2;\n                }\n                goto lab_0x405e4a;\n            }\n        } else {\n            goto lab_0x405ea2;\n        }\n    }\n  lab_0x4066af:\n    // 0x4066af\n    __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x4066c8\n    function_405d00();\n    // 0x4066cd\n    __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g100;\n  lab_0x405f57_2:\n    // 0x405f57\n    *(int64_t *)(v7 + 8) = 1;\n    struct _TYPEDEF___mbstate_t * v18 = (struct _TYPEDEF___mbstate_t *)2; // 0x405f7a\n    int64_t v19 = v6; // 0x405f7a\n    int64_t v20 = 0; // 0x405f7a\n    if ((int32_t)v3 < 3) {\n        goto lab_0x40600b;\n    } else {\n        goto lab_0x405f80;\n    }\n  lab_0x405ea2:;\n    char v21 = v14;\n    int64_t v22 = function_409040(str, (int64_t)__ctype_get_mb_cur_max()); // 0x405eb4\n    int64_t v23 = function_40b170(&v12, str, v22); // 0x405ece\n    v9 = v21;\n    len = 1;\n    v13 = 0;\n    switch (v23) {\n        case -1: {\n            goto lab_0x405e4a;\n        }\n        case -2: {\n            // 0x406280\n            v9 = v21;\n            len = strlen((char *)str);\n            v13 = 0;\n            goto lab_0x405e4a;\n        }\n        default: {\n            int32_t v24 = v23; // 0x405ef1\n            if (v23 == 0) {\n                // 0x405ef3\n                if (*(char *)str != 0) {\n                    // 0x406696\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x4066af;\n                }\n                // 0x405f0e\n                v24 = 1;\n                if (v12 != 0) {\n                    // 0x4066c8\n                    function_405d00();\n                    // 0x4066cd\n                    __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return &g100;\n                }\n            }\n            int32_t v25 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x405f30\n            v9 = v25 == 0 ? v21 : 0;\n            len = v24;\n            v13 = 1;\n            if (v12 == 0) {\n                goto lab_0x405f57_2;\n            }\n            goto lab_0x405e4a;\n        }\n    }\n  lab_0x405e4a:;\n    int32_t v26 = len;\n    int64_t v27; // bp-208, 0x405d20\n    if (str == (int64_t)&v27) {\n        int64_t * dest_mem = memcpy((int64_t *)(v11 + 24), &v27, v26); // 0x40623f\n        *(int64_t *)v11 = (int64_t)dest_mem;\n    } else {\n        // 0x405e6c\n        *(int64_t *)v11 = str;\n    }\n    int64_t v28 = v26;\n    *(int64_t *)(v11 + 8) = v28;\n    *(char *)(v11 + 16) = v13;\n    if (v13 != 0) {\n        // 0x405e7a\n        *(int32_t *)(v11 + 20) = v12;\n    }\n    // 0x405e83\n    v8 = str + v28;\n    v10 = v11 + 48;\n    goto lab_0x405e95;\n  lab_0x40600b:\n    // 0x40600b\n    *(int64_t *)v2 = 0;\n    int64_t ps3 = 0; // bp-180, 0x40604f\n    int64_t ps2 = 0; // bp-116, 0x40605a\n    char v29 = 0; // 0x40607a\n    char v30 = 0; // 0x40607a\n    char v31 = 0; // 0x40607a\n    int64_t v32 = a1; // 0x40607a\n    int64_t v33 = a1; // 0x40607a\n    int64_t v34 = 0; // 0x40607a\n    goto lab_0x406080;\n  lab_0x405f80:;\n    struct _TYPEDEF___mbstate_t * v137 = v18;\n    int64_t v142 = v19 + 48;\n    int32_t * v67 = (int32_t *)(v19 + 68);\n    int64_t * v77 = (int64_t *)(v19 + 56);\n    int64_t * str2 = (int64_t *)v142;\n    int64_t v65 = v20; // 0x405f85\n    goto lab_0x405fad;\n  lab_0x406080:;\n    int64_t v35 = v34;\n    int64_t v36 = v33;\n    int64_t v37 = v32;\n    char v38 = v31;\n    char v39 = v30;\n    char v40 = v29;\n    char v41 = v40; // 0x406082\n    char v42 = v39; // 0x406082\n    int64_t v43 = v37; // 0x406082\n    int64_t v44 = v36; // 0x406082\n    int64_t v45 = v35; // 0x406082\n    int64_t v46; // 0x405d20\n    int64_t v47; // 0x405d20\n    int64_t v48; // 0x405d20\n    int64_t v49; // 0x405d20\n    char v50; // 0x405d20\n    char v51; // 0x405d20\n    char v52; // 0x405d20\n    char v53; // 0x405d20\n    int64_t v54; // 0x405d20\n    int64_t v55; // 0x405d20\n    char v56; // 0x405d20\n    char v57; // 0x405d20\n    char v58; // 0x405d20\n    char v59; // 0x405d20\n    char v60; // 0x405d20\n    int64_t v61; // 0x405d20\n    int64_t v62; // 0x405d20\n    int64_t v63; // 0x405d20\n    if (v38 == 0) {\n        goto lab_0x406142;\n    } else {\n        // 0x406088\n        v52 = v40;\n        v56 = v39;\n        v50 = v38;\n        v54 = v37;\n        v48 = v36;\n        v59 = v58;\n        v62 = v61;\n        v46 = v35;\n        v53 = v40;\n        v57 = v39;\n        v51 = v38;\n        v55 = v37;\n        v49 = v36;\n        v60 = v58;\n        v63 = v61;\n        v47 = v35;\n        if (v58 != 0) {\n            goto lab_0x406182;\n        } else {\n            goto lab_0x406092;\n        }\n    }\n  lab_0x405fad:;\n    int64_t v64 = v65;\n    int64_t v66 = 48 * v64 + v6; // 0x405fb5\n    if (*(char *)(v19 + 64) != 0) {\n        // 0x405f90\n        if (*(char *)(v66 + 16) == 0) {\n            goto lab_0x405fbc;\n        } else {\n            // 0x405f96\n            if (*v67 == *(int32_t *)(v66 + 20)) {\n                goto lab_0x405fd5;\n            } else {\n                goto lab_0x405f9f;\n            }\n        }\n    } else {\n        goto lab_0x405fbc;\n    }\n  lab_0x406142:;\n    int64_t v68 = v45;\n    int64_t str4 = v44;\n    int64_t v69 = v43;\n    char v70 = v42;\n    char v71 = v41;\n    char v72 = v71; // 0x406146\n    int32_t v73; // bp-84, 0x405d20\n    if (v71 != 0) {\n        goto lab_0x4062c8;\n    } else {\n        unsigned char v74 = *(char *)str4; // 0x406150\n        int32_t v75 = *(int32_t *)((int64_t)(4 * v74 / 32) + (int64_t)&g10); // 0x40615b\n        if ((1 << (int32_t)(v74 % 32) & v75) == 0) {\n            int32_t v76 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x4062b7\n            v72 = 1;\n            if (v76 == 0) {\n                goto lab_0x4066af;\n            } else {\n                goto lab_0x4062c8;\n            }\n        } else {\n            // 0x40616c\n            v73 = v74;\n            v53 = v71;\n            v57 = v70;\n            v51 = 1;\n            v55 = v69;\n            v49 = str4;\n            v60 = 1;\n            v63 = 1;\n            v47 = v68;\n            goto lab_0x406182;\n        }\n    }\n  lab_0x405fbc:;\n    int64_t n = *v77; // 0x405fbc\n    if (n != *(int64_t *)(v66 + 8)) {\n        goto lab_0x405f9f;\n    } else {\n        int64_t str3 = *(int64_t *)v66; // 0x405fc6\n        if (memcmp((int64_t *)*str2, (int64_t *)str3, (int32_t)n) != 0) {\n            goto lab_0x405f9f;\n        } else {\n            goto lab_0x405fd5;\n        }\n    }\n  lab_0x4062c8:;\n    char v78 = v72;\n    int64_t v79 = function_409040(str4, (int64_t)__ctype_get_mb_cur_max()); // 0x4062d7\n    int64_t v80 = function_40b170(&v73, str4, v79); // 0x4062ee\n    v52 = v78;\n    v56 = v70;\n    v50 = 1;\n    v54 = v69;\n    v48 = str4;\n    v59 = 0;\n    v62 = 1;\n    v46 = v68;\n    int64_t v81; // 0x405d20\n    switch (v80) {\n        case -1: {\n            goto lab_0x406092;\n        }\n        case -2: {\n            int32_t len2 = strlen((char *)str4); // 0x40662c\n            v52 = v78;\n            v56 = v70;\n            v50 = 1;\n            v54 = v69;\n            v48 = str4;\n            v59 = 0;\n            v62 = len2;\n            v46 = v68;\n            goto lab_0x406092;\n        }\n        default: {\n            // 0x40630b\n            v81 = v80;\n            if (v80 != 0) {\n                goto lab_0x406330;\n            } else {\n                // 0x406310\n                if (*(char *)str4 != 0) {\n                    // 0x406696\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x4066af;\n                } else {\n                    // 0x406325\n                    v81 = 1;\n                    if (v73 != 0) {\n                        goto lab_0x4066c8;\n                    } else {\n                        goto lab_0x406330;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406182:;\n    int32_t v82 = v73; // 0x406182\n    if (v82 == 0) {\n        // 0x4061d1\n        function_40b900(v6);\n        return 1;\n    }\n    int64_t v83 = v47;\n    int64_t v84 = v63;\n    char v85 = v60;\n    int64_t v86 = v49;\n    int64_t v87 = v55;\n    char v88 = v51;\n    char v89 = v57;\n    char v90 = v53;\n    int64_t v91 = 48 * v83 + v6; // 0x406191\n    char v92 = v90; // 0x406198\n    char v93 = v89; // 0x406198\n    char v94 = v88; // 0x406198\n    int64_t v95 = v87; // 0x406198\n    int64_t v96 = v86; // 0x406198\n    char v97 = v85; // 0x406198\n    int64_t v98 = v84; // 0x406198\n    int64_t v99 = v91; // 0x406198\n    int64_t v100 = v83; // 0x406198\n    int64_t v101; // 0x405d20\n    int64_t v102; // 0x405d20\n    int64_t v103; // 0x405d20\n    int64_t v104; // 0x405d20\n    char v105; // 0x405d20\n    char v106; // 0x405d20\n    char v107; // 0x405d20\n    int64_t v108; // 0x405d20\n    int64_t v109; // 0x405d20\n    char v110; // 0x405d20\n    char v111; // 0x405d20\n    char v112; // 0x405d20\n    int64_t v113; // 0x405d20\n    int64_t v114; // 0x405d20\n    if (*(char *)(v91 + 16) == 0) {\n        goto lab_0x40609d;\n    } else {\n        // 0x40619e\n        v106 = v90;\n        v110 = v89;\n        v105 = v88;\n        v108 = v87;\n        v103 = v86;\n        v112 = v85;\n        v113 = v84;\n        v102 = v83;\n        v107 = v90;\n        v111 = v89;\n        v109 = v87;\n        v104 = v86;\n        v114 = v84;\n        v101 = v83;\n        if (*(int32_t *)(v91 + 20) != v82) {\n            goto lab_0x4060ab;\n        } else {\n            goto lab_0x4061a7;\n        }\n    }\n  lab_0x406092:\n    // 0x406092\n    v92 = v52;\n    v93 = v56;\n    v94 = v50;\n    v95 = v54;\n    v96 = v48;\n    v97 = v59;\n    v98 = v62;\n    v99 = 48 * v46 + v6;\n    v100 = v46;\n    goto lab_0x40609d;\n  lab_0x405f9f:;\n    int64_t v139; // 0x405d20\n    int64_t v140; // 0x405d20\n    if (v64 == 0) {\n        int64_t v185 = (int64_t)v137;\n        *(int64_t *)(8 * v185 + v7) = v185;\n        v139 = v185;\n        v140 = 0;\n        goto lab_0x405feb;\n    } else {\n        // 0x405fa8\n        v65 = v64 - *(int64_t *)(8 * v64 + v7);\n        goto lab_0x405fad;\n    }\n  lab_0x40609d:;\n    int64_t v115 = v100;\n    int64_t v116 = v99;\n    int64_t n2 = v98;\n    char v117 = v97;\n    int64_t str6 = v96;\n    int64_t v118 = v95;\n    char v119 = v94;\n    char v120 = v93;\n    char v121 = v92;\n    v106 = v121;\n    v110 = v120;\n    v105 = v119;\n    v108 = v118;\n    v103 = str6;\n    v112 = v117;\n    v113 = n2;\n    v102 = v115;\n    int64_t v122; // 0x405d20\n    int64_t v123; // 0x405d20\n    int64_t v124; // 0x405d20\n    int64_t v125; // 0x405d20\n    char v126; // 0x405d20\n    char v127; // 0x405d20\n    char v128; // 0x405d20\n    int64_t v129; // 0x405d20\n    int64_t v130; // 0x405d20\n    char v131; // 0x405d20\n    char v132; // 0x405d20\n    char v133; // 0x405d20\n    int64_t v134; // 0x405d20\n    int64_t v135; // 0x405d20\n    if (*(int64_t *)(v116 + 8) == n2) {\n        int64_t str5 = *(int64_t *)v116; // 0x40635c\n        int32_t memcmp_rc = memcmp((int64_t *)str5, (int64_t *)str6, (int32_t)n2); // 0x40635f\n        v107 = v121;\n        v111 = v120;\n        v109 = v118;\n        v104 = str6;\n        v114 = n2;\n        v101 = v115;\n        if (memcmp_rc == 0) {\n            goto lab_0x4061a7;\n        } else {\n            // 0x40636c\n            v128 = v121;\n            v132 = v120;\n            v129 = v118;\n            v124 = str6;\n            v134 = n2;\n            v123 = 0;\n            v127 = v121;\n            v131 = v120;\n            v126 = v119;\n            v130 = v118;\n            v125 = str6;\n            v133 = v117;\n            v135 = n2;\n            v122 = v115;\n            if (v115 == 0) {\n                goto lab_0x4060c1;\n            } else {\n                goto lab_0x406375;\n            }\n        }\n    } else {\n        goto lab_0x4060ab;\n    }\n  lab_0x405fd5:;\n    int64_t v136 = (int64_t)v137;\n    int64_t v138 = v64 + 1; // 0x405fdc\n    *(int64_t *)(8 * v136 + v7) = v136 - v138;\n    v139 = v136;\n    v140 = v138;\n    goto lab_0x405feb;\n  lab_0x406330:;\n    int32_t v184 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x40633c\n    v53 = v184 == 0 ? v78 : 0;\n    v57 = v70;\n    v51 = 1;\n    v55 = v69;\n    v49 = str4;\n    v60 = 1;\n    v63 = v81;\n    v47 = v68;\n    goto lab_0x406182;\n  lab_0x4060ab:\n    // 0x4060ab\n    v128 = v106;\n    v132 = v110;\n    v129 = v108;\n    v124 = v103;\n    v134 = v113;\n    v123 = v102;\n    v127 = v106;\n    v131 = v110;\n    v126 = v105;\n    v130 = v108;\n    v125 = v103;\n    v133 = v112;\n    v135 = v113;\n    v122 = v102;\n    if (v102 != 0) {\n        goto lab_0x406375;\n    } else {\n        goto lab_0x4060c1;\n    }\n  lab_0x405feb:;\n    int64_t v141 = v139 + 1; // 0x405feb\n    v18 = (struct _TYPEDEF___mbstate_t *)v141;\n    v19 = v142;\n    v20 = v140;\n    if (v141 != v4) {\n        goto lab_0x405f80;\n    } else {\n        goto lab_0x40600b;\n    }\n  lab_0x4061a7:;\n    int64_t v143 = v109;\n    int64_t v144 = v101 + 1; // 0x4061ab\n    v41 = v107;\n    v42 = v111;\n    v43 = v143;\n    v44 = v114 + v104;\n    v45 = v144;\n    if (v144 == v4) {\n        // 0x4061c0\n        *(int64_t *)v2 = v143;\n        // 0x4061d1\n        function_40b900(v6);\n        return 1;\n    }\n    goto lab_0x406142;\n  lab_0x406375:;\n    int64_t v145 = *(int64_t *)(8 * v122 + v7); // 0x406375\n    int64_t v146 = v122 - v145; // 0x406381\n    char v147 = v131; // 0x406387\n    int64_t v148 = v130; // 0x406387\n    int64_t v149 = v122; // 0x406387\n    char v150 = v131; // 0x406387\n    int64_t v151 = v130; // 0x406387\n    int64_t v152 = v145; // 0x406387\n    if (v145 == 0) {\n        goto lab_0x406080_2;\n    } else {\n        goto lab_0x4063be;\n    }\n  lab_0x4060c1:;\n    int64_t str7 = v129;\n    char v153 = v132;\n    char v154 = v153; // 0x4060c8\n    int32_t v155; // 0x405d20\n    int32_t v156; // bp-148, 0x405d20\n    int64_t v157; // 0x405d20\n    char v158; // 0x405d20\n    if (v153 != 0) {\n        goto lab_0x406563;\n    } else {\n        unsigned char v159 = *(char *)str7; // 0x4060d5\n        int32_t v160 = *(int32_t *)((int64_t)(4 * v159 / 32) + (int64_t)&g10); // 0x4060e0\n        if ((1 << (int32_t)(v159 % 32) & v160) == 0) {\n            int32_t v161 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x40654f\n            v154 = 1;\n            if (v161 == 0) {\n                goto lab_0x4066af;\n            } else {\n                goto lab_0x406563;\n            }\n        } else {\n            int32_t v162 = v159; // 0x406106\n            v156 = v162;\n            v155 = v162;\n            v158 = v153;\n            v157 = 1;\n            goto lab_0x406113;\n        }\n    }\n  lab_0x406080_2:\n    // 0x406080\n    v29 = v127;\n    v30 = v147;\n    v31 = v126;\n    v32 = v148;\n    v33 = v125;\n    v58 = v133;\n    v61 = v135;\n    v34 = v149;\n    goto lab_0x406080;\n  lab_0x4063be:;\n    int64_t str8 = v151;\n    char v163 = v150;\n    char v164 = v163; // 0x4063c5\n    int32_t v165; // 0x405d20\n    char v166; // 0x405d20\n    if (v163 != 0) {\n        goto lab_0x40643b;\n    } else {\n        unsigned char v167 = *(char *)str8; // 0x4063ce\n        int32_t v168 = *(int32_t *)((int64_t)(4 * v167 / 32) + (int64_t)&g10); // 0x4063d9\n        if ((1 << (int32_t)(v167 % 32) & v168) == 0) {\n            int32_t v169 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x406427\n            v164 = 1;\n            if (v169 == 0) {\n                goto lab_0x4066af;\n            } else {\n                goto lab_0x40643b;\n            }\n        } else {\n            int32_t v170 = v167; // 0x4063fb\n            v156 = v170;\n            v165 = v170;\n            v166 = v163;\n            goto lab_0x406408;\n        }\n    }\n  lab_0x406563:;\n    char v171 = v154;\n    int64_t v172 = function_409040(str7, (int64_t)__ctype_get_mb_cur_max()); // 0x406575\n    int64_t v173 = function_40b170(&v156, str7, v172); // 0x406592\n    char v174 = v171; // 0x405d20\n    int64_t len3 = 1; // 0x405d20\n    int64_t v175; // 0x405d20\n    switch (v173) {\n        case -1: {\n            goto lab_0x406121;\n        }\n        case -2: {\n            // 0x406677\n            v174 = v171;\n            len3 = strlen((char *)str7);\n            goto lab_0x406121;\n        }\n        default: {\n            // 0x4065b2\n            v175 = v173;\n            if (v173 != 0) {\n                goto lab_0x4065e0;\n            } else {\n                // 0x4065b7\n                if (*(char *)str7 != 0) {\n                    // 0x406696\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x4066af;\n                } else {\n                    // 0x4065d2\n                    v175 = 1;\n                    if (v156 != 0) {\n                        goto lab_0x4066c8;\n                    } else {\n                        goto lab_0x4065e0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40643b:;\n    char v176 = v164;\n    int64_t v177 = function_409040(str8, (int64_t)__ctype_get_mb_cur_max()); // 0x40644d\n    int64_t v178 = function_40b170(&v156, str8, v177); // 0x406467\n    char v179 = v176; // 0x405d20\n    int64_t len4 = 1; // 0x405d20\n    switch (v178) {\n        case -1: {\n            goto lab_0x40639f;\n        }\n        case -2: {\n            // 0x406500\n            v179 = v176;\n            len4 = strlen((char *)str8);\n            goto lab_0x40639f;\n        }\n        default: {\n            // 0x406483\n            if (v178 != 0) {\n                goto lab_0x4064b1;\n            } else {\n                // 0x406488\n                if (*(char *)str8 != 0) {\n                    // 0x406696\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x4066af;\n                } else {\n                    // 0x4064a3\n                    if (v156 != 0) {\n                        goto lab_0x4066cd;\n                    } else {\n                        goto lab_0x4064b1;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406121:\n    // 0x406121\n    v41 = v128;\n    v42 = v174;\n    v43 = len3 + str7;\n    v44 = v134 + v124;\n    v45 = v123;\n    goto lab_0x406142;\n  lab_0x40639f:;\n    int64_t v180 = len4 + str8; // 0x4063ad\n    int64_t v181 = v152 - 1; // 0x4063b4\n    v147 = v179;\n    v148 = v180;\n    v149 = v146;\n    v150 = v179;\n    v151 = v180;\n    v152 = v181;\n    if (v181 == 0) {\n        goto lab_0x406080_2;\n    } else {\n        goto lab_0x4063be;\n    }\n  lab_0x4065e0:;\n    int32_t v182 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x4065f2\n    v155 = v156;\n    v158 = v182 == 0 ? v171 : 0;\n    v157 = v175;\n    goto lab_0x406113;\n  lab_0x406113:\n    // 0x406113\n    v174 = v158;\n    len3 = v157;\n    if (v155 == 0) {\n        abort();\n        // UNREACHABLE\n    }\n    goto lab_0x406121;\n  lab_0x4064b1:;\n    int32_t v183 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x4064c3\n    v165 = v156;\n    v166 = v183 == 0 ? v176 : 0;\n    goto lab_0x406408;\n  lab_0x406408:\n    // 0x406408\n    v179 = v166;\n    len4 = 1;\n    if (v165 == 0) {\n        // 0x406412\n        abort();\n        // UNREACHABLE\n    }\n    goto lab_0x40639f;\n}\n"
        },
        {
            "funcName": "function_4066f0",
            "funcStartAddr": "4066f0",
            "funcEndAddr": "4075c0",
            "decompiledFuncCode": "int64_t function_4066f0(int64_t result, int64_t str2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4066f0\n    int64_t v1; // 0x4066f0\n    char v2 = v1;\n    int64_t v3; // 0x4066f0\n    int64_t v4; // 0x4066f0\n    int64_t v5; // 0x4066f0\n    int64_t v6; // 0x4066f0\n    int64_t v7; // 0x4066f0\n    int64_t v8; // 0x4066f0\n    int64_t v9; // 0x4066f0\n    int64_t v10; // 0x4066f0\n    int64_t result2; // 0x4066f0\n    int64_t v11; // 0x4066f0\n    int64_t v12; // 0x4066f0\n    char v13; // 0x4066f0\n    int64_t v14; // 0x4066f0\n    int64_t v15; // 0x4067b2\n    int64_t v16; // 0x4067aa\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x406716\n        if (v2 == 0) {\n            // 0x40684d\n            return result;\n        }\n        char v17 = v1;\n        if (v17 == 0) {\n            // 0x40684d\n            return 0;\n        }\n        // 0x4067aa\n        v10 = 1;\n        v13 = v17;\n        v14 = 0;\n        v11 = result;\n        v6 = 0;\n        v8 = str2;\n        v3 = 0;\n        while (true) {\n          lab_0x4067aa:;\n            int64_t str = v8;\n            int64_t v18 = v6;\n            int64_t v19 = v11;\n            int64_t v20 = v14;\n            v15 = v19 + 1;\n            int64_t v21; // 0x4066f0\n            if (v13 == v2) {\n                char v22 = *(char *)(str2 + 1); // 0x406860\n                result2 = v19;\n                if (v22 == 0) {\n                    // break -> 0x40684d\n                    break;\n                }\n                char v23 = *(char *)v15; // 0x406869\n                result2 = 0;\n                if (v23 == 0) {\n                    // break -> 0x40684d\n                    break;\n                }\n                int64_t v24 = v20 + 2; // 0x406876\n                v21 = v24;\n                if (v22 == v23) {\n                    int64_t v25 = v24; // 0x40688e\n                    char v26 = *(char *)(str2 - v20 + v25); // 0x4068aa\n                    result2 = v19;\n                    if (v26 == 0) {\n                        return result2;\n                    }\n                    char v27 = *(char *)(v19 - v20 + v25); // 0x406890\n                    result2 = 0;\n                    if (v27 == 0) {\n                        return result2;\n                    }\n                    // 0x40689d\n                    v25++;\n                    v21 = v25;\n                    while (v26 == v27) {\n                        // 0x4068aa\n                        v26 = *(char *)(str2 - v20 + v25);\n                        result2 = v19;\n                        if (v26 == 0) {\n                            return result2;\n                        }\n                        // 0x406890\n                        v27 = *(char *)(v19 - v20 + v25);\n                        result2 = 0;\n                        if (v27 == 0) {\n                            return result2;\n                        }\n                        // 0x40689d\n                        v25++;\n                        v21 = v25;\n                    }\n                }\n            } else {\n                // 0x4067bf\n                v21 = v20 + 1;\n                result2 = 0;\n                if (*(char *)v15 == 0) {\n                    // break -> 0x40684d\n                    break;\n                }\n            }\n            // 0x4067c9\n            v16 = v3 + 1;\n            v12 = v21;\n            unsigned char v28 = (char)(v16 >= 10) & (char)v10; // 0x4067d0\n            v9 = v10;\n            v5 = v18;\n            v7 = str;\n            if (v28 == 0) {\n                goto lab_0x4067a0;\n            } else {\n                int64_t v29 = v28; // 0x4067d0\n                v9 = v29;\n                v5 = v18;\n                v7 = str;\n                if (v12 >= 5 * v16) {\n                    // 0x406748\n                    v4 = v18;\n                    if (str == 0) {\n                        goto lab_0x40676f;\n                    } else {\n                        int64_t v30 = str + (int64_t)strnlen((char *)str, (int32_t)(v12 - v18)); // 0x406766\n                        v4 = v12;\n                        v9 = v29;\n                        v5 = v12;\n                        v7 = v30;\n                        if (*(char *)v30 != 0) {\n                            goto lab_0x4067a0;\n                        } else {\n                            goto lab_0x40676f;\n                        }\n                    }\n                } else {\n                    goto lab_0x4067a0;\n                }\n            }\n        }\n      lab_0x40684d_2:\n        // 0x40684d\n        return result2;\n    }\n    int64_t ps = 0; // bp-372, 0x40680b\n    int32_t * v31 = (int32_t *)((v1 / 8 & 28) + (int64_t)&g10); // 0x40681a\n    int32_t v32 = 1 << (int32_t)(v2 % 32);\n    int32_t v33; // 0x4066f0\n    int32_t v34; // 0x4066f0\n    char v35; // 0x4066f0\n    int64_t v36; // 0x4066f0\n    int32_t v37; // bp-340, 0x4066f0\n    bool v38; // 0x4066f0\n    int64_t v39; // 0x4066f0\n    int64_t len; // 0x4066f0\n    if ((*v31 & v32) == 0) {\n        // 0x407430\n        if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n          lab_0x40758c_5:\n            // 0x40758c\n            __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 150, \"mbuiter_multi_next\");\n            // 0x4075a5\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n            return &g100;\n        }\n        int64_t v40 = function_409040(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x407455\n        int64_t v41 = function_40b170(&v37, str2, v40); // 0x407468\n        len = 1;\n        v38 = true;\n        switch (v41) {\n            case -1: {\n                goto lab_0x4068c7;\n            }\n            case -2: {\n                // 0x40753e\n                len = strlen((char *)str2);\n                v38 = true;\n                goto lab_0x4068c7;\n            }\n            default: {\n                // 0x407486\n                if (v41 == 0) {\n                    if (v2 != 0) {\n                        // 0x4075a5\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    }\n                    int32_t v42; // 0x4074a2\n                    if (v42 != 0) {\n                      lab_0x4074aa_6:\n                        // 0x4074aa\n                        function_405d00();\n                    }\n                }\n                // 0x4074b0\n                mbsinit((struct _TYPEDEF___mbstate_t *)&ps);\n                v33 = v37;\n                v39 = v41;\n                int32_t v43; // 0x4066f0\n                v34 = v43;\n                char v44; // 0x4066f0\n                v35 = v44;\n                int64_t v45; // 0x4066f0\n                v36 = v45;\n                goto lab_0x406842;\n            }\n        }\n    } else {\n        int32_t v46 = v2; // 0x406834\n        v37 = v46;\n        v33 = v46;\n        v39 = 1;\n        goto lab_0x406842;\n    }\n  lab_0x4067a0:\n    // 0x4067a0\n    v10 = v9;\n    v13 = *(char *)v15;\n    v14 = v12;\n    v11 = v15;\n    v6 = v5;\n    v8 = v7;\n    v3 = v16;\n    goto lab_0x4067aa;\n  lab_0x40676f:;\n    int32_t len2 = strlen((char *)str2); // 0x406776\n    char v47; // bp-120, 0x4066f0\n    int64_t v48 = function_405b80(v15, str2, (int64_t)len2, (int64_t *)&v47, v4); // 0x40678c\n    v9 = v48;\n    v5 = v4;\n    v7 = 0;\n    if ((char)v48 != 0) {\n        // 0x407531\n        result2 = v47;\n        goto lab_0x40684d_2;\n    }\n    goto lab_0x4067a0;\n  lab_0x406c03:;\n    // 0x406c03\n    int64_t str3; // 0x4066f0\n    int64_t v49 = function_409040(str3, (int64_t)__ctype_get_mb_cur_max()); // 0x406c16\n    int32_t v50; // bp-84, 0x4066f0\n    int64_t v51 = function_40b170(&v50, str3, v49); // 0x406c35\n    int64_t len3 = 1; // 0x4066f0\n    char v52 = 0; // 0x4066f0\n    int64_t ps2; // bp-116, 0x4066f0\n    int64_t str6; // 0x4066f0\n    switch (v51) {\n        case -1: {\n            goto lab_0x406b37;\n        }\n        case -2: {\n            // 0x406fe8\n            len3 = strlen((char *)str3);\n            v52 = 0;\n            goto lab_0x406b37;\n        }\n        default: {\n            // 0x406c56\n            if (v51 == 0) {\n                char v53 = *(char *)str3; // 0x406c6f\n                if (v53 != 0) {\n                    // 0x4075a5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g100;\n                }\n                int32_t v54 = v50; // 0x406c78\n                if (v54 != 0) {\n                    goto lab_0x4074aa_6;\n                }\n            }\n            // 0x406c87\n            if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) != 0) {\n                // 0x406ca0\n                v47 = 0;\n            }\n            // 0x406ca8\n            result2 = str6;\n            len3 = v51;\n            v52 = 1;\n            if (v50 == 0) {\n                // 0x40684d\n                return result2;\n            }\n            goto lab_0x406b37;\n        }\n    }\n  lab_0x406b37:;\n    // 0x406b37\n    int64_t v55; // 0x4066f0\n    int64_t v56 = v55 + 1;\n    int64_t str5; // 0x4066f0\n    char * str4 = (char *)str5;\n    char v57 = v52;\n    int64_t v58 = len3;\n    char v59; // 0x4066f0\n    char v60 = v59; // 0x406b3f\n    int32_t v61; // 0x4066f0\n    int32_t v62; // bp-148, 0x4066f0\n    int32_t v63; // 0x4066f0\n    int64_t ps3; // bp-180, 0x4066f0\n    char v64; // 0x4066f0\n    if (v59 != 0) {\n        goto lab_0x406d45;\n    } else {\n        unsigned char v65 = *str4; // 0x406b4d\n        int32_t v66 = *(int32_t *)((int64_t)(4 * v65 / 32) + (int64_t)&g10); // 0x406b58\n        if ((1 << (int32_t)(v65 % 32) & v66) == 0) {\n            int32_t v67 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x406d30\n            v60 = 1;\n            if (v67 == 0) {\n                // break (via goto) -> 0x40758c\n                goto lab_0x40758c_5;\n            }\n            goto lab_0x406d45;\n        } else {\n            int32_t v68 = v65; // 0x406b80\n            v62 = v68;\n            v63 = 1;\n            v64 = v59;\n            v61 = v68;\n            if (v65 == 0) {\n                // 0x40684d\n                return 0;\n            }\n            goto lab_0x406b9e;\n        }\n    }\n  lab_0x406d45:;\n    char v69 = v60;\n    int64_t v70 = function_409040(str5, (int64_t)__ctype_get_mb_cur_max()); // 0x406d58\n    int64_t v71 = function_40b170(&v62, str5, v70); // 0x406d77\n    int32_t len4 = 1; // 0x4066f0\n    char v72 = v69; // 0x4066f0\n    switch (v71) {\n        case -1: {\n            goto lab_0x406cec;\n        }\n        case -2: {\n            // 0x407018\n            len4 = strlen(str4);\n            v72 = v69;\n            goto lab_0x406cec;\n        }\n        default: {\n            int32_t v73 = v71; // 0x406d9b\n            if (v71 == 0) {\n                // 0x406d9d\n                if (*str4 != 0) {\n                    // 0x4075a5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g100;\n                }\n                // 0x406dba\n                v73 = 1;\n                if (v62 != 0) {\n                    goto lab_0x4074aa_6;\n                }\n            }\n            int32_t v74 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x406dd9\n            v63 = v73;\n            v64 = v74 == 0 ? v69 : 0;\n            v61 = v62;\n            if (v62 == 0) {\n                // 0x40684d\n                return 0;\n            }\n            goto lab_0x406b9e;\n        }\n    }\n  lab_0x406cec:;\n    int32_t n = len4;\n    int64_t v75; // 0x4066f0\n    int64_t v76 = v75; // 0x406cfc\n    char v77; // 0x4066f0\n    char v78 = v77; // 0x406cfc\n    char v79; // 0x4066f0\n    char v80 = v79; // 0x406cfc\n    int128_t v81; // 0x4066f0\n    int128_t v82 = v81; // 0x406cfc\n    int64_t v83; // 0x4066f0\n    int64_t v84 = v83; // 0x406cfc\n    int32_t v85; // 0x4066f0\n    int32_t v86 = v85; // 0x406cfc\n    int32_t v87 = n; // 0x406cfc\n    char v88; // 0x4066f0\n    char v89 = v88; // 0x406cfc\n    int64_t v90; // 0x4066f0\n    int64_t v91 = v90; // 0x406cfc\n    int64_t v92 = v56; // 0x406cfc\n    int64_t v93; // 0x4066f0\n    int64_t v94 = v93; // 0x406cfc\n    if (v58 != (int64_t)n) {\n        // break -> 0x406d02\n        goto lab_0x406d02_3;\n    }\n    int32_t memcmp_rc = memcmp((int64_t *)str5, (int64_t *)str3, n); // 0x406e38\n    int32_t v95 = n; // 0x406e42\n    char v96 = v72; // 0x406e42\n    bool v97 = memcmp_rc == 0; // 0x406e42\n    goto lab_0x406bb6;\n  lab_0x406b9e:;\n    char v305 = v64;\n    int32_t v306 = v63;\n    len4 = v306;\n    v72 = v305;\n    if (v57 == 0) {\n        goto lab_0x406cec;\n    } else {\n        // 0x406bac\n        v95 = v306;\n        v96 = v305;\n        v97 = v50 == v61;\n        goto lab_0x406bb6;\n    }\n  lab_0x406bb6:;\n    int32_t v98 = v95;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v82 = v81;\n    v84 = v83;\n    v86 = v85;\n    v87 = v98;\n    v89 = v88;\n    v91 = v90;\n    v92 = v56;\n    v94 = v93;\n    if (!v97) {\n        // break -> 0x406d02\n        goto lab_0x406d02_3;\n    }\n    int64_t v99 = v58 + str3; // 0x406bed\n    int64_t v100 = str5 + (int64_t)v98; // 0x406bed\n    char v101 = v96; // 0x406bed\n    v55 = v56;\n    goto lab_0x406bf5;\n  lab_0x406f39:;\n    // 0x406f39\n    int128_t v104; // 0x4066f0\n    int128_t v105 = v104;\n    int64_t v106 = function_409040(str6, (int64_t)__ctype_get_mb_cur_max()); // 0x406f50\n    int32_t v107; // bp-212, 0x4066f0\n    int64_t v108 = function_40b170(&v107, str6, v106); // 0x406f67\n    int32_t len5 = 1; // 0x4066f0\n    int32_t v109; // 0x4066f0\n    int32_t v110; // 0x4066f0\n    int64_t ps4; // bp-244, 0x4066f0\n    int128_t v111; // 0x4066f0\n    switch (v108) {\n        case -1: {\n            goto lab_0x406e94;\n        }\n        case -2: {\n            // 0x407208\n            len5 = strlen((char *)str6);\n            goto lab_0x406e94;\n        }\n        default: {\n            int32_t v112 = v108; // 0x406f8b\n            if (v108 == 0) {\n                // 0x406f8d\n                if (*(char *)str6 != 0) {\n                    // 0x4075a5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g100;\n                }\n                // 0x406faa\n                v112 = 1;\n                if (v107 != 0) {\n                    goto lab_0x4074aa_6;\n                }\n            }\n            int32_t v113 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps4); // 0x406fc5\n            v109 = v107;\n            v111 = v113 == 0 ? v105 : 0;\n            v110 = v112;\n            goto lab_0x406980;\n        }\n    }\n  lab_0x406e94:;\n    int32_t v114 = len5;\n    uint64_t v115; // 0x4066f0\n    int64_t v116; // 0x4066f0\n    unsigned char v117 = (char)(v115 >= 10) & (char)v116; // 0x406e9b\n    int64_t v118; // 0x4066f0\n    int64_t v119; // 0x4066f0\n    int64_t v120; // 0x4066f0\n    int128_t v121; // 0x4066f0\n    int128_t v122; // 0x4066f0\n    int32_t v123; // 0x4066f0\n    int32_t v124; // 0x4066f0\n    int128_t v125; // 0x4066f0\n    int128_t v126; // 0x4066f0\n    char v127; // 0x4066f0\n    char v128; // 0x4066f0\n    int64_t v129; // 0x4066f0\n    int64_t v130; // 0x4066f0\n    int64_t v131; // 0x4066f0\n    int64_t v132; // 0x4066f0\n    char v133; // 0x4066f0\n    char v134; // 0x4066f0\n    char v135; // 0x4066f0\n    char v136; // 0x4066f0\n    int64_t v137; // 0x4066f0\n    int64_t v138; // 0x4066f0\n    if (v117 == 0) {\n        // 0x407058\n        v132 = v131;\n        v136 = v135;\n        v134 = v133;\n        v125 = v105;\n        v138 = v137;\n        v123 = v114;\n        v121 = 0;\n        v128 = v127;\n        v130 = v129;\n        v120 = v119 + 1;\n        v118 = v116;\n        goto lab_0x406eb8;\n    } else {\n        // 0x406ea4\n        v126 = v105;\n        v124 = v114;\n        v122 = 0;\n        if (v119 >= 5 * v115) {\n            goto lab_0x407068;\n        } else {\n            // 0x406eb1\n            v132 = v131;\n            v136 = v135;\n            v134 = v133;\n            v125 = v105;\n            v138 = v137;\n            v123 = v114;\n            v121 = 0;\n            v128 = v127;\n            v130 = v129;\n            v120 = v119 + 1;\n            v118 = v117;\n            goto lab_0x406eb8;\n        }\n    }\n  lab_0x406980:\n    // 0x406980\n    if (v109 == 0) {\n        // 0x40684d\n        return 0;\n    }\n    int32_t v139 = v110;\n    int128_t v140 = v111;\n    unsigned char v141 = (char)(v115 >= 10) & (char)v116; // 0x406998\n    int64_t v142; // 0x4066f0\n    int64_t v143; // 0x4066f0\n    int128_t v144; // 0x4066f0\n    int32_t v145; // 0x4066f0\n    int128_t v146; // 0x4066f0\n    char v147; // 0x4066f0\n    int64_t v148; // 0x4066f0\n    int64_t v149; // 0x4066f0\n    char v150; // 0x4066f0\n    char v151; // 0x4066f0\n    int64_t v152; // 0x4066f0\n    if (v141 == 0) {\n        // 0x407048\n        v149 = v131;\n        v151 = v135;\n        v150 = v133;\n        v146 = v140;\n        v152 = v137;\n        v145 = v139;\n        v144 = 1;\n        v147 = v127;\n        v148 = v129;\n        v143 = v119 + 1;\n        v142 = v116;\n        goto lab_0x4069b5;\n    } else {\n        // 0x4069a1\n        v126 = v140;\n        v124 = v139;\n        v122 = 1;\n        if (v119 >= 5 * v115) {\n            goto lab_0x407068;\n        } else {\n            // 0x4069ae\n            v149 = v131;\n            v151 = v135;\n            v150 = v133;\n            v146 = v140;\n            v152 = v137;\n            v145 = v139;\n            v144 = 1;\n            v147 = v127;\n            v148 = v129;\n            v143 = v119 + 1;\n            v142 = v141;\n            goto lab_0x4069b5;\n        }\n    }\n  lab_0x406eb8:;\n    int64_t v153 = v118;\n    int64_t v154 = v120;\n    int64_t v155 = v130;\n    char v156 = v128;\n    int32_t n2 = v123;\n    int64_t v157 = v138;\n    int128_t v158 = v125;\n    char v159 = v134;\n    char v160 = v136;\n    int64_t v161 = v132;\n    int64_t v162 = n2; // 0x406eb8\n    int64_t v163 = v161; // 0x406ec5\n    char v164 = v160; // 0x406ec5\n    char v165 = v159; // 0x406ec5\n    int128_t v166 = v158; // 0x406ec5\n    int64_t v167 = v157; // 0x406ec5\n    int32_t v168; // 0x4066f0\n    int32_t v169 = v168; // 0x406ec5\n    char v170 = v156; // 0x406ec5\n    int64_t v171 = v155; // 0x406ec5\n    int64_t v172 = v154; // 0x406ec5\n    int64_t v173 = v153; // 0x406ec5\n    int64_t v174 = v162; // 0x406ec5\n    int64_t v175; // 0x4066f0\n    int64_t v176; // 0x4066f0\n    int128_t v177; // 0x4066f0\n    int32_t v178; // 0x4066f0\n    int128_t v179; // 0x4066f0\n    char v180; // 0x4066f0\n    int64_t v181; // 0x4066f0\n    int64_t v182; // 0x4066f0\n    char v183; // 0x4066f0\n    char v184; // 0x4066f0\n    int64_t v185; // 0x4066f0\n    int64_t v186; // 0x4066f0\n    if (v185 != v162) {\n        goto lab_0x406d0a;\n    } else {\n        int32_t memcmp_rc2 = memcmp((int64_t *)str6, (int64_t *)str2, n2); // 0x406edb\n        v182 = v161;\n        v184 = v160;\n        v183 = v159;\n        v179 = v158;\n        v186 = v157;\n        v178 = n2;\n        v177 = v121;\n        v180 = v156;\n        v181 = v155;\n        v176 = v154;\n        v175 = v153;\n        v163 = v161;\n        v164 = v160;\n        v165 = v159;\n        v166 = v158;\n        v167 = v157;\n        v169 = v168;\n        v170 = v156;\n        v171 = v155;\n        v172 = v154;\n        v173 = v153;\n        v174 = v162;\n        if (memcmp_rc2 != 0) {\n            goto lab_0x406d0a;\n        } else {\n            goto lab_0x4069d1;\n        }\n    }\n  lab_0x407068:;\n    int128_t v187 = v122;\n    int32_t v188 = v124;\n    int128_t v189 = v126;\n    int64_t v190 = v119 - v137; // 0x407070\n    int64_t v191; // 0x4066f0\n    int64_t v192; // 0x4066f0\n    char v193; // 0x4066f0\n    char v194; // 0x4066f0\n    char v195; // 0x4066f0\n    int64_t v196; // 0x4066f0\n    int64_t v197; // 0x4066f0\n    int64_t v198; // 0x4066f0\n    int64_t v199; // 0x4066f0\n    int64_t v200; // 0x4066f0\n    int64_t v201; // 0x4066f0\n    int64_t v202; // 0x4066f0\n    int64_t v203; // 0x4066f0\n    int64_t v204; // 0x4066f0\n    int64_t v205; // 0x4066f0\n    char v206; // 0x4066f0\n    char v207; // 0x4066f0\n    char v208; // 0x4066f0\n    char v209; // 0x4066f0\n    char v210; // 0x4066f0\n    char v211; // 0x4066f0\n    char v212; // 0x4066f0\n    char v213; // 0x4066f0\n    char v214; // 0x4066f0\n    if (v190 == 0) {\n        // 0x407574\n        v200 = v131;\n        v209 = v135;\n        if (v133 == 0) {\n            goto lab_0x407238;\n        } else {\n            // 0x40757c\n            v201 = v131;\n            v210 = v135;\n            v207 = v133;\n            v194 = v127;\n            v196 = v129;\n            v202 = v131;\n            v211 = v135;\n            v208 = v133;\n            v195 = 0;\n            v197 = v129;\n            if (v127 == 0) {\n                goto lab_0x40728c;\n            } else {\n                goto lab_0x40727e;\n            }\n        }\n    } else {\n        // 0x40707b\n        v204 = v131;\n        v213 = v135;\n        v192 = v190;\n        if (v133 == 0) {\n            goto lab_0x40709f;\n        } else {\n            // 0x40707f\n            v203 = v131;\n            v212 = v135;\n            v198 = v129;\n            v191 = v190;\n            v205 = v131;\n            v214 = v135;\n            v206 = v133;\n            v193 = v127;\n            v199 = v129;\n            if (v127 != 0) {\n                goto lab_0x4070e1;\n            } else {\n                goto lab_0x407086;\n            }\n        }\n    }\n  lab_0x4069b5:;\n    int64_t v215 = v142;\n    int64_t v216 = v143;\n    int64_t v217 = v148;\n    char v218 = v147;\n    int128_t v219 = v144;\n    int32_t v220 = v145;\n    int64_t v221 = v152;\n    int128_t v222 = v146;\n    char v223 = v150;\n    char v224 = v151;\n    int64_t v225 = v149;\n    v132 = v225;\n    v136 = v224;\n    v134 = v223;\n    v125 = v222;\n    v138 = v221;\n    v123 = v220;\n    v121 = v219;\n    v128 = v218;\n    v130 = v217;\n    v120 = v216;\n    v118 = v215;\n    bool v226; // 0x4066f0\n    if (v226) {\n        goto lab_0x406eb8;\n    } else {\n        // 0x4069c0\n        v182 = v225;\n        v184 = v224;\n        v183 = v223;\n        v179 = v222;\n        v186 = v221;\n        v178 = v220;\n        v177 = v219;\n        v180 = v218;\n        v181 = v217;\n        v176 = v216;\n        v175 = v215;\n        v76 = v225;\n        v78 = v224;\n        v80 = v223;\n        v82 = v222;\n        v84 = v221;\n        v86 = v220;\n        v87 = v168;\n        v89 = v218;\n        v91 = v217;\n        v92 = v216;\n        v94 = v215;\n        if (v107 != v37) {\n            goto lab_0x406d02_3;\n        } else {\n            goto lab_0x4069d1;\n        }\n    }\n  lab_0x406d0a:;\n    int64_t v227 = v163; // 0x406d1e\n    char v228 = v164; // 0x406d1e\n    char v229 = v165; // 0x406d1e\n    int64_t v230 = v174 + str6; // 0x406d1e\n    int128_t v231 = v166; // 0x406d1e\n    int64_t v232 = v167; // 0x406d1e\n    int32_t v233 = v169; // 0x406d1e\n    char v234 = v170; // 0x406d1e\n    int64_t v235 = v171; // 0x406d1e\n    int64_t v236 = v172; // 0x406d1e\n    int64_t v237 = v115 + 1; // 0x406d1e\n    int64_t v238 = v173; // 0x406d1e\n    goto lab_0x406920;\n  lab_0x4069d1:\n    // 0x4069d1\n    v93 = v175;\n    int64_t v244 = v176;\n    v90 = v181;\n    v88 = v180;\n    v85 = v178;\n    v83 = v186;\n    v81 = v179;\n    v79 = v183;\n    v77 = v184;\n    v75 = v182;\n    int128_t v245 = __asm_movdqa((int128_t)str6); // 0x4069d6\n    int128_t v246 = __asm_movdqa(0); // 0x4069ef\n    v47 = 0;\n    int64_t v247 = __asm_movaps(v245); // 0x406a00\n    int128_t v248 = __asm_movdqa(v177); // 0x406a10\n    int128_t v249; // 0x4066f0\n    int128_t v250 = __asm_movdqa(v249); // 0x406a23\n    int64_t v251 = __asm_movaps(v246); // 0x406a2f\n    __asm_movaps(v248);\n    __asm_movaps(v250);\n    ps2 = 0;\n    int64_t v252; // 0x4066f0\n    if ((*v31 & v32) == 0) {\n        // 0x4072b8\n        if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) == 0) {\n            // break -> 0x40758c\n            goto lab_0x40758c_5;\n        }\n        // 0x4072c8\n        v47 = 1;\n        int64_t v253 = function_409040(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x4072e7\n        int64_t v254 = function_40b170(&v50, str2, v253); // 0x407301\n        result2 = -1;\n        switch (v254) {\n            case -1: {\n                goto lab_0x40684d_2;\n            }\n            case -2: {\n                // 0x40684d\n                return strlen((char *)str2);\n            }\n            default: {\n                int64_t v255 = v254; // 0x407325\n                if (v254 == 0) {\n                    if (v2 != 0) {\n                        // 0x4075a5\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                        return &g100;\n                    }\n                    // 0x407344\n                    v255 = 1;\n                    if (v50 != 0) {\n                        goto lab_0x4074aa_6;\n                    }\n                }\n                int64_t v256 = v255;\n                int32_t v257 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x407363\n                v252 = v256;\n                if (v257 != 0) {\n                    // 0x40736c\n                    v47 = 0;\n                    v252 = v256;\n                }\n                goto lab_0x406a9a;\n            }\n        }\n    } else {\n        // 0x406a77\n        v50 = v2;\n        v252 = 1;\n        goto lab_0x406a9a;\n    }\n  lab_0x407238:;\n    char v258 = v209;\n    int64_t str7 = v200;\n    char v259 = v258; // 0x40723d\n    int32_t v260; // 0x4066f0\n    int32_t v261; // bp-276, 0x4066f0\n    char v262; // 0x4066f0\n    int64_t v263; // 0x4066f0\n    int64_t v264; // 0x4066f0\n    char v265; // 0x4066f0\n    int64_t ps5; // bp-308, 0x4066f0\n    char v266; // 0x4066f0\n    if (v258 != 0) {\n        goto lab_0x407398;\n    } else {\n        unsigned char v267 = *(char *)str7; // 0x407248\n        int32_t v268 = *(int32_t *)((int64_t)(4 * v267 / 32) + (int64_t)&g10); // 0x407253\n        if ((1 << (int32_t)(v267 % 32) & v268) == 0) {\n            int32_t v269 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x407386\n            v259 = 1;\n            if (v269 == 0) {\n                // break -> 0x40758c\n                goto lab_0x40758c_5;\n            }\n            goto lab_0x407398;\n        } else {\n            int32_t v270 = v267; // 0x407275\n            v261 = v270;\n            v260 = v270;\n            v264 = str7;\n            v266 = v258;\n            v265 = 1;\n            v262 = 1;\n            v263 = 1;\n            goto lab_0x40727e_2;\n        }\n    }\n  lab_0x40709f:;\n    int64_t v271 = v192;\n    char v272 = v213;\n    int64_t str8 = v204;\n    char v273 = v272; // 0x4070a4\n    if (v272 != 0) {\n        goto lab_0x40713f;\n    } else {\n        unsigned char v274 = *(char *)str8; // 0x4070af\n        int32_t v275 = *(int32_t *)((int64_t)(4 * v274 / 32) + (int64_t)&g10); // 0x4070ba\n        if ((1 << (int32_t)(v274 % 32) & v275) == 0) {\n            int32_t v276 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x40712d\n            v273 = 1;\n            if (v276 == 0) {\n                // break -> 0x40758c\n                goto lab_0x40758c_5;\n            }\n            goto lab_0x40713f;\n        } else {\n            // 0x4070c7\n            v261 = v274;\n            v205 = str8;\n            v214 = v272;\n            v206 = 1;\n            v193 = 1;\n            v199 = 1;\n            goto lab_0x4070e1;\n        }\n    }\n  lab_0x406d02_3:\n    // 0x406d02\n    v163 = v76;\n    v164 = v78;\n    v165 = v80;\n    v166 = v82;\n    v167 = v84;\n    v169 = v87;\n    v170 = v89;\n    v171 = v91;\n    v172 = v92;\n    v173 = v94;\n    v174 = v86;\n    goto lab_0x406d0a;\n  lab_0x407398:;\n    char v277 = v259;\n    int64_t v278 = function_409040(str7, (int64_t)__ctype_get_mb_cur_max()); // 0x4073a8\n    int64_t v279 = function_40b170(&v261, str7, v278); // 0x4073c1\n    v202 = str7;\n    v211 = v277;\n    v208 = 1;\n    v195 = 0;\n    v197 = 1;\n    switch (v279) {\n        case -1: {\n            goto lab_0x40728c;\n        }\n        case -2: {\n            int32_t len6 = strlen((char *)str7); // 0x407518\n            v202 = str7;\n            v211 = v277;\n            v208 = 1;\n            v195 = 0;\n            v197 = len6;\n            goto lab_0x40728c;\n        }\n        default: {\n            int64_t v280 = v279; // 0x4073e2\n            if (v279 == 0) {\n                // 0x4073e4\n                if (*(char *)str7 != 0) {\n                    // 0x4075a5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g100;\n                }\n                // 0x4073fb\n                v280 = 1;\n                if (v261 != 0) {\n                    goto lab_0x4074aa_6;\n                }\n            }\n            int32_t v281 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x407413\n            v201 = str7;\n            v210 = v281 == 0 ? v277 : 0;\n            v207 = 1;\n            v194 = 1;\n            v196 = v280;\n            goto lab_0x40727e;\n        }\n    }\n  lab_0x40728c:;\n    int64_t v282 = v202; // 0x407294\n    char v283 = v211; // 0x407294\n    char v284 = v208; // 0x407294\n    char v285 = v195; // 0x407294\n    int64_t v286 = v197; // 0x407294\n    int64_t v287 = 1; // 0x407294\n    goto lab_0x40729a;\n  lab_0x40727e:\n    // 0x40727e\n    v260 = v261;\n    v264 = v201;\n    v266 = v210;\n    v265 = v207;\n    v262 = v194;\n    v263 = v196;\n    goto lab_0x40727e_2;\n  lab_0x40713f:;\n    char v298 = v273;\n    int64_t v299 = function_409040(str8, (int64_t)__ctype_get_mb_cur_max()); // 0x40714f\n    int64_t v300 = function_40b170(&v261, str8, v299); // 0x407168\n    v203 = str8;\n    v212 = v298;\n    v198 = 1;\n    v191 = v271;\n    switch (v300) {\n        case -1: {\n            goto lab_0x407086;\n        }\n        case -2: {\n            int32_t len7 = strlen((char *)str8); // 0x4071ed\n            v203 = str8;\n            v212 = v298;\n            v198 = len7;\n            v191 = v271;\n            goto lab_0x407086;\n        }\n        default: {\n            int64_t v301 = v300; // 0x407181\n            if (v300 == 0) {\n                // 0x407183\n                if (*(char *)str8 != 0) {\n                    // 0x4075a5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g100;\n                }\n                // 0x40719a\n                v301 = 1;\n                if (v261 != 0) {\n                    goto lab_0x4074aa_6;\n                }\n            }\n            int32_t v302 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x4071b2\n            v205 = str8;\n            v214 = v302 == 0 ? v298 : 0;\n            v206 = 1;\n            v193 = 1;\n            v199 = v301;\n            goto lab_0x4070e1;\n        }\n    }\n  lab_0x4070e1:;\n    int64_t v289 = v205; // 0x4070e9\n    char v290 = v214; // 0x4070e9\n    char v291 = v206; // 0x4070e9\n    char v292 = v193; // 0x4070e9\n    int64_t v293 = v199; // 0x4070e9\n    if (v261 != 0) {\n        goto lab_0x407086;\n    } else {\n        goto lab_0x4070f6;\n    }\n  lab_0x407086:;\n    int64_t v303 = v198 + v203; // 0x407090\n    int64_t v304 = v191 - 1; // 0x407095\n    v204 = v303;\n    v213 = v212;\n    v192 = v304;\n    v200 = v303;\n    v209 = v212;\n    if (v304 == 0) {\n        goto lab_0x407238;\n    } else {\n        goto lab_0x40709f;\n    }\n  lab_0x406a9a:\n    // 0x406a9a\n    v99 = v252 + str2;\n    v100 = v247 + (int64_t)v168;\n    v101 = v251;\n    v55 = v244;\n    while (true) {\n      lab_0x406bf5:\n        // 0x406bf5\n        v59 = v101;\n        str5 = v100;\n        str3 = v99;\n        if (v47 == 0) {\n            unsigned char v102 = *(char *)str3; // 0x406ad8\n            int32_t v103 = *(int32_t *)((int64_t)(4 * v102 / 32) + (int64_t)&g10); // 0x406ae3\n            if ((1 << (int32_t)(v102 % 32) & v103) == 0) {\n                // 0x406e50\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) == 0) {\n                    // break (via goto) -> 0x40758c\n                    goto lab_0x40758c_5;\n                }\n                // 0x406e65\n                v47 = 1;\n                goto lab_0x406c03;\n            } else {\n                // 0x406af4\n                v50 = v102;\n                result2 = str6;\n                len3 = 1;\n                v52 = 1;\n                if (v102 == 0) {\n                    // 0x40684d\n                    return result2;\n                }\n                goto lab_0x406b37;\n            }\n        } else {\n            goto lab_0x406c03;\n        }\n    }\n    goto lab_0x406d02_3;\n  lab_0x40729a:;\n    int64_t v288 = v119 + 1; // 0x40729a\n    v149 = v282;\n    v151 = v283;\n    v150 = v284;\n    v146 = v189;\n    v152 = v119;\n    v145 = v188;\n    v144 = v187;\n    v147 = v285;\n    v148 = v286;\n    v143 = v288;\n    v142 = v287;\n    v132 = v282;\n    v136 = v283;\n    v134 = v284;\n    v125 = v189;\n    v138 = v119;\n    v123 = v188;\n    v121 = v187;\n    v128 = v285;\n    v130 = v286;\n    v120 = v288;\n    v118 = v287;\n    if ((char)v187 != 0) {\n        goto lab_0x4069b5;\n    } else {\n        goto lab_0x406eb8;\n    }\n  lab_0x40727e_2:\n    // 0x40727e\n    v289 = v264;\n    v290 = v266;\n    v291 = v265;\n    v292 = v262;\n    v293 = v263;\n    v202 = v264;\n    v211 = v266;\n    v208 = v265;\n    v195 = v262;\n    v197 = v263;\n    if (v260 == 0) {\n        goto lab_0x4070f6;\n    } else {\n        goto lab_0x40728c;\n    }\n  lab_0x4070f6:;\n    int64_t v294 = function_405d20(result, str2, (int64_t *)&v47); // 0x407104\n    if ((char)v294 != 0) {\n        // 0x407531\n        result2 = v47;\n        goto lab_0x40684d_2;\n    }\n    // 0x407114\n    v282 = v289;\n    v283 = v290;\n    v284 = v291;\n    v285 = v292;\n    v286 = v293;\n    v287 = v294 & 0xffffffff;\n    goto lab_0x40729a;\n  lab_0x4068c7:\n    // 0x4068c7\n    v226 = v38;\n    v185 = len;\n    ps5 = 0;\n    ps4 = 0;\n    v227 = str2;\n    v228 = 0;\n    v229 = 0;\n    v230 = result;\n    v231 = 0;\n    v232 = 0;\n    int32_t v295; // 0x4066f0\n    v233 = v295;\n    char v296; // 0x4066f0\n    v234 = v296;\n    int64_t v297; // 0x4066f0\n    v235 = v297;\n    v236 = 0;\n    v237 = 0;\n    v238 = 1;\n    while (true) {\n      lab_0x406920:\n        // 0x406920\n        v116 = v238;\n        v115 = v237;\n        v119 = v236;\n        v129 = v235;\n        v127 = v234;\n        v168 = v233;\n        v137 = v232;\n        int128_t v239 = v231;\n        str6 = v230;\n        v133 = v229;\n        v135 = v228;\n        v131 = v227;\n        v104 = v239;\n        if ((char)v239 != 0) {\n            goto lab_0x406f39;\n        } else {\n            unsigned char v240 = *(char *)str6; // 0x40693e\n            int32_t v241 = *(int32_t *)((int64_t)(4 * v240 / 32) + (int64_t)&g10); // 0x406949\n            if ((1 << (int32_t)(v240 % 32) & v241) == 0) {\n                int32_t v242 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps4); // 0x406f24\n                v104 = 1;\n                if (v242 == 0) {\n                    // break -> 0x40758c\n                    break;\n                }\n                goto lab_0x406f39;\n            } else {\n                int32_t v243 = v240; // 0x406971\n                v107 = v243;\n                v109 = v243;\n                v111 = v239;\n                v110 = 1;\n                goto lab_0x406980;\n            }\n        }\n    }\n  lab_0x40758c_5:\n    // 0x40758c\n    __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x4075a5\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n    return &g100;\n  lab_0x406842:\n    // 0x406842\n    len = v39;\n    v38 = false;\n    v295 = v34;\n    v296 = v35;\n    v297 = v36;\n    if (v33 == 0) {\n        // 0x40684d\n        return result;\n    }\n    goto lab_0x4068c7;\n}\n"
        },
        {
            "funcName": "function_4075c0",
            "funcStartAddr": "4075c0",
            "funcEndAddr": "407659",
            "decompiledFuncCode": "int64_t function_4075c0(char * str) {\n    // 0x4075c0\n    if (str == NULL) {\n        // 0x407639\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g35);\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = (int64_t)str;\n    char * found_char_pos = strrchr(str, 47); // 0x4075ce\n    int64_t result = (int64_t)found_char_pos; // 0x4075ce\n    if (found_char_pos == NULL) {\n        // 0x407629\n        g82 = v1;\n        g34 = v1;\n        return result;\n    }\n    int64_t v2 = result + 1; // 0x4075d8\n    if (v2 - v1 < 7) {\n        // 0x407629\n        g82 = v1;\n        g34 = v1;\n        return result;\n    }\n    // 0x4075e8\n    bool v3; // 0x4075c0\n    int64_t v4 = v3 ? -1 : 1;\n    int64_t v5 = (int64_t)\"/.libs/\"; // 0x4075c0\n    int64_t v6 = result - 6; // 0x4075c0\n    int64_t v7 = 7; // 0x4075f6\n    unsigned char v8 = *(char *)v6; // 0x4075f6\n    char v9 = *(char *)v5; // 0x4075f6\n    char v10 = v9; // 0x4075f6\n    bool v11 = false; // 0x4075f6\n    while (v8 == v9) {\n        v7--;\n        v5 += v4;\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    int64_t v13 = (int64_t)\"lt-\"; // 0x407600\n    int64_t v14 = v2; // 0x407600\n    int64_t v15 = 3; // 0x407600\n    if ((v8 >= v12 && !v11) != v8 < v12) {\n        // 0x407629\n        g82 = v1;\n        g34 = v1;\n        return result;\n    }\n    unsigned char v16 = *(char *)v14; // 0x407612\n    char v17 = *(char *)v13; // 0x407612\n    char v18 = v17; // 0x407612\n    bool v19 = false; // 0x407612\n    while (v16 == v17) {\n        // 0x407602\n        v15--;\n        v13 += v4;\n        v14 += v4;\n        v18 = v16;\n        v19 = true;\n        if (v15 == 0) {\n            // break -> \n            break;\n        }\n        v16 = *(char *)v14;\n        v17 = *(char *)v13;\n        v18 = v17;\n        v19 = false;\n    }\n    unsigned char v20 = v18;\n    int64_t v21 = v2; // 0x40761c\n    if ((v16 >= v20 && !v19) == v16 < v20) {\n        // 0x40761e\n        v21 = result + 4;\n        g30 = v21;\n    }\n    // 0x407629\n    g82 = v21;\n    g34 = v21;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407660",
            "funcStartAddr": "407660",
            "funcEndAddr": "407752",
            "decompiledFuncCode": "int64_t function_407660(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x407674\n    int64_t result = (int64_t)v1; // 0x407674\n    if (result != a1) {\n        // 0x407681\n        return result;\n    }\n    int64_t v2 = function_40b320(); // 0x407690\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x407746\n    if (v3 == 85) {\n        // 0x4076a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x407738\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g2 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x4076ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x4076db\n        // 0x407681\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x407738\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g2 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x40771d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x40772a\n    // 0x407681\n    return result4;\n}\n"
        },
        {
            "funcName": "function_407760",
            "funcStartAddr": "407760",
            "funcEndAddr": "4077b9",
            "decompiledFuncCode": "int64_t function_407760(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x407760\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4077c0",
            "funcStartAddr": "4077c0",
            "funcEndAddr": "408763",
            "decompiledFuncCode": "int64_t function_4077c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t str) {\n    // 0x4077c0\n    int32_t v1; // 0x4077c0\n    uint32_t v2 = v1;\n    int64_t v3 = str + 1;\n    int64_t v4 = 0; // 0x4077fd\n    int64_t v5 = 0; // 0x4077fd\n    int64_t v6; // 0x4077c0\n    int64_t v7; // 0x4077c0\n    int64_t v8; // 0x4077c0\n    int64_t v9; // 0x4077c0\n    int64_t v10; // 0x4077c0\n    int64_t v11; // 0x4077c0\n    int64_t v12; // 0x4077c0\n    int64_t v13; // 0x4077c0\n    int64_t v14; // 0x4077c0\n    int64_t v15; // 0x4077c0\n    int64_t v16; // 0x4077c0\n    int64_t v17; // 0x4077c0\n    int64_t v18; // 0x4077c0\n    int64_t v19; // 0x4077c0\n    int64_t v20; // 0x4077c0\n    int64_t v21; // 0x4077c0\n    int64_t v22; // 0x4077c0\n    int64_t v23; // 0x4077c0\n    int64_t v24; // 0x4077c0\n    int64_t result; // 0x4077c0\n    int64_t v25; // 0x4077c0\n    int64_t v26; // 0x4077c0\n    int64_t v27; // 0x4077c0\n    int32_t wc; // bp+116, 0x4077c0\n    int64_t ps; // bp+120, 0x4077c0\n    char v28; // 0x407ef0\n    int64_t v29; // 0x407ef0\n    int64_t v30; // 0x408322\n    int64_t v31; // 0x40833b\n    int64_t v32; // 0x4077c0\n    while (true) {\n      lab_0x407800_2:\n        // 0x407800\n        v20 = v19;\n        v14 = v13;\n        v8 = v7;\n        result = v4;\n        int64_t v33 = v5; // 0x4077c0\n        int64_t v34; // 0x407834\n        while (true) {\n          lab_0x407800:\n            // 0x407800\n            v12 = v33;\n            bool v35 = v8 == v12; // 0x40780b\n            if (v8 == -1) {\n                // 0x40780d\n                v35 = *(char *)(v12 + str) == 0;\n            }\n            // 0x40781b\n            if (v35) {\n                // break (via goto) -> 0x408210\n                goto lab_0x408210;\n            }\n            // 0x407824\n            v34 = v12 + str;\n            v28 = *(char *)v34;\n            v29 = v28;\n            g99 = v29;\n            v9 = v8;\n            v18 = v14;\n            v24 = v20;\n            v6 = v8;\n            v16 = v14;\n            v22 = v20;\n            switch (v28) {\n                case 0: {\n                    if (v2 % 2 == 0) {\n                        // 0x408001\n                        v11 = v8;\n                        v17 = v14;\n                        v23 = v20;\n                        v10 = v8;\n                        v15 = v14;\n                        v21 = v20;\n                        if (v32 == 0) {\n                            goto lab_0x407e72;\n                        } else {\n                            goto lab_0x407919;\n                        }\n                    }\n                    // 0x408420\n                    v33 = v12 + 1;\n                    goto lab_0x407800;\n                }\n                case 7: {\n                    goto lab_0x407bc8;\n                }\n                case 8: {\n                    goto lab_0x407bc8;\n                }\n                case 9: {\n                    goto lab_0x407f52_2;\n                }\n                case 10: {\n                    goto lab_0x407f52_2;\n                }\n                case 11: {\n                    goto lab_0x407bc8;\n                }\n                case 12: {\n                    goto lab_0x407bc8;\n                }\n                case 13: {\n                    goto lab_0x407f52_2;\n                }\n                case 32: {\n                    goto lab_0x407f52_2;\n                }\n                case 33: {\n                    goto lab_0x407f52_2;\n                }\n                case 34: {\n                    goto lab_0x407f52_2;\n                }\n                case 35: {\n                    goto lab_0x407bb1;\n                }\n                case 36: {\n                    goto lab_0x407f52_2;\n                }\n                case 37: {\n                    goto lab_0x407bc8;\n                }\n                case 38: {\n                    goto lab_0x407f52_2;\n                }\n                case 39: {\n                    goto lab_0x407f52_2;\n                }\n                case 40: {\n                    goto lab_0x407f52_2;\n                }\n                case 41: {\n                    goto lab_0x407f52_2;\n                }\n                case 42: {\n                    goto lab_0x407f52_2;\n                }\n                case 43: {\n                    goto lab_0x407bc8;\n                }\n                case 44: {\n                    goto lab_0x407bc8;\n                }\n                case 45: {\n                    goto lab_0x407bc8;\n                }\n                case 46: {\n                    goto lab_0x407bc8;\n                }\n                case 47: {\n                    goto lab_0x407bc8;\n                }\n                case 48: {\n                    goto lab_0x407bc8;\n                }\n                case 49: {\n                    goto lab_0x407bc8;\n                }\n                case 50: {\n                    goto lab_0x407bc8;\n                }\n                case 51: {\n                    goto lab_0x407bc8;\n                }\n                case 52: {\n                    goto lab_0x407bc8;\n                }\n                case 53: {\n                    goto lab_0x407bc8;\n                }\n                case 54: {\n                    goto lab_0x407bc8;\n                }\n                case 55: {\n                    goto lab_0x407bc8;\n                }\n                case 56: {\n                    goto lab_0x407bc8;\n                }\n                case 57: {\n                    goto lab_0x407bc8;\n                }\n                case 58: {\n                    goto lab_0x407bc8;\n                }\n                case 59: {\n                    goto lab_0x407f52_2;\n                }\n                case 60: {\n                    goto lab_0x407f52_2;\n                }\n                case 61: {\n                    goto lab_0x407f52_2;\n                }\n                case 62: {\n                    goto lab_0x407f52_2;\n                }\n                case 63: {\n                    goto lab_0x407f52_2;\n                }\n                case 65: {\n                    goto lab_0x407bc8;\n                }\n                case 66: {\n                    goto lab_0x407bc8;\n                }\n                case 67: {\n                    goto lab_0x407bc8;\n                }\n                case 68: {\n                    goto lab_0x407bc8;\n                }\n                case 69: {\n                    goto lab_0x407bc8;\n                }\n                case 70: {\n                    goto lab_0x407bc8;\n                }\n                case 71: {\n                    goto lab_0x407bc8;\n                }\n                case 72: {\n                    goto lab_0x407bc8;\n                }\n                case 73: {\n                    goto lab_0x407bc8;\n                }\n                case 74: {\n                    goto lab_0x407bc8;\n                }\n                case 75: {\n                    goto lab_0x407bc8;\n                }\n                case 76: {\n                    goto lab_0x407bc8;\n                }\n                case 77: {\n                    goto lab_0x407bc8;\n                }\n                case 78: {\n                    goto lab_0x407bc8;\n                }\n                case 79: {\n                    goto lab_0x407bc8;\n                }\n                case 80: {\n                    goto lab_0x407bc8;\n                }\n                case 81: {\n                    goto lab_0x407bc8;\n                }\n                case 82: {\n                    goto lab_0x407bc8;\n                }\n                case 83: {\n                    goto lab_0x407bc8;\n                }\n                case 84: {\n                    goto lab_0x407bc8;\n                }\n                case 85: {\n                    goto lab_0x407bc8;\n                }\n                case 86: {\n                    goto lab_0x407bc8;\n                }\n                case 87: {\n                    goto lab_0x407bc8;\n                }\n                case 88: {\n                    goto lab_0x407bc8;\n                }\n                case 89: {\n                    goto lab_0x407bc8;\n                }\n                case 90: {\n                    goto lab_0x407bc8;\n                }\n                case 91: {\n                    goto lab_0x407f52_2;\n                }\n                case 92: {\n                    goto lab_0x407f52_2;\n                }\n                case 93: {\n                    goto lab_0x407bc8;\n                }\n                case 94: {\n                    goto lab_0x407f52_2;\n                }\n                case 95: {\n                    goto lab_0x407bc8;\n                }\n                case 96: {\n                    goto lab_0x407f52_2;\n                }\n                case 97: {\n                    goto lab_0x407bc8;\n                }\n                case 98: {\n                    goto lab_0x407bc8;\n                }\n                case 99: {\n                    goto lab_0x407bc8;\n                }\n                case 100: {\n                    goto lab_0x407bc8;\n                }\n                case 101: {\n                    goto lab_0x407bc8;\n                }\n                case 102: {\n                    goto lab_0x407bc8;\n                }\n                case 103: {\n                    goto lab_0x407bc8;\n                }\n                case 104: {\n                    goto lab_0x407bc8;\n                }\n                case 105: {\n                    goto lab_0x407bc8;\n                }\n                case 106: {\n                    goto lab_0x407bc8;\n                }\n                case 107: {\n                    goto lab_0x407bc8;\n                }\n                case 108: {\n                    goto lab_0x407bc8;\n                }\n                case 109: {\n                    goto lab_0x407bc8;\n                }\n                case 110: {\n                    goto lab_0x407bc8;\n                }\n                case 111: {\n                    goto lab_0x407bc8;\n                }\n                case 112: {\n                    goto lab_0x407bc8;\n                }\n                case 113: {\n                    goto lab_0x407bc8;\n                }\n                case 114: {\n                    goto lab_0x407bc8;\n                }\n                case 115: {\n                    goto lab_0x407bc8;\n                }\n                case 116: {\n                    goto lab_0x407bc8;\n                }\n                case 117: {\n                    goto lab_0x407bc8;\n                }\n                case 118: {\n                    goto lab_0x407bc8;\n                }\n                case 119: {\n                    goto lab_0x407bc8;\n                }\n                case 120: {\n                    goto lab_0x407bc8;\n                }\n                case 121: {\n                    goto lab_0x407bc8;\n                }\n                case 122: {\n                    goto lab_0x407bc8;\n                }\n                case 123: {\n                    goto lab_0x407b8d;\n                }\n                case 124: {\n                    goto lab_0x407f52_2;\n                }\n                case 125: {\n                    goto lab_0x407b8d;\n                }\n                case 126: {\n                    goto lab_0x407bb1;\n                }\n                default: {\n                    goto lab_0x407e8d;\n                }\n            }\n        }\n      lab_0x407e8d:\n        if (v32 != 1) {\n            // 0x408280\n            ps = 0;\n            int64_t len = v8; // 0x40828d\n            if (v8 == -1) {\n                // 0x40828f\n                len = strlen((char *)str);\n            }\n            // 0x4082bb\n            v30 = 0x100000000 * len >> 32;\n            v25 = 0;\n            while (true) {\n              lab_0x408318:\n                // 0x408318\n                v26 = v25;\n                uint64_t v36 = v26 + v12; // 0x40831d\n                int64_t v37 = v36 + str;\n                v31 = function_40b170(&wc, v37, v30 - v36);\n                v27 = v26;\n                switch (v31) {\n                    case 0: {\n                        goto lab_0x408620_2;\n                    }\n                    case -1: {\n                        goto lab_0x408620_2;\n                    }\n                    case -2: {\n                        // 0x408663\n                        v27 = v26;\n                        if (v30 > v36) {\n                            // 0x40869e\n                            v27 = v26;\n                            int64_t v38 = v26; // 0x4086a1\n                            if (*(char *)v37 != 0) {\n                                int64_t v39 = v38 + 1; // 0x4086af\n                                v27 = v39;\n                                while (v30 > v39 + v12) {\n                                    // 0x4086a8\n                                    v27 = v39;\n                                    v38 = v39;\n                                    if (*(char *)(v39 + v34) == 0) {\n                                        // break -> 0x408620\n                                        break;\n                                    }\n                                    v39 = v38 + 1;\n                                    v27 = v39;\n                                }\n                            }\n                        }\n                        goto lab_0x408620_2;\n                    }\n                    case 1: {\n                        goto lab_0x4082f0;\n                    }\n                    default: {\n                        int64_t v40 = v36 + v3; // 0x40838a\n                        char v41 = *(char *)v40; // 0x40839d\n                        unsigned char v42; // 0x4077c0\n                        if (v41 < 125) {\n                            // 0x4083a8\n                            v42 = (v41 + 37) % 64;\n                            if (v42 != 0 != ((1 << (int64_t)v42 & 0x20000002b) == 0)) {\n                                // 0x4083c2\n                                v6 = v30;\n                                v16 = 0x100000000 * v14 >> 32;\n                                v22 = 0x100000000 * v20 >> 32;\n                                goto lab_0x407f52_2;\n                            }\n                        }\n                        // 0x408390\n                        v40++;\n                        while (v37 + v31 != v40) {\n                            // 0x40839d\n                            v41 = *(char *)v40;\n                            if (v41 < 125) {\n                                // 0x4083a8\n                                v42 = (v41 + 37) % 64;\n                                if (v42 != 0 != ((1 << (int64_t)v42 & 0x20000002b) == 0)) {\n                                    // 0x4083c2\n                                    v6 = v30;\n                                    v16 = 0x100000000 * v14 >> 32;\n                                    v22 = 0x100000000 * v20 >> 32;\n                                    goto lab_0x407f52_2;\n                                }\n                            }\n                            // 0x408390\n                            v40++;\n                        }\n                        goto lab_0x4082f0;\n                    }\n                }\n            }\n            goto lab_0x408620_2;\n        } else {\n            // 0x407ed8\n            __ctype_b_loc();\n            v9 = 0x100000000000000 * v8 >> 56;\n            v18 = v14;\n            v24 = v20;\n            goto lab_0x407bc8;\n        }\n    }\n  lab_0x408210:\n    // 0x408210\n    v6 = v8;\n    v16 = v14;\n    v22 = v20;\n    if (result != 0) {\n        // 0x408265\n        if (result < v14) {\n            // 0x40826e\n            *(char *)(v20 + result) = 0;\n        }\n        // 0x407f8c\n        return result;\n    }\n    goto lab_0x407f52_2;\n  lab_0x407f52_2:;\n    // 0x407f8c\n    char * v43; // 0x4077c0\n    return function_407760(v22, v16, str, v6, 2, v2 & -3, 0, (int64_t)v43, (int64_t)v43);\n  lab_0x408620_2:;\n    uint64_t v44 = v27;\n    int64_t v45 = 0x100000000 * v14 >> 32;\n    int64_t v46 = 0x100000000 * v20 >> 32;\n    v9 = v30;\n    v18 = v45;\n    v24 = v46;\n    int64_t v47; // 0x4077c0\n    int64_t v48; // 0x4077c0\n    int64_t v49; // 0x4077c0\n    int64_t v50; // 0x4077c0\n    if (v44 < 2) {\n        goto lab_0x407bc8;\n    } else {\n        uint64_t v51 = v44 + v12; // 0x40842e\n        int64_t v52 = v12 + 1; // 0x408524\n        v50 = result;\n        v47 = v30;\n        v5 = v52;\n        v48 = v45;\n        v49 = v46;\n        int64_t v53 = v52; // 0x40852b\n        int64_t v54 = result; // 0x40852b\n        char v55 = v28; // 0x40852b\n        if (v52 < v51) {\n            uint64_t v56 = v54;\n            if (v56 < v45) {\n                // 0x4084f4\n                *(char *)(v56 + v46) = v55;\n            }\n            char v57 = *(char *)(v53 + str); // 0x4084f8\n            int64_t v58 = v56 + 1; // 0x4084fd\n            int64_t v59 = v53 + 1; // 0x408524\n            v50 = v58;\n            v47 = v30;\n            v5 = v59;\n            v48 = v45;\n            v49 = v46;\n            v53 = v59;\n            while (v59 < v51) {\n                // 0x4084ef\n                v56 = v58;\n                if (v56 < v45) {\n                    // 0x4084f4\n                    *(char *)(v56 + v46) = v57;\n                }\n                // 0x4084f8\n                v57 = *(char *)(v53 + str);\n                v58 = v56 + 1;\n                v59 = v53 + 1;\n                v50 = v58;\n                v47 = v30;\n                v5 = v59;\n                v48 = v45;\n                v49 = v46;\n                v53 = v59;\n            }\n        }\n        goto lab_0x407997;\n    }\n  lab_0x4082f0:\n    // 0x4082f0\n    iswprint(wc);\n    int64_t v60 = v31 + v26; // 0x408308\n    int32_t v61 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40830b\n    v25 = v60;\n    v27 = v60;\n    if (v61 != 0) {\n        // break -> 0x408620\n        goto lab_0x408620_2;\n    }\n    goto lab_0x408318;\n  lab_0x407bc8:\n    // 0x407bc8\n    v11 = v9;\n    v17 = v18;\n    v23 = v24;\n    v10 = v9;\n    v15 = v18;\n    v21 = v24;\n    if (v32 == 0) {\n        goto lab_0x407e72;\n    } else {\n        goto lab_0x407919;\n    }\n  lab_0x407bb1:\n    // 0x407bb1\n    v9 = v8;\n    v18 = v14;\n    v24 = v20;\n    v6 = v8;\n    v16 = v14;\n    v22 = v20;\n    if (v12 == 0) {\n        goto lab_0x407f52_2;\n    }\n    goto lab_0x407bc8;\n  lab_0x407b8d:;\n    bool v62 = v8 == 1; // 0x407b98\n    if (v8 == -1) {\n        // 0x407b9a\n        v62 = *(char *)v3 == 0;\n    }\n    // 0x407ba6\n    v9 = v8;\n    v18 = v14;\n    v24 = v20;\n    if (!v62) {\n        goto lab_0x407bc8;\n    } else {\n        goto lab_0x407bb1;\n    }\n  lab_0x407e72:\n    // 0x407e72\n    v50 = result;\n    v47 = v10;\n    v5 = v12 + 1;\n    v48 = v15;\n    v49 = v21;\n    goto lab_0x407997;\n  lab_0x407919:\n    // 0x407919\n    v10 = v11;\n    v15 = v17;\n    v21 = v23;\n    v6 = v11;\n    v16 = v17;\n    v22 = v23;\n    if ((*(int32_t *)((v29 / 8 & 28) + v32) & 1 << (int32_t)(v28 % 32)) != 0) {\n        goto lab_0x407f52_2;\n    }\n    goto lab_0x407e72;\n  lab_0x407997:\n    // 0x407997\n    if (v50 < v48) {\n        // 0x40799c\n        char v63; // 0x4077c0\n        int64_t v64; // 0x4077c0\n        uint64_t v65; // 0x4077c0\n        *(char *)(v64 + v65) = v63;\n    }\n    // 0x4079a0\n    v4 = v50 + 1;\n    v7 = v47;\n    v13 = v48;\n    v19 = v49;\n    goto lab_0x407800_2;\n}\n"
        },
        {
            "funcName": "function_408770",
            "funcStartAddr": "408770",
            "funcEndAddr": "40890b",
            "decompiledFuncCode": "int64_t function_408770(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    int64_t v2 = v1 >> 32; // 0x408772\n    int32_t * v3 = __errno_location(); // 0x40878c\n    int64_t v4 = (int64_t)g22; // 0x408791\n    int32_t v5 = *v3; // 0x40879b\n    int64_t v6 = v4; // 0x4087b1\n    if (*(int32_t *)&g25 <= (int32_t)v2) {\n        int64_t v7 = v2 + 1; // 0x4087b3\n        int64_t v8 = 16 * v7 & 0xffffffff0; // 0x4087bd\n        int64_t v9; // 0x408770\n        if (g22 == &g23) {\n            int64_t v10 = function_4096d0(0, v8); // 0x4088e7\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x4088ec\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4096d0(v4, v8); // 0x4087d6\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x4087ea\n        v6 = v9;\n        uint32_t v13 = *(int32_t *)&g25; // 0x4087ea\n        int32_t v14 = v7;\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x40881b\n    int64_t v17 = v15 + 8; // 0x40881e\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x408825\n    int64_t * v19 = (int64_t *)v16; // 0x408828\n    uint64_t v20 = *v19; // 0x408828\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x40882b\n    int64_t result = *v21; // 0x40882b\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x408836\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x40883f\n    int64_t v24; // 0x408770\n    uint64_t v25 = function_407760(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x40884e\n    if (v20 > v25) {\n        // 0x4088c5\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x408861\n    *v19 = v26;\n    if (result != (int64_t)&g83) {\n        // 0x408871\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_409680(v26); // 0x40888b\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x4088a5\n    int64_t v28 = *v23; // 0x4088a8\n    int64_t v29; // 0x408770\n    function_407760(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x4088c5\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408910",
            "funcStartAddr": "408910",
            "funcEndAddr": "408944",
            "decompiledFuncCode": "int64_t function_408910(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x408917\n    int64_t result = function_409840(a1 == 0 ? (int64_t)&g84 : a1, 56); // 0x408936\n    return result;\n}\n"
        },
        {
            "funcName": "function_408950",
            "funcStartAddr": "408950",
            "funcEndAddr": "40895f",
            "decompiledFuncCode": "int64_t function_408950(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g84 : a1); // 0x40895c\n    return result;\n}\n"
        },
        {
            "funcName": "function_408960",
            "funcStartAddr": "408960",
            "funcEndAddr": "40896f",
            "decompiledFuncCode": "int64_t function_408960(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g84 : a1; // 0x408968\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g84;\n}\n"
        },
        {
            "funcName": "function_408970",
            "funcStartAddr": "408970",
            "funcEndAddr": "4089a3",
            "decompiledFuncCode": "int64_t function_408970(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g84 + 8 : a1 + 8; // 0x408989\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40898e\n    uint32_t v3 = *v2; // 0x40898e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x408992\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4089b0",
            "funcStartAddr": "4089b0",
            "funcEndAddr": "4089c3",
            "decompiledFuncCode": "int64_t function_4089b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g84 + 4 : a1 + 4); // 0x4089bc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4089d0",
            "funcStartAddr": "4089d0",
            "funcEndAddr": "4089fb",
            "decompiledFuncCode": "int64_t function_4089d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g84 : a1; // 0x4089d8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4089f5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4089ec\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g84;\n}\n"
        },
        {
            "funcName": "function_408a00",
            "funcStartAddr": "408a00",
            "funcEndAddr": "408a72",
            "decompiledFuncCode": "int64_t function_408a00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g84 : a5; // 0x408a22\n    int32_t * v2 = __errno_location(); // 0x408a2b\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x408a44\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x408a48\n    uint32_t v5 = *(int32_t *)v1; // 0x408a4b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x408a51\n    int64_t result = function_407760(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x408a5a\n    return result;\n}\n"
        },
        {
            "funcName": "function_408a80",
            "funcStartAddr": "408a80",
            "funcEndAddr": "408b61",
            "decompiledFuncCode": "int64_t function_408a80(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g84 : a4; // 0x408aa2\n    int32_t * v2 = __errno_location(); // 0x408aa8\n    int64_t v3 = v1 + 8; // 0x408abf\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x408ac7\n    int32_t * v5 = (int32_t *)v1; // 0x408aca\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x408ad8\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x408adb\n    int64_t v8 = function_407760(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x408ae5\n    int64_t v9 = v8 + 1; // 0x408aea\n    int64_t result = function_409680(v9); // 0x408aff\n    function_407760(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x408b44\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x408b4d\n    return result;\n}\n"
        },
        {
            "funcName": "function_408b70",
            "funcStartAddr": "408b70",
            "funcEndAddr": "408b7a",
            "decompiledFuncCode": "int64_t function_408b70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408b70\n    return function_408a80(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_408b80",
            "funcStartAddr": "408b80",
            "funcEndAddr": "408c15",
            "decompiledFuncCode": "int64_t function_408b80(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x408b80\n    int64_t v2 = v1; // 0x408b80\n    int64_t v3 = v2; // 0x408b94\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x408bb3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g100;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x408bb0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g100;\n        }\n    }\n    int64_t v6 = v3; // 0x408bcd\n    if (g23 != 0x612540) {\n        // 0x408bcf\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g83;\n        v6 = &g100;\n    }\n    int64_t result = v6; // 0x408bf1\n    if (g22 != &g23) {\n        // 0x408bf3\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g100;\n    }\n    // 0x408c06\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408c20",
            "funcStartAddr": "408c20",
            "funcEndAddr": "408c31",
            "decompiledFuncCode": "int64_t function_408c20(void) {\n    // 0x408c20\n    int64_t v1; // 0x408c20\n    return function_408770(v1, v1, -1, (int64_t *)&g84);\n}\n"
        },
        {
            "funcName": "function_408c40",
            "funcStartAddr": "408c40",
            "funcEndAddr": "408c4a",
            "decompiledFuncCode": "int64_t function_408c40(void) {\n    // 0x408c40\n    int64_t v1; // 0x408c40\n    return function_408770(v1, v1, v1, (int64_t *)&g84);\n}\n"
        },
        {
            "funcName": "function_408c50",
            "funcStartAddr": "408c50",
            "funcEndAddr": "408c66",
            "decompiledFuncCode": "int64_t function_408c50(int64_t a1) {\n    // 0x408c50\n    return function_408770(0, a1, -1, (int64_t *)&g84);\n}\n"
        },
        {
            "funcName": "function_408c70",
            "funcStartAddr": "408c70",
            "funcEndAddr": "408c82",
            "decompiledFuncCode": "int64_t function_408c70(int64_t a1, int64_t a2) {\n    // 0x408c70\n    return function_408770(0, a1, a2, (int64_t *)&g84);\n}\n"
        },
        {
            "funcName": "function_408c90",
            "funcStartAddr": "408c90",
            "funcEndAddr": "408cf8",
            "decompiledFuncCode": "int64_t function_408c90(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408ca0\n    return function_408770((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408d00",
            "funcStartAddr": "408d00",
            "funcEndAddr": "408d64",
            "decompiledFuncCode": "int64_t function_408d00(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408d10\n    return function_408770((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_408d70",
            "funcStartAddr": "408d70",
            "funcEndAddr": "408d7c",
            "decompiledFuncCode": "int64_t function_408d70(int64_t a1, int64_t a2) {\n    // 0x408d70\n    return function_408c90(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_408d80",
            "funcStartAddr": "408d80",
            "funcEndAddr": "408d8f",
            "decompiledFuncCode": "int64_t function_408d80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408d80\n    return function_408d00(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_408d90",
            "funcStartAddr": "408d90",
            "funcEndAddr": "408e00",
            "decompiledFuncCode": "int64_t function_408d90(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g84); // 0x408d9d\n    int128_t v2 = __asm_movdqa(g85); // 0x408da5\n    int128_t v3 = __asm_movdqa(g86); // 0x408dad\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x408dc2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x408dd8\n    uint32_t v6 = *v5; // 0x408dd8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x408ddd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_408770(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_408e00",
            "funcStartAddr": "408e00",
            "funcEndAddr": "408e0d",
            "decompiledFuncCode": "int64_t function_408e00(int64_t a1, int64_t a2) {\n    // 0x408e00\n    return function_408d90(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_408e10",
            "funcStartAddr": "408e10",
            "funcEndAddr": "408e21",
            "decompiledFuncCode": "int64_t function_408e10(int64_t a1) {\n    // 0x408e10\n    return function_408d90(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_408e30",
            "funcStartAddr": "408e30",
            "funcEndAddr": "408e3a",
            "decompiledFuncCode": "int64_t function_408e30(void) {\n    // 0x408e30\n    int64_t v1; // 0x408e30\n    return function_408d90(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_408e40",
            "funcStartAddr": "408e40",
            "funcEndAddr": "408eae",
            "decompiledFuncCode": "int64_t function_408e40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408e5a\n    return function_408770(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408eb0",
            "funcStartAddr": "408eb0",
            "funcEndAddr": "408f1c",
            "decompiledFuncCode": "int64_t function_408eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g84); // 0x408eb7\n    int128_t v2 = __asm_movdqa(g85); // 0x408ebf\n    int128_t v3 = __asm_movdqa(g86); // 0x408ec7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x408ee9\n    if (a2 == 0 || a3 == 0) {\n        // 0x408f17\n        abort();\n        // UNREACHABLE\n    }\n    // 0x408efa\n    return function_408770(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_408f20",
            "funcStartAddr": "408f20",
            "funcEndAddr": "408f29",
            "decompiledFuncCode": "int64_t function_408f20(void) {\n    // 0x408f20\n    int64_t v1; // 0x408f20\n    return function_408eb0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_408f30",
            "funcStartAddr": "408f30",
            "funcEndAddr": "408f47",
            "decompiledFuncCode": "int64_t function_408f30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408f30\n    return function_408eb0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_408f50",
            "funcStartAddr": "408f50",
            "funcEndAddr": "408f63",
            "decompiledFuncCode": "int64_t function_408f50(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x408f50\n    return function_408eb0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_408f70",
            "funcStartAddr": "408f70",
            "funcEndAddr": "408f7a",
            "decompiledFuncCode": "int64_t function_408f70(void) {\n    // 0x408f70\n    int64_t v1; // 0x408f70\n    return function_408770(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_408f80",
            "funcStartAddr": "408f80",
            "funcEndAddr": "408f92",
            "decompiledFuncCode": "int64_t function_408f80(int64_t a1, int64_t a2) {\n    // 0x408f80\n    return function_408770(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_408fa0",
            "funcStartAddr": "408fa0",
            "funcEndAddr": "408fb1",
            "decompiledFuncCode": "int64_t function_408fa0(void) {\n    // 0x408fa0\n    int64_t v1; // 0x408fa0\n    return function_408770(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_408fc0",
            "funcStartAddr": "408fc0",
            "funcEndAddr": "408fd6",
            "decompiledFuncCode": "int64_t function_408fc0(int64_t a1) {\n    // 0x408fc0\n    return function_408770(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_408fe0",
            "funcStartAddr": "408fe0",
            "funcEndAddr": "40903e",
            "decompiledFuncCode": "int64_t function_408fe0(int64_t fd, int64_t * buf, int64_t nbyte) {\n    int32_t result = read((int32_t)fd, buf, (int32_t)nbyte); // 0x409001\n    while (result < 0) {\n        // 0x40900e\n        if (*__errno_location() != 4) {\n            // break -> 0x40901a\n            break;\n        }\n        result = read((int32_t)fd, buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_409040",
            "funcStartAddr": "409040",
            "funcEndAddr": "409071",
            "decompiledFuncCode": "int64_t function_409040(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40b1a0(a1, 0, a2); // 0x409051\n    return v1 != 0 ? 1 - a1 + v1 : a2;\n}\n"
        },
        {
            "funcName": "function_409080",
            "funcStartAddr": "409080",
            "funcEndAddr": "40908e",
            "decompiledFuncCode": "int64_t function_409080(int64_t a1, int64_t a2) {\n    // 0x409080\n    int64_t v1; // 0x409080\n    return function_409d40((int32_t)a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_409090",
            "funcStartAddr": "409090",
            "funcEndAddr": "4090de",
            "decompiledFuncCode": "int64_t function_409090(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40909c\n    if (fd >= 3) {\n        // 0x4090a1\n        return a1 & 0xffffffff;\n    }\n    // 0x4090b0\n    int64_t v1; // 0x409090\n    int64_t v2 = function_409080(a1, v1); // 0x4090b0\n    int32_t * v3 = __errno_location(); // 0x4090b8\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4090e0",
            "funcStartAddr": "4090e0",
            "funcEndAddr": "4094c5",
            "decompiledFuncCode": "int64_t function_4090e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7, int64_t a8) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x409170\n        fprintf(stream, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4090fc\n        fprintf(stream, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x409111\n    fprintf(stream, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2015);\n    int32_t fputs_rc = fputs(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), stream); // 0x409150\n    if (a6 < 10) {\n        // 0x40915f\n        return fputs_rc;\n    }\n    char * format = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x409242\n    return fprintf(stream, format);\n}\n"
        },
        {
            "funcName": "function_4094d0",
            "funcStartAddr": "4094d0",
            "funcEndAddr": "4094f0",
            "decompiledFuncCode": "int64_t function_4094d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // 0x4094d7\n    int64_t result; // 0x4094eb\n    if (a5 == 0) {\n        // 0x4094eb\n        result = function_4090e0(a1, a2, a3, a4, a5, 0, (int64_t)&g100, (int64_t)&g100);\n        return result;\n    }\n    v1++;\n    int64_t v2 = v1; // 0x4094e9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4094e0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4094eb\n    result = function_4090e0(a1, a2, a3, a4, a5, v2, (int64_t)&g100, (int64_t)&g100);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4094f0",
            "funcStartAddr": "4094f0",
            "funcEndAddr": "409550",
            "decompiledFuncCode": "int64_t function_4094f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4094f0\n    int64_t v3 = &v2; // 0x4094f0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x409523\n    int64_t v6; // 0x40950d\n    int64_t * v7; // 0x40952b\n    int64_t v8; // 0x40952b\n    int64_t v9; // 0x409537\n    if (v5 < 48) {\n        // 0x409500\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x409543\n            break;\n        }\n    } else {\n        // 0x40952b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x409543\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x409521\n    while (v4 != 9) {\n        // 0x409519\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x409500\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x409543\n                break;\n            }\n        } else {\n            // 0x40952b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x409543\n                break;\n            }\n        }\n        // 0x409519\n        v10 = 10;\n    }\n    int64_t result = function_4090e0(a1, a2, a3, a4, v3, v10, (int64_t)&g100, (int64_t)&g100); // 0x409546\n    return result;\n}\n"
        },
        {
            "funcName": "function_409550",
            "funcStartAddr": "409550",
            "funcEndAddr": "40960c",
            "decompiledFuncCode": "int64_t function_409550(int64_t a1, int64_t a2, char * a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409550\n    int64_t v1; // bp-168, 0x409550\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x409550\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x409550\n    int64_t v8; // 0x409550\n    int64_t v9; // bp-56, 0x409550\n    int64_t v10; // 0x4095b5\n    int64_t v11; // 0x4095d9\n    if ((int32_t)v6 < 48) {\n        // 0x4095a0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4095f0\n            break;\n        }\n    } else {\n        // 0x4095d2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4095f0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4095ca\n    int64_t v13 = 10; // 0x4095ca\n    while (v5 != 9) {\n        // 0x4095cc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4095a0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4095f0\n                break;\n            }\n        } else {\n            // 0x4095d2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4095f0\n                break;\n            }\n        }\n        // 0x4095c2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4095f0\n    int64_t v14; // bp-136, 0x409550\n    int64_t result = function_4090e0(a1, a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g100, (int64_t)&g100); // 0x4095ff\n    return result;\n}\n"
        },
        {
            "funcName": "function_409610",
            "funcStartAddr": "409610",
            "funcEndAddr": "40967a",
            "decompiledFuncCode": "int64_t function_409610(int64_t a1) {\n    // 0x409610\n    printf(dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    printf(dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * str = dcgettext(NULL, \"General help using GNU software: <http://www.gnu.org/gethelp/>\\n\", 5); // 0x409669\n    return fputs(str, g31);\n}\n"
        },
        {
            "funcName": "function_409680",
            "funcStartAddr": "409680",
            "funcEndAddr": "40969a",
            "decompiledFuncCode": "int64_t function_409680(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x409684\n    if (size != 0 != (mem == NULL)) {\n        // 0x409693\n        return (int64_t)mem;\n    }\n    // 0x409695\n    function_4098a0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4096a0",
            "funcStartAddr": "4096a0",
            "funcEndAddr": "4096b3",
            "decompiledFuncCode": "int64_t function_4096a0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4096a3\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4096a8\n        return function_409680((int64_t)v1);\n    }\n    // 0x4096ad\n    function_4098a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4096c0",
            "funcStartAddr": "4096c0",
            "funcEndAddr": "4096c2",
            "decompiledFuncCode": "int64_t function_4096c0(void) {\n    // 0x4096c0\n    int64_t v1; // 0x4096c0\n    return function_409680(v1);\n}\n"
        },
        {
            "funcName": "function_4096d0",
            "funcStartAddr": "4096d0",
            "funcEndAddr": "409706",
            "decompiledFuncCode": "int64_t function_4096d0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4096f8\n        free(v1);\n        return (int32_t)&g100 ^ (int32_t)&g100;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4096e1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4096f0\n        return (int64_t)mem;\n    }\n    // 0x409701\n    function_4098a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409710",
            "funcStartAddr": "409710",
            "funcEndAddr": "409723",
            "decompiledFuncCode": "int64_t function_409710(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x409713\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409718\n        return function_4096d0(a1, (int64_t)v1);\n    }\n    // 0x40971d\n    function_4098a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409730",
            "funcStartAddr": "409730",
            "funcEndAddr": "4097a6",
            "decompiledFuncCode": "int64_t function_409730(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1; // 0x409730\n    if (a1 != 0) {\n        if (0xaaaaaaaaaaaaaaaa / a3 <= a2) {\n            // 0x4097a0\n            function_4098a0(a1);\n            // UNREACHABLE\n        }\n        // 0x40975a\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4096d0(a1, v1 * a3);\n    }\n    // 0x409770\n    if (a2 == 0) {\n        int64_t v2 = 128 / a3 + (int64_t)(a3 >= 129); // 0x40978d\n        *(int64_t *)a2 = v2;\n        return function_4096d0(0, v2 * a3);\n    }\n    // 0x40975a\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4096d0(a1, v1 * a3);\n}\n"
        },
        {
            "funcName": "function_4097b0",
            "funcStartAddr": "4097b0",
            "funcEndAddr": "4097fd",
            "decompiledFuncCode": "int64_t function_4097b0(int64_t a1, uint64_t a2) {\n    if (a1 == 0) {\n        int64_t v1 = a2 == 0 ? 128 : a2; // 0x4097e8\n        *(int64_t *)a2 = v1;\n        return function_4096d0(0, v1);\n    }\n    if (a2 >= 0xaaaaaaaaaaaaaaaa) {\n        // 0x4097f7\n        function_4098a0(a1);\n        // UNREACHABLE\n    }\n    int64_t v2 = a2 + 1 + a2 / 2; // 0x4097cd\n    *(int64_t *)a2 = v2;\n    return function_4096d0(a1, v2);\n}\n"
        },
        {
            "funcName": "function_409800",
            "funcStartAddr": "409800",
            "funcEndAddr": "409817",
            "decompiledFuncCode": "int64_t function_409800(int64_t a1, int64_t a2) {\n    // 0x409800\n    return (int64_t)memset((int64_t *)function_409680(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_409820",
            "funcStartAddr": "409820",
            "funcEndAddr": "409838",
            "decompiledFuncCode": "int64_t function_409820(void) {\n    // 0x409820\n    int64_t nmemb; // 0x409820\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)nmemb); // 0x409824\n    if (mem != NULL) {\n        // 0x40982e\n        return (int64_t)mem;\n    }\n    // 0x409833\n    function_4098a0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409840",
            "funcStartAddr": "409840",
            "funcEndAddr": "409868",
            "decompiledFuncCode": "int64_t function_409840(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409680(a2); // 0x40984f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_409870",
            "funcStartAddr": "409870",
            "funcEndAddr": "40989e",
            "decompiledFuncCode": "int64_t function_409870(int64_t str) {\n    int64_t v1 = (int64_t)strlen((char *)str) + 1; // 0x40987e\n    int64_t v2 = function_409680(v1); // 0x409885\n    return (int64_t)memcpy((int64_t *)v2, (int64_t *)str, (int32_t)v1);\n}\n"
        },
        {
            "funcName": "function_4098a0",
            "funcStartAddr": "4098a0",
            "funcEndAddr": "4098d1",
            "decompiledFuncCode": "int64_t function_4098a0(int64_t a1) {\n    // 0x4098a0\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4098e0",
            "funcStartAddr": "4098e0",
            "funcEndAddr": "409d3d",
            "decompiledFuncCode": "int64_t function_4098e0(int64_t str, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x4098ee\n    char * str4; // 0x4098e0\n    int64_t v1; // 0x4098e0\n    char v2; // 0x4098e0\n    int64_t v3; // 0x4098e0\n    int64_t v4; // 0x4098e0\n    int64_t v5; // 0x4098e0\n    int64_t v6; // 0x4098e0\n    int64_t v7; // 0x4098e0\n    int64_t v8; // 0x4098e0\n    int64_t v9; // 0x4098e0\n    int64_t v10; // 0x4098e0\n    int64_t v11; // 0x4098e0\n    int64_t v12; // 0x4098e0\n    int64_t endptr; // 0x40990f\n    int64_t * v13; // 0x4098e0\n    int64_t v14; // 0x409961\n    if (base < 37) {\n        char c = str;\n        int32_t * v15 = __errno_location(); // 0x409913\n        *v15 = 0;\n        int64_t v16 = (int64_t)*__ctype_b_loc() + 1; // 0x40994a\n        char v17 = c; // 0x40994f\n        if ((*(char *)(v16 + (2 * str & 510)) & 32) != 0) {\n            int64_t v18 = str + 1; // 0x409940\n            unsigned char v19 = *(char *)v18; // 0x409944\n            int64_t v20 = v18; // 0x40994f\n            v17 = v19;\n            while ((*(char *)(2 * (int64_t)v19 + v16) & 32) != 0) {\n                // 0x409940\n                v18 = v20 + 1;\n                v19 = *(char *)v18;\n                v20 = v18;\n                v17 = v19;\n            }\n        }\n        // 0x409951\n        if (v17 == 45) {\n            // 0x40998b\n            return 4;\n        }\n        // 0x409956\n        int64_t v21; // bp-64, 0x4098e0\n        endptr = a2 == 0 ? (int64_t)&v21 : a2;\n        int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x40995c\n        v13 = (int64_t *)endptr;\n        v14 = *v13;\n        if (v14 == str) {\n            // 0x4099b8\n            if (c == 0 || a5 == 0) {\n                // 0x40998b\n                return 4;\n            }\n            char * str2 = (char *)a5;\n            char * found_char_pos = strchr(str2, (int32_t)c); // 0x4099da\n            str4 = str2;\n            v9 = 1;\n            v6 = 0;\n            v2 = c;\n            if (found_char_pos == NULL) {\n                // 0x40998b\n                return 4;\n            }\n            goto lab_0x4099e9;\n        } else {\n            // 0x40996c\n            if (*v15 != 0) {\n                // branch -> 0x409976\n            }\n            int64_t v22 = str_as_ul; // 0x40995c\n            int64_t v23 = 0;\n            v8 = v22;\n            v5 = v23;\n            v3 = a4;\n            if (a5 == 0) {\n                goto lab_0x409988;\n            } else {\n                char c2 = *(char *)v14; // 0x40997b\n                v8 = v22;\n                v5 = v23;\n                v3 = a4;\n                if (c2 != 0) {\n                    char * str3 = (char *)a5;\n                    char * found_char_pos2 = strchr(str3, (int32_t)c2); // 0x409a3c\n                    str4 = str3;\n                    v9 = v22;\n                    v6 = v23;\n                    v2 = c2;\n                    v10 = v22;\n                    v7 = v23;\n                    if (found_char_pos2 != NULL) {\n                        goto lab_0x4099e9;\n                    } else {\n                        goto lab_0x409a4b;\n                    }\n                } else {\n                    goto lab_0x409988;\n                }\n            }\n        }\n    } else {\n        // 0x409ce8\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"xstrtol.c\", 96, \"xstrtoul\");\n        v1 = (int64_t)\"0 <= strtol_base && strtol_base <= 36\";\n        v11 = (int64_t)\"xstrtoul\";\n        v12 = (int64_t)\"xstrtol.c\";\n        v4 = a5;\n        goto lab_0x409d01;\n    }\n  lab_0x409d01:;\n    int64_t v24 = v1; // 0x409d0b\n    int64_t v25 = v11; // 0x409d0b\n    int64_t v26 = -1; // 0x409d0b\n    int64_t v27; // 0x4098e0\n    int64_t v28 = v27; // 0x409d0b\n    int64_t v29 = v12; // 0x409d0b\n    int64_t v30 = v4; // 0x409d0b\n    int64_t v31 = 1; // 0x409d0b\n    int64_t v32; // 0x4098e0\n    int64_t v33 = v32; // 0x409d0b\n    int64_t v34; // 0x4098e0\n    int64_t v35 = v34; // 0x409d0b\n    goto lab_0x409b0f;\n  lab_0x4099e9:;\n    int64_t v67 = 0x100000000 * v14 >> 32;\n    int64_t v71 = 1024; // 0x409a03\n    int64_t v61 = 1; // 0x409a03\n    int64_t * v62; // 0x4098e0\n    int64_t v68; // 0x4098e0\n    int64_t v66; // 0x4098e0\n    int64_t v64; // 0x4098e0\n    int64_t v63; // 0x4098e0\n    int64_t v70; // 0x4098e0\n    int64_t v73; // 0x4098e0\n    int64_t v75; // 0x4098e0\n    int64_t v77; // 0x4098e0\n    int64_t v79; // 0x4098e0\n    int64_t v81; // 0x4098e0\n    int64_t v83; // 0x4098e0\n    int128_t v86; // 0x4098e0\n    int64_t v87; // 0x4098e0\n    int64_t v82; // 0x4098e0\n    int64_t v84; // 0x4098e0\n    int64_t v65; // 0x4098e0\n    int64_t v72; // 0x4098e0\n    int64_t v74; // 0x4098e0\n    int64_t v76; // 0x4098e0\n    int64_t v78; // 0x4098e0\n    int64_t v80; // 0x4098e0\n    int64_t v69; // 0x4098e0\n    int64_t v85; // 0x4098e0\n    int64_t v60; // 0x4098e0\n    if (strchr(str4, 48) == NULL) {\n        goto lab_0x409a60;\n    } else {\n        // 0x409a05\n        v71 = 1000;\n        v61 = 2;\n        switch (*(char *)(v67 + 1)) {\n            case 68: {\n                goto lab_0x409a60;\n            }\n            case 105: {\n                char v124 = *(char *)(v67 + 2); // 0x409cb2\n                v71 = 1024;\n                v61 = (v124 == 66 ? 2 : 1) + (int64_t)(v124 == 66);\n                goto lab_0x409a60;\n            }\n            case 66: {\n                goto lab_0x409a60;\n            }\n            default: {\n                // 0x409a1a\n                g97 = v2 - 66;\n                v10 = v9;\n                v7 = v6;\n                v60 = 1;\n                v62 = v13;\n                v63 = v9;\n                v64 = v6;\n                v65 = 1;\n                v66 = v67;\n                v68 = a4;\n                v69 = 1;\n                v70 = 1024;\n                v72 = 1;\n                v73 = 1024;\n                v74 = 1;\n                v75 = 1024;\n                v76 = 1;\n                v77 = 1024;\n                v78 = 1;\n                v79 = 1024;\n                v80 = 1;\n                v86 = 1024;\n                v87 = 1;\n                v81 = 1024;\n                v82 = 1;\n                v83 = 1024;\n                v84 = 1;\n                v85 = 1;\n                switch (v2) {\n                    case 66: {\n                        goto lab_0x409bfc;\n                    }\n                    case 69: {\n                        goto lab_0x409bd8;\n                    }\n                    case 71: {\n                        goto lab_0x409bab;\n                    }\n                    case 75: {\n                        goto lab_0x409b84;\n                    }\n                    case 77: {\n                        goto lab_0x409b69;\n                    }\n                    case 80: {\n                        goto lab_0x409b41;\n                    }\n                    case 84: {\n                        goto lab_0x409b19;\n                    }\n                    case 89: {\n                        goto lab_0x409af4;\n                    }\n                    case 90: {\n                        goto lab_0x409acd;\n                    }\n                    case 98: {\n                        goto lab_0x409ab7;\n                    }\n                    case 99: {\n                        goto lab_0x409a98;\n                    }\n                    case 103: {\n                        goto lab_0x409bab;\n                    }\n                    case 107: {\n                        goto lab_0x409b84;\n                    }\n                    case 109: {\n                        goto lab_0x409b69;\n                    }\n                    case 116: {\n                        goto lab_0x409b19;\n                    }\n                    case 119: {\n                        goto lab_0x409a85;\n                    }\n                    default: {\n                        goto lab_0x409a4b;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x409988:\n    // 0x409988\n    *(int64_t *)v3 = v8;\n    // 0x40998b\n    return v5 & 0xffffffff;\n  lab_0x409b0f:;\n    int64_t v36 = v35;\n    int64_t v37 = v33;\n    int64_t v38 = v31;\n    int64_t v39 = v30;\n    int64_t v40 = v29;\n    int64_t v41 = v28;\n    int64_t v42 = v26;\n    uint32_t v43 = (int32_t)v24 - 1; // 0x409b0f\n    int64_t v44 = v43; // 0x409b12\n    int64_t v45 = v25; // 0x409b12\n    int64_t v46 = v42; // 0x409b12\n    int64_t v47 = v41; // 0x409b12\n    int64_t v48 = v40; // 0x409b12\n    int64_t v49 = v39; // 0x409b12\n    int64_t v50 = v38; // 0x409b12\n    int64_t v51 = v37; // 0x409b12\n    int64_t v52 = v36; // 0x409b12\n    int64_t * v53; // 0x4098e0\n    int64_t v54; // 0x4098e0\n    int64_t v55; // 0x4098e0\n    int64_t v56; // 0x4098e0\n    int64_t v57; // 0x4098e0\n    int64_t v58; // 0x4098e0\n    int64_t v59; // 0x4098e0\n    if (v43 != 0) {\n        goto lab_0x409b00;\n    } else {\n        // 0x409b0f\n        v53 = (int64_t *)v36;\n        v58 = v42;\n        v57 = v41;\n        v59 = v40;\n        v55 = v39;\n        v56 = v38;\n        v54 = v37;\n        goto lab_0x409aec;\n    }\n  lab_0x409a60:\n    // 0x409a60\n    g98 = v2 - 66;\n    v10 = v9;\n    v7 = v6;\n    v60 = v61;\n    v62 = v13;\n    v63 = v9;\n    v64 = v6;\n    v65 = v61;\n    v66 = v67;\n    v68 = a4;\n    v69 = v61;\n    v70 = v71;\n    v72 = v61;\n    v73 = v71;\n    v74 = v61;\n    v75 = v71;\n    v76 = v61;\n    v77 = v71;\n    v78 = v61;\n    v79 = v71;\n    v80 = v61;\n    v81 = v71;\n    v82 = v61;\n    v83 = v71;\n    v84 = v61;\n    v85 = v61;\n    switch (v2) {\n        case 66: {\n            goto lab_0x409bfc;\n        }\n        case 69: {\n            goto lab_0x409bd8;\n        }\n        case 71: {\n            goto lab_0x409bab;\n        }\n        case 75: {\n            // 0x409b7e\n            v86 = v71;\n            v87 = v61;\n            goto lab_0x409b84;\n        }\n        case 77: {\n            goto lab_0x409b69;\n        }\n        case 80: {\n            goto lab_0x409b41;\n        }\n        case 84: {\n            goto lab_0x409b19;\n        }\n        case 89: {\n            goto lab_0x409af4;\n        }\n        case 90: {\n            goto lab_0x409acd;\n        }\n        case 98: {\n            goto lab_0x409ab7;\n        }\n        case 99: {\n            goto lab_0x409a98;\n        }\n        case 103: {\n            goto lab_0x409bab;\n        }\n        case 107: {\n            // 0x409b7e\n            v86 = v71;\n            v87 = v61;\n            goto lab_0x409b84;\n        }\n        case 109: {\n            goto lab_0x409b69;\n        }\n        case 116: {\n            goto lab_0x409b19;\n        }\n        case 119: {\n            goto lab_0x409a85;\n        }\n        default: {\n            goto lab_0x409a4b;\n        }\n    }\n  lab_0x409b00:;\n    uint128_t v88 = (int128_t)v46 * (int128_t)v45; // 0x409b03\n    v24 = v44;\n    v25 = v45;\n    v26 = v88;\n    v28 = v47;\n    v29 = v48;\n    v30 = v49;\n    v31 = v50;\n    v33 = v51;\n    v35 = v52;\n    v1 = v44;\n    v11 = v45;\n    v27 = v47;\n    v12 = v48;\n    v4 = v49;\n    v32 = v51;\n    v34 = v52;\n    if (v88 > 0xffffffffffffffff) {\n        goto lab_0x409d01;\n    } else {\n        goto lab_0x409b0f;\n    }\n  lab_0x409bfc:;\n    int64_t v89 = v85; // 0x409c03\n    if (v9 >= 0x40000000000000) {\n        goto lab_0x409b93;\n    } else {\n        // 0x409c05\n        v62 = v13;\n        v63 = 1024 * v9;\n        v64 = v6;\n        v65 = v85;\n        v66 = v67;\n        v68 = a4;\n        goto lab_0x409a98;\n    }\n  lab_0x409bd8:;\n    uint128_t v90 = (int128_t)v9 * (int128_t)v83; // 0x409be3\n    int64_t v91 = (int64_t)(v90 < 0xffffffffffffffff ? v90 : 0xffffffffffffffff);\n    int64_t v92 = v90 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v93 = 5; // 0x409bef\n    v53 = v13;\n    v58 = v91;\n    v57 = v6;\n    v59 = v84;\n    v55 = v67;\n    v56 = v92;\n    v54 = a4;\n    int32_t v94 = v93; // 0x409bf2\n    int64_t v95 = v92; // 0x409bf2\n    while (v93 != 0) {\n        // 0x409be0\n        v90 = (int128_t)v91 * (int128_t)v83;\n        v91 = (int64_t)(v90 < 0xffffffffffffffff ? v90 : 0xffffffffffffffff);\n        v92 = v90 > 0xffffffffffffffff ? 1 : v95;\n        v93 = v94 - 1;\n        v53 = v13;\n        v58 = v91;\n        v57 = v6;\n        v59 = v84;\n        v55 = v67;\n        v56 = v92;\n        v54 = a4;\n        v94 = v93;\n        v95 = v92;\n    }\n    goto lab_0x409aec;\n  lab_0x409bab:;\n    int128_t v99 = v81; // 0x409bae\n    uint128_t v100 = v99 * (int128_t)v9; // 0x409bae\n    v62 = v13;\n    v63 = -1;\n    v64 = 1;\n    v65 = v82;\n    v66 = v67;\n    v68 = a4;\n    if (v100 <= 0xffffffffffffffff) {\n        uint128_t v101 = (v100 & 0xffffffffffffffff) * v99; // 0x409bb7\n        v62 = v13;\n        v63 = -1;\n        v64 = 1;\n        v65 = v82;\n        v66 = v67;\n        v68 = a4;\n        if (v101 <= 0xffffffffffffffff) {\n            uint128_t v102 = (v101 & 0xffffffffffffffff) * v99; // 0x409bc0\n            v62 = v13;\n            v63 = -1;\n            v64 = 1;\n            v65 = v82;\n            v66 = v67;\n            v68 = a4;\n            if (v102 <= 0xffffffffffffffff) {\n                // 0x409bc9\n                v62 = v13;\n                v63 = v102;\n                v64 = v6 & 0xffffffff;\n                v65 = v82;\n                v66 = v67;\n                v68 = a4;\n            }\n        }\n    }\n    goto lab_0x409a98;\n  lab_0x409b69:;\n    int128_t v103 = v79; // 0x409b6c\n    uint128_t v104 = v103 * (int128_t)v9; // 0x409b6c\n    v89 = v80;\n    if (v104 > 0xffffffffffffffff) {\n        goto lab_0x409b93;\n    } else {\n        uint128_t v105 = (v104 & 0xffffffffffffffff) * v103; // 0x409b71\n        if (v105 > 0xffffffffffffffff) {\n            goto lab_0x409b93;\n        } else {\n            // 0x409b76\n            v62 = v13;\n            v63 = v105;\n            v64 = v6;\n            v65 = v80;\n            v66 = v67;\n            v68 = a4;\n            goto lab_0x409a98;\n        }\n    }\n  lab_0x409b41:;\n    uint128_t v106 = (int128_t)v9 * (int128_t)v77; // 0x409b53\n    int64_t v107 = (int64_t)(v106 < 0xffffffffffffffff ? v106 : 0xffffffffffffffff);\n    int64_t v108 = v106 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v109 = 4; // 0x409b5f\n    v53 = v13;\n    v58 = v107;\n    v57 = v6;\n    v59 = v78;\n    v55 = v67;\n    v56 = v108;\n    v54 = a4;\n    int32_t v110 = v109; // 0x409b62\n    int64_t v111 = v108; // 0x409b62\n    while (v109 != 0) {\n        // 0x409b50\n        v106 = (int128_t)v107 * (int128_t)v77;\n        v107 = (int64_t)(v106 < 0xffffffffffffffff ? v106 : 0xffffffffffffffff);\n        v108 = v106 > 0xffffffffffffffff ? 1 : v111;\n        v109 = v110 - 1;\n        v53 = v13;\n        v58 = v107;\n        v57 = v6;\n        v59 = v78;\n        v55 = v67;\n        v56 = v108;\n        v54 = a4;\n        v110 = v109;\n        v111 = v108;\n    }\n    goto lab_0x409aec;\n  lab_0x409b19:;\n    uint128_t v112 = (int128_t)v9 * (int128_t)v75; // 0x409b2b\n    int64_t v113 = (int64_t)(v112 < 0xffffffffffffffff ? v112 : 0xffffffffffffffff);\n    int64_t v114 = v112 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v115 = 3; // 0x409b37\n    v53 = v13;\n    v58 = v113;\n    v57 = v6;\n    v59 = v76;\n    v55 = v67;\n    v56 = v114;\n    v54 = a4;\n    int32_t v116 = v115; // 0x409b3a\n    int64_t v117 = v114; // 0x409b3a\n    while (v115 != 0) {\n        // 0x409b28\n        v112 = (int128_t)v113 * (int128_t)v75;\n        v113 = (int64_t)(v112 < 0xffffffffffffffff ? v112 : 0xffffffffffffffff);\n        v114 = v112 > 0xffffffffffffffff ? 1 : v117;\n        v115 = v116 - 1;\n        v53 = v13;\n        v58 = v113;\n        v57 = v6;\n        v59 = v76;\n        v55 = v67;\n        v56 = v114;\n        v54 = a4;\n        v116 = v115;\n        v117 = v114;\n    }\n    goto lab_0x409aec;\n  lab_0x409af4:\n    // 0x409af4\n    v44 = 8;\n    v45 = v73;\n    v46 = v9;\n    v47 = v6;\n    v48 = v74;\n    v49 = v67;\n    v50 = 0;\n    v51 = a4;\n    v52 = endptr;\n    goto lab_0x409b00;\n  lab_0x409acd:;\n    uint128_t v118 = (int128_t)v9 * (int128_t)v70; // 0x409adb\n    int64_t v119 = (int64_t)(v118 < 0xffffffffffffffff ? v118 : 0xffffffffffffffff);\n    int64_t v120 = v118 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v121 = 6; // 0x409ae7\n    int32_t v122 = v121; // 0x409aea\n    int64_t v123 = v120; // 0x409aea\n    v53 = v13;\n    v58 = v119;\n    v57 = v6;\n    v59 = v72;\n    v55 = v67;\n    v56 = v120;\n    v54 = a4;\n    while (v121 != 0) {\n        // 0x409ad8\n        v118 = (int128_t)v119 * (int128_t)v70;\n        v119 = (int64_t)(v118 < 0xffffffffffffffff ? v118 : 0xffffffffffffffff);\n        v120 = v118 > 0xffffffffffffffff ? 1 : v123;\n        v121 = v122 - 1;\n        v122 = v121;\n        v123 = v120;\n        v53 = v13;\n        v58 = v119;\n        v57 = v6;\n        v59 = v72;\n        v55 = v67;\n        v56 = v120;\n        v54 = a4;\n    }\n    goto lab_0x409aec;\n  lab_0x409ab7:\n    // 0x409ab7\n    v89 = v69;\n    if (v9 >= 0x80000000000000) {\n        goto lab_0x409b93;\n    } else {\n        // 0x409ac4\n        v62 = v13;\n        v63 = 512 * v9;\n        v64 = v6;\n        v65 = v69;\n        v66 = v67;\n        v68 = a4;\n        goto lab_0x409a98;\n    }\n  lab_0x409a98:;\n    int64_t v96 = v64;\n    int64_t v97 = v66 + v65; // 0x409a98\n    *v62 = v97;\n    v8 = v63;\n    v5 = (*(char *)v97 != 0 ? v96 | 2 : v96) & 0xffffffff;\n    v3 = v68;\n    goto lab_0x409988;\n  lab_0x409a85:\n    // 0x409a85\n    v89 = v60;\n    if (v9 < 0) {\n        goto lab_0x409b93;\n    } else {\n        // 0x409a8e\n        v62 = v13;\n        v63 = 2 * v9;\n        v64 = v6;\n        v65 = v60;\n        v66 = v67;\n        v68 = a4;\n        goto lab_0x409a98;\n    }\n  lab_0x409a4b:\n    // 0x409a4b\n    *(int64_t *)a4 = v10;\n    // 0x40998b\n    return (v7 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x409aec:\n    // 0x409aec\n    v62 = v53;\n    v63 = v58;\n    v64 = (v56 | v57) & 0xffffffff;\n    v65 = v59;\n    v66 = v55;\n    v68 = v54;\n    goto lab_0x409a98;\n  lab_0x409b93:\n    // 0x409b93\n    v62 = v13;\n    v63 = -1;\n    v64 = 1;\n    v65 = v89;\n    v66 = v67;\n    v68 = a4;\n    goto lab_0x409a98;\n  lab_0x409b84:;\n    uint128_t v98 = v86 * (int128_t)v9; // 0x409b87\n    v62 = v13;\n    v63 = v98;\n    v64 = v6;\n    v65 = v87;\n    v66 = v67;\n    v68 = a4;\n    v89 = v87;\n    if (v98 <= 0xffffffffffffffff) {\n        goto lab_0x409a98;\n    } else {\n        goto lab_0x409b93;\n    }\n}\n"
        },
        {
            "funcName": "function_409d40",
            "funcStartAddr": "409d40",
            "funcEndAddr": "409e75",
            "decompiledFuncCode": "int64_t function_409d40(int32_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x409d70\n    if (cmd != 1030) {\n        // 0x409e20\n        return fcntl(fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x409d7c\n    int64_t v2; // 0x409d40\n    if (g87 < 0) {\n        int64_t v3 = function_409d40(fd, 0, v1, a4); // 0x409dc4\n        int64_t v4 = v3 & 0xffffffff; // 0x409dc9\n        if ((int32_t)v3 < 0) {\n            // 0x409db0\n            return v4 & 0xffffffff;\n        }\n        // 0x409dcf\n        v2 = v4;\n        if (g87 != -1) {\n            // 0x409db0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl(fd, cmd); // 0x409d97\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x409da6\n            g87 = 1;\n            // 0x409db0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_409d40(fd, 0, v1, a4); // 0x409e57\n        int64_t v7 = v6 & 0xffffffff; // 0x409e5c\n        if ((int32_t)v6 < 0) {\n            // 0x409db0\n            return v7 & 0xffffffff;\n        }\n        // 0x409e66\n        g87 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x409ddf\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x409dea\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x409db0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x409e02\n    close(fd2);\n    // 0x409db0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409e80",
            "funcStartAddr": "409e80",
            "funcEndAddr": "409ec0",
            "decompiledFuncCode": "int64_t function_409e80(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x409e9a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x409e9a\n        return fflush(stream);\n    }\n    // 0x409ea8\n    function_409ef0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_409ec0",
            "funcStartAddr": "409ec0",
            "funcEndAddr": "409ee8",
            "decompiledFuncCode": "int64_t function_409ec0(int64_t a1) {\n    // 0x409ec0\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x409ee7\n        return 0;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 16) - *(int64_t *)(a1 + 8); // 0x409ed0\n    int64_t result = v1; // 0x409eda\n    if ((a1 & 256) != 0) {\n        // 0x409edc\n        result = *(int64_t *)(a1 + 88) + v1 - *(int64_t *)(a1 + 72);\n    }\n    // 0x409ee7\n    return result;\n}\n"
        },
        {
            "funcName": "function_409ef0",
            "funcStartAddr": "409ef0",
            "funcEndAddr": "409f47",
            "decompiledFuncCode": "int64_t function_409ef0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x409ef0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x409efa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x409f2b\n    int64_t result = -1; // 0x409f34\n    if (v1 != -1) {\n        // 0x409f36\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x409f42\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f50",
            "funcStartAddr": "409f50",
            "funcEndAddr": "40a02f",
            "decompiledFuncCode": "int64_t function_409f50(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 48); // 0x409f5c\n    uint32_t v2 = *v1; // 0x409f5c\n    int64_t v3 = a2 & 0xffffffff; // 0x409f61\n    int32_t * v4 = (int32_t *)(a2 + 52); // 0x409f64\n    uint64_t v5 = (int64_t)*v4; // 0x409f64\n    int64_t v6; // 0x409fd2\n    if (v3 <= v5) {\n      lab_0x409fcc_2:\n        // 0x409fcc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x409f52\n    int64_t v8 = v2; // 0x409f50\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x409fcc\n        goto lab_0x409fcc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x409f88\n    int64_t v17; // 0x409f96\n    int64_t * v18; // 0x409fb0\n    int64_t * v19; // 0x409fb3\n    int64_t v20; // 0x409fbe\n    int64_t v21; // 0x409f96\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x409f93\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x409fb0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x409fc7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x409fcc\n            goto lab_0x409fcc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x409fcc\n            goto lab_0x409fcc_2;\n        }\n        // 0x409f82\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40a00b\n    int64_t * v23 = (int64_t *)v22; // 0x40a010\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x40a013\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x40a010\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x40a027\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x409f7d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x409fcc\n            goto lab_0x409fcc_2;\n        }\n        // 0x409f82\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x409f93\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x409fb0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x409fc7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x409fcc\n                goto lab_0x409fcc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x409fcc\n                goto lab_0x409fcc_2;\n            }\n            // 0x409f82\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x409ff0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x40a010\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x40a027\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x409fcc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a030",
            "funcStartAddr": "40a030",
            "funcEndAddr": "40b063",
            "decompiledFuncCode": "int64_t function_40a030(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int32_t v2 = a1; // 0x40a067\n    if (v2 < 1) {\n        // 0x40a309\n        return 0xffffffff;\n    }\n    int64_t * v3 = (int64_t *)(v1 + 16); // 0x40a06f\n    *v3 = 0;\n    int32_t v4 = *(int32_t *)a7; // 0x40a078\n    int64_t v5; // 0x40a030\n    int32_t v6; // 0x40a030\n    char v7; // 0x40a030\n    int64_t v8; // 0x40a030\n    int64_t v9; // 0x40a030\n    if (v4 != 0) {\n        // 0x40a210\n        v6 = v4;\n        if (*(int32_t *)(v1 + 24) == 0) {\n            goto lab_0x40a093;\n        } else {\n            int64_t v10 = *(int64_t *)(v1 + 32); // 0x40a221\n            char v11 = *(char *)&v8; // 0x40a226\n            v9 = a3;\n            v7 = v11;\n            v5 = v10;\n            if ((v11 - 43 & -3) == 0) {\n                int64_t v12 = a3 + 1; // 0x40a238\n                v9 = v12;\n                v7 = *(char *)v12;\n                v5 = v10;\n            }\n            goto lab_0x40a0f3;\n        }\n    } else {\n        // 0x40a086\n        *(int32_t *)a7 = 1;\n        v6 = 1;\n        goto lab_0x40a093;\n    }\n  lab_0x40a680:;\n    // 0x40a680\n    int64_t v13; // 0x40a030\n    int64_t v14 = v13 + 32; // 0x40a680\n    int64_t v15 = *(int64_t *)v14; // 0x40a684\n    int64_t v16; // 0x40a030\n    int64_t v17 = v16; // 0x40a68d\n    int64_t v18; // 0x40a030\n    int64_t v19 = v18; // 0x40a68d\n    int32_t v20; // 0x40a030\n    int32_t v21 = v20; // 0x40a68d\n    int64_t v22 = v14; // 0x40a68d\n    int64_t v23; // 0x40a030\n    int64_t v24 = v23; // 0x40a68d\n    int64_t v25 = v15; // 0x40a68d\n    int64_t v26 = v16; // 0x40a68d\n    int64_t v27 = v18; // 0x40a68d\n    int32_t v28 = v20; // 0x40a68d\n    int64_t v29 = v23; // 0x40a68d\n    if (v15 == 0) {\n        // break -> 0x40a6e0\n        goto lab_0x40a6e0;\n    }\n    goto lab_0x40a68f;\n  lab_0x40a68f:;\n    int64_t v30 = v17; // 0x40a68f\n    int64_t v31 = v19; // 0x40a68f\n    int32_t v32 = v21; // 0x40a68f\n    int64_t v33 = v22; // 0x40a68f\n    int64_t v34; // 0x40a030\n    int64_t v35 = v34 + 1 & 0xffffffff; // 0x40a68f\n    int64_t * v36; // 0x40a030\n    int64_t str2 = *v36; // 0x40a68f\n    int64_t v37 = v24; // 0x40a68f\n    int64_t v38 = v25; // 0x40a68f\n    goto lab_0x40a694;\n  lab_0x40a65c:;\n    int64_t * mem = malloc(16); // 0x40a661\n    int64_t v39; // 0x40a030\n    int64_t v40; // 0x40a030\n    if (mem == NULL) {\n        // 0x40aa08\n        v18 = 1;\n        v23 = 0;\n        int64_t v52 = v39; // 0x40aa0b\n        if (v39 != 0) {\n            int64_t v53 = *(int64_t *)(v52 + 8); // 0x40aa10\n            free((int64_t *)v52);\n            v18 = 1;\n            v23 = v53;\n            v52 = v53;\n            while (v53 != 0) {\n                // 0x40aa10\n                v53 = *(int64_t *)(v52 + 8);\n                free((int64_t *)v52);\n                v18 = 1;\n                v23 = v53;\n                v52 = v53;\n            }\n        }\n    } else {\n        int64_t v54 = (int64_t)mem; // 0x40a661\n        *mem = v13;\n        *(int64_t *)(v54 + 8) = v39;\n        v18 = v40;\n        v23 = v54;\n    }\n    goto lab_0x40a680;\n  lab_0x40a093:\n    // 0x40a093\n    *(int32_t *)(v1 + 52) = v6;\n    *(int32_t *)(v1 + 48) = v6;\n    int64_t * v55 = (int64_t *)(v1 + 32); // 0x40a0a5\n    *v55 = 0;\n    int64_t v56; // 0x40a030\n    int64_t v57; // 0x40a030\n    int64_t v58; // 0x40a030\n    int64_t v59; // 0x40a030\n    int64_t v60; // 0x40a030\n    if ((int32_t)a8 == 0) {\n        // 0x40a320\n        if (getenv(\"POSIXLY_CORRECT\") != NULL) {\n            int64_t v61 = *v55; // 0x40a434\n            *(int32_t *)(v1 + 44) = 1;\n            char v62 = *(char *)&v8; // 0x40a442\n            v58 = v61;\n            if (v62 == 45) {\n                goto lab_0x40a350;\n            } else {\n                // 0x40a44d\n                v56 = v61;\n                v59 = v61;\n                if (v62 != 43) {\n                    goto lab_0x40a0da;\n                } else {\n                    goto lab_0x40a455;\n                }\n            }\n        } else {\n            // 0x40a333\n            *(int32_t *)(v1 + 44) = 0;\n            char v63 = *(char *)&v8; // 0x40a340\n            if (v63 != 45) {\n                if (v63 == 43) {\n                    // 0x40ab9b\n                    v59 = *v55;\n                    goto lab_0x40a455;\n                } else {\n                    // 0x40a880\n                    *(int32_t *)(v1 + 40) = 1;\n                    v60 = a3;\n                    v57 = *v55;\n                    goto lab_0x40a0e3;\n                }\n            } else {\n                // 0x40a34b\n                v58 = *v55;\n                goto lab_0x40a350;\n            }\n        }\n    } else {\n        // 0x40a0b7\n        *(int32_t *)(v1 + 44) = 1;\n        v56 = 0;\n        v58 = 0;\n        v59 = 0;\n        switch (*(char *)&v8) {\n            case 45: {\n                goto lab_0x40a350;\n            }\n            case 43: {\n                goto lab_0x40a455;\n            }\n            default: {\n                goto lab_0x40a0da;\n            }\n        }\n    }\n  lab_0x40a0f3:;\n    int64_t v64 = a1 & 0xffffffff; // 0x40a07c\n    int64_t v65 = v5;\n    char v66 = v7;\n    int64_t str3 = v9;\n    int64_t v67; // 0x40a030\n    int64_t v68; // 0x40a030\n    if (v65 == 0) {\n        goto lab_0x40a250;\n    } else {\n        // 0x40a10c\n        v68 = a4;\n        v67 = v65;\n        if (*(char *)v65 == 0) {\n            goto lab_0x40a250;\n        } else {\n            goto lab_0x40a116;\n        }\n    }\n  lab_0x40a350:\n    // 0x40a350\n    *(int32_t *)(v1 + 40) = 2;\n    v60 = a3 + 1;\n    v57 = v58;\n    goto lab_0x40a0e3;\n  lab_0x40a455:\n    // 0x40a455\n    *(int32_t *)(v1 + 40) = 0;\n    v60 = a3 + 1;\n    v57 = v59;\n    goto lab_0x40a0e3;\n  lab_0x40a0da:\n    // 0x40a0da\n    *(int32_t *)(v1 + 40) = 0;\n    v60 = a3;\n    v57 = v56;\n    goto lab_0x40a0e3;\n  lab_0x40a250:;\n    uint32_t v211 = *(int32_t *)a7; // 0x40a250\n    int64_t v212 = v211; // 0x40a250\n    int32_t * v78 = (int32_t *)(v1 + 52); // 0x40a254\n    if ((int64_t)*v78 > v212) {\n        // 0x40a25b\n        *v78 = v211;\n    }\n    int32_t * v77 = (int32_t *)(v1 + 48); // 0x40a260\n    if (*v77 > v211) {\n        // 0x40a267\n        *v77 = v211;\n    }\n    int32_t * v209 = (int32_t *)(v1 + 40); // 0x40a26c\n    int64_t v70 = v212; // 0x40a272\n    int64_t v104; // 0x40a030\n    int64_t v105; // 0x40a030\n    if (*v209 == 1) {\n        uint32_t v213 = *v78; // 0x40a388\n        int64_t v214 = v213; // 0x40a388\n        v8 = v214;\n        int64_t v215; // 0x40a030\n        if (*v77 == v213) {\n            // 0x40a480\n            v215 = v214;\n            if (v211 != v213) {\n                // 0x40a488\n                *v77 = v211;\n                v8 = v212;\n                v215 = v212;\n            }\n        } else {\n            // 0x40a398\n            v215 = v214;\n            if (v211 != v213) {\n                // 0x40a39c\n                function_409f50(a2, v1);\n                int64_t v216 = (int64_t)*(int32_t *)a7; // 0x40a3a9\n                v8 = v216;\n                v215 = v216;\n            }\n        }\n        int64_t v217 = v215; // 0x40a3ad\n        int64_t v218 = v217; // 0x40a3af\n        if (v64 > v217) {\n            int64_t v219 = 0x100000000 * v217 >> 32;\n            int64_t v220 = *(int64_t *)(8 * v219 + a2); // 0x40a3d3\n            int64_t v221 = v219 & 0xffffffff; // 0x40a3d7\n            v8 = v221;\n            if (*(char *)v220 == 45) {\n                // 0x40a3e0\n                if (*(char *)(v220 + 1) != 0) {\n                    // 0x40a3e6\n                    v104 = v221;\n                    v105 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40a3ea;\n                }\n            }\n            int64_t v222 = v221 + 1; // 0x40a3c0\n            int64_t v223 = v222 & 0xffffffff; // 0x40a3c0\n            v8 = v223;\n            int64_t v224 = v219 + 1; // 0x40a3c3\n            *(int32_t *)a7 = (int32_t)v222;\n            v218 = v223;\n            while (v64 > v224) {\n                // 0x40a3d3\n                v219 = v224;\n                v220 = *(int64_t *)(8 * v219 + a2);\n                v221 = v219 & 0xffffffff;\n                v8 = v221;\n                if (*(char *)v220 == 45) {\n                    // 0x40a3e0\n                    if (*(char *)(v220 + 1) != 0) {\n                        // 0x40a3e6\n                        v104 = v221;\n                        v105 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40a3ea;\n                    }\n                }\n                // 0x40a3c0\n                v222 = v221 + 1;\n                v223 = v222 & 0xffffffff;\n                v8 = v223;\n                v224 = v219 + 1;\n                *(int32_t *)a7 = (int32_t)v222;\n                v218 = v223;\n            }\n        }\n        // 0x40a790\n        v104 = v218;\n        v105 = v218 & 0xffffffff;\n        goto lab_0x40a3ea;\n    } else {\n        goto lab_0x40a278;\n    }\n  lab_0x40a0e3:\n    // 0x40a0e3\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v60;\n    v7 = *(char *)v60;\n    v5 = v57;\n    goto lab_0x40a0f3;\n  lab_0x40a278:;\n    int64_t v69 = v70;\n    int32_t v71 = v69; // 0x40a278\n    int64_t v72; // 0x40a030\n    int64_t v73; // 0x40a030\n    bool v74; // 0x40a030\n    int64_t v75; // 0x40a292\n    if (v2 == v71) {\n        int64_t v76 = (int64_t)*v77; // 0x40a36d\n        v8 = v76;\n        v72 = v76;\n        v73 = (int64_t)*v78;\n        goto lab_0x40a372;\n    } else {\n        // 0x40a280\n        v75 = *(int64_t *)((0x100000000 * v69 >> 29) + a2);\n        v8 = v75;\n        int64_t v79 = v74 ? -1 : 1; // 0x40a299\n        int64_t v80 = 3; // 0x40a299\n        int64_t v81 = v75;\n        int64_t v82 = (int64_t)\"--\";\n        unsigned char v83 = *(char *)v81; // 0x40a299\n        char v84 = *(char *)v82; // 0x40a299\n        char v85 = v84; // 0x40a299\n        bool v86 = false; // 0x40a299\n        while (v83 == v84) {\n            v80--;\n            int64_t v87 = v82 + v79; // 0x40a299\n            int64_t v88 = v81 + v79; // 0x40a299\n            v85 = v83;\n            v86 = true;\n            if (v80 == 0) {\n                // break -> \n                break;\n            }\n            v81 = v88;\n            v82 = v87;\n            v83 = *(char *)v81;\n            v84 = *(char *)v82;\n            v85 = v84;\n            v86 = false;\n        }\n        unsigned char v89 = v85;\n        if ((v83 >= v89 && !v86) != v83 < v89) {\n            // 0x40a2e0\n            if (*(char *)v75 == 45) {\n                int64_t v90 = v75 + 1; // 0x40a3f8\n                unsigned char v91 = *(char *)v90; // 0x40a3f8\n                if (v91 == 0) {\n                    goto lab_0x40a2e9;\n                } else {\n                    int64_t v92 = v90 + (int64_t)(a4 != 0 == v91 == 45); // 0x40a419\n                    *(int64_t *)(v1 + 32) = v92;\n                    v68 = v91;\n                    v67 = v92;\n                    goto lab_0x40a116;\n                }\n            } else {\n                goto lab_0x40a2e9;\n            }\n        } else {\n            uint32_t v93 = *v77; // 0x40a2a5\n            v8 = v93;\n            int32_t v94 = *v78; // 0x40a2aa\n            int64_t v95 = v69 + 1; // 0x40a2af\n            int32_t v96 = v95; // 0x40a2b2\n            *(int32_t *)a7 = v96;\n            if (v93 == v94) {\n                // 0x40a868\n                *v77 = v96;\n                v8 = v95 & 0xffffffff;\n            } else {\n                if (v94 != v96) {\n                    // 0x40a2c2\n                    function_409f50(a2, v1);\n                    v8 = (int64_t)*v77;\n                }\n            }\n            // 0x40a2d2\n            *v78 = v2;\n            *(int32_t *)a7 = v2;\n            v72 = v8;\n            v73 = v64;\n            goto lab_0x40a372;\n        }\n    }\n  lab_0x40a116:;\n    int64_t v97 = 0x100000000 * a6 >> 32; // 0x40a05e\n    int32_t v98 = v66 != 58 ? *(int32_t *)(v1 + 4) : 0; // 0x40a0fa\n    int64_t v99 = v67;\n    int64_t v100 = v64; // 0x40a11c\n    int64_t v101 = v99; // 0x40a11c\n    int64_t v102; // 0x40a11e\n    if (a4 == 0) {\n        goto lab_0x40a178;\n    } else {\n        // 0x40a11e\n        v102 = (int64_t)*(int32_t *)a7;\n        v8 = v102;\n        int64_t v103 = *(int64_t *)(8 * v102 + a2); // 0x40a12a\n        char c = *(char *)(v103 + 1); // 0x40a12e\n        if (c == 45) {\n            goto lab_0x40a5c0;\n        } else {\n            // 0x40a13c\n            if ((int32_t)v97 == 0) {\n                goto lab_0x40a178;\n            } else {\n                // 0x40a146\n                if (*(char *)(v103 + 2) != 0) {\n                    goto lab_0x40a5c0;\n                } else {\n                    // 0x40a150\n                    v8 = v102;\n                    v100 = v64;\n                    v101 = v99;\n                    if (strchr((char *)str3, (int32_t)c) == NULL) {\n                        goto lab_0x40a5c0;\n                    } else {\n                        goto lab_0x40a178;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40a3ea:\n    // 0x40a3ea\n    *v78 = (int32_t)v104;\n    v70 = v105;\n    goto lab_0x40a278;\n  lab_0x40a178:;\n    int64_t v106 = v101 + 1; // 0x40a178\n    int64_t * v107 = (int64_t *)(v1 + 32); // 0x40a185\n    *v107 = v106;\n    char v108 = *(char *)v101; // 0x40a18a\n    int32_t c2 = v108; // 0x40a18e\n    char * str4 = (char *)str3; // 0x40a194\n    char * found_char_pos = strchr(str4, c2); // 0x40a194\n    char * v109 = (char *)v106;\n    if (*v109 == 0) {\n        // 0x40a470\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if ((v108 || 1) == 59 || found_char_pos == NULL) {\n        if (v98 != 0) {\n            // 0x40aa30\n            fprintf(g35, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5), \"%s: invalid option -- '%c'\\n\", v108);\n        }\n        // 0x40a7ac\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40a309\n        return 63;\n    }\n    int64_t v110 = (int64_t)found_char_pos; // 0x40a194\n    unsigned char v111 = *(char *)(v110 + 1); // 0x40a1c3\n    v8 = v111;\n    if (*found_char_pos != 87 || v111 != 59) {\n        int64_t v112 = v108; // 0x40a18a\n        if (v111 != 58) {\n            // 0x40a309\n            return v112 & 0xffffffff;\n        }\n        unsigned char v113 = *v109; // 0x40a1da\n        v8 = v113;\n        if (*(char *)(v110 + 2) == 58) {\n            if (v113 == 0) {\n                // 0x40ac71\n                *v3 = 0;\n            } else {\n                // 0x40a970\n                *v3 = v106;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40a1fd\n            *v107 = 0;\n            // 0x40a309\n            return v112 & 0xffffffff;\n        }\n        int32_t v114 = *(int32_t *)a7; // 0x40a1e5\n        if (v113 != 0) {\n            // 0x40a1f1\n            *v3 = v106;\n            *(int32_t *)a7 = v114 + 1;\n            // 0x40a1fd\n            *v107 = 0;\n            // 0x40a309\n            return v112 & 0xffffffff;\n        }\n        if (v114 != (int32_t)v100) {\n            // 0x40aa6d\n            *(int32_t *)a7 = v114 + 1;\n            *v3 = *(int64_t *)(8 * (int64_t)v114 + a2);\n            // 0x40a1fd\n            *v107 = 0;\n            // 0x40a309\n            return v112 & 0xffffffff;\n        }\n        if (v98 != 0) {\n            // 0x40ae2b\n            fprintf(g35, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5), \"%s: option requires an argument -- '%c'\\n\", v108);\n        }\n        // 0x40aced\n        *(int32_t *)(v1 + 8) = c2;\n        char v115 = *str4; // 0x40acf9\n        // 0x40a1fd\n        *v107 = 0;\n        // 0x40a309\n        return (4 * (int64_t)(v115 != 58) | (v115 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    if (a4 == 0) {\n        // 0x40ae17\n        *v107 = 0;\n        // 0x40a309\n        return 87;\n    }\n    int32_t v116 = *(int32_t *)a7; // 0x40a4b2\n    char * str6; // 0x40a030\n    int64_t v117; // 0x40a030\n    if (*v109 == 0) {\n        if (v116 == (int32_t)v100) {\n            if (v98 != 0) {\n                // 0x40afb9\n                fprintf(g35, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5), \"%s: option requires an argument -- '%c'\\n\", v108);\n            }\n            // 0x40ae6c\n            *(int32_t *)(v1 + 8) = c2;\n            char v118 = *str4; // 0x40ae78\n            // 0x40a309\n            return (4 * (int64_t)(v118 != 58) | (v118 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        int64_t v119 = v116; // 0x40a4b2\n        int64_t v120 = v119 + 1; // 0x40ac5c\n        v8 = v120 & 0xffffffff;\n        *(int32_t *)a7 = (int32_t)v120;\n        int64_t v121 = *(int64_t *)(8 * v119 + a2); // 0x40ac63\n        *v3 = v121;\n        str6 = (char *)v121;\n        v117 = v121;\n    } else {\n        // 0x40a4bc\n        *v3 = v106;\n        *(int32_t *)a7 = v116 + 1;\n        str6 = v109;\n        v117 = v106;\n    }\n    // 0x40a4c8\n    *v107 = v117;\n    unsigned char v122 = *str6; // 0x40a4cd\n    int64_t v123 = v122; // 0x40a4cd\n    int64_t v124 = v123; // 0x40a4d7\n    int64_t v125 = v117; // 0x40a4d7\n    int64_t v126 = v123; // 0x40a4d7\n    int64_t v127 = v117; // 0x40a4d7\n    if (v122 != 0) {\n        v126 = v124;\n        v127 = v125;\n        while (v124 != 61) {\n            int64_t v128 = v125 + 1; // 0x40a4e0\n            unsigned char v129 = *(char *)v128; // 0x40a4e4\n            v124 = v129;\n            v125 = v128;\n            v126 = 0;\n            v127 = v128;\n            if (v129 == 0) {\n                // break -> 0x40a504\n                break;\n            }\n            v126 = v124;\n            v127 = v125;\n        }\n    }\n    int64_t n2 = v127 - v117; // 0x40a510\n    int64_t v130 = 0;\n    int64_t v131 = 0;\n    int32_t v132 = 0;\n    int64_t v133 = 0;\n    char * str5 = (char *)a4; // 0x40a58d\n    int64_t v134 = v133; // 0x40a594\n    int32_t v135 = v132; // 0x40a594\n    int64_t v136 = v130; // 0x40a594\n    int64_t v137; // 0x40a030\n    int32_t v138; // 0x40a030\n    int32_t v139; // 0x40abb3\n    int32_t v140; // 0x40abb6\n    if (strncmp(str5, str6, (int32_t)n2) == 0) {\n        // 0x40a596\n        if ((n2 & 0xffffffff) == (int64_t)strlen(str5)) {\n            // 0x40ad21\n            v138 = v131;\n            v137 = a4;\n            goto lab_0x40abfb;\n        }\n        if (v130 != 0) {\n            // 0x40a550\n            v134 = 1;\n            v135 = v132;\n            v136 = v130;\n            if ((int32_t)v97 == 0) {\n                // 0x40a55a\n                v134 = 1;\n                v135 = v132;\n                v136 = v130;\n                if (*(int32_t *)(v130 + 8) == *(int32_t *)(a4 + 8)) {\n                    // 0x40aba5\n                    v134 = 1;\n                    v135 = v132;\n                    v136 = v130;\n                    if (*(int64_t *)(v130 + 16) == *(int64_t *)(a4 + 16)) {\n                        // 0x40abb3\n                        v139 = *(int32_t *)(a4 + 24);\n                        v140 = *(int32_t *)(v130 + 24);\n                        v134 = v140 == v139 ? 0x100000000 * v133 >> 32 : 1;\n                        v135 = v132;\n                        v136 = v130;\n                    }\n                }\n            }\n        } else {\n            // 0x40a5ae\n            v134 = v133;\n            v135 = v131;\n            v136 = a4;\n        }\n    }\n    int64_t v141 = v136;\n    int32_t v142 = v135;\n    int64_t v143 = v134;\n    int64_t v144 = a4 + 32; // 0x40a56f\n    int64_t v145 = *(int64_t *)v144; // 0x40a573\n    int64_t v146 = v131 + 1 & 0xffffffff; // 0x40a57e\n    while (v145 != 0) {\n        // 0x40a584\n        v130 = v141;\n        v131 = v146;\n        int64_t v147 = v144;\n        v132 = v142;\n        v133 = v143;\n        str5 = (char *)v145;\n        v134 = v133;\n        v135 = v132;\n        v136 = v130;\n        if (strncmp(str5, str6, (int32_t)n2) == 0) {\n            // 0x40a596\n            if ((n2 & 0xffffffff) == (int64_t)strlen(str5)) {\n                // 0x40ad21\n                v138 = v131;\n                v137 = v147;\n                goto lab_0x40abfb;\n            }\n            if (v130 != 0) {\n                // 0x40a550\n                v134 = 1;\n                v135 = v132;\n                v136 = v130;\n                if ((int32_t)v97 == 0) {\n                    // 0x40a55a\n                    v134 = 1;\n                    v135 = v132;\n                    v136 = v130;\n                    if (*(int32_t *)(v130 + 8) == *(int32_t *)(v147 + 8)) {\n                        // 0x40aba5\n                        v134 = 1;\n                        v135 = v132;\n                        v136 = v130;\n                        if (*(int64_t *)(v130 + 16) == *(int64_t *)(v147 + 16)) {\n                            // 0x40abb3\n                            v139 = *(int32_t *)(v147 + 24);\n                            v140 = *(int32_t *)(v130 + 24);\n                            v134 = v140 == v139 ? 0x100000000 * v133 >> 32 : 1;\n                            v135 = v132;\n                            v136 = v130;\n                        }\n                    }\n                }\n            } else {\n                // 0x40a5ae\n                v134 = v133;\n                v135 = v131;\n                v136 = v147;\n            }\n        }\n        // 0x40a56f\n        v141 = v136;\n        v142 = v135;\n        v143 = v134;\n        v144 = v147 + 32;\n        v145 = *(int64_t *)v144;\n        v146 = v131 + 1 & 0xffffffff;\n    }\n    if ((int32_t)v143 != 0) {\n        char * str7 = str6; // 0x40adf1\n        int64_t v148 = v117; // 0x40adf1\n        if (v98 != 0) {\n            // 0x40af42\n            fprintf(g35, dcgettext(NULL, \"%s: option '-W %s' is ambiguous\\n\", 5), \"%s: option '-W %s' is ambiguous\\n\", str6);\n            v148 = *v107;\n            str7 = (char *)v148;\n        }\n        int32_t len = strlen(str7); // 0x40ae00\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n        *v107 = v148 + (int64_t)len;\n        // 0x40a309\n        return 63;\n    }\n    // 0x40abf2\n    v138 = v142;\n    v137 = v141;\n    if (v141 == 0) {\n        // 0x40ae17\n        *v107 = 0;\n        // 0x40a309\n        return 87;\n    }\n    goto lab_0x40abfb;\n  lab_0x40a372:;\n    int32_t v210 = v72; // 0x40a372\n    if (v210 != (int32_t)v73) {\n        // 0x40a376\n        *(int32_t *)a7 = v210;\n    }\n    // 0x40a309\n    return 0xffffffff;\n  lab_0x40abfb:;\n    int32_t v149 = *(int32_t *)(v137 + 8); // 0x40abfb\n    if ((char)v126 == 0) {\n        if (v149 == 1) {\n            int32_t v150 = *(int32_t *)a7; // 0x40ae89\n            uint64_t v151 = (int64_t)v150; // 0x40ae89\n            if ((v100 & 0xffffffff) <= v151) {\n                if (v98 != 0) {\n                    int64_t v152 = *(int64_t *)v137; // 0x40b030\n                    fprintf(g35, dcgettext(NULL, \"%s: option '-W %s' requires an argument\\n\", 5), \"%s: option '-W %s' requires an argument\\n\", (char *)v152);\n                }\n                int64_t v153 = *v107; // 0x40af87\n                v8 = v153;\n                int64_t v154 = -1; // 0x40af95\n                int64_t v155 = v153; // 0x40af95\n                int64_t v156 = 0; // 0x40af95\n                while (v154 != 0) {\n                    int64_t v157 = v155;\n                    v154--;\n                    v155 = v157 + (v74 ? -1 : 1);\n                    v156 = v154;\n                    if (*(char *)v157 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v156 = 0;\n                }\n                *v107 = v153 - 2 - v156;\n                if (*str4 != 58) {\n                    // 0x40a309\n                    return 63;\n                }\n                // 0x40a309\n                return 58;\n            }\n            // 0x40ae95\n            *(int32_t *)a7 = v150 + 1;\n            *v3 = *(int64_t *)(8 * v151 + a2);\n        } else {\n            // 0x40ad13\n            *v3 = 0;\n        }\n    } else {\n        if (v149 == 0) {\n            char * str8 = str6; // 0x40af21\n            int64_t v158 = v117; // 0x40af21\n            if (v98 != 0) {\n                int64_t v159 = *(int64_t *)v137; // 0x40aff3\n                fprintf(g35, dcgettext(NULL, \"%s: option '-W %s' doesn't allow an argument\\n\", 5), \"%s: option '-W %s' doesn't allow an argument\\n\", (char *)v159);\n                v158 = *v107;\n                str8 = (char *)v158;\n            }\n            // 0x40af27\n            *v107 = v158 + (int64_t)strlen(str8);\n            // 0x40a309\n            return 63;\n        }\n        // 0x40ac10\n        *v3 = (0x100000000 * v127 >> 32) + 1;\n    }\n    // 0x40ac19\n    *v107 = v117 + (int64_t)strlen(str6);\n    if (a5 != 0) {\n        // 0x40ac33\n        *(int32_t *)a5 = v138;\n    }\n    int64_t v160 = *(int64_t *)(v137 + 16); // 0x40ac39\n    uint32_t v161 = *(int32_t *)(v137 + 24); // 0x40ac3d\n    int64_t v162 = v160; // 0x40ac44\n    int32_t v163 = v161; // 0x40ac44\n    if (v160 == 0) {\n        // 0x40a309\n        return (int64_t)v161 & 0xffffffff;\n    }\n    goto lab_0x40a77c;\n  lab_0x40a5c0:;\n    int64_t v204 = v99; // 0x40a030\n    int32_t v41 = 0; // 0x40a030\n    int64_t n = 0; // 0x40a030\n    int64_t v174 = v99; // 0x40a030\n    switch (*(char *)v99) {\n        case 0: {\n            goto lab_0x40a5fb;\n        }\n        case 61: {\n            goto lab_0x40a5fb;\n        }\n        default: {\n            int64_t v205 = v204 + 1; // 0x40a5e0\n            char v206 = *(char *)v205; // 0x40a5e4\n            v204 = v205;\n            while (v206 != 0 == (v206 != 61)) {\n                // 0x40a5e0\n                v205 = v204 + 1;\n                v206 = *(char *)v205;\n                v204 = v205;\n            }\n            int64_t v207 = v205 - v99; // 0x40a5f4\n            v41 = v207;\n            n = v207;\n            v174 = v205;\n            goto lab_0x40a5fb;\n        }\n    }\n  lab_0x40a2e9:;\n    int64_t v208 = 0xffffffff; // 0x40a2f1\n    if (*v209 != 0) {\n        // 0x40a2f7\n        *v3 = v75;\n        *(int32_t *)a7 = v71 + 1;\n        v208 = 1;\n    }\n    // 0x40a309\n    return v208 & 0xffffffff;\n  lab_0x40a77c:\n    // 0x40a77c\n    *(int32_t *)v162 = v163;\n    // 0x40a309\n    return 0;\n  lab_0x40a5fb:;\n    int32_t v164; // 0x40a030\n    int64_t v165; // 0x40a030\n    int64_t v166; // 0x40a030\n    int64_t v167; // 0x40a030\n    int64_t v42; // 0x40a030\n    int64_t v168; // 0x40a030\n    int64_t v169; // 0x40a030\n    int32_t v170; // 0x40a030\n    int32_t v171; // 0x40a6f5\n    int64_t v172; // 0x40a6ed\n    int64_t v173; // 0x40a618\n    if (v68 == 0) {\n        // 0x40a5fb\n        v164 = v97;\n        v166 = v102;\n        v172 = v64;\n        goto lab_0x40a898;\n    } else {\n        // 0x40a60c\n        v168 = 0x100000000 * v174;\n        v173 = 0x100000000 * a1 >> 32;\n        int32_t v43 = v97;\n        v36 = (int64_t *)(v1 + 32);\n        v30 = 0;\n        v31 = 0;\n        v32 = -1;\n        v33 = a4;\n        v35 = 0;\n        str2 = v99;\n        v37 = 0;\n        v38 = v68;\n        while (true) {\n          lab_0x40a694:\n            // 0x40a694\n            v39 = v37;\n            v34 = v35;\n            v13 = v33;\n            v20 = v32;\n            v40 = v31;\n            v16 = v30;\n            char * str = (char *)v38; // 0x40a69a\n            v18 = v40;\n            v23 = v39;\n            if (strncmp(str, (char *)str2, (int32_t)n) != 0) {\n                goto lab_0x40a680;\n            } else {\n                // 0x40a6a3\n                if (v41 == strlen(str)) {\n                    // 0x40a7f0\n                    v42 = v39;\n                    if (v39 == 0) {\n                        goto lab_0x40a821;\n                    } else {\n                        goto lab_0x40a810;\n                    }\n                }\n                if (v16 != 0) {\n                    // 0x40a640\n                    v18 = v40;\n                    v23 = v39;\n                    if (v40 % 256 != 0) {\n                        goto lab_0x40a680;\n                    } else {\n                        if (v43 != 0) {\n                            goto lab_0x40a65c;\n                        } else {\n                            // 0x40a650\n                            if (*(int32_t *)(v16 + 8) == *(int32_t *)(v13 + 8)) {\n                                int64_t v44 = *(int64_t *)(v13 + 16); // 0x40a7c0\n                                int64_t v45 = *(int64_t *)(v16 + 16); // 0x40a7c4\n                                if (v45 != v44) {\n                                    goto lab_0x40a65c;\n                                } else {\n                                    int32_t v46 = *(int32_t *)(v13 + 24); // 0x40a7ce\n                                    int32_t v47 = *(int32_t *)(v16 + 24); // 0x40a7d1\n                                    int64_t v48; // 0x40a030\n                                    v18 = v48;\n                                    v23 = v39;\n                                    if (v47 != v46) {\n                                        goto lab_0x40a65c;\n                                    } else {\n                                        goto lab_0x40a680;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40a65c;\n                            }\n                        }\n                    }\n                } else {\n                    int64_t v49 = v13 + 32; // 0x40a6c4\n                    int64_t v50 = *(int64_t *)v49; // 0x40a6c8\n                    int32_t v51 = v34;\n                    v17 = v13;\n                    v19 = v40;\n                    v21 = v51;\n                    v22 = v49;\n                    v24 = v39;\n                    v25 = v50;\n                    v26 = v13;\n                    v27 = v40;\n                    v28 = v51;\n                    v29 = v39;\n                    if (v50 == 0) {\n                        // break -> 0x40a6e0\n                        break;\n                    }\n                    goto lab_0x40a68f;\n                }\n            }\n        }\n      lab_0x40a6e0:\n        // 0x40a6e0\n        v171 = *(int32_t *)a7;\n        int64_t v175 = v171; // 0x40a6f5\n        v8 = v175;\n        if ((char)v27 == 0 == v29 == 0) {\n            // 0x40a70a\n            v172 = v173 & 0xffffffff;\n            v165 = v175;\n            v169 = v26;\n            v170 = v28;\n            v167 = v172;\n            v164 = v43;\n            v166 = v175;\n            if (v26 == 0) {\n                goto lab_0x40a898;\n            } else {\n                goto lab_0x40a716;\n            }\n        } else {\n            if (v98 == 0) {\n                goto lab_0x40ab51;\n            } else {\n                if (v29 == 0) {\n                    if ((char)v27 == 0) {\n                        goto lab_0x40ab51;\n                    } else {\n                        int64_t v176 = *(int64_t *)(8 * v175 + a2); // 0x40ad5e\n                        fprintf(g35, dcgettext(NULL, \"%s: option '%s' is ambiguous\\n\", 5), \"%s: option '%s' is ambiguous\\n\", (char *)v176);\n                        goto lab_0x40ab23;\n                    }\n                } else {\n                    int64_t v177 = *(int64_t *)(8 * v175 + a2); // 0x40aabc\n                    fprintf(g35, dcgettext(NULL, \"%s: option '%s' is ambiguous; possibilities:\", 5), \"%s: option '%s' is ambiguous; possibilities:\", (char *)v177);\n                    fprintf(g35, \" '--%s'\", (char *)*(int64_t *)v26);\n                    int64_t v178; // bp-72, 0x40a030\n                    int64_t v179 = *(int64_t *)((int64_t)&v178 + 8); // 0x40ab09\n                    if (v179 != 0) {\n                        fprintf(g35, \" '--%s'\", (char *)*(int64_t *)*(int64_t *)v179);\n                        int64_t v180 = *(int64_t *)(v179 + 8); // 0x40ab09\n                        int64_t v181 = v180; // 0x40ab10\n                        while (v180 != 0) {\n                            int64_t v182 = *(int64_t *)*(int64_t *)v181; // 0x40aaf3\n                            fprintf(g35, \" '--%s'\", (char *)v182);\n                            v180 = *(int64_t *)(v181 + 8);\n                            v181 = v180;\n                        }\n                    }\n                    // 0x40ab12\n                    fputc(10, g35);\n                    goto lab_0x40ab23;\n                }\n            }\n        }\n    }\n  lab_0x40a898:;\n    // 0x40a898\n    char * v183; // 0x40a030\n    int64_t v184; // 0x40a030\n    int64_t v185; // 0x40a030\n    int64_t v186; // 0x40a030\n    if (v164 == 0) {\n        // 0x40ac7f\n        v184 = v166;\n        if (v98 == 0) {\n            goto lab_0x40a92f;\n        } else {\n            int64_t v187 = *(int64_t *)(v1 + 32); // 0x40ac92\n            int64_t v188 = *(int64_t *)(8 * v166 + a2); // 0x40ac97\n            v185 = v187;\n            if (*(char *)(v188 + 1) != 45) {\n                // 0x40ac8d\n                v183 = (char *)v187;\n                v186 = v188;\n                goto lab_0x40a8f1;\n            } else {\n                goto lab_0x40aca8;\n            }\n        }\n    } else {\n        int64_t v189 = *(int64_t *)(8 * v166 + a2); // 0x40a8ae\n        if (*(char *)(v189 + 1) == 45) {\n            // 0x40add3\n            v184 = v166;\n            if (v98 == 0) {\n                goto lab_0x40a92f;\n            } else {\n                // 0x40addf\n                v185 = *(int64_t *)(v1 + 32);\n                goto lab_0x40aca8;\n            }\n        } else {\n            int64_t v190 = *(int64_t *)(v1 + 32); // 0x40a8bc\n            char * c3 = (char *)v190;\n            v8 = v166 & 0xffffffff;\n            v100 = v172;\n            v101 = v190;\n            if (strchr((char *)str3, (int32_t)*c3) != NULL) {\n                goto lab_0x40a178;\n            } else {\n                // 0x40a8e9\n                v183 = c3;\n                v186 = v189;\n                if (v98 == 0) {\n                    goto lab_0x40a92f;\n                } else {\n                    goto lab_0x40a8f1;\n                }\n            }\n        }\n    }\n  lab_0x40a716:;\n    int64_t v191 = v168 >> 32;\n    int64_t v192 = v165 + 1; // 0x40a716\n    *(int32_t *)a7 = (int32_t)v192;\n    int32_t v193 = *(int32_t *)(v169 + 8); // 0x40a727\n    if (*(char *)v191 == 0) {\n        if (v193 == 1) {\n            // 0x40a841\n            if ((v192 & 0xffffffff) >= v167) {\n                if (v98 != 0) {\n                    int64_t v194 = *(int64_t *)v169; // 0x40aeed\n                    fprintf(g35, dcgettext(NULL, \"%s: option '--%s' requires an argument\\n\", 5), \"%s: option '--%s' requires an argument\\n\", (char *)v194);\n                }\n                int64_t str9 = *v36; // 0x40ad99\n                *v36 = str9 + (int64_t)strlen((char *)str9);\n                *(int32_t *)(v1 + 8) = *(int32_t *)(v169 + 24);\n                if (*(char *)str3 != 58) {\n                    // 0x40a309\n                    return 63;\n                }\n                // 0x40a309\n                return 58;\n            }\n            // 0x40a849\n            *(int32_t *)a7 = (int32_t)v165 + 2;\n            *v3 = *(int64_t *)((0x100000000 * v192 >> 29) + a2);\n        }\n    } else {\n        if (v193 == 0) {\n            if (v98 != 0) {\n                // 0x40a987\n                if (*(char *)(*(int64_t *)(a2 - 8 + (0x100000000 * v192 >> 29)) + 1) == 45) {\n                    // 0x40aeaf\n                    fprintf(g35, dcgettext(NULL, \"%s: option '--%s' doesn't allow an argument\\n\", 5));\n                } else {\n                    // 0x40a9a8\n                    fprintf(g35, dcgettext(NULL, \"%s: option '%c%s' doesn't allow an argument\\n\", 5));\n                }\n            }\n            int64_t str10 = *v36; // 0x40a9d7\n            *v36 = str10 + (int64_t)strlen((char *)str10);\n            *(int32_t *)(v1 + 8) = *(int32_t *)(v169 + 24);\n            // 0x40a309\n            return 63;\n        }\n        // 0x40a738\n        *v3 = v191 + 1;\n    }\n    int64_t str11 = *v36; // 0x40a741\n    *v36 = str11 + (int64_t)strlen((char *)str11);\n    if (a5 != 0) {\n        // 0x40a760\n        *(int32_t *)a5 = v170;\n    }\n    int64_t v195 = *(int64_t *)(v169 + 16); // 0x40a76b\n    uint32_t v196 = *(int32_t *)(v169 + 24); // 0x40a76f\n    v162 = v195;\n    v163 = v196;\n    if (v195 == 0) {\n        // 0x40a309\n        return (int64_t)v196 & 0xffffffff;\n    }\n    goto lab_0x40a77c;\n  lab_0x40ab51:;\n    int64_t str12 = *v36; // 0x40ab51\n    int32_t len2 = strlen((char *)str12); // 0x40ab5c\n    *(int32_t *)(v1 + 8) = 0;\n    *v36 = str12 + (int64_t)len2;\n    *(int32_t *)a7 = v171 + 1;\n    if (v29 == 0) {\n        // 0x40a309\n        return 63;\n    }\n    int64_t v197 = *(int64_t *)(v29 + 8); // 0x40ab88\n    free((int64_t *)v29);\n    int64_t v198 = v197; // 0x40ab97\n    while (v197 != 0) {\n        // 0x40ab88\n        v197 = *(int64_t *)(v198 + 8);\n        free((int64_t *)v198);\n        v198 = v197;\n    }\n    // 0x40a309\n    return 63;\n  lab_0x40a92f:\n    // 0x40a92f\n    *(int64_t *)(v1 + 32) = (int64_t)&g9;\n    *(int32_t *)a7 = (int32_t)v184 + 1;\n    *(int32_t *)(v1 + 8) = 0;\n    // 0x40a309\n    return 63;\n  lab_0x40aca8:\n    // 0x40aca8\n    fprintf(g35, dcgettext(NULL, \"%s: unrecognized option '--%s'\\n\", 5), \"%s: unrecognized option '--%s'\\n\", (char *)v185);\n    int64_t v199 = (int64_t)*(int32_t *)a7; // 0x40acd8\n    v8 = v199;\n    v184 = v199;\n    goto lab_0x40a92f;\n  lab_0x40ab23:;\n    int64_t str13 = *v36; // 0x40ab23\n    int32_t len3 = strlen((char *)str13); // 0x40ab2b\n    *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    *(int32_t *)(v1 + 8) = 0;\n    *v36 = str13 + (int64_t)len3;\n    // 0x40a309\n    return 63;\n  lab_0x40a8f1:;\n    char v200 = *(char *)v186; // 0x40a8f6\n    fprintf(g35, dcgettext(NULL, \"%s: unrecognized option '%c%s'\\n\", 5), \"%s: unrecognized option '%c%s'\\n\", v200, v183);\n    int64_t v201 = (int64_t)*(int32_t *)a7; // 0x40a92b\n    v8 = v201;\n    v184 = v201;\n    goto lab_0x40a92f;\n  lab_0x40a821:;\n    int64_t v202 = (int64_t)*(int32_t *)a7; // 0x40a821\n    v8 = v202;\n    v165 = v202;\n    v169 = v13;\n    v170 = v34;\n    v167 = v173 & 0xffffffff;\n    goto lab_0x40a716;\n  lab_0x40a810:;\n    int64_t v203 = *(int64_t *)(v42 + 8); // 0x40a810\n    free((int64_t *)v42);\n    v42 = v203;\n    if (v203 != 0) {\n        goto lab_0x40a810;\n    } else {\n        goto lab_0x40a821;\n    }\n}\n"
        },
        {
            "funcName": "function_40b070",
            "funcStartAddr": "40b070",
            "funcEndAddr": "40b0c6",
            "decompiledFuncCode": "int64_t function_40b070(int64_t a1) {\n    // 0x40b070\n    *(int32_t *)&g88 = g28;\n    *(int32_t *)&g89 = g27;\n    int64_t v1; // 0x40b070\n    int64_t result = function_40a030(v1, v1, v1, v1, v1, v1, &g88, a1 & 0xffffffff); // 0x40b096\n    g28 = *(int32_t *)&g88;\n    g94 = (char *)g91;\n    *(int32_t *)&g26 = g90;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b0d0",
            "funcStartAddr": "40b0d0",
            "funcEndAddr": "40b0e8",
            "decompiledFuncCode": "int64_t function_40b0d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b0d0\n    return function_40b070(1);\n}\n"
        },
        {
            "funcName": "function_40b0f0",
            "funcStartAddr": "40b0f0",
            "funcEndAddr": "40b103",
            "decompiledFuncCode": "int64_t function_40b0f0(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int64_t * a5, int64_t a6) {\n    // 0x40b0f0\n    return function_40b070(0);\n}\n"
        },
        {
            "funcName": "function_40b110",
            "funcStartAddr": "40b110",
            "funcEndAddr": "40b125",
            "decompiledFuncCode": "int64_t function_40b110(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b110\n    return function_40a030(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40b130",
            "funcStartAddr": "40b130",
            "funcEndAddr": "40b146",
            "decompiledFuncCode": "int64_t function_40b130(void) {\n    // 0x40b130\n    return function_40b070(0);\n}\n"
        },
        {
            "funcName": "function_40b150",
            "funcStartAddr": "40b150",
            "funcEndAddr": "40b168",
            "decompiledFuncCode": "int64_t function_40b150(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b150\n    return function_40a030(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40b170",
            "funcStartAddr": "40b170",
            "funcEndAddr": "40b199",
            "decompiledFuncCode": "int64_t function_40b170(int32_t * pwc, int64_t wstr2, int64_t n) {\n    // 0x40b170\n    int64_t ps; // 0x40b170\n    int32_t result; // 0x40b194\n    if (wstr2 == 0) {\n        int64_t wstr = (int64_t)&g9;\n        result = mbrtowc((int32_t *)0, (char *)wstr, (int32_t)1, (struct _TYPEDEF___mbstate_t *)ps);\n        return result;\n    }\n    // 0x40b175\n    if (n == 0) {\n        // 0x40b17a\n        return -2;\n    }\n    // 0x40b194\n    result = mbrtowc((int32_t *)(int64_t)pwc, (char *)wstr2, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps);\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b1a0",
            "funcStartAddr": "40b1a0",
            "funcEndAddr": "40b2a4",
            "decompiledFuncCode": "int64_t function_40b1a0(int64_t result, int32_t a2, int64_t a3) {\n    // 0x40b1a0\n    if (a3 == 0) {\n        // 0x40b1d9\n        return 0;\n    }\n    int64_t v1 = result; // 0x40b1ac\n    int64_t v2 = a3; // 0x40b1ac\n    int64_t result2; // 0x40b1a0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40b1ae\n        int64_t v4 = result; // 0x40b1b1\n        if ((char)result == v3) {\n            // 0x40b1d9\n            return result;\n        }\n        int64_t v5 = a3; // 0x40b1b1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40b1c0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40b1e0;\n            }\n            // 0x40b1c6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40b1d9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40b1d9\n        return result2;\n    }\n  lab_0x40b1e0:;\n    int64_t result3 = v1; // 0x40b20d\n    int64_t v6 = v2; // 0x40b20d\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x40b1ef\n        int64_t v9 = 0x10000 * v8 | v8; // 0x40b1fc\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x40b206\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x40b226\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x40b255\n            int64_t v13 = v1 + 8; // 0x40b259\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x40b243\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x40b26c;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x40b263\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x40b1d9\n                return 0;\n            }\n        }\n    }\n  lab_0x40b26c:;\n    char v15 = a2; // 0x40b26c\n    if (*(char *)result3 == v15) {\n        // 0x40b1d9\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x40b280\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x40b1d9\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x40b1d9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b2b0",
            "funcStartAddr": "40b2b0",
            "funcEndAddr": "40b315",
            "decompiledFuncCode": "int64_t function_40b2b0(int64_t a1) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40b2b7\n    int32_t v1 = __fpending(stream); // 0x40b2b7\n    int32_t is_ferror = ferror(stream); // 0x40b2c2\n    int32_t v2 = fclose(stream); // 0x40b2cc\n    if (is_ferror != 0) {\n        // 0x40b2f8\n        if (v2 == 0) {\n            // 0x40b2fc\n            *__errno_location() = 0;\n        }\n        // 0x40b2ee\n        return 0xffffffff;\n    }\n    // 0x40b2d5\n    if (v2 == 0) {\n        // 0x40b2ee\n        return 0;\n    }\n    int64_t result = 0xffffffff; // 0x40b2dc\n    if (v1 == 0) {\n        // 0x40b2de\n        result = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40b2ee\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b320",
            "funcStartAddr": "40b320",
            "funcEndAddr": "40b882",
            "decompiledFuncCode": "int64_t function_40b320(void) {\n    char * v1 = nl_langinfo(14); // 0x40b336\n    char * v2 = g92; // 0x40b33b\n    char * v3; // 0x40b320\n    int64_t v4; // 0x40b320\n    int64_t v5; // 0x40b320\n    int64_t v6; // 0x40b320\n    int64_t v7; // 0x40b320\n    int32_t size; // 0x40b320\n    int32_t size2; // 0x40b320\n    int32_t len; // 0x40b3f2\n    int64_t v8; // 0x40b3f2\n    char * env_val; // 0x40b3dd\n    if (v2 == NULL) {\n        // 0x40b3d8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 116;\n        v4 = 102;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 101;\n        if (env_val == NULL) {\n            goto lab_0x40b445;\n        } else {\n            // 0x40b3ea\n            size = 116;\n            v4 = 102;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 101;\n            if (*env_val == 0) {\n                goto lab_0x40b445;\n            } else {\n                // 0x40b3ef\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40b3dd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40b875\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40b445;\n                    } else {\n                        // 0x40b7e9\n                        size2 = len + 14;\n                        goto lab_0x40b40b;\n                    }\n                } else {\n                    goto lab_0x40b40b;\n                }\n            }\n        }\n    } else {\n        // 0x40b320\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40b35a;\n    }\n  lab_0x40b68c:;\n    // 0x40b68c\n    int64_t v10; // 0x40b320\n    int64_t v11 = v10;\n    int64_t v12; // 0x40b320\n    int64_t v13 = v12;\n    struct _IO_FILE * stream; // 0x40b4cb\n    int32_t v14 = __uflow(stream); // 0x40b68f\n    int64_t v15 = v13; // 0x40b699\n    int32_t v16 = v14; // 0x40b699\n    int64_t v17 = v11; // 0x40b699\n    int64_t v18 = v13; // 0x40b699\n    int64_t v19 = v11; // 0x40b699\n    if (v14 == -1) {\n        // break -> 0x40b69f\n        goto lab_0x40b69f;\n    }\n    goto lab_0x40b519;\n  lab_0x40b50e:;\n    // 0x40b50e\n    int64_t v116; // 0x40b320\n    int64_t v137 = v116;\n    int64_t v115; // 0x40b320\n    int64_t v138 = v115;\n    int64_t v114; // 0x40b320\n    int64_t v139 = v114;\n    int64_t * v30; // 0x40b500\n    *v30 = v138 + 1;\n    unsigned char v140 = *(char *)v138; // 0x40b516\n    v15 = v139;\n    v16 = v140;\n    v17 = v137;\n    goto lab_0x40b519;\n  lab_0x40b519:;\n    int64_t v20 = v17;\n    int32_t c = v16;\n    int64_t v21 = v15;\n    int64_t v22; // 0x40b320\n    int32_t v23; // bp-120, 0x40b320\n    int32_t v24; // bp-184, 0x40b320\n    int64_t v25; // 0x40b320\n    int64_t v26; // 0x40b4e8\n    int64_t v27; // 0x40b4ed\n    int64_t * v28; // 0x40b504\n    switch (c) {\n        case 32: {\n            // 0x40b500\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40b500_2;\n        }\n        case 10: {\n            // 0x40b500\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40b500_2;\n        }\n        case 9: {\n            // 0x40b500\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40b500_2;\n        }\n        case 35: {\n            uint64_t v29 = *v30; // 0x40b6f1\n            uint64_t v31 = *v28; // 0x40b6f5\n            int32_t v32; // 0x40b320\n            char v33; // 0x40b320\n            unsigned char v34; // 0x40b6d8\n            int32_t v35; // 0x40b6fe\n            if (v29 < v31) {\n                // 0x40b6d0\n                *v30 = v29 + 1;\n                v34 = *(char *)v29;\n                v32 = v34;\n                v33 = 1;\n            } else {\n                // 0x40b6fb\n                v35 = __uflow(stream);\n                v32 = v35;\n                v33 = v35 != -1;\n            }\n            char v36 = v33;\n            int32_t v37 = v32;\n            while (v37 != 10 && v36 != 0) {\n                // 0x40b6f1\n                v29 = *v30;\n                v31 = *v28;\n                if (v29 < v31) {\n                    // 0x40b6d0\n                    *v30 = v29 + 1;\n                    v34 = *(char *)v29;\n                    v32 = v34;\n                    v33 = 1;\n                } else {\n                    // 0x40b6fb\n                    v35 = __uflow(stream);\n                    v32 = v35;\n                    v33 = v35 != -1;\n                }\n                // 0x40b6e0\n                v36 = v33;\n                v37 = v32;\n            }\n            // 0x40b7cf\n            v18 = v21;\n            v19 = v20;\n            if (v37 == -1) {\n                // break -> 0x40b69f\n                break;\n            }\n            // 0x40b500\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40b500_2;\n        }\n        default: {\n            // 0x40b52f\n            ungetc(c, stream);\n            int32_t items_assigned = fscanf(stream, \"%50s %50s\", &v24, &v23); // 0x40b547\n            int64_t v38 = v27; // 0x40b54f\n            v18 = v21;\n            v19 = v20;\n            if (items_assigned < 2) {\n                // break -> 0x40b69f\n                break;\n            }\n            int64_t v39 = v38;\n            int32_t v40 = *(int32_t *)v39; // 0x40b558\n            int64_t v41 = v39 + 4; // 0x40b55a\n            int32_t v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80); // 0x40b566\n            uint32_t v43 = v42 & -0x7f7f7f80; // 0x40b568\n            v38 = v41;\n            while (v43 == 0) {\n                // 0x40b558\n                v39 = v38;\n                v40 = *(int32_t *)v39;\n                v41 = v39 + 4;\n                v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80);\n                v43 = v42 & -0x7f7f7f80;\n                v38 = v41;\n            }\n            int32_t v44 = (v42 & 0x8080) == 0 ? v43 / 0x10000 : v43; // 0x40b579\n            int64_t v45 = v39 + 6; // 0x40b57c\n            unsigned char v46 = (char)v44; // 0x40b586\n            int64_t v47 = -1 - v46 < v46 ? 4 : 3; // 0x40b58b\n            int64_t v48 = v26; // 0x40b58f\n            int64_t v49 = v48;\n            int32_t v50 = *(int32_t *)v49; // 0x40b592\n            int64_t v51 = v49 + 4; // 0x40b594\n            int32_t v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80); // 0x40b5a0\n            uint32_t v53 = v52 & -0x7f7f7f80; // 0x40b5a2\n            v48 = v51;\n            while (v53 == 0) {\n                // 0x40b592\n                v49 = v48;\n                v50 = *(int32_t *)v49;\n                v51 = v49 + 4;\n                v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80);\n                v53 = v52 & -0x7f7f7f80;\n                v48 = v51;\n            }\n            int64_t v54 = (v42 & 0x8080) == 0 ? v45 : v41; // 0x40b580\n            int64_t v55 = v54 - v47 - v27; // 0x40b58f\n            int32_t v56 = (v52 & 0x8080) == 0 ? v53 / 0x10000 : v53; // 0x40b5b8\n            int64_t v57 = (v52 & 0x8080) == 0 ? v49 + 6 : v51; // 0x40b5bf\n            unsigned char v58 = (char)v56; // 0x40b5c5\n            int64_t v59 = -1 - v58 < v58 ? 4 : 3; // 0x40b5c8\n            int64_t v60 = v57 - v59 - v26; // 0x40b5cc\n            int64_t v61 = v60 + v55; // 0x40b5d5\n            int64_t * v62; // 0x40b320\n            int64_t v63; // 0x40b320\n            if (v21 != 0) {\n                int64_t v64 = v61 + v21; // 0x40b70b\n                int64_t * mem = realloc((int64_t *)v20, (int32_t)v64 + 3); // 0x40b720\n                v63 = v64;\n                v62 = mem;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v61 + 3); // 0x40b5f1\n                v63 = v61;\n                v62 = mem2;\n            }\n            int64_t * v65 = v62;\n            if (v65 == NULL) {\n                // 0x40b82c\n                free((int64_t *)v20);\n                fclose(stream);\n                goto lab_0x40b4a4;\n            }\n            int64_t v66 = v63;\n            int64_t v67 = (int64_t)v65;\n            int64_t v68 = v66 + 2;\n            int64_t v69 = v55 + 1; // 0x40b618\n            int64_t v70 = v68 - v60 + v67;\n            int64_t v71 = -2 - v55 + v70; // 0x40b622\n            uint32_t v72 = (int32_t)v69; // 0x40b625\n            if (v72 >= 8) {\n                int32_t v73 = v24; // 0x40b734\n                *(int64_t *)v71 = (int64_t)v73;\n                int64_t v74 = (v69 & 0xffffffff) - 8;\n                int64_t v75 = *(int64_t *)(v74 + v27); // 0x40b73d\n                *(int64_t *)(v71 + v74) = v75;\n                int64_t v76 = v71 + 8 & -8; // 0x40b74e\n                int64_t v77 = v71 - v76; // 0x40b752\n                uint32_t v78 = (int32_t)(v77 + v69); // 0x40b75d\n                if (v78 >= 8) {\n                    int64_t v79 = v27 - v77; // 0x40b757\n                    uint32_t v80 = v78 & -8; // 0x40b779\n                    int64_t v81 = 0; // 0x40b320\n                    int64_t v82 = v81;\n                    int64_t v83 = v82 + 8; // 0x40b76e\n                    int64_t v84 = *(int64_t *)(v79 + v82); // 0x40b771\n                    *(int64_t *)(v82 + v76) = v84;\n                    v81 = v83 & 0xffffffff;\n                    while (v80 > (int32_t)v83) {\n                        // 0x40b76b\n                        v82 = v81;\n                        v83 = v82 + 8;\n                        v84 = *(int64_t *)(v79 + v82);\n                        *(int64_t *)(v82 + v76) = v84;\n                        v81 = v83 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v69 & 4) != 0) {\n                    int32_t v85 = v24; // 0x40b7ff\n                    *(int32_t *)v71 = v85;\n                    int64_t v86 = (v69 & 0xffffffff) - 4;\n                    int32_t v87 = *(int32_t *)(v86 + v27); // 0x40b807\n                    *(int32_t *)(v71 + v86) = v87;\n                } else {\n                    if (v72 != 0) {\n                        int32_t v88 = v24; // 0x40b63b\n                        *(char *)v71 = (char)v88;\n                        if ((v69 & 2) != 0) {\n                            int64_t v89 = (v69 & 0xffffffff) - 2;\n                            int16_t v90 = *(int16_t *)(v89 + v27); // 0x40b852\n                            *(int16_t *)(v71 + v89) = v90;\n                        }\n                    }\n                }\n            }\n            int64_t v91 = v60 + 1; // 0x40b64b\n            int64_t v92 = v70 - 1; // 0x40b64f\n            uint32_t v93 = (int32_t)v91; // 0x40b654\n            if (v93 >= 8) {\n                int32_t v94 = v23; // 0x40b782\n                *(int64_t *)v92 = (int64_t)v94;\n                int64_t v95 = (v91 & 0xffffffff) - 8;\n                int64_t v96 = *(int64_t *)(v95 + v26); // 0x40b78e\n                *(int64_t *)(v92 + v95) = v96;\n                int64_t v97 = v70 + 7 & -8; // 0x40b79c\n                int64_t v98 = v92 - v97; // 0x40b7a0\n                uint32_t v99 = (int32_t)(v98 + v91); // 0x40b7ab\n                if (v99 >= 8) {\n                    int64_t v100 = v26 - v98; // 0x40b7a5\n                    uint32_t v101 = v99 & -8; // 0x40b7c6\n                    int64_t v102 = 0; // 0x40b320\n                    int64_t v103 = v102;\n                    int64_t v104 = v103 + 8; // 0x40b7bb\n                    int64_t v105 = *(int64_t *)(v100 + v103); // 0x40b7be\n                    *(int64_t *)(v103 + v97) = v105;\n                    v102 = v104 & 0xffffffff;\n                    while (v101 > (int32_t)v104) {\n                        // 0x40b7b9\n                        v103 = v102;\n                        v104 = v103 + 8;\n                        v105 = *(int64_t *)(v100 + v103);\n                        *(int64_t *)(v103 + v97) = v105;\n                        v102 = v104 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v91 & 4) != 0) {\n                    int32_t v106 = v23; // 0x40b816\n                    *(int32_t *)v92 = v106;\n                    int64_t v107 = (v91 & 0xffffffff) - 4;\n                    int32_t v108 = *(int32_t *)(v107 + v26); // 0x40b81e\n                    *(int32_t *)(v92 + v107) = v108;\n                } else {\n                    if (v93 != 0) {\n                        int32_t v109 = v23; // 0x40b66a\n                        *(char *)v92 = (char)v109;\n                        if ((v91 & 2) != 0) {\n                            int64_t v110 = (v91 & 0xffffffff) - 2;\n                            int16_t v111 = *(int16_t *)(v110 + v26); // 0x40b865\n                            *(int16_t *)(v92 + v110) = v111;\n                        }\n                    }\n                }\n            }\n            uint64_t v112 = *v30; // 0x40b67e\n            uint64_t v113 = *v28; // 0x40b682\n            v114 = v68;\n            v115 = v112;\n            v116 = v67;\n            v12 = v68;\n            v10 = v67;\n            if (v112 < v113) {\n                goto lab_0x40b50e;\n            } else {\n                goto lab_0x40b68c;\n            }\n        }\n    }\n  lab_0x40b445:;\n    int64_t * mem3 = malloc(size); // 0x40b445\n    int64_t v117 = (int64_t)&g9; // 0x40b450\n    int64_t v118; // 0x40b320\n    int64_t path; // 0x40b320\n    if (mem3 == NULL) {\n        goto lab_0x40b422;\n    } else {\n        int64_t v119 = (int64_t)mem3; // 0x40b445\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v119) = 47;\n        path = v119;\n        v118 = v4;\n        goto lab_0x40b466;\n    }\n  lab_0x40b35a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x40b34d\n    char v120 = *v3; // 0x40b35a\n    int64_t v121; // 0x40b320\n    if (v120 == 0) {\n        // 0x40b3b4\n        v121 = str;\n        return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n    }\n    char v122 = v120; // 0x40b320\n    int64_t v123 = v7;\n    char * str2 = (char *)v123;\n    int64_t v124; // 0x40b320\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v125 = v123 + 1;\n        if (v122 == 42) {\n            // 0x40b3a0\n            v124 = v125;\n            if (*(char *)v125 == 0) {\n                goto lab_0x40b3a7;\n            }\n        }\n        int64_t str3 = v125 + (int64_t)strlen(str2); // 0x40b370\n        int64_t v126 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40b37d\n        char v127 = *(char *)v126; // 0x40b382\n        v122 = v127;\n        if (v127 == 0) {\n            // 0x40b3b4\n            v121 = str;\n            return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n        }\n        v123 = v126;\n        str2 = (char *)v123;\n    }\n    // 0x40b38b\n    v124 = v123 + 1;\n  lab_0x40b3a7:\n    // 0x40b3b4\n    v121 = v124 + (int64_t)strlen(str2);\n    return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n  lab_0x40b422:;\n    char * v128 = (char *)v117;\n    g92 = v128;\n    v3 = v128;\n    v7 = v117;\n    goto lab_0x40b35a;\n  lab_0x40b466:;\n    int64_t v129 = v118 + path; // 0x40b466\n    *(int64_t *)v129 = 0x2e74657372616863;\n    *(int16_t *)(v129 + 12) = 115;\n    *(int32_t *)(v129 + 8) = 0x61696c61;\n    if (open((char *)path, O_RDONLY) >= 0) {\n        // 0x40b4c1\n        int32_t fd; // 0x40b492\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40b7f2\n            close(fd);\n        } else {\n            int64_t v130 = (int64_t)stream; // 0x40b4cb\n            v26 = &v23;\n            v27 = &v24;\n            v30 = (int64_t *)(v130 + 8);\n            v28 = (int64_t *)(v130 + 16);\n            v25 = 0;\n            v22 = 0;\n            while (true) {\n              lab_0x40b500_2:;\n                int64_t v131 = v22;\n                int64_t v132 = v25;\n                uint64_t v133 = *v30; // 0x40b500\n                uint64_t v134 = *v28; // 0x40b504\n                v114 = v132;\n                v115 = v133;\n                v116 = v131;\n                v12 = v132;\n                v10 = v131;\n                if (v133 >= v134) {\n                    goto lab_0x40b68c;\n                } else {\n                    goto lab_0x40b50e;\n                }\n            }\n          lab_0x40b69f:;\n            int64_t v135 = v18;\n            fclose(stream);\n            if (v135 != 0) {\n                int64_t v136 = v19;\n                *(char *)(v136 + v135) = 0;\n            }\n        }\n    }\n    goto lab_0x40b4a4;\n  lab_0x40b40b:;\n    int64_t * mem4 = malloc(size2); // 0x40b40b\n    v117 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x40b4b1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v118 = v8;\n        goto lab_0x40b466;\n    } else {\n        goto lab_0x40b422;\n    }\n  lab_0x40b4a4:\n    // 0x40b4a4\n    free((int64_t *)path);\n    v117 = (int64_t)&g9;\n    goto lab_0x40b422;\n}\n"
        },
        {
            "funcName": "function_40b890",
            "funcStartAddr": "40b890",
            "funcEndAddr": "40b8fc",
            "decompiledFuncCode": "int64_t function_40b890(uint64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40b890\n    if (a1 > 0xffffffffffffffef) {\n        // 0x40b8ee\n        return 0;\n    }\n    int64_t * mem = malloc((int32_t)a1 + 16); // 0x40b89a\n    int64_t result = 0; // 0x40b8a7\n    if (mem != NULL) {\n        int64_t v1 = (int64_t)mem; // 0x40b89a\n        result = v1 + 16;\n        *(int32_t *)(v1 + 12) = 0x1415fb4a;\n        int64_t v2 = g93; // 0x40b8db\n        g93 = result;\n        *mem = v2;\n    }\n    // 0x40b8ee\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b900",
            "funcStartAddr": "40b900",
            "funcEndAddr": "40b986",
            "decompiledFuncCode": "int64_t function_40b900(int64_t a1) {\n    if (a1 == 0 || *(int32_t *)(a1 - 4) != 0x1415fb4a) {\n        // 0x40b90e\n        int64_t result; // 0x40b900\n        return result;\n    }\n    // 0x40b910\n    if (g93 == 0) {\n        // 0x40b90e\n        return 0;\n    }\n    int64_t * v1 = &g93; // 0x40b944\n    if (g93 == a1) {\n      lab_0x40b96c:;\n        int64_t * v2 = (int64_t *)(a1 - 16); // 0x40b96c\n        *v1 = *v2;\n        free(v2);\n        return &g100;\n    }\n    int64_t * v3 = (int64_t *)(g93 - 16);\n    int64_t result2 = *v3; // 0x40b958\n    while (result2 != 0) {\n        // 0x40b950\n        v1 = v3;\n        if (result2 == a1) {\n            goto lab_0x40b96c;\n        }\n        v3 = (int64_t *)(result2 - 16);\n        result2 = *v3;\n    }\n    // 0x40b90e\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b990",
            "funcStartAddr": "40b990",
            "funcEndAddr": "40b9b1",
            "decompiledFuncCode": "int64_t function_40b990(int64_t a1) {\n    int32_t wc = a1; // 0x40b993\n    int32_t result = wcwidth(wc); // 0x40b993\n    if (result < 0) {\n        // 0x40b9a0\n        return iswcntrl(wc) == 0;\n    }\n    // 0x40b99c\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b9c0",
            "funcStartAddr": "40b9c0",
            "funcEndAddr": "40ba16",
            "decompiledFuncCode": "int64_t function_40b9c0(int64_t a1, int64_t a2) {\n    // 0x40b9c0\n    *(int64_t *)a1 = a2;\n    char v1 = *(char *)(a2 + 16); // 0x40b9df\n    *(int64_t *)(a1 + 8) = *(int64_t *)(a2 + 8);\n    *(char *)(a1 + 16) = v1;\n    int64_t result = 0; // 0x40b9ec\n    if (v1 != 0) {\n        uint32_t v2 = *(int32_t *)(a2 + 20); // 0x40b9ee\n        *(int32_t *)(a1 + 20) = v2;\n        result = v2;\n    }\n    // 0x40b9f4\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ba20",
            "funcStartAddr": "40ba20",
            "funcEndAddr": "40ba37",
            "decompiledFuncCode": "int64_t function_40ba20(uint64_t a1) {\n    uint32_t v1 = *(int32_t *)((a1 / 8 & 28) + (int64_t)&g10); // 0x40ba2a\n    return (v1 >> (int32_t)a1 % 32) % 2;\n}\n"
        },
        {
            "funcName": "function_40ba40",
            "funcStartAddr": "40ba40",
            "funcEndAddr": "40bc6d",
            "decompiledFuncCode": "int64_t function_40ba40(int64_t str) {\n    // 0x40ba40\n    if ((uint32_t)__ctype_get_mb_cur_max() < 2) {\n        // 0x40ba5f\n        return strlen((char *)str);\n    }\n    int64_t ps = 0; // bp-84, 0x40ba7b\n    char v1 = 0; // 0x40ba89\n    int64_t v2 = str; // 0x40ba89\n    int64_t v3 = 0; // 0x40ba89\n    int32_t v4; // 0x40ba40\n    int64_t v5; // 0x40ba40\n    int32_t v6; // bp-52, 0x40ba40\n    int64_t v7; // 0x40ba40\n    int64_t str2; // 0x40ba40\n    char v8; // 0x40ba40\n    char v9; // 0x40ba40\n    while (true) {\n      lab_0x40bae1:\n        // 0x40bae1\n        v5 = v3;\n        str2 = v2;\n        v9 = v1;\n        if (v1 == 0) {\n            unsigned char v10 = *(char *)str2; // 0x40ba95\n            int32_t v11 = *(int32_t *)((int64_t)(4 * v10 / 32) + (int64_t)&g10); // 0x40baa0\n            if ((1 << (int32_t)(v10 % 32) & v11) == 0) {\n                int32_t v12 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40bb75\n                v9 = 1;\n                if (v12 == 0) {\n                    // break -> 0x40bbc1\n                    break;\n                }\n                goto lab_0x40bae7;\n            } else {\n                int32_t v13 = v10; // 0x40bac2\n                v6 = v13;\n                v4 = v13;\n                v8 = 0;\n                v7 = 1;\n                goto lab_0x40bac6;\n            }\n        } else {\n            goto lab_0x40bae7;\n        }\n    }\n    // 0x40bbc1\n    __assert_fail(\"mbsinit (&iter->state)\", \"mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x40bbda\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n    // 0x40bbf3\n    __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return function_401ab0();\n  lab_0x40bae7:;\n    char v14 = v9;\n    int64_t v15 = function_409040(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x40baf7\n    int64_t v16 = function_40b170(&v6, str2, v15); // 0x40bb0c\n    v1 = v14;\n    int64_t len = 1; // 0x40ba40\n    switch (v16) {\n        case -1: {\n            goto lab_0x40bace;\n        }\n        case -2: {\n            // 0x40bba8\n            v1 = v14;\n            len = strlen((char *)str2);\n            goto lab_0x40bace;\n        }\n        default: {\n            int64_t v17 = v16; // 0x40bb29\n            if (v16 == 0) {\n                // 0x40bb2b\n                if (*(char *)str2 != 0) {\n                    // 0x40bbda\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    // 0x40bbf3\n                    __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return function_401ab0();\n                }\n                // 0x40bb42\n                v17 = 1;\n                if (v6 != 0) {\n                    // 0x40bbf3\n                    __assert_fail(\"iter->cur.wc == 0\", \"mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return function_401ab0();\n                }\n            }\n            int32_t v18 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40bb58\n            v4 = v6;\n            v8 = v18 == 0 ? v14 : 0;\n            v7 = v17;\n            goto lab_0x40bac6;\n        }\n    }\n  lab_0x40bace:\n    // 0x40bace\n    v2 = len + str2;\n    v3 = v5 + 1;\n    goto lab_0x40bae1;\n  lab_0x40bac6:;\n    int64_t result = v5; // 0x40bacc\n    v1 = v8;\n    len = v7;\n    if (v4 == 0) {\n        // 0x40ba5f\n        return result;\n    }\n    goto lab_0x40bace;\n}\n"
        },
        {
            "funcName": "function_40bc70",
            "funcStartAddr": "40bc70",
            "funcEndAddr": "40bc71",
            "decompiledFuncCode": "int64_t function_40bc70(void) {\n    // 0x40bc70\n    int64_t result; // 0x40bc70\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bc80",
            "funcStartAddr": "40bc80",
            "funcEndAddr": "40bc98",
            "decompiledFuncCode": "int64_t function_40bc80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bc80\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_40bc98",
            "funcStartAddr": "40bc98",
            "funcEndAddr": "40bcb8",
            "decompiledFuncCode": "int64_t function_40bc98(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x40bca2\n    while (*(int64_t *)v1 != -1) {\n        // 0x40bca3\n        v1 -= 8;\n    }\n    // 0x40bcb4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_xargs.elf"
}