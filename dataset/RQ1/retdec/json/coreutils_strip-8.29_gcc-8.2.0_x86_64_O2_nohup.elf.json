{
    "funcInfo": [
        {
            "funcName": "function_401750",
            "funcStartAddr": "401750",
            "funcEndAddr": "401755",
            "decompiledFuncCode": "int64_t function_401750(void) {\n    // 0x401750\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401755",
            "funcStartAddr": "401755",
            "funcEndAddr": "40175a",
            "decompiledFuncCode": "int64_t function_401755(void) {\n    // 0x401755\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40175a",
            "funcStartAddr": "40175a",
            "funcEndAddr": "40175f",
            "decompiledFuncCode": "int64_t function_40175a(void) {\n    // 0x40175a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40175f",
            "funcStartAddr": "40175f",
            "funcEndAddr": "401764",
            "decompiledFuncCode": "int64_t function_40175f(void) {\n    // 0x40175f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401764",
            "funcStartAddr": "401764",
            "funcEndAddr": "401769",
            "decompiledFuncCode": "int64_t function_401764(void) {\n    // 0x401764\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401769",
            "funcStartAddr": "401769",
            "funcEndAddr": "40176e",
            "decompiledFuncCode": "int64_t function_401769(void) {\n    // 0x401769\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401770",
            "funcStartAddr": "401770",
            "funcEndAddr": "401d83",
            "decompiledFuncCode": "int64_t function_401770(int64_t a1, int64_t a2) {\n    char * exec_argv[1]; // 0x40196c\n    uint64_t v1 = a1 & 0xffffffff; // 0x401778\n    function_4024f0(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t result = getenv(\"POSIXLY_CORRECT\") == NULL ? 125 : 127; // 0x4017cc\n    int32_t status = result; // 0x4017cf\n    g20 = status;\n    int64_t v2; // 0x401770\n    function_406140(0x4021d0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    function_4023e0(v1, a2, \"nohup\", \"GNU coreutils\", (int64_t)g19, 0x401e70);\n    if ((int32_t)function_4057f0(v1, a2, &g2, &g3, 0, 0x401e70) != -1) {\n        // 0x401d3a\n        function_401e70(result);\n        // UNREACHABLE\n    }\n    // 0x401828\n    if (v1 <= (int64_t)*(int32_t *)0x60925c) {\n        // 0x401d1b\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x401d3a\n        function_401e70(result);\n        // UNREACHABLE\n    }\n    uint32_t v3 = isatty(0); // 0x401837\n    int32_t v4 = isatty(1); // 0x401844\n    int32_t v5; // 0x401770\n    int64_t v6; // 0x401770\n    int64_t v7; // 0x401770\n    int64_t v8; // 0x401770\n    int64_t v9; // 0x401770\n    char v10; // 0x401770\n    char v11; // 0x401770\n    if (v4 == 0) {\n        // 0x4019ab\n        if (*__errno_location() != 9) {\n            goto lab_0x401854;\n        } else {\n            int32_t v12 = isatty(2); // 0x4019c4\n            int64_t v13 = (int64_t)(v12 != 0) | 0x401e00; // 0x4019d3\n            v10 = 1;\n            v8 = v13;\n            v5 = v12;\n            v6 = 1;\n            v11 = 1;\n            v9 = v13;\n            v7 = 1;\n            if (v3 == 0) {\n                goto lab_0x401aa7;\n            } else {\n                goto lab_0x401a6f;\n            }\n        }\n    } else {\n        goto lab_0x401854;\n    }\n  lab_0x401854:;\n    int32_t v14 = isatty(2); // 0x401859\n    int64_t v15 = (int64_t)(v14 != 0) | 0x401e00; // 0x401863\n    v10 = 0;\n    v8 = v15;\n    v5 = v14;\n    v6 = 0;\n    char v16; // 0x401770\n    int64_t v17; // 0x401770\n    if (v3 != 0) {\n        goto lab_0x401a6f;\n    } else {\n        // 0x401870\n        if (v4 == 0) {\n            // 0x401870\n            v16 = v14 != 0;\n            v17 = v3;\n            goto lab_0x4019e8;\n        } else {\n            goto lab_0x40187c;\n        }\n    }\n  lab_0x401a6f:\n    // 0x401a6f\n    if ((int32_t)function_402270(0, \"/dev/null\", 1, 0) < 0) {\n        // 0x401c79\n        error(status, *__errno_location(), dcgettext(NULL, \"failed to render standard input unusable\", 5));\n    }\n    char fd4; // 0x401770\n    if ((v5 || v4) == 0) {\n        // 0x401c14\n        error(0, (int32_t)\"ignoring input\" ^ (int32_t)\"ignoring input\", dcgettext(NULL, \"ignoring input\", 5));\n        fd4 = 2;\n        goto lab_0x40193c;\n    } else {\n        // 0x401a9e\n        v11 = v10;\n        v9 = v8 % 256;\n        v7 = v6;\n        if (v4 != 0) {\n            goto lab_0x40187c;\n        } else {\n            goto lab_0x401aa7;\n        }\n    }\n  lab_0x401aa7:;\n    char v18 = v9;\n    v16 = v18;\n    v17 = v7;\n    int64_t fd; // 0x401770\n    int64_t v19; // 0x401770\n    int32_t cmask; // 0x401770\n    char v20; // 0x401770\n    if ((v11 & v18) == 0) {\n        goto lab_0x4019e8;\n    } else {\n        // 0x401ab9\n        cmask = umask(-385);\n        v20 = 1;\n        fd = open(\"nohup.out\", 1089);\n        v19 = v7;\n        goto lab_0x4018b6;\n    }\n  lab_0x40187c:\n    // 0x40187c\n    cmask = umask(-385);\n    v20 = v15;\n    fd = function_402270(1, \"nohup.out\", 1089, 384) & 0xffffffff;\n    v19 = 0;\n    goto lab_0x4018b6;\n  lab_0x4019e8:\n    // 0x4019e8\n    fd4 = 2;\n    int64_t v37; // 0x401770\n    int64_t v38; // 0x401770\n    char v36; // 0x401770\n    if (v16 == 0) {\n        goto lab_0x40193c;\n    } else {\n        // 0x4019f1\n        v36 = function_404960(2, 1030, 3, 0);\n        v37 = 1;\n        v38 = v17;\n        goto lab_0x401a11;\n    }\n  lab_0x40193c:\n    // 0x40193c\n    if ((*(char *)g32 & 32) != 0) {\n        // 0x40199a\n        return result;\n    }\n    // 0x401948\n    signal(SIGHUP, SIG_IGN);\n    int64_t v41 = 8 * (int64_t)g28 + a2; // 0x401960\n    int64_t * file = (int64_t *)v41; // 0x401965\n    exec_argv[0] = (char *)v41;\n    execvp((char *)*file, exec_argv);\n    int32_t err_num2 = *__errno_location(); // 0x40197f\n    int64_t v42 = err_num2 == 2 ? 127 : 126; // 0x401989\n    int64_t result2 = v42; // 0x401994\n    if (dup2((int32_t)fd4, 2) == 2) {\n        // 0x401c40\n        function_403ec0(4, *file);\n        error(0, err_num2, dcgettext(NULL, \"failed to run command %s\", 5));\n        result2 = v42;\n    }\n    // 0x40199a\n    return result2;\n  lab_0x4018b6:;\n    int64_t * v21 = NULL; // 0x4018b9\n    int64_t v22 = fd; // 0x4018b9\n    int64_t v23 = (int64_t)\"nohup.out\"; // 0x4018b9\n    int64_t v24; // 0x401770\n    int64_t v25; // 0x401770\n    int64_t v26; // 0x401770\n    int32_t err_num3; // 0x401770\n    if ((int32_t)fd < 0) {\n        int32_t * v27 = __errno_location(); // 0x401ae5\n        int32_t err_num = *v27; // 0x401af4\n        if (getenv(\"HOME\") == NULL) {\n            // 0x401ce0\n            function_403ec0(4, (int64_t)\"nohup.out\");\n            error(0, err_num, dcgettext(NULL, \"failed to open %s\", 5));\n            // 0x40199a\n            return result;\n        }\n        int64_t v28 = function_4022e0(); // 0x401b12\n        if (v4 != 0) {\n            int64_t v29 = function_402270(1, (char *)v28, 1089, 384); // 0x401b86\n            if ((int32_t)v29 >= 0) {\n                // 0x401b74\n                v25 = 0x100000000000000 * v28 >> 56;\n                v26 = v29 & 0xffffffff;\n                goto lab_0x401b42;\n            } else {\n                // 0x401b92\n                function_403ec0(4, (int64_t)\"nohup.out\");\n                error(0, err_num, dcgettext(NULL, \"failed to open %s\", 5));\n                if ((char)v28 == 0) {\n                    // 0x40199a\n                    return result;\n                }\n                // 0x401b92\n                v24 = 0x100000000000000 * v28 >> 56;\n                err_num3 = *v27;\n                goto lab_0x401bdb;\n            }\n        } else {\n            int64_t path = 0x100000000000000 * v28 >> 56;\n            int32_t fd2 = open((char *)path, 1089); // 0x401b32\n            v25 = path;\n            v26 = fd2;\n            if (fd2 < 0) {\n                // 0x401d41\n                function_403ec0(4, (int64_t)\"nohup.out\");\n                error(0, err_num, dcgettext(NULL, \"failed to open %s\", 5));\n                v24 = path;\n                err_num3 = *v27;\n                goto lab_0x401bdb;\n            } else {\n                goto lab_0x401b42;\n            }\n        }\n    } else {\n        goto lab_0x4018cd;\n    }\n  lab_0x4018cd:\n    // 0x4018cd\n    umask(cmask);\n    int64_t v30 = function_403ec0(4, v23); // 0x4018e5\n    char * v31 = v3 == 0 ? \"appending output to %s\" : \"ignoring input and appending output to %s\"; // 0x401907\n    error(0, 0, dcgettext(NULL, v31, 5));\n    free(v21);\n    fd4 = 2;\n    int64_t v32; // 0x401770\n    int64_t v33; // 0x401770\n    char v34; // 0x401770\n    if (v20 != 0) {\n        char v35 = function_404960(2, 1030, 3, 0x100000000 * v30 >> 32); // 0x401b62\n        v36 = v35;\n        v37 = v22;\n        v38 = v19;\n        v34 = v35;\n        v32 = v22;\n        v33 = v19;\n        if (v4 != 0) {\n            goto lab_0x401a3c;\n        } else {\n            goto lab_0x401a11;\n        }\n    } else {\n        goto lab_0x40193c;\n    }\n  lab_0x401a11:;\n    char * v39 = v3 == 0 ? \"redirecting stderr to stdout\" : \"ignoring input and redirecting stderr to stdout\"; // 0x401a29\n    error(0, 0, dcgettext(NULL, v39, 5));\n    v34 = v36;\n    v32 = v37;\n    v33 = v38;\n    goto lab_0x401a3c;\n  lab_0x401a3c:;\n    char v40 = v34;\n    int32_t fd3 = v32; // 0x401a44\n    if (dup2(fd3, 2) < 0) {\n        // 0x401cb4\n        error(status, *__errno_location(), dcgettext(NULL, \"failed to redirect standard error\", 5));\n    }\n    // 0x401a51\n    fd4 = v40;\n    if ((int32_t)v33 != 0) {\n        // 0x401a5a\n        close(fd3);\n        fd4 = v40;\n    }\n    goto lab_0x40193c;\n  lab_0x401b42:\n    // 0x401b42\n    v21 = (int64_t *)v25;\n    v22 = v26;\n    v23 = v25;\n    goto lab_0x4018cd;\n  lab_0x401bdb:\n    // 0x401bdb\n    function_403ec0(4, v24);\n    error(0, err_num3, dcgettext(NULL, \"failed to open %s\", 5));\n    // 0x40199a\n    return result;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401d90",
            "funcEndAddr": "401dbb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401d90\n    int64_t v1; // 0x401d90\n    __libc_start_main(0x401770, (int32_t)a4, (char **)&v1, (void (*)())0x4060d0, (void (*)())0x406130, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dbb",
            "funcStartAddr": "401dbb",
            "funcEndAddr": "401dda",
            "decompiledFuncCode": "int64_t function_401dbb(void) {\n    // 0x401dbb\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_401dda",
            "funcStartAddr": "401dda",
            "funcEndAddr": "401e11",
            "decompiledFuncCode": "int64_t function_401dda(void) {\n    // 0x401dda\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401e11",
            "funcStartAddr": "401e11",
            "funcEndAddr": "401e68",
            "decompiledFuncCode": "int64_t function_401e11(void) {\n    // 0x401e11\n    if (g33 != 0) {\n        // 0x401e67\n        int64_t result; // 0x401e11\n        return result;\n    }\n    int64_t v1 = g34; // 0x401e44\n    int64_t result2; // 0x401e56\n    if (g34 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401e56\n        result2 = function_401dbb();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401e46\n        v1++;\n    }\n    // 0x401e3a\n    g34 = v1;\n    // 0x401e56\n    result2 = function_401dbb();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401e68",
            "funcStartAddr": "401e68",
            "funcEndAddr": "401e6d",
            "decompiledFuncCode": "int64_t function_401e68(void) {\n    // 0x401e68\n    return function_401dda();\n}\n"
        },
        {
            "funcName": "function_401e70",
            "funcStartAddr": "401e70",
            "funcEndAddr": "4021ad",
            "decompiledFuncCode": "int64_t function_401e70(int64_t a1) {\n    int32_t status = a1; // 0x401e86\n    if (status != 0) {\n        // 0x401e8a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401eaf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401eb6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s COMMAND [ARG]...\\n  or:  %s OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Run COMMAND, ignoring hangup signals.\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    __printf_chk(1, dcgettext(NULL, \"\\nIf standard input is a terminal, redirect it from an unreadable file.\\nIf standard output is a terminal, append output to 'nohup.out' if possible,\\n'$HOME/nohup.out' otherwise.\\nIf standard error is a terminal, redirect it to standard output.\\nTo save output to FILE, use '%s COMMAND > FILE'.\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x401f8f\n    bool v2; // 0x401e70\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402010\n    int64_t v6 = *(int64_t *)v5; // 0x402014\n    int64_t v7 = 6; // 0x40201a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"nohup\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402026\n        char v11 = *(char *)v9; // 0x402026\n        char v12 = v11; // 0x402026\n        bool v13 = false; // 0x402026\n        while (v10 == v11) {\n            // 0x40201c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402026\n            int64_t v15 = v8 + v3; // 0x402026\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402032\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x402032\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402144;\n        } else {\n            // 0x40212e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402183\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402094;\n            } else {\n                goto lab_0x402144;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402094;\n        } else {\n            // 0x40207a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402183\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402094;\n            } else {\n                goto lab_0x402094;\n            }\n        }\n    }\n  lab_0x402144:\n    // 0x402144\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4020d4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401eaf\n    exit(status);\n    // UNREACHABLE\n  lab_0x402094:\n    // 0x402094\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4020d4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401eaf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021b0",
            "funcStartAddr": "4021b0",
            "funcEndAddr": "4021b8",
            "decompiledFuncCode": "int64_t function_4021b0(int64_t a1) {\n    // 0x4021b0\n    g36 = a1;\n    int64_t result; // 0x4021b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4021c0",
            "funcStartAddr": "4021c0",
            "funcEndAddr": "4021c8",
            "decompiledFuncCode": "int64_t function_4021c0(int64_t a1) {\n    // 0x4021c0\n    g35 = a1;\n    int64_t result; // 0x4021c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4021d0",
            "funcStartAddr": "4021d0",
            "funcEndAddr": "40226e",
            "decompiledFuncCode": "int64_t function_4021d0(void) {\n    // 0x4021d0\n    int32_t * err_num; // 0x4021e6\n    if ((int32_t)function_4058f0((int64_t)g30) == 0) {\n        goto lab_0x4021fc;\n    } else {\n        // 0x4021e6\n        err_num = __errno_location();\n        if (g35 == 0) {\n            goto lab_0x402213;\n        } else {\n            // 0x4021f7\n            if (*err_num != 32) {\n                goto lab_0x402213;\n            } else {\n                goto lab_0x4021fc;\n            }\n        }\n    }\n  lab_0x4021fc:;\n    int64_t result = function_4058f0((int64_t)g32); // 0x402203\n    if ((int32_t)result == 0) {\n        // 0x40220c\n        return result;\n    }\n    // 0x40224e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x402213:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40221f\n    if (g36 == 0) {\n        // 0x402259\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402233\n        error(0, *err_num, \"%s: %s\", (char *)function_403f60((int64_t)g36), v1);\n    }\n    // 0x40224e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402270",
            "funcStartAddr": "402270",
            "funcEndAddr": "4022da",
            "decompiledFuncCode": "int64_t function_402270(int64_t a1, char * path, int64_t oflag, int64_t a4) {\n    int32_t fd = open(path, (int32_t)oflag); // 0x402285\n    int32_t fd2 = a1; // 0x40228c\n    if (fd != fd2 != fd >= 0) {\n        // 0x402294\n        return fd;\n    }\n    uint32_t result = dup2(fd, fd2); // 0x4022ac\n    int32_t * v1 = __errno_location(); // 0x4022b4\n    close(fd);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4022e0",
            "funcStartAddr": "4022e0",
            "funcEndAddr": "4022f8",
            "decompiledFuncCode": "int64_t function_4022e0(void) {\n    // 0x4022e0\n    int64_t v1; // 0x4022e0\n    int64_t result = function_402300(v1, v1, v1); // 0x4022e4\n    if (result != 0) {\n        // 0x4022ee\n        return result;\n    }\n    // 0x4022f3\n    function_404920(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402300",
            "funcStartAddr": "402300",
            "funcEndAddr": "4023d9",
            "decompiledFuncCode": "int64_t function_402300(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_405950(a1, a2); // 0x402318\n    int64_t v2 = function_4059b0(v1); // 0x402323\n    int64_t v3 = 0; // 0x402337\n    if (v2 != 0) {\n        // 0x402339\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x402350\n    int64_t v4 = a2; // 0x402350\n    int64_t v5; // 0x402300\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x4023c8\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x402331\n    int32_t len = strlen((char *)str); // 0x402355\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x402365\n    if (mem == NULL) {\n        // 0x4023b1\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x40237b\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x402387\n    if (a3 != 0) {\n        // 0x402390\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x4023a3\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x4023b1\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_4023e0",
            "funcStartAddr": "4023e0",
            "funcEndAddr": "4024e2",
            "decompiledFuncCode": "int64_t function_4023e0(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x4023e0\n    int64_t v1; // 0x4023e0\n    if ((char)v1 != 0) {\n        // 0x4023f3\n        int128_t v2; // 0x4023e0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g27; // 0x40242a\n    g27 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x40243f\n        g27 = v3;\n        g28 = 0;\n        int64_t result; // 0x4023e0\n        return result;\n    }\n    int64_t result2 = function_4057f0(a1, a2, &g2, (int64_t *)&g4, 0, a6); // 0x402479\n    int32_t v4 = result2; // 0x40247e\n    switch (v4) {\n        default: {\n            // 0x402488\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x4024aa\n                function_404530((int64_t)g30, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x40243f\n            g27 = v3;\n            g28 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4024f0",
            "funcStartAddr": "4024f0",
            "funcEndAddr": "402589",
            "decompiledFuncCode": "int64_t function_4024f0(int64_t str) {\n    // 0x4024f0\n    if (str == 0) {\n        // 0x402569\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4024fe\n    int64_t result = (int64_t)found_char_pos; // 0x4024fe\n    if (found_char_pos == NULL) {\n        // 0x402559\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402508\n    if (v1 - str < 7) {\n        // 0x402559\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x402518\n    bool v2; // 0x4024f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4024f0\n    int64_t v5 = result - 6; // 0x4024f0\n    int64_t v6 = 7; // 0x402526\n    unsigned char v7 = *(char *)v5; // 0x402526\n    char v8 = *(char *)v4; // 0x402526\n    char v9 = v8; // 0x402526\n    bool v10 = false; // 0x402526\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402530\n    int64_t v13 = v1; // 0x402530\n    int64_t v14 = 3; // 0x402530\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402559\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402542\n    char v16 = *(char *)v12; // 0x402542\n    char v17 = v16; // 0x402542\n    bool v18 = false; // 0x402542\n    while (v15 == v16) {\n        // 0x402532\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40254c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40254e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x402559\n    g37 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402590",
            "funcStartAddr": "402590",
            "funcEndAddr": "402682",
            "decompiledFuncCode": "int64_t function_402590(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4025a4\n    int64_t result = (int64_t)v1; // 0x4025a4\n    if (result != a1) {\n        // 0x4025b1\n        return result;\n    }\n    int64_t v2 = function_405a40(); // 0x4025c0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402676\n    if (v3 == 85) {\n        // 0x4025d0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402668\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x4025fe\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x40260b\n        // 0x4025b1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402668\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40264d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40265a\n    // 0x4025b1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402690",
            "funcStartAddr": "402690",
            "funcEndAddr": "4026e7",
            "decompiledFuncCode": "int64_t function_402690(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402690\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4026d8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4026e7",
            "funcStartAddr": "4026e7",
            "funcEndAddr": "4038b1",
            "decompiledFuncCode": "int64_t function_4026e7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402731\n    int64_t v3 = 0; // 0x402731\n    int64_t v4; // 0x4026e7\n    int64_t v5; // 0x4026e7\n    int64_t v6; // 0x4026e7\n    int64_t v7; // 0x4026e7\n    int64_t v8; // 0x4026e7\n    int64_t v9; // 0x4026e7\n    int64_t v10; // 0x4026e7\n    int64_t v11; // 0x4026e7\n    int64_t v12; // 0x4026e7\n    int64_t v13; // 0x4026e7\n    int64_t v14; // 0x4026e7\n    int64_t v15; // 0x4026e7\n    int64_t v16; // 0x4026e7\n    int64_t v17; // 0x4026e7\n    int64_t v18; // 0x4026e7\n    int64_t result; // 0x4026e7\n    int64_t v19; // 0x4026e7\n    int32_t wc; // bp+132, 0x4026e7\n    int64_t ps; // bp+136, 0x4026e7\n    char v20; // 0x402ca0\n    int64_t v21; // 0x402ca0\n    int64_t v22; // 0x403048\n    int64_t v23; // 0x4026e7\n    int64_t v24; // 0x403067\n    int32_t v25; // 0x4026e7\n    while (true) {\n      lab_0x402738_2:\n        // 0x402738\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4026e7\n        int64_t v27; // 0x40276c\n        while (true) {\n          lab_0x402738:\n            // 0x402738\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402743\n            if (v15 == -1) {\n                // 0x402745\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402753\n            if (v28) {\n                // break (via goto) -> 0x402eb8\n                goto lab_0x402eb8;\n            }\n            // 0x40275c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x402d4b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402891;\n                    }\n                    // 0x40316d\n                    v26 = v5 + 1;\n                    goto lab_0x402738;\n                }\n                case 7: {\n                    goto lab_0x402891;\n                }\n                case 8: {\n                    goto lab_0x402891;\n                }\n                case 9: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402891;\n                }\n                case 12: {\n                    goto lab_0x402891;\n                }\n                case 13: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40285d;\n                }\n                case 36: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402891;\n                }\n                case 38: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402891;\n                }\n                case 44: {\n                    goto lab_0x402891;\n                }\n                case 45: {\n                    goto lab_0x402891;\n                }\n                case 46: {\n                    goto lab_0x402891;\n                }\n                case 47: {\n                    goto lab_0x402891;\n                }\n                case 48: {\n                    goto lab_0x402891;\n                }\n                case 49: {\n                    goto lab_0x402891;\n                }\n                case 50: {\n                    goto lab_0x402891;\n                }\n                case 51: {\n                    goto lab_0x402891;\n                }\n                case 52: {\n                    goto lab_0x402891;\n                }\n                case 53: {\n                    goto lab_0x402891;\n                }\n                case 54: {\n                    goto lab_0x402891;\n                }\n                case 55: {\n                    goto lab_0x402891;\n                }\n                case 56: {\n                    goto lab_0x402891;\n                }\n                case 57: {\n                    goto lab_0x402891;\n                }\n                case 58: {\n                    goto lab_0x402891;\n                }\n                case 59: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402891;\n                }\n                case 66: {\n                    goto lab_0x402891;\n                }\n                case 67: {\n                    goto lab_0x402891;\n                }\n                case 68: {\n                    goto lab_0x402891;\n                }\n                case 69: {\n                    goto lab_0x402891;\n                }\n                case 70: {\n                    goto lab_0x402891;\n                }\n                case 71: {\n                    goto lab_0x402891;\n                }\n                case 72: {\n                    goto lab_0x402891;\n                }\n                case 73: {\n                    goto lab_0x402891;\n                }\n                case 74: {\n                    goto lab_0x402891;\n                }\n                case 75: {\n                    goto lab_0x402891;\n                }\n                case 76: {\n                    goto lab_0x402891;\n                }\n                case 77: {\n                    goto lab_0x402891;\n                }\n                case 78: {\n                    goto lab_0x402891;\n                }\n                case 79: {\n                    goto lab_0x402891;\n                }\n                case 80: {\n                    goto lab_0x402891;\n                }\n                case 81: {\n                    goto lab_0x402891;\n                }\n                case 82: {\n                    goto lab_0x402891;\n                }\n                case 83: {\n                    goto lab_0x402891;\n                }\n                case 84: {\n                    goto lab_0x402891;\n                }\n                case 85: {\n                    goto lab_0x402891;\n                }\n                case 86: {\n                    goto lab_0x402891;\n                }\n                case 87: {\n                    goto lab_0x402891;\n                }\n                case 88: {\n                    goto lab_0x402891;\n                }\n                case 89: {\n                    goto lab_0x402891;\n                }\n                case 90: {\n                    goto lab_0x402891;\n                }\n                case 91: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402891;\n                }\n                case 94: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402891;\n                }\n                case 96: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402891;\n                }\n                case 98: {\n                    goto lab_0x402891;\n                }\n                case 99: {\n                    goto lab_0x402891;\n                }\n                case 100: {\n                    goto lab_0x402891;\n                }\n                case 101: {\n                    goto lab_0x402891;\n                }\n                case 102: {\n                    goto lab_0x402891;\n                }\n                case 103: {\n                    goto lab_0x402891;\n                }\n                case 104: {\n                    goto lab_0x402891;\n                }\n                case 105: {\n                    goto lab_0x402891;\n                }\n                case 106: {\n                    goto lab_0x402891;\n                }\n                case 107: {\n                    goto lab_0x402891;\n                }\n                case 108: {\n                    goto lab_0x402891;\n                }\n                case 109: {\n                    goto lab_0x402891;\n                }\n                case 110: {\n                    goto lab_0x402891;\n                }\n                case 111: {\n                    goto lab_0x402891;\n                }\n                case 112: {\n                    goto lab_0x402891;\n                }\n                case 113: {\n                    goto lab_0x402891;\n                }\n                case 114: {\n                    goto lab_0x402891;\n                }\n                case 115: {\n                    goto lab_0x402891;\n                }\n                case 116: {\n                    goto lab_0x402891;\n                }\n                case 117: {\n                    goto lab_0x402891;\n                }\n                case 118: {\n                    goto lab_0x402891;\n                }\n                case 119: {\n                    goto lab_0x402891;\n                }\n                case 120: {\n                    goto lab_0x402891;\n                }\n                case 121: {\n                    goto lab_0x402891;\n                }\n                case 122: {\n                    goto lab_0x402891;\n                }\n                case 123: {\n                    goto lab_0x402835;\n                }\n                case 124: {\n                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402835;\n                }\n                case 126: {\n                    goto lab_0x40285d;\n                }\n                default: {\n                    goto lab_0x402c35;\n                }\n            }\n        }\n      lab_0x402c35:\n        if (v23 != 1) {\n            // 0x402fa0\n            ps = 0;\n            int64_t len = v15; // 0x402fb0\n            if (v15 == -1) {\n                // 0x402fb2\n                len = strlen((char *)str);\n            }\n            // 0x402fde\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40303f:\n                // 0x40303f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403044\n                int64_t v30 = v29 + str;\n                v24 = function_405870(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4035ba_2;\n                    }\n                    case -1: {\n                        goto lab_0x4035ba_2;\n                    }\n                    case -2: {\n                        // 0x40369d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4036d7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4036da\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4036e7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4036e0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4035ba\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4035ba_2;\n                    }\n                    case 1: {\n                        goto lab_0x403010;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4030bc\n                        char v34 = *(char *)v33; // 0x4030cd\n                        unsigned char v35; // 0x4026e7\n                        if (v34 < 125) {\n                            // 0x4030d8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4030ef\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4030c0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4030cd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4030d8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4030ef\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4030c0\n                            v33++;\n                        }\n                        goto lab_0x403010;\n                    }\n                }\n            }\n            goto lab_0x4035ba_2;\n        } else {\n            // 0x402c84\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402891;\n        }\n    }\n  lab_0x402eb8:\n    // 0x402eb8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4037ba\n        if (v8 > result) {\n            // 0x4037c3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402ae7\n        return result;\n    }\n    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402891:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4028a0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402aaa_2;\n        }\n    }\n    int64_t v39 = result; // 0x4029a1\n    char v40 = v20; // 0x4029a1\n    int64_t v41 = v38; // 0x4029a1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4029a1\n    int64_t v43 = v36; // 0x4029a1\n    goto lab_0x40291d;\n  lab_0x402aaa_2:\n    // 0x402ae7\n    return function_402690(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4035ba_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402891;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40318e\n        int64_t v50 = v5 + 1; // 0x403271\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403278\n        char v52 = v20; // 0x403278\n        int64_t v53 = result; // 0x403278\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403241\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403245\n            int64_t v56 = v54 + 1; // 0x40324a\n            int64_t v57 = v51 + 1; // 0x403271\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40323c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403241\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403245\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40291d;\n    }\n  lab_0x403010:\n    // 0x403010\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40302f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403032\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4035ba\n        goto lab_0x4035ba_2;\n    }\n    goto lab_0x40303f;\n  lab_0x40285d:\n    // 0x40285d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402aaa_2;\n    }\n    goto lab_0x402891;\n  lab_0x402835:;\n    bool v60 = v15 == 1; // 0x402840\n    if (v15 == -1) {\n        // 0x402842\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40284e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402891;\n    } else {\n        goto lab_0x40285d;\n    }\n  lab_0x40291d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402922\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402926\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402738_2;\n}\n"
        },
        {
            "funcName": "function_4038c0",
            "funcStartAddr": "4038c0",
            "funcEndAddr": "403a5e",
            "decompiledFuncCode": "int64_t function_4038c0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4038c2\n    int32_t * v3 = __errno_location(); // 0x4038dc\n    int64_t v4 = (int64_t)g22; // 0x4038e1\n    int32_t v5 = *v3; // 0x4038eb\n    int64_t v6 = v4; // 0x403901\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403a59\n            function_404920(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403910\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403917\n        int64_t v9; // 0x4038c0\n        if (g22 == &g23) {\n            int64_t v10 = function_404730(0, v8); // 0x403a3a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x403a3f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404730(v4, v8); // 0x40392b\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x40393a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x40393a\n        int32_t v14 = v7; // 0x403941\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403971\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40397b\n    int64_t * v17 = (int64_t *)v15; // 0x40397e\n    uint64_t v18 = *v17; // 0x40397e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403981\n    int64_t result = *v19; // 0x403981\n    int64_t v20; // 0x4038c0\n    uint64_t v21 = function_402690(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4039a4\n    if (v18 > v21) {\n        // 0x403a1b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4039b7\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x4039c7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4046d0(v22); // 0x4039e1\n    *v19 = result2;\n    int64_t v23; // 0x4038c0\n    function_402690(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403a1b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403a60",
            "funcStartAddr": "403a60",
            "funcEndAddr": "403a94",
            "decompiledFuncCode": "int64_t function_403a60(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403a67\n    int64_t result = function_4048d0(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x403a86\n    return result;\n}\n"
        },
        {
            "funcName": "function_403aa0",
            "funcStartAddr": "403aa0",
            "funcEndAddr": "403aaf",
            "decompiledFuncCode": "int64_t function_403aa0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x403aac\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ab0",
            "funcStartAddr": "403ab0",
            "funcEndAddr": "403abf",
            "decompiledFuncCode": "int64_t function_403ab0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403ab8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403af3",
            "decompiledFuncCode": "int64_t function_403ac0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x403ad9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403ade\n    uint32_t v3 = *v2; // 0x403ade\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403ae2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403b13",
            "decompiledFuncCode": "int64_t function_403b00(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x403b0c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403b20",
            "funcStartAddr": "403b20",
            "funcEndAddr": "403b4b",
            "decompiledFuncCode": "int64_t function_403b20(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403b28\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403b45\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403b3c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403b50",
            "funcStartAddr": "403b50",
            "funcEndAddr": "403bc2",
            "decompiledFuncCode": "int64_t function_403b50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x403b72\n    int32_t * v2 = __errno_location(); // 0x403b7b\n    uint32_t v3 = *(int32_t *)v1; // 0x403b9b\n    int64_t result = function_402690(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403baa\n    return result;\n}\n"
        },
        {
            "funcName": "function_403bd0",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "403cb1",
            "decompiledFuncCode": "int64_t function_403bd0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x403bf2\n    int32_t * v2 = __errno_location(); // 0x403bf8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403c17\n    int32_t * v4 = (int32_t *)v1; // 0x403c1a\n    int64_t v5 = function_402690(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403c35\n    int64_t v6 = v5 + 1; // 0x403c3a\n    int64_t result = function_4046d0(v6); // 0x403c4f\n    function_402690(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403c94\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403c9d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403cc0",
            "funcStartAddr": "403cc0",
            "funcEndAddr": "403cca",
            "decompiledFuncCode": "int64_t function_403cc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403cc0\n    return function_403bd0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403cd0",
            "funcStartAddr": "403cd0",
            "funcEndAddr": "403d65",
            "decompiledFuncCode": "int64_t function_403cd0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x403cd0\n    int64_t v2 = v1; // 0x403cd0\n    int64_t v3 = v2; // 0x403ce4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x403d03\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403d00\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x403d1d\n    if (g23 != 0x6092c0) {\n        // 0x403d1f\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g38;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x403d41\n    if (g22 != &g23) {\n        // 0x403d43\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g50;\n    }\n    // 0x403d56\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d70",
            "funcStartAddr": "403d70",
            "funcEndAddr": "403d81",
            "decompiledFuncCode": "int64_t function_403d70(void) {\n    // 0x403d70\n    int64_t v1; // 0x403d70\n    return function_4038c0(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403d9a",
            "decompiledFuncCode": "int64_t function_403d90(void) {\n    // 0x403d90\n    int64_t v1; // 0x403d90\n    return function_4038c0(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403da0",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403db6",
            "decompiledFuncCode": "int64_t function_403da0(int64_t a1) {\n    // 0x403da0\n    return function_4038c0(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403dc0",
            "funcStartAddr": "403dc0",
            "funcEndAddr": "403dd2",
            "decompiledFuncCode": "int64_t function_403dc0(int64_t a1, int64_t a2) {\n    // 0x403dc0\n    return function_4038c0(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403de0",
            "funcStartAddr": "403de0",
            "funcEndAddr": "403e48",
            "decompiledFuncCode": "int64_t function_403de0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403df0\n    return function_4038c0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403e50",
            "funcStartAddr": "403e50",
            "funcEndAddr": "403eb4",
            "decompiledFuncCode": "int64_t function_403e50(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403e60\n    return function_4038c0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403ec0",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "403ecc",
            "decompiledFuncCode": "int64_t function_403ec0(int64_t a1, int64_t a2) {\n    // 0x403ec0\n    return function_403de0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403edf",
            "decompiledFuncCode": "int64_t function_403ed0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403ed0\n    return function_403e50(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403ee0",
            "funcStartAddr": "403ee0",
            "funcEndAddr": "403f50",
            "decompiledFuncCode": "int64_t function_403ee0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403eed\n    int128_t v2 = __asm_movdqa(g40); // 0x403ef5\n    int128_t v3 = __asm_movdqa(g41); // 0x403efd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403f12\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403f28\n    uint32_t v6 = *v5; // 0x403f28\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403f2d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4038c0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403f50",
            "funcStartAddr": "403f50",
            "funcEndAddr": "403f5d",
            "decompiledFuncCode": "int64_t function_403f50(int64_t a1, int64_t a2) {\n    // 0x403f50\n    return function_403ee0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403f60",
            "funcStartAddr": "403f60",
            "funcEndAddr": "403f71",
            "decompiledFuncCode": "int64_t function_403f60(int64_t a1) {\n    // 0x403f60\n    return function_403ee0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403f80",
            "funcStartAddr": "403f80",
            "funcEndAddr": "403f8a",
            "decompiledFuncCode": "int64_t function_403f80(void) {\n    // 0x403f80\n    int64_t v1; // 0x403f80\n    return function_403ee0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403f90",
            "funcStartAddr": "403f90",
            "funcEndAddr": "403ffe",
            "decompiledFuncCode": "int64_t function_403f90(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403faa\n    return function_4038c0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404000",
            "funcStartAddr": "404000",
            "funcEndAddr": "40406c",
            "decompiledFuncCode": "int64_t function_404000(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x404007\n    int128_t v2 = __asm_movdqa(g40); // 0x40400f\n    int128_t v3 = __asm_movdqa(g41); // 0x404017\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404039\n    if (a2 == 0 || a3 == 0) {\n        // 0x404067\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40404a\n    return function_4038c0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "404079",
            "decompiledFuncCode": "int64_t function_404070(void) {\n    // 0x404070\n    int64_t v1; // 0x404070\n    return function_404000(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404080",
            "funcStartAddr": "404080",
            "funcEndAddr": "404097",
            "decompiledFuncCode": "int64_t function_404080(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404080\n    return function_404000(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040b3",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4040a0\n    return function_404000(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4040ca",
            "decompiledFuncCode": "int64_t function_4040c0(void) {\n    // 0x4040c0\n    int64_t v1; // 0x4040c0\n    return function_4038c0(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_4040d0",
            "funcStartAddr": "4040d0",
            "funcEndAddr": "4040e2",
            "decompiledFuncCode": "int64_t function_4040d0(int64_t a1, int64_t a2) {\n    // 0x4040d0\n    return function_4038c0(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_4040f0",
            "funcStartAddr": "4040f0",
            "funcEndAddr": "404101",
            "decompiledFuncCode": "int64_t function_4040f0(void) {\n    // 0x4040f0\n    int64_t v1; // 0x4040f0\n    return function_4038c0(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_404110",
            "funcStartAddr": "404110",
            "funcEndAddr": "404126",
            "decompiledFuncCode": "int64_t function_404110(int64_t a1) {\n    // 0x404110\n    return function_4038c0(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_404130",
            "funcStartAddr": "404130",
            "funcEndAddr": "40450d",
            "decompiledFuncCode": "int64_t function_404130(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4041c8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40414c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404166\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4041ab\n    if (a6 < 10) {\n        // 0x4041ba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4042b2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404510",
            "funcStartAddr": "404510",
            "funcEndAddr": "404530",
            "decompiledFuncCode": "int64_t function_404510(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404510\n    if (a5 == 0) {\n        // 0x40452b\n        return function_404130(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x404517\n    v1++;\n    int64_t v2 = v1; // 0x404529\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404520\n        v1++;\n        v2 = v1;\n    }\n    // 0x40452b\n    return function_404130(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404530",
            "funcStartAddr": "404530",
            "funcEndAddr": "404590",
            "decompiledFuncCode": "int64_t function_404530(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x404530\n    int64_t v4 = &v3; // 0x404530\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x404563\n    int64_t v7; // 0x40454d\n    int64_t * v8; // 0x40456b\n    int64_t v9; // 0x40456b\n    int64_t v10; // 0x404577\n    if (v6 < 48) {\n        // 0x404540\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x404583\n            break;\n        }\n    } else {\n        // 0x40456b\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x404583\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x404561\n    while (v5 != 9) {\n        // 0x404559\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x404540\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x404583\n                break;\n            }\n        } else {\n            // 0x40456b\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x404583\n                break;\n            }\n        }\n        // 0x404559\n        v11 = 10;\n    }\n    // 0x404583\n    return function_404130(a1, a2, a3, a4, v4, v11, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404590",
            "funcStartAddr": "404590",
            "funcEndAddr": "40464c",
            "decompiledFuncCode": "int64_t function_404590(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404590\n    int64_t v1; // bp-168, 0x404590\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404590\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404590\n    int64_t v8; // 0x404590\n    int64_t v9; // bp-56, 0x404590\n    int64_t v10; // 0x4045f5\n    int64_t v11; // 0x404619\n    if ((int32_t)v6 < 48) {\n        // 0x4045e0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404630\n            break;\n        }\n    } else {\n        // 0x404612\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404630\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40460a\n    int64_t v13 = 10; // 0x40460a\n    while (v5 != 9) {\n        // 0x40460c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4045e0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404630\n                break;\n            }\n        } else {\n            // 0x404612\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404630\n                break;\n            }\n        }\n        // 0x404602\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404630\n    int64_t v14; // bp-136, 0x404590\n    int64_t result = function_404130(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x40463f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404650",
            "funcStartAddr": "404650",
            "funcEndAddr": "4046c4",
            "decompiledFuncCode": "int64_t function_404650(int64_t a1) {\n    // 0x404650\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4046b3\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_4046d0",
            "funcStartAddr": "4046d0",
            "funcEndAddr": "4046ea",
            "decompiledFuncCode": "int64_t function_4046d0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4046d4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4046e3\n        return (int64_t)mem;\n    }\n    // 0x4046e5\n    function_404920(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "404711",
            "decompiledFuncCode": "int64_t function_4046f0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4046f3\n    int64_t v2 = v1; // 0x4046f3\n    if (v2 < 0) {\n        // 0x40470b\n        function_404920(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404709\n        return function_4046d0(v2);\n    }\n    // 0x40470b\n    function_404920(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404720",
            "funcStartAddr": "404720",
            "funcEndAddr": "404722",
            "decompiledFuncCode": "int64_t function_404720(void) {\n    // 0x404720\n    int64_t v1; // 0x404720\n    return function_4046d0(v1);\n}\n"
        },
        {
            "funcName": "function_404730",
            "funcStartAddr": "404730",
            "funcEndAddr": "404766",
            "decompiledFuncCode": "int64_t function_404730(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404758\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404741\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404750\n        return (int64_t)mem;\n    }\n    // 0x404761\n    function_404920(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404770",
            "funcStartAddr": "404770",
            "funcEndAddr": "404791",
            "decompiledFuncCode": "int64_t function_404770(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404773\n    int64_t v2 = v1; // 0x404773\n    if (v2 < 0) {\n        // 0x40478b\n        function_404920(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404789\n        return function_404730(a1, v2);\n    }\n    // 0x40478b\n    function_404920(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4047a0",
            "funcStartAddr": "4047a0",
            "funcEndAddr": "404826",
            "decompiledFuncCode": "int64_t function_4047a0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4047fb\n            function_404920(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404730(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4047e3\n    if (a2 == 0) {\n        // 0x404808\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4047e8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4047fb\n        function_404920(a1);\n        // UNREACHABLE\n    }\n    // 0x4047ca\n    *(int64_t *)a2 = v2;\n    return function_404730(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404830",
            "funcStartAddr": "404830",
            "funcEndAddr": "404880",
            "decompiledFuncCode": "int64_t function_404830(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404830\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40487a\n            function_404920(a1);\n            // UNREACHABLE\n        }\n        // 0x404852\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404730(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404865\n        *(int64_t *)a2 = 128;\n        return function_404730(0, 128);\n    }\n    // 0x404878\n    if (a2 < 0) {\n        // 0x40487a\n        function_404920(a1);\n        // UNREACHABLE\n    }\n    // 0x404852\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404730(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404880",
            "funcStartAddr": "404880",
            "funcEndAddr": "404897",
            "decompiledFuncCode": "int64_t function_404880(int64_t a1, int64_t a2) {\n    // 0x404880\n    return (int64_t)memset((int64_t *)function_4046d0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "4048ce",
            "decompiledFuncCode": "int64_t function_4048a0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4048a7\n    if ((int64_t)v1 < 0) {\n        // 0x4048c9\n        function_404920(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4048c9\n        function_404920(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4048ba\n    if (mem != NULL) {\n        // 0x4048c4\n        return (int64_t)mem;\n    }\n    // 0x4048c9\n    function_404920(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4048d0",
            "funcStartAddr": "4048d0",
            "funcEndAddr": "4048f8",
            "decompiledFuncCode": "int64_t function_4048d0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4046d0(a2); // 0x4048df\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "404913",
            "decompiledFuncCode": "int64_t function_404900(int64_t str) {\n    // 0x404900\n    return function_4048d0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404920",
            "funcStartAddr": "404920",
            "funcEndAddr": "404951",
            "decompiledFuncCode": "int64_t function_404920(int64_t a1) {\n    // 0x404920\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404960",
            "funcStartAddr": "404960",
            "funcEndAddr": "404a95",
            "decompiledFuncCode": "int64_t function_404960(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x404990\n    if (cmd != 1030) {\n        // 0x404a40\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40499c\n    int64_t v2; // 0x404960\n    if (g42 < 0) {\n        int64_t v3 = function_404960(fd, 0, v1, a4); // 0x4049e4\n        int64_t v4 = v3 & 0xffffffff; // 0x4049e9\n        if ((int32_t)v3 < 0) {\n            // 0x4049d0\n            return v4 & 0xffffffff;\n        }\n        // 0x4049ef\n        v2 = v4;\n        if (g42 != -1) {\n            // 0x4049d0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4049b7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4049c6\n            g42 = 1;\n            // 0x4049d0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_404960(fd & 0xffffffff, 0, v1, a4); // 0x404a77\n        int64_t v7 = v6 & 0xffffffff; // 0x404a7c\n        if ((int32_t)v6 < 0) {\n            // 0x4049d0\n            return v7 & 0xffffffff;\n        }\n        // 0x404a86\n        g42 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4049ff\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x404a0a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4049d0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x404a22\n    close(fd2);\n    // 0x4049d0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404aa0",
            "funcStartAddr": "404aa0",
            "funcEndAddr": "404b7f",
            "decompiledFuncCode": "int64_t function_404aa0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x404aac\n    uint32_t v2 = *v1; // 0x404aac\n    int64_t v3 = a2 & 0xffffffff; // 0x404ab1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404ab4\n    uint64_t v5 = (int64_t)*v4; // 0x404ab4\n    int64_t v6; // 0x404b22\n    if (v3 <= v5) {\n      lab_0x404b1c_2:\n        // 0x404b1c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404aa2\n    int64_t v8 = v2; // 0x404aa0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x404b1c\n        goto lab_0x404b1c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404ad8\n    int64_t v17; // 0x404ae6\n    int64_t * v18; // 0x404b00\n    int64_t * v19; // 0x404b03\n    int64_t v20; // 0x404b0e\n    int64_t v21; // 0x404ae6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404ae3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404b00\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404b17\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x404b1c\n            goto lab_0x404b1c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404b1c\n            goto lab_0x404b1c_2;\n        }\n        // 0x404ad2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x404b5b\n    int64_t * v23 = (int64_t *)v22; // 0x404b60\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404b63\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404b60\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404b77\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x404acd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404b1c\n            goto lab_0x404b1c_2;\n        }\n        // 0x404ad2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404ae3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404b00\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404b17\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x404b1c\n                goto lab_0x404b1c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x404b1c\n                goto lab_0x404b1c_2;\n            }\n            // 0x404ad2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404b40\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404b60\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404b77\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x404b1c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "40519c",
            "decompiledFuncCode": "int64_t function_404b80(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x404b9f\n    int64_t v2 = *v1; // 0x404b9f\n    char * str2 = (char *)v2; // 0x404bac\n    char c = *str2; // 0x404bac\n    int64_t v3 = v2; // 0x404bd8\n    int64_t v4 = 0; // 0x404b80\n    int32_t v5; // 0x404b80\n    int64_t v6; // 0x404b80\n    int64_t v7; // 0x404b80\n    int64_t v8; // 0x404b80\n    int64_t v9; // 0x404b80\n    int64_t v10; // 0x404b80\n    int64_t v11; // 0x404b80\n    int64_t v12; // 0x404b80\n    int64_t v13; // 0x404b80\n    int64_t str3; // 0x404b80\n    int64_t v14; // 0x404b80\n    int64_t v15; // 0x404b80\n    int64_t v16; // 0x404b80\n    int64_t v17; // 0x404b80\n    int32_t v18; // 0x404b80\n    int32_t v19; // 0x404b80\n    int32_t v20; // 0x404b80\n    int32_t v21; // 0x404b80\n    int32_t v22; // 0x404b80\n    int32_t v23; // 0x404b80\n    int32_t v24; // 0x404b80\n    int32_t v25; // 0x404b80\n    int32_t v26; // 0x404b80\n    int32_t v27; // 0x404b80\n    int32_t v28; // 0x404b80\n    int32_t v29; // 0x404b80\n    int64_t nmemb; // 0x404b80\n    int64_t v30; // 0x404b80\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x404bdc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404bd8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404be8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x404bee\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404bb8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x404c1c\n                int64_t v34; // 0x404b80\n                int64_t v35; // 0x404b80\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404c25\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404da0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404c36\n                int64_t v37 = *(int64_t *)v36; // 0x404c3a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404c10\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404c25\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404da0;\n                        }\n                    }\n                    // 0x404c36\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404c86:\n                    // 0x404c86\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404ce0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404e50\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404ce0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404e00\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x404caa;\n                                } else {\n                                    // 0x404e0c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x404caa;\n                                    } else {\n                                        // 0x404e1a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x404caa;\n                                        } else {\n                                            goto lab_0x404ce0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x404caa;\n                            }\n                        }\n                    }\n                }\n              lab_0x404cf1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404ec6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405072\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x405092\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4050df\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x4050f9\n                            int64_t v45; // 0x4050fb\n                            if (*(char *)v42 != 0) {\n                                // 0x4050fb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4050f3\n                            while (v17 + nmemb != v42) {\n                                // 0x4050f5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4050fb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x4050e8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405120\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x404ed4\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40502f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404f29\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404f40\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x404dee\n                    return 63;\n                }\n                // 0x404d10\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404d94\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404da0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404db0\n                    uint32_t v50 = *v49; // 0x404db0\n                    int64_t v51 = v50; // 0x404db0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x404dba\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404dc3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x404fef\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x404f9a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x404dee\n                            return 63;\n                        }\n                        // 0x404e38\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40514f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40504d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405060\n                                // 0x404dee\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x404f5e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404f72\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x404ddb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x404dde\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404de2\n                    int64_t result = v59; // 0x404de8\n                    if (v58 != 0) {\n                        // 0x404dea\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x404dee\n                    return result;\n                }\n            } else {\n                // 0x404bee\n                v5 = v32;\n            }\n            // break -> 0x404d15\n            break;\n        }\n    }\n    // 0x404d15\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x404d2d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404d37\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x404dee\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404e79\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404d66\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404d76\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404ce0:\n    // 0x404ce0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404ce0\n    int64_t v63 = *(int64_t *)v62; // 0x404ce4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404cf1\n        goto lab_0x404cf1;\n    }\n    goto lab_0x404c86;\n  lab_0x404caa:\n    // 0x404caa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404b80\n    int32_t v65; // 0x404b80\n    int32_t v66; // 0x404b80\n    if (v27 != 0) {\n        goto lab_0x404ce0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404e60\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404ce0;\n            } else {\n                goto lab_0x404cd1;\n            }\n        } else {\n            // 0x404cc5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x404fbc\n                int64_t v67 = (int64_t)mem; // 0x404fbc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404ce0;\n                } else {\n                    // 0x404fcf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404cd1;\n                }\n            } else {\n                goto lab_0x404cd1;\n            }\n        }\n    }\n  lab_0x404cd1:\n    // 0x404cd1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404ce0;\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "405766",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4051c1\n    if (v3 < 1) {\n        // 0x40537e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4051bd\n    int32_t v5 = *(int32_t *)a7; // 0x4051c9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4051cb\n    int64_t v7 = v2; // 0x4051d0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4051d3\n    *v8 = 0;\n    int64_t v9; // 0x4051a0\n    int64_t v10; // 0x4051a0\n    int64_t v11; // 0x4051a0\n    int64_t v12; // 0x4051a0\n    int64_t str; // 0x4051a0\n    int64_t v13; // 0x4051a0\n    int64_t v14; // 0x4051a0\n    int64_t v15; // 0x4051a0\n    int64_t v16; // 0x4051a0\n    int64_t v17; // 0x4051a0\n    int32_t v18; // 0x4051a0\n    char v19; // 0x4051a0\n    if (v5 == 0) {\n        // 0x4053b8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4051ea;\n    } else {\n        // 0x4051e3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405230\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405233\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4052f8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405246\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405256\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40530c;\n                } else {\n                    goto lab_0x405268;\n                }\n            }\n        } else {\n            goto lab_0x4051ea;\n        }\n    }\n  lab_0x4051ea:\n    // 0x4051ea\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4051f0\n    *v24 = 0;\n    int64_t v25; // 0x4051a0\n    int64_t v26; // 0x4051a0\n    int64_t v27; // 0x4051a0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4052e0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4052ed;\n        }\n        case 43: {\n            // 0x4055f0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4052ed;\n        }\n        default: {\n            // 0x40520c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40556f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405688\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4052ed;\n                } else {\n                    // 0x40557d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40521a;\n                }\n            } else {\n                goto lab_0x40521a;\n            }\n        }\n    }\n  lab_0x4052f8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4052ff\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405268;\n    } else {\n        goto lab_0x40530c;\n    }\n  lab_0x40521a:\n    // 0x40521a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4052ed;\n  lab_0x4052ed:\n    // 0x4052ed\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4052f8;\n  lab_0x405268:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405268\n    int64_t v31 = v30; // 0x405268\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40526a\n    if ((int64_t)*v32 > v31) {\n        // 0x40526f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405272\n    if (*v33 > v30) {\n        // 0x405277\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40527a\n    int64_t v35 = v31; // 0x40527e\n    int64_t v36 = v15; // 0x40527e\n    int64_t v37; // 0x4051a0\n    int64_t v38; // 0x4051a0\n    int64_t v39; // 0x4051a0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4053e8\n        int64_t v41 = v40; // 0x4053e8\n        v2 = v41;\n        int64_t v42; // 0x4051a0\n        if (*v33 == v40) {\n            // 0x4055d0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4055d8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4053f4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4053f8\n                function_404aa0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405408\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405411\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40541a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405431\n            int64_t v47 = v45 & 0xffffffff; // 0x405435\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40543e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405444\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405446;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405420\n            int64_t v49 = v48 & 0xffffffff; // 0x405420\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405431\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40543e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405444\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405446;\n                    }\n                }\n                // 0x405420\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4055e8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405446;\n    } else {\n        goto lab_0x405284;\n    }\n  lab_0x40530c:\n    // 0x40530c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40530f\n    int64_t v51 = v12; // 0x40530f\n    int64_t v52 = v14; // 0x40530f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405268;\n    } else {\n        goto lab_0x405315;\n    }\n  lab_0x405284:;\n    int32_t v53 = v35; // 0x405284\n    int64_t v54; // 0x4051a0\n    int64_t v55; // 0x4051a0\n    int64_t v56; // 0x4051a0\n    int64_t v57; // 0x4051a0\n    int64_t v58; // 0x4051a0\n    int64_t v59; // 0x4051a0\n    char * v60; // 0x4051a0\n    int64_t v61; // 0x4051a0\n    int64_t v62; // 0x405299\n    int64_t v63; // 0x4051a0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4053d3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4053d6;\n    } else {\n        // 0x40528c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4051a0\n        int64_t v66 = v65 ? -1 : 1; // 0x4052a0\n        int64_t v67 = (int64_t)\"--\"; // 0x4051a0\n        int64_t v68 = v62; // 0x4051a0\n        int64_t v69 = 3; // 0x4052a0\n        unsigned char v70 = *(char *)v68; // 0x4052a0\n        char v71 = *(char *)v67; // 0x4052a0\n        char v72 = v71; // 0x4052a0\n        bool v73 = false; // 0x4052a0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405390\n            if (*(char *)v62 == 45) {\n                // 0x405450\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405450\n                if (c == 0) {\n                    goto lab_0x40539a;\n                } else {\n                    // 0x40545d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4054e0;\n                    } else {\n                        if (c == 45) {\n                            // 0x4056c3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405535;\n                        } else {\n                            // 0x40546e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4054e0;\n                            } else {\n                                // 0x405473\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405494;\n                                } else {\n                                    // 0x40547a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4054e0;\n                                    } else {\n                                        goto lab_0x405494;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40539a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4052b0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4052b3\n            int64_t v77 = v35 + 1; // 0x4052b6\n            int32_t v78 = v77; // 0x4052b9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405620\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4052c7\n                    function_404aa0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4052d5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4053d6;\n        }\n    }\n  lab_0x405315:;\n    // 0x405315\n    int64_t v79; // bp-104, 0x4051a0\n    int64_t v80 = &v79; // 0x4051aa\n    int64_t v81 = v50 + 1; // 0x405315\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40531c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405321\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405325\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405329\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405331\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405336\n    int32_t c2 = v84; // 0x405336\n    char * found_char_pos = strchr(str2, c2); // 0x405336\n    int64_t v87 = *v82; // 0x40533b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405345\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405350\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405640\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40560d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40537e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405336\n    char v91 = *(char *)(v90 + 1); // 0x40536b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405325\n        if (v91 != 58) {\n            // 0x40537e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405594\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405698\n                *v8 = 0;\n            } else {\n                // 0x40567c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4055be\n            *v83 = 0;\n            // 0x40537e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40559e\n        if (v93 != 0) {\n            // 0x405630\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4055be\n            *v83 = 0;\n            // 0x40537e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4055b1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4055be\n            *v83 = 0;\n            // 0x40537e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4056fa\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4056aa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4056b1\n        // 0x4055be\n        *v83 = 0;\n        // 0x40537e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405509\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40550b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405730\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4056e1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4056e8\n            // 0x40537e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405516\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40551a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405535;\n  lab_0x405446:\n    // 0x405446\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405284;\n  lab_0x405535:;\n    int64_t v99 = function_404b80(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405553\n    // 0x40537e\n    return v99 & 0xffffffff;\n  lab_0x4053d6:;\n    int32_t v100 = v55; // 0x4053d6\n    if (v100 != (int32_t)v59) {\n        // 0x4053da\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40537e\n    return 0xffffffff;\n  lab_0x40539a:\n    // 0x40539a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4053a1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40537e\n    return v99 & 0xffffffff;\n  lab_0x4054e0:\n    // 0x4054e0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405315;\n  lab_0x405494:\n    // 0x405494\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404b80(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x4054ba\n    if ((int32_t)v101 != -1) {\n        // 0x40537e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4054cf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4054e0;\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "4057c6",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1) {\n    // 0x405770\n    *(int32_t *)&g43 = g28;\n    *(int32_t *)&g44 = g27;\n    int64_t v1; // 0x405770\n    int64_t result = function_4051a0(v1, v1, v1, v1, v1, v1, &g43, a1 & 0xffffffff); // 0x405796\n    g28 = *(int32_t *)&g43;\n    g48 = g46;\n    *(int32_t *)&g26 = g45;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "4057e8",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4057d0\n    return function_405770(1);\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "405803",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x4057f0\n    return function_405770(0);\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405825",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405810\n    return function_4051a0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "405846",
            "decompiledFuncCode": "int64_t function_405830(void) {\n    // 0x405830\n    return function_405770(0);\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "405868",
            "decompiledFuncCode": "int64_t function_405850(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405850\n    return function_4051a0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405870",
            "funcStartAddr": "405870",
            "funcEndAddr": "4058ea",
            "decompiledFuncCode": "int64_t function_405870(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40587b\n    int64_t v2 = (int64_t)&g12; // 0x40587b\n    int32_t * pwc; // 0x405870\n    int64_t v3; // 0x405870\n    int64_t n; // 0x405870\n    if (a2 == 0) {\n        goto lab_0x4058c2;\n    } else {\n        // 0x40587d\n        if (a3 == 0) {\n            // 0x4058a8\n            return -2;\n        }\n        // 0x405889\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4058c2;\n        } else {\n            goto lab_0x405894;\n        }\n    }\n  lab_0x4058c2:\n    // 0x4058c2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405870\n    pwc = (int32_t *)&v4;\n    goto lab_0x405894;\n  lab_0x405894:;\n    char * wstr = (char *)v3; // 0x40589a\n    int64_t ps; // 0x405870\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40589a\n    int64_t result = v5; // 0x40589a\n    if (v5 < 0xfffffffe) {\n        // 0x4058a8\n        return result;\n    }\n    int64_t result2 = result; // 0x4058d9\n    if ((char)function_4059e0(0, v3) == 0) {\n        // 0x4058db\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4058a8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "40594d",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4058f7\n    int64_t v2; // 0x4058f0\n    int64_t result = function_405fb0(a1, v2); // 0x405908\n    if ((v2 & 32) != 0) {\n        // 0x405930\n        if ((int32_t)result == 0) {\n            // 0x405934\n            *__errno_location() = 0;\n        }\n        // 0x40592a\n        return 0xffffffff;\n    }\n    // 0x405911\n    if ((int32_t)result == 0) {\n        // 0x40592a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405918\n    if (v1 == 0) {\n        // 0x40591a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40592a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405950",
            "funcStartAddr": "405950",
            "funcEndAddr": "4059ab",
            "decompiledFuncCode": "int64_t function_405950(int64_t a1, int64_t a2) {\n    // 0x405950\n    int64_t v1; // 0x405950\n    char v2 = v1;\n    int64_t v3 = a1; // 0x405959\n    int64_t v4 = a1; // 0x405959\n    char v5 = v2; // 0x405959\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x405964\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x405960\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40596e\n    if (v5 == 0) {\n      lab_0x4059aa:\n        // 0x4059aa\n        return result;\n    }\n    int64_t v7 = v4; // 0x405998\n    int64_t v8 = 0; // 0x405998\n    int64_t v9; // 0x405950\n    int64_t v10; // 0x40599a\n    char v11; // 0x40599e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x405995\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x40599a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x405995\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40598a\n    char v14 = *(char *)v13; // 0x40598e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x405995\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x40599a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x405995\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x405980\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x4059aa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4059b0",
            "funcStartAddr": "4059b0",
            "funcEndAddr": "4059db",
            "decompiledFuncCode": "int64_t function_4059b0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x4059b4\n    int64_t result = len; // 0x4059b4\n    if (len < 2) {\n        // 0x4059ca\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x4059c8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x4059d0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x4059ca\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x4059ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4059e0",
            "funcStartAddr": "4059e0",
            "funcEndAddr": "405a3e",
            "decompiledFuncCode": "int64_t function_4059e0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4059e6\n    if (locale == NULL) {\n        // 0x405a13\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4059e6\n    bool v2; // 0x4059e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x4059e0\n    int64_t v5 = v1; // 0x4059e0\n    int64_t v6 = 2; // 0x405a05\n    unsigned char v7 = *(char *)v5; // 0x405a05\n    char v8 = *(char *)v4; // 0x405a05\n    char v9 = v8; // 0x405a05\n    bool v10 = false; // 0x405a05\n    while (v7 == v8) {\n        // 0x4059f8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405a11\n    int64_t v13 = v1; // 0x405a11\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405a13\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405a11\n    unsigned char v15 = *(char *)v13; // 0x405a2d\n    char v16 = *(char *)v12; // 0x405a2d\n    char v17 = v16; // 0x405a2d\n    bool v18 = false; // 0x405a2d\n    while (v15 == v16) {\n        // 0x405a20\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405fa2",
            "decompiledFuncCode": "int64_t function_405a40(void) {\n    char * v1 = nl_langinfo(14); // 0x405a56\n    char * v2 = g47; // 0x405a5b\n    char * v3; // 0x405a40\n    int64_t v4; // 0x405a40\n    int64_t v5; // 0x405a40\n    int64_t v6; // 0x405a40\n    int64_t v7; // 0x405a40\n    int32_t size; // 0x405a40\n    int32_t size2; // 0x405a40\n    int32_t len; // 0x405b12\n    int64_t v8; // 0x405b12\n    char * env_val; // 0x405afd\n    if (v2 == NULL) {\n        // 0x405af8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405b65;\n        } else {\n            // 0x405b0a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405b65;\n            } else {\n                // 0x405b0f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405afd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405f95\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405b65;\n                    } else {\n                        // 0x405f09\n                        size2 = len + 14;\n                        goto lab_0x405b2b;\n                    }\n                } else {\n                    goto lab_0x405b2b;\n                }\n            }\n        }\n    } else {\n        // 0x405a40\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405a7a;\n    }\n  lab_0x405dac:;\n    // 0x405dac\n    struct _IO_FILE * stream; // 0x405beb\n    int32_t v10 = __uflow(stream); // 0x405daf\n    int64_t v11; // 0x405a40\n    int64_t v12 = v11; // 0x405db9\n    int64_t v13; // 0x405a40\n    int64_t v14 = v13; // 0x405db9\n    int32_t v15 = v10; // 0x405db9\n    int64_t v16; // 0x405a40\n    int64_t v17 = v16; // 0x405db9\n    int64_t v18 = v11; // 0x405db9\n    int64_t v19 = v13; // 0x405db9\n    int64_t v20 = v16; // 0x405db9\n    if (v10 == -1) {\n        // break -> 0x405dbf\n        goto lab_0x405dbf;\n    }\n    goto lab_0x405c39;\n  lab_0x405c2e:;\n    // 0x405c2e\n    int64_t v90; // 0x405a40\n    int64_t * v32; // 0x405c20\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405a40\n    v12 = v89;\n    int64_t v91; // 0x405a40\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405a40\n    v17 = v92;\n    goto lab_0x405c39;\n  lab_0x405c39:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405a40\n    int32_t v25; // bp-120, 0x405a40\n    int32_t v26; // bp-184, 0x405a40\n    int64_t v27; // 0x405beb\n    int64_t v28; // 0x405c08\n    int64_t v29; // 0x405c0d\n    int64_t * v30; // 0x405c24\n    switch (c) {\n        case 32: {\n            goto lab_0x405c20;\n        }\n        case 10: {\n            goto lab_0x405c20;\n        }\n        case 9: {\n            goto lab_0x405c20;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405e11\n            int32_t v33; // 0x405a40\n            char v34; // 0x405a40\n            int32_t v35; // 0x405e1e\n            if (v31 < *v30) {\n                // 0x405df0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x405e1b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405e11\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405df0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x405e1b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405e00\n                v36 = v33;\n            }\n            // 0x405eef\n            if (v36 == -1) {\n                // break -> 0x405dbf\n                break;\n            }\n            goto lab_0x405c20;\n        }\n        default: {\n            // 0x405c4f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x405dbf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405c78\n            int64_t v39 = v37 + 4; // 0x405c7a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405c86\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405c88\n            while (v41 == 0) {\n                // 0x405c78\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405ca6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405cb2\n            int64_t v45 = v43 + 4; // 0x405cb4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405cc0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405cc2\n            while (v47 == 0) {\n                // 0x405cb2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x405caf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405cd8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405ce8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x405cec\n            int64_t v52 = v51 + v48; // 0x405cf5\n            int64_t * mem; // 0x405a40\n            int64_t v53; // 0x405a40\n            int64_t v54; // 0x405a40\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x405e2b\n                int64_t v56 = v55 + 3; // 0x405e37\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405d11\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405d20\n            if (mem == NULL) {\n                // 0x405f4c\n                free((int64_t *)v21);\n                function_405fb0(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x405bc4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405d38\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405d42\n            uint32_t v62 = (int32_t)v59; // 0x405d45\n            int64_t v63; // 0x405a40\n            if (v62 >= 8) {\n                // 0x405e54\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x405e6e\n                int64_t v66 = v61 - v65; // 0x405e72\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x405e7d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405e8e\n                    int64_t v70 = v69 & 0xffffffff; // 0x405e8e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405e8b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405f1f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405d57\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x405d5b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x405d6b\n            int64_t v74 = v60 - 1; // 0x405d6f\n            uint32_t v75 = (int32_t)v73; // 0x405d74\n            int64_t v76; // 0x405a40\n            if (v75 >= 8) {\n                // 0x405ea2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405eac\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405ebc\n                int64_t v80 = v74 - v79; // 0x405ec0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405ecb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405edb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405ed9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405f36\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405f3e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405d86\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x405d8a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405f83\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x405d9e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405c2e;\n            } else {\n                goto lab_0x405dac;\n            }\n        }\n    }\n  lab_0x405c20:;\n    int64_t v93 = v23; // 0x405a40\n    int64_t v94 = v22; // 0x405a40\n    int64_t v95 = v21; // 0x405a40\n    goto lab_0x405c20_2;\n  lab_0x405b65:;\n    int64_t * mem3 = malloc(size); // 0x405b65\n    int64_t v97 = (int64_t)&g12; // 0x405b70\n    int64_t v98; // 0x405a40\n    int64_t path; // 0x405a40\n    if (mem3 == NULL) {\n        goto lab_0x405b42;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405b65\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405b86;\n    }\n  lab_0x405a7a:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x405a6d\n    char v100 = *v3; // 0x405a7a\n    int64_t v101; // 0x405a40\n    if (v100 == 0) {\n        // 0x405ad4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405a40\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405a40\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405ac0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405ac7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405a90\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405a9d\n        char v107 = *(char *)v106; // 0x405aa2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405ad4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405aab\n    v104 = v103 + 1;\n  lab_0x405ac7:\n    // 0x405ad4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405b42:;\n    char * v108 = (char *)v97;\n    g47 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405a7a;\n  lab_0x405b86:;\n    int64_t v109 = v98 + path; // 0x405b86\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405bb2\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x405be1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405f12\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x405c05\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405c20_2:;\n                uint64_t v96 = *v32; // 0x405c20\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x405dac;\n                } else {\n                    goto lab_0x405c2e;\n                }\n            }\n          lab_0x405dbf:\n            // 0x405dbf\n            function_405fb0(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x405dde\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405bc4;\n  lab_0x405b2b:;\n    int64_t * mem4 = malloc(size2); // 0x405b2b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x405bd1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405b86;\n    } else {\n        goto lab_0x405b42;\n    }\n  lab_0x405bc4:\n    // 0x405bc4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405b42;\n}\n"
        },
        {
            "funcName": "function_405fb0",
            "funcStartAddr": "405fb0",
            "funcEndAddr": "40602b",
            "decompiledFuncCode": "int64_t function_405fb0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405fb7\n    if (fileno(stream) < 0) {\n        // 0x406017\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405fca\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405ffb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406017\n            return fclose(stream);\n        }\n    }\n    // 0x405fcc\n    if ((int32_t)function_406030(a1, v1) == 0) {\n        // 0x406017\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405fd8\n    int32_t v3 = *v2; // 0x405fe0\n    int64_t result = fclose(stream); // 0x405fee\n    if (v3 != 0) {\n        // 0x406020\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405ff0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406030",
            "funcStartAddr": "406030",
            "funcEndAddr": "406070",
            "decompiledFuncCode": "int64_t function_406030(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40604a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40604a\n        return fflush(stream);\n    }\n    // 0x406058\n    function_406070(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406070",
            "funcStartAddr": "406070",
            "funcEndAddr": "4060c7",
            "decompiledFuncCode": "int64_t function_406070(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406070\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40607a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4060ab\n    int64_t result = -1; // 0x4060b4\n    if (v1 != -1) {\n        // 0x4060b6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4060c2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4060d0",
            "funcStartAddr": "4060d0",
            "funcEndAddr": "40612d",
            "decompiledFuncCode": "int64_t function_4060d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4060d0\n    return function_401398();\n}\n"
        },
        {
            "funcName": "function_406130",
            "funcStartAddr": "406130",
            "funcEndAddr": "406131",
            "decompiledFuncCode": "int64_t function_406130(void) {\n    // 0x406130\n    int64_t result; // 0x406130\n    return result;\n}\n"
        },
        {
            "funcName": "function_406140",
            "funcStartAddr": "406140",
            "funcEndAddr": "406158",
            "decompiledFuncCode": "int64_t function_406140(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406140\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_406158",
            "funcStartAddr": "406158",
            "funcEndAddr": "406178",
            "decompiledFuncCode": "int64_t function_406158(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x406162\n    while (*(int64_t *)v1 != -1) {\n        // 0x406163\n        v1 -= 8;\n    }\n    // 0x406174\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_nohup.elf"
}