{
    "funcInfo": [
        {
            "funcName": "function_401fa0",
            "funcStartAddr": "401fa0",
            "funcEndAddr": "401fa5",
            "decompiledFuncCode": "int64_t function_401fa0(void) {\n    // 0x401fa0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fa5",
            "funcStartAddr": "401fa5",
            "funcEndAddr": "401faa",
            "decompiledFuncCode": "int64_t function_401fa5(void) {\n    // 0x401fa5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401faa",
            "funcStartAddr": "401faa",
            "funcEndAddr": "401faf",
            "decompiledFuncCode": "int64_t function_401faa(void) {\n    // 0x401faa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401faf",
            "funcStartAddr": "401faf",
            "funcEndAddr": "401fb4",
            "decompiledFuncCode": "int64_t function_401faf(void) {\n    // 0x401faf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fb4",
            "funcStartAddr": "401fb4",
            "funcEndAddr": "401fb9",
            "decompiledFuncCode": "int64_t function_401fb4(void) {\n    // 0x401fb4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fb9",
            "funcStartAddr": "401fb9",
            "funcEndAddr": "401fbe",
            "decompiledFuncCode": "int64_t function_401fb9(void) {\n    // 0x401fb9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fbe",
            "funcStartAddr": "401fbe",
            "funcEndAddr": "401fc3",
            "decompiledFuncCode": "int64_t function_401fbe(void) {\n    // 0x401fbe\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fd0",
            "funcStartAddr": "401fd0",
            "funcEndAddr": "403c41",
            "decompiledFuncCode": "int64_t function_401fd0(int64_t a1, int64_t a2) {\n    char * env_val = getenv(\"POSIXLY_CORRECT\"); // 0x401feb\n    sigemptyset((struct _TYPEDEF_sigset_t *)&g63);\n    int64_t v1 = a2; // 0x402000\n    int64_t v2 = a1 & 0xffffffff; // 0x402000\n    int64_t v3 = (int64_t)env_val; // 0x402000\n    if (env_val == NULL) {\n        goto lab_0x403556;\n    } else {\n        goto lab_0x402006;\n    }\n  lab_0x402ef1:;\n    int64_t v4 = function_4083e0(4, (int64_t)g106); // 0x402f0c\n    int64_t v5 = (int64_t)\"error writing %s\"; // 0x402f0c\n    int64_t v6; // 0x401fd0\n    int64_t v7 = v6; // 0x402f0c\n    int64_t v8; // 0x401fd0\n    int64_t v9 = v8; // 0x402f0c\n    goto lab_0x402f0f;\n  lab_0x402770:;\n    // 0x402770\n    int64_t v134; // 0x401fd0\n    int64_t v135 = v134; // 0x401fd0\n    int64_t v136; // 0x401fd0\n    int64_t v137 = v136; // 0x401fd0\n    int64_t v138; // 0x401fd0\n    int64_t v139 = v138; // 0x401fd0\n    int64_t v133; // 0x401fd0\n    int64_t v140 = v133; // 0x401fd0\n    int64_t v141; // 0x401fd0\n    int64_t v142 = v141; // 0x401fd0\n    goto lab_0x402770_2;\n  lab_0x4030a7:;\n    // 0x4030a7\n    int64_t v130; // 0x401fd0\n    int64_t v31 = v130; // 0x4030ae\n    int64_t v132; // 0x401fd0\n    int64_t v27 = v132; // 0x4030ae\n    int64_t v26; // 0x401fd0\n    if (g53 == 0) {\n        goto lab_0x4031ca;\n    } else {\n        if ((v130 & 8) != 0) {\n            // 0x40365c\n            function_404ef0((int64_t)&g52, 1);\n            v31 = g94;\n            v27 = &g52;\n            goto lab_0x4031ca;\n        } else {\n            if ((v130 & 16) != 0) {\n                // 0x4037aa\n                function_405000((int64_t)&g52, 1);\n                v31 = g94;\n                v27 = &g52;\n                goto lab_0x4031ca;\n            } else {\n                int64_t v174 = g72; // 0x4030c8\n                int64_t v175 = v174 + 1; // 0x4030dd\n                g72 = v175;\n                *(char *)(g73 + v174) = g52;\n                v26 = v132;\n                if (v175 >= (int64_t)g103) {\n                    // 0x4031bf\n                    function_404e50();\n                    v31 = g94;\n                    v27 = v132;\n                    goto lab_0x4031ca;\n                } else {\n                    goto lab_0x4030f9;\n                }\n            }\n        }\n    }\n  lab_0x402808:;\n    // 0x402808\n    int32_t v171; // 0x4027e5\n    int64_t v176 = v171; // 0x4027e5\n    int64_t v177 = g78 + v176; // 0x40280b\n    g78 = v177;\n    if (v177 < v176) {\n        // 0x40281e\n        g77 = 1;\n    }\n    // 0x402825\n    if (g59 != 0) {\n        // 0x402cf8\n        function_4045a0(0, v176);\n    }\n    // 0x402832\n    int64_t v167; // 0x401fd0\n    int64_t v178 = v167; // 0x40283c\n    int64_t v179 = v176; // 0x40283c\n    int64_t v180 = v167; // 0x40283c\n    int64_t v181 = v176; // 0x40283c\n    if (v171 < g104) {\n        goto lab_0x402842;\n    } else {\n        goto lab_0x402c78;\n    }\n  lab_0x402b57:;\n    int64_t v131 = g94; // 0x402b57\n    int32_t * v182; // 0x4023b8\n    char v127; // 0x40307c\n    int32_t v128; // 0x403090\n    if (v171 == 0) {\n        // 0x403068\n        g57 |= g59;\n        v127 = *(char *)&g56;\n        if (g58 == 0) {\n            // 0x403068\n            goto lab_0x403094;\n        } else {\n            // 0x403085\n            v128 = (v131 & 512) == 0;\n            *v182 = v128;\n            goto lab_0x403094;\n        }\n    }\n    int64_t v183 = v167; // 0x402b69\n    int64_t v129; // 0x401fd0\n    int64_t v32; // 0x401fd0\n    int64_t v33; // 0x401fd0\n    int32_t * v184; // 0x40275e\n    int64_t * v185; // 0x4022e9\n    if ((v131 & 256) != 0 != (g30 == 1)) {\n        int64_t v186 = function_4083e0(4, (int64_t)g107); // 0x402b80\n        char * v187 = dcgettext(NULL, \"error reading %s\", 5); // 0x402b94\n        int32_t v188 = *(int32_t *)*v185; // 0x402ba6\n        function_4041e0(0, v188, (int64_t)v187, v186, v129, v133);\n        uint32_t v189 = g94; // 0x402baf\n        v183 = v186;\n        if ((v189 & 256) == 0) {\n            // 0x40364f\n            *v184 = 1;\n            v32 = v129;\n            v130 = v189;\n            v132 = 0;\n            v33 = v133;\n            goto lab_0x4030a7;\n        }\n    }\n    int64_t v190 = v183;\n    function_4040b0();\n    int64_t v168; // 0x401fd0\n    uint64_t v191 = (int64_t)g104 - v168; // 0x402bcf\n    function_4045a0(0, v191);\n    int64_t v192; // 0x401fd0\n    if (*(char *)&g80 != 0) {\n        uint64_t v193 = g78 + v191; // 0x402d13\n        g78 = v193;\n        if (v193 >= v191) {\n            char v194 = g77 | (char)(v193 / 0x8000000000000000); // 0x402dd7\n            g77 = v194;\n            if (v194 != 0) {\n                goto lab_0x402d2e;\n            } else {\n                int32_t v195 = lseek(0, 0, SEEK_CUR); // 0x402dec\n                if (v195 < 0) {\n                    goto lab_0x402bf9;\n                } else {\n                    int64_t v196 = v195; // 0x402dec\n                    v192 = v190;\n                    if (v193 == v196) {\n                        goto lab_0x402c4f;\n                    } else {\n                        int64_t v197 = v193 - v196; // 0x402e03\n                        if (v191 >= v197 != v197 > -1 && g30 != 1) {\n                            // 0x4033ee\n                            function_4041e0(0, (int32_t)\"warning: invalid file offset after failed read\" ^ (int32_t)\"warning: invalid file offset after failed read\", (int64_t)dcgettext(NULL, \"warning: invalid file offset after failed read\", 5), v190, v129, v133);\n                        }\n                        // 0x402e15\n                        v192 = 1;\n                        if (function_4044d0((int64_t)g107, 0, v197, 1) >= 0) {\n                            goto lab_0x402c4f;\n                        } else {\n                            // 0x402e34\n                            if (*(int32_t *)*v185 == 0) {\n                                // 0x402e42\n                                function_4041e0(0, (int32_t)\"cannot work around kernel bug after all\" ^ (int32_t)\"cannot work around kernel bug after all\", (int64_t)dcgettext(NULL, \"cannot work around kernel bug after all\", 5), 1, v129, v133);\n                            }\n                            goto lab_0x402bf9;\n                        }\n                    }\n                }\n            }\n        } else {\n            // 0x402d27\n            g77 = 1;\n            goto lab_0x402d2e;\n        }\n    } else {\n        int32_t v198 = g79; // 0x402be7\n        v192 = v190;\n        if (v198 == 29) {\n            goto lab_0x402c4f;\n        } else {\n            // 0x402bf2\n            *(int32_t *)*v185 = v198;\n            goto lab_0x402bf9;\n        }\n    }\n  lab_0x402842:;\n    int64_t v199 = v179;\n    int64_t v200 = v178;\n    int32_t v201 = g94; // 0x402842\n    g86++;\n    int64_t v202 = v200; // 0x402859\n    int64_t v203 = v199; // 0x402859\n    int64_t v204 = v199; // 0x402859\n    if ((v201 & 1024) != 0) {\n        int32_t v205 = g104;\n        int64_t v206 = v205;\n        v202 = v200;\n        v203 = v199;\n        v204 = v206;\n        if ((v201 & 256) == 0) {\n            int32_t v207 = (v201 & 24) == 0 ? 0 : 32;\n            memset((int64_t *)(g74 + v199), v207, v205 - (int32_t)v199);\n            v202 = v200;\n            v203 = v199;\n            v204 = v206;\n        }\n    }\n    goto lab_0x402890;\n  lab_0x402c78:\n    // 0x402c78\n    g85++;\n    v202 = v180;\n    v203 = 0;\n    v204 = v181;\n    goto lab_0x402890;\n  lab_0x402890:;\n    int64_t v173 = v204;\n    v141 = v203;\n    v134 = v202;\n    if (g74 == g73) {\n        // break -> 0x402d9b\n        goto lab_0x402d9b;\n    }\n    // 0x4028a7\n    if (v173 != 0 && g89 != 0) {\n        int64_t v208 = g74; // 0x402d7d\n        char * v209 = (char *)v208; // 0x402d80\n        v208++;\n        *v209 = *(char *)((int64_t)*v209 + (int64_t)&g54);\n        while (v208 != g74 + v173) {\n            // 0x402d80\n            v209 = (char *)v208;\n            v208++;\n            *v209 = *(char *)((int64_t)*v209 + (int64_t)&g54);\n        }\n    }\n    uint32_t v210 = g94; // 0x4028b4\n    int64_t v211 = g74; // 0x4028bf\n    int64_t v212 = v173; // 0x4028bf\n    if ((char)v210 <= -1) {\n        // 0x402ca0\n        int64_t v213; // 0x401fd0\n        int64_t v214; // 0x401fd0\n        int64_t v215; // 0x401fd0\n        if (g53 != 0) {\n            int64_t v216 = g74 - 1; // 0x402ea5\n            g53 = 0;\n            *(char *)v216 = g52;\n            v214 = v216;\n            v215 = g74;\n            v213 = v173 + 1;\n        } else {\n            // 0x402cad\n            v214 = g74;\n            v215 = g74 + 1;\n            v213 = v173;\n        }\n        int64_t v217 = v213;\n        int64_t v218 = v215;\n        int64_t v219 = v214;\n        int64_t v220; // 0x401fd0\n        int64_t v221; // 0x401fd0\n        if (v217 % 2 != 0) {\n            int64_t v222 = v217 - 1; // 0x402e82\n            g53 = 1;\n            int64_t v223 = v222 + v219; // 0x402e8d\n            g52 = *(char *)v223;\n            v221 = v223;\n            v220 = v222;\n        } else {\n            // 0x402cbe\n            v221 = v217 + v219;\n            v220 = v217;\n        }\n        int64_t v224 = v220;\n        int64_t v225 = v221 - (v224 & -2); // 0x402ccd\n        v211 = v218;\n        v212 = v224;\n        int64_t v226 = v221; // 0x402cd4\n        if (v224 >= 2) {\n            int64_t v227 = v226 - 2; // 0x402ce0\n            *(char *)v226 = *(char *)v227;\n            v211 = v218;\n            v212 = v224;\n            v226 = v227;\n            while (v227 != v225) {\n                // 0x402ce0\n                v227 = v226 - 2;\n                *(char *)v226 = *(char *)v227;\n                v211 = v218;\n                v212 = v224;\n                v226 = v227;\n            }\n        }\n    }\n    int64_t v228 = v210; // 0x4028b4\n    int64_t v229 = v212;\n    int64_t v230 = v211;\n    if ((v228 & 8) != 0) {\n        // 0x402c90\n        function_404ef0(v230, v229);\n        v136 = v230;\n        v138 = v228;\n        goto lab_0x402770;\n    }\n    uint32_t v231 = v210 & 16; // 0x4028cf\n    int64_t v232 = v231; // 0x4028cf\n    if (v231 == 0) {\n        int64_t v233; // 0x401fd0\n        uint64_t v234 = v233;\n        int64_t v235; // 0x401fd0\n        int64_t v236 = v235;\n        uint64_t v237 = (int64_t)g103; // 0x402ab5\n        uint64_t v238 = v237 - g72; // 0x402ac9\n        int64_t v239 = v238 > v234 ? v234 : v238; // 0x402acf\n        int64_t v240; // 0x401fd0\n        int64_t v241 = g72 + v240; // 0x402ad3\n        int64_t v242 = v239 + g72; // 0x402adf\n        memcpy((int64_t *)v241, (int64_t *)v236, (int32_t)v239);\n        g72 = v242;\n        if (v242 >= v237) {\n            // 0x402af3\n            function_404e50();\n        }\n        int64_t v243 = v234 - v239; // 0x402ad9\n        v136 = v241;\n        v138 = v232;\n        while (v243 != 0) {\n            // 0x402aae\n            v235 = v239 + v236;\n            v240 = g73;\n            v233 = v243;\n            v234 = v233;\n            v236 = v235;\n            v237 = (int64_t)g103;\n            v238 = v237 - g72;\n            v239 = v238 > v234 ? v234 : v238;\n            v241 = g72 + v240;\n            v242 = v239 + g72;\n            memcpy((int64_t *)v241, (int64_t *)v236, (int32_t)v239);\n            g72 = v242;\n            if (v242 >= v237) {\n                // 0x402af3\n                function_404e50();\n            }\n            // 0x402aa5\n            v243 = v234 - v239;\n            v136 = v241;\n            v138 = v232;\n        }\n        goto lab_0x402770;\n    }\n    // 0x4028d9\n    function_405000(v230, v229);\n    int64_t v148 = v134; // 0x4028eb\n    int64_t v149 = v230; // 0x4028eb\n    int64_t v150 = v232; // 0x4028eb\n    int64_t v151 = v133; // 0x4028eb\n    int64_t v152 = v141; // 0x4028eb\n    if (g30 == 4) {\n        goto lab_0x4028f1;\n    }\n    int64_t v244 = g31; // 0x40278d\n    int64_t v245 = g86 + g85; // 0x402794\n    int64_t v246 = g94; // 0x40279e\n    int64_t v161 = v246; // 0x4027ad\n    int64_t v162 = v245; // 0x4027ad\n    int64_t v163 = v244; // 0x4027ad\n    int64_t v164 = v141; // 0x4027ad\n    int64_t v165 = v232; // 0x4027ad\n    int64_t v166 = v134; // 0x4027ad\n    v32 = v232;\n    v130 = v246;\n    v132 = v230;\n    v33 = v133;\n    if (v245 >= (int64_t)(g96 != 0) + v244) {\n        // break (via goto) -> 0x4030a7\n        goto lab_0x4030a7;\n    }\n    goto lab_0x4027b3;\n  lab_0x402c4f:\n    // 0x402c4f\n    if (v168 != 0 || (g95 & 4) == 0) {\n        goto lab_0x402770;\n    }\n    // 0x402c65\n    v178 = v192;\n    v179 = 0;\n    v180 = v192;\n    v181 = 0;\n    if (g104 == 0) {\n        goto lab_0x402c78;\n    } else {\n        goto lab_0x402842;\n    }\n  lab_0x402d2e:;\n    int64_t v247 = function_4083e0(4, (int64_t)g107); // 0x402d3a\n    function_4041e0(0, (int32_t)\"offset overflow while reading file %s\" ^ (int32_t)\"offset overflow while reading file %s\", (int64_t)dcgettext(NULL, \"offset overflow while reading file %s\", 5), v247, v129, v133);\n    int64_t v248 = v247; // 0x402d64\n    goto lab_0x402c36;\n  lab_0x402bf9:;\n    int64_t v567 = function_4084b0(0, 3, (int64_t)g107); // 0x402c07\n    char * v568 = dcgettext(NULL, \"%s: cannot seek\", 5); // 0x402c1b\n    int32_t v569 = *(int32_t *)*v185; // 0x402c2d\n    function_4041e0(0, v569, (int64_t)v568, v567, v129, v133);\n    v248 = v567;\n    goto lab_0x402c36;\n  lab_0x402c36:\n    // 0x402c36\n    *(char *)&g80 = 0;\n    g79 = 29;\n    *v184 = 1;\n    v192 = v248;\n    goto lab_0x402c4f;\n  lab_0x403556:\n    // 0x403556\n    sigaddset((struct _TYPEDEF_sigset_t *)&g63, SIGBUS);\n    int64_t v249; // 0x401fd0\n    int64_t v250 = v249; // 0x403565\n    int64_t v251; // 0x401fd0\n    int64_t v252 = v251; // 0x403565\n    goto lab_0x402006;\n  lab_0x402006:;\n    // 0x402006\n    int64_t v253; // bp-248, 0x401fd0\n    int64_t v12 = &v253; // 0x401fe4\n    int64_t v254 = v252;\n    int64_t v255 = v250;\n    int64_t v256 = v3;\n    int64_t v257 = v1;\n    int64_t v47 = v12 + 32; // 0x402008\n    struct sigaction * oact = (struct sigaction *)v47; // 0x402012\n    sigaction(SIGINT, NULL, oact);\n    int64_t * v258 = (int64_t *)v47; // 0x402017\n    if (*v258 != 1) {\n        // 0x40201f\n        sigaddset((struct _TYPEDEF_sigset_t *)&g63, SIGINT);\n    }\n    int128_t v259 = __asm_movdqa(*(int128_t *)&g63); // 0x40202e\n    int128_t v260 = __asm_movdqa(g64); // 0x402036\n    int128_t v261 = __asm_movdqa(g65); // 0x402048\n    int128_t v262 = __asm_movdqa(g66); // 0x402050\n    int128_t v263 = __asm_movdqa(g67); // 0x402058\n    int128_t v264 = __asm_movdqa(g68); // 0x402060\n    __asm_movups(*(int128_t *)(v12 + 40), v259);\n    int128_t v265 = __asm_movdqa(g69); // 0x40206d\n    int128_t v266 = __asm_movdqa(g70); // 0x402075\n    int64_t v56 = v12 + 56; // 0x40207d\n    __asm_movups(*(int128_t *)v56, v260);\n    __asm_movups(*(int128_t *)(v12 + 72), v261);\n    __asm_movups(*(int128_t *)(v12 + 88), v262);\n    __asm_movups(*(int128_t *)(v12 + 104), v263);\n    __asm_movups(*(int128_t *)(v12 + 120), v264);\n    __asm_movups(*(int128_t *)(v12 + 136), v265);\n    __asm_movups(*(int128_t *)(v12 + 152), v266);\n    int32_t v267 = sigismember((struct _TYPEDEF_sigset_t *)&g63, SIGBUS); // 0x4020a6\n    int64_t v268 = v47; // 0x4020ad\n    if (v267 != 0) {\n        // 0x40330d\n        *v258 = 0x403d40;\n        *(int32_t *)(v12 + 168) = 0;\n        sigaction(SIGBUS, oact, NULL);\n        v268 = 0;\n    }\n    int32_t v269 = sigismember((struct _TYPEDEF_sigset_t *)&g63, SIGINT); // 0x4020bd\n    int64_t v270 = v268; // 0x4020c4\n    if (v269 != 0) {\n        // 0x4032e3\n        *v258 = 0x403d30;\n        *(int32_t *)(v12 + 168) = -0x40000000;\n        sigaction(SIGINT, oact, NULL);\n        v270 = 0;\n    }\n    // 0x4020ca\n    function_406a10(*(int64_t *)v257);\n    setlocale(LC_ALL, (char *)&g19);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_40da80(0x404720, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v270);\n    int32_t v271 = getpagesize(); // 0x402104\n    *(int64_t *)(v12 - 8) = 0;\n    int64_t v272 = v2 & 0xffffffff; // 0x402112\n    *(int64_t *)(v12 - 16) = (int64_t)\"Stuart Kemp\";\n    *(int64_t *)(v12 - 24) = (int64_t)\"David MacKenzie\";\n    *(int64_t *)(v12 - 32) = (int64_t)\"Paul Rubin\";\n    g105 = v271;\n    function_406900(v272, v257, \"dd\", \"coreutils\", (int64_t)g32, 0x405460);\n    g27 = 0;\n    int64_t v273 = function_40a500(v272, v257, (int64_t *)&g19, &g5, 0, 0x405460); // 0x402163\n    if ((int32_t)v273 != -1) {\n        // 0x403915\n        function_405460(1);\n        // UNREACHABLE\n    }\n    int64_t v274 = 0;\n    *(char *)(v274 + (int64_t)&g54) = (char)v274;\n    int64_t v275 = v274 + 1; // 0x402188\n    while (v274 != 255) {\n        // 0x402178\n        v274 = v275;\n        *(char *)(v274 + (int64_t)&g54) = (char)v274;\n        v275 = v274 + 1;\n    }\n    int64_t v276 = g41; // 0x40218a\n    int64_t v83; // 0x401fd0\n    int64_t v89; // 0x401fd0\n    int64_t v90; // 0x401fd0\n    int64_t v91; // 0x401fd0\n    int64_t v92; // 0x401fd0\n    int64_t v82; // 0x401fd0\n    int64_t v88; // 0x401fd0\n    int64_t v87; // 0x401fd0\n    int64_t v86; // 0x401fd0\n    if (v2 > v276) {\n        // 0x402198\n        *(int64_t *)(v12 + 8) = 0;\n        v82 = 0;\n        v83 = (0x100000000 * v276 >> 29) + v257;\n        goto lab_0x4021c8;\n    } else {\n        // 0x402a52\n        *(int64_t *)(v12 + 8) = 0;\n        v86 = v257;\n        v87 = -1;\n        v88 = 0;\n        v89 = v256;\n        v90 = 0;\n        v91 = v255;\n        v92 = v254;\n        goto lab_0x402a62;\n    }\n  lab_0x4021c8:;\n    int64_t v106 = v83;\n    int64_t str = *(int64_t *)v106; // 0x4021c8\n    char * found_char_pos = strchr((char *)str, 61); // 0x4021d4\n    int64_t v277 = v82; // 0x4021dc\n    int64_t v278 = str; // 0x4021dc\n    int64_t v81; // 0x401fd0\n    int64_t v107; // 0x401fd0\n    int64_t v73; // 0x401fd0\n    int64_t v108; // 0x401fd0\n    int64_t v71; // 0x401fd0\n    int64_t v85; // 0x401fd0\n    int64_t v75; // 0x401fd0\n    int64_t v105; // 0x401fd0\n    int64_t v77; // 0x401fd0\n    int64_t v104; // 0x401fd0\n    int64_t v79; // 0x401fd0\n    int64_t v103; // 0x4021e2\n    if (found_char_pos == NULL) {\n        goto lab_0x403980;\n    } else {\n        // 0x4021e2\n        char v279; // 0x401fd0\n        int64_t v280; // 0x401fd0\n        while (*(char *)v280 == v279) {\n            // 0x402209\n            int64_t v281; // 0x401fd0\n            int64_t v282 = v281;\n            int64_t v283; // 0x401fd0\n            int64_t v284 = v283 + 1; // 0x4021f8\n            int64_t v285 = v282 + 1; // 0x4021fc\n            char v286 = *(char *)v285; // 0x402209\n            v279 = v286;\n            v281 = v285;\n            v280 = v284;\n            if (v286 == 0) {\n                char v287 = *(char *)v284; // 0x402210\n                if (v287 != 0 == (v287 != 61)) {\n                    goto lab_0x402920;\n                } else {\n                    // 0x40221f\n                    g107 = v103;\n                    v79 = v104;\n                    v77 = v105;\n                    v75 = v103;\n                    v81 = v106;\n                    v73 = v107;\n                    v71 = v108;\n                    v85 = str;\n                    goto lab_0x402226;\n                }\n            }\n            v283 = v280;\n            char v288 = v279;\n            char v289 = *(char *)v283; // 0x402200\n        }\n        goto lab_0x402920;\n    }\n  lab_0x402a62:;\n    int64_t v290 = v92;\n    int64_t v291 = v91;\n    int64_t v292 = v90;\n    int64_t v293 = v89;\n    int64_t v294 = v88;\n    int64_t v295 = v87;\n    int64_t v296 = v86;\n    g94 |= 2048;\n    int32_t v297 = g104; // 0x402a74\n    if (g104 == 0) {\n        // 0x402a76\n        g104 = 512;\n        v297 = 512;\n    }\n    int32_t v298 = v297;\n    int32_t v94 = g103; // 0x402a89\n    int32_t v95 = v298; // 0x402a89\n    int64_t v96 = v296; // 0x402a89\n    int64_t v97 = v295; // 0x402a89\n    int64_t v98 = v294; // 0x402a89\n    int64_t v99 = v293; // 0x402a89\n    int64_t v100 = v292; // 0x402a89\n    int64_t v101 = v291; // 0x402a89\n    int64_t v102 = v290; // 0x402a89\n    if (g103 == 0) {\n        // 0x402a8f\n        g103 = 512;\n        v94 = 512;\n        v95 = v298;\n        v96 = v296;\n        v97 = v295;\n        v98 = v294;\n        v99 = v293;\n        v100 = v292;\n        v101 = v291;\n        v102 = v290;\n    }\n    goto lab_0x402246;\n  lab_0x403980:;\n    int64_t v458 = function_408630(v278); // 0x403983\n    function_4041e0(0, (int32_t)\"unrecognized operand %s\" ^ (int32_t)\"unrecognized operand %s\", (int64_t)dcgettext(NULL, \"unrecognized operand %s\", 5), v458, v277, 0x405460);\n    // 0x403915\n    function_405460(1);\n    // UNREACHABLE\n  lab_0x402246:;\n    int64_t v299 = v102;\n    int64_t v300 = v101;\n    int64_t v301 = v100;\n    int64_t v302 = v99;\n    int64_t v303 = v98;\n    uint64_t v304 = v97;\n    int64_t v305 = v96;\n    int32_t v306 = v95; // 0x4022d4\n    int32_t v307 = v94; // 0x4022ff\n    if (g102 == 0) {\n        // 0x402250\n        g94 &= -25;\n    }\n    int32_t v308 = g92; // 0x402257\n    int32_t v309 = v308; // 0x402262\n    if ((v308 & 0x101000) != 0) {\n        int32_t v310 = v308 | 0x101000; // 0x402264\n        g92 = v310;\n        v309 = v310;\n    }\n    uint32_t v311 = g90; // 0x40226f\n    uint32_t v312; // 0x40227f\n    int32_t v313; // 0x401fd0\n    int64_t v314; // 0x401fd0\n    int64_t v315; // 0x401fd0\n    uint32_t v316; // 0x402314\n    int64_t v317; // 0x40226f\n    int64_t v318; // 0x40227f\n    if (v311 % 2 != 0) {\n        // 0x4038e1\n        v314 = function_408630((int64_t)\"fullblock\");\n        v315 = (int64_t)\"invalid output flag\";\n        goto lab_0x4038f8;\n    } else {\n        // 0x40227f\n        v312 = v309;\n        if ((v312 & 16) != 0) {\n            goto lab_0x403b57;\n        } else {\n            // 0x40228e\n            v317 = v311;\n            if ((v317 & 12) != 0) {\n                int64_t v319 = (v317 & 4) == 0 ? (int64_t)\"skip_bytes\" : (int64_t)\"count_bytes\"; // 0x403b81\n                v314 = function_408630(v319);\n                v315 = (int64_t)\"invalid output flag\";\n                goto lab_0x4038f8;\n            } else {\n                // 0x402298\n                v318 = v312;\n                if ((v318 & 8) == 0) {\n                    if (v301 != 0) {\n                        // 0x402fbf\n                        g101 = v301;\n                    }\n                } else {\n                    if (v301 != 0) {\n                        uint64_t v320 = (int64_t)v306; // 0x4022ab\n                        g101 = v301 / v320;\n                        g100 = v301 % v320;\n                    }\n                }\n                if ((v318 & 4) == 0) {\n                    if (v304 != -1) {\n                        // 0x402faa\n                        g31 = v304;\n                    }\n                } else {\n                    if (v304 != -1) {\n                        uint64_t v321 = (int64_t)v306; // 0x4022d4\n                        g31 = v304 / v321;\n                        g96 = v304 % v321;\n                    }\n                }\n                // 0x4022e9\n                v185 = (int64_t *)(v12 + 8);\n                uint64_t v322 = *v185; // 0x4022e9\n                if ((v317 & 16) == 0) {\n                    if (v322 != 0) {\n                        // 0x403007\n                        g99 = v322;\n                    }\n                } else {\n                    if (v322 != 0) {\n                        uint64_t v323 = (int64_t)v307; // 0x4022ff\n                        g99 = v322 / v323;\n                        g98 = v322 % v323;\n                    }\n                }\n                // 0x402314\n                v316 = g94;\n                uint32_t v324 = v312 % 2; // 0x40231c\n                if ((v316 & 2048 || v324) != 0) {\n                    // 0x402e66\n                    g76 = 0;\n                    v313 = v324 == 0 ? 0x404900 : 0x404a10;\n                    goto lab_0x402349;\n                } else {\n                    // 0x40232f\n                    if (g101 == 0) {\n                        // 0x403412\n                        if ((int64_t)g31 < 0xffffffffffffffff) {\n                            // 0x40233d\n                            g76 = 1;\n                            v313 = 0x404900;\n                            goto lab_0x402349;\n                        } else {\n                            if (((v311 | v312) & 0x4000) != 0) {\n                                // 0x40233d\n                                g76 = 1;\n                                v313 = 0x404900;\n                                goto lab_0x402349;\n                            } else {\n                                // 0x403434\n                                g76 = 0;\n                                v313 = 0x404900;\n                                goto lab_0x402349;\n                            }\n                        }\n                    } else {\n                        // 0x40233d\n                        g76 = 1;\n                        v313 = 0x404900;\n                        goto lab_0x402349;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402920:;\n    int64_t v325 = (int64_t)\"of\"; // 0x402928\n    char v326 = 111;\n    int64_t v327 = str;\n    while (*(char *)v327 == v326) {\n        int64_t v328 = v327 + 1; // 0x40292d\n        int64_t v329 = v325 + 1; // 0x402931\n        char v330 = *(char *)v329; // 0x40293a\n        int64_t v331 = v328; // 0x40293f\n        char v332 = v330; // 0x40293f\n        v325 = v329;\n        if (v330 == 0) {\n            char v333 = *(char *)v328; // 0x402941\n            if (v333 != 61 == (v333 != 0)) {\n                goto lab_0x402960;\n            } else {\n                // 0x40294c\n                g106 = v103;\n                v79 = v104;\n                v77 = v105;\n                v75 = v103;\n                v81 = v106;\n                v73 = v107;\n                v71 = v108;\n                v85 = str;\n                goto lab_0x402226;\n            }\n        }\n        v326 = v332;\n        v327 = v331;\n    }\n    goto lab_0x402960;\n  lab_0x402960:;\n    int64_t v334 = (int64_t)\"conv\"; // 0x402968\n    char v335 = 99;\n    int64_t v336 = str;\n    while (*(char *)v336 == v335) {\n        int64_t v337 = v336 + 1; // 0x40296d\n        int64_t v338 = v334 + 1; // 0x402971\n        char v339 = *(char *)v338; // 0x40297a\n        int64_t v340 = v337; // 0x40297f\n        char v341 = v339; // 0x40297f\n        v334 = v338;\n        if (v339 == 0) {\n            char v342 = *(char *)v337; // 0x402981\n            if (v342 != 0 == (v342 != 61)) {\n                goto lab_0x4029b0;\n            } else {\n                int64_t v343 = function_4059d0(v103, \"ascii\", 0, \"invalid conversion\"); // 0x40299b\n                g94 |= (int32_t)v343;\n                v79 = v104;\n                v77 = v105;\n                v75 = v103;\n                v81 = v106;\n                v73 = v107;\n                v71 = v108;\n                v85 = str;\n                goto lab_0x402226;\n            }\n        }\n        v335 = v341;\n        v336 = v340;\n    }\n    goto lab_0x4029b0;\n  lab_0x4038f8:\n    // 0x4038f8\n    function_4041e0(0, 0, (int64_t)\"%s: %s\", (int64_t)dcgettext(NULL, (char *)v315, 5), v314, 0x405460);\n    // 0x403915\n    function_405460(1);\n    // UNREACHABLE\n  lab_0x403b57:\n    // 0x403b57\n    v314 = function_408630((int64_t)\"seek_bytes\");\n    v315 = (int64_t)\"invalid input flag\";\n    goto lab_0x4038f8;\n  lab_0x4029b0:;\n    char v344 = 105; // 0x4029bd\n    int64_t v345 = (int64_t)\"iflag\"; // 0x4029bd\n    int64_t v346 = str;\n    while (*(char *)v346 == v344) {\n        int64_t v347 = v346 + 1; // 0x4029c0\n        int64_t v348 = v345 + 1; // 0x4029c4\n        char v349 = *(char *)v348; // 0x4029cd\n        int64_t v350 = v347; // 0x4029d2\n        v344 = v349;\n        v345 = v348;\n        if (v349 == 0) {\n            // 0x4029d4\n            switch (*(char *)v347) {\n                case 61: {\n                    goto lab_0x4029db;\n                }\n                case 0: {\n                    goto lab_0x4029db;\n                }\n                default: {\n                    goto lab_0x4029fe;\n                }\n            }\n        }\n        v346 = v350;\n    }\n    goto lab_0x4029fe;\n  lab_0x4029fe:;\n    char v351 = 111; // 0x402a0b\n    int64_t v352 = (int64_t)\"oflag\"; // 0x402a0b\n    int64_t v353 = str;\n    while (*(char *)v353 == v351) {\n        int64_t v354 = v353 + 1; // 0x402a10\n        int64_t v355 = v352 + 1; // 0x402a14\n        char v356 = *(char *)v355; // 0x402a21\n        int64_t v357 = v354; // 0x402a26\n        v351 = v356;\n        v352 = v355;\n        if (v356 == 0) {\n            // 0x402a28\n            switch (*(char *)v354) {\n                case 61: {\n                    goto lab_0x402a33;\n                }\n                case 0: {\n                    goto lab_0x402a33;\n                }\n                default: {\n                    goto lab_0x403386;\n                }\n            }\n        }\n        v353 = v357;\n    }\n    goto lab_0x403386;\n  lab_0x403386:;\n    char v358 = 115; // 0x403393\n    int64_t v359 = (int64_t)\"status\"; // 0x403393\n    int64_t v360 = str;\n    while (*(char *)v360 == v358) {\n        int64_t v361 = v360 + 1; // 0x403398\n        int64_t v362 = v359 + 1; // 0x40339c\n        char v363 = *(char *)v362; // 0x4033a9\n        int64_t v364 = v361; // 0x4033ae\n        v358 = v363;\n        v359 = v362;\n        if (v363 == 0) {\n            char v365 = *(char *)v361; // 0x4033b0\n            if (v365 != 61 == (v365 != 0)) {\n                goto lab_0x403676;\n            } else {\n                // 0x4033bf\n                g30 = function_4059d0(v103, \"none\", 1, \"invalid status level\");\n                v79 = v104;\n                v77 = v105;\n                v75 = v103;\n                v81 = v106;\n                v73 = v107;\n                v71 = v108;\n                v85 = str;\n                goto lab_0x402226;\n            }\n        }\n        v360 = v364;\n    }\n    goto lab_0x403676;\n  lab_0x402349:\n    // 0x402349\n    g55 = v313;\n    g92 = v312 & -2;\n    int64_t v546; // 0x401fd0\n    int64_t v464; // 0x401fd0\n    uint64_t v462; // 0x402314\n    if ((v316 % 8 & v316 + 7) != 0) {\n        // 0x403b9c\n        function_4041e0(1, (int32_t)\"cannot combine any two of {ascii,ebcdic,ibm}\" ^ (int32_t)\"cannot combine any two of {ascii,ebcdic,ibm}\", (int64_t)dcgettext(NULL, \"cannot combine any two of {ascii,ebcdic,ibm}\", 5), v318, v303, 0x405460);\n        goto lab_0x403bbe;\n    } else {\n        int32_t v547 = v316 & 24; // 0x40236d\n        char * v548; // 0x403b41\n        if ((v547 + 31 & v547) != 0) {\n            // 0x403b13\n            function_4041e0(1, (int32_t)\"cannot combine block and unblock\" ^ (int32_t)\"cannot combine block and unblock\", (int64_t)dcgettext(NULL, \"cannot combine block and unblock\", 5), v318, v303, 0x405460);\n            // 0x403b35\n            v548 = dcgettext(NULL, \"cannot combine lcase and ucase\", 5);\n            function_4041e0(1, (int32_t)\"cannot combine lcase and ucase\" ^ (int32_t)\"cannot combine lcase and ucase\", (int64_t)v548, v318, v303, 0x405460);\n            goto lab_0x403b57;\n        } else {\n            int32_t v549 = v316 & 96; // 0x40237d\n            if ((v549 + 127 & v549) != 0) {\n                // 0x403b35\n                v548 = dcgettext(NULL, \"cannot combine lcase and ucase\", 5);\n                function_4041e0(1, (int32_t)\"cannot combine lcase and ucase\" ^ (int32_t)\"cannot combine lcase and ucase\", (int64_t)v548, v318, v303, 0x405460);\n                goto lab_0x403b57;\n            } else {\n                int32_t v550 = v316 & 0x3000; // 0x40238d\n                if ((v550 + 0x3fff & v550) != 0) {\n                    goto lab_0x403bbe;\n                } else {\n                    int32_t v551 = v312 & 0x4002; // 0x4023a1\n                    int32_t v552 = v311 & 0x4002; // 0x4023a6\n                    uint32_t v553 = v552 + 0x7fff & v552 | v551 + 0x7fff & v551; // 0x4023b6\n                    v182 = (int32_t *)(v12 + 28);\n                    *v182 = v553;\n                    v546 = v553;\n                    if (v553 != 0) {\n                        goto lab_0x403be0;\n                    } else {\n                        int64_t v554 = v318; // 0x4023c5\n                        if ((v318 & 2) != 0) {\n                            // 0x4023c7\n                            g59 = 1;\n                            g57 = ((int64_t)g96 | (int64_t)g31) == 0;\n                            v554 = v318 & 0xfffffffc;\n                            g92 = v554;\n                        }\n                        // 0x4023ec\n                        if ((v317 & 2) != 0) {\n                            // 0x4023f2\n                            g58 = 1;\n                            *(char *)&g56 = (char)(((int64_t)g96 | (int64_t)g31) == 0);\n                            g90 = v311 & -3;\n                        }\n                        // 0x402417\n                        v462 = (int64_t)v316;\n                        int64_t v555 = (int64_t)&g54; // 0x40241b\n                        int64_t v556 = v554; // 0x40241b\n                        if (v462 % 2 != 0) {\n                            char * v557 = (char *)v555; // 0x402430\n                            int64_t v558 = v555 + 1; // 0x402433\n                            *v557 = *(char *)((int64_t)*v557 + (int64_t)&g2);\n                            v555 = v558;\n                            while (v558 != (int64_t)&g55) {\n                                // 0x402430\n                                v557 = (char *)v555;\n                                v558 = v555 + 1;\n                                *v557 = *(char *)((int64_t)*v557 + (int64_t)&g2);\n                                v555 = v558;\n                            }\n                            // 0x402446\n                            g89 = 1;\n                            v556 = &g55;\n                        }\n                        if ((v462 & 64) == 0) {\n                            // 0x403013\n                            v464 = v556;\n                            if ((v462 & 32) == 0) {\n                                goto lab_0x402489;\n                            } else {\n                                int32_t * v559 = *__ctype_tolower_loc(); // 0x403027\n                                int64_t v560 = (int64_t)&g54; // 0x40302f\n                                char * v561 = (char *)v560; // 0x403030\n                                v560++;\n                                int32_t v562 = *(int32_t *)(4 * (int64_t)*v561 + (int64_t)v559); // 0x403037\n                                *v561 = (char)v562;\n                                while (v560 != (int64_t)&g55) {\n                                    // 0x403030\n                                    v561 = (char *)v560;\n                                    v560++;\n                                    v562 = *(int32_t *)(4 * (int64_t)*v561 + (int64_t)v559);\n                                    *v561 = (char)v562;\n                                }\n                                // 0x402482\n                                g89 = 1;\n                                v464 = &g55;\n                                goto lab_0x402489;\n                            }\n                        } else {\n                            int32_t * v563 = *__ctype_toupper_loc(); // 0x402461\n                            int64_t v564 = (int64_t)&g54; // 0x402469\n                            char * v565 = (char *)v564; // 0x402470\n                            v564++;\n                            int32_t v566 = *(int32_t *)(4 * (int64_t)*v565 + (int64_t)v563); // 0x402477\n                            *v565 = (char)v566;\n                            while (v564 != (int64_t)&g55) {\n                                // 0x402470\n                                v565 = (char *)v564;\n                                v564++;\n                                v566 = *(int32_t *)(4 * (int64_t)*v565 + (int64_t)v563);\n                                *v565 = (char)v566;\n                            }\n                            // 0x402482\n                            g89 = 1;\n                            v464 = &g55;\n                            goto lab_0x402489;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x403676:;\n    int64_t * v366 = (int64_t *)(v12 + 16); // 0x40367e\n    *v366 = v103;\n    int32_t * v122 = (int32_t *)v47;\n    *v122 = 0;\n    int64_t v111 = function_4042d0(v103, v47); // 0x40368b\n    int64_t v115 = *v366; // 0x403690\n    int64_t v367 = (int64_t)\"ibs\"; // 0x40369d\n    char v368 = 105; // 0x40369d\n    int64_t v369 = str;\n    int64_t v119; // 0x401fd0\n    int64_t v121; // 0x401fd0\n    while (*(char *)v369 == v368) {\n        int64_t v370 = v369 + 1; // 0x4036a2\n        int64_t v371 = v367 + 1; // 0x4036a6\n        char v372 = *(char *)v371; // 0x4036b4\n        v367 = v371;\n        int64_t v373 = v370; // 0x4036ba\n        v368 = v372;\n        if (v372 == 0) {\n            char v374 = *(char *)v370; // 0x4036bc\n            if (v374 != 61 == (v374 != 0)) {\n                goto lab_0x4037c4;\n            } else {\n                // 0x4036cc\n                g104 = v111;\n                uint64_t v375 = -4 - 2 * (int64_t)g105; // 0x4036eb\n                v121 = v375 < 0x7fffffffffffffff ? v375 : 0x7fffffffffffffff;\n                v119 = v108;\n                goto lab_0x4036f5;\n            }\n        }\n        v369 = v373;\n    }\n    goto lab_0x4037c4;\n  lab_0x4037c4:;\n    int64_t v376 = (int64_t)\"obs\"; // 0x4037cc\n    char v377 = 111; // 0x4037cc\n    int64_t v378 = str;\n    while (*(char *)v378 == v377) {\n        int64_t v379 = v378 + 1; // 0x4037d1\n        int64_t v380 = v376 + 1; // 0x4037d5\n        char v381 = *(char *)v380; // 0x4037e3\n        v376 = v380;\n        int64_t v382 = v379; // 0x4037e9\n        v377 = v381;\n        if (v381 == 0) {\n            char v383 = *(char *)v379; // 0x4037eb\n            if (v383 != 61 == (v383 != 0)) {\n                goto lab_0x40391f;\n            } else {\n                int64_t v384 = g105; // 0x4037fb\n                g103 = v111;\n                uint64_t v385 = -v384; // 0x403813\n                int64_t v386 = v385 < 0x7fffffffffffffff | v384 == -0x7fffffffffffffff ? v385 : 0x7fffffffffffffff; // 0x403819\n                v121 = v386;\n                v119 = v108;\n                goto lab_0x4036f5;\n            }\n        }\n        v378 = v382;\n    }\n    goto lab_0x40391f;\n  lab_0x403bbe:\n    // 0x403bbe\n    function_4041e0(1, (int32_t)\"cannot combine excl and nocreat\" ^ (int32_t)\"cannot combine excl and nocreat\", (int64_t)dcgettext(NULL, \"cannot combine excl and nocreat\", 5), v318, v303, 0x405460);\n    v546 = v305;\n    goto lab_0x403be0;\n  lab_0x40391f:;\n    int64_t v387 = (int64_t)\"bs\"; // 0x403927\n    char v388 = 98; // 0x403927\n    int64_t v389 = str;\n    while (*(char *)v389 == v388) {\n        int64_t v390 = v389 + 1; // 0x40392c\n        int64_t v391 = v387 + 1; // 0x403930\n        char v392 = *(char *)v391; // 0x40393e\n        v387 = v391;\n        int64_t v393 = v390; // 0x403944\n        v388 = v392;\n        if (v392 == 0) {\n            char v394 = *(char *)v390; // 0x403946\n            if (v394 != 61 == (v394 != 0)) {\n                goto lab_0x403822;\n            } else {\n                uint64_t v395 = -4 - 2 * (int64_t)g105; // 0x403971\n                v121 = v395 < 0x7fffffffffffffff ? v395 : 0x7fffffffffffffff;\n                v119 = v111;\n                goto lab_0x4036f5;\n            }\n        }\n        v389 = v393;\n    }\n    goto lab_0x403822;\n  lab_0x403be0:;\n    int64_t v431 = function_4041e0(1, (int32_t)\"cannot combine direct and nocache\" ^ (int32_t)\"cannot combine direct and nocache\", (int64_t)dcgettext(NULL, \"cannot combine direct and nocache\", 5), v318, v303, 0x405460); // 0x403bfd\n    int64_t v432 = v546; // 0x403bfd\n    int64_t v433 = v303; // 0x403bfd\n    int64_t v434 = v302; // 0x403bfd\n    int64_t v435 = v301; // 0x403bfd\n    int64_t v436 = v300; // 0x403bfd\n    int64_t v437 = v299; // 0x403bfd\n    goto lab_0x403c02;\n  lab_0x403822:;\n    int64_t v396 = (int64_t)\"cbs\"; // 0x40382a\n    char v397 = 99; // 0x40382a\n    int64_t v398 = str;\n    int64_t v399 = v111; // 0x40383b\n    int64_t v400 = v104; // 0x40383b\n    int64_t v401 = v105; // 0x40383b\n    int64_t v402 = v115; // 0x40383b\n    int64_t v403 = v106; // 0x40383b\n    int64_t v404 = v107; // 0x40383b\n    int64_t v405 = v108; // 0x40383b\n    int64_t v406 = str; // 0x40383b\n    int64_t v116; // 0x401fd0\n    int64_t v117; // 0x401fd0\n    int64_t v118; // 0x401fd0\n    int64_t v120; // 0x401fd0\n    int64_t v114; // 0x401fd0\n    int64_t v113; // 0x401fd0\n    int64_t v112; // 0x401fd0\n    while (*(char *)v398 == v397) {\n        int64_t v407 = v398 + 1; // 0x40382f\n        int64_t v408 = v396 + 1; // 0x403833\n        char v409 = *(char *)v408; // 0x403841\n        v396 = v408;\n        int64_t v410 = v407; // 0x403847\n        v397 = v409;\n        if (v409 == 0) {\n            char v411 = *(char *)v407; // 0x403849\n            v399 = v111;\n            v400 = v104;\n            v401 = v105;\n            v402 = v115;\n            v403 = v106;\n            v404 = v107;\n            v405 = v108;\n            v406 = str;\n            if (v411 != 61 == (v411 != 0)) {\n                goto lab_0x403ad4;\n            } else {\n                // 0x403859\n                g102 = v111;\n                v112 = v104;\n                v113 = v105;\n                v114 = v115;\n                v116 = v106;\n                v117 = v107;\n                v118 = v108;\n                v120 = str;\n                if (v111 != 0) {\n                    goto lab_0x40379a;\n                } else {\n                    goto lab_0x403869;\n                }\n            }\n        }\n        v398 = v410;\n        v399 = v111;\n        v400 = v104;\n        v401 = v105;\n        v402 = v115;\n        v403 = v106;\n        v404 = v107;\n        v405 = v108;\n        v406 = str;\n    }\n    goto lab_0x403ad4;\n  lab_0x403c02:;\n    int64_t v443 = v437;\n    int64_t v444 = v436;\n    int64_t v445 = v435;\n    int64_t v446 = v434;\n    int64_t v447 = v433;\n    int64_t v448 = v432;\n    int64_t v449 = v431;\n    int64_t v450 = (int64_t)\"count\"; // 0x403c0a\n    char v451 = 99; // 0x403c0a\n    int64_t v452 = v443;\n    v277 = v447;\n    v278 = v443;\n    while (*(char *)v452 == v451) {\n        int64_t v453 = v452 + 1; // 0x403c0f\n        int64_t v454 = v450 + 1; // 0x403c13\n        char v455 = *(char *)v454; // 0x403c21\n        v450 = v454;\n        int64_t v456 = v453; // 0x403c27\n        v451 = v455;\n        if (v455 == 0) {\n            char v457 = *(char *)v453; // 0x403c29\n            v112 = v448;\n            v113 = v449;\n            v114 = v447;\n            v116 = v446;\n            v117 = v445;\n            v118 = v444;\n            v120 = v443;\n            v277 = v447;\n            v278 = v443;\n            if (v457 != 61 == (v457 != 0)) {\n                goto lab_0x403980;\n            } else {\n                goto lab_0x40379a;\n            }\n        }\n        v452 = v456;\n        v277 = v447;\n        v278 = v443;\n    }\n    goto lab_0x403980;\n  lab_0x403ad4:;\n    int64_t v412 = v406;\n    int64_t v413 = v405;\n    int64_t v414 = v404;\n    int64_t v415 = v403;\n    int64_t v416 = v402;\n    int64_t v417 = v401;\n    int64_t v418 = v400;\n    int64_t v419 = v399;\n    int64_t v420 = (int64_t)\"skip\"; // 0x403adc\n    char v421 = 115; // 0x403adc\n    int64_t v422 = v412;\n    while (*(char *)v422 == v421) {\n        int64_t v423 = v422 + 1; // 0x403ae1\n        int64_t v424 = v420 + 1; // 0x403ae5\n        char v425 = *(char *)v424; // 0x403af3\n        v420 = v424;\n        int64_t v426 = v423; // 0x403af9\n        v421 = v425;\n        if (v425 == 0) {\n            char v427 = *(char *)v423; // 0x403afb\n            v112 = v418;\n            v113 = v417;\n            v114 = v416;\n            v116 = v415;\n            v117 = v419;\n            v118 = v413;\n            v120 = v412;\n            if (v427 != 61 == (v427 != 0)) {\n                goto lab_0x40375e;\n            } else {\n                goto lab_0x40379a;\n            }\n        }\n        v422 = v426;\n    }\n    goto lab_0x40375e;\n  lab_0x40375e:;\n    int64_t v428 = (int64_t)\"seek\"; // 0x403766\n    char v429 = 115; // 0x403766\n    int64_t v430 = v412;\n    v431 = v419;\n    v432 = v418;\n    v433 = v416;\n    v434 = v415;\n    v435 = v414;\n    v436 = v413;\n    v437 = v412;\n    while (*(char *)v430 == v429) {\n        int64_t v438 = v430 + 1; // 0x40376b\n        int64_t v439 = v428 + 1; // 0x40376f\n        char v440 = *(char *)v439; // 0x40377d\n        v428 = v439;\n        int64_t v441 = v438; // 0x403783\n        v429 = v440;\n        if (v440 == 0) {\n            char v442 = *(char *)v438; // 0x403785\n            v431 = v419;\n            v432 = v418;\n            v433 = v416;\n            v434 = v415;\n            v435 = v414;\n            v436 = v413;\n            v437 = v412;\n            if (v442 != 61 == (v442 != 0)) {\n                goto lab_0x403c02;\n            } else {\n                // 0x403795\n                *(int64_t *)(v12 + 8) = v419;\n                v112 = v418;\n                v113 = v417;\n                v114 = v416;\n                v116 = v415;\n                v117 = v414;\n                v118 = v413;\n                v120 = v412;\n                goto lab_0x40379a;\n            }\n        }\n        v430 = v441;\n        v431 = v419;\n        v432 = v418;\n        v433 = v416;\n        v434 = v415;\n        v435 = v414;\n        v436 = v413;\n        v437 = v412;\n    }\n    goto lab_0x403c02;\n  lab_0x402489:;\n    int64_t v459 = (int64_t)&g54; // 0x40248d\n    int64_t v460; // 0x401fd0\n    int64_t v461; // 0x401fd0\n    if ((v462 & 2) == 0) {\n        int64_t v463 = v464;\n        v461 = v463;\n        int64_t v465 = (int64_t)&g54; // 0x402fcf\n        if ((v462 & 4) == 0) {\n            goto lab_0x4024cb;\n        } else {\n            char * v466 = (char *)v465; // 0x402fe0\n            int64_t v467 = v465 + 1; // 0x402fe3\n            *v466 = *(char *)((int64_t)*v466 + (int64_t)&g3);\n            v460 = v463;\n            v465 = v467;\n            while (v467 != (int64_t)&g55) {\n                // 0x402fe0\n                v466 = (char *)v465;\n                v467 = v465 + 1;\n                *v466 = *(char *)((int64_t)*v466 + (int64_t)&g3);\n                v460 = v463;\n                v465 = v467;\n            }\n            goto lab_0x4024b6;\n        }\n    } else {\n        char * v468 = (char *)v459; // 0x4024a0\n        int64_t v469 = v459 + 1; // 0x4024a3\n        *v468 = *(char *)((int64_t)*v468 + (int64_t)&g4);\n        v459 = v469;\n        v460 = &g55;\n        while (v469 != (int64_t)&g55) {\n            // 0x4024a0\n            v468 = (char *)v459;\n            v469 = v459 + 1;\n            *v468 = *(char *)((int64_t)*v468 + (int64_t)&g4);\n            v459 = v469;\n            v460 = &g55;\n        }\n        goto lab_0x4024b6;\n    }\n  lab_0x4024cb:;\n    int64_t v470 = v461;\n    int64_t v471 = g107; // 0x4024cb\n    int64_t v472 = g92; // 0x4024d2\n    *v185 = (int64_t)__errno_location();\n    int64_t v473; // 0x401fd0\n    int64_t v474; // 0x401fd0\n    int64_t v475; // 0x401fd0\n    if (v471 == 0) {\n        int64_t v476 = (int64_t)dcgettext(NULL, \"standard input\", 5); // 0x403343\n        g107 = v476;\n        function_4043e0(0, v472, v476);\n        v475 = v470;\n        goto lab_0x402503;\n    } else {\n        // 0x4024ec\n        v475 = 0;\n        if ((int32_t)function_4048b0(0, v471, v472, 0) < 0) {\n            int64_t v477 = function_4083e0(4, (int64_t)g107); // 0x4039fe\n            char * v478 = dcgettext(NULL, \"failed to open %s\", 5); // 0x403a12\n            function_4041e0(1, *(int32_t *)*v185, (int64_t)v478, v477, v303, 0x405460);\n            v474 = v471;\n            v473 = v472;\n            goto lab_0x403a30;\n        } else {\n            goto lab_0x402503;\n        }\n    }\n  lab_0x4024b6:\n    // 0x4024b6\n    g89 = 1;\n    g29 = 37;\n    g28[0] = 64;\n    v461 = v460;\n    goto lab_0x4024cb;\n  lab_0x402503:;\n    int64_t v479 = lseek(0, 0, SEEK_CUR); // 0x40250c\n    int32_t v480 = g106; // 0x402511\n    uint32_t v481 = g90; // 0x402518\n    int64_t v482 = v481; // 0x402518\n    *(char *)&g80 = (char)(v479 >> 63) ^ 1;\n    g78 = v479 > 0 ? v479 : 0;\n    g79 = *(int32_t *)*v185;\n    int64_t v483; // 0x401fd0\n    int64_t v484; // 0x401fd0\n    int64_t v485; // 0x401fd0\n    int64_t v486; // 0x401fd0\n    int64_t v487; // 0x401fd0\n    int64_t v488; // 0x401fd0\n    if (v480 == 0) {\n        int64_t v489 = (int64_t)dcgettext(NULL, \"standard output\", 5); // 0x403576\n        g106 = v489;\n        function_4043e0(1, v482, v489);\n        v485 = v475;\n        v488 = v482;\n        v486 = 1;\n        goto lab_0x40260d;\n    } else {\n        int64_t v490 = v480;\n        uint32_t v491 = g94; // 0x402558\n        int64_t v492 = v491 / 64 & 128 | v481 | 64 * (int32_t)((v491 & 0x1000) == 0); // 0x402577\n        if (g99 != 0) {\n            int64_t v493 = function_4048b0(1, v490, v492 | 2, 438); // 0x403056\n            v487 = v490;\n            if ((int32_t)v493 >= 0) {\n                goto lab_0x4025bb;\n            } else {\n                // 0x403047\n                v483 = g106;\n                v484 = v492;\n                goto lab_0x402598;\n            }\n        } else {\n            uint32_t v494 = v491 & 512;\n            int64_t v495 = v494; // 0x402587\n            v483 = v490;\n            v484 = v495 - ((int64_t)(v494 == 0) | v495) & 512 | v492;\n            goto lab_0x402598;\n        }\n    }\n  lab_0x403a30:;\n    int64_t v496 = function_4083e0(4, (int64_t)g106); // 0x403a3c\n    char * v497 = dcgettext(NULL, \"failed to open %s\", 5); // 0x403a50\n    function_4041e0(1, *(int32_t *)*v185, (int64_t)v497, v496, v303, 0x405460);\n    int64_t v498 = v474; // 0x403a69\n    int64_t v499 = v473; // 0x403a69\n    int64_t v500 = v300; // 0x403a69\n    goto lab_0x403a6e;\n  lab_0x40260d:;\n    int64_t v542 = function_405c40(); // 0x40260d\n    int64_t v543 = g101; // 0x402612\n    int64_t v544 = g100; // 0x402619\n    g83 = v542;\n    g82 = v542 + 0x3b9aca00;\n    int64_t v510 = v485; // 0x40263a\n    int64_t v512 = v488; // 0x40263a\n    int64_t v514 = v486; // 0x40263a\n    int64_t v515 = v303; // 0x40263a\n    int64_t v511; // 0x40263c\n    int64_t v513; // 0x402643\n    if ((v544 || v543) == 0) {\n        goto lab_0x402690;\n    } else {\n        // 0x40263c\n        v511 = g104;\n        v513 = g107;\n        int64_t v545 = g78; // 0x402655\n        if (function_405150(0, v513, v543, v511, &g100) != 0) {\n            goto lab_0x402af5;\n        } else {\n            // 0x40266d\n            if (v545 + v544 + v543 * v511 == g78) {\n                goto lab_0x402690;\n            } else {\n                // 0x402681\n                v510 = v511;\n                v512 = v513;\n                v514 = 0;\n                v515 = &g100;\n                if (g77 != 1) {\n                    goto lab_0x402af5;\n                } else {\n                    goto lab_0x402690;\n                }\n            }\n        }\n    }\n  lab_0x403a6e:\n    // 0x403a6e\n    function_4041e0(1, (int32_t)\"offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks\" ^ (int32_t)\"offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks\", (int64_t)dcgettext(NULL, \"offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks\", 5), v498, v500, 0x405460);\n    int64_t v501 = v498; // 0x403a91\n    int64_t v502 = v500; // 0x403a91\n    int64_t v503 = v499; // 0x403a91\n    int64_t v504 = v500; // 0x403a91\n    goto lab_0x403a96;\n  lab_0x402690:;\n    int64_t v518 = g99; // 0x402690\n    int64_t v519 = g98; // 0x402697\n    int64_t v40 = v510; // 0x4026a4\n    int64_t v42 = v518; // 0x4026a4\n    int64_t v44 = v512; // 0x4026a4\n    int64_t v45 = v514; // 0x4026a4\n    int64_t v46 = v515; // 0x4026a4\n    int64_t v39; // 0x401fd0\n    int64_t v43; // 0x401fd0\n    int64_t v41; // 0x4026b9\n    if ((v519 || v518) == 0) {\n        goto lab_0x402737;\n    } else {\n        // 0x4026aa\n        *v258 = v519;\n        v41 = g103;\n        int64_t v520 = g106; // 0x4026c0\n        int64_t v521 = function_405150(1, v520, v518, v41, v258); // 0x4026c7\n        if (v521 == 0) {\n            int64_t v522 = *v258; // 0x4032bd\n            v40 = v41;\n            v42 = 0;\n            v44 = v520;\n            v45 = 1;\n            v46 = v47;\n            if (v522 == 0) {\n                goto lab_0x402737;\n            } else {\n                // 0x4032cb\n                memset((int64_t *)g73, 0, (int32_t)v522);\n                v43 = v522;\n                v39 = *v258;\n                goto lab_0x40271f;\n            }\n        } else {\n            int64_t v523 = g103; // 0x4026d8\n            memset((int64_t *)g73, 0, g103);\n            int64_t v524 = v521; // 0x4026ed\n            int64_t v525 = g103; // 0x4026f0\n            while (function_404c30(g73, v525) == v525) {\n                // 0x40270f\n                v524--;\n                if (v524 == 0) {\n                    int64_t v526 = *v258; // 0x402715\n                    v43 = v523;\n                    v39 = v526;\n                    v40 = v41;\n                    v42 = v523;\n                    v44 = v525;\n                    v45 = g73;\n                    v46 = v47;\n                    if (v526 == 0) {\n                        goto lab_0x402737;\n                    } else {\n                        goto lab_0x40271f;\n                    }\n                }\n                v525 = g103;\n            }\n            goto lab_0x4039b2;\n        }\n    }\n  lab_0x4025bb:;\n    int64_t v527 = v487;\n    int64_t v528 = g99; // 0x4025bb\n    v485 = 438;\n    v488 = v527;\n    v486 = 1;\n    if (v528 == 0) {\n        goto lab_0x40260d;\n    } else {\n        // 0x4025c7\n        v485 = 438;\n        v488 = v527;\n        v486 = 1;\n        if ((g95 & 2) != 0) {\n            goto lab_0x40260d;\n        } else {\n            int64_t v529 = g103; // 0x4025d0\n            v3 = v528 * v529 + g98;\n            v498 = v528;\n            v499 = v3;\n            v500 = v529;\n            if (v528 > 0x7fffffffffffffff / v529) {\n                goto lab_0x403a6e;\n            } else {\n                int64_t v530 = function_404bf0(v3); // 0x402600\n                v485 = 438;\n                v488 = v527;\n                v486 = v3;\n                if ((int32_t)v530 != 0) {\n                    uint32_t v531 = *(int32_t *)*v185; // 0x4034f2\n                    v2 = v531;\n                    v501 = v2;\n                    v502 = v303;\n                    v503 = v3;\n                    v504 = v529;\n                    if (__fxstat(1, 1, (struct stat *)v47) != 0) {\n                        goto lab_0x403a96;\n                    } else {\n                        // 0x403501\n                        v485 = 438;\n                        v488 = 1;\n                        v486 = 1;\n                        if (((*(int32_t *)v56 & 0xf000) - 0x4000 & -0x5000) != 0) {\n                            goto lab_0x40260d;\n                        } else {\n                            // 0x40351a\n                            v1 = function_4083e0(4, (int64_t)g106);\n                            function_4041e0(1, v531, (int64_t)dcgettext(NULL, \"failed to truncate to %lu bytes in output file %s\", 5), v3, v1, 0x405460);\n                            v249 = v529;\n                            v251 = v299;\n                            goto lab_0x403556;\n                        }\n                    }\n                } else {\n                    goto lab_0x40260d;\n                }\n            }\n        }\n    }\n  lab_0x402598:;\n    int64_t v532 = function_4048b0(1, v483, v484 & 0xfffffffe | 1, 438); // 0x4025ae\n    v487 = v483;\n    v474 = v484;\n    v473 = v482;\n    if ((int32_t)v532 < 0) {\n        goto lab_0x403a30;\n    } else {\n        goto lab_0x4025bb;\n    }\n  lab_0x403a96:;\n    int64_t v505 = function_4083e0(4, (int64_t)g106); // 0x403aa2\n    char * v506 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x403ab6\n    int32_t v507 = *(int32_t *)*v185; // 0x403acb\n    v399 = function_4041e0(1, v507, (int64_t)v506, v505, v502, 0x405460);\n    v400 = v505;\n    v401 = v501;\n    v402 = v502;\n    v403 = v503;\n    v404 = v301;\n    v405 = v504;\n    v406 = v299;\n    goto lab_0x403ad4;\n  lab_0x402737:;\n    int64_t v508 = v46;\n    int64_t v509 = v45;\n    int64_t v19; // 0x401fd0\n    int64_t v20; // 0x401fd0\n    int64_t v18; // 0x401fd0\n    if (((int64_t)g96 || (int64_t)g31) == 0) {\n        // 0x40323d\n        *(int32_t *)(v12 + 16) = 0;\n        v18 = v509;\n        v19 = v508;\n        v20 = 0x405460;\n        goto lab_0x403245;\n    } else {\n        // 0x40274b\n        if (g74 == 0) {\n            // 0x403374\n            function_404a80(v509, v44, v42);\n        }\n        // 0x402759\n        function_404ba0();\n        v184 = (int32_t *)(v12 + 16);\n        *v184 = 0;\n        v135 = v40;\n        v137 = v509;\n        v139 = v508;\n        v140 = 0x405460;\n        v142 = 0;\n        while (true) {\n          lab_0x402770_2:;\n            int64_t v143 = v135; // 0x402777\n            int64_t v144 = v137; // 0x402777\n            int64_t v145 = v139; // 0x402777\n            int64_t v146 = v140; // 0x402777\n            int64_t v147 = v142; // 0x402777\n            v148 = v135;\n            v149 = v137;\n            v150 = v139;\n            v151 = v140;\n            v152 = v142;\n            if (g30 == 4) {\n              lab_0x4028f1:;\n                int64_t v153 = v152;\n                int64_t v154 = v151;\n                int64_t v155 = v150;\n                int64_t v156 = v148;\n                int64_t v157 = function_405c40(); // 0x4028f1\n                v143 = v156;\n                v144 = v149;\n                v145 = v155;\n                v146 = v154;\n                v147 = v153;\n                if (v157 >= g82) {\n                    // 0x402903\n                    function_403d50(v157);\n                    g82 += 0x3b9aca00;\n                    v143 = v156;\n                    v144 = v157;\n                    v145 = v155;\n                    v146 = v154;\n                    v147 = v153;\n                }\n            }\n            int64_t v158 = g31; // 0x40278d\n            int64_t v159 = g86 + g85; // 0x402794\n            int64_t v160 = g94; // 0x40279e\n            v161 = v160;\n            v162 = v159;\n            v163 = v158;\n            v164 = v147;\n            v165 = v145;\n            v166 = v143;\n            v32 = v145;\n            v130 = v160;\n            v132 = v144;\n            v33 = v146;\n            if (v159 >= (int64_t)(g96 != 0) + v158) {\n                // break -> 0x4030a7\n                break;\n            }\n            while (true) {\n              lab_0x4027b3:\n                // 0x4027b3\n                v167 = v166;\n                v129 = v165;\n                v168 = v164;\n                int64_t set_mem = g74; // 0x4027c6\n                if ((v161 & 1280) == 1280) {\n                    int32_t v169 = g94 & 24; // 0x4027c8\n                    int32_t v170 = v169 != 0 ? 32 : v169; // 0x4027da\n                    set_mem = (int64_t)memset((int64_t *)g74, v170, g104);\n                }\n                // 0x4027e5\n                v133 = set_mem;\n                v171 = g55;\n                if (v162 < v163) {\n                    if (v171 >= 0 == (v171 != 0)) {\n                        goto lab_0x402808;\n                    } else {\n                        goto lab_0x402b57;\n                    }\n                } else {\n                    if (v171 < 1) {\n                        goto lab_0x402b57;\n                    } else {\n                        goto lab_0x402808;\n                    }\n                }\n            }\n          lab_0x402d9b:;\n            int64_t v172 = function_404c30(g74, v173); // 0x402da1\n            g84 += (int32_t)v172;\n            v6 = v129;\n            v8 = v133;\n            if (v172 != v173) {\n                goto lab_0x402ef1;\n            }\n            // 0x402db6\n            if (v173 == (int64_t)g104) {\n                // 0x403597\n                g87++;\n                v136 = g74;\n                v138 = v129;\n            } else {\n                // 0x402dc3\n                g88++;\n                v136 = g74;\n                v138 = v129;\n            }\n            goto lab_0x402770;\n        }\n        goto lab_0x4030a7;\n    }\n  lab_0x402af5:\n    // 0x402af5\n    v510 = v511;\n    v512 = v513;\n    v514 = 0;\n    v515 = &g100;\n    if (g30 != 1) {\n        int64_t v516 = function_4084b0(0, 3, (int64_t)g107); // 0x402b10\n        char * v517 = dcgettext(NULL, \"%s: cannot skip to specified offset\", 5); // 0x402b24\n        function_4041e0(0, (int32_t)\"%s: cannot skip to specified offset\" ^ (int32_t)\"%s: cannot skip to specified offset\", (int64_t)v517, v516, (int64_t)&g100, 0x405460);\n        v510 = v516;\n        v512 = (int32_t)\"%s: cannot skip to specified offset\" ^ (int32_t)\"%s: cannot skip to specified offset\";\n        v514 = 0;\n        v515 = &g100;\n    }\n    goto lab_0x402690;\n  lab_0x403245:;\n    int64_t v533 = v18; // 0x40324c\n    if (g59 != 0) {\n        // 0x403483\n        v533 = 0;\n        if ((char)function_4045a0(0, 0) == 0) {\n            int64_t v534 = function_4084b0(0, 3, (int64_t)g107); // 0x4034a2\n            char * v535 = dcgettext(NULL, \"failed to discard cache for: %s\", 5); // 0x4034b6\n            int32_t v536 = *(int32_t *)*(int64_t *)(v12 + 8); // 0x4034c8\n            function_4041e0(0, v536, (int64_t)v535, v534, v19, v20);\n            *(int32_t *)(v12 + 16) = 1;\n            v533 = 0;\n        }\n    }\n    int64_t v25 = v533; // 0x403259\n    if (g58 != 0) {\n        // 0x40325f\n        v25 = 1;\n        if ((char)function_4045a0(1, 0) == 0) {\n            int64_t v537 = function_4084b0(0, 3, (int64_t)g106); // 0x403281\n            char * v538 = dcgettext(NULL, \"failed to discard cache for: %s\", 5); // 0x403295\n            int32_t v539 = *(int32_t *)*(int64_t *)(v12 + 8); // 0x4032a7\n            function_4041e0(0, v539, (int64_t)v538, v537, v19, v20);\n            *(int32_t *)(v12 + 16) = 1;\n            v25 = 0;\n        }\n    }\n    goto lab_0x402f7b;\n  lab_0x4039b2:;\n    int64_t v540 = function_4083e0(4, (int64_t)g106); // 0x4039be\n    char * v541 = dcgettext(NULL, \"writing to %s\", 5); // 0x4039d2\n    function_4041e0(0, *(int32_t *)*v185, (int64_t)v541, v540, v47, 0x405460);\n    function_404e30();\n    // UNREACHABLE\n  lab_0x402f7b:\n    // 0x402f7b\n    function_404760(v25);\n    function_4040b0();\n    function_404810();\n    return (int64_t)*(int32_t *)(v12 + 16);\n  lab_0x4031ca:\n    // 0x4031ca\n    v26 = v27;\n    int64_t v21; // 0x401fd0\n    int64_t v22; // 0x401fd0\n    int64_t v28; // 0x401fd0\n    int64_t v29; // 0x401fd0\n    int64_t v30; // 0x401fd0\n    if ((v31 & 8) == 0) {\n        goto lab_0x4030f9;\n    } else {\n        // 0x4031d4\n        v29 = v27;\n        v21 = v32;\n        v22 = v33;\n        if (g71 == 0) {\n            goto lab_0x403140;\n        } else {\n            // 0x4031e4\n            v30 = v31;\n            v28 = v27;\n            if (g102 > g71) {\n                int64_t v34 = g72; // 0x403209\n                int64_t v35 = v34 + 1; // 0x40321e\n                g72 = v35;\n                *(char *)(g73 + v34) = g28[0];\n                if (v35 >= (int64_t)g103) {\n                    // 0x403236\n                    function_404e50();\n                }\n                int64_t v36 = g71 + 1; // 0x4031f8\n                v26 = v27;\n                int64_t v37 = v36; // 0x403203\n                while (v36 < g102) {\n                    // 0x403209\n                    v34 = g72;\n                    v35 = v34 + 1;\n                    g72 = v35;\n                    *(char *)(g73 + v34) = g28[0];\n                    if (v35 >= (int64_t)g103) {\n                        // 0x403236\n                        function_404e50();\n                    }\n                    // 0x4031f8\n                    v36 = v37 + 1;\n                    v26 = v27;\n                    v37 = v36;\n                }\n                goto lab_0x4030f9;\n            } else {\n                goto lab_0x403109;\n            }\n        }\n    }\n  lab_0x40271f:;\n    int64_t v38 = function_404c30(g73, v39); // 0x402729\n    v40 = v41;\n    v42 = v43;\n    v44 = v39;\n    v45 = g73;\n    v46 = v47;\n    if (v38 != v39) {\n        goto lab_0x4039b2;\n    } else {\n        goto lab_0x402737;\n    }\n  lab_0x4030f9:\n    // 0x4030f9\n    v30 = g94;\n    v28 = v26;\n    v29 = v26;\n    v21 = v32;\n    v22 = v33;\n    if (g71 == 0) {\n        goto lab_0x403140;\n    } else {\n        goto lab_0x403109;\n    }\n  lab_0x403140:;\n    int64_t v48 = v29; // 0x40314a\n    if (g72 != 0) {\n        int64_t v49 = function_404c30(g73, g72); // 0x402ecb\n        g84 += (int32_t)v49;\n        if (v49 != 0) {\n            // 0x402edc\n            g88++;\n        }\n        // 0x402ee4\n        v6 = v21;\n        v8 = v22;\n        v48 = g73;\n        if (v49 == g72) {\n            goto lab_0x403150;\n        } else {\n            goto lab_0x402ef1;\n        }\n    } else {\n        goto lab_0x403150;\n    }\n  lab_0x403109:\n    // 0x403109\n    v29 = v28;\n    v21 = v32;\n    v22 = v33;\n    int64_t v50; // 0x401fd0\n    int64_t v51; // 0x401fd0\n    int64_t v52; // 0x401fd0\n    if ((v30 & 16) == 0) {\n        goto lab_0x403140;\n    } else {\n        int64_t v53 = g72; // 0x40310f\n        int64_t v54 = v53 + 1; // 0x403124\n        g72 = v54;\n        *(char *)(g73 + v53) = g29;\n        v29 = v28;\n        v21 = v32;\n        v22 = v33;\n        v52 = v28;\n        v50 = v32;\n        v51 = v33;\n        if (v54 >= (int64_t)g103) {\n            goto lab_0x403754;\n        } else {\n            goto lab_0x403140;\n        }\n    }\n  lab_0x403150:;\n    int64_t v55 = v48; // 0x403157\n    int64_t v13; // 0x401fd0\n    int64_t v14; // 0x401fd0\n    if (g97 != 0) {\n        // 0x4035a4\n        if (__fxstat(1, 1, (struct stat *)v47) != 0) {\n            // 0x403876\n            v4 = function_4083e0(4, (int64_t)g106);\n            v5 = (int64_t)\"cannot fstat %s\";\n            v7 = v21;\n            v9 = v22;\n            goto lab_0x402f0f;\n        } else {\n            // 0x4035c0\n            v55 = 1;\n            if ((*(int32_t *)v56 & 0xf000) != 0x8000) {\n                goto lab_0x40315d;\n            } else {\n                int32_t v57 = lseek(1, 0, SEEK_CUR); // 0x4035e0\n                v55 = 1;\n                if (v57 < 0) {\n                    goto lab_0x40315d;\n                } else {\n                    int64_t v58 = v57; // 0x4035e0\n                    v55 = 1;\n                    if (*(int64_t *)(v12 + 80) < v58) {\n                        int64_t v59 = function_404bf0(v58); // 0x4035ff\n                        v55 = v58;\n                        if ((int32_t)v59 == 0) {\n                            goto lab_0x40315d;\n                        } else {\n                            int64_t v60 = function_4083e0(4, (int64_t)g106); // 0x403618\n                            char * v61 = dcgettext(NULL, \"failed to truncate to %ld bytes in output file %s\", 5); // 0x40362c\n                            int32_t v62 = *(int32_t *)*(int64_t *)(v12 + 8); // 0x403641\n                            function_4041e0(0, v62, (int64_t)v61, v58, v60, v22);\n                            v13 = v60;\n                            v14 = v22;\n                            goto lab_0x402f2c;\n                        }\n                    } else {\n                        goto lab_0x40315d;\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40315d;\n    }\n  lab_0x40315d:;\n    int32_t v63 = g94; // 0x403169\n    int64_t v64 = v55; // 0x403169\n    int64_t * v23; // 0x401fd0\n    if ((g94 & 0x4000) != 0) {\n        // 0x403445\n        v63 = g94;\n        v64 = 1;\n        if (fdatasync(1) == 0) {\n            goto lab_0x40316f;\n        } else {\n            int64_t * v65 = (int64_t *)(v12 + 8);\n            int32_t v66 = *(int32_t *)*v65; // 0x403462\n            *(int32_t *)(v12 + 28) = v66;\n            if ((v66 - 22 & -17) != 0) {\n                int64_t v67 = function_4083e0(4, (int64_t)g106); // 0x4038a5\n                char * v68 = dcgettext(NULL, \"fdatasync failed for %s\", 5); // 0x4038b9\n                int32_t v69 = *(int32_t *)*v65; // 0x4038cb\n                function_4041e0(0, v69, (int64_t)v68, v67, v21, v22);\n                *(int32_t *)(v12 + 16) = 1;\n            }\n            // 0x403474\n            g94 |= 0x8000;\n            v23 = v65;\n            goto lab_0x403180;\n        }\n    } else {\n        goto lab_0x40316f;\n    }\n  lab_0x403754:\n    // 0x403754\n    function_404e50();\n    v29 = v52;\n    v21 = v50;\n    v22 = v51;\n    goto lab_0x403140;\n  lab_0x402f0f:;\n    char * v10 = dcgettext(NULL, (char *)v5, 5); // 0x402f11\n    int32_t v11 = *(int32_t *)*(int64_t *)(v12 + 8); // 0x402f23\n    function_4041e0(0, v11, (int64_t)v10, v4, v7, v9);\n    v13 = v7;\n    v14 = v9;\n    goto lab_0x402f2c;\n  lab_0x40316f:;\n    int64_t v15 = v64; // 0x403175\n    int64_t v16 = v21; // 0x403175\n    int64_t v17 = v22; // 0x403175\n    if ((int16_t)v63 > -1) {\n        goto lab_0x402f34;\n    } else {\n        // 0x40316f\n        v23 = (int64_t *)(v12 + 8);\n        goto lab_0x403180;\n    }\n  lab_0x402f2c:\n    // 0x402f2c\n    *(int32_t *)(v12 + 16) = 1;\n    v15 = 0;\n    v16 = v13;\n    v17 = v14;\n    goto lab_0x402f34;\n  lab_0x402f34:\n    // 0x402f34\n    if ((int64_t)g31 == 0) {\n        // 0x403361\n        v18 = v15;\n        v19 = v16;\n        v20 = v17;\n        if (g96 != 0) {\n            goto lab_0x402f42;\n        } else {\n            goto lab_0x403245;\n        }\n    } else {\n        goto lab_0x402f42;\n    }\n  lab_0x403180:\n    // 0x403180\n    while (true) {\n        // 0x403180\n        v15 = 1;\n        v16 = v21;\n        v17 = v22;\n        if (fsync(1) == 0) {\n            // break -> 0x402f34\n            break;\n        }\n        // 0x403192\n        if (*(int32_t *)*v23 != 4) {\n            // 0x40319c\n            v4 = function_4083e0(4, (int64_t)g106);\n            v5 = (int64_t)\"fsync failed for %s\";\n            v7 = v21;\n            v9 = v22;\n            goto lab_0x402f0f;\n        }\n    }\n    goto lab_0x402f34;\n  lab_0x402f42:;\n    int64_t v24 = v15; // 0x402f49\n    if ((g57 || g59) != 0) {\n        // 0x402f54\n        function_4045a0(0, 0);\n        v24 = 0;\n    }\n    // 0x402f5d\n    v25 = v24;\n    if ((*(char *)&g56 || g58) != 0) {\n        // 0x402f6f\n        function_4045a0(1, 0);\n        v25 = 1;\n    }\n    goto lab_0x402f7b;\n  lab_0x402226:;\n    int64_t v70 = v71;\n    int64_t v72 = v73;\n    int64_t v74 = v75;\n    int64_t v76 = v77;\n    int64_t v78 = v79;\n    int64_t v80 = v81 + 8; // 0x402226\n    v82 = v74;\n    v83 = v80;\n    if (v78 != v80) {\n        goto lab_0x4021c8;\n    } else {\n        int64_t v84 = v85;\n        v86 = v78;\n        v87 = v76;\n        v88 = v74;\n        v89 = v80;\n        v90 = v72;\n        v91 = 0;\n        v92 = v84;\n        if (v70 == 0) {\n            goto lab_0x402a62;\n        } else {\n            int32_t v93 = v70; // 0x402238\n            g103 = v93;\n            g104 = v93;\n            v94 = v93;\n            v95 = v93;\n            v96 = v78;\n            v97 = v76;\n            v98 = v74;\n            v99 = v80;\n            v100 = v72;\n            v101 = v70;\n            v102 = v84;\n            goto lab_0x402246;\n        }\n    }\n  lab_0x4029db:\n    // 0x4029db\n    g92 |= (int32_t)function_4059d0(v103, \"append\", 0, \"invalid input flag\");\n    v79 = v104;\n    v77 = v105;\n    v75 = v103;\n    v81 = v106;\n    v73 = v107;\n    v71 = v108;\n    v85 = str;\n    goto lab_0x402226;\n  lab_0x402a33:\n    // 0x402a33\n    g90 |= (int32_t)function_4059d0(v103, \"append\", 0, \"invalid output flag\");\n    v79 = v104;\n    v77 = v105;\n    v75 = v103;\n    v81 = v106;\n    v73 = v107;\n    v71 = v108;\n    v85 = str;\n    goto lab_0x402226;\n  lab_0x4036f5:;\n    int32_t * v109; // 0x401fd0\n    int64_t v110; // 0x401fd0\n    if (v111 == 0) {\n        goto lab_0x403869;\n    } else {\n        // 0x4036fe\n        v112 = v104;\n        v113 = v105;\n        v114 = v115;\n        v116 = v106;\n        v117 = v107;\n        v118 = v119;\n        v120 = str;\n        if (v111 > v121) {\n            // 0x403707\n            *v122 = 1;\n            v109 = v122;\n            v110 = v115;\n            goto lab_0x40370f;\n        } else {\n            goto lab_0x40379a;\n        }\n    }\n  lab_0x403869:\n    // 0x403869\n    *v122 = 4;\n    v109 = v122;\n    v110 = v115;\n    goto lab_0x40370f;\n  lab_0x40370f:;\n    int64_t v123 = function_408630(v110); // 0x403712\n    char * v124 = dcgettext(NULL, \"invalid number\", 5); // 0x403726\n    int32_t v125 = *v109 != 1 ? 0 : 75; // 0x403745\n    function_4041e0(1, v125, (int64_t)\"%s: %s\", (int64_t)v124, v123, 0x405460);\n    v52 = 1;\n    v50 = v123;\n    v51 = 0x405460;\n    goto lab_0x403754;\n  lab_0x40379a:;\n    int32_t * v126 = (int32_t *)v47;\n    v79 = v112;\n    v77 = v113;\n    v75 = v114;\n    v81 = v116;\n    v73 = v117;\n    v71 = v118;\n    v85 = v120;\n    v109 = v126;\n    v110 = v114;\n    if (*v126 == 0) {\n        goto lab_0x402226;\n    } else {\n        goto lab_0x40370f;\n    }\n  lab_0x403094:\n    // 0x403094\n    *(char *)&g56 = (v127 | (char)v128) % 2;\n    v32 = v129;\n    v130 = v131;\n    v132 = 0;\n    v33 = v133;\n    goto lab_0x4030a7;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "403c50",
            "funcEndAddr": "403c7b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403c50\n    int64_t v1; // 0x403c50\n    __libc_start_main(0x401fd0, (int32_t)a4, (char **)&v1, (void (*)())0x40da10, (void (*)())0x40da70, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403c7b",
            "funcStartAddr": "403c7b",
            "funcEndAddr": "403c9a",
            "decompiledFuncCode": "int64_t function_403c7b(void) {\n    // 0x403c7b\n    return 0x614348;\n}\n"
        },
        {
            "funcName": "function_403c9a",
            "funcStartAddr": "403c9a",
            "funcEndAddr": "403cd1",
            "decompiledFuncCode": "int64_t function_403c9a(void) {\n    // 0x403c9a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403cd1",
            "funcStartAddr": "403cd1",
            "funcEndAddr": "403d28",
            "decompiledFuncCode": "int64_t function_403cd1(void) {\n    // 0x403cd1\n    if (g46 != 0) {\n        // 0x403d27\n        int64_t result; // 0x403cd1\n        return result;\n    }\n    int64_t v1 = g47; // 0x403d04\n    int64_t result2; // 0x403d16\n    if (g47 >= ((int64_t)&g23 - (int64_t)&g22 >> 3) - 1) {\n        // 0x403d16\n        result2 = function_403c7b();\n        g46 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g23 - (int64_t)&g22 >> 3) - 1) {\n        // 0x403d06\n        v1++;\n    }\n    // 0x403cfa\n    g47 = v1;\n    // 0x403d16\n    result2 = function_403c7b();\n    g46 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403d28",
            "funcStartAddr": "403d28",
            "funcEndAddr": "403d2d",
            "decompiledFuncCode": "int64_t function_403d28(void) {\n    // 0x403d28\n    return function_403c9a();\n}\n"
        },
        {
            "funcName": "function_403d30",
            "funcStartAddr": "403d30",
            "funcEndAddr": "403d37",
            "decompiledFuncCode": "int64_t function_403d30(int64_t a1) {\n    // 0x403d30\n    g62 = a1;\n    int64_t result; // 0x403d30\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d40",
            "funcStartAddr": "403d40",
            "funcEndAddr": "403d50",
            "decompiledFuncCode": "int64_t function_403d40(void) {\n    // 0x403d40\n    g60 = &g61;\n    return &g61;\n}\n"
        },
        {
            "funcName": "function_403d50",
            "funcStartAddr": "403d50",
            "funcEndAddr": "4040a7",
            "decompiledFuncCode": "int64_t function_403d50(int64_t a1) {\n    // 0x403d50\n    int128_t v1; // 0x403d50\n    int128_t v2 = v1;\n    int64_t v3 = a1; // 0x403d68\n    if (a1 == 0) {\n        // 0x403fc8\n        v3 = function_405c40();\n    }\n    // 0x403d6e\n    int64_t v4; // bp-2008, 0x403d50\n    int64_t v5; // 0x403d50\n    int64_t str2 = function_405d70((int64_t)g84, &v4, 465, 1, 1, v5); // 0x403d8a\n    int64_t v6; // bp-1354, 0x403d50\n    int64_t str3 = function_405d70((int64_t)g84, &v6, 497, 1, 1, v5); // 0x403db1\n    int64_t v7 = g83; // 0x403db9\n    int64_t v8; // 0x403d50\n    int64_t v9; // bp-700, 0x403d50\n    int128_t v10; // 0x403d50\n    if (v3 > v7) {\n        uint64_t v11 = v3 - v7; // 0x403dc9\n        __asm_pxor(v2, v2);\n        int128_t v12; // 0x403d50\n        if (v11 < 0) {\n            int128_t v13 = __asm_cvtsi2sd(v11 / 2 | v11 % 2); // 0x403f33\n            v12 = __asm_addsd(v13, v13);\n        } else {\n            // 0x403dd5\n            v12 = __asm_cvtsi2sd(v11);\n        }\n        int64_t v14 = __asm_movsd(__asm_divsd(v12, 0x41cdcd6500000000)); // 0x403dff\n        int64_t str = function_405d70((int64_t)g84, &v9, 465, 0x3b9aca00, v11, v5); // 0x403e05\n        int32_t len = strlen((char *)str); // 0x403e10\n        int128_t v15 = __asm_movsd_1(v14); // 0x403e1c\n        int64_t v16 = str + (int64_t)len;\n        *(int16_t *)v16 = 0x732f;\n        *(char *)(v16 + 2) = 0;\n        v10 = v15;\n        v8 = str;\n    } else {\n        // 0x403f80\n        __snprintf_chk((char *)&v9, 654, 1, 654, \"%s B/s\", dcgettext(NULL, \"Infinity\", 5));\n        v10 = __asm_pxor(v2, v2);\n        v8 = &v9;\n    }\n    int64_t v17 = (int64_t)\"%g s\"; // 0x403e3a\n    if (a1 != 0) {\n        int64_t v18 = (int64_t)g45; // 0x403e3c\n        int64_t * v19 = (int64_t *)(v18 + 40); // 0x403e43\n        uint64_t v20 = *v19; // 0x403e43\n        if (v20 >= *(int64_t *)(v18 + 48)) {\n            int64_t v21 = __asm_movsd(v10); // 0x404075\n            __overflow(g45, 13);\n            __asm_movsd_1(v21);\n            v17 = (int64_t)\"%.0f s\";\n        } else {\n            // 0x403e51\n            *v19 = v20 + 1;\n            *(char *)v20 = 13;\n            v17 = (int64_t)\"%.0f s\";\n        }\n    }\n    // 0x403e62\n    int64_t v22; // bp-2040, 0x403d50\n    __snprintf_chk((char *)&v22, 24, 1, 24, (char *)v17);\n    int64_t v23; // 0x403d50\n    int32_t v24; // 0x403d50\n    if (*(char *)(str2 - 2 + (int64_t)strlen((char *)str2)) == 32) {\n        int32_t v25 = __fprintf_chk(g45, 1, dcngettext(NULL, \"%lu byte copied, %s, %s\", \"%lu bytes copied, %s, %s\", g84, 5)); // 0x404035\n        v23 = v25;\n        v24 = v25;\n    } else {\n        // 0x403e94\n        char * v26; // 0x403d50\n        int64_t v27; // 0x403d50\n        if (*(char *)(str3 - 2 + (int64_t)strlen((char *)str3)) == 32) {\n            // 0x403fd8\n            v26 = dcgettext(NULL, \"%lu bytes (%s) copied, %s, %s\", 5);\n            v27 = v8;\n        } else {\n            // 0x403eb4\n            v26 = dcgettext(NULL, \"%lu bytes (%s, %s) copied, %s, %s\", 5);\n            v27 = &v22;\n        }\n        // 0x403eca\n        v23 = v27;\n        v24 = __fprintf_chk(g45, 1, v26);\n    }\n    if (a1 == 0) {\n        int64_t v28 = (int64_t)g45; // 0x403f48\n        int64_t * v29 = (int64_t *)(v28 + 40); // 0x403f4f\n        uint64_t result = *v29; // 0x403f4f\n        if (result >= *(int64_t *)(v28 + 48)) {\n            // 0x403f07\n            return __overflow(g45, 10);\n        }\n        // 0x403f5d\n        *v29 = result + 1;\n        *(char *)result = 10;\n        return result;\n    }\n    int64_t result2 = v23; // 0x403ef1\n    if (v24 >= 0) {\n        uint32_t v30 = g81; // 0x403ef3\n        result2 = v23;\n        if (v30 > v24) {\n            int32_t v31 = __fprintf_chk(g45, 1, \"%*s\", (int64_t)v30 - (int64_t)v24 & 0xffffffff, (char *)&g19); // 0x404063\n            result2 = v31;\n        }\n    }\n    // 0x403f01\n    g81 = v24;\n    // 0x403f07\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4040b0",
            "funcStartAddr": "4040b0",
            "funcEndAddr": "4041d7",
            "decompiledFuncCode": "int64_t function_4040b0(void) {\n    // 0x4040b0\n    if (g30 == 1) {\n        // 0x404178\n        int64_t result; // 0x4040b0\n        return result;\n    }\n    // 0x4040bd\n    if (g81 >= 1) {\n        int64_t v1 = (int64_t)g45; // 0x4040d1\n        int64_t * v2 = (int64_t *)(v1 + 40); // 0x4040d8\n        uint64_t v3 = *v2; // 0x4040d8\n        if (v3 >= *(int64_t *)(v1 + 48)) {\n            // 0x4041c8\n            __overflow(g45, 10);\n        } else {\n            // 0x4040e6\n            *v2 = v3 + 1;\n            *(char *)v3 = 10;\n        }\n        // 0x4040f1\n        g81 = 0;\n    }\n    // 0x4040fb\n    __fprintf_chk(g45, 1, dcgettext(NULL, \"%lu+%lu records in\\n%lu+%lu records out\\n\", 5));\n    int64_t result2 = g88; // 0x404159\n    if (g75 != 0) {\n        char * v4 = dcngettext(NULL, \"%lu truncated record\\n\", \"%lu truncated records\\n\", g75, 5); // 0x40419d\n        result2 = __fprintf_chk(g45, 1, v4);\n    }\n    // 0x40415b\n    if (g30 == 2) {\n        // 0x404178\n        return result2;\n    }\n    // 0x404164\n    return function_403d50(0);\n}\n"
        },
        {
            "funcName": "function_4041e0",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "4042c6",
            "decompiledFuncCode": "int64_t function_4041e0(uint32_t a1, uint32_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4041e0\n    int64_t v1; // 0x4041e0\n    if ((char)v1 != 0) {\n        // 0x404200\n        int128_t v2; // 0x4041e0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    // 0x40423a\n    int64_t v3; // bp-224, 0x4041e0\n    if (g81 < 1) {\n        // 0x40426a\n        v3 = 24;\n        return function_408710((int64_t)a1, (int64_t)a2, a3, &v3);\n    }\n    int64_t v4 = (int64_t)g45; // 0x404244\n    int64_t * v5 = (int64_t *)(v4 + 40); // 0x40424b\n    uint64_t v6 = *v5; // 0x40424b\n    if (v6 >= *(int64_t *)(v4 + 48)) {\n        // 0x4042b0\n        __overflow(g45, 10);\n    } else {\n        // 0x404255\n        *v5 = v6 + 1;\n        *(char *)v6 = 10;\n    }\n    // 0x404260\n    g81 = 0;\n    // 0x40426a\n    v3 = 24;\n    return function_408710((int64_t)a1, (int64_t)a2, a3, &v3);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4043e0",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, int64_t a2) {\n    // 0x4042d0\n    char * v1; // bp-32, 0x4042d0\n    int128_t result; // bp-40, 0x4042d0\n    int64_t v2; // 0x4042d0\n    int64_t v3 = function_408f50(a1, (int64_t *)&v1, 10, (int64_t *)&result, \"bcEGkKMPTwYZ0\", v2); // 0x4042f1\n    int32_t v4 = v3; // 0x4042f8\n    if (v4 != 2) {\n        // 0x4042fd\n        if (v4 == 0) {\n            // 0x404305\n            return result;\n        }\n        // 0x40431a\n        *(int32_t *)a2 = v4;\n        return 0;\n    }\n    // 0x404310\n    if (*v1 != 120) {\n        // 0x40431a\n        *(int32_t *)a2 = v4;\n        return 0;\n    }\n    uint64_t v5 = function_4042d0((int64_t)v1 + 1, a2); // 0x404337\n    int64_t v6 = result;\n    int64_t v7 = v3 & 0xffffffff; // 0x404342\n    if (v5 != 0) {\n        uint64_t v8 = v5 * v6; // 0x404379\n        v7 = v8 % v5;\n        if (v8 / v5 != v6) {\n            // 0x404385\n            *(int32_t *)a2 = 1;\n            // 0x404305\n            return 0;\n        }\n    }\n    // 0x404348\n    if (v6 != 0) {\n        // 0x404305\n        return v6 * v5;\n    }\n    // 0x40434d\n    bool v9; // 0x4042d0\n    int64_t v10 = v9 ? -1 : 1; // 0x40435a\n    int64_t v11 = (int64_t)\"0x\"; // 0x4042d0\n    int64_t v12 = a1; // 0x4042d0\n    int64_t v13 = 2; // 0x40435a\n    unsigned char v14 = *(char *)v12; // 0x40435a\n    char v15 = *(char *)v11; // 0x40435a\n    v13--;\n    char v16 = v15; // 0x40435a\n    bool v17 = false; // 0x40435a\n    while (v14 == v15) {\n        // 0x40434d\n        v11 += v10;\n        v12 += v10;\n        v16 = v14;\n        v17 = true;\n        if (v13 == 0) {\n            // break -> \n            break;\n        }\n        v14 = *(char *)v12;\n        v15 = *(char *)v11;\n        v13--;\n        v16 = v15;\n        v17 = false;\n    }\n    unsigned char v18 = v16;\n    uint64_t v19 = (int64_t)!((v14 < v18 | v17)) - (int64_t)(v14 < v18); // 0x40435f\n    int64_t v20 = v6; // 0x404364\n    if ((char)v19 == 0) {\n        int64_t v21 = v19 % 256 | v7 & -256; // 0x40435f\n        int64_t v22 = function_408610(1, \"00x\", v21, v13); // 0x40439e\n        int64_t v23 = function_408610(0, \"0x\", v21, v13); // 0x4043ad\n        function_4041e0(0, (int32_t)\"warning: %s is a zero multiplier; use %s if that is intended\" ^ (int32_t)\"warning: %s is a zero multiplier; use %s if that is intended\", (int64_t)dcgettext(NULL, \"warning: %s is a zero multiplier; use %s if that is intended\", 5), v23, v22, v2);\n        v20 = result;\n    }\n    // 0x404305\n    return v20 * v5;\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "4044c2",
            "decompiledFuncCode": "int64_t function_4043e0(int32_t a1, int64_t a2, int64_t a3) {\n    uint32_t v1 = (int32_t)a2 & -0x20101; // 0x4043ef\n    int64_t result; // 0x4043e0\n    if (v1 == 0) {\n        // 0x4043f7\n        return result;\n    }\n    int64_t v2 = a1;\n    int64_t v3; // 0x4043e0\n    int64_t result2 = function_4095d0(v2, 3, a3, v3); // 0x404412\n    int32_t v4 = result2; // 0x40441b\n    int64_t v5; // 0x4043e0\n    int64_t v6; // 0x4043e0\n    int64_t v7; // 0x4043e0\n    int64_t v8; // 0x4043e0\n    if (v4 < 0) {\n        goto lab_0x404472;\n    } else {\n        int64_t v9 = result2 & 0xffffffff; // 0x404417\n        int64_t v10 = v9 | (int64_t)v1; // 0x404419\n        if (v4 == (int32_t)v10) {\n            // 0x4043f7\n            return result2;\n        }\n        // 0x404423\n        v7 = v10;\n        if ((v10 & 0x10000) != 0) {\n            // 0x404443\n            int64_t v11; // bp-184, 0x4043e0\n            if (__fxstat(1, a1, (struct stat *)&v11) != 0) {\n                goto lab_0x404472;\n            } else {\n                // 0x404457\n                v8 = v10;\n                v6 = v9;\n                v5 = 0x4000;\n                int32_t v12; // 0x4043e0\n                if ((v12 & 0xf000) == 0x4000) {\n                    goto lab_0x4044af;\n                } else {\n                    // 0x404467\n                    *__errno_location() = 20;\n                    goto lab_0x404472;\n                }\n            }\n        } else {\n            goto lab_0x40442b;\n        }\n    }\n  lab_0x404472:;\n    int64_t v13 = function_4083e0(4, a3); // 0x40447a\n    int64_t v14 = (int64_t)dcgettext(NULL, \"setting flags for %s\", 5); // 0x40448e\n    int32_t v15 = *__errno_location(); // 0x4044a6\n    int64_t v16 = function_4041e0(1, v15, v14, v13, v3, v3); // 0x4044aa\n    v8 = v14;\n    v6 = v13;\n    int64_t v17 = v13; // 0x4044aa\n    v5 = v16;\n    goto lab_0x4044af;\n  lab_0x4044af:;\n    int64_t v18 = v8 & 0xfffeffff; // 0x4044af\n    result = v5;\n    v7 = v18;\n    int64_t v19 = v17; // 0x4044b7\n    if ((int32_t)v18 == (int32_t)v6) {\n        // 0x4043f7\n        return result;\n    }\n    goto lab_0x40442b;\n  lab_0x40442b:;\n    uint32_t v20 = (int32_t)function_4095d0(v2 & 0xffffffff, 4, v7 & 0xffffffff, v19) + 1; // 0x40443c\n    result = v20;\n    if (v20 != 0) {\n        // 0x4043f7\n        return result;\n    }\n    goto lab_0x404472;\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "40459e",
            "decompiledFuncCode": "int64_t function_4044d0(int64_t a1, int32_t fd, int64_t offset, int64_t whence) {\n    int32_t v1 = ioctl(fd, -0x7fcf92fe); // 0x4044f3\n    int32_t result = lseek(fd, (int32_t)offset, (int32_t)whence); // 0x404503\n    if (v1 == 0 != result > -1 || true != (true == ioctl(fd, -0x7fcf92fe) == 0)) {\n        // 0x404515\n        return result;\n    }\n    // 0x404557\n    if (g30 != 1) {\n        // 0x404560\n        int64_t v2; // 0x4044d0\n        function_4041e0(0, (int32_t)\"warning: working around lseek kernel bug for file (%s)\\n  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types\" ^ (int32_t)\"warning: working around lseek kernel bug for file (%s)\\n  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types\", (int64_t)dcgettext(NULL, \"warning: working around lseek kernel bug for file (%s)\\n  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types\", 5), a1, v2, v2);\n    }\n    // 0x40458a\n    *__errno_location() = 0;\n    // 0x404515\n    return -1;\n}\n"
        },
        {
            "funcName": "function_4045a0",
            "funcStartAddr": "4045a0",
            "funcEndAddr": "404718",
            "decompiledFuncCode": "int64_t function_4045a0(int32_t a1, int64_t a2) {\n    int64_t v1 = a1;\n    char v2 = a1 != 0 ? *(char *)&g56 : g57;\n    int64_t * v3 = a1 != 0 ? &g48 : &g49; // 0x4045c3\n    int64_t v4 = *v3; // 0x4045c3\n    int64_t v5; // 0x4045a0\n    int64_t v6; // 0x4045a0\n    int64_t v7; // 0x4045a0\n    int64_t v8; // 0x4045a0\n    int64_t v9; // 0x4045a0\n    int64_t v10; // 0x4045a0\n    if (a2 == 0) {\n        // 0x404600\n        if (v4 == 0 == v2 == 0) {\n            // 0x4045e6\n            return 1;\n        }\n        int64_t v11 = v1 & 0xffffffff; // 0x404610\n        v9 = v4;\n        v5 = v11;\n        v7 = 0;\n        v10 = v4;\n        v6 = v11;\n        v8 = 0;\n        if (a1 != 0) {\n            goto lab_0x40464f;\n        } else {\n            goto lab_0x404617;\n        }\n    } else {\n        uint64_t v12 = v4 + a2; // 0x4045cb\n        int64_t v13 = v12 % 0x20000; // 0x4045d1\n        *v3 = v13;\n        if (v12 < 0x20000) {\n            // 0x4045e6\n            return 1;\n        }\n        int64_t v14 = v12 - v13; // 0x404640\n        if (v14 == 0) {\n            // 0x4045e6\n            return 1;\n        }\n        int64_t v15 = v1 & 0xffffffff; // 0x404648\n        v9 = v14;\n        v5 = v15;\n        v7 = v13;\n        v10 = v14;\n        v6 = v15;\n        v8 = v13;\n        if (a1 == 0) {\n            goto lab_0x404617;\n        } else {\n            goto lab_0x40464f;\n        }\n    }\n  lab_0x40464f:;\n    int32_t v16 = g26; // 0x40464f\n    if (v16 == -1) {\n        // 0x4045e6\n        return 0;\n    }\n    // 0x40465f\n    int64_t v17; // 0x4045a0\n    int64_t fd; // 0x4045a0\n    int64_t v18; // 0x4045a0\n    int64_t v19; // 0x4045a0\n    int64_t v20; // 0x4045a0\n    int64_t v21; // 0x4045a0\n    int64_t v22; // 0x4045a0\n    int64_t v23; // 0x4045a0\n    if (v16 < 0) {\n        int32_t v24 = lseek(1, 0, SEEK_CUR); // 0x404704\n        g26 = v24;\n        v20 = v10;\n        v22 = v24;\n        v17 = v6;\n        v18 = v8;\n        goto lab_0x40467b;\n    } else {\n        int64_t v25 = v16; // 0x40464f\n        v21 = v10;\n        v23 = v25;\n        fd = v6;\n        v19 = v8;\n        if (a2 == 0) {\n            goto lab_0x404687;\n        } else {\n            int64_t v26 = v8 + v10 + v25; // 0x404671\n            g26 = v26;\n            v20 = v10;\n            v22 = v26;\n            v17 = v6;\n            v18 = v8;\n            goto lab_0x40467b;\n        }\n    }\n  lab_0x404617:;\n    unsigned char result = *(char *)&g80; // 0x404617\n    v20 = v9;\n    v22 = g78;\n    v17 = v5;\n    v18 = v7;\n    if (result == 0) {\n        // 0x40462b\n        *__errno_location() = 29;\n        // 0x4045e6\n        return result;\n    }\n    goto lab_0x40467b;\n  lab_0x40467b:\n    // 0x40467b\n    v21 = v20;\n    v23 = v22;\n    fd = v17;\n    v19 = v18;\n    if (v22 < 0) {\n        // 0x4045e6\n        return 0;\n    }\n    goto lab_0x404687;\n  lab_0x404687:;\n    int64_t v27 = v23 - v21; // 0x404687\n    int64_t length; // 0x4045a0\n    int64_t offset; // 0x4045a0\n    int64_t v28; // 0x4045a0\n    if (a2 != 0 || v21 == 0) {\n        int64_t v29 = v27 - v19; // 0x4046d8\n        length = v21;\n        offset = v29;\n        v28 = v29;\n        if (v21 != 0) {\n            goto lab_0x40469c;\n        } else {\n            goto lab_0x4046e0;\n        }\n    } else {\n        // 0x404694\n        v28 = v27;\n        if (v2 != 0) {\n            goto lab_0x4046e0;\n        } else {\n            // 0x404699\n            length = v21;\n            offset = v27 - v19;\n            goto lab_0x40469c;\n        }\n    }\n  lab_0x40469c:;\n    int64_t result2 = posix_fadvise((int32_t)fd, (int32_t)offset, (int32_t)length, POSIX_FADV_DONTNEED) != -1; // 0x4046b3\n    // 0x4045e6\n    return result2;\n  lab_0x4046e0:;\n    uint64_t v30 = v28;\n    length = 0;\n    offset = v30 - v30 % (int64_t)g105;\n    goto lab_0x40469c;\n}\n"
        },
        {
            "funcName": "function_404720",
            "funcStartAddr": "404720",
            "funcEndAddr": "404753",
            "decompiledFuncCode": "int64_t function_404720(void) {\n    // 0x404720\n    if (g27 != 0) {\n        // 0x404729\n        return function_405b30();\n    }\n    int64_t result = function_405ab0((int64_t)g45); // 0x40473b\n    if ((int32_t)result == 0) {\n        // 0x404744\n        return result;\n    }\n    // 0x404749\n    _exit(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404760",
            "funcStartAddr": "404760",
            "funcEndAddr": "404810",
            "decompiledFuncCode": "int64_t function_404760(int64_t a1) {\n    // 0x404760\n    int64_t v1; // 0x404760\n    if (close(0) < 0) {\n        int64_t v2 = function_4083e0(4, (int64_t)g107); // 0x404792\n        char * v3 = dcgettext(NULL, \"closing input file %s\", 5); // 0x4047a6\n        int32_t v4 = *__errno_location(); // 0x4047be\n        function_4041e0(1, v4, (int64_t)v3, v2, v1, v1);\n    } else {\n        int32_t result = close(1); // 0x404776\n        if (result >= 0) {\n            // 0x40477f\n            return result;\n        }\n    }\n    int64_t v5 = function_4083e0(4, (int64_t)g106); // 0x4047d3\n    char * v6 = dcgettext(NULL, \"closing output file %s\", 5); // 0x4047e7\n    int32_t v7 = *__errno_location(); // 0x4047ff\n    return function_4041e0(1, v7, (int64_t)v6, v5, v1, v1);\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "4048a1",
            "decompiledFuncCode": "int64_t function_404810(void) {\n    // 0x404810\n    if ((g60 || g62) == 0) {\n        // 0x4048a0\n        return 0;\n    }\n    uint32_t result; // 0x404873\n    while (true) {\n        // 0x404829\n        int64_t oset; // bp-136, 0x404810\n        sigprocmask(SIG_BLOCK, (struct _TYPEDEF_sigset_t *)&g63, (struct _TYPEDEF_sigset_t *)&oset);\n        if (g60 != 0) {\n            // 0x404848\n            g60--;\n        }\n        // 0x404851\n        sigprocmask(SIG_SETMASK, (struct _TYPEDEF_sigset_t *)&oset, NULL);\n        if (g62 != 0) {\n            // 0x404888\n            function_404760(2);\n            function_4040b0();\n            raise(g62);\n        } else {\n            // 0x404864\n            function_4040b0();\n        }\n        // 0x404869\n        if (g62 == 0) {\n            // 0x404873\n            result = g60;\n            if (result == 0) {\n                // break -> 0x40487d\n                break;\n            }\n        }\n    }\n    // 0x40487d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4048b0",
            "funcStartAddr": "4048b0",
            "funcEndAddr": "4048f8",
            "decompiledFuncCode": "int64_t function_4048b0(uint32_t a1, int64_t a2, int64_t a3, uint32_t a4) {\n    function_404810();\n    int64_t v1 = function_405bd0((int64_t)a1, a2, a3 & 0xffffffff, (int64_t)a4); // 0x4048e2\n    // 0x4048b0\n    while ((int32_t)v1 < 0) {\n        // 0x4048c8\n        if (*__errno_location() != 4) {\n            // break -> 0x4048ed\n            break;\n        }\n        function_404810();\n        v1 = function_405bd0((int64_t)a1, a2, a3 & 0xffffffff, (int64_t)a4);\n    }\n    // 0x4048ed\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "404a0a",
            "decompiledFuncCode": "int64_t function_404900(int64_t fd, int64_t buf, uint64_t nbyte) {\n    function_404810();\n    int32_t v1 = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x404937\n    int64_t result2; // 0x404900\n    int32_t v2; // 0x404900\n    int64_t v3; // 0x404937\n    int32_t v4; // 0x404951\n    int32_t * v5; // 0x404945\n    int32_t v6; // 0x40494a\n    if (v1 != -1) {\n        if (v1 >= 0) {\n            // break -> 0x404988\n            break;\n        }\n        // 0x40491d\n        v2 = *__errno_location();\n    } else {\n        // 0x404945\n        v5 = __errno_location();\n        v6 = *v5;\n        v2 = v6;\n        if (v6 == 22) {\n            // 0x404951\n            v3 = v1;\n            v4 = g51;\n            result2 = v3;\n            if (v4 < 1) {\n                goto lab_0x40496f;\n            } else {\n                // 0x40495d\n                result2 = v3;\n                if ((int64_t)v4 >= nbyte) {\n                    goto lab_0x40496f;\n                } else {\n                    // 0x404962\n                    result2 = v3;\n                    if ((g93 & 64) != 0) {\n                        // 0x4049fd\n                        *v5 = 0;\n                        result2 = 0;\n                        goto lab_0x40496f;\n                    } else {\n                        goto lab_0x40496f;\n                    }\n                }\n            }\n        }\n    }\n    // 0x404900\n    while (v2 == 4) {\n        // 0x404929\n        function_404810();\n        v1 = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n        if (v1 != -1) {\n            if (v1 >= 0) {\n                // break -> 0x404988\n                break;\n            }\n            // 0x40491d\n            v2 = *__errno_location();\n        } else {\n            // 0x404945\n            v5 = __errno_location();\n            v6 = *v5;\n            v2 = v6;\n            if (v6 == 22) {\n                // 0x404951\n                v3 = v1;\n                v4 = g51;\n                result2 = v3;\n                if (v4 < 1) {\n                    goto lab_0x40496f;\n                } else {\n                    // 0x40495d\n                    result2 = v3;\n                    if ((int64_t)v4 >= nbyte) {\n                        goto lab_0x40496f;\n                    } else {\n                        // 0x404962\n                        result2 = v3;\n                        if ((g93 & 64) != 0) {\n                            // 0x4049fd\n                            *v5 = 0;\n                            result2 = 0;\n                            goto lab_0x40496f;\n                        } else {\n                            goto lab_0x40496f;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int64_t result = v1; // 0x404937\n    if (v1 < 1 || result >= nbyte) {\n        // 0x4049c8\n        if (v1 >= 0 != v1 != 0) {\n            // 0x40496f\n            g51 = result;\n            return result;\n        }\n    } else {\n        // 0x404992\n        function_404810();\n    }\n    // 0x404997\n    if (g76 == 0) {\n        // 0x40496f\n        g51 = result;\n        return result;\n    }\n    int32_t v7 = g51; // 0x4049a0\n    uint64_t v8 = (int64_t)v7; // 0x4049a0\n    if (v7 < 1 || v8 >= nbyte) {\n        // 0x40496f\n        g51 = result;\n        return result;\n    }\n    // 0x4049b1\n    if (g30 != 1) {\n        // 0x4049d0\n        int64_t v9; // 0x404900\n        function_4041e0(0, (int32_t)\"warning: partial read (%lu byte); suggest iflag=fullblock\" ^ (int32_t)\"warning: partial read (%lu byte); suggest iflag=fullblock\", (int64_t)dcngettext(NULL, \"warning: partial read (%lu byte); suggest iflag=fullblock\", \"warning: partial read (%lu bytes); suggest iflag=fullblock\", v7, 5), v8, 5, v9);\n    }\n    // 0x4049ba\n    g76 = 0;\n    result2 = result;\n  lab_0x40496f:\n    // 0x40496f\n    g51 = result2;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404a10",
            "funcStartAddr": "404a10",
            "funcEndAddr": "404a71",
            "decompiledFuncCode": "int64_t function_404a10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404a10\n    if (a3 == 0) {\n        // 0x404a50\n        return 0;\n    }\n    int64_t v1 = a3; // 0x404a2b\n    int64_t v2 = a2; // 0x404a2b\n    int64_t v3 = 0; // 0x404a2b\n    int64_t v4 = function_404900(a1 & 0xffffffff, v2, v1); // 0x404a46\n    int64_t result = v4; // 0x404a4e\n    while (v4 >= 0) {\n        // 0x404a30\n        result = v3;\n        if (v4 == 0) {\n            // break -> 0x404a50\n            break;\n        }\n        // 0x404a32\n        v3 += v4;\n        v1 -= v4;\n        v2 += v4;\n        result = v3;\n        if (v1 == 0) {\n            // break -> 0x404a50\n            break;\n        }\n        v4 = function_404900(a1 & 0xffffffff, v2, v1);\n        result = v4;\n    }\n    // 0x404a50\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a80",
            "funcStartAddr": "404a80",
            "funcEndAddr": "404ba0",
            "decompiledFuncCode": "int64_t function_404a80(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = (int64_t)g105; // 0x404a89\n    int64_t v2 = g104; // 0x404a90\n    int64_t * mem = malloc((int32_t)(v2 + 3 + 2 * v1)); // 0x404a9c\n    if (mem != NULL) {\n        uint64_t v3 = v1 + 1 + (int64_t)mem; // 0x404aa6\n        g74 = v3 - v3 % v1;\n        return v3 / v1;\n    }\n    // 0x404ac7\n    int64_t v4; // bp-680, 0x404a80\n    int64_t v5; // 0x404a80\n    int64_t v6 = function_405d70(v2, &v4, 497, 1, 1, v5); // 0x404add\n    function_4041e0(1, (int32_t)\"memory exhausted by input buffer of size %lu bytes (%s)\" ^ (int32_t)\"memory exhausted by input buffer of size %lu bytes (%s)\", (int64_t)dcgettext(NULL, \"memory exhausted by input buffer of size %lu bytes (%s)\", 5), v2, v6, v5);\n    int64_t * mem2 = malloc((int32_t)g105 - 1 + g103); // 0x404b2c\n    if (mem2 == NULL) {\n        int64_t v7 = g103; // 0x404b20\n        int64_t v8; // bp-1360, 0x404a80\n        int64_t v9 = function_405d70(v7, &v8, 497, 1, 1, v5); // 0x404b6d\n        return function_4041e0(1, (int32_t)\"memory exhausted by output buffer of size %lu bytes (%s)\" ^ (int32_t)\"memory exhausted by output buffer of size %lu bytes (%s)\", (int64_t)dcgettext(NULL, \"memory exhausted by output buffer of size %lu bytes (%s)\", 5), v7, v9, v5);\n    }\n    uint64_t v10 = (int64_t)g105; // 0x404b19\n    uint64_t v11 = v10 - 1 + (int64_t)mem2; // 0x404b36\n    g73 = v11 - v11 % v10;\n    return v11 / v10;\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404be8",
            "decompiledFuncCode": "int64_t function_404ba0(void) {\n    // 0x404ba0\n    int64_t result; // 0x404ba0\n    if (g73 != 0 || (g95 & 8) != 0) {\n        // 0x404baa\n        return result;\n    }\n    // 0x404bb4\n    if (g74 != 0) {\n        // 0x404bbe\n        g73 = g74;\n        return g74;\n    }\n    // 0x404bd2\n    function_404a80(result, result, result);\n    g73 = g74;\n    return g74;\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404c2b",
            "decompiledFuncCode": "int64_t function_404bf0(int64_t length) {\n    function_404810();\n    uint32_t result = ftruncate(1, (int32_t)length); // 0x404c17\n    // 0x404bf0\n    while (result < 0) {\n        // 0x404c00\n        if (*__errno_location() != 4) {\n            // break -> 0x404c22\n            break;\n        }\n        function_404810();\n        result = ftruncate(1, (int32_t)length);\n    }\n    // 0x404c22\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c30",
            "funcStartAddr": "404c30",
            "funcEndAddr": "404e28",
            "decompiledFuncCode": "int64_t function_404c30(int64_t str, int64_t offset) {\n    // 0x404c30\n    if ((g91 & 64) != 0) {\n        // 0x404c49\n        if ((int64_t)g103 > offset) {\n            // 0x404d90\n            int64_t v1; // 0x404c30\n            int64_t v2 = function_4095d0(1, 3, v1, v1); // 0x404d9c\n            if ((int32_t)function_4095d0(1, 4, v2 & 0xffffbfff, v1) != 0) {\n                // 0x404dbb\n                if (g30 != 1) {\n                    int64_t v3 = function_4084b0(0, 3, (int64_t)g106); // 0x404df4\n                    char * v4 = dcgettext(NULL, \"failed to turn off O_DIRECT: %s\", 5); // 0x404e08\n                    int32_t v5 = *__errno_location(); // 0x404e1d\n                    function_4041e0(0, v5, (int64_t)v4, v3, v1, v1);\n                }\n            }\n            // 0x404dc4\n            *(char *)&g56 = 1;\n            function_4045a0(1, 0);\n            g94 |= 0x8000;\n        }\n    }\n    // 0x404c56\n    if (offset == 0) {\n        // 0x404cf2\n        return 0;\n    }\n    int64_t v6 = 0;\n    int64_t v7; // 0x404c30\n    while (true) {\n      lab_0x404c76:\n        // 0x404c76\n        v7 = v6;\n        function_404810();\n        g97 = 0;\n        int64_t v8 = offset; // 0x404c90\n        if ((g94 & 0x10000) != 0) {\n            int64_t v9 = str; // 0x404c30\n            while (*(char *)v9 == 0) {\n                int64_t n = v8 - 1; // 0x404ca1\n                if (n == 0) {\n                    goto lab_0x404d00;\n                }\n                int64_t str2 = v9 + 1; // 0x404c9d\n                v8 = n;\n                v9 = str2;\n                if (n % 16 == 0) {\n                    // 0x404cac\n                    if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n                        goto lab_0x404d00;\n                    } else {\n                        goto lab_0x404cb8;\n                    }\n                }\n            }\n        }\n        goto lab_0x404cb8;\n    }\n  lab_0x404d58:\n    // 0x404d58\n    *__errno_location() = 28;\n    int64_t result = v7; // 0x404d63\n    goto lab_0x404ce0_2;\n  lab_0x404d00:;\n    // 0x404d00\n    int64_t v11; // 0x404c30\n    if (lseek(1, (int32_t)offset, SEEK_CUR) < 0) {\n        // 0x404d40\n        g94 &= -0x10001;\n        goto lab_0x404cb8;\n    } else {\n        // 0x404d17\n        g97 = 1;\n        if (offset >= 0) {\n            // 0x404c6e\n            v11 = offset + v7;\n            goto lab_0x404c71;\n        } else {\n            int32_t v13 = *__errno_location(); // 0x404d2f\n            v11 = v7;\n            result = v7;\n            if (v13 == 4) {\n                goto lab_0x404c71;\n            } else {\n                goto lab_0x404ce0_2;\n            }\n        }\n    }\n  lab_0x404ce0_2:\n    // 0x404ce0\n    if (g58 != 0 == (result != 0)) {\n        // 0x404d70\n        function_4045a0(1, result);\n        return result;\n    }\n    // 0x404cf2\n    return result;\n  lab_0x404cb8:;\n    int32_t v10 = write(1, (int64_t *)(v7 + str), (int32_t)(offset - v7)); // 0x404cc7\n    if (v10 >= 0) {\n        // 0x404c68\n        if (v10 == 0) {\n            // break -> 0x404d58\n            goto lab_0x404d58;\n        }\n        // 0x404c6e\n        v11 = (int64_t)v10 + v7;\n        goto lab_0x404c71;\n    } else {\n        int32_t v12 = *__errno_location(); // 0x404cd6\n        v11 = v7;\n        result = v7;\n        if (v12 != 4) {\n            goto lab_0x404ce0_2;\n        }\n        goto lab_0x404c71;\n    }\n  lab_0x404c71:\n    // 0x404c71\n    v6 = v11;\n    result = v6;\n    if (v6 >= offset) {\n        goto lab_0x404ce0_2;\n    }\n    goto lab_0x404c76;\n}\n"
        },
        {
            "funcName": "function_404e30",
            "funcStartAddr": "404e30",
            "funcEndAddr": "404e4d",
            "decompiledFuncCode": "int64_t function_404e30(void) {\n    // 0x404e30\n    int64_t v1; // 0x404e30\n    function_404760(v1);\n    function_4040b0();\n    function_404810();\n    exit(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e50",
            "funcStartAddr": "404e50",
            "funcEndAddr": "404ee2",
            "decompiledFuncCode": "int64_t function_404e50(void) {\n    int64_t result = function_404c30(g73, (int64_t)g103); // 0x404e62\n    g84 += (int32_t)result;\n    if (result == (int64_t)g103) {\n        // 0x404e77\n        g72 = 0;\n        g87++;\n        return result;\n    }\n    int64_t v1 = function_4083e0(4, (int64_t)g106); // 0x404e9e\n    char * v2 = dcgettext(NULL, \"writing to %s\", 5); // 0x404eb2\n    int32_t v3 = *__errno_location(); // 0x404ec7\n    int64_t v4; // 0x404e50\n    function_4041e0(0, v3, (int64_t)v2, v1, v4, v4);\n    if (result != 0) {\n        // 0x404ed5\n        g88++;\n    }\n    // 0x404edd\n    function_404e30();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ef0",
            "funcStartAddr": "404ef0",
            "funcEndAddr": "404ff9",
            "decompiledFuncCode": "int64_t function_404ef0(int64_t a1, int64_t a2) {\n    int64_t result; // 0x404ef0\n    if (a2 == 0) {\n        // 0x404f8b\n        return result;\n    }\n    int64_t v1 = a2 + a1; // 0x404ef2\n    int64_t v2 = g71; // 0x404ef0\n    int64_t v3 = a1; // 0x404ef0\n    while (true) {\n        int64_t v4 = v3;\n        int64_t v5 = v2; // 0x404f62\n        unsigned char v6 = *(char *)v4; // 0x404f58\n        int64_t v7 = v6; // 0x404f58\n        if (v6 != g29) {\n            int64_t v8; // 0x404ef0\n            int64_t v9; // 0x404ef0\n            if (v5 == g102) {\n                // 0x404fd8\n                g75++;\n                v8 = v7;\n                v9 = v5;\n            } else {\n                // 0x404f19\n                v8 = v7;\n                v9 = v5;\n                if (v5 < g102) {\n                    int64_t v10 = g72 + 1; // 0x404f29\n                    *(char *)(g73 + g72) = v6;\n                    g72 = v10;\n                    v8 = v7;\n                    v9 = v5;\n                    if (v10 >= (int64_t)g103) {\n                        // 0x404fe8\n                        v8 = function_404e50();\n                        v9 = g71;\n                    }\n                }\n            }\n            int64_t v11 = v9 + 1; // 0x404f44\n            int64_t v12 = v4 + 1; // 0x404f48\n            g71 = v11;\n            v2 = v11;\n            v3 = v12;\n            result = v8;\n            if (v1 == v12) {\n                // break -> 0x404f8b\n                break;\n            }\n        } else {\n            int64_t v13 = v7; // 0x404f75\n            int64_t v14 = v5; // 0x404f75\n            if (v5 < g102) {\n                int64_t v15 = g72; // 0x404fa2\n                int64_t v16 = v15 + 1; // 0x404fb7\n                g72 = v16;\n                *(char *)(g73 + v15) = g28[0];\n                int64_t v17 = v16; // 0x404fcd\n                if (v16 >= (int64_t)g103) {\n                    // 0x404fcf\n                    v17 = function_404e50();\n                }\n                int64_t v18 = v14 + 1; // 0x404f95\n                v13 = v17;\n                v14 = v18;\n                while (g102 > v18) {\n                    // 0x404fa2\n                    v15 = g72;\n                    v16 = v15 + 1;\n                    g72 = v16;\n                    *(char *)(g73 + v15) = g28[0];\n                    v17 = v16;\n                    if (v16 >= (int64_t)g103) {\n                        // 0x404fcf\n                        v17 = function_404e50();\n                    }\n                    // 0x404f95\n                    v18 = v14 + 1;\n                    v13 = v17;\n                    v14 = v18;\n                }\n            }\n            // 0x404f77\n            g71 = 0;\n            int64_t v19 = v4 + 1; // 0x404f82\n            v2 = 0;\n            v3 = v19;\n            result = v13;\n            if (v1 == v19) {\n                // break -> 0x404f8b\n                break;\n            }\n        }\n    }\n    // 0x404f8b\n    return result;\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "40514c",
            "decompiledFuncCode": "int64_t function_405000(int64_t a1, uint64_t a2) {\n    // 0x405000\n    int64_t result; // 0x405000\n    if (a2 == 0) {\n        // 0x4050b0\n        return result;\n    }\n    int64_t v1 = 0; // 0x405003\n    int64_t v2; // 0x405000\n    int64_t v3; // 0x405000\n    int64_t v4; // 0x405000\n    while (true) {\n      lab_0x405068_2:;\n        int64_t v5 = v1;\n        int64_t v6 = g71; // 0x405068\n        char v7 = *(char *)(v5 + a1); // 0x405076\n        g71 = v6 + 1;\n        if (v6 >= g102) {\n            int64_t v8 = g72; // 0x405020\n            g50 = 0;\n            g71 = 0;\n            int64_t v9 = v8 + 1; // 0x40504b\n            g72 = v9;\n            *(char *)(g73 + v8) = g29;\n            v4 = v9;\n            v2 = v5;\n            v3 = v5;\n            if (v9 >= (int64_t)g103) {\n                goto lab_0x4050dc;\n            } else {\n                goto lab_0x405063;\n            }\n        } else {\n            char v10 = g28[0]; // 0x405089\n            int64_t v11 = g50; // 0x405090\n            int64_t v12 = v5 + 1; // 0x405097\n            if (v10 != v7) {\n                int64_t v13 = g103; // 0x4050f6\n                int64_t v14 = g72; // 0x405100\n                int64_t v15 = v13; // 0x405100\n                int64_t v16 = g73; // 0x405100\n                int64_t v17 = g72; // 0x405100\n                char v18 = v10; // 0x405100\n                int64_t v19 = v13; // 0x405100\n                if (v11 != 0) {\n                    int64_t v20 = v17 + 1; // 0x40511c\n                    *(char *)(g73 + v17) = v18;\n                    g72 = v20;\n                    int64_t v21 = v20; // 0x40512d\n                    int64_t v22 = v19; // 0x40512d\n                    if (v20 >= v19) {\n                        // 0x40512f\n                        function_404e50();\n                        v21 = g72;\n                        v22 = g103;\n                    }\n                    int64_t v23 = g73;\n                    int64_t v24 = v22;\n                    int64_t v25 = v21;\n                    int64_t v26 = g50 - 1; // 0x405108\n                    g50 = v26;\n                    v14 = v25;\n                    v15 = v24;\n                    v16 = v23;\n                    while (v26 != 0) {\n                        // 0x405112\n                        v20 = v25 + 1;\n                        *(char *)(v23 + v25) = g28[0];\n                        g72 = v20;\n                        v21 = v20;\n                        v22 = v24;\n                        int64_t v27 = v23; // 0x40512d\n                        if (v20 >= v24) {\n                            // 0x40512f\n                            function_404e50();\n                            v27 = g73;\n                            v21 = g72;\n                            v22 = g103;\n                        }\n                        // 0x405108\n                        v23 = v27;\n                        v24 = v22;\n                        v25 = v21;\n                        v26 = g50 - 1;\n                        g50 = v26;\n                        v14 = v25;\n                        v15 = v24;\n                        v16 = v23;\n                    }\n                }\n                int64_t v28 = v14 + 1; // 0x4050c8\n                *(char *)(v16 + v14) = v7;\n                g72 = v28;\n                v4 = v28;\n                v2 = v12;\n                v3 = v12;\n                if (v28 < v15) {\n                    goto lab_0x405063;\n                } else {\n                    goto lab_0x4050dc;\n                }\n            } else {\n                // 0x4050a0\n                g50 = v11 + 1;\n                result = v6;\n                if (v12 >= a2) {\n                    // break -> 0x4050b0\n                    break;\n                }\n                // 0x405068\n                v1 = v12;\n                goto lab_0x405068_2;\n            }\n        }\n    }\n  lab_0x4050b0:\n    // 0x4050b0\n    return result;\n  lab_0x4050dc:\n    // 0x4050dc\n    v4 = function_404e50();\n    v2 = v3;\n    goto lab_0x405063;\n  lab_0x405063:\n    // 0x405063\n    result = v4;\n    if (v2 >= a2) {\n        // break -> 0x4050b0\n        goto lab_0x4050b0;\n    }\n    // 0x405068\n    v1 = v2;\n    goto lab_0x405068_2;\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "40545b",
            "decompiledFuncCode": "int64_t function_405150(uint32_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t * a5) {\n    int64_t v1 = (int64_t)a5;\n    int32_t * v2 = __errno_location(); // 0x405173\n    *v2 = 0;\n    int32_t v3; // 0x405150\n    int32_t v4; // 0x405150\n    int64_t v5; // 0x405150\n    if (0x7fffffffffffffff / a4 < a3) {\n        // 0x4051e4\n        v3 = 0;\n        if (function_4044d0(a2, a1, 0, 2) >= 0) {\n            // 0x40544e\n            v4 = 75;\n            goto lab_0x4052c1;\n        } else {\n            goto lab_0x405207;\n        }\n    } else {\n        int64_t v6 = a4 * a3 + v1; // 0x4051a7\n        if (function_4044d0(a2, a1, v6, 1) >= 0) {\n            if (a1 != 0) {\n                // 0x4051c8\n                *a5 = 0;\n                // 0x4051d2\n                return 0;\n            }\n            // 0x40530f\n            int64_t v7; // bp-200, 0x405150\n            if (__fxstat(1, 0, (struct stat *)&v7) != 0) {\n                int64_t v8 = function_4083e0(4, a2); // 0x405419\n                char * v9 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x40542d\n                function_4041e0(1, *v2, (int64_t)v9, v8, v1, v5);\n                // 0x4051d2\n                return 0;\n            }\n            int64_t v10 = g78; // 0x40532c\n            int64_t v11 = v10 + v6;\n            int64_t result = 0; // 0x405341\n            int64_t v12 = v6; // 0x405341\n            int32_t v13; // 0x405150\n            if ((v13 & 0xd000) == 0x8000 == v5 < v11) {\n                // 0x405377\n                result = (v6 - v5) / a4;\n                v12 = v5 - v10;\n            }\n            // 0x405351\n            g78 = v11;\n            if (v11 < v12) {\n                // 0x405361\n                g77 = 1;\n            }\n            // 0x4051d2\n            return result;\n        }\n        int32_t v14 = *v2; // 0x405294\n        v3 = v14;\n        if (function_4044d0(a2, a1, 0, 2) < 0) {\n            goto lab_0x405207;\n        } else {\n            // 0x4052b6\n            v4 = v14;\n            if (v14 == 0) {\n                // 0x40544e\n                v4 = 75;\n                goto lab_0x4052c1;\n            } else {\n                goto lab_0x4052c1;\n            }\n        }\n    }\n  lab_0x40523b:\n    if (g55 < 0) {\n        // break -> 0x40538a\n        goto lab_0x40538a;\n    }\n    // 0x40524b\n    int64_t v15; // 0x405150\n    int64_t result2 = v15; // 0x40524b\n    if (g55 == 0) {\n        // 0x4051d2\n        return result2;\n    }\n    uint64_t v16; // 0x405150\n    if (a1 == 0) {\n        int64_t v17 = g78 + v16; // 0x405255\n        g78 = v17;\n        if (v17 < v16) {\n            // 0x405265\n            g77 = 1;\n        }\n    }\n    if (v15 == 0) {\n        // 0x4051c8\n        *a5 = 0;\n        // 0x4051d2\n        return 0;\n    }\n    int64_t v18 = v15 - 1; // 0x405275\n    int64_t v19 = v18; // 0x405279\n    if (v18 != 0) {\n        goto lab_0x405228;\n    } else {\n        // 0x40527b\n        if (a5 == NULL) {\n            // 0x4051d2\n            return 0;\n        }\n        // 0x40528f\n        v15 = 0;\n        goto lab_0x40523b;\n    }\n  lab_0x405207:\n    // 0x405207\n    if (a1 != 0) {\n        // 0x4052fe\n        function_404ba0();\n    } else {\n        // 0x40520f\n        if (g74 == 0) {\n            // 0x40536d\n            function_404a80(a2, (int64_t)a1, 0);\n        }\n    }\n    // 0x405228\n    v16 = (int64_t)g55;\n    v19 = a3;\n    while (true) {\n      lab_0x405228:\n        // 0x405228\n        v15 = v19;\n        if (v19 == 0) {\n            // 0x40528f\n            v15 = 0;\n            goto lab_0x40523b;\n        } else {\n            goto lab_0x40523b;\n        }\n    }\n  lab_0x40538a:;\n    int32_t v20 = v3; // 0x40538c\n    if (a1 == 0) {\n        int64_t v21 = function_4083e0(4, a2); // 0x405397\n        char * v22 = dcgettext(NULL, \"error reading %s\", 5); // 0x4053ab\n        function_4041e0(0, *v2, (int64_t)v22, v21, v1, v5);\n        if (g95 % 2 != 0) {\n            // 0x405409\n            function_4040b0();\n        }\n        // 0x4053cb\n        function_404e30();\n        // UNREACHABLE\n    }\n    goto lab_0x4053db;\n  lab_0x4052c1:\n    // 0x4052c1\n    v20 = v4;\n    int32_t v23; // 0x405150\n    int64_t v24; // 0x405150\n    int64_t v25; // 0x405150\n    if (a1 != 0) {\n        goto lab_0x4053db;\n    } else {\n        // 0x4052d4\n        v23 = v4;\n        v24 = (int64_t)\"%s: cannot skip\";\n        v25 = function_4084b0(0, 3, a2);\n        goto lab_0x4053ed;\n    }\n  lab_0x4053db:\n    // 0x4053db\n    v23 = v20;\n    v24 = (int64_t)\"%s: cannot seek\";\n    v25 = function_4084b0(0, 3, a2);\n    goto lab_0x4053ed;\n  lab_0x4053ed:\n    // 0x4053ed\n    function_4041e0(0, v23, (int64_t)dcgettext(NULL, (char *)v24, 5), v25, v1, v5);\n    // 0x4053cb\n    function_404e30();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405460",
            "funcStartAddr": "405460",
            "funcEndAddr": "4059cd",
            "decompiledFuncCode": "int64_t function_405460(int64_t a1) {\n    int32_t status = a1; // 0x405476\n    if (status != 0) {\n        // 0x40547a\n        __fprintf_chk(g45, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40549f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4054a6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPERAND]...\\n  or:  %s OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Copy a file, converting and formatting according to the operands.\\n\\n  bs=BYTES        read and write up to BYTES bytes at a time (default: 512);\\n                  overrides ibs and obs\\n  cbs=BYTES       convert BYTES bytes at a time\\n  conv=CONVS      convert the file as per the comma separated symbol list\\n  count=N         copy only N input blocks\\n  ibs=BYTES       read up to BYTES bytes at a time (default: 512)\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  if=FILE         read from FILE instead of stdin\\n  iflag=FLAGS     read as per the comma separated symbol list\\n  obs=BYTES       write BYTES bytes at a time (default: 512)\\n  of=FILE         write to FILE instead of stdout\\n  oflag=FLAGS     write as per the comma separated symbol list\\n  seek=N          skip N obs-sized blocks at start of output\\n  skip=N          skip N ibs-sized blocks at start of input\\n  status=LEVEL    The LEVEL of information to print to stderr;\\n                  'none' suppresses everything but error messages,\\n                  'noxfer' suppresses the final transfer statistics,\\n                  'progress' shows periodic transfer statistics\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"\\nN and BYTES may be followed by the following multiplicative suffixes:\\nc =1, w =2, b =512, kB =1000, K =1024, MB =1000*1000, M =1024*1024, xM =M,\\nGB =1000*1000*1000, G =1024*1024*1024, and so on for T, P, E, Z, Y.\\n\\nEach CONV symbol may be:\\n\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  ascii     from EBCDIC to ASCII\\n  ebcdic    from ASCII to EBCDIC\\n  ibm       from ASCII to alternate EBCDIC\\n  block     pad newline-terminated records with spaces to cbs-size\\n  unblock   replace trailing spaces in cbs-size records with newline\\n  lcase     change upper case to lower case\\n  ucase     change lower case to upper case\\n  sparse    try to seek rather than write the output for NUL input blocks\\n  swab      swap every pair of input bytes\\n  sync      pad every input block with NULs to ibs-size; when used\\n            with block or unblock, pad with spaces rather than NULs\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  excl      fail if the output file already exists\\n  nocreat   do not create the output file\\n  notrunc   do not truncate the output file\\n  noerror   continue after read errors\\n  fdatasync  physically write output file data before finishing\\n  fsync     likewise, but also write metadata\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"\\nEach FLAG symbol may be:\\n\\n  append    append mode (makes sense only for output; conv=notrunc suggested)\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  direct    use direct I/O for data\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  directory  fail unless a directory\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  dsync     use synchronized I/O for data\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  sync      likewise, but also for metadata\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  fullblock  accumulate full blocks of input (iflag only)\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  nonblock  use non-blocking I/O\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  noatime   do not update access time\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  nocache   Request to drop cache.  See also oflag=sync\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  noctty    do not assign controlling terminal from file\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  count_bytes  treat 'count=N' as a byte count (iflag only)\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  skip_bytes  treat 'skip=N' as a byte count (iflag only)\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"  seek_bytes  treat 'seek=N' as a byte count (oflag only)\\n\", 5), g43);\n    __printf_chk(1, dcgettext(NULL, \"\\nSending a %s signal to a running 'dd' process makes it\\nprint I/O statistics to standard error and then resume copying.\\n\\nOptions are:\\n\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g43);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g43);\n    int64_t v1 = &g1; // bp-136, 0x4057a8\n    bool v2; // 0x405460\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x405830\n    int64_t v6 = *(int64_t *)v5; // 0x405834\n    int64_t v7 = 3; // 0x40583a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"dd\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x405846\n        char v11 = *(char *)v9; // 0x405846\n        char v12 = v11; // 0x405846\n        bool v13 = false; // 0x405846\n        while (v10 == v11) {\n            // 0x40583c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x405846\n            int64_t v15 = v8 + v3; // 0x405846\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x405852\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x405852\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x405964;\n        } else {\n            // 0x40594e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4059a3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4058b4;\n            } else {\n                goto lab_0x405964;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4058b4;\n        } else {\n            // 0x40589a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4059a3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4058b4;\n            } else {\n                goto lab_0x4058b4;\n            }\n        }\n    }\n  lab_0x405964:\n    // 0x405964\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4058f4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40549f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4058b4:\n    // 0x4058b4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4058f4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40549f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059d0",
            "funcStartAddr": "4059d0",
            "funcEndAddr": "405aa9",
            "decompiledFuncCode": "int64_t function_4059d0(int64_t a1, char * a2, int32_t a3, char * a4) {\n    int64_t v1 = 0; // 0x4059e3\n    int64_t v2 = a1;\n    char * str = (char *)v2;\n    char * found_char_pos = strchr(str, 44); // 0x4059ed\n    int64_t v3 = (int64_t)found_char_pos;\n    int64_t v4 = (int64_t)a2; // 0x4059f5\n    int64_t v5; // 0x4059d0\n    int64_t v6; // 0x4059d0\n    int64_t v7; // 0x4059d0\n    uint32_t v8; // 0x405a21\n    char v9; // 0x405a09\n    char v10; // 0x405a0d\n    while (true) {\n        // 0x4059f8\n        v7 = v4;\n        v5 = 0;\n        v6 = v5;\n        v9 = *(char *)(v6 + v7);\n        v10 = *(char *)(v6 + v2);\n        while (v9 != 0) {\n            // 0x405a00\n            v5 = v6 + 1;\n            if (v9 != v10) {\n                goto lab_0x405a28;\n            }\n            v6 = v5;\n            v9 = *(char *)(v6 + v7);\n            v10 = *(char *)(v6 + v2);\n        }\n        if (v10 != 44 != v10 != 0) {\n            // 0x405a21\n            v8 = *(int32_t *)(v7 + 12);\n            if (v8 != 0) {\n                // break -> 0x405a33\n                break;\n            }\n        }\n        // 0x405a28\n        v4 = v7 + 16;\n        if (*(char *)v7 == 0) {\n            // break (via goto) -> 0x405a53\n            goto lab_0x405a53;\n        }\n    }\n    // 0x405a33\n    v1 = ((char)a3 == 0 ? v1 : 0) | (int64_t)v8;\n    while (found_char_pos != NULL) {\n        // 0x405a40\n        v2 = v3 + 1;\n        str = (char *)v2;\n        found_char_pos = strchr(str, 44);\n        v3 = (int64_t)found_char_pos;\n        v4 = (int64_t)a2;\n        while (true) {\n            // 0x4059f8\n            v7 = v4;\n            v5 = 0;\n            v6 = v5;\n            v9 = *(char *)(v6 + v7);\n            v10 = *(char *)(v6 + v2);\n            while (v9 != 0) {\n                // 0x405a00\n                v5 = v6 + 1;\n                if (v9 != v10) {\n                    goto lab_0x405a28;\n                }\n                v6 = v5;\n                v9 = *(char *)(v6 + v7);\n                v10 = *(char *)(v6 + v2);\n            }\n            if (v10 != 44 != v10 != 0) {\n                // 0x405a21\n                v8 = *(int32_t *)(v7 + 12);\n                if (v8 != 0) {\n                    // break -> 0x405a33\n                    break;\n                }\n            }\n            // 0x405a28\n            v4 = v7 + 16;\n            if (*(char *)v7 == 0) {\n                // break (via goto) -> 0x405a53\n                goto lab_0x405a53;\n            }\n        }\n        // 0x405a33\n        v1 = ((char)a3 == 0 ? v1 : 0) | (int64_t)v8;\n    }\n    // 0x405a48\n    return ((char)a3 == 0 ? v1 : 0) | (int64_t)v8;\n  lab_0x405a53:;\n    int64_t len; // 0x4059d0\n    if (found_char_pos == NULL) {\n        // 0x405a9f\n        len = strlen(str);\n    } else {\n        // 0x405a58\n        len = v3 - v2;\n    }\n    int64_t v11 = function_408370(0, 8, v2, len); // 0x405a68\n    int64_t v12; // 0x4059d0\n    function_4041e0(0, 0, (int64_t)\"%s: %s\", (int64_t)dcgettext(NULL, a4, 5), v11, v12);\n    function_405460(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405ab0",
            "funcStartAddr": "405ab0",
            "funcEndAddr": "405b0d",
            "decompiledFuncCode": "int64_t function_405ab0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405ab7\n    int64_t v2; // 0x405ab0\n    if ((v2 & 32) == 0) {\n        // 0x405ad1\n        if (v1 == 0) {\n            // 0x405aea\n            return 0;\n        }\n        // 0x405aea\n        return 0xffffffff;\n    }\n    if (v1 != 0) {\n        // 0x405aea\n        return 0xffffffff;\n    }\n    // 0x405af4\n    *__errno_location() = 0;\n    // 0x405aea\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405b10",
            "funcStartAddr": "405b10",
            "funcEndAddr": "405b18",
            "decompiledFuncCode": "int64_t function_405b10(int64_t a1) {\n    // 0x405b10\n    g109 = a1;\n    int64_t result; // 0x405b10\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b20",
            "funcStartAddr": "405b20",
            "funcEndAddr": "405b28",
            "decompiledFuncCode": "int64_t function_405b20(int64_t a1) {\n    // 0x405b20\n    g108 = a1;\n    int64_t result; // 0x405b20\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b30",
            "funcStartAddr": "405b30",
            "funcEndAddr": "405bce",
            "decompiledFuncCode": "int64_t function_405b30(void) {\n    // 0x405b30\n    int32_t * err_num; // 0x405b46\n    if ((int32_t)function_405ab0((int64_t)g43) == 0) {\n        goto lab_0x405b5c;\n    } else {\n        // 0x405b46\n        err_num = __errno_location();\n        if (g108 == 0) {\n            goto lab_0x405b73;\n        } else {\n            // 0x405b57\n            if (*err_num != 32) {\n                goto lab_0x405b73;\n            } else {\n                goto lab_0x405b5c;\n            }\n        }\n    }\n  lab_0x405b5c:;\n    int64_t result = function_405ab0((int64_t)g45); // 0x405b63\n    if ((int32_t)result == 0) {\n        // 0x405b6c\n        return result;\n    }\n    // 0x405bae\n    _exit(g33);\n    // UNREACHABLE\n  lab_0x405b73:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x405b7f\n    if (g109 == 0) {\n        // 0x405bb9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405b93\n        error(0, *err_num, \"%s: %s\", (char *)function_408480((int64_t)g109), v1);\n    }\n    // 0x405bae\n    _exit(g33);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405bd0",
            "funcStartAddr": "405bd0",
            "funcEndAddr": "405c3a",
            "decompiledFuncCode": "int64_t function_405bd0(int64_t a1, int64_t path, int64_t oflag, int64_t a4) {\n    int32_t fd = open((char *)path, (int32_t)oflag); // 0x405be5\n    int32_t fd2 = a1; // 0x405bec\n    if (fd != fd2 != fd >= 0) {\n        // 0x405bf4\n        return fd;\n    }\n    uint32_t result = dup2(fd, fd2); // 0x405c0c\n    int32_t * v1 = __errno_location(); // 0x405c14\n    close(fd);\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c40",
            "funcStartAddr": "405c40",
            "funcEndAddr": "405c6f",
            "decompiledFuncCode": "int64_t function_405c40(void) {\n    // 0x405c40\n    int128_t tp; // bp-24, 0x405c40\n    if (clock_gettime(1, (struct timespec *)&tp) != 0) {\n        // 0x405c55\n        function_405c70((int64_t *)&tp);\n    }\n    // 0x405c5d\n    int64_t v1; // 0x405c40\n    return 0x3b9aca00 * (int64_t)tp + v1;\n}\n"
        },
        {
            "funcName": "function_405c70",
            "funcStartAddr": "405c70",
            "funcEndAddr": "405caa",
            "decompiledFuncCode": "int64_t function_405c70(int64_t * tp) {\n    int64_t result = 0; // 0x405c84\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x405c86\n        int64_t tp2; // bp-24, 0x405c70\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *tp = tp2;\n        int128_t v1; // 0x405c70\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)((int64_t)tp + 8) = result;\n    }\n    // 0x405ca4\n    return result;\n}\n"
        },
        {
            "funcName": "function_405cb0",
            "funcStartAddr": "405cb0",
            "funcEndAddr": "405d67",
            "decompiledFuncCode": "int64_t function_405cb0(int32_t a1, float80_t a2) {\n    // 0x405cb0\n    int3_t v1; // 0x405cb0\n    int3_t v2 = v1 - 1; // 0x405cb0\n    __frontend_reg_store_fpr(v2, 9223372036854775808.0L);\n    int3_t v3 = v1 - 2;\n    __frontend_reg_store_fpr(v3, a2);\n    float80_t v4 = __frontend_reg_load_fpr(v3); // 0x405cba\n    float80_t v5 = __frontend_reg_load_fpr(v2); // 0x405cba\n    int64_t result; // 0x405cb0\n    if (v4 > v5 || v4 == v5) {\n        // 0x405d30\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3) - __frontend_reg_load_fpr(v2));\n        float80_t v6 = __frontend_reg_load_fpr(v3); // 0x405d36\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        __frontend_reg_store_fpr(v2, v6);\n        result = (int64_t)__frontend_reg_load_fpr(v3) ^ -0x8000000000000000;\n    } else {\n        // 0x405cbe\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3));\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        result = __frontend_reg_load_fpr(v3);\n    }\n    // 0x405ce4\n    __frontend_reg_store_fpr(v3, (float80_t)result);\n    if (result < 0) {\n        // 0x405cf2\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + 18446744073709551616.0L);\n    }\n    int3_t v7 = v3;\n    if (a1 != 0) {\n        // 0x405d28\n        __frontend_reg_store_fpr(v7 + 1, __frontend_reg_load_fpr(v7));\n        // 0x405d2a\n        return result;\n    }\n    int3_t v8 = v7 + 1; // 0x405cfc\n    float80_t v9 = __frontend_reg_load_fpr(v7); // 0x405cfc\n    __frontend_reg_store_fpr(v7, __frontend_reg_load_fpr(v8));\n    __frontend_reg_store_fpr(v8, v9);\n    float80_t v10 = __frontend_reg_load_fpr(v7); // 0x405cfe\n    float80_t v11 = __frontend_reg_load_fpr(v8); // 0x405cfe\n    if (v10 != v11 == v10 == v11) {\n        // 0x405d08\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    } else {\n        // 0x405d02\n        if (v10 == v11) {\n            // 0x405d2a\n            return result;\n        }\n        // 0x405d04\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    }\n    int64_t result2 = result + 1; // 0x405d10\n    __frontend_reg_store_fpr(v8, (float80_t)result2);\n    if (result2 >= 0) {\n        // 0x405d2a\n        return result2;\n    }\n    // 0x405d60\n    __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8) + 18446744073709551616.0L);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405d70",
            "funcStartAddr": "405d70",
            "funcEndAddr": "40673e",
            "decompiledFuncCode": "int64_t function_405d70(int64_t a1, int64_t * str3, int64_t a3, uint64_t a4, uint64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)str3;\n    int64_t v2 = a3 & 32; // 0x405d76\n    uint32_t v3 = (int32_t)a3 % 4; // 0x405d80\n    int64_t v4; // bp-168, 0x405d70\n    int64_t v5 = &v4; // 0x405d90\n    int32_t v6 = v2; // 0x405d97\n    uint32_t v7 = (v6 | 1024) - ((int32_t)(v2 == 0) | v6) & 2024; // 0x405da5\n    int64_t v8 = 0x100000000 * a3 >> 32; // 0x405daa\n    struct lconv * locale_info = localeconv(); // 0x405dbb\n    int64_t str = *(int64_t *)locale_info; // 0x405dc0\n    int64_t len = strlen((char *)str); // 0x405dc9\n    int64_t v9 = len >= 17 ? (int64_t)&g6 : str; // 0x405de3\n    int64_t str2 = *(int64_t *)((int64_t)locale_info + 8); // 0x405dec\n    int64_t v10 = len >= 17 ? 1 : len; // 0x405df1\n    uint32_t len2 = strlen((char *)str2); // 0x405e02\n    int64_t v11 = v1 + 647; // 0x405e19\n    v4 = v11;\n    int64_t v12; // 0x405d70\n    int64_t v13; // 0x405d70\n    int64_t v14; // 0x405d70\n    int64_t v15; // 0x405d70\n    int64_t v16; // 0x405d70\n    int64_t v17; // 0x405d70\n    int64_t v18; // 0x405d70\n    int64_t v19; // 0x405d70\n    int64_t v20; // 0x405d70\n    if (a5 > a4) {\n        if (a4 == 0) {\n            goto lab_0x405e55;\n        } else {\n            if (a5 % a4 != 0) {\n                goto lab_0x405e55;\n            } else {\n                uint64_t v21 = a5 / a4; // 0x4060c0\n                int64_t v22 = a1 / v21; // 0x4060d4\n                uint64_t v23 = 10 * (a1 % v21); // 0x4060e0\n                uint64_t v24 = 2 * (v23 % v21); // 0x4060e9\n                int64_t v25 = v23 / v21 & 0xffffffff; // 0x4060ec\n                int64_t v26 = v21 > v24 ? (int64_t)(v24 != 0) : v21 < v24 ? 3 : 2;\n                uint32_t v27 = (int32_t)v8 & 16; // 0x406105\n                v15 = v27;\n                v19 = v22;\n                v17 = v26;\n                v12 = v25;\n                v16 = 0;\n                v14 = 0xffffffff;\n                v20 = v22;\n                v18 = v26;\n                v13 = v25;\n                if (v27 == 0) {\n                    goto lab_0x406121;\n                } else {\n                    goto lab_0x40610e;\n                }\n            }\n        }\n    } else {\n        if (a4 % a5 != 0) {\n            goto lab_0x405e55;\n        } else {\n            uint64_t v28 = a4 / a5; // 0x405e32\n            int64_t v29 = v28 * a1; // 0x405e42\n            if (v29 / v28 == a1) {\n                uint32_t v30 = (int32_t)v8 & 16; // 0x4063c1\n                int64_t v31 = v30; // 0x4063c1\n                v15 = v31;\n                v19 = v29;\n                v17 = 0;\n                v12 = 0;\n                v16 = v31;\n                v14 = 0xffffffff;\n                v20 = v29;\n                v18 = 0;\n                v13 = 0;\n                if (v30 != 0) {\n                    goto lab_0x40610e;\n                } else {\n                    goto lab_0x406121;\n                }\n            } else {\n                goto lab_0x405e55;\n            }\n        }\n    }\n  lab_0x406121:;\n    int64_t v32 = v16; // 0x40612a\n    int64_t v33 = v14; // 0x40612a\n    int64_t v34 = v20; // 0x40612a\n    int64_t v35 = v18; // 0x40612a\n    int64_t v36 = v13; // 0x40612a\n    int64_t v37 = v11; // 0x40612a\n    int64_t v38; // 0x405d70\n    int64_t v39; // 0x405d70\n    int64_t v40; // 0x405d70\n    int64_t v41; // 0x405d70\n    int64_t v42; // 0x405d70\n    int64_t v43; // 0x405d70\n    int64_t v44; // 0x405d70\n    if (v3 == 1) {\n        // 0x406460\n        v42 = v16;\n        v40 = v14;\n        v43 = v20;\n        v38 = v11;\n        v41 = v14;\n        v44 = v20;\n        v39 = v11;\n        if ((int32_t)(v20 % 2 != -v18) + (int32_t)v13 < 6) {\n            goto lab_0x406160;\n        } else {\n            goto lab_0x406141;\n        }\n    } else {\n        goto lab_0x406130;\n    }\n  lab_0x405e55:;\n    // 0x405e55\n    int3_t v45; // 0x405d70\n    int3_t v46 = v45 - 1;\n    __frontend_reg_store_fpr(v46, (float80_t)a4);\n    int3_t v47; // 0x405d70\n    int3_t v48; // 0x405d70\n    if (a4 < 0) {\n        // 0x4060a0\n        __frontend_reg_store_fpr(v46, __frontend_reg_load_fpr(v46) + 18446744073709551616.0L);\n        v47 = v46;\n    } else {\n        // 0x405e55\n        v47 = v45 - 2;\n        v48 = v46;\n    }\n    int3_t v49 = v48;\n    __frontend_reg_store_fpr(v47, (float80_t)a5);\n    float80_t v50 = __frontend_reg_load_fpr(v47);\n    int3_t v51; // 0x405d70\n    int3_t v52; // 0x405d70\n    int3_t v53; // 0x405d70\n    int3_t v54; // 0x405d70\n    if (a5 < 0) {\n        // 0x406080\n        __frontend_reg_store_fpr(v47, v50 + 18446744073709551616.0L);\n        int3_t v55 = v49 + 1;\n        __frontend_reg_store_fpr(v55, __frontend_reg_load_fpr(v55) / __frontend_reg_load_fpr(v49));\n        __frontend_reg_store_fpr(v49, (float80_t)a1);\n        v51 = v55;\n        v53 = v49;\n        v52 = v55;\n        v54 = v49;\n        if (a1 >= 0) {\n            goto lab_0x405e92;\n        } else {\n            goto lab_0x406068;\n        }\n    } else {\n        // 0x405e7e\n        __frontend_reg_store_fpr(v49, __frontend_reg_load_fpr(v49) / v50);\n        __frontend_reg_store_fpr(v47, (float80_t)a1);\n        int3_t v56 = v47 + 1;\n        v51 = v56;\n        v53 = v47;\n        v52 = v56;\n        v54 = v47;\n        if (a1 < 0) {\n            goto lab_0x406068;\n        } else {\n            goto lab_0x405e92;\n        }\n    }\n  lab_0x405e92:;\n    int3_t v57 = v51;\n    float80_t v58 = __frontend_reg_load_fpr(v53); // 0x405e92\n    __frontend_reg_store_fpr(v57, v58 * __frontend_reg_load_fpr(v57));\n    int3_t v59 = v57; // 0x405e99\n    int3_t v60 = v57; // 0x405e99\n    if ((a3 & 16) == 0) {\n        goto lab_0x405fb0;\n    } else {\n        goto lab_0x405e9f;\n    }\n  lab_0x406068:;\n    int3_t v61 = v54;\n    __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v61) + 18446744073709551616.0L);\n    int3_t v62 = v61 + 2; // 0x40606e\n    __frontend_reg_store_fpr(v62, __frontend_reg_load_fpr(v52) * __frontend_reg_load_fpr(v62));\n    v59 = v62;\n    v60 = v62;\n    if ((a3 & 16) != 0) {\n        goto lab_0x405e9f;\n    } else {\n        goto lab_0x405fb0;\n    }\n  lab_0x40610e:;\n    int64_t v63 = v15;\n    v16 = v63;\n    v14 = 0;\n    v20 = v19;\n    v18 = v17;\n    v13 = v12;\n    int64_t v64; // 0x405d70\n    int64_t v65; // 0x405d70\n    int64_t v66; // 0x405d70\n    int64_t v67; // 0x405d70\n    int64_t v68; // 0x405d70\n    int64_t v69; // 0x405d70\n    int64_t v70; // 0x406346\n    int64_t v71; // 0x40632a\n    if (v19 < (int64_t)v7) {\n        goto lab_0x406121;\n    } else {\n        int64_t v72; // 0x405d70\n        int32_t v73 = v72; // 0x406344\n        int64_t v74; // 0x405d70\n        uint64_t v75; // 0x405d70\n        v70 = v74 / v75;\n        int64_t v76; // 0x405d70\n        uint64_t v77 = 10 * (v74 % v75) + v76 & 0xffffffff; // 0x406357\n        int64_t v78 = v77 / v75; // 0x406357\n        uint32_t v79 = 2 * (int32_t)(v77 % v75) + (v73 >> 1); // 0x406359\n        uint32_t v80 = v79 + v73; // 0x406362\n        int64_t v81 = v79 < v7 ? (int64_t)(v80 != 0) : v7 < v80 ? 3 : 2;\n        int64_t v82; // 0x405d70\n        v71 = v82 + 1 & 0xffffffff;\n        while (v70 >= v75) {\n            // 0x406336\n            v16 = v63;\n            v14 = v71;\n            v20 = v70;\n            v18 = v81;\n            v13 = v78;\n            v82 = v71;\n            v74 = v70;\n            v72 = v81;\n            v76 = v78;\n            int64_t v83; // 0x40632a\n            if ((int32_t)v83 == 8) {\n                goto lab_0x406121;\n            }\n            int64_t v84 = v76;\n            int64_t v85 = v72;\n            uint64_t v86 = v74;\n            int64_t v87 = v82;\n            v73 = v85;\n            v70 = v86 / v75;\n            v77 = 10 * (v86 % v75) + v84 & 0xffffffff;\n            v78 = v77 / v75;\n            v79 = 2 * (int32_t)(v77 % v75) + (v73 >> 1);\n            v80 = v79 + v73;\n            int64_t v88 = v7 < v80 ? 3 : 2;\n            v81 = v79 < v7 ? (int64_t)(v80 != 0) : v88;\n            v83 = v87 + 1;\n            v71 = v83 & 0xffffffff;\n        }\n        // 0x406510\n        v16 = v63;\n        v14 = v71;\n        v20 = v70;\n        v18 = v81;\n        v13 = v78;\n        if (v70 < 10) {\n            bool v89; // 0x405d70\n            if (v3 == 1) {\n                int32_t v90 = (int32_t)(v81 + v78 % 2) - 2; // 0x4065e7\n                v89 = v90 >= 0 == (v90 != 0);\n            } else {\n                // 0x406525\n                v89 = v3 == 0 == (v81 != 0);\n            }\n            // 0x406537\n            if (v89) {\n                int64_t v91 = v78 + 1; // 0x4065d0\n                v65 = v91 & 0xffffffff;\n                if ((int32_t)v91 == 10) {\n                    // 0x406643\n                    v69 = v70 + 1;\n                    v66 = 0;\n                    v68 = 10;\n                    v67 = 0;\n                    v64 = v11;\n                    if (v70 == 9) {\n                        goto lab_0x406590;\n                    } else {\n                        goto lab_0x406547;\n                    }\n                } else {\n                    goto lab_0x4065d8;\n                }\n            } else {\n                // 0x40653f\n                v69 = v70;\n                v66 = v81;\n                v65 = v78;\n                if (v77 >= v75) {\n                    goto lab_0x4065d8;\n                } else {\n                    goto lab_0x406547;\n                }\n            }\n        } else {\n            goto lab_0x406121;\n        }\n    }\n  lab_0x405fb0:;\n    int3_t v92 = v60; // 0x405fb7\n    if (v3 != 1) {\n        int3_t v93 = v60 - 1; // 0x405fb9\n        __frontend_reg_store_fpr(v93, 1.84467e+19L);\n        float80_t v94 = __frontend_reg_load_fpr(v93); // 0x405fbf\n        float80_t v95 = __frontend_reg_load_fpr(v60); // 0x405fbf\n        v92 = v60;\n        if (v94 > v95) {\n            // 0x406380\n            function_405cb0(v3, __frontend_reg_load_fpr(v60));\n            v92 = v60 + 1;\n        }\n    }\n    // 0x405fc7\n    __frontend_reg_load_fpr(v92);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len3 = strlen((char *)str3); // 0x405ff6\n    int64_t v96 = len3; // 0x405ffd\n    int64_t v97 = 0xffffffff; // 0x405ffd\n    int64_t v98 = len3; // 0x405ffd\n    goto lab_0x406000;\n  lab_0x405e9f:;\n    int3_t v181 = v59;\n    int3_t v180 = v181 - 1; // 0x405e9f\n    __frontend_reg_store_fpr(v180, (float80_t)v7);\n    int3_t v206 = v181 - 2; // 0x405ea5\n    __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v180));\n    int3_t v207 = v181 - 3;\n    __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v206));\n    int64_t v208 = 1; // 0x405eb6\n    int64_t v165 = v208 & 0xffffffff; // 0x405eb6\n    __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v207) * __frontend_reg_load_fpr(v180));\n    float80_t v209 = __frontend_reg_load_fpr(v207); // 0x405ebb\n    __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v181));\n    __frontend_reg_store_fpr(v181, v209);\n    while (__frontend_reg_load_fpr(v207) >= __frontend_reg_load_fpr(v181)) {\n        float80_t v210 = __frontend_reg_load_fpr(v207);\n        if ((int32_t)v208 == 8) {\n            // 0x405ec6\n            __frontend_reg_store_fpr(v180, v210);\n            __frontend_reg_store_fpr(v181, __frontend_reg_load_fpr(v206));\n            goto lab_0x405ed4;\n        }\n        // 0x405eb0\n        __frontend_reg_store_fpr(v206, v210);\n        float80_t v211 = __frontend_reg_load_fpr(v206); // 0x405eb2\n        __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v181));\n        __frontend_reg_store_fpr(v181, v211);\n        __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v206));\n        v208 = v165 + 1;\n        v165 = v208 & 0xffffffff;\n        __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v207) * __frontend_reg_load_fpr(v180));\n        v209 = __frontend_reg_load_fpr(v207);\n        __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v181));\n        __frontend_reg_store_fpr(v181, v209);\n    }\n    // 0x405ed0\n    __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v207));\n    __frontend_reg_store_fpr(v181, __frontend_reg_load_fpr(v206));\n    goto lab_0x405ed4;\n  lab_0x406130:;\n    int64_t v212 = v37;\n    int64_t v213 = v34;\n    int64_t v214 = v33;\n    v41 = v214;\n    v44 = v213;\n    v39 = v212;\n    if (v3 != 0) {\n        goto lab_0x406160;\n    } else {\n        // 0x40613a\n        v42 = v32;\n        v40 = v214;\n        v43 = v213;\n        v38 = v212;\n        v41 = v214;\n        v44 = v213;\n        v39 = v212;\n        if ((int32_t)(v36 + v35) < 1) {\n            goto lab_0x406160;\n        } else {\n            goto lab_0x406141;\n        }\n    }\n  lab_0x406000:;\n    int64_t v99 = *(int64_t *)(v5 + 8); // 0x406004\n    int64_t v100 = v4 - v96; // 0x40600c\n    memmove((int64_t *)v100, (int64_t *)v99, (int32_t)v96);\n    int64_t v101 = v97; // 0x406015\n    int64_t v102 = v100 + v98; // 0x406015\n    int64_t v103 = v100; // 0x406015\n    goto lab_0x40601a;\n  lab_0x405ed4:;\n    float80_t v179 = __frontend_reg_load_fpr(v180); // 0x405ee2\n    __frontend_reg_store_fpr(v181, v179 / __frontend_reg_load_fpr(v181));\n    uint64_t v182 = v10 + (v6 == 0 ? 3 : 2); // 0x405ee9\n    int3_t v144; // 0x405d70\n    int3_t v174; // 0x405d70\n    int3_t v148; // 0x405d70\n    int64_t v145; // 0x405d70\n    int3_t v176; // 0x405d70\n    if (v3 == 1) {\n        // 0x406410\n        __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v181));\n        __frontend_reg_load_fpr(v180);\n        float80_t v183 = __frontend_reg_load_fpr(v181); // 0x406434\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len6 = strlen((char *)str3); // 0x406440\n        __frontend_reg_store_fpr(v181, v183);\n        v144 = v181;\n        v145 = len6;\n        if (v182 < len6) {\n            // 0x406450\n            __frontend_reg_store_fpr(v180, 10.0L);\n            float80_t v184 = __frontend_reg_load_fpr(v181); // 0x406456\n            __frontend_reg_store_fpr(v181, v184 * __frontend_reg_load_fpr(v180));\n            v148 = v180;\n            goto lab_0x405f76;\n        } else {\n            goto lab_0x4063d8;\n        }\n    } else {\n        // 0x405ef7\n        __frontend_reg_store_fpr(v180, 1.84467e+19L);\n        float80_t v185 = __frontend_reg_load_fpr(v180); // 0x405efd\n        float80_t v186 = __frontend_reg_load_fpr(v181); // 0x405efd\n        bool v187 = false; // 0x405efd\n        bool v188 = false; // 0x405efd\n        if (v185 <= v186) {\n            v187 = true;\n            v188 = false;\n            if (v185 >= v186) {\n                v187 = v185 != v186;\n                v188 = true;\n            }\n        }\n        __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v181));\n        v174 = v180;\n        if (!v187 && !v188) {\n            // 0x406398\n            __frontend_reg_load_fpr(v180);\n            float80_t v189 = __frontend_reg_load_fpr(v181); // 0x4063a1\n            function_405cb0(v3, v189);\n            __frontend_reg_store_fpr(v181, v189);\n            v174 = v181;\n        }\n        float80_t v190 = __frontend_reg_load_fpr(v174); // 0x405f07\n        v176 = v174 + 1;\n        __frontend_reg_load_fpr(v176);\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len7 = strlen((char *)str3); // 0x405f35\n        __frontend_reg_store_fpr(v176, v190);\n        v144 = v176;\n        v145 = len7;\n        if (v182 < len7) {\n            // 0x405f49\n            __frontend_reg_store_fpr(v174, 10.0L);\n            __frontend_reg_store_fpr(v176, __frontend_reg_load_fpr(v176) * __frontend_reg_load_fpr(v174));\n            goto lab_0x405f51;\n        } else {\n            goto lab_0x4063d8;\n        }\n    }\n  lab_0x406160:;\n    int64_t v191 = v39 - 1; // 0x406179\n    *(char *)v191 = (char)v44 + 48;\n    int64_t v192 = v191; // 0x40619b\n    while (v44 >= 10) {\n        // 0x406173\n        v191 = v192 - 1;\n        *(char *)v191 = (char)v44 + 48;\n        v192 = v191;\n    }\n    int64_t v104 = v41; // 0x4061a2\n    int64_t v105 = v191; // 0x4061a2\n    int64_t v106 = v41; // 0x4061a2\n    int64_t v107 = v39; // 0x4061a2\n    int64_t v108 = v191; // 0x4061a2\n    if ((a3 & 4) == 0) {\n        goto lab_0x406025;\n    } else {\n        goto lab_0x4061a8;\n    }\n  lab_0x406141:;\n    int64_t v193 = v38;\n    int64_t v194 = v40;\n    int64_t v195 = v43 + 1; // 0x406141\n    v41 = v194;\n    v44 = v195;\n    v39 = v193;\n    if ((int32_t)v194 == 8 || (int32_t)v42 == 0 || v195 != (int64_t)v7) {\n        goto lab_0x406160;\n    } else {\n        int64_t v196 = v193; // 0x4064ce\n        if ((a3 & 8) == 0) {\n            // 0x406654\n            *(char *)(v193 - 1) = 48;\n            int64_t v197 = v193 + -1 - v10; // 0x40665f\n            int64_t v198 = v10 & 0xffffffff; // 0x406662\n            uint32_t v199 = (int32_t)v10; // 0x406665\n            if (v199 >= 8) {\n                int64_t v200 = v197 + 8 & -8; // 0x4066b0\n                *(int64_t *)v197 = *(int64_t *)v9;\n                *(int64_t *)(v197 + v198 - 8) = *(int64_t *)(v198 + v9 - 8);\n                int64_t v201 = v197 - v200; // 0x4066c7\n                uint32_t v202 = (int32_t)(v201 + v10); // 0x4066d3\n                v196 = v197;\n                if (v202 >= 8) {\n                    int64_t v203 = 0;\n                    int64_t v204 = v203 + 8; // 0x4066e3\n                    *(int64_t *)(v203 + v200) = *(int64_t *)(v9 - v201 + v203);\n                    v196 = v197;\n                    while ((v202 & -8) > (int32_t)v204) {\n                        // 0x4066e1\n                        v203 = v204 & 0xffffffff;\n                        v204 = v203 + 8;\n                        *(int64_t *)(v203 + v200) = *(int64_t *)(v9 - v201 + v203);\n                        v196 = v197;\n                    }\n                }\n            } else {\n                if ((v10 & 4) != 0) {\n                    // 0x40670c\n                    *(int32_t *)v197 = *(int32_t *)v9;\n                    *(int32_t *)(v197 + v198 - 4) = *(int32_t *)(v198 + v9 - 4);\n                    v196 = v197;\n                } else {\n                    // 0x406675\n                    v196 = v197;\n                    if (v199 != 0) {\n                        // 0x40667d\n                        *(char *)v197 = *(char *)v9;\n                        v196 = v197;\n                        if ((v10 & 2) != 0) {\n                            // 0x40668c\n                            *(int16_t *)(v197 + v198 - 2) = *(int16_t *)(v198 + v9 - 2);\n                            v196 = v197;\n                        }\n                    }\n                }\n            }\n        }\n        int64_t v205 = v196 - 1; // 0x4064d4\n        *(char *)v205 = 49;\n        v101 = v194 + 1 & 0xffffffff;\n        v102 = v196;\n        v103 = v205;\n        goto lab_0x40601a;\n    }\n  lab_0x40601a:\n    // 0x40601a\n    v104 = v101;\n    v105 = v103;\n    v106 = v101;\n    v107 = v102;\n    v108 = v103;\n    if ((*(char *)(v5 + 16) & 4) != 0) {\n        goto lab_0x4061a8;\n    } else {\n        goto lab_0x406025;\n    }\n  lab_0x406025:;\n    int64_t result = v105;\n    int64_t v109 = v5 + 16; // 0x406025\n    char v110 = *(char *)v109; // 0x406025\n    if (v110 > -1) {\n        // 0x406048\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v111 = v104; // 0x40602f\n    int64_t v112; // 0x405d70\n    int64_t v113; // 0x405d70\n    int64_t v114; // 0x405d70\n    int64_t v115; // 0x405d70\n    if ((int32_t)v104 == -1) {\n        uint64_t v116 = *(int64_t *)(v5 + 24); // 0x406270\n        v111 = 0;\n        if (v116 < 2) {\n            goto lab_0x406035;\n        } else {\n            int64_t v117 = 1; // 0x40628d\n            int64_t v118 = 1;\n            v117 *= (int64_t)*(int32_t *)(v5 + 52);\n            int64_t v119 = v118; // 0x406297\n            while (v116 > v117) {\n                int64_t v120 = v118 + 1; // 0x406299\n                int64_t v121 = v120 & 0xffffffff; // 0x406299\n                v119 = v121;\n                if ((int32_t)v120 == 8) {\n                    // break -> 0x4062a1\n                    break;\n                }\n                v118 = v121;\n                v117 *= (int64_t)*(int32_t *)(v5 + 52);\n                v119 = v118;\n            }\n            int32_t v122 = *(int32_t *)v109; // 0x4062a1\n            int64_t v123 = v122 & 256; // 0x4062a7\n            v112 = v123;\n            v114 = v119;\n            v113 = v123;\n            v115 = v119;\n            if ((v122 & 64) == 0) {\n                goto lab_0x4062d0;\n            } else {\n                goto lab_0x4062b1;\n            }\n        }\n    } else {\n        goto lab_0x406035;\n    }\n  lab_0x4061a8:;\n    int64_t str4 = len2 >= 17 ? (int64_t)&g19 : str2; // 0x405e15\n    int32_t len4 = strlen((char *)str4); // 0x4061b5\n    int64_t v124 = v107 - v108; // 0x4061ba\n    int64_t v125 = v5 + 64; // 0x4061c8\n    int64_t * v126 = (int64_t *)(v5 + 32); // 0x4061cd\n    *v126 = (int64_t)len4;\n    int64_t * v127 = (int64_t *)v125; // 0x4061d2\n    __memcpy_chk(v127, (int64_t *)v108, (int32_t)v124, 41);\n    int32_t * v128 = (int32_t *)(v5 + 20); // 0x4061d7\n    *v128 = (int32_t)v106;\n    int64_t v129 = *v126; // 0x4061e9\n    int64_t * v130 = (int64_t *)str4;\n    int32_t v131 = v129;\n    int64_t v132 = *(int64_t *)(v5 + 56);\n    int64_t v133 = v107;\n    uint64_t v134 = v124;\n    unsigned char v135 = *(char *)v132; // 0x4061f0\n    int64_t v136 = -1; // 0x4061f6\n    int64_t v137 = v132; // 0x4061f6\n    if (v135 != 0) {\n        // 0x4061f8\n        v136 = v135 >= 127 ? v134 : (int64_t)v135;\n        v137 = v132 + 1;\n    }\n    int64_t v138 = v136;\n    while (v134 >= v138) {\n        int64_t v139 = v133 - v138; // 0x406230\n        int64_t v140 = v134 - v138; // 0x406233\n        memcpy((int64_t *)v139, (int64_t *)(v140 + v125), (int32_t)v138);\n        if (v140 == 0) {\n            // 0x406721\n            v104 = (int64_t)*v128;\n            v105 = v139;\n            goto lab_0x406025;\n        }\n        int64_t v141 = v139 - v129; // 0x406253\n        memcpy((int64_t *)v141, v130, v131);\n        v132 = v137;\n        v133 = v141;\n        v134 = v140;\n        v135 = *(char *)v132;\n        v136 = v138;\n        v137 = v132;\n        if (v135 != 0) {\n            // 0x4061f8\n            v136 = v135 >= 127 ? v134 : (int64_t)v135;\n            v137 = v132 + 1;\n        }\n        // 0x406209\n        v138 = v136;\n    }\n    int64_t v142 = v133 - v134; // 0x40621d\n    memcpy((int64_t *)v142, v127, (int32_t)v134);\n    v104 = (int64_t)*v128;\n    v105 = v142;\n    goto lab_0x406025;\n  lab_0x4063d8:;\n    int3_t v143 = v144;\n    if ((a3 & 8) == 0) {\n        // 0x4063f8\n        __frontend_reg_store_fpr(v143, __frontend_reg_load_fpr(v143));\n        goto lab_0x4063fa;\n    } else {\n        // 0x4063df\n        if (*(char *)(v1 - 1 + v145) == 48) {\n            int3_t v146 = v143 - 1; // 0x4065b8\n            __frontend_reg_store_fpr(v146, 10.0L);\n            float80_t v147 = __frontend_reg_load_fpr(v143); // 0x4065c3\n            __frontend_reg_store_fpr(v143, v147 * __frontend_reg_load_fpr(v146));\n            v148 = v146;\n            if (v3 != 1) {\n                goto lab_0x405f51;\n            } else {\n                goto lab_0x405f76;\n            }\n        } else {\n            // 0x4063ef\n            __frontend_reg_store_fpr(v143, __frontend_reg_load_fpr(v143));\n            goto lab_0x4063fa;\n        }\n    }\n  lab_0x406035:;\n    uint32_t v149 = *(int32_t *)v109 & 256; // 0x406039\n    if ((v149 || (int32_t)v111) == 0) {\n        // 0x406048\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v150 = v149; // 0x406039\n    v112 = v150;\n    v114 = v111;\n    int64_t v151 = v150; // 0x4064a5\n    int64_t v152 = v111; // 0x4064a5\n    if ((v110 & 64) == 0) {\n        goto lab_0x4062c8;\n    } else {\n        goto lab_0x4062b1;\n    }\n  lab_0x4065d8:;\n    int64_t v153 = v70; // 0x4065db\n    int64_t v154 = v65 + 48 & 0xffffffff; // 0x4065db\n    goto lab_0x406557;\n  lab_0x406547:\n    // 0x406547\n    v153 = v69;\n    v154 = 48;\n    v68 = v69;\n    v67 = v66;\n    v64 = v11;\n    if ((a3 & 8) != 0) {\n        goto lab_0x406590;\n    } else {\n        goto lab_0x406557;\n    }\n  lab_0x405f76:;\n    int3_t v172 = v148 + 1; // 0x405f76\n    __frontend_reg_store_fpr(v172, __frontend_reg_load_fpr(v172) / __frontend_reg_load_fpr(v148));\n    __frontend_reg_load_fpr(v172);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len5 = strlen((char *)str3); // 0x405fa2\n    v96 = len5;\n    v97 = v165;\n    v98 = len5;\n    goto lab_0x406000;\n  lab_0x405f51:;\n    int3_t v173 = v174 - 1; // 0x405f51\n    __frontend_reg_store_fpr(v173, 1.84467e+19L);\n    float80_t v175 = __frontend_reg_load_fpr(v173); // 0x405f57\n    v148 = v174;\n    if (v175 > __frontend_reg_load_fpr(v176)) {\n        float80_t v177 = __frontend_reg_load_fpr(v174); // 0x405f5b\n        function_405cb0(v3, __frontend_reg_load_fpr(v176));\n        __frontend_reg_store_fpr(v176, v177);\n        v148 = v176;\n    }\n    goto lab_0x405f76;\n  lab_0x4062c8:\n    // 0x4062c8\n    v113 = v151;\n    v115 = v152;\n    int64_t v168; // 0x405d70\n    if ((int32_t)v152 == 0) {\n        // 0x40672d\n        v168 = v4;\n        if ((int32_t)v151 == 0) {\n            // 0x406048\n            *(char *)v4 = 0;\n            return result;\n        }\n        goto lab_0x40630d;\n    } else {\n        goto lab_0x4062d0;\n    }\n  lab_0x4062b1:;\n    int64_t v178 = *(int64_t *)(v5 + 8); // 0x4062b1\n    *(char *)(v178 + 647) = 32;\n    v4 = v178 + 648;\n    v151 = v112;\n    v152 = v114;\n    goto lab_0x4062c8;\n  lab_0x406590:\n    // 0x406590\n    v32 = v63;\n    v33 = v71;\n    v34 = v68;\n    v35 = v67;\n    v36 = 0;\n    v37 = v64;\n    v41 = v71;\n    v44 = v68;\n    v39 = v64;\n    if (v3 == 1) {\n        goto lab_0x406160;\n    } else {\n        goto lab_0x406130;\n    }\n  lab_0x406557:;\n    int64_t v155 = v1 + 646; // 0x40655c\n    *(char *)v155 = (char)v154;\n    int64_t v156 = v10 & 0xffffffff; // 0x406569\n    int64_t v157 = v155 - v10; // 0x40656c\n    uint32_t v158 = (int32_t)v10; // 0x40656f\n    if (v158 >= 8) {\n        int64_t v159 = v157 + 8 & -8; // 0x4065fc\n        *(int64_t *)v157 = *(int64_t *)v9;\n        *(int64_t *)(v156 + v157 - 8) = *(int64_t *)(v156 + v9 - 8);\n        int64_t v160 = v157 - v159; // 0x406613\n        uint32_t v161 = (int32_t)(v160 + v10); // 0x40661f\n        v68 = v153;\n        v67 = 0;\n        v64 = v157;\n        if (v161 >= 8) {\n            int64_t v162 = v9 - v160; // 0x406616\n            int64_t v163 = 0;\n            int64_t v164 = v163 + 8; // 0x40662f\n            *(int64_t *)(v163 + v159) = *(int64_t *)(v162 + v163);\n            v68 = v153;\n            v67 = 0;\n            v64 = v157;\n            while ((v161 & -8) > (int32_t)v164) {\n                // 0x40662d\n                v163 = v164 & 0xffffffff;\n                v164 = v163 + 8;\n                *(int64_t *)(v163 + v159) = *(int64_t *)(v162 + v163);\n                v68 = v153;\n                v67 = 0;\n                v64 = v157;\n            }\n        }\n    } else {\n        if ((v10 & 4) != 0) {\n            // 0x4066f7\n            *(int32_t *)v157 = *(int32_t *)v9;\n            *(int32_t *)(v156 + v157 - 4) = *(int32_t *)(v156 + v9 - 4);\n            v68 = v153;\n            v67 = 0;\n            v64 = v157;\n        } else {\n            // 0x40657f\n            v68 = v153;\n            v67 = 0;\n            v64 = v157;\n            if (v158 != 0) {\n                // 0x406583\n                *(char *)v157 = *(char *)v9;\n                v68 = v153;\n                v67 = 0;\n                v64 = v157;\n                if ((v10 & 2) != 0) {\n                    // 0x4065a3\n                    *(int16_t *)(v156 + v157 - 2) = *(int16_t *)(v156 + v9 - 2);\n                    v68 = v153;\n                    v67 = 0;\n                    v64 = v157;\n                }\n            }\n        }\n    }\n    goto lab_0x406590;\n  lab_0x4063fa:\n    // 0x4063fa\n    v96 = v145;\n    v97 = v165;\n    v98 = v145 + -1 - v10;\n    goto lab_0x406000;\n  lab_0x4062d0:;\n    int32_t * v166 = (int32_t *)(v5 + 48); // 0x4062d0\n    if (*v166 == 0 == (int32_t)v115 == 1) {\n        int64_t v167 = v4 + 1; // 0x4064f4\n        *(char *)v4 = 107;\n        v168 = v167;\n        if ((int32_t)v113 == 0) {\n            // 0x406503\n            v4 = v167;\n            // 0x406048\n            *(char *)v4 = 0;\n            return result;\n        }\n    } else {\n        int64_t v169 = v4; // 0x4062e6\n        char v170 = *(char *)((0x100000000 * v115 >> 32) + (int64_t)&g9); // 0x4062ea\n        int64_t v171 = v169 + 1; // 0x4062f1\n        *(char *)v169 = v170;\n        if ((int32_t)v113 == 0) {\n            // 0x406503\n            v4 = v171;\n            // 0x406048\n            *(char *)v4 = 0;\n            return result;\n        }\n        // 0x4062ff\n        v168 = v171;\n        if (*v166 != 0) {\n            // 0x4064b0\n            *(char *)v171 = 105;\n            v168 = v169 + 2;\n        }\n    }\n    goto lab_0x40630d;\n  lab_0x40630d:\n    // 0x40630d\n    *(char *)v168 = 66;\n    v4 = v168 + 1;\n    // 0x406048\n    *(char *)v4 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406740",
            "funcStartAddr": "406740",
            "funcEndAddr": "4068f7",
            "decompiledFuncCode": "int64_t function_406740(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1; // 0x406756\n    if (a1 == 0) {\n        char * env_val = getenv(\"BLOCK_SIZE\"); // 0x406865\n        v1 = (int64_t)env_val;\n        if (env_val == NULL) {\n            char * env_val2 = getenv(\"BLOCKSIZE\"); // 0x40687b\n            v1 = (int64_t)env_val2;\n            if (env_val2 == NULL) {\n                int64_t * v2 = (int64_t *)a3;\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4068e2\n                    *v2 = 1024;\n                    *(int32_t *)a2 = 0;\n                } else {\n                    // 0x40689b\n                    *v2 = 512;\n                    *(int32_t *)a2 = 0;\n                }\n                // 0x40679e\n                return 0;\n            }\n        }\n    }\n    char v3 = *(char *)v1; // 0x40675e\n    int64_t v4 = v1 + (int64_t)(v3 == 39);\n    int64_t v5 = v3 != 39 ? 0 : 4;\n    int64_t v6 = function_40a670(v4, g8, (int64_t *)&g7, 4); // 0x40677e\n    if ((int32_t)v6 >= 0) {\n        // 0x406787\n        *(int64_t *)a3 = 1;\n        int32_t v7 = *(int32_t *)((0x100000000 * v6 >> 30) + (int64_t)&g7); // 0x406791\n        *(int32_t *)a2 = v7 | (int32_t)v5;\n        // 0x40679e\n        return 0;\n    }\n    int64_t * v8 = (int64_t *)a3; // 0x4067c3\n    int64_t v9; // bp-48, 0x406740\n    int64_t v10; // 0x406740\n    int64_t result = function_408f50(v4, &v9, 0, v8, \"eEgGkKmMpPtTyYzZ0\", v10); // 0x4067c3\n    if ((int32_t)result != 0) {\n        // 0x406824\n        *(int32_t *)a2 = 0;\n        // 0x40682d\n        *v8 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    int64_t v11 = (int64_t)*(char *)v4 + 0xffffffd0; // 0x4067cf\n    int64_t v12 = v11 & 0xffffffff; // 0x4067cf\n    int64_t v13 = v12; // 0x4067d5\n    int64_t v14 = v5; // 0x4067d5\n    int64_t v15; // 0x406740\n    if ((char)v11 < 10) {\n        goto lab_0x406824;\n    } else {\n        // 0x4067d7\n        v15 = v12;\n        if (v4 != v9) {\n            int64_t v16 = v4 + 1; // 0x4067f9\n            int64_t v17 = (int64_t)*(char *)v16 + 0xffffffd0; // 0x406800\n            while ((char)v17 >= 10) {\n                // 0x4067f0\n                if (v16 == v9) {\n                    // 0x4068b8\n                    v15 = v17 & 0xffffffff;\n                    goto lab_0x4068b8_2;\n                }\n                v16++;\n                v17 = (int64_t)*(char *)v16 + 0xffffffd0;\n            }\n            // 0x406824\n            v13 = v17 & 0xffffffff;\n            v14 = v5;\n            goto lab_0x406824;\n        } else {\n            goto lab_0x4068b8_2;\n        }\n    }\n  lab_0x406824:\n    // 0x406824\n    *(int32_t *)a2 = (int32_t)v14;\n    if (v13 == 0) {\n        // 0x40682d\n        *v8 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    // 0x40679e\n    return result;\n  lab_0x4068b8_2:;\n    // 0x4068b8\n    int64_t v18; // 0x406740\n    if (*(char *)(v9 - 1) == 66) {\n        int64_t v19 = v5 | 384; // 0x4068d0\n        v13 = v15;\n        v14 = v19;\n        v18 = v19;\n        if (*(char *)(v9 - 2) != 105) {\n            goto lab_0x406824;\n        } else {\n            goto lab_0x4068c2;\n        }\n    } else {\n        // 0x4068be\n        v18 = v5 | 128;\n        goto lab_0x4068c2;\n    }\n  lab_0x4068c2:\n    // 0x4068c2\n    v13 = v15;\n    v14 = v18 & 0xffffffdf | 32;\n    goto lab_0x406824;\n}\n"
        },
        {
            "funcName": "function_406900",
            "funcStartAddr": "406900",
            "funcEndAddr": "406a02",
            "decompiledFuncCode": "int64_t function_406900(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x406900\n    int64_t v1; // 0x406900\n    if ((char)v1 != 0) {\n        // 0x406913\n        int128_t v2; // 0x406900\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g40; // 0x40694a\n    g40 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x40695f\n        g40 = v3;\n        g41 = 0;\n        int64_t result; // 0x406900\n        return result;\n    }\n    int64_t result2 = function_40a500(a1, a2, &g10, (int64_t *)&g11, 0, a6); // 0x406999\n    int32_t v4 = result2; // 0x40699e\n    switch (v4) {\n        default: {\n            // 0x4069a8\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x4069ca\n                function_408b20((int64_t)g43, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x40695f\n            g40 = v3;\n            g41 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_406a10",
            "funcStartAddr": "406a10",
            "funcEndAddr": "406aa9",
            "decompiledFuncCode": "int64_t function_406a10(int64_t str) {\n    // 0x406a10\n    if (str == 0) {\n        // 0x406a89\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g45);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x406a1e\n    int64_t result = (int64_t)found_char_pos; // 0x406a1e\n    if (found_char_pos == NULL) {\n        // 0x406a79\n        g110 = str;\n        g44 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x406a28\n    if (v1 - str < 7) {\n        // 0x406a79\n        g110 = str;\n        g44 = str;\n        return result;\n    }\n    // 0x406a38\n    bool v2; // 0x406a10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x406a10\n    int64_t v5 = result - 6; // 0x406a10\n    int64_t v6 = 7; // 0x406a46\n    unsigned char v7 = *(char *)v5; // 0x406a46\n    char v8 = *(char *)v4; // 0x406a46\n    char v9 = v8; // 0x406a46\n    bool v10 = false; // 0x406a46\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x406a50\n    int64_t v13 = v1; // 0x406a50\n    int64_t v14 = 3; // 0x406a50\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x406a79\n        g110 = str;\n        g44 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x406a62\n    char v16 = *(char *)v12; // 0x406a62\n    char v17 = v16; // 0x406a62\n    bool v18 = false; // 0x406a62\n    while (v15 == v16) {\n        // 0x406a52\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x406a6c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x406a6e\n        v20 = result + 4;\n        g42 = v20;\n    }\n    // 0x406a79\n    g110 = v20;\n    g44 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406ab0",
            "funcStartAddr": "406ab0",
            "funcEndAddr": "406ba2",
            "decompiledFuncCode": "int64_t function_406ab0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x406ac4\n    int64_t result = (int64_t)v1; // 0x406ac4\n    if (result != a1) {\n        // 0x406ad1\n        return result;\n    }\n    int64_t v2 = function_40aa50(); // 0x406ae0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x406b96\n    if (v3 == 85) {\n        // 0x406af0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x406b88\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g17 : (int64_t)&g12;\n            return result2;\n        }\n        char v4 = *v1; // 0x406b1e\n        int64_t result3 = v4 != 96 ? (int64_t)&g13 : (int64_t)&g16; // 0x406b2b\n        // 0x406ad1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x406b88\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g17 : (int64_t)&g12;\n        return result2;\n    }\n    char v5 = *v1; // 0x406b6d\n    int64_t result4 = v5 != 96 ? (int64_t)&g14 : (int64_t)&g15; // 0x406b7a\n    // 0x406ad1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "406c07",
            "decompiledFuncCode": "int64_t function_406bb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x406bb0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x406bf8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406c07",
            "funcStartAddr": "406c07",
            "funcEndAddr": "407dd1",
            "decompiledFuncCode": "int64_t function_406c07(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x406c51\n    int64_t v3 = 0; // 0x406c51\n    int64_t v4; // 0x406c07\n    int64_t v5; // 0x406c07\n    int64_t v6; // 0x406c07\n    int64_t v7; // 0x406c07\n    int64_t v8; // 0x406c07\n    int64_t v9; // 0x406c07\n    int64_t v10; // 0x406c07\n    int64_t v11; // 0x406c07\n    int64_t v12; // 0x406c07\n    int64_t v13; // 0x406c07\n    int64_t v14; // 0x406c07\n    int64_t v15; // 0x406c07\n    int64_t v16; // 0x406c07\n    int64_t v17; // 0x406c07\n    int64_t v18; // 0x406c07\n    int64_t result; // 0x406c07\n    int64_t v19; // 0x406c07\n    int32_t wc; // bp+132, 0x406c07\n    int64_t ps; // bp+136, 0x406c07\n    char v20; // 0x4071c0\n    int64_t v21; // 0x4071c0\n    int64_t v22; // 0x407568\n    int64_t v23; // 0x406c07\n    int64_t v24; // 0x407587\n    int32_t v25; // 0x406c07\n    while (true) {\n      lab_0x406c58_2:\n        // 0x406c58\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x406c07\n        int64_t v27; // 0x406c8c\n        while (true) {\n          lab_0x406c58:\n            // 0x406c58\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x406c63\n            if (v15 == -1) {\n                // 0x406c65\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x406c73\n            if (v28) {\n                // break (via goto) -> 0x4073d8\n                goto lab_0x4073d8;\n            }\n            // 0x406c7c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g127 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40726b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x406db1;\n                    }\n                    // 0x40768d\n                    v26 = v5 + 1;\n                    goto lab_0x406c58;\n                }\n                case 7: {\n                    goto lab_0x406db1;\n                }\n                case 8: {\n                    goto lab_0x406db1;\n                }\n                case 9: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x406db1;\n                }\n                case 12: {\n                    goto lab_0x406db1;\n                }\n                case 13: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x406d7d;\n                }\n                case 36: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x406db1;\n                }\n                case 38: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x406db1;\n                }\n                case 44: {\n                    goto lab_0x406db1;\n                }\n                case 45: {\n                    goto lab_0x406db1;\n                }\n                case 46: {\n                    goto lab_0x406db1;\n                }\n                case 47: {\n                    goto lab_0x406db1;\n                }\n                case 48: {\n                    goto lab_0x406db1;\n                }\n                case 49: {\n                    goto lab_0x406db1;\n                }\n                case 50: {\n                    goto lab_0x406db1;\n                }\n                case 51: {\n                    goto lab_0x406db1;\n                }\n                case 52: {\n                    goto lab_0x406db1;\n                }\n                case 53: {\n                    goto lab_0x406db1;\n                }\n                case 54: {\n                    goto lab_0x406db1;\n                }\n                case 55: {\n                    goto lab_0x406db1;\n                }\n                case 56: {\n                    goto lab_0x406db1;\n                }\n                case 57: {\n                    goto lab_0x406db1;\n                }\n                case 58: {\n                    goto lab_0x406db1;\n                }\n                case 59: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x406db1;\n                }\n                case 66: {\n                    goto lab_0x406db1;\n                }\n                case 67: {\n                    goto lab_0x406db1;\n                }\n                case 68: {\n                    goto lab_0x406db1;\n                }\n                case 69: {\n                    goto lab_0x406db1;\n                }\n                case 70: {\n                    goto lab_0x406db1;\n                }\n                case 71: {\n                    goto lab_0x406db1;\n                }\n                case 72: {\n                    goto lab_0x406db1;\n                }\n                case 73: {\n                    goto lab_0x406db1;\n                }\n                case 74: {\n                    goto lab_0x406db1;\n                }\n                case 75: {\n                    goto lab_0x406db1;\n                }\n                case 76: {\n                    goto lab_0x406db1;\n                }\n                case 77: {\n                    goto lab_0x406db1;\n                }\n                case 78: {\n                    goto lab_0x406db1;\n                }\n                case 79: {\n                    goto lab_0x406db1;\n                }\n                case 80: {\n                    goto lab_0x406db1;\n                }\n                case 81: {\n                    goto lab_0x406db1;\n                }\n                case 82: {\n                    goto lab_0x406db1;\n                }\n                case 83: {\n                    goto lab_0x406db1;\n                }\n                case 84: {\n                    goto lab_0x406db1;\n                }\n                case 85: {\n                    goto lab_0x406db1;\n                }\n                case 86: {\n                    goto lab_0x406db1;\n                }\n                case 87: {\n                    goto lab_0x406db1;\n                }\n                case 88: {\n                    goto lab_0x406db1;\n                }\n                case 89: {\n                    goto lab_0x406db1;\n                }\n                case 90: {\n                    goto lab_0x406db1;\n                }\n                case 91: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x406db1;\n                }\n                case 94: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x406db1;\n                }\n                case 96: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x406db1;\n                }\n                case 98: {\n                    goto lab_0x406db1;\n                }\n                case 99: {\n                    goto lab_0x406db1;\n                }\n                case 100: {\n                    goto lab_0x406db1;\n                }\n                case 101: {\n                    goto lab_0x406db1;\n                }\n                case 102: {\n                    goto lab_0x406db1;\n                }\n                case 103: {\n                    goto lab_0x406db1;\n                }\n                case 104: {\n                    goto lab_0x406db1;\n                }\n                case 105: {\n                    goto lab_0x406db1;\n                }\n                case 106: {\n                    goto lab_0x406db1;\n                }\n                case 107: {\n                    goto lab_0x406db1;\n                }\n                case 108: {\n                    goto lab_0x406db1;\n                }\n                case 109: {\n                    goto lab_0x406db1;\n                }\n                case 110: {\n                    goto lab_0x406db1;\n                }\n                case 111: {\n                    goto lab_0x406db1;\n                }\n                case 112: {\n                    goto lab_0x406db1;\n                }\n                case 113: {\n                    goto lab_0x406db1;\n                }\n                case 114: {\n                    goto lab_0x406db1;\n                }\n                case 115: {\n                    goto lab_0x406db1;\n                }\n                case 116: {\n                    goto lab_0x406db1;\n                }\n                case 117: {\n                    goto lab_0x406db1;\n                }\n                case 118: {\n                    goto lab_0x406db1;\n                }\n                case 119: {\n                    goto lab_0x406db1;\n                }\n                case 120: {\n                    goto lab_0x406db1;\n                }\n                case 121: {\n                    goto lab_0x406db1;\n                }\n                case 122: {\n                    goto lab_0x406db1;\n                }\n                case 123: {\n                    goto lab_0x406d55;\n                }\n                case 124: {\n                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x406d55;\n                }\n                case 126: {\n                    goto lab_0x406d7d;\n                }\n                default: {\n                    goto lab_0x407155;\n                }\n            }\n        }\n      lab_0x407155:\n        if (v23 != 1) {\n            // 0x4074c0\n            ps = 0;\n            int64_t len = v15; // 0x4074d0\n            if (v15 == -1) {\n                // 0x4074d2\n                len = strlen((char *)str);\n            }\n            // 0x4074fe\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40755f:\n                // 0x40755f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x407564\n                int64_t v30 = v29 + str;\n                v24 = function_40a580(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x407ada_2;\n                    }\n                    case -1: {\n                        goto lab_0x407ada_2;\n                    }\n                    case -2: {\n                        // 0x407bbd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x407bf7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x407bfa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x407c07\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x407c00\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x407ada\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x407ada_2;\n                    }\n                    case 1: {\n                        goto lab_0x407530;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4075dc\n                        char v34 = *(char *)v33; // 0x4075ed\n                        unsigned char v35; // 0x406c07\n                        if (v34 < 125) {\n                            // 0x4075f8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40760f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4075e0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4075ed\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4075f8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40760f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4075e0\n                            v33++;\n                        }\n                        goto lab_0x407530;\n                    }\n                }\n            }\n            goto lab_0x407ada_2;\n        } else {\n            // 0x4071a4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x406db1;\n        }\n    }\n  lab_0x4073d8:\n    // 0x4073d8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x407cda\n        if (v8 > result) {\n            // 0x407ce3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x407007\n        return result;\n    }\n    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x406db1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x406dc0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x406fca_2;\n        }\n    }\n    int64_t v39 = result; // 0x406ec1\n    char v40 = v20; // 0x406ec1\n    int64_t v41 = v38; // 0x406ec1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x406ec1\n    int64_t v43 = v36; // 0x406ec1\n    goto lab_0x406e3d;\n  lab_0x406fca_2:\n    // 0x407007\n    return function_406bb0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x407ada_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x406db1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4076ae\n        int64_t v50 = v5 + 1; // 0x407791\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x407798\n        char v52 = v20; // 0x407798\n        int64_t v53 = result; // 0x407798\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x407761\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x407765\n            int64_t v56 = v54 + 1; // 0x40776a\n            int64_t v57 = v51 + 1; // 0x407791\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40775c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x407761\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x407765\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x406e3d;\n    }\n  lab_0x407530:\n    // 0x407530\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40754f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x407552\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x407ada\n        goto lab_0x407ada_2;\n    }\n    goto lab_0x40755f;\n  lab_0x406d7d:\n    // 0x406d7d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x406fca_2;\n    }\n    goto lab_0x406db1;\n  lab_0x406d55:;\n    bool v60 = v15 == 1; // 0x406d60\n    if (v15 == -1) {\n        // 0x406d62\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x406d6e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x406db1;\n    } else {\n        goto lab_0x406d7d;\n    }\n  lab_0x406e3d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x406e42\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x406e46\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x406c58_2;\n}\n"
        },
        {
            "funcName": "function_407de0",
            "funcStartAddr": "407de0",
            "funcEndAddr": "407f7e",
            "decompiledFuncCode": "int64_t function_407de0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x407de2\n    int32_t * v3 = __errno_location(); // 0x407dfc\n    int64_t v4 = (int64_t)g35; // 0x407e01\n    int32_t v5 = *v3; // 0x407e0b\n    int64_t v6 = v4; // 0x407e21\n    if (v2 >= (int64_t)*(int32_t *)&g38) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x407f79\n            function_408f10(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x407e30\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x407e37\n        int64_t v9; // 0x407de0\n        if (g35 == &g36) {\n            int64_t v10 = function_408d20(0, v8); // 0x407f5a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g36); // 0x407f5f\n            *(int64_t *)&g35 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_408d20(v4, v8); // 0x407e4b\n            *(int64_t *)&g35 = v12;\n            v9 = v12;\n        }\n        // 0x407e5a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g38; // 0x407e5a\n        int32_t v14 = v7; // 0x407e61\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g38 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x407e91\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x407e9b\n    int64_t * v17 = (int64_t *)v15; // 0x407e9e\n    uint64_t v18 = *v17; // 0x407e9e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x407ea1\n    int64_t result = *v19; // 0x407ea1\n    int64_t v20; // 0x407de0\n    uint64_t v21 = function_406bb0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x407ec4\n    if (v18 > v21) {\n        // 0x407f3b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x407ed7\n    *v17 = v22;\n    if (result != (int64_t)&g111) {\n        // 0x407ee7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_408cc0(v22); // 0x407f01\n    *v19 = result2;\n    int64_t v23; // 0x407de0\n    function_406bb0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x407f3b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407f80",
            "funcStartAddr": "407f80",
            "funcEndAddr": "407fb4",
            "decompiledFuncCode": "int64_t function_407f80(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x407f87\n    int64_t result = function_408ec0(a1 == 0 ? (int64_t)&g112 : a1, 56); // 0x407fa6\n    return result;\n}\n"
        },
        {
            "funcName": "function_407fc0",
            "funcStartAddr": "407fc0",
            "funcEndAddr": "407fcf",
            "decompiledFuncCode": "int64_t function_407fc0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g112 : a1); // 0x407fcc\n    return result;\n}\n"
        },
        {
            "funcName": "function_407fd0",
            "funcStartAddr": "407fd0",
            "funcEndAddr": "407fdf",
            "decompiledFuncCode": "int64_t function_407fd0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g112 : a1; // 0x407fd8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g112;\n}\n"
        },
        {
            "funcName": "function_407fe0",
            "funcStartAddr": "407fe0",
            "funcEndAddr": "408013",
            "decompiledFuncCode": "int64_t function_407fe0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g112 + 8 : a1 + 8; // 0x407ff9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x407ffe\n    uint32_t v3 = *v2; // 0x407ffe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x408002\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_408020",
            "funcStartAddr": "408020",
            "funcEndAddr": "408033",
            "decompiledFuncCode": "int64_t function_408020(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g112 + 4 : a1 + 4); // 0x40802c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_408040",
            "funcStartAddr": "408040",
            "funcEndAddr": "40806b",
            "decompiledFuncCode": "int64_t function_408040(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g112 : a1; // 0x408048\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x408065\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40805c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g112;\n}\n"
        },
        {
            "funcName": "function_408070",
            "funcStartAddr": "408070",
            "funcEndAddr": "4080e2",
            "decompiledFuncCode": "int64_t function_408070(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g112 : a5; // 0x408092\n    int32_t * v2 = __errno_location(); // 0x40809b\n    uint32_t v3 = *(int32_t *)v1; // 0x4080bb\n    int64_t result = function_406bb0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4080ca\n    return result;\n}\n"
        },
        {
            "funcName": "function_4080f0",
            "funcStartAddr": "4080f0",
            "funcEndAddr": "4081d1",
            "decompiledFuncCode": "int64_t function_4080f0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g112 : a4; // 0x408112\n    int32_t * v2 = __errno_location(); // 0x408118\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x408137\n    int32_t * v4 = (int32_t *)v1; // 0x40813a\n    int64_t v5 = function_406bb0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x408155\n    int64_t v6 = v5 + 1; // 0x40815a\n    int64_t result = function_408cc0(v6); // 0x40816f\n    function_406bb0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4081b4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4081bd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4081e0",
            "funcStartAddr": "4081e0",
            "funcEndAddr": "4081ea",
            "decompiledFuncCode": "int64_t function_4081e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4081e0\n    return function_4080f0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4081f0",
            "funcStartAddr": "4081f0",
            "funcEndAddr": "408285",
            "decompiledFuncCode": "int64_t function_4081f0(void) {\n    uint32_t v1 = *(int32_t *)&g38; // 0x4081f0\n    int64_t v2 = v1; // 0x4081f0\n    int64_t v3 = v2; // 0x408204\n    if (v1 >= 2) {\n        int64_t v4 = &g38;\n        int64_t v5 = v4 + 16; // 0x408223\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g128;\n        while (v5 != (int64_t)g35 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x408220\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g128;\n        }\n    }\n    int64_t v6 = v3; // 0x40823d\n    if (g36 != 0x6146a0) {\n        // 0x40823f\n        free((int64_t *)g36);\n        g36 = 256;\n        *(int64_t *)&g37 = (int64_t)&g111;\n        v6 = &g128;\n    }\n    int64_t result = v6; // 0x408261\n    if (g35 != &g36) {\n        // 0x408263\n        free(g35);\n        *(int64_t *)&g35 = (int64_t)&g36;\n        result = &g128;\n    }\n    // 0x408276\n    *(int32_t *)&g38 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408290",
            "funcStartAddr": "408290",
            "funcEndAddr": "4082a1",
            "decompiledFuncCode": "int64_t function_408290(void) {\n    // 0x408290\n    int64_t v1; // 0x408290\n    return function_407de0(v1, v1, -1, (int64_t *)&g112);\n}\n"
        },
        {
            "funcName": "function_4082b0",
            "funcStartAddr": "4082b0",
            "funcEndAddr": "4082ba",
            "decompiledFuncCode": "int64_t function_4082b0(void) {\n    // 0x4082b0\n    int64_t v1; // 0x4082b0\n    return function_407de0(v1, v1, v1, (int64_t *)&g112);\n}\n"
        },
        {
            "funcName": "function_4082c0",
            "funcStartAddr": "4082c0",
            "funcEndAddr": "4082d6",
            "decompiledFuncCode": "int64_t function_4082c0(int64_t a1) {\n    // 0x4082c0\n    return function_407de0(0, a1, -1, (int64_t *)&g112);\n}\n"
        },
        {
            "funcName": "function_4082e0",
            "funcStartAddr": "4082e0",
            "funcEndAddr": "4082f2",
            "decompiledFuncCode": "int64_t function_4082e0(int64_t a1, int64_t a2) {\n    // 0x4082e0\n    return function_407de0(0, a1, a2, (int64_t *)&g112);\n}\n"
        },
        {
            "funcName": "function_408300",
            "funcStartAddr": "408300",
            "funcEndAddr": "408368",
            "decompiledFuncCode": "int64_t function_408300(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408310\n    return function_407de0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408370",
            "funcStartAddr": "408370",
            "funcEndAddr": "4083d4",
            "decompiledFuncCode": "int64_t function_408370(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408380\n    return function_407de0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4083e0",
            "funcStartAddr": "4083e0",
            "funcEndAddr": "4083ec",
            "decompiledFuncCode": "int64_t function_4083e0(int64_t a1, int64_t a2) {\n    // 0x4083e0\n    return function_408300(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4083f0",
            "funcStartAddr": "4083f0",
            "funcEndAddr": "4083ff",
            "decompiledFuncCode": "int64_t function_4083f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4083f0\n    return function_408370(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_408400",
            "funcStartAddr": "408400",
            "funcEndAddr": "408470",
            "decompiledFuncCode": "int64_t function_408400(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g112); // 0x40840d\n    int128_t v2 = __asm_movdqa(g113); // 0x408415\n    int128_t v3 = __asm_movdqa(g114); // 0x40841d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x408432\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x408448\n    uint32_t v6 = *v5; // 0x408448\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40844d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_407de0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_408470",
            "funcStartAddr": "408470",
            "funcEndAddr": "40847d",
            "decompiledFuncCode": "int64_t function_408470(int64_t a1, int64_t a2) {\n    // 0x408470\n    return function_408400(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_408480",
            "funcStartAddr": "408480",
            "funcEndAddr": "408491",
            "decompiledFuncCode": "int64_t function_408480(int64_t a1) {\n    // 0x408480\n    return function_408400(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4084a0",
            "funcStartAddr": "4084a0",
            "funcEndAddr": "4084aa",
            "decompiledFuncCode": "int64_t function_4084a0(void) {\n    // 0x4084a0\n    int64_t v1; // 0x4084a0\n    return function_408400(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4084b0",
            "funcStartAddr": "4084b0",
            "funcEndAddr": "40851e",
            "decompiledFuncCode": "int64_t function_4084b0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4084ca\n    return function_407de0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408520",
            "funcStartAddr": "408520",
            "funcEndAddr": "40858c",
            "decompiledFuncCode": "int64_t function_408520(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g112); // 0x408527\n    int128_t v2 = __asm_movdqa(g113); // 0x40852f\n    int128_t v3 = __asm_movdqa(g114); // 0x408537\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x408559\n    if (a2 == 0 || a3 == 0) {\n        // 0x408587\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40856a\n    return function_407de0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_408590",
            "funcStartAddr": "408590",
            "funcEndAddr": "408599",
            "decompiledFuncCode": "int64_t function_408590(void) {\n    // 0x408590\n    int64_t v1; // 0x408590\n    return function_408520(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4085a0",
            "funcStartAddr": "4085a0",
            "funcEndAddr": "4085b7",
            "decompiledFuncCode": "int64_t function_4085a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4085a0\n    return function_408520(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4085c0",
            "funcStartAddr": "4085c0",
            "funcEndAddr": "4085d3",
            "decompiledFuncCode": "int64_t function_4085c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4085c0\n    return function_408520(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4085e0",
            "funcStartAddr": "4085e0",
            "funcEndAddr": "4085ea",
            "decompiledFuncCode": "int64_t function_4085e0(void) {\n    // 0x4085e0\n    int64_t v1; // 0x4085e0\n    return function_407de0(v1, v1, v1, &g34);\n}\n"
        },
        {
            "funcName": "function_4085f0",
            "funcStartAddr": "4085f0",
            "funcEndAddr": "408602",
            "decompiledFuncCode": "int64_t function_4085f0(int64_t a1, int64_t a2) {\n    // 0x4085f0\n    return function_407de0(0, a1, a2, &g34);\n}\n"
        },
        {
            "funcName": "function_408610",
            "funcStartAddr": "408610",
            "funcEndAddr": "408621",
            "decompiledFuncCode": "int64_t function_408610(int64_t a1, char * a2, int64_t a3, int64_t a4) {\n    // 0x408610\n    return function_407de0(a1, (int64_t)a2, -1, &g34);\n}\n"
        },
        {
            "funcName": "function_408630",
            "funcStartAddr": "408630",
            "funcEndAddr": "408646",
            "decompiledFuncCode": "int64_t function_408630(int64_t a1) {\n    // 0x408630\n    return function_407de0(0, a1, -1, &g34);\n}\n"
        },
        {
            "funcName": "function_408650",
            "funcStartAddr": "408650",
            "funcEndAddr": "408701",
            "decompiledFuncCode": "int64_t function_408650(int64_t a1, int64_t a2, int32_t file_name, int32_t line_num, int64_t a5, int64_t a6) {\n    int64_t v1 = function_4094c0(a5, a6); // 0x40866a\n    if (v1 == 0) {\n        // 0x4086d5\n        error(0, *__errno_location(), dcgettext(NULL, \"unable to display error message\", 5));\n        abort();\n        // UNREACHABLE\n    }\n    int32_t status = a1;\n    int32_t err_num = a2;\n    if (file_name == 0) {\n        // 0x4086b0\n        error(status, err_num, \"%s\", (char *)v1);\n        free((int64_t *)v1);\n        return &g128;\n    }\n    // 0x40867c\n    error_at_line(status, err_num, (char *)(int64_t)file_name, line_num, \"%s\", (char *)v1);\n    free((int64_t *)v1);\n    return &g128;\n}\n"
        },
        {
            "funcName": "function_408710",
            "funcStartAddr": "408710",
            "funcEndAddr": "40871f",
            "decompiledFuncCode": "int64_t function_408710(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    // 0x408710\n    return function_408650(a1, a2, 0, 0, a3, (int64_t)a4);\n}\n"
        },
        {
            "funcName": "function_408720",
            "funcStartAddr": "408720",
            "funcEndAddr": "408afd",
            "decompiledFuncCode": "int64_t function_408720(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4087b8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40873c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x408756\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40879b\n    if (a6 < 10) {\n        // 0x4087aa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4088a2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_408b00",
            "funcStartAddr": "408b00",
            "funcEndAddr": "408b20",
            "decompiledFuncCode": "int64_t function_408b00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408b00\n    if (a5 == 0) {\n        // 0x408b1b\n        return function_408720(a1, a2, a3, a4, a5, 0, (int64_t)&g128);\n    }\n    int64_t v1 = 0; // 0x408b07\n    v1++;\n    int64_t v2 = v1; // 0x408b19\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x408b10\n        v1++;\n        v2 = v1;\n    }\n    // 0x408b1b\n    return function_408720(a1, a2, a3, a4, a5, v2, (int64_t)&g128);\n}\n"
        },
        {
            "funcName": "function_408b20",
            "funcStartAddr": "408b20",
            "funcEndAddr": "408b80",
            "decompiledFuncCode": "int64_t function_408b20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x408b20\n    int64_t v4 = &v3; // 0x408b20\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x408b53\n    int64_t v7; // 0x408b3d\n    int64_t * v8; // 0x408b5b\n    int64_t v9; // 0x408b5b\n    int64_t v10; // 0x408b67\n    if (v6 < 48) {\n        // 0x408b30\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x408b73\n            break;\n        }\n    } else {\n        // 0x408b5b\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x408b73\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x408b51\n    while (v5 != 9) {\n        // 0x408b49\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x408b30\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x408b73\n                break;\n            }\n        } else {\n            // 0x408b5b\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x408b73\n                break;\n            }\n        }\n        // 0x408b49\n        v11 = 10;\n    }\n    // 0x408b73\n    return function_408720(a1, a2, a3, a4, v4, v11, (int64_t)&g128);\n}\n"
        },
        {
            "funcName": "function_408b80",
            "funcStartAddr": "408b80",
            "funcEndAddr": "408c3c",
            "decompiledFuncCode": "int64_t function_408b80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408b80\n    int64_t v1; // bp-168, 0x408b80\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x408b80\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x408b80\n    int64_t v8; // 0x408b80\n    int64_t v9; // bp-56, 0x408b80\n    int64_t v10; // 0x408be5\n    int64_t v11; // 0x408c09\n    if ((int32_t)v6 < 48) {\n        // 0x408bd0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x408c20\n            break;\n        }\n    } else {\n        // 0x408c02\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x408c20\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x408bfa\n    int64_t v13 = 10; // 0x408bfa\n    while (v5 != 9) {\n        // 0x408bfc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x408bd0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x408c20\n                break;\n            }\n        } else {\n            // 0x408c02\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x408c20\n                break;\n            }\n        }\n        // 0x408bf2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x408c20\n    int64_t v14; // bp-136, 0x408b80\n    int64_t result = function_408720(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g128); // 0x408c2f\n    return result;\n}\n"
        },
        {
            "funcName": "function_408c40",
            "funcStartAddr": "408c40",
            "funcEndAddr": "408cb4",
            "decompiledFuncCode": "int64_t function_408c40(int64_t a1) {\n    // 0x408c40\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x408ca3\n    return fputs_unlocked(v1, g43);\n}\n"
        },
        {
            "funcName": "function_408cc0",
            "funcStartAddr": "408cc0",
            "funcEndAddr": "408cda",
            "decompiledFuncCode": "int64_t function_408cc0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x408cc4\n    if (size != 0 != (mem == NULL)) {\n        // 0x408cd3\n        return (int64_t)mem;\n    }\n    // 0x408cd5\n    function_408f10(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408ce0",
            "funcStartAddr": "408ce0",
            "funcEndAddr": "408d01",
            "decompiledFuncCode": "int64_t function_408ce0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x408ce3\n    int64_t v2 = v1; // 0x408ce3\n    if (v2 < 0) {\n        // 0x408cfb\n        function_408f10(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x408cf9\n        return function_408cc0(v2);\n    }\n    // 0x408cfb\n    function_408f10(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408d10",
            "funcStartAddr": "408d10",
            "funcEndAddr": "408d12",
            "decompiledFuncCode": "int64_t function_408d10(void) {\n    // 0x408d10\n    int64_t v1; // 0x408d10\n    return function_408cc0(v1);\n}\n"
        },
        {
            "funcName": "function_408d20",
            "funcStartAddr": "408d20",
            "funcEndAddr": "408d56",
            "decompiledFuncCode": "int64_t function_408d20(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x408d48\n        free(v1);\n        return (int32_t)&g128 ^ (int32_t)&g128;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x408d31\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x408d40\n        return (int64_t)mem;\n    }\n    // 0x408d51\n    function_408f10(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408d60",
            "funcStartAddr": "408d60",
            "funcEndAddr": "408d81",
            "decompiledFuncCode": "int64_t function_408d60(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x408d63\n    int64_t v2 = v1; // 0x408d63\n    if (v2 < 0) {\n        // 0x408d7b\n        function_408f10(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x408d79\n        return function_408d20(a1, v2);\n    }\n    // 0x408d7b\n    function_408f10(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408d90",
            "funcStartAddr": "408d90",
            "funcEndAddr": "408e16",
            "decompiledFuncCode": "int64_t function_408d90(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x408deb\n            function_408f10(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_408d20(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x408dd3\n    if (a2 == 0) {\n        // 0x408df8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x408dd8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x408deb\n        function_408f10(a1);\n        // UNREACHABLE\n    }\n    // 0x408dba\n    *(int64_t *)a2 = v2;\n    return function_408d20(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_408e20",
            "funcStartAddr": "408e20",
            "funcEndAddr": "408e70",
            "decompiledFuncCode": "int64_t function_408e20(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x408e20\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x408e6a\n            function_408f10(a1);\n            // UNREACHABLE\n        }\n        // 0x408e42\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_408d20(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x408e55\n        *(int64_t *)a2 = 128;\n        return function_408d20(0, 128);\n    }\n    // 0x408e68\n    if (a2 < 0) {\n        // 0x408e6a\n        function_408f10(a1);\n        // UNREACHABLE\n    }\n    // 0x408e42\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_408d20(a1, v1);\n}\n"
        },
        {
            "funcName": "function_408e70",
            "funcStartAddr": "408e70",
            "funcEndAddr": "408e87",
            "decompiledFuncCode": "int64_t function_408e70(int64_t a1, int64_t a2) {\n    // 0x408e70\n    return (int64_t)memset((int64_t *)function_408cc0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_408e90",
            "funcStartAddr": "408e90",
            "funcEndAddr": "408ebe",
            "decompiledFuncCode": "int64_t function_408e90(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x408e97\n    if ((int64_t)v1 < 0) {\n        // 0x408eb9\n        function_408f10(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x408eb9\n        function_408f10(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x408eaa\n    if (mem != NULL) {\n        // 0x408eb4\n        return (int64_t)mem;\n    }\n    // 0x408eb9\n    function_408f10(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408ec0",
            "funcStartAddr": "408ec0",
            "funcEndAddr": "408ee8",
            "decompiledFuncCode": "int64_t function_408ec0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_408cc0(a2); // 0x408ecf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_408ef0",
            "funcStartAddr": "408ef0",
            "funcEndAddr": "408f03",
            "decompiledFuncCode": "int64_t function_408ef0(int64_t str) {\n    // 0x408ef0\n    return function_408ec0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_408f10",
            "funcStartAddr": "408f10",
            "funcEndAddr": "408f41",
            "decompiledFuncCode": "int64_t function_408f10(int64_t a1) {\n    // 0x408f10\n    error(g33, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408f50",
            "funcStartAddr": "408f50",
            "funcEndAddr": "4094b7",
            "decompiledFuncCode": "int64_t function_408f50(int64_t a1, int64_t * a2, int64_t a3, int64_t * a4, char * str3, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x408f5e\n    if (v1 >= 37) {\n        // 0x40936b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        int128_t v2; // 0x408f50\n        __asm_movups(v2, __asm_movdqu(0x632e6c6f74727473782f62696c));\n        int64_t v3 = 0; // 0x4093cb\n        int64_t v4 = (int64_t)\"0 <= strtol_base && strtol_base <= 36\"; // 0x4093cb\n        int64_t v5 = v2;\n        int32_t v6 = v2;\n        int64_t str; // 0x408f50\n        int64_t v7; // 0x408f50\n        int64_t v8; // 0x408f50\n        int64_t v9; // 0x408f50\n        int32_t v10; // 0x408f50\n        int32_t v11; // 0x4093d2\n        if (v6 < 48) {\n            // 0x4093d0\n            v11 = (int32_t)v5 + 8;\n            v10 = v11;\n            v9 = v11;\n            v7 = v8;\n            str = (v5 & 0xffffffff) + 0x727473203d3c2030;\n        } else {\n            // 0x4093fa\n            v10 = v6;\n            v9 = v5;\n            v7 = v8 + 8;\n            str = v8;\n        }\n        uint64_t v12 = v3 + (int64_t)strlen((char *)*(int64_t *)str); // 0x4093e4\n        int64_t v13 = v12 < v3 ? -1 : v12; // 0x4093e7\n        v4--;\n        v3 = v13;\n        while (v4 != 0) {\n            int64_t v14 = v7;\n            v5 = v9;\n            v6 = v10;\n            if (v6 < 48) {\n                // 0x4093d0\n                v11 = (int32_t)v5 + 8;\n                v10 = v11;\n                v9 = v11;\n                v7 = v14;\n                str = (v5 & 0xffffffff) + 0x727473203d3c2030;\n            } else {\n                // 0x4093fa\n                v10 = v6;\n                v9 = v5;\n                v7 = v14 + 8;\n                str = v14;\n            }\n            // 0x4093dc\n            v12 = v3 + (int64_t)strlen((char *)*(int64_t *)str);\n            v13 = v12 < v3 ? -1 : v12;\n            v4--;\n            v3 = v13;\n        }\n        if (v13 >= 0x80000000) {\n            // 0x4094a8\n            *__errno_location() = 75;\n            // 0x409493\n            return 0;\n        }\n        int64_t result = function_408cc0(v13 + 1); // 0x409421\n        int64_t v15 = (int64_t)\"0 <= strtol_base && strtol_base <= 36\"; // 0x40942c\n        *(int64_t *)\"tol.c\" = (int64_t)\"0 <= strtol_base && strtol_base <= 36\";\n        int64_t str2 = *(int64_t *)0x632e6c6f74; // 0x40943e\n        int32_t len = strlen((char *)str2); // 0x409444\n        memcpy((int64_t *)result, (int64_t *)str2, len);\n        int64_t v16 = result + (int64_t)len; // 0x40945a\n        v15--;\n        int64_t v17 = v16; // 0x409461\n        while (v15 != 0) {\n            // 0x409463\n            *(int64_t *)\"tol.c\" = (int64_t)\"0 <= strtol_base && strtol_base <= 36\";\n            str2 = *(int64_t *)0x632e6c6f74;\n            len = strlen((char *)str2);\n            memcpy((int64_t *)v17, (int64_t *)str2, len);\n            v16 = v17 + (int64_t)len;\n            v15--;\n            v17 = v16;\n        }\n        // 0x409490\n        *(char *)v16 = 0;\n        // 0x409493\n        return result;\n    }\n    char c = a1;\n    int32_t * v18 = __errno_location(); // 0x408f82\n    *v18 = 0;\n    int64_t v19 = (int64_t)*__ctype_b_loc() + 1; // 0x408fb2\n    int64_t v20 = a1; // 0x408fb7\n    char v21 = c; // 0x408fb7\n    if ((*(char *)(v19 + (2 * a1 & 510)) & 32) != 0) {\n        v20++;\n        unsigned char v22 = *(char *)v20; // 0x408fac\n        v21 = v22;\n        while ((*(char *)(2 * (int64_t)v22 + v19) & 32) != 0) {\n            // 0x408fa8\n            v20++;\n            v22 = *(char *)v20;\n            v21 = v22;\n        }\n    }\n    // 0x408fb9\n    if (v21 == 45) {\n        // 0x408ff5\n        return 4;\n    }\n    // 0x408fbe\n    int64_t v23; // bp-64, 0x408f50\n    int64_t * v24 = a2 == NULL ? &v23 : a2;\n    int32_t v25 = __strtoul_internal((char *)a1, (char **)v24, v1, 0); // 0x408fc6\n    int64_t v26 = *v24; // 0x408fcb\n    char v27; // 0x408f50\n    int64_t v28; // 0x408f50\n    int64_t v29; // 0x408f50\n    int64_t v30; // 0x408f50\n    int64_t v31; // 0x408f50\n    int64_t v32; // 0x408f50\n    int64_t v33; // 0x408f50\n    if (v26 == a1) {\n        // 0x409028\n        if (c == 0 || str3 == NULL) {\n            // 0x408ff5\n            return 4;\n        }\n        char * found_char_pos = strchr(str3, (int32_t)c); // 0x409049\n        v32 = 1;\n        v29 = 0;\n        v27 = c;\n        if (found_char_pos == NULL) {\n            // 0x408ff5\n            return 4;\n        }\n        goto lab_0x409057;\n    } else {\n        int32_t v34 = *v18; // 0x408fd6\n        int64_t v35 = 0; // 0x408fdc\n        if (v34 != 0) {\n            // 0x409010\n            v35 = 1;\n            if (v34 != 34) {\n                // 0x408ff5\n                return 4;\n            }\n        }\n        int64_t v36 = v25; // 0x408fc6\n        v31 = v36;\n        v28 = v35;\n        if (str3 == NULL) {\n            goto lab_0x408ff2;\n        } else {\n            char c2 = *(char *)v26; // 0x408fe5\n            v31 = v36;\n            v28 = v35;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr(str3, (int32_t)c2); // 0x409153\n                v32 = v36;\n                v29 = v35;\n                v27 = c2;\n                v33 = v36;\n                v30 = v35;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x409057;\n                } else {\n                    goto lab_0x409165;\n                }\n            } else {\n                goto lab_0x408ff2;\n            }\n        }\n    }\n  lab_0x409057:;\n    unsigned char v37 = v27 - 69;\n    int64_t v38 = 1024; // 0x40905f\n    int64_t v39 = 1; // 0x40905f\n    int64_t v40; // 0x408f50\n    int64_t v41; // 0x408f50\n    int64_t v42; // 0x408f50\n    int64_t v43; // 0x408f50\n    int64_t v44; // 0x408f50\n    int64_t v45; // 0x408f50\n    int64_t v46; // 0x408f50\n    int64_t v47; // 0x408f50\n    int64_t v48; // 0x408f50\n    int64_t v49; // 0x408f50\n    int64_t v50; // 0x408f50\n    int64_t v51; // 0x408f50\n    int64_t v52; // 0x408f50\n    int64_t v53; // 0x408f50\n    int64_t v54; // 0x408f50\n    int64_t v55; // 0x408f50\n    int64_t v56; // 0x408f50\n    int64_t v57; // 0x408f50\n    int64_t v58; // 0x408f50\n    int64_t v59; // 0x408f50\n    if (v37 < 48) {\n        // 0x409061\n        v38 = 1024;\n        v39 = 1;\n        if ((1 << (int64_t)((v27 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4090ca;\n        } else {\n            // 0x409074\n            v38 = 1024;\n            v39 = 1;\n            if (strchr(str3, 48) == NULL) {\n                goto lab_0x4090ca;\n            } else {\n                // 0x409090\n                v38 = 1000;\n                v39 = 2;\n                switch (*(char *)(v26 + 1)) {\n                    case 68: {\n                        goto lab_0x4090ca;\n                    }\n                    case 105: {\n                        char v60 = *(char *)(v26 + 2); // 0x4092f9\n                        v38 = 1024;\n                        v39 = (v60 == 66 ? 2 : 1) + (int64_t)(v60 == 66);\n                        goto lab_0x4090ca;\n                    }\n                    default: {\n                        // 0x4090a5\n                        g122 = v37;\n                        v38 = 1000;\n                        v39 = 2;\n                        v42 = 1024;\n                        v54 = 1;\n                        v41 = v32;\n                        v40 = v29;\n                        v55 = 1;\n                        v43 = 1024;\n                        v56 = 1;\n                        v33 = v32;\n                        v30 = v29;\n                        v57 = 1;\n                        v44 = 1024;\n                        v58 = 1;\n                        v45 = 1024;\n                        v59 = 1;\n                        v46 = 1024;\n                        v50 = 1;\n                        v47 = 1024;\n                        v51 = 1;\n                        v48 = 1024;\n                        v52 = 1;\n                        v49 = 1024;\n                        v53 = 1;\n                        switch (v27) {\n                            case 69: {\n                                goto lab_0x40926b;\n                            }\n                            case 70: {\n                                goto lab_0x409165;\n                            }\n                            case 71: {\n                                goto lab_0x4092a3;\n                            }\n                            case 72: {\n                                goto lab_0x409165;\n                            }\n                            case 73: {\n                                goto lab_0x409165;\n                            }\n                            case 74: {\n                                goto lab_0x409165;\n                            }\n                            case 75: {\n                                goto lab_0x40912c;\n                            }\n                            case 76: {\n                                goto lab_0x409165;\n                            }\n                            case 77: {\n                                goto lab_0x4090ee;\n                            }\n                            case 78: {\n                                goto lab_0x409165;\n                            }\n                            case 79: {\n                                goto lab_0x409165;\n                            }\n                            case 80: {\n                                goto lab_0x409238;\n                            }\n                            case 81: {\n                                goto lab_0x409165;\n                            }\n                            case 82: {\n                                goto lab_0x409165;\n                            }\n                            case 83: {\n                                goto lab_0x409165;\n                            }\n                            case 84: {\n                                goto lab_0x409208;\n                            }\n                            case 85: {\n                                goto lab_0x409165;\n                            }\n                            case 86: {\n                                goto lab_0x409165;\n                            }\n                            case 87: {\n                                goto lab_0x409165;\n                            }\n                            case 88: {\n                                goto lab_0x409165;\n                            }\n                            case 89: {\n                                goto lab_0x4091d6;\n                            }\n                            case 90: {\n                                goto lab_0x40919b;\n                            }\n                            case 91: {\n                                goto lab_0x409165;\n                            }\n                            case 92: {\n                                goto lab_0x409165;\n                            }\n                            case 93: {\n                                goto lab_0x409165;\n                            }\n                            case 94: {\n                                goto lab_0x409165;\n                            }\n                            case 95: {\n                                goto lab_0x409165;\n                            }\n                            case 96: {\n                                goto lab_0x409165;\n                            }\n                            case 97: {\n                                goto lab_0x409165;\n                            }\n                            case 98: {\n                                goto lab_0x40917f;\n                            }\n                            case 99: {\n                                goto lab_0x409108;\n                            }\n                            case 100: {\n                                goto lab_0x409165;\n                            }\n                            case 101: {\n                                goto lab_0x409165;\n                            }\n                            case 102: {\n                                goto lab_0x409165;\n                            }\n                            case 103: {\n                                goto lab_0x4092a3;\n                            }\n                            case 104: {\n                                goto lab_0x409165;\n                            }\n                            case 105: {\n                                goto lab_0x409165;\n                            }\n                            case 106: {\n                                goto lab_0x409165;\n                            }\n                            case 107: {\n                                goto lab_0x40912c;\n                            }\n                            case 108: {\n                                goto lab_0x409165;\n                            }\n                            case 109: {\n                                goto lab_0x4090ee;\n                            }\n                            case 110: {\n                                goto lab_0x409165;\n                            }\n                            case 111: {\n                                goto lab_0x409165;\n                            }\n                            case 112: {\n                                goto lab_0x409165;\n                            }\n                            case 113: {\n                                goto lab_0x409165;\n                            }\n                            case 114: {\n                                goto lab_0x409165;\n                            }\n                            case 115: {\n                                goto lab_0x409165;\n                            }\n                            case 116: {\n                                goto lab_0x409208;\n                            }\n                            default: {\n                                goto lab_0x4090ca;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4090ca;\n    }\n  lab_0x408ff2:\n    // 0x408ff2\n    *a4 = v31;\n    // 0x408ff5\n    return v28 & 0xffffffff;\n  lab_0x4090ca:\n    // 0x4090ca\n    g123 = v27 - 66;\n    v42 = v38;\n    v54 = v39;\n    v41 = v32;\n    v40 = v29;\n    v55 = v39;\n    v43 = v38;\n    v56 = v39;\n    v33 = v32;\n    v30 = v29;\n    v57 = v39;\n    v44 = v38;\n    v58 = v39;\n    v45 = v38;\n    v59 = v39;\n    v46 = v38;\n    v50 = v39;\n    v47 = v38;\n    v51 = v39;\n    v48 = v38;\n    v52 = v39;\n    v49 = v38;\n    v53 = v39;\n    int64_t v61; // 0x408f50\n    switch (v27) {\n        case 66: {\n            // 0x4092c4\n            v61 = v39;\n            if (v32 >= 0x40000000000000) {\n                goto lab_0x409137;\n            } else {\n                // 0x4092d1\n                v41 = 1024 * v32;\n                v40 = v29;\n                v55 = v39;\n                goto lab_0x409108;\n            }\n        }\n        case 69: {\n            goto lab_0x40926b;\n        }\n        case 71: {\n            goto lab_0x4092a3;\n        }\n        case 75: {\n            goto lab_0x40912c;\n        }\n        case 77: {\n            goto lab_0x4090ee;\n        }\n        case 80: {\n            goto lab_0x409238;\n        }\n        case 84: {\n            goto lab_0x409208;\n        }\n        case 89: {\n            goto lab_0x4091d6;\n        }\n        case 90: {\n            goto lab_0x40919b;\n        }\n        case 98: {\n            goto lab_0x40917f;\n        }\n        case 99: {\n            goto lab_0x409108;\n        }\n        case 103: {\n            goto lab_0x4092a3;\n        }\n        case 107: {\n            goto lab_0x40912c;\n        }\n        case 109: {\n            goto lab_0x4090ee;\n        }\n        case 116: {\n            goto lab_0x409208;\n        }\n        case 119: {\n            // 0x409170\n            v61 = v39;\n            if (v32 < 0) {\n                goto lab_0x409137;\n            } else {\n                // 0x409175\n                v41 = 2 * v32;\n                v40 = v29;\n                v55 = v39;\n                goto lab_0x409108;\n            }\n        }\n        default: {\n            goto lab_0x409165;\n        }\n    }\n  lab_0x40926b:;\n    uint128_t v62 = (int128_t)v32 * (int128_t)v48; // 0x409283\n    int64_t v63 = (int64_t)(v62 < 0xffffffffffffffff ? v62 : 0xffffffffffffffff);\n    int64_t v64 = v62 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v65 = 5; // 0x40928f\n    int64_t v66 = v63; // 0x409292\n    int64_t v67 = v52; // 0x409292\n    int64_t v68 = v64; // 0x409292\n    int32_t v69 = v65; // 0x409292\n    int64_t v70 = v64; // 0x409292\n    while (v65 != 0) {\n        // 0x409280\n        v62 = (int128_t)v63 * (int128_t)v48;\n        v63 = (int64_t)(v62 < 0xffffffffffffffff ? v62 : 0xffffffffffffffff);\n        v64 = v62 > 0xffffffffffffffff ? 1 : v70;\n        v65 = v69 - 1;\n        v66 = v63;\n        v67 = v52;\n        v68 = v64;\n        v69 = v65;\n        v70 = v64;\n    }\n    goto lab_0x4091c4;\n  lab_0x4092a3:\n    // 0x4092a3\n    v41 = -1;\n    v40 = 1;\n    v55 = v53;\n    if ((int128_t)v49 * (int128_t)v32 <= 0xffffffffffffffff) {\n        // 0x4092ae\n        int128_t v71; // 0x4092a9\n        uint128_t v72; // 0x4092a9\n        uint128_t v73 = (v72 & 0xffffffffffffffff) * v71; // 0x4092ae\n        v41 = -1;\n        v40 = 1;\n        int64_t v74; // 0x408f50\n        v55 = v74;\n        if (v73 <= 0xffffffffffffffff) {\n            uint128_t v75 = (v73 & 0xffffffffffffffff) * v71; // 0x4092b3\n            v41 = -1;\n            v40 = 1;\n            v55 = v74;\n            if (v75 <= 0xffffffffffffffff) {\n                // 0x4092b8\n                v41 = v75;\n                int64_t v76; // 0x408f50\n                v40 = v76 & 0xffffffff;\n                v55 = v74;\n            }\n        }\n    }\n    goto lab_0x409108;\n  lab_0x40912c:;\n    uint128_t v79 = (int128_t)v43 * (int128_t)v32; // 0x40912f\n    v41 = v79;\n    v40 = v29;\n    v55 = v56;\n    v61 = v56;\n    if (v79 <= 0xffffffffffffffff) {\n        goto lab_0x409108;\n    } else {\n        goto lab_0x409137;\n    }\n  lab_0x4090ee:;\n    int128_t v80 = v42; // 0x4090f4\n    uint128_t v81 = v80 * (int128_t)v32; // 0x4090f4\n    v61 = v54;\n    if (v81 > 0xffffffffffffffff) {\n        goto lab_0x409137;\n    } else {\n        uint128_t v82 = (v81 & 0xffffffffffffffff) * v80; // 0x4090f9\n        v61 = v54;\n        if (v82 > 0xffffffffffffffff) {\n            goto lab_0x409137;\n        } else {\n            // 0x4090fe\n            v41 = v82;\n            v40 = v29;\n            v55 = v54;\n            goto lab_0x409108;\n        }\n    }\n  lab_0x409238:;\n    uint128_t v83 = (int128_t)v32 * (int128_t)v47; // 0x40924b\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 4; // 0x409257\n    v66 = v84;\n    v67 = v51;\n    v68 = v85;\n    int32_t v87 = v86; // 0x40925a\n    int64_t v88 = v85; // 0x40925a\n    while (v86 != 0) {\n        // 0x409248\n        v83 = (int128_t)v84 * (int128_t)v47;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v66 = v84;\n        v67 = v51;\n        v68 = v85;\n        v87 = v86;\n        v88 = v85;\n    }\n    goto lab_0x4091c4;\n  lab_0x409208:;\n    uint128_t v89 = (int128_t)v32 * (int128_t)v46; // 0x40921b\n    int64_t v90 = (int64_t)(v89 < 0xffffffffffffffff ? v89 : 0xffffffffffffffff);\n    int64_t v91 = v89 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v92 = 3; // 0x409227\n    v66 = v90;\n    v67 = v50;\n    v68 = v91;\n    int32_t v93 = v92; // 0x40922a\n    int64_t v94 = v91; // 0x40922a\n    while (v92 != 0) {\n        // 0x409218\n        v89 = (int128_t)v90 * (int128_t)v46;\n        v90 = (int64_t)(v89 < 0xffffffffffffffff ? v89 : 0xffffffffffffffff);\n        v91 = v89 > 0xffffffffffffffff ? 1 : v94;\n        v92 = v93 - 1;\n        v66 = v90;\n        v67 = v50;\n        v68 = v91;\n        v93 = v92;\n        v94 = v91;\n    }\n    goto lab_0x4091c4;\n  lab_0x4091d6:;\n    uint128_t v95 = (int128_t)v32 * (int128_t)v45; // 0x4091eb\n    int64_t v96 = (int64_t)(v95 < 0xffffffffffffffff ? v95 : 0xffffffffffffffff);\n    int64_t v97 = v95 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v98 = 7; // 0x4091f7\n    v66 = v96;\n    v67 = v59;\n    v68 = v97;\n    int32_t v99 = v98; // 0x4091fa\n    int64_t v100 = v97; // 0x4091fa\n    while (v98 != 0) {\n        // 0x4091e8\n        v95 = (int128_t)v96 * (int128_t)v45;\n        v96 = (int64_t)(v95 < 0xffffffffffffffff ? v95 : 0xffffffffffffffff);\n        v97 = v95 > 0xffffffffffffffff ? 1 : v100;\n        v98 = v99 - 1;\n        v66 = v96;\n        v67 = v59;\n        v68 = v97;\n        v99 = v98;\n        v100 = v97;\n    }\n    goto lab_0x4091c4;\n  lab_0x40919b:;\n    uint128_t v101 = (int128_t)v32 * (int128_t)v44; // 0x4091b3\n    int64_t v102 = (int64_t)(v101 < 0xffffffffffffffff ? v101 : 0xffffffffffffffff);\n    int64_t v103 = v101 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v104 = 6; // 0x4091bf\n    int32_t v105 = v104; // 0x4091c2\n    int64_t v106 = v103; // 0x4091c2\n    v66 = v102;\n    v67 = v58;\n    v68 = v103;\n    while (v104 != 0) {\n        // 0x4091b0\n        v101 = (int128_t)v102 * (int128_t)v44;\n        v102 = (int64_t)(v101 < 0xffffffffffffffff ? v101 : 0xffffffffffffffff);\n        v103 = v101 > 0xffffffffffffffff ? 1 : v106;\n        v104 = v105 - 1;\n        v105 = v104;\n        v106 = v103;\n        v66 = v102;\n        v67 = v58;\n        v68 = v103;\n    }\n    goto lab_0x4091c4;\n  lab_0x40917f:\n    // 0x40917f\n    v61 = v57;\n    if (v32 >= 0x80000000000000) {\n        goto lab_0x409137;\n    } else {\n        // 0x409188\n        v41 = 512 * v32;\n        v40 = v29;\n        v55 = v57;\n        goto lab_0x409108;\n    }\n  lab_0x409108:;\n    int64_t v77 = v40;\n    int64_t v78 = (0x100000000 * v55 >> 32) + v26; // 0x40910d\n    *v24 = v78;\n    v31 = v41;\n    v28 = (*(char *)v78 != 0 ? v77 | 2 : v77) & 0xffffffff;\n    goto lab_0x408ff2;\n  lab_0x409165:\n    // 0x409165\n    *a4 = v33;\n    // 0x408ff5\n    return (v30 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x409137:\n    // 0x409137\n    v41 = -1;\n    v40 = 1;\n    v55 = v61;\n    goto lab_0x409108;\n  lab_0x4091c4:\n    // 0x4091c4\n    v41 = v66;\n    v40 = (v68 | v29) & 0xffffffff;\n    v55 = v67;\n    goto lab_0x409108;\n}\n"
        },
        {
            "funcName": "function_4094c0",
            "funcStartAddr": "4094c0",
            "funcEndAddr": "40954a",
            "decompiledFuncCode": "int64_t function_4094c0(int64_t a1, int64_t a2) {\n    char v1 = a1;\n    if (v1 == 0) {\n        // 0x4094f8\n        return 0;\n    }\n    if (v1 == 37) {\n        // 0x4094cf\n        if (*(char *)(a1 + 1) == 115) {\n            int64_t result = 1; // 0x4094ec\n            int64_t v2 = 2 * result + a1;\n            char v3 = *(char *)v2; // 0x4094f0\n            while (v3 != 0) {\n                if (v3 != 37) {\n                    goto lab_0x409508_2;\n                }\n                // 0x4094e5\n                if (*(char *)(v2 + 1) != 115) {\n                    goto lab_0x409508_2;\n                }\n                result++;\n                v2 = 2 * result + a1;\n                v3 = *(char *)v2;\n            }\n            // 0x4094f8\n            return result;\n        }\n    }\n  lab_0x409508_2:;\n    // 0x409508\n    int64_t result2; // bp-16, 0x4094c0\n    if ((int32_t)function_40a600(&result2, a1, a2) >= 0) {\n        // 0x40951c\n        return result2;\n    }\n    // 0x409530\n    if (*__errno_location() != 12) {\n        // 0x4094f8\n        return 0;\n    }\n    // 0x409545\n    function_408f10((int64_t)&result2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409550",
            "funcStartAddr": "409550",
            "funcEndAddr": "4095cb",
            "decompiledFuncCode": "int64_t function_409550(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x409557\n    if (fileno(stream) < 0) {\n        // 0x4095b7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40956a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40959b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4095b7\n            return fclose(stream);\n        }\n    }\n    // 0x40956c\n    if ((int32_t)function_409710(a1, v1) == 0) {\n        // 0x4095b7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x409578\n    int32_t v3 = *v2; // 0x409580\n    int64_t result = fclose(stream); // 0x40958e\n    if (v3 != 0) {\n        // 0x4095c0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x409590\n    return result;\n}\n"
        },
        {
            "funcName": "function_4095d0",
            "funcStartAddr": "4095d0",
            "funcEndAddr": "409705",
            "decompiledFuncCode": "int64_t function_4095d0(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x409600\n    if (cmd != 1030) {\n        // 0x4096b0\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40960c\n    int64_t v2; // 0x4095d0\n    if (g115 < 0) {\n        int64_t v3 = function_4095d0(fd, 0, v1, a4); // 0x409654\n        int64_t v4 = v3 & 0xffffffff; // 0x409659\n        if ((int32_t)v3 < 0) {\n            // 0x409640\n            return v4 & 0xffffffff;\n        }\n        // 0x40965f\n        v2 = v4;\n        if (g115 != -1) {\n            // 0x409640\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x409627\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x409636\n            g115 = 1;\n            // 0x409640\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_4095d0(fd & 0xffffffff, 0, v1, a4); // 0x4096e7\n        int64_t v7 = v6 & 0xffffffff; // 0x4096ec\n        if ((int32_t)v6 < 0) {\n            // 0x409640\n            return v7 & 0xffffffff;\n        }\n        // 0x4096f6\n        g115 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40966f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40967a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x409640\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x409692\n    close(fd2);\n    // 0x409640\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409710",
            "funcStartAddr": "409710",
            "funcEndAddr": "409750",
            "decompiledFuncCode": "int64_t function_409710(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40972a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40972a\n        return fflush(stream);\n    }\n    // 0x409738\n    function_409750(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_409750",
            "funcStartAddr": "409750",
            "funcEndAddr": "4097a7",
            "decompiledFuncCode": "int64_t function_409750(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x409750\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40975a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40978b\n    int64_t result = -1; // 0x409794\n    if (v1 != -1) {\n        // 0x409796\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4097a2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4097b0",
            "funcStartAddr": "4097b0",
            "funcEndAddr": "40988f",
            "decompiledFuncCode": "int64_t function_4097b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4097bc\n    uint32_t v2 = *v1; // 0x4097bc\n    int64_t v3 = a2 & 0xffffffff; // 0x4097c1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4097c4\n    uint64_t v5 = (int64_t)*v4; // 0x4097c4\n    int64_t v6; // 0x409832\n    if (v3 <= v5) {\n      lab_0x40982c_2:\n        // 0x40982c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4097b2\n    int64_t v8 = v2; // 0x4097b0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40982c\n        goto lab_0x40982c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4097e8\n    int64_t v17; // 0x4097f6\n    int64_t * v18; // 0x409810\n    int64_t * v19; // 0x409813\n    int64_t v20; // 0x40981e\n    int64_t v21; // 0x4097f6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4097f3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x409810\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x409827\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40982c\n            goto lab_0x40982c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40982c\n            goto lab_0x40982c_2;\n        }\n        // 0x4097e2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40986b\n    int64_t * v23 = (int64_t *)v22; // 0x409870\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x409873\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x409870\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x409887\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4097dd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40982c\n            goto lab_0x40982c_2;\n        }\n        // 0x4097e2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4097f3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x409810\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x409827\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40982c\n                goto lab_0x40982c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40982c\n                goto lab_0x40982c_2;\n            }\n            // 0x4097e2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x409850\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x409870\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x409887\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40982c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409890",
            "funcStartAddr": "409890",
            "funcEndAddr": "409eac",
            "decompiledFuncCode": "int64_t function_409890(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4098af\n    int64_t v2 = *v1; // 0x4098af\n    char * str2 = (char *)v2; // 0x4098bc\n    char c = *str2; // 0x4098bc\n    int64_t v3 = v2; // 0x4098e8\n    int64_t v4 = 0; // 0x409890\n    int32_t v5; // 0x409890\n    int64_t v6; // 0x409890\n    int64_t v7; // 0x409890\n    int64_t v8; // 0x409890\n    int64_t v9; // 0x409890\n    int64_t v10; // 0x409890\n    int64_t v11; // 0x409890\n    int64_t v12; // 0x409890\n    int64_t v13; // 0x409890\n    int64_t str3; // 0x409890\n    int64_t v14; // 0x409890\n    int64_t v15; // 0x409890\n    int64_t v16; // 0x409890\n    int64_t v17; // 0x409890\n    int32_t v18; // 0x409890\n    int32_t v19; // 0x409890\n    int32_t v20; // 0x409890\n    int32_t v21; // 0x409890\n    int32_t v22; // 0x409890\n    int32_t v23; // 0x409890\n    int32_t v24; // 0x409890\n    int32_t v25; // 0x409890\n    int32_t v26; // 0x409890\n    int32_t v27; // 0x409890\n    int32_t v28; // 0x409890\n    int32_t v29; // 0x409890\n    int64_t nmemb; // 0x409890\n    int64_t v30; // 0x409890\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4098ec\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4098e8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4098f8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4098fe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4098c8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40992c\n                int64_t v34; // 0x409890\n                int64_t v35; // 0x409890\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x409935\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x409ab0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x409946\n                int64_t v37 = *(int64_t *)v36; // 0x40994a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x409920\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x409935\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x409ab0;\n                        }\n                    }\n                    // 0x409946\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x409996:\n                    // 0x409996\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4099f0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x409b60\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4099f0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x409b10\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4099ba;\n                                } else {\n                                    // 0x409b1c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4099ba;\n                                    } else {\n                                        // 0x409b2a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4099ba;\n                                        } else {\n                                            goto lab_0x4099f0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4099ba;\n                            }\n                        }\n                    }\n                }\n              lab_0x409a01:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x409bd6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x409d82\n                            flockfile(g45);\n                            int64_t v41 = *v1; // 0x409da2\n                            __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x409def\n                            int64_t v43 = (int64_t)g45;\n                            int64_t v44 = v43; // 0x409e09\n                            int64_t v45; // 0x409e0b\n                            if (*(char *)v42 != 0) {\n                                // 0x409e0b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g45;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x409e03\n                            while (v17 + nmemb != v42) {\n                                // 0x409e05\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x409e0b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g45;\n                                }\n                                // 0x409df8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x409e30\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g45);\n                            v40 = *v1;\n                        } else {\n                            // 0x409be4\n                            __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x409d3f\n                        free((int64_t *)v17);\n                    }\n                    // 0x409c39\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x409c50\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x409afe\n                    return 63;\n                }\n                // 0x409a20\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x409aa4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x409ab0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x409ac0\n                    uint32_t v50 = *v49; // 0x409ac0\n                    int64_t v51 = v50; // 0x409ac0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x409aca\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x409ad3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x409cff\n                                __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x409caa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x409afe\n                            return 63;\n                        }\n                        // 0x409b48\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x409e5f\n                                    __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x409d5d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x409d70\n                                // 0x409afe\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x409c6e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x409c82\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x409aeb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x409aee\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x409af2\n                    int64_t result = v59; // 0x409af8\n                    if (v58 != 0) {\n                        // 0x409afa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x409afe\n                    return result;\n                }\n            } else {\n                // 0x4098fe\n                v5 = v32;\n            }\n            // break -> 0x409a25\n            break;\n        }\n    }\n    // 0x409a25\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x409a3d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x409a47\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x409afe\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x409b89\n        __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x409a76\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x409a86\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4099f0:\n    // 0x4099f0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4099f0\n    int64_t v63 = *(int64_t *)v62; // 0x4099f4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x409a01\n        goto lab_0x409a01;\n    }\n    goto lab_0x409996;\n  lab_0x4099ba:\n    // 0x4099ba\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x409890\n    int32_t v65; // 0x409890\n    int32_t v66; // 0x409890\n    if (v27 != 0) {\n        goto lab_0x4099f0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x409b70\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4099f0;\n            } else {\n                goto lab_0x4099e1;\n            }\n        } else {\n            // 0x4099d5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x409ccc\n                int64_t v67 = (int64_t)mem; // 0x409ccc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4099f0;\n                } else {\n                    // 0x409cdf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4099e1;\n                }\n            } else {\n                goto lab_0x4099e1;\n            }\n        }\n    }\n  lab_0x4099e1:\n    // 0x4099e1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4099f0;\n}\n"
        },
        {
            "funcName": "function_409eb0",
            "funcStartAddr": "409eb0",
            "funcEndAddr": "40a476",
            "decompiledFuncCode": "int64_t function_409eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x409ed1\n    if (v3 < 1) {\n        // 0x40a08e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x409ecd\n    int32_t v5 = *(int32_t *)a7; // 0x409ed9\n    uint64_t v6 = a1 & 0xffffffff; // 0x409edb\n    int64_t v7 = v2; // 0x409ee0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x409ee3\n    *v8 = 0;\n    int64_t v9; // 0x409eb0\n    int64_t v10; // 0x409eb0\n    int64_t v11; // 0x409eb0\n    int64_t v12; // 0x409eb0\n    int64_t str; // 0x409eb0\n    int64_t v13; // 0x409eb0\n    int64_t v14; // 0x409eb0\n    int64_t v15; // 0x409eb0\n    int64_t v16; // 0x409eb0\n    int64_t v17; // 0x409eb0\n    int32_t v18; // 0x409eb0\n    char v19; // 0x409eb0\n    if (v5 == 0) {\n        // 0x40a0c8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x409efa;\n    } else {\n        // 0x409ef3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x409f40\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x409f43\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40a008;\n            } else {\n                int64_t v22 = v7 + 1; // 0x409f56\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x409f66\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40a01c;\n                } else {\n                    goto lab_0x409f78;\n                }\n            }\n        } else {\n            goto lab_0x409efa;\n        }\n    }\n  lab_0x409efa:\n    // 0x409efa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x409f00\n    *v24 = 0;\n    int64_t v25; // 0x409eb0\n    int64_t v26; // 0x409eb0\n    int64_t v27; // 0x409eb0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x409ff0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x409ffd;\n        }\n        case 43: {\n            // 0x40a300\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x409ffd;\n        }\n        default: {\n            // 0x409f1c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40a27f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40a398\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x409ffd;\n                } else {\n                    // 0x40a28d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x409f2a;\n                }\n            } else {\n                goto lab_0x409f2a;\n            }\n        }\n    }\n  lab_0x40a008:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40a00f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x409f78;\n    } else {\n        goto lab_0x40a01c;\n    }\n  lab_0x409f2a:\n    // 0x409f2a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x409ffd;\n  lab_0x409ffd:\n    // 0x409ffd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40a008;\n  lab_0x409f78:;\n    uint32_t v30 = *(int32_t *)a7; // 0x409f78\n    int64_t v31 = v30; // 0x409f78\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x409f7a\n    if ((int64_t)*v32 > v31) {\n        // 0x409f7f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x409f82\n    if (*v33 > v30) {\n        // 0x409f87\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x409f8a\n    int64_t v35 = v31; // 0x409f8e\n    int64_t v36 = v15; // 0x409f8e\n    int64_t v37; // 0x409eb0\n    int64_t v38; // 0x409eb0\n    int64_t v39; // 0x409eb0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40a0f8\n        int64_t v41 = v40; // 0x40a0f8\n        v2 = v41;\n        int64_t v42; // 0x409eb0\n        if (*v33 == v40) {\n            // 0x40a2e0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40a2e8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40a104\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40a108\n                function_4097b0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40a118\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40a121\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40a12a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40a141\n            int64_t v47 = v45 & 0xffffffff; // 0x40a145\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40a14e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40a154\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40a156;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40a130\n            int64_t v49 = v48 & 0xffffffff; // 0x40a130\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40a141\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40a14e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40a154\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40a156;\n                    }\n                }\n                // 0x40a130\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40a2f8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40a156;\n    } else {\n        goto lab_0x409f94;\n    }\n  lab_0x40a01c:\n    // 0x40a01c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40a01f\n    int64_t v51 = v12; // 0x40a01f\n    int64_t v52 = v14; // 0x40a01f\n    if (*(char *)v10 == 0) {\n        goto lab_0x409f78;\n    } else {\n        goto lab_0x40a025;\n    }\n  lab_0x409f94:;\n    int32_t v53 = v35; // 0x409f94\n    int64_t v54; // 0x409eb0\n    int64_t v55; // 0x409eb0\n    int64_t v56; // 0x409eb0\n    int64_t v57; // 0x409eb0\n    int64_t v58; // 0x409eb0\n    int64_t v59; // 0x409eb0\n    char * v60; // 0x409eb0\n    int64_t v61; // 0x409eb0\n    int64_t v62; // 0x409fa9\n    int64_t v63; // 0x409eb0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40a0e3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40a0e6;\n    } else {\n        // 0x409f9c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x409eb0\n        int64_t v66 = v65 ? -1 : 1; // 0x409fb0\n        int64_t v67 = (int64_t)\"--\"; // 0x409eb0\n        int64_t v68 = v62; // 0x409eb0\n        int64_t v69 = 3; // 0x409fb0\n        unsigned char v70 = *(char *)v68; // 0x409fb0\n        char v71 = *(char *)v67; // 0x409fb0\n        char v72 = v71; // 0x409fb0\n        bool v73 = false; // 0x409fb0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40a0a0\n            if (*(char *)v62 == 45) {\n                // 0x40a160\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40a160\n                if (c == 0) {\n                    goto lab_0x40a0aa;\n                } else {\n                    // 0x40a16d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40a1f0;\n                    } else {\n                        if (c == 45) {\n                            // 0x40a3d3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40a245;\n                        } else {\n                            // 0x40a17e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40a1f0;\n                            } else {\n                                // 0x40a183\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40a1a4;\n                                } else {\n                                    // 0x40a18a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40a1f0;\n                                    } else {\n                                        goto lab_0x40a1a4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40a0aa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x409fc0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x409fc3\n            int64_t v77 = v35 + 1; // 0x409fc6\n            int32_t v78 = v77; // 0x409fc9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40a330\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x409fd7\n                    function_4097b0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x409fe5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40a0e6;\n        }\n    }\n  lab_0x40a025:;\n    // 0x40a025\n    int64_t v79; // bp-104, 0x409eb0\n    int64_t v80 = &v79; // 0x409eba\n    int64_t v81 = v50 + 1; // 0x40a025\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40a02c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40a031\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40a035\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40a039\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40a041\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40a046\n    int32_t c2 = v84; // 0x40a046\n    char * found_char_pos = strchr(str2, c2); // 0x40a046\n    int64_t v87 = *v82; // 0x40a04b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40a055\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40a060\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40a350\n            __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40a31d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40a08e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40a046\n    char v91 = *(char *)(v90 + 1); // 0x40a07b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40a035\n        if (v91 != 58) {\n            // 0x40a08e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40a2a4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40a3a8\n                *v8 = 0;\n            } else {\n                // 0x40a38c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40a2ce\n            *v83 = 0;\n            // 0x40a08e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40a2ae\n        if (v93 != 0) {\n            // 0x40a340\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40a2ce\n            *v83 = 0;\n            // 0x40a08e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40a2c1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40a2ce\n            *v83 = 0;\n            // 0x40a08e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40a40a\n            __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40a3ba\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40a3c1\n        // 0x40a2ce\n        *v83 = 0;\n        // 0x40a08e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40a219\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40a21b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40a440\n                __fprintf_chk(g45, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40a3f1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40a3f8\n            // 0x40a08e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40a226\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40a22a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40a245;\n  lab_0x40a156:\n    // 0x40a156\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x409f94;\n  lab_0x40a245:;\n    int64_t v99 = function_409890(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40a263\n    // 0x40a08e\n    return v99 & 0xffffffff;\n  lab_0x40a0e6:;\n    int32_t v100 = v55; // 0x40a0e6\n    if (v100 != (int32_t)v59) {\n        // 0x40a0ea\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40a08e\n    return 0xffffffff;\n  lab_0x40a0aa:\n    // 0x40a0aa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40a0b1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40a08e\n    return v99 & 0xffffffff;\n  lab_0x40a1f0:\n    // 0x40a1f0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40a025;\n  lab_0x40a1a4:\n    // 0x40a1a4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_409890(v6, a2, str, a4, a5, v57, v1, v11, &g18); // 0x40a1ca\n    if ((int32_t)v101 != -1) {\n        // 0x40a08e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40a1df\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40a1f0;\n}\n"
        },
        {
            "funcName": "function_40a480",
            "funcStartAddr": "40a480",
            "funcEndAddr": "40a4d6",
            "decompiledFuncCode": "int64_t function_40a480(int64_t a1) {\n    // 0x40a480\n    *(int32_t *)&g116 = g41;\n    *(int32_t *)&g117 = g40;\n    int64_t v1; // 0x40a480\n    int64_t result = function_409eb0(v1, v1, v1, v1, v1, v1, &g116, a1 & 0xffffffff); // 0x40a4a6\n    g41 = *(int32_t *)&g116;\n    g121 = g119;\n    *(int32_t *)&g39 = g118;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a4e0",
            "funcStartAddr": "40a4e0",
            "funcEndAddr": "40a4f8",
            "decompiledFuncCode": "int64_t function_40a4e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a4e0\n    return function_40a480(1);\n}\n"
        },
        {
            "funcName": "function_40a500",
            "funcStartAddr": "40a500",
            "funcEndAddr": "40a513",
            "decompiledFuncCode": "int64_t function_40a500(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x40a500\n    return function_40a480(0);\n}\n"
        },
        {
            "funcName": "function_40a520",
            "funcStartAddr": "40a520",
            "funcEndAddr": "40a535",
            "decompiledFuncCode": "int64_t function_40a520(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a520\n    return function_409eb0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40a540",
            "funcStartAddr": "40a540",
            "funcEndAddr": "40a556",
            "decompiledFuncCode": "int64_t function_40a540(void) {\n    // 0x40a540\n    return function_40a480(0);\n}\n"
        },
        {
            "funcName": "function_40a560",
            "funcStartAddr": "40a560",
            "funcEndAddr": "40a578",
            "decompiledFuncCode": "int64_t function_40a560(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a560\n    return function_409eb0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40a580",
            "funcStartAddr": "40a580",
            "funcEndAddr": "40a5fa",
            "decompiledFuncCode": "int64_t function_40a580(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40a58b\n    int64_t v2 = (int64_t)&g19; // 0x40a58b\n    int32_t * pwc; // 0x40a580\n    int64_t v3; // 0x40a580\n    int64_t n; // 0x40a580\n    if (a2 == 0) {\n        goto lab_0x40a5d2;\n    } else {\n        // 0x40a58d\n        if (a3 == 0) {\n            // 0x40a5b8\n            return -2;\n        }\n        // 0x40a599\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40a5d2;\n        } else {\n            goto lab_0x40a5a4;\n        }\n    }\n  lab_0x40a5d2:\n    // 0x40a5d2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40a580\n    pwc = (int32_t *)&v4;\n    goto lab_0x40a5a4;\n  lab_0x40a5a4:;\n    char * wstr = (char *)v3; // 0x40a5aa\n    int64_t ps; // 0x40a580\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40a5aa\n    int64_t result = v5; // 0x40a5aa\n    if (v5 < 0xfffffffe) {\n        // 0x40a5b8\n        return result;\n    }\n    int64_t result2 = result; // 0x40a5e9\n    if ((char)function_40a9f0(0, v3) == 0) {\n        // 0x40a5eb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40a5b8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a600",
            "funcStartAddr": "40a600",
            "funcEndAddr": "40a659",
            "decompiledFuncCode": "int64_t function_40a600(int64_t * a1, int64_t a2, int64_t a3) {\n    // 0x40a600\n    int32_t v1; // bp-16, 0x40a600\n    int64_t v2; // 0x40a600\n    int64_t v3 = function_40afc0(0, (int64_t *)&v1, a2, a3, v2, v2, v2, (int64_t)&g128); // 0x40a615\n    if (v3 == 0) {\n        // 0x40a632\n        return 0xffffffff;\n    }\n    // 0x40a61f\n    int64_t result; // 0x40a600\n    if (v1 > -1) {\n        // 0x40a62d\n        *a1 = v3;\n        result = v1;\n    } else {\n        // 0x40a638\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x40a632\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a660",
            "funcStartAddr": "40a660",
            "funcEndAddr": "40a66a",
            "decompiledFuncCode": "int64_t function_40a660(void) {\n    // 0x40a660\n    return function_405460(1);\n}\n"
        },
        {
            "funcName": "function_40a670",
            "funcStartAddr": "40a670",
            "funcEndAddr": "40a786",
            "decompiledFuncCode": "int64_t function_40a670(int64_t a1, char ** a2, int64_t * a3, int64_t n) {\n    char * str = (char *)a1; // 0x40a691\n    int32_t len = strlen(str); // 0x40a691\n    if (a2 == NULL) {\n        // 0x40a75d\n        return -1;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = -1;\n    int64_t * str3 = (int64_t *)(v3 * n + v1);\n    int32_t v4 = 0;\n    int64_t v5 = 0; // 0x40a6f7\n    int64_t v6 = v1; // 0x40a670\n    int64_t v7 = v2; // 0x40a6fe\n    int64_t str4; // 0x40a670\n    int64_t v8; // 0x40a670\n    int32_t v9; // 0x40a670\n    int32_t v10; // 0x40a670\n    int32_t v11; // 0x40a670\n    int64_t v12; // 0x40a670\n    int64_t result; // 0x40a670\n    int32_t v13; // 0x40a6f3\n    char * str2; // 0x40a712\n    while (true) {\n        // 0x40a707\n        str4 = v6;\n        v8 = v5;\n        v10 = v4;\n        str2 = (char *)v7;\n        v9 = v10;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40a71b\n            result = v8;\n            if (len == strlen(str2)) {\n                // 0x40a75d\n                return result;\n            }\n            if (v3 == -1) {\n                // break -> 0x40a72f\n                break;\n            }\n            // 0x40a6c0\n            v9 = 1;\n            if (a3 != NULL) {\n                // 0x40a6ce\n                v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                v9 = v13;\n            }\n        }\n        // 0x40a6f7\n        v4 = v9;\n        v5 = v8 + 1;\n        v7 = *(int64_t *)(8 * v5 + v2);\n        v6 = str4 + n;\n        v12 = v3;\n        v11 = v4;\n        if (v7 == 0) {\n            return (char)v11 == 0 ? v12 : -2;\n        }\n    }\n    int64_t v14 = v8 + 1; // 0x40a733\n    int64_t v15 = *(int64_t *)(8 * v14 + v2); // 0x40a73a\n    v12 = v8;\n    v11 = v10;\n    while (v15 != 0) {\n        // 0x40a707\n        v3 = v8;\n        str3 = (int64_t *)(v3 * n + v1);\n        v4 = v10;\n        v5 = v14;\n        v6 = str4 + n;\n        v7 = v15;\n        while (true) {\n            // 0x40a707\n            str4 = v6;\n            v8 = v5;\n            v10 = v4;\n            str2 = (char *)v7;\n            v9 = v10;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40a71b\n                result = v8;\n                if (len == strlen(str2)) {\n                    // 0x40a75d\n                    return result;\n                }\n                if (v3 == -1) {\n                    // break -> 0x40a72f\n                    break;\n                }\n                // 0x40a6c0\n                v9 = 1;\n                if (a3 != NULL) {\n                    // 0x40a6ce\n                    v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                    v9 = v13;\n                }\n            }\n            // 0x40a6f7\n            v4 = v9;\n            v5 = v8 + 1;\n            v7 = *(int64_t *)(8 * v5 + v2);\n            v6 = str4 + n;\n            v12 = v3;\n            v11 = v4;\n            if (v7 == 0) {\n                return (char)v11 == 0 ? v12 : -2;\n            }\n        }\n        // 0x40a72f\n        v14 = v8 + 1;\n        v15 = *(int64_t *)(8 * v14 + v2);\n        v12 = v8;\n        v11 = v10;\n    }\n  lab_0x40a748:\n    // 0x40a75d\n    return (char)v11 == 0 ? v12 : -2;\n}\n"
        },
        {
            "funcName": "function_40a790",
            "funcStartAddr": "40a790",
            "funcEndAddr": "40a801",
            "decompiledFuncCode": "int64_t function_40a790(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a790\n    char * format; // 0x40a790\n    if (a3 == -1) {\n        // 0x40a7f0\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x40a7a5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x40a7b4\n    int64_t v1; // 0x40a790\n    function_408610(1, (char *)a1, 5, v1);\n    function_408300(0, 8, a2);\n    error(0, 0, format);\n    return &g128;\n}\n"
        },
        {
            "funcName": "function_40a810",
            "funcStartAddr": "40a810",
            "funcEndAddr": "40a928",
            "decompiledFuncCode": "int64_t function_40a810(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40a83d\n    fputs_unlocked(v1, g45);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x40a8b0\n        int64_t v5; // 0x40a8b7\n        int64_t v6; // 0x40a8d7\n        while (v3 != 0) {\n            // 0x40a89b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x40a860\n                break;\n            }\n            // 0x40a8ad\n            v4 = v3 + 1;\n            v5 = function_408630(v2);\n            __fprintf_chk(g45, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x40a8e0\n                goto lab_0x40a8e0;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x40a863\n        int64_t v8 = function_408630(v2); // 0x40a86d\n        __fprintf_chk(g45, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40a88d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40a89b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x40a860\n                    break;\n                }\n                // 0x40a8ad\n                v4 = v3 + 1;\n                v5 = function_408630(v2);\n                __fprintf_chk(g45, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x40a8e0\n                    goto lab_0x40a8e0;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x40a860\n            v7 = v3 + 1;\n            v8 = function_408630(v2);\n            __fprintf_chk(g45, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x40a8e0:;\n    int64_t v10 = (int64_t)g45; // 0x40a8e0\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x40a8e7\n    uint64_t result = *v11; // 0x40a8e7\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x40a910\n        return __overflow(g45, 10);\n    }\n    // 0x40a8f1\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a930",
            "funcStartAddr": "40a930",
            "funcEndAddr": "40a9a0",
            "decompiledFuncCode": "int64_t function_40a930(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = function_40a670(a2, (char **)a3, (int64_t *)a4, a5); // 0x40a95c\n    int64_t result = v1; // 0x40a964\n    if (v1 < 0) {\n        // 0x40a978\n        function_40a790(a1, a2, v1);\n        function_40a810(a3, a4, a5);\n        result = -1;\n    }\n    // 0x40a966\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a9a0",
            "funcStartAddr": "40a9a0",
            "funcEndAddr": "40a9ed",
            "decompiledFuncCode": "int64_t function_40a9a0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x40a9a0\n    if (result == 0) {\n        // 0x40a9e1\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x40a9d8\n    int32_t n = a4; // 0x40a9d8\n    int64_t v1 = result; // 0x40a9df\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x40a9e1\n        return result;\n    }\n    int64_t str3 = str2; // 0x40a9df\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x40a9c0\n    int64_t result2 = 0; // 0x40a9cd\n    while (v2 != 0) {\n        // 0x40a9cf\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x40a9e1\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x40a9e1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a9f0",
            "funcStartAddr": "40a9f0",
            "funcEndAddr": "40aa4e",
            "decompiledFuncCode": "int64_t function_40a9f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40a9f6\n    if (locale == NULL) {\n        // 0x40aa23\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40a9f6\n    bool v2; // 0x40a9f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g20; // 0x40a9f0\n    int64_t v5 = v1; // 0x40a9f0\n    int64_t v6 = 2; // 0x40aa15\n    unsigned char v7 = *(char *)v5; // 0x40aa15\n    char v8 = *(char *)v4; // 0x40aa15\n    char v9 = v8; // 0x40aa15\n    bool v10 = false; // 0x40aa15\n    while (v7 == v8) {\n        // 0x40aa08\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40aa21\n    int64_t v13 = v1; // 0x40aa21\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40aa23\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40aa21\n    unsigned char v15 = *(char *)v13; // 0x40aa3d\n    char v16 = *(char *)v12; // 0x40aa3d\n    char v17 = v16; // 0x40aa3d\n    bool v18 = false; // 0x40aa3d\n    while (v15 == v16) {\n        // 0x40aa30\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40aa50",
            "funcStartAddr": "40aa50",
            "funcEndAddr": "40afb2",
            "decompiledFuncCode": "int64_t function_40aa50(void) {\n    char * v1 = nl_langinfo(14); // 0x40aa66\n    char * v2 = g120; // 0x40aa6b\n    char * v3; // 0x40aa50\n    int64_t v4; // 0x40aa50\n    int64_t v5; // 0x40aa50\n    int64_t v6; // 0x40aa50\n    int64_t v7; // 0x40aa50\n    int32_t size; // 0x40aa50\n    int32_t size2; // 0x40aa50\n    int32_t len; // 0x40ab22\n    int64_t v8; // 0x40ab22\n    char * env_val; // 0x40ab0d\n    if (v2 == NULL) {\n        // 0x40ab08\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40ab75;\n        } else {\n            // 0x40ab1a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40ab75;\n            } else {\n                // 0x40ab1f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40ab0d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40afa5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40ab75;\n                    } else {\n                        // 0x40af19\n                        size2 = len + 14;\n                        goto lab_0x40ab3b;\n                    }\n                } else {\n                    goto lab_0x40ab3b;\n                }\n            }\n        }\n    } else {\n        // 0x40aa50\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40aa8a;\n    }\n  lab_0x40adbc:;\n    // 0x40adbc\n    int64_t v10; // 0x40aa50\n    int64_t v11 = v10;\n    int64_t v12; // 0x40aa50\n    int64_t v13 = v12;\n    struct _IO_FILE * stream; // 0x40abfb\n    int32_t v14 = __uflow(stream); // 0x40adbf\n    int64_t v15 = v13; // 0x40adc9\n    int32_t v16 = v14; // 0x40adc9\n    int64_t v17 = v11; // 0x40adc9\n    int64_t v18 = v13; // 0x40adc9\n    int64_t v19 = v11; // 0x40adc9\n    if (v14 == -1) {\n        // break -> 0x40adcf\n        goto lab_0x40adcf;\n    }\n    goto lab_0x40ac49;\n  lab_0x40ac3e:;\n    // 0x40ac3e\n    int64_t v116; // 0x40aa50\n    int64_t v137 = v116;\n    int64_t v115; // 0x40aa50\n    int64_t v138 = v115;\n    int64_t v114; // 0x40aa50\n    int64_t v139 = v114;\n    int64_t * v30; // 0x40ac30\n    *v30 = v138 + 1;\n    unsigned char v140 = *(char *)v138; // 0x40ac46\n    v15 = v139;\n    v16 = v140;\n    v17 = v137;\n    goto lab_0x40ac49;\n  lab_0x40ac49:;\n    int64_t v20 = v17;\n    int32_t c = v16;\n    int64_t v21 = v15;\n    int64_t v22; // 0x40aa50\n    int32_t v23; // bp-120, 0x40aa50\n    int32_t v24; // bp-184, 0x40aa50\n    int64_t v25; // 0x40aa50\n    int64_t v26; // 0x40ac18\n    int64_t v27; // 0x40ac1d\n    int64_t * v28; // 0x40ac34\n    switch (c) {\n        case 32: {\n            // 0x40ac30\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40ac30_2;\n        }\n        case 10: {\n            // 0x40ac30\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40ac30_2;\n        }\n        case 9: {\n            // 0x40ac30\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40ac30_2;\n        }\n        case 35: {\n            uint64_t v29 = *v30; // 0x40ae21\n            uint64_t v31 = *v28; // 0x40ae25\n            int32_t v32; // 0x40aa50\n            char v33; // 0x40aa50\n            unsigned char v34; // 0x40ae08\n            int32_t v35; // 0x40ae2e\n            if (v29 < v31) {\n                // 0x40ae00\n                *v30 = v29 + 1;\n                v34 = *(char *)v29;\n                v32 = v34;\n                v33 = 1;\n            } else {\n                // 0x40ae2b\n                v35 = __uflow(stream);\n                v32 = v35;\n                v33 = v35 != -1;\n            }\n            char v36 = v33;\n            int32_t v37 = v32;\n            while (v37 != 10 && v36 != 0) {\n                // 0x40ae21\n                v29 = *v30;\n                v31 = *v28;\n                if (v29 < v31) {\n                    // 0x40ae00\n                    *v30 = v29 + 1;\n                    v34 = *(char *)v29;\n                    v32 = v34;\n                    v33 = 1;\n                } else {\n                    // 0x40ae2b\n                    v35 = __uflow(stream);\n                    v32 = v35;\n                    v33 = v35 != -1;\n                }\n                // 0x40ae10\n                v36 = v33;\n                v37 = v32;\n            }\n            // 0x40aeff\n            v18 = v21;\n            v19 = v20;\n            if (v37 == -1) {\n                // break -> 0x40adcf\n                break;\n            }\n            // 0x40ac30\n            v25 = v21;\n            v22 = v20;\n            goto lab_0x40ac30_2;\n        }\n        default: {\n            // 0x40ac5f\n            ungetc(c, stream);\n            int32_t items_assigned = fscanf(stream, \"%50s %50s\", &v24, &v23); // 0x40ac77\n            int64_t v38 = v27; // 0x40ac7f\n            v18 = v21;\n            v19 = v20;\n            if (items_assigned < 2) {\n                // break -> 0x40adcf\n                break;\n            }\n            int64_t v39 = v38;\n            int32_t v40 = *(int32_t *)v39; // 0x40ac88\n            int64_t v41 = v39 + 4; // 0x40ac8a\n            int32_t v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80); // 0x40ac96\n            uint32_t v43 = v42 & -0x7f7f7f80; // 0x40ac98\n            v38 = v41;\n            while (v43 == 0) {\n                // 0x40ac88\n                v39 = v38;\n                v40 = *(int32_t *)v39;\n                v41 = v39 + 4;\n                v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80);\n                v43 = v42 & -0x7f7f7f80;\n                v38 = v41;\n            }\n            int32_t v44 = (v42 & 0x8080) == 0 ? v43 / 0x10000 : v43; // 0x40aca9\n            int64_t v45 = v39 + 6; // 0x40acac\n            unsigned char v46 = (char)v44; // 0x40acb6\n            int64_t v47 = -1 - v46 < v46 ? 4 : 3; // 0x40acbb\n            int64_t v48 = v26; // 0x40acbf\n            int64_t v49 = v48;\n            int32_t v50 = *(int32_t *)v49; // 0x40acc2\n            int64_t v51 = v49 + 4; // 0x40acc4\n            int32_t v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80); // 0x40acd0\n            uint32_t v53 = v52 & -0x7f7f7f80; // 0x40acd2\n            v48 = v51;\n            while (v53 == 0) {\n                // 0x40acc2\n                v49 = v48;\n                v50 = *(int32_t *)v49;\n                v51 = v49 + 4;\n                v52 = v50 - 0x1010101 & (v50 ^ -0x7f7f7f80);\n                v53 = v52 & -0x7f7f7f80;\n                v48 = v51;\n            }\n            int64_t v54 = (v42 & 0x8080) == 0 ? v45 : v41; // 0x40acb0\n            int64_t v55 = v54 - v47 - v27; // 0x40acbf\n            int32_t v56 = (v52 & 0x8080) == 0 ? v53 / 0x10000 : v53; // 0x40ace8\n            int64_t v57 = (v52 & 0x8080) == 0 ? v49 + 6 : v51; // 0x40acef\n            unsigned char v58 = (char)v56; // 0x40acf5\n            int64_t v59 = -1 - v58 < v58 ? 4 : 3; // 0x40acf8\n            int64_t v60 = v57 - v59 - v26; // 0x40acfc\n            int64_t v61 = v60 + v55; // 0x40ad05\n            int64_t * v62; // 0x40aa50\n            int64_t v63; // 0x40aa50\n            if (v21 != 0) {\n                int64_t v64 = v61 + v21; // 0x40ae3b\n                int64_t * mem = realloc((int64_t *)v20, (int32_t)v64 + 3); // 0x40ae50\n                v63 = v64;\n                v62 = mem;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v61 + 3); // 0x40ad21\n                v63 = v61;\n                v62 = mem2;\n            }\n            int64_t * v65 = v62;\n            if (v65 == NULL) {\n                // 0x40af5c\n                free((int64_t *)v20);\n                goto lab_0x40abd4;\n            }\n            int64_t v66 = v63;\n            int64_t v67 = (int64_t)v65;\n            int64_t v68 = v66 + 2;\n            int64_t v69 = v55 + 1; // 0x40ad48\n            int64_t v70 = v68 - v60 + v67;\n            int64_t v71 = -2 - v55 + v70; // 0x40ad52\n            uint32_t v72 = (int32_t)v69; // 0x40ad55\n            if (v72 >= 8) {\n                int32_t v73 = v24; // 0x40ae64\n                *(int64_t *)v71 = (int64_t)v73;\n                int64_t v74 = (v69 & 0xffffffff) - 8;\n                int64_t v75 = *(int64_t *)(v74 + v27); // 0x40ae6d\n                *(int64_t *)(v71 + v74) = v75;\n                int64_t v76 = v71 + 8 & -8; // 0x40ae7e\n                int64_t v77 = v71 - v76; // 0x40ae82\n                uint32_t v78 = (int32_t)(v77 + v69); // 0x40ae8d\n                if (v78 >= 8) {\n                    int64_t v79 = v27 - v77; // 0x40ae87\n                    uint32_t v80 = v78 & -8; // 0x40aea9\n                    int64_t v81 = 0; // 0x40aa50\n                    int64_t v82 = v81;\n                    int64_t v83 = v82 + 8; // 0x40ae9e\n                    int64_t v84 = *(int64_t *)(v79 + v82); // 0x40aea1\n                    *(int64_t *)(v82 + v76) = v84;\n                    v81 = v83 & 0xffffffff;\n                    while (v80 > (int32_t)v83) {\n                        // 0x40ae9b\n                        v82 = v81;\n                        v83 = v82 + 8;\n                        v84 = *(int64_t *)(v79 + v82);\n                        *(int64_t *)(v82 + v76) = v84;\n                        v81 = v83 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v69 & 4) != 0) {\n                    int32_t v85 = v24; // 0x40af2f\n                    *(int32_t *)v71 = v85;\n                    int64_t v86 = (v69 & 0xffffffff) - 4;\n                    int32_t v87 = *(int32_t *)(v86 + v27); // 0x40af37\n                    *(int32_t *)(v71 + v86) = v87;\n                } else {\n                    if (v72 != 0) {\n                        int32_t v88 = v24; // 0x40ad6b\n                        *(char *)v71 = (char)v88;\n                        if ((v69 & 2) != 0) {\n                            int64_t v89 = (v69 & 0xffffffff) - 2;\n                            int16_t v90 = *(int16_t *)(v89 + v27); // 0x40af82\n                            *(int16_t *)(v71 + v89) = v90;\n                        }\n                    }\n                }\n            }\n            int64_t v91 = v60 + 1; // 0x40ad7b\n            int64_t v92 = v70 - 1; // 0x40ad7f\n            uint32_t v93 = (int32_t)v91; // 0x40ad84\n            if (v93 >= 8) {\n                int32_t v94 = v23; // 0x40aeb2\n                *(int64_t *)v92 = (int64_t)v94;\n                int64_t v95 = (v91 & 0xffffffff) - 8;\n                int64_t v96 = *(int64_t *)(v95 + v26); // 0x40aebe\n                *(int64_t *)(v92 + v95) = v96;\n                int64_t v97 = v70 + 7 & -8; // 0x40aecc\n                int64_t v98 = v92 - v97; // 0x40aed0\n                uint32_t v99 = (int32_t)(v98 + v91); // 0x40aedb\n                if (v99 >= 8) {\n                    int64_t v100 = v26 - v98; // 0x40aed5\n                    uint32_t v101 = v99 & -8; // 0x40aef6\n                    int64_t v102 = 0; // 0x40aa50\n                    int64_t v103 = v102;\n                    int64_t v104 = v103 + 8; // 0x40aeeb\n                    int64_t v105 = *(int64_t *)(v100 + v103); // 0x40aeee\n                    *(int64_t *)(v103 + v97) = v105;\n                    v102 = v104 & 0xffffffff;\n                    while (v101 > (int32_t)v104) {\n                        // 0x40aee9\n                        v103 = v102;\n                        v104 = v103 + 8;\n                        v105 = *(int64_t *)(v100 + v103);\n                        *(int64_t *)(v103 + v97) = v105;\n                        v102 = v104 & 0xffffffff;\n                    }\n                }\n            } else {\n                if ((v91 & 4) != 0) {\n                    int32_t v106 = v23; // 0x40af46\n                    *(int32_t *)v92 = v106;\n                    int64_t v107 = (v91 & 0xffffffff) - 4;\n                    int32_t v108 = *(int32_t *)(v107 + v26); // 0x40af4e\n                    *(int32_t *)(v92 + v107) = v108;\n                } else {\n                    if (v93 != 0) {\n                        int32_t v109 = v23; // 0x40ad9a\n                        *(char *)v92 = (char)v109;\n                        if ((v91 & 2) != 0) {\n                            int64_t v110 = (v91 & 0xffffffff) - 2;\n                            int16_t v111 = *(int16_t *)(v110 + v26); // 0x40af95\n                            *(int16_t *)(v92 + v110) = v111;\n                        }\n                    }\n                }\n            }\n            uint64_t v112 = *v30; // 0x40adae\n            uint64_t v113 = *v28; // 0x40adb2\n            v114 = v68;\n            v115 = v112;\n            v116 = v67;\n            v12 = v68;\n            v10 = v67;\n            if (v112 < v113) {\n                goto lab_0x40ac3e;\n            } else {\n                goto lab_0x40adbc;\n            }\n        }\n    }\n  lab_0x40ab75:;\n    int64_t * mem3 = malloc(size); // 0x40ab75\n    int64_t v117 = (int64_t)&g19; // 0x40ab80\n    int64_t v118; // 0x40aa50\n    int64_t path; // 0x40aa50\n    if (mem3 == NULL) {\n        goto lab_0x40ab52;\n    } else {\n        int64_t v119 = (int64_t)mem3; // 0x40ab75\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v119) = 47;\n        path = v119;\n        v118 = v4;\n        goto lab_0x40ab96;\n    }\n  lab_0x40aa8a:;\n    int64_t str = v1 == NULL ? (int64_t)&g19 : (int64_t)v1; // 0x40aa7d\n    char v120 = *v3; // 0x40aa8a\n    int64_t v121; // 0x40aa50\n    if (v120 == 0) {\n        // 0x40aae4\n        v121 = str;\n        return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n    }\n    char v122 = v120; // 0x40aa50\n    int64_t v123 = v7;\n    char * str2 = (char *)v123;\n    int64_t v124; // 0x40aa50\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v125 = v123 + 1;\n        if (v122 == 42) {\n            // 0x40aad0\n            v124 = v125;\n            if (*(char *)v125 == 0) {\n                goto lab_0x40aad7;\n            }\n        }\n        int64_t str3 = v125 + (int64_t)strlen(str2); // 0x40aaa0\n        int64_t v126 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40aaad\n        char v127 = *(char *)v126; // 0x40aab2\n        v122 = v127;\n        if (v127 == 0) {\n            // 0x40aae4\n            v121 = str;\n            return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n        }\n        v123 = v126;\n        str2 = (char *)v123;\n    }\n    // 0x40aabb\n    v124 = v123 + 1;\n  lab_0x40aad7:\n    // 0x40aae4\n    v121 = v124 + (int64_t)strlen(str2);\n    return *(char *)v121 == 0 ? (int64_t)\"ASCII\" : v121;\n  lab_0x40ab52:;\n    char * v128 = (char *)v117;\n    g120 = v128;\n    v3 = v128;\n    v7 = v117;\n    goto lab_0x40aa8a;\n  lab_0x40ab96:;\n    int64_t v129 = v118 + path; // 0x40ab96\n    *(int64_t *)v129 = 0x2e74657372616863;\n    *(int16_t *)(v129 + 12) = 115;\n    *(int32_t *)(v129 + 8) = 0x61696c61;\n    if (open((char *)path, O_RDONLY) >= 0) {\n        // 0x40abf1\n        int32_t fd; // 0x40abc2\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40af22\n            close(fd);\n        } else {\n            int64_t v130 = (int64_t)stream; // 0x40abfb\n            v26 = &v23;\n            v27 = &v24;\n            v30 = (int64_t *)(v130 + 8);\n            v28 = (int64_t *)(v130 + 16);\n            v25 = 0;\n            v22 = 0;\n            while (true) {\n              lab_0x40ac30_2:;\n                int64_t v131 = v22;\n                int64_t v132 = v25;\n                uint64_t v133 = *v30; // 0x40ac30\n                uint64_t v134 = *v28; // 0x40ac34\n                v114 = v132;\n                v115 = v133;\n                v116 = v131;\n                v12 = v132;\n                v10 = v131;\n                if (v133 >= v134) {\n                    goto lab_0x40adbc;\n                } else {\n                    goto lab_0x40ac3e;\n                }\n            }\n          lab_0x40adcf:;\n            int64_t v135 = v18;\n            if (v135 != 0) {\n                int64_t v136 = v19;\n                *(char *)(v136 + v135) = 0;\n            }\n        }\n    }\n    goto lab_0x40abd4;\n  lab_0x40ab3b:;\n    int64_t * mem4 = malloc(size2); // 0x40ab3b\n    v117 = (int64_t)&g19;\n    if (mem4 != NULL) {\n        // 0x40abe1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v118 = v8;\n        goto lab_0x40ab96;\n    } else {\n        goto lab_0x40ab52;\n    }\n  lab_0x40abd4:\n    // 0x40abd4\n    free((int64_t *)path);\n    v117 = (int64_t)&g19;\n    goto lab_0x40ab52;\n}\n"
        },
        {
            "funcName": "function_40afc0",
            "funcStartAddr": "40afc0",
            "funcEndAddr": "40cad9",
            "decompiledFuncCode": "int64_t function_40afc0(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x40afc0\n    int64_t v1; // bp-1416, 0x40afc0\n    int64_t v2; // bp-1656, 0x40afc0\n    if ((int32_t)function_40cd00(a3, &v1, &v2) < 0) {\n        // 0x40b630\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40afcb\n    int64_t v4; // bp-1384, 0x40afc0\n    int64_t v5; // bp-1640, 0x40afc0\n    int64_t v6; // 0x40afc0\n    if ((int32_t)function_40cae0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x40bf17\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x40bf33\n            free((int64_t *)v6);\n        }\n        // 0x40bf38\n        *__errno_location() = 22;\n        // 0x40b630\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x40b02b\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x40b033\n    uint64_t v9 = v8 + v6; // 0x40b037\n    int64_t v10; // 0x40afc0\n    char * v11; // 0x40afc0\n    int64_t v12; // 0x40afc0\n    if (v9 < v8) {\n        // 0x40b6e0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40b5e9;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x40b6e0\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x40b5e9;\n        } else {\n            uint64_t size = v9 + 6; // 0x40b047\n            if (size < 4000) {\n                // 0x40b190\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x40afc0\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x40b084;\n            } else {\n                if (size == -1) {\n                    // 0x40b6e0\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x40b5e9;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x40b068\n                    if (mem == NULL) {\n                        // 0x40b6e0\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x40b5e9;\n                    } else {\n                        // 0x40b07d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x40b084;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40b5b0_2:;\n    // 0x40b5b0\n    int64_t v14; // 0x40afc0\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x40b5b8\n    int64_t v17 = v16; // 0x40b5c6\n    int64_t v18 = v16; // 0x40b5c6\n    int64_t v19 = v15; // 0x40b5c6\n    int64_t v20; // 0x40b0a8\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x40b7d8;\n    } else {\n        goto lab_0x40b5d1;\n    }\n  lab_0x40b5e9:\n    // 0x40b5e9\n    if (v6 != (int64_t)&v4) {\n        // 0x40b600\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40b61c\n        free((int64_t *)v6);\n    }\n    // 0x40b621\n    *(int32_t *)v10 = 12;\n    // 0x40b630\n    return 0;\n  lab_0x40b084:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x40b0bd\n    int64_t v23 = *v22; // 0x40b0bd\n    int64_t v24 = 0; // 0x40b0c3\n    int64_t v25 = v20; // 0x40b0c3\n    int64_t v26 = v21; // 0x40b0c3\n    int64_t v27 = 0; // 0x40b0c3\n    int64_t v28; // 0x40afc0\n    int64_t v29; // 0x40afc0\n    int64_t v30; // 0x40afc0\n    int64_t v31; // 0x40afc0\n    int64_t v32; // 0x40afc0\n    int64_t v33; // 0x40afc0\n    int64_t v34; // 0x40afc0\n    if (v23 == a3) {\n        goto lab_0x40b6d3;\n    } else {\n        int64_t v35 = v23 - a3; // 0x40b0c9\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40b0db;\n    }\n  lab_0x40b6d3:;\n    int64_t v36 = v24; // 0x40b6d6\n    float80_t v37; // 0x40afc0\n    float80_t v38 = v37; // 0x40b6d6\n    float80_t v39; // 0x40afc0\n    float80_t v40 = v39; // 0x40b6d6\n    int64_t v41 = v25; // 0x40b6d6\n    int64_t v42 = v26; // 0x40b6d6\n    int64_t v43 = v27; // 0x40b6d6\n    int64_t v44; // 0x40afc0\n    int64_t v45 = v44; // 0x40b6d6\n    goto lab_0x40b238;\n  lab_0x40b238:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x40afc0\n    int64_t v51; // 0x40afc0\n    int64_t v52; // 0x40afc0\n    int64_t v53; // 0x40afc0\n    int64_t v54; // 0x40afc0\n    int64_t v55; // 0x40afc0\n    int64_t v56; // 0x40afc0\n    int64_t v57; // 0x40afc0\n    int64_t dest_mem2; // 0x40afc0\n    int64_t dest_mem3; // 0x40afc0\n    int64_t v58; // 0x40afc0\n    float80_t v59; // 0x40afc0\n    float80_t v60; // 0x40afc0\n    float80_t v61; // 0x40afc0\n    float80_t v62; // 0x40afc0\n    float80_t v63; // 0x40afc0\n    uint64_t v64; // 0x40c366\n    char * v65; // 0x40b24c\n    char v66; // 0x40b24c\n    int64_t v67; // 0x40b274\n    uint32_t v68; // 0x40b278\n    int64_t v69; // 0x40b655\n    char v70; // 0x40afc0\n    if (v1 == v49) {\n        // 0x40c360\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x40caca\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x40c3c2;\n            } else {\n                goto lab_0x40b5b0_2;\n            }\n        } else {\n            // 0x40c370\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x40c3c2;\n            } else {\n                if (v47 != 0) {\n                    // 0x40c98d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40b5b0_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x40c993\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40c38e;\n                        } else {\n                            goto lab_0x40c99f;\n                        }\n                    }\n                } else {\n                    // 0x40c37e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40c38e;\n                    } else {\n                        goto lab_0x40c99f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40b24c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x40b251\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40bcec\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x40be20\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x40b5b0_2;\n                } else {\n                    goto lab_0x40b6b2;\n                }\n            } else {\n                // 0x40b662\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x40b6b2;\n                } else {\n                    if (v47 != 0) {\n                        // 0x40bf50\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x40b5b0_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x40bf56\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x40b680;\n                            } else {\n                                goto lab_0x40bf62;\n                            }\n                        }\n                    } else {\n                        // 0x40b670\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x40b680;\n                        } else {\n                            goto lab_0x40bf62;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40bcec\n                abort();\n                // UNREACHABLE\n            }\n            // 0x40b269\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g124 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x40bbe0\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40b6b7;\n                }\n                case 19: {\n                    // 0x40bbd0\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40b6b7;\n                }\n                case 20: {\n                    // 0x40bbb8\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40b6b7;\n                }\n                case 21: {\n                    goto lab_0x40b7a0;\n                }\n                case 22: {\n                    goto lab_0x40b7a0;\n                }\n                default: {\n                    // 0x40b28a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x40b730\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x40b74d;\n                        } else {\n                            // 0x40b737\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x40b2c0;\n                            } else {\n                                goto lab_0x40b74d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x40b2c0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40b0db:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x40afc0\n    float80_t v77 = v76;\n    float80_t v78; // 0x40afc0\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x40afc0\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40b0de\n    int64_t v89 = v85; // 0x40b0de\n    int64_t v90 = v84; // 0x40b0de\n    float80_t v91 = v79; // 0x40b0de\n    float80_t v92 = v77; // 0x40b0de\n    int64_t v93 = v75; // 0x40b0de\n    int64_t v94 = v80; // 0x40b0de\n    int64_t v95 = v81; // 0x40b0de\n    int64_t v96 = v82; // 0x40b0de\n    int64_t v97 = v87; // 0x40b0de\n    int64_t v98; // 0x40afc0\n    int64_t v99; // 0x40afc0\n    int64_t v100; // 0x40afc0\n    int64_t v101; // 0x40afc0\n    int64_t v102; // 0x40afc0\n    if (v82 >= v87) {\n        goto lab_0x40b229;\n    } else {\n        if (v82 != 0) {\n            // 0x40b1c0\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x40b5b0_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x40b1c6\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40b1db;\n                } else {\n                    goto lab_0x40b1ce;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x40b104\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40b1ee;\n                } else {\n                    goto lab_0x40b110;\n                }\n            } else {\n                goto lab_0x40b1ce;\n            }\n        }\n    }\n  lab_0x40b229:\n    // 0x40b229\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x40b238;\n  lab_0x40c3c2:\n    // 0x40c3c2\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40c3ca\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40c3db\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x40c3e7\n    if (v12 != 0) {\n        // 0x40c3f3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x40c412\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40c42e\n        free((int64_t *)v6);\n    }\n    // 0x40c433\n    *a2 = v46;\n    // 0x40b630\n    return result;\n  lab_0x40b7a0:\n    // 0x40b7a0\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x40b6b7;\n  lab_0x40b1ce:\n    // 0x40b1ce\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x40b5b0_2;\n    } else {\n        goto lab_0x40b1db;\n    }\n  lab_0x40b7d8:\n    // 0x40b7d8\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x40b5d1;\n  lab_0x40b5d1:\n    if (v12 == 0) {\n        // 0x40b6e0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40b5e9;\n    } else {\n        // 0x40b5e1\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x40b5e9;\n    }\n  lab_0x40b6b2:\n    // 0x40b6b2\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x40b6b7;\n  lab_0x40b2c0:;\n    int64_t v273 = (int64_t)v11; // 0x40b2c0\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x40b2c7\n    int64_t v275 = v273 + 1; // 0x40b2cb\n    *v11 = 37;\n    int64_t v276 = v275; // 0x40b2d4\n    if (v274 % 2 != 0) {\n        // 0x40b2d6\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x40b2c7\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x40b2e7\n    if ((v277 & 2) != 0) {\n        // 0x40b2e9\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x40b2f3\n    if ((v277 & 4) != 0) {\n        // 0x40b2f5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x40b2ff\n    if ((v277 & 8) != 0) {\n        // 0x40b301\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x40b30b\n    if ((v277 & 16) != 0) {\n        // 0x40b30d\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x40b317\n    if ((v277 & 64) != 0) {\n        // 0x40b319\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x40b323\n    if ((v277 & 32) != 0) {\n        // 0x40b325\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x40b32d\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x40b331\n    int64_t v293 = v290; // 0x40b338\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x40b347\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40b36a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40b36e\n    int64_t v298 = v295; // 0x40b375\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x40b384\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40b27a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x40b3b0\n    int64_t v272; // 0x40afc0\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x40b3b9\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x40b7b8;\n        } else {\n            if (v301 == 12) {\n                // 0x40bf78\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x40b3e0;\n            } else {\n                // 0x40b3d0\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x40b7b0\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x40b7b8;\n                } else {\n                    goto lab_0x40b3e0;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40b3e0;\n    }\n  lab_0x40b6b7:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x40b6b7\n    int64_t v111 = v55 + 88; // 0x40b6bb\n    int64_t v112 = *(int64_t *)v111; // 0x40b6bf\n    int64_t v113 = v49 + 1; // 0x40b6c2\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x40b0c9\n        int64_t v115 = v114 + v105; // 0x40b0cf\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x40b6f8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x40b5b0_2;\n            } else {\n                goto lab_0x40b229;\n            }\n        } else {\n            goto lab_0x40b0db;\n        }\n    } else {\n        goto lab_0x40b6d3;\n    }\n  lab_0x40b1db:;\n    int64_t v116 = v80 == v20; // 0x40b1e2\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x40b110;\n    } else {\n        goto lab_0x40b1ee;\n    }\n  lab_0x40b1ee:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x40afc0\n    if (v102 != 0) {\n        goto lab_0x40b110;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x40b20a\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x40b7c5;\n        } else {\n            // 0x40b218\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x40b229;\n        }\n    }\n  lab_0x40b110:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x40b127\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x40b5b0_2;\n    } else {\n        // 0x40b14d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x40b175\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x40b229;\n    }\n  lab_0x40c38e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x40c954\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x40b5b0_2;\n        } else {\n            // 0x40c965\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40c97a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x40c3c2;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x40c3b1\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x40b7c5;\n        } else {\n            // 0x40c3bf\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x40c3c2;\n        }\n    }\n  lab_0x40c99f:\n    // 0x40c99f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x40b5b0_2;\n    } else {\n        goto lab_0x40c38e;\n    }\n  lab_0x40b74d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x40b74d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x40b751\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x40b755\n    int64_t v123 = 0; // 0x40b75c\n    int64_t v124 = v122; // 0x40b75c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x40b762\n        int64_t v126 = v120; // 0x40b76a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x40c6f1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x40c709\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x40c71b\n            int64_t v131 = v128; // 0x40c724\n            int64_t v132 = v130; // 0x40c724\n            int64_t v133; // 0x40afc0\n            int64_t v134; // 0x40c736\n            if (v130 < v129) {\n                // 0x40c726\n                if (v121 == v128) {\n                    // break -> 0x40b540\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x40b52b\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x40b540\n                        goto lab_0x40b540;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x40c6e8\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x40c6f1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x40c726\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x40b540\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x40b52b\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x40b540\n                            goto lab_0x40b540;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x40c6e8\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x40b774\n            if (*(int32_t *)v135 != 5) {\n                // 0x40bcec\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x40b780\n            int64_t v137 = v136; // 0x40b780\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x40b78d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x40b540:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x40b540\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x40b544\n    int64_t v142; // 0x40afc0\n    int64_t v143; // 0x40afc0\n    int64_t v144; // 0x40afc0\n    if (v140 == v141) {\n        goto lab_0x40bbf0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x40b551\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x40c754\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40c75d\n            if (v141 == v146) {\n                goto lab_0x40bc0e;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x40c783\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40c78a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x40c7a3\n                int64_t v152 = v151; // 0x40c7ac\n                int64_t v153 = v149; // 0x40c7ac\n                int64_t v154; // 0x40afc0\n                int64_t v155; // 0x40c7b7\n                if (v151 < v150) {\n                    // 0x40c7ae\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x40b5b0_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x40c7ca\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x40b5b0_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x40c770\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x40c779\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x40c7ae\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x40b5b0_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x40c7ca\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x40b5b0_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x40c770\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x40b57c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x40b563\n            if (*(int32_t *)v156 != 5) {\n                // 0x40bcec\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x40b570\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x40bbf0;\n            } else {\n                goto lab_0x40b57c;\n            }\n        }\n    }\n  lab_0x40b3e0:\n    // 0x40b3e0\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40b3ed\n    int64_t v160 = 0; // 0x40b3f5\n    if (v159 != -1) {\n        // 0x40b3fb\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40bcec\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x40b41e\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x40b42c\n        if (*(int32_t *)v162 != 5) {\n            // 0x40bcec\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40b43f\n        int64_t v164; // bp-8, 0x40afc0\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x40afc0\n    uint64_t v165; // 0x40b456\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x40be88\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x40b4b4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x40b5b0_2;\n    } else {\n        // 0x40b460\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x40b4b4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x40bb90\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x40b5b0_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x40bb96\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x40b482;\n                } else {\n                    goto lab_0x40bba2;\n                }\n            }\n        } else {\n            // 0x40b472\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x40b482;\n            } else {\n                goto lab_0x40bba2;\n            }\n        }\n    }\n  lab_0x40b680:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x40bea9\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x40b5b0_2;\n        } else {\n            // 0x40bec1\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40bed2\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x40b6b2;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x40b6a1\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x40b7c5;\n        } else {\n            // 0x40b6af\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x40b6b2;\n        }\n    }\n  lab_0x40bf62:\n    // 0x40bf62\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x40b5b0_2;\n    } else {\n        goto lab_0x40b680;\n    }\n  lab_0x40bbf0:\n    // 0x40bbf0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x40bc0e;\n  lab_0x40b7b8:\n    // 0x40b7b8\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x40b3e0;\n  lab_0x40b7c5:\n    // 0x40b7c5\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x40b7d8;\n  lab_0x40bc0e:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x40bc14\n    v14 = v48;\n    int64_t v170; // 0x40afc0\n    int64_t v171; // 0x40afc0\n    int64_t * v172; // 0x40afc0\n    int64_t v173; // 0x40afc0\n    int64_t v174; // bp-760, 0x40afc0\n    uint64_t size5; // 0x40bc18\n    if (v169 == -1) {\n        goto lab_0x40b5b0_2;\n    } else {\n        // 0x40bc29\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x40bc89;\n        } else {\n            // 0x40bc35\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x40b5b0_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40bc5d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x40b5b0_2;\n                } else {\n                    goto lab_0x40bc89;\n                }\n            }\n        }\n    }\n  lab_0x40b57c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x40bc0e;\n    } else {\n        // 0x40b585\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x40bc0e;\n        } else {\n            goto lab_0x40b5b0_2;\n        }\n    }\n  lab_0x40b482:\n    // 0x40b482\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x40be49\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x40be64\n            if (v48 == v20 && v46 != 0) {\n                // 0x40be72\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x40b4b4\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x40b4a3\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x40b4b4\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x40b5b0_2;\n  lab_0x40bba2:\n    // 0x40bba2\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x40b5b0_2;\n    } else {\n        goto lab_0x40b482;\n    }\n  lab_0x40bc89:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x40afc0\n    int64_t v181; // 0x40afc0\n    int64_t v182; // 0x40afc0\n    int64_t v183; // 0x40afc0\n    int64_t v184; // 0x40afc0\n    int64_t v185; // 0x40afc0\n    int64_t v186; // 0x40afc0\n    int64_t v187; // 0x40afc0\n    int64_t v188; // 0x40afc0\n    int64_t v189; // 0x40afc0\n    int64_t v190; // 0x40afc0\n    int64_t v191; // 0x40afc0\n    int64_t v192; // 0x40afc0\n    int64_t v193; // 0x40afc0\n    float80_t v194; // 0x40afc0\n    float80_t v195; // 0x40afc0\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x40c802\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x40c810\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40c93d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x40c149;\n    } else {\n        // 0x40bc91\n        int64_t v198; // 0x40afc0\n        float80_t v199; // 0x40afc0\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x40c451\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40c45e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40c2ba\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40bcbf\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x40bcc8\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40bcec\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40bcec\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x40c836\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x40c836\n                            v181 = v187 + 3;\n                            goto lab_0x40c9b1;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x40c9b1;\n                            } else {\n                                goto lab_0x40c872;\n                            }\n                        }\n                    } else {\n                        // 0x40c543\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x40c137;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x40c551\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40ca9a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x40c598\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x40c5ab\n                                int64_t v207 = v176 & 0xffffffff; // 0x40c5ae\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x40c5bc\n                                int64_t v209 = v187 + 1; // 0x40c5d9\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40c5ee\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x40c5fb\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x40c149;\n                        }\n                    }\n                } else {\n                    // 0x40c2e8\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x40c2e8\n                        v180 = v187 + 1;\n                        goto lab_0x40c897;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x40c897;\n                        } else {\n                            goto lab_0x40c308;\n                        }\n                    }\n                }\n            } else {\n                // 0x40c120\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x40c137;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40c66c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40c67d\n                    char v215 = *v213; // 0x40c684\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x40c6c0\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x40c6cd\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x40c695\n                        v182 = v218;\n                        int64_t v219; // 0x40c687\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x40c149;\n                }\n            }\n        } else {\n            float80_t v220; // 0x40afc0\n            if (v220 != 0.0L) {\n                // 0x40bcec\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40c33b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40c34a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x40c623\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x40c149;\n        }\n    }\n  lab_0x40c149:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40c14c\n    int64_t v229 = v228; // 0x40c152\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x40c154\n        int64_t v232 = v231 + v224; // 0x40c157\n        int64_t v233 = v232 - v225; // 0x40c15e\n        if ((v230 & 2) != 0) {\n            // 0x40c603\n            v229 = v233;\n            int64_t v234 = v224; // 0x40c606\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x40c610\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x40c610\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x40c475\n                int64_t v238 = v224; // 0x40c47b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x40c489\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x40c480\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x40c495\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x40c4a8\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x40c181\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x40c1a1\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x40c198\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40c1aa\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x40c1b8\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40bcec\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x40c1e8\n    int64_t dest_mem5 = v48; // 0x40c1f5\n    int64_t v250 = v248; // 0x40c1f5\n    int64_t v251 = v47; // 0x40c1f5\n    int64_t v252; // 0x40afc0\n    if (v47 - v46 > v248) {\n        goto lab_0x40c270;\n    } else {\n        if (v249 < v46) {\n            // 0x40c442\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x40b5b0_2;\n            } else {\n                goto lab_0x40c270;\n            }\n        } else {\n            // 0x40c200\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x40c270;\n            } else {\n                if (v47 != 0) {\n                    // 0x40c7d8\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40b5b0_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x40c7de\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40c21e;\n                        } else {\n                            goto lab_0x40c7ea;\n                        }\n                    }\n                } else {\n                    // 0x40c20e\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40c21e;\n                    } else {\n                        goto lab_0x40c7ea;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40c270:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x40c281\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40c29d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x40b6b7;\n  lab_0x40c137:\n    // 0x40c137\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x40c149;\n  lab_0x40c897:;\n    char * v257 = nl_langinfo(0x10000); // 0x40c8ca\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40c8db\n    char v259 = *v257; // 0x40c8e2\n    int64_t v260 = v176 & 0xffffffff; // 0x40c8e5\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x40c8f3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x40c920\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x40c92d\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x40c308;\n  lab_0x40c308:\n    // 0x40c308\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x40c149;\n  lab_0x40c21e:\n    // 0x40c21e\n    if (v48 == 0 || v48 == v20) {\n        // 0x40c4bb\n        int64_t size7; // 0x40afc0\n        int64_t * mem12 = malloc((int32_t)size7); // 0x40c4d2\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x40b5b0_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40c4de\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40c509\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x40c270;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40c24d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x40b5b0_2;\n        } else {\n            // 0x40c25b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x40c270;\n        }\n    }\n  lab_0x40c7ea:\n    // 0x40c7ea\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x40b5b0_2;\n    } else {\n        goto lab_0x40c21e;\n    }\n  lab_0x40c9b1:;\n    int64_t v265 = v187 + 4; // 0x40c9b1\n    char v266 = *nl_langinfo(0x10000); // 0x40c9fc\n    int64_t v267 = v176 & 0xffffffff; // 0x40c9ff\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x40ca06\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x40ca2d\n        int64_t v270 = v265 + 1; // 0x40ca35\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x40c872;\n  lab_0x40c872:\n    // 0x40c872\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x40c149;\n}\n"
        },
        {
            "funcName": "function_40cae0",
            "funcStartAddr": "40cae0",
            "funcEndAddr": "40ccf9",
            "decompiledFuncCode": "int64_t function_40cae0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x40cb43\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x40caf8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x40cb09\n    g125 = v5;\n    int64_t v6; // 0x40cae0\n    int64_t v7; // 0x40cae0\n    int64_t v8; // 0x40cae0\n    int64_t v9; // 0x40cae0\n    int64_t v10; // 0x40cae0\n    int64_t v11; // 0x40cae0\n    int64_t v12; // 0x40cae0\n    uint32_t v13; // 0x40cc00\n    int64_t * v14; // 0x40cc30\n    int64_t v15; // 0x40cc38\n    uint32_t v16; // 0x40cc80\n    uint32_t v17; // 0x40cc50\n    int64_t * v18; // 0x40cbe0\n    int64_t v19; // 0x40cbe0\n    int64_t * v20; // 0x40cbf0\n    int64_t v21; // 0x40cbf0\n    int64_t * v22; // 0x40cbc8\n    int64_t v23; // 0x40cbc8\n    int64_t * v24; // 0x40cbb0\n    int64_t v25; // 0x40cbb0\n    int64_t * v26; // 0x40ccd0\n    uint32_t v27; // 0x40cb90\n    int64_t v28; // 0x40ccd0\n    int64_t * v29; // 0x40ccc0\n    int64_t v30; // 0x40ccc0\n    uint32_t v31; // 0x40cb70\n    int64_t * v32; // 0x40cce8\n    int64_t v33; // 0x40cce8\n    int64_t v34; // 0x40cc93\n    uint32_t v35; // 0x40cb50\n    int64_t v36; // 0x40cc67\n    uint32_t v37; // 0x40cb18\n    int32_t * v38; // 0x40cc00\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x40cb90\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x40cb97\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x40cbe0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x40cba3\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x40cb36\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x40cb70\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x40cb77\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x40cbf0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x40cb83\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x40cb36\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x40cb50\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x40cb57\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x40cbc8\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x40cb63\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x40cb36\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x40cb18\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x40cb23\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x40cbb0\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x40cb2f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x40cb36\n            break;\n        }\n        case 11: {\n            // 0x40cc00\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x40cc0f\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x40ccd0\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x40cc1c\n            *(int64_t *)(v4 + 16) = __asm_movsd(__asm_movsd_1(*(int64_t *)v10));\n            // break -> 0x40cb36\n            break;\n        }\n        case 12: {\n            // 0x40cc30\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x40cb36\n            break;\n        }\n        case 15: {\n            // 0x40cc80\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x40cc87\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x40ccc0\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x40cc93\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x40cb36\n            break;\n        }\n        case 16: {\n            // 0x40cc50\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x40cc5b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x40cce8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x40cc67\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x40cb36\n            break;\n        }\n        default: {\n            // 0x40cb43\n            return 0xffffffff;\n        }\n    }\n    // 0x40cb36\n    v3++;\n    int64_t v39 = v4 + 32; // 0x40cb41\n    while (v3 < v2) {\n        // 0x40cb00\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g125 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x40cb90\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x40cb97\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x40cbe0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x40cba3\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x40cb36\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x40cb70\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x40cb77\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x40cbf0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x40cb83\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x40cb36\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x40cb50\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x40cb57\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x40cbc8\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x40cb63\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x40cb36\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x40cb18\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x40cb23\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x40cbb0\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x40cb2f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x40cb36\n                break;\n            }\n            case 11: {\n                // 0x40cc00\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x40cc0f\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x40ccd0\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x40cc1c\n                *(int64_t *)(v4 + 16) = __asm_movsd(__asm_movsd_1(*(int64_t *)v10));\n                // break -> 0x40cb36\n                break;\n            }\n            case 12: {\n                // 0x40cc30\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x40cb36\n                break;\n            }\n            case 15: {\n                // 0x40cc80\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x40cc87\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x40ccc0\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x40cc93\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x40cb36\n                break;\n            }\n            case 16: {\n                // 0x40cc50\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x40cc5b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x40cce8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x40cc67\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x40cb36\n                break;\n            }\n            default: {\n                // 0x40cb43\n                return 0xffffffff;\n            }\n        }\n        // 0x40cb36\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x40cb43\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40cd00",
            "funcStartAddr": "40cd00",
            "funcEndAddr": "40da09",
            "decompiledFuncCode": "int64_t function_40cd00(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x40cd02\n    int64_t v4 = v1 + 16; // 0x40cd06\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x40cd39\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x40cd4e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x40cd7b\n    int32_t v8 = 0; // 0x40cd80\n    int64_t v9 = 0; // 0x40cd80\n    int64_t v10 = v3; // 0x40cd80\n    int64_t v11 = a1; // 0x40cd80\n    int64_t v12 = 0; // 0x40cd80\n    char v13; // 0x40cd00\n    int64_t v14; // 0x40cd00\n    int64_t v15; // 0x40cd00\n    int64_t v16; // 0x40cd00\n    int64_t v17; // 0x40cd00\n    int64_t v18; // 0x40cd00\n    int64_t v19; // 0x40cd00\n    int64_t v20; // 0x40cd00\n    int64_t v21; // 0x40cd00\n    int64_t v22; // 0x40cd00\n    int64_t v23; // 0x40cd00\n    int64_t v24; // 0x40cd00\n    int64_t v25; // 0x40cd00\n    int64_t v26; // 0x40cd00\n    int64_t v27; // 0x40cd00\n    int64_t v28; // 0x40cd00\n    int64_t v29; // 0x40cd00\n    int64_t v30; // 0x40cd00\n    int32_t v31; // 0x40cd00\n    int64_t v32; // 0x40cd00\n    int64_t v33; // 0x40cd70\n    int64_t v34; // 0x40cdc0\n    int64_t * v35; // 0x40cde3\n    int64_t v36; // 0x40ce46\n    if (v7 != 0) {\n        // 0x40cd70\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x40cd00\n        int64_t v38 = 7; // 0x40cd00\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x40cd00\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x40cd70:\n            // 0x40cd70\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x40cdb3\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x40cdc8\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x40ce04\n                int64_t v43 = v42; // 0x40ce04\n                int64_t v44 = v43; // 0x40ce0d\n                int64_t v45 = v33; // 0x40ce0d\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x40d1a0\n                    char v47 = *(char *)v46; // 0x40d1a4\n                    int64_t v48 = v46; // 0x40d1ad\n                    while (v47 < 58) {\n                        // 0x40d1a0\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x40d1af\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x40d845\n                        char v52 = *(char *)v51; // 0x40d845\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x40d849\n                        int64_t v54 = v33; // 0x40d85d\n                        int64_t v55 = v51; // 0x40d85d\n                        char v56 = v52; // 0x40d85d\n                        int64_t v57 = v53; // 0x40d85d\n                        bool v58 = v52 < 58; // 0x40d85d\n                        bool v59 = v52 < 58; // 0x40d85d\n                        char v60 = v52; // 0x40d85d\n                        int64_t v61 = v51; // 0x40d85d\n                        int64_t v62; // 0x40d872\n                        int64_t v63; // 0x40d845\n                        char v64; // 0x40d845\n                        int64_t v65; // 0x40d849\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x40d4c8_9;\n                            }\n                            // 0x40d843\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x40d85f\n                                if (v64 >= 58) {\n                                    goto lab_0x40d4c8_9;\n                                }\n                                // 0x40d843\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x40d818\n                        while (v58) {\n                            // 0x40d81e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x40d4c8_9;\n                                }\n                                // 0x40d843\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x40d85f\n                                    if (v64 >= 58) {\n                                        goto lab_0x40d4c8_9;\n                                    }\n                                    // 0x40d843\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x40d814\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x40d91d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x40d4c8_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x40d92e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x40cd00\n                v36 = v45;\n                char v70; // 0x40cd00\n                while (true) {\n                    // 0x40ce46\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x40ce60\n                                *v41 = *v41 | 2;\n                                // break -> 0x40ce40\n                                break;\n                            }\n                            case 43: {\n                                // 0x40ce70\n                                *v41 = *v41 | 4;\n                                // break -> 0x40ce40\n                                break;\n                            }\n                            case 32: {\n                                // 0x40ce80\n                                *v41 = *v41 | 8;\n                                // break -> 0x40ce40\n                                break;\n                            }\n                            case 35: {\n                                // 0x40ce90\n                                *v41 = *v41 | 16;\n                                // break -> 0x40ce40\n                                break;\n                            }\n                            case 48: {\n                                // 0x40cea0\n                                *v41 = *v41 | 32;\n                                // break -> 0x40ce40\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x40cea8\n                                    break;\n                                }\n                                // 0x40ce36\n                                *v41 = *v41 | 64;\n                                // break -> 0x40ce40\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x40ce4f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x40ce40\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x40cd00\n                int64_t * v72; // 0x40cdd1\n                int64_t * v73; // 0x40cdda\n                if (v70 == 42) {\n                    // 0x40cf1d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x40cf3d\n                    int64_t v75 = v74; // 0x40cf3d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x40cf41\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x40cf47\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x40d31d\n                        char v80 = *(char *)v79; // 0x40d321\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x40d31d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x40d32d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x40d331\n                        int64_t v82 = v36; // 0x40d331\n                        int64_t v83 = 0; // 0x40d331\n                        if (v80 != 36) {\n                            goto lab_0x40cf4d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x40d362\n                            int64_t v89 = v85; // 0x40d362\n                            int64_t v90 = v87; // 0x40d362\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x40d367\n                            int64_t v95 = v92 + 1; // 0x40d36a\n                            char v96 = *(char *)v95; // 0x40d36a\n                            int64_t v97 = v96; // 0x40d36a\n                            while (v94 < v91) {\n                                // 0x40d381\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x40d4c8_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x40d33b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x40d344\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x40d381\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x40d4c8_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x40d33b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x40d9bb\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x40d4c8_9;\n                            }\n                            // 0x40d9c9\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x40cf5c;\n                        }\n                    } else {\n                        goto lab_0x40cf4d;\n                    }\n                } else {\n                    // 0x40cead\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x40cd00\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x40d5cb\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x40d5d0\n                        int64_t v102 = v71; // 0x40d5d9\n                        char * v103 = v100; // 0x40d5d9\n                        int64_t v104 = v36; // 0x40d5d9\n                        int64_t v105 = v71; // 0x40d5d9\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x40d5e3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x40d5e3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x40d5e3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x40d5f2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x40d615\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x40ceb8;\n                }\n            } else {\n                goto lab_0x40cd78;\n            }\n        }\n    }\n  lab_0x40cd82:\n    // 0x40cd82\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x40cda4\n    return 0;\n  lab_0x40d4c8_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x40d4d3\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x40d4e5\n    if (v3 != v115) {\n        // 0x40d4f0\n        free((int64_t *)v115);\n    }\n    // 0x40d4f5\n    *__errno_location() = 22;\n    // 0x40cda4\n    return 0xffffffff;\n  lab_0x40d6a0_5:;\n    // 0x40d6a0\n    int64_t v116; // 0x40cd00\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x40d6a5\n    int64_t v119; // 0x40cd00\n    if (v4 == v117) {\n        goto lab_0x40d6b9_3;\n    } else {\n        // 0x40d6a7\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x40d6b9_3;\n    }\n  lab_0x40d6b9_3:;\n    int64_t v120 = *v5; // 0x40d6b9\n    int32_t * v121; // 0x40d6c9\n    if (v3 == v120) {\n        // 0x40d6c9\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x40d6c4\n    free((int64_t *)v120);\n    // 0x40d6c9\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x40cd78:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x40cd7b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x40cd82\n        goto lab_0x40cd82;\n    }\n    goto lab_0x40cd70;\n  lab_0x40cf4d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x40cf4d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x40d2f3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x40d4c8_9;\n        }\n        // 0x40d30b\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x40cf5c;\n  lab_0x40ceb8:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40cebb\n    int64_t v147 = v339; // 0x40cebb\n    int64_t v145 = v338; // 0x40cebb\n    int64_t v143 = v337; // 0x40cebb\n    int64_t v186; // 0x40cd00\n    int64_t v190; // 0x40cd00\n    int64_t v189; // 0x40cd00\n    int64_t v188; // 0x40cd00\n    int64_t v187; // 0x40cd00\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x40cfc0;\n    } else {\n        goto lab_0x40cec1;\n    }\n  lab_0x40cf5c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x40cf5c\n    int64_t v132 = v128; // 0x40cf63\n    int64_t v133 = v16; // 0x40cf63\n    int64_t v134 = v131; // 0x40cf63\n    int64_t v135; // 0x40cd00\n    int64_t v136; // 0x40cd00\n    int64_t v137; // 0x40cd00\n    int64_t v138; // 0x40d20f\n    if (v16 > v127) {\n        goto lab_0x40cf6c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x40d205\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x40d6a0_5;\n        }\n        int64_t size = 32 * v138; // 0x40d22e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x40d78c\n            if (mem == NULL) {\n                goto lab_0x40d6b9_3;\n            }\n            // 0x40d7ae\n            v135 = (int64_t)mem;\n            goto lab_0x40d7b9;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x40d24f\n            int64_t v140 = *v6; // 0x40d254\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x40d6a0_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x40d24f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x40d7b9;\n            } else {\n                goto lab_0x40d28d;\n            }\n        }\n    }\n  lab_0x40cec1:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x40cec8\n    int64_t v151 = v146; // 0x40cec8\n    int64_t v152 = v144; // 0x40cec8\n    uint64_t v153; // 0x40cd00\n    int64_t v154; // 0x40cd00\n    int64_t v155; // 0x40cf07\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x40cf0b\n        int64_t v158; // 0x40cd00\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x40d070\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x40cf03\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x40d078\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x40cf00\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x40cf03\n                    break;\n                }\n            }\n        } else {\n            // 0x40cf10\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x40cf03\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x40d078\n    int64_t v162 = v161 % 256; // 0x40d084\n    g126 = v162;\n    int64_t v163 = 17; // 0x40d087\n    int64_t v164 = v154; // 0x40d087\n    int64_t v165 = v154; // 0x40d087\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x40d0f1;\n        }\n        case 28: {\n            goto lab_0x40d442;\n        }\n        case 30: {\n            // 0x40d46e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x40d099;\n        }\n        case 32: {\n            goto lab_0x40d442;\n        }\n        case 33: {\n            goto lab_0x40d442;\n        }\n        case 34: {\n            goto lab_0x40d442;\n        }\n        case 46: {\n            // 0x40d45f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x40d099;\n        }\n        case 51: {\n            goto lab_0x40d47d;\n        }\n        case 60: {\n            goto lab_0x40d442;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x40d399\n            int32_t v167 = v166 - 7; // 0x40d399\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40d39f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x40d099;\n        }\n        case 63: {\n            goto lab_0x40d3f0;\n        }\n        case 64: {\n            goto lab_0x40d442;\n        }\n        case 65: {\n            goto lab_0x40d442;\n        }\n        case 66: {\n            goto lab_0x40d442;\n        }\n        case 68: {\n            goto lab_0x40d3f0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x40d3af\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x40d3b5\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40d3bd\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40d3cb\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40d3df\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x40d099;\n        }\n        case 74: {\n            goto lab_0x40d47d;\n        }\n        case 75: {\n            goto lab_0x40d099;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x40d090\n            int32_t v172 = v171 - 7; // 0x40d090\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x40d096\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x40d099;\n        }\n        case 80: {\n            goto lab_0x40d47d;\n        }\n        case 83: {\n            goto lab_0x40d47d;\n        }\n        default: {\n            goto lab_0x40d4c8_9;\n        }\n    }\n  lab_0x40cf6c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x40cf83\n        int64_t v178 = v176; // 0x40cd00\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x40cf78\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x40cf78\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x40cf91\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40cf9d\n    int32_t v182 = *v181; // 0x40cf9d\n    if (v182 != 0) {\n        // 0x40d61e\n        if (v182 != 5) {\n            goto lab_0x40d4c8_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x40d627\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x40ceb8;\n    } else {\n        // 0x40cfa7\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40cfad\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x40cec1;\n        } else {\n            goto lab_0x40cfc0;\n        }\n    }\n  lab_0x40cfc0:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x40cfc0\n    char v197 = *v196; // 0x40cfc0\n    int64_t * v198; // 0x40cde8\n    *v198 = v192;\n    int64_t v199; // 0x40cd00\n    int64_t v200; // 0x40cd00\n    int64_t v201; // 0x40cd00\n    int64_t v202; // 0x40cd00\n    int64_t v203; // 0x40cd00\n    int64_t * v204; // 0x40cdf1\n    int64_t * v205; // 0x40cdfa\n    int64_t v206; // 0x40cfd9\n    if (v197 != 42) {\n        char v207 = *v196; // 0x40d1c0\n        int64_t v208 = v193; // 0x40d1c9\n        char * v209; // 0x40cd00\n        int64_t v210; // 0x40cd00\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x40d1d0\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x40d1d4\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x40d1d0\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40d1de\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x40d1c0\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x40d1f1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x40cec1;\n    } else {\n        // 0x40cfcf\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40cfef\n        int64_t v219 = v218; // 0x40cfef\n        int64_t v220 = v219 + 0xffffffd0; // 0x40cff3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x40cff9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x40d8a4\n            char v224 = *(char *)v223; // 0x40d8a8\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x40d8a4\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x40d8b4\n            v201 = v223;\n            int64_t v225 = v219; // 0x40d8b8\n            int64_t v226 = v206; // 0x40d8b8\n            int64_t v227 = 0; // 0x40d8b8\n            if (v224 != 36) {\n                goto lab_0x40cfff;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x40d8e9\n                int64_t v233 = v229; // 0x40d8e9\n                int64_t v234 = v231; // 0x40d8e9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x40d8ee\n                int64_t v239 = v236 + 1; // 0x40d8f5\n                char v240 = *(char *)v239; // 0x40d8f9\n                int64_t v241 = v240; // 0x40d8f9\n                while (v238 < v235) {\n                    // 0x40d907\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x40d4c8_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x40d8c2\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x40d8cb\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x40d907\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x40d4c8_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x40d8c2\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x40d9d7\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x40d4c8_9;\n                }\n                // 0x40d9e5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x40d00e;\n            }\n        } else {\n            goto lab_0x40cfff;\n        }\n    }\n  lab_0x40d0f1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x40d0f6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x40d0fe\n    *a2 = v245;\n    int64_t v246; // 0x40cd00\n    int64_t v247; // 0x40cd00\n    int64_t dest_mem; // 0x40cd00\n    int64_t v248; // 0x40cd00\n    int64_t v249; // 0x40d9f3\n    if (v246 > v245) {\n        // 0x40d10a\n        goto lab_0x40cd78;\n    } else {\n        if (v246 < 0) {\n            // 0x40d9f3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40d6a0_5;\n        }\n        int64_t v250 = 2 * v246; // 0x40d126\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x40d9f3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40d6a0_5;\n        }\n        int64_t v251 = *v5; // 0x40d137\n        int64_t size2 = 176 * v246; // 0x40d149\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x40d299\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x40d7fc\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x40d6c9\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x40d6a7\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x40d6b9_3;\n            }\n            goto lab_0x40d2b4;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x40d15b\n            if (mem4 == NULL) {\n                // 0x40d9f3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40d6a0_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x40d15b\n            int64_t v254 = *v5; // 0x40d17d\n            int64_t v255 = *a2; // 0x40d181\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x40d2b4;\n            } else {\n                goto lab_0x40d18f;\n            }\n        }\n    }\n  lab_0x40d442:\n    // 0x40d442\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x40d457\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x40d099;\n  lab_0x40d47d:;\n    uint32_t v335 = (int32_t)v153; // 0x40d485\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40d48b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40d493\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x40d4a1\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40d4ae\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40d099;\n  lab_0x40d3f0:;\n    uint32_t v336 = (int32_t)v153; // 0x40d3f8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x40d3fe\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40d406\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x40d414\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40d421\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40d099;\n  lab_0x40d099:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x40cd00\n    int64_t v260; // 0x40cd00\n    int64_t * v261; // 0x40cdff\n    if (v259 == -1) {\n        // 0x40d5a4\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x40d4c8_9;\n        }\n        // 0x40d5bc\n        v260 = v148;\n    } else {\n        // 0x40d0a3\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x40d0a8\n    int64_t v264 = v258; // 0x40d0af\n    int64_t v265 = v162; // 0x40d0af\n    int64_t v266 = v263; // 0x40d0af\n    int64_t v267; // 0x40cd00\n    int64_t v268; // 0x40cd00\n    int64_t v269; // 0x40cd00\n    int64_t v270; // 0x40cd00\n    int64_t v271; // 0x40cd00\n    if (v142 > v262) {\n        goto lab_0x40d0b5;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x40d518\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x40d522\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x40d6a0_5;\n        }\n        int64_t size3 = 32 * v273; // 0x40d541\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x40d554\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x40d639\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x40d6b9_3;\n            }\n            goto lab_0x40d656;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x40d561\n            if (mem6 == NULL) {\n                // 0x40d9f3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40d6a0_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x40d561\n            int64_t v276 = v274 & 0xffffffff; // 0x40d566\n            int64_t v277 = *v6; // 0x40d591\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x40d656;\n            } else {\n                goto lab_0x40d59b;\n            }\n        }\n    }\n  lab_0x40d0b5:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40d0cb\n        int64_t v282 = v279; // 0x40cd00\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x40d0c0\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x40d0c0\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x40d0d9\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x40d0e5\n    int32_t v286 = *v285; // 0x40d0e5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x40d50a\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x40d4c8_9;\n        }\n    } else {\n        // 0x40d0ef\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x40d0f1;\n  lab_0x40d7b9:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x40d7b9\n    int64_t * v290; // 0x40cd00\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40d28d;\n  lab_0x40d28d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x40cf6c;\n  lab_0x40cfff:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x40cfff\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x40d87a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x40d4c8_9;\n        }\n        // 0x40d892\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x40d00e;\n  lab_0x40d00e:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x40d00e\n    int64_t v300 = v296; // 0x40d015\n    int64_t v301 = v191; // 0x40d015\n    int64_t v302 = v299; // 0x40d015\n    int64_t v303; // 0x40cd00\n    int64_t v304; // 0x40cd00\n    int64_t v305; // 0x40cd00\n    int64_t v306; // 0x40d6f2\n    if (v191 > v295) {\n        goto lab_0x40d01e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x40d6e8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x40d6a0_5;\n        }\n        int64_t size4 = 32 * v306; // 0x40d70d\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x40d93e\n            if (mem7 == NULL) {\n                goto lab_0x40d6b9_3;\n            }\n            // 0x40d960\n            v304 = (int64_t)mem7;\n            goto lab_0x40d96b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x40d72e\n            int64_t v308 = *v6; // 0x40d733\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x40d6a0_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x40d72e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x40d96b;\n            } else {\n                goto lab_0x40d76c;\n            }\n        }\n    }\n  lab_0x40d2b4:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x40cd00\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x40d18f;\n  lab_0x40d18f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x40cd78;\n  lab_0x40d656:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x40d66c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x40d59b;\n  lab_0x40d59b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x40d0b5;\n  lab_0x40d01e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x40d033\n        int64_t v324 = v322; // 0x40cd00\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x40d028\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x40d028\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x40d041\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x40d04e\n    int32_t v328 = *v327; // 0x40d04e\n    if (v328 != 0) {\n        // 0x40d775\n        if (v328 != 5) {\n            goto lab_0x40d4c8_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x40d77e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x40d058\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x40d061\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x40cec1;\n  lab_0x40d96b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x40d96b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x40d76c;\n  lab_0x40d76c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x40d01e;\n}\n"
        },
        {
            "funcName": "function_40da10",
            "funcStartAddr": "40da10",
            "funcEndAddr": "40da6d",
            "decompiledFuncCode": "int64_t function_40da10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40da10\n    return function_401a60();\n}\n"
        },
        {
            "funcName": "function_40da70",
            "funcStartAddr": "40da70",
            "funcEndAddr": "40da71",
            "decompiledFuncCode": "int64_t function_40da70(void) {\n    // 0x40da70\n    int64_t result; // 0x40da70\n    return result;\n}\n"
        },
        {
            "funcName": "function_40da80",
            "funcStartAddr": "40da80",
            "funcEndAddr": "40da98",
            "decompiledFuncCode": "int64_t function_40da80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40da80\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g25);\n}\n"
        },
        {
            "funcName": "function_40da98",
            "funcStartAddr": "40da98",
            "funcEndAddr": "40dab8",
            "decompiledFuncCode": "int64_t function_40da98(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g21; // 0x40daa2\n    while (*(int64_t *)v1 != -1) {\n        // 0x40daa3\n        v1 -= 8;\n    }\n    // 0x40dab4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dd.elf"
}