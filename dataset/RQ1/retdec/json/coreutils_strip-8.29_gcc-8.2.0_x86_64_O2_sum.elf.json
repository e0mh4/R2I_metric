{
    "funcInfo": [
        {
            "funcName": "function_401970",
            "funcStartAddr": "401970",
            "funcEndAddr": "401975",
            "decompiledFuncCode": "int64_t function_401970(void) {\n    // 0x401970\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401975",
            "funcStartAddr": "401975",
            "funcEndAddr": "40197a",
            "decompiledFuncCode": "int64_t function_401975(void) {\n    // 0x401975\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40197a",
            "funcStartAddr": "40197a",
            "funcEndAddr": "40197f",
            "decompiledFuncCode": "int64_t function_40197a(void) {\n    // 0x40197a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40197f",
            "funcStartAddr": "40197f",
            "funcEndAddr": "401984",
            "decompiledFuncCode": "int64_t function_40197f(void) {\n    // 0x40197f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401984",
            "funcStartAddr": "401984",
            "funcEndAddr": "401989",
            "decompiledFuncCode": "int64_t function_401984(void) {\n    // 0x401984\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401989",
            "funcStartAddr": "401989",
            "funcEndAddr": "40198e",
            "decompiledFuncCode": "int64_t function_401989(void) {\n    // 0x401989\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401990",
            "funcStartAddr": "401990",
            "funcEndAddr": "401b4a",
            "decompiledFuncCode": "int64_t function_401990(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401996\n    function_4030b0(a2);\n    setlocale(LC_ALL, (char *)&g14);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_407360(0x402380, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    setvbuf(g33, (char *)((int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\" ^ (int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"), 1, 0);\n    g39 = 0;\n    int64_t v2; // 0x401990\n    int64_t v3; // 0x401990\n    int64_t v4; // 0x401990\n    int64_t v5; // 0x401aeb\n    int64_t v6; // 0x401990\n    int64_t v7; // 0x401b16\n    int64_t v8; // 0x401a13\n    int32_t v9; // 0x401a9e\n    int64_t v10; // 0x401a9e\n    while (true) {\n        // 0x401a00\n        int64_t v11; // 0x401990\n        v8 = function_406830(v1, a2, \"rs\", &g2, 0, v11);\n        uint32_t v12 = (int32_t)v8;\n        switch (v12) {\n            case -1: {\n                // 0x401a9b\n                v9 = (int32_t)a1 - g30;\n                v10 = v9;\n                if (v9 >= 0 == (v9 != 0)) {\n                    // 0x401aeb\n                    v5 = g30;\n                    v4 = a2;\n                    v2 = 1;\n                    if (v1 > v5) {\n                        // 0x401ad7\n                        v6 = 1 & v5;\n                        v3 = v6;\n                        while (v1 > (int64_t)(int32_t)&g31) {\n                            // 0x401ad7\n                            v6 = v3 & (int64_t)(int32_t)&g31;\n                            v3 = v6;\n                        }\n                        // 0x401aeb\n                        g30 = &g31;\n                        v4 = v10;\n                        v2 = v6;\n                    }\n                } else {\n                    // 0x401ab0\n                    v4 = v10;\n                    v2 = v8 & 0xffffffff;\n                }\n                // 0x401abd\n                if (g39 == 0 || (int32_t)function_4059c0((int64_t)g34, v4) != -1) {\n                    // 0x401ac6\n                    return v2 % 256 ^ 1;\n                }\n                // 0x401b0a\n                v7 = function_404b50(0, 3, (int64_t *)&g13);\n                error(1, *__errno_location(), \"%s\", (char *)v7);\n              lab_0x401b39:\n                // 0x401b39\n                function_402020(1);\n                // UNREACHABLE\n            }\n            case -130: {\n                // 0x401b43\n                function_402020(0);\n                // UNREACHABLE\n            }\n        }\n        if (v12 <= 0xffffff7e) {\n            if (v12 == -131) {\n                // 0x401a4b\n                function_4051b0((int64_t)g33, \"sum\", \"GNU coreutils\", (int64_t)g21, \"Kayvan Aghaiepour\", \"David MacKenzie\");\n                exit(0);\n                // UNREACHABLE\n            }\n            goto lab_0x401b39;\n        }\n        if ((v12 || 1) != 115) {\n            // 0x401b39\n            function_402020(1);\n            // UNREACHABLE\n        }\n    }\n    // 0x401a9b\n    v9 = (int32_t)a1 - g30;\n    v10 = v9;\n    if (v9 >= 0 == (v9 != 0)) {\n        // 0x401aeb\n        v5 = g30;\n        v4 = a2;\n        v2 = 1;\n        if (v1 > v5) {\n            // 0x401ad7\n            v6 = 1 & v5;\n            v3 = v6;\n            while (v1 > (int64_t)(int32_t)&g31) {\n                // 0x401ad7\n                v6 = v3 & (int64_t)(int32_t)&g31;\n                v3 = v6;\n            }\n            // 0x401aeb\n            g30 = &g31;\n            v4 = v10;\n            v2 = v6;\n        }\n    } else {\n        // 0x401ab0\n        v4 = v10;\n        v2 = v8 & 0xffffffff;\n    }\n    // 0x401abd\n    if (g39 == 0 || (int32_t)function_4059c0((int64_t)g34, v4) != -1) {\n        // 0x401ac6\n        return v2 % 256 ^ 1;\n    }\n    // 0x401b0a\n    v7 = function_404b50(0, 3, (int64_t *)&g13);\n    error(1, *__errno_location(), \"%s\", (char *)v7);\n  lab_0x401b39:\n    // 0x401b39\n    function_402020(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401b50",
            "funcEndAddr": "401b7b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401b50\n    int64_t v1; // 0x401b50\n    __libc_start_main(0x401990, (int32_t)a4, (char **)&v1, (void (*)())0x4072f0, (void (*)())0x407350, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b7b",
            "funcStartAddr": "401b7b",
            "funcEndAddr": "401b9a",
            "decompiledFuncCode": "int64_t function_401b7b(void) {\n    // 0x401b7b\n    return 0x60b288;\n}\n"
        },
        {
            "funcName": "function_401b9a",
            "funcStartAddr": "401b9a",
            "funcEndAddr": "401bd1",
            "decompiledFuncCode": "int64_t function_401b9a(void) {\n    // 0x401b9a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401bd1",
            "funcStartAddr": "401bd1",
            "funcEndAddr": "401c28",
            "decompiledFuncCode": "int64_t function_401bd1(void) {\n    // 0x401bd1\n    if (g37 != 0) {\n        // 0x401c27\n        int64_t result; // 0x401bd1\n        return result;\n    }\n    int64_t v1 = g38; // 0x401c04\n    int64_t result2; // 0x401c16\n    if (g38 >= ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x401c16\n        result2 = function_401b7b();\n        g37 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x401c06\n        v1++;\n    }\n    // 0x401bfa\n    g38 = v1;\n    // 0x401c16\n    result2 = function_401b7b();\n    g37 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401c28",
            "funcStartAddr": "401c28",
            "funcEndAddr": "401c2d",
            "decompiledFuncCode": "int64_t function_401c28(void) {\n    // 0x401c28\n    return function_401b9a();\n}\n"
        },
        {
            "funcName": "function_401c30",
            "funcStartAddr": "401c30",
            "funcEndAddr": "401e0e",
            "decompiledFuncCode": "int64_t function_401c30(int64_t path, int64_t a2) {\n    // 0x401c30\n    bool v1; // 0x401c30\n    int64_t v2 = v1 ? -1 : 1; // 0x401c54\n    int64_t v3 = (int64_t)&g13; // 0x401c30\n    int64_t v4 = path; // 0x401c30\n    int64_t v5 = 2; // 0x401c54\n    unsigned char v6 = *(char *)v4; // 0x401c54\n    char v7 = *(char *)v3; // 0x401c54\n    char v8 = v7; // 0x401c54\n    bool v9 = false; // 0x401c54\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    int64_t fd2; // 0x401c30\n    if ((v6 >= v10 && !v9) != v6 < v10) {\n        uint32_t fd = open((char *)path, O_RDONLY); // 0x401da0\n        fd2 = fd;\n        if (fd != -1) {\n            goto lab_0x401c74;\n        } else {\n            goto lab_0x401db0;\n        }\n    } else {\n        // 0x401c6b\n        g39 = 1;\n        fd2 = 0;\n        goto lab_0x401c74;\n    }\n  lab_0x401c74:;\n    // 0x401c74\n    int64_t v11; // bp-8248, 0x401c30\n    int64_t v12 = &v11;\n    int64_t v13 = 0; // 0x401c79\n    int64_t v14 = 0; // 0x401c79\n    int64_t v15; // 0x401c30\n    int64_t v16; // 0x401c30\n    while (true) {\n      lab_0x401c80:\n        // 0x401c80\n        v16 = v14;\n        v15 = v13;\n        int64_t v17 = function_404cf0(fd2, &v11, 0x2000); // 0x401c8f\n        switch (v17) {\n            case 0: {\n                goto lab_0x401cc4;\n            }\n            case -1: {\n                // 0x401d5f\n                error(0, *__errno_location(), \"%s\", (char *)function_404b50(0, 3, (int64_t *)path));\n                if ((v6 >= v10 && !v9) != v6 < v10) {\n                    // 0x401d90\n                    close((int32_t)fd2);\n                }\n                // 0x401d4b\n                return 0;\n            }\n            default: {\n                int64_t v18 = v12 + 1; // 0x401cb3\n                int64_t v19 = v15 + (int64_t)*(char *)v12 & 0xffffffff; // 0x401cb7\n                int64_t v20 = v19; // 0x401cbd\n                while (v18 != v17 + v12) {\n                    int64_t v21 = v18;\n                    v18 = v21 + 1;\n                    v19 = v20 + (int64_t)*(char *)v21 & 0xffffffff;\n                    v20 = v19;\n                }\n                // 0x401cbf\n                v13 = v19;\n                v14 = v17 + v16;\n                goto lab_0x401c80;\n            }\n        }\n    }\n  lab_0x401cc4:\n    if ((v6 >= v10 && !v9) == v6 < v10) {\n        goto lab_0x401cd8;\n    } else {\n        // 0x401cc9\n        if (close((int32_t)fd2) != 0) {\n            goto lab_0x401db0;\n        } else {\n            goto lab_0x401cd8;\n        }\n    }\n  lab_0x401db0:\n    // 0x401db0\n    error(0, *__errno_location(), \"%s\", (char *)function_404b50(0, 3, (int64_t *)path));\n    // 0x401d4b\n    return 0;\n  lab_0x401cd8:;\n    uint32_t v22 = (int32_t)v15; // 0x401cd8\n    uint32_t v23 = v22 / 0x10000 + v22 % 0x10000; // 0x401ce7\n    int64_t v24; // bp-8904, 0x401c30\n    int64_t v25; // 0x401c30\n    int64_t v26 = function_402520(v16, &v24, 0, 1, 512, v25); // 0x401d01\n    __printf_chk(1, \"%d %s\", (int64_t)(v23 / 0x10000 + v23 % 0x10000), (char *)v26);\n    if ((int32_t)a2 != 0) {\n        // 0x401de1\n        __printf_chk(1, \" %s\", (char *)path);\n    }\n    int64_t v27 = (int64_t)g33; // 0x401d26\n    int64_t * v28 = (int64_t *)(v27 + 40); // 0x401d2d\n    uint64_t v29 = *v28; // 0x401d2d\n    if (v29 >= *(int64_t *)(v27 + 48)) {\n        // 0x401dfa\n        __overflow(g33, 10);\n    } else {\n        // 0x401d3b\n        *v28 = v29 + 1;\n        *(char *)v29 = 10;\n    }\n    // 0x401d4b\n    return 1;\n}\n"
        },
        {
            "funcName": "function_401e10",
            "funcStartAddr": "401e10",
            "funcEndAddr": "402012",
            "decompiledFuncCode": "int64_t function_401e10(int64_t file_path, int64_t a2) {\n    // 0x401e10\n    bool v1; // 0x401e10\n    int64_t v2 = v1 ? -1 : 1; // 0x401e34\n    int64_t v3 = (int64_t)&g13; // 0x401e10\n    int64_t v4 = file_path; // 0x401e10\n    int64_t v5 = 2; // 0x401e34\n    unsigned char v6 = *(char *)v4; // 0x401e34\n    char v7 = *(char *)v3; // 0x401e34\n    char v8 = v7; // 0x401e34\n    bool v9 = false; // 0x401e34\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    struct _IO_FILE * v11; // 0x401e10\n    if ((v6 >= v10 && !v9) != v6 < v10) {\n        struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x401f68\n        v11 = file;\n        if (file != NULL) {\n            goto lab_0x401e58;\n        } else {\n            goto lab_0x401f79;\n        }\n    } else {\n        // 0x401e4a\n        g39 = 1;\n        v11 = g34;\n        goto lab_0x401e58;\n    }\n  lab_0x401e58:;\n    int64_t v12 = (int64_t)v11;\n    int64_t v13; // 0x401e10\n    function_402430(v12, 2, v13);\n    int64_t * v14 = (int64_t *)(v12 + 16); // 0x401e6a\n    int64_t * v15 = (int64_t *)(v12 + 8); // 0x401e6e\n    int64_t v16 = *v15; // 0x401e72\n    int64_t v17 = 0; // 0x401e72\n    int64_t v18 = *v14; // 0x401e72\n    int64_t v19 = 0; // 0x401e72\n    int64_t v20; // 0x401e10\n    int64_t v21; // 0x401e10\n    int64_t v22; // 0x401e10\n    while (true) {\n        // 0x401e9b\n        v20 = v19;\n        v22 = v18;\n        v21 = v17;\n        uint64_t v23 = v16;\n        int32_t v24; // 0x401e10\n        int64_t v25; // 0x401e10\n        int64_t v26; // 0x401e10\n        if (v22 > v23) {\n            int64_t v27 = v23 + 1; // 0x401e78\n            *v15 = v27;\n            v24 = (int32_t)*(char *)v23;\n            v25 = v27;\n            v26 = v22;\n        } else {\n            int32_t v28 = __uflow(v11); // 0x401ea3\n            if (v28 == -1) {\n                // break -> 0x401eb1\n                break;\n            }\n            // 0x402005\n            v24 = v28;\n            v25 = *v15;\n            v26 = *v14;\n        }\n        uint32_t v29 = (int32_t)v21; // 0x401e83\n        v16 = v25;\n        v17 = (0x8000 * v29 + v29 / 2 + v24) % 0x10000;\n        v18 = v26;\n        v19 = v20 + 1;\n    }\n    // 0x401eb1\n    if ((*(char *)v11 & 32) != 0) {\n        int64_t v30 = function_404b50(0, 3, (int64_t *)file_path); // 0x401fba\n        uint32_t err_num = *__errno_location(); // 0x401fd1\n        error(0, err_num, \"%s\", (char *)v30);\n        if ((v6 >= v10 && !v9) != v6 < v10) {\n            // 0x401fe4\n            function_4059c0(v12, (int64_t)err_num);\n        }\n        // 0x401f28\n        return 0;\n    }\n    if ((v6 >= v10 && !v9) == v6 < v10) {\n        goto lab_0x401ecf;\n    } else {\n        // 0x401ebf\n        if ((int32_t)function_4059c0(v12, v22) != 0) {\n            goto lab_0x401f79;\n        } else {\n            goto lab_0x401ecf;\n        }\n    }\n  lab_0x401f79:\n    // 0x401f79\n    error(0, *__errno_location(), \"%s\", (char *)function_404b50(0, 3, (int64_t *)file_path));\n    // 0x401f28\n    return 0;\n  lab_0x401ecf:;\n    // 0x401ecf\n    int64_t v31; // bp-712, 0x401e10\n    int64_t v32 = function_402520(v20, &v31, 0, 1, 1024, v13); // 0x401ee2\n    __printf_chk(1, \"%05d %5s\", v21, (char *)v32);\n    if ((int32_t)a2 > 1) {\n        // 0x401f40\n        __printf_chk(1, \" %s\", (char *)file_path);\n    }\n    int64_t v33 = (int64_t)g33; // 0x401f03\n    int64_t * v34 = (int64_t *)(v33 + 40); // 0x401f0a\n    uint64_t v35 = *v34; // 0x401f0a\n    if (v35 >= *(int64_t *)(v33 + 48)) {\n        // 0x401ff1\n        __overflow(g33, 10);\n    } else {\n        // 0x401f18\n        *v34 = v35 + 1;\n        *(char *)v35 = 10;\n    }\n    // 0x401f28\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402020",
            "funcStartAddr": "402020",
            "funcEndAddr": "402355",
            "decompiledFuncCode": "int64_t function_402020(int64_t a1) {\n    int32_t status = a1; // 0x402036\n    if (status != 0) {\n        // 0x40203a\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40205f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402066\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print checksum and block counts for each FILE.\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -r              use BSD sum algorithm, use 1K blocks\\n  -s, --sysv      use System V sum algorithm, use 512 bytes blocks\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g33);\n    int64_t v1 = &g1; // bp-136, 0x402133\n    bool v2; // 0x402020\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4021b8\n    int64_t v6 = *(int64_t *)v5; // 0x4021bc\n    int64_t v7 = 4; // 0x4021c2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"sum\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4021ce\n        char v11 = *(char *)v9; // 0x4021ce\n        char v12 = v11; // 0x4021ce\n        bool v13 = false; // 0x4021ce\n        while (v10 == v11) {\n            // 0x4021c4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4021ce\n            int64_t v15 = v8 + v3; // 0x4021ce\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4021da\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x4021da\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4022ec;\n        } else {\n            // 0x4022d6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40232b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40223c;\n            } else {\n                goto lab_0x4022ec;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40223c;\n        } else {\n            // 0x402222\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40232b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40223c;\n            } else {\n                goto lab_0x40223c;\n            }\n        }\n    }\n  lab_0x4022ec:\n    // 0x4022ec\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40227c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40205f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40223c:\n    // 0x40223c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40227c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40205f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402360",
            "funcStartAddr": "402360",
            "funcEndAddr": "402368",
            "decompiledFuncCode": "int64_t function_402360(int64_t a1) {\n    // 0x402360\n    g41 = a1;\n    int64_t result; // 0x402360\n    return result;\n}\n"
        },
        {
            "funcName": "function_402370",
            "funcStartAddr": "402370",
            "funcEndAddr": "402378",
            "decompiledFuncCode": "int64_t function_402370(int64_t a1) {\n    // 0x402370\n    g40 = a1;\n    int64_t result; // 0x402370\n    return result;\n}\n"
        },
        {
            "funcName": "function_402380",
            "funcStartAddr": "402380",
            "funcEndAddr": "40241e",
            "decompiledFuncCode": "int64_t function_402380(void) {\n    // 0x402380\n    int32_t * err_num; // 0x402396\n    if ((int32_t)function_406cc0((int64_t)g33) == 0) {\n        goto lab_0x4023ac;\n    } else {\n        // 0x402396\n        err_num = __errno_location();\n        if (g40 == 0) {\n            goto lab_0x4023c3;\n        } else {\n            // 0x4023a7\n            if (*err_num != 32) {\n                goto lab_0x4023c3;\n            } else {\n                goto lab_0x4023ac;\n            }\n        }\n    }\n  lab_0x4023ac:;\n    int64_t result = function_406cc0((int64_t)g36); // 0x4023b3\n    if ((int32_t)result == 0) {\n        // 0x4023bc\n        return result;\n    }\n    // 0x4023fe\n    _exit(g22);\n    // UNREACHABLE\n  lab_0x4023c3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4023cf\n    if (g41 == 0) {\n        // 0x402409\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4023e3\n        error(0, *err_num, \"%s: %s\", (char *)function_404b20((int64_t)g41), v1);\n    }\n    // 0x4023fe\n    _exit(g22);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402420",
            "funcStartAddr": "402420",
            "funcEndAddr": "402425",
            "decompiledFuncCode": "int64_t function_402420(void) {\n    // 0x402420\n    int64_t fd; // 0x402420\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402430",
            "funcStartAddr": "402430",
            "funcEndAddr": "402451",
            "decompiledFuncCode": "int64_t function_402430(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402430\n    if (stream == 0) {\n        // 0x402450\n        int64_t result; // 0x402430\n        return result;\n    }\n    // 0x402435\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402460",
            "funcStartAddr": "402460",
            "funcEndAddr": "402517",
            "decompiledFuncCode": "int64_t function_402460(int32_t a1, float80_t a2) {\n    // 0x402460\n    int3_t v1; // 0x402460\n    int3_t v2 = v1 - 1; // 0x402460\n    __frontend_reg_store_fpr(v2, 9223372036854775808.0L);\n    int3_t v3 = v1 - 2;\n    __frontend_reg_store_fpr(v3, a2);\n    float80_t v4 = __frontend_reg_load_fpr(v3); // 0x40246a\n    float80_t v5 = __frontend_reg_load_fpr(v2); // 0x40246a\n    int64_t result; // 0x402460\n    if (v4 > v5 || v4 == v5) {\n        // 0x4024e0\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3) - __frontend_reg_load_fpr(v2));\n        float80_t v6 = __frontend_reg_load_fpr(v3); // 0x4024e6\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        __frontend_reg_store_fpr(v2, v6);\n        result = (int64_t)__frontend_reg_load_fpr(v3) ^ -0x8000000000000000;\n    } else {\n        // 0x40246e\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3));\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        result = __frontend_reg_load_fpr(v3);\n    }\n    // 0x402494\n    __frontend_reg_store_fpr(v3, (float80_t)result);\n    if (result < 0) {\n        // 0x4024a2\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + 18446744073709551616.0L);\n    }\n    int3_t v7 = v3;\n    if (a1 != 0) {\n        // 0x4024d8\n        __frontend_reg_store_fpr(v7 + 1, __frontend_reg_load_fpr(v7));\n        // 0x4024da\n        return result;\n    }\n    int3_t v8 = v7 + 1; // 0x4024ac\n    float80_t v9 = __frontend_reg_load_fpr(v7); // 0x4024ac\n    __frontend_reg_store_fpr(v7, __frontend_reg_load_fpr(v8));\n    __frontend_reg_store_fpr(v8, v9);\n    float80_t v10 = __frontend_reg_load_fpr(v7); // 0x4024ae\n    float80_t v11 = __frontend_reg_load_fpr(v8); // 0x4024ae\n    if (v10 != v11 == v10 == v11) {\n        // 0x4024b8\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    } else {\n        // 0x4024b2\n        if (v10 == v11) {\n            // 0x4024da\n            return result;\n        }\n        // 0x4024b4\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    }\n    int64_t result2 = result + 1; // 0x4024c0\n    __frontend_reg_store_fpr(v8, (float80_t)result2);\n    if (result2 >= 0) {\n        // 0x4024da\n        return result2;\n    }\n    // 0x402510\n    __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8) + 18446744073709551616.0L);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402520",
            "funcStartAddr": "402520",
            "funcEndAddr": "402eee",
            "decompiledFuncCode": "int64_t function_402520(int64_t a1, int64_t * str3, uint32_t a3, uint64_t a4, uint64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)str3;\n    int32_t v2 = a3 & 32; // 0x402526\n    uint32_t v3 = a3 % 4; // 0x402530\n    int64_t v4; // bp-168, 0x402520\n    int64_t v5 = &v4; // 0x402540\n    uint32_t v6 = (v2 | 1024) - (v2 | (int32_t)(v2 == 0)) & 2024; // 0x402555\n    struct lconv * locale_info = localeconv(); // 0x40256b\n    int64_t str = *(int64_t *)locale_info; // 0x402570\n    int64_t len = strlen((char *)str); // 0x402579\n    int64_t v7 = len >= 17 ? (int64_t)&g3 : str; // 0x402593\n    int64_t str2 = *(int64_t *)((int64_t)locale_info + 8); // 0x40259c\n    int64_t v8 = len >= 17 ? 1 : len; // 0x4025a1\n    uint32_t len2 = strlen((char *)str2); // 0x4025b2\n    int64_t v9 = v1 + 647; // 0x4025c9\n    v4 = v9;\n    int64_t v10; // 0x402520\n    int64_t v11; // 0x402520\n    int64_t v12; // 0x402520\n    int64_t v13; // 0x402520\n    int64_t v14; // 0x402520\n    int64_t v15; // 0x402520\n    int64_t v16; // 0x402520\n    int64_t v17; // 0x402520\n    int64_t v18; // 0x402520\n    if (a5 > a4) {\n        if (a4 == 0) {\n            goto lab_0x402605;\n        } else {\n            if (a5 % a4 != 0) {\n                goto lab_0x402605;\n            } else {\n                uint64_t v19 = a5 / a4; // 0x402870\n                int64_t v20 = a1 / v19; // 0x402884\n                uint64_t v21 = 10 * (a1 % v19); // 0x402890\n                uint64_t v22 = 2 * (v21 % v19); // 0x402899\n                int64_t v23 = v21 / v19 & 0xffffffff; // 0x40289c\n                int64_t v24 = v19 > v22 ? (int64_t)(v22 != 0) : v19 < v22 ? 3 : 2;\n                uint32_t v25 = a3 & 16; // 0x4028b5\n                v13 = v25;\n                v17 = v20;\n                v15 = v24;\n                v10 = v23;\n                v14 = 0;\n                v12 = 0xffffffff;\n                v18 = v20;\n                v16 = v24;\n                v11 = v23;\n                if (v25 == 0) {\n                    goto lab_0x4028d1;\n                } else {\n                    goto lab_0x4028be;\n                }\n            }\n        }\n    } else {\n        if (a4 % a5 != 0) {\n            goto lab_0x402605;\n        } else {\n            uint64_t v26 = a4 / a5; // 0x4025e2\n            int64_t v27 = v26 * a1; // 0x4025f2\n            if (v27 / v26 == a1) {\n                uint32_t v28 = a3 & 16; // 0x402b71\n                int64_t v29 = v28; // 0x402b71\n                v13 = v29;\n                v17 = v27;\n                v15 = 0;\n                v10 = 0;\n                v14 = v29;\n                v12 = 0xffffffff;\n                v18 = v27;\n                v16 = 0;\n                v11 = 0;\n                if (v28 != 0) {\n                    goto lab_0x4028be;\n                } else {\n                    goto lab_0x4028d1;\n                }\n            } else {\n                goto lab_0x402605;\n            }\n        }\n    }\n  lab_0x4028d1:;\n    int64_t v30 = v14; // 0x4028da\n    int64_t v31 = v12; // 0x4028da\n    int64_t v32 = v18; // 0x4028da\n    int64_t v33 = v16; // 0x4028da\n    int64_t v34 = v11; // 0x4028da\n    int64_t v35 = v9; // 0x4028da\n    int64_t v36; // 0x402520\n    int64_t v37; // 0x402520\n    int64_t v38; // 0x402520\n    int64_t v39; // 0x402520\n    int64_t v40; // 0x402520\n    int64_t v41; // 0x402520\n    int64_t v42; // 0x402520\n    if (v3 == 1) {\n        // 0x402c10\n        v40 = v14;\n        v38 = v12;\n        v41 = v18;\n        v36 = v9;\n        v39 = v12;\n        v42 = v18;\n        v37 = v9;\n        if ((int32_t)(v18 % 2 != -v16) + (int32_t)v11 < 6) {\n            goto lab_0x402910;\n        } else {\n            goto lab_0x4028f1;\n        }\n    } else {\n        goto lab_0x4028e0;\n    }\n  lab_0x402605:;\n    // 0x402605\n    int3_t v43; // 0x402520\n    int3_t v44 = v43 - 1;\n    __frontend_reg_store_fpr(v44, (float80_t)a4);\n    int3_t v45; // 0x402520\n    int3_t v46; // 0x402520\n    if (a4 < 0) {\n        // 0x402850\n        __frontend_reg_store_fpr(v44, __frontend_reg_load_fpr(v44) + 18446744073709551616.0L);\n        v45 = v44;\n    } else {\n        // 0x402605\n        v45 = v43 - 2;\n        v46 = v44;\n    }\n    int3_t v47 = v46;\n    __frontend_reg_store_fpr(v45, (float80_t)a5);\n    float80_t v48 = __frontend_reg_load_fpr(v45);\n    int3_t v49; // 0x402520\n    int3_t v50; // 0x402520\n    int3_t v51; // 0x402520\n    int3_t v52; // 0x402520\n    if (a5 < 0) {\n        // 0x402830\n        __frontend_reg_store_fpr(v45, v48 + 18446744073709551616.0L);\n        int3_t v53 = v47 + 1;\n        __frontend_reg_store_fpr(v53, __frontend_reg_load_fpr(v53) / __frontend_reg_load_fpr(v47));\n        __frontend_reg_store_fpr(v47, (float80_t)a1);\n        v49 = v53;\n        v51 = v47;\n        v50 = v53;\n        v52 = v47;\n        if (a1 >= 0) {\n            goto lab_0x402642;\n        } else {\n            goto lab_0x402818;\n        }\n    } else {\n        // 0x40262e\n        __frontend_reg_store_fpr(v47, __frontend_reg_load_fpr(v47) / v48);\n        __frontend_reg_store_fpr(v45, (float80_t)a1);\n        int3_t v54 = v45 + 1;\n        v49 = v54;\n        v51 = v45;\n        v50 = v54;\n        v52 = v45;\n        if (a1 < 0) {\n            goto lab_0x402818;\n        } else {\n            goto lab_0x402642;\n        }\n    }\n  lab_0x402642:;\n    int3_t v55 = v49;\n    float80_t v56 = __frontend_reg_load_fpr(v51); // 0x402642\n    __frontend_reg_store_fpr(v55, v56 * __frontend_reg_load_fpr(v55));\n    int3_t v57 = v55; // 0x402649\n    int3_t v58 = v55; // 0x402649\n    if ((a3 & 16) == 0) {\n        goto lab_0x402760;\n    } else {\n        goto lab_0x40264f;\n    }\n  lab_0x402818:;\n    int3_t v59 = v52;\n    __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) + 18446744073709551616.0L);\n    int3_t v60 = v59 + 2; // 0x40281e\n    __frontend_reg_store_fpr(v60, __frontend_reg_load_fpr(v50) * __frontend_reg_load_fpr(v60));\n    v57 = v60;\n    v58 = v60;\n    if ((a3 & 16) != 0) {\n        goto lab_0x40264f;\n    } else {\n        goto lab_0x402760;\n    }\n  lab_0x4028be:;\n    int64_t v61 = v13;\n    v14 = v61;\n    v12 = 0;\n    v18 = v17;\n    v16 = v15;\n    v11 = v10;\n    int64_t v62; // 0x402520\n    int64_t v63; // 0x402520\n    int64_t v64; // 0x402520\n    int64_t v65; // 0x402520\n    int64_t v66; // 0x402520\n    int64_t v67; // 0x402520\n    int64_t v68; // 0x402af6\n    int64_t v69; // 0x402ada\n    if (v17 < (int64_t)v6) {\n        goto lab_0x4028d1;\n    } else {\n        int64_t v70; // 0x402520\n        int32_t v71 = v70; // 0x402af4\n        int64_t v72; // 0x402520\n        uint64_t v73; // 0x402520\n        v68 = v72 / v73;\n        int64_t v74; // 0x402520\n        uint64_t v75 = 10 * (v72 % v73) + v74 & 0xffffffff; // 0x402b07\n        int64_t v76 = v75 / v73; // 0x402b07\n        uint32_t v77 = 2 * (int32_t)(v75 % v73) + (v71 >> 1); // 0x402b09\n        uint32_t v78 = v77 + v71; // 0x402b12\n        int64_t v79 = v77 < v6 ? (int64_t)(v78 != 0) : v6 < v78 ? 3 : 2;\n        int64_t v80; // 0x402520\n        v69 = v80 + 1 & 0xffffffff;\n        while (v68 >= v73) {\n            // 0x402ae6\n            v14 = v61;\n            v12 = v69;\n            v18 = v68;\n            v16 = v79;\n            v11 = v76;\n            v80 = v69;\n            v72 = v68;\n            v70 = v79;\n            v74 = v76;\n            int64_t v81; // 0x402ada\n            if ((int32_t)v81 == 8) {\n                goto lab_0x4028d1;\n            }\n            int64_t v82 = v74;\n            int64_t v83 = v70;\n            uint64_t v84 = v72;\n            int64_t v85 = v80;\n            v71 = v83;\n            v68 = v84 / v73;\n            v75 = 10 * (v84 % v73) + v82 & 0xffffffff;\n            v76 = v75 / v73;\n            v77 = 2 * (int32_t)(v75 % v73) + (v71 >> 1);\n            v78 = v77 + v71;\n            int64_t v86 = v6 < v78 ? 3 : 2;\n            v79 = v77 < v6 ? (int64_t)(v78 != 0) : v86;\n            v81 = v85 + 1;\n            v69 = v81 & 0xffffffff;\n        }\n        // 0x402cc0\n        v14 = v61;\n        v12 = v69;\n        v18 = v68;\n        v16 = v79;\n        v11 = v76;\n        if (v68 < 10) {\n            bool v87; // 0x402520\n            if (v3 == 1) {\n                int32_t v88 = (int32_t)(v79 + v76 % 2) - 2; // 0x402d97\n                v87 = v88 >= 0 == (v88 != 0);\n            } else {\n                // 0x402cd5\n                v87 = v3 == 0 == (v79 != 0);\n            }\n            // 0x402ce7\n            if (v87) {\n                int64_t v89 = v76 + 1; // 0x402d80\n                v63 = v89 & 0xffffffff;\n                if ((int32_t)v89 == 10) {\n                    // 0x402df3\n                    v67 = v68 + 1;\n                    v64 = 0;\n                    v66 = 10;\n                    v65 = 0;\n                    v62 = v9;\n                    if (v68 == 9) {\n                        goto lab_0x402d40;\n                    } else {\n                        goto lab_0x402cf7;\n                    }\n                } else {\n                    goto lab_0x402d88;\n                }\n            } else {\n                // 0x402cef\n                v67 = v68;\n                v64 = v79;\n                v63 = v76;\n                if (v75 >= v73) {\n                    goto lab_0x402d88;\n                } else {\n                    goto lab_0x402cf7;\n                }\n            }\n        } else {\n            goto lab_0x4028d1;\n        }\n    }\n  lab_0x402760:;\n    int3_t v90 = v58; // 0x402767\n    if (v3 != 1) {\n        int3_t v91 = v58 - 1; // 0x402769\n        __frontend_reg_store_fpr(v91, 1.84467e+19L);\n        float80_t v92 = __frontend_reg_load_fpr(v91); // 0x40276f\n        float80_t v93 = __frontend_reg_load_fpr(v58); // 0x40276f\n        v90 = v58;\n        if (v92 > v93) {\n            // 0x402b30\n            function_402460(v3, __frontend_reg_load_fpr(v58));\n            v90 = v58 + 1;\n        }\n    }\n    // 0x402777\n    __frontend_reg_load_fpr(v90);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len3 = strlen((char *)str3); // 0x4027a6\n    int64_t v94 = len3; // 0x4027ad\n    int64_t v95 = 0xffffffff; // 0x4027ad\n    int64_t v96 = len3; // 0x4027ad\n    goto lab_0x4027b0;\n  lab_0x40264f:;\n    int3_t v179 = v57;\n    int3_t v178 = v179 - 1; // 0x40264f\n    __frontend_reg_store_fpr(v178, (float80_t)v6);\n    int3_t v204 = v179 - 2; // 0x402655\n    __frontend_reg_store_fpr(v204, __frontend_reg_load_fpr(v178));\n    int3_t v205 = v179 - 3;\n    __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v204));\n    int64_t v206 = 1; // 0x402666\n    int64_t v163 = v206 & 0xffffffff; // 0x402666\n    __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v205) * __frontend_reg_load_fpr(v178));\n    float80_t v207 = __frontend_reg_load_fpr(v205); // 0x40266b\n    __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v179));\n    __frontend_reg_store_fpr(v179, v207);\n    while (__frontend_reg_load_fpr(v205) >= __frontend_reg_load_fpr(v179)) {\n        float80_t v208 = __frontend_reg_load_fpr(v205);\n        if ((int32_t)v206 == 8) {\n            // 0x402676\n            __frontend_reg_store_fpr(v178, v208);\n            __frontend_reg_store_fpr(v179, __frontend_reg_load_fpr(v204));\n            goto lab_0x402684;\n        }\n        // 0x402660\n        __frontend_reg_store_fpr(v204, v208);\n        float80_t v209 = __frontend_reg_load_fpr(v204); // 0x402662\n        __frontend_reg_store_fpr(v204, __frontend_reg_load_fpr(v179));\n        __frontend_reg_store_fpr(v179, v209);\n        __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v204));\n        v206 = v163 + 1;\n        v163 = v206 & 0xffffffff;\n        __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v205) * __frontend_reg_load_fpr(v178));\n        v207 = __frontend_reg_load_fpr(v205);\n        __frontend_reg_store_fpr(v205, __frontend_reg_load_fpr(v179));\n        __frontend_reg_store_fpr(v179, v207);\n    }\n    // 0x402680\n    __frontend_reg_store_fpr(v178, __frontend_reg_load_fpr(v205));\n    __frontend_reg_store_fpr(v179, __frontend_reg_load_fpr(v204));\n    goto lab_0x402684;\n  lab_0x4028e0:;\n    int64_t v210 = v35;\n    int64_t v211 = v32;\n    int64_t v212 = v31;\n    v39 = v212;\n    v42 = v211;\n    v37 = v210;\n    if (v3 != 0) {\n        goto lab_0x402910;\n    } else {\n        // 0x4028ea\n        v40 = v30;\n        v38 = v212;\n        v41 = v211;\n        v36 = v210;\n        v39 = v212;\n        v42 = v211;\n        v37 = v210;\n        if ((int32_t)(v34 + v33) < 1) {\n            goto lab_0x402910;\n        } else {\n            goto lab_0x4028f1;\n        }\n    }\n  lab_0x4027b0:;\n    int64_t v97 = *(int64_t *)(v5 + 8); // 0x4027b4\n    int64_t v98 = v4 - v94; // 0x4027bc\n    memmove((int64_t *)v98, (int64_t *)v97, (int32_t)v94);\n    int64_t v99 = v95; // 0x4027c5\n    int64_t v100 = v98 + v96; // 0x4027c5\n    int64_t v101 = v98; // 0x4027c5\n    goto lab_0x4027ca;\n  lab_0x402684:;\n    float80_t v177 = __frontend_reg_load_fpr(v178); // 0x402692\n    __frontend_reg_store_fpr(v179, v177 / __frontend_reg_load_fpr(v179));\n    uint64_t v180 = v8 + (v2 == 0 ? 3 : 2); // 0x402699\n    int3_t v142; // 0x402520\n    int3_t v172; // 0x402520\n    int3_t v146; // 0x402520\n    int64_t v143; // 0x402520\n    int3_t v174; // 0x402520\n    if (v3 == 1) {\n        // 0x402bc0\n        __frontend_reg_store_fpr(v178, __frontend_reg_load_fpr(v179));\n        __frontend_reg_load_fpr(v178);\n        float80_t v181 = __frontend_reg_load_fpr(v179); // 0x402be4\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len6 = strlen((char *)str3); // 0x402bf0\n        __frontend_reg_store_fpr(v179, v181);\n        v142 = v179;\n        v143 = len6;\n        if (v180 < len6) {\n            // 0x402c00\n            __frontend_reg_store_fpr(v178, 10.0L);\n            float80_t v182 = __frontend_reg_load_fpr(v179); // 0x402c06\n            __frontend_reg_store_fpr(v179, v182 * __frontend_reg_load_fpr(v178));\n            v146 = v178;\n            goto lab_0x402726;\n        } else {\n            goto lab_0x402b88;\n        }\n    } else {\n        // 0x4026a7\n        __frontend_reg_store_fpr(v178, 1.84467e+19L);\n        float80_t v183 = __frontend_reg_load_fpr(v178); // 0x4026ad\n        float80_t v184 = __frontend_reg_load_fpr(v179); // 0x4026ad\n        bool v185 = false; // 0x4026ad\n        bool v186 = false; // 0x4026ad\n        if (v183 <= v184) {\n            v185 = true;\n            v186 = false;\n            if (v183 >= v184) {\n                v185 = v183 != v184;\n                v186 = true;\n            }\n        }\n        __frontend_reg_store_fpr(v178, __frontend_reg_load_fpr(v179));\n        v172 = v178;\n        if (!v185 && !v186) {\n            // 0x402b48\n            __frontend_reg_load_fpr(v178);\n            float80_t v187 = __frontend_reg_load_fpr(v179); // 0x402b51\n            function_402460(v3, v187);\n            __frontend_reg_store_fpr(v179, v187);\n            v172 = v179;\n        }\n        float80_t v188 = __frontend_reg_load_fpr(v172); // 0x4026b7\n        v174 = v172 + 1;\n        __frontend_reg_load_fpr(v174);\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len7 = strlen((char *)str3); // 0x4026e5\n        __frontend_reg_store_fpr(v174, v188);\n        v142 = v174;\n        v143 = len7;\n        if (v180 < len7) {\n            // 0x4026f9\n            __frontend_reg_store_fpr(v172, 10.0L);\n            __frontend_reg_store_fpr(v174, __frontend_reg_load_fpr(v174) * __frontend_reg_load_fpr(v172));\n            goto lab_0x402701;\n        } else {\n            goto lab_0x402b88;\n        }\n    }\n  lab_0x402910:;\n    int64_t v189 = v37 - 1; // 0x402929\n    *(char *)v189 = (char)v42 + 48;\n    int64_t v190 = v189; // 0x40294b\n    while (v42 >= 10) {\n        // 0x402923\n        v189 = v190 - 1;\n        *(char *)v189 = (char)v42 + 48;\n        v190 = v189;\n    }\n    int64_t v102 = v39; // 0x402952\n    int64_t v103 = v189; // 0x402952\n    int64_t v104 = v39; // 0x402952\n    int64_t v105 = v37; // 0x402952\n    int64_t v106 = v189; // 0x402952\n    if ((a3 & 4) == 0) {\n        goto lab_0x4027d5;\n    } else {\n        goto lab_0x402958;\n    }\n  lab_0x4028f1:;\n    int64_t v191 = v36;\n    int64_t v192 = v38;\n    int64_t v193 = v41 + 1; // 0x4028f1\n    v39 = v192;\n    v42 = v193;\n    v37 = v191;\n    if ((int32_t)v192 == 8 || (int32_t)v40 == 0 || v193 != (int64_t)v6) {\n        goto lab_0x402910;\n    } else {\n        int64_t v194 = v191; // 0x402c7e\n        if ((a3 & 8) == 0) {\n            // 0x402e04\n            *(char *)(v191 - 1) = 48;\n            int64_t v195 = v191 + -1 - v8; // 0x402e0f\n            int64_t v196 = v8 & 0xffffffff; // 0x402e12\n            uint32_t v197 = (int32_t)v8; // 0x402e15\n            if (v197 >= 8) {\n                int64_t v198 = v195 + 8 & -8; // 0x402e60\n                *(int64_t *)v195 = *(int64_t *)v7;\n                *(int64_t *)(v195 + v196 - 8) = *(int64_t *)(v196 + v7 - 8);\n                int64_t v199 = v195 - v198; // 0x402e77\n                uint32_t v200 = (int32_t)(v199 + v8); // 0x402e83\n                v194 = v195;\n                if (v200 >= 8) {\n                    int64_t v201 = 0;\n                    int64_t v202 = v201 + 8; // 0x402e93\n                    *(int64_t *)(v201 + v198) = *(int64_t *)(v7 - v199 + v201);\n                    v194 = v195;\n                    while ((v200 & -8) > (int32_t)v202) {\n                        // 0x402e91\n                        v201 = v202 & 0xffffffff;\n                        v202 = v201 + 8;\n                        *(int64_t *)(v201 + v198) = *(int64_t *)(v7 - v199 + v201);\n                        v194 = v195;\n                    }\n                }\n            } else {\n                if ((v8 & 4) != 0) {\n                    // 0x402ebc\n                    *(int32_t *)v195 = *(int32_t *)v7;\n                    *(int32_t *)(v195 + v196 - 4) = *(int32_t *)(v196 + v7 - 4);\n                    v194 = v195;\n                } else {\n                    // 0x402e25\n                    v194 = v195;\n                    if (v197 != 0) {\n                        // 0x402e2d\n                        *(char *)v195 = *(char *)v7;\n                        v194 = v195;\n                        if ((v8 & 2) != 0) {\n                            // 0x402e3c\n                            *(int16_t *)(v195 + v196 - 2) = *(int16_t *)(v196 + v7 - 2);\n                            v194 = v195;\n                        }\n                    }\n                }\n            }\n        }\n        int64_t v203 = v194 - 1; // 0x402c84\n        *(char *)v203 = 49;\n        v99 = v192 + 1 & 0xffffffff;\n        v100 = v194;\n        v101 = v203;\n        goto lab_0x4027ca;\n    }\n  lab_0x4027ca:\n    // 0x4027ca\n    v102 = v99;\n    v103 = v101;\n    v104 = v99;\n    v105 = v100;\n    v106 = v101;\n    if ((*(char *)(v5 + 16) & 4) != 0) {\n        goto lab_0x402958;\n    } else {\n        goto lab_0x4027d5;\n    }\n  lab_0x4027d5:;\n    int64_t result = v103;\n    int64_t v107 = v5 + 16; // 0x4027d5\n    char v108 = *(char *)v107; // 0x4027d5\n    if (v108 > -1) {\n        // 0x4027f8\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v109 = v102; // 0x4027df\n    int64_t v110; // 0x402520\n    int64_t v111; // 0x402520\n    int64_t v112; // 0x402520\n    int64_t v113; // 0x402520\n    if ((int32_t)v102 == -1) {\n        uint64_t v114 = *(int64_t *)(v5 + 24); // 0x402a20\n        v109 = 0;\n        if (v114 < 2) {\n            goto lab_0x4027e5;\n        } else {\n            int64_t v115 = 1; // 0x402a3d\n            int64_t v116 = 1;\n            v115 *= (int64_t)*(int32_t *)(v5 + 52);\n            int64_t v117 = v116; // 0x402a47\n            while (v114 > v115) {\n                int64_t v118 = v116 + 1; // 0x402a49\n                int64_t v119 = v118 & 0xffffffff; // 0x402a49\n                v117 = v119;\n                if ((int32_t)v118 == 8) {\n                    // break -> 0x402a51\n                    break;\n                }\n                v116 = v119;\n                v115 *= (int64_t)*(int32_t *)(v5 + 52);\n                v117 = v116;\n            }\n            int32_t v120 = *(int32_t *)v107; // 0x402a51\n            int64_t v121 = v120 & 256; // 0x402a57\n            v110 = v121;\n            v112 = v117;\n            v111 = v121;\n            v113 = v117;\n            if ((v120 & 64) == 0) {\n                goto lab_0x402a80;\n            } else {\n                goto lab_0x402a61;\n            }\n        }\n    } else {\n        goto lab_0x4027e5;\n    }\n  lab_0x402958:;\n    int64_t str4 = len2 >= 17 ? (int64_t)&g14 : str2; // 0x4025c5\n    int32_t len4 = strlen((char *)str4); // 0x402965\n    int64_t v122 = v105 - v106; // 0x40296a\n    int64_t v123 = v5 + 64; // 0x402978\n    int64_t * v124 = (int64_t *)(v5 + 32); // 0x40297d\n    *v124 = (int64_t)len4;\n    int64_t * v125 = (int64_t *)v123; // 0x402982\n    __memcpy_chk(v125, (int64_t *)v106, (int32_t)v122, 41);\n    int32_t * v126 = (int32_t *)(v5 + 20); // 0x402987\n    *v126 = (int32_t)v104;\n    int64_t v127 = *v124; // 0x402999\n    int64_t * v128 = (int64_t *)str4;\n    int32_t v129 = v127;\n    int64_t v130 = *(int64_t *)(v5 + 56);\n    int64_t v131 = v105;\n    uint64_t v132 = v122;\n    unsigned char v133 = *(char *)v130; // 0x4029a0\n    int64_t v134 = -1; // 0x4029a6\n    int64_t v135 = v130; // 0x4029a6\n    if (v133 != 0) {\n        // 0x4029a8\n        v134 = v133 >= 127 ? v132 : (int64_t)v133;\n        v135 = v130 + 1;\n    }\n    int64_t v136 = v134;\n    while (v132 >= v136) {\n        int64_t v137 = v131 - v136; // 0x4029e0\n        int64_t v138 = v132 - v136; // 0x4029e3\n        memcpy((int64_t *)v137, (int64_t *)(v138 + v123), (int32_t)v136);\n        if (v138 == 0) {\n            // 0x402ed1\n            v102 = (int64_t)*v126;\n            v103 = v137;\n            goto lab_0x4027d5;\n        }\n        int64_t v139 = v137 - v127; // 0x402a03\n        memcpy((int64_t *)v139, v128, v129);\n        v130 = v135;\n        v131 = v139;\n        v132 = v138;\n        v133 = *(char *)v130;\n        v134 = v136;\n        v135 = v130;\n        if (v133 != 0) {\n            // 0x4029a8\n            v134 = v133 >= 127 ? v132 : (int64_t)v133;\n            v135 = v130 + 1;\n        }\n        // 0x4029b9\n        v136 = v134;\n    }\n    int64_t v140 = v131 - v132; // 0x4029cd\n    memcpy((int64_t *)v140, v125, (int32_t)v132);\n    v102 = (int64_t)*v126;\n    v103 = v140;\n    goto lab_0x4027d5;\n  lab_0x402b88:;\n    int3_t v141 = v142;\n    if ((a3 & 8) == 0) {\n        // 0x402ba8\n        __frontend_reg_store_fpr(v141, __frontend_reg_load_fpr(v141));\n        goto lab_0x402baa;\n    } else {\n        // 0x402b8f\n        if (*(char *)(v1 - 1 + v143) == 48) {\n            int3_t v144 = v141 - 1; // 0x402d68\n            __frontend_reg_store_fpr(v144, 10.0L);\n            float80_t v145 = __frontend_reg_load_fpr(v141); // 0x402d73\n            __frontend_reg_store_fpr(v141, v145 * __frontend_reg_load_fpr(v144));\n            v146 = v144;\n            if (v3 != 1) {\n                goto lab_0x402701;\n            } else {\n                goto lab_0x402726;\n            }\n        } else {\n            // 0x402b9f\n            __frontend_reg_store_fpr(v141, __frontend_reg_load_fpr(v141));\n            goto lab_0x402baa;\n        }\n    }\n  lab_0x4027e5:;\n    uint32_t v147 = *(int32_t *)v107 & 256; // 0x4027e9\n    if ((v147 || (int32_t)v109) == 0) {\n        // 0x4027f8\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v148 = v147; // 0x4027e9\n    v110 = v148;\n    v112 = v109;\n    int64_t v149 = v148; // 0x402c55\n    int64_t v150 = v109; // 0x402c55\n    if ((v108 & 64) == 0) {\n        goto lab_0x402a78;\n    } else {\n        goto lab_0x402a61;\n    }\n  lab_0x402d88:;\n    int64_t v151 = v68; // 0x402d8b\n    int64_t v152 = v63 + 48 & 0xffffffff; // 0x402d8b\n    goto lab_0x402d07;\n  lab_0x402cf7:\n    // 0x402cf7\n    v151 = v67;\n    v152 = 48;\n    v66 = v67;\n    v65 = v64;\n    v62 = v9;\n    if ((a3 & 8) != 0) {\n        goto lab_0x402d40;\n    } else {\n        goto lab_0x402d07;\n    }\n  lab_0x402726:;\n    int3_t v170 = v146 + 1; // 0x402726\n    __frontend_reg_store_fpr(v170, __frontend_reg_load_fpr(v170) / __frontend_reg_load_fpr(v146));\n    __frontend_reg_load_fpr(v170);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len5 = strlen((char *)str3); // 0x402752\n    v94 = len5;\n    v95 = v163;\n    v96 = len5;\n    goto lab_0x4027b0;\n  lab_0x402701:;\n    int3_t v171 = v172 - 1; // 0x402701\n    __frontend_reg_store_fpr(v171, 1.84467e+19L);\n    float80_t v173 = __frontend_reg_load_fpr(v171); // 0x402707\n    v146 = v172;\n    if (v173 > __frontend_reg_load_fpr(v174)) {\n        float80_t v175 = __frontend_reg_load_fpr(v172); // 0x40270b\n        function_402460(v3, __frontend_reg_load_fpr(v174));\n        __frontend_reg_store_fpr(v174, v175);\n        v146 = v174;\n    }\n    goto lab_0x402726;\n  lab_0x402a78:\n    // 0x402a78\n    v111 = v149;\n    v113 = v150;\n    int64_t v166; // 0x402520\n    if ((int32_t)v150 == 0) {\n        // 0x402edd\n        v166 = v4;\n        if ((int32_t)v149 == 0) {\n            // 0x4027f8\n            *(char *)v4 = 0;\n            return result;\n        }\n        goto lab_0x402abd;\n    } else {\n        goto lab_0x402a80;\n    }\n  lab_0x402a61:;\n    int64_t v176 = *(int64_t *)(v5 + 8); // 0x402a61\n    *(char *)(v176 + 647) = 32;\n    v4 = v176 + 648;\n    v149 = v110;\n    v150 = v112;\n    goto lab_0x402a78;\n  lab_0x402d40:\n    // 0x402d40\n    v30 = v61;\n    v31 = v69;\n    v32 = v66;\n    v33 = v65;\n    v34 = 0;\n    v35 = v62;\n    v39 = v69;\n    v42 = v66;\n    v37 = v62;\n    if (v3 == 1) {\n        goto lab_0x402910;\n    } else {\n        goto lab_0x4028e0;\n    }\n  lab_0x402d07:;\n    int64_t v153 = v1 + 646; // 0x402d0c\n    *(char *)v153 = (char)v152;\n    int64_t v154 = v8 & 0xffffffff; // 0x402d19\n    int64_t v155 = v153 - v8; // 0x402d1c\n    uint32_t v156 = (int32_t)v8; // 0x402d1f\n    if (v156 >= 8) {\n        int64_t v157 = v155 + 8 & -8; // 0x402dac\n        *(int64_t *)v155 = *(int64_t *)v7;\n        *(int64_t *)(v154 + v155 - 8) = *(int64_t *)(v154 + v7 - 8);\n        int64_t v158 = v155 - v157; // 0x402dc3\n        uint32_t v159 = (int32_t)(v158 + v8); // 0x402dcf\n        v66 = v151;\n        v65 = 0;\n        v62 = v155;\n        if (v159 >= 8) {\n            int64_t v160 = v7 - v158; // 0x402dc6\n            int64_t v161 = 0;\n            int64_t v162 = v161 + 8; // 0x402ddf\n            *(int64_t *)(v161 + v157) = *(int64_t *)(v160 + v161);\n            v66 = v151;\n            v65 = 0;\n            v62 = v155;\n            while ((v159 & -8) > (int32_t)v162) {\n                // 0x402ddd\n                v161 = v162 & 0xffffffff;\n                v162 = v161 + 8;\n                *(int64_t *)(v161 + v157) = *(int64_t *)(v160 + v161);\n                v66 = v151;\n                v65 = 0;\n                v62 = v155;\n            }\n        }\n    } else {\n        if ((v8 & 4) != 0) {\n            // 0x402ea7\n            *(int32_t *)v155 = *(int32_t *)v7;\n            *(int32_t *)(v154 + v155 - 4) = *(int32_t *)(v154 + v7 - 4);\n            v66 = v151;\n            v65 = 0;\n            v62 = v155;\n        } else {\n            // 0x402d2f\n            v66 = v151;\n            v65 = 0;\n            v62 = v155;\n            if (v156 != 0) {\n                // 0x402d33\n                *(char *)v155 = *(char *)v7;\n                v66 = v151;\n                v65 = 0;\n                v62 = v155;\n                if ((v8 & 2) != 0) {\n                    // 0x402d53\n                    *(int16_t *)(v154 + v155 - 2) = *(int16_t *)(v154 + v7 - 2);\n                    v66 = v151;\n                    v65 = 0;\n                    v62 = v155;\n                }\n            }\n        }\n    }\n    goto lab_0x402d40;\n  lab_0x402baa:\n    // 0x402baa\n    v94 = v143;\n    v95 = v163;\n    v96 = v143 + -1 - v8;\n    goto lab_0x4027b0;\n  lab_0x402a80:;\n    int32_t * v164 = (int32_t *)(v5 + 48); // 0x402a80\n    if (*v164 == 0 == (int32_t)v113 == 1) {\n        int64_t v165 = v4 + 1; // 0x402ca4\n        *(char *)v4 = 107;\n        v166 = v165;\n        if ((int32_t)v111 == 0) {\n            // 0x402cb3\n            v4 = v165;\n            // 0x4027f8\n            *(char *)v4 = 0;\n            return result;\n        }\n    } else {\n        int64_t v167 = v4; // 0x402a96\n        char v168 = *(char *)((0x100000000 * v113 >> 32) + (int64_t)&g6); // 0x402a9a\n        int64_t v169 = v167 + 1; // 0x402aa1\n        *(char *)v167 = v168;\n        if ((int32_t)v111 == 0) {\n            // 0x402cb3\n            v4 = v169;\n            // 0x4027f8\n            *(char *)v4 = 0;\n            return result;\n        }\n        // 0x402aaf\n        v166 = v169;\n        if (*v164 != 0) {\n            // 0x402c60\n            *(char *)v169 = 105;\n            v166 = v167 + 2;\n        }\n    }\n    goto lab_0x402abd;\n  lab_0x402abd:\n    // 0x402abd\n    *(char *)v166 = 66;\n    v4 = v166 + 1;\n    // 0x4027f8\n    *(char *)v4 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ef0",
            "funcStartAddr": "402ef0",
            "funcEndAddr": "4030a7",
            "decompiledFuncCode": "int64_t function_402ef0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1; // 0x402f06\n    if (a1 == 0) {\n        char * env_val = getenv(\"BLOCK_SIZE\"); // 0x403015\n        v1 = (int64_t)env_val;\n        if (env_val == NULL) {\n            char * env_val2 = getenv(\"BLOCKSIZE\"); // 0x40302b\n            v1 = (int64_t)env_val2;\n            if (env_val2 == NULL) {\n                int64_t * v2 = (int64_t *)a3;\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x403092\n                    *v2 = 1024;\n                    *(int32_t *)a2 = 0;\n                } else {\n                    // 0x40304b\n                    *v2 = 512;\n                    *(int32_t *)a2 = 0;\n                }\n                // 0x402f4e\n                return 0;\n            }\n        }\n    }\n    char v3 = *(char *)v1; // 0x402f0e\n    int64_t v4 = function_406940(v1 + (int64_t)(v3 == 39), g5, (int64_t *)&g4, 4); // 0x402f2e\n    if ((int32_t)v4 < 0) {\n        // 0x402fdd\n        *(int32_t *)a2 = 0;\n        *(int64_t *)a3 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    // 0x402f37\n    *(int64_t *)a3 = 1;\n    int32_t v5 = *(int32_t *)((0x100000000 * v4 >> 30) + (int64_t)&g4); // 0x402f41\n    *(int32_t *)a2 = v5 | (v3 != 39 ? 0 : 4);\n    // 0x402f4e\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4030b0",
            "funcStartAddr": "4030b0",
            "funcEndAddr": "403149",
            "decompiledFuncCode": "int64_t function_4030b0(int64_t str) {\n    // 0x4030b0\n    if (str == 0) {\n        // 0x403129\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g36);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4030be\n    int64_t result = (int64_t)found_char_pos; // 0x4030be\n    if (found_char_pos == NULL) {\n        // 0x403119\n        g42 = str;\n        g35 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4030c8\n    if (v1 - str < 7) {\n        // 0x403119\n        g42 = str;\n        g35 = str;\n        return result;\n    }\n    // 0x4030d8\n    bool v2; // 0x4030b0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4030b0\n    int64_t v5 = result - 6; // 0x4030b0\n    int64_t v6 = 7; // 0x4030e6\n    unsigned char v7 = *(char *)v5; // 0x4030e6\n    char v8 = *(char *)v4; // 0x4030e6\n    char v9 = v8; // 0x4030e6\n    bool v10 = false; // 0x4030e6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4030f0\n    int64_t v13 = v1; // 0x4030f0\n    int64_t v14 = 3; // 0x4030f0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403119\n        g42 = str;\n        g35 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403102\n    char v16 = *(char *)v12; // 0x403102\n    char v17 = v16; // 0x403102\n    bool v18 = false; // 0x403102\n    while (v15 == v16) {\n        // 0x4030f2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40310c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40310e\n        v20 = result + 4;\n        g32 = v20;\n    }\n    // 0x403119\n    g42 = v20;\n    g35 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403150",
            "funcStartAddr": "403150",
            "funcEndAddr": "403242",
            "decompiledFuncCode": "int64_t function_403150(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403164\n    int64_t result = (int64_t)v1; // 0x403164\n    if (result != a1) {\n        // 0x403171\n        return result;\n    }\n    int64_t v2 = function_406d80(); // 0x403180\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403236\n    if (v3 == 85) {\n        // 0x403190\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403228\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g7;\n            return result2;\n        }\n        char v4 = *v1; // 0x4031be\n        int64_t result3 = v4 != 96 ? (int64_t)&g8 : (int64_t)&g11; // 0x4031cb\n        // 0x403171\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403228\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g7;\n        return result2;\n    }\n    char v5 = *v1; // 0x40320d\n    int64_t result4 = v5 != 96 ? (int64_t)&g9 : (int64_t)&g10; // 0x40321a\n    // 0x403171\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403250",
            "funcStartAddr": "403250",
            "funcEndAddr": "4032a7",
            "decompiledFuncCode": "int64_t function_403250(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403250\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403298\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4032a7",
            "funcStartAddr": "4032a7",
            "funcEndAddr": "404471",
            "decompiledFuncCode": "int64_t function_4032a7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4032f1\n    int64_t v3 = 0; // 0x4032f1\n    int64_t v4; // 0x4032a7\n    int64_t v5; // 0x4032a7\n    int64_t v6; // 0x4032a7\n    int64_t v7; // 0x4032a7\n    int64_t v8; // 0x4032a7\n    int64_t v9; // 0x4032a7\n    int64_t v10; // 0x4032a7\n    int64_t v11; // 0x4032a7\n    int64_t v12; // 0x4032a7\n    int64_t v13; // 0x4032a7\n    int64_t v14; // 0x4032a7\n    int64_t v15; // 0x4032a7\n    int64_t v16; // 0x4032a7\n    int64_t v17; // 0x4032a7\n    int64_t v18; // 0x4032a7\n    int64_t result; // 0x4032a7\n    int64_t v19; // 0x4032a7\n    int32_t wc; // bp+132, 0x4032a7\n    int64_t ps; // bp+136, 0x4032a7\n    char v20; // 0x403860\n    int64_t v21; // 0x403860\n    int64_t v22; // 0x403c08\n    int64_t v23; // 0x4032a7\n    int64_t v24; // 0x403c27\n    int32_t v25; // 0x4032a7\n    while (true) {\n      lab_0x4032f8_2:\n        // 0x4032f8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4032a7\n        int64_t v27; // 0x40332c\n        while (true) {\n          lab_0x4032f8:\n            // 0x4032f8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403303\n            if (v15 == -1) {\n                // 0x403305\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403313\n            if (v28) {\n                // break (via goto) -> 0x403a78\n                goto lab_0x403a78;\n            }\n            // 0x40331c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g55 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40390b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403451;\n                    }\n                    // 0x403d2d\n                    v26 = v5 + 1;\n                    goto lab_0x4032f8;\n                }\n                case 7: {\n                    goto lab_0x403451;\n                }\n                case 8: {\n                    goto lab_0x403451;\n                }\n                case 9: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403451;\n                }\n                case 12: {\n                    goto lab_0x403451;\n                }\n                case 13: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40341d;\n                }\n                case 36: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403451;\n                }\n                case 38: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403451;\n                }\n                case 44: {\n                    goto lab_0x403451;\n                }\n                case 45: {\n                    goto lab_0x403451;\n                }\n                case 46: {\n                    goto lab_0x403451;\n                }\n                case 47: {\n                    goto lab_0x403451;\n                }\n                case 48: {\n                    goto lab_0x403451;\n                }\n                case 49: {\n                    goto lab_0x403451;\n                }\n                case 50: {\n                    goto lab_0x403451;\n                }\n                case 51: {\n                    goto lab_0x403451;\n                }\n                case 52: {\n                    goto lab_0x403451;\n                }\n                case 53: {\n                    goto lab_0x403451;\n                }\n                case 54: {\n                    goto lab_0x403451;\n                }\n                case 55: {\n                    goto lab_0x403451;\n                }\n                case 56: {\n                    goto lab_0x403451;\n                }\n                case 57: {\n                    goto lab_0x403451;\n                }\n                case 58: {\n                    goto lab_0x403451;\n                }\n                case 59: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403451;\n                }\n                case 66: {\n                    goto lab_0x403451;\n                }\n                case 67: {\n                    goto lab_0x403451;\n                }\n                case 68: {\n                    goto lab_0x403451;\n                }\n                case 69: {\n                    goto lab_0x403451;\n                }\n                case 70: {\n                    goto lab_0x403451;\n                }\n                case 71: {\n                    goto lab_0x403451;\n                }\n                case 72: {\n                    goto lab_0x403451;\n                }\n                case 73: {\n                    goto lab_0x403451;\n                }\n                case 74: {\n                    goto lab_0x403451;\n                }\n                case 75: {\n                    goto lab_0x403451;\n                }\n                case 76: {\n                    goto lab_0x403451;\n                }\n                case 77: {\n                    goto lab_0x403451;\n                }\n                case 78: {\n                    goto lab_0x403451;\n                }\n                case 79: {\n                    goto lab_0x403451;\n                }\n                case 80: {\n                    goto lab_0x403451;\n                }\n                case 81: {\n                    goto lab_0x403451;\n                }\n                case 82: {\n                    goto lab_0x403451;\n                }\n                case 83: {\n                    goto lab_0x403451;\n                }\n                case 84: {\n                    goto lab_0x403451;\n                }\n                case 85: {\n                    goto lab_0x403451;\n                }\n                case 86: {\n                    goto lab_0x403451;\n                }\n                case 87: {\n                    goto lab_0x403451;\n                }\n                case 88: {\n                    goto lab_0x403451;\n                }\n                case 89: {\n                    goto lab_0x403451;\n                }\n                case 90: {\n                    goto lab_0x403451;\n                }\n                case 91: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403451;\n                }\n                case 94: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403451;\n                }\n                case 96: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403451;\n                }\n                case 98: {\n                    goto lab_0x403451;\n                }\n                case 99: {\n                    goto lab_0x403451;\n                }\n                case 100: {\n                    goto lab_0x403451;\n                }\n                case 101: {\n                    goto lab_0x403451;\n                }\n                case 102: {\n                    goto lab_0x403451;\n                }\n                case 103: {\n                    goto lab_0x403451;\n                }\n                case 104: {\n                    goto lab_0x403451;\n                }\n                case 105: {\n                    goto lab_0x403451;\n                }\n                case 106: {\n                    goto lab_0x403451;\n                }\n                case 107: {\n                    goto lab_0x403451;\n                }\n                case 108: {\n                    goto lab_0x403451;\n                }\n                case 109: {\n                    goto lab_0x403451;\n                }\n                case 110: {\n                    goto lab_0x403451;\n                }\n                case 111: {\n                    goto lab_0x403451;\n                }\n                case 112: {\n                    goto lab_0x403451;\n                }\n                case 113: {\n                    goto lab_0x403451;\n                }\n                case 114: {\n                    goto lab_0x403451;\n                }\n                case 115: {\n                    goto lab_0x403451;\n                }\n                case 116: {\n                    goto lab_0x403451;\n                }\n                case 117: {\n                    goto lab_0x403451;\n                }\n                case 118: {\n                    goto lab_0x403451;\n                }\n                case 119: {\n                    goto lab_0x403451;\n                }\n                case 120: {\n                    goto lab_0x403451;\n                }\n                case 121: {\n                    goto lab_0x403451;\n                }\n                case 122: {\n                    goto lab_0x403451;\n                }\n                case 123: {\n                    goto lab_0x4033f5;\n                }\n                case 124: {\n                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4033f5;\n                }\n                case 126: {\n                    goto lab_0x40341d;\n                }\n                default: {\n                    goto lab_0x4037f5;\n                }\n            }\n        }\n      lab_0x4037f5:\n        if (v23 != 1) {\n            // 0x403b60\n            ps = 0;\n            int64_t len = v15; // 0x403b70\n            if (v15 == -1) {\n                // 0x403b72\n                len = strlen((char *)str);\n            }\n            // 0x403b9e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403bff:\n                // 0x403bff\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403c04\n                int64_t v30 = v29 + str;\n                v24 = function_4068b0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40417a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40417a_2;\n                    }\n                    case -2: {\n                        // 0x40425d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404297\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40429a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4042a7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4042a0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40417a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40417a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403bd0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403c7c\n                        char v34 = *(char *)v33; // 0x403c8d\n                        unsigned char v35; // 0x4032a7\n                        if (v34 < 125) {\n                            // 0x403c98\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403caf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403c80\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403c8d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403c98\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403caf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403c80\n                            v33++;\n                        }\n                        goto lab_0x403bd0;\n                    }\n                }\n            }\n            goto lab_0x40417a_2;\n        } else {\n            // 0x403844\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403451;\n        }\n    }\n  lab_0x403a78:\n    // 0x403a78\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40437a\n        if (v8 > result) {\n            // 0x404383\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4036a7\n        return result;\n    }\n    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403451:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403460\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40366a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403561\n    char v40 = v20; // 0x403561\n    int64_t v41 = v38; // 0x403561\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403561\n    int64_t v43 = v36; // 0x403561\n    goto lab_0x4034dd;\n  lab_0x40366a_2:\n    // 0x4036a7\n    return function_403250(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40417a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403451;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403d4e\n        int64_t v50 = v5 + 1; // 0x403e31\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403e38\n        char v52 = v20; // 0x403e38\n        int64_t v53 = result; // 0x403e38\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403e01\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403e05\n            int64_t v56 = v54 + 1; // 0x403e0a\n            int64_t v57 = v51 + 1; // 0x403e31\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403dfc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403e01\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403e05\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4034dd;\n    }\n  lab_0x403bd0:\n    // 0x403bd0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403bef\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403bf2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40417a\n        goto lab_0x40417a_2;\n    }\n    goto lab_0x403bff;\n  lab_0x40341d:\n    // 0x40341d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40366a_2;\n    }\n    goto lab_0x403451;\n  lab_0x4033f5:;\n    bool v60 = v15 == 1; // 0x403400\n    if (v15 == -1) {\n        // 0x403402\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40340e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403451;\n    } else {\n        goto lab_0x40341d;\n    }\n  lab_0x4034dd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4034e2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4034e6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4032f8_2;\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "40461e",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404482\n    int32_t * v3 = __errno_location(); // 0x40449c\n    int64_t v4 = (int64_t)g24; // 0x4044a1\n    int32_t v5 = *v3; // 0x4044ab\n    int64_t v6 = v4; // 0x4044c1\n    if (v2 >= (int64_t)*(int32_t *)&g27) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404619\n            function_405540(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4044d0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4044d7\n        int64_t v9; // 0x404480\n        if (g24 == &g25) {\n            int64_t v10 = function_405350(0, v8); // 0x4045fa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g25); // 0x4045ff\n            *(int64_t *)&g24 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405350(v4, v8); // 0x4044eb\n            *(int64_t *)&g24 = v12;\n            v9 = v12;\n        }\n        // 0x4044fa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g27; // 0x4044fa\n        int32_t v14 = v7; // 0x404501\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g27 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404531\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40453b\n    int64_t * v17 = (int64_t *)v15; // 0x40453e\n    uint64_t v18 = *v17; // 0x40453e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404541\n    int64_t result = *v19; // 0x404541\n    int64_t v20; // 0x404480\n    uint64_t v21 = function_403250(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404564\n    if (v18 > v21) {\n        // 0x4045db\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404577\n    *v17 = v22;\n    if (result != (int64_t)&g43) {\n        // 0x404587\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4052f0(v22); // 0x4045a1\n    *v19 = result2;\n    int64_t v23; // 0x404480\n    function_403250(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4045db\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "404654",
            "decompiledFuncCode": "int64_t function_404620(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404627\n    int64_t result = function_4054f0(a1 == 0 ? (int64_t)&g44 : a1, 56); // 0x404646\n    return result;\n}\n"
        },
        {
            "funcName": "function_404660",
            "funcStartAddr": "404660",
            "funcEndAddr": "40466f",
            "decompiledFuncCode": "int64_t function_404660(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g44 : a1); // 0x40466c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404670",
            "funcStartAddr": "404670",
            "funcEndAddr": "40467f",
            "decompiledFuncCode": "int64_t function_404670(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x404678\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "4046b3",
            "decompiledFuncCode": "int64_t function_404680(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 + 8 : a1 + 8; // 0x404699\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40469e\n    uint32_t v3 = *v2; // 0x40469e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4046a2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4046c0",
            "funcStartAddr": "4046c0",
            "funcEndAddr": "4046d3",
            "decompiledFuncCode": "int64_t function_4046c0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g44 + 4 : a1 + 4); // 0x4046cc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4046e0",
            "funcStartAddr": "4046e0",
            "funcEndAddr": "40470b",
            "decompiledFuncCode": "int64_t function_4046e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x4046e8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404705\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4046fc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "404782",
            "decompiledFuncCode": "int64_t function_404710(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g44 : a5; // 0x404732\n    int32_t * v2 = __errno_location(); // 0x40473b\n    uint32_t v3 = *(int32_t *)v1; // 0x40475b\n    int64_t result = function_403250(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40476a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404790",
            "funcStartAddr": "404790",
            "funcEndAddr": "404871",
            "decompiledFuncCode": "int64_t function_404790(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g44 : a4; // 0x4047b2\n    int32_t * v2 = __errno_location(); // 0x4047b8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4047d7\n    int32_t * v4 = (int32_t *)v1; // 0x4047da\n    int64_t v5 = function_403250(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4047f5\n    int64_t v6 = v5 + 1; // 0x4047fa\n    int64_t result = function_4052f0(v6); // 0x40480f\n    function_403250(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404854\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40485d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404880",
            "funcStartAddr": "404880",
            "funcEndAddr": "40488a",
            "decompiledFuncCode": "int64_t function_404880(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404880\n    return function_404790(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404890",
            "funcStartAddr": "404890",
            "funcEndAddr": "404925",
            "decompiledFuncCode": "int64_t function_404890(void) {\n    uint32_t v1 = *(int32_t *)&g27; // 0x404890\n    int64_t v2 = v1; // 0x404890\n    int64_t v3 = v2; // 0x4048a4\n    if (v1 >= 2) {\n        int64_t v4 = &g27;\n        int64_t v5 = v4 + 16; // 0x4048c3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g56;\n        while (v5 != (int64_t)g24 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4048c0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g56;\n        }\n    }\n    int64_t v6 = v3; // 0x4048dd\n    if (g25 != 0x60b300) {\n        // 0x4048df\n        free((int64_t *)g25);\n        g25 = 256;\n        *(int64_t *)&g26 = (int64_t)&g43;\n        v6 = &g56;\n    }\n    int64_t result = v6; // 0x404901\n    if (g24 != &g25) {\n        // 0x404903\n        free(g24);\n        *(int64_t *)&g24 = (int64_t)&g25;\n        result = &g56;\n    }\n    // 0x404916\n    *(int32_t *)&g27 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "404941",
            "decompiledFuncCode": "int64_t function_404930(void) {\n    // 0x404930\n    int64_t v1; // 0x404930\n    return function_404480(v1, v1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404950",
            "funcStartAddr": "404950",
            "funcEndAddr": "40495a",
            "decompiledFuncCode": "int64_t function_404950(void) {\n    // 0x404950\n    int64_t v1; // 0x404950\n    return function_404480(v1, v1, v1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404960",
            "funcStartAddr": "404960",
            "funcEndAddr": "404976",
            "decompiledFuncCode": "int64_t function_404960(int64_t a1) {\n    // 0x404960\n    return function_404480(0, a1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_404980",
            "funcStartAddr": "404980",
            "funcEndAddr": "404992",
            "decompiledFuncCode": "int64_t function_404980(int64_t a1, int64_t a2) {\n    // 0x404980\n    return function_404480(0, a1, a2, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_4049a0",
            "funcStartAddr": "4049a0",
            "funcEndAddr": "404a08",
            "decompiledFuncCode": "int64_t function_4049a0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4049b0\n    return function_404480((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404a10",
            "funcStartAddr": "404a10",
            "funcEndAddr": "404a74",
            "decompiledFuncCode": "int64_t function_404a10(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404a20\n    return function_404480((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404a80",
            "funcStartAddr": "404a80",
            "funcEndAddr": "404a8c",
            "decompiledFuncCode": "int64_t function_404a80(int64_t a1, int64_t a2) {\n    // 0x404a80\n    return function_4049a0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404a9f",
            "decompiledFuncCode": "int64_t function_404a90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404a90\n    return function_404a10(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404aa0",
            "funcStartAddr": "404aa0",
            "funcEndAddr": "404b10",
            "decompiledFuncCode": "int64_t function_404aa0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x404aad\n    int128_t v2 = __asm_movdqa(g45); // 0x404ab5\n    int128_t v3 = __asm_movdqa(g46); // 0x404abd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404ad2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404ae8\n    uint32_t v6 = *v5; // 0x404ae8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404aed\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404480(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b1d",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, int64_t a2) {\n    // 0x404b10\n    return function_404aa0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404b20",
            "funcStartAddr": "404b20",
            "funcEndAddr": "404b31",
            "decompiledFuncCode": "int64_t function_404b20(int64_t a1) {\n    // 0x404b20\n    return function_404aa0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404b40",
            "funcStartAddr": "404b40",
            "funcEndAddr": "404b4a",
            "decompiledFuncCode": "int64_t function_404b40(void) {\n    // 0x404b40\n    int64_t v1; // 0x404b40\n    return function_404aa0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404b50",
            "funcStartAddr": "404b50",
            "funcEndAddr": "404bbe",
            "decompiledFuncCode": "int64_t function_404b50(int32_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404b6a\n    return function_404480((int64_t)a1, (int64_t)a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404bc0",
            "funcStartAddr": "404bc0",
            "funcEndAddr": "404c2c",
            "decompiledFuncCode": "int64_t function_404bc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x404bc7\n    int128_t v2 = __asm_movdqa(g45); // 0x404bcf\n    int128_t v3 = __asm_movdqa(g46); // 0x404bd7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404bf9\n    if (a2 == 0 || a3 == 0) {\n        // 0x404c27\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404c0a\n    return function_404480(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404c30",
            "funcStartAddr": "404c30",
            "funcEndAddr": "404c39",
            "decompiledFuncCode": "int64_t function_404c30(void) {\n    // 0x404c30\n    int64_t v1; // 0x404c30\n    return function_404bc0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c57",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404c40\n    return function_404bc0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404c60",
            "funcStartAddr": "404c60",
            "funcEndAddr": "404c73",
            "decompiledFuncCode": "int64_t function_404c60(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404c60\n    return function_404bc0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404c80",
            "funcStartAddr": "404c80",
            "funcEndAddr": "404c8a",
            "decompiledFuncCode": "int64_t function_404c80(void) {\n    // 0x404c80\n    int64_t v1; // 0x404c80\n    return function_404480(v1, v1, v1, &g23);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404ca2",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1, int64_t a2) {\n    // 0x404c90\n    return function_404480(0, a1, a2, &g23);\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cc1",
            "decompiledFuncCode": "int64_t function_404cb0(int64_t a1, int64_t a2) {\n    // 0x404cb0\n    return function_404480(a1, a2, -1, &g23);\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404ce6",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1) {\n    // 0x404cd0\n    return function_404480(0, a1, -1, &g23);\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d4e",
            "decompiledFuncCode": "int64_t function_404cf0(int64_t fd, int64_t * buf, int64_t nbyte) {\n    int32_t result = read((int32_t)fd, buf, (int32_t)nbyte); // 0x404d11\n    while (result < 0) {\n        // 0x404d1e\n        if (*__errno_location() != 4) {\n            // break -> 0x404d2a\n            break;\n        }\n        result = read((int32_t)fd, buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "40512d",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404de8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404d6c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404d86\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404dcb\n    if (a6 < 10) {\n        // 0x404dda\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404ed2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "405150",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405130\n    if (a5 == 0) {\n        // 0x40514b\n        return function_404d50(a1, a2, a3, a4, a5, 0, (int64_t)&g56);\n    }\n    int64_t v1 = 0; // 0x405137\n    v1++;\n    int64_t v2 = v1; // 0x405149\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405140\n        v1++;\n        v2 = v1;\n    }\n    // 0x40514b\n    return function_404d50(a1, a2, a3, a4, a5, v2, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "4051b0",
            "decompiledFuncCode": "int64_t function_405150(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405150\n    int64_t v3 = &v2; // 0x405150\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405183\n    int64_t v6; // 0x40516d\n    int64_t * v7; // 0x40518b\n    int64_t v8; // 0x40518b\n    int64_t v9; // 0x405197\n    if (v5 < 48) {\n        // 0x405160\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4051a3\n            break;\n        }\n    } else {\n        // 0x40518b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4051a3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405181\n    while (v4 != 9) {\n        // 0x405179\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405160\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4051a3\n                break;\n            }\n        } else {\n            // 0x40518b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4051a3\n                break;\n            }\n        }\n        // 0x405179\n        v10 = 10;\n    }\n    // 0x4051a3\n    return function_404d50(a1, a2, a3, a4, v3, v10, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "40526c",
            "decompiledFuncCode": "int64_t function_4051b0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4051b0\n    int64_t v1; // bp-168, 0x4051b0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4051b0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4051b0\n    int64_t v8; // 0x4051b0\n    int64_t v9; // bp-56, 0x4051b0\n    int64_t v10; // 0x405215\n    int64_t v11; // 0x405239\n    if ((int32_t)v6 < 48) {\n        // 0x405200\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405250\n            break;\n        }\n    } else {\n        // 0x405232\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405250\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40522a\n    int64_t v13 = 10; // 0x40522a\n    while (v5 != 9) {\n        // 0x40522c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405200\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405250\n                break;\n            }\n        } else {\n            // 0x405232\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405250\n                break;\n            }\n        }\n        // 0x405222\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405250\n    int64_t v14; // bp-136, 0x4051b0\n    int64_t result = function_404d50(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g56); // 0x40525f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405270",
            "funcStartAddr": "405270",
            "funcEndAddr": "4052e4",
            "decompiledFuncCode": "int64_t function_405270(int64_t a1) {\n    // 0x405270\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4052d3\n    return fputs_unlocked(v1, g33);\n}\n"
        },
        {
            "funcName": "function_4052f0",
            "funcStartAddr": "4052f0",
            "funcEndAddr": "40530a",
            "decompiledFuncCode": "int64_t function_4052f0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4052f4\n    if (size != 0 != (mem == NULL)) {\n        // 0x405303\n        return (int64_t)mem;\n    }\n    // 0x405305\n    function_405540(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405310",
            "funcStartAddr": "405310",
            "funcEndAddr": "405331",
            "decompiledFuncCode": "int64_t function_405310(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405313\n    int64_t v2 = v1; // 0x405313\n    if (v2 < 0) {\n        // 0x40532b\n        function_405540(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405329\n        return function_4052f0(v2);\n    }\n    // 0x40532b\n    function_405540(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "405342",
            "decompiledFuncCode": "int64_t function_405340(void) {\n    // 0x405340\n    int64_t v1; // 0x405340\n    return function_4052f0(v1);\n}\n"
        },
        {
            "funcName": "function_405350",
            "funcStartAddr": "405350",
            "funcEndAddr": "405386",
            "decompiledFuncCode": "int64_t function_405350(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405378\n        free(v1);\n        return (int32_t)&g56 ^ (int32_t)&g56;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405361\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405370\n        return (int64_t)mem;\n    }\n    // 0x405381\n    function_405540(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "4053b1",
            "decompiledFuncCode": "int64_t function_405390(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405393\n    int64_t v2 = v1; // 0x405393\n    if (v2 < 0) {\n        // 0x4053ab\n        function_405540(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4053a9\n        return function_405350(a1, v2);\n    }\n    // 0x4053ab\n    function_405540(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4053c0",
            "funcStartAddr": "4053c0",
            "funcEndAddr": "405446",
            "decompiledFuncCode": "int64_t function_4053c0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40541b\n            function_405540(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405350(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405403\n    if (a2 == 0) {\n        // 0x405428\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405408\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40541b\n        function_405540(a1);\n        // UNREACHABLE\n    }\n    // 0x4053ea\n    *(int64_t *)a2 = v2;\n    return function_405350(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405450",
            "funcStartAddr": "405450",
            "funcEndAddr": "4054a0",
            "decompiledFuncCode": "int64_t function_405450(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405450\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40549a\n            function_405540(a1);\n            // UNREACHABLE\n        }\n        // 0x405472\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405350(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405485\n        *(int64_t *)a2 = 128;\n        return function_405350(0, 128);\n    }\n    // 0x405498\n    if (a2 < 0) {\n        // 0x40549a\n        function_405540(a1);\n        // UNREACHABLE\n    }\n    // 0x405472\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405350(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4054a0",
            "funcStartAddr": "4054a0",
            "funcEndAddr": "4054b7",
            "decompiledFuncCode": "int64_t function_4054a0(int64_t a1, int64_t a2) {\n    // 0x4054a0\n    return (int64_t)memset((int64_t *)function_4052f0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "4054ee",
            "decompiledFuncCode": "int64_t function_4054c0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4054c7\n    if ((int64_t)v1 < 0) {\n        // 0x4054e9\n        function_405540(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4054e9\n        function_405540(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4054da\n    if (mem != NULL) {\n        // 0x4054e4\n        return (int64_t)mem;\n    }\n    // 0x4054e9\n    function_405540(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4054f0",
            "funcStartAddr": "4054f0",
            "funcEndAddr": "405518",
            "decompiledFuncCode": "int64_t function_4054f0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4052f0(a2); // 0x4054ff\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "405533",
            "decompiledFuncCode": "int64_t function_405520(int64_t str) {\n    // 0x405520\n    return function_4054f0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "405571",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1) {\n    // 0x405540\n    error(g22, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "4059c0",
            "decompiledFuncCode": "int64_t function_405580(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x40558e\n    if (v1 >= 37) {\n        // 0x40599b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g56;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x4055b2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x4055e2\n    int64_t v4 = a1; // 0x4055e7\n    char v5 = c; // 0x4055e7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x4055dc\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x4055d8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x4055e9\n    if (v5 == 45) {\n        // 0x405625\n        return 4;\n    }\n    // 0x4055ee\n    int64_t v7; // bp-64, 0x405580\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : a2; // 0x4055ae\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x4055f6\n    int64_t * v10 = (int64_t *)v8; // 0x4055fb\n    int64_t v11 = *v10; // 0x4055fb\n    char v12; // 0x405580\n    int64_t v13; // 0x405580\n    int64_t v14; // 0x405580\n    int64_t v15; // 0x405580\n    int64_t v16; // 0x405580\n    int64_t v17; // 0x405580\n    int64_t v18; // 0x405580\n    if (v11 == a1) {\n        // 0x405658\n        if (c == 0 || str == 0) {\n            // 0x405625\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x405679\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x405625\n            return 4;\n        }\n        goto lab_0x405687;\n    } else {\n        int32_t v19 = *v2; // 0x405606\n        int64_t v20 = 0; // 0x40560c\n        if (v19 != 0) {\n            // 0x405640\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x405625\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x4055f6\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x405622;\n        } else {\n            char c2 = *(char *)v11; // 0x405615\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x405783\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x405687;\n                } else {\n                    goto lab_0x405795;\n                }\n            } else {\n                goto lab_0x405622;\n            }\n        }\n    }\n  lab_0x405687:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x40568f\n    int64_t v24 = 1; // 0x40568f\n    int64_t v25; // 0x405580\n    int64_t v26; // 0x405580\n    int64_t v27; // 0x405580\n    int64_t v28; // 0x405580\n    int64_t v29; // 0x405580\n    int64_t v30; // 0x405580\n    int64_t v31; // 0x405580\n    int64_t v32; // 0x405580\n    int64_t v33; // 0x405580\n    int64_t v34; // 0x405580\n    int64_t v35; // 0x405580\n    int64_t v36; // 0x405580\n    int64_t v37; // 0x405580\n    int64_t v38; // 0x405580\n    int64_t v39; // 0x405580\n    int64_t v40; // 0x405580\n    int64_t v41; // 0x405580\n    int64_t v42; // 0x405580\n    int64_t v43; // 0x405580\n    int64_t v44; // 0x405580\n    if (v22 < 48) {\n        // 0x405691\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4056fa;\n        } else {\n            // 0x4056a4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x4056fa;\n            } else {\n                // 0x4056c0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x4056fa;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x405929\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x4056fa;\n                    }\n                    default: {\n                        // 0x4056d5\n                        g53 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x40589b;\n                            }\n                            case 70: {\n                                goto lab_0x405795;\n                            }\n                            case 71: {\n                                goto lab_0x4058d3;\n                            }\n                            case 72: {\n                                goto lab_0x405795;\n                            }\n                            case 73: {\n                                goto lab_0x405795;\n                            }\n                            case 74: {\n                                goto lab_0x405795;\n                            }\n                            case 75: {\n                                goto lab_0x40575c;\n                            }\n                            case 76: {\n                                goto lab_0x405795;\n                            }\n                            case 77: {\n                                goto lab_0x40571e;\n                            }\n                            case 78: {\n                                goto lab_0x405795;\n                            }\n                            case 79: {\n                                goto lab_0x405795;\n                            }\n                            case 80: {\n                                goto lab_0x405868;\n                            }\n                            case 81: {\n                                goto lab_0x405795;\n                            }\n                            case 82: {\n                                goto lab_0x405795;\n                            }\n                            case 83: {\n                                goto lab_0x405795;\n                            }\n                            case 84: {\n                                goto lab_0x405838;\n                            }\n                            case 85: {\n                                goto lab_0x405795;\n                            }\n                            case 86: {\n                                goto lab_0x405795;\n                            }\n                            case 87: {\n                                goto lab_0x405795;\n                            }\n                            case 88: {\n                                goto lab_0x405795;\n                            }\n                            case 89: {\n                                goto lab_0x405806;\n                            }\n                            case 90: {\n                                goto lab_0x4057cb;\n                            }\n                            case 91: {\n                                goto lab_0x405795;\n                            }\n                            case 92: {\n                                goto lab_0x405795;\n                            }\n                            case 93: {\n                                goto lab_0x405795;\n                            }\n                            case 94: {\n                                goto lab_0x405795;\n                            }\n                            case 95: {\n                                goto lab_0x405795;\n                            }\n                            case 96: {\n                                goto lab_0x405795;\n                            }\n                            case 97: {\n                                goto lab_0x405795;\n                            }\n                            case 98: {\n                                goto lab_0x4057af;\n                            }\n                            case 99: {\n                                goto lab_0x405738;\n                            }\n                            case 100: {\n                                goto lab_0x405795;\n                            }\n                            case 101: {\n                                goto lab_0x405795;\n                            }\n                            case 102: {\n                                goto lab_0x405795;\n                            }\n                            case 103: {\n                                goto lab_0x4058d3;\n                            }\n                            case 104: {\n                                goto lab_0x405795;\n                            }\n                            case 105: {\n                                goto lab_0x405795;\n                            }\n                            case 106: {\n                                goto lab_0x405795;\n                            }\n                            case 107: {\n                                goto lab_0x40575c;\n                            }\n                            case 108: {\n                                goto lab_0x405795;\n                            }\n                            case 109: {\n                                goto lab_0x40571e;\n                            }\n                            case 110: {\n                                goto lab_0x405795;\n                            }\n                            case 111: {\n                                goto lab_0x405795;\n                            }\n                            case 112: {\n                                goto lab_0x405795;\n                            }\n                            case 113: {\n                                goto lab_0x405795;\n                            }\n                            case 114: {\n                                goto lab_0x405795;\n                            }\n                            case 115: {\n                                goto lab_0x405795;\n                            }\n                            case 116: {\n                                goto lab_0x405838;\n                            }\n                            default: {\n                                goto lab_0x4056fa;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4056fa;\n    }\n  lab_0x405622:\n    // 0x405622\n    *(int64_t *)a4 = v16;\n    // 0x405625\n    return v13 & 0xffffffff;\n  lab_0x4056fa:\n    // 0x4056fa\n    g54 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x405580\n    switch (v12) {\n        case 66: {\n            // 0x4058f4\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x405767;\n            } else {\n                // 0x405901\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405738;\n            }\n        }\n        case 69: {\n            goto lab_0x40589b;\n        }\n        case 71: {\n            goto lab_0x4058d3;\n        }\n        case 75: {\n            goto lab_0x40575c;\n        }\n        case 77: {\n            goto lab_0x40571e;\n        }\n        case 80: {\n            goto lab_0x405868;\n        }\n        case 84: {\n            goto lab_0x405838;\n        }\n        case 89: {\n            goto lab_0x405806;\n        }\n        case 90: {\n            goto lab_0x4057cb;\n        }\n        case 98: {\n            goto lab_0x4057af;\n        }\n        case 99: {\n            goto lab_0x405738;\n        }\n        case 103: {\n            goto lab_0x4058d3;\n        }\n        case 107: {\n            goto lab_0x40575c;\n        }\n        case 109: {\n            goto lab_0x40571e;\n        }\n        case 116: {\n            goto lab_0x405838;\n        }\n        case 119: {\n            // 0x4057a0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x405767;\n            } else {\n                // 0x4057a5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405738;\n            }\n        }\n        default: {\n            goto lab_0x405795;\n        }\n    }\n  lab_0x40589b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x4058b3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x4058bf\n    int64_t v51 = v48; // 0x4058c2\n    int64_t v52 = v37; // 0x4058c2\n    int64_t v53 = v49; // 0x4058c2\n    int32_t v54 = v50; // 0x4058c2\n    int64_t v55 = v49; // 0x4058c2\n    while (v50 != 0) {\n        // 0x4058b0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x4057f4;\n  lab_0x4058d3:\n    // 0x4058d3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x4058de\n        int128_t v56; // 0x4058d9\n        uint128_t v57; // 0x4058d9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x4058de\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x405580\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x4058e3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x4058e8\n                v26 = v60;\n                int64_t v61; // 0x405580\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x405738;\n  lab_0x40575c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40575f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x405738;\n    } else {\n        goto lab_0x405767;\n    }\n  lab_0x40571e:;\n    int128_t v65 = v27; // 0x405724\n    uint128_t v66 = v65 * (int128_t)v17; // 0x405724\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x405767;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x405729\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x405767;\n        } else {\n            // 0x40572e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x405738;\n        }\n    }\n  lab_0x405868:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x40587b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x405887\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x40588a\n    int64_t v73 = v70; // 0x40588a\n    while (v71 != 0) {\n        // 0x405878\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x4057f4;\n  lab_0x405838:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40584b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x405857\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40585a\n    int64_t v79 = v76; // 0x40585a\n    while (v77 != 0) {\n        // 0x405848\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x4057f4;\n  lab_0x405806:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x40581b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x405827\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x40582a\n    int64_t v85 = v82; // 0x40582a\n    while (v83 != 0) {\n        // 0x405818\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x4057f4;\n  lab_0x4057cb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x4057e3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x4057ef\n    int32_t v90 = v89; // 0x4057f2\n    int64_t v91 = v88; // 0x4057f2\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x4057e0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x4057f4;\n  lab_0x4057af:\n    // 0x4057af\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x405767;\n    } else {\n        // 0x4057b8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x405738;\n    }\n  lab_0x405738:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40573d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x405622;\n  lab_0x405795:\n    // 0x405795\n    *(int64_t *)a4 = v18;\n    // 0x405625\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x405767:\n    // 0x405767\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x405738;\n  lab_0x4057f4:\n    // 0x4057f4\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x405738;\n}\n"
        },
        {
            "funcName": "function_4059c0",
            "funcStartAddr": "4059c0",
            "funcEndAddr": "405a3b",
            "decompiledFuncCode": "int64_t function_4059c0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4059c7\n    if (fileno(stream) < 0) {\n        // 0x405a27\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4059da\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405a0b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405a27\n            return fclose(stream);\n        }\n    }\n    // 0x4059dc\n    if ((int32_t)function_405a40(a1, v1) == 0) {\n        // 0x405a27\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4059e8\n    int32_t v3 = *v2; // 0x4059f0\n    int64_t result = fclose(stream); // 0x4059fe\n    if (v3 != 0) {\n        // 0x405a30\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405a00\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405a80",
            "decompiledFuncCode": "int64_t function_405a40(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405a5a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405a5a\n        return fflush(stream);\n    }\n    // 0x405a68\n    function_405a80(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405a80",
            "funcStartAddr": "405a80",
            "funcEndAddr": "405ad7",
            "decompiledFuncCode": "int64_t function_405a80(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405a80\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405a8a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405abb\n    int64_t result = -1; // 0x405ac4\n    if (v1 != -1) {\n        // 0x405ac6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405ad2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ae0",
            "funcStartAddr": "405ae0",
            "funcEndAddr": "405bbf",
            "decompiledFuncCode": "int64_t function_405ae0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x405aec\n    uint32_t v2 = *v1; // 0x405aec\n    int64_t v3 = a2 & 0xffffffff; // 0x405af1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405af4\n    uint64_t v5 = (int64_t)*v4; // 0x405af4\n    int64_t v6; // 0x405b62\n    if (v3 <= v5) {\n      lab_0x405b5c_2:\n        // 0x405b5c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405ae2\n    int64_t v8 = v2; // 0x405ae0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x405b5c\n        goto lab_0x405b5c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405b18\n    int64_t v17; // 0x405b26\n    int64_t * v18; // 0x405b40\n    int64_t * v19; // 0x405b43\n    int64_t v20; // 0x405b4e\n    int64_t v21; // 0x405b26\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405b23\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405b40\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405b57\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x405b5c\n            goto lab_0x405b5c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405b5c\n            goto lab_0x405b5c_2;\n        }\n        // 0x405b12\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x405b9b\n    int64_t * v23 = (int64_t *)v22; // 0x405ba0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405ba3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405ba0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405bb7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x405b0d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405b5c\n            goto lab_0x405b5c_2;\n        }\n        // 0x405b12\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405b23\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405b40\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405b57\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x405b5c\n                goto lab_0x405b5c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x405b5c\n                goto lab_0x405b5c_2;\n            }\n            // 0x405b12\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405b80\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405ba0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405bb7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x405b5c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405bc0",
            "funcStartAddr": "405bc0",
            "funcEndAddr": "4061dc",
            "decompiledFuncCode": "int64_t function_405bc0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x405bdf\n    int64_t v2 = *v1; // 0x405bdf\n    char * str2 = (char *)v2; // 0x405bec\n    char c = *str2; // 0x405bec\n    int64_t v3 = v2; // 0x405c18\n    int64_t v4 = 0; // 0x405bc0\n    int32_t v5; // 0x405bc0\n    int64_t v6; // 0x405bc0\n    int64_t v7; // 0x405bc0\n    int64_t v8; // 0x405bc0\n    int64_t v9; // 0x405bc0\n    int64_t v10; // 0x405bc0\n    int64_t v11; // 0x405bc0\n    int64_t v12; // 0x405bc0\n    int64_t v13; // 0x405bc0\n    int64_t str3; // 0x405bc0\n    int64_t v14; // 0x405bc0\n    int64_t v15; // 0x405bc0\n    int64_t v16; // 0x405bc0\n    int64_t v17; // 0x405bc0\n    int32_t v18; // 0x405bc0\n    int32_t v19; // 0x405bc0\n    int32_t v20; // 0x405bc0\n    int32_t v21; // 0x405bc0\n    int32_t v22; // 0x405bc0\n    int32_t v23; // 0x405bc0\n    int32_t v24; // 0x405bc0\n    int32_t v25; // 0x405bc0\n    int32_t v26; // 0x405bc0\n    int32_t v27; // 0x405bc0\n    int32_t v28; // 0x405bc0\n    int32_t v29; // 0x405bc0\n    int64_t nmemb; // 0x405bc0\n    int64_t v30; // 0x405bc0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x405c1c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405c18\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405c28\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x405c2e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405bf8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x405c5c\n                int64_t v34; // 0x405bc0\n                int64_t v35; // 0x405bc0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405c65\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405de0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405c76\n                int64_t v37 = *(int64_t *)v36; // 0x405c7a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405c50\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405c65\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405de0;\n                        }\n                    }\n                    // 0x405c76\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405cc6:\n                    // 0x405cc6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405d20;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405e90\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405d20;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405e40\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x405cea;\n                                } else {\n                                    // 0x405e4c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x405cea;\n                                    } else {\n                                        // 0x405e5a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x405cea;\n                                        } else {\n                                            goto lab_0x405d20;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x405cea;\n                            }\n                        }\n                    }\n                }\n              lab_0x405d31:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405f06\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4060b2\n                            flockfile(g36);\n                            int64_t v41 = *v1; // 0x4060d2\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40611f\n                            int64_t v43 = (int64_t)g36;\n                            int64_t v44 = v43; // 0x406139\n                            int64_t v45; // 0x40613b\n                            if (*(char *)v42 != 0) {\n                                // 0x40613b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g36;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406133\n                            while (v17 + nmemb != v42) {\n                                // 0x406135\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40613b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g36;\n                                }\n                                // 0x406128\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406160\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g36);\n                            v40 = *v1;\n                        } else {\n                            // 0x405f14\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40606f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405f69\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405f80\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405e2e\n                    return 63;\n                }\n                // 0x405d50\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405dd4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405de0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405df0\n                    uint32_t v50 = *v49; // 0x405df0\n                    int64_t v51 = v50; // 0x405df0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405dfa\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405e03\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40602f\n                                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405fda\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405e2e\n                            return 63;\n                        }\n                        // 0x405e78\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40618f\n                                    __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40608d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4060a0\n                                // 0x405e2e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405f9e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405fb2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405e1b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405e1e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405e22\n                    int64_t result = v59; // 0x405e28\n                    if (v58 != 0) {\n                        // 0x405e2a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405e2e\n                    return result;\n                }\n            } else {\n                // 0x405c2e\n                v5 = v32;\n            }\n            // break -> 0x405d55\n            break;\n        }\n    }\n    // 0x405d55\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405d6d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405d77\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405e2e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405eb9\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405da6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405db6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405d20:\n    // 0x405d20\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405d20\n    int64_t v63 = *(int64_t *)v62; // 0x405d24\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405d31\n        goto lab_0x405d31;\n    }\n    goto lab_0x405cc6;\n  lab_0x405cea:\n    // 0x405cea\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405bc0\n    int32_t v65; // 0x405bc0\n    int32_t v66; // 0x405bc0\n    if (v27 != 0) {\n        goto lab_0x405d20;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405ea0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405d20;\n            } else {\n                goto lab_0x405d11;\n            }\n        } else {\n            // 0x405d05\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405ffc\n                int64_t v67 = (int64_t)mem; // 0x405ffc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405d20;\n                } else {\n                    // 0x40600f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405d11;\n                }\n            } else {\n                goto lab_0x405d11;\n            }\n        }\n    }\n  lab_0x405d11:\n    // 0x405d11\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405d20;\n}\n"
        },
        {
            "funcName": "function_4061e0",
            "funcStartAddr": "4061e0",
            "funcEndAddr": "4067a6",
            "decompiledFuncCode": "int64_t function_4061e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406201\n    if (v3 < 1) {\n        // 0x4063be\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4061fd\n    int32_t v5 = *(int32_t *)a7; // 0x406209\n    uint64_t v6 = a1 & 0xffffffff; // 0x40620b\n    int64_t v7 = v2; // 0x406210\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406213\n    *v8 = 0;\n    int64_t v9; // 0x4061e0\n    int64_t v10; // 0x4061e0\n    int64_t v11; // 0x4061e0\n    int64_t v12; // 0x4061e0\n    int64_t str; // 0x4061e0\n    int64_t v13; // 0x4061e0\n    int64_t v14; // 0x4061e0\n    int64_t v15; // 0x4061e0\n    int64_t v16; // 0x4061e0\n    int64_t v17; // 0x4061e0\n    int32_t v18; // 0x4061e0\n    char v19; // 0x4061e0\n    if (v5 == 0) {\n        // 0x4063f8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40622a;\n    } else {\n        // 0x406223\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406270\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406273\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406338;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406286\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406296\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40634c;\n                } else {\n                    goto lab_0x4062a8;\n                }\n            }\n        } else {\n            goto lab_0x40622a;\n        }\n    }\n  lab_0x40622a:\n    // 0x40622a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406230\n    *v24 = 0;\n    int64_t v25; // 0x4061e0\n    int64_t v26; // 0x4061e0\n    int64_t v27; // 0x4061e0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406320\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40632d;\n        }\n        case 43: {\n            // 0x406630\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40632d;\n        }\n        default: {\n            // 0x40624c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4065af\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4066c8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40632d;\n                } else {\n                    // 0x4065bd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40625a;\n                }\n            } else {\n                goto lab_0x40625a;\n            }\n        }\n    }\n  lab_0x406338:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40633f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4062a8;\n    } else {\n        goto lab_0x40634c;\n    }\n  lab_0x40625a:\n    // 0x40625a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40632d;\n  lab_0x40632d:\n    // 0x40632d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406338;\n  lab_0x4062a8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4062a8\n    int64_t v31 = v30; // 0x4062a8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4062aa\n    if ((int64_t)*v32 > v31) {\n        // 0x4062af\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4062b2\n    if (*v33 > v30) {\n        // 0x4062b7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4062ba\n    int64_t v35 = v31; // 0x4062be\n    int64_t v36 = v15; // 0x4062be\n    int64_t v37; // 0x4061e0\n    int64_t v38; // 0x4061e0\n    int64_t v39; // 0x4061e0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406428\n        int64_t v41 = v40; // 0x406428\n        v2 = v41;\n        int64_t v42; // 0x4061e0\n        if (*v33 == v40) {\n            // 0x406610\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406618\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406434\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406438\n                function_405ae0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406448\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406451\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40645a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406471\n            int64_t v47 = v45 & 0xffffffff; // 0x406475\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40647e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406484\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406486;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406460\n            int64_t v49 = v48 & 0xffffffff; // 0x406460\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406471\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40647e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406484\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406486;\n                    }\n                }\n                // 0x406460\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406628\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406486;\n    } else {\n        goto lab_0x4062c4;\n    }\n  lab_0x40634c:\n    // 0x40634c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40634f\n    int64_t v51 = v12; // 0x40634f\n    int64_t v52 = v14; // 0x40634f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4062a8;\n    } else {\n        goto lab_0x406355;\n    }\n  lab_0x4062c4:;\n    int32_t v53 = v35; // 0x4062c4\n    int64_t v54; // 0x4061e0\n    int64_t v55; // 0x4061e0\n    int64_t v56; // 0x4061e0\n    int64_t v57; // 0x4061e0\n    int64_t v58; // 0x4061e0\n    int64_t v59; // 0x4061e0\n    char * v60; // 0x4061e0\n    int64_t v61; // 0x4061e0\n    int64_t v62; // 0x4062d9\n    int64_t v63; // 0x4061e0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406413\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406416;\n    } else {\n        // 0x4062cc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4061e0\n        int64_t v66 = v65 ? -1 : 1; // 0x4062e0\n        int64_t v67 = (int64_t)\"--\"; // 0x4061e0\n        int64_t v68 = v62; // 0x4061e0\n        int64_t v69 = 3; // 0x4062e0\n        unsigned char v70 = *(char *)v68; // 0x4062e0\n        char v71 = *(char *)v67; // 0x4062e0\n        char v72 = v71; // 0x4062e0\n        bool v73 = false; // 0x4062e0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4063d0\n            if (*(char *)v62 == 45) {\n                // 0x406490\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406490\n                if (c == 0) {\n                    goto lab_0x4063da;\n                } else {\n                    // 0x40649d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406520;\n                    } else {\n                        if (c == 45) {\n                            // 0x406703\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406575;\n                        } else {\n                            // 0x4064ae\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406520;\n                            } else {\n                                // 0x4064b3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4064d4;\n                                } else {\n                                    // 0x4064ba\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406520;\n                                    } else {\n                                        goto lab_0x4064d4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4063da;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4062f0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4062f3\n            int64_t v77 = v35 + 1; // 0x4062f6\n            int32_t v78 = v77; // 0x4062f9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406660\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406307\n                    function_405ae0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406315\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406416;\n        }\n    }\n  lab_0x406355:;\n    // 0x406355\n    int64_t v79; // bp-104, 0x4061e0\n    int64_t v80 = &v79; // 0x4061ea\n    int64_t v81 = v50 + 1; // 0x406355\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40635c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406361\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406365\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406369\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406371\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406376\n    int32_t c2 = v84; // 0x406376\n    char * found_char_pos = strchr(str2, c2); // 0x406376\n    int64_t v87 = *v82; // 0x40637b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406385\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406390\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406680\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40664d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4063be\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406376\n    char v91 = *(char *)(v90 + 1); // 0x4063ab\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406365\n        if (v91 != 58) {\n            // 0x4063be\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4065d4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4066d8\n                *v8 = 0;\n            } else {\n                // 0x4066bc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4065fe\n            *v83 = 0;\n            // 0x4063be\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4065de\n        if (v93 != 0) {\n            // 0x406670\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4065fe\n            *v83 = 0;\n            // 0x4063be\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4065f1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4065fe\n            *v83 = 0;\n            // 0x4063be\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40673a\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4066ea\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4066f1\n        // 0x4065fe\n        *v83 = 0;\n        // 0x4063be\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406549\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40654b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406770\n                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406721\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406728\n            // 0x4063be\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406556\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40655a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406575;\n  lab_0x406486:\n    // 0x406486\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4062c4;\n  lab_0x406575:;\n    int64_t v99 = function_405bc0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406593\n    // 0x4063be\n    return v99 & 0xffffffff;\n  lab_0x406416:;\n    int32_t v100 = v55; // 0x406416\n    if (v100 != (int32_t)v59) {\n        // 0x40641a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4063be\n    return 0xffffffff;\n  lab_0x4063da:\n    // 0x4063da\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4063e1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4063be\n    return v99 & 0xffffffff;\n  lab_0x406520:\n    // 0x406520\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406355;\n  lab_0x4064d4:\n    // 0x4064d4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405bc0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g13); // 0x4064fa\n    if ((int32_t)v101 != -1) {\n        // 0x4063be\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40650f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406520;\n}\n"
        },
        {
            "funcName": "function_4067b0",
            "funcStartAddr": "4067b0",
            "funcEndAddr": "406806",
            "decompiledFuncCode": "int64_t function_4067b0(int64_t a1) {\n    // 0x4067b0\n    *(int32_t *)&g47 = g30;\n    *(int32_t *)&g48 = g29;\n    int64_t v1; // 0x4067b0\n    int64_t result = function_4061e0(v1, v1, v1, v1, v1, v1, &g47, a1 & 0xffffffff); // 0x4067d6\n    g30 = *(int32_t *)&g47;\n    g52 = g50;\n    *(int32_t *)&g28 = g49;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406810",
            "funcStartAddr": "406810",
            "funcEndAddr": "406828",
            "decompiledFuncCode": "int64_t function_406810(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406810\n    return function_4067b0(1);\n}\n"
        },
        {
            "funcName": "function_406830",
            "funcStartAddr": "406830",
            "funcEndAddr": "406843",
            "decompiledFuncCode": "int64_t function_406830(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x406830\n    return function_4067b0(0);\n}\n"
        },
        {
            "funcName": "function_406850",
            "funcStartAddr": "406850",
            "funcEndAddr": "406865",
            "decompiledFuncCode": "int64_t function_406850(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406850\n    return function_4061e0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406870",
            "funcStartAddr": "406870",
            "funcEndAddr": "406886",
            "decompiledFuncCode": "int64_t function_406870(void) {\n    // 0x406870\n    return function_4067b0(0);\n}\n"
        },
        {
            "funcName": "function_406890",
            "funcStartAddr": "406890",
            "funcEndAddr": "4068a8",
            "decompiledFuncCode": "int64_t function_406890(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406890\n    return function_4061e0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4068b0",
            "funcStartAddr": "4068b0",
            "funcEndAddr": "40692a",
            "decompiledFuncCode": "int64_t function_4068b0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4068bb\n    int64_t v2 = (int64_t)&g14; // 0x4068bb\n    int32_t * pwc; // 0x4068b0\n    int64_t v3; // 0x4068b0\n    int64_t n; // 0x4068b0\n    if (a2 == 0) {\n        goto lab_0x406902;\n    } else {\n        // 0x4068bd\n        if (a3 == 0) {\n            // 0x4068e8\n            return -2;\n        }\n        // 0x4068c9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406902;\n        } else {\n            goto lab_0x4068d4;\n        }\n    }\n  lab_0x406902:\n    // 0x406902\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4068b0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4068d4;\n  lab_0x4068d4:;\n    char * wstr = (char *)v3; // 0x4068da\n    int64_t ps; // 0x4068b0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4068da\n    int64_t result = v5; // 0x4068da\n    if (v5 < 0xfffffffe) {\n        // 0x4068e8\n        return result;\n    }\n    int64_t result2 = result; // 0x406919\n    if ((char)function_406d20(0, v3) == 0) {\n        // 0x40691b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4068e8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406930",
            "funcStartAddr": "406930",
            "funcEndAddr": "40693a",
            "decompiledFuncCode": "int64_t function_406930(void) {\n    // 0x406930\n    return function_402020(1);\n}\n"
        },
        {
            "funcName": "function_406940",
            "funcStartAddr": "406940",
            "funcEndAddr": "406a56",
            "decompiledFuncCode": "int64_t function_406940(int64_t a1, char ** a2, int64_t * a3, int64_t n) {\n    char * str = (char *)a1; // 0x406961\n    int32_t len = strlen(str); // 0x406961\n    if (a2 == NULL) {\n        // 0x406a2d\n        return -1;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = -1;\n    int64_t * str3 = (int64_t *)(v3 * n + v1);\n    int32_t v4 = 0;\n    int64_t v5 = 0; // 0x4069c7\n    int64_t v6 = v1; // 0x406940\n    int64_t v7 = v2; // 0x4069ce\n    int64_t str4; // 0x406940\n    int64_t v8; // 0x406940\n    int32_t v9; // 0x406940\n    int32_t v10; // 0x406940\n    int32_t v11; // 0x406940\n    int64_t v12; // 0x406940\n    int64_t result; // 0x406940\n    int32_t v13; // 0x4069c3\n    char * str2; // 0x4069e2\n    while (true) {\n        // 0x4069d7\n        str4 = v6;\n        v8 = v5;\n        v10 = v4;\n        str2 = (char *)v7;\n        v9 = v10;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x4069eb\n            result = v8;\n            if (len == strlen(str2)) {\n                // 0x406a2d\n                return result;\n            }\n            if (v3 == -1) {\n                // break -> 0x4069ff\n                break;\n            }\n            // 0x406990\n            v9 = 1;\n            if (a3 != NULL) {\n                // 0x40699e\n                v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                v9 = v13;\n            }\n        }\n        // 0x4069c7\n        v4 = v9;\n        v5 = v8 + 1;\n        v7 = *(int64_t *)(8 * v5 + v2);\n        v6 = str4 + n;\n        v12 = v3;\n        v11 = v4;\n        if (v7 == 0) {\n            return (char)v11 == 0 ? v12 : -2;\n        }\n    }\n    int64_t v14 = v8 + 1; // 0x406a03\n    int64_t v15 = *(int64_t *)(8 * v14 + v2); // 0x406a0a\n    v12 = v8;\n    v11 = v10;\n    while (v15 != 0) {\n        // 0x4069d7\n        v3 = v8;\n        str3 = (int64_t *)(v3 * n + v1);\n        v4 = v10;\n        v5 = v14;\n        v6 = str4 + n;\n        v7 = v15;\n        while (true) {\n            // 0x4069d7\n            str4 = v6;\n            v8 = v5;\n            v10 = v4;\n            str2 = (char *)v7;\n            v9 = v10;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x4069eb\n                result = v8;\n                if (len == strlen(str2)) {\n                    // 0x406a2d\n                    return result;\n                }\n                if (v3 == -1) {\n                    // break -> 0x4069ff\n                    break;\n                }\n                // 0x406990\n                v9 = 1;\n                if (a3 != NULL) {\n                    // 0x40699e\n                    v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                    v9 = v13;\n                }\n            }\n            // 0x4069c7\n            v4 = v9;\n            v5 = v8 + 1;\n            v7 = *(int64_t *)(8 * v5 + v2);\n            v6 = str4 + n;\n            v12 = v3;\n            v11 = v4;\n            if (v7 == 0) {\n                return (char)v11 == 0 ? v12 : -2;\n            }\n        }\n        // 0x4069ff\n        v14 = v8 + 1;\n        v15 = *(int64_t *)(8 * v14 + v2);\n        v12 = v8;\n        v11 = v10;\n    }\n  lab_0x406a18:\n    // 0x406a2d\n    return (char)v11 == 0 ? v12 : -2;\n}\n"
        },
        {
            "funcName": "function_406a60",
            "funcStartAddr": "406a60",
            "funcEndAddr": "406ad1",
            "decompiledFuncCode": "int64_t function_406a60(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x406a60\n    if (a3 == -1) {\n        // 0x406ac0\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x406a75\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x406a84\n    function_404cb0(1, a1);\n    function_4049a0(0, 8, a2);\n    error(0, 0, format);\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_406ae0",
            "funcStartAddr": "406ae0",
            "funcEndAddr": "406bf8",
            "decompiledFuncCode": "int64_t function_406ae0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x406b0d\n    fputs_unlocked(v1, g36);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x406b80\n        int64_t v5; // 0x406b87\n        int64_t v6; // 0x406ba7\n        while (v3 != 0) {\n            // 0x406b6b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x406b30\n                break;\n            }\n            // 0x406b7d\n            v4 = v3 + 1;\n            v5 = function_404cd0(v2);\n            __fprintf_chk(g36, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x406bb0\n                goto lab_0x406bb0;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x406b33\n        int64_t v8 = function_404cd0(v2); // 0x406b3d\n        __fprintf_chk(g36, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x406b5d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x406b6b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x406b30\n                    break;\n                }\n                // 0x406b7d\n                v4 = v3 + 1;\n                v5 = function_404cd0(v2);\n                __fprintf_chk(g36, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x406bb0\n                    goto lab_0x406bb0;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x406b30\n            v7 = v3 + 1;\n            v8 = function_404cd0(v2);\n            __fprintf_chk(g36, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x406bb0:;\n    int64_t v10 = (int64_t)g36; // 0x406bb0\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x406bb7\n    uint64_t result = *v11; // 0x406bb7\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x406be0\n        return __overflow(g36, 10);\n    }\n    // 0x406bc1\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406c00",
            "funcStartAddr": "406c00",
            "funcEndAddr": "406c70",
            "decompiledFuncCode": "int64_t function_406c00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = function_406940(a2, (char **)a3, (int64_t *)a4, a5); // 0x406c2c\n    int64_t result = v1; // 0x406c34\n    if (v1 < 0) {\n        // 0x406c48\n        function_406a60(a1, a2, v1);\n        function_406ae0(a3, a4, a5);\n        result = -1;\n    }\n    // 0x406c36\n    return result;\n}\n"
        },
        {
            "funcName": "function_406c70",
            "funcStartAddr": "406c70",
            "funcEndAddr": "406cbd",
            "decompiledFuncCode": "int64_t function_406c70(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x406c70\n    if (result == 0) {\n        // 0x406cb1\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x406ca8\n    int32_t n = a4; // 0x406ca8\n    int64_t v1 = result; // 0x406caf\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x406cb1\n        return result;\n    }\n    int64_t str3 = str2; // 0x406caf\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x406c90\n    int64_t result2 = 0; // 0x406c9d\n    while (v2 != 0) {\n        // 0x406c9f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x406cb1\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x406cb1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406cc0",
            "funcStartAddr": "406cc0",
            "funcEndAddr": "406d1d",
            "decompiledFuncCode": "int64_t function_406cc0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406cc7\n    int64_t v2; // 0x406cc0\n    int64_t result = function_4059c0(a1, v2); // 0x406cd8\n    if ((v2 & 32) != 0) {\n        // 0x406d00\n        if ((int32_t)result == 0) {\n            // 0x406d04\n            *__errno_location() = 0;\n        }\n        // 0x406cfa\n        return 0xffffffff;\n    }\n    // 0x406ce1\n    if ((int32_t)result == 0) {\n        // 0x406cfa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406ce8\n    if (v1 == 0) {\n        // 0x406cea\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x406cfa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406d20",
            "funcStartAddr": "406d20",
            "funcEndAddr": "406d7e",
            "decompiledFuncCode": "int64_t function_406d20(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406d26\n    if (locale == NULL) {\n        // 0x406d53\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406d26\n    bool v2; // 0x406d20\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g15; // 0x406d20\n    int64_t v5 = v1; // 0x406d20\n    int64_t v6 = 2; // 0x406d45\n    unsigned char v7 = *(char *)v5; // 0x406d45\n    char v8 = *(char *)v4; // 0x406d45\n    char v9 = v8; // 0x406d45\n    bool v10 = false; // 0x406d45\n    while (v7 == v8) {\n        // 0x406d38\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406d51\n    int64_t v13 = v1; // 0x406d51\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406d53\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406d51\n    unsigned char v15 = *(char *)v13; // 0x406d6d\n    char v16 = *(char *)v12; // 0x406d6d\n    char v17 = v16; // 0x406d6d\n    bool v18 = false; // 0x406d6d\n    while (v15 == v16) {\n        // 0x406d60\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406d80",
            "funcStartAddr": "406d80",
            "funcEndAddr": "4072e2",
            "decompiledFuncCode": "int64_t function_406d80(void) {\n    char * v1 = nl_langinfo(14); // 0x406d96\n    char * v2 = g51; // 0x406d9b\n    char * v3; // 0x406d80\n    int64_t v4; // 0x406d80\n    int64_t v5; // 0x406d80\n    int64_t v6; // 0x406d80\n    int64_t v7; // 0x406d80\n    int32_t size; // 0x406d80\n    int32_t size2; // 0x406d80\n    int32_t len; // 0x406e52\n    int64_t v8; // 0x406e52\n    char * env_val; // 0x406e3d\n    if (v2 == NULL) {\n        // 0x406e38\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406ea5;\n        } else {\n            // 0x406e4a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406ea5;\n            } else {\n                // 0x406e4f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x406e3d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4072d5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406ea5;\n                    } else {\n                        // 0x407249\n                        size2 = len + 14;\n                        goto lab_0x406e6b;\n                    }\n                } else {\n                    goto lab_0x406e6b;\n                }\n            }\n        }\n    } else {\n        // 0x406d80\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x406dba;\n    }\n  lab_0x4070ec:;\n    // 0x4070ec\n    struct _IO_FILE * stream; // 0x406f2b\n    int32_t v10 = __uflow(stream); // 0x4070ef\n    int64_t v11; // 0x406d80\n    int64_t v12 = v11; // 0x4070f9\n    int64_t v13; // 0x406d80\n    int64_t v14 = v13; // 0x4070f9\n    int32_t v15 = v10; // 0x4070f9\n    int64_t v16; // 0x406d80\n    int64_t v17 = v16; // 0x4070f9\n    int64_t v18 = v11; // 0x4070f9\n    int64_t v19 = v13; // 0x4070f9\n    int64_t v20 = v16; // 0x4070f9\n    if (v10 == -1) {\n        // break -> 0x4070ff\n        goto lab_0x4070ff;\n    }\n    goto lab_0x406f79;\n  lab_0x406f6e:;\n    // 0x406f6e\n    int64_t v90; // 0x406d80\n    int64_t * v32; // 0x406f60\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406d80\n    v12 = v89;\n    int64_t v91; // 0x406d80\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406d80\n    v17 = v92;\n    goto lab_0x406f79;\n  lab_0x406f79:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406d80\n    int32_t v25; // bp-120, 0x406d80\n    int32_t v26; // bp-184, 0x406d80\n    int64_t v27; // 0x406f2b\n    int64_t v28; // 0x406f48\n    int64_t v29; // 0x406f4d\n    int64_t * v30; // 0x406f64\n    switch (c) {\n        case 32: {\n            goto lab_0x406f60;\n        }\n        case 10: {\n            goto lab_0x406f60;\n        }\n        case 9: {\n            goto lab_0x406f60;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x407151\n            int32_t v33; // 0x406d80\n            char v34; // 0x406d80\n            int32_t v35; // 0x40715e\n            if (v31 < *v30) {\n                // 0x407130\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40715b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x407151\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407130\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40715b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x407140\n                v36 = v33;\n            }\n            // 0x40722f\n            if (v36 == -1) {\n                // break -> 0x4070ff\n                break;\n            }\n            goto lab_0x406f60;\n        }\n        default: {\n            // 0x406f8f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4070ff\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406fb8\n            int64_t v39 = v37 + 4; // 0x406fba\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406fc6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406fc8\n            while (v41 == 0) {\n                // 0x406fb8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406fe6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406ff2\n            int64_t v45 = v43 + 4; // 0x406ff4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407000\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407002\n            while (v47 == 0) {\n                // 0x406ff2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x406fef\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407018\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x407028\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40702c\n            int64_t v52 = v51 + v48; // 0x407035\n            int64_t * mem; // 0x406d80\n            int64_t v53; // 0x406d80\n            int64_t v54; // 0x406d80\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40716b\n                int64_t v56 = v55 + 3; // 0x407177\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x407051\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x407060\n            if (mem == NULL) {\n                // 0x40728c\n                free((int64_t *)v21);\n                function_4059c0(v27, v53);\n                v24 = (int64_t)&g14;\n                goto lab_0x406f04;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x407078\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x407082\n            uint32_t v62 = (int32_t)v59; // 0x407085\n            int64_t v63; // 0x406d80\n            if (v62 >= 8) {\n                // 0x407194\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4071ae\n                int64_t v66 = v61 - v65; // 0x4071b2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4071bd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4071ce\n                    int64_t v70 = v69 & 0xffffffff; // 0x4071ce\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4071cb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40725f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x407097\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40709b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4070ab\n            int64_t v74 = v60 - 1; // 0x4070af\n            uint32_t v75 = (int32_t)v73; // 0x4070b4\n            int64_t v76; // 0x406d80\n            if (v75 >= 8) {\n                // 0x4071e2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4071ec\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4071fc\n                int64_t v80 = v74 - v79; // 0x407200\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40720b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40721b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407219\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x407276\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40727e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4070c6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4070ca\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4072c3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4070de\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x406f6e;\n            } else {\n                goto lab_0x4070ec;\n            }\n        }\n    }\n  lab_0x406f60:;\n    int64_t v93 = v23; // 0x406d80\n    int64_t v94 = v22; // 0x406d80\n    int64_t v95 = v21; // 0x406d80\n    goto lab_0x406f60_2;\n  lab_0x406ea5:;\n    int64_t * mem3 = malloc(size); // 0x406ea5\n    int64_t v97 = (int64_t)&g14; // 0x406eb0\n    int64_t v98; // 0x406d80\n    int64_t path; // 0x406d80\n    if (mem3 == NULL) {\n        goto lab_0x406e82;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406ea5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406ec6;\n    }\n  lab_0x406dba:;\n    int64_t str = v1 == NULL ? (int64_t)&g14 : (int64_t)v1; // 0x406dad\n    char v100 = *v3; // 0x406dba\n    int64_t v101; // 0x406d80\n    if (v100 == 0) {\n        // 0x406e14\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406d80\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406d80\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406e00\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406e07;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406dd0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x406ddd\n        char v107 = *(char *)v106; // 0x406de2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406e14\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x406deb\n    v104 = v103 + 1;\n  lab_0x406e07:\n    // 0x406e14\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406e82:;\n    char * v108 = (char *)v97;\n    g51 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x406dba;\n  lab_0x406ec6:;\n    int64_t v109 = v98 + path; // 0x406ec6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406ef2\n    v24 = (int64_t)&g14;\n    if (fd >= 0) {\n        // 0x406f21\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x407252\n            close(fd);\n            v24 = (int64_t)&g14;\n        } else {\n            // 0x406f45\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406f60_2:;\n                uint64_t v96 = *v32; // 0x406f60\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4070ec;\n                } else {\n                    goto lab_0x406f6e;\n                }\n            }\n          lab_0x4070ff:\n            // 0x4070ff\n            function_4059c0(v27, v19);\n            v24 = (int64_t)&g14;\n            if (v18 != 0) {\n                // 0x40711e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406f04;\n  lab_0x406e6b:;\n    int64_t * mem4 = malloc(size2); // 0x406e6b\n    v97 = (int64_t)&g14;\n    if (mem4 != NULL) {\n        // 0x406f11\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406ec6;\n    } else {\n        goto lab_0x406e82;\n    }\n  lab_0x406f04:\n    // 0x406f04\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406e82;\n}\n"
        },
        {
            "funcName": "function_4072f0",
            "funcStartAddr": "4072f0",
            "funcEndAddr": "40734d",
            "decompiledFuncCode": "int64_t function_4072f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4072f0\n    return function_401570();\n}\n"
        },
        {
            "funcName": "function_407350",
            "funcStartAddr": "407350",
            "funcEndAddr": "407351",
            "decompiledFuncCode": "int64_t function_407350(void) {\n    // 0x407350\n    int64_t result; // 0x407350\n    return result;\n}\n"
        },
        {
            "funcName": "function_407360",
            "funcStartAddr": "407360",
            "funcEndAddr": "407378",
            "decompiledFuncCode": "int64_t function_407360(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407360\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g20);\n}\n"
        },
        {
            "funcName": "function_407378",
            "funcStartAddr": "407378",
            "funcEndAddr": "407398",
            "decompiledFuncCode": "int64_t function_407378(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g16; // 0x407382\n    while (*(int64_t *)v1 != -1) {\n        // 0x407383\n        v1 -= 8;\n    }\n    // 0x407394\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sum.elf"
}