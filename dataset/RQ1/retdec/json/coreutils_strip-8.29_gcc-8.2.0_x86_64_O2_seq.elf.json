{
    "funcInfo": [
        {
            "funcName": "function_401980",
            "funcStartAddr": "401980",
            "funcEndAddr": "401985",
            "decompiledFuncCode": "int64_t function_401980(void) {\n    // 0x401980\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401985",
            "funcStartAddr": "401985",
            "funcEndAddr": "40198a",
            "decompiledFuncCode": "int64_t function_401985(void) {\n    // 0x401985\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40198a",
            "funcStartAddr": "40198a",
            "funcEndAddr": "40198f",
            "decompiledFuncCode": "int64_t function_40198a(void) {\n    // 0x40198a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40198f",
            "funcStartAddr": "40198f",
            "funcEndAddr": "401994",
            "decompiledFuncCode": "int64_t function_40198f(void) {\n    // 0x40198f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401994",
            "funcStartAddr": "401994",
            "funcEndAddr": "401999",
            "decompiledFuncCode": "int64_t function_401994(void) {\n    // 0x401994\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401999",
            "funcStartAddr": "401999",
            "funcEndAddr": "40199e",
            "decompiledFuncCode": "int64_t function_401999(void) {\n    // 0x401999\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40199e",
            "funcStartAddr": "40199e",
            "funcEndAddr": "4019a3",
            "decompiledFuncCode": "int64_t function_40199e(void) {\n    // 0x40199e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019b0",
            "funcStartAddr": "4019b0",
            "funcEndAddr": "402517",
            "decompiledFuncCode": "int64_t function_4019b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4019b0\n    int128_t v1; // 0x4019b0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int128_t v4 = v1;\n    int128_t v5 = v1;\n    uint64_t v6 = a1 & 0xffffffff; // 0x4019b8\n    function_403220(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_409880(0x403180, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g36 = 0;\n    g35 = (char *)&g10;\n    int64_t v7 = (int64_t)*(int32_t *)0x60d27c; // 0x401a15\n    int64_t v8 = v7; // 0x401a1f\n    int64_t v9 = a5; // 0x401a1f\n    int64_t v10 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"; // 0x401a1f\n    int64_t v11 = 0; // 0x401a1f\n    int64_t v12 = a4; // 0x401a1f\n    int64_t v13 = 0; // 0x401a1f\n    int64_t v14 = a4; // 0x401a1f\n    int64_t v15 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"; // 0x401a1f\n    int64_t v16 = a5; // 0x401a1f\n    int64_t v17 = v7; // 0x401a1f\n    if (v6 > v7) {\n        int64_t v18; // 0x4019b0\n        while (true) {\n            // 0x401a21\n            v18 = v11;\n            while (true) {\n                int64_t v19 = v12; // 0x4019b0\n                int64_t v20 = v10; // 0x4019b0\n                int64_t v21 = v9; // 0x4019b0\n                int64_t v22 = v8; // 0x4019b0\n                while (true) {\n                  lab_0x401a21:;\n                    int64_t v23 = v22;\n                    int64_t v24 = *(int64_t *)((0x100000000 * v23 >> 29) + a2); // 0x401a24\n                    if (*(char *)v24 == 45) {\n                        char v25 = *(char *)(v24 + 1); // 0x401a2e\n                        v13 = v18;\n                        v14 = v19;\n                        v15 = v20;\n                        v16 = v21;\n                        v17 = v23;\n                        if (v25 == 46) {\n                            goto lab_0x401a91_5;\n                        }\n                        // 0x401a36\n                        v13 = v18;\n                        v14 = v19;\n                        v15 = v20;\n                        v16 = v21;\n                        v17 = v23;\n                        if ((int32_t)v25 < 58) {\n                            goto lab_0x401a91_5;\n                        }\n                    }\n                    uint32_t v26 = (int32_t)function_406510(v6, a2, \"+f:s:w\", &g3, 0, a6);\n                    switch (v26) {\n                        case -1: {\n                            goto lab_0x401f7b;\n                        }\n                        case 102: {\n                            goto lab_0x401b70;\n                        }\n                        default: {\n                            if (v26 <= 102) {\n                                if (v26 == -131) {\n                                    // 0x401b07\n                                    function_4052c0((int64_t)g29, \"seq\", \"GNU coreutils\", (int64_t)g17, \"Ulrich Drepper\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                if (v26 == -130) {\n                                    // 0x401b60\n                                    function_402a40(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x40232d;\n                            }\n                            if (v26 != 115) {\n                                // break -> 0x401b40\n                                break;\n                            }\n                            int64_t v27 = g26; // 0x401a7e\n                            *(int64_t *)&g35 = (int64_t)g50;\n                            v19 = (int64_t)&g3;\n                            v20 = a2;\n                            v21 = 0;\n                            v22 = v27;\n                            v13 = v18;\n                            v14 = (int64_t)&g3;\n                            v15 = a2;\n                            v16 = 0;\n                            v17 = v27;\n                            if (v6 <= v27) {\n                                goto lab_0x401a91_5;\n                            }\n                            goto lab_0x401a21;\n                        }\n                    }\n                }\n            }\n          lab_0x401b70:\n            // 0x401b70\n            v11 = (int64_t)g50;\n            v8 = (int64_t)*(int32_t *)0x60d27c;\n            v9 = 0;\n            v10 = a2;\n            v12 = (int64_t)&g3;\n            v13 = v11;\n            v14 = (int64_t)&g3;\n            v15 = a2;\n            v16 = 0;\n            v17 = v8;\n            if (v6 <= v8) {\n                goto lab_0x401a91_5;\n            }\n        }\n      lab_0x401f7b:\n        // 0x401f7b\n        v13 = v18;\n        v14 = (int64_t)&g3;\n        v15 = a2;\n        v16 = 0;\n        v17 = g26;\n    }\n  lab_0x401a91_5:;\n    int32_t v28 = (int32_t)a1 - (int32_t)v17; // 0x401a94\n    int32_t v29 = v28; // bp-248, 0x401a97\n    if (v28 == 0) {\n      lab_0x40239c:\n        // 0x40239c\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x40232d\n        function_402a40(1);\n        // UNREACHABLE\n    }\n    if (v28 >= 4) {\n        // 0x4023c0\n        function_404e40(*(int64_t *)(a2 + 24 + (0x100000000 * v17 >> 29)));\n        // 0x402315\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"extra operand %s\", 5));\n      lab_0x40232d:\n        // 0x40232d\n        function_402a40(1);\n        // UNREACHABLE\n    }\n    int64_t v30 = &v29; // 0x4019c2\n    int64_t v31 = 0; // 0x401aad\n    int64_t v32 = 1; // 0x401aad\n    int64_t v33 = v14; // 0x401aad\n    int64_t v34 = 0; // 0x401aad\n    int64_t v35 = v15; // 0x401aad\n    int64_t v36 = v16; // 0x401aad\n    int64_t v37 = 0; // 0x401aad\n    int64_t v38 = 0; // 0x401aad\n    int64_t v39 = v17; // 0x401aad\n    char v40; // 0x4019b0\n    int64_t v41; // 0x4019b0\n    int64_t v42; // 0x4019b0\n    int64_t v43; // 0x4019b0\n    int64_t v44; // 0x4019b0\n    int64_t v45; // 0x4019b0\n    int64_t v46; // 0x4019b0\n    int64_t v47; // 0x4019b0\n    int64_t v48; // 0x4019b0\n    int64_t v49; // 0x4019b0\n    unsigned char v50; // 0x401ad4\n    if (v13 == 0) {\n        goto lab_0x401b82;\n    } else {\n        int64_t v51; // 0x4019b0\n        while (true) {\n            // 0x401ad4\n            v49 = v32;\n            int64_t v52 = v31;\n            v50 = *(char *)(v52 + v13);\n            int64_t v53; // 0x4019b0\n            int64_t v54; // 0x4019b0\n            int64_t v55; // 0x4019b0\n            if (v50 != 37) {\n                // 0x401ac0\n                v51 = v54;\n                v53 = v51;\n                v55 = 1;\n                if (v50 == 0) {\n                    // break -> 0x4022c8\n                    break;\n                }\n            } else {\n                int64_t v56 = v52 + 1; // 0x401ae1\n                char * str = (char *)(v56 + v13);\n                v53 = v56;\n                v55 = 2;\n                if (*str != 37) {\n                    int64_t v57 = v56 + (int64_t)strspn(str, \"-+#0 '\"); // 0x401e8f\n                    int64_t v58 = v57 + (int64_t)strspn((char *)(v57 + v13), \"0123456789\"); // 0x401e9b\n                    char v59 = *(char *)(v58 + v13); // 0x401ea0\n                    v40 = v59;\n                    v44 = v58;\n                    if (v59 != 46) {\n                        goto lab_0x401ebc;\n                    } else {\n                        int64_t v60 = v58 + 1; // 0x401ea7\n                        int64_t v61 = v60 + (int64_t)strspn((char *)(v60 + v13), \"0123456789\"); // 0x401eb9\n                        v40 = *(char *)(v61 + v13);\n                        v44 = v61;\n                        goto lab_0x401ebc;\n                    }\n                }\n            }\n            // 0x401acd\n            v31 = v55 + v52;\n            v32 = v49 + 1;\n            v54 = v53;\n        }\n        // 0x4022c8\n        v48 = v13;\n        v47 = a2;\n        v45 = v16;\n        v46 = a6;\n        v41 = v51;\n        v42 = v49 - 1;\n        v43 = v17;\n        goto lab_0x4022c8;\n    }\n  lab_0x4022c3_2:\n    // 0x4022c3\n    function_402640();\n    int64_t v62; // 0x4019b0\n    v48 = v62;\n    int64_t v63; // 0x4019b0\n    v47 = v63;\n    int64_t v64; // 0x4019b0\n    v45 = v64;\n    int64_t v65; // 0x4019b0\n    v46 = v65;\n    int64_t v66; // 0x4019b0\n    v41 = v66;\n    int64_t v67; // 0x4019b0\n    v42 = v67;\n    int64_t v68; // 0x4019b0\n    v43 = v68;\n    goto lab_0x4022c8;\n  lab_0x402248_2:;\n    // 0x402248\n    int64_t * str3; // 0x4019b0\n    free((int64_t *)*str3);\n    int64_t v288; // 0x401d3f\n    int64_t v264 = v288; // 0x402250\n    int64_t v263; // 0x4019b0\n    int64_t v265 = v263; // 0x402250\n    goto lab_0x402255;\n  lab_0x401b82:;\n    int64_t v334 = v39;\n    int64_t v362 = v38;\n    int64_t v361 = v37;\n    int64_t v360 = v36;\n    int64_t v335 = v34;\n    int64_t v332 = v33;\n    int64_t v366 = 0x100000000 * v334 >> 29;\n    int64_t v367 = v366 + a2;\n    int64_t * v330 = (int64_t *)v367;\n    int64_t v341 = *v330; // 0x401b8d\n    int64_t v368 = function_402600(v341, v35, v366, v332); // 0x401b9f\n    int64_t * v329 = v330; // 0x401ba6\n    int64_t v331 = v332; // 0x401ba6\n    int64_t v333 = v334; // 0x401ba6\n    if ((char)v368 == 0) {\n        goto lab_0x401c01;\n    } else {\n        // 0x401ba8\n        if (v29 == 1) {\n            goto lab_0x4020d8;\n        } else {\n            int64_t str5 = *(int64_t *)(v367 + 8); // 0x401bb7\n            if ((char)function_402600(str5, str5, v366, v332) == 0) {\n                goto lab_0x401c01;\n            } else {\n                // 0x401bcd\n                if (v29 != 3) {\n                    goto lab_0x4020d8;\n                } else {\n                    // 0x401bd7\n                    v329 = v330;\n                    v331 = v332;\n                    v333 = v334;\n                    if (strcmp(\"1\", (char *)str5) != 0) {\n                        goto lab_0x401c01;\n                    } else {\n                        int64_t v369 = function_402600(*(int64_t *)(v367 + 16), str5, v366, v332); // 0x401bf4\n                        v329 = v330;\n                        v331 = v332;\n                        v333 = v334;\n                        if ((char)v369 != 0) {\n                            goto lab_0x4020d8;\n                        } else {\n                            goto lab_0x401c01;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401c01:\n    // 0x401c01\n    g26 = (int32_t)v333 + 1;\n    float80_t v344; // bp-88, 0x4019b0\n    function_402dc0((int64_t *)&v344, *v329);\n    int3_t v84; // 0x4019b0\n    int3_t v345 = v84 - 1;\n    __frontend_reg_store_fpr(v345, v344);\n    int64_t v346 = g26; // 0x401c27\n    int32_t v347; // 0x4019b0\n    int64_t v348 = v347; // 0x401c2e\n    int64_t v349 = v347; // 0x401c36\n    float80_t v350 = __frontend_reg_load_fpr(v345); // 0x401c3e\n    int3_t v83; // 0x4019b0\n    int3_t v99; // 0x4019b0\n    int3_t v98; // 0x4019b0\n    int3_t v144; // 0x4019b0\n    int3_t v143; // 0x4019b0\n    int3_t v85; // 0x4019b0\n    int64_t v150; // 0x4019b0\n    int64_t v79; // 0x4019b0\n    int64_t v135; // 0x4019b0\n    int64_t v106; // 0x4019b0\n    int64_t v93; // 0x4019b0\n    int64_t v80; // 0x4019b0\n    int64_t v136; // 0x4019b0\n    int64_t v107; // 0x4019b0\n    int64_t v94; // 0x4019b0\n    int64_t v151; // 0x4019b0\n    int64_t v95; // 0x4019b0\n    int64_t v152; // 0x4019b0\n    int64_t v81; // 0x4019b0\n    int64_t v137; // 0x4019b0\n    int64_t v108; // 0x4019b0\n    int64_t v104; // 0x4019b0\n    int64_t v91; // 0x4019b0\n    int64_t v149; // 0x4019b0\n    int64_t v77; // 0x4019b0\n    int64_t v134; // 0x4019b0\n    int64_t v105; // 0x4019b0\n    int64_t v92; // 0x4019b0\n    int64_t v78; // 0x4019b0\n    int64_t v133; // 0x4019b0\n    int64_t v148; // 0x4019b0\n    int64_t v74; // 0x4019b0\n    int64_t v103; // 0x4019b0\n    int64_t v89; // 0x4019b0\n    int64_t v132; // 0x4019b0\n    int64_t v102; // 0x4019b0\n    int64_t v88; // 0x4019b0\n    int64_t v147; // 0x4019b0\n    int64_t v73; // 0x4019b0\n    int64_t v86; // 0x4019b0\n    int64_t v145; // 0x4019b0\n    int64_t v71; // 0x4019b0\n    int64_t v130; // 0x4019b0\n    int64_t v100; // 0x4019b0\n    int64_t v76; // 0x4019b0\n    int64_t v146; // 0x4019b0\n    int64_t v72; // 0x4019b0\n    int64_t v131; // 0x4019b0\n    int64_t v101; // 0x4019b0\n    int64_t v87; // 0x4019b0\n    int64_t v90; // 0x4019b0\n    int64_t v75; // 0x4019b0\n    bool v70; // 0x4019b0\n    if (v6 > v346) {\n        // 0x401f87\n        g26 = &g27;\n        function_402dc0((int64_t *)&v344, *(int64_t *)(8 * v346 + a2));\n        int32_t v351 = g26; // 0x401fa6\n        int64_t v352 = v351; // 0x401fa6\n        __frontend_reg_store_fpr(v345, v344);\n        int64_t v353 = v29; // 0x401fbe\n        int3_t v354 = v84 - 2;\n        __frontend_reg_store_fpr(v354, __frontend_reg_load_fpr(v345));\n        float80_t v355 = __frontend_reg_load_fpr(v354); // 0x401fc4\n        if (v6 > v352) {\n            // 0x40213e\n            __frontend_reg_store_fpr(v345, __frontend_reg_load_fpr(v345));\n            __frontend_reg_store_fpr(v345, 0.0L);\n            int64_t v356 = v351; // 0x402142\n            int128_t v357 = __asm_pxor(v3, v3); // 0x402145\n            __frontend_reg_store_fpr(v354, v355);\n            __asm_movss(v357);\n            float80_t v358 = __frontend_reg_load_fpr(v354); // 0x40215b\n            float80_t v359 = __frontend_reg_load_fpr(v345); // 0x40215b\n            __frontend_reg_store_fpr(v345, __frontend_reg_load_fpr(v345));\n            v83 = v354;\n            v85 = v345;\n            v86 = v352;\n            v87 = v353;\n            v88 = v335;\n            v89 = a2;\n            v90 = v356;\n            v91 = v360;\n            v92 = v349;\n            v93 = v361;\n            v94 = v362;\n            v95 = v349;\n            v70 = v358 == v359;\n            v71 = v352;\n            v72 = v353;\n            v73 = v335;\n            v74 = a2;\n            v75 = v356;\n            v76 = 0x100000000 * v352 >> 29;\n            v77 = v360;\n            v78 = v349;\n            v79 = v361;\n            v80 = v362;\n            v81 = v349;\n            if (v358 == v358 && v359 == v359) {\n                goto lab_0x4022f8;\n            } else {\n                goto lab_0x402165;\n            }\n        } else {\n            int128_t v363 = __asm_pxor(v4, v4); // 0x401fce\n            __frontend_reg_load_fpr(v345);\n            __asm_movss(v363);\n            __frontend_reg_store_fpr(v345, 1.0L);\n            __frontend_reg_load_fpr(v345);\n            v98 = v354;\n            v99 = v345;\n            v100 = v349;\n            v101 = v353;\n            v102 = v335;\n            v103 = v348;\n            v104 = v360;\n            v105 = 0;\n            v106 = v361;\n            v107 = v362;\n            v108 = v349;\n            goto lab_0x401ff0;\n        }\n    } else {\n        // 0x401c4b\n        __frontend_reg_store_fpr(v345, v350);\n        if (v347 == 0) {\n            // 0x4021b1\n            __asm_movss(__asm_pxor(v2, v2));\n            __frontend_reg_load_fpr(v345);\n            __frontend_reg_store_fpr(v345, 1.0L);\n            int3_t v364 = v84 - 2;\n            __frontend_reg_store_fpr(v364, __frontend_reg_load_fpr(v345));\n            __frontend_reg_load_fpr(v364);\n            __frontend_reg_load_fpr(v345);\n            v143 = v364;\n            v144 = v345;\n            v145 = v331;\n            v146 = 1;\n            v147 = v335;\n            v148 = v348;\n            v149 = v360;\n            v150 = v361;\n            v151 = v362;\n            v152 = 0;\n            goto lab_0x4021d7;\n        } else {\n            // 0x401c54\n            __asm_movss(__asm_pxor(v5, v5));\n            __frontend_reg_load_fpr(v345);\n            __frontend_reg_store_fpr(v345, 1.0L);\n            int3_t v365 = v84 - 2; // 0x401c79\n            __frontend_reg_store_fpr(v365, __frontend_reg_load_fpr(v345));\n            __frontend_reg_load_fpr(v365);\n            __frontend_reg_load_fpr(v345);\n            v130 = v349;\n            v131 = 1;\n            v132 = v335;\n            v133 = v348;\n            v134 = 0;\n            v135 = v361;\n            v136 = v362;\n            v137 = 0;\n            goto lab_0x401c8f;\n        }\n    }\n  lab_0x4022c8:;\n    int64_t v69 = function_404e40(v48); // 0x4022cb\n    char * format = dcgettext(NULL, \"format %s has no %% directive\", 5); // 0x4022df\n    error(1, (int32_t)\"format %s has no %% directive\" ^ (int32_t)\"format %s has no %% directive\", format);\n    v70 = true;\n    v71 = v69;\n    v72 = (int64_t)format;\n    v73 = v69;\n    v74 = v47;\n    v75 = (int32_t)\"format %s has no %% directive\" ^ (int32_t)\"format %s has no %% directive\";\n    v76 = 1;\n    v77 = v45;\n    v78 = v46;\n    v79 = v41;\n    v80 = v42;\n    v81 = v43;\n    goto lab_0x4022f8;\n  lab_0x4020d8:\n    // 0x4020d8\n    v329 = v330;\n    v331 = v332;\n    v333 = v334;\n    bool v186; // 0x4019b0\n    if (v335 == 0 && g36 != 1) {\n        int64_t v336 = (int64_t)g35; // 0x4020fb\n        int64_t v337 = -1; // 0x4019b0\n        v329 = v330;\n        v331 = 0;\n        v333 = v334;\n        while (v337 != 0) {\n            int64_t v338 = v336;\n            int64_t v339 = v337 - 1; // 0x4020fb\n            v337 = v339;\n            v336 = v338 + (v186 ? -1 : 1);\n            if (*(char *)v338 == 0) {\n                v329 = v330;\n                v331 = v339;\n                v333 = v334;\n                if (v339 != -3) {\n                    goto lab_0x401c01;\n                } else {\n                    int64_t v340 = v29 != 1 ? v341 : (int64_t)\"1\"; // 0x402112\n                    int64_t v342 = *(int64_t *)((8 * (v334 + 0xffffffff + (int64_t)v29) & 0x7fffffff8) + a2); // 0x402120\n                    if ((char)function_402680(v340, v342) != 0) {\n                        goto lab_0x40226b;\n                    } else {\n                        int64_t v343 = g26; // 0x402132\n                        v329 = (int64_t *)((0x100000000 * v343 >> 29) + a2);\n                        v331 = v339;\n                        v333 = v343;\n                        goto lab_0x401c01;\n                    }\n                }\n            }\n            v329 = v330;\n            v331 = 0;\n            v333 = v334;\n        }\n    }\n    goto lab_0x401c01;\n  lab_0x4022f8:;\n    int64_t v82 = v74;\n    if (v70) {\n        // 0x4022fe\n        function_404e40(*(int64_t *)(v82 - 8 + v76));\n        // 0x402315\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"invalid Zero increment value: %s\", 5));\n        // 0x40232d\n        function_402a40(1);\n        // UNREACHABLE\n    }\n    // 0x4022f8\n    v83 = v84 - 2;\n    v85 = v84 - 1;\n    v86 = v71;\n    v87 = v72;\n    v88 = v73;\n    v89 = v82;\n    v90 = v75;\n    v91 = v77;\n    v92 = v78;\n    v93 = v79;\n    v94 = v80;\n    v95 = v81;\n    goto lab_0x402165;\n  lab_0x402165:;\n    int64_t * v96 = (int64_t *)(v30 + 16); // 0x40216d\n    *v96 = v87;\n    int64_t v97 = v30 + 160; // 0x402172\n    v29 = v92;\n    g26 = (int32_t)v86 + 1;\n    function_402dc0((int64_t *)v97, *(int64_t *)(8 * v90 + v89));\n    __frontend_reg_store_fpr(v85, *(float80_t *)v97);\n    *(float80_t *)(v30 + 48) = __frontend_reg_load_fpr(v85);\n    v98 = v83;\n    v99 = v85;\n    v100 = (int64_t)*(int32_t *)(v30 + 184);\n    v101 = *v96;\n    v102 = v88;\n    v103 = *(int64_t *)(v30 + 176);\n    v104 = v91;\n    v105 = v29;\n    v106 = v93;\n    v107 = v94;\n    v108 = v95;\n    goto lab_0x401ff0;\n  lab_0x401ff0:;\n    int64_t v109 = v108;\n    int64_t v110 = v107;\n    int64_t v111 = v106;\n    int64_t v112 = v105;\n    int64_t v113 = v103;\n    int64_t v114 = v102;\n    int64_t v115 = v101;\n    int64_t v116 = v100;\n    int3_t v117 = v99;\n    int3_t v118 = v98;\n    __frontend_reg_store_fpr(v117, 0.0L);\n    float80_t * v119 = (float80_t *)(v30 + 64); // 0x401ff2\n    __frontend_reg_store_fpr(v118, *v119);\n    float80_t v120 = __frontend_reg_load_fpr(v118); // 0x401ff6\n    __frontend_reg_store_fpr(v118, v120 * __frontend_reg_load_fpr(v117));\n    float80_t v121 = __frontend_reg_load_fpr(v118); // 0x401ff8\n    float80_t v122 = __frontend_reg_load_fpr(v117); // 0x401ff8\n    int64_t v123; // 0x4019b0\n    int64_t v124; // 0x4019b0\n    int64_t v125; // 0x4019b0\n    int64_t v126; // 0x4019b0\n    int64_t v127; // 0x4019b0\n    int64_t v128; // 0x4019b0\n    int64_t v129; // 0x4019b0\n    if (v121 != v122 == v121 == v122) {\n        // 0x401c85\n        __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v117));\n        v130 = v116;\n        v131 = v115;\n        v132 = v114;\n        v133 = v113;\n        v134 = v112;\n        v135 = v111;\n        v136 = v110;\n        v137 = v109;\n        goto lab_0x401c8f;\n    } else {\n        if (v121 != v122) {\n            // 0x401c89\n            __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v117));\n            v130 = v116;\n            v131 = v115;\n            v132 = v114;\n            v133 = v113;\n            v134 = v112;\n            v135 = v111;\n            v136 = v110;\n            v137 = v109;\n            goto lab_0x401c8f;\n        } else {\n            if ((int32_t)(v112 || v116 || v109) != 0) {\n                // 0x401c8d\n                __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v117));\n                v130 = v116;\n                v131 = v115;\n                v132 = v114;\n                v133 = v113;\n                v134 = v112;\n                v135 = v111;\n                v136 = v110;\n                v137 = v109;\n                goto lab_0x401c8f;\n            } else {\n                // 0x402014\n                __frontend_reg_store_fpr(v118, 1.0L);\n                int3_t v138 = v84 - 3; // 0x40201b\n                __frontend_reg_store_fpr(v138, *(float80_t *)(v30 + 96));\n                float80_t v139 = __frontend_reg_load_fpr(v138); // 0x40201f\n                float80_t v140 = __frontend_reg_load_fpr(v118); // 0x40201f\n                __frontend_reg_store_fpr(v118, __frontend_reg_load_fpr(v118));\n                if (v139 == v140 != (v139 == v139 && v140 == v140)) {\n                    // 0x40203d\n                    __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v117));\n                    v128 = 0;\n                    v129 = v115;\n                    v127 = v114;\n                    v126 = v113;\n                    v123 = v111;\n                    v124 = v110;\n                    v125 = v109;\n                    goto lab_0x40203f;\n                } else {\n                    // 0x40202d\n                    __frontend_reg_store_fpr(v118, *v119);\n                    float80_t v141 = __frontend_reg_load_fpr(v118); // 0x402031\n                    float80_t v142 = __frontend_reg_load_fpr(v117); // 0x402031\n                    __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v117));\n                    v128 = 0;\n                    v129 = v115;\n                    v127 = v114;\n                    v126 = v113;\n                    v123 = v111;\n                    v124 = v110;\n                    v125 = v109;\n                    v143 = v118;\n                    v144 = v117;\n                    v145 = 0;\n                    v146 = v115;\n                    v147 = v114;\n                    v148 = v113;\n                    v149 = v104;\n                    v150 = v111;\n                    v151 = v110;\n                    v152 = v109;\n                    if (v141 >= v142) {\n                        goto lab_0x4021d7;\n                    } else {\n                        goto lab_0x40203f;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4021d7:;\n    int64_t v153 = v152;\n    int64_t v154 = v151;\n    int64_t v155 = v150;\n    int64_t v156 = v148;\n    int64_t v157 = v147;\n    int64_t v158 = v146;\n    int64_t v159 = v145;\n    int3_t v160 = v144;\n    int3_t v161 = v143;\n    __frontend_reg_store_fpr(v160, 0.0L);\n    int64_t v162 = v30 + 48; // 0x4021d9\n    float80_t * v163 = (float80_t *)v162; // 0x4021d9\n    __frontend_reg_store_fpr(v161, *v163);\n    float80_t v164 = __frontend_reg_load_fpr(v161); // 0x4021dd\n    float80_t v165 = __frontend_reg_load_fpr(v160); // 0x4021dd\n    __frontend_reg_store_fpr(v160, __frontend_reg_load_fpr(v160));\n    v128 = v159;\n    v129 = v158;\n    v127 = v157;\n    v126 = v156;\n    v123 = v155;\n    v124 = v154;\n    v125 = v153;\n    int64_t * v166; // 0x4019b0\n    int64_t v167; // 0x4019b0\n    int64_t v168; // 0x4019b0\n    int64_t v169; // 0x4019b0\n    int64_t v170; // 0x4019b0\n    int64_t v171; // 0x4019b0\n    int64_t v172; // 0x4019b0\n    int64_t v173; // 0x4019b0\n    int64_t v174; // 0x4019b0\n    int64_t v175; // 0x4019b0\n    int64_t v176; // 0x4019b0\n    int64_t v177; // 0x4019b0\n    int64_t v178; // 0x4019b0\n    int64_t v179; // 0x4019b0\n    int64_t v180; // 0x4023f0\n    if (v164 < v165) {\n        goto lab_0x40203f;\n    } else {\n        // 0x4021e7\n        v128 = v159;\n        v129 = v158;\n        v127 = v157;\n        v126 = v156;\n        v123 = v155;\n        v124 = v154;\n        v125 = v153;\n        if (g36 != 0) {\n            goto lab_0x40203f;\n        } else {\n            // 0x4021f4\n            v177 = v159;\n            v179 = v158;\n            v176 = v157;\n            v175 = v156;\n            v168 = v155;\n            v169 = v154;\n            v172 = v153;\n            if (v157 != 0) {\n                goto lab_0x401c98;\n            } else {\n                int64_t v181 = v149;\n                int64_t v182 = (int64_t)g35; // 0x40220d\n                int64_t v183 = -1; // 0x4019b0\n                v174 = v156;\n                v173 = 0;\n                v167 = v155;\n                v170 = v154;\n                v171 = v153;\n                while (v183 != 0) {\n                    int64_t v184 = v182;\n                    int64_t v185 = v183 - 1; // 0x40220d\n                    v183 = v185;\n                    v182 = v184 + (v186 ? -1 : 1);\n                    if (*(char *)v184 == 0) {\n                        v174 = v156;\n                        v173 = 0;\n                        v167 = v155;\n                        v170 = v154;\n                        v171 = v153;\n                        if (v185 == -3) {\n                            // 0x4023df\n                            *(int64_t *)&v29 = v158;\n                            int64_t * v187 = (int64_t *)(v30 - 8); // 0x4023e8\n                            *v187 = *(int64_t *)(v30 + 72);\n                            int64_t * v188 = (int64_t *)(v30 - 16); // 0x4023ec\n                            *v188 = *(int64_t *)(v30 + 64);\n                            v180 = v30 + 112;\n                            int64_t v189 = function_405730(v180, (int64_t)\"%0.Lf\", v158, -3, v181, 0); // 0x4023f8\n                            int64_t v190 = *(int64_t *)&v29; // 0x402402\n                            __frontend_reg_store_fpr(v160, 0.0L);\n                            if ((int32_t)v189 < 0) {\n                                // 0x402365\n                                __frontend_reg_store_fpr(v160, __frontend_reg_load_fpr(v160));\n                                v178 = v180;\n                                goto lab_0x402367;\n                            } else {\n                                // 0x40240e\n                                __frontend_reg_store_fpr(v161, *v163);\n                                *(int64_t *)&v29 = v190;\n                                float80_t v191 = __frontend_reg_load_fpr(v161); // 0x402416\n                                __frontend_reg_store_fpr(v161, v191 * __frontend_reg_load_fpr(v160));\n                                float80_t v192 = __frontend_reg_load_fpr(v161); // 0x402418\n                                float80_t v193 = __frontend_reg_load_fpr(v160); // 0x402418\n                                __frontend_reg_store_fpr(v160, __frontend_reg_load_fpr(v160));\n                                if (v192 != v193) {\n                                    int64_t v194 = function_405630(\"inf\"); // 0x402429\n                                    int64_t * v195 = (int64_t *)(v30 + 120);\n                                    *v195 = v194;\n                                    v166 = v195;\n                                    goto lab_0x402437;\n                                } else {\n                                    // 0x402337\n                                    *v187 = *(int64_t *)(v30 + 56);\n                                    *v188 = *(int64_t *)v162;\n                                    int64_t v196 = v30 + 120;\n                                    int64_t v197 = function_405730(v196, (int64_t)\"%0.Lf\", v190, -3, v181, 0); // 0x40234e\n                                    v178 = v196;\n                                    if ((int32_t)v197 >= 0) {\n                                        // 0x402337\n                                        v166 = (int64_t *)v196;\n                                        goto lab_0x402437;\n                                    } else {\n                                        goto lab_0x402367;\n                                    }\n                                }\n                            }\n                        } else {\n                            goto lab_0x402219;\n                        }\n                    }\n                    v174 = v156;\n                    v173 = 0;\n                    v167 = v155;\n                    v170 = v154;\n                    v171 = v153;\n                }\n                goto lab_0x402219;\n            }\n        }\n    }\n  lab_0x401c8f:;\n    int64_t v198 = v137;\n    int64_t v199 = v136;\n    int64_t v200 = v135;\n    int64_t v201 = v133;\n    int64_t v202 = v131;\n    int64_t v203 = v130;\n    v177 = v203;\n    v179 = v202;\n    v176 = v132;\n    v175 = v201;\n    v168 = v200;\n    v169 = v199;\n    v172 = v198;\n    int64_t v204; // 0x4019b0\n    int64_t v205; // 0x4019b0\n    int64_t v206; // 0x4019b0\n    int64_t v207; // 0x4019b0\n    int64_t v208; // 0x4019b0\n    int64_t v209; // 0x4019b0\n    int64_t v210; // 0x4019b0\n    if (v132 == 0) {\n        // 0x402294\n        v177 = v203;\n        v179 = v202;\n        v176 = (int64_t)\"%Lg\";\n        v175 = v201;\n        v168 = v200;\n        v169 = v199;\n        v172 = v198;\n        if ((int32_t)v203 == 0x7fffffff) {\n            goto lab_0x401c98;\n        } else {\n            int64_t v211 = v134;\n            int32_t v212 = v198; // 0x402294\n            int32_t v213 = v212 - (int32_t)v211; // 0x402294\n            int64_t v214 = v213 < 0 == ((v213 ^ v212) & (int32_t)(v198 ^ v211)) < 0 ? v198 : v211;\n            v177 = v203;\n            v179 = v202;\n            v176 = (int64_t)\"%Lg\";\n            v175 = v201;\n            v168 = v200;\n            v169 = v199;\n            v172 = v198;\n            v209 = v203;\n            v210 = v202;\n            v208 = v201;\n            v207 = v214 & 0xffffffff;\n            v204 = v200;\n            v205 = v199;\n            v206 = v198;\n            if ((int32_t)v214 != 0x7fffffff) {\n                goto lab_0x402050;\n            } else {\n                goto lab_0x401c98;\n            }\n        }\n    } else {\n        goto lab_0x401c98;\n    }\n  lab_0x40203f:\n    // 0x40203f\n    v177 = v128;\n    v179 = v129;\n    v176 = v127;\n    v175 = v126;\n    v168 = v123;\n    v169 = v124;\n    v172 = v125;\n    v209 = 0;\n    v210 = v129;\n    v208 = v126;\n    v207 = 0;\n    v204 = v123;\n    v205 = v124;\n    v206 = 0;\n    if (v127 != 0) {\n        goto lab_0x401c98;\n    } else {\n        goto lab_0x402050;\n    }\n  lab_0x401c98:;\n    int64_t v215 = v172;\n    v67 = v169;\n    v66 = v168;\n    int64_t v216 = v175;\n    v62 = v176;\n    int64_t v217 = v179;\n    int64_t v218 = v177;\n    float80_t * v219 = (float80_t *)(v30 + 96); // 0x401c98\n    int3_t v220 = v84 - 1; // 0x401c98\n    __frontend_reg_store_fpr(v220, *v219);\n    int3_t v221 = v84 - 2; // 0x401c9c\n    __frontend_reg_store_fpr(v221, 0.0L);\n    float80_t v222 = __frontend_reg_load_fpr(v221); // 0x401c9e\n    float80_t v223 = __frontend_reg_load_fpr(v220); // 0x401c9e\n    bool v224 = false; // 0x401c9e\n    bool v225 = false; // 0x401c9e\n    if (v222 <= v223) {\n        v224 = true;\n        v225 = false;\n        if (v222 >= v223) {\n            v224 = v222 != v223;\n            v225 = true;\n        }\n    }\n    __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220));\n    bool v226; // 0x4019b0\n    if (v224 || v225) {\n        // 0x401ca8\n        __frontend_reg_store_fpr(v220, *(float80_t *)(v30 + 48));\n        __frontend_reg_store_fpr(v221, *(float80_t *)(v30 + 64));\n        float80_t v227 = __frontend_reg_load_fpr(v221); // 0x401cb0\n        float80_t v228 = __frontend_reg_load_fpr(v220); // 0x401cb0\n        bool v229 = false; // 0x401cb0\n        bool v230 = false; // 0x401cb0\n        if (v227 <= v228) {\n            v229 = true;\n            v230 = false;\n            if (v227 >= v228) {\n                v229 = v227 != v228;\n                v230 = true;\n            }\n        }\n        __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220));\n        v226 = v229 | v230;\n    } else {\n        // 0x40227f\n        __frontend_reg_store_fpr(v220, *(float80_t *)(v30 + 64));\n        __frontend_reg_store_fpr(v221, *(float80_t *)(v30 + 48));\n        float80_t v231 = __frontend_reg_load_fpr(v221); // 0x402287\n        float80_t v232 = __frontend_reg_load_fpr(v220); // 0x402287\n        bool v233 = false; // 0x402287\n        bool v234 = false; // 0x402287\n        if (v231 <= v232) {\n            v233 = true;\n            v234 = false;\n            if (v231 >= v232) {\n                v233 = v231 != v232;\n                v234 = true;\n            }\n        }\n        __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220));\n        v226 = v233 | v234;\n    }\n    bool v235 = v226;\n    if (!v235) {\n        // 0x40226b\n        return 0;\n    }\n    float80_t * v236 = (float80_t *)(v30 + 64); // 0x401cc1\n    __frontend_reg_store_fpr(v220, *v236);\n    float80_t v237 = __frontend_reg_load_fpr(v220); // 0x401cc5\n    int64_t v238 = v30 + 32; // 0x401cc5\n    float80_t * v239 = (float80_t *)v238; // 0x401cc5\n    *v239 = v237;\n    __frontend_reg_store_fpr(v220, 1.0L);\n    float80_t v240 = __frontend_reg_load_fpr(v220); // 0x401ccb\n    float80_t * v241 = (float80_t *)(v30 + 16); // 0x401ccb\n    *v241 = v240;\n    int64_t * v242 = (int64_t *)(v30 + 40); // 0x401e2a\n    int64_t * v243 = (int64_t *)(v30 - 8); // 0x401e2a\n    *v243 = *v242;\n    int64_t * v244 = (int64_t *)v238; // 0x401e2e\n    int64_t * v245 = (int64_t *)(v30 - 16); // 0x401e2e\n    *v245 = *v244;\n    char * v246 = (char *)v62; // 0x401e32\n    int32_t v247 = __printf_chk(1, v246); // 0x401e32\n    int64_t v248 = *v245; // 0x401e37\n    int64_t v249 = *v243; // 0x401e39\n    v64 = v248;\n    v65 = v249;\n    v63 = v216;\n    v68 = v215;\n    int64_t v250; // 0x4019b0\n    int64_t v251; // 0x4019b0\n    if (v247 < 0) {\n        goto lab_0x4022c3_2;\n    } else {\n        int3_t v252 = v84 - 3;\n        float80_t * v253 = (float80_t *)(v30 + 48);\n        int64_t v254 = v30 + 128;\n        str3 = (int64_t *)v254;\n        int64_t v255 = v30 + 144;\n        float80_t * v256 = (float80_t *)v255;\n        int64_t v257 = v30 + 136;\n        int64_t * v258 = (int64_t *)v257;\n        bool v259 = !v235; // 0x4019b0\n        int64_t v260 = v217; // 0x4019b0\n        int64_t v261 = v218; // 0x4019b0\n        int64_t v262 = v216;\n        v263 = v215;\n        v251 = v248;\n        v250 = v249;\n        v264 = v262;\n        v265 = v263;\n        while (!v259) {\n            int64_t v266 = v261;\n            int64_t v267 = v260;\n            __frontend_reg_store_fpr(v220, *v241);\n            __frontend_reg_store_fpr(v221, *v219);\n            __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220) * __frontend_reg_load_fpr(v221));\n            __frontend_reg_store_fpr(v252, *v236);\n            __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v252) + __frontend_reg_load_fpr(v220));\n            float80_t v268 = __frontend_reg_load_fpr(v221); // 0x401e5c\n            __frontend_reg_store_fpr(v221, __frontend_reg_load_fpr(v220));\n            __frontend_reg_store_fpr(v220, v268);\n            __frontend_reg_store_fpr(v252, __frontend_reg_load_fpr(v221));\n            *(float80_t *)&v29 = __frontend_reg_load_fpr(v252);\n            __frontend_reg_store_fpr(v252, 0.0L);\n            float80_t v269 = __frontend_reg_load_fpr(v252); // 0x401e65\n            float80_t v270 = __frontend_reg_load_fpr(v220); // 0x401e65\n            bool v271 = false; // 0x401e65\n            bool v272 = false; // 0x401e65\n            if (v269 <= v270) {\n                v271 = true;\n                v272 = false;\n                if (v269 >= v270) {\n                    v271 = v269 != v270;\n                    v272 = true;\n                }\n            }\n            __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v221));\n            bool v273; // 0x4019b0\n            if (v271 || v272) {\n                // 0x401cd8\n                __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220));\n                __frontend_reg_store_fpr(v220, *v253);\n                __frontend_reg_store_fpr(v221, *(float80_t *)&v29);\n                float80_t v274 = __frontend_reg_load_fpr(v221); // 0x401ce1\n                float80_t v275 = __frontend_reg_load_fpr(v220); // 0x401ce1\n                bool v276 = false; // 0x401ce1\n                bool v277 = false; // 0x401ce1\n                if (v274 <= v275) {\n                    v276 = true;\n                    v277 = false;\n                    if (v274 >= v275) {\n                        v276 = v274 != v275;\n                        v277 = true;\n                    }\n                }\n                __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220));\n                v273 = v276 | v277;\n            } else {\n                // 0x401e6f\n                __frontend_reg_store_fpr(v221, *v253);\n                float80_t v278 = __frontend_reg_load_fpr(v221); // 0x401e73\n                float80_t v279 = __frontend_reg_load_fpr(v220); // 0x401e73\n                bool v280 = false; // 0x401e73\n                bool v281 = false; // 0x401e73\n                if (v278 <= v279) {\n                    v280 = true;\n                    v281 = false;\n                    if (v278 >= v279) {\n                        v280 = v278 != v279;\n                        v281 = true;\n                    }\n                }\n                __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220));\n                v273 = v280 | v281;\n            }\n            bool v282 = v273;\n            int64_t v283 = v266; // 0x401cec\n            int64_t v284 = v267; // 0x401cec\n            int64_t v285 = v262; // 0x401cec\n            int64_t v286 = v263; // 0x401cec\n            if (!v282) {\n                // 0x401cf2\n                setlocale(LC_NUMERIC, \"C\");\n                *v243 = *(int64_t *)(v30 | 8);\n                *v245 = *(int64_t *)&v29;\n                int64_t v287 = 0x100000000 * function_405730(v254, v62, v267, v266, v251, v250) >> 32; // 0x401d25\n                setlocale(LC_NUMERIC, (char *)&g11);\n                v178 = *v243;\n                if ((int32_t)v287 < 0) {\n                    // 0x402367\n                    function_405650(v178);\n                    // UNREACHABLE\n                }\n                // 0x401d37\n                v288 = v287 - v66;\n                *(char *)(*str3 + v288) = 0;\n                if ((char)function_405690(*str3 + v67, 0, v255, 0x4030e0) == 0) {\n                    goto lab_0x402248_2;\n                }\n                // 0x401d6d\n                __frontend_reg_store_fpr(v220, *v253);\n                __frontend_reg_store_fpr(v221, *v256);\n                float80_t v289 = __frontend_reg_load_fpr(v221); // 0x401d78\n                float80_t v290 = __frontend_reg_load_fpr(v220); // 0x401d78\n                __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v220));\n                if (v289 != v290) {\n                    goto lab_0x402248_2;\n                }\n                // 0x401d88\n                *v258 = 0;\n                *v243 = *v242;\n                *v245 = *v244;\n                int64_t v291 = function_405730(v257, v62, v255, 0x4030e0, v251, v250); // 0x401da9\n                v178 = v257;\n                if ((int32_t)v291 < 0) {\n                    // 0x402367\n                    function_405650(v178);\n                    // UNREACHABLE\n                }\n                int64_t str2 = *v258; // 0x401db8\n                uint32_t strcmp_rc = strcmp((char *)str2, (char *)*str3); // 0x401dcb\n                free((int64_t *)str2);\n                free((int64_t *)*str3);\n                v283 = *v243;\n                v284 = *v245;\n                v285 = str2;\n                v286 = strcmp_rc;\n                v264 = str2;\n                v265 = 0;\n                if (strcmp_rc == 0) {\n                    // break -> 0x402255\n                    break;\n                }\n            }\n            int64_t v292 = v286;\n            int64_t v293 = v285;\n            v64 = v251;\n            v65 = v250;\n            v63 = v293;\n            v68 = v292;\n            if (fputs_unlocked(g35, g29) == -1) {\n                goto lab_0x4022c3_2;\n            }\n            // 0x401e0d\n            __frontend_reg_store_fpr(v220, 1.0L);\n            __frontend_reg_store_fpr(v221, *v241);\n            __frontend_reg_store_fpr(v220, __frontend_reg_load_fpr(v221) + __frontend_reg_load_fpr(v220));\n            *v241 = __frontend_reg_load_fpr(v220);\n            __frontend_reg_store_fpr(v220, *(float80_t *)&v29);\n            *v239 = __frontend_reg_load_fpr(v220);\n            *v243 = *v242;\n            *v245 = *v244;\n            int32_t v294 = __printf_chk(1, v246); // 0x401e32\n            int64_t v295 = *v245; // 0x401e37\n            int64_t v296 = *v243; // 0x401e39\n            v259 = !v282;\n            v260 = v284;\n            v261 = v283;\n            v64 = v295;\n            v65 = v296;\n            v63 = v293;\n            v68 = v292;\n            if (v294 < 0) {\n                goto lab_0x4022c3_2;\n            }\n            v262 = v293;\n            v263 = v292;\n            v251 = v295;\n            v250 = v296;\n            v264 = v262;\n            v265 = v263;\n        }\n        goto lab_0x402255;\n    }\n  lab_0x402050:;\n    int64_t v297 = v206;\n    int64_t v298 = v205;\n    int64_t v299 = v204;\n    int64_t v300 = v207;\n    int64_t v301 = v208;\n    v174 = v301;\n    v173 = v300;\n    v167 = v299;\n    v170 = v298;\n    v171 = v297;\n    if (g36 == 0) {\n        goto lab_0x402219;\n    } else {\n        int64_t v302 = (0x100000000 * (v300 - v297) >> 32) + v210; // 0x402065\n        int64_t v303 = (0x100000000 * (v300 - v209) >> 32) + v301; // 0x40206f\n        if ((int32_t)v209 != 0 == v300 == 0) {\n            int64_t v304 = v302; // 0x4022be\n            int64_t v305 = v303 - 1; // 0x4022be\n        }\n        uint64_t v306 = v303 + (int64_t)((int32_t)v209 == 0 == (v300 != 0));\n        int64_t v307 = v302 + (int64_t)(v300 != 0 == (int32_t)v297 == 0);\n        int64_t v308 = v306 < v307 ? v307 : v306; // 0x40209f\n        v177 = v209;\n        v179 = v307;\n        v176 = (int64_t)\"%Lg\";\n        v175 = v308;\n        v168 = v299;\n        v169 = v298;\n        v172 = v297;\n        if (v308 < 0x80000000) {\n            // 0x4020b0\n            __sprintf_chk((char *)&g34, 1, 28, \"%%0%d.%dLf\", v308 & 0xffffffff, v300);\n            v177 = (int64_t)\"%%0%d.%dLf\";\n            v179 = 28;\n            v176 = (int64_t)&g34;\n            v175 = v308;\n            v168 = v299;\n            v169 = v298;\n            v172 = v297;\n        }\n        goto lab_0x401c98;\n    }\n  lab_0x402219:\n    // 0x402219\n    __sprintf_chk((char *)&g34, 1, 28, \"%%.%dLf\", v173 & 0xffffffff);\n    v177 = (int64_t)\"%%.%dLf\";\n    v179 = 28;\n    v176 = (int64_t)&g34;\n    v175 = v174;\n    v168 = v167;\n    v169 = v170;\n    v172 = v171;\n    goto lab_0x401c98;\n  lab_0x402255:\n    // 0x402255\n    v64 = v251;\n    v65 = v250;\n    v63 = v264;\n    v68 = v265;\n    if (fputs_unlocked(\"\\n\", g29) != -1) {\n      lab_0x40226b:\n        // 0x40226b\n        return 0;\n    }\n    goto lab_0x4022c3_2;\n  lab_0x401ebc:;\n    int64_t v309 = v44 + (int64_t)(v40 == 76); // 0x401ec7\n    int64_t v310 = v309 + v13; // 0x401ecb\n    char * str4 = (char *)v310; // 0x401ecf\n    char c = *str4; // 0x401ed4\n    int64_t v311 = v13; // 0x401ed9\n    int64_t v312; // 0x4019b0\n    int64_t v313; // 0x4019b0\n    if (c == 0) {\n        goto lab_0x4024be;\n    } else {\n        // 0x401edf\n        if (strchr(\"efgaEFGA\", (int32_t)c) != NULL) {\n            // 0x401f10\n            v313 = v309 + 1;\n            v312 = 0;\n            goto lab_0x401f10_2;\n        } else {\n            int64_t v314 = function_404e40(v13); // 0x40248c\n            error(1, (int32_t)\"format %s has unknown %%%c directive\" ^ (int32_t)\"format %s has unknown %%%c directive\", dcgettext(NULL, \"format %s has unknown %%%c directive\", 5));\n            v311 = v314;\n            goto lab_0x4024be;\n        }\n    }\n  lab_0x4024be:\n    // 0x4024be\n    function_404e40(v311);\n    error(1, (int32_t)\"format %s ends in %%\" ^ (int32_t)\"format %s ends in %%\", dcgettext(NULL, \"format %s ends in %%\", 5));\n    goto lab_0x4024ee;\n  lab_0x4024ee:\n    // 0x4024ee\n    error(0, (int32_t)\"format string may not be specified when printing equal width strings\" ^ (int32_t)\"format string may not be specified when printing equal width strings\", dcgettext(NULL, \"format string may not be specified when printing equal width strings\", 5));\n    function_402a40(1);\n    // UNREACHABLE\n  lab_0x401f10_2:;\n    int64_t v315 = v312;\n    int64_t v316 = v313;\n    int64_t v317 = v316 + v13;\n    char v318 = *(char *)v317; // 0x401f10\n    int64_t v319; // 0x4019b0\n    if (v318 != 37) {\n        // 0x401f00\n        v319 = 1;\n        if (v318 == 0) {\n            int64_t v320 = function_405400(v316 + 2); // 0x401f2e\n            int64_t dest_mem = (int64_t)memcpy((int64_t *)v320, (int64_t *)v13, (int32_t)v44); // 0x401f3c\n            int64_t v321 = v44 + dest_mem;\n            *(char *)v321 = 76;\n            strcpy((char *)(v321 + 1), str4);\n            if (g36 != 0) {\n                goto lab_0x4024ee;\n            } else {\n                // 0x401f67\n                v33 = v50;\n                v34 = dest_mem;\n                v35 = v310;\n                v36 = dest_mem;\n                v37 = v315;\n                v38 = v49 - 1;\n                v39 = g26;\n                goto lab_0x401b82;\n            }\n        } else {\n            goto lab_0x401f09;\n        }\n    } else {\n        // 0x401f18\n        v319 = 2;\n        if (*(char *)(v317 + 1) != 37) {\n            // 0x40236c\n            function_404e40(v13);\n            error(1, (int32_t)\"format %s has too many %% directives\" ^ (int32_t)\"format %s has too many %% directives\", dcgettext(NULL, \"format %s has too many %% directives\", 5));\n            goto lab_0x40239c;\n        } else {\n            goto lab_0x401f09;\n        }\n    }\n  lab_0x401f09:\n    // 0x401f09\n    v313 = v319 + v316;\n    v312 = v315 + 1;\n    goto lab_0x401f10_2;\n  lab_0x402437:;\n    int64_t v322 = *(int64_t *)&v29;\n    int64_t * v323 = v166;\n    int64_t * v324 = (int64_t *)v180; // 0x402437\n    int64_t v325 = *v324; // 0x402437\n    int64_t v326 = v322; // 0x40243f\n    int64_t v327 = v325; // 0x40243f\n    if (*(char *)v325 == 45) {\n        goto lab_0x402465;\n    } else {\n        int64_t v328 = *v323; // 0x402441\n        v326 = v322;\n        v327 = v325;\n        if (*(char *)v328 == 45) {\n            goto lab_0x402465;\n        } else {\n            // 0x40244b\n            *(int64_t *)&v29 = v322;\n            if ((char)function_402680(v325, v328) != 0) {\n                goto lab_0x40226b;\n            } else {\n                // 0x40245c\n                v326 = *(int64_t *)&v29;\n                v327 = *v324;\n                goto lab_0x402465;\n            }\n        }\n    }\n  lab_0x402465:\n    // 0x402465\n    *(int64_t *)&v29 = v326;\n    free((int64_t *)v327);\n    free((int64_t *)*v323);\n    v209 = 0;\n    v210 = *(int64_t *)&v29;\n    v208 = v156;\n    v207 = 0;\n    v204 = v155;\n    v205 = v154;\n    v206 = 0;\n    goto lab_0x402050;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402520",
            "funcEndAddr": "40254b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402520\n    int64_t v1; // 0x402520\n    __libc_start_main(0x4019b0, (int32_t)a4, (char **)&v1, (void (*)())0x409810, (void (*)())0x409870, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40254b",
            "funcStartAddr": "40254b",
            "funcEndAddr": "40256a",
            "decompiledFuncCode": "int64_t function_40254b(void) {\n    // 0x40254b\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_40256a",
            "funcStartAddr": "40256a",
            "funcEndAddr": "4025a1",
            "decompiledFuncCode": "int64_t function_40256a(void) {\n    // 0x40256a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4025a1",
            "funcStartAddr": "4025a1",
            "funcEndAddr": "4025f8",
            "decompiledFuncCode": "int64_t function_4025a1(void) {\n    // 0x4025a1\n    if (g32 != 0) {\n        // 0x4025f7\n        int64_t result; // 0x4025a1\n        return result;\n    }\n    int64_t v1 = g33; // 0x4025d4\n    int64_t result2; // 0x4025e6\n    if (g33 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x4025e6\n        result2 = function_40254b();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x4025d6\n        v1++;\n    }\n    // 0x4025ca\n    g33 = v1;\n    // 0x4025e6\n    result2 = function_40254b();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4025f8",
            "funcStartAddr": "4025f8",
            "funcEndAddr": "4025fd",
            "decompiledFuncCode": "int64_t function_4025f8(void) {\n    // 0x4025f8\n    return function_40256a();\n}\n"
        },
        {
            "funcName": "function_402600",
            "funcStartAddr": "402600",
            "funcEndAddr": "402637",
            "decompiledFuncCode": "int64_t function_402600(int64_t str, int64_t a2, int64_t a3, int64_t a4) {\n    char v1 = str;\n    if (v1 != 57 && (int32_t)v1 >= 57) {\n        // 0x402636\n        return 0;\n    }\n    int64_t v2 = str; // 0x402615\n    int64_t v3 = -1; // 0x402615\n    int64_t v4 = 0; // 0x402615\n    while (v3 != 0) {\n        int64_t v5 = v2;\n        v3--;\n        bool v6; // 0x402600\n        v2 = v5 + (v6 ? -1 : 1);\n        v4 = v3;\n        if (*(char *)v5 == 0) {\n            // break -> \n            break;\n        }\n        v4 = 0;\n    }\n    int64_t ini_seg_bytes = strspn((char *)str, \"0123456789\"); // 0x402629\n    return ini_seg_bytes & -256 | (int64_t)(v4 + 2 == -ini_seg_bytes);\n}\n"
        },
        {
            "funcName": "function_402640",
            "funcStartAddr": "402640",
            "funcEndAddr": "402680",
            "decompiledFuncCode": "int64_t function_402640(void) {\n    // 0x402640\n    clearerr_unlocked(g29);\n    error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n    return &g55;\n}\n"
        },
        {
            "funcName": "function_402680",
            "funcStartAddr": "402680",
            "funcEndAddr": "402a40",
            "decompiledFuncCode": "int64_t function_402680(int64_t a1, int64_t a2) {\n    // 0x402680\n    bool v1; // 0x402680\n    int64_t v2 = v1 ? -1 : 1;\n    int64_t v3 = (int64_t)\"inf\"; // 0x4026a1\n    int64_t v4 = a2; // 0x4026a1\n    int64_t v5 = 4; // 0x4026a1\n    unsigned char v6 = *(char *)v4; // 0x4026a1\n    char v7 = *(char *)v3; // 0x4026a1\n    v3 += v2;\n    v4 += v2;\n    char v8 = v7; // 0x4026a1\n    bool v9 = false; // 0x4026a1\n    while (v6 == v7) {\n        v5--;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v3 += v2;\n        v4 += v2;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    int64_t str = a1; // 0x4026b3\n    if ((char)v3 == 48) {\n        int64_t v11 = a1;\n        int64_t v12 = v11 + 1; // 0x4026c3\n        char v13 = *(char *)v12; // 0x4026c3\n        while (v13 == 48) {\n            // 0x4026c3\n            v11 = v12;\n            v12 = v11 + 1;\n            v13 = *(char *)v12;\n        }\n        // 0x4026d0\n        str = v12 == a1 | v13 != 0 ? v12 : v11;\n    }\n    int64_t v14 = a2; // 0x4026e8\n    if ((char)v4 == 48) {\n        int64_t v15 = a2;\n        int64_t v16 = v15 + 1; // 0x4026f3\n        char v17 = *(char *)v16; // 0x4026f3\n        while (v17 == 48) {\n            // 0x4026f3\n            v15 = v16;\n            v16 = v15 + 1;\n            v17 = *(char *)v16;\n        }\n        // 0x402700\n        v14 = v16 == a2 | v17 != 0 ? v16 : v15;\n    }\n    int32_t len = strlen((char *)str); // 0x40271e\n    uint64_t v18 = (int64_t)len; // 0x40271e\n    uint64_t v19 = v18 + 1; // 0x402723\n    int64_t v20 = v19 >= 31 ? v19 : 31; // 0x402731\n    int64_t v21 = v14; // 0x402738\n    int64_t v22 = -1; // 0x402738\n    int64_t v23; // 0x402680\n    int64_t v24; // 0x402680\n    int64_t v25; // 0x402680\n    int64_t v26; // 0x402680\n    int64_t str3; // 0x402680\n    int64_t v27; // 0x402680\n    int64_t v28; // 0x402680\n    int64_t v29; // 0x402680\n    int64_t v30; // 0x402680\n    int64_t result; // 0x402680\n    if ((v6 >= v10 && !v9) == v6 < v10) {\n        int64_t v31 = v20 + 1; // 0x40282d\n        int64_t v32 = function_405400(v31); // 0x402839\n        int64_t * dest_mem = memcpy((int64_t *)(v20 - v18 + v32), (int64_t *)str, (int32_t)v19); // 0x402854\n        v28 = 0;\n        str3 = 0;\n        v30 = v32;\n        v26 = 0;\n        v25 = v20;\n        v23 = v31;\n        v24 = (int64_t)dest_mem;\n        goto lab_0x402877;\n    } else {\n        int64_t v33 = 0; // 0x402756\n        while (v22 != 0) {\n            int64_t v34 = v21;\n            v22--;\n            v21 = v34 + v2;\n            v33 = v22;\n            if (*(char *)v34 == 0) {\n                // break -> \n                break;\n            }\n            v33 = 0;\n        }\n        uint64_t v35 = -2 - v33; // 0x40275b\n        int64_t v36 = v20 < v35 ? v35 : v20; // 0x40276c\n        int64_t v37 = v36 + 1; // 0x402770\n        int64_t v38 = function_405400(v37); // 0x402777\n        int64_t * dest_mem2 = memcpy((int64_t *)(v38 - v18 + v36), (int64_t *)str, (int32_t)v19); // 0x402792\n        int64_t v39 = (int64_t)dest_mem2; // 0x402792\n        int64_t v40 = function_405400(v37); // 0x4027a2\n        int64_t * dest_mem3 = memcpy((int64_t *)(v36 - v35 + v40), (int64_t *)v14, -1 - (int32_t)v33); // 0x4027c7\n        int64_t v41 = (int64_t)dest_mem3; // 0x4027c7\n        v28 = v40;\n        str3 = v41;\n        v30 = v38;\n        v26 = v35;\n        v25 = v36;\n        v23 = v37;\n        v24 = v39;\n        if (v35 > v18) {\n            goto lab_0x402877;\n        } else {\n            // 0x4027dc\n            v27 = v40;\n            v29 = v38;\n            result = 0;\n            if (v35 < v18) {\n                goto lab_0x4027f8;\n            } else {\n                // 0x4027de\n                v27 = v40;\n                v29 = v38;\n                result = 0;\n                v28 = v40;\n                str3 = v41;\n                v30 = v38;\n                v26 = v35;\n                v25 = v36;\n                v23 = v37;\n                v24 = v39;\n                if (strcmp((char *)dest_mem2, (char *)dest_mem3) < 1) {\n                    goto lab_0x402877;\n                } else {\n                    goto lab_0x4027f8;\n                }\n            }\n        }\n    }\n  lab_0x402992:;\n    // 0x402992\n    int64_t v42; // 0x402680\n    int64_t v43 = v42;\n    int64_t v44; // 0x402680\n    int64_t v45 = 2 * v44; // 0x402992\n    int64_t v46 = v45 | 1; // 0x40299a\n    int64_t v47; // 0x402680\n    int64_t v48 = function_405460(v47, v46); // 0x4029a6\n    int64_t dest_mem4 = (int64_t)memmove((int64_t *)(v48 + v43), (int64_t *)v48, (int32_t)v43 + 1); // 0x4029bb\n    int64_t v49 = 2 * v46; // 0x4029c8\n    int64_t v50; // 0x402680\n    int64_t v51 = v50; // 0x4029d0\n    int64_t v52 = v48; // 0x4029d0\n    int64_t v53; // 0x402680\n    int64_t v54 = v53; // 0x4029d0\n    int64_t v55 = v45; // 0x4029d0\n    int64_t v56 = v43; // 0x4029d0\n    int64_t data2; // 0x402680\n    int64_t v57 = data2; // 0x4029d0\n    int64_t v58; // 0x4028fe\n    int64_t v59 = v58; // 0x4029d0\n    int64_t v60 = dest_mem4; // 0x4029d0\n    if (v49 > v53) {\n        int64_t v61 = function_405460(data2, v49); // 0x4029e4\n        v51 = v61 + v49;\n        v52 = v48;\n        v54 = v49;\n        v55 = v45;\n        v56 = v43;\n        v57 = v61;\n        v59 = v58 - data2 + v61;\n        v60 = dest_mem4;\n    }\n    goto lab_0x40292f;\n  lab_0x40292f:;\n    int64_t data = v57;\n    int64_t v62 = (int64_t)mempcpy((int64_t *)v59, (int64_t *)v60, (int32_t)v56); // 0x402938\n    int64_t v63 = v62; // 0x40294e\n    if (v51 + -1 - v56 < v62) {\n        int32_t v64 = fwrite_unlocked((int64_t *)data, (int32_t)(v62 - data), 1, g29); // 0x402969\n        v63 = data;\n        if (v64 != 1) {\n            // 0x402a35\n            return function_402640();\n        }\n    }\n    int64_t v65 = v51; // 0x402680\n    int64_t v66 = v52; // 0x402680\n    int64_t v67 = v54; // 0x402680\n    int64_t v68 = v63; // 0x402680\n    int64_t v69 = v55; // 0x402680\n    int64_t v70 = v56; // 0x402680\n    int64_t v71 = data; // 0x402680\n    int64_t v72 = v60; // 0x402680\n    goto lab_0x4028c0;\n  lab_0x402877:;\n    uint64_t v81 = 2 * v23; // 0x402877\n    int64_t v82 = v81 >= 0x2000 ? v81 : 0x2000; // 0x402886\n    int64_t v83 = function_405400(v82); // 0x402892\n    int64_t * v84 = mempcpy((int64_t *)v83, (int64_t *)v24, len); // 0x4028b0\n    v65 = v82 + v83;\n    v66 = v30;\n    v67 = v82;\n    v68 = (int64_t)v84;\n    v69 = v25;\n    v70 = v18;\n    v71 = v83;\n    v72 = v24;\n    int64_t v74; // 0x402680\n    while (true) {\n      lab_0x4028c0:;\n        int64_t str2 = v72;\n        data2 = v71;\n        uint64_t v73 = v70;\n        v44 = v69;\n        v74 = v68;\n        v53 = v67;\n        v47 = v66;\n        v50 = v65;\n        if ((v6 >= v10 && !v9) != v6 < v10 && v73 >= v26) {\n            if (v73 > v26) {\n                // break -> 0x402a07\n                break;\n            }\n            // 0x4028d8\n            if (strcmp((char *)str2, (char *)str3) >= 0) {\n                // break -> 0x402a07\n                break;\n            }\n        }\n        // 0x4028f7\n        v58 = v74 + 1;\n        *(char *)v74 = *g35;\n        int64_t v75 = str2 - 1; // 0x402907\n        int64_t v76 = v75 + v73;\n        char * v77 = (char *)v76;\n        unsigned char v78 = *v77; // 0x40291d\n        while (v78 > 56) {\n            int64_t v79 = v76 - 1; // 0x402910\n            *v77 = 48;\n            if (v79 < str2) {\n                int64_t v80 = v73 + 1; // 0x402980\n                *(char *)v75 = 49;\n                v51 = v50;\n                v52 = v47;\n                v54 = v53;\n                v55 = v44;\n                v56 = v80;\n                v57 = data2;\n                v59 = v58;\n                v60 = v75;\n                v42 = v80;\n                if (v44 != v80) {\n                    goto lab_0x40292f;\n                } else {\n                    goto lab_0x402992;\n                }\n            }\n            v76 = v79;\n            v77 = (char *)v76;\n            v78 = *v77;\n        }\n        // 0x402925\n        *v77 = v78 + 1;\n        v51 = v50;\n        v52 = v47;\n        v54 = v53;\n        v55 = v44;\n        v56 = v73;\n        v57 = data2;\n        v59 = v58;\n        v60 = str2;\n        v42 = v44;\n        if (v44 == v73) {\n            goto lab_0x402992;\n        } else {\n            goto lab_0x40292f;\n        }\n    }\n    // 0x402a07\n    *(char *)v74 = 10;\n    v27 = v28;\n    v29 = v47;\n    result = 1;\n    if (fwrite_unlocked((int64_t *)data2, (int32_t)(v74 + 1 - data2), 1, g29) != 1) {\n        // 0x402a35\n        return function_402640();\n    }\n    goto lab_0x4027f8;\n  lab_0x4027f8:\n    // 0x4027f8\n    free((int64_t *)v29);\n    free((int64_t *)v27);\n    return result;\n}\n"
        },
        {
            "funcName": "function_402a40",
            "funcStartAddr": "402a40",
            "funcEndAddr": "402dbd",
            "decompiledFuncCode": "int64_t function_402a40(int32_t status) {\n    // 0x402a40\n    if (status != 0) {\n        // 0x402a5a\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402a7f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402a86\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... LAST\\n  or:  %s [OPTION]... FIRST LAST\\n  or:  %s [OPTION]... FIRST INCREMENT LAST\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print numbers from FIRST to LAST, in steps of INCREMENT.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -f, --format=FORMAT      use printf style floating-point FORMAT\\n  -s, --separator=STRING   use STRING to separate numbers (default: \\\\n)\\n  -w, --equal-width        equalize width by padding with leading zeroes\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf FIRST or INCREMENT is omitted, it defaults to 1.  That is, an\\nomitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.\\nThe sequence of numbers ends when the sum of the current number and\\nINCREMENT would become greater than LAST.\\nFIRST, INCREMENT, and LAST are interpreted as floating point values.\\nINCREMENT is usually positive if FIRST is smaller than LAST, and\\nINCREMENT is usually negative if FIRST is greater than LAST.\\nINCREMENT must not be 0; none of FIRST, INCREMENT and LAST may be NaN.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"FORMAT must be suitable for printing one argument of type 'double';\\nit defaults to %.PRECf if FIRST, INCREMENT, and LAST are all fixed point\\ndecimal numbers with maximum precision PREC, and to %g otherwise.\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x402b9f\n    bool v2; // 0x402a40\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402c20\n    int64_t v6 = *(int64_t *)v5; // 0x402c24\n    int64_t v7 = 4; // 0x402c2a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"seq\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402c36\n        char v11 = *(char *)v9; // 0x402c36\n        char v12 = v11; // 0x402c36\n        bool v13 = false; // 0x402c36\n        while (v10 == v11) {\n            // 0x402c2c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402c36\n            int64_t v15 = v8 + v3; // 0x402c36\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402c42\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x402c42\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402d54;\n        } else {\n            // 0x402d3e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d93\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ca4;\n            } else {\n                goto lab_0x402d54;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402ca4;\n        } else {\n            // 0x402c8a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d93\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402ca4;\n            } else {\n                goto lab_0x402ca4;\n            }\n        }\n    }\n  lab_0x402d54:\n    // 0x402d54\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402ce4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402a7f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402ca4:\n    // 0x402ca4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402ce4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402a7f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402dc0",
            "funcStartAddr": "402dc0",
            "funcEndAddr": "4030d8",
            "decompiledFuncCode": "int64_t function_402dc0(int64_t * a1, int64_t a2) {\n    // 0x402dc0\n    float80_t v1; // bp-88, 0x402dc0\n    if ((char)function_405690(a2, 0, (int64_t)&v1, 0x4030e0) == 0) {\n        // 0x4030a1\n        function_404e40(a2);\n        error(0, (int32_t)\"invalid floating point argument: %s\" ^ (int32_t)\"invalid floating point argument: %s\", dcgettext(NULL, \"invalid floating point argument: %s\", 5));\n        function_402a40(1);\n        // UNREACHABLE\n    }\n    // 0x402df0\n    int3_t v2; // 0x402dc0\n    int3_t v3 = v2 - 1; // 0x402df0\n    __frontend_reg_store_fpr(v3, v1);\n    int3_t v4 = v2 - 2; // 0x402df4\n    __frontend_reg_store_fpr(v4, __frontend_reg_load_fpr(v3));\n    float80_t v5 = __frontend_reg_load_fpr(v4); // 0x402df6\n    if (__frontend_reg_load_fpr(v3) != __frontend_reg_load_fpr(v3)) {\n        // 0x403053\n        function_404e20(1, a2);\n        function_404e20(0, (int64_t)\"not-a-number\");\n        error(0, (int32_t)\"invalid %s argument: %s\" ^ (int32_t)\"invalid %s argument: %s\", dcgettext(NULL, \"invalid %s argument: %s\", 5));\n        function_402a40(1);\n        // UNREACHABLE\n    }\n    int64_t result = (int64_t)a1;\n    int16_t * v6 = *__ctype_b_loc(); // 0x402e0c\n    int64_t v7 = a2;\n    char * str = (char *)v7;\n    unsigned char v8 = *str; // 0x402e1c\n    char v9 = *(char *)((int64_t)v6 + 1 + 2 * (int64_t)v8); // 0x402e1f\n    int64_t v10 = v7 + 1; // 0x402e24\n    while (v8 == 43 || (v9 & 32) != 0) {\n        // 0x402e1c\n        v7 = v10;\n        str = (char *)v7;\n        v8 = *str;\n        v9 = *(char *)((int64_t)v6 + 1 + 2 * (int64_t)v8);\n        v10 = v7 + 1;\n    }\n    char * found_char_pos = strchr(str, 46); // 0x402e44\n    int32_t v11 = 0x7fffffff; // 0x402e4f\n    if (found_char_pos == NULL) {\n        // 0x402faa\n        v11 = strchr(str, 112) != NULL ? 0x7fffffff : 0;\n    }\n    char v12 = *(char *)(v7 + (int64_t)strcspn(str, \"xX\")); // 0x402e62\n    int128_t v13 = 0; // 0x402e66\n    int64_t v14; // 0x402dc0\n    int64_t v15; // 0x402dc0\n    int32_t v16; // 0x402dc0\n    int32_t v17; // 0x402dc0\n    int32_t v18; // 0x402dc0\n    int64_t v19; // 0x402dc0\n    int64_t v20; // 0x402e44\n    int64_t v21; // 0x402dc0\n    int64_t v22; // 0x402e97\n    int32_t ini_seg_bytes; // 0x402eb3\n    if (v12 != 0) {\n        goto lab_0x402f84;\n    } else {\n        // 0x402e6c\n        __frontend_reg_store_fpr(v3, 0.0L);\n        __frontend_reg_store_fpr(v4, v5);\n        __frontend_reg_store_fpr(v4, __frontend_reg_load_fpr(v4) * __frontend_reg_load_fpr(v3));\n        float80_t v23 = __frontend_reg_load_fpr(v4); // 0x402e73\n        float80_t v24 = __frontend_reg_load_fpr(v3); // 0x402e73\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3));\n        v13 = 0;\n        if (v23 != v24) {\n            goto lab_0x402f84;\n        } else {\n            // 0x402e83\n            v20 = (int64_t)found_char_pos;\n            bool v25; // 0x402dc0\n            v21 = v25 ? -1 : 1;\n            int64_t v26 = -1; // 0x402e8f\n            int64_t v27 = v7; // 0x402dc0\n            int64_t v28 = 0; // 0x402e8f\n            while (v26 != 0) {\n                int64_t v29 = v27;\n                v26--;\n                v27 = v29 + v21;\n                v28 = v26;\n                if (*(char *)v29 == 0) {\n                    // break -> \n                    break;\n                }\n                v28 = 0;\n            }\n            v22 = -2 - v28;\n            v19 = v22;\n            v18 = v11;\n            v14 = 0;\n            if (found_char_pos == NULL) {\n                goto lab_0x402eeb;\n            } else {\n                // 0x402ea9\n                ini_seg_bytes = strcspn((char *)(v20 + 1), \"eE\");\n                v16 = v11;\n                if (ini_seg_bytes > -1) {\n                    // 0x402fef\n                    v16 = ini_seg_bytes;\n                    v17 = 0;\n                    v15 = -1;\n                    if (ini_seg_bytes == 0) {\n                        goto lab_0x402ee3;\n                    } else {\n                        goto lab_0x402ec7;\n                    }\n                } else {\n                    goto lab_0x402ec7;\n                }\n            }\n        }\n    }\n  lab_0x402f84:;\n    int128_t v30 = __asm_movdqa((int128_t)(int64_t)(float64_t)v1); // 0x402f84\n    int128_t v31 = __asm_movdqa(v13); // 0x402f8a\n    *(int128_t *)a1 = (int128_t)__asm_movaps(v30);\n    *(int128_t *)(result + 16) = (int128_t)__asm_movaps(v31);\n    return result;\n  lab_0x402eeb:;\n    uint64_t v32 = v14;\n    int32_t v33 = v18;\n    char * found_char_pos2 = strchr(str, 101); // 0x402ef3\n    char * v34 = found_char_pos2; // 0x402efe\n    if (found_char_pos2 == NULL) {\n        char * found_char_pos3 = strchr(str, 69); // 0x402fdd\n        v34 = found_char_pos3;\n        v13 = v19;\n        if (found_char_pos3 == NULL) {\n            goto lab_0x402f84;\n        } else {\n            goto lab_0x402f04;\n        }\n    } else {\n        goto lab_0x402f04;\n    }\n  lab_0x402f04:;\n    int64_t v35 = (int64_t)v34;\n    int32_t str_as_l = strtol((char *)(v35 + 1), NULL, 10); // 0x402f0f\n    uint64_t v36 = (int64_t)str_as_l; // 0x402f0f\n    int64_t v37 = v35 - v7; // 0x402f1a\n    int64_t v38 = -1; // 0x402f24\n    int64_t v39 = v7; // 0x402f24\n    int64_t v40; // 0x402dc0\n    int64_t v41; // 0x402dc0\n    if (str_as_l < 0) {\n        int64_t v42 = 0; // 0x403015\n        while (v38 != 0) {\n            int64_t v43 = v39;\n            int64_t v44 = v38 - 1; // 0x403015\n            v38 = v44;\n            v39 = v43 + v21;\n            v42 = v44;\n            if (*(char *)v43 == 0) {\n                // break -> \n                break;\n            }\n            v42 = 0;\n        }\n        int64_t v45 = v19 + 2 + v37 + v42; // 0x403017\n        int64_t v46; // 0x402dc0\n        if (found_char_pos == NULL) {\n            // 0x40303d\n            v46 = v45 + 1;\n        } else {\n            // 0x403021\n            v46 = v45 + (int64_t)(v20 + 1 == v35);\n        }\n        // 0x403035\n        v40 = v46;\n        v41 = -v36;\n    } else {\n        int64_t v47 = v33; // 0x402f2a\n        int64_t v48 = v47 - v36; // 0x402f30\n        int32_t v49 = v48 < 0 == ((v48 ^ v47) & (int64_t)(str_as_l ^ v33)) < 0 == (v48 != 0) ? str_as_l : v33; // 0x402f33\n        int64_t v50 = -1; // 0x402f4a\n        int64_t v51 = v7; // 0x402f4a\n        int64_t v52 = 0; // 0x402f4a\n        while (v50 != 0) {\n            int64_t v53 = v51;\n            v50--;\n            v51 = v53 + v21;\n            v52 = v50;\n            if (*(char *)v53 == 0) {\n                // break -> 0x402f75\n                break;\n            }\n            v52 = 0;\n        }\n        // 0x402f75\n        v40 = v19 + 2 + v37 + (int64_t)(!((found_char_pos == NULL | v32 == 0)) == v33 == v49) + v52;\n        v41 = v36 - (v32 < v36 ? v32 : v36);\n    }\n    // 0x402f7f\n    v13 = v41 + v40;\n    goto lab_0x402f84;\n  lab_0x402ec7:\n    // 0x402ec7\n    v17 = v16;\n    v15 = 1;\n    if (v7 != v20) {\n        char v54 = *(char *)(v20 - 1); // 0x402ed0\n        v17 = v16;\n        v15 = !((v54 == 57 | (int32_t)v54 < 57));\n    }\n    goto lab_0x402ee3;\n  lab_0x402ee3:\n    // 0x402ee3\n    v19 = v15 + v22;\n    v18 = v17;\n    v14 = ini_seg_bytes;\n    goto lab_0x402eeb;\n}\n"
        },
        {
            "funcName": "function_4030e0",
            "funcStartAddr": "4030e0",
            "funcEndAddr": "403154",
            "decompiledFuncCode": "int64_t function_4030e0(int64_t a1, int64_t a2, int64_t a3) {\n    struct __locale_struct * v1 = g37;\n    float80_t v2; // 0x403110\n    if (v1 != NULL) {\n        // 0x403104\n        v2 = strtold_l((char *)a1, (char **)a2, v1);\n        return (float64_t)v2;\n    }\n    struct __locale_struct * v3 = newlocale(0x1fbf, \"C\", NULL); // 0x40313c\n    g37 = v3;\n    if (v3 != NULL) {\n        // 0x403104\n        v2 = strtold_l((char *)a1, (char **)a2, v3);\n        return (float64_t)v2;\n    }\n    if (a2 != 0) {\n        // 0x40311d\n        *(int64_t *)a2 = a1;\n    }\n    // 0x403122\n    return (int64_t)v3;\n}\n"
        },
        {
            "funcName": "function_403160",
            "funcStartAddr": "403160",
            "funcEndAddr": "403168",
            "decompiledFuncCode": "int64_t function_403160(int64_t a1) {\n    // 0x403160\n    g39 = a1;\n    int64_t result; // 0x403160\n    return result;\n}\n"
        },
        {
            "funcName": "function_403170",
            "funcStartAddr": "403170",
            "funcEndAddr": "403178",
            "decompiledFuncCode": "int64_t function_403170(int64_t a1) {\n    // 0x403170\n    g38 = a1;\n    int64_t result; // 0x403170\n    return result;\n}\n"
        },
        {
            "funcName": "function_403180",
            "funcStartAddr": "403180",
            "funcEndAddr": "40321e",
            "decompiledFuncCode": "int64_t function_403180(void) {\n    // 0x403180\n    int32_t * err_num; // 0x403196\n    if ((int32_t)function_406670((int64_t)g29) == 0) {\n        goto lab_0x4031ac;\n    } else {\n        // 0x403196\n        err_num = __errno_location();\n        if (g38 == 0) {\n            goto lab_0x4031c3;\n        } else {\n            // 0x4031a7\n            if (*err_num != 32) {\n                goto lab_0x4031c3;\n            } else {\n                goto lab_0x4031ac;\n            }\n        }\n    }\n  lab_0x4031ac:;\n    int64_t result = function_406670((int64_t)g31); // 0x4031b3\n    if ((int32_t)result == 0) {\n        // 0x4031bc\n        return result;\n    }\n    // 0x4031fe\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x4031c3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4031cf\n    if (g39 == 0) {\n        // 0x403209\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4031e3\n        error(0, *err_num, \"%s: %s\", (char *)function_404c90((int64_t)g39), v1);\n    }\n    // 0x4031fe\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403220",
            "funcStartAddr": "403220",
            "funcEndAddr": "4032b9",
            "decompiledFuncCode": "int64_t function_403220(int64_t str) {\n    // 0x403220\n    if (str == 0) {\n        // 0x403299\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40322e\n    int64_t result = (int64_t)found_char_pos; // 0x40322e\n    if (found_char_pos == NULL) {\n        // 0x403289\n        g40 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403238\n    if (v1 - str < 7) {\n        // 0x403289\n        g40 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x403248\n    bool v2; // 0x403220\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403220\n    int64_t v5 = result - 6; // 0x403220\n    int64_t v6 = 7; // 0x403256\n    unsigned char v7 = *(char *)v5; // 0x403256\n    char v8 = *(char *)v4; // 0x403256\n    char v9 = v8; // 0x403256\n    bool v10 = false; // 0x403256\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403260\n    int64_t v13 = v1; // 0x403260\n    int64_t v14 = 3; // 0x403260\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403289\n        g40 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403272\n    char v16 = *(char *)v12; // 0x403272\n    char v17 = v16; // 0x403272\n    bool v18 = false; // 0x403272\n    while (v15 == v16) {\n        // 0x403262\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40327c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40327e\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x403289\n    g40 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4032c0",
            "funcStartAddr": "4032c0",
            "funcEndAddr": "4033b2",
            "decompiledFuncCode": "int64_t function_4032c0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4032d4\n    int64_t result = (int64_t)v1; // 0x4032d4\n    if (result != a1) {\n        // 0x4032e1\n        return result;\n    }\n    int64_t v2 = function_406730(); // 0x4032f0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4033a6\n    if (v3 == 85) {\n        // 0x403300\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403398\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g2 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x40332e\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x40333b\n        // 0x4032e1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403398\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g2 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x40337d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x40338a\n    // 0x4032e1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4033c0",
            "funcStartAddr": "4033c0",
            "funcEndAddr": "403417",
            "decompiledFuncCode": "int64_t function_4033c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4033c0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403408\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403417",
            "funcStartAddr": "403417",
            "funcEndAddr": "4045e1",
            "decompiledFuncCode": "int64_t function_403417(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403461\n    int64_t v3 = 0; // 0x403461\n    int64_t v4; // 0x403417\n    int64_t v5; // 0x403417\n    int64_t v6; // 0x403417\n    int64_t v7; // 0x403417\n    int64_t v8; // 0x403417\n    int64_t v9; // 0x403417\n    int64_t v10; // 0x403417\n    int64_t v11; // 0x403417\n    int64_t v12; // 0x403417\n    int64_t v13; // 0x403417\n    int64_t v14; // 0x403417\n    int64_t v15; // 0x403417\n    int64_t v16; // 0x403417\n    int64_t v17; // 0x403417\n    int64_t v18; // 0x403417\n    int64_t result; // 0x403417\n    int64_t v19; // 0x403417\n    int32_t wc; // bp+132, 0x403417\n    int64_t ps; // bp+136, 0x403417\n    char v20; // 0x4039d0\n    int64_t v21; // 0x4039d0\n    int64_t v22; // 0x403d78\n    int64_t v23; // 0x403417\n    int64_t v24; // 0x403d97\n    int32_t v25; // 0x403417\n    while (true) {\n      lab_0x403468_2:\n        // 0x403468\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403417\n        int64_t v27; // 0x40349c\n        while (true) {\n          lab_0x403468:\n            // 0x403468\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403473\n            if (v15 == -1) {\n                // 0x403475\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403483\n            if (v28) {\n                // break (via goto) -> 0x403be8\n                goto lab_0x403be8;\n            }\n            // 0x40348c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g54 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403a7b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4035c1;\n                    }\n                    // 0x403e9d\n                    v26 = v5 + 1;\n                    goto lab_0x403468;\n                }\n                case 7: {\n                    goto lab_0x4035c1;\n                }\n                case 8: {\n                    goto lab_0x4035c1;\n                }\n                case 9: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4035c1;\n                }\n                case 12: {\n                    goto lab_0x4035c1;\n                }\n                case 13: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40358d;\n                }\n                case 36: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4035c1;\n                }\n                case 38: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4035c1;\n                }\n                case 44: {\n                    goto lab_0x4035c1;\n                }\n                case 45: {\n                    goto lab_0x4035c1;\n                }\n                case 46: {\n                    goto lab_0x4035c1;\n                }\n                case 47: {\n                    goto lab_0x4035c1;\n                }\n                case 48: {\n                    goto lab_0x4035c1;\n                }\n                case 49: {\n                    goto lab_0x4035c1;\n                }\n                case 50: {\n                    goto lab_0x4035c1;\n                }\n                case 51: {\n                    goto lab_0x4035c1;\n                }\n                case 52: {\n                    goto lab_0x4035c1;\n                }\n                case 53: {\n                    goto lab_0x4035c1;\n                }\n                case 54: {\n                    goto lab_0x4035c1;\n                }\n                case 55: {\n                    goto lab_0x4035c1;\n                }\n                case 56: {\n                    goto lab_0x4035c1;\n                }\n                case 57: {\n                    goto lab_0x4035c1;\n                }\n                case 58: {\n                    goto lab_0x4035c1;\n                }\n                case 59: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4035c1;\n                }\n                case 66: {\n                    goto lab_0x4035c1;\n                }\n                case 67: {\n                    goto lab_0x4035c1;\n                }\n                case 68: {\n                    goto lab_0x4035c1;\n                }\n                case 69: {\n                    goto lab_0x4035c1;\n                }\n                case 70: {\n                    goto lab_0x4035c1;\n                }\n                case 71: {\n                    goto lab_0x4035c1;\n                }\n                case 72: {\n                    goto lab_0x4035c1;\n                }\n                case 73: {\n                    goto lab_0x4035c1;\n                }\n                case 74: {\n                    goto lab_0x4035c1;\n                }\n                case 75: {\n                    goto lab_0x4035c1;\n                }\n                case 76: {\n                    goto lab_0x4035c1;\n                }\n                case 77: {\n                    goto lab_0x4035c1;\n                }\n                case 78: {\n                    goto lab_0x4035c1;\n                }\n                case 79: {\n                    goto lab_0x4035c1;\n                }\n                case 80: {\n                    goto lab_0x4035c1;\n                }\n                case 81: {\n                    goto lab_0x4035c1;\n                }\n                case 82: {\n                    goto lab_0x4035c1;\n                }\n                case 83: {\n                    goto lab_0x4035c1;\n                }\n                case 84: {\n                    goto lab_0x4035c1;\n                }\n                case 85: {\n                    goto lab_0x4035c1;\n                }\n                case 86: {\n                    goto lab_0x4035c1;\n                }\n                case 87: {\n                    goto lab_0x4035c1;\n                }\n                case 88: {\n                    goto lab_0x4035c1;\n                }\n                case 89: {\n                    goto lab_0x4035c1;\n                }\n                case 90: {\n                    goto lab_0x4035c1;\n                }\n                case 91: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4035c1;\n                }\n                case 94: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4035c1;\n                }\n                case 96: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4035c1;\n                }\n                case 98: {\n                    goto lab_0x4035c1;\n                }\n                case 99: {\n                    goto lab_0x4035c1;\n                }\n                case 100: {\n                    goto lab_0x4035c1;\n                }\n                case 101: {\n                    goto lab_0x4035c1;\n                }\n                case 102: {\n                    goto lab_0x4035c1;\n                }\n                case 103: {\n                    goto lab_0x4035c1;\n                }\n                case 104: {\n                    goto lab_0x4035c1;\n                }\n                case 105: {\n                    goto lab_0x4035c1;\n                }\n                case 106: {\n                    goto lab_0x4035c1;\n                }\n                case 107: {\n                    goto lab_0x4035c1;\n                }\n                case 108: {\n                    goto lab_0x4035c1;\n                }\n                case 109: {\n                    goto lab_0x4035c1;\n                }\n                case 110: {\n                    goto lab_0x4035c1;\n                }\n                case 111: {\n                    goto lab_0x4035c1;\n                }\n                case 112: {\n                    goto lab_0x4035c1;\n                }\n                case 113: {\n                    goto lab_0x4035c1;\n                }\n                case 114: {\n                    goto lab_0x4035c1;\n                }\n                case 115: {\n                    goto lab_0x4035c1;\n                }\n                case 116: {\n                    goto lab_0x4035c1;\n                }\n                case 117: {\n                    goto lab_0x4035c1;\n                }\n                case 118: {\n                    goto lab_0x4035c1;\n                }\n                case 119: {\n                    goto lab_0x4035c1;\n                }\n                case 120: {\n                    goto lab_0x4035c1;\n                }\n                case 121: {\n                    goto lab_0x4035c1;\n                }\n                case 122: {\n                    goto lab_0x4035c1;\n                }\n                case 123: {\n                    goto lab_0x403565;\n                }\n                case 124: {\n                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403565;\n                }\n                case 126: {\n                    goto lab_0x40358d;\n                }\n                default: {\n                    goto lab_0x403965;\n                }\n            }\n        }\n      lab_0x403965:\n        if (v23 != 1) {\n            // 0x403cd0\n            ps = 0;\n            int64_t len = v15; // 0x403ce0\n            if (v15 == -1) {\n                // 0x403ce2\n                len = strlen((char *)str);\n            }\n            // 0x403d0e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403d6f:\n                // 0x403d6f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403d74\n                int64_t v30 = v29 + str;\n                v24 = function_406590(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4042ea_2;\n                    }\n                    case -1: {\n                        goto lab_0x4042ea_2;\n                    }\n                    case -2: {\n                        // 0x4043cd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404407\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40440a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404417\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404410\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4042ea\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4042ea_2;\n                    }\n                    case 1: {\n                        goto lab_0x403d40;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403dec\n                        char v34 = *(char *)v33; // 0x403dfd\n                        unsigned char v35; // 0x403417\n                        if (v34 < 125) {\n                            // 0x403e08\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403e1f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403df0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403dfd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403e08\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403e1f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403df0\n                            v33++;\n                        }\n                        goto lab_0x403d40;\n                    }\n                }\n            }\n            goto lab_0x4042ea_2;\n        } else {\n            // 0x4039b4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4035c1;\n        }\n    }\n  lab_0x403be8:\n    // 0x403be8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4044ea\n        if (v8 > result) {\n            // 0x4044f3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403817\n        return result;\n    }\n    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4035c1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4035d0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4037da_2;\n        }\n    }\n    int64_t v39 = result; // 0x4036d1\n    char v40 = v20; // 0x4036d1\n    int64_t v41 = v38; // 0x4036d1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4036d1\n    int64_t v43 = v36; // 0x4036d1\n    goto lab_0x40364d;\n  lab_0x4037da_2:\n    // 0x403817\n    return function_4033c0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4042ea_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4035c1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403ebe\n        int64_t v50 = v5 + 1; // 0x403fa1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403fa8\n        char v52 = v20; // 0x403fa8\n        int64_t v53 = result; // 0x403fa8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403f71\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403f75\n            int64_t v56 = v54 + 1; // 0x403f7a\n            int64_t v57 = v51 + 1; // 0x403fa1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403f6c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403f71\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403f75\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40364d;\n    }\n  lab_0x403d40:\n    // 0x403d40\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403d5f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403d62\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4042ea\n        goto lab_0x4042ea_2;\n    }\n    goto lab_0x403d6f;\n  lab_0x40358d:\n    // 0x40358d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4037da_2;\n    }\n    goto lab_0x4035c1;\n  lab_0x403565:;\n    bool v60 = v15 == 1; // 0x403570\n    if (v15 == -1) {\n        // 0x403572\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40357e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4035c1;\n    } else {\n        goto lab_0x40358d;\n    }\n  lab_0x40364d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403652\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403656\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403468_2;\n}\n"
        },
        {
            "funcName": "function_4045f0",
            "funcStartAddr": "4045f0",
            "funcEndAddr": "40478e",
            "decompiledFuncCode": "int64_t function_4045f0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4045f2\n    int32_t * v3 = __errno_location(); // 0x40460c\n    int64_t v4 = (int64_t)g20; // 0x404611\n    int32_t v5 = *v3; // 0x40461b\n    int64_t v6 = v4; // 0x404631\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404789\n            function_405650(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404640\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404647\n        int64_t v9; // 0x4045f0\n        if (g20 == &g21) {\n            int64_t v10 = function_405460(0, v8); // 0x40476a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x40476f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405460(v4, v8); // 0x40465b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x40466a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x40466a\n        int32_t v14 = v7; // 0x404671\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4046a1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4046ab\n    int64_t * v17 = (int64_t *)v15; // 0x4046ae\n    uint64_t v18 = *v17; // 0x4046ae\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4046b1\n    int64_t result = *v19; // 0x4046b1\n    int64_t v20; // 0x4045f0\n    uint64_t v21 = function_4033c0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4046d4\n    if (v18 > v21) {\n        // 0x40474b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4046e7\n    *v17 = v22;\n    if (result != (int64_t)&g41) {\n        // 0x4046f7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405400(v22); // 0x404711\n    *v19 = result2;\n    int64_t v23; // 0x4045f0\n    function_4033c0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40474b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404790",
            "funcStartAddr": "404790",
            "funcEndAddr": "4047c4",
            "decompiledFuncCode": "int64_t function_404790(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404797\n    int64_t result = function_405600(a1 == 0 ? (int64_t)&g42 : a1, 56); // 0x4047b6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4047d0",
            "funcStartAddr": "4047d0",
            "funcEndAddr": "4047df",
            "decompiledFuncCode": "int64_t function_4047d0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g42 : a1); // 0x4047dc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4047e0",
            "funcStartAddr": "4047e0",
            "funcEndAddr": "4047ef",
            "decompiledFuncCode": "int64_t function_4047e0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 : a1; // 0x4047e8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g42;\n}\n"
        },
        {
            "funcName": "function_4047f0",
            "funcStartAddr": "4047f0",
            "funcEndAddr": "404823",
            "decompiledFuncCode": "int64_t function_4047f0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 + 8 : a1 + 8; // 0x404809\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40480e\n    uint32_t v3 = *v2; // 0x40480e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404812\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404830",
            "funcStartAddr": "404830",
            "funcEndAddr": "404843",
            "decompiledFuncCode": "int64_t function_404830(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g42 + 4 : a1 + 4); // 0x40483c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "40487b",
            "decompiledFuncCode": "int64_t function_404850(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 : a1; // 0x404858\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404875\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40486c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g42;\n}\n"
        },
        {
            "funcName": "function_404880",
            "funcStartAddr": "404880",
            "funcEndAddr": "4048f2",
            "decompiledFuncCode": "int64_t function_404880(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g42 : a5; // 0x4048a2\n    int32_t * v2 = __errno_location(); // 0x4048ab\n    uint32_t v3 = *(int32_t *)v1; // 0x4048cb\n    int64_t result = function_4033c0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4048da\n    return result;\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "4049e1",
            "decompiledFuncCode": "int64_t function_404900(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g42 : a4; // 0x404922\n    int32_t * v2 = __errno_location(); // 0x404928\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404947\n    int32_t * v4 = (int32_t *)v1; // 0x40494a\n    int64_t v5 = function_4033c0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404965\n    int64_t v6 = v5 + 1; // 0x40496a\n    int64_t result = function_405400(v6); // 0x40497f\n    function_4033c0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4049c4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4049cd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "4049fa",
            "decompiledFuncCode": "int64_t function_4049f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4049f0\n    return function_404900(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a95",
            "decompiledFuncCode": "int64_t function_404a00(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x404a00\n    int64_t v2 = v1; // 0x404a00\n    int64_t v3 = v2; // 0x404a14\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x404a33\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g55;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404a30\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g55;\n        }\n    }\n    int64_t v6 = v3; // 0x404a4d\n    if (g21 != 0x60d320) {\n        // 0x404a4f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g41;\n        v6 = &g55;\n    }\n    int64_t result = v6; // 0x404a71\n    if (g20 != &g21) {\n        // 0x404a73\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g55;\n    }\n    // 0x404a86\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404aa0",
            "funcStartAddr": "404aa0",
            "funcEndAddr": "404ab1",
            "decompiledFuncCode": "int64_t function_404aa0(void) {\n    // 0x404aa0\n    int64_t v1; // 0x404aa0\n    return function_4045f0(v1, v1, -1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_404ac0",
            "funcStartAddr": "404ac0",
            "funcEndAddr": "404aca",
            "decompiledFuncCode": "int64_t function_404ac0(void) {\n    // 0x404ac0\n    int64_t v1; // 0x404ac0\n    return function_4045f0(v1, v1, v1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_404ad0",
            "funcStartAddr": "404ad0",
            "funcEndAddr": "404ae6",
            "decompiledFuncCode": "int64_t function_404ad0(int64_t a1) {\n    // 0x404ad0\n    return function_4045f0(0, a1, -1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404b02",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1, int64_t a2) {\n    // 0x404af0\n    return function_4045f0(0, a1, a2, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b78",
            "decompiledFuncCode": "int64_t function_404b10(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404b20\n    return function_4045f0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "404be4",
            "decompiledFuncCode": "int64_t function_404b80(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404b90\n    return function_4045f0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404bfc",
            "decompiledFuncCode": "int64_t function_404bf0(int64_t a1, int64_t a2) {\n    // 0x404bf0\n    return function_404b10(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404c0f",
            "decompiledFuncCode": "int64_t function_404c00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404c00\n    return function_404b80(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404c10",
            "funcStartAddr": "404c10",
            "funcEndAddr": "404c80",
            "decompiledFuncCode": "int64_t function_404c10(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g42); // 0x404c1d\n    int128_t v2 = __asm_movdqa(g43); // 0x404c25\n    int128_t v3 = __asm_movdqa(g44); // 0x404c2d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404c42\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404c58\n    uint32_t v6 = *v5; // 0x404c58\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404c5d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4045f0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404c80",
            "funcStartAddr": "404c80",
            "funcEndAddr": "404c8d",
            "decompiledFuncCode": "int64_t function_404c80(int64_t a1, int64_t a2) {\n    // 0x404c80\n    return function_404c10(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404ca1",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1) {\n    // 0x404c90\n    return function_404c10(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cba",
            "decompiledFuncCode": "int64_t function_404cb0(void) {\n    // 0x404cb0\n    int64_t v1; // 0x404cb0\n    return function_404c10(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404cc0",
            "funcStartAddr": "404cc0",
            "funcEndAddr": "404d2e",
            "decompiledFuncCode": "int64_t function_404cc0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404cda\n    return function_4045f0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d9c",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g42); // 0x404d37\n    int128_t v2 = __asm_movdqa(g43); // 0x404d3f\n    int128_t v3 = __asm_movdqa(g44); // 0x404d47\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404d69\n    if (a2 == 0 || a3 == 0) {\n        // 0x404d97\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404d7a\n    return function_4045f0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404da0",
            "funcStartAddr": "404da0",
            "funcEndAddr": "404da9",
            "decompiledFuncCode": "int64_t function_404da0(void) {\n    // 0x404da0\n    int64_t v1; // 0x404da0\n    return function_404d30(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404db0",
            "funcStartAddr": "404db0",
            "funcEndAddr": "404dc7",
            "decompiledFuncCode": "int64_t function_404db0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404db0\n    return function_404d30(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404dd0",
            "funcStartAddr": "404dd0",
            "funcEndAddr": "404de3",
            "decompiledFuncCode": "int64_t function_404dd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404dd0\n    return function_404d30(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404dfa",
            "decompiledFuncCode": "int64_t function_404df0(void) {\n    // 0x404df0\n    int64_t v1; // 0x404df0\n    return function_4045f0(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e12",
            "decompiledFuncCode": "int64_t function_404e00(int64_t a1, int64_t a2) {\n    // 0x404e00\n    return function_4045f0(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e31",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2) {\n    // 0x404e20\n    return function_4045f0(a1, a2, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404e40",
            "funcStartAddr": "404e40",
            "funcEndAddr": "404e56",
            "decompiledFuncCode": "int64_t function_404e40(int64_t a1) {\n    // 0x404e40\n    return function_4045f0(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "40523d",
            "decompiledFuncCode": "int64_t function_404e60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404ef8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404e7c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404e96\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404edb\n    if (a6 < 10) {\n        // 0x404eea\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404fe2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "405260",
            "decompiledFuncCode": "int64_t function_405240(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405240\n    if (a5 == 0) {\n        // 0x40525b\n        return function_404e60(a1, a2, a3, a4, a5, 0, (int64_t)&g55);\n    }\n    int64_t v1 = 0; // 0x405247\n    v1++;\n    int64_t v2 = v1; // 0x405259\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405250\n        v1++;\n        v2 = v1;\n    }\n    // 0x40525b\n    return function_404e60(a1, a2, a3, a4, a5, v2, (int64_t)&g55);\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "4052c0",
            "decompiledFuncCode": "int64_t function_405260(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405260\n    int64_t v3 = &v2; // 0x405260\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405293\n    int64_t v6; // 0x40527d\n    int64_t * v7; // 0x40529b\n    int64_t v8; // 0x40529b\n    int64_t v9; // 0x4052a7\n    if (v5 < 48) {\n        // 0x405270\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4052b3\n            break;\n        }\n    } else {\n        // 0x40529b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4052b3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405291\n    while (v4 != 9) {\n        // 0x405289\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405270\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4052b3\n                break;\n            }\n        } else {\n            // 0x40529b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4052b3\n                break;\n            }\n        }\n        // 0x405289\n        v10 = 10;\n    }\n    // 0x4052b3\n    return function_404e60(a1, a2, a3, a4, v3, v10, (int64_t)&g55);\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "40537c",
            "decompiledFuncCode": "int64_t function_4052c0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x4052c0\n    int64_t v1; // bp-168, 0x4052c0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4052c0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4052c0\n    int64_t v8; // 0x4052c0\n    int64_t v9; // bp-56, 0x4052c0\n    int64_t v10; // 0x405325\n    int64_t v11; // 0x405349\n    if ((int32_t)v6 < 48) {\n        // 0x405310\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405360\n            break;\n        }\n    } else {\n        // 0x405342\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405360\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40533a\n    int64_t v13 = 10; // 0x40533a\n    while (v5 != 9) {\n        // 0x40533c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405310\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405360\n                break;\n            }\n        } else {\n            // 0x405342\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405360\n                break;\n            }\n        }\n        // 0x405332\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405360\n    int64_t v14; // bp-136, 0x4052c0\n    int64_t result = function_404e60(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g55); // 0x40536f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "4053f4",
            "decompiledFuncCode": "int64_t function_405380(int64_t a1) {\n    // 0x405380\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4053e3\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_405400",
            "funcStartAddr": "405400",
            "funcEndAddr": "40541a",
            "decompiledFuncCode": "int64_t function_405400(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405404\n    if (size != 0 != (mem == NULL)) {\n        // 0x405413\n        return (int64_t)mem;\n    }\n    // 0x405415\n    function_405650(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405420",
            "funcStartAddr": "405420",
            "funcEndAddr": "405441",
            "decompiledFuncCode": "int64_t function_405420(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405423\n    int64_t v2 = v1; // 0x405423\n    if (v2 < 0) {\n        // 0x40543b\n        function_405650(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405439\n        return function_405400(v2);\n    }\n    // 0x40543b\n    function_405650(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405450",
            "funcStartAddr": "405450",
            "funcEndAddr": "405452",
            "decompiledFuncCode": "int64_t function_405450(void) {\n    // 0x405450\n    int64_t v1; // 0x405450\n    return function_405400(v1);\n}\n"
        },
        {
            "funcName": "function_405460",
            "funcStartAddr": "405460",
            "funcEndAddr": "405496",
            "decompiledFuncCode": "int64_t function_405460(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405488\n        free(v1);\n        return (int32_t)&g55 ^ (int32_t)&g55;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405471\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405480\n        return (int64_t)mem;\n    }\n    // 0x405491\n    function_405650(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4054a0",
            "funcStartAddr": "4054a0",
            "funcEndAddr": "4054c1",
            "decompiledFuncCode": "int64_t function_4054a0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4054a3\n    int64_t v2 = v1; // 0x4054a3\n    if (v2 < 0) {\n        // 0x4054bb\n        function_405650(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4054b9\n        return function_405460(a1, v2);\n    }\n    // 0x4054bb\n    function_405650(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4054d0",
            "funcStartAddr": "4054d0",
            "funcEndAddr": "405556",
            "decompiledFuncCode": "int64_t function_4054d0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40552b\n            function_405650(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405460(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405513\n    if (a2 == 0) {\n        // 0x405538\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405518\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40552b\n        function_405650(a1);\n        // UNREACHABLE\n    }\n    // 0x4054fa\n    *(int64_t *)a2 = v2;\n    return function_405460(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405560",
            "funcStartAddr": "405560",
            "funcEndAddr": "4055b0",
            "decompiledFuncCode": "int64_t function_405560(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405560\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4055aa\n            function_405650(a1);\n            // UNREACHABLE\n        }\n        // 0x405582\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405460(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405595\n        *(int64_t *)a2 = 128;\n        return function_405460(0, 128);\n    }\n    // 0x4055a8\n    if (a2 < 0) {\n        // 0x4055aa\n        function_405650(a1);\n        // UNREACHABLE\n    }\n    // 0x405582\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405460(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4055b0",
            "funcStartAddr": "4055b0",
            "funcEndAddr": "4055c7",
            "decompiledFuncCode": "int64_t function_4055b0(int64_t a1, int64_t a2) {\n    // 0x4055b0\n    return (int64_t)memset((int64_t *)function_405400(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4055d0",
            "funcStartAddr": "4055d0",
            "funcEndAddr": "4055fe",
            "decompiledFuncCode": "int64_t function_4055d0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4055d7\n    if ((int64_t)v1 < 0) {\n        // 0x4055f9\n        function_405650(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4055f9\n        function_405650(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4055ea\n    if (mem != NULL) {\n        // 0x4055f4\n        return (int64_t)mem;\n    }\n    // 0x4055f9\n    function_405650(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "405628",
            "decompiledFuncCode": "int64_t function_405600(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405400(a2); // 0x40560f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405630",
            "funcStartAddr": "405630",
            "funcEndAddr": "405643",
            "decompiledFuncCode": "int64_t function_405630(char * str) {\n    // 0x405630\n    return function_405600((int64_t)str, (int64_t)strlen(str) + 1);\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "405681",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1) {\n    // 0x405650\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "40572c",
            "decompiledFuncCode": "int64_t function_405690(int64_t a1, int32_t a2, int64_t a3, int64_t a4) {\n    // 0x405690\n    float80_t v1; // 0x405690\n    float80_t v2 = v1;\n    int32_t * v3 = __errno_location(); // 0x4056a8\n    *v3 = 0;\n    char * v4; // 0x405690\n    int64_t v5 = (int64_t)v4; // 0x4056c1\n    int64_t result = 0; // 0x4056c9\n    int64_t result2; // 0x405690\n    if (v5 == a1) {\n        goto lab_0x4056e9;\n    } else {\n        if (a2 == 0) {\n            // 0x405708\n            if (*v4 != 0) {\n                // 0x4056f2\n                return 0;\n            }\n            // 0x40570f\n            if (v2 == 0.0L) {\n                // 0x4056f2\n                return 1;\n            }\n            // 0x4056e1\n            result = 1;\n            goto lab_0x4056e9;\n        } else {\n            // 0x4056d0\n            result2 = 1;\n            if (v2 != 0.0L) {\n                // 0x4056e1\n                result = (v2 != v2 || 0.0L != 0.0L ? (int64_t)v3 : 1) & -256 | 1;\n                goto lab_0x4056e9;\n            } else {\n                goto lab_0x4056ee;\n            }\n        }\n    }\n  lab_0x4056e9:\n    // 0x4056e9\n    result2 = result;\n    if (a2 == 0) {\n        // 0x4056f2\n        return result;\n    }\n    goto lab_0x4056ee;\n  lab_0x4056ee:\n    // 0x4056ee\n    *(int64_t *)(int64_t)a2 = v5;\n    // 0x4056f2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "4057bf",
            "decompiledFuncCode": "int64_t function_405730(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405730\n    int64_t v1; // 0x405730\n    if ((char)v1 != 0) {\n        // 0x40574f\n        int128_t v2; // 0x405730\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int64_t v3 = 16; // bp-208, 0x405793\n    return function_406610(a1, a2, &v3);\n}\n"
        },
        {
            "funcName": "function_4057c0",
            "funcStartAddr": "4057c0",
            "funcEndAddr": "40589f",
            "decompiledFuncCode": "int64_t function_4057c0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4057cc\n    uint32_t v2 = *v1; // 0x4057cc\n    int64_t v3 = a2 & 0xffffffff; // 0x4057d1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4057d4\n    uint64_t v5 = (int64_t)*v4; // 0x4057d4\n    int64_t v6; // 0x405842\n    if (v3 <= v5) {\n      lab_0x40583c_2:\n        // 0x40583c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4057c2\n    int64_t v8 = v2; // 0x4057c0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40583c\n        goto lab_0x40583c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4057f8\n    int64_t v17; // 0x405806\n    int64_t * v18; // 0x405820\n    int64_t * v19; // 0x405823\n    int64_t v20; // 0x40582e\n    int64_t v21; // 0x405806\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405803\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405820\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405837\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40583c\n            goto lab_0x40583c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40583c\n            goto lab_0x40583c_2;\n        }\n        // 0x4057f2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40587b\n    int64_t * v23 = (int64_t *)v22; // 0x405880\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405883\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405880\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405897\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4057ed\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40583c\n            goto lab_0x40583c_2;\n        }\n        // 0x4057f2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405803\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405820\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405837\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40583c\n                goto lab_0x40583c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40583c\n                goto lab_0x40583c_2;\n            }\n            // 0x4057f2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405860\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405880\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405897\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40583c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "405ebc",
            "decompiledFuncCode": "int64_t function_4058a0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4058bf\n    int64_t v2 = *v1; // 0x4058bf\n    char * str2 = (char *)v2; // 0x4058cc\n    char c = *str2; // 0x4058cc\n    int64_t v3 = v2; // 0x4058f8\n    int64_t v4 = 0; // 0x4058a0\n    int32_t v5; // 0x4058a0\n    int64_t v6; // 0x4058a0\n    int64_t v7; // 0x4058a0\n    int64_t v8; // 0x4058a0\n    int64_t v9; // 0x4058a0\n    int64_t v10; // 0x4058a0\n    int64_t v11; // 0x4058a0\n    int64_t v12; // 0x4058a0\n    int64_t v13; // 0x4058a0\n    int64_t str3; // 0x4058a0\n    int64_t v14; // 0x4058a0\n    int64_t v15; // 0x4058a0\n    int64_t v16; // 0x4058a0\n    int64_t v17; // 0x4058a0\n    int32_t v18; // 0x4058a0\n    int32_t v19; // 0x4058a0\n    int32_t v20; // 0x4058a0\n    int32_t v21; // 0x4058a0\n    int32_t v22; // 0x4058a0\n    int32_t v23; // 0x4058a0\n    int32_t v24; // 0x4058a0\n    int32_t v25; // 0x4058a0\n    int32_t v26; // 0x4058a0\n    int32_t v27; // 0x4058a0\n    int32_t v28; // 0x4058a0\n    int32_t v29; // 0x4058a0\n    int64_t nmemb; // 0x4058a0\n    int64_t v30; // 0x4058a0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4058fc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4058f8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405908\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40590e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4058d8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40593c\n                int64_t v34; // 0x4058a0\n                int64_t v35; // 0x4058a0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405945\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405ac0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405956\n                int64_t v37 = *(int64_t *)v36; // 0x40595a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405930\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405945\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405ac0;\n                        }\n                    }\n                    // 0x405956\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4059a6:\n                    // 0x4059a6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405a00;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405b70\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405a00;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405b20\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4059ca;\n                                } else {\n                                    // 0x405b2c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4059ca;\n                                    } else {\n                                        // 0x405b3a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4059ca;\n                                        } else {\n                                            goto lab_0x405a00;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4059ca;\n                            }\n                        }\n                    }\n                }\n              lab_0x405a11:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405be6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405d92\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x405db2\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x405dff\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x405e19\n                            int64_t v45; // 0x405e1b\n                            if (*(char *)v42 != 0) {\n                                // 0x405e1b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405e13\n                            while (v17 + nmemb != v42) {\n                                // 0x405e15\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x405e1b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x405e08\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405e40\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x405bf4\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x405d4f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405c49\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405c60\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405b0e\n                    return 63;\n                }\n                // 0x405a30\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405ab4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405ac0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405ad0\n                    uint32_t v50 = *v49; // 0x405ad0\n                    int64_t v51 = v50; // 0x405ad0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405ada\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405ae3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x405d0f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405cba\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405b0e\n                            return 63;\n                        }\n                        // 0x405b58\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x405e6f\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x405d6d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405d80\n                                // 0x405b0e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405c7e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405c92\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405afb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405afe\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405b02\n                    int64_t result = v59; // 0x405b08\n                    if (v58 != 0) {\n                        // 0x405b0a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405b0e\n                    return result;\n                }\n            } else {\n                // 0x40590e\n                v5 = v32;\n            }\n            // break -> 0x405a35\n            break;\n        }\n    }\n    // 0x405a35\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405a4d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405a57\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405b0e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405b99\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405a86\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405a96\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405a00:\n    // 0x405a00\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405a00\n    int64_t v63 = *(int64_t *)v62; // 0x405a04\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405a11\n        goto lab_0x405a11;\n    }\n    goto lab_0x4059a6;\n  lab_0x4059ca:\n    // 0x4059ca\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4058a0\n    int32_t v65; // 0x4058a0\n    int32_t v66; // 0x4058a0\n    if (v27 != 0) {\n        goto lab_0x405a00;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405b80\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405a00;\n            } else {\n                goto lab_0x4059f1;\n            }\n        } else {\n            // 0x4059e5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405cdc\n                int64_t v67 = (int64_t)mem; // 0x405cdc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405a00;\n                } else {\n                    // 0x405cef\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4059f1;\n                }\n            } else {\n                goto lab_0x4059f1;\n            }\n        }\n    }\n  lab_0x4059f1:\n    // 0x4059f1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405a00;\n}\n"
        },
        {
            "funcName": "function_405ec0",
            "funcStartAddr": "405ec0",
            "funcEndAddr": "406486",
            "decompiledFuncCode": "int64_t function_405ec0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405ee1\n    if (v3 < 1) {\n        // 0x40609e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x405edd\n    int32_t v5 = *(int32_t *)a7; // 0x405ee9\n    uint64_t v6 = a1 & 0xffffffff; // 0x405eeb\n    int64_t v7 = v2; // 0x405ef0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405ef3\n    *v8 = 0;\n    int64_t v9; // 0x405ec0\n    int64_t v10; // 0x405ec0\n    int64_t v11; // 0x405ec0\n    int64_t v12; // 0x405ec0\n    int64_t str; // 0x405ec0\n    int64_t v13; // 0x405ec0\n    int64_t v14; // 0x405ec0\n    int64_t v15; // 0x405ec0\n    int64_t v16; // 0x405ec0\n    int64_t v17; // 0x405ec0\n    int32_t v18; // 0x405ec0\n    char v19; // 0x405ec0\n    if (v5 == 0) {\n        // 0x4060d8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x405f0a;\n    } else {\n        // 0x405f03\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405f50\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405f53\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406018;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405f66\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405f76\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40602c;\n                } else {\n                    goto lab_0x405f88;\n                }\n            }\n        } else {\n            goto lab_0x405f0a;\n        }\n    }\n  lab_0x405f0a:\n    // 0x405f0a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405f10\n    *v24 = 0;\n    int64_t v25; // 0x405ec0\n    int64_t v26; // 0x405ec0\n    int64_t v27; // 0x405ec0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406000\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40600d;\n        }\n        case 43: {\n            // 0x406310\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40600d;\n        }\n        default: {\n            // 0x405f2c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40628f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4063a8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40600d;\n                } else {\n                    // 0x40629d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405f3a;\n                }\n            } else {\n                goto lab_0x405f3a;\n            }\n        }\n    }\n  lab_0x406018:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40601f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405f88;\n    } else {\n        goto lab_0x40602c;\n    }\n  lab_0x405f3a:\n    // 0x405f3a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40600d;\n  lab_0x40600d:\n    // 0x40600d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406018;\n  lab_0x405f88:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405f88\n    int64_t v31 = v30; // 0x405f88\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405f8a\n    if ((int64_t)*v32 > v31) {\n        // 0x405f8f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405f92\n    if (*v33 > v30) {\n        // 0x405f97\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405f9a\n    int64_t v35 = v31; // 0x405f9e\n    int64_t v36 = v15; // 0x405f9e\n    int64_t v37; // 0x405ec0\n    int64_t v38; // 0x405ec0\n    int64_t v39; // 0x405ec0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406108\n        int64_t v41 = v40; // 0x406108\n        v2 = v41;\n        int64_t v42; // 0x405ec0\n        if (*v33 == v40) {\n            // 0x4062f0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4062f8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406114\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406118\n                function_4057c0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406128\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406131\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40613a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406151\n            int64_t v47 = v45 & 0xffffffff; // 0x406155\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40615e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406164\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406166;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406140\n            int64_t v49 = v48 & 0xffffffff; // 0x406140\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406151\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40615e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406164\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406166;\n                    }\n                }\n                // 0x406140\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406308\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406166;\n    } else {\n        goto lab_0x405fa4;\n    }\n  lab_0x40602c:\n    // 0x40602c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40602f\n    int64_t v51 = v12; // 0x40602f\n    int64_t v52 = v14; // 0x40602f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405f88;\n    } else {\n        goto lab_0x406035;\n    }\n  lab_0x405fa4:;\n    int32_t v53 = v35; // 0x405fa4\n    int64_t v54; // 0x405ec0\n    int64_t v55; // 0x405ec0\n    int64_t v56; // 0x405ec0\n    int64_t v57; // 0x405ec0\n    int64_t v58; // 0x405ec0\n    int64_t v59; // 0x405ec0\n    char * v60; // 0x405ec0\n    int64_t v61; // 0x405ec0\n    int64_t v62; // 0x405fb9\n    int64_t v63; // 0x405ec0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4060f3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4060f6;\n    } else {\n        // 0x405fac\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405ec0\n        int64_t v66 = v65 ? -1 : 1; // 0x405fc0\n        int64_t v67 = (int64_t)\"--\"; // 0x405ec0\n        int64_t v68 = v62; // 0x405ec0\n        int64_t v69 = 3; // 0x405fc0\n        unsigned char v70 = *(char *)v68; // 0x405fc0\n        char v71 = *(char *)v67; // 0x405fc0\n        char v72 = v71; // 0x405fc0\n        bool v73 = false; // 0x405fc0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4060b0\n            if (*(char *)v62 == 45) {\n                // 0x406170\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406170\n                if (c == 0) {\n                    goto lab_0x4060ba;\n                } else {\n                    // 0x40617d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406200;\n                    } else {\n                        if (c == 45) {\n                            // 0x4063e3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406255;\n                        } else {\n                            // 0x40618e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406200;\n                            } else {\n                                // 0x406193\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4061b4;\n                                } else {\n                                    // 0x40619a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406200;\n                                    } else {\n                                        goto lab_0x4061b4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4060ba;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405fd0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405fd3\n            int64_t v77 = v35 + 1; // 0x405fd6\n            int32_t v78 = v77; // 0x405fd9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406340\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405fe7\n                    function_4057c0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405ff5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4060f6;\n        }\n    }\n  lab_0x406035:;\n    // 0x406035\n    int64_t v79; // bp-104, 0x405ec0\n    int64_t v80 = &v79; // 0x405eca\n    int64_t v81 = v50 + 1; // 0x406035\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40603c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406041\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406045\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406049\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406051\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406056\n    int32_t c2 = v84; // 0x406056\n    char * found_char_pos = strchr(str2, c2); // 0x406056\n    int64_t v87 = *v82; // 0x40605b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406065\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406070\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406360\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40632d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40609e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406056\n    char v91 = *(char *)(v90 + 1); // 0x40608b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406045\n        if (v91 != 58) {\n            // 0x40609e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4062b4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4063b8\n                *v8 = 0;\n            } else {\n                // 0x40639c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4062de\n            *v83 = 0;\n            // 0x40609e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4062be\n        if (v93 != 0) {\n            // 0x406350\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4062de\n            *v83 = 0;\n            // 0x40609e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4062d1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4062de\n            *v83 = 0;\n            // 0x40609e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40641a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4063ca\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4063d1\n        // 0x4062de\n        *v83 = 0;\n        // 0x40609e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406229\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40622b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406450\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406401\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406408\n            // 0x40609e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406236\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40623a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406255;\n  lab_0x406166:\n    // 0x406166\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405fa4;\n  lab_0x406255:;\n    int64_t v99 = function_4058a0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406273\n    // 0x40609e\n    return v99 & 0xffffffff;\n  lab_0x4060f6:;\n    int32_t v100 = v55; // 0x4060f6\n    if (v100 != (int32_t)v59) {\n        // 0x4060fa\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40609e\n    return 0xffffffff;\n  lab_0x4060ba:\n    // 0x4060ba\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4060c1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40609e\n    return v99 & 0xffffffff;\n  lab_0x406200:\n    // 0x406200\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406035;\n  lab_0x4061b4:\n    // 0x4061b4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4058a0(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x4061da\n    if ((int32_t)v101 != -1) {\n        // 0x40609e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4061ef\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406200;\n}\n"
        },
        {
            "funcName": "function_406490",
            "funcStartAddr": "406490",
            "funcEndAddr": "4064e6",
            "decompiledFuncCode": "int64_t function_406490(int64_t a1) {\n    // 0x406490\n    *(int32_t *)&g45 = g26;\n    *(int32_t *)&g46 = g25;\n    int64_t v1; // 0x406490\n    int64_t result = function_405ec0(v1, v1, v1, v1, v1, v1, &g45, a1 & 0xffffffff); // 0x4064b6\n    g26 = *(int32_t *)&g45;\n    g50 = (char *)g48;\n    *(int32_t *)&g24 = g47;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4064f0",
            "funcStartAddr": "4064f0",
            "funcEndAddr": "406508",
            "decompiledFuncCode": "int64_t function_4064f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4064f0\n    return function_406490(1);\n}\n"
        },
        {
            "funcName": "function_406510",
            "funcStartAddr": "406510",
            "funcEndAddr": "406523",
            "decompiledFuncCode": "int64_t function_406510(int64_t a1, int64_t a2, char * a3, char (**a4)[12], int32_t a5, int64_t a6) {\n    // 0x406510\n    return function_406490(0);\n}\n"
        },
        {
            "funcName": "function_406530",
            "funcStartAddr": "406530",
            "funcEndAddr": "406545",
            "decompiledFuncCode": "int64_t function_406530(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406530\n    return function_405ec0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406550",
            "funcStartAddr": "406550",
            "funcEndAddr": "406566",
            "decompiledFuncCode": "int64_t function_406550(void) {\n    // 0x406550\n    return function_406490(0);\n}\n"
        },
        {
            "funcName": "function_406570",
            "funcStartAddr": "406570",
            "funcEndAddr": "406588",
            "decompiledFuncCode": "int64_t function_406570(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406570\n    return function_405ec0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "40660a",
            "decompiledFuncCode": "int64_t function_406590(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40659b\n    int64_t v2 = (int64_t)&g11; // 0x40659b\n    int32_t * pwc; // 0x406590\n    int64_t v3; // 0x406590\n    int64_t n; // 0x406590\n    if (a2 == 0) {\n        goto lab_0x4065e2;\n    } else {\n        // 0x40659d\n        if (a3 == 0) {\n            // 0x4065c8\n            return -2;\n        }\n        // 0x4065a9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4065e2;\n        } else {\n            goto lab_0x4065b4;\n        }\n    }\n  lab_0x4065e2:\n    // 0x4065e2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406590\n    pwc = (int32_t *)&v4;\n    goto lab_0x4065b4;\n  lab_0x4065b4:;\n    char * wstr = (char *)v3; // 0x4065ba\n    int64_t ps; // 0x406590\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4065ba\n    int64_t result = v5; // 0x4065ba\n    if (v5 < 0xfffffffe) {\n        // 0x4065c8\n        return result;\n    }\n    int64_t result2 = result; // 0x4065f9\n    if ((char)function_4066d0(0, v3) == 0) {\n        // 0x4065fb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4065c8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406610",
            "funcStartAddr": "406610",
            "funcEndAddr": "406669",
            "decompiledFuncCode": "int64_t function_406610(int64_t a1, int64_t a2, int64_t * a3) {\n    // 0x406610\n    int32_t v1; // bp-16, 0x406610\n    int64_t v2; // 0x406610\n    int64_t v3 = function_406dc0(0, (int64_t *)&v1, a2, (int64_t)a3, v2, v2, v2, (int64_t)&g55); // 0x406625\n    if (v3 == 0) {\n        // 0x406642\n        return 0xffffffff;\n    }\n    // 0x40662f\n    int64_t result; // 0x406610\n    if (v1 > -1) {\n        // 0x40663d\n        *(int64_t *)a1 = v3;\n        result = v1;\n    } else {\n        // 0x406648\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x406642\n    return result;\n}\n"
        },
        {
            "funcName": "function_406670",
            "funcStartAddr": "406670",
            "funcEndAddr": "4066cd",
            "decompiledFuncCode": "int64_t function_406670(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406677\n    int64_t v2; // 0x406670\n    int64_t result = function_406ca0(a1, v2); // 0x406688\n    if ((v2 & 32) != 0) {\n        // 0x4066b0\n        if ((int32_t)result == 0) {\n            // 0x4066b4\n            *__errno_location() = 0;\n        }\n        // 0x4066aa\n        return 0xffffffff;\n    }\n    // 0x406691\n    if ((int32_t)result == 0) {\n        // 0x4066aa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406698\n    if (v1 == 0) {\n        // 0x40669a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4066aa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4066d0",
            "funcStartAddr": "4066d0",
            "funcEndAddr": "40672e",
            "decompiledFuncCode": "int64_t function_4066d0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4066d6\n    if (locale == NULL) {\n        // 0x406703\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4066d6\n    bool v2; // 0x4066d0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"C\"; // 0x4066d0\n    int64_t v5 = v1; // 0x4066d0\n    int64_t v6 = 2; // 0x4066f5\n    unsigned char v7 = *(char *)v5; // 0x4066f5\n    char v8 = *(char *)v4; // 0x4066f5\n    char v9 = v8; // 0x4066f5\n    bool v10 = false; // 0x4066f5\n    while (v7 == v8) {\n        // 0x4066e8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406701\n    int64_t v13 = v1; // 0x406701\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406703\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406701\n    unsigned char v15 = *(char *)v13; // 0x40671d\n    char v16 = *(char *)v12; // 0x40671d\n    char v17 = v16; // 0x40671d\n    bool v18 = false; // 0x40671d\n    while (v15 == v16) {\n        // 0x406710\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406730",
            "funcStartAddr": "406730",
            "funcEndAddr": "406c92",
            "decompiledFuncCode": "int64_t function_406730(void) {\n    char * v1 = nl_langinfo(14); // 0x406746\n    char * v2 = g49; // 0x40674b\n    char * v3; // 0x406730\n    int64_t v4; // 0x406730\n    int64_t v5; // 0x406730\n    int64_t v6; // 0x406730\n    int64_t v7; // 0x406730\n    int32_t size; // 0x406730\n    int32_t size2; // 0x406730\n    int32_t len; // 0x406802\n    int64_t v8; // 0x406802\n    char * env_val; // 0x4067ed\n    if (v2 == NULL) {\n        // 0x4067e8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406855;\n        } else {\n            // 0x4067fa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406855;\n            } else {\n                // 0x4067ff\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4067ed\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406c85\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406855;\n                    } else {\n                        // 0x406bf9\n                        size2 = len + 14;\n                        goto lab_0x40681b;\n                    }\n                } else {\n                    goto lab_0x40681b;\n                }\n            }\n        }\n    } else {\n        // 0x406730\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40676a;\n    }\n  lab_0x406a9c:;\n    // 0x406a9c\n    struct _IO_FILE * stream; // 0x4068db\n    int32_t v10 = __uflow(stream); // 0x406a9f\n    int64_t v11; // 0x406730\n    int64_t v12 = v11; // 0x406aa9\n    int64_t v13; // 0x406730\n    int64_t v14 = v13; // 0x406aa9\n    int32_t v15 = v10; // 0x406aa9\n    int64_t v16; // 0x406730\n    int64_t v17 = v16; // 0x406aa9\n    int64_t v18 = v11; // 0x406aa9\n    int64_t v19 = v13; // 0x406aa9\n    int64_t v20 = v16; // 0x406aa9\n    if (v10 == -1) {\n        // break -> 0x406aaf\n        goto lab_0x406aaf;\n    }\n    goto lab_0x406929;\n  lab_0x40691e:;\n    // 0x40691e\n    int64_t v90; // 0x406730\n    int64_t * v32; // 0x406910\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406730\n    v12 = v89;\n    int64_t v91; // 0x406730\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406730\n    v17 = v92;\n    goto lab_0x406929;\n  lab_0x406929:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406730\n    int32_t v25; // bp-120, 0x406730\n    int32_t v26; // bp-184, 0x406730\n    int64_t v27; // 0x4068db\n    int64_t v28; // 0x4068f8\n    int64_t v29; // 0x4068fd\n    int64_t * v30; // 0x406914\n    switch (c) {\n        case 32: {\n            goto lab_0x406910;\n        }\n        case 10: {\n            goto lab_0x406910;\n        }\n        case 9: {\n            goto lab_0x406910;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406b01\n            int32_t v33; // 0x406730\n            char v34; // 0x406730\n            int32_t v35; // 0x406b0e\n            if (v31 < *v30) {\n                // 0x406ae0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x406b0b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406b01\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406ae0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x406b0b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406af0\n                v36 = v33;\n            }\n            // 0x406bdf\n            if (v36 == -1) {\n                // break -> 0x406aaf\n                break;\n            }\n            goto lab_0x406910;\n        }\n        default: {\n            // 0x40693f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x406aaf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406968\n            int64_t v39 = v37 + 4; // 0x40696a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406976\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406978\n            while (v41 == 0) {\n                // 0x406968\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406996\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4069a2\n            int64_t v45 = v43 + 4; // 0x4069a4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4069b0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4069b2\n            while (v47 == 0) {\n                // 0x4069a2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40699f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4069c8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4069d8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4069dc\n            int64_t v52 = v51 + v48; // 0x4069e5\n            int64_t * mem; // 0x406730\n            int64_t v53; // 0x406730\n            int64_t v54; // 0x406730\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x406b1b\n                int64_t v56 = v55 + 3; // 0x406b27\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406a01\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406a10\n            if (mem == NULL) {\n                // 0x406c3c\n                free((int64_t *)v21);\n                function_406ca0(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x4068b4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406a28\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406a32\n            uint32_t v62 = (int32_t)v59; // 0x406a35\n            int64_t v63; // 0x406730\n            if (v62 >= 8) {\n                // 0x406b44\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x406b5e\n                int64_t v66 = v61 - v65; // 0x406b62\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x406b6d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x406b7e\n                    int64_t v70 = v69 & 0xffffffff; // 0x406b7e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x406b7b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x406c0f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406a47\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406a4b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x406a5b\n            int64_t v74 = v60 - 1; // 0x406a5f\n            uint32_t v75 = (int32_t)v73; // 0x406a64\n            int64_t v76; // 0x406730\n            if (v75 >= 8) {\n                // 0x406b92\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x406b9c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x406bac\n                int64_t v80 = v74 - v79; // 0x406bb0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x406bbb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x406bcb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406bc9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406c26\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x406c2e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406a76\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x406a7a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406c73\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x406a8e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40691e;\n            } else {\n                goto lab_0x406a9c;\n            }\n        }\n    }\n  lab_0x406910:;\n    int64_t v93 = v23; // 0x406730\n    int64_t v94 = v22; // 0x406730\n    int64_t v95 = v21; // 0x406730\n    goto lab_0x406910_2;\n  lab_0x406855:;\n    int64_t * mem3 = malloc(size); // 0x406855\n    int64_t v97 = (int64_t)&g11; // 0x406860\n    int64_t v98; // 0x406730\n    int64_t path; // 0x406730\n    if (mem3 == NULL) {\n        goto lab_0x406832;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406855\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406876;\n    }\n  lab_0x40676a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x40675d\n    char v100 = *v3; // 0x40676a\n    int64_t v101; // 0x406730\n    if (v100 == 0) {\n        // 0x4067c4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406730\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406730\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4067b0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4067b7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406780\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40678d\n        char v107 = *(char *)v106; // 0x406792\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4067c4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40679b\n    v104 = v103 + 1;\n  lab_0x4067b7:\n    // 0x4067c4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406832:;\n    char * v108 = (char *)v97;\n    g49 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40676a;\n  lab_0x406876:;\n    int64_t v109 = v98 + path; // 0x406876\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4068a2\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x4068d1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406c02\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x4068f5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406910_2:;\n                uint64_t v96 = *v32; // 0x406910\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x406a9c;\n                } else {\n                    goto lab_0x40691e;\n                }\n            }\n          lab_0x406aaf:\n            // 0x406aaf\n            function_406ca0(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x406ace\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4068b4;\n  lab_0x40681b:;\n    int64_t * mem4 = malloc(size2); // 0x40681b\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x4068c1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406876;\n    } else {\n        goto lab_0x406832;\n    }\n  lab_0x4068b4:\n    // 0x4068b4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406832;\n}\n"
        },
        {
            "funcName": "function_406ca0",
            "funcStartAddr": "406ca0",
            "funcEndAddr": "406d1b",
            "decompiledFuncCode": "int64_t function_406ca0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406ca7\n    if (fileno(stream) < 0) {\n        // 0x406d07\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x406cba\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x406ceb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406d07\n            return fclose(stream);\n        }\n    }\n    // 0x406cbc\n    if ((int32_t)function_406d20(a1, v1) == 0) {\n        // 0x406d07\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406cc8\n    int32_t v3 = *v2; // 0x406cd0\n    int64_t result = fclose(stream); // 0x406cde\n    if (v3 != 0) {\n        // 0x406d10\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406ce0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406d20",
            "funcStartAddr": "406d20",
            "funcEndAddr": "406d60",
            "decompiledFuncCode": "int64_t function_406d20(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x406d3a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x406d3a\n        return fflush(stream);\n    }\n    // 0x406d48\n    function_406d60(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406d60",
            "funcStartAddr": "406d60",
            "funcEndAddr": "406db7",
            "decompiledFuncCode": "int64_t function_406d60(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406d60\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x406d6a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x406d9b\n    int64_t result = -1; // 0x406da4\n    if (v1 != -1) {\n        // 0x406da6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406db2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406dc0",
            "funcStartAddr": "406dc0",
            "funcEndAddr": "4088d9",
            "decompiledFuncCode": "int64_t function_406dc0(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x406dc0\n    int64_t v1; // bp-1416, 0x406dc0\n    int64_t v2; // bp-1656, 0x406dc0\n    if ((int32_t)function_408b00(a3, &v1, &v2) < 0) {\n        // 0x407430\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x406dcb\n    int64_t v4; // bp-1384, 0x406dc0\n    int64_t v5; // bp-1640, 0x406dc0\n    int64_t v6; // 0x406dc0\n    if ((int32_t)function_4088e0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x407d17\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x407d33\n            free((int64_t *)v6);\n        }\n        // 0x407d38\n        *__errno_location() = 22;\n        // 0x407430\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x406e2b\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x406e33\n    uint64_t v9 = v8 + v6; // 0x406e37\n    int64_t v10; // 0x406dc0\n    char * v11; // 0x406dc0\n    int64_t v12; // 0x406dc0\n    if (v9 < v8) {\n        // 0x4074e0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x4073e9;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x4074e0\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x4073e9;\n        } else {\n            uint64_t size = v9 + 6; // 0x406e47\n            if (size < 4000) {\n                // 0x406f90\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x406dc0\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x406e84;\n            } else {\n                if (size == -1) {\n                    // 0x4074e0\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x4073e9;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x406e68\n                    if (mem == NULL) {\n                        // 0x4074e0\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x4073e9;\n                    } else {\n                        // 0x406e7d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x406e84;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4073b0_2:;\n    // 0x4073b0\n    int64_t v14; // 0x406dc0\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x4073b8\n    int64_t v17 = v16; // 0x4073c6\n    int64_t v18 = v16; // 0x4073c6\n    int64_t v19 = v15; // 0x4073c6\n    int64_t v20; // 0x406ea8\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x4075d8;\n    } else {\n        goto lab_0x4073d1;\n    }\n  lab_0x4073e9:\n    // 0x4073e9\n    if (v6 != (int64_t)&v4) {\n        // 0x407400\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40741c\n        free((int64_t *)v6);\n    }\n    // 0x407421\n    *(int32_t *)v10 = 12;\n    // 0x407430\n    return 0;\n  lab_0x406e84:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x406ebd\n    int64_t v23 = *v22; // 0x406ebd\n    int64_t v24 = 0; // 0x406ec3\n    int64_t v25 = v20; // 0x406ec3\n    int64_t v26 = v21; // 0x406ec3\n    int64_t v27 = 0; // 0x406ec3\n    int64_t v28; // 0x406dc0\n    int64_t v29; // 0x406dc0\n    int64_t v30; // 0x406dc0\n    int64_t v31; // 0x406dc0\n    int64_t v32; // 0x406dc0\n    int64_t v33; // 0x406dc0\n    int64_t v34; // 0x406dc0\n    if (v23 == a3) {\n        goto lab_0x4074d3;\n    } else {\n        int64_t v35 = v23 - a3; // 0x406ec9\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x406edb;\n    }\n  lab_0x4074d3:;\n    int64_t v36 = v24; // 0x4074d6\n    float80_t v37; // 0x406dc0\n    float80_t v38 = v37; // 0x4074d6\n    float80_t v39; // 0x406dc0\n    float80_t v40 = v39; // 0x4074d6\n    int64_t v41 = v25; // 0x4074d6\n    int64_t v42 = v26; // 0x4074d6\n    int64_t v43 = v27; // 0x4074d6\n    int64_t v44; // 0x406dc0\n    int64_t v45 = v44; // 0x4074d6\n    goto lab_0x407038;\n  lab_0x407038:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x406dc0\n    int64_t v51; // 0x406dc0\n    int64_t v52; // 0x406dc0\n    int64_t v53; // 0x406dc0\n    int64_t v54; // 0x406dc0\n    int64_t v55; // 0x406dc0\n    int64_t v56; // 0x406dc0\n    int64_t v57; // 0x406dc0\n    int64_t dest_mem2; // 0x406dc0\n    int64_t dest_mem3; // 0x406dc0\n    int64_t v58; // 0x406dc0\n    float80_t v59; // 0x406dc0\n    float80_t v60; // 0x406dc0\n    float80_t v61; // 0x406dc0\n    float80_t v62; // 0x406dc0\n    float80_t v63; // 0x406dc0\n    uint64_t v64; // 0x408166\n    char * v65; // 0x40704c\n    char v66; // 0x40704c\n    int64_t v67; // 0x407074\n    uint32_t v68; // 0x407078\n    int64_t v69; // 0x407455\n    char v70; // 0x406dc0\n    if (v1 == v49) {\n        // 0x408160\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x4088ca\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x4081c2;\n            } else {\n                goto lab_0x4073b0_2;\n            }\n        } else {\n            // 0x408170\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x4081c2;\n            } else {\n                if (v47 != 0) {\n                    // 0x40878d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x4073b0_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x408793\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40818e;\n                        } else {\n                            goto lab_0x40879f;\n                        }\n                    }\n                } else {\n                    // 0x40817e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40818e;\n                    } else {\n                        goto lab_0x40879f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40704c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x407051\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x407aec\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x407c20\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x4073b0_2;\n                } else {\n                    goto lab_0x4074b2;\n                }\n            } else {\n                // 0x407462\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x4074b2;\n                } else {\n                    if (v47 != 0) {\n                        // 0x407d50\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x4073b0_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x407d56\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x407480;\n                            } else {\n                                goto lab_0x407d62;\n                            }\n                        }\n                    } else {\n                        // 0x407470\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x407480;\n                        } else {\n                            goto lab_0x407d62;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x407aec\n                abort();\n                // UNREACHABLE\n            }\n            // 0x407069\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g51 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x4079e0\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x4074b7;\n                }\n                case 19: {\n                    // 0x4079d0\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x4074b7;\n                }\n                case 20: {\n                    // 0x4079b8\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x4074b7;\n                }\n                case 21: {\n                    goto lab_0x4075a0;\n                }\n                case 22: {\n                    goto lab_0x4075a0;\n                }\n                default: {\n                    // 0x40708a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x407530\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x40754d;\n                        } else {\n                            // 0x407537\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x4070c0;\n                            } else {\n                                goto lab_0x40754d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x4070c0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406edb:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x406dc0\n    float80_t v77 = v76;\n    float80_t v78; // 0x406dc0\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x406dc0\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x406ede\n    int64_t v89 = v85; // 0x406ede\n    int64_t v90 = v84; // 0x406ede\n    float80_t v91 = v79; // 0x406ede\n    float80_t v92 = v77; // 0x406ede\n    int64_t v93 = v75; // 0x406ede\n    int64_t v94 = v80; // 0x406ede\n    int64_t v95 = v81; // 0x406ede\n    int64_t v96 = v82; // 0x406ede\n    int64_t v97 = v87; // 0x406ede\n    int64_t v98; // 0x406dc0\n    int64_t v99; // 0x406dc0\n    int64_t v100; // 0x406dc0\n    int64_t v101; // 0x406dc0\n    int64_t v102; // 0x406dc0\n    if (v82 >= v87) {\n        goto lab_0x407029;\n    } else {\n        if (v82 != 0) {\n            // 0x406fc0\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x4073b0_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x406fc6\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x406fdb;\n                } else {\n                    goto lab_0x406fce;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x406f04\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x406fee;\n                } else {\n                    goto lab_0x406f10;\n                }\n            } else {\n                goto lab_0x406fce;\n            }\n        }\n    }\n  lab_0x407029:\n    // 0x407029\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x407038;\n  lab_0x4081c2:\n    // 0x4081c2\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x4081ca\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x4081db\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x4081e7\n    if (v12 != 0) {\n        // 0x4081f3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x408212\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40822e\n        free((int64_t *)v6);\n    }\n    // 0x408233\n    *a2 = v46;\n    // 0x407430\n    return result;\n  lab_0x4075a0:\n    // 0x4075a0\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x4074b7;\n  lab_0x406fce:\n    // 0x406fce\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x4073b0_2;\n    } else {\n        goto lab_0x406fdb;\n    }\n  lab_0x4075d8:\n    // 0x4075d8\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x4073d1;\n  lab_0x4073d1:\n    if (v12 == 0) {\n        // 0x4074e0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x4073e9;\n    } else {\n        // 0x4073e1\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x4073e9;\n    }\n  lab_0x4074b2:\n    // 0x4074b2\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x4074b7;\n  lab_0x4070c0:;\n    int64_t v273 = (int64_t)v11; // 0x4070c0\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x4070c7\n    int64_t v275 = v273 + 1; // 0x4070cb\n    *v11 = 37;\n    int64_t v276 = v275; // 0x4070d4\n    if (v274 % 2 != 0) {\n        // 0x4070d6\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x4070c7\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x4070e7\n    if ((v277 & 2) != 0) {\n        // 0x4070e9\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x4070f3\n    if ((v277 & 4) != 0) {\n        // 0x4070f5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x4070ff\n    if ((v277 & 8) != 0) {\n        // 0x407101\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x40710b\n    if ((v277 & 16) != 0) {\n        // 0x40710d\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x407117\n    if ((v277 & 64) != 0) {\n        // 0x407119\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x407123\n    if ((v277 & 32) != 0) {\n        // 0x407125\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x40712d\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x407131\n    int64_t v293 = v290; // 0x407138\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x407147\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40716a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40716e\n    int64_t v298 = v295; // 0x407175\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x407184\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40707a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x4071b0\n    int64_t v272; // 0x406dc0\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x4071b9\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x4075b8;\n        } else {\n            if (v301 == 12) {\n                // 0x407d78\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x4071e0;\n            } else {\n                // 0x4071d0\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x4075b0\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x4075b8;\n                } else {\n                    goto lab_0x4071e0;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4071e0;\n    }\n  lab_0x4074b7:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x4074b7\n    int64_t v111 = v55 + 88; // 0x4074bb\n    int64_t v112 = *(int64_t *)v111; // 0x4074bf\n    int64_t v113 = v49 + 1; // 0x4074c2\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x406ec9\n        int64_t v115 = v114 + v105; // 0x406ecf\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x4074f8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x4073b0_2;\n            } else {\n                goto lab_0x407029;\n            }\n        } else {\n            goto lab_0x406edb;\n        }\n    } else {\n        goto lab_0x4074d3;\n    }\n  lab_0x406fdb:;\n    int64_t v116 = v80 == v20; // 0x406fe2\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x406f10;\n    } else {\n        goto lab_0x406fee;\n    }\n  lab_0x406fee:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x406dc0\n    if (v102 != 0) {\n        goto lab_0x406f10;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x40700a\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x4075c5;\n        } else {\n            // 0x407018\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x407029;\n        }\n    }\n  lab_0x406f10:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x406f27\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x4073b0_2;\n    } else {\n        // 0x406f4d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x406f75\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x407029;\n    }\n  lab_0x40818e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x408754\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x4073b0_2;\n        } else {\n            // 0x408765\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40877a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x4081c2;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x4081b1\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x4075c5;\n        } else {\n            // 0x4081bf\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x4081c2;\n        }\n    }\n  lab_0x40879f:\n    // 0x40879f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x4073b0_2;\n    } else {\n        goto lab_0x40818e;\n    }\n  lab_0x40754d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x40754d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x407551\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x407555\n    int64_t v123 = 0; // 0x40755c\n    int64_t v124 = v122; // 0x40755c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x407562\n        int64_t v126 = v120; // 0x40756a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x4084f1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x408509\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x40851b\n            int64_t v131 = v128; // 0x408524\n            int64_t v132 = v130; // 0x408524\n            int64_t v133; // 0x406dc0\n            int64_t v134; // 0x408536\n            if (v130 < v129) {\n                // 0x408526\n                if (v121 == v128) {\n                    // break -> 0x407340\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x40732b\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x407340\n                        goto lab_0x407340;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x4084e8\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x4084f1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x408526\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x407340\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x40732b\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x407340\n                            goto lab_0x407340;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x4084e8\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x407574\n            if (*(int32_t *)v135 != 5) {\n                // 0x407aec\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x407580\n            int64_t v137 = v136; // 0x407580\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x40758d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x407340:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x407340\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x407344\n    int64_t v142; // 0x406dc0\n    int64_t v143; // 0x406dc0\n    int64_t v144; // 0x406dc0\n    if (v140 == v141) {\n        goto lab_0x4079f0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x407351\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x408554\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40855d\n            if (v141 == v146) {\n                goto lab_0x407a0e;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x408583\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40858a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x4085a3\n                int64_t v152 = v151; // 0x4085ac\n                int64_t v153 = v149; // 0x4085ac\n                int64_t v154; // 0x406dc0\n                int64_t v155; // 0x4085b7\n                if (v151 < v150) {\n                    // 0x4085ae\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x4073b0_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x4085ca\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x4073b0_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x408570\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x408579\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x4085ae\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x4073b0_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x4085ca\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x4073b0_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x408570\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x40737c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x407363\n            if (*(int32_t *)v156 != 5) {\n                // 0x407aec\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x407370\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x4079f0;\n            } else {\n                goto lab_0x40737c;\n            }\n        }\n    }\n  lab_0x4071e0:\n    // 0x4071e0\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x4071ed\n    int64_t v160 = 0; // 0x4071f5\n    if (v159 != -1) {\n        // 0x4071fb\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x407aec\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x40721e\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x40722c\n        if (*(int32_t *)v162 != 5) {\n            // 0x407aec\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40723f\n        int64_t v164; // bp-8, 0x406dc0\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x406dc0\n    uint64_t v165; // 0x407256\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x407c88\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x4072b4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x4073b0_2;\n    } else {\n        // 0x407260\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x4072b4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x407990\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x4073b0_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x407996\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x407282;\n                } else {\n                    goto lab_0x4079a2;\n                }\n            }\n        } else {\n            // 0x407272\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x407282;\n            } else {\n                goto lab_0x4079a2;\n            }\n        }\n    }\n  lab_0x407480:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x407ca9\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x4073b0_2;\n        } else {\n            // 0x407cc1\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x407cd2\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x4074b2;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x4074a1\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x4075c5;\n        } else {\n            // 0x4074af\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x4074b2;\n        }\n    }\n  lab_0x407d62:\n    // 0x407d62\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x4073b0_2;\n    } else {\n        goto lab_0x407480;\n    }\n  lab_0x4079f0:\n    // 0x4079f0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x407a0e;\n  lab_0x4075b8:\n    // 0x4075b8\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x4071e0;\n  lab_0x4075c5:\n    // 0x4075c5\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x4075d8;\n  lab_0x407a0e:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x407a14\n    v14 = v48;\n    int64_t v170; // 0x406dc0\n    int64_t v171; // 0x406dc0\n    int64_t * v172; // 0x406dc0\n    int64_t v173; // 0x406dc0\n    int64_t v174; // bp-760, 0x406dc0\n    uint64_t size5; // 0x407a18\n    if (v169 == -1) {\n        goto lab_0x4073b0_2;\n    } else {\n        // 0x407a29\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x407a89;\n        } else {\n            // 0x407a35\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x4073b0_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x407a5d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x4073b0_2;\n                } else {\n                    goto lab_0x407a89;\n                }\n            }\n        }\n    }\n  lab_0x40737c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x407a0e;\n    } else {\n        // 0x407385\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x407a0e;\n        } else {\n            goto lab_0x4073b0_2;\n        }\n    }\n  lab_0x407282:\n    // 0x407282\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x407c49\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x407c64\n            if (v48 == v20 && v46 != 0) {\n                // 0x407c72\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x4072b4\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x4072a3\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x4072b4\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x4073b0_2;\n  lab_0x4079a2:\n    // 0x4079a2\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x4073b0_2;\n    } else {\n        goto lab_0x407282;\n    }\n  lab_0x407a89:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x406dc0\n    int64_t v181; // 0x406dc0\n    int64_t v182; // 0x406dc0\n    int64_t v183; // 0x406dc0\n    int64_t v184; // 0x406dc0\n    int64_t v185; // 0x406dc0\n    int64_t v186; // 0x406dc0\n    int64_t v187; // 0x406dc0\n    int64_t v188; // 0x406dc0\n    int64_t v189; // 0x406dc0\n    int64_t v190; // 0x406dc0\n    int64_t v191; // 0x406dc0\n    int64_t v192; // 0x406dc0\n    int64_t v193; // 0x406dc0\n    float80_t v194; // 0x406dc0\n    float80_t v195; // 0x406dc0\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x408602\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x408610\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40873d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x407f49;\n    } else {\n        // 0x407a91\n        int64_t v198; // 0x406dc0\n        float80_t v199; // 0x406dc0\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x408251\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40825e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x4080ba\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x407abf\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x407ac8\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x407aec\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x407aec\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x408636\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x408636\n                            v181 = v187 + 3;\n                            goto lab_0x4087b1;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x4087b1;\n                            } else {\n                                goto lab_0x408672;\n                            }\n                        }\n                    } else {\n                        // 0x408343\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x407f37;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x408351\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40889a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x408398\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x4083ab\n                                int64_t v207 = v176 & 0xffffffff; // 0x4083ae\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x4083bc\n                                int64_t v209 = v187 + 1; // 0x4083d9\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x4083ee\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x4083fb\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x407f49;\n                        }\n                    }\n                } else {\n                    // 0x4080e8\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x4080e8\n                        v180 = v187 + 1;\n                        goto lab_0x408697;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x408697;\n                        } else {\n                            goto lab_0x408108;\n                        }\n                    }\n                }\n            } else {\n                // 0x407f20\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x407f37;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40846c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40847d\n                    char v215 = *v213; // 0x408484\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x4084c0\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x4084cd\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x408495\n                        v182 = v218;\n                        int64_t v219; // 0x408487\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x407f49;\n                }\n            }\n        } else {\n            float80_t v220; // 0x406dc0\n            if (v220 != 0.0L) {\n                // 0x407aec\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40813b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40814a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x408423\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x407f49;\n        }\n    }\n  lab_0x407f49:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x407f4c\n    int64_t v229 = v228; // 0x407f52\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x407f54\n        int64_t v232 = v231 + v224; // 0x407f57\n        int64_t v233 = v232 - v225; // 0x407f5e\n        if ((v230 & 2) != 0) {\n            // 0x408403\n            v229 = v233;\n            int64_t v234 = v224; // 0x408406\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x408410\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x408410\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x408275\n                int64_t v238 = v224; // 0x40827b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x408289\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x408280\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x408295\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x4082a8\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x407f81\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x407fa1\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x407f98\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x407faa\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x407fb8\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x407aec\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x407fe8\n    int64_t dest_mem5 = v48; // 0x407ff5\n    int64_t v250 = v248; // 0x407ff5\n    int64_t v251 = v47; // 0x407ff5\n    int64_t v252; // 0x406dc0\n    if (v47 - v46 > v248) {\n        goto lab_0x408070;\n    } else {\n        if (v249 < v46) {\n            // 0x408242\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x4073b0_2;\n            } else {\n                goto lab_0x408070;\n            }\n        } else {\n            // 0x408000\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x408070;\n            } else {\n                if (v47 != 0) {\n                    // 0x4085d8\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x4073b0_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x4085de\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40801e;\n                        } else {\n                            goto lab_0x4085ea;\n                        }\n                    }\n                } else {\n                    // 0x40800e\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40801e;\n                    } else {\n                        goto lab_0x4085ea;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x408070:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x408081\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40809d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x4074b7;\n  lab_0x407f37:\n    // 0x407f37\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x407f49;\n  lab_0x408697:;\n    char * v257 = nl_langinfo(0x10000); // 0x4086ca\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x4086db\n    char v259 = *v257; // 0x4086e2\n    int64_t v260 = v176 & 0xffffffff; // 0x4086e5\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x4086f3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x408720\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x40872d\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x408108;\n  lab_0x408108:\n    // 0x408108\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x407f49;\n  lab_0x40801e:\n    // 0x40801e\n    if (v48 == 0 || v48 == v20) {\n        // 0x4082bb\n        int64_t size7; // 0x406dc0\n        int64_t * mem12 = malloc((int32_t)size7); // 0x4082d2\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x4073b0_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x4082de\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x408309\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x408070;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40804d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x4073b0_2;\n        } else {\n            // 0x40805b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x408070;\n        }\n    }\n  lab_0x4085ea:\n    // 0x4085ea\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x4073b0_2;\n    } else {\n        goto lab_0x40801e;\n    }\n  lab_0x4087b1:;\n    int64_t v265 = v187 + 4; // 0x4087b1\n    char v266 = *nl_langinfo(0x10000); // 0x4087fc\n    int64_t v267 = v176 & 0xffffffff; // 0x4087ff\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x408806\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x40882d\n        int64_t v270 = v265 + 1; // 0x408835\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x408672;\n  lab_0x408672:\n    // 0x408672\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x407f49;\n}\n"
        },
        {
            "funcName": "function_4088e0",
            "funcStartAddr": "4088e0",
            "funcEndAddr": "408af9",
            "decompiledFuncCode": "int64_t function_4088e0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x408943\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x4088f8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x408909\n    g52 = v5;\n    int64_t v6; // 0x4088e0\n    int64_t v7; // 0x4088e0\n    int64_t v8; // 0x4088e0\n    int64_t v9; // 0x4088e0\n    int64_t v10; // 0x4088e0\n    int64_t v11; // 0x4088e0\n    int64_t v12; // 0x4088e0\n    uint32_t v13; // 0x408a00\n    int64_t * v14; // 0x408a30\n    int64_t v15; // 0x408a38\n    uint32_t v16; // 0x408a80\n    uint32_t v17; // 0x408a50\n    int64_t * v18; // 0x4089e0\n    int64_t v19; // 0x4089e0\n    int64_t * v20; // 0x4089f0\n    int64_t v21; // 0x4089f0\n    int64_t * v22; // 0x4089c8\n    int64_t v23; // 0x4089c8\n    int64_t * v24; // 0x4089b0\n    int64_t v25; // 0x4089b0\n    int64_t * v26; // 0x408ad0\n    uint32_t v27; // 0x408990\n    int64_t v28; // 0x408ad0\n    int64_t * v29; // 0x408ac0\n    int64_t v30; // 0x408ac0\n    uint32_t v31; // 0x408970\n    int64_t * v32; // 0x408ae8\n    int64_t v33; // 0x408ae8\n    int64_t v34; // 0x408a93\n    uint32_t v35; // 0x408950\n    int64_t v36; // 0x408a67\n    uint32_t v37; // 0x408918\n    int32_t * v38; // 0x408a00\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x408990\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x408997\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x4089e0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x4089a3\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x408936\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x408970\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x408977\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x4089f0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x408983\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x408936\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x408950\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x408957\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x4089c8\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x408963\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x408936\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x408918\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x408923\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x4089b0\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x40892f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x408936\n            break;\n        }\n        case 11: {\n            // 0x408a00\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x408a0f\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x408ad0\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x408a1c\n            *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x408936\n            break;\n        }\n        case 12: {\n            // 0x408a30\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x408936\n            break;\n        }\n        case 15: {\n            // 0x408a80\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x408a87\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x408ac0\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x408a93\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x408936\n            break;\n        }\n        case 16: {\n            // 0x408a50\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x408a5b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x408ae8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x408a67\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x408936\n            break;\n        }\n        default: {\n            // 0x408943\n            return 0xffffffff;\n        }\n    }\n    // 0x408936\n    v3++;\n    int64_t v39 = v4 + 32; // 0x408941\n    while (v3 < v2) {\n        // 0x408900\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g52 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x408990\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x408997\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x4089e0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x4089a3\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x408936\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x408970\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x408977\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x4089f0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x408983\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x408936\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x408950\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x408957\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x4089c8\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x408963\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x408936\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x408918\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x408923\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x4089b0\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x40892f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x408936\n                break;\n            }\n            case 11: {\n                // 0x408a00\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x408a0f\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x408ad0\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x408a1c\n                *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x408936\n                break;\n            }\n            case 12: {\n                // 0x408a30\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x408936\n                break;\n            }\n            case 15: {\n                // 0x408a80\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x408a87\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x408ac0\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x408a93\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x408936\n                break;\n            }\n            case 16: {\n                // 0x408a50\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x408a5b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x408ae8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x408a67\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x408936\n                break;\n            }\n            default: {\n                // 0x408943\n                return 0xffffffff;\n            }\n        }\n        // 0x408936\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x408943\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408b00",
            "funcStartAddr": "408b00",
            "funcEndAddr": "409809",
            "decompiledFuncCode": "int64_t function_408b00(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x408b02\n    int64_t v4 = v1 + 16; // 0x408b06\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x408b39\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x408b4e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x408b7b\n    int32_t v8 = 0; // 0x408b80\n    int64_t v9 = 0; // 0x408b80\n    int64_t v10 = v3; // 0x408b80\n    int64_t v11 = a1; // 0x408b80\n    int64_t v12 = 0; // 0x408b80\n    char v13; // 0x408b00\n    int64_t v14; // 0x408b00\n    int64_t v15; // 0x408b00\n    int64_t v16; // 0x408b00\n    int64_t v17; // 0x408b00\n    int64_t v18; // 0x408b00\n    int64_t v19; // 0x408b00\n    int64_t v20; // 0x408b00\n    int64_t v21; // 0x408b00\n    int64_t v22; // 0x408b00\n    int64_t v23; // 0x408b00\n    int64_t v24; // 0x408b00\n    int64_t v25; // 0x408b00\n    int64_t v26; // 0x408b00\n    int64_t v27; // 0x408b00\n    int64_t v28; // 0x408b00\n    int64_t v29; // 0x408b00\n    int64_t v30; // 0x408b00\n    int32_t v31; // 0x408b00\n    int64_t v32; // 0x408b00\n    int64_t v33; // 0x408b70\n    int64_t v34; // 0x408bc0\n    int64_t * v35; // 0x408be3\n    int64_t v36; // 0x408c46\n    if (v7 != 0) {\n        // 0x408b70\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x408b00\n        int64_t v38 = 7; // 0x408b00\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x408b00\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x408b70:\n            // 0x408b70\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x408bb3\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x408bc8\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x408c04\n                int64_t v43 = v42; // 0x408c04\n                int64_t v44 = v43; // 0x408c0d\n                int64_t v45 = v33; // 0x408c0d\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x408fa0\n                    char v47 = *(char *)v46; // 0x408fa4\n                    int64_t v48 = v46; // 0x408fad\n                    while (v47 < 58) {\n                        // 0x408fa0\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x408faf\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x409645\n                        char v52 = *(char *)v51; // 0x409645\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x409649\n                        int64_t v54 = v33; // 0x40965d\n                        int64_t v55 = v51; // 0x40965d\n                        char v56 = v52; // 0x40965d\n                        int64_t v57 = v53; // 0x40965d\n                        bool v58 = v52 < 58; // 0x40965d\n                        bool v59 = v52 < 58; // 0x40965d\n                        char v60 = v52; // 0x40965d\n                        int64_t v61 = v51; // 0x40965d\n                        int64_t v62; // 0x409672\n                        int64_t v63; // 0x409645\n                        char v64; // 0x409645\n                        int64_t v65; // 0x409649\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x4092c8_9;\n                            }\n                            // 0x409643\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x40965f\n                                if (v64 >= 58) {\n                                    goto lab_0x4092c8_9;\n                                }\n                                // 0x409643\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x409618\n                        while (v58) {\n                            // 0x40961e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x4092c8_9;\n                                }\n                                // 0x409643\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x40965f\n                                    if (v64 >= 58) {\n                                        goto lab_0x4092c8_9;\n                                    }\n                                    // 0x409643\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x409614\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x40971d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x4092c8_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x40972e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x408b00\n                v36 = v45;\n                char v70; // 0x408b00\n                while (true) {\n                    // 0x408c46\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x408c60\n                                *v41 = *v41 | 2;\n                                // break -> 0x408c40\n                                break;\n                            }\n                            case 43: {\n                                // 0x408c70\n                                *v41 = *v41 | 4;\n                                // break -> 0x408c40\n                                break;\n                            }\n                            case 32: {\n                                // 0x408c80\n                                *v41 = *v41 | 8;\n                                // break -> 0x408c40\n                                break;\n                            }\n                            case 35: {\n                                // 0x408c90\n                                *v41 = *v41 | 16;\n                                // break -> 0x408c40\n                                break;\n                            }\n                            case 48: {\n                                // 0x408ca0\n                                *v41 = *v41 | 32;\n                                // break -> 0x408c40\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x408ca8\n                                    break;\n                                }\n                                // 0x408c36\n                                *v41 = *v41 | 64;\n                                // break -> 0x408c40\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x408c4f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x408c40\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x408b00\n                int64_t * v72; // 0x408bd1\n                int64_t * v73; // 0x408bda\n                if (v70 == 42) {\n                    // 0x408d1d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x408d3d\n                    int64_t v75 = v74; // 0x408d3d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x408d41\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x408d47\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x40911d\n                        char v80 = *(char *)v79; // 0x409121\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x40911d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x40912d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x409131\n                        int64_t v82 = v36; // 0x409131\n                        int64_t v83 = 0; // 0x409131\n                        if (v80 != 36) {\n                            goto lab_0x408d4d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x409162\n                            int64_t v89 = v85; // 0x409162\n                            int64_t v90 = v87; // 0x409162\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x409167\n                            int64_t v95 = v92 + 1; // 0x40916a\n                            char v96 = *(char *)v95; // 0x40916a\n                            int64_t v97 = v96; // 0x40916a\n                            while (v94 < v91) {\n                                // 0x409181\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x4092c8_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x40913b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x409144\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x409181\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x4092c8_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x40913b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x4097bb\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x4092c8_9;\n                            }\n                            // 0x4097c9\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x408d5c;\n                        }\n                    } else {\n                        goto lab_0x408d4d;\n                    }\n                } else {\n                    // 0x408cad\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x408b00\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x4093cb\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x4093d0\n                        int64_t v102 = v71; // 0x4093d9\n                        char * v103 = v100; // 0x4093d9\n                        int64_t v104 = v36; // 0x4093d9\n                        int64_t v105 = v71; // 0x4093d9\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x4093e3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x4093e3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x4093e3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x4093f2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x409415\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x408cb8;\n                }\n            } else {\n                goto lab_0x408b78;\n            }\n        }\n    }\n  lab_0x408b82:\n    // 0x408b82\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x408ba4\n    return 0;\n  lab_0x4092c8_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x4092d3\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x4092e5\n    if (v3 != v115) {\n        // 0x4092f0\n        free((int64_t *)v115);\n    }\n    // 0x4092f5\n    *__errno_location() = 22;\n    // 0x408ba4\n    return 0xffffffff;\n  lab_0x4094a0_5:;\n    // 0x4094a0\n    int64_t v116; // 0x408b00\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x4094a5\n    int64_t v119; // 0x408b00\n    if (v4 == v117) {\n        goto lab_0x4094b9_3;\n    } else {\n        // 0x4094a7\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x4094b9_3;\n    }\n  lab_0x4094b9_3:;\n    int64_t v120 = *v5; // 0x4094b9\n    int32_t * v121; // 0x4094c9\n    if (v3 == v120) {\n        // 0x4094c9\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x4094c4\n    free((int64_t *)v120);\n    // 0x4094c9\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x408b78:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x408b7b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x408b82\n        goto lab_0x408b82;\n    }\n    goto lab_0x408b70;\n  lab_0x408d4d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x408d4d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x4090f3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x4092c8_9;\n        }\n        // 0x40910b\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x408d5c;\n  lab_0x408cb8:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x408cbb\n    int64_t v147 = v339; // 0x408cbb\n    int64_t v145 = v338; // 0x408cbb\n    int64_t v143 = v337; // 0x408cbb\n    int64_t v186; // 0x408b00\n    int64_t v190; // 0x408b00\n    int64_t v189; // 0x408b00\n    int64_t v188; // 0x408b00\n    int64_t v187; // 0x408b00\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x408dc0;\n    } else {\n        goto lab_0x408cc1;\n    }\n  lab_0x408d5c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x408d5c\n    int64_t v132 = v128; // 0x408d63\n    int64_t v133 = v16; // 0x408d63\n    int64_t v134 = v131; // 0x408d63\n    int64_t v135; // 0x408b00\n    int64_t v136; // 0x408b00\n    int64_t v137; // 0x408b00\n    int64_t v138; // 0x40900f\n    if (v16 > v127) {\n        goto lab_0x408d6c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x409005\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x4094a0_5;\n        }\n        int64_t size = 32 * v138; // 0x40902e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x40958c\n            if (mem == NULL) {\n                goto lab_0x4094b9_3;\n            }\n            // 0x4095ae\n            v135 = (int64_t)mem;\n            goto lab_0x4095b9;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x40904f\n            int64_t v140 = *v6; // 0x409054\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x4094a0_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x40904f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x4095b9;\n            } else {\n                goto lab_0x40908d;\n            }\n        }\n    }\n  lab_0x408cc1:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x408cc8\n    int64_t v151 = v146; // 0x408cc8\n    int64_t v152 = v144; // 0x408cc8\n    uint64_t v153; // 0x408b00\n    int64_t v154; // 0x408b00\n    int64_t v155; // 0x408d07\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x408d0b\n        int64_t v158; // 0x408b00\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x408e70\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x408d03\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x408e78\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x408d00\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x408d03\n                    break;\n                }\n            }\n        } else {\n            // 0x408d10\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x408d03\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x408e78\n    int64_t v162 = v161 % 256; // 0x408e84\n    g53 = v162;\n    int64_t v163 = 17; // 0x408e87\n    int64_t v164 = v154; // 0x408e87\n    int64_t v165 = v154; // 0x408e87\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x408ef1;\n        }\n        case 28: {\n            goto lab_0x409242;\n        }\n        case 30: {\n            // 0x40926e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x408e99;\n        }\n        case 32: {\n            goto lab_0x409242;\n        }\n        case 33: {\n            goto lab_0x409242;\n        }\n        case 34: {\n            goto lab_0x409242;\n        }\n        case 46: {\n            // 0x40925f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x408e99;\n        }\n        case 51: {\n            goto lab_0x40927d;\n        }\n        case 60: {\n            goto lab_0x409242;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x409199\n            int32_t v167 = v166 - 7; // 0x409199\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40919f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x408e99;\n        }\n        case 63: {\n            goto lab_0x4091f0;\n        }\n        case 64: {\n            goto lab_0x409242;\n        }\n        case 65: {\n            goto lab_0x409242;\n        }\n        case 66: {\n            goto lab_0x409242;\n        }\n        case 68: {\n            goto lab_0x4091f0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x4091af\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x4091b5\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x4091bd\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x4091cb\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x4091df\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x408e99;\n        }\n        case 74: {\n            goto lab_0x40927d;\n        }\n        case 75: {\n            goto lab_0x408e99;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x408e90\n            int32_t v172 = v171 - 7; // 0x408e90\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x408e96\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x408e99;\n        }\n        case 80: {\n            goto lab_0x40927d;\n        }\n        case 83: {\n            goto lab_0x40927d;\n        }\n        default: {\n            goto lab_0x4092c8_9;\n        }\n    }\n  lab_0x408d6c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x408d83\n        int64_t v178 = v176; // 0x408b00\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x408d78\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x408d78\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x408d91\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x408d9d\n    int32_t v182 = *v181; // 0x408d9d\n    if (v182 != 0) {\n        // 0x40941e\n        if (v182 != 5) {\n            goto lab_0x4092c8_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x409427\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x408cb8;\n    } else {\n        // 0x408da7\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x408dad\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x408cc1;\n        } else {\n            goto lab_0x408dc0;\n        }\n    }\n  lab_0x408dc0:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x408dc0\n    char v197 = *v196; // 0x408dc0\n    int64_t * v198; // 0x408be8\n    *v198 = v192;\n    int64_t v199; // 0x408b00\n    int64_t v200; // 0x408b00\n    int64_t v201; // 0x408b00\n    int64_t v202; // 0x408b00\n    int64_t v203; // 0x408b00\n    int64_t * v204; // 0x408bf1\n    int64_t * v205; // 0x408bfa\n    int64_t v206; // 0x408dd9\n    if (v197 != 42) {\n        char v207 = *v196; // 0x408fc0\n        int64_t v208 = v193; // 0x408fc9\n        char * v209; // 0x408b00\n        int64_t v210; // 0x408b00\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x408fd0\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x408fd4\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x408fd0\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x408fde\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x408fc0\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x408ff1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x408cc1;\n    } else {\n        // 0x408dcf\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x408def\n        int64_t v219 = v218; // 0x408def\n        int64_t v220 = v219 + 0xffffffd0; // 0x408df3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x408df9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x4096a4\n            char v224 = *(char *)v223; // 0x4096a8\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x4096a4\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x4096b4\n            v201 = v223;\n            int64_t v225 = v219; // 0x4096b8\n            int64_t v226 = v206; // 0x4096b8\n            int64_t v227 = 0; // 0x4096b8\n            if (v224 != 36) {\n                goto lab_0x408dff;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x4096e9\n                int64_t v233 = v229; // 0x4096e9\n                int64_t v234 = v231; // 0x4096e9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x4096ee\n                int64_t v239 = v236 + 1; // 0x4096f5\n                char v240 = *(char *)v239; // 0x4096f9\n                int64_t v241 = v240; // 0x4096f9\n                while (v238 < v235) {\n                    // 0x409707\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x4092c8_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x4096c2\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x4096cb\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x409707\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x4092c8_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x4096c2\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x4097d7\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x4092c8_9;\n                }\n                // 0x4097e5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x408e0e;\n            }\n        } else {\n            goto lab_0x408dff;\n        }\n    }\n  lab_0x408ef1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x408ef6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x408efe\n    *a2 = v245;\n    int64_t v246; // 0x408b00\n    int64_t v247; // 0x408b00\n    int64_t dest_mem; // 0x408b00\n    int64_t v248; // 0x408b00\n    int64_t v249; // 0x4097f3\n    if (v246 > v245) {\n        // 0x408f0a\n        goto lab_0x408b78;\n    } else {\n        if (v246 < 0) {\n            // 0x4097f3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x4094a0_5;\n        }\n        int64_t v250 = 2 * v246; // 0x408f26\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x4097f3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x4094a0_5;\n        }\n        int64_t v251 = *v5; // 0x408f37\n        int64_t size2 = 176 * v246; // 0x408f49\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x409099\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x4095fc\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x4094c9\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x4094a7\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x4094b9_3;\n            }\n            goto lab_0x4090b4;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x408f5b\n            if (mem4 == NULL) {\n                // 0x4097f3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x4094a0_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x408f5b\n            int64_t v254 = *v5; // 0x408f7d\n            int64_t v255 = *a2; // 0x408f81\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x4090b4;\n            } else {\n                goto lab_0x408f8f;\n            }\n        }\n    }\n  lab_0x409242:\n    // 0x409242\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x409257\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x408e99;\n  lab_0x40927d:;\n    uint32_t v335 = (int32_t)v153; // 0x409285\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40928b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x409293\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x4092a1\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x4092ae\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x408e99;\n  lab_0x4091f0:;\n    uint32_t v336 = (int32_t)v153; // 0x4091f8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x4091fe\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x409206\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x409214\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x409221\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x408e99;\n  lab_0x408e99:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x408b00\n    int64_t v260; // 0x408b00\n    int64_t * v261; // 0x408bff\n    if (v259 == -1) {\n        // 0x4093a4\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x4092c8_9;\n        }\n        // 0x4093bc\n        v260 = v148;\n    } else {\n        // 0x408ea3\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x408ea8\n    int64_t v264 = v258; // 0x408eaf\n    int64_t v265 = v162; // 0x408eaf\n    int64_t v266 = v263; // 0x408eaf\n    int64_t v267; // 0x408b00\n    int64_t v268; // 0x408b00\n    int64_t v269; // 0x408b00\n    int64_t v270; // 0x408b00\n    int64_t v271; // 0x408b00\n    if (v142 > v262) {\n        goto lab_0x408eb5;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x409318\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x409322\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x4094a0_5;\n        }\n        int64_t size3 = 32 * v273; // 0x409341\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x409354\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x409439\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x4094b9_3;\n            }\n            goto lab_0x409456;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x409361\n            if (mem6 == NULL) {\n                // 0x4097f3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x4094a0_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x409361\n            int64_t v276 = v274 & 0xffffffff; // 0x409366\n            int64_t v277 = *v6; // 0x409391\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x409456;\n            } else {\n                goto lab_0x40939b;\n            }\n        }\n    }\n  lab_0x408eb5:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x408ecb\n        int64_t v282 = v279; // 0x408b00\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x408ec0\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x408ec0\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x408ed9\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x408ee5\n    int32_t v286 = *v285; // 0x408ee5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x40930a\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x4092c8_9;\n        }\n    } else {\n        // 0x408eef\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x408ef1;\n  lab_0x4095b9:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x4095b9\n    int64_t * v290; // 0x408b00\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40908d;\n  lab_0x40908d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x408d6c;\n  lab_0x408dff:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x408dff\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x40967a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x4092c8_9;\n        }\n        // 0x409692\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x408e0e;\n  lab_0x408e0e:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x408e0e\n    int64_t v300 = v296; // 0x408e15\n    int64_t v301 = v191; // 0x408e15\n    int64_t v302 = v299; // 0x408e15\n    int64_t v303; // 0x408b00\n    int64_t v304; // 0x408b00\n    int64_t v305; // 0x408b00\n    int64_t v306; // 0x4094f2\n    if (v191 > v295) {\n        goto lab_0x408e1e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x4094e8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x4094a0_5;\n        }\n        int64_t size4 = 32 * v306; // 0x40950d\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x40973e\n            if (mem7 == NULL) {\n                goto lab_0x4094b9_3;\n            }\n            // 0x409760\n            v304 = (int64_t)mem7;\n            goto lab_0x40976b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x40952e\n            int64_t v308 = *v6; // 0x409533\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x4094a0_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x40952e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x40976b;\n            } else {\n                goto lab_0x40956c;\n            }\n        }\n    }\n  lab_0x4090b4:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x408b00\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x408f8f;\n  lab_0x408f8f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x408b78;\n  lab_0x409456:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x40946c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x40939b;\n  lab_0x40939b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x408eb5;\n  lab_0x408e1e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x408e33\n        int64_t v324 = v322; // 0x408b00\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x408e28\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x408e28\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x408e41\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x408e4e\n    int32_t v328 = *v327; // 0x408e4e\n    if (v328 != 0) {\n        // 0x409575\n        if (v328 != 5) {\n            goto lab_0x4092c8_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x40957e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x408e58\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x408e61\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x408cc1;\n  lab_0x40976b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x40976b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x40956c;\n  lab_0x40956c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x408e1e;\n}\n"
        },
        {
            "funcName": "function_409810",
            "funcStartAddr": "409810",
            "funcEndAddr": "40986d",
            "decompiledFuncCode": "int64_t function_409810(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409810\n    return function_401570();\n}\n"
        },
        {
            "funcName": "function_409870",
            "funcStartAddr": "409870",
            "funcEndAddr": "409871",
            "decompiledFuncCode": "int64_t function_409870(void) {\n    // 0x409870\n    int64_t result; // 0x409870\n    return result;\n}\n"
        },
        {
            "funcName": "function_409880",
            "funcStartAddr": "409880",
            "funcEndAddr": "409898",
            "decompiledFuncCode": "int64_t function_409880(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409880\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_409898",
            "funcStartAddr": "409898",
            "funcEndAddr": "4098b8",
            "decompiledFuncCode": "int64_t function_409898(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x4098a2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4098a3\n        v1 -= 8;\n    }\n    // 0x4098b4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_seq.elf"
}