{
    "funcInfo": [
        {
            "funcName": "function_401b50",
            "funcStartAddr": "401b50",
            "funcEndAddr": "401b55",
            "decompiledFuncCode": "int64_t function_401b50(void) {\n    // 0x401b50\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b55",
            "funcStartAddr": "401b55",
            "funcEndAddr": "401b5a",
            "decompiledFuncCode": "int64_t function_401b55(void) {\n    // 0x401b55\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b5a",
            "funcStartAddr": "401b5a",
            "funcEndAddr": "401b5f",
            "decompiledFuncCode": "int64_t function_401b5a(void) {\n    // 0x401b5a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b5f",
            "funcStartAddr": "401b5f",
            "funcEndAddr": "401b64",
            "decompiledFuncCode": "int64_t function_401b5f(void) {\n    // 0x401b5f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b64",
            "funcStartAddr": "401b64",
            "funcEndAddr": "401b69",
            "decompiledFuncCode": "int64_t function_401b64(void) {\n    // 0x401b64\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b69",
            "funcStartAddr": "401b69",
            "funcEndAddr": "401b6e",
            "decompiledFuncCode": "int64_t function_401b69(void) {\n    // 0x401b69\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b70",
            "funcStartAddr": "401b70",
            "funcEndAddr": "402276",
            "decompiledFuncCode": "int64_t function_401b70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * exec_argv[1]; // 0x401ef4\n    int64_t v1 = a1 & 0xffffffff; // 0x401b82\n    int32_t uid = -1; // bp-88, 0x401b8f\n    int32_t gid = -1; // bp-84, 0x401b97\n    int64_t v2 = 0; // bp-80, 0x401b9f\n    int32_t size = 0; // bp-72, 0x401ba8\n    function_4029d0(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g19 = 125;\n    function_406f30(0x402930, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v3 = 0; // 0x401bf2\n    int64_t v4 = 0; // 0x401bf2\n    int64_t v5 = 0; // 0x401bf2\n    int64_t v6; // 0x401b70\n    while (true) {\n        // 0x401bf8\n        v6 = v3;\n        int64_t v7 = v4; // 0x401b70\n        uint32_t v8; // 0x401b70\n        while (true) {\n            // 0x401bf8\n            v4 = v7;\n            int64_t v9 = v5; // 0x401b70\n            while (true) {\n              lab_0x401bf8:\n                // 0x401bf8\n                v5 = v9;\n                v8 = (int32_t)function_4063d0(v1, a2, &g2, &g3, 0, a6);\n                switch (v8) {\n                    case -1: {\n                        goto lab_0x401ccc;\n                    }\n                    case 256: {\n                        // 0x401cc0\n                        v9 = (int64_t)g46;\n                        goto lab_0x401bf8;\n                    }\n                    default: {\n                        goto lab_0x401c23;\n                    }\n                }\n            }\n          lab_0x401c23:\n            if (v8 <= 256) {\n                if (v8 == -131) {\n                    // 0x401c57\n                    function_404e50((int64_t)g29, \"chroot\", \"GNU coreutils\", (int64_t)g18, \"Roland McGrath\", 0);\n                    exit(0);\n                    // UNREACHABLE\n                }\n                if (v8 == -130) {\n                    // 0x401cb1\n                    function_402580(0);\n                    // UNREACHABLE\n                }\n                goto lab_0x4021e0;\n            }\n            if (v8 != 257) {\n                // break -> 0x401c90\n                break;\n            }\n            int64_t v10 = (int64_t)g46; // 0x401c2c\n            int32_t len = strlen(g46); // 0x401c36\n            if (len != 0) {\n                char * v11 = (char *)(v10 - 1 + (int64_t)len); // 0x401c45\n                if (*v11 == 58) {\n                    // 0x401c4a\n                    *v11 = 0;\n                }\n            }\n            // 0x401bf8\n            v7 = v10;\n        }\n        // 0x401c90\n        v3 = 1;\n        if (v8 != 258) {\n          lab_0x4021e0:\n            // 0x4021e0\n            function_402580(125);\n            // UNREACHABLE\n        }\n    }\n  lab_0x401ccc:;\n    uint64_t v12 = (int64_t)*(int32_t *)0x60b2bc; // 0x401ccc\n    char * format; // 0x4021cd\n    if (v1 <= v12) {\n        // 0x4021c1\n        format = dcgettext(NULL, \"missing operand\", 5);\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n        // 0x4021e0\n        function_402580(125);\n        // UNREACHABLE\n    }\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x401cdb\n    char * path = (char *)v13; // 0x401ce2\n    char * str = canonicalize_file_name(path); // 0x401ce2\n    int64_t v14 = (int64_t)str; // 0x401ce2\n    int64_t v15 = v14; // 0x401ced\n    int64_t v16 = a2; // 0x401ced\n    int64_t v17 = v1; // 0x401ced\n    int64_t v18 = v6; // 0x401ced\n    int64_t v19; // 0x401b70\n    int64_t v20; // 0x401b70\n    int64_t v21; // 0x401b70\n    int64_t v22; // 0x401b70\n    int64_t v23; // 0x401b70\n    int64_t v24; // 0x401b70\n    int64_t v25; // 0x401b70\n    int32_t v26; // 0x401b70\n    int32_t v27; // 0x401b70\n    int32_t v28; // 0x401b70\n    if (str == NULL) {\n        goto lab_0x401db2;\n    } else {\n        // 0x401cf3\n        v15 = v14;\n        v16 = a2;\n        v17 = v1;\n        v18 = v6;\n        if (strcmp(\"/\", str) != 0) {\n            goto lab_0x401db2;\n        } else {\n            // 0x401d12\n            free((int64_t *)str);\n            v27 = v14;\n            v19 = v6;\n            if (chroot(path) != 0) {\n                goto lab_0x4020a5;\n            } else {\n                // 0x401d2a\n                v26 = 0;\n                v24 = a2;\n                v22 = v1;\n                v20 = v6;\n                v28 = 0;\n                v25 = a2;\n                v23 = v1;\n                v21 = 0;\n                if (v6 == 0) {\n                    goto lab_0x401e23;\n                } else {\n                    goto lab_0x401d3c;\n                }\n            }\n        }\n    }\n  lab_0x401db2:;\n    int64_t v29 = v18;\n    free((int64_t *)v15);\n    char * format2; // 0x402256\n    if ((char)v29 != 0) {\n        // 0x402238\n        function_4043a0(4, (int64_t)\"/\");\n        format2 = dcgettext(NULL, \"option --skip-chdir only permitted if NEWROOT is old %s\", 5);\n        error(0, (int32_t)\"option --skip-chdir only permitted if NEWROOT is old %s\" ^ (int32_t)\"option --skip-chdir only permitted if NEWROOT is old %s\", format2);\n        function_402580(125);\n        // UNREACHABLE\n    }\n    int64_t v30 = v17;\n    int64_t v31 = v16;\n    if (v4 != 0) {\n        // 0x401dc8\n        function_404920(v4, &uid, &gid, 0, 0);\n    }\n    int64_t v32 = v31; // 0x401de6\n    int64_t v33 = v30; // 0x401de6\n    int64_t v34 = v29; // 0x401de6\n    int32_t v35 = 0; // 0x401de6\n    int64_t v36; // 0x401b70\n    int64_t v37; // 0x401b70\n    int64_t v38; // 0x401b70\n    int64_t v39; // 0x401b70\n    struct passwd * v40; // 0x401b70\n    int64_t v41; // 0x401b70\n    int64_t v42; // 0x401b70\n    int64_t v43; // 0x401b70\n    int64_t v44; // 0x401b70\n    int64_t v45; // 0x401b70\n    int64_t v46; // 0x401b70\n    int64_t v47; // 0x401b70\n    int64_t v48; // 0x401b70\n    int32_t uid2; // 0x401b70\n    int32_t v49; // 0x401b70\n    if (uid == -1) {\n        goto lab_0x402005;\n    } else {\n        if (v5 == 0) {\n            struct passwd * v50 = getpwuid(uid); // 0x402173\n            v49 = 0;\n            v48 = v31;\n            v44 = v30;\n            v39 = v29;\n            v40 = v50;\n            v46 = v31;\n            v42 = v30;\n            v37 = v29;\n            if (v50 != NULL) {\n                goto lab_0x40214e;\n            } else {\n                goto lab_0x401e13;\n            }\n        } else {\n            // 0x401df5\n            v47 = v31;\n            v43 = v30;\n            v38 = v29;\n            v45 = v31;\n            v41 = v30;\n            uid2 = uid;\n            v36 = v29;\n            if (gid == -1) {\n                goto lab_0x402140;\n            } else {\n                goto lab_0x401e00;\n            }\n        }\n    }\n  lab_0x402005:;\n    int32_t v51 = v35;\n    int64_t v52 = v34;\n    int64_t v53 = v33;\n    int64_t v54 = v32;\n    int32_t v55 = v51; // 0x402008\n    int64_t v56 = v54; // 0x402008\n    int64_t v57 = v53; // 0x402008\n    int64_t v58 = v52; // 0x402008\n    if (v5 != 0) {\n        goto lab_0x401e09;\n    } else {\n        // 0x40200e\n        v49 = v51;\n        v48 = v54;\n        v44 = v53;\n        v39 = v52;\n        if (v51 != 0 && gid != -1) {\n            int32_t v59 = function_405220(); // 0x402033\n            v49 = v51;\n            v48 = v54;\n            v44 = v53;\n            v39 = v52;\n            if (v59 >= 1) {\n                // 0x40203b\n                size = v59;\n                v49 = v51;\n                v48 = v54;\n                v44 = v53;\n                v39 = v52;\n            }\n        }\n        goto lab_0x401e13;\n    }\n  lab_0x401e09:;\n    int64_t v60 = v58;\n    int64_t v61 = v57;\n    int64_t v62 = v56;\n    int32_t v63 = v55;\n    v49 = v63;\n    v48 = v62;\n    v44 = v61;\n    v39 = v60;\n    if (*(char *)v5 != 0) {\n        // 0x4020ec\n        function_402360(v5, &v2, (int64_t *)&size, 0);\n        v49 = v63;\n        v48 = v62;\n        v44 = v61;\n        v39 = v60;\n    }\n    goto lab_0x401e13;\n  lab_0x4020a5:\n    // 0x4020a5\n    function_4043a0(4, v13);\n    char * format5 = dcgettext(NULL, \"cannot change root directory to %s\", 5); // 0x4020c1\n    error(125, *__errno_location(), format5);\n    int32_t v67 = v27; // 0x4020dd\n    int64_t v69 = (int64_t)format5; // 0x4020dd\n    int64_t v72 = v19; // 0x4020dd\n    goto lab_0x4020e2;\n  lab_0x401e13:\n    // 0x401e13\n    v28 = v49;\n    v25 = v48;\n    v23 = v44;\n    v21 = v39;\n    v27 = v49;\n    v19 = v39;\n    if (chroot(path) != 0) {\n        goto lab_0x4020a5;\n    } else {\n        goto lab_0x401e23;\n    }\n  lab_0x40214e:;\n    struct passwd * v64 = v40;\n    if (gid == -1) {\n        // 0x402155\n        gid = *(int32_t *)((int64_t)v64 + 20);\n    }\n    // 0x40215c\n    v32 = v46;\n    v33 = v42;\n    v34 = v37;\n    v35 = (int32_t)*(int64_t *)v64;\n    goto lab_0x402005;\n  lab_0x402140:;\n    struct passwd * v65 = getpwuid(uid2); // 0x402140\n    v47 = v45;\n    v43 = v41;\n    v38 = v36;\n    v40 = v65;\n    v46 = v45;\n    v42 = v41;\n    v37 = v36;\n    if (v65 == NULL) {\n        goto lab_0x401e00;\n    } else {\n        goto lab_0x40214e;\n    }\n  lab_0x401e00:\n    // 0x401e00\n    v55 = 0;\n    v56 = v47;\n    v57 = v43;\n    v58 = v38;\n    goto lab_0x401e09;\n  lab_0x4020e2:;\n    int32_t v66 = v67; // 0x4020e7\n    int64_t v68 = v69; // 0x4020e7\n    int32_t * v70; // bp-64, 0x401b70\n    int64_t list = (int64_t)v70; // 0x4020e7\n    int64_t v71 = v72; // 0x4020e7\n    goto lab_0x401e98;\n  lab_0x401e23:;\n    int64_t v113 = v21;\n    int32_t v114 = v28;\n    v26 = v114;\n    v24 = v25;\n    v22 = v23;\n    v20 = v113;\n    int64_t v87; // 0x401b70\n    int64_t v86; // 0x401b70\n    int32_t v85; // 0x401b70\n    if (chdir(\"/\") == 0) {\n        goto lab_0x401d3c;\n    } else {\n        char * format4 = dcgettext(NULL, \"cannot chdir to root directory\", 5); // 0x401e41\n        error(125, *__errno_location(), format4);\n        v85 = v114;\n        v86 = (int64_t)format4;\n        v87 = v113;\n        goto lab_0x401e5f;\n    }\n  lab_0x401d3c:;\n    int64_t v115 = v20;\n    int64_t v116 = v24;\n    int32_t v117 = v26;\n    int32_t v78 = v117; // 0x401d48\n    int64_t v76 = v116; // 0x401d48\n    int64_t v81 = v115; // 0x401d48\n    int64_t v80; // 0x401b70\n    int64_t v79; // 0x401b70\n    int32_t v77; // 0x401b70\n    if (g27 + 1 == (int32_t)v22) {\n        goto lab_0x40207a;\n    } else {\n        // 0x401d4e\n        v77 = v117;\n        v79 = v116 + 8 + 8 * (int64_t)g27;\n        v80 = v115;\n        goto lab_0x401d53;\n    }\n  lab_0x401e98:;\n    int32_t v73 = v66; // 0x401ea7\n    int64_t v74 = v68; // 0x401ea7\n    int32_t * err_num; // 0x401b70\n    if (setgroups(size, (int32_t *)list) != 0) {\n        // 0x4021ea\n        error(125, *__errno_location(), dcgettext(NULL, \"failed to set supplemental groups\", 5));\n        err_num = (int32_t *)v71;\n        goto lab_0x402214;\n    } else {\n        goto lab_0x401ead;\n    }\n  lab_0x40207a:;\n    char * env_val = getenv(\"SHELL\"); // 0x40207f\n    int64_t v75 = env_val == NULL ? (int64_t)\"/bin/sh\" : (int64_t)env_val;\n    *(int64_t *)v76 = v75;\n    *(int64_t *)(v76 + 8) = (int64_t)\"-i\";\n    *(int64_t *)(v76 + 16) = 0;\n    v77 = v78;\n    v79 = v76;\n    v80 = v81;\n    goto lab_0x401d53;\n  lab_0x401ead:;\n    int64_t v108 = v74;\n    free((int64_t *)v70);\n    free((int64_t *)v2);\n    int32_t * err_num2 = __errno_location(); // 0x401ec5\n    if (gid != -1) {\n        // 0x402047\n        if (setgid(gid) == 0) {\n            goto lab_0x401ed6;\n        } else {\n            // 0x402056\n            error(125, *err_num2, dcgettext(NULL, \"failed to set group-ID\", 5));\n            v78 = v73;\n            v76 = v108;\n            v81 = (int64_t)err_num2;\n            goto lab_0x40207a;\n        }\n    } else {\n        goto lab_0x401ed6;\n    }\n  lab_0x401e5f:;\n    int32_t v89 = v85; // 0x401e66\n    int64_t v90 = v86; // 0x401e66\n    int32_t uid3 = uid; // 0x401e66\n    int64_t v91 = v87; // 0x401e66\n    int32_t v92 = v85; // 0x401e66\n    int64_t v93 = v86; // 0x401e66\n    int64_t v94 = v87; // 0x401e66\n    if (uid == -1) {\n        goto lab_0x401f69;\n    } else {\n        goto lab_0x401e6c;\n    }\n  lab_0x401d53:;\n    int64_t v82 = v80;\n    int64_t v83 = v79;\n    int32_t v84 = v77;\n    v85 = v84;\n    v86 = v83;\n    v87 = v82;\n    if (v4 == 0) {\n        goto lab_0x401e5f;\n    } else {\n        int64_t v88 = function_404920(v4, &uid, &gid, 0, 0); // 0x401d6e\n        v85 = v84;\n        v86 = v83;\n        v87 = v82;\n        if (v88 == 0) {\n            goto lab_0x401e5f;\n        } else {\n            // 0x401d7f\n            v89 = v84;\n            v90 = v83;\n            uid3 = uid;\n            v91 = v82;\n            if (uid != -1) {\n                goto lab_0x401e6c;\n            } else {\n                // 0x401d8c\n                v92 = v84;\n                v93 = v83;\n                v94 = v82;\n                if (gid != -1) {\n                    goto lab_0x401f69;\n                } else {\n                    // 0x401d97\n                    error(125, *__errno_location(), \"%s\", (char *)v88);\n                    v15 = (int64_t)\"%s\";\n                    v16 = v83;\n                    v17 = v88;\n                    v18 = v82;\n                    goto lab_0x401db2;\n                }\n            }\n        }\n    }\n  lab_0x402214:\n    // 0x402214\n    error(125, *err_num, dcgettext(NULL, \"failed to set user-ID\", 5));\n    // 0x402238\n    function_4043a0(4, (int64_t)\"/\");\n    format2 = dcgettext(NULL, \"option --skip-chdir only permitted if NEWROOT is old %s\", 5);\n    error(0, (int32_t)\"option --skip-chdir only permitted if NEWROOT is old %s\" ^ (int32_t)\"option --skip-chdir only permitted if NEWROOT is old %s\", format2);\n    function_402580(125);\n    // UNREACHABLE\n  lab_0x401ed6:\n    // 0x401ed6\n    if (uid == -1) {\n        goto lab_0x401eec;\n    } else {\n        // 0x401edf\n        err_num = err_num2;\n        if (setuid(uid) != 0) {\n            goto lab_0x402214;\n        } else {\n            goto lab_0x401eec;\n        }\n    }\n  lab_0x401f69:;\n    int64_t v95 = v94;\n    int64_t v96 = v93;\n    int32_t v97 = v92;\n    v70 = NULL;\n    int32_t v98 = v97; // 0x401f7a\n    int64_t v99 = v96; // 0x401f7a\n    int64_t v100 = v95; // 0x401f7a\n    if (v5 != 0) {\n        goto lab_0x401e8e;\n    } else {\n        int64_t v101 = v2; // 0x401f8c\n        if (v97 != 0 && gid != -1) {\n            int32_t v102 = function_405220(); // 0x401f9d\n            if (v102 < 1) {\n                // 0x40218b\n                v101 = v2;\n                if (size == 0) {\n                    // 0x402197\n                    error(125, *__errno_location(), dcgettext(NULL, \"failed to get supplemental groups\", 5));\n                    // 0x4021c1\n                    format = dcgettext(NULL, \"missing operand\", 5);\n                    error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n                    // 0x4021e0\n                    function_402580(125);\n                    // UNREACHABLE\n                }\n            } else {\n                // 0x401fa5\n                size = v102;\n                v101 = (int64_t)v70;\n            }\n        }\n        // 0x401fb1\n        v66 = v97;\n        v68 = v96;\n        list = v101;\n        v71 = v95;\n        v73 = v97;\n        v74 = v96;\n        if (uid == -1) {\n            goto lab_0x401ead;\n        } else {\n            goto lab_0x401e98;\n        }\n    }\n  lab_0x401e6c:;\n    int64_t v103 = v91;\n    int64_t v104 = v90;\n    int32_t v105 = v89;\n    if (v5 == 0 || gid == -1) {\n        struct passwd * v106 = getpwuid(uid3); // 0x401f45\n        int32_t v107 = gid;\n        if (v106 == NULL) {\n            // 0x402105\n            v92 = v105;\n            v93 = v104;\n            v94 = v103;\n            if (v107 != -1) {\n                goto lab_0x401f69;\n            } else {\n                char * format3 = dcgettext(NULL, \"no group specified for unknown uid: %d\", 5); // 0x402120\n                error(125, *__errno_location(), format3);\n                v45 = (int64_t)format3;\n                v41 = uid;\n                uid2 = 125;\n                v36 = v103;\n                goto lab_0x402140;\n            }\n        } else {\n            if (v107 == -1) {\n                // 0x401f5a\n                gid = *(int32_t *)((int64_t)v106 + 20);\n            }\n            // 0x401f61\n            v92 = (int32_t)*(int64_t *)v106;\n            v93 = v104;\n            v94 = v103;\n            goto lab_0x401f69;\n        }\n    } else {\n        // 0x401e80\n        v70 = NULL;\n        v98 = v105;\n        v99 = v104;\n        v100 = v103;\n        goto lab_0x401e8e;\n    }\n  lab_0x401eec:;\n    int64_t * file = (int64_t *)v108; // 0x401eec\n    exec_argv[0] = (char *)v108;\n    execvp((char *)*file, exec_argv);\n    function_4045f0(*file);\n    error(0, *err_num2, dcgettext(NULL, \"failed to run command %s\", 5));\n    // 0x401f34\n    return *err_num2 == 2 ? 127 : 126;\n  lab_0x401e8e:;\n    int64_t v109 = v100;\n    int64_t v110 = v99;\n    int32_t v111 = v98;\n    v66 = v111;\n    v68 = v110;\n    list = v2;\n    v71 = v109;\n    if (*(char *)v5 != 0) {\n        int64_t v112 = function_402360(v5, (int64_t *)&v70, (int64_t *)&size, (int64_t)(size == 0)); // 0x401fd9\n        v67 = v111;\n        v69 = v110;\n        v72 = v109;\n        if ((int32_t)v112 == 0) {\n            goto lab_0x4020e2;\n        } else {\n            // 0x401fe6\n            v66 = v111;\n            v68 = v110;\n            list = v2;\n            v71 = v109;\n            if (size == 0) {\n                // 0x401f34\n                return 125;\n            }\n            goto lab_0x401e98;\n        }\n    } else {\n        goto lab_0x401e98;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402280",
            "funcEndAddr": "4022ab",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402280\n    int64_t v1; // 0x402280\n    __libc_start_main(0x401b70, (int32_t)a4, (char **)&v1, (void (*)())0x406ec0, (void (*)())0x406f20, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4022ab",
            "funcStartAddr": "4022ab",
            "funcEndAddr": "4022ca",
            "decompiledFuncCode": "int64_t function_4022ab(void) {\n    // 0x4022ab\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_4022ca",
            "funcStartAddr": "4022ca",
            "funcEndAddr": "402301",
            "decompiledFuncCode": "int64_t function_4022ca(void) {\n    // 0x4022ca\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402301",
            "funcStartAddr": "402301",
            "funcEndAddr": "402358",
            "decompiledFuncCode": "int64_t function_402301(void) {\n    // 0x402301\n    if (g32 != 0) {\n        // 0x402357\n        int64_t result; // 0x402301\n        return result;\n    }\n    int64_t v1 = g33; // 0x402334\n    int64_t result2; // 0x402346\n    if (g33 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402346\n        result2 = function_4022ab();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402336\n        v1++;\n    }\n    // 0x40232a\n    g33 = v1;\n    // 0x402346\n    result2 = function_4022ab();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402358",
            "funcStartAddr": "402358",
            "funcEndAddr": "40235d",
            "decompiledFuncCode": "int64_t function_402358(void) {\n    // 0x402358\n    return function_4022ca();\n}\n"
        },
        {
            "funcName": "function_402360",
            "funcStartAddr": "402360",
            "funcEndAddr": "402573",
            "decompiledFuncCode": "int64_t function_402360(int64_t a1, int64_t * a2, int64_t * a3, int64_t a4) {\n    int64_t v1 = 0; // bp-72, 0x402384\n    int64_t str = function_4051c0(a1); // 0x40238d\n    char * next_token = strtok((char *)str, \",\"); // 0x40239d\n    char v2; // 0x402360\n    int64_t v3; // 0x402360\n    int64_t v4; // 0x402360\n    int64_t v5; // 0x402360\n    char * v6; // 0x402360\n    struct group * v7; // 0x402360\n    int64_t v8; // 0x402360\n    int64_t v9; // 0x402360\n    int64_t v10; // 0x402360\n    int64_t v11; // 0x402360\n    int64_t v12; // 0x402360\n    int64_t v13; // 0x402360\n    int64_t v14; // 0x402360\n    int64_t v15; // 0x402360\n    int64_t v16; // 0x402360\n    int64_t v17; // 0x402360\n    int32_t v18; // bp-64, 0x402360\n    char v19; // 0x402360\n    if (next_token == NULL) {\n        // 0x402360\n        v2 = a4;\n        v12 = 0;\n        goto lab_0x40252b;\n    } else {\n        int64_t v20 = &v18;\n        v19 = a4;\n        v13 = 0;\n        v8 = 0;\n        v3 = 0;\n        v6 = next_token;\n        while (true) {\n          lab_0x4023bb:;\n            char * name = v6;\n            v4 = v3;\n            v9 = v8;\n            v14 = v13;\n            int64_t v21 = (int64_t)name;\n            int64_t v22; // 0x402360\n            int64_t v23 = function_405250(v21, 0, 10, (int64_t *)&v18, (int64_t *)&g11, v22); // 0x4023d0\n            if (v18 < 0 || (int32_t)v23 != 0) {\n                struct group * v24 = getgrnam(name); // 0x4023e7\n                v7 = v24;\n                v16 = v20;\n                if (v24 == NULL) {\n                    // 0x402450\n                    v11 = v9;\n                    if (v19 == 0) {\n                        // break -> 0x40245b\n                        break;\n                    }\n                    // 0x4024eb\n                    function_4045f0(v21);\n                    error(0, *__errno_location(), dcgettext(NULL, \"invalid group %s\", 5));\n                    v15 = v14;\n                    v10 = v9;\n                    v5 = 0xffffffff;\n                    goto lab_0x402411;\n                } else {\n                    goto lab_0x4023f1;\n                }\n            } else {\n                int64_t v25 = (int64_t)*__ctype_b_loc(); // 0x40248d\n                int64_t v26 = v21; // 0x402490\n                char * name2 = (char *)v26;\n                unsigned char v27 = *name2; // 0x40249c\n                v26++;\n                while ((*(char *)(v25 + 1 + 2 * (int64_t)v27) & 32) != 0) {\n                    // 0x40249c\n                    name2 = (char *)v26;\n                    v27 = *name2;\n                    v26++;\n                }\n                // 0x4024a7\n                v17 = v25;\n                if (v27 == 43) {\n                    goto lab_0x4023f9;\n                } else {\n                    struct group * v28 = getgrnam(name2); // 0x4024b3\n                    v7 = v28;\n                    v16 = v25;\n                    v17 = v25;\n                    if (v28 != NULL) {\n                        goto lab_0x4023f1;\n                    } else {\n                        goto lab_0x4023f9;\n                    }\n                }\n            }\n        }\n        goto lab_0x40245b;\n    }\n  lab_0x4023f1:\n    // 0x4023f1\n    v18 = *(int32_t *)((int64_t)v7 + 16);\n    v17 = v16;\n    goto lab_0x4023f9;\n  lab_0x4023f9:;\n    int64_t v29 = v9; // 0x4023fe\n    if (v1 == v14) {\n        int64_t v30 = function_405060(v9, &v1, 4, v17, (int64_t)&g11); // 0x4024d3\n        v29 = v30;\n    }\n    // 0x402404\n    *(int32_t *)(v29 + 4 * v14) = v18;\n    v15 = v14 + 1;\n    v10 = v29;\n    v5 = v4;\n    goto lab_0x402411;\n  lab_0x402411:;\n    int64_t v31 = v5;\n    int64_t v32 = v10;\n    int64_t v33 = v15;\n    char * next_token2 = strtok(NULL, \",\"); // 0x402418\n    v13 = v33;\n    v8 = v32;\n    v3 = v31;\n    v6 = next_token2;\n    int64_t v34; // 0x402360\n    if (next_token2 == NULL) {\n        int32_t v35 = v31; // 0x402425\n        v2 = v19;\n        v12 = v32;\n        if (v33 != 0 || v35 != 0) {\n            // 0x40242e\n            *a2 = v32;\n            v34 = 0xffffffff;\n            if (v35 != 0) {\n                goto lab_0x402468;\n            } else {\n                // 0x40243e\n                *a3 = v33;\n                v34 = v31;\n                goto lab_0x402468;\n            }\n        } else {\n            goto lab_0x40252b;\n        }\n    }\n    goto lab_0x4023bb;\n  lab_0x40252b:\n    // 0x40252b\n    v11 = v12;\n    if (v2 != 0) {\n        // 0x402536\n        function_4045f0(a1);\n        error(0, (int32_t)\"invalid group list %s\" ^ (int32_t)\"invalid group list %s\", dcgettext(NULL, \"invalid group list %s\", 5));\n        int64_t v36; // 0x402360\n        v11 = v36;\n    }\n    goto lab_0x40245b;\n  lab_0x40245b:\n    // 0x40245b\n    *a2 = v11;\n    v34 = 0xffffffff;\n  lab_0x402468:\n    // 0x402468\n    free((int64_t *)str);\n    return v34 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_402580",
            "funcStartAddr": "402580",
            "funcEndAddr": "40290d",
            "decompiledFuncCode": "int64_t function_402580(int32_t status) {\n    // 0x402580\n    if (status != 0) {\n        // 0x40259a\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4025bf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4025c6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION] NEWROOT [COMMAND [ARG]...]\\n  or:  %s OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Run COMMAND with root directory set to NEWROOT.\\n\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  --groups=G_LIST        specify supplementary groups as g1,g2,..,gN\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  --userspec=USER:GROUP  specify user and group (ID or name) to use\\n\", 5), g29);\n    function_4043a0(4, (int64_t)\"/\");\n    __printf_chk(1, dcgettext(NULL, \"  --skip-chdir           do not change working directory to %s\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf no command is given, run '\\\"$SHELL\\\" -i' (default: '/bin/sh -i').\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x4026ee\n    bool v2; // 0x402580\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402770\n    int64_t v6 = *(int64_t *)v5; // 0x402774\n    int64_t v7 = 7; // 0x40277a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"chroot\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402786\n        char v11 = *(char *)v9; // 0x402786\n        char v12 = v11; // 0x402786\n        bool v13 = false; // 0x402786\n        while (v10 == v11) {\n            // 0x40277c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402786\n            int64_t v15 = v8 + v3; // 0x402786\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402792\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x402792\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4028a4;\n        } else {\n            // 0x40288e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4028e3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4027f4;\n            } else {\n                goto lab_0x4028a4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4027f4;\n        } else {\n            // 0x4027da\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4028e3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4027f4;\n            } else {\n                goto lab_0x4027f4;\n            }\n        }\n    }\n  lab_0x4028a4:\n    // 0x4028a4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402834\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4025bf\n    exit(status);\n    // UNREACHABLE\n  lab_0x4027f4:\n    // 0x4027f4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402834\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4025bf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402910",
            "funcStartAddr": "402910",
            "funcEndAddr": "402918",
            "decompiledFuncCode": "int64_t function_402910(int64_t a1) {\n    // 0x402910\n    g35 = a1;\n    int64_t result; // 0x402910\n    return result;\n}\n"
        },
        {
            "funcName": "function_402920",
            "funcStartAddr": "402920",
            "funcEndAddr": "402928",
            "decompiledFuncCode": "int64_t function_402920(int64_t a1) {\n    // 0x402920\n    g34 = a1;\n    int64_t result; // 0x402920\n    return result;\n}\n"
        },
        {
            "funcName": "function_402930",
            "funcStartAddr": "402930",
            "funcEndAddr": "4029ce",
            "decompiledFuncCode": "int64_t function_402930(void) {\n    // 0x402930\n    int32_t * err_num; // 0x402946\n    if ((int32_t)function_4064d0((int64_t)g29) == 0) {\n        goto lab_0x40295c;\n    } else {\n        // 0x402946\n        err_num = __errno_location();\n        if (g34 == 0) {\n            goto lab_0x402973;\n        } else {\n            // 0x402957\n            if (*err_num != 32) {\n                goto lab_0x402973;\n            } else {\n                goto lab_0x40295c;\n            }\n        }\n    }\n  lab_0x40295c:;\n    int64_t result = function_4064d0((int64_t)g31); // 0x402963\n    if ((int32_t)result == 0) {\n        // 0x40296c\n        return result;\n    }\n    // 0x4029ae\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x402973:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40297f\n    if (g35 == 0) {\n        // 0x4029b9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402993\n        error(0, *err_num, \"%s: %s\", (char *)function_404440((int64_t)g35), v1);\n    }\n    // 0x4029ae\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4029d0",
            "funcStartAddr": "4029d0",
            "funcEndAddr": "402a69",
            "decompiledFuncCode": "int64_t function_4029d0(int64_t str) {\n    // 0x4029d0\n    if (str == 0) {\n        // 0x402a49\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4029de\n    int64_t result = (int64_t)found_char_pos; // 0x4029de\n    if (found_char_pos == NULL) {\n        // 0x402a39\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4029e8\n    if (v1 - str < 7) {\n        // 0x402a39\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x4029f8\n    bool v2; // 0x4029d0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4029d0\n    int64_t v5 = result - 6; // 0x4029d0\n    int64_t v6 = 7; // 0x402a06\n    unsigned char v7 = *(char *)v5; // 0x402a06\n    char v8 = *(char *)v4; // 0x402a06\n    char v9 = v8; // 0x402a06\n    bool v10 = false; // 0x402a06\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402a10\n    int64_t v13 = v1; // 0x402a10\n    int64_t v14 = 3; // 0x402a10\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402a39\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402a22\n    char v16 = *(char *)v12; // 0x402a22\n    char v17 = v16; // 0x402a22\n    bool v18 = false; // 0x402a22\n    while (v15 == v16) {\n        // 0x402a12\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402a2c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402a2e\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x402a39\n    g36 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402a70",
            "funcStartAddr": "402a70",
            "funcEndAddr": "402b62",
            "decompiledFuncCode": "int64_t function_402a70(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402a84\n    int64_t result = (int64_t)v1; // 0x402a84\n    if (result != a1) {\n        // 0x402a91\n        return result;\n    }\n    int64_t v2 = function_4065e0(); // 0x402aa0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402b56\n    if (v3 == 85) {\n        // 0x402ab0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402b48\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x402ade\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x402aeb\n        // 0x402a91\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402b48\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x402b2d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x402b3a\n    // 0x402a91\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402b70",
            "funcStartAddr": "402b70",
            "funcEndAddr": "402bc7",
            "decompiledFuncCode": "int64_t function_402b70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402b70\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402bb8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402bc7",
            "funcStartAddr": "402bc7",
            "funcEndAddr": "403d91",
            "decompiledFuncCode": "int64_t function_402bc7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402c11\n    int64_t v3 = 0; // 0x402c11\n    int64_t v4; // 0x402bc7\n    int64_t v5; // 0x402bc7\n    int64_t v6; // 0x402bc7\n    int64_t v7; // 0x402bc7\n    int64_t v8; // 0x402bc7\n    int64_t v9; // 0x402bc7\n    int64_t v10; // 0x402bc7\n    int64_t v11; // 0x402bc7\n    int64_t v12; // 0x402bc7\n    int64_t v13; // 0x402bc7\n    int64_t v14; // 0x402bc7\n    int64_t v15; // 0x402bc7\n    int64_t v16; // 0x402bc7\n    int64_t v17; // 0x402bc7\n    int64_t v18; // 0x402bc7\n    int64_t result; // 0x402bc7\n    int64_t v19; // 0x402bc7\n    int32_t wc; // bp+132, 0x402bc7\n    int64_t ps; // bp+136, 0x402bc7\n    char v20; // 0x403180\n    int64_t v21; // 0x403180\n    int64_t v22; // 0x403528\n    int64_t v23; // 0x402bc7\n    int64_t v24; // 0x403547\n    int32_t v25; // 0x402bc7\n    while (true) {\n      lab_0x402c18_2:\n        // 0x402c18\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402bc7\n        int64_t v27; // 0x402c4c\n        while (true) {\n          lab_0x402c18:\n            // 0x402c18\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402c23\n            if (v15 == -1) {\n                // 0x402c25\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402c33\n            if (v28) {\n                // break (via goto) -> 0x403398\n                goto lab_0x403398;\n            }\n            // 0x402c3c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40322b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402d71;\n                    }\n                    // 0x40364d\n                    v26 = v5 + 1;\n                    goto lab_0x402c18;\n                }\n                case 7: {\n                    goto lab_0x402d71;\n                }\n                case 8: {\n                    goto lab_0x402d71;\n                }\n                case 9: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402d71;\n                }\n                case 12: {\n                    goto lab_0x402d71;\n                }\n                case 13: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402d3d;\n                }\n                case 36: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402d71;\n                }\n                case 38: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402d71;\n                }\n                case 44: {\n                    goto lab_0x402d71;\n                }\n                case 45: {\n                    goto lab_0x402d71;\n                }\n                case 46: {\n                    goto lab_0x402d71;\n                }\n                case 47: {\n                    goto lab_0x402d71;\n                }\n                case 48: {\n                    goto lab_0x402d71;\n                }\n                case 49: {\n                    goto lab_0x402d71;\n                }\n                case 50: {\n                    goto lab_0x402d71;\n                }\n                case 51: {\n                    goto lab_0x402d71;\n                }\n                case 52: {\n                    goto lab_0x402d71;\n                }\n                case 53: {\n                    goto lab_0x402d71;\n                }\n                case 54: {\n                    goto lab_0x402d71;\n                }\n                case 55: {\n                    goto lab_0x402d71;\n                }\n                case 56: {\n                    goto lab_0x402d71;\n                }\n                case 57: {\n                    goto lab_0x402d71;\n                }\n                case 58: {\n                    goto lab_0x402d71;\n                }\n                case 59: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402d71;\n                }\n                case 66: {\n                    goto lab_0x402d71;\n                }\n                case 67: {\n                    goto lab_0x402d71;\n                }\n                case 68: {\n                    goto lab_0x402d71;\n                }\n                case 69: {\n                    goto lab_0x402d71;\n                }\n                case 70: {\n                    goto lab_0x402d71;\n                }\n                case 71: {\n                    goto lab_0x402d71;\n                }\n                case 72: {\n                    goto lab_0x402d71;\n                }\n                case 73: {\n                    goto lab_0x402d71;\n                }\n                case 74: {\n                    goto lab_0x402d71;\n                }\n                case 75: {\n                    goto lab_0x402d71;\n                }\n                case 76: {\n                    goto lab_0x402d71;\n                }\n                case 77: {\n                    goto lab_0x402d71;\n                }\n                case 78: {\n                    goto lab_0x402d71;\n                }\n                case 79: {\n                    goto lab_0x402d71;\n                }\n                case 80: {\n                    goto lab_0x402d71;\n                }\n                case 81: {\n                    goto lab_0x402d71;\n                }\n                case 82: {\n                    goto lab_0x402d71;\n                }\n                case 83: {\n                    goto lab_0x402d71;\n                }\n                case 84: {\n                    goto lab_0x402d71;\n                }\n                case 85: {\n                    goto lab_0x402d71;\n                }\n                case 86: {\n                    goto lab_0x402d71;\n                }\n                case 87: {\n                    goto lab_0x402d71;\n                }\n                case 88: {\n                    goto lab_0x402d71;\n                }\n                case 89: {\n                    goto lab_0x402d71;\n                }\n                case 90: {\n                    goto lab_0x402d71;\n                }\n                case 91: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402d71;\n                }\n                case 94: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402d71;\n                }\n                case 96: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402d71;\n                }\n                case 98: {\n                    goto lab_0x402d71;\n                }\n                case 99: {\n                    goto lab_0x402d71;\n                }\n                case 100: {\n                    goto lab_0x402d71;\n                }\n                case 101: {\n                    goto lab_0x402d71;\n                }\n                case 102: {\n                    goto lab_0x402d71;\n                }\n                case 103: {\n                    goto lab_0x402d71;\n                }\n                case 104: {\n                    goto lab_0x402d71;\n                }\n                case 105: {\n                    goto lab_0x402d71;\n                }\n                case 106: {\n                    goto lab_0x402d71;\n                }\n                case 107: {\n                    goto lab_0x402d71;\n                }\n                case 108: {\n                    goto lab_0x402d71;\n                }\n                case 109: {\n                    goto lab_0x402d71;\n                }\n                case 110: {\n                    goto lab_0x402d71;\n                }\n                case 111: {\n                    goto lab_0x402d71;\n                }\n                case 112: {\n                    goto lab_0x402d71;\n                }\n                case 113: {\n                    goto lab_0x402d71;\n                }\n                case 114: {\n                    goto lab_0x402d71;\n                }\n                case 115: {\n                    goto lab_0x402d71;\n                }\n                case 116: {\n                    goto lab_0x402d71;\n                }\n                case 117: {\n                    goto lab_0x402d71;\n                }\n                case 118: {\n                    goto lab_0x402d71;\n                }\n                case 119: {\n                    goto lab_0x402d71;\n                }\n                case 120: {\n                    goto lab_0x402d71;\n                }\n                case 121: {\n                    goto lab_0x402d71;\n                }\n                case 122: {\n                    goto lab_0x402d71;\n                }\n                case 123: {\n                    goto lab_0x402d15;\n                }\n                case 124: {\n                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402d15;\n                }\n                case 126: {\n                    goto lab_0x402d3d;\n                }\n                default: {\n                    goto lab_0x403115;\n                }\n            }\n        }\n      lab_0x403115:\n        if (v23 != 1) {\n            // 0x403480\n            ps = 0;\n            int64_t len = v15; // 0x403490\n            if (v15 == -1) {\n                // 0x403492\n                len = strlen((char *)str);\n            }\n            // 0x4034be\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40351f:\n                // 0x40351f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403524\n                int64_t v30 = v29 + str;\n                v24 = function_406450(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403a9a_2;\n                    }\n                    case -1: {\n                        goto lab_0x403a9a_2;\n                    }\n                    case -2: {\n                        // 0x403b7d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403bb7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403bba\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403bc7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403bc0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403a9a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403a9a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4034f0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40359c\n                        char v34 = *(char *)v33; // 0x4035ad\n                        unsigned char v35; // 0x402bc7\n                        if (v34 < 125) {\n                            // 0x4035b8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4035cf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4035a0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4035ad\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4035b8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4035cf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4035a0\n                            v33++;\n                        }\n                        goto lab_0x4034f0;\n                    }\n                }\n            }\n            goto lab_0x403a9a_2;\n        } else {\n            // 0x403164\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402d71;\n        }\n    }\n  lab_0x403398:\n    // 0x403398\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403c9a\n        if (v8 > result) {\n            // 0x403ca3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402fc7\n        return result;\n    }\n    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402d71:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402d80\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402f8a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402e81\n    char v40 = v20; // 0x402e81\n    int64_t v41 = v38; // 0x402e81\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402e81\n    int64_t v43 = v36; // 0x402e81\n    goto lab_0x402dfd;\n  lab_0x402f8a_2:\n    // 0x402fc7\n    return function_402b70(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403a9a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402d71;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40366e\n        int64_t v50 = v5 + 1; // 0x403751\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403758\n        char v52 = v20; // 0x403758\n        int64_t v53 = result; // 0x403758\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403721\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403725\n            int64_t v56 = v54 + 1; // 0x40372a\n            int64_t v57 = v51 + 1; // 0x403751\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40371c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403721\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403725\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402dfd;\n    }\n  lab_0x4034f0:\n    // 0x4034f0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40350f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403512\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403a9a\n        goto lab_0x403a9a_2;\n    }\n    goto lab_0x40351f;\n  lab_0x402d3d:\n    // 0x402d3d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402f8a_2;\n    }\n    goto lab_0x402d71;\n  lab_0x402d15:;\n    bool v60 = v15 == 1; // 0x402d20\n    if (v15 == -1) {\n        // 0x402d22\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402d2e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402d71;\n    } else {\n        goto lab_0x402d3d;\n    }\n  lab_0x402dfd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402e02\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402e06\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402c18_2;\n}\n"
        },
        {
            "funcName": "function_403da0",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403f3e",
            "decompiledFuncCode": "int64_t function_403da0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403da2\n    int32_t * v3 = __errno_location(); // 0x403dbc\n    int64_t v4 = (int64_t)g21; // 0x403dc1\n    int32_t v5 = *v3; // 0x403dcb\n    int64_t v6 = v4; // 0x403de1\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403f39\n            function_4051e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403df0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403df7\n        int64_t v9; // 0x403da0\n        if (g21 == &g22) {\n            int64_t v10 = function_404ff0(0, v8); // 0x403f1a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x403f1f\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404ff0(v4, v8); // 0x403e0b\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x403e1a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x403e1a\n        int32_t v14 = v7; // 0x403e21\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403e51\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403e5b\n    int64_t * v17 = (int64_t *)v15; // 0x403e5e\n    uint64_t v18 = *v17; // 0x403e5e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403e61\n    int64_t result = *v19; // 0x403e61\n    int64_t v20; // 0x403da0\n    uint64_t v21 = function_402b70(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403e84\n    if (v18 > v21) {\n        // 0x403efb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403e97\n    *v17 = v22;\n    if (result != (int64_t)&g37) {\n        // 0x403ea7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404f90(v22); // 0x403ec1\n    *v19 = result2;\n    int64_t v23; // 0x403da0\n    function_402b70(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403efb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403f40",
            "funcStartAddr": "403f40",
            "funcEndAddr": "403f74",
            "decompiledFuncCode": "int64_t function_403f40(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403f47\n    int64_t result = function_405190(a1 == 0 ? (int64_t)&g38 : a1, 56); // 0x403f66\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f80",
            "funcStartAddr": "403f80",
            "funcEndAddr": "403f8f",
            "decompiledFuncCode": "int64_t function_403f80(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g38 : a1); // 0x403f8c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f90",
            "funcStartAddr": "403f90",
            "funcEndAddr": "403f9f",
            "decompiledFuncCode": "int64_t function_403f90(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x403f98\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_403fa0",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "403fd3",
            "decompiledFuncCode": "int64_t function_403fa0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 + 8 : a1 + 8; // 0x403fb9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403fbe\n    uint32_t v3 = *v2; // 0x403fbe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403fc2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403fe0",
            "funcStartAddr": "403fe0",
            "funcEndAddr": "403ff3",
            "decompiledFuncCode": "int64_t function_403fe0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g38 + 4 : a1 + 4); // 0x403fec\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404000",
            "funcStartAddr": "404000",
            "funcEndAddr": "40402b",
            "decompiledFuncCode": "int64_t function_404000(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x404008\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404025\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40401c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "4040a2",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g38 : a5; // 0x404052\n    int32_t * v2 = __errno_location(); // 0x40405b\n    uint32_t v3 = *(int32_t *)v1; // 0x40407b\n    int64_t result = function_402b70(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40408a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040b0",
            "funcStartAddr": "4040b0",
            "funcEndAddr": "404191",
            "decompiledFuncCode": "int64_t function_4040b0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g38 : a4; // 0x4040d2\n    int32_t * v2 = __errno_location(); // 0x4040d8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4040f7\n    int32_t * v4 = (int32_t *)v1; // 0x4040fa\n    int64_t v5 = function_402b70(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404115\n    int64_t v6 = v5 + 1; // 0x40411a\n    int64_t result = function_404f90(v6); // 0x40412f\n    function_402b70(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404174\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40417d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "4041aa",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4041a0\n    return function_4040b0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4041b0",
            "funcStartAddr": "4041b0",
            "funcEndAddr": "404245",
            "decompiledFuncCode": "int64_t function_4041b0(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x4041b0\n    int64_t v2 = v1; // 0x4041b0\n    int64_t v3 = v2; // 0x4041c4\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x4041e3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4041e0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x4041fd\n    if (g22 != 0x60b320) {\n        // 0x4041ff\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g37;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x404221\n    if (g21 != &g22) {\n        // 0x404223\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g50;\n    }\n    // 0x404236\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "404261",
            "decompiledFuncCode": "int64_t function_404250(void) {\n    // 0x404250\n    int64_t v1; // 0x404250\n    return function_403da0(v1, v1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_404270",
            "funcStartAddr": "404270",
            "funcEndAddr": "40427a",
            "decompiledFuncCode": "int64_t function_404270(void) {\n    // 0x404270\n    int64_t v1; // 0x404270\n    return function_403da0(v1, v1, v1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_404280",
            "funcStartAddr": "404280",
            "funcEndAddr": "404296",
            "decompiledFuncCode": "int64_t function_404280(int64_t a1) {\n    // 0x404280\n    return function_403da0(0, a1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_4042a0",
            "funcStartAddr": "4042a0",
            "funcEndAddr": "4042b2",
            "decompiledFuncCode": "int64_t function_4042a0(int64_t a1, int64_t a2) {\n    // 0x4042a0\n    return function_403da0(0, a1, a2, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "404328",
            "decompiledFuncCode": "int64_t function_4042c0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4042d0\n    return function_403da0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404330",
            "funcStartAddr": "404330",
            "funcEndAddr": "404394",
            "decompiledFuncCode": "int64_t function_404330(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404340\n    return function_403da0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043ac",
            "decompiledFuncCode": "int64_t function_4043a0(int64_t a1, int64_t a2) {\n    // 0x4043a0\n    return function_4042c0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4043b0",
            "funcStartAddr": "4043b0",
            "funcEndAddr": "4043bf",
            "decompiledFuncCode": "int64_t function_4043b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4043b0\n    return function_404330(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "404430",
            "decompiledFuncCode": "int64_t function_4043c0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x4043cd\n    int128_t v2 = __asm_movdqa(g39); // 0x4043d5\n    int128_t v3 = __asm_movdqa(g40); // 0x4043dd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4043f2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404408\n    uint32_t v6 = *v5; // 0x404408\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40440d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403da0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40443d",
            "decompiledFuncCode": "int64_t function_404430(int64_t a1, int64_t a2) {\n    // 0x404430\n    return function_4043c0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "404451",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1) {\n    // 0x404440\n    return function_4043c0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404460",
            "funcStartAddr": "404460",
            "funcEndAddr": "40446a",
            "decompiledFuncCode": "int64_t function_404460(void) {\n    // 0x404460\n    int64_t v1; // 0x404460\n    return function_4043c0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404470",
            "funcStartAddr": "404470",
            "funcEndAddr": "4044de",
            "decompiledFuncCode": "int64_t function_404470(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40448a\n    return function_403da0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "40454c",
            "decompiledFuncCode": "int64_t function_4044e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x4044e7\n    int128_t v2 = __asm_movdqa(g39); // 0x4044ef\n    int128_t v3 = __asm_movdqa(g40); // 0x4044f7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404519\n    if (a2 == 0 || a3 == 0) {\n        // 0x404547\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40452a\n    return function_403da0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404550",
            "funcStartAddr": "404550",
            "funcEndAddr": "404559",
            "decompiledFuncCode": "int64_t function_404550(void) {\n    // 0x404550\n    int64_t v1; // 0x404550\n    return function_4044e0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404560",
            "funcStartAddr": "404560",
            "funcEndAddr": "404577",
            "decompiledFuncCode": "int64_t function_404560(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404560\n    return function_4044e0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404580",
            "funcStartAddr": "404580",
            "funcEndAddr": "404593",
            "decompiledFuncCode": "int64_t function_404580(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404580\n    return function_4044e0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4045a0",
            "funcStartAddr": "4045a0",
            "funcEndAddr": "4045aa",
            "decompiledFuncCode": "int64_t function_4045a0(void) {\n    // 0x4045a0\n    int64_t v1; // 0x4045a0\n    return function_403da0(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_4045b0",
            "funcStartAddr": "4045b0",
            "funcEndAddr": "4045c2",
            "decompiledFuncCode": "int64_t function_4045b0(int64_t a1, int64_t a2) {\n    // 0x4045b0\n    return function_403da0(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_4045d0",
            "funcStartAddr": "4045d0",
            "funcEndAddr": "4045e1",
            "decompiledFuncCode": "int64_t function_4045d0(void) {\n    // 0x4045d0\n    int64_t v1; // 0x4045d0\n    return function_403da0(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_4045f0",
            "funcStartAddr": "4045f0",
            "funcEndAddr": "404606",
            "decompiledFuncCode": "int64_t function_4045f0(int64_t a1) {\n    // 0x4045f0\n    return function_403da0(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404610",
            "funcStartAddr": "404610",
            "funcEndAddr": "40491d",
            "decompiledFuncCode": "int64_t function_404610(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1;\n    if (a5 != 0) {\n        // 0x404648\n        *(int64_t *)a5 = 0;\n    }\n    if (a6 != 0) {\n        // 0x404655\n        *(int64_t *)a6 = 0;\n    }\n    int32_t v2 = a3;\n    int64_t v3; // 0x404610\n    int64_t v4 = a4 == 0 ? 0xffffffff : v3 & 0xffffffff;\n    char * name; // 0x404610\n    int64_t v5; // 0x404610\n    int64_t v6; // 0x404610\n    int64_t v7; // 0x404610\n    int64_t v8; // 0x404610\n    int64_t v9; // 0x404610\n    int64_t v10; // 0x404610\n    int64_t v11; // 0x404610\n    int64_t v12; // 0x404610\n    int64_t v13; // 0x404610\n    int64_t v14; // 0x404610\n    int32_t v15; // 0x404610\n    if (a2 == 0) {\n        // 0x4047e8\n        v15 = v2;\n        v11 = 0;\n        v8 = 0;\n        v10 = v4;\n        if (*(char *)&v1 == 0) {\n            goto lab_0x4046bf;\n        } else {\n            // 0x4047f6\n            v13 = function_4051c0(v1);\n            goto lab_0x404808;\n        }\n    } else {\n        int64_t v16 = a2 - v1; // 0x404669\n        if (v16 != 0) {\n            int64_t v17 = function_405190(v1, v16 + 1); // 0x404719\n            *(char *)(v17 + v16) = 0;\n            int64_t v18 = a2 + 1; // 0x40472b\n            v13 = v17;\n            if (*(char *)v18 == 0) {\n                goto lab_0x404808;\n            } else {\n                // 0x404736\n                v7 = v18;\n                if (v17 == 0) {\n                    goto lab_0x404681;\n                } else {\n                    int64_t v19 = v18 == 0; // 0x404746\n                    char * v20 = (char *)v17;\n                    name = v20;\n                    v5 = v19;\n                    v12 = v17;\n                    v9 = v18;\n                    v6 = v19;\n                    v14 = v17;\n                    if (*v20 == 43) {\n                        goto lab_0x404826;\n                    } else {\n                        goto lab_0x40475a;\n                    }\n                }\n            }\n        } else {\n            int64_t v21 = a2 + 1; // 0x404672\n            v7 = v21;\n            v15 = v2;\n            v11 = 0;\n            v8 = 0;\n            v10 = v4;\n            if (*(char *)v21 == 0) {\n                goto lab_0x4046bf;\n            } else {\n                goto lab_0x404681;\n            }\n        }\n    }\n  lab_0x4046bf:\n    // 0x4046bf\n    *(int32_t *)a3 = v15;\n    if (a4 != 0) {\n        // 0x4046cf\n        *(int32_t *)a4 = (int32_t)v10;\n    }\n    int64_t v22 = v11; // 0x4046d6\n    if (a5 != 0) {\n        // 0x4046d8\n        *(int64_t *)a5 = v11;\n        v22 = 0;\n    }\n    int64_t v23 = v8; // 0x4046e1\n    if (a6 != 0) {\n        // 0x4046e3\n        *(int64_t *)a6 = v8;\n        v23 = 0;\n    }\n    // 0x4046ea\n    free((int64_t *)v22);\n    free((int64_t *)v23);\n    return (int32_t)&g50 ^ (int32_t)&g50;\n  lab_0x404808:\n    // 0x404808\n    v15 = v2;\n    v11 = 0;\n    v8 = 0;\n    v10 = v4;\n    if (v13 == 0) {\n        goto lab_0x4046bf;\n    } else {\n        int64_t v24 = a2 != 0; // 0x40481b\n        char * v25 = (char *)v13;\n        name = v25;\n        v5 = v24;\n        v12 = v13;\n        v9 = 0;\n        v6 = v24;\n        v14 = v13;\n        if (*v25 != 43) {\n            goto lab_0x40475a;\n        } else {\n            goto lab_0x404826;\n        }\n    }\n  lab_0x404681:\n    // 0x404681\n    v15 = v2;\n    v11 = 0;\n    v8 = 0;\n    v10 = v4;\n    if (v7 == 0) {\n        goto lab_0x4046bf;\n    } else {\n        goto lab_0x404690;\n    }\n  lab_0x404690:;\n    int64_t v26 = 0;\n    char * v27 = (char *)v7;\n    char * name2 = v27; // 0x404694\n    int32_t v28 = v2; // 0x404694\n    int64_t v29 = v26; // 0x404694\n    int64_t v30 = v7; // 0x404694\n    int32_t v31 = v2; // 0x404694\n    int64_t v32 = v26; // 0x404694\n    int64_t v33 = v7; // 0x404694\n    if (*v27 == 43) {\n        goto lab_0x40479b;\n    } else {\n        goto lab_0x40469a;\n    }\n  lab_0x40475a:;\n    struct passwd * v34 = getpwnam(name); // 0x404761\n    v6 = v5;\n    v14 = v12;\n    int32_t v35; // bp-88, 0x404610\n    if (v34 == NULL) {\n        goto lab_0x404826;\n    } else {\n        int64_t v36 = (int64_t)v34; // 0x404761\n        int32_t v37 = *(int32_t *)(v36 + 16); // 0x404774\n        if (v5 != 0) {\n            uint32_t gid = *(int32_t *)(v36 + 20); // 0x404878\n            int64_t v38 = gid; // 0x404878\n            struct group * v39 = getgrgid(gid); // 0x40487f\n            int64_t v40; // 0x404610\n            if (v39 == NULL) {\n                // 0x404908\n                v40 = function_406590(v38, (int64_t *)&v35);\n            } else {\n                // 0x404889\n                v40 = *(int64_t *)v39;\n            }\n            // 0x40488c\n            v1 = v40;\n            int64_t v41 = function_4051c0(v40); // 0x40488c\n            endgrent();\n            endpwent();\n            v15 = v37;\n            v11 = v12;\n            v8 = v41;\n            v10 = v38;\n            goto lab_0x4046bf;\n        } else {\n            // 0x404783\n            endpwent();\n            v15 = v37;\n            v11 = v12;\n            v8 = 0;\n            v10 = v4;\n            if (v9 == 0) {\n                goto lab_0x4046bf;\n            } else {\n                char * v42 = (char *)v9;\n                name2 = v42;\n                v28 = v37;\n                v29 = v12;\n                v30 = v9;\n                v31 = v37;\n                v32 = v12;\n                v33 = v9;\n                if (*v42 != 43) {\n                    goto lab_0x40469a;\n                } else {\n                    goto lab_0x40479b;\n                }\n            }\n        }\n    }\n  lab_0x404826:;\n    // 0x404826\n    int64_t v43; // 0x404610\n    int64_t * v44; // 0x404610\n    int64_t v45; // 0x404610\n    if ((char)v6 == 0) {\n        int64_t v46 = function_405250(v14, 0, 10, (int64_t *)&v35, (int64_t *)&g11, a6); // 0x4048bd\n        if ((int32_t)v46 != 0) {\n            goto lab_0x4048f0;\n        } else {\n            // 0x4048c6\n            if (v35 > -1) {\n                // 0x4048d9\n                int64_t v47; // 0x404610\n                int64_t v48 = v47;\n                endpwent();\n                int32_t v49; // 0x4048c6\n                v15 = v49;\n                int64_t v50; // 0x404610\n                v11 = v50;\n                v8 = 0;\n                v10 = v4;\n                if (v48 == 0) {\n                    goto lab_0x4046bf;\n                } else {\n                    goto lab_0x404690;\n                }\n            } else {\n                goto lab_0x4048f0;\n            }\n        }\n    } else {\n        // 0x40482a\n        endpwent();\n        v45 = v14;\n        v44 = NULL;\n        v43 = (int64_t)\"invalid spec\";\n        goto lab_0x404837;\n    }\n  lab_0x40479b:;\n    int64_t v51 = function_405250(v33, 0, 10, (int64_t *)&v35, (int64_t *)&g11, a6); // 0x4047b0\n    int64_t v52; // 0x404610\n    int64_t v53; // 0x404610\n    int64_t v54; // 0x404610\n    int32_t v55; // 0x404610\n    if ((int32_t)v51 != 0) {\n        goto lab_0x4047cc;\n    } else {\n        // 0x4047b9\n        v55 = v31;\n        v54 = v32;\n        v52 = v33;\n        v53 = v35;\n        if (v35 > -1) {\n            goto lab_0x4046af;\n        } else {\n            goto lab_0x4047cc;\n        }\n    }\n  lab_0x40469a:;\n    struct group * v56 = getgrnam(name2); // 0x40469d\n    v31 = v28;\n    v32 = v29;\n    v33 = v30;\n    if (v56 == NULL) {\n        goto lab_0x40479b;\n    } else {\n        // 0x4046ab\n        v55 = v28;\n        v54 = v29;\n        v52 = v30;\n        v53 = (int64_t)*(int32_t *)((int64_t)v56 + 16);\n        goto lab_0x4046af;\n    }\n  lab_0x4047cc:\n    // 0x4047cc\n    endgrent();\n    v45 = v32;\n    v44 = (int64_t *)function_4051c0(v33);\n    v43 = (int64_t)\"invalid group\";\n    goto lab_0x404837;\n  lab_0x4048f0:\n    // 0x4048f0\n    endpwent();\n    v45 = v14;\n    v44 = NULL;\n    v43 = (int64_t)\"invalid user\";\n    goto lab_0x404837;\n  lab_0x404837:\n    // 0x404837\n    free((int64_t *)v45);\n    free(v44);\n    return (int64_t)dcgettext(NULL, (char *)v43, 5);\n  lab_0x4046af:\n    // 0x4046af\n    endgrent();\n    v15 = v55;\n    v11 = v54;\n    v8 = function_4051c0(v52);\n    v10 = v53;\n    goto lab_0x4046bf;\n}\n"
        },
        {
            "funcName": "function_404920",
            "funcStartAddr": "404920",
            "funcEndAddr": "4049ed",
            "decompiledFuncCode": "int64_t function_404920(int64_t a1, int32_t * a2, int32_t * a3, int32_t a4, int32_t a5) {\n    int64_t v1 = a5;\n    int64_t v2 = a4;\n    int64_t v3 = (int64_t)a2;\n    if (a3 == NULL) {\n        // 0x4049d0\n        return function_404610(a1, 0, v3, 0, v2, v1);\n    }\n    int64_t v4 = (int64_t)a3;\n    char * str = (char *)a1; // 0x40494b\n    char * found_char_pos = strchr(str, 58); // 0x40494b\n    int64_t result = function_404610(a1, (int64_t)found_char_pos, v3, v4, v2, v1); // 0x404965\n    if (found_char_pos != NULL) {\n        // 0x4049b4\n        return result;\n    }\n    if (result == 0) {\n        // 0x4049b4\n        return 0;\n    }\n    char * found_char_pos2 = strchr(str, 46); // 0x404984\n    if (found_char_pos2 == NULL || function_404610(a1, (int64_t)found_char_pos2, v3, v4, v2, v1) != 0) {\n        // 0x4049b4\n        return 0x100000000 * result >> 32;\n    }\n    // 0x4049b4\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4049f0",
            "funcStartAddr": "4049f0",
            "funcEndAddr": "404dcd",
            "decompiledFuncCode": "int64_t function_4049f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404a88\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404a0c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404a26\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404a6b\n    if (a6 < 10) {\n        // 0x404a7a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404b72\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404dd0",
            "funcStartAddr": "404dd0",
            "funcEndAddr": "404df0",
            "decompiledFuncCode": "int64_t function_404dd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404dd0\n    if (a5 == 0) {\n        // 0x404deb\n        return function_4049f0(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x404dd7\n    v1++;\n    int64_t v2 = v1; // 0x404de9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404de0\n        v1++;\n        v2 = v1;\n    }\n    // 0x404deb\n    return function_4049f0(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404e50",
            "decompiledFuncCode": "int64_t function_404df0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404df0\n    int64_t v3 = &v2; // 0x404df0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404e23\n    int64_t v6; // 0x404e0d\n    int64_t * v7; // 0x404e2b\n    int64_t v8; // 0x404e2b\n    int64_t v9; // 0x404e37\n    if (v5 < 48) {\n        // 0x404e00\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404e43\n            break;\n        }\n    } else {\n        // 0x404e2b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404e43\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404e21\n    while (v4 != 9) {\n        // 0x404e19\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404e00\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404e43\n                break;\n            }\n        } else {\n            // 0x404e2b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404e43\n                break;\n            }\n        }\n        // 0x404e19\n        v10 = 10;\n    }\n    // 0x404e43\n    return function_4049f0(a1, a2, a3, a4, v3, v10, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404e50",
            "funcStartAddr": "404e50",
            "funcEndAddr": "404f0c",
            "decompiledFuncCode": "int64_t function_404e50(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404e50\n    int64_t v1; // bp-168, 0x404e50\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404e50\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404e50\n    int64_t v8; // 0x404e50\n    int64_t v9; // bp-56, 0x404e50\n    int64_t v10; // 0x404eb5\n    int64_t v11; // 0x404ed9\n    if ((int32_t)v6 < 48) {\n        // 0x404ea0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404ef0\n            break;\n        }\n    } else {\n        // 0x404ed2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404ef0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404eca\n    int64_t v13 = 10; // 0x404eca\n    while (v5 != 9) {\n        // 0x404ecc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404ea0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404ef0\n                break;\n            }\n        } else {\n            // 0x404ed2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404ef0\n                break;\n            }\n        }\n        // 0x404ec2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404ef0\n    int64_t v14; // bp-136, 0x404e50\n    int64_t result = function_4049f0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x404eff\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f10",
            "funcStartAddr": "404f10",
            "funcEndAddr": "404f84",
            "decompiledFuncCode": "int64_t function_404f10(int64_t a1) {\n    // 0x404f10\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404f73\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "404faa",
            "decompiledFuncCode": "int64_t function_404f90(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404f94\n    if (size != 0 != (mem == NULL)) {\n        // 0x404fa3\n        return (int64_t)mem;\n    }\n    // 0x404fa5\n    function_4051e0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "404fd1",
            "decompiledFuncCode": "int64_t function_404fb0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404fb3\n    int64_t v2 = v1; // 0x404fb3\n    if (v2 < 0) {\n        // 0x404fcb\n        function_4051e0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404fc9\n        return function_404f90(v2);\n    }\n    // 0x404fcb\n    function_4051e0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "404fe2",
            "decompiledFuncCode": "int64_t function_404fe0(void) {\n    // 0x404fe0\n    int64_t v1; // 0x404fe0\n    return function_404f90(v1);\n}\n"
        },
        {
            "funcName": "function_404ff0",
            "funcStartAddr": "404ff0",
            "funcEndAddr": "405026",
            "decompiledFuncCode": "int64_t function_404ff0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405018\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405001\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405010\n        return (int64_t)mem;\n    }\n    // 0x405021\n    function_4051e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "405051",
            "decompiledFuncCode": "int64_t function_405030(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405033\n    int64_t v2 = v1; // 0x405033\n    if (v2 < 0) {\n        // 0x40504b\n        function_4051e0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405049\n        return function_404ff0(a1, v2);\n    }\n    // 0x40504b\n    function_4051e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405060",
            "funcStartAddr": "405060",
            "funcEndAddr": "4050e6",
            "decompiledFuncCode": "int64_t function_405060(int64_t a1, int64_t * a2, uint64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= v1) {\n            // 0x4050bb\n            function_4051e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v2 = v1 + 1 + v1 / 2;\n        *a2 = v2;\n        return function_404ff0(a1, v2 * a3);\n    }\n    int64_t v3 = v1; // 0x4050a3\n    if (a2 == NULL) {\n        // 0x4050c8\n        v3 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v4 = (int128_t)v3 * (int128_t)a3; // 0x4050a8\n    if ((int64_t)v4 > -1 != v4 <= 0xffffffffffffffff) {\n        // 0x4050bb\n        function_4051e0(a1);\n        // UNREACHABLE\n    }\n    // 0x40508a\n    *a2 = v3;\n    return function_404ff0(a1, v3 * a3);\n}\n"
        },
        {
            "funcName": "function_4050f0",
            "funcStartAddr": "4050f0",
            "funcEndAddr": "405140",
            "decompiledFuncCode": "int64_t function_4050f0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4050f0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40513a\n            function_4051e0(a1);\n            // UNREACHABLE\n        }\n        // 0x405112\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404ff0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405125\n        *(int64_t *)a2 = 128;\n        return function_404ff0(0, 128);\n    }\n    // 0x405138\n    if (a2 < 0) {\n        // 0x40513a\n        function_4051e0(a1);\n        // UNREACHABLE\n    }\n    // 0x405112\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404ff0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "405157",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1, int64_t a2) {\n    // 0x405140\n    return (int64_t)memset((int64_t *)function_404f90(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "40518e",
            "decompiledFuncCode": "int64_t function_405160(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405167\n    if ((int64_t)v1 < 0) {\n        // 0x405189\n        function_4051e0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405189\n        function_4051e0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40517a\n    if (mem != NULL) {\n        // 0x405184\n        return (int64_t)mem;\n    }\n    // 0x405189\n    function_4051e0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405190",
            "funcStartAddr": "405190",
            "funcEndAddr": "4051b8",
            "decompiledFuncCode": "int64_t function_405190(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404f90(a2); // 0x40519f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "4051d3",
            "decompiledFuncCode": "int64_t function_4051c0(int64_t str) {\n    // 0x4051c0\n    return function_405190(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "405211",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t a1) {\n    // 0x4051e0\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405220",
            "funcStartAddr": "405220",
            "funcEndAddr": "405247",
            "decompiledFuncCode": "int64_t function_405220(void) {\n    // 0x405220\n    int64_t v1; // 0x405220\n    int64_t v2 = function_406b90(v1, v1, v1); // 0x405221\n    if ((int32_t)v2 != -1 || *__errno_location() != 12) {\n        // 0x40522d\n        return v2 & 0xffffffff;\n    }\n    // 0x405242\n    function_4051e0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405250",
            "funcStartAddr": "405250",
            "funcEndAddr": "40575f",
            "decompiledFuncCode": "int64_t function_405250(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x40525e\n    if (base >= 37) {\n        // 0x4056fc\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x405282\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x4052b2\n    int64_t v3 = str; // 0x4052b7\n    char v4 = c; // 0x4052b7\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x4052ac\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x4052a8\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x4052b9\n    if (v4 == 45) {\n        // 0x4052f3\n        return 4;\n    }\n    // 0x4052be\n    int64_t v6; // bp-64, 0x405250\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x40527e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x4052c4\n    int64_t * v7 = (int64_t *)endptr; // 0x4052c9\n    int64_t v8 = *v7; // 0x4052c9\n    char v9; // 0x405250\n    int64_t v10; // 0x405250\n    int64_t v11; // 0x405250\n    int64_t v12; // 0x405250\n    int64_t v13; // 0x405250\n    int64_t v14; // 0x405250\n    int64_t v15; // 0x405250\n    if (v8 == str) {\n        // 0x405320\n        if (c == 0 || str2 == NULL) {\n            // 0x4052f3\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x405341\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x4052f3\n            return 4;\n        }\n        goto lab_0x40534f;\n    } else {\n        int32_t v16 = *v1; // 0x4052d4\n        int64_t v17 = 0; // 0x4052da\n        if (v16 != 0) {\n            // 0x405308\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x4052f3\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x4052c4\n        v13 = v18;\n        v10 = v17;\n        if (str2 == NULL) {\n            goto lab_0x4052f0;\n        } else {\n            char c2 = *(char *)v8; // 0x4052e3\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x405443\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40534f;\n                } else {\n                    goto lab_0x405455;\n                }\n            } else {\n                goto lab_0x4052f0;\n            }\n        }\n    }\n  lab_0x40534f:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x405357\n    int64_t v21 = 1; // 0x405357\n    int64_t v22; // 0x405250\n    int64_t v23; // 0x405250\n    int64_t v24; // 0x405250\n    int64_t v25; // 0x405250\n    int64_t v26; // 0x405250\n    int64_t v27; // 0x405250\n    int64_t v28; // 0x405250\n    int64_t v29; // 0x405250\n    int64_t v30; // 0x405250\n    int64_t v31; // 0x405250\n    int64_t v32; // 0x405250\n    int64_t v33; // 0x405250\n    int64_t v34; // 0x405250\n    int64_t v35; // 0x405250\n    int64_t v36; // 0x405250\n    int64_t v37; // 0x405250\n    int64_t v38; // 0x405250\n    int64_t v39; // 0x405250\n    int64_t v40; // 0x405250\n    int64_t v41; // 0x405250\n    if (v19 < 48) {\n        // 0x405359\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4053ba;\n        } else {\n            // 0x40536c\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x4053ba;\n            } else {\n                // 0x405388\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x4053ba;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x4055e9\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x4053ba;\n                    }\n                    default: {\n                        // 0x40539d\n                        g47 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x40555b;\n                            }\n                            case 70: {\n                                goto lab_0x405455;\n                            }\n                            case 71: {\n                                goto lab_0x405593;\n                            }\n                            case 72: {\n                                goto lab_0x405455;\n                            }\n                            case 73: {\n                                goto lab_0x405455;\n                            }\n                            case 74: {\n                                goto lab_0x405455;\n                            }\n                            case 75: {\n                                goto lab_0x40541c;\n                            }\n                            case 76: {\n                                goto lab_0x405455;\n                            }\n                            case 77: {\n                                goto lab_0x4053de;\n                            }\n                            case 78: {\n                                goto lab_0x405455;\n                            }\n                            case 79: {\n                                goto lab_0x405455;\n                            }\n                            case 80: {\n                                goto lab_0x405528;\n                            }\n                            case 81: {\n                                goto lab_0x405455;\n                            }\n                            case 82: {\n                                goto lab_0x405455;\n                            }\n                            case 83: {\n                                goto lab_0x405455;\n                            }\n                            case 84: {\n                                goto lab_0x4054f8;\n                            }\n                            case 85: {\n                                goto lab_0x405455;\n                            }\n                            case 86: {\n                                goto lab_0x405455;\n                            }\n                            case 87: {\n                                goto lab_0x405455;\n                            }\n                            case 88: {\n                                goto lab_0x405455;\n                            }\n                            case 89: {\n                                goto lab_0x4054c6;\n                            }\n                            case 90: {\n                                goto lab_0x40548b;\n                            }\n                            case 91: {\n                                goto lab_0x405455;\n                            }\n                            case 92: {\n                                goto lab_0x405455;\n                            }\n                            case 93: {\n                                goto lab_0x405455;\n                            }\n                            case 94: {\n                                goto lab_0x405455;\n                            }\n                            case 95: {\n                                goto lab_0x405455;\n                            }\n                            case 96: {\n                                goto lab_0x405455;\n                            }\n                            case 97: {\n                                goto lab_0x405455;\n                            }\n                            case 98: {\n                                goto lab_0x40546f;\n                            }\n                            case 99: {\n                                goto lab_0x4053f8;\n                            }\n                            case 100: {\n                                goto lab_0x405455;\n                            }\n                            case 101: {\n                                goto lab_0x405455;\n                            }\n                            case 102: {\n                                goto lab_0x405455;\n                            }\n                            case 103: {\n                                goto lab_0x405593;\n                            }\n                            case 104: {\n                                goto lab_0x405455;\n                            }\n                            case 105: {\n                                goto lab_0x405455;\n                            }\n                            case 106: {\n                                goto lab_0x405455;\n                            }\n                            case 107: {\n                                goto lab_0x40541c;\n                            }\n                            case 108: {\n                                goto lab_0x405455;\n                            }\n                            case 109: {\n                                goto lab_0x4053de;\n                            }\n                            case 110: {\n                                goto lab_0x405455;\n                            }\n                            case 111: {\n                                goto lab_0x405455;\n                            }\n                            case 112: {\n                                goto lab_0x405455;\n                            }\n                            case 113: {\n                                goto lab_0x405455;\n                            }\n                            case 114: {\n                                goto lab_0x405455;\n                            }\n                            case 115: {\n                                goto lab_0x405455;\n                            }\n                            case 116: {\n                                goto lab_0x4054f8;\n                            }\n                            default: {\n                                goto lab_0x4053ba;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4053ba;\n    }\n  lab_0x4052f0:\n    // 0x4052f0\n    *a4 = v13;\n    // 0x4052f3\n    return v10 & 0xffffffff;\n  lab_0x4053ba:\n    // 0x4053ba\n    g48 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x405250\n    switch (v9) {\n        case 66: {\n            // 0x4055b4\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x405427;\n            } else {\n                // 0x4055c1\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x4053f8;\n            }\n        }\n        case 69: {\n            goto lab_0x40555b;\n        }\n        case 71: {\n            goto lab_0x405593;\n        }\n        case 75: {\n            goto lab_0x40541c;\n        }\n        case 77: {\n            goto lab_0x4053de;\n        }\n        case 80: {\n            goto lab_0x405528;\n        }\n        case 84: {\n            goto lab_0x4054f8;\n        }\n        case 89: {\n            goto lab_0x4054c6;\n        }\n        case 90: {\n            goto lab_0x40548b;\n        }\n        case 98: {\n            goto lab_0x40546f;\n        }\n        case 99: {\n            goto lab_0x4053f8;\n        }\n        case 103: {\n            goto lab_0x405593;\n        }\n        case 107: {\n            goto lab_0x40541c;\n        }\n        case 109: {\n            goto lab_0x4053de;\n        }\n        case 116: {\n            goto lab_0x4054f8;\n        }\n        case 119: {\n            // 0x405460\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x405427;\n            } else {\n                // 0x405465\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x4053f8;\n            }\n        }\n        default: {\n            goto lab_0x405455;\n        }\n    }\n  lab_0x40555b:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x405573\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x40557f\n    int64_t v48 = v45; // 0x405582\n    int64_t v49 = v34; // 0x405582\n    int64_t v50 = v46; // 0x405582\n    int32_t v51 = v47; // 0x405582\n    int64_t v52 = v46; // 0x405582\n    while (v47 != 0) {\n        // 0x405570\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x4054b4;\n  lab_0x405593:\n    // 0x405593\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x40559e\n        int128_t v53; // 0x405599\n        uint128_t v54; // 0x405599\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x40559e\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x405250\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x4055a3\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x4055a8\n                v23 = v57;\n                int64_t v58; // 0x405250\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x4053f8;\n  lab_0x40541c:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x40541f\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x4053f8;\n    } else {\n        goto lab_0x405427;\n    }\n  lab_0x4053de:;\n    int128_t v62 = v24; // 0x4053e4\n    uint128_t v63 = v62 * (int128_t)v14; // 0x4053e4\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x405427;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x4053e9\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x405427;\n        } else {\n            // 0x4053ee\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x4053f8;\n        }\n    }\n  lab_0x405528:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x40553b\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x405547\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x40554a\n    int64_t v70 = v67; // 0x40554a\n    while (v68 != 0) {\n        // 0x405538\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x4054b4;\n  lab_0x4054f8:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x40550b\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x405517\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x40551a\n    int64_t v76 = v73; // 0x40551a\n    while (v74 != 0) {\n        // 0x405508\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x4054b4;\n  lab_0x4054c6:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x4054db\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x4054e7\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x4054ea\n    int64_t v82 = v79; // 0x4054ea\n    while (v80 != 0) {\n        // 0x4054d8\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x4054b4;\n  lab_0x40548b:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x4054a3\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x4054af\n    int32_t v87 = v86; // 0x4054b2\n    int64_t v88 = v85; // 0x4054b2\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x4054a0\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x4054b4;\n  lab_0x40546f:\n    // 0x40546f\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x405427;\n    } else {\n        // 0x405478\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x4053f8;\n    }\n  lab_0x4053f8:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x4053fd\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x4052f0;\n  lab_0x405455:\n    // 0x405455\n    *a4 = v15;\n    // 0x4052f3\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x405427:\n    // 0x405427\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x4053f8;\n  lab_0x4054b4:\n    // 0x4054b4\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x4053f8;\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "405d7c",
            "decompiledFuncCode": "int64_t function_405760(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40577f\n    int64_t v2 = *v1; // 0x40577f\n    char * str2 = (char *)v2; // 0x40578c\n    char c = *str2; // 0x40578c\n    int64_t v3 = v2; // 0x4057b8\n    int64_t v4 = 0; // 0x405760\n    int32_t v5; // 0x405760\n    int64_t v6; // 0x405760\n    int64_t v7; // 0x405760\n    int64_t v8; // 0x405760\n    int64_t v9; // 0x405760\n    int64_t v10; // 0x405760\n    int64_t v11; // 0x405760\n    int64_t v12; // 0x405760\n    int64_t v13; // 0x405760\n    int64_t str3; // 0x405760\n    int64_t v14; // 0x405760\n    int64_t v15; // 0x405760\n    int64_t v16; // 0x405760\n    int64_t v17; // 0x405760\n    int32_t v18; // 0x405760\n    int32_t v19; // 0x405760\n    int32_t v20; // 0x405760\n    int32_t v21; // 0x405760\n    int32_t v22; // 0x405760\n    int32_t v23; // 0x405760\n    int32_t v24; // 0x405760\n    int32_t v25; // 0x405760\n    int32_t v26; // 0x405760\n    int32_t v27; // 0x405760\n    int32_t v28; // 0x405760\n    int32_t v29; // 0x405760\n    int64_t nmemb; // 0x405760\n    int64_t v30; // 0x405760\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4057bc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4057b8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4057c8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4057ce\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405798\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4057fc\n                int64_t v34; // 0x405760\n                int64_t v35; // 0x405760\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405805\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405980;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405816\n                int64_t v37 = *(int64_t *)v36; // 0x40581a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4057f0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405805\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405980;\n                        }\n                    }\n                    // 0x405816\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405866:\n                    // 0x405866\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4058c0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405a30\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4058c0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4059e0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40588a;\n                                } else {\n                                    // 0x4059ec\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40588a;\n                                    } else {\n                                        // 0x4059fa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40588a;\n                                        } else {\n                                            goto lab_0x4058c0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40588a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4058d1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405aa6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405c52\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x405c72\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x405cbf\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x405cd9\n                            int64_t v45; // 0x405cdb\n                            if (*(char *)v42 != 0) {\n                                // 0x405cdb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405cd3\n                            while (v17 + nmemb != v42) {\n                                // 0x405cd5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x405cdb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x405cc8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405d00\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x405ab4\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x405c0f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405b09\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405b20\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4059ce\n                    return 63;\n                }\n                // 0x4058f0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405974\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405980:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405990\n                    uint32_t v50 = *v49; // 0x405990\n                    int64_t v51 = v50; // 0x405990\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40599a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4059a3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x405bcf\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405b7a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4059ce\n                            return 63;\n                        }\n                        // 0x405a18\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x405d2f\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x405c2d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405c40\n                                // 0x4059ce\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405b3e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405b52\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4059bb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4059be\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4059c2\n                    int64_t result = v59; // 0x4059c8\n                    if (v58 != 0) {\n                        // 0x4059ca\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4059ce\n                    return result;\n                }\n            } else {\n                // 0x4057ce\n                v5 = v32;\n            }\n            // break -> 0x4058f5\n            break;\n        }\n    }\n    // 0x4058f5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40590d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405917\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4059ce\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405a59\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405946\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405956\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4058c0:\n    // 0x4058c0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4058c0\n    int64_t v63 = *(int64_t *)v62; // 0x4058c4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4058d1\n        goto lab_0x4058d1;\n    }\n    goto lab_0x405866;\n  lab_0x40588a:\n    // 0x40588a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405760\n    int32_t v65; // 0x405760\n    int32_t v66; // 0x405760\n    if (v27 != 0) {\n        goto lab_0x4058c0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405a40\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4058c0;\n            } else {\n                goto lab_0x4058b1;\n            }\n        } else {\n            // 0x4058a5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405b9c\n                int64_t v67 = (int64_t)mem; // 0x405b9c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4058c0;\n                } else {\n                    // 0x405baf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4058b1;\n                }\n            } else {\n                goto lab_0x4058b1;\n            }\n        }\n    }\n  lab_0x4058b1:\n    // 0x4058b1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4058c0;\n}\n"
        },
        {
            "funcName": "function_405d80",
            "funcStartAddr": "405d80",
            "funcEndAddr": "406346",
            "decompiledFuncCode": "int64_t function_405d80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405da1\n    if (v3 < 1) {\n        // 0x405f5e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x405d9d\n    int32_t v5 = *(int32_t *)a7; // 0x405da9\n    uint64_t v6 = a1 & 0xffffffff; // 0x405dab\n    int64_t v7 = v2; // 0x405db0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405db3\n    *v8 = 0;\n    int64_t v9; // 0x405d80\n    int64_t v10; // 0x405d80\n    int64_t v11; // 0x405d80\n    int64_t v12; // 0x405d80\n    int64_t str; // 0x405d80\n    int64_t v13; // 0x405d80\n    int64_t v14; // 0x405d80\n    int64_t v15; // 0x405d80\n    int64_t v16; // 0x405d80\n    int64_t v17; // 0x405d80\n    int32_t v18; // 0x405d80\n    char v19; // 0x405d80\n    if (v5 == 0) {\n        // 0x405f98\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x405dca;\n    } else {\n        // 0x405dc3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405e10\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405e13\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405ed8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405e26\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405e36\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405eec;\n                } else {\n                    goto lab_0x405e48;\n                }\n            }\n        } else {\n            goto lab_0x405dca;\n        }\n    }\n  lab_0x405dca:\n    // 0x405dca\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405dd0\n    *v24 = 0;\n    int64_t v25; // 0x405d80\n    int64_t v26; // 0x405d80\n    int64_t v27; // 0x405d80\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405ec0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405ecd;\n        }\n        case 43: {\n            // 0x4061d0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405ecd;\n        }\n        default: {\n            // 0x405dec\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40614f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x406268\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x405ecd;\n                } else {\n                    // 0x40615d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405dfa;\n                }\n            } else {\n                goto lab_0x405dfa;\n            }\n        }\n    }\n  lab_0x405ed8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405edf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405e48;\n    } else {\n        goto lab_0x405eec;\n    }\n  lab_0x405dfa:\n    // 0x405dfa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x405ecd;\n  lab_0x405ecd:\n    // 0x405ecd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405ed8;\n  lab_0x405e48:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405e48\n    int64_t v31 = v30; // 0x405e48\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405e4a\n    if ((int64_t)*v32 > v31) {\n        // 0x405e4f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405e52\n    if (*v33 > v30) {\n        // 0x405e57\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405e5a\n    int64_t v35 = v31; // 0x405e5e\n    int64_t v36 = v15; // 0x405e5e\n    int64_t v37; // 0x405d80\n    int64_t v38; // 0x405d80\n    int64_t v39; // 0x405d80\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405fc8\n        int64_t v41 = v40; // 0x405fc8\n        v2 = v41;\n        int64_t v42; // 0x405d80\n        if (*v33 == v40) {\n            // 0x4061b0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4061b8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405fd4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405fe8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405ff1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405ffa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406011\n            int64_t v47 = v45 & 0xffffffff; // 0x406015\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40601e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406024\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406026;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406000\n            int64_t v49 = v48 & 0xffffffff; // 0x406000\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406011\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40601e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406024\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406026;\n                    }\n                }\n                // 0x406000\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4061c8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406026;\n    } else {\n        goto lab_0x405e64;\n    }\n  lab_0x405eec:\n    // 0x405eec\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405eef\n    int64_t v51 = v12; // 0x405eef\n    int64_t v52 = v14; // 0x405eef\n    if (*(char *)v10 == 0) {\n        goto lab_0x405e48;\n    } else {\n        goto lab_0x405ef5;\n    }\n  lab_0x405e64:;\n    int32_t v53 = v35; // 0x405e64\n    int64_t v54; // 0x405d80\n    int64_t v55; // 0x405d80\n    int64_t v56; // 0x405d80\n    int64_t v57; // 0x405d80\n    int64_t v58; // 0x405d80\n    int64_t v59; // 0x405d80\n    char * v60; // 0x405d80\n    int64_t v61; // 0x405d80\n    int64_t v62; // 0x405e79\n    int64_t v63; // 0x405d80\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405fb3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405fb6;\n    } else {\n        // 0x405e6c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405d80\n        int64_t v66 = v65 ? -1 : 1; // 0x405e80\n        int64_t v67 = (int64_t)\"--\"; // 0x405d80\n        int64_t v68 = v62; // 0x405d80\n        int64_t v69 = 3; // 0x405e80\n        unsigned char v70 = *(char *)v68; // 0x405e80\n        char v71 = *(char *)v67; // 0x405e80\n        char v72 = v71; // 0x405e80\n        bool v73 = false; // 0x405e80\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405f70\n            if (*(char *)v62 == 45) {\n                // 0x406030\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406030\n                if (c == 0) {\n                    goto lab_0x405f7a;\n                } else {\n                    // 0x40603d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4060c0;\n                    } else {\n                        if (c == 45) {\n                            // 0x4062a3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406115;\n                        } else {\n                            // 0x40604e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4060c0;\n                            } else {\n                                // 0x406053\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406074;\n                                } else {\n                                    // 0x40605a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4060c0;\n                                    } else {\n                                        goto lab_0x406074;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405f7a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405e90\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405e93\n            int64_t v77 = v35 + 1; // 0x405e96\n            int32_t v78 = v77; // 0x405e99\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406200\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405ea7\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405eb5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405fb6;\n        }\n    }\n  lab_0x405ef5:;\n    // 0x405ef5\n    int64_t v79; // bp-104, 0x405d80\n    int64_t v80 = &v79; // 0x405d8a\n    int64_t v81 = v50 + 1; // 0x405ef5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405efc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405f01\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405f05\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405f09\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405f11\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405f16\n    int32_t c2 = v84; // 0x405f16\n    char * found_char_pos = strchr(str2, c2); // 0x405f16\n    int64_t v87 = *v82; // 0x405f1b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405f25\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405f30\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406220\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4061ed\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405f5e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405f16\n    char v91 = *(char *)(v90 + 1); // 0x405f4b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405f05\n        if (v91 != 58) {\n            // 0x405f5e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406174\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406278\n                *v8 = 0;\n            } else {\n                // 0x40625c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40619e\n            *v83 = 0;\n            // 0x405f5e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40617e\n        if (v93 != 0) {\n            // 0x406210\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40619e\n            *v83 = 0;\n            // 0x405f5e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406191\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40619e\n            *v83 = 0;\n            // 0x405f5e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4062da\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40628a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406291\n        // 0x40619e\n        *v83 = 0;\n        // 0x405f5e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4060e9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4060eb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406310\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4062c1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4062c8\n            // 0x405f5e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4060f6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4060fa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406115;\n  lab_0x406026:\n    // 0x406026\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405e64;\n  lab_0x406115:;\n    int64_t v99 = function_405760(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406133\n    // 0x405f5e\n    return v99 & 0xffffffff;\n  lab_0x405fb6:;\n    int32_t v100 = v55; // 0x405fb6\n    if (v100 != (int32_t)v59) {\n        // 0x405fba\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405f5e\n    return 0xffffffff;\n  lab_0x405f7a:\n    // 0x405f7a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405f81\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405f5e\n    return v99 & 0xffffffff;\n  lab_0x4060c0:\n    // 0x4060c0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405ef5;\n  lab_0x406074:\n    // 0x406074\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405760(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x40609a\n    if ((int32_t)v101 != -1) {\n        // 0x405f5e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4060af\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4060c0;\n}\n"
        },
        {
            "funcName": "function_406350",
            "funcStartAddr": "406350",
            "funcEndAddr": "4063a6",
            "decompiledFuncCode": "int64_t function_406350(int64_t a1) {\n    // 0x406350\n    *(int32_t *)&g41 = g27;\n    *(int32_t *)&g42 = g26;\n    int64_t v1; // 0x406350\n    int64_t result = function_405d80(v1, v1, v1, v1, v1, v1, &g41, a1 & 0xffffffff); // 0x406376\n    g27 = *(int32_t *)&g41;\n    g46 = (char *)g44;\n    *(int32_t *)&g25 = g43;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4063b0",
            "funcStartAddr": "4063b0",
            "funcEndAddr": "4063c8",
            "decompiledFuncCode": "int64_t function_4063b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4063b0\n    return function_406350(1);\n}\n"
        },
        {
            "funcName": "function_4063d0",
            "funcStartAddr": "4063d0",
            "funcEndAddr": "4063e3",
            "decompiledFuncCode": "int64_t function_4063d0(int64_t a1, int64_t a2, int64_t * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x4063d0\n    return function_406350(0);\n}\n"
        },
        {
            "funcName": "function_4063f0",
            "funcStartAddr": "4063f0",
            "funcEndAddr": "406405",
            "decompiledFuncCode": "int64_t function_4063f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4063f0\n    return function_405d80(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406410",
            "funcStartAddr": "406410",
            "funcEndAddr": "406426",
            "decompiledFuncCode": "int64_t function_406410(void) {\n    // 0x406410\n    return function_406350(0);\n}\n"
        },
        {
            "funcName": "function_406430",
            "funcStartAddr": "406430",
            "funcEndAddr": "406448",
            "decompiledFuncCode": "int64_t function_406430(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406430\n    return function_405d80(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406450",
            "funcStartAddr": "406450",
            "funcEndAddr": "4064ca",
            "decompiledFuncCode": "int64_t function_406450(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40645b\n    int64_t v2 = (int64_t)&g11; // 0x40645b\n    int32_t * pwc; // 0x406450\n    int64_t v3; // 0x406450\n    int64_t n; // 0x406450\n    if (a2 == 0) {\n        goto lab_0x4064a2;\n    } else {\n        // 0x40645d\n        if (a3 == 0) {\n            // 0x406488\n            return -2;\n        }\n        // 0x406469\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4064a2;\n        } else {\n            goto lab_0x406474;\n        }\n    }\n  lab_0x4064a2:\n    // 0x4064a2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406450\n    pwc = (int32_t *)&v4;\n    goto lab_0x406474;\n  lab_0x406474:;\n    char * wstr = (char *)v3; // 0x40647a\n    int64_t ps; // 0x406450\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40647a\n    int64_t result = v5; // 0x40647a\n    if (v5 < 0xfffffffe) {\n        // 0x406488\n        return result;\n    }\n    int64_t result2 = result; // 0x4064b9\n    if ((char)function_406530(0, v3) == 0) {\n        // 0x4064bb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406488\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4064d0",
            "funcStartAddr": "4064d0",
            "funcEndAddr": "40652d",
            "decompiledFuncCode": "int64_t function_4064d0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4064d7\n    int64_t v2; // 0x4064d0\n    int64_t result = function_406da0(a1, v2); // 0x4064e8\n    if ((v2 & 32) != 0) {\n        // 0x406510\n        if ((int32_t)result == 0) {\n            // 0x406514\n            *__errno_location() = 0;\n        }\n        // 0x40650a\n        return 0xffffffff;\n    }\n    // 0x4064f1\n    if ((int32_t)result == 0) {\n        // 0x40650a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4064f8\n    if (v1 == 0) {\n        // 0x4064fa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40650a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406530",
            "funcStartAddr": "406530",
            "funcEndAddr": "40658e",
            "decompiledFuncCode": "int64_t function_406530(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406536\n    if (locale == NULL) {\n        // 0x406563\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406536\n    bool v2; // 0x406530\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x406530\n    int64_t v5 = v1; // 0x406530\n    int64_t v6 = 2; // 0x406555\n    unsigned char v7 = *(char *)v5; // 0x406555\n    char v8 = *(char *)v4; // 0x406555\n    char v9 = v8; // 0x406555\n    bool v10 = false; // 0x406555\n    while (v7 == v8) {\n        // 0x406548\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406561\n    int64_t v13 = v1; // 0x406561\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406563\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406561\n    unsigned char v15 = *(char *)v13; // 0x40657d\n    char v16 = *(char *)v12; // 0x40657d\n    char v17 = v16; // 0x40657d\n    bool v18 = false; // 0x40657d\n    while (v15 == v16) {\n        // 0x406570\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "4065d8",
            "decompiledFuncCode": "int64_t function_406590(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x406590\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x4065a2\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x4065ab\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x4065d4\n    return result;\n}\n"
        },
        {
            "funcName": "function_4065e0",
            "funcStartAddr": "4065e0",
            "funcEndAddr": "406b42",
            "decompiledFuncCode": "int64_t function_4065e0(void) {\n    char * v1 = nl_langinfo(14); // 0x4065f6\n    char * v2 = g45; // 0x4065fb\n    char * v3; // 0x4065e0\n    int64_t v4; // 0x4065e0\n    int64_t v5; // 0x4065e0\n    int64_t v6; // 0x4065e0\n    int64_t v7; // 0x4065e0\n    int32_t size; // 0x4065e0\n    int32_t size2; // 0x4065e0\n    int32_t len; // 0x4066b2\n    int64_t v8; // 0x4066b2\n    char * env_val; // 0x40669d\n    if (v2 == NULL) {\n        // 0x406698\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406705;\n        } else {\n            // 0x4066aa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406705;\n            } else {\n                // 0x4066af\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40669d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406b35\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406705;\n                    } else {\n                        // 0x406aa9\n                        size2 = len + 14;\n                        goto lab_0x4066cb;\n                    }\n                } else {\n                    goto lab_0x4066cb;\n                }\n            }\n        }\n    } else {\n        // 0x4065e0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40661a;\n    }\n  lab_0x40694c:;\n    // 0x40694c\n    struct _IO_FILE * stream; // 0x40678b\n    int32_t v10 = __uflow(stream); // 0x40694f\n    int64_t v11; // 0x4065e0\n    int64_t v12 = v11; // 0x406959\n    int64_t v13; // 0x4065e0\n    int64_t v14 = v13; // 0x406959\n    int32_t v15 = v10; // 0x406959\n    int64_t v16; // 0x4065e0\n    int64_t v17 = v16; // 0x406959\n    int64_t v18 = v11; // 0x406959\n    int64_t v19 = v13; // 0x406959\n    int64_t v20 = v16; // 0x406959\n    if (v10 == -1) {\n        // break -> 0x40695f\n        goto lab_0x40695f;\n    }\n    goto lab_0x4067d9;\n  lab_0x4067ce:;\n    // 0x4067ce\n    int64_t v90; // 0x4065e0\n    int64_t * v32; // 0x4067c0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4065e0\n    v12 = v89;\n    int64_t v91; // 0x4065e0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4065e0\n    v17 = v92;\n    goto lab_0x4067d9;\n  lab_0x4067d9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4065e0\n    int32_t v25; // bp-120, 0x4065e0\n    int32_t v26; // bp-184, 0x4065e0\n    int64_t v27; // 0x40678b\n    int64_t v28; // 0x4067a8\n    int64_t v29; // 0x4067ad\n    int64_t * v30; // 0x4067c4\n    switch (c) {\n        case 32: {\n            goto lab_0x4067c0;\n        }\n        case 10: {\n            goto lab_0x4067c0;\n        }\n        case 9: {\n            goto lab_0x4067c0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4069b1\n            int32_t v33; // 0x4065e0\n            char v34; // 0x4065e0\n            int32_t v35; // 0x4069be\n            if (v31 < *v30) {\n                // 0x406990\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4069bb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4069b1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406990\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4069bb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4069a0\n                v36 = v33;\n            }\n            // 0x406a8f\n            if (v36 == -1) {\n                // break -> 0x40695f\n                break;\n            }\n            goto lab_0x4067c0;\n        }\n        default: {\n            // 0x4067ef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40695f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406818\n            int64_t v39 = v37 + 4; // 0x40681a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406826\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406828\n            while (v41 == 0) {\n                // 0x406818\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406846\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406852\n            int64_t v45 = v43 + 4; // 0x406854\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406860\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406862\n            while (v47 == 0) {\n                // 0x406852\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40684f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406878\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406888\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40688c\n            int64_t v52 = v51 + v48; // 0x406895\n            int64_t * mem; // 0x4065e0\n            int64_t v53; // 0x4065e0\n            int64_t v54; // 0x4065e0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4069cb\n                int64_t v56 = v55 + 3; // 0x4069d7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4068b1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4068c0\n            if (mem == NULL) {\n                // 0x406aec\n                free((int64_t *)v21);\n                function_406da0(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x406764;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4068d8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4068e2\n            uint32_t v62 = (int32_t)v59; // 0x4068e5\n            int64_t v63; // 0x4065e0\n            if (v62 >= 8) {\n                // 0x4069f4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x406a0e\n                int64_t v66 = v61 - v65; // 0x406a12\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x406a1d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x406a2e\n                    int64_t v70 = v69 & 0xffffffff; // 0x406a2e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x406a2b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x406abf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4068f7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4068fb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40690b\n            int64_t v74 = v60 - 1; // 0x40690f\n            uint32_t v75 = (int32_t)v73; // 0x406914\n            int64_t v76; // 0x4065e0\n            if (v75 >= 8) {\n                // 0x406a42\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x406a4c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x406a5c\n                int64_t v80 = v74 - v79; // 0x406a60\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x406a6b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x406a7b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406a79\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406ad6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x406ade\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406926\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40692a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406b23\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40693e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4067ce;\n            } else {\n                goto lab_0x40694c;\n            }\n        }\n    }\n  lab_0x4067c0:;\n    int64_t v93 = v23; // 0x4065e0\n    int64_t v94 = v22; // 0x4065e0\n    int64_t v95 = v21; // 0x4065e0\n    goto lab_0x4067c0_2;\n  lab_0x406705:;\n    int64_t * mem3 = malloc(size); // 0x406705\n    int64_t v97 = (int64_t)&g11; // 0x406710\n    int64_t v98; // 0x4065e0\n    int64_t path; // 0x4065e0\n    if (mem3 == NULL) {\n        goto lab_0x4066e2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406705\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406726;\n    }\n  lab_0x40661a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x40660d\n    char v100 = *v3; // 0x40661a\n    int64_t v101; // 0x4065e0\n    if (v100 == 0) {\n        // 0x406674\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4065e0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4065e0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406660\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406667;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406630\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40663d\n        char v107 = *(char *)v106; // 0x406642\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406674\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40664b\n    v104 = v103 + 1;\n  lab_0x406667:\n    // 0x406674\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4066e2:;\n    char * v108 = (char *)v97;\n    g45 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40661a;\n  lab_0x406726:;\n    int64_t v109 = v98 + path; // 0x406726\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406752\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x406781\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406ab2\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x4067a5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4067c0_2:;\n                uint64_t v96 = *v32; // 0x4067c0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40694c;\n                } else {\n                    goto lab_0x4067ce;\n                }\n            }\n          lab_0x40695f:\n            // 0x40695f\n            function_406da0(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x40697e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406764;\n  lab_0x4066cb:;\n    int64_t * mem4 = malloc(size2); // 0x4066cb\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x406771\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406726;\n    } else {\n        goto lab_0x4066e2;\n    }\n  lab_0x406764:\n    // 0x406764\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4066e2;\n}\n"
        },
        {
            "funcName": "function_406b50",
            "funcStartAddr": "406b50",
            "funcEndAddr": "406b86",
            "decompiledFuncCode": "int64_t function_406b50(int32_t a1, uint64_t a2) {\n    int64_t v1 = 4 * a2; // 0x406b5a\n    if (v1 < 0) {\n        // 0x406b70\n        *__errno_location() = 12;\n        return 0;\n    }\n    if (a2 < 0x4000000000000000) {\n        // 0x406b68\n        return (int64_t)realloc((int64_t *)(int64_t)a1, (int32_t)v1);\n    }\n    // 0x406b70\n    *__errno_location() = 12;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406b90",
            "funcStartAddr": "406b90",
            "funcEndAddr": "406d9b",
            "decompiledFuncCode": "int64_t function_406b90(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t grouplist2[1]; // 0x406d89\n    int32_t grouplist[1]; // 0x406cc4\n    int64_t result; // 0x406b90\n    int64_t result2; // 0x406b90\n    int64_t v1; // 0x406b90\n    int64_t v2; // 0x406b90\n    int64_t v3; // 0x406b90\n    int32_t v4; // 0x406b90\n    int32_t ngroups; // bp-44, 0x406b90\n    int32_t v5; // 0x406c7d\n    if (a1 == 0) {\n        int32_t v6 = getgroups(0, {0}); // 0x406c6c\n        ngroups = v6;\n        if (v6 < 0) {\n            // 0x406d28\n            if (*__errno_location() != 38) {\n                // 0x406c14\n                return 0xffffffff;\n            }\n            int64_t * mem = malloc(4); // 0x406d3b\n            result = 0xffffffff;\n            if (mem == NULL) {\n                // 0x406c14\n                return result;\n            }\n            int32_t v7 = a2; // 0x406d49\n            *(int32_t *)mem = v7;\n            *(int64_t *)a3 = (int64_t)mem;\n            return v7 != -1;\n        }\n        int64_t v8 = v6; // 0x406c6c\n        v5 = a2;\n        if (v5 == -1 == (v6 != 0)) {\n            int64_t v9 = function_406b50(0, v8); // 0x406d6b\n            if (v9 == 0) {\n                // 0x406c14\n                return 0xffffffff;\n            }\n            // 0x406d7c\n            v3 = v9;\n            v4 = ngroups;\n            goto lab_0x406d80;\n        } else {\n            int64_t v10 = v8 + 1; // 0x406c92\n            ngroups = v10;\n            int64_t v11 = function_406b50(0, 0x100000000 * v10 >> 32); // 0x406c9e\n            if (v11 == 0) {\n                // 0x406c14\n                return 0xffffffff;\n            }\n            // 0x406caf\n            v3 = v11;\n            v4 = ngroups;\n            if (v5 == -1) {\n                goto lab_0x406d80;\n            } else {\n                // 0x406cbd\n                grouplist[0] = (int32_t)v11 + 4;\n                int32_t v12 = getgroups(ngroups - 1, grouplist); // 0x406cc4\n                v1 = v11;\n                if (v12 < 0) {\n                    goto lab_0x406bf8;\n                } else {\n                    // 0x406cd1\n                    *(int32_t *)v11 = v5;\n                    result2 = v12 + 1;\n                    v2 = v11;\n                    goto lab_0x406cd7;\n                }\n            }\n        }\n    } else {\n        // 0x406bab\n        ngroups = 10;\n        int64_t groups = function_406b50(0, 10); // 0x406bbd\n        if (groups == 0) {\n            // 0x406c14\n            return 0xffffffff;\n        }\n        int32_t group = a2; // 0x406bd2\n        char * user = (char *)a1; // 0x406bdd\n        int32_t v13 = getgrouplist(user, group, (int32_t *)groups, &ngroups); // 0x406bdd\n        int64_t v14 = groups; // 0x406be4\n        int32_t v15 = ngroups; // 0x406be4\n        if (v13 < 0) {\n            int64_t v16 = ngroups; // 0x406c28\n            int64_t v17 = v16; // 0x406c2f\n            int64_t v18; // 0x406c31\n            if (ngroups == 10) {\n                // 0x406c31\n                v18 = 2 * v16;\n                ngroups = v18;\n                v17 = v18 & 0xfffffffe;\n            }\n            int64_t groups2 = function_406b50((int32_t)groups, 0x100000000 * v17 >> 32); // 0x406c3d\n            v1 = groups;\n            while (groups2 != 0) {\n                uint32_t v19 = getgrouplist(user, group, (int32_t *)groups2, &ngroups); // 0x406bdd\n                v14 = groups2;\n                v15 = ngroups;\n                int64_t v20 = groups2; // 0x406be4\n                if (v19 >= 0) {\n                    goto lab_0x406be6;\n                }\n                v16 = ngroups;\n                v17 = v16;\n                // 0x406c31\n                v18 = 2 * v16;\n                ngroups = v18;\n                v17 = v18 & 0xfffffffe;\n                // 0x406c37\n                groups2 = function_406b50((int32_t)v20, 0x100000000 * v17 >> 32);\n                v1 = v20;\n            }\n        } else {\n          lab_0x406be6:;\n            int64_t v21 = function_406b50((int32_t)v14, (int64_t)v15); // 0x406bee\n            v1 = v14;\n            if (v21 != 0) {\n                // 0x406c50\n                *(int64_t *)a3 = v21;\n                return ngroups;\n            }\n        }\n        goto lab_0x406bf8;\n    }\n  lab_0x406d0b:;\n    // 0x406d0b\n    int64_t v22; // 0x406b90\n    int64_t v23 = v22 + 4; // 0x406d0b\n    int64_t v24; // 0x406b90\n    result = v24;\n    int64_t v25 = v24; // 0x406d12\n    v22 = v23;\n    int64_t v26; // 0x406b90\n    int64_t v27 = v26; // 0x406d12\n    uint64_t v28; // 0x406ce9\n    if (v28 <= v23) {\n        return result;\n    }\n    goto lab_0x406d18;\n  lab_0x406bf8:;\n    int32_t * v33 = __errno_location(); // 0x406bf8\n    free((int64_t *)v1);\n    // 0x406c14\n    return 0xffffffff;\n  lab_0x406d80:\n    // 0x406d80\n    grouplist2[0] = v3;\n    int32_t v34 = getgroups(v4 - (int32_t)(v5 != -1), grouplist2); // 0x406d89\n    v1 = v3;\n    result2 = v34;\n    v2 = v3;\n    if (v34 >= 0) {\n        goto lab_0x406cd7;\n    } else {\n        goto lab_0x406bf8;\n    }\n  lab_0x406cd7:\n    // 0x406cd7\n    *(int64_t *)a3 = v2;\n    if ((int32_t)result2 < 2) {\n        // 0x406c14\n        return result2;\n    }\n    // 0x406ce4\n    v28 = (0x100000000 * result2 >> 30) + v2;\n    int64_t v35 = v2 + 4; // 0x406ced\n    v25 = result2;\n    v22 = v35;\n    if (v28 <= v35) {\n        // 0x406c14\n        return result2;\n    }\n    v27 = v2;\n    while (true) {\n      lab_0x406d18:;\n        int64_t v29 = v27;\n        int64_t v30 = v25;\n        int32_t v31 = *(int32_t *)v22; // 0x406d18\n        if (v31 != *(int32_t *)v2) {\n            // 0x406d00\n            if (*(int32_t *)v29 == v31) {\n                // 0x406d1e\n                v24 = v30 + 0xffffffff & 0xffffffff;\n                v26 = v29;\n                goto lab_0x406d0b;\n            } else {\n                int64_t v32 = v29 + 4; // 0x406d04\n                *(int32_t *)v32 = v31;\n                v24 = v30;\n                v26 = v32;\n                goto lab_0x406d0b;\n            }\n        } else {\n            // 0x406d1e\n            v24 = v30 + 0xffffffff & 0xffffffff;\n            v26 = v29;\n            goto lab_0x406d0b;\n        }\n    }\n    int64_t result3 = result;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_406da0",
            "funcStartAddr": "406da0",
            "funcEndAddr": "406e1b",
            "decompiledFuncCode": "int64_t function_406da0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406da7\n    if (fileno(stream) < 0) {\n        // 0x406e07\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x406dba\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x406deb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406e07\n            return fclose(stream);\n        }\n    }\n    // 0x406dbc\n    if ((int32_t)function_406e20(a1, v1) == 0) {\n        // 0x406e07\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406dc8\n    int32_t v3 = *v2; // 0x406dd0\n    int64_t result = fclose(stream); // 0x406dde\n    if (v3 != 0) {\n        // 0x406e10\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406de0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406e20",
            "funcStartAddr": "406e20",
            "funcEndAddr": "406e60",
            "decompiledFuncCode": "int64_t function_406e20(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x406e3a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x406e3a\n        return fflush(stream);\n    }\n    // 0x406e48\n    function_406e60(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406e60",
            "funcStartAddr": "406e60",
            "funcEndAddr": "406eb7",
            "decompiledFuncCode": "int64_t function_406e60(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406e60\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x406e6a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x406e9b\n    int64_t result = -1; // 0x406ea4\n    if (v1 != -1) {\n        // 0x406ea6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406eb2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406ec0",
            "funcStartAddr": "406ec0",
            "funcEndAddr": "406f1d",
            "decompiledFuncCode": "int64_t function_406ec0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406ec0\n    return function_4016e0();\n}\n"
        },
        {
            "funcName": "function_406f20",
            "funcStartAddr": "406f20",
            "funcEndAddr": "406f21",
            "decompiledFuncCode": "int64_t function_406f20(void) {\n    // 0x406f20\n    int64_t result; // 0x406f20\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f30",
            "funcStartAddr": "406f30",
            "funcEndAddr": "406f48",
            "decompiledFuncCode": "int64_t function_406f30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406f30\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_406f48",
            "funcStartAddr": "406f48",
            "funcEndAddr": "406f68",
            "decompiledFuncCode": "int64_t function_406f48(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x406f52\n    while (*(int64_t *)v1 != -1) {\n        // 0x406f53\n        v1 -= 8;\n    }\n    // 0x406f64\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chroot.elf"
}