{
    "funcInfo": [
        {
            "funcName": "function_401e00",
            "funcStartAddr": "401e00",
            "funcEndAddr": "401e05",
            "decompiledFuncCode": "int64_t function_401e00(void) {\n    // 0x401e00\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401e05",
            "funcStartAddr": "401e05",
            "funcEndAddr": "401e0a",
            "decompiledFuncCode": "int64_t function_401e05(void) {\n    // 0x401e05\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401e0a",
            "funcStartAddr": "401e0a",
            "funcEndAddr": "401e0f",
            "decompiledFuncCode": "int64_t function_401e0a(void) {\n    // 0x401e0a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e0f",
            "funcStartAddr": "401e0f",
            "funcEndAddr": "401e14",
            "decompiledFuncCode": "int64_t function_401e0f(void) {\n    // 0x401e0f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e14",
            "funcStartAddr": "401e14",
            "funcEndAddr": "401e19",
            "decompiledFuncCode": "int64_t function_401e14(void) {\n    // 0x401e14\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e19",
            "funcStartAddr": "401e19",
            "funcEndAddr": "401e1e",
            "decompiledFuncCode": "int64_t function_401e19(void) {\n    // 0x401e19\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e1e",
            "funcStartAddr": "401e1e",
            "funcEndAddr": "401e23",
            "decompiledFuncCode": "int64_t function_401e1e(void) {\n    // 0x401e1e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e23",
            "funcStartAddr": "401e23",
            "funcEndAddr": "401e28",
            "decompiledFuncCode": "int64_t function_401e23(void) {\n    // 0x401e23\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e28",
            "funcStartAddr": "401e28",
            "funcEndAddr": "401e2d",
            "decompiledFuncCode": "int64_t function_401e28(void) {\n    // 0x401e28\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e2d",
            "funcStartAddr": "401e2d",
            "funcEndAddr": "401e32",
            "decompiledFuncCode": "int64_t function_401e2d(void) {\n    // 0x401e2d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e32",
            "funcStartAddr": "401e32",
            "funcEndAddr": "401e37",
            "decompiledFuncCode": "int64_t function_401e32(void) {\n    // 0x401e32\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e37",
            "funcStartAddr": "401e37",
            "funcEndAddr": "401e3c",
            "decompiledFuncCode": "int64_t function_401e37(void) {\n    // 0x401e37\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e3c",
            "funcStartAddr": "401e3c",
            "funcEndAddr": "401e41",
            "decompiledFuncCode": "int64_t function_401e3c(void) {\n    // 0x401e3c\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401e41",
            "funcStartAddr": "401e41",
            "funcEndAddr": "401e46",
            "decompiledFuncCode": "int64_t function_401e41(void) {\n    // 0x401e41\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e50",
            "funcStartAddr": "401e50",
            "funcEndAddr": "402363",
            "decompiledFuncCode": "int64_t function_401e50(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x401e56\n    function_403d10(a2);\n    setlocale(LC_ALL, (char *)&g14);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_40b1f0(0x4039d0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    char v2 = 0; // bp-216, 0x401ea8\n    isatty(0);\n    bool v3; // 0x401e50\n    int64_t v4 = v3 ? -1 : 1;\n    int64_t v5 = 1; // 0x401edd\n    int64_t v6 = 0; // 0x401edd\n    int64_t v7; // 0x401e50\n    int64_t v8; // 0x401e50\n    int64_t v9; // 0x401e50\n    int64_t v10; // 0x401e50\n    int64_t v11; // 0x401e50\n    int64_t v12; // 0x401e50\n    char v13; // 0x401e50\n    char v14; // 0x401e50\n    char v15; // 0x401e50\n    while (true) {\n      lab_0x401ee0_2:\n        // 0x401ee0\n        v7 = v6;\n        int64_t v16 = v9;\n        v12 = v5;\n        v15 = v14;\n        int32_t v17 = function_4093f0(v1, a2, \"dfirvIR\", &g4, 0, v16);\n        v10 = v16;\n        switch (v17) {\n            case -1: {\n                goto lab_0x40212a;\n            }\n            case 105: {\n                goto lab_0x402040;\n            }\n            default: {\n                if (v17 > 105) {\n                    // 0x401f0c\n                    v13 = v15;\n                    v5 = v12;\n                    v8 = v16;\n                    v6 = v7;\n                    if (v17 == 129) {\n                        goto lab_0x401ee0;\n                    } else {\n                        if (v17 > 129) {\n                            // 0x401f1d\n                            v13 = v15;\n                            v5 = 1;\n                            v8 = v16;\n                            v6 = v7;\n                            if (v17 != 131) {\n                                if (v17 < 131) {\n                                    int64_t v18 = 19; // 0x401f40\n                                    int64_t v19 = *(int64_t *)(a2 - 8 + 8 * (int64_t)*(int32_t *)0x6102fc);\n                                    int64_t v20 = (int64_t)\"--no-preserve-root\";\n                                    unsigned char v21 = *(char *)v19; // 0x401f40\n                                    char v22 = *(char *)v20; // 0x401f40\n                                    char v23 = v22; // 0x401f40\n                                    bool v24 = false; // 0x401f40\n                                    while (v21 == v22) {\n                                        v18--;\n                                        int64_t v25 = v20 + v4; // 0x401f40\n                                        int64_t v26 = v19 + v4; // 0x401f40\n                                        v23 = v21;\n                                        v24 = true;\n                                        if (v18 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v19 = v26;\n                                        v20 = v25;\n                                        v21 = *(char *)v19;\n                                        v22 = *(char *)v20;\n                                        v23 = v22;\n                                        v24 = false;\n                                    }\n                                    unsigned char v27 = v23;\n                                    v13 = v15;\n                                    v5 = 0;\n                                    v8 = v16;\n                                    v6 = v7;\n                                    if ((v21 >= v27 && !v24) != v21 < v27) {\n                                        goto lab_0x40231d;\n                                    }\n                                } else {\n                                    // 0x401f90\n                                    v13 = v15;\n                                    v5 = v12;\n                                    v8 = v16;\n                                    v6 = v7;\n                                    if (v17 != 132) {\n                                        goto lab_0x401fb1_3;\n                                    }\n                                }\n                            }\n                            goto lab_0x401ee0;\n                        } else {\n                            // 0x401fd8\n                            v13 = v15;\n                            v5 = v12;\n                            v8 = v16;\n                            v6 = v7;\n                            if (v17 == 118) {\n                                goto lab_0x401ee0;\n                            } else {\n                                if (v17 != 128) {\n                                    // 0x401fa8\n                                    v13 = 1;\n                                    v5 = v12;\n                                    v8 = v16;\n                                    v6 = v7;\n                                    if (v17 != 114) {\n                                        goto lab_0x401fb1_3;\n                                    }\n                                    goto lab_0x401ee0;\n                                } else {\n                                    // 0x401fe8\n                                    v10 = v16;\n                                    if (g57 == 0) {\n                                        goto lab_0x402040;\n                                    } else {\n                                        int64_t v28 = function_403900(\"--interactive\", g57, g3, (int64_t *)&g2, 4, g23); // 0x402010\n                                        int32_t v29 = *(int32_t *)(4 * v28 + (int64_t)&g2); // 0x402015\n                                        v13 = v15;\n                                        v5 = v12;\n                                        v8 = g23;\n                                        v6 = 0;\n                                        v11 = g23;\n                                        switch (v29) {\n                                            case 1: {\n                                                goto lab_0x4020e0;\n                                            }\n                                            case 0: {\n                                                goto lab_0x401ee0;\n                                            }\n                                            default: {\n                                                // 0x40202d\n                                                v13 = v15;\n                                                v5 = v12;\n                                                v8 = g23;\n                                                v6 = v7;\n                                                v10 = g23;\n                                                if (v29 != 2) {\n                                                    goto lab_0x401ee0;\n                                                } else {\n                                                    goto lab_0x402040;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // 0x401f58\n                    v11 = v16;\n                    if (v17 == 73) {\n                        goto lab_0x4020e0;\n                    } else {\n                        if (v17 <= 73) {\n                            if (v17 == -131) {\n                                struct _IO_FILE * v30 = g34; // 0x40207b\n                                char (*v31)[5] = g22; // 0x402084\n                                function_405e00((int64_t)v30, \"rm\", \"GNU coreutils\", (int64_t)v31, \"Paul Rubin\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v17 == -130) {\n                                // 0x4020c8\n                                function_402450(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x401fb1_3;\n                        }\n                        // 0x401f67\n                        v13 = v15;\n                        v5 = v12;\n                        v8 = v16;\n                        v6 = v7;\n                        if (v17 != 100) {\n                            if (v17 != 102) {\n                                // 0x402058\n                                v13 = 1;\n                                v5 = v12;\n                                v8 = v16;\n                                v6 = v7;\n                                if (v17 != 82) {\n                                    goto lab_0x401fb1_3;\n                                }\n                            } else {\n                                // 0x401f79\n                                v2 = 1;\n                                v13 = v15;\n                                v5 = v12;\n                                v8 = v16;\n                                v6 = 0;\n                            }\n                        }\n                        goto lab_0x401ee0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40212a:;\n    int64_t v32 = g32;\n    int64_t v33; // 0x401e50\n    int64_t v34; // 0x401e50\n    char * v35; // 0x401e50\n    char * format; // 0x40234b\n    if (v1 > v32) {\n        // 0x402137\n        v33 = v32;\n        if (v15 != 0 == (v12 != 0)) {\n            // 0x4022c6\n            if (function_405950(&g40) == 0) {\n                // 0x4022de\n                function_4056e0(4, (int64_t)\"/\");\n                error(1, *__errno_location(), dcgettext(NULL, \"failed to get attributes of %s\", 5));\n              lab_0x40231d:\n                // 0x40231d\n                error(1, (int32_t)\"you may not abbreviate the --no-preserve-root option\" ^ (int32_t)\"you may not abbreviate the --no-preserve-root option\", dcgettext(NULL, \"you may not abbreviate the --no-preserve-root option\", 5));\n                // 0x40233f\n                format = dcgettext(NULL, \"missing operand\", 5);\n                error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n                // 0x4022bc\n                function_402450(1);\n                // UNREACHABLE\n            }\n            // 0x4022c6\n            v33 = g32;\n        }\n        // 0x402146\n        v34 = v33;\n        if (v7 == 0) {\n            goto lab_0x4021b4;\n        } else {\n            uint64_t v36 = 0x100000000 * (a1 - v33) >> 32; // 0x40215f\n            if (v15 != 0) {\n                // 0x402215\n                v35 = dcngettext(NULL, \"%s: remove %lu argument recursively? \", \"%s: remove %lu arguments recursively? \", (int32_t)v36, 5);\n                goto lab_0x402192;\n            } else {\n                // 0x402168\n                if (v36 < 4) {\n                    goto lab_0x4021b4;\n                } else {\n                    // 0x40216e\n                    v35 = dcngettext(NULL, \"%s: remove %lu argument? \", \"%s: remove %lu arguments? \", (int32_t)v36, 5);\n                    goto lab_0x402192;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4021e9;\n    }\n  lab_0x401fb1_3:;\n    int64_t v37; // 0x401e50\n    if (v1 > 1) {\n        // 0x401fbf\n        v37 = 1;\n        goto lab_0x401fbf_2;\n    } else {\n        goto lab_0x4022bc;\n    }\n  lab_0x402040:\n    // 0x402040\n    v2 = 0;\n    v13 = v15;\n    v5 = v12;\n    v8 = v10;\n    v6 = 0;\n    goto lab_0x401ee0;\n  lab_0x401ee0:\n    // 0x401ee0\n    v14 = v13;\n    v9 = v8;\n    goto lab_0x401ee0_2;\n  lab_0x4020e0:\n    // 0x4020e0\n    v2 = 0;\n    v13 = v15;\n    v5 = v12;\n    v8 = v11;\n    v6 = 1;\n    goto lab_0x401ee0;\n  lab_0x4021e9:\n    // 0x4021e9\n    if (v2 != 0) {\n        // 0x4021f5\n        return 0;\n    }\n    // 0x40233f\n    format = dcgettext(NULL, \"missing operand\", 5);\n    error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n  lab_0x4022bc:\n    // 0x4022bc\n    function_402450(1);\n    // UNREACHABLE\n  lab_0x4021b4:;\n    int64_t v38 = function_402f50(8 * v33 + a2, (int64_t *)&v2, v34); // 0x4021ba\n    int32_t v39 = v38; // 0x4021bf\n    if (v39 < 5) {\n        // 0x4021f5\n        return v39 == 4;\n    }\n    // 0x4021d0\n    __assert_fail(\"VALID_STATUS (status)\", \"src/rm.c\", 355, \"main\");\n    goto lab_0x4021e9;\n  lab_0x402192:\n    // 0x402192\n    __fprintf_chk(g37, 1, v35);\n    v34 = (int64_t)v35;\n    if ((char)function_406290() == 0) {\n        // 0x4021f5\n        return 0;\n    }\n    goto lab_0x4021b4;\n  lab_0x401fbf_2:;\n    int64_t v40 = *(int64_t *)(8 * v37 + a2); // 0x401fbf\n    char * v41 = (char *)v40; // 0x401fc4\n    if (*v41 == 45) {\n        // 0x40223e\n        if (*(char *)(v40 + 1) == 0) {\n            goto lab_0x401fcf;\n        } else {\n            // 0x402249\n            int64_t v42; // bp-184, 0x401e50\n            if (__lxstat(1, v41, (struct stat *)&v42) != 0) {\n                goto lab_0x401fcf;\n            } else {\n                // 0x402263\n                function_4056e0(4, v40);\n                function_405600(1, 3, v40);\n                __fprintf_chk(g37, 1, dcgettext(NULL, \"Try '%s ./%s' to remove the file %s.\\n\", 5));\n                goto lab_0x4022bc;\n            }\n        }\n    } else {\n        goto lab_0x401fcf;\n    }\n  lab_0x401fcf:;\n    int64_t v43 = v37 + 1; // 0x401fcf\n    v37 = v43;\n    if (v1 > v43) {\n        goto lab_0x401fbf_2;\n    } else {\n        goto lab_0x4022bc;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402370",
            "funcEndAddr": "40239b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402370\n    int64_t v1; // 0x402370\n    __libc_start_main(0x401e50, (int32_t)a4, (char **)&v1, (void (*)())0x40b180, (void (*)())0x40b1e0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40239b",
            "funcStartAddr": "40239b",
            "funcEndAddr": "4023ba",
            "decompiledFuncCode": "int64_t function_40239b(void) {\n    // 0x40239b\n    return &g33;\n}\n"
        },
        {
            "funcName": "function_4023ba",
            "funcStartAddr": "4023ba",
            "funcEndAddr": "4023f1",
            "decompiledFuncCode": "int64_t function_4023ba(void) {\n    // 0x4023ba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4023f1",
            "funcStartAddr": "4023f1",
            "funcEndAddr": "402448",
            "decompiledFuncCode": "int64_t function_4023f1(void) {\n    // 0x4023f1\n    if (g38 != 0) {\n        // 0x402447\n        int64_t result; // 0x4023f1\n        return result;\n    }\n    int64_t v1 = g39; // 0x402424\n    int64_t result2; // 0x402436\n    if (g39 >= ((int64_t)&g19 - (int64_t)&g18 >> 3) - 1) {\n        // 0x402436\n        result2 = function_40239b();\n        g38 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g19 - (int64_t)&g18 >> 3) - 1) {\n        // 0x402426\n        v1++;\n    }\n    // 0x40241a\n    g39 = v1;\n    // 0x402436\n    result2 = function_40239b();\n    g38 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402448",
            "funcStartAddr": "402448",
            "funcEndAddr": "40244d",
            "decompiledFuncCode": "int64_t function_402448(void) {\n    // 0x402448\n    return function_4023ba();\n}\n"
        },
        {
            "funcName": "function_402450",
            "funcStartAddr": "402450",
            "funcEndAddr": "40281d",
            "decompiledFuncCode": "int64_t function_402450(int32_t status) {\n    // 0x402450\n    if (status != 0) {\n        // 0x40246a\n        __fprintf_chk(g37, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40248f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402496\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Remove (unlink) the FILE(s).\\n\\n  -f, --force           ignore nonexistent files and arguments, never prompt\\n  -i                    prompt before every removal\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"  -I                    prompt once before removing more than three files, or\\n                          when removing recursively; less intrusive than -i,\\n                          while still giving protection against most mistakes\\n      --interactive[=WHEN]  prompt according to WHEN: never, once (-I), or\\n                          always (-i); without WHEN, prompt always\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --one-file-system  when removing a hierarchy recursively, skip any\\n                          directory that is on a file system different from\\n                          that of the corresponding command line argument\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --no-preserve-root  do not treat '/' specially\\n      --preserve-root   do not remove '/' (default)\\n  -r, -R, --recursive   remove directories and their contents recursively\\n  -d, --dir             remove empty directories\\n  -v, --verbose         explain what is being done\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"\\nBy default, rm does not remove directories.  Use the --recursive (-r or -R)\\noption to remove each listed directory, too, along with all of its contents.\\n\", 5), g34);\n    __printf_chk(1, dcgettext(NULL, \"\\nTo remove a file whose name starts with a '-', for example '-foo',\\nuse one of these commands:\\n  %s -- -foo\\n\\n  %s ./-foo\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nNote that if you use rm to remove a file, it might be possible to recover\\nsome of its contents, given sufficient expertise and/or time.  For greater\\nassurance that the contents are truly unrecoverable, consider using shred.\\n\", 5), g34);\n    int64_t v1 = &g1; // bp-136, 0x4025f9\n    bool v2; // 0x402450\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402680\n    int64_t v6 = *(int64_t *)v5; // 0x402684\n    int64_t v7 = 3; // 0x40268a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"rm\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402696\n        char v11 = *(char *)v9; // 0x402696\n        char v12 = v11; // 0x402696\n        bool v13 = false; // 0x402696\n        while (v10 == v11) {\n            // 0x40268c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402696\n            int64_t v15 = v8 + v3; // 0x402696\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4026a2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x4026a2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4027b4;\n        } else {\n            // 0x40279e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4027f3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402704;\n            } else {\n                goto lab_0x4027b4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402704;\n        } else {\n            // 0x4026ea\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4027f3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402704;\n            } else {\n                goto lab_0x402704;\n            }\n        }\n    }\n  lab_0x4027b4:\n    // 0x4027b4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402744\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40248f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402704:\n    // 0x402704\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402744\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40248f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402820",
            "funcStartAddr": "402820",
            "funcEndAddr": "402a29",
            "decompiledFuncCode": "int64_t function_402820(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t * path = (int64_t *)(a2 + 48); // 0x40283d\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x402841\n    int32_t fd = *v1; // 0x402841\n    if (unlinkat(fd, (char *)*path, 512 * (int32_t)((char)a4 != 0)) == 0) {\n        // 0x402960\n        if (*(char *)(a3 + 25) == 0) {\n            // 0x4028ff\n            return 2;\n        }\n        // 0x40296d\n        function_4056e0(4, *(int64_t *)(a2 + 56));\n        char * v2; // 0x402820\n        if ((char)a4 == 0) {\n            // 0x4029f8\n            v2 = dcgettext(NULL, \"removed %s\\n\", 5);\n        } else {\n            // 0x402988\n            v2 = dcgettext(NULL, \"removed directory %s\\n\", 5);\n        }\n        // 0x402997\n        __printf_chk(1, v2);\n        return 2;\n    }\n    int32_t * err_num = __errno_location(); // 0x402857\n    uint32_t v3 = *err_num; // 0x40285c\n    if (v3 == 30) {\n        // 0x4029c0\n        int64_t v4; // bp-184, 0x402820\n        if (__fxstatat(1, *v1, (char *)*path, (struct stat *)&v4, 256) != 0) {\n            // 0x4029de\n            if (*err_num == 2) {\n                // 0x4028ff\n                return 2;\n            }\n        }\n        // 0x4029e7\n        *err_num = 30;\n        goto lab_0x40289a;\n    } else {\n        if ((char)v3 == 0) {\n            goto lab_0x40288f;\n        } else {\n            // 0x402871\n            if (v3 == 20) {\n                // 0x4028ff\n                return 2;\n            }\n            if (v3 > 20) {\n                // 0x402885\n                switch (v3) {\n                    case 22: {\n                    }\n                    case 84: {\n                        // 0x4028ff\n                        return 2;\n                    }\n                }\n                goto lab_0x40288f;\n            } else {\n                // 0x402910\n                if (v3 == 2) {\n                    // 0x4028ff\n                    return 2;\n                }\n                // 0x402915\n                if (v3 < 40 == *(int16_t *)(a2 + 112) == 4) {\n                    goto lab_0x402929;\n                } else {\n                    goto lab_0x40289a;\n                }\n            }\n        }\n    }\n  lab_0x40289a:\n    // 0x40289a\n    function_4056e0(4, *(int64_t *)(a2 + 56));\n    error(0, *err_num, dcgettext(NULL, \"cannot remove %s\", 5));\n    int64_t v5 = *(int64_t *)(a2 + 8); // 0x4028cf\n    if (*(int64_t *)(v5 + 88) < 0) {\n        // 0x4028ff\n        return 4;\n    }\n    int64_t v6 = v5; // 0x4028d8\n    int64_t * v7 = (int64_t *)(v6 + 32); // 0x4028f3\n    while (*v7 == 0) {\n        // 0x4028e0\n        *v7 = 1;\n        int64_t v8 = *(int64_t *)(v6 + 8); // 0x4028e8\n        v6 = v8;\n        if (*(int64_t *)(v8 + 88) < 0) {\n            // break -> 0x4028ff\n            break;\n        }\n        v7 = (int64_t *)(v6 + 32);\n    }\n    // 0x4028ff\n    return 4;\n  lab_0x40288f:\n    // 0x40288f\n    if (v3 < 40 == *(int16_t *)(a2 + 112) == 4) {\n        goto lab_0x402929;\n    } else {\n        goto lab_0x40289a;\n    }\n  lab_0x402929:\n    if ((1 << (int64_t)(v3 % 64) & 0x8000320000) != 0) {\n        int32_t v9 = *(int32_t *)(a2 + 64); // 0x40293d\n        if (v9 != 1 != v9 != 13) {\n            // 0x40294e\n            *err_num = v9;\n        }\n    }\n    goto lab_0x40289a;\n}\n"
        },
        {
            "funcName": "function_402a30",
            "funcStartAddr": "402a30",
            "funcEndAddr": "402aa0",
            "decompiledFuncCode": "int64_t function_402a30(int32_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 48); // 0x402a31\n    int64_t v3 = *v2; // 0x402a31\n    int64_t v4 = v3; // 0x402a3c\n    if (v3 == -1) {\n        // 0x402a50\n        if (__fxstatat(1, a1, (char *)a2, (struct stat *)a3, 256) != 0) {\n            // 0x402a6c\n            *v2 = -2;\n            int32_t * v5 = __errno_location(); // 0x402a74\n            int32_t v6 = *v5; // 0x402a79\n            *(int64_t *)(v1 + 8) = (int64_t)v6;\n            // 0x402a83\n            *v5 = v6;\n            return 0xffffffff;\n        }\n        // 0x402a90\n        v4 = *v2;\n    }\n    // 0x402a3e\n    if (v4 >= 0) {\n        // 0x402a43\n        return 0;\n    }\n    // 0x402a83\n    *__errno_location() = *(int32_t *)(v1 + 8);\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_402aa0",
            "funcStartAddr": "402aa0",
            "funcEndAddr": "402f42",
            "decompiledFuncCode": "int64_t function_402aa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402aa0\n    int64_t v1; // 0x402aa0\n    int64_t v2 = v1;\n    int32_t fd = *(int32_t *)(a1 + 44); // 0x402ab7\n    int64_t v3 = *(int64_t *)(a2 + 56); // 0x402aba\n    int64_t path = *(int64_t *)(a2 + 48); // 0x402ac3\n    struct dirent * v4; // 0x402aa0\n    int64_t v5; // 0x402aa0\n    int64_t v6; // 0x402aa0\n    struct __dirstream * dirp; // 0x402b0f\n    if (a6 == 0) {\n        // 0x402d30\n        v6 = v2 + (int64_t)((char)a3 == 0) + (v2 ^ 7) & 4;\n        v5 = (char)a3 != 0 ? 0 : a3 & 0xffffffff;\n    } else {\n        int32_t * v7 = (int32_t *)(int64_t)a6; // 0x402ad9\n        *v7 = 2;\n        uint32_t fd2 = openat(fd, (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY | O_NOFOLLOW); // 0x402b00\n        int32_t v8 = 3; // 0x402b07\n        int64_t v9 = 0; // 0x402b07\n        if (fd2 >= 0) {\n            // 0x402b09\n            dirp = fdopendir(fd2);\n            if (dirp == NULL) {\n                // 0x402ea0\n                close(fd2);\n                v8 = 3;\n                v9 = 0;\n            } else {\n                int32_t * v10 = __errno_location(); // 0x402b24\n                *v10 = 0;\n                struct dirent * v11 = readdir(dirp); // 0x402b37\n                v4 = v11;\n                if (v11 == NULL) {\n                  lab_0x402df8:;\n                    int32_t v12 = *(int32_t *)(0x100000000 * (int64_t)v10 >> 32); // 0x402e00\n                    closedir(dirp);\n                    v8 = v12 != 0 ? 3 : 4;\n                    v9 = v12 == 0;\n                } else {\n                    while (true) {\n                      lab_0x402b45:;\n                        int64_t v13 = (int64_t)v4;\n                        if (*(char *)(v13 + 19) != 46) {\n                            // break -> 0x402b4f\n                            break;\n                        }\n                        int64_t v14 = v13 + 20; // 0x402dd2\n                        char v15 = *(char *)(v14 + (int64_t)(*(char *)v14 == 46)); // 0x402dd9\n                        switch (v15) {\n                            case 0: {\n                                goto lab_0x402b34;\n                            }\n                            case 47: {\n                                goto lab_0x402b34;\n                            }\n                            default: {\n                                goto lab_0x402b4f;\n                            }\n                        }\n                    }\n                  lab_0x402b4f:\n                    // 0x402b4f\n                    closedir(dirp);\n                    v8 = 3;\n                    v9 = 0;\n                }\n            }\n        }\n        // 0x402b5f\n        *v7 = v8;\n        v6 = 4 * (int64_t)((char)a3 != 0);\n        v5 = v9;\n    }\n    // 0x402b63\n    if (*(int64_t *)(a2 + 32) != 0) {\n        // 0x402c85\n        return 3;\n    }\n    int32_t * v16 = (int32_t *)(a4 + 4); // 0x402b6e\n    int32_t v17 = *v16; // 0x402b6e\n    if (v17 == 5) {\n        // 0x402c85\n        return 2;\n    }\n    int32_t v18 = v17; // 0x402b7e\n    int32_t v19; // 0x402aa0\n    int64_t v20; // 0x402aa0\n    int64_t v21; // bp-200, 0x402aa0\n    int32_t v22; // 0x402aa0\n    if (*(char *)&v20 != 0) {\n        goto lab_0x402cb3;\n    } else {\n        if (v17 != 3) {\n            // 0x402b89\n            if (*(char *)(a4 + 24) == 0) {\n                // 0x402c85\n                return 2;\n            }\n        }\n        // 0x402b93\n        if ((char)function_405f40() != 0) {\n            // 0x402cb0\n            v18 = *v16;\n            goto lab_0x402cb3;\n        } else {\n            // 0x402ba0\n            if ((int32_t)function_402a30(fd, path, &v21) != 0) {\n                goto lab_0x402e80;\n            } else {\n                int32_t v23; // 0x402aa0\n                if ((v23 & 0xf000) == 0xa000) {\n                    // 0x402cb0\n                    v18 = *v16;\n                    goto lab_0x402cb3;\n                } else {\n                    // 0x402bd0\n                    if (faccessat(fd, (char *)path, W_OK, AT_REMOVEDIR) == 0) {\n                        // 0x402cb0\n                        v18 = *v16;\n                        goto lab_0x402cb3;\n                    } else {\n                        int32_t v24 = *__errno_location(); // 0x402bf3\n                        v22 = 1;\n                        v19 = v24;\n                        if (v24 != 13) {\n                            goto lab_0x402e88;\n                        } else {\n                            goto lab_0x402cbb;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402b34:;\n    struct dirent * v25 = readdir(dirp); // 0x402b37\n    v4 = v25;\n    if (v25 == NULL) {\n        goto lab_0x402df8;\n    }\n    goto lab_0x402b45;\n  lab_0x402cb3:\n    // 0x402cb3\n    v22 = 0;\n    if (v18 != 3) {\n        // 0x402c85\n        return 2;\n    }\n    goto lab_0x402cbb;\n  lab_0x402cbb:;\n    int32_t v26 = v6; // 0x402cbb\n    if (v26 == 0) {\n        // 0x402e30\n        if ((int32_t)function_402a30(fd, path, &v21) != 0) {\n            goto lab_0x402e80;\n        } else {\n            int32_t v27; // 0x402aa0\n            switch ((int16_t)v27 & -0x1000) {\n                case -0x6000: {\n                    // 0x402ee8\n                    if (*v16 != 3) {\n                        // 0x402c85\n                        return 2;\n                    }\n                    // 0x402e67\n                    function_4056e0(4, v3);\n                    goto lab_0x402c15;\n                }\n                case 0x4000: {\n                    goto lab_0x402ccc;\n                }\n                default: {\n                    // 0x402e67\n                    function_4056e0(4, v3);\n                    goto lab_0x402c15;\n                }\n            }\n        }\n    } else {\n        if (v26 != 4) {\n            // 0x402e67\n            function_4056e0(4, v3);\n            goto lab_0x402c15;\n        } else {\n            goto lab_0x402ccc;\n        }\n    }\n  lab_0x402e80:\n    // 0x402e80\n    v19 = *__errno_location();\n    goto lab_0x402e88;\n  lab_0x402ccc:;\n    // 0x402ccc\n    int32_t err_num; // 0x402aa0\n    if (*(char *)(a4 + 9) != 0) {\n        // 0x402d60\n        function_4056e0(4, v3);\n        if ((int32_t)a5 != 2) {\n            goto lab_0x402c15;\n        } else {\n            if ((char)v5 != 0) {\n                goto lab_0x402c15;\n            } else {\n                char * v29; // 0x402aa0\n                if (v22 != 0) {\n                    // 0x402ed0\n                    v29 = dcgettext(NULL, \"%s: descend into write-protected directory %s? \", 5);\n                } else {\n                    // 0x402d9b\n                    v29 = dcgettext(NULL, \"%s: descend into directory %s? \", 5);\n                }\n                // 0x402daa\n                __fprintf_chk(g37, 1, v29);\n                goto lab_0x402c77;\n            }\n        }\n    } else {\n        // 0x402cd6\n        if (*(char *)(a4 + 10) == 0) {\n            // 0x402ce5\n            function_4056e0(4, v3);\n            err_num = 21;\n            goto lab_0x402cfd;\n        } else {\n            if ((char)v5 != 0) {\n                // 0x402e67\n                function_4056e0(4, v3);\n                goto lab_0x402c15;\n            } else {\n                // 0x402ce5\n                function_4056e0(4, v3);\n                err_num = 21;\n                goto lab_0x402cfd;\n            }\n        }\n    }\n  lab_0x402e88:\n    // 0x402e88\n    function_4056e0(4, v3);\n    err_num = v19;\n    goto lab_0x402cfd;\n  lab_0x402c15:\n    // 0x402c15\n    if ((int32_t)function_402a30(fd, path, &v21) != 0) {\n        // 0x402f00\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot remove %s\", 5));\n        // 0x402c85\n        return 4;\n    }\n    // 0x402c2c\n    function_403c20(&v21);\n    char * v28; // 0x402aa0\n    if (v22 != 0) {\n        // 0x402eb8\n        v28 = dcgettext(NULL, \"%s: remove write-protected %s %s? \", 5);\n    } else {\n        // 0x402c4c\n        v28 = dcgettext(NULL, \"%s: remove %s %s? \", 5);\n    }\n    // 0x402c58\n    __fprintf_chk(g37, 1, v28);\n    goto lab_0x402c77;\n  lab_0x402cfd:\n    // 0x402cfd\n    error(0, err_num, dcgettext(NULL, \"cannot remove %s\", 5));\n    // 0x402c85\n    return 4;\n  lab_0x402c77:\n    // 0x402c77\n    if ((char)function_406290() == 0) {\n        // 0x402c85\n        return 3;\n    }\n    // 0x402c85\n    return 2;\n}\n"
        },
        {
            "funcName": "function_402f50",
            "funcStartAddr": "402f50",
            "funcEndAddr": "403626",
            "decompiledFuncCode": "int64_t function_402f50(int64_t a1, int64_t * a2, int64_t a3) {\n    // 0x402f50\n    if (a1 == 0) {\n        // 0x40304a\n        return 2;\n    }\n    int64_t v1 = (int64_t)a2;\n    char * v2 = (char *)(v1 + 8); // 0x402f68\n    int64_t v3 = *v2 == 0 ? 536 : 600; // 0x402f7c\n    int64_t v4 = function_406210(a1, (int32_t)v3); // 0x402f82\n    int64_t v5 = fts_read(v4); // 0x402f93\n    g58 = v5;\n    int64_t v6 = 2; // 0x402f9e\n    if (v5 == 0) {\n      lab_0x403028_2:;\n        int32_t * err_num = __errno_location(); // 0x403028\n        if (*err_num != 0) {\n            // 0x403480\n            error(0, *err_num, dcgettext(NULL, \"fts_read failed\", 5));\n            if ((int32_t)fts_close(v4) == 0) {\n                // 0x40304a\n                return 4;\n            }\n        } else {\n            // 0x40303a\n            if ((int32_t)fts_close(v4) == 0) {\n                // 0x40304a\n                return v6 & 0xffffffff;\n            }\n        }\n        // 0x4034b5\n        error(0, *err_num, dcgettext(NULL, \"fts_close failed\", 5));\n        // 0x40304a\n        return 4;\n    }\n    char * v7 = (char *)(v1 + 10);\n    bool v8; // 0x402f50\n    int64_t v9 = v8 ? -1 : 1;\n    int32_t v10; // bp-60, 0x402f50\n    int32_t v11 = &v10;\n    int64_t v12 = v5; // 0x402f93\n    int64_t v13 = 2;\n    int64_t v14 = v3; // 0x402f50\n    struct dirent * v15; // 0x402f50\n    int64_t v16; // 0x402f50\n    int64_t v17; // 0x402f50\n    int64_t v18; // 0x402f50\n    int64_t v19; // 0x402f50\n    int64_t v20; // 0x402f50\n    int64_t v21; // 0x402f50\n    int64_t v22; // 0x402f50\n    int64_t v23; // 0x402f50\n    int32_t err_num3; // 0x402f50\n    int32_t err_num2; // 0x402f50\n    char * format; // 0x402f50\n    int16_t v24; // 0x402fa4\n    int64_t path; // 0x40313e\n    struct __dirstream * dirp; // 0x40315a\n    int32_t * v25; // 0x40316b\n    while (true) {\n      lab_0x402fa4_2:\n        // 0x402fa4\n        v16 = v12;\n        v20 = v12;\n        v22 = v14;\n        v18 = v13;\n        while (true) {\n          lab_0x402fa4:\n            // 0x402fa4\n            v19 = v18;\n            v21 = v20;\n            switch (v16) {\n                case 1: {\n                    // 0x403128\n                    v23 = v22;\n                    if (*(char *)(v1 + 9) != 0) {\n                        goto lab_0x4031c0;\n                    } else {\n                        // 0x403133\n                        if (*v7 == 0) {\n                            // 0x4032d0\n                            err_num3 = 21;\n                            goto lab_0x4032d6;\n                        } else {\n                            // 0x40313e\n                            path = *(int64_t *)(v21 + 48);\n                            int32_t fd = openat(*(int32_t *)(v4 + 44), (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY | O_NOFOLLOW); // 0x40314c\n                            if (fd < 0) {\n                                goto lab_0x403198;\n                            } else {\n                                // 0x403158\n                                dirp = fdopendir(fd);\n                                if (dirp == NULL) {\n                                    // 0x40355b\n                                    close(fd);\n                                    goto lab_0x403198;\n                                } else {\n                                    // 0x40316b\n                                    v25 = __errno_location();\n                                    *v25 = 0;\n                                    struct dirent * v26 = readdir(dirp); // 0x40317c\n                                    v15 = v26;\n                                    if (v26 == NULL) {\n                                        goto lab_0x4031ae;\n                                    } else {\n                                        while (true) {\n                                          lab_0x403186:;\n                                            int64_t v27 = (int64_t)v15;\n                                            if (*(char *)(v27 + 19) != 46) {\n                                                // break -> 0x403190\n                                                break;\n                                            }\n                                            int64_t v28 = v27 + 20; // 0x4033d2\n                                            char v29 = *(char *)(v28 + (int64_t)(*(char *)v28 == 46)); // 0x4033d9\n                                            switch (v29) {\n                                                case 0: {\n                                                    goto lab_0x403179;\n                                                }\n                                                case 47: {\n                                                    goto lab_0x403179;\n                                                }\n                                                default: {\n                                                    goto lab_0x403190;\n                                                }\n                                            }\n                                        }\n                                      lab_0x403190:\n                                        // 0x403190\n                                        closedir(dirp);\n                                        goto lab_0x403198;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                case 2: {\n                    // 0x4030f0\n                    function_4057b0(0, 3, *(int64_t *)(v21 + 56));\n                    err_num2 = (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\" ^ (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\";\n                    format = dcgettext(NULL, \"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", 5);\n                    goto lab_0x402fed;\n                }\n                case 3: {\n                    goto lab_0x403060;\n                }\n                case 4: {\n                    goto lab_0x403060;\n                }\n                case 6: {\n                    goto lab_0x403060;\n                }\n                case 7: {\n                    // 0x402fc0\n                    function_4057b0(0, 3, *(int64_t *)(v21 + 56));\n                    char * v30 = dcgettext(NULL, \"traversal failed: %s\", 5); // 0x402fdf\n                    err_num2 = *(int32_t *)(v21 + 64);\n                    format = v30;\n                    goto lab_0x402fed;\n                }\n                case 8: {\n                    goto lab_0x403060;\n                }\n                case 10: {\n                    goto lab_0x403060;\n                }\n                case 11: {\n                    goto lab_0x403060;\n                }\n                case 12: {\n                    goto lab_0x403060;\n                }\n                case 13: {\n                    goto lab_0x403060;\n                }\n                default: {\n                    goto lab_0x403568;\n                }\n            }\n        }\n      lab_0x403060:\n        // 0x403060\n        v24 = *(int16_t *)(v21 + 112);\n        if (v24 != 6) {\n            goto lab_0x403088;\n        } else {\n            // 0x403066\n            if (*v2 == 0) {\n                goto lab_0x403088;\n            } else {\n                // 0x40306d\n                if (*(int64_t *)(v21 + 88) < 1) {\n                    goto lab_0x403088;\n                } else {\n                    // 0x403074\n                    if (*(int64_t *)(v21 + 120) != *(int64_t *)(v4 + 24)) {\n                        int64_t v31 = *(int64_t *)(v21 + 8); // 0x4034e0\n                        int64_t v32 = v31; // 0x4034e9\n                        if (*(int64_t *)(v31 + 88) >= 0) {\n                            int64_t v33 = v32;\n                            int64_t * v34 = (int64_t *)(v33 + 32); // 0x403503\n                            while (*v34 == 0) {\n                                // 0x4034f0\n                                *v34 = 1;\n                                int64_t v35 = *(int64_t *)(v33 + 8); // 0x4034f8\n                                v32 = v35;\n                                if (*(int64_t *)(v35 + 88) < 0) {\n                                    // break -> 0x40350a\n                                    break;\n                                }\n                                v33 = v32;\n                                v34 = (int64_t *)(v33 + 32);\n                            }\n                        }\n                        // 0x40350a\n                        function_4056e0(4, *(int64_t *)(v21 + 56));\n                        error(0, (int32_t)\"skipping %s, since it's on a different device\" ^ (int32_t)\"skipping %s, since it's on a different device\", dcgettext(NULL, \"skipping %s, since it's on a different device\", 5));\n                        v14 = (int32_t)\"skipping %s, since it's on a different device\" ^ (int32_t)\"skipping %s, since it's on a different device\";\n                        v17 = 4;\n                        goto lab_0x402f90;\n                    } else {\n                        goto lab_0x403088;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x403568:\n    // 0x403568\n    function_4057b0(0, 3, *(int64_t *)(v21 + 56));\n    error(0, (int32_t)\"unexpected failure: fts_info=%d: %s\\nplease report to %s\" ^ (int32_t)\"unexpected failure: fts_info=%d: %s\\nplease report to %s\", dcgettext(NULL, \"unexpected failure: fts_info=%d: %s\\nplease report to %s\", 5));\n    abort();\n    // UNREACHABLE\n  lab_0x4031f2_4:;\n    int64_t v36 = function_402aa0(v4, v21, 1, v1, 2, v11); // 0x40320b\n    int64_t v37 = v36; // 0x403216\n    if ((int32_t)v36 == 2) {\n        // 0x403280\n        v14 = v21;\n        v17 = v19;\n        if (v10 != 4) {\n            goto lab_0x402f90;\n        } else {\n            int64_t v38 = function_402820(v4, v21, v1, 1); // 0x403299\n            fts_set(v4, v21, 4);\n            fts_read(v4);\n            v14 = v21;\n            v17 = v19;\n            v37 = v38;\n            if ((int32_t)v38 == 2) {\n                goto lab_0x402f90;\n            } else {\n                goto lab_0x403218;\n            }\n        }\n    } else {\n        goto lab_0x403218;\n    }\n  lab_0x4031ae:\n    // 0x4031ae\n    closedir(dirp);\n    v23 = path;\n    if (*v25 != 0) {\n        goto lab_0x403198;\n    } else {\n        goto lab_0x4031c0;\n    }\n  lab_0x403179:;\n    struct dirent * v39 = readdir(dirp); // 0x40317c\n    v15 = v39;\n    if (v39 == NULL) {\n        goto lab_0x4031ae;\n    }\n    goto lab_0x403186;\n  lab_0x4031c0:\n    // 0x4031c0\n    if (*(int64_t *)(v21 + 88) != 0) {\n        goto lab_0x4031f2_4;\n    }\n    int64_t v40 = function_403b90(*(int64_t *)(v21 + 48), v23); // 0x4031cb\n    if (*(char *)v40 == 46) {\n        int64_t v41 = v40 + 1; // 0x40334a\n        char v42 = *(char *)(v41 + (int64_t)(*(char *)v41 == 46)); // 0x403351\n        if (v42 != 0 == (v42 != 47)) {\n            goto lab_0x4031d9;\n        } else {\n            // 0x403362\n            function_405600(2, 4, *(int64_t *)(v21 + 56));\n            function_405600(1, 4, (int64_t)\"..\");\n            function_405600(0, 4, (int64_t)&g5);\n            error(0, (int32_t)\"refusing to remove %s or %s directory: skipping %s\" ^ (int32_t)\"refusing to remove %s or %s directory: skipping %s\", dcgettext(NULL, \"refusing to remove %s or %s directory: skipping %s\", 5));\n            goto lab_0x402ff6;\n        }\n    } else {\n        goto lab_0x4031d9;\n    }\n  lab_0x402fed:\n    // 0x402fed\n    error(0, err_num2, format);\n    goto lab_0x402ff6;\n  lab_0x4031d9:;\n    int64_t v59 = *(int64_t *)(v1 + 16); // 0x4031d9\n    if (v59 == 0) {\n        goto lab_0x4031f2_4;\n    }\n    // 0x4031e2\n    if (*(int64_t *)(v21 + 128) != *(int64_t *)v59) {\n        goto lab_0x4031f2_4;\n    }\n    // 0x4033f8\n    if (*(int64_t *)(v21 + 120) != *(int64_t *)(v59 + 8)) {\n        goto lab_0x4031f2_4;\n    }\n    int64_t * v60 = (int64_t *)(v21 + 56); // 0x403406\n    int64_t v61 = *v60; // 0x403406\n    int64_t v62 = 2; // 0x402f50\n    int64_t v63 = v61;\n    int64_t v64 = (int64_t)\"/\";\n    unsigned char v65 = *(char *)v63; // 0x403417\n    char v66 = *(char *)v64; // 0x403417\n    char v67 = v66; // 0x403417\n    bool v68 = false; // 0x403417\n    while (v65 == v66) {\n        int64_t v69 = v62 - 1; // 0x403417\n        int64_t v70 = v64 + v9; // 0x403417\n        int64_t v71 = v63 + v9; // 0x403417\n        v62 = v69;\n        v67 = v65;\n        v68 = true;\n        if (v69 == 0) {\n            // break -> \n            break;\n        }\n        v63 = v71;\n        v64 = v70;\n        v65 = *(char *)v63;\n        v66 = *(char *)v64;\n        v67 = v66;\n        v68 = false;\n    }\n    unsigned char v72 = v67;\n    if ((v65 >= v72 && !v68) != v65 < v72) {\n        // 0x4035ae\n        function_405600(1, 4, (int64_t)\"/\");\n        function_405600(0, 4, *v60);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n    } else {\n        // 0x403426\n        function_4056e0(4, v61);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n    }\n    // 0x403458\n    error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n    goto lab_0x402ff6;\n  lab_0x402ff6:\n    // 0x402ff6\n    fts_set(v4, v21, 4);\n    fts_read(v4);\n    int64_t v43 = fts_read(v4); // 0x403017\n    v6 = 4;\n    if (v43 == 0) {\n        goto lab_0x403028_2;\n    }\n    // 0x402fa4\n    v16 = g58;\n    v20 = v43;\n    v22 = v21;\n    v18 = 4;\n    goto lab_0x402fa4;\n  lab_0x4032d6:\n    // 0x4032d6\n    function_4056e0(4, *(int64_t *)(v21 + 56));\n    error(0, err_num3, dcgettext(NULL, \"cannot remove %s\", 5));\n    if (*(int64_t *)(*(int64_t *)(v21 + 8) + 88) >= 0) {\n        int64_t v44; // 0x402f50\n        int64_t v45 = v44;\n        int64_t * v46 = (int64_t *)(v45 + 32); // 0x403337\n        int64_t v47 = *v46; // 0x403337\n        while (v47 == 0) {\n            // 0x403320\n            *v46 = 1;\n            int64_t v48 = *(int64_t *)(v45 + 8); // 0x403328\n            int64_t v49 = *(int64_t *)(v48 + 88); // 0x40332c\n            v44 = v48;\n            if (v49 < 0) {\n                // break -> 0x402ff6\n                break;\n            }\n            v45 = v44;\n            v46 = (int64_t *)(v45 + 32);\n            v47 = *v46;\n        }\n    }\n    goto lab_0x402ff6;\n  lab_0x403198:\n    // 0x403198\n    err_num3 = 39;\n    if (*v7 == 0) {\n        // 0x4032d0\n        err_num3 = 21;\n        goto lab_0x4032d6;\n    } else {\n        goto lab_0x4032d6;\n    }\n  lab_0x403088:;\n    int64_t v50 = (v24 - 4 & -3) == 0; // 0x4030a1\n    int64_t v51 = function_402aa0(v4, v21, v50, v1, 3, 0); // 0x4030ab\n    int64_t v52 = v51; // 0x4030b6\n    if ((int32_t)v51 == 2) {\n        // 0x403260\n        v52 = function_402820(v4, v21, v1, v50);\n    }\n    goto lab_0x4030bc;\n  lab_0x4030bc:;\n    int32_t v53 = v52;\n    if (v53 < 5) {\n        // 0x4030c9\n        v14 = v21;\n        v17 = 4;\n        if (v53 != 4) {\n            // 0x4030d3\n            v14 = v21;\n            v17 = v19;\n            if (v53 == 3) {\n                // 0x4030dd\n                v14 = v21;\n                v17 = (int32_t)v19 == 2 ? 3 : v19 & 0xffffffff;\n            }\n        }\n    } else {\n        // 0x403602\n        __assert_fail(\"VALID_STATUS (s)\", \"src/remove.c\", 574, \"rm\");\n        v14 = (int64_t)\"src/remove.c\";\n        v17 = 4;\n    }\n    goto lab_0x402f90;\n  lab_0x402f90:\n    // 0x402f90\n    v13 = v17;\n    v12 = fts_read(v4);\n    g58 = v12;\n    v6 = v13;\n    if (v12 == 0) {\n        goto lab_0x403028_2;\n    }\n    goto lab_0x402fa4_2;\n  lab_0x403218:;\n    int64_t v54 = *(int64_t *)(v21 + 8); // 0x403218\n    int64_t v55 = v54; // 0x403221\n    if (*(int64_t *)(v54 + 88) >= 0) {\n        goto lab_0x40323b;\n    } else {\n        goto lab_0x403242;\n    }\n  lab_0x40323b:;\n    int64_t v56 = v55;\n    int64_t * v57 = (int64_t *)(v56 + 32); // 0x40323b\n    if (*v57 == 0) {\n        // 0x403228\n        *v57 = 1;\n        int64_t v58 = *(int64_t *)(v56 + 8); // 0x403230\n        v55 = v58;\n        if (*(int64_t *)(v58 + 88) < 0) {\n            goto lab_0x403242;\n        } else {\n            goto lab_0x40323b;\n        }\n    } else {\n        goto lab_0x403242;\n    }\n  lab_0x403242:\n    // 0x403242\n    fts_set(v4, v21, 4);\n    fts_read(v4);\n    v52 = v37;\n    goto lab_0x4030bc;\n}\n"
        },
        {
            "funcName": "function_403630",
            "funcStartAddr": "403630",
            "funcEndAddr": "40363a",
            "decompiledFuncCode": "int64_t function_403630(void) {\n    // 0x403630\n    return function_402450(1);\n}\n"
        },
        {
            "funcName": "function_403640",
            "funcStartAddr": "403640",
            "funcEndAddr": "403756",
            "decompiledFuncCode": "int64_t function_403640(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x403661\n    int32_t len = strlen(str); // 0x403661\n    if (a2 == 0) {\n        // 0x40372d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x4036c7\n    int64_t v4 = a3; // 0x403640\n    int64_t v5 = a2; // 0x4036ce\n    int64_t str4; // 0x403640\n    int64_t v6; // 0x403640\n    int32_t v7; // 0x403640\n    int32_t v8; // 0x403640\n    int32_t v9; // 0x403640\n    int64_t v10; // 0x403640\n    int64_t result; // 0x403640\n    int32_t v11; // 0x4036c3\n    char * str2; // 0x4036e2\n    while (true) {\n        // 0x4036d7\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x4036eb\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x40372d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x4036ff\n                break;\n            }\n            // 0x403690\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x40369e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x4036c7\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x403703\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x40370a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x4036d7\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x4036d7\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x4036eb\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x40372d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x4036ff\n                    break;\n                }\n                // 0x403690\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x40369e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x4036c7\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x4036ff\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x403718:\n    // 0x40372d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "4037d1",
            "decompiledFuncCode": "int64_t function_403760(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x403760\n    if (a3 == -1) {\n        // 0x4037c0\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x403775\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x403784\n    function_405910(1, a1);\n    function_405600(0, 8, a2);\n    error(0, 0, format);\n    return &g60;\n}\n"
        },
        {
            "funcName": "function_4037e0",
            "funcStartAddr": "4037e0",
            "funcEndAddr": "4038f8",
            "decompiledFuncCode": "int64_t function_4037e0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40380d\n    fputs_unlocked(v1, g37);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x403880\n        int64_t v5; // 0x403887\n        int64_t v6; // 0x4038a7\n        while (v3 != 0) {\n            // 0x40386b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x403830\n                break;\n            }\n            // 0x40387d\n            v4 = v3 + 1;\n            v5 = function_405930(v2);\n            __fprintf_chk(g37, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x4038b0\n                goto lab_0x4038b0;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x403833\n        int64_t v8 = function_405930(v2); // 0x40383d\n        __fprintf_chk(g37, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40385d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40386b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x403830\n                    break;\n                }\n                // 0x40387d\n                v4 = v3 + 1;\n                v5 = function_405930(v2);\n                __fprintf_chk(g37, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x4038b0\n                    goto lab_0x4038b0;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x403830\n            v7 = v3 + 1;\n            v8 = function_405930(v2);\n            __fprintf_chk(g37, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x4038b0:;\n    int64_t v10 = (int64_t)g37; // 0x4038b0\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x4038b7\n    uint64_t result = *v11; // 0x4038b7\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x4038e0\n        return __overflow(g37, 10);\n    }\n    // 0x4038c1\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403900",
            "funcStartAddr": "403900",
            "funcEndAddr": "403970",
            "decompiledFuncCode": "int64_t function_403900(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_403640(a2, v2, v1, a5); // 0x40392c\n    int64_t result = v3; // 0x403934\n    if (v3 < 0) {\n        // 0x403948\n        function_403760((int64_t)a1, a2, v3);\n        function_4037e0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x403936\n    return result;\n}\n"
        },
        {
            "funcName": "function_403970",
            "funcStartAddr": "403970",
            "funcEndAddr": "4039bd",
            "decompiledFuncCode": "int64_t function_403970(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x403970\n    if (result == 0) {\n        // 0x4039b1\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x4039a8\n    int32_t n = a4; // 0x4039a8\n    int64_t v1 = result; // 0x4039af\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x4039b1\n        return result;\n    }\n    int64_t str3 = str2; // 0x4039af\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x403990\n    int64_t result2 = 0; // 0x40399d\n    while (v2 != 0) {\n        // 0x40399f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x4039b1\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x4039b1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4039c0",
            "funcStartAddr": "4039c0",
            "funcEndAddr": "4039c8",
            "decompiledFuncCode": "int64_t function_4039c0(int64_t a1) {\n    // 0x4039c0\n    g41 = a1;\n    int64_t result; // 0x4039c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4039d0",
            "funcStartAddr": "4039d0",
            "funcEndAddr": "403acd",
            "decompiledFuncCode": "int64_t function_4039d0(int64_t a1, int64_t a2) {\n    int64_t v1 = (int64_t)g35; // 0x4039d4\n    int64_t v2; // 0x4039d0\n    if (function_406340(v1) != 0) {\n        int64_t v3 = function_406370(v1, 0, 1); // 0x403a8a\n        int64_t v4 = (int64_t)g35; // 0x403a8f\n        v2 = v4;\n        if ((int32_t)v3 == 0) {\n            int64_t v5 = function_406300(v4, 0); // 0x403a08\n            int64_t v6 = (int64_t)g35; // 0x403a0d\n            v2 = v6;\n            if ((int32_t)v5 == 0) {\n                goto lab_0x403a9e;\n            } else {\n                // 0x403a1c\n                function_4094f0(v6);\n                goto lab_0x403a28;\n            }\n        } else {\n            goto lab_0x403a9e;\n        }\n    } else {\n        // 0x4039ec\n        if ((int32_t)function_4094f0(v1) == 0) {\n            // 0x4039f8\n            return function_403af0();\n        }\n        goto lab_0x403a28;\n    }\n  lab_0x403a9e:\n    // 0x403a9e\n    if ((int32_t)function_4094f0(v2) == 0) {\n        // 0x403aab\n        return function_403af0();\n    }\n    goto lab_0x403a28;\n  lab_0x403a28:;\n    char * v7 = dcgettext(NULL, \"error closing file\", 5); // 0x403a34\n    int32_t * err_num = __errno_location(); // 0x403a43\n    if (g41 == 0) {\n        // 0x403ab8\n        error(0, *err_num, \"%s\", v7);\n    } else {\n        // 0x403a50\n        error(0, *err_num, \"%s: %s\", (char *)function_405780((int64_t)g41), v7);\n    }\n    // 0x403a6f\n    function_403af0();\n    _exit(g24);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403ad0",
            "funcStartAddr": "403ad0",
            "funcEndAddr": "403ad8",
            "decompiledFuncCode": "int64_t function_403ad0(int64_t a1) {\n    // 0x403ad0\n    g43 = a1;\n    int64_t result; // 0x403ad0\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ae0",
            "funcStartAddr": "403ae0",
            "funcEndAddr": "403ae8",
            "decompiledFuncCode": "int64_t function_403ae0(int64_t a1) {\n    // 0x403ae0\n    g42 = a1;\n    int64_t result; // 0x403ae0\n    return result;\n}\n"
        },
        {
            "funcName": "function_403af0",
            "funcStartAddr": "403af0",
            "funcEndAddr": "403b8e",
            "decompiledFuncCode": "int64_t function_403af0(void) {\n    // 0x403af0\n    int32_t * err_num; // 0x403b06\n    if ((int32_t)function_4094f0((int64_t)g34) == 0) {\n        goto lab_0x403b1c;\n    } else {\n        // 0x403b06\n        err_num = __errno_location();\n        if (g42 == 0) {\n            goto lab_0x403b33;\n        } else {\n            // 0x403b17\n            if (*err_num != 32) {\n                goto lab_0x403b33;\n            } else {\n                goto lab_0x403b1c;\n            }\n        }\n    }\n  lab_0x403b1c:;\n    int64_t result = function_4094f0((int64_t)g37); // 0x403b23\n    if ((int32_t)result == 0) {\n        // 0x403b2c\n        return result;\n    }\n    // 0x403b6e\n    _exit(g24);\n    // UNREACHABLE\n  lab_0x403b33:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x403b3f\n    if (g43 == 0) {\n        // 0x403b79\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403b53\n        error(0, *err_num, \"%s: %s\", (char *)function_405780((int64_t)g43), v1);\n    }\n    // 0x403b6e\n    _exit(g24);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403b90",
            "funcStartAddr": "403b90",
            "funcEndAddr": "403beb",
            "decompiledFuncCode": "int64_t function_403b90(int64_t a1, int64_t a2) {\n    // 0x403b90\n    int64_t v1; // 0x403b90\n    char v2 = v1;\n    int64_t v3 = a1; // 0x403b99\n    int64_t v4 = a1; // 0x403b99\n    char v5 = v2; // 0x403b99\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x403ba4\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x403ba0\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x403bae\n    if (v5 == 0) {\n      lab_0x403bea:\n        // 0x403bea\n        return result;\n    }\n    int64_t v7 = v4; // 0x403bd8\n    int64_t v8 = 0; // 0x403bd8\n    int64_t v9; // 0x403b90\n    int64_t v10; // 0x403bda\n    char v11; // 0x403bde\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x403bd5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x403bda\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x403bd5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x403bca\n    char v14 = *(char *)v13; // 0x403bce\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x403bd5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x403bda\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x403bd5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x403bc0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x403bea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403bf0",
            "funcStartAddr": "403bf0",
            "funcEndAddr": "403c1b",
            "decompiledFuncCode": "int64_t function_403bf0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x403bf4\n    int64_t result = len; // 0x403bf4\n    if (len < 2) {\n        // 0x403c0a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x403c08\n    while (*(char *)(v1 + str) == 47) {\n        // 0x403c10\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x403c0a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x403c0a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403c20",
            "funcStartAddr": "403c20",
            "funcEndAddr": "403d04",
            "decompiledFuncCode": "int64_t function_403c20(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int32_t v2 = *(int32_t *)(v1 + 24); // 0x403c20\n    switch (((v2 & 0xf000) - 0x1000) / 0x1000) {\n        case 7: {\n            // 0x403c80\n            if (*(int64_t *)(v1 + 48) != 0) {\n                // 0x403c98\n                return (int64_t)dcgettext(NULL, \"regular file\", 5);\n            }\n            // break -> 0x403c87\n            break;\n        }\n        case 3: {\n            // 0x403cb8\n            return (int64_t)dcgettext(NULL, \"directory\", 5);\n        }\n        case 9: {\n            // 0x403cd8\n            return (int64_t)dcgettext(NULL, \"symbolic link\", 5);\n        }\n        case 5: {\n            // 0x403ce8\n            return (int64_t)dcgettext(NULL, \"block special file\", 5);\n        }\n        case 1: {\n            // 0x403ca8\n            return (int64_t)dcgettext(NULL, \"character special file\", 5);\n        }\n        case 0: {\n            // 0x403cf8\n            return (int64_t)dcgettext(NULL, \"fifo\", 5);\n        }\n        case 11: {\n            // 0x403cc8\n            return (int64_t)dcgettext(NULL, \"socket\", 5);\n        }\n        default: {\n            // 0x403c6a\n            return (int64_t)dcgettext(NULL, \"weird file\", 5);\n        }\n    }\n    // 0x403c87\n    return (int64_t)dcgettext(NULL, \"regular empty file\", 5);\n}\n"
        },
        {
            "funcName": "function_403d10",
            "funcStartAddr": "403d10",
            "funcEndAddr": "403da9",
            "decompiledFuncCode": "int64_t function_403d10(int64_t str) {\n    // 0x403d10\n    if (str == 0) {\n        // 0x403d89\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g37);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x403d1e\n    int64_t result = (int64_t)found_char_pos; // 0x403d1e\n    if (found_char_pos == NULL) {\n        // 0x403d79\n        g44 = str;\n        g36 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403d28\n    if (v1 - str < 7) {\n        // 0x403d79\n        g44 = str;\n        g36 = str;\n        return result;\n    }\n    // 0x403d38\n    bool v2; // 0x403d10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403d10\n    int64_t v5 = result - 6; // 0x403d10\n    int64_t v6 = 7; // 0x403d46\n    unsigned char v7 = *(char *)v5; // 0x403d46\n    char v8 = *(char *)v4; // 0x403d46\n    char v9 = v8; // 0x403d46\n    bool v10 = false; // 0x403d46\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403d50\n    int64_t v13 = v1; // 0x403d50\n    int64_t v14 = 3; // 0x403d50\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403d79\n        g44 = str;\n        g36 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403d62\n    char v16 = *(char *)v12; // 0x403d62\n    char v17 = v16; // 0x403d62\n    bool v18 = false; // 0x403d62\n    while (v15 == v16) {\n        // 0x403d52\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x403d6c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x403d6e\n        v20 = result + 4;\n        g33 = v20;\n    }\n    // 0x403d79\n    g44 = v20;\n    g36 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403db0",
            "funcStartAddr": "403db0",
            "funcEndAddr": "403ea2",
            "decompiledFuncCode": "int64_t function_403db0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403dc4\n    int64_t result = (int64_t)v1; // 0x403dc4\n    if (result != a1) {\n        // 0x403dd1\n        return result;\n    }\n    int64_t v2 = function_40a9a0(); // 0x403de0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403e96\n    if (v3 == 85) {\n        // 0x403df0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403e88\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g6;\n            return result2;\n        }\n        char v4 = *v1; // 0x403e1e\n        int64_t result3 = v4 != 96 ? (int64_t)&g7 : (int64_t)&g10; // 0x403e2b\n        // 0x403dd1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403e88\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g6;\n        return result2;\n    }\n    char v5 = *v1; // 0x403e6d\n    int64_t result4 = v5 != 96 ? (int64_t)&g8 : (int64_t)&g9; // 0x403e7a\n    // 0x403dd1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403eb0",
            "funcStartAddr": "403eb0",
            "funcEndAddr": "403f07",
            "decompiledFuncCode": "int64_t function_403eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403eb0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403ef8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403f07",
            "funcStartAddr": "403f07",
            "funcEndAddr": "4050d1",
            "decompiledFuncCode": "int64_t function_403f07(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403f51\n    int64_t v3 = 0; // 0x403f51\n    int64_t v4; // 0x403f07\n    int64_t v5; // 0x403f07\n    int64_t v6; // 0x403f07\n    int64_t v7; // 0x403f07\n    int64_t v8; // 0x403f07\n    int64_t v9; // 0x403f07\n    int64_t v10; // 0x403f07\n    int64_t v11; // 0x403f07\n    int64_t v12; // 0x403f07\n    int64_t v13; // 0x403f07\n    int64_t v14; // 0x403f07\n    int64_t v15; // 0x403f07\n    int64_t v16; // 0x403f07\n    int64_t v17; // 0x403f07\n    int64_t v18; // 0x403f07\n    int64_t result; // 0x403f07\n    int64_t v19; // 0x403f07\n    int32_t wc; // bp+132, 0x403f07\n    int64_t ps; // bp+136, 0x403f07\n    char v20; // 0x4044c0\n    int64_t v21; // 0x4044c0\n    int64_t v22; // 0x404868\n    int64_t v23; // 0x403f07\n    int64_t v24; // 0x404887\n    int32_t v25; // 0x403f07\n    while (true) {\n      lab_0x403f58_2:\n        // 0x403f58\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403f07\n        int64_t v27; // 0x403f8c\n        while (true) {\n          lab_0x403f58:\n            // 0x403f58\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403f63\n            if (v15 == -1) {\n                // 0x403f65\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403f73\n            if (v28) {\n                // break (via goto) -> 0x4046d8\n                goto lab_0x4046d8;\n            }\n            // 0x403f7c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g59 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40456b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4040b1;\n                    }\n                    // 0x40498d\n                    v26 = v5 + 1;\n                    goto lab_0x403f58;\n                }\n                case 7: {\n                    goto lab_0x4040b1;\n                }\n                case 8: {\n                    goto lab_0x4040b1;\n                }\n                case 9: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4040b1;\n                }\n                case 12: {\n                    goto lab_0x4040b1;\n                }\n                case 13: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40407d;\n                }\n                case 36: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4040b1;\n                }\n                case 38: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4040b1;\n                }\n                case 44: {\n                    goto lab_0x4040b1;\n                }\n                case 45: {\n                    goto lab_0x4040b1;\n                }\n                case 46: {\n                    goto lab_0x4040b1;\n                }\n                case 47: {\n                    goto lab_0x4040b1;\n                }\n                case 48: {\n                    goto lab_0x4040b1;\n                }\n                case 49: {\n                    goto lab_0x4040b1;\n                }\n                case 50: {\n                    goto lab_0x4040b1;\n                }\n                case 51: {\n                    goto lab_0x4040b1;\n                }\n                case 52: {\n                    goto lab_0x4040b1;\n                }\n                case 53: {\n                    goto lab_0x4040b1;\n                }\n                case 54: {\n                    goto lab_0x4040b1;\n                }\n                case 55: {\n                    goto lab_0x4040b1;\n                }\n                case 56: {\n                    goto lab_0x4040b1;\n                }\n                case 57: {\n                    goto lab_0x4040b1;\n                }\n                case 58: {\n                    goto lab_0x4040b1;\n                }\n                case 59: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4040b1;\n                }\n                case 66: {\n                    goto lab_0x4040b1;\n                }\n                case 67: {\n                    goto lab_0x4040b1;\n                }\n                case 68: {\n                    goto lab_0x4040b1;\n                }\n                case 69: {\n                    goto lab_0x4040b1;\n                }\n                case 70: {\n                    goto lab_0x4040b1;\n                }\n                case 71: {\n                    goto lab_0x4040b1;\n                }\n                case 72: {\n                    goto lab_0x4040b1;\n                }\n                case 73: {\n                    goto lab_0x4040b1;\n                }\n                case 74: {\n                    goto lab_0x4040b1;\n                }\n                case 75: {\n                    goto lab_0x4040b1;\n                }\n                case 76: {\n                    goto lab_0x4040b1;\n                }\n                case 77: {\n                    goto lab_0x4040b1;\n                }\n                case 78: {\n                    goto lab_0x4040b1;\n                }\n                case 79: {\n                    goto lab_0x4040b1;\n                }\n                case 80: {\n                    goto lab_0x4040b1;\n                }\n                case 81: {\n                    goto lab_0x4040b1;\n                }\n                case 82: {\n                    goto lab_0x4040b1;\n                }\n                case 83: {\n                    goto lab_0x4040b1;\n                }\n                case 84: {\n                    goto lab_0x4040b1;\n                }\n                case 85: {\n                    goto lab_0x4040b1;\n                }\n                case 86: {\n                    goto lab_0x4040b1;\n                }\n                case 87: {\n                    goto lab_0x4040b1;\n                }\n                case 88: {\n                    goto lab_0x4040b1;\n                }\n                case 89: {\n                    goto lab_0x4040b1;\n                }\n                case 90: {\n                    goto lab_0x4040b1;\n                }\n                case 91: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4040b1;\n                }\n                case 94: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4040b1;\n                }\n                case 96: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4040b1;\n                }\n                case 98: {\n                    goto lab_0x4040b1;\n                }\n                case 99: {\n                    goto lab_0x4040b1;\n                }\n                case 100: {\n                    goto lab_0x4040b1;\n                }\n                case 101: {\n                    goto lab_0x4040b1;\n                }\n                case 102: {\n                    goto lab_0x4040b1;\n                }\n                case 103: {\n                    goto lab_0x4040b1;\n                }\n                case 104: {\n                    goto lab_0x4040b1;\n                }\n                case 105: {\n                    goto lab_0x4040b1;\n                }\n                case 106: {\n                    goto lab_0x4040b1;\n                }\n                case 107: {\n                    goto lab_0x4040b1;\n                }\n                case 108: {\n                    goto lab_0x4040b1;\n                }\n                case 109: {\n                    goto lab_0x4040b1;\n                }\n                case 110: {\n                    goto lab_0x4040b1;\n                }\n                case 111: {\n                    goto lab_0x4040b1;\n                }\n                case 112: {\n                    goto lab_0x4040b1;\n                }\n                case 113: {\n                    goto lab_0x4040b1;\n                }\n                case 114: {\n                    goto lab_0x4040b1;\n                }\n                case 115: {\n                    goto lab_0x4040b1;\n                }\n                case 116: {\n                    goto lab_0x4040b1;\n                }\n                case 117: {\n                    goto lab_0x4040b1;\n                }\n                case 118: {\n                    goto lab_0x4040b1;\n                }\n                case 119: {\n                    goto lab_0x4040b1;\n                }\n                case 120: {\n                    goto lab_0x4040b1;\n                }\n                case 121: {\n                    goto lab_0x4040b1;\n                }\n                case 122: {\n                    goto lab_0x4040b1;\n                }\n                case 123: {\n                    goto lab_0x404055;\n                }\n                case 124: {\n                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x404055;\n                }\n                case 126: {\n                    goto lab_0x40407d;\n                }\n                default: {\n                    goto lab_0x404455;\n                }\n            }\n        }\n      lab_0x404455:\n        if (v23 != 1) {\n            // 0x4047c0\n            ps = 0;\n            int64_t len = v15; // 0x4047d0\n            if (v15 == -1) {\n                // 0x4047d2\n                len = strlen((char *)str);\n            }\n            // 0x4047fe\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40485f:\n                // 0x40485f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404864\n                int64_t v30 = v29 + str;\n                v24 = function_409470(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x404dda_2;\n                    }\n                    case -1: {\n                        goto lab_0x404dda_2;\n                    }\n                    case -2: {\n                        // 0x404ebd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404ef7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x404efa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404f07\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404f00\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x404dda\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x404dda_2;\n                    }\n                    case 1: {\n                        goto lab_0x404830;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4048dc\n                        char v34 = *(char *)v33; // 0x4048ed\n                        unsigned char v35; // 0x403f07\n                        if (v34 < 125) {\n                            // 0x4048f8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40490f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4048e0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4048ed\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4048f8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40490f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4048e0\n                            v33++;\n                        }\n                        goto lab_0x404830;\n                    }\n                }\n            }\n            goto lab_0x404dda_2;\n        } else {\n            // 0x4044a4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4040b1;\n        }\n    }\n  lab_0x4046d8:\n    // 0x4046d8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x404fda\n        if (v8 > result) {\n            // 0x404fe3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x404307\n        return result;\n    }\n    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4040b1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4040c0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4042ca_2;\n        }\n    }\n    int64_t v39 = result; // 0x4041c1\n    char v40 = v20; // 0x4041c1\n    int64_t v41 = v38; // 0x4041c1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4041c1\n    int64_t v43 = v36; // 0x4041c1\n    goto lab_0x40413d;\n  lab_0x4042ca_2:\n    // 0x404307\n    return function_403eb0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404dda_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4040b1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4049ae\n        int64_t v50 = v5 + 1; // 0x404a91\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404a98\n        char v52 = v20; // 0x404a98\n        int64_t v53 = result; // 0x404a98\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404a61\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404a65\n            int64_t v56 = v54 + 1; // 0x404a6a\n            int64_t v57 = v51 + 1; // 0x404a91\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x404a5c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404a61\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404a65\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40413d;\n    }\n  lab_0x404830:\n    // 0x404830\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40484f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404852\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x404dda\n        goto lab_0x404dda_2;\n    }\n    goto lab_0x40485f;\n  lab_0x40407d:\n    // 0x40407d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4042ca_2;\n    }\n    goto lab_0x4040b1;\n  lab_0x404055:;\n    bool v60 = v15 == 1; // 0x404060\n    if (v15 == -1) {\n        // 0x404062\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40406e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4040b1;\n    } else {\n        goto lab_0x40407d;\n    }\n  lab_0x40413d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x404142\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x404146\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403f58_2;\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "40527e",
            "decompiledFuncCode": "int64_t function_4050e0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4050e2\n    int32_t * v3 = __errno_location(); // 0x4050fc\n    int32_t v4 = v2; // 0x405111\n    if (v4 < 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v5 = (int64_t)g26; // 0x405101\n    int32_t v6 = *v3; // 0x40510b\n    int64_t v7 = v5; // 0x405121\n    if (v2 >= (int64_t)*(int32_t *)&g29) {\n        if (v4 == 0x7fffffff) {\n            // 0x405279\n            function_4061d0(a1);\n            // UNREACHABLE\n        }\n        int64_t v8 = v2 + 1; // 0x405130\n        int64_t v9 = 0x100000000 * v8 >> 28; // 0x405137\n        int64_t v10; // 0x4050e0\n        if (g26 == &g27) {\n            int64_t v11 = function_405fe0(0, v9); // 0x40525a\n            int128_t v12 = __asm_movdqa(*(int128_t *)&g27); // 0x40525f\n            *(int64_t *)&g26 = v11;\n            __asm_movups(*(int128_t *)v11, v12);\n            v10 = v11;\n        } else {\n            int64_t v13 = function_405fe0(v5, v9); // 0x40514b\n            *(int64_t *)&g26 = v13;\n            v10 = v13;\n        }\n        // 0x40515a\n        v7 = v10;\n        int32_t v14 = *(int32_t *)&g29; // 0x40515a\n        int32_t v15 = v8; // 0x405161\n        memset((int64_t *)(16 * (int64_t)v14 + v7), 0, 16 * (v15 - v14));\n        *(int32_t *)&g29 = v15;\n    }\n    int64_t v16 = v7 + (v1 >> 28); // 0x405191\n    int32_t v17 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40519b\n    int64_t * v18 = (int64_t *)v16; // 0x40519e\n    uint64_t v19 = *v18; // 0x40519e\n    int64_t * v20 = (int64_t *)(v16 + 8); // 0x4051a1\n    int64_t result = *v20; // 0x4051a1\n    int64_t v21; // 0x4050e0\n    uint64_t v22 = function_403eb0(result, v19, a2, a3, v21 & 0xffffffff, v17); // 0x4051c4\n    if (v19 > v22) {\n        // 0x40523b\n        *v3 = v6;\n        return result;\n    }\n    int64_t v23 = v22 + 1; // 0x4051d7\n    *v18 = v23;\n    if (result != (int64_t)&g45) {\n        // 0x4051e7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405f80(v23); // 0x405201\n    *v20 = result2;\n    int64_t v24; // 0x4050e0\n    function_403eb0(result2, v23, a2, a3, (int64_t)*(int32_t *)&v24, v17);\n    // 0x40523b\n    *v3 = v6;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "4052b4",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405287\n    int64_t result = function_406180(a1 == 0 ? (int64_t)&g46 : a1, 56); // 0x4052a6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "4052cf",
            "decompiledFuncCode": "int64_t function_4052c0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g46 : a1); // 0x4052cc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052d0",
            "funcStartAddr": "4052d0",
            "funcEndAddr": "4052df",
            "decompiledFuncCode": "int64_t function_4052d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x4052d8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_4052e0",
            "funcStartAddr": "4052e0",
            "funcEndAddr": "405313",
            "decompiledFuncCode": "int64_t function_4052e0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 + 8 : a1 + 8; // 0x4052f9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4052fe\n    uint32_t v3 = *v2; // 0x4052fe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x405302\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "405333",
            "decompiledFuncCode": "int64_t function_405320(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g46 + 4 : a1 + 4); // 0x40532c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "40536b",
            "decompiledFuncCode": "int64_t function_405340(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x405348\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x405365\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40535c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_405370",
            "funcStartAddr": "405370",
            "funcEndAddr": "4053e2",
            "decompiledFuncCode": "int64_t function_405370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g46 : a5; // 0x405392\n    int32_t * v2 = __errno_location(); // 0x40539b\n    uint32_t v3 = *(int32_t *)v1; // 0x4053bb\n    int64_t result = function_403eb0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4053ca\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053f0",
            "funcStartAddr": "4053f0",
            "funcEndAddr": "4054d1",
            "decompiledFuncCode": "int64_t function_4053f0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g46 : a4; // 0x405412\n    int32_t * v2 = __errno_location(); // 0x405418\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x405437\n    int32_t * v4 = (int32_t *)v1; // 0x40543a\n    int64_t v5 = function_403eb0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x405455\n    int64_t v6 = v5 + 1; // 0x40545a\n    int64_t result = function_405f80(v6); // 0x40546f\n    function_403eb0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4054b4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4054bd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4054e0",
            "funcStartAddr": "4054e0",
            "funcEndAddr": "4054ea",
            "decompiledFuncCode": "int64_t function_4054e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4054e0\n    return function_4053f0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4054f0",
            "funcStartAddr": "4054f0",
            "funcEndAddr": "405585",
            "decompiledFuncCode": "int64_t function_4054f0(void) {\n    uint32_t v1 = *(int32_t *)&g29; // 0x4054f0\n    int64_t v2 = v1; // 0x4054f0\n    int64_t v3 = v2; // 0x405504\n    if (v1 >= 2) {\n        int64_t v4 = &g29;\n        int64_t v5 = v4 + 16; // 0x405523\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g60;\n        while (v5 != (int64_t)g26 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x405520\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g60;\n        }\n    }\n    int64_t v6 = v3; // 0x40553d\n    if (g27 != 0x610380) {\n        // 0x40553f\n        free((int64_t *)g27);\n        g27 = 256;\n        *(int64_t *)&g28 = (int64_t)&g45;\n        v6 = &g60;\n    }\n    int64_t result = v6; // 0x405561\n    if (g26 != &g27) {\n        // 0x405563\n        free(g26);\n        *(int64_t *)&g26 = (int64_t)&g27;\n        result = &g60;\n    }\n    // 0x405576\n    *(int32_t *)&g29 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "4055a1",
            "decompiledFuncCode": "int64_t function_405590(void) {\n    // 0x405590\n    int64_t v1; // 0x405590\n    return function_4050e0(v1, v1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4055b0",
            "funcStartAddr": "4055b0",
            "funcEndAddr": "4055ba",
            "decompiledFuncCode": "int64_t function_4055b0(void) {\n    // 0x4055b0\n    int64_t v1; // 0x4055b0\n    return function_4050e0(v1, v1, v1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "4055d6",
            "decompiledFuncCode": "int64_t function_4055c0(int64_t a1) {\n    // 0x4055c0\n    return function_4050e0(0, a1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4055e0",
            "funcStartAddr": "4055e0",
            "funcEndAddr": "4055f2",
            "decompiledFuncCode": "int64_t function_4055e0(int64_t a1, int64_t a2) {\n    // 0x4055e0\n    return function_4050e0(0, a1, a2, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "405668",
            "decompiledFuncCode": "int64_t function_405600(int64_t a1, int64_t a2, int64_t a3) {\n    if ((int32_t)a2 == 10) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405610\n    return function_4050e0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405670",
            "funcStartAddr": "405670",
            "funcEndAddr": "4056d4",
            "decompiledFuncCode": "int64_t function_405670(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405680\n    return function_4050e0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4056e0",
            "funcStartAddr": "4056e0",
            "funcEndAddr": "4056ec",
            "decompiledFuncCode": "int64_t function_4056e0(int64_t a1, int64_t a2) {\n    // 0x4056e0\n    return function_405600(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4056f0",
            "funcStartAddr": "4056f0",
            "funcEndAddr": "4056ff",
            "decompiledFuncCode": "int64_t function_4056f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4056f0\n    return function_405670(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405700",
            "funcStartAddr": "405700",
            "funcEndAddr": "405770",
            "decompiledFuncCode": "int64_t function_405700(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x40570d\n    int128_t v2 = __asm_movdqa(g47); // 0x405715\n    int128_t v3 = __asm_movdqa(g48); // 0x40571d\n    int64_t v4 = __asm_movaps_6(v1); // bp-72, 0x405732\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405748\n    uint32_t v6 = *v5; // 0x405748\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40574d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4050e0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "40577d",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, int64_t a2) {\n    // 0x405770\n    return function_405700(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405780",
            "funcStartAddr": "405780",
            "funcEndAddr": "405791",
            "decompiledFuncCode": "int64_t function_405780(int64_t a1) {\n    // 0x405780\n    return function_405700(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4057a0",
            "funcStartAddr": "4057a0",
            "funcEndAddr": "4057aa",
            "decompiledFuncCode": "int64_t function_4057a0(void) {\n    // 0x4057a0\n    int64_t v1; // 0x4057a0\n    return function_405700(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "40581e",
            "decompiledFuncCode": "int64_t function_4057b0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4057ca\n    return function_4050e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405820",
            "funcStartAddr": "405820",
            "funcEndAddr": "40588c",
            "decompiledFuncCode": "int64_t function_405820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x405827\n    int128_t v2 = __asm_movdqa(g47); // 0x40582f\n    int128_t v3 = __asm_movdqa(g48); // 0x405837\n    __asm_movaps_6(v1);\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int64_t v4 = 10; // bp-72, 0x405859\n    if (a2 == 0 || a3 == 0) {\n        // 0x405887\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40586a\n    return function_4050e0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405890",
            "funcStartAddr": "405890",
            "funcEndAddr": "405899",
            "decompiledFuncCode": "int64_t function_405890(void) {\n    // 0x405890\n    int64_t v1; // 0x405890\n    return function_405820(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "4058b7",
            "decompiledFuncCode": "int64_t function_4058a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4058a0\n    return function_405820(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "4058d3",
            "decompiledFuncCode": "int64_t function_4058c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4058c0\n    return function_405820(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4058ea",
            "decompiledFuncCode": "int64_t function_4058e0(void) {\n    // 0x4058e0\n    int64_t v1; // 0x4058e0\n    return function_4050e0(v1, v1, v1, &g25);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "405902",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1, int64_t a2) {\n    // 0x4058f0\n    return function_4050e0(0, a1, a2, &g25);\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "405921",
            "decompiledFuncCode": "int64_t function_405910(int64_t a1, int64_t a2) {\n    // 0x405910\n    return function_4050e0(a1, a2, -1, &g25);\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "405946",
            "decompiledFuncCode": "int64_t function_405930(int64_t a1) {\n    // 0x405930\n    return function_4050e0(0, a1, -1, &g25);\n}\n"
        },
        {
            "funcName": "function_405950",
            "funcStartAddr": "405950",
            "funcEndAddr": "40599b",
            "decompiledFuncCode": "int64_t function_405950(int64_t * a1) {\n    // 0x405950\n    int64_t v1; // bp-152, 0x405950\n    if (__lxstat(1, \"/\", (struct stat *)&v1) != 0) {\n        // 0x405990\n        return 0;\n    }\n    int64_t result = (int64_t)a1;\n    *(int64_t *)(result + 8) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "405d7d",
            "decompiledFuncCode": "int64_t function_4059a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405a38\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4059bc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4059d6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405a1b\n    if (a6 < 10) {\n        // 0x405a2a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405b22\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405d80",
            "funcStartAddr": "405d80",
            "funcEndAddr": "405da0",
            "decompiledFuncCode": "int64_t function_405d80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405d80\n    if (a5 == 0) {\n        // 0x405d9b\n        return function_4059a0(a1, a2, a3, a4, a5, 0, (int64_t)&g60);\n    }\n    int64_t v1 = 0; // 0x405d87\n    v1++;\n    int64_t v2 = v1; // 0x405d99\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405d90\n        v1++;\n        v2 = v1;\n    }\n    // 0x405d9b\n    return function_4059a0(a1, a2, a3, a4, a5, v2, (int64_t)&g60);\n}\n"
        },
        {
            "funcName": "function_405da0",
            "funcStartAddr": "405da0",
            "funcEndAddr": "405e00",
            "decompiledFuncCode": "int64_t function_405da0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405da0\n    int64_t v3 = &v2; // 0x405da0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405dd3\n    int64_t v6; // 0x405dbd\n    int64_t * v7; // 0x405ddb\n    int64_t v8; // 0x405ddb\n    int64_t v9; // 0x405de7\n    if (v5 < 48) {\n        // 0x405db0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405df3\n            break;\n        }\n    } else {\n        // 0x405ddb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405df3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405dd1\n    while (v4 != 9) {\n        // 0x405dc9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405db0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405df3\n                break;\n            }\n        } else {\n            // 0x405ddb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405df3\n                break;\n            }\n        }\n        // 0x405dc9\n        v10 = 10;\n    }\n    // 0x405df3\n    return function_4059a0(a1, a2, a3, a4, v3, v10, (int64_t)&g60);\n}\n"
        },
        {
            "funcName": "function_405e00",
            "funcStartAddr": "405e00",
            "funcEndAddr": "405ebc",
            "decompiledFuncCode": "int64_t function_405e00(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405e00\n    int64_t v1; // bp-168, 0x405e00\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405e00\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405e00\n    int64_t v8; // 0x405e00\n    int64_t v9; // bp-56, 0x405e00\n    int64_t v10; // 0x405e65\n    int64_t v11; // 0x405e89\n    if ((int32_t)v6 < 48) {\n        // 0x405e50\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405ea0\n            break;\n        }\n    } else {\n        // 0x405e82\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405ea0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x405e7a\n    int64_t v13 = 10; // 0x405e7a\n    while (v5 != 9) {\n        // 0x405e7c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405e50\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405ea0\n                break;\n            }\n        } else {\n            // 0x405e82\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405ea0\n                break;\n            }\n        }\n        // 0x405e72\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405ea0\n    int64_t v14; // bp-136, 0x405e00\n    int64_t result = function_4059a0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g60); // 0x405eaf\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ec0",
            "funcStartAddr": "405ec0",
            "funcEndAddr": "405f34",
            "decompiledFuncCode": "int64_t function_405ec0(int64_t a1) {\n    // 0x405ec0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405f23\n    return fputs_unlocked(v1, g34);\n}\n"
        },
        {
            "funcName": "function_405f40",
            "funcStartAddr": "405f40",
            "funcEndAddr": "405f78",
            "decompiledFuncCode": "int64_t function_405f40(void) {\n    // 0x405f40\n    if (g50 != 0) {\n        // 0x405f49\n        return g49;\n    }\n    int32_t v1 = geteuid(); // 0x405f5c\n    g50 = 1;\n    g49 = v1 == 0;\n    return (int64_t)(v1 & -256) | (int64_t)(v1 == 0);\n}\n"
        },
        {
            "funcName": "function_405f80",
            "funcStartAddr": "405f80",
            "funcEndAddr": "405f9a",
            "decompiledFuncCode": "int64_t function_405f80(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405f84\n    if (size != 0 != (mem == NULL)) {\n        // 0x405f93\n        return (int64_t)mem;\n    }\n    // 0x405f95\n    function_4061d0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405fa0",
            "funcStartAddr": "405fa0",
            "funcEndAddr": "405fc1",
            "decompiledFuncCode": "int64_t function_405fa0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405fa3\n    int64_t v2 = v1; // 0x405fa3\n    if (v2 < 0) {\n        // 0x405fbb\n        function_4061d0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405fb9\n        return function_405f80(v2);\n    }\n    // 0x405fbb\n    function_4061d0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405fd0",
            "funcStartAddr": "405fd0",
            "funcEndAddr": "405fd2",
            "decompiledFuncCode": "int64_t function_405fd0(void) {\n    // 0x405fd0\n    int64_t v1; // 0x405fd0\n    return function_405f80(v1);\n}\n"
        },
        {
            "funcName": "function_405fe0",
            "funcStartAddr": "405fe0",
            "funcEndAddr": "406016",
            "decompiledFuncCode": "int64_t function_405fe0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406008\n        free(v1);\n        return (int32_t)&g60 ^ (int32_t)&g60;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405ff1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406000\n        return (int64_t)mem;\n    }\n    // 0x406011\n    function_4061d0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406020",
            "funcStartAddr": "406020",
            "funcEndAddr": "406041",
            "decompiledFuncCode": "int64_t function_406020(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406023\n    int64_t v2 = v1; // 0x406023\n    if (v2 < 0) {\n        // 0x40603b\n        function_4061d0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406039\n        return function_405fe0(a1, v2);\n    }\n    // 0x40603b\n    function_4061d0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406050",
            "funcStartAddr": "406050",
            "funcEndAddr": "4060d6",
            "decompiledFuncCode": "int64_t function_406050(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4060ab\n            function_4061d0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405fe0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x406093\n    if (a2 == 0) {\n        // 0x4060b8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x406098\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4060ab\n        function_4061d0(a1);\n        // UNREACHABLE\n    }\n    // 0x40607a\n    *(int64_t *)a2 = v2;\n    return function_405fe0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4060e0",
            "funcStartAddr": "4060e0",
            "funcEndAddr": "406130",
            "decompiledFuncCode": "int64_t function_4060e0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4060e0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40612a\n            function_4061d0(a1);\n            // UNREACHABLE\n        }\n        // 0x406102\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405fe0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406115\n        *(int64_t *)a2 = 128;\n        return function_405fe0(0, 128);\n    }\n    // 0x406128\n    if (a2 < 0) {\n        // 0x40612a\n        function_4061d0(a1);\n        // UNREACHABLE\n    }\n    // 0x406102\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405fe0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406130",
            "funcStartAddr": "406130",
            "funcEndAddr": "406147",
            "decompiledFuncCode": "int64_t function_406130(int64_t a1, int64_t a2) {\n    // 0x406130\n    return (int64_t)memset((int64_t *)function_405f80(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406150",
            "funcStartAddr": "406150",
            "funcEndAddr": "40617e",
            "decompiledFuncCode": "int64_t function_406150(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406157\n    if ((int64_t)v1 < 0) {\n        // 0x406179\n        function_4061d0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406179\n        function_4061d0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40616a\n    if (mem != NULL) {\n        // 0x406174\n        return (int64_t)mem;\n    }\n    // 0x406179\n    function_4061d0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406180",
            "funcStartAddr": "406180",
            "funcEndAddr": "4061a8",
            "decompiledFuncCode": "int64_t function_406180(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405f80(a2); // 0x40618f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4061b0",
            "funcStartAddr": "4061b0",
            "funcEndAddr": "4061c3",
            "decompiledFuncCode": "int64_t function_4061b0(int64_t str) {\n    // 0x4061b0\n    return function_406180(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4061d0",
            "funcStartAddr": "4061d0",
            "funcEndAddr": "406201",
            "decompiledFuncCode": "int64_t function_4061d0(int64_t a1) {\n    // 0x4061d0\n    error(g24, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406210",
            "funcStartAddr": "406210",
            "funcEndAddr": "406289",
            "decompiledFuncCode": "int64_t function_406210(int64_t a1, int32_t a2) {\n    // 0x406210\n    int64_t v1; // 0x406210\n    int64_t result = fts_open(a1, a2 | 512, v1); // 0x40621a\n    if (result != 0) {\n        // 0x406224\n        return result;\n    }\n    // 0x406230\n    if (*__errno_location() != 22) {\n        // 0x40623a\n        function_4061d0(a1);\n        // UNREACHABLE\n    }\n    // 0x406240\n    __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 41, \"xfts_open\");\n    // 0x406224\n    return result;\n}\n"
        },
        {
            "funcName": "function_406290",
            "funcStartAddr": "406290",
            "funcEndAddr": "4062f9",
            "decompiledFuncCode": "int64_t function_406290(void) {\n    char * v1 = NULL; // bp-24, 0x4062ab\n    int64_t v2 = 0; // bp-16, 0x4062b3\n    int32_t v3 = __getdelim(&v1, (int32_t *)&v2, 10, g35); // 0x4062bc\n    if (v3 < 1) {\n        // 0x4062de\n        free((int64_t *)v1);\n        return 0;\n    }\n    int64_t v4 = (int64_t)v1; // 0x4062c6\n    char * v5 = (char *)((int64_t)v3 - 1 + v4); // 0x4062cf\n    int64_t response = v4; // 0x4062d2\n    if (*v5 == 10) {\n        // 0x4062f0\n        *v5 = 0;\n        response = (int64_t)v1;\n    }\n    int32_t v6 = rpmatch((char *)response); // 0x4062d4\n    // 0x4062de\n    free((int64_t *)v1);\n    return v6 >= 0 == (v6 != 0);\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "406340",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40631a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40631a\n        return fflush(stream);\n    }\n    // 0x406328\n    function_406370(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406340",
            "funcStartAddr": "406340",
            "funcEndAddr": "406368",
            "decompiledFuncCode": "int64_t function_406340(int64_t a1) {\n    // 0x406340\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x406367\n        return 0;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 16) - *(int64_t *)(a1 + 8); // 0x406350\n    int64_t result = v1; // 0x40635a\n    if ((a1 & 256) != 0) {\n        // 0x40635c\n        result = *(int64_t *)(a1 + 88) + v1 - *(int64_t *)(a1 + 72);\n    }\n    // 0x406367\n    return result;\n}\n"
        },
        {
            "funcName": "function_406370",
            "funcStartAddr": "406370",
            "funcEndAddr": "4063c7",
            "decompiledFuncCode": "int64_t function_406370(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406370\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40637a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4063ab\n    int64_t result = -1; // 0x4063b4\n    if (v1 != -1) {\n        // 0x4063b6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4063c2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4063d0",
            "funcStartAddr": "4063d0",
            "funcEndAddr": "4063ea",
            "decompiledFuncCode": "int64_t function_4063d0(int64_t a1, int64_t a2) {\n    // 0x4063d0\n    if (*(int64_t *)(a1 + 8) == *(int64_t *)(a2 + 8)) {\n        // 0x4063e0\n        return a2 & -256 | (int64_t)(a1 == a2);\n    }\n    // 0x4063dc\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4063f0",
            "funcStartAddr": "4063f0",
            "funcEndAddr": "4063fd",
            "decompiledFuncCode": "int64_t function_4063f0(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x4063f0\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_406400",
            "funcStartAddr": "406400",
            "funcEndAddr": "40640c",
            "decompiledFuncCode": "int64_t function_406400(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406400\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_406410",
            "funcStartAddr": "406410",
            "funcEndAddr": "40641a",
            "decompiledFuncCode": "int64_t function_406410(int64_t a1, int64_t a2) {\n    // 0x406410\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_406420",
            "funcStartAddr": "406420",
            "funcEndAddr": "406442",
            "decompiledFuncCode": "int64_t function_406420(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 128); // 0x40642b\n    uint64_t v2 = *(int64_t *)(a1 + 128); // 0x406432\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_406450",
            "funcStartAddr": "406450",
            "funcEndAddr": "4065fa",
            "decompiledFuncCode": "int64_t function_406450(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a2 + 120; // 0x406456\n    int64_t v2 = a1 + 72; // 0x40645e\n    uint64_t v3 = (int64_t)*(int32_t *)v2; // 0x40645e\n    int64_t * v4 = (int64_t *)(a2 + 88); // 0x406461\n    int64_t * v5 = (int64_t *)(a2 + 48); // 0x406466\n    int64_t v6 = *v5; // 0x406466\n    int32_t v7; // 0x406450\n    if (*v4 != 0 || v3 % 2 == 0) {\n        if ((v3 & 2) != 0) {\n            goto lab_0x406470;\n        } else {\n            if ((char)a3 != 0) {\n                goto lab_0x406470;\n            } else {\n                int32_t v8 = *(int32_t *)(a1 + 44); // 0x4064cb\n                if (__fxstatat(1, v8, (char *)v6, (struct stat *)v1, 256) != 0) {\n                    // 0x406520\n                    v7 = *__errno_location();\n                    goto lab_0x406527;\n                } else {\n                    goto lab_0x4064e7;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406470;\n    }\n  lab_0x406470:;\n    struct stat * v9 = (struct stat *)v1; // 0x406478\n    if (__xstat(1, (char *)v6, v9) == 0) {\n        goto lab_0x4064e7;\n    } else {\n        int32_t * v10 = __errno_location(); // 0x406481\n        int32_t v11 = *v10; // 0x406489\n        v7 = v11;\n        if (v11 == 2) {\n            // 0x406494\n            if (__lxstat(1, (char *)*v5, v9) == 0) {\n                // 0x4064ad\n                *v10 = 0;\n                return 13;\n            }\n            // 0x4065d0\n            v7 = *v10;\n        }\n        goto lab_0x406527;\n    }\n  lab_0x4064e7:;\n    int32_t v12 = *(int32_t *)(a2 + 144) & 0xf000; // 0x4064ed\n    int64_t v13; // 0x406450\n    switch ((int16_t)v12) {\n        case 0x4000: {\n            uint64_t v14 = *(int64_t *)(a2 + 136); // 0x406560\n            v13 = -1;\n            if (v14 >= 2) {\n                // 0x40656d\n                v13 = -1;\n                if (*v4 >= 1) {\n                    // 0x406574\n                    v13 = (*(char *)v2 & 32) == 0 ? v14 - 2 : v14;\n                }\n            }\n            // break -> 0x406582\n            break;\n        }\n        case -0x6000: {\n            // 0x406513\n            return 12;\n        }\n        default: {\n            // 0x406513\n            return 4 * (int64_t)(v12 == 0x8000) + (v12 == 0x8000 ? 4 : 3);\n        }\n    }\n    int64_t v15 = a2 + 264; // 0x406582\n    *(int64_t *)(a2 + 104) = v13;\n    if (*(char *)v15 != 46) {\n        // 0x406513\n        return 1;\n    }\n    // 0x406598\n    if (*(char *)(a2 + 265) == 0) {\n        // 0x406513\n        return *v4 == 0 ? 1 : 5;\n    }\n    // 0x4065a1\n    if ((*(int32_t *)v15 & 0xffff00) != 0x2e00) {\n        // 0x406513\n        return 1;\n    }\n    // 0x406513\n    return *v4 == 0 ? 1 : 5;\n  lab_0x406527:\n    // 0x406527\n    *(int32_t *)(a2 + 64) = v7;\n    int64_t v16 = a2 + 128 & -8; // 0x406530\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(a2 + 256) = 0;\n    __asm_rep_stosq_memset((char *)v16, 0, (a2 + 264 - v16) / 8 % 0x20000000);\n    return 10;\n}\n"
        },
        {
            "funcName": "function_406600",
            "funcStartAddr": "406600",
            "funcEndAddr": "4066fd",
            "decompiledFuncCode": "int64_t function_406600(int64_t a1, int64_t result, uint64_t nmemb) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x406613\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x406617\n    int64_t v3 = *v2; // 0x406617\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40661b\n    int64_t base = v3; // 0x40661f\n    if (*v4 < nmemb) {\n        uint64_t v5 = nmemb + 40; // 0x40662b\n        *v4 = v5;\n        if (v5 >= 0x2000000000000000) {\n            // 0x4066d1\n            free((int64_t *)v3);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        int64_t * mem = realloc((int64_t *)v3, 8 * (int32_t)v5); // 0x406640\n        if (mem == NULL) {\n            // 0x4066d1\n            free((int64_t *)*v2);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        // 0x406651\n        base = (int64_t)mem;\n        *v2 = base;\n    }\n    int64_t v6 = base; // 0x40665b\n    int64_t v7 = result; // 0x40665b\n    if (result != 0) {\n        *(int64_t *)v6 = v7;\n        v7 += 16;\n        v6 += 8;\n        while (v7 != 0) {\n            // 0x406660\n            *(int64_t *)v6 = v7;\n            v7 += 16;\n            v6 += 8;\n        }\n    }\n    // 0x406671\n    qsort((int64_t *)base, (int32_t)nmemb, 8, (int32_t (*)(int64_t *, int64_t *))v1);\n    int64_t v8 = *v2; // 0x406681\n    int64_t result2 = *(int64_t *)v8; // 0x406688\n    if (nmemb == 1) {\n        // 0x4066ba\n        *(int64_t *)(result2 + 16) = 0;\n        return result2;\n    }\n    int64_t v9 = v8 + 8; // 0x4066a3\n    int64_t * v10 = (int64_t *)v9; // 0x4066a3\n    *(int64_t *)(result2 + 16) = *v10;\n    int64_t v11 = nmemb - 2; // 0x4066af\n    int64_t v12 = v11; // 0x4066b3\n    int64_t v13 = v9; // 0x4066b3\n    if (v11 != 0) {\n        v13 += 8;\n        int64_t * v14 = (int64_t *)v13; // 0x4066a3\n        *(int64_t *)(*v10 + 16) = *v14;\n        v12--;\n        while (v12 != 0) {\n            int64_t * v15 = v14;\n            v13 += 8;\n            v14 = (int64_t *)v13;\n            *(int64_t *)(*v15 + 16) = *v14;\n            v12--;\n        }\n    }\n    // 0x4066ba\n    *(int64_t *)(*(int64_t *)(8 * nmemb - 8 + v8) + 16) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406700",
            "funcStartAddr": "406700",
            "funcEndAddr": "40678a",
            "decompiledFuncCode": "int64_t function_406700(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a3;\n    int64_t * mem = malloc(v1 + 272 & -8); // 0x40671e\n    int64_t result = (int64_t)mem; // 0x40671e\n    if (mem != NULL) {\n        int64_t v2 = result + 264; // 0x40672b\n        memcpy((int64_t *)v2, (int64_t *)a2, v1);\n        *(char *)(v2 + a3) = 0;\n        *(int64_t *)(result + 96) = a3;\n        *(int64_t *)(result + 80) = a1;\n        *(int64_t *)(result + 56) = *(int64_t *)(a1 + 32);\n        *(int32_t *)(result + 64) = 0;\n        *(int64_t *)(result + 24) = 0;\n        *(int32_t *)(result + 114) = 0x30000;\n        *(int64_t *)(result + 32) = 0;\n        *(int64_t *)(result + 40) = 0;\n    }\n    // 0x40677c\n    return result;\n}\n"
        },
        {
            "funcName": "function_406790",
            "funcStartAddr": "406790",
            "funcEndAddr": "4067d1",
            "decompiledFuncCode": "int64_t function_406790(int64_t a1) {\n    // 0x406790\n    if (a1 == 0) {\n        // 0x4067c2\n        int64_t result; // 0x406790\n        return result;\n    }\n    int64_t dirp = *(int64_t *)(a1 + 24); // 0x4067a0\n    int64_t v1 = *(int64_t *)(a1 + 16); // 0x4067a4\n    if (dirp != 0) {\n        // 0x4067ad\n        closedir((struct __dirstream *)dirp);\n    }\n    // 0x4067b2\n    free((int64_t *)a1);\n    while (v1 != 0) {\n        int64_t v2 = v1;\n        dirp = *(int64_t *)(v2 + 24);\n        v1 = *(int64_t *)(v2 + 16);\n        if (dirp != 0) {\n            // 0x4067ad\n            closedir((struct __dirstream *)dirp);\n        }\n        // 0x4067b2\n        free((int64_t *)v2);\n    }\n    // 0x4067c2\n    return &g60;\n}\n"
        },
        {
            "funcName": "function_4067e0",
            "funcStartAddr": "4067e0",
            "funcEndAddr": "406819",
            "decompiledFuncCode": "int64_t function_4067e0(int64_t a1) {\n    int64_t result = function_40a900(a1); // 0x4067ff\n    if ((char)result != 0) {\n        // 0x406808\n        return result;\n    }\n    int32_t fd = function_40a950(a1); // 0x4067f8\n    if (fd >= 0) {\n        // 0x406810\n        close(fd);\n    }\n    int64_t result2 = function_40a900(a1); // 0x4067ff\n    while ((char)result2 == 0) {\n        // 0x4067f0\n        fd = function_40a950(a1);\n        if (fd >= 0) {\n            // 0x406810\n            close(fd);\n        }\n        // 0x4067fc\n        result2 = function_40a900(a1);\n    }\n    // 0x406808\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406820",
            "funcStartAddr": "406820",
            "funcEndAddr": "406931",
            "decompiledFuncCode": "int64_t function_406820(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x406828\n    int64_t v2 = *v1; // 0x406828\n    if ((*(char *)(v2 + 73) & 2) == 0) {\n        // 0x406862\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(v2 + 80); // 0x406836\n    int64_t v4 = *v3; // 0x406836\n    int64_t v5 = v4; // 0x406840\n    int64_t result; // bp-152, 0x406820\n    if (v4 == 0) {\n        // 0x4068d0\n        v5 = function_409f20(13, 0, 0x406400, 0x406410, 0x4019a0);\n        *v3 = v5;\n        if (v5 == 0) {\n            // 0x4068fc\n            fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result);\n            // 0x406862\n            return 0;\n        }\n    }\n    int64_t * v6 = (int64_t *)(a1 + 120); // 0x406846\n    result = *v6;\n    int64_t v7 = function_409cb0(v5, &result); // 0x406854\n    if (v7 != 0) {\n        // 0x406862\n        return *(int64_t *)(v7 + 8);\n    }\n    // 0x406870\n    if (fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result) != 0) {\n        // 0x406862\n        return 0;\n    }\n    int64_t * mem = malloc(16); // 0x40688c\n    if (mem == NULL) {\n        // 0x406862\n        return result;\n    }\n    int64_t v8 = (int64_t)mem; // 0x40688c\n    *(int64_t *)(v8 + 8) = result;\n    *mem = *v6;\n    if (function_40a6c0(v5, v8) != 0) {\n        // 0x4068b8\n        return result;\n    }\n    // 0x406920\n    free(mem);\n    // 0x406862\n    return result;\n}\n"
        },
        {
            "funcName": "function_406940",
            "funcStartAddr": "406940",
            "funcEndAddr": "4069a4",
            "decompiledFuncCode": "int64_t function_406940(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = function_406820(a1, a2); // 0x406944\n    if (v1 == 0x9fa0) {\n        // 0x406976\n        return 0;\n    }\n    if (v1 <= 0x9fa0) {\n        // 0x406980\n        if (v1 != 0) {\n            // 0x406987\n            return v1 != 0x6969;\n        }\n        // 0x406976\n        return 0;\n    }\n    // 0x406953\n    switch (v1) {\n        case 0x5346414f: {\n            // 0x406976\n            return 0;\n        }\n        case 0x58465342: {\n            // 0x406976\n            return 2;\n        }\n    }\n    // 0x406976\n    return v1 == 0x52654973 ? 2 : 1;\n}\n"
        },
        {
            "funcName": "function_4069b0",
            "funcStartAddr": "4069b0",
            "funcEndAddr": "406a16",
            "decompiledFuncCode": "int64_t function_4069b0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x4069bb\n    int32_t fd = *v1; // 0x4069bb\n    int32_t v2 = a2; // 0x4069be\n    if (fd == v2 == (fd != -100)) {\n        // 0x406a11\n        abort();\n        // UNREACHABLE\n    }\n    if ((char)a3 == 0) {\n        // 0x4069cb\n        if (fd >= 0 != ((*(char *)(a1 + 72) & 4) == 0)) {\n            // 0x4069d5\n            *v1 = v2;\n            int64_t result; // 0x4069b0\n            return result;\n        }\n        int32_t result2 = close(fd); // 0x406a02\n        *v1 = v2;\n        return result2;\n    }\n    int64_t result3 = function_40a910(a1 + 96, fd); // 0x4069e4\n    uint32_t fd2 = (int32_t)result3; // 0x4069e9\n    if (fd2 < 0) {\n        // 0x4069d5\n        *v1 = v2;\n        return result3;\n    }\n    int32_t result4 = close(fd2); // 0x4069ef\n    *v1 = v2;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_406a20",
            "funcStartAddr": "406a20",
            "funcEndAddr": "406a7a",
            "decompiledFuncCode": "int64_t function_406a20(int64_t a1) {\n    int32_t v1 = *(int32_t *)(a1 + 72); // 0x406a29\n    uint32_t v2 = v1 & 4; // 0x406a2e\n    if (v2 != 0) {\n        // 0x406a52\n        function_4067e0(a1 + 96);\n        return 0;\n    }\n    int64_t result; // 0x406a20\n    if ((v1 & 512) == 0) {\n        // 0x406a68\n        result = fchdir(*(int32_t *)(a1 + 40)) != 0;\n    } else {\n        // 0x406a38\n        function_4069b0(a1, 0xffffff9c, 1);\n        result = v2;\n    }\n    // 0x406a52\n    function_4067e0(a1 + 96);\n    return result;\n}\n"
        },
        {
            "funcName": "function_406a80",
            "funcStartAddr": "406a80",
            "funcEndAddr": "406aeb",
            "decompiledFuncCode": "int64_t function_406a80(int64_t a1, uint64_t a2, int64_t a3) {\n    uint64_t v1 = a2 + 256 + a3; // 0x406a8a\n    if (v1 < a2) {\n        int64_t * v2 = (int64_t *)a1; // 0x406ab8\n        free(v2);\n        *v2 = 0;\n        *__errno_location() = 36;\n        return 0;\n    }\n    // 0x406a97\n    *(int64_t *)a2 = v1;\n    int64_t * v3 = (int64_t *)a1; // 0x406a9d\n    int64_t * mem = realloc(v3, (int32_t)v1); // 0x406a9d\n    if (mem != NULL) {\n        // 0x406aa7\n        *v3 = (int64_t)mem;\n        return 1;\n    }\n    // 0x406ad8\n    free(v3);\n    *v3 = 0;\n    return (int32_t)&g60 ^ (int32_t)&g60;\n}\n"
        },
        {
            "funcName": "function_406af0",
            "funcStartAddr": "406af0",
            "funcEndAddr": "406b4b",
            "decompiledFuncCode": "int64_t function_406af0(int32_t a1, int64_t a2) {\n    if ((a1 & 258) != 0) {\n        int64_t v1 = function_409f20(31, 0, 0x4063f0, 0x4063d0, 0x4019a0); // 0x406b13\n        *(int64_t *)a2 = v1;\n        // 0x406b21\n        return v1 & -256 | (int64_t)(v1 != 0);\n    }\n    int64_t * mem = malloc(32); // 0x406b2d\n    int64_t v2 = (int64_t)mem; // 0x406b2d\n    *(int64_t *)a2 = v2;\n    if (mem == NULL) {\n        // 0x406b21\n        return 0;\n    }\n    // 0x406b3f\n    function_409550(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406b50",
            "funcStartAddr": "406b50",
            "funcEndAddr": "406b94",
            "decompiledFuncCode": "int64_t function_406b50(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x2000 * a2 & 0x20000 | 128 * a2 & 0x40000 | 0x90900; // 0x406b6a\n    if ((a2 & 512) == 0) {\n        // 0x406b88\n        return function_4095e0(a3, v1, (int32_t)v1);\n    }\n    // 0x406b78\n    return function_40af10((int64_t)a1, a3, (int32_t)v1, a3);\n}\n"
        },
        {
            "funcName": "function_406ba0",
            "funcStartAddr": "406ba0",
            "funcEndAddr": "406d66",
            "decompiledFuncCode": "int64_t function_406ba0(int64_t a1, int64_t a2, int64_t a3, int32_t a4) {\n    int64_t v1 = a4;\n    int64_t v2 = a3 & 0xffffffff; // 0x406baf\n    int32_t * v3 = (int32_t *)(a1 + 72); // 0x406bbc\n    uint32_t v4 = *v3; // 0x406bbc\n    int64_t v5 = v4; // 0x406bbc\n    int32_t v6 = v4 & 4; // 0x406bc3\n    int64_t v7; // 0x406ba0\n    int64_t v8; // 0x406ba0\n    int64_t v9; // 0x406ba0\n    int64_t v10; // 0x406ba0\n    int64_t v11; // 0x406ba0\n    if (a4 == 0) {\n        goto lab_0x406c40;\n    } else {\n        // 0x406bcb\n        bool v12; // 0x406ba0\n        int64_t v13 = v12 ? -1 : 1; // 0x406bd8\n        int64_t v14 = (int64_t)\"..\"; // 0x406ba0\n        int64_t v15 = v1; // 0x406ba0\n        int64_t v16 = 3; // 0x406bd8\n        unsigned char v17 = *(char *)v15; // 0x406bd8\n        char v18 = *(char *)v14; // 0x406bd8\n        char v19 = v18; // 0x406bd8\n        bool v20 = false; // 0x406bd8\n        while (v17 == v18) {\n            // 0x406bcb\n            v16--;\n            v14 += v13;\n            v15 += v13;\n            v19 = v17;\n            v20 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = *(char *)v15;\n            v18 = *(char *)v14;\n            v19 = v18;\n            v20 = false;\n        }\n        unsigned char v21 = v19;\n        if ((v17 >= v21 && !v20) != v17 < v21) {\n            goto lab_0x406c40;\n        } else {\n            if (v6 != 0) {\n                goto lab_0x406cb0;\n            } else {\n                // 0x406beb\n                v11 = v2;\n                v7 = v2;\n                v9 = 1;\n                if ((int32_t)a3 >= 0) {\n                    goto lab_0x406c52;\n                } else {\n                    // 0x406bf3\n                    v8 = v5;\n                    v10 = 1;\n                    if ((v5 & 512) == 0) {\n                        goto lab_0x406cde;\n                    } else {\n                        int64_t v22 = a1 + 96; // 0x406c00\n                        int64_t v23 = function_40a900(v22); // 0x406c0c\n                        v8 = v5;\n                        v10 = v23 & 0xffffffff;\n                        if ((char)v23 != 0) {\n                            goto lab_0x406cde;\n                        } else {\n                            int64_t v24 = function_40a950(v22); // 0x406c24\n                            if ((int32_t)v24 < 0) {\n                                // 0x406d28\n                                v8 = (int64_t)*v3;\n                                v10 = 1;\n                                goto lab_0x406cde;\n                            } else {\n                                // 0x406c34\n                                v11 = v24 & 0xffffffff;\n                                v7 = v24;\n                                v9 = 1;\n                                goto lab_0x406c52;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406c40:\n    if (v6 != 0) {\n        goto lab_0x406cb0;\n    } else {\n        // 0x406c44\n        v11 = v2;\n        v7 = v2;\n        v9 = 0;\n        v8 = v5;\n        v10 = 0;\n        if ((int32_t)a3 < 0) {\n            goto lab_0x406cde;\n        } else {\n            goto lab_0x406c52;\n        }\n    }\n  lab_0x406cb0:\n    // 0x406cb0\n    if ((v5 & 512) == 0) {\n        // 0x406cbf\n        return 0;\n    }\n    int32_t fd = a3; // 0x406cb9\n    if (fd >= 0) {\n        // 0x406d18\n        close(fd);\n        // 0x406cbf\n        return 0;\n    }\n    // 0x406cbf\n    return 0;\n  lab_0x406cde:;\n    int64_t v25 = function_406b50(*(int32_t *)(a1 + 44), v8, v1); // 0x406ce8\n    v11 = v2;\n    v7 = v25;\n    v9 = v10;\n    if ((int32_t)v25 < 0) {\n        // 0x406cbf\n        return 0xffffffff;\n    }\n    goto lab_0x406c52;\n  lab_0x406c52:;\n    int32_t fd2 = v7; // 0x406c57\n    int64_t v26; // bp-200, 0x406ba0\n    uint32_t v27 = __fxstat(1, fd2, (struct stat *)&v26); // 0x406c5f\n    int64_t v28 = 0xffffffff; // 0x406c68\n    if (v27 != 0) {\n        goto lab_0x406c93;\n    } else {\n        // 0x406c6a\n        if (*(int64_t *)(a2 + 120) != v26) {\n            goto lab_0x406c83;\n        } else {\n            // 0x406c75\n            int64_t v29; // 0x406ba0\n            if (*(int64_t *)(a2 + 128) == v29) {\n                // 0x406d00\n                if ((*(char *)(a1 + 73) & 2) != 0) {\n                    // 0x406d38\n                    function_4069b0(a1, v7 & 0xffffffff, v9 % 256 ^ 1);\n                    // 0x406cbf\n                    return (int64_t)v27 & 0xffffffff;\n                }\n                // 0x406d07\n                v28 = fchdir(fd2);\n                goto lab_0x406c93;\n            } else {\n                goto lab_0x406c83;\n            }\n        }\n    }\n  lab_0x406c93:\n    // 0x406c93\n    if ((int32_t)v11 < 0) {\n        int32_t * v30 = __errno_location(); // 0x406c97\n        close(fd2);\n    }\n    // 0x406cbf\n    return v28 & 0xffffffff;\n  lab_0x406c83:\n    // 0x406c83\n    *__errno_location() = 2;\n    v28 = 0xffffffff;\n    goto lab_0x406c93;\n}\n"
        },
        {
            "funcName": "function_406d70",
            "funcStartAddr": "406d70",
            "funcEndAddr": "406e1f",
            "decompiledFuncCode": "int64_t function_406d70(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) == 0) {\n        int64_t result = function_409560(a2, a3 + 120); // 0x406df8\n        if ((char)result == 0) {\n            // 0x406de1\n            return 1;\n        }\n        // 0x406e01\n        *(int64_t *)a3 = a3;\n        *(int16_t *)(a3 + 112) = 2;\n        return result;\n    }\n    int64_t * mem = malloc(24); // 0x406d87\n    if (mem == NULL) {\n        // 0x406de1\n        return 0;\n    }\n    int64_t v1 = (int64_t)mem; // 0x406d87\n    *(int64_t *)(v1 + 16) = a3;\n    *mem = *(int64_t *)(a3 + 120);\n    *(int64_t *)(v1 + 8) = *(int64_t *)(a3 + 128);\n    int64_t v2 = function_40a6c0(a2, v1); // 0x406db6\n    if (v2 == v1) {\n        // 0x406de1\n        return 1;\n    }\n    // 0x406dc3\n    free(mem);\n    int64_t result2 = 0; // 0x406dce\n    if (v2 != 0) {\n        // 0x406dd0\n        *(int16_t *)(a3 + 112) = 2;\n        *(int64_t *)a3 = *(int64_t *)(v2 + 16);\n        result2 = 1;\n    }\n    // 0x406de1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406e20",
            "funcStartAddr": "406e20",
            "funcEndAddr": "406eb6",
            "decompiledFuncCode": "int64_t function_406e20(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) != 0) {\n        // 0x406e60\n        free((int64_t *)function_40a700(a2));\n        return &g60;\n    }\n    int64_t result = *(int64_t *)(a3 + 8); // 0x406e2f\n    if (result == 0) {\n        // 0x406e59\n        return 0;\n    }\n    // 0x406e38\n    if (*(int64_t *)(result + 88) < 0) {\n        // 0x406e59\n        return result;\n    }\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x406e9c\n    int64_t result2 = result; // 0x406ea0\n    if (*v1 == *(int64_t *)(a3 + 120)) {\n        // 0x406ea2\n        result2 = *(int64_t *)(result + 128);\n        *v1 = *(int64_t *)(result + 120);\n        *(int64_t *)a2 = result2;\n    }\n    // 0x406e59\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406ec0",
            "funcStartAddr": "406ec0",
            "funcEndAddr": "407873",
            "decompiledFuncCode": "int64_t function_406ec0(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // 0x406ed4\n    int64_t * dirp2 = (int64_t *)(a1 + 24); // 0x406ed8\n    int64_t dirp = *dirp2; // 0x406ed8\n    int64_t v2; // 0x406ec0\n    int32_t * v3; // 0x406ec0\n    int64_t v4; // 0x406ec0\n    int64_t v5; // 0x406ec0\n    int64_t v6; // 0x406ec0\n    int64_t v7; // 0x406ec0\n    int64_t v8; // 0x406ec0\n    int64_t v9; // 0x406ec0\n    char v10; // 0x406ec0\n    int64_t v11; // 0x406ec0\n    int64_t v12; // 0x406ec0\n    int64_t v13; // 0x4072f6\n    int64_t v14; // 0x406ec0\n    int64_t v15; // 0x407335\n    int32_t * v16; // 0x406ec0\n    int64_t v17; // 0x407342\n    int32_t v18; // 0x407346\n    if (dirp == 0) {\n        // 0x4072b0\n        v14 = a1 + 72;\n        v16 = (int32_t *)v14;\n        uint32_t v19 = *v16; // 0x4072b0\n        uint64_t v20 = (int64_t)v19; // 0x4072b0\n        v5 = 0;\n        if ((v19 & 16) != 0) {\n            // 0x4072bb\n            v5 = 0x20000;\n            if (v20 % 2 != 0) {\n                // 0x407490\n                v5 = 0x20000 * (int64_t)(*(int64_t *)(a1 + 88) != 0);\n            }\n        }\n        int64_t v21 = *(int64_t *)(a1 + 48); // 0x4072cf\n        int64_t v22 = 0xffffff9c; // 0x4072e8\n        if ((v20 & 516) == 512) {\n            // 0x4072ea\n            v22 = (int64_t)*(int32_t *)(a1 + 44);\n        }\n        int64_t v23 = 128 * v20 & 0x40000 | v5 & 0xfff60000 | 0x90900; // 0x4072ee\n        v13 = function_40af10(v22, v21, (int32_t)v23, v5);\n        int32_t fd = v13; // 0x4072fd\n        if (fd < 0) {\n            goto lab_0x407632;\n        } else {\n            struct __dirstream * v24 = fdopendir(fd); // 0x407307\n            if (v24 == NULL) {\n                int32_t * v25 = __errno_location(); // 0x40761c\n                close(fd);\n                goto lab_0x407632;\n            } else {\n                int16_t * v26 = (int16_t *)(a1 + 112); // 0x407315\n                *dirp2 = (int64_t)v24;\n                if (*v26 == 11) {\n                    // 0x4076cc\n                    *v26 = (int16_t)function_406450(a1, a1, 0);\n                    v8 = a1;\n                } else {\n                    int32_t v27 = *v16; // 0x407325\n                    v8 = v21;\n                    if ((v27 & 256) != 0) {\n                        int64_t v28 = a1 + 88; // 0x407680\n                        function_406e20(v27, v28, a1);\n                        function_406450(a1, a1, 0);\n                        int64_t v29 = function_406d70(*v16, v28, a1); // 0x4076a6\n                        v8 = v28;\n                        if ((char)v29 == 0) {\n                            // 0x4076b3\n                            *__errno_location() = 12;\n                          lab_0x407472:\n                            // 0x407472\n                            return 0;\n                        }\n                    }\n                }\n                // 0x407335\n                v15 = a1 + 64;\n                v17 = *(int64_t *)v15 == 0 ? 0x186a0 : -1;\n                v18 = v1;\n                if (v18 == 2) {\n                    goto lab_0x407670;\n                } else {\n                    // 0x407356\n                    if ((*v16 & 56) == 24) {\n                        // 0x4074a2\n                    } else {\n                        // 0x407366\n                        goto lab_0x407375;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x406eea\n        if (dirfd((struct __dirstream *)dirp) < 0) {\n            // 0x40774d\n            closedir((struct __dirstream *)*dirp2);\n            *dirp2 = 0;\n            if ((int32_t)v1 != 3) {\n                // 0x407472\n                return 0;\n            }\n            goto lab_0x407769;\n        } else {\n            int64_t v30 = a1 + 72;\n            int32_t * v31 = (int32_t *)v30;\n            v3 = v31;\n            v2 = v30;\n            v11 = -1;\n            v7 = a2;\n            if (*(int64_t *)(a1 + 64) == 0) {\n                // 0x407658\n                v4 = v30;\n                v12 = 0x186a0;\n                v10 = 1;\n                v9 = a2;\n                v6 = (int64_t)*v31;\n                goto lab_0x406f14;\n            } else {\n                goto lab_0x406f0b;\n            }\n        }\n    }\n  lab_0x407420_2:;\n    // 0x407420\n    int64_t v32; // 0x407044\n    free((int64_t *)v32);\n    int64_t v33; // 0x406ec0\n    function_406790(v33);\n    closedir((struct __dirstream *)*dirp2);\n    *dirp2 = 0;\n    *(int16_t *)(a1 + 112) = 7;\n    int32_t * v34; // 0x406ec0\n    *v34 = *v34 | 0x4000;\n    return 0;\n  lab_0x40719c_2:;\n    // 0x40719c\n    int64_t v35; // 0x406ec0\n    int64_t v36 = v35; // 0x4071a9\n    int64_t v37; // 0x406ec0\n    int64_t v38 = v37; // 0x4071a9\n    int64_t v39; // 0x406ec0\n    int64_t v40 = v39; // 0x4071a9\n    char * v41; // 0x406ec0\n    char * v42 = v41; // 0x4071a9\n    int64_t v43 = v35; // 0x4071a9\n    int64_t result2 = v37; // 0x4071a9\n    int64_t v44 = v39; // 0x4071a9\n    char v45; // 0x406ec0\n    if (v45 == 0) {\n        goto lab_0x4074f1;\n    } else {\n        goto lab_0x4071af;\n    }\n  lab_0x40702c:;\n    // 0x40702c\n    char * str; // 0x406ec0\n    uint64_t len = (int64_t)strlen(str); // 0x407033\n    int64_t v46; // 0x406ec0\n    v32 = function_406700(a1, v46, len);\n    if (v32 == 0) {\n        goto lab_0x407420_2;\n    }\n    // 0x407055\n    int64_t v47; // 0x406ec0\n    int64_t v48 = v47; // 0x40705a\n    char v49; // 0x406ec0\n    char v50 = v49; // 0x40705a\n    int64_t v51; // 0x406ec0\n    int64_t v52 = v51; // 0x40705a\n    int64_t v53 = a1; // 0x40705a\n    int64_t v54; // 0x406ec0\n    int64_t v55; // 0x406ec0\n    int64_t v56; // 0x406f62\n    int64_t * v57; // 0x406f62\n    int64_t v58; // 0x406ec0\n    int64_t * v59; // 0x406ec0\n    if (v51 <= len) {\n        char v60 = function_406a80(v58, v56, v55 + 2 + len);\n        if (v60 == 0) {\n            goto lab_0x407420_2;\n        }\n        int64_t v61 = *v59; // 0x407120\n        char v62 = v49; // 0x407129\n        int64_t v63 = v47; // 0x407129\n        if (v61 != *v59) {\n            // 0x40712f\n            v63 = (*v41 & 4) == 0 ? v47 : v61 + v54;\n            v62 = v60;\n        }\n        // 0x407143\n        v48 = v63;\n        v50 = v62;\n        v52 = *v57 - v54;\n        v53 = v58;\n    }\n    uint64_t v64 = v54 + len; // 0x407063\n    int32_t * v65; // 0x406ffa\n    if (v64 < len) {\n        // 0x407820\n        free((int64_t *)v32);\n        function_406790(v33);\n        closedir((struct __dirstream *)*dirp2);\n        *dirp2 = 0;\n        *(int16_t *)(a1 + 112) = 7;\n        *v34 = *v34 | 0x4000;\n        *v65 = 36;\n        goto lab_0x407472;\n    }\n    int64_t v66 = v52;\n    v45 = v50;\n    v35 = v48;\n    int64_t v67 = v32 + 264; // 0x407073\n    int64_t * v68; // 0x406f77\n    *(int64_t *)(v32 + 88) = *v68 + 1;\n    *(int64_t *)(v32 + 72) = v64;\n    *(int64_t *)(v32 + 8) = v53;\n    struct dirent * v69; // 0x40700b\n    *(int64_t *)(v32 + 128) = *(int64_t *)v69;\n    int32_t v70 = *v34; // 0x407093\n    int32_t v71; // 0x406ec0\n    if ((v70 & 4) != 0) {\n        // 0x407160\n        *(int64_t *)(v32 + 48) = *(int64_t *)(v32 + 56);\n        int64_t v72 = *(int64_t *)(v32 + 96); // 0x40716d\n        memmove((int64_t *)v35, (int64_t *)v67, (int32_t)v72 + 1);\n        v71 = *v34;\n    } else {\n        // 0x40709e\n        *(int64_t *)(v32 + 48) = v67;\n        v71 = v70;\n    }\n    int64_t v73 = v71;\n    int64_t v74; // 0x406ec0\n    int64_t v75; // 0x406ec0\n    int64_t v76; // 0x406ec0\n    int64_t v77; // 0x406ec0\n    int64_t v78; // 0x4070bc\n    int64_t v79; // 0x4070bc\n    int64_t v80; // 0x406ec0\n    int64_t v81; // 0x40700b\n    if (*(int64_t *)v80 != 0 == (v73 & 1024) == 0) {\n        // 0x407288\n        *(int16_t *)(v32 + 112) = (int16_t)function_406450(a1, v32, 0);\n        v76 = v32;\n        goto lab_0x406fb7;\n    } else {\n        unsigned char v82 = *(char *)(v81 + 18); // 0x4070b2\n        int64_t v83 = v82; // 0x4070ba\n        v78 = v83 + 0xffffffff;\n        v79 = v78 & 0xffffffff;\n        v77 = v83;\n        if ((v73 & 24) == 24) {\n            unsigned char v84 = v82 & -5;\n            v77 = 0;\n            if (v84 == 0) {\n                goto lab_0x4070c8;\n            } else {\n                int64_t v85 = v84; // 0x407250\n                *(int16_t *)(v32 + 112) = 11;\n                if ((int32_t)v78 < 12) {\n                    int32_t v86 = *(int32_t *)(4 * v79 + (int64_t)&g11); // 0x407408\n                    *(int32_t *)(v32 + 144) = v86;\n                    v74 = 1;\n                    v75 = v85;\n                } else {\n                    // 0x40726f\n                    *(int32_t *)(v32 + 144) = 0;\n                    v74 = 1;\n                    v75 = v85;\n                }\n                goto lab_0x406fb0;\n            }\n        } else {\n            goto lab_0x4070c8;\n        }\n    }\n  lab_0x406fb7:;\n    int64_t v87 = v76;\n    *(int64_t *)(v32 + 16) = 0;\n    int64_t v88; // 0x406ec0\n    v39 = v88 + 1;\n    int64_t v89; // 0x406ec0\n    int64_t v90; // 0x406ec0\n    int64_t v91; // 0x406ec0\n    int64_t v92; // 0x406ec0\n    int64_t v93; // 0x406ec0\n    int64_t v94; // 0x406ec0\n    char v95; // 0x406ec0\n    int64_t v96; // 0x406ec0\n    if (v33 == 0) {\n        // 0x407188\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v32;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v32;\n        if (v39 >= v12) {\n            goto lab_0x40719c_2;\n        }\n    } else {\n        // 0x406fcb\n        *(int64_t *)(v94 + 16) = v32;\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v33;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v33;\n        if (v39 >= v12) {\n            goto lab_0x40719c_2;\n        }\n    }\n    goto lab_0x406fe3;\n  lab_0x4070c8:\n    // 0x4070c8\n    *(int16_t *)(v32 + 112) = 11;\n    if ((int32_t)v78 < 12) {\n        int32_t v166 = *(int32_t *)(4 * v79 + (int64_t)&g11); // 0x4070db\n        *(int32_t *)(v32 + 144) = v166;\n        v74 = 2;\n        int64_t v167; // 0x406ec0\n        v75 = v167;\n    } else {\n        // 0x406fa0\n        *(int32_t *)(v32 + 144) = 0;\n        v74 = 2;\n        v75 = v77;\n    }\n    goto lab_0x406fb0;\n  lab_0x406fe3:;\n    int64_t v97 = *dirp2; // 0x406fed\n    int64_t dirp3 = v97; // 0x406ff4\n    int64_t v98 = v91; // 0x406ff4\n    int64_t v99 = v90; // 0x406ff4\n    int64_t v100 = v93; // 0x406ff4\n    int64_t v101 = v89; // 0x406ff4\n    int64_t v102 = v92; // 0x406ff4\n    char v103 = v95; // 0x406ff4\n    int64_t v104 = v96; // 0x406ff4\n    int64_t v105 = v96; // 0x406ff4\n    char v106 = v95; // 0x406ff4\n    int64_t v107 = v93; // 0x406ff4\n    int64_t v108 = v90; // 0x406ff4\n    if (v97 == 0) {\n        goto lab_0x4074e6;\n    }\n    goto lab_0x406ffa;\n  lab_0x406fb0:\n    // 0x406fb0\n    *(int64_t *)(v32 + 168) = v74;\n    v76 = v75;\n    goto lab_0x406fb7;\n  lab_0x407632:\n    // 0x407632\n    *dirp2 = 0;\n    if ((int32_t)v1 != 3) {\n        // 0x407472\n        return 0;\n    }\n    goto lab_0x407769;\n  lab_0x407769:\n    // 0x407769\n    *(int16_t *)(a1 + 112) = 4;\n    *(int32_t *)(a1 + 64) = *__errno_location();\n    // 0x407472\n    return 0;\n  lab_0x406f0b:\n    // 0x406f0b\n    v4 = v2;\n    v12 = v11;\n    v10 = 1;\n    v9 = v7;\n    v6 = (int64_t)*v3;\n    goto lab_0x406f14;\n  lab_0x407670:\n    // 0x407670\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v8;\n    v6 = (int64_t)*v16;\n    goto lab_0x406f14;\n  lab_0x406f14:;\n    int64_t v111 = *(int64_t *)v4; // 0x406f14\n    char v112 = *(char *)(v111 - 1 + *(int64_t *)(a1 + 56)); // 0x406f2a\n    v55 = v111 + (int64_t)(v112 == 47);\n    int64_t v113 = 0; // 0x406f4b\n    if ((v6 & 4) != 0) {\n        int64_t v114 = *(int64_t *)(a1 + 32) + v55; // 0x406f52\n        *(char *)v114 = 47;\n        v113 = v114 + 1;\n    }\n    // 0x406f62\n    v54 = v111 + (int64_t)(v112 != 47);\n    v56 = a1 + 48;\n    v57 = (int64_t *)v56;\n    v68 = (int64_t *)(a1 + 88);\n    int64_t v115 = *dirp2; // 0x406fed\n    if (v115 == 0) {\n        // 0x406f62\n        v42 = (char *)v4;\n        v43 = v113;\n        result2 = 0;\n        v44 = 0;\n        goto lab_0x4074f1;\n    } else {\n        // 0x406ffa\n        v41 = (char *)v4;\n        v58 = a1 + 32;\n        v59 = (int64_t *)v58;\n        v34 = (int32_t *)v4;\n        v80 = a1 + 64;\n        dirp3 = v115;\n        v98 = v9;\n        v99 = 0;\n        v100 = 0;\n        v101 = 0;\n        v102 = *v57 - v54;\n        v103 = 0;\n        v104 = v113;\n        while (true) {\n          lab_0x406ffa:\n            // 0x406ffa\n            v47 = v104;\n            v49 = v103;\n            v33 = v100;\n            v88 = v99;\n            int64_t v109 = v98;\n            v65 = __errno_location();\n            *v65 = 0;\n            v69 = readdir((struct __dirstream *)dirp3);\n            if (v69 == NULL) {\n                // break -> 0x4075d0\n                break;\n            }\n            // 0x40701c\n            v51 = v102;\n            v94 = v101;\n            v81 = (int64_t)v69;\n            v46 = v81 + 19;\n            str = (char *)v46;\n            if ((*v41 & 32) != 0) {\n                goto lab_0x40702c;\n            } else {\n                // 0x407022\n                if (*str == 46) {\n                    int64_t v110 = v81 + 20; // 0x407230\n                    v96 = v47;\n                    v95 = v49;\n                    v92 = v51;\n                    v93 = v33;\n                    v90 = v88;\n                    v91 = v109;\n                    v89 = v94;\n                    if (*(char *)v110 == 0) {\n                        goto lab_0x406fe3;\n                    } else {\n                        // 0x407236\n                        v96 = v47;\n                        v95 = v49;\n                        v92 = v51;\n                        v93 = v33;\n                        v90 = v88;\n                        v91 = v109;\n                        v89 = v94;\n                        if (*(int16_t *)v110 != 46) {\n                            goto lab_0x40702c;\n                        } else {\n                            goto lab_0x406fe3;\n                        }\n                    }\n                } else {\n                    goto lab_0x40702c;\n                }\n            }\n        }\n        int32_t v116 = *v65; // 0x4075d0\n        if (v116 != 0) {\n            // 0x4075e0\n            *(int32_t *)v80 = v116;\n            *(int16_t *)(a1 + 112) = (v88 | dirp) == 0 ? 4 : 7;\n        }\n        int64_t dirp4 = *dirp2; // 0x4075fd\n        v105 = v47;\n        v106 = v49;\n        v107 = v33;\n        v108 = v88;\n        if (dirp4 != 0) {\n            // 0x40760a\n            closedir((struct __dirstream *)dirp4);\n            *dirp2 = 0;\n            v105 = v47;\n            v106 = v49;\n            v107 = v33;\n            v108 = v88;\n        }\n      lab_0x4074e6:\n        // 0x4074e6\n        v36 = v105;\n        v38 = v107;\n        v40 = v108;\n        v42 = v41;\n        v43 = v105;\n        result2 = v107;\n        v44 = v108;\n        if (v106 != 0) {\n            goto lab_0x4071af;\n        } else {\n            goto lab_0x4074f1;\n        }\n    }\n  lab_0x407375:;\n    int64_t v117 = v13 & 0xffffffff; // 0x4072fb\n    int64_t v118 = v18 == 3;\n    char v119 = 1;\n    int64_t v120 = v117; // 0x40737a\n    int16_t * v121; // 0x406ec0\n    int16_t v122; // 0x406ec0\n    int64_t v123; // 0x406ec0\n    int64_t v124; // 0x406ec0\n    int64_t v125; // 0x406ec0\n    int64_t v126; // 0x406ec0\n    int64_t v127; // 0x406ec0\n    if ((*(char *)(a1 + 73) & 2) != 0) {\n        int64_t v128 = function_40b030(v117, 1030, 3, v5); // 0x4076f1\n        int64_t v129 = v128 & 0xffffffff; // 0x4076f6\n        v120 = v129;\n        if ((int32_t)v128 >= 0) {\n            goto lab_0x407380;\n        } else {\n            int16_t * v130 = (int16_t *)(a1 + 114);\n            int64_t dirp5 = *dirp2; // 0x407705\n            int16_t v131 = *v130 | 1;\n            v121 = v130;\n            v123 = v129;\n            v122 = v131;\n            v126 = 1030;\n            v124 = dirp5;\n            if (v119 != 0 == (v118 != 0)) {\n                goto lab_0x4073ad;\n            } else {\n                // 0x40771a\n                *v130 = v131;\n                closedir((struct __dirstream *)dirp5);\n                v127 = 1030;\n                v125 = (int64_t)*v16;\n                goto lab_0x4073ef;\n            }\n        }\n    } else {\n        goto lab_0x407380;\n    }\n  lab_0x4074f1:\n    // 0x4074f1\n    if ((*v42 & 4) != 0) {\n        int64_t v132 = *v57; // 0x4074fd\n        *(char *)(v43 + (int64_t)(v44 == 0 | v132 == v54)) = 0;\n    }\n    // 0x407516\n    if (dirp != 0 || v10 == 0) {\n        goto lab_0x407588;\n    } else {\n        // 0x407525\n        if ((int32_t)v1 == 1 || v44 == 0) {\n            // 0x407568\n            int64_t v133; // 0x406ec0\n            if (*v68 != 0) {\n                int64_t v134 = function_406ba0(a1, *(int64_t *)(a1 + 8), 0xffffffff, (int32_t)\"..\"); // 0x40773e\n                v133 = v134;\n            } else {\n                // 0x407573\n                v133 = function_406a20(a1);\n            }\n            // 0x407580\n            if ((int32_t)v133 != 0) {\n                // 0x407784\n                *(int16_t *)(a1 + 112) = 7;\n                int32_t * v135 = (int32_t *)v4; // 0x407793\n                *v135 = *v135 | 0x4000;\n                function_406790(result2);\n                // 0x407472\n                return 0;\n            }\n            goto lab_0x407588;\n        } else {\n            goto lab_0x407531;\n        }\n    }\n  lab_0x4071af:;\n    int64_t v136 = *(int64_t *)(a1 + 8); // 0x4071af\n    int64_t v137 = *v59; // 0x4071b3\n    if (v136 != 0) {\n        int64_t * v138 = (int64_t *)(v136 + 48); // 0x4071c0\n        int64_t v139 = *v138; // 0x4071c0\n        int64_t * v140 = (int64_t *)(v136 + 56);\n        if (v139 != v136 + 264) {\n            // 0x4071d0\n            *v138 = v139 + v137 - *v140;\n        }\n        // 0x4071db\n        *v140 = v137;\n        int64_t v141 = *(int64_t *)(v136 + 16); // 0x4071df\n        int64_t v142 = v141; // 0x4071e6\n        while (v141 != 0) {\n            // 0x4071c0\n            v138 = (int64_t *)(v142 + 48);\n            v139 = *v138;\n            v140 = (int64_t *)(v142 + 56);\n            if (v139 != v142 + 264) {\n                // 0x4071d0\n                *v138 = v139 + v137 - *v140;\n            }\n            // 0x4071db\n            *v140 = v137;\n            v141 = *(int64_t *)(v142 + 16);\n            v142 = v141;\n        }\n    }\n    // 0x4071e8\n    v42 = v41;\n    v43 = v36;\n    result2 = v38;\n    v44 = v40;\n    if (*(int64_t *)(v38 + 88) >= 0) {\n        int64_t * v143 = (int64_t *)(v38 + 48); // 0x4071fe\n        int64_t v144 = *v143; // 0x4071fe\n        int64_t * v145 = (int64_t *)(v38 + 56);\n        if (v144 != v38 + 264) {\n            // 0x40720e\n            *v143 = v144 + v137 - *v145;\n        }\n        int64_t v146 = *(int64_t *)(v38 + 16); // 0x407219\n        *v145 = v137;\n        int64_t v147 = v146; // 0x407224\n        if (v146 == 0) {\n            // 0x407226\n            v147 = *(int64_t *)(v38 + 8);\n        }\n        // 0x4071f0\n        v42 = v41;\n        v43 = v36;\n        result2 = v38;\n        v44 = v40;\n        while (*(int64_t *)(v147 + 88) >= 0) {\n            int64_t v148 = v147;\n            v143 = (int64_t *)(v148 + 48);\n            v144 = *v143;\n            v145 = (int64_t *)(v148 + 56);\n            if (v144 != v148 + 264) {\n                // 0x40720e\n                *v143 = v144 + v137 - *v145;\n            }\n            // 0x407219\n            v146 = *(int64_t *)(v148 + 16);\n            *v145 = v137;\n            v147 = v146;\n            if (v146 == 0) {\n                // 0x407226\n                v147 = *(int64_t *)(v148 + 8);\n            }\n            // 0x4071f0\n            v42 = v41;\n            v43 = v36;\n            result2 = v38;\n            v44 = v40;\n        }\n    }\n    goto lab_0x4074f1;\n  lab_0x407380:;\n    int64_t v149 = function_406ba0(a1, a1, v120, 0); // 0x40738a\n    v3 = v16;\n    v2 = v14;\n    v11 = v17;\n    v7 = a1;\n    int16_t * v150; // 0x406ec0\n    int16_t v151; // 0x406ec0\n    int64_t v152; // 0x406ec0\n    int64_t dirp6; // 0x406ec0\n    int64_t v153; // 0x406ec0\n    if ((int32_t)v149 == 0) {\n        goto lab_0x406f0b;\n    } else {\n        int16_t * v154 = (int16_t *)(a1 + 114);\n        int64_t v155 = *dirp2; // 0x40739c\n        int16_t v156 = *v154 | 1;\n        v121 = v154;\n        v123 = v120;\n        v122 = v156;\n        v126 = a1;\n        v124 = v155;\n        v150 = v154;\n        v152 = v120;\n        v151 = v156;\n        v153 = a1;\n        dirp6 = v155;\n        if (v119 == 0 || v118 == 0) {\n            goto lab_0x4073c2;\n        } else {\n            goto lab_0x4073ad;\n        }\n    }\n  lab_0x407588:\n    // 0x407588\n    if (v44 == 0) {\n        if ((int32_t)v1 != 3) {\n            // 0x407598\n            function_406790(result2);\n            // 0x407472\n            return 0;\n        }\n        int16_t * v157 = (int16_t *)(a1 + 112); // 0x4077f8\n        switch (*v157) {\n            case 4: {\n            }\n            case 7: {\n                // 0x407598\n                function_406790(result2);\n                // 0x407472\n                return 0;\n            }\n        }\n        // 0x407811\n        *v157 = 6;\n        // 0x407598\n        function_406790(result2);\n        // 0x407472\n        return 0;\n    }\n    goto lab_0x407531;\n  lab_0x407531:;\n    int64_t * v158 = (int64_t *)(a1 + 64); // 0x407531\n    int64_t v159 = *v158; // 0x407531\n    int64_t v160 = v159; // 0x40753c\n    if (v44 >= 0x2711) {\n        if (v159 != 0) {\n            // 0x407547\n            uint64_t v161; // 0x406ec0\n            int64_t v162; // 0x406ec0\n            return function_406600(a1, v162, v161);\n        }\n        // 0x4077ae\n        int64_t v163; // 0x406ec0\n        switch (function_406820(a1, v163)) {\n            case 0x1021994: {\n            }\n            case 0x6969: {\n                // 0x4075b0\n                v160 = *v158;\n                // break -> 0x4075b8\n                break;\n            }\n            default: {\n                // 0x4077ce\n                *v158 = 0x406420;\n                int64_t result = function_406600(a1, result2, v44); // 0x4077e1\n                *v158 = 0;\n                // 0x407472\n                return result;\n            }\n        }\n    }\n    // 0x4075b8\n    if (v44 == 1 || v160 == 0) {\n        // 0x407472\n        return result2;\n    }\n    // 0x407547\n    return function_406600(a1, result2, v44);\n  lab_0x4073ad:\n    // 0x4073ad\n    *(int32_t *)v15 = *__errno_location();\n    v150 = v121;\n    v152 = v123;\n    v151 = v122;\n    v153 = v126;\n    dirp6 = v124;\n    goto lab_0x4073c2;\n  lab_0x4073c2:\n    // 0x4073c2\n    *v150 = v151;\n    closedir((struct __dirstream *)dirp6);\n    uint32_t v164 = *v16; // 0x4073cc\n    int64_t v165 = v164; // 0x4073cc\n    *dirp2 = 0;\n    v127 = v153;\n    v125 = v165;\n    if ((v164 & 512) != 0) {\n        uint32_t fd2 = (int32_t)v152; // 0x4073e0\n        v127 = v153;\n        v125 = v165;\n        if (fd2 >= 0) {\n            // 0x4073e4\n            close(fd2);\n            v127 = v153;\n            v125 = (int64_t)*v16;\n        }\n    }\n    goto lab_0x4073ef;\n  lab_0x4073ef:\n    // 0x4073ef\n    *dirp2 = 0;\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v127;\n    v6 = v125;\n    goto lab_0x406f14;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "407880",
            "funcEndAddr": "407c19",
            "decompiledFuncCode": "int64_t fts_open(int64_t a1, uint32_t a2, int64_t a3) {\n    int64_t v1 = a2;\n    if ((v1 & 18) == 0 || a2 >= 0x2000 || (v1 & 516) == 516) {\n        // 0x407b20\n        *__errno_location() = 22;\n        // 0x407b0d\n        return 0;\n    }\n    int64_t * mem = calloc(128, 1); // 0x4078c8\n    int64_t result = (int64_t)mem; // 0x4078c8\n    if (mem == NULL) {\n        // 0x407b0d\n        return result;\n    }\n    // 0x4078d9\n    *(int64_t *)(result + 64) = a3;\n    if ((v1 & 2) != 0) {\n        // 0x407b60\n        *(int32_t *)(result + 72) = a2 & -517 | 4;\n    } else {\n        // 0x4078e7\n        *(int32_t *)(result + 72) = a2;\n    }\n    int32_t * v2 = (int32_t *)(result + 44); // 0x4078ee\n    *v2 = -100;\n    int64_t v3 = a1; // 0x407904\n    uint64_t v4 = 0;\n    uint64_t len = (int64_t)strlen((char *)128); // 0x407908\n    int64_t v5 = v4 < len ? len : v4; // 0x407910\n    v3 += 8;\n    int64_t str = *(int64_t *)v3; // 0x407918\n    while (str != 0) {\n        // 0x407908\n        v4 = v5;\n        len = (int64_t)strlen((char *)str);\n        v5 = v4 < len ? len : v4;\n        v3 += 8;\n        str = *(int64_t *)v3;\n    }\n    uint64_t v6 = v5 + 1; // 0x407920\n    int64_t v7 = result + 32; // 0x407939\n    char v8 = function_406a80(v7, result + 48, v6 > 0x1000 ? v6 : 0x1000); // 0x407942\n    if (v8 == 0) {\n        // 0x407b4b\n        free(mem);\n        // 0x407b0d\n        return 0;\n    }\n    int64_t v9; // 0x407880\n    int64_t v10; // 0x407880\n    int64_t v11; // 0x407880\n    char v12; // 0x407880\n    char * v13; // 0x407880\n    char * v14; // 0x40796d\n    if (v7 == 0) {\n        // 0x407b70\n        v14 = NULL;\n        v10 = 0;\n        v13 = NULL;\n        v9 = 0;\n        if (a3 != 0) {\n            goto lab_0x407993;\n        } else {\n            goto lab_0x407abc;\n        }\n    } else {\n        int64_t v15 = function_406700(result, (int64_t)&g14, 0); // 0x407965\n        if (v15 == 0) {\n            goto lab_0x407b42;\n        } else {\n            // 0x40797b\n            v14 = (char *)v15;\n            *(int64_t *)(v15 + 88) = -1;\n            *(int64_t *)(v15 + 104) = -1;\n            v10 = result;\n            v12 = v8;\n            v11 = result;\n            if (a3 == 0) {\n                goto lab_0x4079a0;\n            } else {\n                goto lab_0x407993;\n            }\n        }\n    }\n  lab_0x407a38:;\n    // 0x407a38\n    int64_t v16; // 0x407880\n    int64_t v17; // 0x4079d9\n    *(int64_t *)(v17 + 16) = v16;\n    int64_t v18; // 0x407880\n    int64_t v19 = v18; // 0x407a3c\n    int64_t v20 = v17; // 0x407a3c\n    goto lab_0x407a3f;\n  lab_0x407a3f:;\n    int64_t v21 = v20;\n    int64_t v22; // 0x407880\n    int64_t v23 = v22 + 1; // 0x407a3f\n    int64_t v24 = *(int64_t *)(8 * v23 + a1); // 0x407a43\n    int64_t v25 = v19; // 0x407a4b\n    int64_t v26 = v23; // 0x407a4b\n    int64_t v27 = v21; // 0x407a4b\n    int64_t v28 = v24; // 0x407a4b\n    if (v24 == 0) {\n        // 0x407aa0\n        v13 = v14;\n        v9 = v21;\n        if (a3 == 0 || v23 < 2) {\n            goto lab_0x407abc;\n        } else {\n            // 0x407aab\n            v13 = v14;\n            v9 = function_406600(result, v21, v23);\n            goto lab_0x407abc;\n        }\n    }\n    goto lab_0x407a4d;\n  lab_0x407bd0:\n    // 0x407bd0\n    *(int64_t *)(v18 + 16) = v17;\n    v19 = v17;\n    v20 = v16;\n    goto lab_0x407a3f;\n  lab_0x407993:\n    // 0x407993\n    v12 = (char)(*(int32_t *)(result + 72) / 1024) % 2;\n    v11 = v10;\n    goto lab_0x4079a0;\n  lab_0x407abc:;\n    int64_t v35 = function_406700(result, (int64_t)&g14, 0); // 0x407ac6\n    *mem = v35;\n    char * v33 = v13; // 0x407ad1\n    int64_t v34 = v9; // 0x407ad1\n    if (v35 != 0) {\n        // 0x407ad3\n        *(int64_t *)(v35 + 16) = v9;\n        int32_t * v36 = (int32_t *)(result + 72); // 0x407adc\n        *(int16_t *)(v35 + 112) = 9;\n        v33 = v13;\n        v34 = v9;\n        if ((char)function_406af0(*v36, result + 88) != 0) {\n            uint32_t v37 = *v36; // 0x407af0\n            if ((v37 & 516) == 0) {\n                int64_t v38 = function_406b50(*v2, (int64_t)v37, (int64_t)&g5); // 0x407c00\n                int32_t v39 = v38; // 0x407c05\n                *(int32_t *)(result + 40) = v39;\n                if (v39 < 0) {\n                    int32_t v40 = *v36; // 0x407c10\n                    *v36 = v40 | 4;\n                }\n            }\n            // 0x407aff\n            function_40a8e0(result + 96, 0xffffffff);\n            // 0x407b0d\n            return result;\n        }\n    }\n    goto lab_0x407b30;\n  lab_0x407b42:\n    // 0x407b42\n    free((int64_t *)*(int64_t *)v7);\n    // 0x407b4b\n    free(mem);\n    // 0x407b0d\n    return 0;\n  lab_0x4079a0:\n    // 0x4079a0\n    v13 = v14;\n    v9 = 0;\n    if (v11 == 0) {\n        goto lab_0x407abc;\n    } else {\n        // 0x407a4d\n        v25 = 0;\n        v26 = 0;\n        v27 = 0;\n        v28 = v11;\n        while (true) {\n          lab_0x407a4d:;\n            int64_t str2 = v28;\n            v16 = v27;\n            v22 = v26;\n            v18 = v25;\n            int32_t len2 = strlen((char *)str2); // 0x407a50\n            int64_t v29 = len2; // 0x407a50\n            int64_t v30 = v29; // 0x407a59\n            if ((v1 & 0x1000) == 0 && len2 >= 3) {\n                // 0x407a6a\n                v30 = v29;\n                if (*(char *)(str2 - 1 + v29) == 47) {\n                    int64_t v31 = v29;\n                    v30 = v31;\n                    while (*(char *)(str2 - 2 + v31) == 47) {\n                        int64_t v32 = v31 - 1; // 0x407a8c\n                        v30 = v32;\n                        if (v31 == 2) {\n                            // break -> 0x4079d0\n                            break;\n                        }\n                        v31 = v32;\n                        v30 = v31;\n                    }\n                }\n            }\n            // 0x4079d0\n            v17 = function_406700(result, str2, v30);\n            v33 = v14;\n            v34 = v16;\n            if (v17 == 0) {\n                // break -> 0x407b30\n                break;\n            }\n            // 0x4079ea\n            *(int64_t *)(v17 + 88) = 0;\n            *(int64_t *)(v17 + 8) = (int64_t)v14;\n            *(int64_t *)(v17 + 48) = v17 + 264;\n            if (v12 == 0 || v16 == 0) {\n                // 0x407b90\n                *(int16_t *)(v17 + 112) = (int16_t)function_406450(result, v17, 0);\n                if (a3 != 0) {\n                    goto lab_0x407a38;\n                } else {\n                    // 0x407bab\n                    *(int64_t *)(v17 + 16) = 0;\n                    v19 = v17;\n                    v20 = v17;\n                    if (v16 != 0) {\n                        goto lab_0x407bd0;\n                    } else {\n                        goto lab_0x407a3f;\n                    }\n                }\n            } else {\n                // 0x407a1a\n                *(int64_t *)(v17 + 168) = 2;\n                *(int16_t *)(v17 + 112) = 11;\n                if (a3 == 0) {\n                    // 0x407bc8\n                    *(int64_t *)(v17 + 16) = 0;\n                    goto lab_0x407bd0;\n                } else {\n                    goto lab_0x407a38;\n                }\n            }\n        }\n        goto lab_0x407b30;\n    }\n  lab_0x407b30:\n    // 0x407b30\n    function_406790(v34);\n    free((int64_t *)v33);\n    goto lab_0x407b42;\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "407c20",
            "funcEndAddr": "407d99",
            "decompiledFuncCode": "int64_t fts_close(int64_t a1) {\n    if (a1 != 0) {\n        int64_t v1 = a1; // 0x407c34\n        int64_t v2 = a1; // 0x407c34\n        if (*(int64_t *)(a1 + 88) >= 0) {\n            while (true) {\n                int64_t v3 = v1;\n                int64_t v4 = *(int64_t *)(v3 + 16); // 0x407c4f\n                int64_t v5; // 0x407c20\n                if (v4 != 0) {\n                    // 0x407c40\n                    free((int64_t *)v3);\n                    v5 = v4;\n                    v2 = v4;\n                    if (*(int64_t *)(v4 + 88) < 0) {\n                        // break -> 0x407c6b\n                        break;\n                    }\n                } else {\n                    int64_t v6 = *(int64_t *)(v3 + 8); // 0x407c58\n                    free((int64_t *)v3);\n                    v5 = v6;\n                    v2 = v6;\n                    if (*(int64_t *)(v6 + 88) < 0) {\n                        // break -> 0x407c6b\n                        break;\n                    }\n                }\n                // 0x407c4f\n                v1 = v5;\n            }\n        }\n        // 0x407c6b\n        free((int64_t *)v2);\n    }\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x407c73\n    if (v7 != 0) {\n        // 0x407c7c\n        function_406790(v7);\n    }\n    // 0x407c81\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)*(int64_t *)(a1 + 32));\n    int32_t * v8 = (int32_t *)(a1 + 72); // 0x407c93\n    int32_t v9 = *v8; // 0x407c93\n    int32_t * v10; // 0x407c20\n    int32_t v11; // 0x407c20\n    if ((v9 & 512) == 0) {\n        // 0x407cf0\n        v11 = 0;\n        if ((v9 & 4) != 0) {\n            goto lab_0x407ca4;\n        } else {\n            int32_t * fd = (int32_t *)(a1 + 40); // 0x407cf4\n            if (fchdir(*fd) != 0) {\n                int32_t * v12 = __errno_location(); // 0x407d50\n                int32_t v13 = *v12; // 0x407d5b\n                v11 = v13;\n                v10 = v12;\n                if (close(*fd) == 0 || v13 != 0) {\n                    goto lab_0x407ca4;\n                } else {\n                    goto lab_0x407d72;\n                }\n            } else {\n                // 0x407d00\n                v11 = 0;\n                if (close(*fd) == 0) {\n                    goto lab_0x407ca4;\n                } else {\n                    // 0x407d0c\n                    v10 = __errno_location();\n                    goto lab_0x407d72;\n                }\n            }\n        }\n    } else {\n        int32_t fd2 = *(int32_t *)(a1 + 44); // 0x407c9b\n        v11 = 0;\n        if (fd2 >= 0) {\n            // 0x407d20\n            v11 = 0;\n            if (close(fd2) != 0) {\n                // 0x407d2d\n                v11 = *__errno_location();\n            }\n        }\n        goto lab_0x407ca4;\n    }\n  lab_0x407ca4:\n    // 0x407ca4\n    function_4067e0(a1 + 96);\n    int64_t v14 = *(int64_t *)(a1 + 80); // 0x407cad\n    if (v14 != 0) {\n        // 0x407cb6\n        function_40a160(v14);\n    }\n    int64_t v15 = *(int64_t *)(a1 + 88); // 0x407cbb\n    if ((*v8 & 258) == 0) {\n        // 0x407d40\n        free((int64_t *)v15);\n    } else {\n        if (v15 != 0) {\n            // 0x407ccd\n            function_40a160(v15);\n        }\n    }\n    // 0x407cd2\n    free((int64_t *)a1);\n    int64_t result = v11; // 0x407cdc\n    if (v11 != 0) {\n        // 0x407d88\n        *__errno_location() = v11;\n        result = 0xffffffff;\n    }\n    // 0x407ce2\n    return result;\n  lab_0x407d72:\n    // 0x407d72\n    v11 = *v10;\n    goto lab_0x407ca4;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "407da0",
            "funcEndAddr": "4084f9",
            "decompiledFuncCode": "int64_t fts_read(int64_t result) {\n    // 0x407da0\n    if (result == 0) {\n        // 0x407eca\n        return 0;\n    }\n    int32_t * v1 = (int32_t *)(result + 72); // 0x407db4\n    uint32_t v2 = *v1; // 0x407db4\n    if ((v2 & 0x4000) != 0) {\n        // 0x407eca\n        return 0;\n    }\n    int16_t * v3 = (int16_t *)(result + 116); // 0x407dc0\n    int16_t v4 = *v3; // 0x407dc0\n    *v3 = 3;\n    if (v4 == 1) {\n        // 0x408190\n        *(int16_t *)(result + 112) = (int16_t)function_406450(result, result, 0);\n        // 0x407eca\n        return result;\n    }\n    int16_t * v5 = (int16_t *)(result + 112); // 0x407dda\n    int16_t v6 = *v5; // 0x407dda\n    int64_t v7; // 0x407da0\n    int64_t v8; // 0x407da0\n    int64_t v9; // 0x407da0\n    int64_t v10; // 0x407da0\n    int64_t v11; // 0x407da0\n    int64_t v12; // 0x407da0\n    int64_t v13; // 0x407da0\n    if (v4 == 2) {\n        if ((v6 || 1) == 13) {\n            int16_t v14 = function_406450(result, result, 1); // 0x40813a\n            *v5 = v14;\n            if (v14 == 1) {\n                uint32_t v15 = *v1; // 0x408420\n                if ((v15 & 4) == 0) {\n                    int64_t v16 = v15; // 0x408420\n                    int64_t v17 = function_406b50(*(int32_t *)(result + 44), v16, (int64_t)&g5); // 0x40849d\n                    int32_t v18 = v17; // 0x4084a2\n                    *(int32_t *)(result + 68) = v18;\n                    if (v18 < 0) {\n                        int32_t v19 = *__errno_location(); // 0x4084ce\n                        *v5 = 7;\n                        *(int32_t *)(result + 64) = v19;\n                        *(int64_t *)result = result;\n                        // 0x407eca\n                        return result;\n                    }\n                    int16_t * v20 = (int16_t *)(result + 114); // 0x4084a9\n                    *v20 = *v20 | 2;\n                    v7 = result;\n                    v10 = &g5;\n                    v12 = v16;\n                    goto lab_0x4080d7;\n                } else {\n                    // 0x40842b\n                    *(int64_t *)result = result;\n                    v8 = result;\n                    goto lab_0x4080ee;\n                }\n            } else {\n                // 0x408148\n                *(int64_t *)result = result;\n                v11 = 1;\n                v9 = result;\n                v13 = result;\n                if (v14 != 11) {\n                    // 0x407eca\n                    return result;\n                }\n                goto lab_0x408160;\n            }\n        } else {\n            if (v6 != 1) {\n                goto lab_0x407e20;\n            } else {\n                goto lab_0x407ef7;\n            }\n        }\n    } else {\n        if (v6 != 1) {\n            goto lab_0x407e20;\n        } else {\n            if (v4 != 4) {\n                goto lab_0x407ef7;\n            } else {\n                goto lab_0x407f92;\n            }\n        }\n    }\n  lab_0x407e20:;\n    int64_t * v21 = (int64_t *)result;\n    int64_t v22 = result;\n    int64_t v23 = *(int64_t *)(v22 + 16); // 0x407e20\n    int64_t result2; // 0x407da0\n    int64_t v24; // 0x407da0\n    int64_t v25; // 0x407ff0\n    while (v23 != 0) {\n        // 0x407df8\n        *v21 = v23;\n        free((int64_t *)v22);\n        if (*(int64_t *)(v23 + 88) == 0) {\n            // 0x407fe0\n            if ((int32_t)function_406a20(result) != 0) {\n                // 0x40837f\n                *v1 = *v1 | 0x4000;\n                result2 = 0;\n                return result2;\n            } else {\n                // 0x407ff0\n                v25 = result + 88;\n                int64_t v26 = *(int64_t *)v25; // 0x407ff0\n                if ((*v1 & 258) == 0) {\n                    // 0x40838d\n                    free((int64_t *)v26);\n                    goto lab_0x40800e;\n                } else {\n                    if (v26 == 0) {\n                        goto lab_0x40800e;\n                    } else {\n                        // 0x408009\n                        function_40a160(v26);\n                        goto lab_0x40800e;\n                    }\n                }\n            }\n        }\n        int16_t * v27 = (int16_t *)(v23 + 116);\n        int16_t v28 = *v27; // 0x407e0f\n        if (v28 != 4) {\n            // 0x408090\n            v24 = v23;\n            if (v28 == 2) {\n                int16_t v29 = function_406450(result, v23, 1); // 0x4083b4\n                int16_t * v30 = (int16_t *)(v23 + 112); // 0x4083b4\n                *v30 = v29;\n                if (v29 == 1) {\n                    uint32_t v31 = *v1; // 0x408437\n                    if ((v31 & 4) != 0) {\n                        // 0x4083be\n                        *v27 = 3;\n                        v24 = v23;\n                        goto lab_0x40809a;\n                    } else {\n                        int32_t v32 = *(int32_t *)(result + 44); // 0x408446\n                        int64_t v33 = function_406b50(v32, (int64_t)v31, (int64_t)&g5); // 0x408450\n                        int32_t v34 = v33; // 0x408455\n                        *(int32_t *)(v23 + 68) = v34;\n                        if (v34 < 0) {\n                            int32_t v35 = *__errno_location(); // 0x4084eb\n                            *v30 = 7;\n                            *(int32_t *)(v23 + 64) = v35;\n                            // 0x4083be\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40809a;\n                        } else {\n                            int16_t * v36 = (int16_t *)(v23 + 114); // 0x408460\n                            *v36 = *v36 | 2;\n                            // 0x4083be\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40809a;\n                        }\n                    }\n                } else {\n                    // 0x4083be\n                    *v27 = 3;\n                    v24 = v23;\n                    goto lab_0x40809a;\n                }\n            } else {\n                goto lab_0x40809a;\n            }\n        }\n        v22 = v23;\n        v23 = *(int64_t *)(v22 + 16);\n    }\n    int64_t * v37 = (int64_t *)(v22 + 8); // 0x407e29\n    int64_t v38 = *v37; // 0x407e29\n    int64_t result6 = v38; // 0x407e32\n    if (*(int64_t *)(v38 + 24) != 0) {\n        // 0x408340\n        *v21 = v38;\n        *(char *)(*(int64_t *)(result + 32) + *(int64_t *)(v38 + 72)) = 0;\n        int64_t v39 = function_406ec0(result, 3); // 0x408359\n        if (v39 != 0) {\n            // 0x4083ef\n            free((int64_t *)v22);\n            v24 = v39;\n            goto lab_0x40809a;\n        } else {\n            // 0x40836a\n            if ((*(char *)(result + 73) & 64) != 0) {\n                // 0x407eca\n                return 0;\n            }\n            // 0x408376\n            result6 = *v37;\n            goto lab_0x407e38;\n        }\n    } else {\n        goto lab_0x407e38;\n    }\n  lab_0x407ef7:;\n    int64_t v40 = v2; // 0x407db4\n    if ((v40 & 64) == 0) {\n        goto lab_0x407f0b;\n    } else {\n        // 0x407efc\n        if (*(int64_t *)(result + 120) != *(int64_t *)(result + 24)) {\n            goto lab_0x407f92;\n        } else {\n            goto lab_0x407f0b;\n        }\n    }\n  lab_0x407e38:\n    // 0x407e38\n    *v21 = result6;\n    free((int64_t *)v22);\n    int64_t * v41 = (int64_t *)(result6 + 88); // 0x407e44\n    if (*v41 == -1) {\n        // 0x40825f\n        free((int64_t *)result6);\n        *__errno_location() = 0;\n        *v21 = 0;\n        // 0x407eca\n        return 0;\n    }\n    // 0x407e4f\n    *(char *)(*(int64_t *)(result6 + 72) + *(int64_t *)(result + 32)) = 0;\n    if (*v41 == 0) {\n        // 0x40828f\n        if ((int32_t)function_406a20(result) == 0) {\n            goto lab_0x407e86;\n        } else {\n            goto lab_0x40829f;\n        }\n    } else {\n        uint16_t v42 = *(int16_t *)(result6 + 114); // 0x407e72\n        if ((v42 & 2) != 0) {\n            int32_t v43 = *v1; // 0x408215\n            int32_t * v44 = (int32_t *)(result6 + 68); // 0x40821a\n            uint32_t fd = *v44; // 0x40821a\n            int32_t fd2 = fd; // 0x40821f\n            if ((v43 & 4) == 0) {\n                if ((v43 & 512) == 0) {\n                    // 0x4083fc\n                    if (fchdir(fd) != 0) {\n                        // 0x408405\n                        *(int32_t *)(result6 + 64) = *__errno_location();\n                        *v1 = *v1 | 0x4000;\n                    }\n                    // 0x408418\n                    fd2 = *v44;\n                } else {\n                    // 0x40822a\n                    function_4069b0(result, (int64_t)fd, 1);\n                    fd2 = *v44;\n                }\n            }\n            // 0x40823c\n            close(fd2);\n            goto lab_0x407e86;\n        } else {\n            if (v42 % 2 == 0) {\n                int64_t v45 = *(int64_t *)(result6 + 8); // 0x4083cc\n                if ((int32_t)function_406ba0(result, v45, 0xffffffff, (int32_t)\"..\") == 0) {\n                    goto lab_0x407e86;\n                } else {\n                    goto lab_0x40829f;\n                }\n            } else {\n                goto lab_0x407e86;\n            }\n        }\n    }\n  lab_0x407f92:\n    // 0x407f92\n    if ((*(char *)(result + 114) & 2) != 0) {\n        // 0x408397\n        close(*(int32_t *)(result + 68));\n    }\n    int64_t * v46 = (int64_t *)(result + 8); // 0x407f9c\n    int64_t v47 = *v46; // 0x407f9c\n    if (v47 != 0) {\n        // 0x407fa6\n        function_406790(v47);\n        *v46 = 0;\n    }\n    // 0x407fb4\n    *v5 = 6;\n    function_406e20(*v1, result + 88, result);\n    // 0x407eca\n    return result;\n  lab_0x408160:;\n    int64_t result5 = v9;\n    int64_t result3 = result5; // 0x40816b\n    if (*(int64_t *)(result5 + 168) != 2) {\n        // 0x407eca\n        return result3;\n    }\n    int64_t v48 = *(int64_t *)(result5 + 8); // 0x4082c7\n    int64_t * v49 = (int64_t *)(v48 + 104); // 0x4082cb\n    int64_t v50; // 0x407da0\n    int64_t v51; // 0x407da0\n    if (*v49 != 0) {\n        goto lab_0x4082e3;\n    } else {\n        // 0x4082d2\n        if ((*v1 & 24) == 24) {\n            // 0x408479\n            if ((int32_t)function_406940(v48, v13, v11) != 2) {\n                goto lab_0x4082e3;\n            } else {\n                // 0x40848a\n                v50 = (int64_t)*(int16_t *)(result5 + 112);\n                v51 = result5;\n                goto lab_0x4080e1;\n            }\n        } else {\n            goto lab_0x4082e3;\n        }\n    }\n  lab_0x407f0b:;\n    int64_t * v52 = (int64_t *)(result + 8); // 0x407f0b\n    int64_t v53 = *v52; // 0x407f0b\n    int64_t v54; // 0x407da0\n    if (v53 == 0) {\n        goto lab_0x4081b9;\n    } else {\n        if ((v40 & 0x2000) != 0) {\n            // 0x4081a3\n            *v1 = v2 & -0x2001;\n            function_406790(v53);\n            *v52 = 0;\n            goto lab_0x4081b9;\n        } else {\n            int64_t v55 = *(int64_t *)(result + 48); // 0x407f22\n            if ((int32_t)function_406ba0(result, result, 0xffffffff, (int32_t)v55) == 0) {\n                // 0x408246\n                v54 = *v52;\n            } else {\n                int32_t * v56 = __errno_location(); // 0x407f3e\n                int64_t v57 = *v52; // 0x407f43\n                int16_t * v58 = (int16_t *)(result + 114); // 0x407f4a\n                *v58 = *v58 | 1;\n                *(int32_t *)(result + 64) = *v56;\n                v54 = 0;\n                if (v57 != 0) {\n                    *(int64_t *)(v57 + 48) = *(int64_t *)(*(int64_t *)(v57 + 8) + 48);\n                    int64_t v59 = *(int64_t *)(v57 + 16); // 0x407f6c\n                    int64_t v60 = v59; // 0x407f73\n                    v54 = v57;\n                    while (v59 != 0) {\n                        int64_t v61 = *(int64_t *)(*(int64_t *)(v60 + 8) + 48); // 0x407f64\n                        *(int64_t *)(v60 + 48) = v61;\n                        v59 = *(int64_t *)(v60 + 16);\n                        v60 = v59;\n                        v54 = v57;\n                    }\n                }\n            }\n            goto lab_0x407f75;\n        }\n    }\n  lab_0x4080d7:;\n    uint16_t v62 = *(int16_t *)(v7 + 112);\n    *(int64_t *)result = v7;\n    v50 = v62;\n    v51 = v7;\n    v11 = v10;\n    v9 = v7;\n    v13 = v12;\n    if (v62 == 11) {\n        goto lab_0x408160;\n    } else {\n        goto lab_0x4080e1;\n    }\n  lab_0x4080ee:;\n    int64_t v63 = v8; // 0x4080f3\n    if (*(int64_t *)(v8 + 88) != 0) {\n        goto lab_0x4080fe;\n    } else {\n        goto lab_0x4080f5;\n    }\n  lab_0x4082e3:;\n    int64_t v64 = function_406450(result, result5, 0); // 0x4082eb\n    int16_t v65 = v64; // 0x4082f6\n    *(int16_t *)(result5 + 112) = v65;\n    v50 = v64;\n    v51 = result5;\n    if ((*(int32_t *)(result5 + 144) & 0xf000) != 0x4000) {\n        goto lab_0x4080e1;\n    } else {\n        // 0x40830c\n        if (*(int64_t *)(result5 + 88) == 0) {\n            // 0x40846a\n            result3 = result5;\n            if (v65 != 1) {\n                int64_t v66 = result3;\n                result2 = v66;\n                int64_t result4 = result2;\n                return result4;\n            }\n            goto lab_0x4080f5;\n        } else {\n            uint64_t v67 = *v49 - 1; // 0x40831b\n            if (v67 < 0xfffffffffffffffe) {\n                // 0x4084ba\n                *v49 = v67;\n            }\n            // 0x408329\n            v63 = result5;\n            if (v65 != 1) {\n                // 0x407eca\n                return result5;\n            }\n            goto lab_0x4080fe;\n        }\n    }\n  lab_0x4081b9:;\n    int64_t v68 = function_406ec0(result, 3); // 0x4081c1\n    *v52 = v68;\n    v54 = v68;\n    if (v68 == 0) {\n        int32_t v69 = *v1; // 0x4081d7\n        if ((v69 & 0x4000) != 0) {\n            // 0x407eca\n            return 0;\n        }\n        // 0x4081e8\n        if (*(int32_t *)(result + 64) == 0) {\n            // 0x408203\n            function_406e20(v69, result + 88, result);\n            result2 = result;\n          lab_0x407eca:\n            // 0x407eca\n            return result2;\n        }\n        // 0x4081f1\n        if (*v5 != 4) {\n            // 0x4081f8\n            *v5 = 7;\n        }\n        // 0x408203\n        function_406e20(v69, result + 88, result);\n        // 0x407eca\n        return result;\n    }\n    goto lab_0x407f75;\n  lab_0x40809a:;\n    int64_t v70 = *(int64_t *)(v24 + 8); // 0x40809a\n    int64_t v71 = *(int64_t *)(v70 + 72); // 0x40809e\n    char v72 = *(char *)(v71 - 1 + *(int64_t *)(v70 + 56)); // 0x4080aa\n    int64_t v73 = *(int64_t *)(result + 32) + v71 + (int64_t)(v72 == 47); // 0x4080b3\n    *(char *)v73 = 47;\n    int64_t v74 = *(int64_t *)(v24 + 96) + 1; // 0x4080c3\n    int64_t v75 = v24 + 264; // 0x4080c7\n    memmove((int64_t *)(v73 + 1), (int64_t *)v75, (int32_t)v74);\n    v7 = v24;\n    v10 = v74;\n    v12 = v75;\n    goto lab_0x4080d7;\n  lab_0x407e86:;\n    int64_t v76 = (int64_t)*v1; // 0x407e8b\n    int64_t v77 = v76; // 0x407e90\n    int32_t * v78; // 0x407da0\n    int64_t v79; // 0x407da0\n    if (*(int16_t *)(result6 + 112) == 2) {\n        goto lab_0x407eb8;\n    } else {\n        // 0x407e86\n        v78 = (int32_t *)(result6 + 64);\n        v79 = v76;\n        goto lab_0x407e92;\n    }\n  lab_0x40829f:;\n    int32_t v80 = *__errno_location(); // 0x4082a4\n    int32_t * v81 = (int32_t *)(result6 + 64);\n    *v81 = v80;\n    uint32_t v82 = *v1 | 0x4000; // 0x4082a9\n    *v1 = v82;\n    if (*(int16_t *)(result6 + 112) == 2) {\n        // 0x407eca\n        return 0;\n    }\n    // 0x4082bd\n    v78 = v81;\n    v79 = v82;\n    goto lab_0x407e92;\n  lab_0x4080e1:\n    // 0x4080e1\n    result2 = v51;\n    v8 = v51;\n    if ((int16_t)v50 != 1) {\n        // 0x407eca\n        return result2;\n    }\n    goto lab_0x4080ee;\n  lab_0x4080fe:;\n    int64_t v94 = function_406d70(*v1, result + 88, v63); // 0x40810e\n    result2 = v63;\n    if ((char)v94 == 0) {\n        // 0x40811b\n        *__errno_location() = 12;\n        result2 = 0;\n    }\n    // 0x407eca\n    return result2;\n  lab_0x4080f5:\n    // 0x4080f5\n    *(int64_t *)(result + 24) = *(int64_t *)(v8 + 120);\n    v63 = v8;\n    goto lab_0x4080fe;\n  lab_0x407f75:\n    // 0x407f75\n    *v52 = 0;\n    v24 = v54;\n    goto lab_0x40809a;\n  lab_0x407eb8:\n    // 0x407eb8\n    if ((v77 & 0x4000) != 0) {\n        // 0x407eca\n        return 0;\n    }\n    // 0x407eca\n    return result6;\n  lab_0x407e92:\n    // 0x407e92\n    if (*v78 != 0) {\n        // 0x408281\n        int64_t v83; // 0x407da0\n        *(int16_t *)(v83 + 112) = 7;\n        int64_t v84; // 0x407da0\n        v77 = v84;\n    } else {\n        // 0x407e9d\n        *(int16_t *)(result6 + 112) = 6;\n        function_406e20((int32_t)v79, result + 88, result6);\n        v77 = (int64_t)*v1;\n    }\n    goto lab_0x407eb8;\n  lab_0x40800e:;\n    int64_t * v85 = (int64_t *)(v23 + 96); // 0x40800e\n    int64_t v86 = *v85; // 0x40800e\n    int64_t str = v23 + 264; // 0x408012\n    int64_t * v87 = (int64_t *)(result + 32); // 0x408019\n    *(int64_t *)(v23 + 72) = v86;\n    int64_t v88 = v86 + 1; // 0x408025\n    int64_t * v89 = (int64_t *)str; // 0x408029\n    memmove((int64_t *)*v87, v89, (int32_t)v88);\n    char * found_char_pos = strrchr((char *)str, 47); // 0x408036\n    int64_t v90 = v88; // 0x40803e\n    int64_t v91; // 0x408036\n    if (found_char_pos == NULL) {\n        goto lab_0x40806b;\n    } else {\n        // 0x408040\n        v91 = (int64_t)found_char_pos;\n        if (str == v91) {\n            // 0x408250\n            v90 = v88;\n            if (*(char *)(v23 + 265) == 0) {\n                goto lab_0x40806b;\n            } else {\n                goto lab_0x408049;\n            }\n        } else {\n            goto lab_0x408049;\n        }\n    }\n  lab_0x40806b:;\n    int64_t v92 = *v87; // 0x40806b\n    *(int64_t *)(v23 + 56) = v92;\n    *(int64_t *)(v23 + 48) = v92;\n    function_406af0(*v1, v25);\n    v7 = v23;\n    v10 = v90;\n    v12 = v25;\n    goto lab_0x4080d7;\n  lab_0x408049:;\n    int64_t str2 = v91 + 1; // 0x408049\n    int64_t len = strlen((char *)str2); // 0x408050\n    int64_t v93 = len + 1; // 0x40805e\n    memmove(v89, (int64_t *)str2, (int32_t)v93);\n    *v85 = len;\n    v90 = v93;\n    goto lab_0x40806b;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "408500",
            "funcEndAddr": "408529",
            "decompiledFuncCode": "int64_t fts_set(int64_t a1, int64_t a2, int64_t a3) {\n    if ((uint32_t)(int32_t)a3 < 5) {\n        // 0x408505\n        *(int16_t *)(a2 + 116) = (int16_t)a3;\n        return 0;\n    }\n    // 0x408510\n    *__errno_location() = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "408530",
            "funcEndAddr": "40869d",
            "decompiledFuncCode": "int64_t fts_children(int64_t a1, int64_t a2) {\n    int32_t * v1 = __errno_location(); // 0x40853d\n    if ((a2 & 0xffffdfff) != 0) {\n        // 0x408628\n        *v1 = 22;\n        return 0;\n    }\n    // 0x408551\n    *v1 = 0;\n    char * v2 = (char *)(a1 + 73); // 0x40855a\n    if ((*v2 & 64) != 0) {\n        // 0x4085cf\n        return 0;\n    }\n    int16_t v3 = *(int16_t *)(a1 + 112); // 0x408564\n    if (v3 == 9) {\n        // 0x408650\n        return *(int64_t *)(a1 + 16);\n    }\n    // 0x408574\n    if (v3 != 1) {\n        // 0x4085cf\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a1 + 8); // 0x40857c\n    int64_t v5 = *v4; // 0x40857c\n    if (v5 != 0) {\n        // 0x408585\n        function_406790(v5);\n    }\n    int64_t v6 = 1; // 0x408596\n    if ((int32_t)a2 == 0x2000) {\n        int32_t * v7 = (int32_t *)(a1 + 72); // 0x408598\n        *v7 = *v7 | 0x2000;\n        v6 = 2;\n    }\n    // 0x4085a5\n    int64_t result; // 0x4085c6\n    if (*(int64_t *)(a1 + 88) != 0 || *(char *)*(int64_t *)(a1 + 48) == 47) {\n        // 0x4085c0\n        result = function_406ec0(a1, v6);\n        *v4 = result;\n        // 0x4085cf\n        return result;\n    }\n    uint32_t v8 = *(int32_t *)(a1 + 72); // 0x4085b7\n    if ((v8 & 4) != 0) {\n        // 0x4085c0\n        result = function_406ec0(a1, v6);\n        *v4 = result;\n        // 0x4085cf\n        return result;\n    }\n    int32_t v9 = *(int32_t *)(a1 + 44); // 0x4085e0\n    int64_t v10 = function_406b50(v9, (int64_t)v8, (int64_t)&g5); // 0x4085e8\n    int32_t fd = v10; // 0x4085ef\n    if (fd < 0) {\n        // 0x408678\n        *v4 = 0;\n        // 0x4085cf\n        return 0;\n    }\n    // 0x4085f7\n    *v4 = function_406ec0(a1, v6);\n    if ((*v2 & 2) != 0) {\n        // 0x408660\n        function_4069b0(a1, v10 & 0xffffffff, 1);\n        // 0x4085cf\n        return *v4;\n    }\n    // 0x40860c\n    if (fchdir(fd) == 0) {\n        // 0x408617\n        close(fd);\n        // 0x4085cf\n        return *v4;\n    }\n    // 0x408687\n    close(fd);\n    // 0x4085cf\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4086a0",
            "funcStartAddr": "4086a0",
            "funcEndAddr": "40877f",
            "decompiledFuncCode": "int64_t function_4086a0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4086ac\n    uint32_t v2 = *v1; // 0x4086ac\n    int64_t v3 = a2 & 0xffffffff; // 0x4086b1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4086b4\n    uint64_t v5 = (int64_t)*v4; // 0x4086b4\n    int64_t v6; // 0x408722\n    if (v3 <= v5) {\n      lab_0x40871c_2:\n        // 0x40871c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4086a2\n    int64_t v8 = v2; // 0x4086a0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40871c\n        goto lab_0x40871c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4086d8\n    int64_t v17; // 0x4086e6\n    int64_t * v18; // 0x408700\n    int64_t * v19; // 0x408703\n    int64_t v20; // 0x40870e\n    int64_t v21; // 0x4086e6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4086e3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x408700\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x408717\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40871c\n            goto lab_0x40871c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40871c\n            goto lab_0x40871c_2;\n        }\n        // 0x4086d2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40875b\n    int64_t * v23 = (int64_t *)v22; // 0x408760\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x408763\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x408760\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x408777\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4086cd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40871c\n            goto lab_0x40871c_2;\n        }\n        // 0x4086d2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4086e3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x408700\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x408717\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40871c\n                goto lab_0x40871c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40871c\n                goto lab_0x40871c_2;\n            }\n            // 0x4086d2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x408740\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x408760\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x408777\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40871c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408780",
            "funcStartAddr": "408780",
            "funcEndAddr": "408d9c",
            "decompiledFuncCode": "int64_t function_408780(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40879f\n    int64_t v2 = *v1; // 0x40879f\n    char * str2 = (char *)v2; // 0x4087ac\n    char c = *str2; // 0x4087ac\n    int64_t v3 = v2; // 0x4087d8\n    int64_t v4 = 0; // 0x408780\n    int32_t v5; // 0x408780\n    int64_t v6; // 0x408780\n    int64_t v7; // 0x408780\n    int64_t v8; // 0x408780\n    int64_t v9; // 0x408780\n    int64_t v10; // 0x408780\n    int64_t v11; // 0x408780\n    int64_t v12; // 0x408780\n    int64_t v13; // 0x408780\n    int64_t str3; // 0x408780\n    int64_t v14; // 0x408780\n    int64_t v15; // 0x408780\n    int64_t v16; // 0x408780\n    int64_t v17; // 0x408780\n    int32_t v18; // 0x408780\n    int32_t v19; // 0x408780\n    int32_t v20; // 0x408780\n    int32_t v21; // 0x408780\n    int32_t v22; // 0x408780\n    int32_t v23; // 0x408780\n    int32_t v24; // 0x408780\n    int32_t v25; // 0x408780\n    int32_t v26; // 0x408780\n    int32_t v27; // 0x408780\n    int32_t v28; // 0x408780\n    int32_t v29; // 0x408780\n    int64_t nmemb; // 0x408780\n    int64_t v30; // 0x408780\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4087dc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4087d8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4087e8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4087ee\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4087b8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40881c\n                int64_t v34; // 0x408780\n                int64_t v35; // 0x408780\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x408825\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4089a0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x408836\n                int64_t v37 = *(int64_t *)v36; // 0x40883a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x408810\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x408825\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4089a0;\n                        }\n                    }\n                    // 0x408836\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408886:\n                    // 0x408886\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4088e0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408a50\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4088e0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408a00\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4088aa;\n                                } else {\n                                    // 0x408a0c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4088aa;\n                                    } else {\n                                        // 0x408a1a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4088aa;\n                                        } else {\n                                            goto lab_0x4088e0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4088aa;\n                            }\n                        }\n                    }\n                }\n              lab_0x4088f1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408ac6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408c72\n                            flockfile(g37);\n                            int64_t v41 = *v1; // 0x408c92\n                            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x408cdf\n                            int64_t v43 = (int64_t)g37;\n                            int64_t v44 = v43; // 0x408cf9\n                            int64_t v45; // 0x408cfb\n                            if (*(char *)v42 != 0) {\n                                // 0x408cfb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g37;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x408cf3\n                            while (v17 + nmemb != v42) {\n                                // 0x408cf5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x408cfb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g37;\n                                }\n                                // 0x408ce8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x408d20\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g37);\n                            v40 = *v1;\n                        } else {\n                            // 0x408ad4\n                            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x408c2f\n                        free((int64_t *)v17);\n                    }\n                    // 0x408b29\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408b40\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4089ee\n                    return 63;\n                }\n                // 0x408910\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408994\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4089a0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4089b0\n                    uint32_t v50 = *v49; // 0x4089b0\n                    int64_t v51 = v50; // 0x4089b0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4089ba\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4089c3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x408bef\n                                __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x408b9a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4089ee\n                            return 63;\n                        }\n                        // 0x408a38\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x408d4f\n                                    __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x408c4d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408c60\n                                // 0x4089ee\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x408b5e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408b72\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4089db\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4089de\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4089e2\n                    int64_t result = v59; // 0x4089e8\n                    if (v58 != 0) {\n                        // 0x4089ea\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4089ee\n                    return result;\n                }\n            } else {\n                // 0x4087ee\n                v5 = v32;\n            }\n            // break -> 0x408915\n            break;\n        }\n    }\n    // 0x408915\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40892d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408937\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4089ee\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408a79\n        __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408966\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408976\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4088e0:\n    // 0x4088e0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4088e0\n    int64_t v63 = *(int64_t *)v62; // 0x4088e4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4088f1\n        goto lab_0x4088f1;\n    }\n    goto lab_0x408886;\n  lab_0x4088aa:\n    // 0x4088aa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408780\n    int32_t v65; // 0x408780\n    int32_t v66; // 0x408780\n    if (v27 != 0) {\n        goto lab_0x4088e0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408a60\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4088e0;\n            } else {\n                goto lab_0x4088d1;\n            }\n        } else {\n            // 0x4088c5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x408bbc\n                int64_t v67 = (int64_t)mem; // 0x408bbc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4088e0;\n                } else {\n                    // 0x408bcf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4088d1;\n                }\n            } else {\n                goto lab_0x4088d1;\n            }\n        }\n    }\n  lab_0x4088d1:\n    // 0x4088d1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4088e0;\n}\n"
        },
        {
            "funcName": "function_408da0",
            "funcStartAddr": "408da0",
            "funcEndAddr": "409366",
            "decompiledFuncCode": "int64_t function_408da0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x408dc1\n    if (v3 < 1) {\n        // 0x408f7e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x408dbd\n    int32_t v5 = *(int32_t *)a7; // 0x408dc9\n    uint64_t v6 = a1 & 0xffffffff; // 0x408dcb\n    int64_t v7 = v2; // 0x408dd0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x408dd3\n    *v8 = 0;\n    int64_t v9; // 0x408da0\n    int64_t v10; // 0x408da0\n    int64_t v11; // 0x408da0\n    int64_t v12; // 0x408da0\n    int64_t str; // 0x408da0\n    int64_t v13; // 0x408da0\n    int64_t v14; // 0x408da0\n    int64_t v15; // 0x408da0\n    int64_t v16; // 0x408da0\n    int64_t v17; // 0x408da0\n    int32_t v18; // 0x408da0\n    char v19; // 0x408da0\n    if (v5 == 0) {\n        // 0x408fb8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x408dea;\n    } else {\n        // 0x408de3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x408e30\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x408e33\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x408ef8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x408e46\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x408e56\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x408f0c;\n                } else {\n                    goto lab_0x408e68;\n                }\n            }\n        } else {\n            goto lab_0x408dea;\n        }\n    }\n  lab_0x408dea:\n    // 0x408dea\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x408df0\n    *v24 = 0;\n    int64_t v25; // 0x408da0\n    int64_t v26; // 0x408da0\n    int64_t v27; // 0x408da0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x408ee0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x408eed;\n        }\n        case 43: {\n            // 0x4091f0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x408eed;\n        }\n        default: {\n            // 0x408e0c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40916f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x409288\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x408eed;\n                } else {\n                    // 0x40917d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x408e1a;\n                }\n            } else {\n                goto lab_0x408e1a;\n            }\n        }\n    }\n  lab_0x408ef8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x408eff\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x408e68;\n    } else {\n        goto lab_0x408f0c;\n    }\n  lab_0x408e1a:\n    // 0x408e1a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x408eed;\n  lab_0x408eed:\n    // 0x408eed\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x408ef8;\n  lab_0x408e68:;\n    uint32_t v30 = *(int32_t *)a7; // 0x408e68\n    int64_t v31 = v30; // 0x408e68\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x408e6a\n    if ((int64_t)*v32 > v31) {\n        // 0x408e6f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x408e72\n    if (*v33 > v30) {\n        // 0x408e77\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x408e7a\n    int64_t v35 = v31; // 0x408e7e\n    int64_t v36 = v15; // 0x408e7e\n    int64_t v37; // 0x408da0\n    int64_t v38; // 0x408da0\n    int64_t v39; // 0x408da0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x408fe8\n        int64_t v41 = v40; // 0x408fe8\n        v2 = v41;\n        int64_t v42; // 0x408da0\n        if (*v33 == v40) {\n            // 0x4091d0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4091d8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x408ff4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408ff8\n                function_4086a0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x409008\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x409011\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40901a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x409031\n            int64_t v47 = v45 & 0xffffffff; // 0x409035\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40903e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x409044\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x409046;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x409020\n            int64_t v49 = v48 & 0xffffffff; // 0x409020\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x409031\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40903e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x409044\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x409046;\n                    }\n                }\n                // 0x409020\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4091e8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x409046;\n    } else {\n        goto lab_0x408e84;\n    }\n  lab_0x408f0c:\n    // 0x408f0c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x408f0f\n    int64_t v51 = v12; // 0x408f0f\n    int64_t v52 = v14; // 0x408f0f\n    if (*(char *)v10 == 0) {\n        goto lab_0x408e68;\n    } else {\n        goto lab_0x408f15;\n    }\n  lab_0x408e84:;\n    int32_t v53 = v35; // 0x408e84\n    int64_t v54; // 0x408da0\n    int64_t v55; // 0x408da0\n    int64_t v56; // 0x408da0\n    int64_t v57; // 0x408da0\n    int64_t v58; // 0x408da0\n    int64_t v59; // 0x408da0\n    char * v60; // 0x408da0\n    int64_t v61; // 0x408da0\n    int64_t v62; // 0x408e99\n    int64_t v63; // 0x408da0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x408fd3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x408fd6;\n    } else {\n        // 0x408e8c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x408da0\n        int64_t v66 = v65 ? -1 : 1; // 0x408ea0\n        int64_t v67 = (int64_t)\"--\"; // 0x408da0\n        int64_t v68 = v62; // 0x408da0\n        int64_t v69 = 3; // 0x408ea0\n        unsigned char v70 = *(char *)v68; // 0x408ea0\n        char v71 = *(char *)v67; // 0x408ea0\n        char v72 = v71; // 0x408ea0\n        bool v73 = false; // 0x408ea0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x408f90\n            if (*(char *)v62 == 45) {\n                // 0x409050\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x409050\n                if (c == 0) {\n                    goto lab_0x408f9a;\n                } else {\n                    // 0x40905d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4090e0;\n                    } else {\n                        if (c == 45) {\n                            // 0x4092c3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x409135;\n                        } else {\n                            // 0x40906e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4090e0;\n                            } else {\n                                // 0x409073\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409094;\n                                } else {\n                                    // 0x40907a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4090e0;\n                                    } else {\n                                        goto lab_0x409094;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x408f9a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x408eb0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x408eb3\n            int64_t v77 = v35 + 1; // 0x408eb6\n            int32_t v78 = v77; // 0x408eb9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x409220\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x408ec7\n                    function_4086a0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x408ed5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x408fd6;\n        }\n    }\n  lab_0x408f15:;\n    // 0x408f15\n    int64_t v79; // bp-104, 0x408da0\n    int64_t v80 = &v79; // 0x408daa\n    int64_t v81 = v50 + 1; // 0x408f15\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x408f1c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x408f21\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x408f25\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x408f29\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x408f31\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x408f36\n    int32_t c2 = v84; // 0x408f36\n    char * found_char_pos = strchr(str2, c2); // 0x408f36\n    int64_t v87 = *v82; // 0x408f3b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x408f45\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x408f50\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x409240\n            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40920d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x408f7e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x408f36\n    char v91 = *(char *)(v90 + 1); // 0x408f6b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x408f25\n        if (v91 != 58) {\n            // 0x408f7e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409194\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x409298\n                *v8 = 0;\n            } else {\n                // 0x40927c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4091be\n            *v83 = 0;\n            // 0x408f7e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40919e\n        if (v93 != 0) {\n            // 0x409230\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4091be\n            *v83 = 0;\n            // 0x408f7e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4091b1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4091be\n            *v83 = 0;\n            // 0x408f7e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4092fa\n            __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4092aa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4092b1\n        // 0x4091be\n        *v83 = 0;\n        // 0x408f7e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x409109\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40910b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x409330\n                __fprintf_chk(g37, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4092e1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4092e8\n            // 0x408f7e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x409116\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40911a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x409135;\n  lab_0x409046:\n    // 0x409046\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x408e84;\n  lab_0x409135:;\n    int64_t v99 = function_408780(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x409153\n    // 0x408f7e\n    return v99 & 0xffffffff;\n  lab_0x408fd6:;\n    int32_t v100 = v55; // 0x408fd6\n    if (v100 != (int32_t)v59) {\n        // 0x408fda\n        *(int32_t *)a7 = v100;\n    }\n    // 0x408f7e\n    return 0xffffffff;\n  lab_0x408f9a:\n    // 0x408f9a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x408fa1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x408f7e\n    return v99 & 0xffffffff;\n  lab_0x4090e0:\n    // 0x4090e0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x408f15;\n  lab_0x409094:\n    // 0x409094\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408780(v6, a2, str, a4, a5, v57, v1, v11, &g13); // 0x4090ba\n    if ((int32_t)v101 != -1) {\n        // 0x408f7e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4090cf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4090e0;\n}\n"
        },
        {
            "funcName": "function_409370",
            "funcStartAddr": "409370",
            "funcEndAddr": "4093c6",
            "decompiledFuncCode": "int64_t function_409370(int64_t a1) {\n    // 0x409370\n    *(int32_t *)&g51 = g32;\n    *(int32_t *)&g52 = g31;\n    int64_t v1; // 0x409370\n    int64_t result = function_408da0(v1, v1, v1, v1, v1, v1, &g51, a1 & 0xffffffff); // 0x409396\n    g32 = *(int32_t *)&g51;\n    g57 = g54;\n    *(int32_t *)&g30 = g53;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4093d0",
            "funcStartAddr": "4093d0",
            "funcEndAddr": "4093e8",
            "decompiledFuncCode": "int64_t function_4093d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4093d0\n    return function_409370(1);\n}\n"
        },
        {
            "funcName": "function_4093f0",
            "funcStartAddr": "4093f0",
            "funcEndAddr": "409403",
            "decompiledFuncCode": "int64_t function_4093f0(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x4093f0\n    return function_409370(0);\n}\n"
        },
        {
            "funcName": "function_409410",
            "funcStartAddr": "409410",
            "funcEndAddr": "409425",
            "decompiledFuncCode": "int64_t function_409410(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409410\n    return function_408da0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409430",
            "funcStartAddr": "409430",
            "funcEndAddr": "409446",
            "decompiledFuncCode": "int64_t function_409430(void) {\n    // 0x409430\n    return function_409370(0);\n}\n"
        },
        {
            "funcName": "function_409450",
            "funcStartAddr": "409450",
            "funcEndAddr": "409468",
            "decompiledFuncCode": "int64_t function_409450(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409450\n    return function_408da0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409470",
            "funcStartAddr": "409470",
            "funcEndAddr": "4094ea",
            "decompiledFuncCode": "int64_t function_409470(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40947b\n    int64_t v2 = (int64_t)&g14; // 0x40947b\n    int32_t * pwc; // 0x409470\n    int64_t v3; // 0x409470\n    int64_t n; // 0x409470\n    if (a2 == 0) {\n        goto lab_0x4094c2;\n    } else {\n        // 0x40947d\n        if (a3 == 0) {\n            // 0x4094a8\n            return -2;\n        }\n        // 0x409489\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4094c2;\n        } else {\n            goto lab_0x409494;\n        }\n    }\n  lab_0x4094c2:\n    // 0x4094c2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x409470\n    pwc = (int32_t *)&v4;\n    goto lab_0x409494;\n  lab_0x409494:;\n    char * wstr = (char *)v3; // 0x40949a\n    int64_t ps; // 0x409470\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40949a\n    int64_t result = v5; // 0x40949a\n    if (v5 < 0xfffffffe) {\n        // 0x4094a8\n        return result;\n    }\n    int64_t result2 = result; // 0x4094d9\n    if ((char)function_409630(0, v3) == 0) {\n        // 0x4094db\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4094a8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4094f0",
            "funcStartAddr": "4094f0",
            "funcEndAddr": "40954d",
            "decompiledFuncCode": "int64_t function_4094f0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4094f7\n    int64_t v2; // 0x4094f0\n    int64_t result = function_40afb0(a1, v2); // 0x409508\n    if ((v2 & 32) != 0) {\n        // 0x409530\n        if ((int32_t)result == 0) {\n            // 0x409534\n            *__errno_location() = 0;\n        }\n        // 0x40952a\n        return 0xffffffff;\n    }\n    // 0x409511\n    if ((int32_t)result == 0) {\n        // 0x40952a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x409518\n    if (v1 == 0) {\n        // 0x40951a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40952a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409550",
            "funcStartAddr": "409550",
            "funcEndAddr": "409560",
            "decompiledFuncCode": "int64_t function_409550(int64_t a1) {\n    // 0x409550\n    *(int64_t *)(a1 + 16) = 0;\n    *(int32_t *)(a1 + 24) = 0x95f616;\n    int64_t result; // 0x409550\n    return result;\n}\n"
        },
        {
            "funcName": "function_409560",
            "funcStartAddr": "409560",
            "funcEndAddr": "4095e0",
            "decompiledFuncCode": "int64_t function_409560(int64_t a1, int64_t a2) {\n    // 0x409560\n    if (*(int32_t *)(a1 + 24) != 0x95f616) {\n        // 0x4095c2\n        __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 60, \"cycle_check\");\n        return &g60;\n    }\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x409569\n    int64_t v2 = *v1; // 0x409569\n    int64_t v3 = *(int64_t *)(a2 + 8); // 0x40956d\n    if (v2 == 0) {\n        // 0x409590\n        *v1 = 1;\n        // 0x409598\n        *(int64_t *)a1 = v3;\n        *(int64_t *)(a1 + 8) = a2;\n        return 0;\n    }\n    if (v3 == a1) {\n        // 0x4095a8\n        if (*(int64_t *)(a1 + 8) == a2) {\n            // 0x409588\n            return 1;\n        }\n    }\n    int64_t v4 = v2 + 1; // 0x40957b\n    *v1 = v4;\n    if ((v4 & v2) != 0) {\n        // 0x409588\n        return 0;\n    }\n    // 0x4095b7\n    if (v4 == 0) {\n        // 0x409588\n        return 1;\n    }\n    // 0x409598\n    *(int64_t *)a1 = v3;\n    *(int64_t *)(a1 + 8) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4095e0",
            "funcStartAddr": "4095e0",
            "funcEndAddr": "40962a",
            "decompiledFuncCode": "int64_t function_4095e0(int64_t path, int64_t oflag, int32_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x4095f3\n    return function_40af60((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_409630",
            "funcStartAddr": "409630",
            "funcEndAddr": "40968e",
            "decompiledFuncCode": "int64_t function_409630(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x409636\n    if (locale == NULL) {\n        // 0x409663\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x409636\n    bool v2; // 0x409630\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g15; // 0x409630\n    int64_t v5 = v1; // 0x409630\n    int64_t v6 = 2; // 0x409655\n    unsigned char v7 = *(char *)v5; // 0x409655\n    char v8 = *(char *)v4; // 0x409655\n    char v9 = v8; // 0x409655\n    bool v10 = false; // 0x409655\n    while (v7 == v8) {\n        // 0x409648\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409661\n    int64_t v13 = v1; // 0x409661\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409663\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409661\n    unsigned char v15 = *(char *)v13; // 0x40967d\n    char v16 = *(char *)v12; // 0x40967d\n    char v17 = v16; // 0x40967d\n    bool v18 = false; // 0x40967d\n    while (v15 == v16) {\n        // 0x409670\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_409690",
            "funcStartAddr": "409690",
            "funcEndAddr": "409723",
            "decompiledFuncCode": "int64_t function_409690(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x4096a7\n    if (v1 == -1) {\n        // 0x40971f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x4096af\n    int64_t v3; // 0x409690\n    while (true) {\n      lab_0x4096b8:\n        // 0x4096b8\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x409710;\n        } else {\n            goto lab_0x409715;\n        }\n    }\n  lab_0x40971f_2:;\n    // 0x40971f\n    int64_t result; // 0x409690\n    return result;\n  lab_0x409715:;\n    int64_t v4 = v3 + 2; // 0x409715\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40971f\n        goto lab_0x40971f_2;\n    }\n    goto lab_0x4096b8;\n  lab_0x409710:\n    // 0x409710\n    result = v3;\n    goto lab_0x409715;\n}\n"
        },
        {
            "funcName": "function_409730",
            "funcStartAddr": "409730",
            "funcEndAddr": "409740",
            "decompiledFuncCode": "int64_t function_409730(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x409730\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_409740",
            "funcStartAddr": "409740",
            "funcEndAddr": "409747",
            "decompiledFuncCode": "int64_t function_409740(int64_t a1, int64_t a2) {\n    // 0x409740\n    int64_t v1; // 0x409740\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_409750",
            "funcStartAddr": "409750",
            "funcEndAddr": "409771",
            "decompiledFuncCode": "int64_t function_409750(int64_t a1, int64_t a2) {\n    // 0x409750\n    int64_t v1; // 0x409750\n    return 16 * v1 + a2;\n}\n"
        },
        {
            "funcName": "function_409780",
            "funcStartAddr": "409780",
            "funcEndAddr": "409899",
            "decompiledFuncCode": "int64_t function_409780(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_409750(a1, a2); // 0x409794\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40979c\n    int64_t result2 = *v2; // 0x40979c\n    if (result2 == 0) {\n        // 0x40982e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x4097c4\n            if (v3 == 0) {\n                // 0x40982e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x4097d1\n            int64_t v5 = v3; // 0x4097d7\n            int64_t v6 = v1; // 0x4097d7\n            int64_t result = v4; // 0x4097d7\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40980c_2:\n                // 0x40980c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x409811\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x409820\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40982e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x4097e4\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x4097f1\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40980c_2;\n                }\n                // 0x4097f9\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40980c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40982e\n            return 0;\n        }\n    }\n    // 0x409843\n    if ((char)a4 == 0) {\n        // 0x40982e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x409848\n    if (v12 == 0) {\n        // 0x409890\n        *v2 = 0;\n        // 0x40982e\n        return result2;\n    }\n    // 0x409851\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40985f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4098a0",
            "funcStartAddr": "4098a0",
            "funcEndAddr": "40991e",
            "decompiledFuncCode": "int64_t function_4098a0(uint64_t a1) {\n    if (a1 == (int64_t)&g16) {\n        // 0x40991d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x4098ab\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g16) {\n        // 0x40990a\n        *(int64_t *)a1 = (int64_t)&g16;\n        return 0;\n    }\n    // 0x4098b9\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x4098d4\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x4098e1\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x4098e9\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x40991d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_409920",
            "funcStartAddr": "409920",
            "funcEndAddr": "409a6a",
            "decompiledFuncCode": "int64_t function_409920(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40993a\n    uint64_t v2 = *v1; // 0x40993a\n    if (v2 <= a2) {\n        // 0x409a24\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x409920\n    int64_t v8 = a2; // 0x409920\n    int64_t v9; // 0x409920\n    int64_t result; // 0x409920\n    int64_t v10; // 0x409920\n    while (true) {\n      lab_0x409956_2:\n        // 0x409956\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x409956\n        int64_t v12 = *v11; // 0x409956\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x409948;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40995f\n            int64_t v14 = *v13; // 0x40995f\n            int64_t v15 = v14; // 0x409967\n            int64_t v16 = v12; // 0x409967\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x409984\n                    int64_t v19 = *v18; // 0x409984\n                    int64_t v20 = function_409750(v3, v19); // 0x40998d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x409992\n                    int64_t v22 = *v21; // 0x409992\n                    int64_t * v23 = (int64_t *)v20; // 0x409996\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x409970\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x4099bf\n                            break;\n                        }\n                    } else {\n                        // 0x40999c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x4099bf\n                            break;\n                        }\n                    }\n                    // 0x409984\n                    v15 = v22;\n                }\n                // 0x4099bf\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x4099c3\n                v9 = *v1;\n                goto lab_0x409948;\n            } else {\n                int64_t v26 = function_409750(v3, v25); // 0x4099db\n                int64_t * v27 = (int64_t *)v26; // 0x4099e0\n                if (*v27 == 0) {\n                    // 0x409a40\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x4099e9\n                    int64_t * v29; // 0x409920\n                    int64_t v30; // 0x409920\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x409a4f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x409a24\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x409a4f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x4099fa\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x409a09\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x409a11\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x409a1a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x409a24\n                    break;\n                }\n                goto lab_0x409956_2;\n            }\n        }\n    }\n    // 0x409a24\n    return result;\n  lab_0x409948:;\n    int64_t v36 = v10 + 16; // 0x409948\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x409956_2;\n    // 0x409956\n    goto lab_0x409956_2;\n}\n"
        },
        {
            "funcName": "function_409a70",
            "funcStartAddr": "409a70",
            "funcEndAddr": "409a75",
            "decompiledFuncCode": "int64_t function_409a70(int64_t a1) {\n    // 0x409a70\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_409a80",
            "funcStartAddr": "409a80",
            "funcEndAddr": "409a85",
            "decompiledFuncCode": "int64_t function_409a80(int64_t a1) {\n    // 0x409a80\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_409a90",
            "funcStartAddr": "409a90",
            "funcEndAddr": "409a95",
            "decompiledFuncCode": "int64_t function_409a90(int64_t a1) {\n    // 0x409a90\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_409aa0",
            "funcStartAddr": "409aa0",
            "funcEndAddr": "409aef",
            "decompiledFuncCode": "int64_t function_409aa0(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409aa3\n    int64_t result = 0; // 0x409aac\n    if (v1 <= a1) {\n      lab_0x409aed:\n        // 0x409aed\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x409ab0\n    while (*(int64_t *)v3 == 0) {\n        // 0x409ab0\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x409abf\n    int64_t v6 = v5; // 0x409acb\n    int64_t v7 = 1; // 0x409acb\n    int64_t v8; // 0x409aa0\n    int64_t v9; // 0x409ad0\n    int64_t v10; // 0x409ad4\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x409ad0\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x409ae0\n    int64_t v12 = v3 + 16; // 0x409ae4\n    while (v12 < v1) {\n        // 0x409ab9\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x409ab0\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x409abf\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x409ad0\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x409add\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x409aed\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409af0",
            "funcStartAddr": "409af0",
            "funcEndAddr": "409b57",
            "decompiledFuncCode": "int64_t function_409af0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409af3\n    int64_t v2 = a1; // 0x409aff\n    int64_t v3 = 0; // 0x409aff\n    int64_t v4 = 0; // 0x409aff\n    int64_t v5 = 0; // 0x409aff\n    int64_t v6 = 0; // 0x409aff\n    int64_t v7; // 0x409af0\n    int64_t v8; // 0x409af0\n    int64_t v9; // 0x409af0\n    if (v1 > a1) {\n        while (true) {\n          lab_0x409b11_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x409b08;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x409b17\n                int64_t v13 = v10 + 1; // 0x409b1b\n                int64_t v14 = v11 + 1; // 0x409b1f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x409b26\n                int64_t v16 = v14; // 0x409b26\n                if (v12 == 0) {\n                    goto lab_0x409b08;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x409b30\n                    int64_t v18 = v16 + 1; // 0x409b34\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x409b30\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x409b3d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x409b46\n                        break;\n                    }\n                    goto lab_0x409b11_2;\n                }\n            }\n        }\n    }\n  lab_0x409b46:\n    // 0x409b46\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x409b4f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x409b4e\n    return 0;\n  lab_0x409b08:;\n    int64_t v20 = v8 + 16; // 0x409b08\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x409b46\n        goto lab_0x409b46;\n    }\n    goto lab_0x409b11_2;\n    // 0x409b11\n    goto lab_0x409b11_2;\n}\n"
        },
        {
            "funcName": "function_409b60",
            "funcStartAddr": "409b60",
            "funcEndAddr": "409ca8",
            "decompiledFuncCode": "int64_t function_409b60(uint64_t a1, int64_t a2) {\n    // 0x409b60\n    int128_t v1; // 0x409b60\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x409b73\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x409b77\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x409b7e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x409b90\n            while (*(int64_t *)v7 == 0) {\n                // 0x409b90\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x409bcd\n                    goto lab_0x409bcd;\n                }\n            }\n        }\n    }\n  lab_0x409bcd:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x409bdc\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x409b60\n    int128_t v10; // 0x409b60\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x409c73\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x409c7c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x409c13;\n        } else {\n            goto lab_0x409c89;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x409c06\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x409c89;\n        } else {\n            goto lab_0x409c13;\n        }\n    }\n  lab_0x409c13:\n    // 0x409c13\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x409c17\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x409c17\n    goto lab_0x409c1c;\n  lab_0x409c89:\n    // 0x409c89\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x409c9a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x409c1c;\n  lab_0x409c1c:\n    // 0x409c1c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_409cb0",
            "funcStartAddr": "409cb0",
            "funcEndAddr": "409d03",
            "decompiledFuncCode": "int64_t function_409cb0(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_409750(a1, result); // 0x409cba\n    int64_t v2 = *(int64_t *)v1; // 0x409cbf\n    if (v2 == 0) {\n        // 0x409ced\n        return 0;\n    }\n    // 0x409cd3\n    if (v2 == result) {\n        // 0x409ced\n        return result;\n    }\n    int64_t v3 = v1; // 0x409ce4\n    int64_t result2 = v2; // 0x409ce2\n    while ((char)v1 == 0) {\n        // 0x409ce4\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x409ced\n            break;\n        }\n        // 0x409cd0\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x409ced\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x409ced\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409d10",
            "funcStartAddr": "409d10",
            "funcEndAddr": "409d58",
            "decompiledFuncCode": "int64_t function_409d10(uint64_t a1) {\n    int64_t result = 0; // 0x409d15\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x409d27\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409d1e\n    if (v1 <= a1) {\n        // 0x409d27\n        return result;\n    }\n    int64_t v2 = a1; // 0x409d25\n    int64_t v3 = *(int64_t *)v2; // 0x409d39\n    result = v3;\n    while (v3 == 0) {\n        // 0x409d30\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x409d27\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x409d27\n    return result;\n}\n"
        },
        {
            "funcName": "function_409d60",
            "funcStartAddr": "409d60",
            "funcEndAddr": "409dca",
            "decompiledFuncCode": "int64_t function_409d60(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409750(a1, a2); // 0x409d6c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x409d88\n    while (*(int64_t *)v2 != a2) {\n        // 0x409d80\n        if (v3 == 0) {\n            goto lab_0x409d96;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x409dc0\n        return *(int64_t *)v3;\n    }\n  lab_0x409d96:;\n    int64_t v4 = v1 + 16; // 0x409da8\n    int64_t result = 0; // 0x409daf\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x409da0\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x409db3\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x409db3\n    return result;\n}\n"
        },
        {
            "funcName": "function_409dd0",
            "funcStartAddr": "409dd0",
            "funcEndAddr": "409e34",
            "decompiledFuncCode": "int64_t function_409dd0(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x409dd6\n    int64_t result = 0; // 0x409dda\n    if (*v1 <= a1) {\n      lab_0x409df1:\n        // 0x409df1\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x409ddf\n    int64_t v4 = v2; // 0x409de5\n    int64_t v5; // 0x409dd0\n    int64_t v6; // 0x409dd0\n    int64_t v7; // 0x409e18\n    int64_t v8; // 0x409e21\n    int64_t v9; // 0x409e01\n    int64_t v10; // 0x409e05\n    if (v3 != 0) {\n        // 0x409df8\n        if (v2 >= a3) {\n            // break -> 0x409df1\n            break;\n        }\n        // 0x409dfd\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x409e15\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x409e10\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x409e15\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x409de7\n    result = v11;\n    while (*v1 > v12) {\n        // 0x409ddf\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x409df8\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x409df1\n                break;\n            }\n            // 0x409dfd\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x409e15\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x409e10\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x409e15\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x409de7\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x409df1\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e40",
            "funcStartAddr": "409e40",
            "funcEndAddr": "409eb8",
            "decompiledFuncCode": "int64_t function_409e40(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409e51\n    int64_t result = 0; // 0x409e55\n    if (v1 <= a1) {\n      lab_0x409e74:\n        // 0x409e74\n        return result;\n    }\n    int64_t v2 = a1; // 0x409e6a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x409e68\n    int64_t v5 = v2; // 0x409e68\n    int64_t v6 = v3; // 0x409e68\n    int64_t v7; // 0x409e40\n    int64_t v8; // 0x409e98\n    int64_t v9; // 0x409e9c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x409e98\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x409ea8\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x409e98\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x409e62\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x409e98\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x409ea8\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x409e98\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x409e6a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x409e74\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409ec0",
            "funcStartAddr": "409ec0",
            "funcEndAddr": "409ef1",
            "decompiledFuncCode": "int64_t function_409ec0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x409ec7\n    if (v1 == 0) {\n        // 0x409eed\n        return 0;\n    }\n    int64_t result = 0; // 0x409ec7\n    v2++;\n    char v3 = *(char *)v2; // 0x409ee3\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x409eed\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f00",
            "funcStartAddr": "409f00",
            "funcEndAddr": "409f20",
            "decompiledFuncCode": "int64_t function_409f00(int64_t a1) {\n    // 0x409f00\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_409f20",
            "funcStartAddr": "409f20",
            "funcEndAddr": "40a0aa",
            "decompiledFuncCode": "int64_t function_409f20(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x409f20\n    int128_t v1; // 0x409f20\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x409f5a\n    int64_t result = (int64_t)mem; // 0x409f5a\n    if (mem == NULL) {\n        // 0x40a00a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x409f6b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x409f20\n    int128_t v6; // 0x409f20\n    if (a2 == 0) {\n        // 0x40a020\n        *v4 = (int64_t)&g16;\n        int64_t v7 = function_4098a0(v3); // 0x40a028\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40a02d\n        if ((char)v7 == 0) {\n            // 0x40a000\n            free(mem);\n            // 0x40a00a\n            return 0;\n        }\n        // 0x40a039\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40a083;\n        } else {\n            goto lab_0x40a03e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_4098a0(v3) == 0) {\n            // 0x40a000\n            free(mem);\n            // 0x40a00a\n            return 0;\n        }\n        // 0x409f85\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_409690(a1); // 0x409f93\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40a000\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40a000\n                free(mem);\n                // 0x40a00a\n                return 0;\n            }\n            // 0x409fb1\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40a000\n                free(mem);\n                // 0x40a00a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x409fc2\n            int64_t v10 = (int64_t)mem2; // 0x409fc2\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40a000\n                free(mem);\n                // 0x40a00a\n                return 0;\n            }\n            // 0x409fcf\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x409730 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x409740 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40a00a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40a078\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40a03e;\n        } else {\n            goto lab_0x40a083;\n        }\n    }\n  lab_0x40a083:\n    // 0x40a083\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40a093\n    int128_t v13 = v6; // 0x40a09c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40a09c\n    goto lab_0x40a047;\n  lab_0x40a03e:\n    // 0x40a03e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40a047;\n  lab_0x40a047:\n    // 0x40a047\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40a000\n    free(mem);\n    // 0x40a00a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a0b0",
            "funcStartAddr": "40a0b0",
            "funcEndAddr": "40a158",
            "decompiledFuncCode": "int64_t function_40a0b0(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40a0ba\n    uint64_t v2 = *v1; // 0x40a0ba\n    int64_t result; // 0x40a0b0\n    if (v2 <= a1) {\n      lab_0x40a143:\n        // 0x40a143\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40a0c8\n    while (*v6 == 0) {\n        // 0x40a0c8\n        v7 = v5 + 16;\n        int64_t v8; // 0x40a0b0\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40a143\n            goto lab_0x40a143;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40a0d9\n    int64_t v10 = *v9; // 0x40a0d9\n    int64_t v11 = *v3; // 0x40a0de\n    int64_t v12 = v11; // 0x40a0e5\n    int64_t v13 = v10; // 0x40a0e5\n    int64_t result2 = v11; // 0x40a0e5\n    int64_t * v14; // 0x40a0fe\n    int64_t v15; // 0x40a0fe\n    int64_t v16; // 0x40a0fa\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40a0f5\n            v16 = *v3;\n        }\n        // 0x40a0fe\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40a0f0\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40a0f5\n                v16 = *v3;\n            }\n            // 0x40a0fe\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40a11d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40a130\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40a13d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40a0cc\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40a0c8\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40a143\n                goto lab_0x40a143;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40a0d9\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40a0f5\n                v16 = *v3;\n            }\n            // 0x40a0fe\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40a0f0\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40a0f5\n                    v16 = *v3;\n                }\n                // 0x40a0fe\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40a11d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40a143\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a160",
            "funcStartAddr": "40a160",
            "funcEndAddr": "40a236",
            "decompiledFuncCode": "int64_t function_40a160(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40a16f\n    uint64_t v2 = *v1; // 0x40a16f\n    int64_t v3 = a1; // 0x40a173\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40a1c3;\n    } else {\n        // 0x40a175\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40a1c3;\n        } else {\n            // 0x40a17c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40a191\n                int64_t v6; // 0x40a188\n                while (v5 == 0) {\n                    // 0x40a188\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40a1c3\n                        goto lab_0x40a1c3;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40a1a8\n                int64_t v8 = v7; // 0x40a1af\n                int64_t v9 = v5; // 0x40a1af\n                int64_t v10; // 0x40a160\n                int64_t v11; // 0x40a1a8\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40a1a0\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40a1a3\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40a1b6\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40a191\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40a188\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40a1c3\n                            goto lab_0x40a1c3;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40a1a3\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40a1a0\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40a1a3\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40a1b1\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40a1c3;\n            } else {\n                goto lab_0x40a1fc;\n            }\n        }\n    }\n  lab_0x40a1c3:\n    // 0x40a1c3\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40a1d0\n        int64_t v14 = v13; // 0x40a1d7\n        int64_t v15 = v2; // 0x40a1d7\n        int64_t v16; // 0x40a1e0\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40a1e0\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40a1f1\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40a1f1\n        int64_t v18 = v15; // 0x40a1fa\n        int64_t v19 = v17; // 0x40a1fa\n        while (v15 > v17) {\n            // 0x40a1d0\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40a1e0\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40a1f1\n                v15 = *v1;\n            }\n            // 0x40a1f1\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40a1fc;\n  lab_0x40a1fc:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40a1fc\n    if (v20 == 0) {\n        // 0x40a221\n        free(NULL);\n        free((int64_t *)a1);\n        return &g60;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40a210\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40a21f\n    while (v21 != 0) {\n        // 0x40a210\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40a221\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g60;\n}\n"
        },
        {
            "funcName": "function_40a240",
            "funcStartAddr": "40a240",
            "funcEndAddr": "40a43a",
            "decompiledFuncCode": "int64_t function_40a240(int64_t a1, uint64_t a2) {\n    // 0x40a240\n    int128_t v1; // 0x40a240\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40a24b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40a240\n        if (a2 < 0) {\n            // 0x40a3c0\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40a3d0\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40a260\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40a269\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40a3b2\n        return 0;\n    }\n    uint64_t nmemb = function_409690(a2); // 0x40a2a3\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40a3b2\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40a2db\n    if (*v6 == nmemb) {\n        // 0x40a3b2\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40a2ed\n    int64_t v7 = (int64_t)mem; // 0x40a2ed\n    int64_t v8 = v7; // bp-104, 0x40a2f2\n    if (mem == NULL) {\n        // 0x40a3b2\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40a34a\n    int64_t v10 = *v9; // 0x40a34a\n    int64_t v11 = function_409920(&v8, a1, 0); // 0x40a353\n    int64_t result = v11 & 0xffffffff; // 0x40a358\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40a314\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40a376\n        function_409920(v13, v12, 1);\n        function_409920(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40a400\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40a3b2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a440",
            "funcStartAddr": "40a440",
            "funcEndAddr": "40a6b4",
            "decompiledFuncCode": "int64_t function_40a440(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40a440\n    int128_t v1; // 0x40a440\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40a440\n    int64_t v5 = function_409780(a1, a2, &v4, 0); // 0x40a461\n    if (v5 != 0) {\n        // 0x40a46e\n        if (a3 != NULL) {\n            // 0x40a475\n            *a3 = v5;\n        }\n        // 0x40a479\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40a488\n    uint64_t v7 = *v6; // 0x40a488\n    int64_t v8; // 0x40a440\n    int64_t v9; // 0x40a440\n    int64_t v10; // 0x40a440\n    int128_t v11; // 0x40a440\n    int128_t v12; // 0x40a440\n    int64_t v13; // 0x40a440\n    if (v7 < 0) {\n        // 0x40a510\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40a520\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40a524\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40a529\n        int128_t v17 = __asm_addss(v15, v15); // 0x40a52d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40a4ab;\n        } else {\n            goto lab_0x40a53a;\n        }\n    } else {\n        // 0x40a491\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40a495\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40a499\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40a49e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40a53a;\n        } else {\n            goto lab_0x40a4ab;\n        }\n    }\n  lab_0x40a4ab:\n    // 0x40a4ab\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40a4b4\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x40a4bc\n    int128_t v23 = v11; // 0x40a4bc\n    if (v13 == 0) {\n        goto lab_0x40a4c2;\n    } else {\n        goto lab_0x40a561;\n    }\n  lab_0x40a53a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40a547\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40a54a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40a553\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40a4c2;\n    } else {\n        goto lab_0x40a561;\n    }\n  lab_0x40a4c2:;\n    int64_t * v28 = (int64_t *)v4; // 0x40a4c7\n    if (*v28 == 0) {\n        // 0x40a5d8\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40a5e1\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40a4d2\n    int64_t v31 = *v30; // 0x40a4d2\n    int64_t * v32; // 0x40a440\n    int64_t v33; // 0x40a440\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40a5fd\n        if (mem == NULL) {\n            // 0x40a479\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40a5fd\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40a4e7\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40a4fd\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40a561:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40a561\n    function_4098a0(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40a56a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40a56e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40a572\n    int128_t v44; // 0x40a440\n    if (v42 < 0) {\n        // 0x40a630\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40a640\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40a580\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40a589\n    int128_t v47; // 0x40a440\n    int64_t v48; // 0x40a440\n    if (v46 < 0) {\n        // 0x40a610\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40a61d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40a620\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40a592\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40a596\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40a59b\n    __asm_comiss_2(v47, __asm_mulss_4(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40a5ab\n        int128_t v53 = v52; // 0x40a5b4\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40a650\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x40a5ba\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40a479\n        return 0xffffffff;\n    }\n    goto lab_0x40a4c2;\n}\n"
        },
        {
            "funcName": "function_40a6c0",
            "funcStartAddr": "40a6c0",
            "funcEndAddr": "40a6fb",
            "decompiledFuncCode": "int64_t function_40a6c0(int64_t a1, int64_t a2) {\n    // 0x40a6c0\n    int64_t v1; // bp-16, 0x40a6c0\n    int64_t v2; // 0x40a6c0\n    int32_t v3 = function_40a440(a1, a2, &v1, v2); // 0x40a6d2\n    if (v3 == -1) {\n        // 0x40a6e0\n        return 0;\n    }\n    // 0x40a6d7\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40a700",
            "funcStartAddr": "40a700",
            "funcEndAddr": "40a8d7",
            "decompiledFuncCode": "int64_t function_40a700(int64_t a1) {\n    // 0x40a700\n    int128_t v1; // 0x40a700\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40a700\n    int64_t v5; // 0x40a700\n    int64_t result = function_409780(a1, v5, &v4, 1); // 0x40a715\n    if (result == 0) {\n        // 0x40a732\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40a727\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40a732\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40a740\n    uint64_t v8 = *v7 - 1; // 0x40a744\n    *v7 = v8;\n    int64_t v9; // 0x40a700\n    int64_t v10; // 0x40a700\n    int64_t v11; // 0x40a700\n    int128_t v12; // 0x40a700\n    int128_t v13; // 0x40a700\n    int64_t v14; // 0x40a700\n    if (v8 < 0) {\n        // 0x40a830\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40a840\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40a844\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40a849\n        int128_t v18 = __asm_addss(v16, v16); // 0x40a84d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40a76c;\n        } else {\n            goto lab_0x40a85a;\n        }\n    } else {\n        // 0x40a752\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40a756\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40a75a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40a75f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40a85a;\n        } else {\n            goto lab_0x40a76c;\n        }\n    }\n  lab_0x40a76c:\n    // 0x40a76c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40a770\n    int64_t v23 = v14; // 0x40a770\n    int128_t v24 = v12; // 0x40a770\n    int64_t v25 = v10; // 0x40a770\n    int128_t v26 = v22; // 0x40a770\n    goto lab_0x40a775;\n  lab_0x40a85a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40a867\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40a86a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40a775;\n  lab_0x40a775:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40a775\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x40a732\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40a77e\n    function_4098a0(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40a787\n    int64_t v31 = *(int64_t *)v29; // 0x40a78b\n    int128_t v32; // 0x40a700\n    if (v30 < 0) {\n        // 0x40a8a0\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40a8b0\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40a798\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40a7a1\n    int128_t v35; // 0x40a700\n    int64_t v36; // 0x40a700\n    if (v34 < 0) {\n        // 0x40a880\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40a88d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40a890\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40a7ae\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40a7b2\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40a7b7\n    __asm_comiss_2(__asm_mulss_4(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40a732\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40a7c8\n    int128_t v41 = v40; // 0x40a7d1\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40a7d3\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40a7d8\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40a8c8\n    if ((char)function_40a240(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40a732\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40a7fa\n    if (*v43 != 0) {\n        int64_t v44; // 0x40a700\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40a808\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40a819\n    *v43 = 0;\n    // 0x40a732\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a8e0",
            "funcStartAddr": "40a8e0",
            "funcEndAddr": "40a8fb",
            "decompiledFuncCode": "int64_t function_40a8e0(int64_t a1, int64_t a2) {\n    // 0x40a8e0\n    *(int64_t *)(a1 + 20) = 0;\n    *(char *)(a1 + 28) = 1;\n    int32_t v1 = a2; // 0x40a8ec\n    *(int32_t *)a1 = v1;\n    *(int32_t *)(a1 + 4) = v1;\n    *(int32_t *)(a1 + 8) = v1;\n    *(int32_t *)(a1 + 12) = v1;\n    *(int32_t *)(a1 + 16) = v1;\n    int64_t result; // 0x40a8e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a900",
            "funcStartAddr": "40a900",
            "funcEndAddr": "40a905",
            "decompiledFuncCode": "int64_t function_40a900(int64_t a1) {\n    // 0x40a900\n    return (int64_t)*(char *)(a1 + 28);\n}\n"
        },
        {
            "funcName": "function_40a910",
            "funcStartAddr": "40a910",
            "funcEndAddr": "40a945",
            "decompiledFuncCode": "int64_t function_40a910(int64_t a1, int32_t a2) {\n    char * v1 = (char *)(a1 + 28); // 0x40a910\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x40a914\n    int32_t v3 = (int32_t)(*v1 ^ 1); // 0x40a91d\n    uint32_t v4 = (*v2 + v3) % 4; // 0x40a91f\n    int32_t * v5 = (int32_t *)((int64_t)(4 * v4) + a1); // 0x40a928\n    *v5 = a2;\n    int32_t * v6 = (int32_t *)(a1 + 24); // 0x40a92e\n    int32_t v7 = *v6; // 0x40a92e\n    *v2 = v4;\n    if (v7 == v4) {\n        // 0x40a938\n        *v6 = (v7 + v3) % 4;\n    }\n    // 0x40a940\n    *v1 = 0;\n    return (int64_t)*v5;\n}\n"
        },
        {
            "funcName": "function_40a950",
            "funcStartAddr": "40a950",
            "funcEndAddr": "40a991",
            "decompiledFuncCode": "int64_t function_40a950(int64_t a1) {\n    char * v1 = (char *)(a1 + 28); // 0x40a954\n    if (*v1 != 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x40a95e\n    uint32_t v3 = *v2; // 0x40a95e\n    int32_t * v4 = (int32_t *)(4 * (int64_t)v3 + a1); // 0x40a96b\n    int64_t result = (int64_t)*v4; // 0x40a96b\n    *v4 = *(int32_t *)(a1 + 16);\n    if (v3 == *(int32_t *)(a1 + 24)) {\n        // 0x40a988\n        *v1 = 1;\n        return result;\n    }\n    // 0x40a974\n    *v2 = (v3 + 3) % 4;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a9a0",
            "funcStartAddr": "40a9a0",
            "funcEndAddr": "40af02",
            "decompiledFuncCode": "int64_t function_40a9a0(void) {\n    char * v1 = nl_langinfo(14); // 0x40a9b6\n    char * v2 = g55; // 0x40a9bb\n    char * v3; // 0x40a9a0\n    int64_t v4; // 0x40a9a0\n    int64_t v5; // 0x40a9a0\n    int64_t v6; // 0x40a9a0\n    int64_t v7; // 0x40a9a0\n    int32_t size; // 0x40a9a0\n    int32_t size2; // 0x40a9a0\n    int32_t len; // 0x40aa72\n    int64_t v8; // 0x40aa72\n    char * env_val; // 0x40aa5d\n    if (v2 == NULL) {\n        // 0x40aa58\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40aac5;\n        } else {\n            // 0x40aa6a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40aac5;\n            } else {\n                // 0x40aa6f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40aa5d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40aef5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40aac5;\n                    } else {\n                        // 0x40ae69\n                        size2 = len + 14;\n                        goto lab_0x40aa8b;\n                    }\n                } else {\n                    goto lab_0x40aa8b;\n                }\n            }\n        }\n    } else {\n        // 0x40a9a0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40a9da;\n    }\n  lab_0x40ad0c:;\n    // 0x40ad0c\n    struct _IO_FILE * stream; // 0x40ab4b\n    int32_t v10 = __uflow(stream); // 0x40ad0f\n    int64_t v11; // 0x40a9a0\n    int64_t v12 = v11; // 0x40ad19\n    int64_t v13; // 0x40a9a0\n    int64_t v14 = v13; // 0x40ad19\n    int32_t v15 = v10; // 0x40ad19\n    int64_t v16; // 0x40a9a0\n    int64_t v17 = v16; // 0x40ad19\n    int64_t v18 = v11; // 0x40ad19\n    int64_t v19 = v13; // 0x40ad19\n    int64_t v20 = v16; // 0x40ad19\n    if (v10 == -1) {\n        // break -> 0x40ad1f\n        goto lab_0x40ad1f;\n    }\n    goto lab_0x40ab99;\n  lab_0x40ab8e:;\n    // 0x40ab8e\n    int64_t v90; // 0x40a9a0\n    int64_t * v32; // 0x40ab80\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40a9a0\n    v12 = v89;\n    int64_t v91; // 0x40a9a0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40a9a0\n    v17 = v92;\n    goto lab_0x40ab99;\n  lab_0x40ab99:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40a9a0\n    int32_t v25; // bp-120, 0x40a9a0\n    int32_t v26; // bp-184, 0x40a9a0\n    int64_t v27; // 0x40ab4b\n    int64_t v28; // 0x40ab68\n    int64_t v29; // 0x40ab6d\n    int64_t * v30; // 0x40ab84\n    switch (c) {\n        case 32: {\n            goto lab_0x40ab80;\n        }\n        case 10: {\n            goto lab_0x40ab80;\n        }\n        case 9: {\n            goto lab_0x40ab80;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40ad71\n            int32_t v33; // 0x40a9a0\n            char v34; // 0x40a9a0\n            int32_t v35; // 0x40ad7e\n            if (v31 < *v30) {\n                // 0x40ad50\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40ad7b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40ad71\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40ad50\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40ad7b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40ad60\n                v36 = v33;\n            }\n            // 0x40ae4f\n            if (v36 == -1) {\n                // break -> 0x40ad1f\n                break;\n            }\n            goto lab_0x40ab80;\n        }\n        default: {\n            // 0x40abaf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40ad1f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40abd8\n            int64_t v39 = v37 + 4; // 0x40abda\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40abe6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40abe8\n            while (v41 == 0) {\n                // 0x40abd8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40ac06\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40ac12\n            int64_t v45 = v43 + 4; // 0x40ac14\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40ac20\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40ac22\n            while (v47 == 0) {\n                // 0x40ac12\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40ac0f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40ac38\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40ac48\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40ac4c\n            int64_t v52 = v51 + v48; // 0x40ac55\n            int64_t * mem; // 0x40a9a0\n            int64_t v53; // 0x40a9a0\n            int64_t v54; // 0x40a9a0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40ad8b\n                int64_t v56 = v55 + 3; // 0x40ad97\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40ac71\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40ac80\n            if (mem == NULL) {\n                // 0x40aeac\n                free((int64_t *)v21);\n                function_40afb0(v27, v53);\n                v24 = (int64_t)&g14;\n                goto lab_0x40ab24;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40ac98\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40aca2\n            uint32_t v62 = (int32_t)v59; // 0x40aca5\n            int64_t v63; // 0x40a9a0\n            if (v62 >= 8) {\n                // 0x40adb4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40adce\n                int64_t v66 = v61 - v65; // 0x40add2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40addd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40adee\n                    int64_t v70 = v69 & 0xffffffff; // 0x40adee\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40adeb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40ae7f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40acb7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40acbb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40accb\n            int64_t v74 = v60 - 1; // 0x40accf\n            uint32_t v75 = (int32_t)v73; // 0x40acd4\n            int64_t v76; // 0x40a9a0\n            if (v75 >= 8) {\n                // 0x40ae02\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40ae0c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40ae1c\n                int64_t v80 = v74 - v79; // 0x40ae20\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40ae2b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40ae3b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40ae39\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40ae96\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40ae9e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40ace6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40acea\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40aee3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40acfe\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40ab8e;\n            } else {\n                goto lab_0x40ad0c;\n            }\n        }\n    }\n  lab_0x40ab80:;\n    int64_t v93 = v23; // 0x40a9a0\n    int64_t v94 = v22; // 0x40a9a0\n    int64_t v95 = v21; // 0x40a9a0\n    goto lab_0x40ab80_2;\n  lab_0x40aac5:;\n    int64_t * mem3 = malloc(size); // 0x40aac5\n    int64_t v97 = (int64_t)&g14; // 0x40aad0\n    int64_t v98; // 0x40a9a0\n    int64_t path; // 0x40a9a0\n    if (mem3 == NULL) {\n        goto lab_0x40aaa2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40aac5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40aae6;\n    }\n  lab_0x40a9da:;\n    int64_t str = v1 == NULL ? (int64_t)&g14 : (int64_t)v1; // 0x40a9cd\n    char v100 = *v3; // 0x40a9da\n    int64_t v101; // 0x40a9a0\n    if (v100 == 0) {\n        // 0x40aa34\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40a9a0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40a9a0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40aa20\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40aa27;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40a9f0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40a9fd\n        char v107 = *(char *)v106; // 0x40aa02\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40aa34\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40aa0b\n    v104 = v103 + 1;\n  lab_0x40aa27:\n    // 0x40aa34\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40aaa2:;\n    char * v108 = (char *)v97;\n    g55 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40a9da;\n  lab_0x40aae6:;\n    int64_t v109 = v98 + path; // 0x40aae6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40ab12\n    v24 = (int64_t)&g14;\n    if (fd >= 0) {\n        // 0x40ab41\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40ae72\n            close(fd);\n            v24 = (int64_t)&g14;\n        } else {\n            // 0x40ab65\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40ab80_2:;\n                uint64_t v96 = *v32; // 0x40ab80\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40ad0c;\n                } else {\n                    goto lab_0x40ab8e;\n                }\n            }\n          lab_0x40ad1f:\n            // 0x40ad1f\n            function_40afb0(v27, v19);\n            v24 = (int64_t)&g14;\n            if (v18 != 0) {\n                // 0x40ad3e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40ab24;\n  lab_0x40aa8b:;\n    int64_t * mem4 = malloc(size2); // 0x40aa8b\n    v97 = (int64_t)&g14;\n    if (mem4 != NULL) {\n        // 0x40ab31\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40aae6;\n    } else {\n        goto lab_0x40aaa2;\n    }\n  lab_0x40ab24:\n    // 0x40ab24\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40aaa2;\n}\n"
        },
        {
            "funcName": "function_40af10",
            "funcStartAddr": "40af10",
            "funcEndAddr": "40af5a",
            "decompiledFuncCode": "int64_t function_40af10(int64_t fd, int64_t path, int32_t oflag, int64_t a4) {\n    uint32_t v1 = openat((int32_t)fd, (char *)path, oflag); // 0x40af22\n    return function_40af60((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_40af60",
            "funcStartAddr": "40af60",
            "funcEndAddr": "40afae",
            "decompiledFuncCode": "int64_t function_40af60(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40af6c\n    if (fd >= 3) {\n        // 0x40af71\n        return a1 & 0xffffffff;\n    }\n    // 0x40af80\n    int64_t v1; // 0x40af60\n    int64_t v2 = function_40b170(a1, v1); // 0x40af80\n    int32_t * v3 = __errno_location(); // 0x40af88\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40afb0",
            "funcStartAddr": "40afb0",
            "funcEndAddr": "40b02b",
            "decompiledFuncCode": "int64_t function_40afb0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40afb7\n    if (fileno(stream) < 0) {\n        // 0x40b017\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40afca\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40affb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40b017\n            return fclose(stream);\n        }\n    }\n    // 0x40afcc\n    if ((int32_t)function_406300(a1, v1) == 0) {\n        // 0x40b017\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40afd8\n    int32_t v3 = *v2; // 0x40afe0\n    int64_t result = fclose(stream); // 0x40afee\n    if (v3 != 0) {\n        // 0x40b020\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40aff0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b030",
            "funcStartAddr": "40b030",
            "funcEndAddr": "40b165",
            "decompiledFuncCode": "int64_t function_40b030(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x40b060\n    if (cmd != 1030) {\n        // 0x40b110\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40b06c\n    int64_t v2; // 0x40b030\n    if (g56 < 0) {\n        int64_t v3 = function_40b030(fd, 0, v1, a4); // 0x40b0b4\n        int64_t v4 = v3 & 0xffffffff; // 0x40b0b9\n        if ((int32_t)v3 < 0) {\n            // 0x40b0a0\n            return v4 & 0xffffffff;\n        }\n        // 0x40b0bf\n        v2 = v4;\n        if (g56 != -1) {\n            // 0x40b0a0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40b087\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40b096\n            g56 = 1;\n            // 0x40b0a0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40b030(fd & 0xffffffff, 0, v1, a4); // 0x40b147\n        int64_t v7 = v6 & 0xffffffff; // 0x40b14c\n        if ((int32_t)v6 < 0) {\n            // 0x40b0a0\n            return v7 & 0xffffffff;\n        }\n        // 0x40b156\n        g56 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40b0cf\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40b0da\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40b0a0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40b0f2\n    close(fd2);\n    // 0x40b0a0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40b170",
            "funcStartAddr": "40b170",
            "funcEndAddr": "40b17e",
            "decompiledFuncCode": "int64_t function_40b170(int64_t a1, int64_t a2) {\n    // 0x40b170\n    int64_t v1; // 0x40b170\n    return function_40b030(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40b180",
            "funcStartAddr": "40b180",
            "funcEndAddr": "40b1dd",
            "decompiledFuncCode": "int64_t function_40b180(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40b180\n    return function_401948();\n}\n"
        },
        {
            "funcName": "function_40b1e0",
            "funcStartAddr": "40b1e0",
            "funcEndAddr": "40b1e1",
            "decompiledFuncCode": "int64_t function_40b1e0(void) {\n    // 0x40b1e0\n    int64_t result; // 0x40b1e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b1f0",
            "funcStartAddr": "40b1f0",
            "funcEndAddr": "40b208",
            "decompiledFuncCode": "int64_t function_40b1f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40b1f0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g21);\n}\n"
        },
        {
            "funcName": "function_40b208",
            "funcStartAddr": "40b208",
            "funcEndAddr": "40b228",
            "decompiledFuncCode": "int64_t function_40b208(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g17; // 0x40b212\n    while (*(int64_t *)v1 != -1) {\n        // 0x40b213\n        v1 -= 8;\n    }\n    // 0x40b224\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_rm.elf"
}